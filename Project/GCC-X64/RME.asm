
./Object/RME:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80100000 <__RME_X64_Mboot_Header>:
ffffffff80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
ffffffff80100006:	01 00                	add    %eax,(%rax)
ffffffff80100008:	fe 4f 51             	decb   0x51(%rdi)
ffffffff8010000b:	e4 00                	in     $0x0,%al
ffffffff8010000d:	00 10                	add    %dl,(%rax)
ffffffff8010000f:	00 00                	add    %al,(%rax)
ffffffff80100011:	00 10                	add    %dl,(%rax)
ffffffff80100013:	00 00                	add    %al,(%rax)
ffffffff80100015:	b0 22                	mov    $0x22,%al
ffffffff80100017:	00 58 47             	add    %bl,0x47(%rax)
ffffffff8010001a:	23 00                	and    (%rax),%eax
ffffffff8010001c:	00 80 10 00 e9 db    	add    %al,-0x2416fff0(%rax)
ffffffff80100022:	0f 00 00             	sldt   (%rax)
ffffffff80100025:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010002c:	00 00 00 00 
ffffffff80100030:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100037:	00 00 00 00 
ffffffff8010003b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100042:	00 00 00 00 
ffffffff80100046:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010004d:	00 00 00 00 
ffffffff80100051:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100058:	00 00 00 00 
ffffffff8010005c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100063:	00 00 00 00 
ffffffff80100067:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010006e:	00 00 00 00 
ffffffff80100072:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100079:	00 00 00 00 
ffffffff8010007d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100084:	00 00 00 00 
ffffffff80100088:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010008f:	00 00 00 00 
ffffffff80100093:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010009a:	00 00 00 00 
ffffffff8010009e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000a5:	00 00 00 00 
ffffffff801000a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000b0:	00 00 00 00 
ffffffff801000b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000bb:	00 00 00 00 
ffffffff801000bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000c6:	00 00 00 00 
ffffffff801000ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000d1:	00 00 00 00 
ffffffff801000d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000dc:	00 00 00 00 
ffffffff801000e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000e7:	00 00 00 00 
ffffffff801000eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000f2:	00 00 00 00 
ffffffff801000f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000fd:	00 00 00 00 
ffffffff80100101:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100108:	00 00 00 00 
ffffffff8010010c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100113:	00 00 00 00 
ffffffff80100117:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010011e:	00 00 00 00 
ffffffff80100122:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100129:	00 00 00 00 
ffffffff8010012d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100134:	00 00 00 00 
ffffffff80100138:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010013f:	00 00 00 00 
ffffffff80100143:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010014a:	00 00 00 00 
ffffffff8010014e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100155:	00 00 00 00 
ffffffff80100159:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100160:	00 00 00 00 
ffffffff80100164:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010016b:	00 00 00 00 
ffffffff8010016f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100176:	00 00 00 00 
ffffffff8010017a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100181:	00 00 00 00 
ffffffff80100185:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010018c:	00 00 00 00 
ffffffff80100190:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100197:	00 00 00 00 
ffffffff8010019b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001a2:	00 00 00 00 
ffffffff801001a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ad:	00 00 00 00 
ffffffff801001b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001b8:	00 00 00 00 
ffffffff801001bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001c3:	00 00 00 00 
ffffffff801001c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ce:	00 00 00 00 
ffffffff801001d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001d9:	00 00 00 00 
ffffffff801001dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001e4:	00 00 00 00 
ffffffff801001e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ef:	00 00 00 00 
ffffffff801001f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001fa:	00 00 00 00 
ffffffff801001fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100205:	00 00 00 00 
ffffffff80100209:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100210:	00 00 00 00 
ffffffff80100214:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010021b:	00 00 00 00 
ffffffff8010021f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100226:	00 00 00 00 
ffffffff8010022a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100231:	00 00 00 00 
ffffffff80100235:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010023c:	00 00 00 00 
ffffffff80100240:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100247:	00 00 00 00 
ffffffff8010024b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100252:	00 00 00 00 
ffffffff80100256:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010025d:	00 00 00 00 
ffffffff80100261:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100268:	00 00 00 00 
ffffffff8010026c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100273:	00 00 00 00 
ffffffff80100277:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010027e:	00 00 00 00 
ffffffff80100282:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100289:	00 00 00 00 
ffffffff8010028d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100294:	00 00 00 00 
ffffffff80100298:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010029f:	00 00 00 00 
ffffffff801002a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002aa:	00 00 00 00 
ffffffff801002ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002b5:	00 00 00 00 
ffffffff801002b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002c0:	00 00 00 00 
ffffffff801002c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002cb:	00 00 00 00 
ffffffff801002cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002d6:	00 00 00 00 
ffffffff801002da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002e1:	00 00 00 00 
ffffffff801002e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ec:	00 00 00 00 
ffffffff801002f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002f7:	00 00 00 00 
ffffffff801002fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100302:	00 00 00 00 
ffffffff80100306:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010030d:	00 00 00 00 
ffffffff80100311:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100318:	00 00 00 00 
ffffffff8010031c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100323:	00 00 00 00 
ffffffff80100327:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010032e:	00 00 00 00 
ffffffff80100332:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100339:	00 00 00 00 
ffffffff8010033d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100344:	00 00 00 00 
ffffffff80100348:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010034f:	00 00 00 00 
ffffffff80100353:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010035a:	00 00 00 00 
ffffffff8010035e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100365:	00 00 00 00 
ffffffff80100369:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100370:	00 00 00 00 
ffffffff80100374:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010037b:	00 00 00 00 
ffffffff8010037f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100386:	00 00 00 00 
ffffffff8010038a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100391:	00 00 00 00 
ffffffff80100395:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010039c:	00 00 00 00 
ffffffff801003a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003a7:	00 00 00 00 
ffffffff801003ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003b2:	00 00 00 00 
ffffffff801003b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003bd:	00 00 00 00 
ffffffff801003c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003c8:	00 00 00 00 
ffffffff801003cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003d3:	00 00 00 00 
ffffffff801003d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003de:	00 00 00 00 
ffffffff801003e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003e9:	00 00 00 00 
ffffffff801003ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003f4:	00 00 00 00 
ffffffff801003f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003ff:	00 00 00 00 
ffffffff80100403:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010040a:	00 00 00 00 
ffffffff8010040e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100415:	00 00 00 00 
ffffffff80100419:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100420:	00 00 00 00 
ffffffff80100424:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010042b:	00 00 00 00 
ffffffff8010042f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100436:	00 00 00 00 
ffffffff8010043a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100441:	00 00 00 00 
ffffffff80100445:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010044c:	00 00 00 00 
ffffffff80100450:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100457:	00 00 00 00 
ffffffff8010045b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100462:	00 00 00 00 
ffffffff80100466:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010046d:	00 00 00 00 
ffffffff80100471:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100478:	00 00 00 00 
ffffffff8010047c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100483:	00 00 00 00 
ffffffff80100487:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010048e:	00 00 00 00 
ffffffff80100492:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100499:	00 00 00 00 
ffffffff8010049d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004a4:	00 00 00 00 
ffffffff801004a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004af:	00 00 00 00 
ffffffff801004b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004ba:	00 00 00 00 
ffffffff801004be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004c5:	00 00 00 00 
ffffffff801004c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004d0:	00 00 00 00 
ffffffff801004d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004db:	00 00 00 00 
ffffffff801004df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004e6:	00 00 00 00 
ffffffff801004ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004f1:	00 00 00 00 
ffffffff801004f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004fc:	00 00 00 00 
ffffffff80100500:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100507:	00 00 00 00 
ffffffff8010050b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100512:	00 00 00 00 
ffffffff80100516:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010051d:	00 00 00 00 
ffffffff80100521:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100528:	00 00 00 00 
ffffffff8010052c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100533:	00 00 00 00 
ffffffff80100537:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010053e:	00 00 00 00 
ffffffff80100542:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100549:	00 00 00 00 
ffffffff8010054d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100554:	00 00 00 00 
ffffffff80100558:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010055f:	00 00 00 00 
ffffffff80100563:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010056a:	00 00 00 00 
ffffffff8010056e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100575:	00 00 00 00 
ffffffff80100579:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100580:	00 00 00 00 
ffffffff80100584:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010058b:	00 00 00 00 
ffffffff8010058f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100596:	00 00 00 00 
ffffffff8010059a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005a1:	00 00 00 00 
ffffffff801005a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ac:	00 00 00 00 
ffffffff801005b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005b7:	00 00 00 00 
ffffffff801005bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005c2:	00 00 00 00 
ffffffff801005c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005cd:	00 00 00 00 
ffffffff801005d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005d8:	00 00 00 00 
ffffffff801005dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005e3:	00 00 00 00 
ffffffff801005e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ee:	00 00 00 00 
ffffffff801005f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005f9:	00 00 00 00 
ffffffff801005fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100604:	00 00 00 00 
ffffffff80100608:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010060f:	00 00 00 00 
ffffffff80100613:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010061a:	00 00 00 00 
ffffffff8010061e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100625:	00 00 00 00 
ffffffff80100629:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100630:	00 00 00 00 
ffffffff80100634:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010063b:	00 00 00 00 
ffffffff8010063f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100646:	00 00 00 00 
ffffffff8010064a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100651:	00 00 00 00 
ffffffff80100655:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010065c:	00 00 00 00 
ffffffff80100660:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100667:	00 00 00 00 
ffffffff8010066b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100672:	00 00 00 00 
ffffffff80100676:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010067d:	00 00 00 00 
ffffffff80100681:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100688:	00 00 00 00 
ffffffff8010068c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100693:	00 00 00 00 
ffffffff80100697:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010069e:	00 00 00 00 
ffffffff801006a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006a9:	00 00 00 00 
ffffffff801006ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006b4:	00 00 00 00 
ffffffff801006b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006bf:	00 00 00 00 
ffffffff801006c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006ca:	00 00 00 00 
ffffffff801006ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006d5:	00 00 00 00 
ffffffff801006d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006e0:	00 00 00 00 
ffffffff801006e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006eb:	00 00 00 00 
ffffffff801006ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006f6:	00 00 00 00 
ffffffff801006fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100701:	00 00 00 00 
ffffffff80100705:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010070c:	00 00 00 00 
ffffffff80100710:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100717:	00 00 00 00 
ffffffff8010071b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100722:	00 00 00 00 
ffffffff80100726:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010072d:	00 00 00 00 
ffffffff80100731:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100738:	00 00 00 00 
ffffffff8010073c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100743:	00 00 00 00 
ffffffff80100747:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010074e:	00 00 00 00 
ffffffff80100752:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100759:	00 00 00 00 
ffffffff8010075d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100764:	00 00 00 00 
ffffffff80100768:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010076f:	00 00 00 00 
ffffffff80100773:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010077a:	00 00 00 00 
ffffffff8010077e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100785:	00 00 00 00 
ffffffff80100789:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100790:	00 00 00 00 
ffffffff80100794:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010079b:	00 00 00 00 
ffffffff8010079f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007a6:	00 00 00 00 
ffffffff801007aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007b1:	00 00 00 00 
ffffffff801007b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007bc:	00 00 00 00 
ffffffff801007c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007c7:	00 00 00 00 
ffffffff801007cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007d2:	00 00 00 00 
ffffffff801007d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007dd:	00 00 00 00 
ffffffff801007e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007e8:	00 00 00 00 
ffffffff801007ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007f3:	00 00 00 00 
ffffffff801007f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007fe:	00 00 00 00 
ffffffff80100802:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100809:	00 00 00 00 
ffffffff8010080d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100814:	00 00 00 00 
ffffffff80100818:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010081f:	00 00 00 00 
ffffffff80100823:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010082a:	00 00 00 00 
ffffffff8010082e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100835:	00 00 00 00 
ffffffff80100839:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100840:	00 00 00 00 
ffffffff80100844:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010084b:	00 00 00 00 
ffffffff8010084f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100856:	00 00 00 00 
ffffffff8010085a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100861:	00 00 00 00 
ffffffff80100865:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010086c:	00 00 00 00 
ffffffff80100870:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100877:	00 00 00 00 
ffffffff8010087b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100882:	00 00 00 00 
ffffffff80100886:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010088d:	00 00 00 00 
ffffffff80100891:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100898:	00 00 00 00 
ffffffff8010089c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008a3:	00 00 00 00 
ffffffff801008a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008ae:	00 00 00 00 
ffffffff801008b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008b9:	00 00 00 00 
ffffffff801008bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008c4:	00 00 00 00 
ffffffff801008c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008cf:	00 00 00 00 
ffffffff801008d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008da:	00 00 00 00 
ffffffff801008de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008e5:	00 00 00 00 
ffffffff801008e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008f0:	00 00 00 00 
ffffffff801008f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008fb:	00 00 00 00 
ffffffff801008ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100906:	00 00 00 00 
ffffffff8010090a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100911:	00 00 00 00 
ffffffff80100915:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010091c:	00 00 00 00 
ffffffff80100920:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100927:	00 00 00 00 
ffffffff8010092b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100932:	00 00 00 00 
ffffffff80100936:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010093d:	00 00 00 00 
ffffffff80100941:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100948:	00 00 00 00 
ffffffff8010094c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100953:	00 00 00 00 
ffffffff80100957:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010095e:	00 00 00 00 
ffffffff80100962:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100969:	00 00 00 00 
ffffffff8010096d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100974:	00 00 00 00 
ffffffff80100978:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010097f:	00 00 00 00 
ffffffff80100983:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010098a:	00 00 00 00 
ffffffff8010098e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100995:	00 00 00 00 
ffffffff80100999:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009a0:	00 00 00 00 
ffffffff801009a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ab:	00 00 00 00 
ffffffff801009af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009b6:	00 00 00 00 
ffffffff801009ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009c1:	00 00 00 00 
ffffffff801009c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009cc:	00 00 00 00 
ffffffff801009d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009d7:	00 00 00 00 
ffffffff801009db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009e2:	00 00 00 00 
ffffffff801009e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ed:	00 00 00 00 
ffffffff801009f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009f8:	00 00 00 00 
ffffffff801009fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a03:	00 00 00 00 
ffffffff80100a07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a0e:	00 00 00 00 
ffffffff80100a12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a19:	00 00 00 00 
ffffffff80100a1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a24:	00 00 00 00 
ffffffff80100a28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a2f:	00 00 00 00 
ffffffff80100a33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a3a:	00 00 00 00 
ffffffff80100a3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a45:	00 00 00 00 
ffffffff80100a49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a50:	00 00 00 00 
ffffffff80100a54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a5b:	00 00 00 00 
ffffffff80100a5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a66:	00 00 00 00 
ffffffff80100a6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a71:	00 00 00 00 
ffffffff80100a75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a7c:	00 00 00 00 
ffffffff80100a80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a87:	00 00 00 00 
ffffffff80100a8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a92:	00 00 00 00 
ffffffff80100a96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a9d:	00 00 00 00 
ffffffff80100aa1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aa8:	00 00 00 00 
ffffffff80100aac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ab3:	00 00 00 00 
ffffffff80100ab7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100abe:	00 00 00 00 
ffffffff80100ac2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ac9:	00 00 00 00 
ffffffff80100acd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ad4:	00 00 00 00 
ffffffff80100ad8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100adf:	00 00 00 00 
ffffffff80100ae3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aea:	00 00 00 00 
ffffffff80100aee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100af5:	00 00 00 00 
ffffffff80100af9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b00:	00 00 00 00 
ffffffff80100b04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b0b:	00 00 00 00 
ffffffff80100b0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b16:	00 00 00 00 
ffffffff80100b1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b21:	00 00 00 00 
ffffffff80100b25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b2c:	00 00 00 00 
ffffffff80100b30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b37:	00 00 00 00 
ffffffff80100b3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b42:	00 00 00 00 
ffffffff80100b46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b4d:	00 00 00 00 
ffffffff80100b51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b58:	00 00 00 00 
ffffffff80100b5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b63:	00 00 00 00 
ffffffff80100b67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b6e:	00 00 00 00 
ffffffff80100b72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b79:	00 00 00 00 
ffffffff80100b7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b84:	00 00 00 00 
ffffffff80100b88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b8f:	00 00 00 00 
ffffffff80100b93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b9a:	00 00 00 00 
ffffffff80100b9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ba5:	00 00 00 00 
ffffffff80100ba9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bb0:	00 00 00 00 
ffffffff80100bb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bbb:	00 00 00 00 
ffffffff80100bbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bc6:	00 00 00 00 
ffffffff80100bca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bd1:	00 00 00 00 
ffffffff80100bd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bdc:	00 00 00 00 
ffffffff80100be0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100be7:	00 00 00 00 
ffffffff80100beb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bf2:	00 00 00 00 
ffffffff80100bf6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bfd:	00 00 00 00 
ffffffff80100c01:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c08:	00 00 00 00 
ffffffff80100c0c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c13:	00 00 00 00 
ffffffff80100c17:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c1e:	00 00 00 00 
ffffffff80100c22:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c29:	00 00 00 00 
ffffffff80100c2d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c34:	00 00 00 00 
ffffffff80100c38:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c3f:	00 00 00 00 
ffffffff80100c43:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c4a:	00 00 00 00 
ffffffff80100c4e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c55:	00 00 00 00 
ffffffff80100c59:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c60:	00 00 00 00 
ffffffff80100c64:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c6b:	00 00 00 00 
ffffffff80100c6f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c76:	00 00 00 00 
ffffffff80100c7a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c81:	00 00 00 00 
ffffffff80100c85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c8c:	00 00 00 00 
ffffffff80100c90:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c97:	00 00 00 00 
ffffffff80100c9b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ca2:	00 00 00 00 
ffffffff80100ca6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cad:	00 00 00 00 
ffffffff80100cb1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cb8:	00 00 00 00 
ffffffff80100cbc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cc3:	00 00 00 00 
ffffffff80100cc7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cce:	00 00 00 00 
ffffffff80100cd2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cd9:	00 00 00 00 
ffffffff80100cdd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ce4:	00 00 00 00 
ffffffff80100ce8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cef:	00 00 00 00 
ffffffff80100cf3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cfa:	00 00 00 00 
ffffffff80100cfe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d05:	00 00 00 00 
ffffffff80100d09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d10:	00 00 00 00 
ffffffff80100d14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d1b:	00 00 00 00 
ffffffff80100d1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d26:	00 00 00 00 
ffffffff80100d2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d31:	00 00 00 00 
ffffffff80100d35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d3c:	00 00 00 00 
ffffffff80100d40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d47:	00 00 00 00 
ffffffff80100d4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d52:	00 00 00 00 
ffffffff80100d56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d5d:	00 00 00 00 
ffffffff80100d61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d68:	00 00 00 00 
ffffffff80100d6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d73:	00 00 00 00 
ffffffff80100d77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d7e:	00 00 00 00 
ffffffff80100d82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d89:	00 00 00 00 
ffffffff80100d8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d94:	00 00 00 00 
ffffffff80100d98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d9f:	00 00 00 00 
ffffffff80100da3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100daa:	00 00 00 00 
ffffffff80100dae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100db5:	00 00 00 00 
ffffffff80100db9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dc0:	00 00 00 00 
ffffffff80100dc4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dcb:	00 00 00 00 
ffffffff80100dcf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dd6:	00 00 00 00 
ffffffff80100dda:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100de1:	00 00 00 00 
ffffffff80100de5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dec:	00 00 00 00 
ffffffff80100df0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100df7:	00 00 00 00 
ffffffff80100dfb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e02:	00 00 00 00 
ffffffff80100e06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e0d:	00 00 00 00 
ffffffff80100e11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e18:	00 00 00 00 
ffffffff80100e1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e23:	00 00 00 00 
ffffffff80100e27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e2e:	00 00 00 00 
ffffffff80100e32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e39:	00 00 00 00 
ffffffff80100e3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e44:	00 00 00 00 
ffffffff80100e48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e4f:	00 00 00 00 
ffffffff80100e53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e5a:	00 00 00 00 
ffffffff80100e5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e65:	00 00 00 00 
ffffffff80100e69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e70:	00 00 00 00 
ffffffff80100e74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e7b:	00 00 00 00 
ffffffff80100e7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e86:	00 00 00 00 
ffffffff80100e8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e91:	00 00 00 00 
ffffffff80100e95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e9c:	00 00 00 00 
ffffffff80100ea0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ea7:	00 00 00 00 
ffffffff80100eab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eb2:	00 00 00 00 
ffffffff80100eb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ebd:	00 00 00 00 
ffffffff80100ec1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ec8:	00 00 00 00 
ffffffff80100ecc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ed3:	00 00 00 00 
ffffffff80100ed7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ede:	00 00 00 00 
ffffffff80100ee2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ee9:	00 00 00 00 
ffffffff80100eed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ef4:	00 00 00 00 
ffffffff80100ef8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eff:	00 00 00 00 
ffffffff80100f03:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f0a:	00 00 00 00 
ffffffff80100f0e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f15:	00 00 00 00 
ffffffff80100f19:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f20:	00 00 00 00 
ffffffff80100f24:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f2b:	00 00 00 00 
ffffffff80100f2f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f36:	00 00 00 00 
ffffffff80100f3a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f41:	00 00 00 00 
ffffffff80100f45:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f4c:	00 00 00 00 
ffffffff80100f50:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f57:	00 00 00 00 
ffffffff80100f5b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f62:	00 00 00 00 
ffffffff80100f66:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f6d:	00 00 00 00 
ffffffff80100f71:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f78:	00 00 00 00 
ffffffff80100f7c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f83:	00 00 00 00 
ffffffff80100f87:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f8e:	00 00 00 00 
ffffffff80100f92:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f99:	00 00 00 00 
ffffffff80100f9d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fa4:	00 00 00 00 
ffffffff80100fa8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100faf:	00 00 00 00 
ffffffff80100fb3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fba:	00 00 00 00 
ffffffff80100fbe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fc5:	00 00 00 00 
ffffffff80100fc9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fd0:	00 00 00 00 
ffffffff80100fd4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fdb:	00 00 00 00 
ffffffff80100fdf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fe6:	00 00 00 00 
ffffffff80100fea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ff1:	00 00 00 00 
ffffffff80100ff5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ffc:	00 00 00 00 
	...

ffffffff80108000 <__RME_X64_Mboot_Entry>:
/* The entry point after the bootloader finishes *****************************/
    .code32
    .align              16
__RME_X64_Mboot_Entry:
     /* EBX contains Multiboot data structure, let's relocate it to some other places */
     MOV                %EBX,%ESI
ffffffff80108000:	89 de                	mov    %ebx,%esi
     /* Zero 7 pages for our bootstrap page tables, PML4 @ 0x101000 */
     CLD
ffffffff80108002:	fc                   	cld    
     XOR                %EAX,%EAX
ffffffff80108003:	31 c0                	xor    %eax,%eax
     MOV                $0x101000,%EDI
ffffffff80108005:	bf 00 10 10 00       	mov    $0x101000,%edi
     MOV                $0x7000,%ECX
ffffffff8010800a:	b9 00 70 00 00       	mov    $0x7000,%ecx
     REP STOSB
ffffffff8010800f:	f3 aa                	rep stos %al,%es:(%rdi)
     /* PML4[0] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff80108011:	b8 03 20 10 00       	mov    $0x102003,%eax
     MOV                %EAX,0x101000
ffffffff80108016:	a3 00 10 10 00 b8 03 	movabs %eax,0x102003b800101000
ffffffff8010801d:	20 10 
     /* PML4[256] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff8010801f:	00 a3 00 18 10 00    	add    %ah,0x101800(%rbx)
     MOV                %EAX,0x101800
     /* PML4[511] -> PDP-B @ 0x103000 */
     MOV                $(0x103000|3),%EAX
ffffffff80108025:	b8 03 30 10 00       	mov    $0x103003,%eax
     MOV                %EAX,0x101FF8
ffffffff8010802a:	a3 f8 1f 10 00 b8 03 	movabs %eax,0x104003b800101ff8
ffffffff80108031:	40 10 
     /* PDP-A[0] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff80108033:	00 a3 00 20 10 00    	add    %ah,0x102000(%rbx)
     MOV                %EAX,0x102000
     /* PDP-A[1] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108039:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x102008
ffffffff8010803e:	a3 08 20 10 00 b8 03 	movabs %eax,0x106003b800102008
ffffffff80108045:	60 10 
     /* PDP-A[2] -> PDE-C @ 0x106000 */
     MOV                $(0x106000|3),%EAX
ffffffff80108047:	00 a3 10 20 10 00    	add    %ah,0x102010(%rbx)
     MOV                %EAX,0x102010
     /* PDP-A[3] -> PDE-D @ 0x107000 unbufferable uncacheable */
     MOV                $(0x107000|3|0x18),%EAX
ffffffff8010804d:	b8 1b 70 10 00       	mov    $0x10701b,%eax
     MOV                %EAX,0x102018
ffffffff80108052:	a3 18 20 10 00 b8 03 	movabs %eax,0x104003b800102018
ffffffff80108059:	40 10 
     /* PDP-B[510] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff8010805b:	00 a3 f0 3f 10 00    	add    %ah,0x103ff0(%rbx)
     MOV                %EAX,0x103FF0
     /* PDP-B[511] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108061:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x103FF8
ffffffff80108066:	a3 f8 3f 10 00 b8 83 	movabs %eax,0x83b800103ff8
ffffffff8010806d:	00 00 
     /* PDE-A/B/C/D [0..511/0...511/0..511/0..511] -> 0..4094MB */
     MOV                $(0x83),%EAX
ffffffff8010806f:	00 bb 00 40 10 00    	add    %bh,0x104000(%rbx)
     MOV                $0x104000,%EBX
     MOV                $(512*4),%ECX
ffffffff80108075:	b9 00 08 00 00       	mov    $0x800,%ecx

ffffffff8010807a <PDE_Loop>:
PDE_Loop:
     MOV                %EAX,(%EBX)
ffffffff8010807a:	89 03                	mov    %eax,(%rbx)
     ADD                $0x200000,%EAX
ffffffff8010807c:	05 00 00 20 00       	add    $0x200000,%eax
     ADD                $0x8,%EBX
ffffffff80108081:	83 c3 08             	add    $0x8,%ebx
     DEC                %ECX
ffffffff80108084:	49 75 f3             	rex.WB jne ffffffff8010807a <PDE_Loop>
     JNZ                PDE_Loop
	 /* Clear ebx for initial processor boot.
      * When secondary processors boot, they'll call through
      * __RME_X64_SMP_Boot, but with a nonzero ebx.
      * We'll reuse these bootstrap pagetables and GDT. */
     XOR                %EBX,%EBX
ffffffff80108087:	31 db                	xor    %ebx,%ebx

ffffffff80108089 <__RME_X64_SMP_Boot_32>:
     /* SMP boot will run directly from here */
__RME_X64_SMP_Boot_32:
     /* CR3 -> PML4 @ 0x101000 */
     MOV                $0x101000,%EAX
ffffffff80108089:	b8 00 10 10 00       	mov    $0x101000,%eax
     MOV                %EAX,%CR3
ffffffff8010808e:	0f 22 d8             	mov    %rax,%cr3
     /* Load GDT */
     LGDT               (Boot_GDT_Desc-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff80108091:	0f 01 15 28 81 10 00 	lgdt   0x108128(%rip)        # ffffffff802101c0 <_RME_Pgt_Boot_Con+0x15b>
     /* Enable PAE - CR4.PAE=1 */
     MOV                %CR4,%EAX
ffffffff80108098:	0f 20 e0             	mov    %cr4,%rax
     BTS                $5,%EAX
ffffffff8010809b:	0f ba e8 05          	bts    $0x5,%eax
     MOV                %EAX,%CR4
ffffffff8010809f:	0f 22 e0             	mov    %rax,%cr4
     /* Enable long mode and no execute bit - EFER.LME=1, EFER.NXE=1 */
     MOV                $0xC0000080,%ECX
ffffffff801080a2:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
     RDMSR
ffffffff801080a7:	0f 32                	rdmsr  
     BTS                $8,%EAX
ffffffff801080a9:	0f ba e8 08          	bts    $0x8,%eax
     BTS                $11,%EAX
ffffffff801080ad:	0f ba e8 0b          	bts    $0xb,%eax
     WRMSR
ffffffff801080b1:	0f 30                	wrmsr  
     /* Enable paging */
     MOV                %CR0,%EAX
ffffffff801080b3:	0f 20 c0             	mov    %cr0,%rax
     BTS                $31,%EAX
ffffffff801080b6:	0f ba e8 1f          	bts    $0x1f,%eax
     MOV                %EAX,%CR0
ffffffff801080ba:	0f 22 c0             	mov    %rax,%cr0
     /* Enable PCID - CR4.PCIDE=1 FIXME: this made things slower - due to extra logic for PCID processing *//*
     MOV                %CR4,%EAX
     BTS                $17,%EAX
     MOV                %EAX,%CR4 */
     /* shift to 64bit segment */
     LJMP               $8,$(Boot_Low_64-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff801080bd:	ea                   	(bad)  
ffffffff801080be:	d0 80 10 00 08 00    	rolb   0x80010(%rax)
ffffffff801080c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801080cb:	00 00 00 00 
ffffffff801080cf:	90                   	nop

ffffffff801080d0 <Boot_Low_64>:

/* Now we are in 64-bit mode *************************************************/
    .align              16
    .code64
Boot_Low_64:
    movq                $Boot_High_64,%RAX
ffffffff801080d0:	48 c7 c0 d9 80 10 80 	mov    $0xffffffff801080d9,%rax
    jmp                 *%RAX
ffffffff801080d7:	ff e0                	jmp    *%rax

ffffffff801080d9 <_start>:
_start:
Boot_High_64:
    /* ensure data segment registers are sane - zero out all of them */
    XOR                 %RAX,%RAX
ffffffff801080d9:	48 31 c0             	xor    %rax,%rax
    /* Below are all 16-bit moves */
    MOV                 %AX,%SS
ffffffff801080dc:	8e d0                	mov    %eax,%ss
    MOV                 %AX,%DS
ffffffff801080de:	8e d8                	mov    %eax,%ds
    MOV                 %AX,%ES
ffffffff801080e0:	8e c0                	mov    %eax,%es
    MOV                 %AX,%FS
ffffffff801080e2:	8e e0                	mov    %eax,%fs
    MOV                 %AX,%GS
ffffffff801080e4:	8e e8                	mov    %eax,%gs
    /* Check to see if we're booting a secondary core */
    TEST                %EBX,%EBX
ffffffff801080e6:	85 db                	test   %ebx,%ebx
    JNZ                 Boot_SMP_64
ffffffff801080e8:	75 14                	jne    ffffffff801080fe <Boot_SMP_64>
    /* Setup initial stack - this is hard-coded at low memory */
    MOV                 $__RME_X64_Kern_Boot_Stack,%RAX
ffffffff801080ea:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
    MOV                 %RAX,%RSP
ffffffff801080f1:	48 89 c4             	mov    %rax,%rsp
    /* Pass the physical address of RSI to it */
    MOV                 %RSI,%RDI
ffffffff801080f4:	48 89 f7             	mov    %rsi,%rdi
    JMP                 main
ffffffff801080f7:	e9 19 31 11 00       	jmp    ffffffff8021b215 <main>
    JMP                 .
ffffffff801080fc:	eb fe                	jmp    ffffffff801080fc <_start+0x23>

ffffffff801080fe <Boot_SMP_64>:
Boot_SMP_64:
    MOV                 $0x7000,%RAX
ffffffff801080fe:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax
    MOV                 -16(%RAX),%RSP
ffffffff80108105:	48 8b 60 f0          	mov    -0x10(%rax),%rsp
    JMP                 __RME_SMP_Low_Level_Init
ffffffff80108109:	e9 c1 d3 11 00       	jmp    ffffffff802254cf <__RME_SMP_Low_Level_Init>
    JMP                 .
ffffffff8010810e:	eb fe                	jmp    ffffffff8010810e <Boot_SMP_64+0x10>

ffffffff80108110 <Boot_GDT>:
	...
ffffffff8010811c:	00 98 20 00 00 00    	add    %bl,0x20(%rax)
ffffffff80108122:	00 00                	add    %al,(%rax)
ffffffff80108124:	00                   	.byte 0x0
ffffffff80108125:	90                   	nop
	...

ffffffff80108128 <Boot_GDT_Desc>:
ffffffff80108128:	17                   	(bad)  
ffffffff80108129:	00 10                	add    %dl,(%rax)
ffffffff8010812b:	81 10 00 00 00 00    	adcl   $0x0,(%rax)
ffffffff80108131:	00 66 66             	add    %ah,0x66(%rsi)
ffffffff80108134:	2e 0f 1f 84 00 00 00 	cs nopl 0x0(%rax,%rax,1)
ffffffff8010813b:	00 00 
ffffffff8010813d:	0f 1f 00             	nopl   (%rax)
ffffffff80108140:	e9 bb 0e 00 00       	jmp    ffffffff80109000 <RME_X64_Kpgt>
ffffffff80108145:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010814c:	00 00 00 00 
ffffffff80108150:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108157:	00 00 00 00 
ffffffff8010815b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108162:	00 00 00 00 
ffffffff80108166:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010816d:	00 00 00 00 
ffffffff80108171:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108178:	00 00 00 00 
ffffffff8010817c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108183:	00 00 00 00 
ffffffff80108187:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010818e:	00 00 00 00 
ffffffff80108192:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108199:	00 00 00 00 
ffffffff8010819d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081a4:	00 00 00 00 
ffffffff801081a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081af:	00 00 00 00 
ffffffff801081b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081ba:	00 00 00 00 
ffffffff801081be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081c5:	00 00 00 00 
ffffffff801081c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081d0:	00 00 00 00 
ffffffff801081d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081db:	00 00 00 00 
ffffffff801081df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081e6:	00 00 00 00 
ffffffff801081ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081f1:	00 00 00 00 
ffffffff801081f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081fc:	00 00 00 00 
ffffffff80108200:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108207:	00 00 00 00 
ffffffff8010820b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108212:	00 00 00 00 
ffffffff80108216:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010821d:	00 00 00 00 
ffffffff80108221:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108228:	00 00 00 00 
ffffffff8010822c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108233:	00 00 00 00 
ffffffff80108237:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010823e:	00 00 00 00 
ffffffff80108242:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108249:	00 00 00 00 
ffffffff8010824d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108254:	00 00 00 00 
ffffffff80108258:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010825f:	00 00 00 00 
ffffffff80108263:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010826a:	00 00 00 00 
ffffffff8010826e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108275:	00 00 00 00 
ffffffff80108279:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108280:	00 00 00 00 
ffffffff80108284:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010828b:	00 00 00 00 
ffffffff8010828f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108296:	00 00 00 00 
ffffffff8010829a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082a1:	00 00 00 00 
ffffffff801082a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ac:	00 00 00 00 
ffffffff801082b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082b7:	00 00 00 00 
ffffffff801082bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082c2:	00 00 00 00 
ffffffff801082c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082cd:	00 00 00 00 
ffffffff801082d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082d8:	00 00 00 00 
ffffffff801082dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082e3:	00 00 00 00 
ffffffff801082e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ee:	00 00 00 00 
ffffffff801082f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082f9:	00 00 00 00 
ffffffff801082fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108304:	00 00 00 00 
ffffffff80108308:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010830f:	00 00 00 00 
ffffffff80108313:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010831a:	00 00 00 00 
ffffffff8010831e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108325:	00 00 00 00 
ffffffff80108329:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108330:	00 00 00 00 
ffffffff80108334:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010833b:	00 00 00 00 
ffffffff8010833f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108346:	00 00 00 00 
ffffffff8010834a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108351:	00 00 00 00 
ffffffff80108355:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010835c:	00 00 00 00 
ffffffff80108360:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108367:	00 00 00 00 
ffffffff8010836b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108372:	00 00 00 00 
ffffffff80108376:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010837d:	00 00 00 00 
ffffffff80108381:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108388:	00 00 00 00 
ffffffff8010838c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108393:	00 00 00 00 
ffffffff80108397:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010839e:	00 00 00 00 
ffffffff801083a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083a9:	00 00 00 00 
ffffffff801083ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083b4:	00 00 00 00 
ffffffff801083b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083bf:	00 00 00 00 
ffffffff801083c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083ca:	00 00 00 00 
ffffffff801083ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083d5:	00 00 00 00 
ffffffff801083d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083e0:	00 00 00 00 
ffffffff801083e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083eb:	00 00 00 00 
ffffffff801083ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083f6:	00 00 00 00 
ffffffff801083fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108401:	00 00 00 00 
ffffffff80108405:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010840c:	00 00 00 00 
ffffffff80108410:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108417:	00 00 00 00 
ffffffff8010841b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108422:	00 00 00 00 
ffffffff80108426:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010842d:	00 00 00 00 
ffffffff80108431:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108438:	00 00 00 00 
ffffffff8010843c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108443:	00 00 00 00 
ffffffff80108447:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010844e:	00 00 00 00 
ffffffff80108452:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108459:	00 00 00 00 
ffffffff8010845d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108464:	00 00 00 00 
ffffffff80108468:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010846f:	00 00 00 00 
ffffffff80108473:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010847a:	00 00 00 00 
ffffffff8010847e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108485:	00 00 00 00 
ffffffff80108489:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108490:	00 00 00 00 
ffffffff80108494:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010849b:	00 00 00 00 
ffffffff8010849f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084a6:	00 00 00 00 
ffffffff801084aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084b1:	00 00 00 00 
ffffffff801084b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084bc:	00 00 00 00 
ffffffff801084c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084c7:	00 00 00 00 
ffffffff801084cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084d2:	00 00 00 00 
ffffffff801084d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084dd:	00 00 00 00 
ffffffff801084e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084e8:	00 00 00 00 
ffffffff801084ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084f3:	00 00 00 00 
ffffffff801084f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084fe:	00 00 00 00 
ffffffff80108502:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108509:	00 00 00 00 
ffffffff8010850d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108514:	00 00 00 00 
ffffffff80108518:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010851f:	00 00 00 00 
ffffffff80108523:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010852a:	00 00 00 00 
ffffffff8010852e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108535:	00 00 00 00 
ffffffff80108539:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108540:	00 00 00 00 
ffffffff80108544:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010854b:	00 00 00 00 
ffffffff8010854f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108556:	00 00 00 00 
ffffffff8010855a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108561:	00 00 00 00 
ffffffff80108565:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010856c:	00 00 00 00 
ffffffff80108570:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108577:	00 00 00 00 
ffffffff8010857b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108582:	00 00 00 00 
ffffffff80108586:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010858d:	00 00 00 00 
ffffffff80108591:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108598:	00 00 00 00 
ffffffff8010859c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085a3:	00 00 00 00 
ffffffff801085a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085ae:	00 00 00 00 
ffffffff801085b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085b9:	00 00 00 00 
ffffffff801085bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085c4:	00 00 00 00 
ffffffff801085c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085cf:	00 00 00 00 
ffffffff801085d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085da:	00 00 00 00 
ffffffff801085de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085e5:	00 00 00 00 
ffffffff801085e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085f0:	00 00 00 00 
ffffffff801085f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085fb:	00 00 00 00 
ffffffff801085ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108606:	00 00 00 00 
ffffffff8010860a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108611:	00 00 00 00 
ffffffff80108615:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010861c:	00 00 00 00 
ffffffff80108620:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108627:	00 00 00 00 
ffffffff8010862b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108632:	00 00 00 00 
ffffffff80108636:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010863d:	00 00 00 00 
ffffffff80108641:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108648:	00 00 00 00 
ffffffff8010864c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108653:	00 00 00 00 
ffffffff80108657:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010865e:	00 00 00 00 
ffffffff80108662:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108669:	00 00 00 00 
ffffffff8010866d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108674:	00 00 00 00 
ffffffff80108678:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010867f:	00 00 00 00 
ffffffff80108683:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010868a:	00 00 00 00 
ffffffff8010868e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108695:	00 00 00 00 
ffffffff80108699:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086a0:	00 00 00 00 
ffffffff801086a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ab:	00 00 00 00 
ffffffff801086af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086b6:	00 00 00 00 
ffffffff801086ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086c1:	00 00 00 00 
ffffffff801086c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086cc:	00 00 00 00 
ffffffff801086d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086d7:	00 00 00 00 
ffffffff801086db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086e2:	00 00 00 00 
ffffffff801086e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ed:	00 00 00 00 
ffffffff801086f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086f8:	00 00 00 00 
ffffffff801086fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108703:	00 00 00 00 
ffffffff80108707:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010870e:	00 00 00 00 
ffffffff80108712:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108719:	00 00 00 00 
ffffffff8010871d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108724:	00 00 00 00 
ffffffff80108728:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010872f:	00 00 00 00 
ffffffff80108733:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010873a:	00 00 00 00 
ffffffff8010873e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108745:	00 00 00 00 
ffffffff80108749:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108750:	00 00 00 00 
ffffffff80108754:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010875b:	00 00 00 00 
ffffffff8010875f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108766:	00 00 00 00 
ffffffff8010876a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108771:	00 00 00 00 
ffffffff80108775:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010877c:	00 00 00 00 
ffffffff80108780:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108787:	00 00 00 00 
ffffffff8010878b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108792:	00 00 00 00 
ffffffff80108796:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010879d:	00 00 00 00 
ffffffff801087a1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087a8:	00 00 00 00 
ffffffff801087ac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087b3:	00 00 00 00 
ffffffff801087b7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087be:	00 00 00 00 
ffffffff801087c2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087c9:	00 00 00 00 
ffffffff801087cd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087d4:	00 00 00 00 
ffffffff801087d8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087df:	00 00 00 00 
ffffffff801087e3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087ea:	00 00 00 00 
ffffffff801087ee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087f5:	00 00 00 00 
ffffffff801087f9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108800:	00 00 00 00 
ffffffff80108804:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010880b:	00 00 00 00 
ffffffff8010880f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108816:	00 00 00 00 
ffffffff8010881a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108821:	00 00 00 00 
ffffffff80108825:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010882c:	00 00 00 00 
ffffffff80108830:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108837:	00 00 00 00 
ffffffff8010883b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108842:	00 00 00 00 
ffffffff80108846:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010884d:	00 00 00 00 
ffffffff80108851:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108858:	00 00 00 00 
ffffffff8010885c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108863:	00 00 00 00 
ffffffff80108867:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010886e:	00 00 00 00 
ffffffff80108872:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108879:	00 00 00 00 
ffffffff8010887d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108884:	00 00 00 00 
ffffffff80108888:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010888f:	00 00 00 00 
ffffffff80108893:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010889a:	00 00 00 00 
ffffffff8010889e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088a5:	00 00 00 00 
ffffffff801088a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088b0:	00 00 00 00 
ffffffff801088b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088bb:	00 00 00 00 
ffffffff801088bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088c6:	00 00 00 00 
ffffffff801088ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088d1:	00 00 00 00 
ffffffff801088d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088dc:	00 00 00 00 
ffffffff801088e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088e7:	00 00 00 00 
ffffffff801088eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088f2:	00 00 00 00 
ffffffff801088f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088fd:	00 00 00 00 
ffffffff80108901:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108908:	00 00 00 00 
ffffffff8010890c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108913:	00 00 00 00 
ffffffff80108917:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010891e:	00 00 00 00 
ffffffff80108922:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108929:	00 00 00 00 
ffffffff8010892d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108934:	00 00 00 00 
ffffffff80108938:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010893f:	00 00 00 00 
ffffffff80108943:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010894a:	00 00 00 00 
ffffffff8010894e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108955:	00 00 00 00 
ffffffff80108959:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108960:	00 00 00 00 
ffffffff80108964:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010896b:	00 00 00 00 
ffffffff8010896f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108976:	00 00 00 00 
ffffffff8010897a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108981:	00 00 00 00 
ffffffff80108985:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010898c:	00 00 00 00 
ffffffff80108990:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108997:	00 00 00 00 
ffffffff8010899b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089a2:	00 00 00 00 
ffffffff801089a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ad:	00 00 00 00 
ffffffff801089b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089b8:	00 00 00 00 
ffffffff801089bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089c3:	00 00 00 00 
ffffffff801089c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ce:	00 00 00 00 
ffffffff801089d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089d9:	00 00 00 00 
ffffffff801089dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089e4:	00 00 00 00 
ffffffff801089e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ef:	00 00 00 00 
ffffffff801089f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089fa:	00 00 00 00 
ffffffff801089fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a05:	00 00 00 00 
ffffffff80108a09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a10:	00 00 00 00 
ffffffff80108a14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a1b:	00 00 00 00 
ffffffff80108a1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a26:	00 00 00 00 
ffffffff80108a2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a31:	00 00 00 00 
ffffffff80108a35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a3c:	00 00 00 00 
ffffffff80108a40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a47:	00 00 00 00 
ffffffff80108a4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a52:	00 00 00 00 
ffffffff80108a56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a5d:	00 00 00 00 
ffffffff80108a61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a68:	00 00 00 00 
ffffffff80108a6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a73:	00 00 00 00 
ffffffff80108a77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a7e:	00 00 00 00 
ffffffff80108a82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a89:	00 00 00 00 
ffffffff80108a8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a94:	00 00 00 00 
ffffffff80108a98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a9f:	00 00 00 00 
ffffffff80108aa3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aaa:	00 00 00 00 
ffffffff80108aae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ab5:	00 00 00 00 
ffffffff80108ab9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ac0:	00 00 00 00 
ffffffff80108ac4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108acb:	00 00 00 00 
ffffffff80108acf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ad6:	00 00 00 00 
ffffffff80108ada:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ae1:	00 00 00 00 
ffffffff80108ae5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aec:	00 00 00 00 
ffffffff80108af0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108af7:	00 00 00 00 
ffffffff80108afb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b02:	00 00 00 00 
ffffffff80108b06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b0d:	00 00 00 00 
ffffffff80108b11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b18:	00 00 00 00 
ffffffff80108b1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b23:	00 00 00 00 
ffffffff80108b27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b2e:	00 00 00 00 
ffffffff80108b32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b39:	00 00 00 00 
ffffffff80108b3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b44:	00 00 00 00 
ffffffff80108b48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b4f:	00 00 00 00 
ffffffff80108b53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b5a:	00 00 00 00 
ffffffff80108b5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b65:	00 00 00 00 
ffffffff80108b69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b70:	00 00 00 00 
ffffffff80108b74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b7b:	00 00 00 00 
ffffffff80108b7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b86:	00 00 00 00 
ffffffff80108b8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b91:	00 00 00 00 
ffffffff80108b95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b9c:	00 00 00 00 
ffffffff80108ba0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ba7:	00 00 00 00 
ffffffff80108bab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bb2:	00 00 00 00 
ffffffff80108bb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bbd:	00 00 00 00 
ffffffff80108bc1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bc8:	00 00 00 00 
ffffffff80108bcc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bd3:	00 00 00 00 
ffffffff80108bd7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bde:	00 00 00 00 
ffffffff80108be2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108be9:	00 00 00 00 
ffffffff80108bed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bf4:	00 00 00 00 
ffffffff80108bf8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bff:	00 00 00 00 
ffffffff80108c03:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c0a:	00 00 00 00 
ffffffff80108c0e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c15:	00 00 00 00 
ffffffff80108c19:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c20:	00 00 00 00 
ffffffff80108c24:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c2b:	00 00 00 00 
ffffffff80108c2f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c36:	00 00 00 00 
ffffffff80108c3a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c41:	00 00 00 00 
ffffffff80108c45:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c4c:	00 00 00 00 
ffffffff80108c50:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c57:	00 00 00 00 
ffffffff80108c5b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c62:	00 00 00 00 
ffffffff80108c66:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c6d:	00 00 00 00 
ffffffff80108c71:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c78:	00 00 00 00 
ffffffff80108c7c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c83:	00 00 00 00 
ffffffff80108c87:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c8e:	00 00 00 00 
ffffffff80108c92:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c99:	00 00 00 00 
ffffffff80108c9d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ca4:	00 00 00 00 
ffffffff80108ca8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108caf:	00 00 00 00 
ffffffff80108cb3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cba:	00 00 00 00 
ffffffff80108cbe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cc5:	00 00 00 00 
ffffffff80108cc9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cd0:	00 00 00 00 
ffffffff80108cd4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cdb:	00 00 00 00 
ffffffff80108cdf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ce6:	00 00 00 00 
ffffffff80108cea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cf1:	00 00 00 00 
ffffffff80108cf5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cfc:	00 00 00 00 
ffffffff80108d00:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d07:	00 00 00 00 
ffffffff80108d0b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d12:	00 00 00 00 
ffffffff80108d16:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d1d:	00 00 00 00 
ffffffff80108d21:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d28:	00 00 00 00 
ffffffff80108d2c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d33:	00 00 00 00 
ffffffff80108d37:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d3e:	00 00 00 00 
ffffffff80108d42:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d49:	00 00 00 00 
ffffffff80108d4d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d54:	00 00 00 00 
ffffffff80108d58:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d5f:	00 00 00 00 
ffffffff80108d63:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d6a:	00 00 00 00 
ffffffff80108d6e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d75:	00 00 00 00 
ffffffff80108d79:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d80:	00 00 00 00 
ffffffff80108d84:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d8b:	00 00 00 00 
ffffffff80108d8f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d96:	00 00 00 00 
ffffffff80108d9a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108da1:	00 00 00 00 
ffffffff80108da5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dac:	00 00 00 00 
ffffffff80108db0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108db7:	00 00 00 00 
ffffffff80108dbb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dc2:	00 00 00 00 
ffffffff80108dc6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dcd:	00 00 00 00 
ffffffff80108dd1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dd8:	00 00 00 00 
ffffffff80108ddc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108de3:	00 00 00 00 
ffffffff80108de7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dee:	00 00 00 00 
ffffffff80108df2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108df9:	00 00 00 00 
ffffffff80108dfd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e04:	00 00 00 00 
ffffffff80108e08:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e0f:	00 00 00 00 
ffffffff80108e13:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e1a:	00 00 00 00 
ffffffff80108e1e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e25:	00 00 00 00 
ffffffff80108e29:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e30:	00 00 00 00 
ffffffff80108e34:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e3b:	00 00 00 00 
ffffffff80108e3f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e46:	00 00 00 00 
ffffffff80108e4a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e51:	00 00 00 00 
ffffffff80108e55:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e5c:	00 00 00 00 
ffffffff80108e60:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e67:	00 00 00 00 
ffffffff80108e6b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e72:	00 00 00 00 
ffffffff80108e76:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e7d:	00 00 00 00 
ffffffff80108e81:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e88:	00 00 00 00 
ffffffff80108e8c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e93:	00 00 00 00 
ffffffff80108e97:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e9e:	00 00 00 00 
ffffffff80108ea2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ea9:	00 00 00 00 
ffffffff80108ead:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eb4:	00 00 00 00 
ffffffff80108eb8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ebf:	00 00 00 00 
ffffffff80108ec3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eca:	00 00 00 00 
ffffffff80108ece:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ed5:	00 00 00 00 
ffffffff80108ed9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ee0:	00 00 00 00 
ffffffff80108ee4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eeb:	00 00 00 00 
ffffffff80108eef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ef6:	00 00 00 00 
ffffffff80108efa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f01:	00 00 00 00 
ffffffff80108f05:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f0c:	00 00 00 00 
ffffffff80108f10:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f17:	00 00 00 00 
ffffffff80108f1b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f22:	00 00 00 00 
ffffffff80108f26:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f2d:	00 00 00 00 
ffffffff80108f31:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f38:	00 00 00 00 
ffffffff80108f3c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f43:	00 00 00 00 
ffffffff80108f47:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f4e:	00 00 00 00 
ffffffff80108f52:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f59:	00 00 00 00 
ffffffff80108f5d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f64:	00 00 00 00 
ffffffff80108f68:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f6f:	00 00 00 00 
ffffffff80108f73:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f7a:	00 00 00 00 
ffffffff80108f7e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f85:	00 00 00 00 
ffffffff80108f89:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f90:	00 00 00 00 
ffffffff80108f94:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f9b:	00 00 00 00 
ffffffff80108f9f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fa6:	00 00 00 00 
ffffffff80108faa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fb1:	00 00 00 00 
ffffffff80108fb5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fbc:	00 00 00 00 
ffffffff80108fc0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fc7:	00 00 00 00 
ffffffff80108fcb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fd2:	00 00 00 00 
ffffffff80108fd6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fdd:	00 00 00 00 
ffffffff80108fe1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fe8:	00 00 00 00 
ffffffff80108fec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ff3:	00 00 00 00 
ffffffff80108ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80108ffe:	00 00 

ffffffff80109000 <RME_X64_Kpgt>:
	...

ffffffff8020b800 <__RME_X64_In>:
Input       : ptr_t Port - The port to output to.
Output      : None.
Return      : ptr_t - The data received from that port.
******************************************************************************/
__RME_X64_In:
    PUSHQ               %RDX
ffffffff8020b800:	52                   	push   %rdx
    MOVQ                %RDI,%RDX
ffffffff8020b801:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RAX,%RAX
ffffffff8020b804:	48 89 c0             	mov    %rax,%rax
    INB                 (%DX),%AL
ffffffff8020b807:	ec                   	in     (%dx),%al
    POPQ                %RDX
ffffffff8020b808:	5a                   	pop    %rdx
    RETQ
ffffffff8020b809:	c3                   	ret    

ffffffff8020b80a <__RME_X64_Out>:
                 ptr_t Data - The data to send to that port.
Output         : None.
Return         : None.
******************************************************************************/
__RME_X64_Out:
    PUSHQ               %RDX
ffffffff8020b80a:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b80b:	50                   	push   %rax
    MOVQ                %RDI,%RDX
ffffffff8020b80c:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RSI,%RAX
ffffffff8020b80f:	48 89 f0             	mov    %rsi,%rax
    OUTB                %AL,(%DX)
ffffffff8020b812:	ee                   	out    %al,(%dx)
    POPQ                %RAX
ffffffff8020b813:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b814:	5a                   	pop    %rdx
    RETQ
ffffffff8020b815:	c3                   	ret    

ffffffff8020b816 <__RME_X64_Read_MSR>:
Input       : ptr_t MSR - The MSR to read.
Output      : None.
Return      : ptr_t - The content of the MSR.
******************************************************************************/
__RME_X64_Read_MSR:
    PUSHQ               %RCX
ffffffff8020b816:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b817:	52                   	push   %rdx
    MOVQ                %RDI,%RCX
ffffffff8020b818:	48 89 f9             	mov    %rdi,%rcx
    XORQ                %RAX,%RAX
ffffffff8020b81b:	48 31 c0             	xor    %rax,%rax
    RDMSR
ffffffff8020b81e:	0f 32                	rdmsr  
    SHLQ                $32,%RDX
ffffffff8020b820:	48 c1 e2 20          	shl    $0x20,%rdx
    ADDQ                %RDX,%RAX
ffffffff8020b824:	48 01 d0             	add    %rdx,%rax
    POPQ                %RDX
ffffffff8020b827:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b828:	59                   	pop    %rcx
    RETQ
ffffffff8020b829:	c3                   	ret    

ffffffff8020b82a <__RME_X64_Write_MSR>:
              ptr_t Value - The value to write to it.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_MSR:
    PUSHQ               %RCX
ffffffff8020b82a:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b82b:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b82c:	50                   	push   %rax
    MOVQ                %RDI,%RCX
ffffffff8020b82d:	48 89 f9             	mov    %rdi,%rcx
    MOVL                %ESI,%EAX
ffffffff8020b830:	89 f0                	mov    %esi,%eax
    MOVQ                %RSI,%RDX
ffffffff8020b832:	48 89 f2             	mov    %rsi,%rdx
    SHR                 $32,%RDX
ffffffff8020b835:	48 c1 ea 20          	shr    $0x20,%rdx
    WRMSR
ffffffff8020b839:	0f 30                	wrmsr  
    POPQ                %RAX
ffffffff8020b83b:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b83c:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b83d:	59                   	pop    %rcx
    RETQ
ffffffff8020b83e:	c3                   	ret    

ffffffff8020b83f <__RME_X64_CPU_Local_Get>:
Input       : None.
Output      : None.
Return      : struct RME_CPU_Local* - The CPU-local data structures.
******************************************************************************/
__RME_X64_CPU_Local_Get:
    MOVQ                %GS:(8192-8*3),%RAX
ffffffff8020b83f:	65 48 8b 04 25 e8 1f 	mov    %gs:0x1fe8,%rax
ffffffff8020b846:	00 00 
    RETQ
ffffffff8020b848:	c3                   	ret    

ffffffff8020b849 <__RME_X64_CPUID_Get>:
              ptr_t* ECX - The ECX info.
              ptr_t* EDX - The EDX info.
Return      : ptr_t - The maximum number for CPUID instruction.
******************************************************************************/
__RME_X64_CPUID_Get:
    PUSHQ               %R8
ffffffff8020b849:	41 50                	push   %r8
    PUSHQ               %R9
ffffffff8020b84b:	41 51                	push   %r9
    PUSHQ               %RBX
ffffffff8020b84d:	53                   	push   %rbx
    PUSHQ               %RCX
ffffffff8020b84e:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b84f:	52                   	push   %rdx

    MOVQ                %RDI,%RAX
ffffffff8020b850:	48 89 f8             	mov    %rdi,%rax
    MOVQ                %RDX,%R8
ffffffff8020b853:	49 89 d0             	mov    %rdx,%r8
    MOVQ                %RCX,%R9
ffffffff8020b856:	49 89 c9             	mov    %rcx,%r9

    MOVQ                (%RSI),%RBX
ffffffff8020b859:	48 8b 1e             	mov    (%rsi),%rbx
    MOVQ                (%R8),%RCX
ffffffff8020b85c:	49 8b 08             	mov    (%r8),%rcx
    MOVQ                (%R9),%RDX
ffffffff8020b85f:	49 8b 11             	mov    (%r9),%rdx
    CPUID
ffffffff8020b862:	0f a2                	cpuid  
    MOVQ                %RBX,(%RSI)
ffffffff8020b864:	48 89 1e             	mov    %rbx,(%rsi)
    MOVQ                %RCX,(%R8)
ffffffff8020b867:	49 89 08             	mov    %rcx,(%r8)
    MOVQ                %RDX,(%R9)
ffffffff8020b86a:	49 89 11             	mov    %rdx,(%r9)

    POPQ                %RDX
ffffffff8020b86d:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b86e:	59                   	pop    %rcx
    POPQ                %RBX
ffffffff8020b86f:	5b                   	pop    %rbx
    POPQ                %R9
ffffffff8020b870:	41 59                	pop    %r9
    POPQ                %R8
ffffffff8020b872:	41 58                	pop    %r8
    RETQ
ffffffff8020b874:	c3                   	ret    

ffffffff8020b875 <__RME_X64_GDT_Load>:
Input       : ptr_t* GDTR - The pointer to the GDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_GDT_Load:
    LGDT                (%RDI)
ffffffff8020b875:	0f 01 17             	lgdt   (%rdi)
    RETQ
ffffffff8020b878:	c3                   	ret    

ffffffff8020b879 <__RME_X64_IDT_Load>:
Input       : ptr_t* IDTR - The pointer to the IDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_IDT_Load:
    LIDT                (%RDI)
ffffffff8020b879:	0f 01 1f             	lidt   (%rdi)
    RETQ
ffffffff8020b87c:	c3                   	ret    

ffffffff8020b87d <__RME_X64_TSS_Load>:
Input       : ptr_t TSS - The TSS's position in GDT.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_TSS_Load:
    LTR                 %DI
ffffffff8020b87d:	0f 00 df             	ltr    %di
    RETQ
ffffffff8020b880:	c3                   	ret    

ffffffff8020b881 <__RME_X64_Comp_Swap>:
              ptr_t New - The new value.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - If successful, 1; else 0.
******************************************************************************/
__RME_X64_Comp_Swap:
    MOVQ                %RSI,%RAX
ffffffff8020b881:	48 89 f0             	mov    %rsi,%rax
    XOR                 %RSI,%RSI
ffffffff8020b884:	48 31 f6             	xor    %rsi,%rsi
    /* In x86, locked instructions act as a fence */
    LOCK CMPXCHGQ       %RDX,(%RDI)
ffffffff8020b887:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
    /* Set the bit if ZF is set */
    SETZ                %SIL
ffffffff8020b88c:	40 0f 94 c6          	sete   %sil
    MOVQ                %RSI,%RAX
ffffffff8020b890:	48 89 f0             	mov    %rsi,%rax
    RETQ
ffffffff8020b893:	c3                   	ret    

ffffffff8020b894 <__RME_X64_Fetch_Add>:
              cnt_t Addend - The number to add.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the addition.
******************************************************************************/
__RME_X64_Fetch_Add:
    MOVQ                %RSI,%RAX
ffffffff8020b894:	48 89 f0             	mov    %rsi,%rax
    /* In x86, locked instructions act as a fence */
    LOCK XADDQ          %RAX,(%RDI)
ffffffff8020b897:	f0 48 0f c1 07       	lock xadd %rax,(%rdi)
    RETQ
ffffffff8020b89c:	c3                   	ret    

ffffffff8020b89d <__RME_X64_Fetch_And>:
              cnt_t Operand - The number to logic AND with the destination.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the AND operation.
******************************************************************************/
__RME_X64_Fetch_And:
    MOVQ                (%RDI),%RAX
ffffffff8020b89d:	48 8b 07             	mov    (%rdi),%rax
    /* In x86, locked instructions act as a fence */
    LOCK ANDQ           %RSI,(%RDI)
ffffffff8020b8a0:	f0 48 21 37          	lock and %rsi,(%rdi)
    RETQ
ffffffff8020b8a4:	c3                   	ret    

ffffffff8020b8a5 <__RME_X64_Write_Release>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_Release:
    MFENCE
ffffffff8020b8a5:	0f ae f0             	mfence 
    RETQ
ffffffff8020b8a8:	c3                   	ret    

ffffffff8020b8a9 <__RME_X64_Pgt_Set>:
Input       : ptr_t Pgt - The physical address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Pgt_Set:
    MOV                 %RDI,%CR3
ffffffff8020b8a9:	0f 22 df             	mov    %rdi,%cr3
    RETQ
ffffffff8020b8ac:	c3                   	ret    

ffffffff8020b8ad <__RME_Disable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Disable_Int:
    /* Disable all interrupts */
    CLI
ffffffff8020b8ad:	fa                   	cli    
    RETQ
ffffffff8020b8ae:	c3                   	ret    

ffffffff8020b8af <__RME_Enable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enable_Int:
    /* Enable all interrupts */
    STI
ffffffff8020b8af:	fb                   	sti    
    RETQ
ffffffff8020b8b0:	c3                   	ret    

ffffffff8020b8b1 <__RME_X64_Halt>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Halt:
    /* Wait for interrupt */
    HLT
ffffffff8020b8b1:	f4                   	hlt    
    RETQ
ffffffff8020b8b2:	c3                   	ret    

ffffffff8020b8b3 <_RME_Kmain>:
Input       : ptr_t Stack - The stack address to set SP to.
Output      : None.
Return      : None.
******************************************************************************/
_RME_Kmain:
    MOVQ                %RDI,%RSP
ffffffff8020b8b3:	48 89 fc             	mov    %rdi,%rsp
    JMP                 RME_Kmain
ffffffff8020b8b6:	e9 a1 16 00 00       	jmp    ffffffff8020cf5c <RME_Kmain>

ffffffff8020b8bb <__RME_X64_MSB_Get>:
Input       : ptr_t Val - The value.
Output      : None.
Return      : ptr_t - The MSB position.
******************************************************************************/
__RME_X64_MSB_Get:
    BSRQ                %RDI,%RAX
ffffffff8020b8bb:	48 0f bd c7          	bsr    %rdi,%rax
    RETQ
ffffffff8020b8bf:	c3                   	ret    

ffffffff8020b8c0 <__RME_Enter_User_Mode>:
              ptr_t CPUID - The CPUID.
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enter_User_Mode:
    MOVQ                %RDI,%RCX           /* Entry */
ffffffff8020b8c0:	48 89 f9             	mov    %rdi,%rcx
    MOVQ                %RSI,%RSP           /* Stack */
ffffffff8020b8c3:	48 89 f4             	mov    %rsi,%rsp
    MOVQ                $0x3200,%R11        /* Flags - IOPL 3, IF */
ffffffff8020b8c6:	49 c7 c3 00 32 00 00 	mov    $0x3200,%r11
    MOVQ                %RDX,%RDI           /* CPUID */
ffffffff8020b8cd:	48 89 d7             	mov    %rdx,%rdi
    SYSRETQ
ffffffff8020b8d0:	48 0f 07             	sysretq 

ffffffff8020b8d3 <__RME_X64_FAULT_DE_Handler>:
    PUSHQ               $\REASON
    JMP                 Fault_Handler
.endm

/* Fault handlers */
FAULT_HANDLER NAME=__RME_X64_FAULT_DE_Handler ERRCODE=0 REASON=0
ffffffff8020b8d3:	0f 01 f8             	swapgs 
ffffffff8020b8d6:	6a 00                	push   $0x0
ffffffff8020b8d8:	6a 00                	push   $0x0
ffffffff8020b8da:	e9 a6 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8df <__RME_X64_TRAP_DB_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_DB_Handler ERRCODE=0 REASON=1
ffffffff8020b8df:	0f 01 f8             	swapgs 
ffffffff8020b8e2:	6a 00                	push   $0x0
ffffffff8020b8e4:	6a 01                	push   $0x1
ffffffff8020b8e6:	e9 9a 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8eb <__RME_X64_INT_NMI_Handler>:
FAULT_HANDLER NAME=__RME_X64_INT_NMI_Handler ERRCODE=0 REASON=2
ffffffff8020b8eb:	0f 01 f8             	swapgs 
ffffffff8020b8ee:	6a 00                	push   $0x0
ffffffff8020b8f0:	6a 02                	push   $0x2
ffffffff8020b8f2:	e9 8e 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8f7 <__RME_X64_TRAP_BP_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_BP_Handler ERRCODE=0 REASON=3
ffffffff8020b8f7:	0f 01 f8             	swapgs 
ffffffff8020b8fa:	6a 00                	push   $0x0
ffffffff8020b8fc:	6a 03                	push   $0x3
ffffffff8020b8fe:	e9 82 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b903 <__RME_X64_TRAP_OF_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_OF_Handler ERRCODE=0 REASON=4
ffffffff8020b903:	0f 01 f8             	swapgs 
ffffffff8020b906:	6a 00                	push   $0x0
ffffffff8020b908:	6a 04                	push   $0x4
ffffffff8020b90a:	eb 79                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b90c <__RME_X64_FAULT_BR_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_BR_Handler ERRCODE=0 REASON=5
ffffffff8020b90c:	0f 01 f8             	swapgs 
ffffffff8020b90f:	6a 00                	push   $0x0
ffffffff8020b911:	6a 05                	push   $0x5
ffffffff8020b913:	eb 70                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b915 <__RME_X64_FAULT_UD_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_UD_Handler ERRCODE=0 REASON=6
ffffffff8020b915:	0f 01 f8             	swapgs 
ffffffff8020b918:	6a 00                	push   $0x0
ffffffff8020b91a:	6a 06                	push   $0x6
ffffffff8020b91c:	eb 67                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b91e <__RME_X64_FAULT_NM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NM_Handler ERRCODE=0 REASON=7
ffffffff8020b91e:	0f 01 f8             	swapgs 
ffffffff8020b921:	6a 00                	push   $0x0
ffffffff8020b923:	6a 07                	push   $0x7
ffffffff8020b925:	eb 5e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b927 <__RME_X64_ABORT_DF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_DF_Handler ERRCODE=1 REASON=8
ffffffff8020b927:	0f 01 f8             	swapgs 
ffffffff8020b92a:	6a 08                	push   $0x8
ffffffff8020b92c:	eb 57                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b92e <__RME_X64_ABORT_OLD_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_OLD_MF_Handler ERRCODE=0 REASON=9
ffffffff8020b92e:	0f 01 f8             	swapgs 
ffffffff8020b931:	6a 00                	push   $0x0
ffffffff8020b933:	6a 09                	push   $0x9
ffffffff8020b935:	eb 4e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b937 <__RME_X64_FAULT_TS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_TS_Handler ERRCODE=1 REASON=10
ffffffff8020b937:	0f 01 f8             	swapgs 
ffffffff8020b93a:	6a 0a                	push   $0xa
ffffffff8020b93c:	eb 47                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b93e <__RME_X64_FAULT_NP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NP_Handler ERRCODE=1 REASON=11
ffffffff8020b93e:	0f 01 f8             	swapgs 
ffffffff8020b941:	6a 0b                	push   $0xb
ffffffff8020b943:	eb 40                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b945 <__RME_X64_FAULT_SS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_SS_Handler ERRCODE=1 REASON=12
ffffffff8020b945:	0f 01 f8             	swapgs 
ffffffff8020b948:	6a 0c                	push   $0xc
ffffffff8020b94a:	eb 39                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b94c <__RME_X64_FAULT_GP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_GP_Handler ERRCODE=1 REASON=13
ffffffff8020b94c:	0f 01 f8             	swapgs 
ffffffff8020b94f:	6a 0d                	push   $0xd
ffffffff8020b951:	eb 32                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b953 <__RME_X64_FAULT_PF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_PF_Handler ERRCODE=1 REASON=14
ffffffff8020b953:	0f 01 f8             	swapgs 
ffffffff8020b956:	6a 0e                	push   $0xe
ffffffff8020b958:	eb 2b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b95a <__RME_X64_FAULT_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_MF_Handler ERRCODE=0 REASON=16
ffffffff8020b95a:	0f 01 f8             	swapgs 
ffffffff8020b95d:	6a 00                	push   $0x0
ffffffff8020b95f:	6a 10                	push   $0x10
ffffffff8020b961:	eb 22                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b963 <__RME_X64_FAULT_AC_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_AC_Handler ERRCODE=1 REASON=17
ffffffff8020b963:	0f 01 f8             	swapgs 
ffffffff8020b966:	6a 11                	push   $0x11
ffffffff8020b968:	eb 1b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b96a <__RME_X64_ABORT_MC_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_MC_Handler ERRCODE=0 REASON=18
ffffffff8020b96a:	0f 01 f8             	swapgs 
ffffffff8020b96d:	6a 00                	push   $0x0
ffffffff8020b96f:	6a 12                	push   $0x12
ffffffff8020b971:	eb 12                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b973 <__RME_X64_FAULT_XM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_XM_Handler ERRCODE=0 REASON=19
ffffffff8020b973:	0f 01 f8             	swapgs 
ffffffff8020b976:	6a 00                	push   $0x0
ffffffff8020b978:	6a 13                	push   $0x13
ffffffff8020b97a:	eb 09                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b97c <__RME_X64_FAULT_VE_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_VE_Handler ERRCODE=0 REASON=20
ffffffff8020b97c:	0f 01 f8             	swapgs 
ffffffff8020b97f:	6a 00                	push   $0x0
ffffffff8020b981:	6a 14                	push   $0x14
ffffffff8020b983:	eb 00                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b985 <Fault_Handler>:
/* Common function body for fault handlers - reduce I-Cache usage */
Fault_Handler:
    SAVE_GP_REGS
ffffffff8020b985:	41 57                	push   %r15
ffffffff8020b987:	41 56                	push   %r14
ffffffff8020b989:	41 55                	push   %r13
ffffffff8020b98b:	41 54                	push   %r12
ffffffff8020b98d:	41 53                	push   %r11
ffffffff8020b98f:	41 52                	push   %r10
ffffffff8020b991:	41 51                	push   %r9
ffffffff8020b993:	41 50                	push   %r8
ffffffff8020b995:	55                   	push   %rbp
ffffffff8020b996:	57                   	push   %rdi
ffffffff8020b997:	56                   	push   %rsi
ffffffff8020b998:	52                   	push   %rdx
ffffffff8020b999:	51                   	push   %rcx
ffffffff8020b99a:	53                   	push   %rbx
ffffffff8020b99b:	50                   	push   %rax
ffffffff8020b99c:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020b9a0:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020b9a2:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020b9a5:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Fault_Handler
ffffffff8020b9aa:	e8 5c ab 01 00       	call   ffffffff8022650b <__RME_X64_Fault_Handler>

    RESTORE_GP_REGS
ffffffff8020b9af:	0f 01 f8             	swapgs 
ffffffff8020b9b2:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020b9b6:	8e d8                	mov    %eax,%ds
ffffffff8020b9b8:	58                   	pop    %rax
ffffffff8020b9b9:	5b                   	pop    %rbx
ffffffff8020b9ba:	59                   	pop    %rcx
ffffffff8020b9bb:	5a                   	pop    %rdx
ffffffff8020b9bc:	5e                   	pop    %rsi
ffffffff8020b9bd:	5f                   	pop    %rdi
ffffffff8020b9be:	5d                   	pop    %rbp
ffffffff8020b9bf:	41 58                	pop    %r8
ffffffff8020b9c1:	41 59                	pop    %r9
ffffffff8020b9c3:	41 5a                	pop    %r10
ffffffff8020b9c5:	41 5b                	pop    %r11
ffffffff8020b9c7:	41 5c                	pop    %r12
ffffffff8020b9c9:	41 5d                	pop    %r13
ffffffff8020b9cb:	41 5e                	pop    %r14
ffffffff8020b9cd:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020b9cf:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020b9d3:	48 cf                	iretq  

ffffffff8020b9d5 <__RME_X64_USER32_Handler>:
    PUSHQ               $0                  /* Make a dummy error code */
    PUSHQ               $\VECTNUM           /* Interrupt number */
    JMP                 User_Handler
.endm
/* User handlers */
USER_HANDLER NAME=__RME_X64_USER32_Handler VECTNUM=32
ffffffff8020b9d5:	0f 01 f8             	swapgs 
ffffffff8020b9d8:	6a 00                	push   $0x0
ffffffff8020b9da:	6a 20                	push   $0x20
ffffffff8020b9dc:	e9 d3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9e1 <__RME_X64_USER33_Handler>:
USER_HANDLER NAME=__RME_X64_USER33_Handler VECTNUM=33
ffffffff8020b9e1:	0f 01 f8             	swapgs 
ffffffff8020b9e4:	6a 00                	push   $0x0
ffffffff8020b9e6:	6a 21                	push   $0x21
ffffffff8020b9e8:	e9 c7 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9ed <__RME_X64_USER34_Handler>:
USER_HANDLER NAME=__RME_X64_USER34_Handler VECTNUM=34
ffffffff8020b9ed:	0f 01 f8             	swapgs 
ffffffff8020b9f0:	6a 00                	push   $0x0
ffffffff8020b9f2:	6a 22                	push   $0x22
ffffffff8020b9f4:	e9 bb 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9f9 <__RME_X64_USER35_Handler>:
USER_HANDLER NAME=__RME_X64_USER35_Handler VECTNUM=35
ffffffff8020b9f9:	0f 01 f8             	swapgs 
ffffffff8020b9fc:	6a 00                	push   $0x0
ffffffff8020b9fe:	6a 23                	push   $0x23
ffffffff8020ba00:	e9 af 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba05 <__RME_X64_USER36_Handler>:
USER_HANDLER NAME=__RME_X64_USER36_Handler VECTNUM=36
ffffffff8020ba05:	0f 01 f8             	swapgs 
ffffffff8020ba08:	6a 00                	push   $0x0
ffffffff8020ba0a:	6a 24                	push   $0x24
ffffffff8020ba0c:	e9 a3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba11 <__RME_X64_USER37_Handler>:
USER_HANDLER NAME=__RME_X64_USER37_Handler VECTNUM=37
ffffffff8020ba11:	0f 01 f8             	swapgs 
ffffffff8020ba14:	6a 00                	push   $0x0
ffffffff8020ba16:	6a 25                	push   $0x25
ffffffff8020ba18:	e9 97 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba1d <__RME_X64_USER38_Handler>:
USER_HANDLER NAME=__RME_X64_USER38_Handler VECTNUM=38
ffffffff8020ba1d:	0f 01 f8             	swapgs 
ffffffff8020ba20:	6a 00                	push   $0x0
ffffffff8020ba22:	6a 26                	push   $0x26
ffffffff8020ba24:	e9 8b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba29 <__RME_X64_USER39_Handler>:
USER_HANDLER NAME=__RME_X64_USER39_Handler VECTNUM=39
ffffffff8020ba29:	0f 01 f8             	swapgs 
ffffffff8020ba2c:	6a 00                	push   $0x0
ffffffff8020ba2e:	6a 27                	push   $0x27
ffffffff8020ba30:	e9 7f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba35 <__RME_X64_USER40_Handler>:

USER_HANDLER NAME=__RME_X64_USER40_Handler VECTNUM=40
ffffffff8020ba35:	0f 01 f8             	swapgs 
ffffffff8020ba38:	6a 00                	push   $0x0
ffffffff8020ba3a:	6a 28                	push   $0x28
ffffffff8020ba3c:	e9 73 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba41 <__RME_X64_USER41_Handler>:
USER_HANDLER NAME=__RME_X64_USER41_Handler VECTNUM=41
ffffffff8020ba41:	0f 01 f8             	swapgs 
ffffffff8020ba44:	6a 00                	push   $0x0
ffffffff8020ba46:	6a 29                	push   $0x29
ffffffff8020ba48:	e9 67 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba4d <__RME_X64_USER42_Handler>:
USER_HANDLER NAME=__RME_X64_USER42_Handler VECTNUM=42
ffffffff8020ba4d:	0f 01 f8             	swapgs 
ffffffff8020ba50:	6a 00                	push   $0x0
ffffffff8020ba52:	6a 2a                	push   $0x2a
ffffffff8020ba54:	e9 5b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba59 <__RME_X64_USER43_Handler>:
USER_HANDLER NAME=__RME_X64_USER43_Handler VECTNUM=43
ffffffff8020ba59:	0f 01 f8             	swapgs 
ffffffff8020ba5c:	6a 00                	push   $0x0
ffffffff8020ba5e:	6a 2b                	push   $0x2b
ffffffff8020ba60:	e9 4f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba65 <__RME_X64_USER44_Handler>:
USER_HANDLER NAME=__RME_X64_USER44_Handler VECTNUM=44
ffffffff8020ba65:	0f 01 f8             	swapgs 
ffffffff8020ba68:	6a 00                	push   $0x0
ffffffff8020ba6a:	6a 2c                	push   $0x2c
ffffffff8020ba6c:	e9 43 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba71 <__RME_X64_USER45_Handler>:
USER_HANDLER NAME=__RME_X64_USER45_Handler VECTNUM=45
ffffffff8020ba71:	0f 01 f8             	swapgs 
ffffffff8020ba74:	6a 00                	push   $0x0
ffffffff8020ba76:	6a 2d                	push   $0x2d
ffffffff8020ba78:	e9 37 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba7d <__RME_X64_USER46_Handler>:
USER_HANDLER NAME=__RME_X64_USER46_Handler VECTNUM=46
ffffffff8020ba7d:	0f 01 f8             	swapgs 
ffffffff8020ba80:	6a 00                	push   $0x0
ffffffff8020ba82:	6a 2e                	push   $0x2e
ffffffff8020ba84:	e9 2b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba89 <__RME_X64_USER47_Handler>:
USER_HANDLER NAME=__RME_X64_USER47_Handler VECTNUM=47
ffffffff8020ba89:	0f 01 f8             	swapgs 
ffffffff8020ba8c:	6a 00                	push   $0x0
ffffffff8020ba8e:	6a 2f                	push   $0x2f
ffffffff8020ba90:	e9 1f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba95 <__RME_X64_USER48_Handler>:
USER_HANDLER NAME=__RME_X64_USER48_Handler VECTNUM=48
ffffffff8020ba95:	0f 01 f8             	swapgs 
ffffffff8020ba98:	6a 00                	push   $0x0
ffffffff8020ba9a:	6a 30                	push   $0x30
ffffffff8020ba9c:	e9 13 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baa1 <__RME_X64_USER49_Handler>:
USER_HANDLER NAME=__RME_X64_USER49_Handler VECTNUM=49
ffffffff8020baa1:	0f 01 f8             	swapgs 
ffffffff8020baa4:	6a 00                	push   $0x0
ffffffff8020baa6:	6a 31                	push   $0x31
ffffffff8020baa8:	e9 07 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baad <__RME_X64_USER50_Handler>:

USER_HANDLER NAME=__RME_X64_USER50_Handler VECTNUM=50
ffffffff8020baad:	0f 01 f8             	swapgs 
ffffffff8020bab0:	6a 00                	push   $0x0
ffffffff8020bab2:	6a 32                	push   $0x32
ffffffff8020bab4:	e9 fb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bab9 <__RME_X64_USER51_Handler>:
USER_HANDLER NAME=__RME_X64_USER51_Handler VECTNUM=51
ffffffff8020bab9:	0f 01 f8             	swapgs 
ffffffff8020babc:	6a 00                	push   $0x0
ffffffff8020babe:	6a 33                	push   $0x33
ffffffff8020bac0:	e9 ef 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bac5 <__RME_X64_USER52_Handler>:
USER_HANDLER NAME=__RME_X64_USER52_Handler VECTNUM=52
ffffffff8020bac5:	0f 01 f8             	swapgs 
ffffffff8020bac8:	6a 00                	push   $0x0
ffffffff8020baca:	6a 34                	push   $0x34
ffffffff8020bacc:	e9 e3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bad1 <__RME_X64_USER53_Handler>:
USER_HANDLER NAME=__RME_X64_USER53_Handler VECTNUM=53
ffffffff8020bad1:	0f 01 f8             	swapgs 
ffffffff8020bad4:	6a 00                	push   $0x0
ffffffff8020bad6:	6a 35                	push   $0x35
ffffffff8020bad8:	e9 d7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020badd <__RME_X64_USER54_Handler>:
USER_HANDLER NAME=__RME_X64_USER54_Handler VECTNUM=54
ffffffff8020badd:	0f 01 f8             	swapgs 
ffffffff8020bae0:	6a 00                	push   $0x0
ffffffff8020bae2:	6a 36                	push   $0x36
ffffffff8020bae4:	e9 cb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bae9 <__RME_X64_USER55_Handler>:
USER_HANDLER NAME=__RME_X64_USER55_Handler VECTNUM=55
ffffffff8020bae9:	0f 01 f8             	swapgs 
ffffffff8020baec:	6a 00                	push   $0x0
ffffffff8020baee:	6a 37                	push   $0x37
ffffffff8020baf0:	e9 bf 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baf5 <__RME_X64_USER56_Handler>:
USER_HANDLER NAME=__RME_X64_USER56_Handler VECTNUM=56
ffffffff8020baf5:	0f 01 f8             	swapgs 
ffffffff8020baf8:	6a 00                	push   $0x0
ffffffff8020bafa:	6a 38                	push   $0x38
ffffffff8020bafc:	e9 b3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb01 <__RME_X64_USER57_Handler>:
USER_HANDLER NAME=__RME_X64_USER57_Handler VECTNUM=57
ffffffff8020bb01:	0f 01 f8             	swapgs 
ffffffff8020bb04:	6a 00                	push   $0x0
ffffffff8020bb06:	6a 39                	push   $0x39
ffffffff8020bb08:	e9 a7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb0d <__RME_X64_USER58_Handler>:
USER_HANDLER NAME=__RME_X64_USER58_Handler VECTNUM=58
ffffffff8020bb0d:	0f 01 f8             	swapgs 
ffffffff8020bb10:	6a 00                	push   $0x0
ffffffff8020bb12:	6a 3a                	push   $0x3a
ffffffff8020bb14:	e9 9b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb19 <__RME_X64_USER59_Handler>:
USER_HANDLER NAME=__RME_X64_USER59_Handler VECTNUM=59
ffffffff8020bb19:	0f 01 f8             	swapgs 
ffffffff8020bb1c:	6a 00                	push   $0x0
ffffffff8020bb1e:	6a 3b                	push   $0x3b
ffffffff8020bb20:	e9 8f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb25 <__RME_X64_USER60_Handler>:

USER_HANDLER NAME=__RME_X64_USER60_Handler VECTNUM=60
ffffffff8020bb25:	0f 01 f8             	swapgs 
ffffffff8020bb28:	6a 00                	push   $0x0
ffffffff8020bb2a:	6a 3c                	push   $0x3c
ffffffff8020bb2c:	e9 83 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb31 <__RME_X64_USER61_Handler>:
USER_HANDLER NAME=__RME_X64_USER61_Handler VECTNUM=61
ffffffff8020bb31:	0f 01 f8             	swapgs 
ffffffff8020bb34:	6a 00                	push   $0x0
ffffffff8020bb36:	6a 3d                	push   $0x3d
ffffffff8020bb38:	e9 77 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb3d <__RME_X64_USER62_Handler>:
USER_HANDLER NAME=__RME_X64_USER62_Handler VECTNUM=62
ffffffff8020bb3d:	0f 01 f8             	swapgs 
ffffffff8020bb40:	6a 00                	push   $0x0
ffffffff8020bb42:	6a 3e                	push   $0x3e
ffffffff8020bb44:	e9 6b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb49 <__RME_X64_USER63_Handler>:
USER_HANDLER NAME=__RME_X64_USER63_Handler VECTNUM=63
ffffffff8020bb49:	0f 01 f8             	swapgs 
ffffffff8020bb4c:	6a 00                	push   $0x0
ffffffff8020bb4e:	6a 3f                	push   $0x3f
ffffffff8020bb50:	e9 5f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb55 <__RME_X64_USER64_Handler>:
USER_HANDLER NAME=__RME_X64_USER64_Handler VECTNUM=64
ffffffff8020bb55:	0f 01 f8             	swapgs 
ffffffff8020bb58:	6a 00                	push   $0x0
ffffffff8020bb5a:	6a 40                	push   $0x40
ffffffff8020bb5c:	e9 53 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb61 <__RME_X64_USER65_Handler>:
USER_HANDLER NAME=__RME_X64_USER65_Handler VECTNUM=65
ffffffff8020bb61:	0f 01 f8             	swapgs 
ffffffff8020bb64:	6a 00                	push   $0x0
ffffffff8020bb66:	6a 41                	push   $0x41
ffffffff8020bb68:	e9 47 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb6d <__RME_X64_USER66_Handler>:
USER_HANDLER NAME=__RME_X64_USER66_Handler VECTNUM=66
ffffffff8020bb6d:	0f 01 f8             	swapgs 
ffffffff8020bb70:	6a 00                	push   $0x0
ffffffff8020bb72:	6a 42                	push   $0x42
ffffffff8020bb74:	e9 3b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb79 <__RME_X64_USER67_Handler>:
USER_HANDLER NAME=__RME_X64_USER67_Handler VECTNUM=67
ffffffff8020bb79:	0f 01 f8             	swapgs 
ffffffff8020bb7c:	6a 00                	push   $0x0
ffffffff8020bb7e:	6a 43                	push   $0x43
ffffffff8020bb80:	e9 2f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb85 <__RME_X64_USER68_Handler>:
USER_HANDLER NAME=__RME_X64_USER68_Handler VECTNUM=68
ffffffff8020bb85:	0f 01 f8             	swapgs 
ffffffff8020bb88:	6a 00                	push   $0x0
ffffffff8020bb8a:	6a 44                	push   $0x44
ffffffff8020bb8c:	e9 23 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb91 <__RME_X64_USER69_Handler>:
USER_HANDLER NAME=__RME_X64_USER69_Handler VECTNUM=69
ffffffff8020bb91:	0f 01 f8             	swapgs 
ffffffff8020bb94:	6a 00                	push   $0x0
ffffffff8020bb96:	6a 45                	push   $0x45
ffffffff8020bb98:	e9 17 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb9d <__RME_X64_USER70_Handler>:

USER_HANDLER NAME=__RME_X64_USER70_Handler VECTNUM=70
ffffffff8020bb9d:	0f 01 f8             	swapgs 
ffffffff8020bba0:	6a 00                	push   $0x0
ffffffff8020bba2:	6a 46                	push   $0x46
ffffffff8020bba4:	e9 0b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bba9 <__RME_X64_USER71_Handler>:
USER_HANDLER NAME=__RME_X64_USER71_Handler VECTNUM=71
ffffffff8020bba9:	0f 01 f8             	swapgs 
ffffffff8020bbac:	6a 00                	push   $0x0
ffffffff8020bbae:	6a 47                	push   $0x47
ffffffff8020bbb0:	e9 ff 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbb5 <__RME_X64_USER72_Handler>:
USER_HANDLER NAME=__RME_X64_USER72_Handler VECTNUM=72
ffffffff8020bbb5:	0f 01 f8             	swapgs 
ffffffff8020bbb8:	6a 00                	push   $0x0
ffffffff8020bbba:	6a 48                	push   $0x48
ffffffff8020bbbc:	e9 f3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbc1 <__RME_X64_USER73_Handler>:
USER_HANDLER NAME=__RME_X64_USER73_Handler VECTNUM=73
ffffffff8020bbc1:	0f 01 f8             	swapgs 
ffffffff8020bbc4:	6a 00                	push   $0x0
ffffffff8020bbc6:	6a 49                	push   $0x49
ffffffff8020bbc8:	e9 e7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbcd <__RME_X64_USER74_Handler>:
USER_HANDLER NAME=__RME_X64_USER74_Handler VECTNUM=74
ffffffff8020bbcd:	0f 01 f8             	swapgs 
ffffffff8020bbd0:	6a 00                	push   $0x0
ffffffff8020bbd2:	6a 4a                	push   $0x4a
ffffffff8020bbd4:	e9 db 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbd9 <__RME_X64_USER75_Handler>:
USER_HANDLER NAME=__RME_X64_USER75_Handler VECTNUM=75
ffffffff8020bbd9:	0f 01 f8             	swapgs 
ffffffff8020bbdc:	6a 00                	push   $0x0
ffffffff8020bbde:	6a 4b                	push   $0x4b
ffffffff8020bbe0:	e9 cf 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbe5 <__RME_X64_USER76_Handler>:
USER_HANDLER NAME=__RME_X64_USER76_Handler VECTNUM=76
ffffffff8020bbe5:	0f 01 f8             	swapgs 
ffffffff8020bbe8:	6a 00                	push   $0x0
ffffffff8020bbea:	6a 4c                	push   $0x4c
ffffffff8020bbec:	e9 c3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbf1 <__RME_X64_USER77_Handler>:
USER_HANDLER NAME=__RME_X64_USER77_Handler VECTNUM=77
ffffffff8020bbf1:	0f 01 f8             	swapgs 
ffffffff8020bbf4:	6a 00                	push   $0x0
ffffffff8020bbf6:	6a 4d                	push   $0x4d
ffffffff8020bbf8:	e9 b7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbfd <__RME_X64_USER78_Handler>:
USER_HANDLER NAME=__RME_X64_USER78_Handler VECTNUM=78
ffffffff8020bbfd:	0f 01 f8             	swapgs 
ffffffff8020bc00:	6a 00                	push   $0x0
ffffffff8020bc02:	6a 4e                	push   $0x4e
ffffffff8020bc04:	e9 ab 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc09 <__RME_X64_USER79_Handler>:
USER_HANDLER NAME=__RME_X64_USER79_Handler VECTNUM=79
ffffffff8020bc09:	0f 01 f8             	swapgs 
ffffffff8020bc0c:	6a 00                	push   $0x0
ffffffff8020bc0e:	6a 4f                	push   $0x4f
ffffffff8020bc10:	e9 9f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc15 <__RME_X64_USER80_Handler>:

USER_HANDLER NAME=__RME_X64_USER80_Handler VECTNUM=80
ffffffff8020bc15:	0f 01 f8             	swapgs 
ffffffff8020bc18:	6a 00                	push   $0x0
ffffffff8020bc1a:	6a 50                	push   $0x50
ffffffff8020bc1c:	e9 93 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc21 <__RME_X64_USER81_Handler>:
USER_HANDLER NAME=__RME_X64_USER81_Handler VECTNUM=81
ffffffff8020bc21:	0f 01 f8             	swapgs 
ffffffff8020bc24:	6a 00                	push   $0x0
ffffffff8020bc26:	6a 51                	push   $0x51
ffffffff8020bc28:	e9 87 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc2d <__RME_X64_USER82_Handler>:
USER_HANDLER NAME=__RME_X64_USER82_Handler VECTNUM=82
ffffffff8020bc2d:	0f 01 f8             	swapgs 
ffffffff8020bc30:	6a 00                	push   $0x0
ffffffff8020bc32:	6a 52                	push   $0x52
ffffffff8020bc34:	e9 7b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc39 <__RME_X64_USER83_Handler>:
USER_HANDLER NAME=__RME_X64_USER83_Handler VECTNUM=83
ffffffff8020bc39:	0f 01 f8             	swapgs 
ffffffff8020bc3c:	6a 00                	push   $0x0
ffffffff8020bc3e:	6a 53                	push   $0x53
ffffffff8020bc40:	e9 6f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc45 <__RME_X64_USER84_Handler>:
USER_HANDLER NAME=__RME_X64_USER84_Handler VECTNUM=84
ffffffff8020bc45:	0f 01 f8             	swapgs 
ffffffff8020bc48:	6a 00                	push   $0x0
ffffffff8020bc4a:	6a 54                	push   $0x54
ffffffff8020bc4c:	e9 63 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc51 <__RME_X64_USER85_Handler>:
USER_HANDLER NAME=__RME_X64_USER85_Handler VECTNUM=85
ffffffff8020bc51:	0f 01 f8             	swapgs 
ffffffff8020bc54:	6a 00                	push   $0x0
ffffffff8020bc56:	6a 55                	push   $0x55
ffffffff8020bc58:	e9 57 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc5d <__RME_X64_USER86_Handler>:
USER_HANDLER NAME=__RME_X64_USER86_Handler VECTNUM=86
ffffffff8020bc5d:	0f 01 f8             	swapgs 
ffffffff8020bc60:	6a 00                	push   $0x0
ffffffff8020bc62:	6a 56                	push   $0x56
ffffffff8020bc64:	e9 4b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc69 <__RME_X64_USER87_Handler>:
USER_HANDLER NAME=__RME_X64_USER87_Handler VECTNUM=87
ffffffff8020bc69:	0f 01 f8             	swapgs 
ffffffff8020bc6c:	6a 00                	push   $0x0
ffffffff8020bc6e:	6a 57                	push   $0x57
ffffffff8020bc70:	e9 3f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc75 <__RME_X64_USER88_Handler>:
USER_HANDLER NAME=__RME_X64_USER88_Handler VECTNUM=88
ffffffff8020bc75:	0f 01 f8             	swapgs 
ffffffff8020bc78:	6a 00                	push   $0x0
ffffffff8020bc7a:	6a 58                	push   $0x58
ffffffff8020bc7c:	e9 33 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc81 <__RME_X64_USER89_Handler>:
USER_HANDLER NAME=__RME_X64_USER89_Handler VECTNUM=89
ffffffff8020bc81:	0f 01 f8             	swapgs 
ffffffff8020bc84:	6a 00                	push   $0x0
ffffffff8020bc86:	6a 59                	push   $0x59
ffffffff8020bc88:	e9 27 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc8d <__RME_X64_USER90_Handler>:

USER_HANDLER NAME=__RME_X64_USER90_Handler VECTNUM=90
ffffffff8020bc8d:	0f 01 f8             	swapgs 
ffffffff8020bc90:	6a 00                	push   $0x0
ffffffff8020bc92:	6a 5a                	push   $0x5a
ffffffff8020bc94:	e9 1b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc99 <__RME_X64_USER91_Handler>:
USER_HANDLER NAME=__RME_X64_USER91_Handler VECTNUM=91
ffffffff8020bc99:	0f 01 f8             	swapgs 
ffffffff8020bc9c:	6a 00                	push   $0x0
ffffffff8020bc9e:	6a 5b                	push   $0x5b
ffffffff8020bca0:	e9 0f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bca5 <__RME_X64_USER92_Handler>:
USER_HANDLER NAME=__RME_X64_USER92_Handler VECTNUM=92
ffffffff8020bca5:	0f 01 f8             	swapgs 
ffffffff8020bca8:	6a 00                	push   $0x0
ffffffff8020bcaa:	6a 5c                	push   $0x5c
ffffffff8020bcac:	e9 03 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcb1 <__RME_X64_USER93_Handler>:
USER_HANDLER NAME=__RME_X64_USER93_Handler VECTNUM=93
ffffffff8020bcb1:	0f 01 f8             	swapgs 
ffffffff8020bcb4:	6a 00                	push   $0x0
ffffffff8020bcb6:	6a 5d                	push   $0x5d
ffffffff8020bcb8:	e9 f7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcbd <__RME_X64_USER94_Handler>:
USER_HANDLER NAME=__RME_X64_USER94_Handler VECTNUM=94
ffffffff8020bcbd:	0f 01 f8             	swapgs 
ffffffff8020bcc0:	6a 00                	push   $0x0
ffffffff8020bcc2:	6a 5e                	push   $0x5e
ffffffff8020bcc4:	e9 eb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcc9 <__RME_X64_USER95_Handler>:
USER_HANDLER NAME=__RME_X64_USER95_Handler VECTNUM=95
ffffffff8020bcc9:	0f 01 f8             	swapgs 
ffffffff8020bccc:	6a 00                	push   $0x0
ffffffff8020bcce:	6a 5f                	push   $0x5f
ffffffff8020bcd0:	e9 df 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcd5 <__RME_X64_USER96_Handler>:
USER_HANDLER NAME=__RME_X64_USER96_Handler VECTNUM=96
ffffffff8020bcd5:	0f 01 f8             	swapgs 
ffffffff8020bcd8:	6a 00                	push   $0x0
ffffffff8020bcda:	6a 60                	push   $0x60
ffffffff8020bcdc:	e9 d3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bce1 <__RME_X64_USER97_Handler>:
USER_HANDLER NAME=__RME_X64_USER97_Handler VECTNUM=97
ffffffff8020bce1:	0f 01 f8             	swapgs 
ffffffff8020bce4:	6a 00                	push   $0x0
ffffffff8020bce6:	6a 61                	push   $0x61
ffffffff8020bce8:	e9 c7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bced <__RME_X64_USER98_Handler>:
USER_HANDLER NAME=__RME_X64_USER98_Handler VECTNUM=98
ffffffff8020bced:	0f 01 f8             	swapgs 
ffffffff8020bcf0:	6a 00                	push   $0x0
ffffffff8020bcf2:	6a 62                	push   $0x62
ffffffff8020bcf4:	e9 bb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcf9 <__RME_X64_USER99_Handler>:
USER_HANDLER NAME=__RME_X64_USER99_Handler VECTNUM=99
ffffffff8020bcf9:	0f 01 f8             	swapgs 
ffffffff8020bcfc:	6a 00                	push   $0x0
ffffffff8020bcfe:	6a 63                	push   $0x63
ffffffff8020bd00:	e9 af 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd05 <__RME_X64_USER100_Handler>:

USER_HANDLER NAME=__RME_X64_USER100_Handler VECTNUM=100
ffffffff8020bd05:	0f 01 f8             	swapgs 
ffffffff8020bd08:	6a 00                	push   $0x0
ffffffff8020bd0a:	6a 64                	push   $0x64
ffffffff8020bd0c:	e9 a3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd11 <__RME_X64_USER101_Handler>:
USER_HANDLER NAME=__RME_X64_USER101_Handler VECTNUM=101
ffffffff8020bd11:	0f 01 f8             	swapgs 
ffffffff8020bd14:	6a 00                	push   $0x0
ffffffff8020bd16:	6a 65                	push   $0x65
ffffffff8020bd18:	e9 97 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd1d <__RME_X64_USER102_Handler>:
USER_HANDLER NAME=__RME_X64_USER102_Handler VECTNUM=102
ffffffff8020bd1d:	0f 01 f8             	swapgs 
ffffffff8020bd20:	6a 00                	push   $0x0
ffffffff8020bd22:	6a 66                	push   $0x66
ffffffff8020bd24:	e9 8b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd29 <__RME_X64_USER103_Handler>:
USER_HANDLER NAME=__RME_X64_USER103_Handler VECTNUM=103
ffffffff8020bd29:	0f 01 f8             	swapgs 
ffffffff8020bd2c:	6a 00                	push   $0x0
ffffffff8020bd2e:	6a 67                	push   $0x67
ffffffff8020bd30:	e9 7f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd35 <__RME_X64_USER104_Handler>:
USER_HANDLER NAME=__RME_X64_USER104_Handler VECTNUM=104
ffffffff8020bd35:	0f 01 f8             	swapgs 
ffffffff8020bd38:	6a 00                	push   $0x0
ffffffff8020bd3a:	6a 68                	push   $0x68
ffffffff8020bd3c:	e9 73 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd41 <__RME_X64_USER105_Handler>:
USER_HANDLER NAME=__RME_X64_USER105_Handler VECTNUM=105
ffffffff8020bd41:	0f 01 f8             	swapgs 
ffffffff8020bd44:	6a 00                	push   $0x0
ffffffff8020bd46:	6a 69                	push   $0x69
ffffffff8020bd48:	e9 67 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd4d <__RME_X64_USER106_Handler>:
USER_HANDLER NAME=__RME_X64_USER106_Handler VECTNUM=106
ffffffff8020bd4d:	0f 01 f8             	swapgs 
ffffffff8020bd50:	6a 00                	push   $0x0
ffffffff8020bd52:	6a 6a                	push   $0x6a
ffffffff8020bd54:	e9 5b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd59 <__RME_X64_USER107_Handler>:
USER_HANDLER NAME=__RME_X64_USER107_Handler VECTNUM=107
ffffffff8020bd59:	0f 01 f8             	swapgs 
ffffffff8020bd5c:	6a 00                	push   $0x0
ffffffff8020bd5e:	6a 6b                	push   $0x6b
ffffffff8020bd60:	e9 4f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd65 <__RME_X64_USER108_Handler>:
USER_HANDLER NAME=__RME_X64_USER108_Handler VECTNUM=108
ffffffff8020bd65:	0f 01 f8             	swapgs 
ffffffff8020bd68:	6a 00                	push   $0x0
ffffffff8020bd6a:	6a 6c                	push   $0x6c
ffffffff8020bd6c:	e9 43 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd71 <__RME_X64_USER109_Handler>:
USER_HANDLER NAME=__RME_X64_USER109_Handler VECTNUM=109
ffffffff8020bd71:	0f 01 f8             	swapgs 
ffffffff8020bd74:	6a 00                	push   $0x0
ffffffff8020bd76:	6a 6d                	push   $0x6d
ffffffff8020bd78:	e9 37 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd7d <__RME_X64_USER110_Handler>:

USER_HANDLER NAME=__RME_X64_USER110_Handler VECTNUM=110
ffffffff8020bd7d:	0f 01 f8             	swapgs 
ffffffff8020bd80:	6a 00                	push   $0x0
ffffffff8020bd82:	6a 6e                	push   $0x6e
ffffffff8020bd84:	e9 2b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd89 <__RME_X64_USER111_Handler>:
USER_HANDLER NAME=__RME_X64_USER111_Handler VECTNUM=111
ffffffff8020bd89:	0f 01 f8             	swapgs 
ffffffff8020bd8c:	6a 00                	push   $0x0
ffffffff8020bd8e:	6a 6f                	push   $0x6f
ffffffff8020bd90:	e9 1f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd95 <__RME_X64_USER112_Handler>:
USER_HANDLER NAME=__RME_X64_USER112_Handler VECTNUM=112
ffffffff8020bd95:	0f 01 f8             	swapgs 
ffffffff8020bd98:	6a 00                	push   $0x0
ffffffff8020bd9a:	6a 70                	push   $0x70
ffffffff8020bd9c:	e9 13 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bda1 <__RME_X64_USER113_Handler>:
USER_HANDLER NAME=__RME_X64_USER113_Handler VECTNUM=113
ffffffff8020bda1:	0f 01 f8             	swapgs 
ffffffff8020bda4:	6a 00                	push   $0x0
ffffffff8020bda6:	6a 71                	push   $0x71
ffffffff8020bda8:	e9 07 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdad <__RME_X64_USER114_Handler>:
USER_HANDLER NAME=__RME_X64_USER114_Handler VECTNUM=114
ffffffff8020bdad:	0f 01 f8             	swapgs 
ffffffff8020bdb0:	6a 00                	push   $0x0
ffffffff8020bdb2:	6a 72                	push   $0x72
ffffffff8020bdb4:	e9 fb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdb9 <__RME_X64_USER115_Handler>:
USER_HANDLER NAME=__RME_X64_USER115_Handler VECTNUM=115
ffffffff8020bdb9:	0f 01 f8             	swapgs 
ffffffff8020bdbc:	6a 00                	push   $0x0
ffffffff8020bdbe:	6a 73                	push   $0x73
ffffffff8020bdc0:	e9 ef 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdc5 <__RME_X64_USER116_Handler>:
USER_HANDLER NAME=__RME_X64_USER116_Handler VECTNUM=116
ffffffff8020bdc5:	0f 01 f8             	swapgs 
ffffffff8020bdc8:	6a 00                	push   $0x0
ffffffff8020bdca:	6a 74                	push   $0x74
ffffffff8020bdcc:	e9 e3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdd1 <__RME_X64_USER117_Handler>:
USER_HANDLER NAME=__RME_X64_USER117_Handler VECTNUM=117
ffffffff8020bdd1:	0f 01 f8             	swapgs 
ffffffff8020bdd4:	6a 00                	push   $0x0
ffffffff8020bdd6:	6a 75                	push   $0x75
ffffffff8020bdd8:	e9 d7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bddd <__RME_X64_USER118_Handler>:
USER_HANDLER NAME=__RME_X64_USER118_Handler VECTNUM=118
ffffffff8020bddd:	0f 01 f8             	swapgs 
ffffffff8020bde0:	6a 00                	push   $0x0
ffffffff8020bde2:	6a 76                	push   $0x76
ffffffff8020bde4:	e9 cb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bde9 <__RME_X64_USER119_Handler>:
USER_HANDLER NAME=__RME_X64_USER119_Handler VECTNUM=119
ffffffff8020bde9:	0f 01 f8             	swapgs 
ffffffff8020bdec:	6a 00                	push   $0x0
ffffffff8020bdee:	6a 77                	push   $0x77
ffffffff8020bdf0:	e9 bf 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdf5 <__RME_X64_USER120_Handler>:

USER_HANDLER NAME=__RME_X64_USER120_Handler VECTNUM=120
ffffffff8020bdf5:	0f 01 f8             	swapgs 
ffffffff8020bdf8:	6a 00                	push   $0x0
ffffffff8020bdfa:	6a 78                	push   $0x78
ffffffff8020bdfc:	e9 b3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be01 <__RME_X64_USER121_Handler>:
USER_HANDLER NAME=__RME_X64_USER121_Handler VECTNUM=121
ffffffff8020be01:	0f 01 f8             	swapgs 
ffffffff8020be04:	6a 00                	push   $0x0
ffffffff8020be06:	6a 79                	push   $0x79
ffffffff8020be08:	e9 a7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be0d <__RME_X64_USER122_Handler>:
USER_HANDLER NAME=__RME_X64_USER122_Handler VECTNUM=122
ffffffff8020be0d:	0f 01 f8             	swapgs 
ffffffff8020be10:	6a 00                	push   $0x0
ffffffff8020be12:	6a 7a                	push   $0x7a
ffffffff8020be14:	e9 9b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be19 <__RME_X64_USER123_Handler>:
USER_HANDLER NAME=__RME_X64_USER123_Handler VECTNUM=123
ffffffff8020be19:	0f 01 f8             	swapgs 
ffffffff8020be1c:	6a 00                	push   $0x0
ffffffff8020be1e:	6a 7b                	push   $0x7b
ffffffff8020be20:	e9 8f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be25 <__RME_X64_USER124_Handler>:
USER_HANDLER NAME=__RME_X64_USER124_Handler VECTNUM=124
ffffffff8020be25:	0f 01 f8             	swapgs 
ffffffff8020be28:	6a 00                	push   $0x0
ffffffff8020be2a:	6a 7c                	push   $0x7c
ffffffff8020be2c:	e9 83 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be31 <__RME_X64_USER125_Handler>:
USER_HANDLER NAME=__RME_X64_USER125_Handler VECTNUM=125
ffffffff8020be31:	0f 01 f8             	swapgs 
ffffffff8020be34:	6a 00                	push   $0x0
ffffffff8020be36:	6a 7d                	push   $0x7d
ffffffff8020be38:	e9 77 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be3d <__RME_X64_USER126_Handler>:
USER_HANDLER NAME=__RME_X64_USER126_Handler VECTNUM=126
ffffffff8020be3d:	0f 01 f8             	swapgs 
ffffffff8020be40:	6a 00                	push   $0x0
ffffffff8020be42:	6a 7e                	push   $0x7e
ffffffff8020be44:	e9 6b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be49 <__RME_X64_USER127_Handler>:
USER_HANDLER NAME=__RME_X64_USER127_Handler VECTNUM=127
ffffffff8020be49:	0f 01 f8             	swapgs 
ffffffff8020be4c:	6a 00                	push   $0x0
ffffffff8020be4e:	6a 7f                	push   $0x7f
ffffffff8020be50:	e9 5f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be55 <__RME_X64_USER128_Handler>:
USER_HANDLER NAME=__RME_X64_USER128_Handler VECTNUM=128
ffffffff8020be55:	0f 01 f8             	swapgs 
ffffffff8020be58:	6a 00                	push   $0x0
ffffffff8020be5a:	68 80 00 00 00       	push   $0x80
ffffffff8020be5f:	e9 50 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be64 <__RME_X64_USER129_Handler>:
USER_HANDLER NAME=__RME_X64_USER129_Handler VECTNUM=129
ffffffff8020be64:	0f 01 f8             	swapgs 
ffffffff8020be67:	6a 00                	push   $0x0
ffffffff8020be69:	68 81 00 00 00       	push   $0x81
ffffffff8020be6e:	e9 41 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be73 <__RME_X64_USER130_Handler>:

USER_HANDLER NAME=__RME_X64_USER130_Handler VECTNUM=130
ffffffff8020be73:	0f 01 f8             	swapgs 
ffffffff8020be76:	6a 00                	push   $0x0
ffffffff8020be78:	68 82 00 00 00       	push   $0x82
ffffffff8020be7d:	e9 32 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be82 <__RME_X64_USER131_Handler>:
USER_HANDLER NAME=__RME_X64_USER131_Handler VECTNUM=131
ffffffff8020be82:	0f 01 f8             	swapgs 
ffffffff8020be85:	6a 00                	push   $0x0
ffffffff8020be87:	68 83 00 00 00       	push   $0x83
ffffffff8020be8c:	e9 23 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be91 <__RME_X64_USER132_Handler>:
USER_HANDLER NAME=__RME_X64_USER132_Handler VECTNUM=132
ffffffff8020be91:	0f 01 f8             	swapgs 
ffffffff8020be94:	6a 00                	push   $0x0
ffffffff8020be96:	68 84 00 00 00       	push   $0x84
ffffffff8020be9b:	e9 14 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bea0 <__RME_X64_USER133_Handler>:
USER_HANDLER NAME=__RME_X64_USER133_Handler VECTNUM=133
ffffffff8020bea0:	0f 01 f8             	swapgs 
ffffffff8020bea3:	6a 00                	push   $0x0
ffffffff8020bea5:	68 85 00 00 00       	push   $0x85
ffffffff8020beaa:	e9 05 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beaf <__RME_X64_USER134_Handler>:
USER_HANDLER NAME=__RME_X64_USER134_Handler VECTNUM=134
ffffffff8020beaf:	0f 01 f8             	swapgs 
ffffffff8020beb2:	6a 00                	push   $0x0
ffffffff8020beb4:	68 86 00 00 00       	push   $0x86
ffffffff8020beb9:	e9 f6 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bebe <__RME_X64_USER135_Handler>:
USER_HANDLER NAME=__RME_X64_USER135_Handler VECTNUM=135
ffffffff8020bebe:	0f 01 f8             	swapgs 
ffffffff8020bec1:	6a 00                	push   $0x0
ffffffff8020bec3:	68 87 00 00 00       	push   $0x87
ffffffff8020bec8:	e9 e7 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020becd <__RME_X64_USER136_Handler>:
USER_HANDLER NAME=__RME_X64_USER136_Handler VECTNUM=136
ffffffff8020becd:	0f 01 f8             	swapgs 
ffffffff8020bed0:	6a 00                	push   $0x0
ffffffff8020bed2:	68 88 00 00 00       	push   $0x88
ffffffff8020bed7:	e9 d8 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bedc <__RME_X64_USER137_Handler>:
USER_HANDLER NAME=__RME_X64_USER137_Handler VECTNUM=137
ffffffff8020bedc:	0f 01 f8             	swapgs 
ffffffff8020bedf:	6a 00                	push   $0x0
ffffffff8020bee1:	68 89 00 00 00       	push   $0x89
ffffffff8020bee6:	e9 c9 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beeb <__RME_X64_USER138_Handler>:
USER_HANDLER NAME=__RME_X64_USER138_Handler VECTNUM=138
ffffffff8020beeb:	0f 01 f8             	swapgs 
ffffffff8020beee:	6a 00                	push   $0x0
ffffffff8020bef0:	68 8a 00 00 00       	push   $0x8a
ffffffff8020bef5:	e9 ba 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020befa <__RME_X64_USER139_Handler>:
USER_HANDLER NAME=__RME_X64_USER139_Handler VECTNUM=139
ffffffff8020befa:	0f 01 f8             	swapgs 
ffffffff8020befd:	6a 00                	push   $0x0
ffffffff8020beff:	68 8b 00 00 00       	push   $0x8b
ffffffff8020bf04:	e9 ab 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf09 <__RME_X64_USER140_Handler>:

USER_HANDLER NAME=__RME_X64_USER140_Handler VECTNUM=140
ffffffff8020bf09:	0f 01 f8             	swapgs 
ffffffff8020bf0c:	6a 00                	push   $0x0
ffffffff8020bf0e:	68 8c 00 00 00       	push   $0x8c
ffffffff8020bf13:	e9 9c 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf18 <__RME_X64_USER141_Handler>:
USER_HANDLER NAME=__RME_X64_USER141_Handler VECTNUM=141
ffffffff8020bf18:	0f 01 f8             	swapgs 
ffffffff8020bf1b:	6a 00                	push   $0x0
ffffffff8020bf1d:	68 8d 00 00 00       	push   $0x8d
ffffffff8020bf22:	e9 8d 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf27 <__RME_X64_USER142_Handler>:
USER_HANDLER NAME=__RME_X64_USER142_Handler VECTNUM=142
ffffffff8020bf27:	0f 01 f8             	swapgs 
ffffffff8020bf2a:	6a 00                	push   $0x0
ffffffff8020bf2c:	68 8e 00 00 00       	push   $0x8e
ffffffff8020bf31:	e9 7e 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf36 <__RME_X64_USER143_Handler>:
USER_HANDLER NAME=__RME_X64_USER143_Handler VECTNUM=143
ffffffff8020bf36:	0f 01 f8             	swapgs 
ffffffff8020bf39:	6a 00                	push   $0x0
ffffffff8020bf3b:	68 8f 00 00 00       	push   $0x8f
ffffffff8020bf40:	e9 6f 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf45 <__RME_X64_USER144_Handler>:
USER_HANDLER NAME=__RME_X64_USER144_Handler VECTNUM=144
ffffffff8020bf45:	0f 01 f8             	swapgs 
ffffffff8020bf48:	6a 00                	push   $0x0
ffffffff8020bf4a:	68 90 00 00 00       	push   $0x90
ffffffff8020bf4f:	e9 60 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf54 <__RME_X64_USER145_Handler>:
USER_HANDLER NAME=__RME_X64_USER145_Handler VECTNUM=145
ffffffff8020bf54:	0f 01 f8             	swapgs 
ffffffff8020bf57:	6a 00                	push   $0x0
ffffffff8020bf59:	68 91 00 00 00       	push   $0x91
ffffffff8020bf5e:	e9 51 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf63 <__RME_X64_USER146_Handler>:
USER_HANDLER NAME=__RME_X64_USER146_Handler VECTNUM=146
ffffffff8020bf63:	0f 01 f8             	swapgs 
ffffffff8020bf66:	6a 00                	push   $0x0
ffffffff8020bf68:	68 92 00 00 00       	push   $0x92
ffffffff8020bf6d:	e9 42 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf72 <__RME_X64_USER147_Handler>:
USER_HANDLER NAME=__RME_X64_USER147_Handler VECTNUM=147
ffffffff8020bf72:	0f 01 f8             	swapgs 
ffffffff8020bf75:	6a 00                	push   $0x0
ffffffff8020bf77:	68 93 00 00 00       	push   $0x93
ffffffff8020bf7c:	e9 33 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf81 <__RME_X64_USER148_Handler>:
USER_HANDLER NAME=__RME_X64_USER148_Handler VECTNUM=148
ffffffff8020bf81:	0f 01 f8             	swapgs 
ffffffff8020bf84:	6a 00                	push   $0x0
ffffffff8020bf86:	68 94 00 00 00       	push   $0x94
ffffffff8020bf8b:	e9 24 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf90 <__RME_X64_USER149_Handler>:
USER_HANDLER NAME=__RME_X64_USER149_Handler VECTNUM=149
ffffffff8020bf90:	0f 01 f8             	swapgs 
ffffffff8020bf93:	6a 00                	push   $0x0
ffffffff8020bf95:	68 95 00 00 00       	push   $0x95
ffffffff8020bf9a:	e9 15 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf9f <__RME_X64_USER150_Handler>:

USER_HANDLER NAME=__RME_X64_USER150_Handler VECTNUM=150
ffffffff8020bf9f:	0f 01 f8             	swapgs 
ffffffff8020bfa2:	6a 00                	push   $0x0
ffffffff8020bfa4:	68 96 00 00 00       	push   $0x96
ffffffff8020bfa9:	e9 06 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfae <__RME_X64_USER151_Handler>:
USER_HANDLER NAME=__RME_X64_USER151_Handler VECTNUM=151
ffffffff8020bfae:	0f 01 f8             	swapgs 
ffffffff8020bfb1:	6a 00                	push   $0x0
ffffffff8020bfb3:	68 97 00 00 00       	push   $0x97
ffffffff8020bfb8:	e9 f7 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfbd <__RME_X64_USER152_Handler>:
USER_HANDLER NAME=__RME_X64_USER152_Handler VECTNUM=152
ffffffff8020bfbd:	0f 01 f8             	swapgs 
ffffffff8020bfc0:	6a 00                	push   $0x0
ffffffff8020bfc2:	68 98 00 00 00       	push   $0x98
ffffffff8020bfc7:	e9 e8 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfcc <__RME_X64_USER153_Handler>:
USER_HANDLER NAME=__RME_X64_USER153_Handler VECTNUM=153
ffffffff8020bfcc:	0f 01 f8             	swapgs 
ffffffff8020bfcf:	6a 00                	push   $0x0
ffffffff8020bfd1:	68 99 00 00 00       	push   $0x99
ffffffff8020bfd6:	e9 d9 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfdb <__RME_X64_USER154_Handler>:
USER_HANDLER NAME=__RME_X64_USER154_Handler VECTNUM=154
ffffffff8020bfdb:	0f 01 f8             	swapgs 
ffffffff8020bfde:	6a 00                	push   $0x0
ffffffff8020bfe0:	68 9a 00 00 00       	push   $0x9a
ffffffff8020bfe5:	e9 ca 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfea <__RME_X64_USER155_Handler>:
USER_HANDLER NAME=__RME_X64_USER155_Handler VECTNUM=155
ffffffff8020bfea:	0f 01 f8             	swapgs 
ffffffff8020bfed:	6a 00                	push   $0x0
ffffffff8020bfef:	68 9b 00 00 00       	push   $0x9b
ffffffff8020bff4:	e9 bb 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bff9 <__RME_X64_USER156_Handler>:
USER_HANDLER NAME=__RME_X64_USER156_Handler VECTNUM=156
ffffffff8020bff9:	0f 01 f8             	swapgs 
ffffffff8020bffc:	6a 00                	push   $0x0
ffffffff8020bffe:	68 9c 00 00 00       	push   $0x9c
ffffffff8020c003:	e9 ac 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c008 <__RME_X64_USER157_Handler>:
USER_HANDLER NAME=__RME_X64_USER157_Handler VECTNUM=157
ffffffff8020c008:	0f 01 f8             	swapgs 
ffffffff8020c00b:	6a 00                	push   $0x0
ffffffff8020c00d:	68 9d 00 00 00       	push   $0x9d
ffffffff8020c012:	e9 9d 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c017 <__RME_X64_USER158_Handler>:
USER_HANDLER NAME=__RME_X64_USER158_Handler VECTNUM=158
ffffffff8020c017:	0f 01 f8             	swapgs 
ffffffff8020c01a:	6a 00                	push   $0x0
ffffffff8020c01c:	68 9e 00 00 00       	push   $0x9e
ffffffff8020c021:	e9 8e 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c026 <__RME_X64_USER159_Handler>:
USER_HANDLER NAME=__RME_X64_USER159_Handler VECTNUM=159
ffffffff8020c026:	0f 01 f8             	swapgs 
ffffffff8020c029:	6a 00                	push   $0x0
ffffffff8020c02b:	68 9f 00 00 00       	push   $0x9f
ffffffff8020c030:	e9 7f 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c035 <__RME_X64_USER160_Handler>:

USER_HANDLER NAME=__RME_X64_USER160_Handler VECTNUM=160
ffffffff8020c035:	0f 01 f8             	swapgs 
ffffffff8020c038:	6a 00                	push   $0x0
ffffffff8020c03a:	68 a0 00 00 00       	push   $0xa0
ffffffff8020c03f:	e9 70 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c044 <__RME_X64_USER161_Handler>:
USER_HANDLER NAME=__RME_X64_USER161_Handler VECTNUM=161
ffffffff8020c044:	0f 01 f8             	swapgs 
ffffffff8020c047:	6a 00                	push   $0x0
ffffffff8020c049:	68 a1 00 00 00       	push   $0xa1
ffffffff8020c04e:	e9 61 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c053 <__RME_X64_USER162_Handler>:
USER_HANDLER NAME=__RME_X64_USER162_Handler VECTNUM=162
ffffffff8020c053:	0f 01 f8             	swapgs 
ffffffff8020c056:	6a 00                	push   $0x0
ffffffff8020c058:	68 a2 00 00 00       	push   $0xa2
ffffffff8020c05d:	e9 52 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c062 <__RME_X64_USER163_Handler>:
USER_HANDLER NAME=__RME_X64_USER163_Handler VECTNUM=163
ffffffff8020c062:	0f 01 f8             	swapgs 
ffffffff8020c065:	6a 00                	push   $0x0
ffffffff8020c067:	68 a3 00 00 00       	push   $0xa3
ffffffff8020c06c:	e9 43 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c071 <__RME_X64_USER164_Handler>:
USER_HANDLER NAME=__RME_X64_USER164_Handler VECTNUM=164
ffffffff8020c071:	0f 01 f8             	swapgs 
ffffffff8020c074:	6a 00                	push   $0x0
ffffffff8020c076:	68 a4 00 00 00       	push   $0xa4
ffffffff8020c07b:	e9 34 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c080 <__RME_X64_USER165_Handler>:
USER_HANDLER NAME=__RME_X64_USER165_Handler VECTNUM=165
ffffffff8020c080:	0f 01 f8             	swapgs 
ffffffff8020c083:	6a 00                	push   $0x0
ffffffff8020c085:	68 a5 00 00 00       	push   $0xa5
ffffffff8020c08a:	e9 25 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c08f <__RME_X64_USER166_Handler>:
USER_HANDLER NAME=__RME_X64_USER166_Handler VECTNUM=166
ffffffff8020c08f:	0f 01 f8             	swapgs 
ffffffff8020c092:	6a 00                	push   $0x0
ffffffff8020c094:	68 a6 00 00 00       	push   $0xa6
ffffffff8020c099:	e9 16 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c09e <__RME_X64_USER167_Handler>:
USER_HANDLER NAME=__RME_X64_USER167_Handler VECTNUM=167
ffffffff8020c09e:	0f 01 f8             	swapgs 
ffffffff8020c0a1:	6a 00                	push   $0x0
ffffffff8020c0a3:	68 a7 00 00 00       	push   $0xa7
ffffffff8020c0a8:	e9 07 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0ad <__RME_X64_USER168_Handler>:
USER_HANDLER NAME=__RME_X64_USER168_Handler VECTNUM=168
ffffffff8020c0ad:	0f 01 f8             	swapgs 
ffffffff8020c0b0:	6a 00                	push   $0x0
ffffffff8020c0b2:	68 a8 00 00 00       	push   $0xa8
ffffffff8020c0b7:	e9 f8 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0bc <__RME_X64_USER169_Handler>:
USER_HANDLER NAME=__RME_X64_USER169_Handler VECTNUM=169
ffffffff8020c0bc:	0f 01 f8             	swapgs 
ffffffff8020c0bf:	6a 00                	push   $0x0
ffffffff8020c0c1:	68 a9 00 00 00       	push   $0xa9
ffffffff8020c0c6:	e9 e9 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0cb <__RME_X64_USER170_Handler>:

USER_HANDLER NAME=__RME_X64_USER170_Handler VECTNUM=170
ffffffff8020c0cb:	0f 01 f8             	swapgs 
ffffffff8020c0ce:	6a 00                	push   $0x0
ffffffff8020c0d0:	68 aa 00 00 00       	push   $0xaa
ffffffff8020c0d5:	e9 da 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0da <__RME_X64_USER171_Handler>:
USER_HANDLER NAME=__RME_X64_USER171_Handler VECTNUM=171
ffffffff8020c0da:	0f 01 f8             	swapgs 
ffffffff8020c0dd:	6a 00                	push   $0x0
ffffffff8020c0df:	68 ab 00 00 00       	push   $0xab
ffffffff8020c0e4:	e9 cb 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0e9 <__RME_X64_USER172_Handler>:
USER_HANDLER NAME=__RME_X64_USER172_Handler VECTNUM=172
ffffffff8020c0e9:	0f 01 f8             	swapgs 
ffffffff8020c0ec:	6a 00                	push   $0x0
ffffffff8020c0ee:	68 ac 00 00 00       	push   $0xac
ffffffff8020c0f3:	e9 bc 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0f8 <__RME_X64_USER173_Handler>:
USER_HANDLER NAME=__RME_X64_USER173_Handler VECTNUM=173
ffffffff8020c0f8:	0f 01 f8             	swapgs 
ffffffff8020c0fb:	6a 00                	push   $0x0
ffffffff8020c0fd:	68 ad 00 00 00       	push   $0xad
ffffffff8020c102:	e9 ad 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c107 <__RME_X64_USER174_Handler>:
USER_HANDLER NAME=__RME_X64_USER174_Handler VECTNUM=174
ffffffff8020c107:	0f 01 f8             	swapgs 
ffffffff8020c10a:	6a 00                	push   $0x0
ffffffff8020c10c:	68 ae 00 00 00       	push   $0xae
ffffffff8020c111:	e9 9e 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c116 <__RME_X64_USER175_Handler>:
USER_HANDLER NAME=__RME_X64_USER175_Handler VECTNUM=175
ffffffff8020c116:	0f 01 f8             	swapgs 
ffffffff8020c119:	6a 00                	push   $0x0
ffffffff8020c11b:	68 af 00 00 00       	push   $0xaf
ffffffff8020c120:	e9 8f 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c125 <__RME_X64_USER176_Handler>:
USER_HANDLER NAME=__RME_X64_USER176_Handler VECTNUM=176
ffffffff8020c125:	0f 01 f8             	swapgs 
ffffffff8020c128:	6a 00                	push   $0x0
ffffffff8020c12a:	68 b0 00 00 00       	push   $0xb0
ffffffff8020c12f:	e9 80 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c134 <__RME_X64_USER177_Handler>:
USER_HANDLER NAME=__RME_X64_USER177_Handler VECTNUM=177
ffffffff8020c134:	0f 01 f8             	swapgs 
ffffffff8020c137:	6a 00                	push   $0x0
ffffffff8020c139:	68 b1 00 00 00       	push   $0xb1
ffffffff8020c13e:	e9 71 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c143 <__RME_X64_USER178_Handler>:
USER_HANDLER NAME=__RME_X64_USER178_Handler VECTNUM=178
ffffffff8020c143:	0f 01 f8             	swapgs 
ffffffff8020c146:	6a 00                	push   $0x0
ffffffff8020c148:	68 b2 00 00 00       	push   $0xb2
ffffffff8020c14d:	e9 62 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c152 <__RME_X64_USER179_Handler>:
USER_HANDLER NAME=__RME_X64_USER179_Handler VECTNUM=179
ffffffff8020c152:	0f 01 f8             	swapgs 
ffffffff8020c155:	6a 00                	push   $0x0
ffffffff8020c157:	68 b3 00 00 00       	push   $0xb3
ffffffff8020c15c:	e9 53 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c161 <__RME_X64_USER180_Handler>:

USER_HANDLER NAME=__RME_X64_USER180_Handler VECTNUM=180
ffffffff8020c161:	0f 01 f8             	swapgs 
ffffffff8020c164:	6a 00                	push   $0x0
ffffffff8020c166:	68 b4 00 00 00       	push   $0xb4
ffffffff8020c16b:	e9 44 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c170 <__RME_X64_USER181_Handler>:
USER_HANDLER NAME=__RME_X64_USER181_Handler VECTNUM=181
ffffffff8020c170:	0f 01 f8             	swapgs 
ffffffff8020c173:	6a 00                	push   $0x0
ffffffff8020c175:	68 b5 00 00 00       	push   $0xb5
ffffffff8020c17a:	e9 35 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c17f <__RME_X64_USER182_Handler>:
USER_HANDLER NAME=__RME_X64_USER182_Handler VECTNUM=182
ffffffff8020c17f:	0f 01 f8             	swapgs 
ffffffff8020c182:	6a 00                	push   $0x0
ffffffff8020c184:	68 b6 00 00 00       	push   $0xb6
ffffffff8020c189:	e9 26 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c18e <__RME_X64_USER183_Handler>:
USER_HANDLER NAME=__RME_X64_USER183_Handler VECTNUM=183
ffffffff8020c18e:	0f 01 f8             	swapgs 
ffffffff8020c191:	6a 00                	push   $0x0
ffffffff8020c193:	68 b7 00 00 00       	push   $0xb7
ffffffff8020c198:	e9 17 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c19d <__RME_X64_USER184_Handler>:
USER_HANDLER NAME=__RME_X64_USER184_Handler VECTNUM=184
ffffffff8020c19d:	0f 01 f8             	swapgs 
ffffffff8020c1a0:	6a 00                	push   $0x0
ffffffff8020c1a2:	68 b8 00 00 00       	push   $0xb8
ffffffff8020c1a7:	e9 08 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ac <__RME_X64_USER185_Handler>:
USER_HANDLER NAME=__RME_X64_USER185_Handler VECTNUM=185
ffffffff8020c1ac:	0f 01 f8             	swapgs 
ffffffff8020c1af:	6a 00                	push   $0x0
ffffffff8020c1b1:	68 b9 00 00 00       	push   $0xb9
ffffffff8020c1b6:	e9 f9 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1bb <__RME_X64_USER186_Handler>:
USER_HANDLER NAME=__RME_X64_USER186_Handler VECTNUM=186
ffffffff8020c1bb:	0f 01 f8             	swapgs 
ffffffff8020c1be:	6a 00                	push   $0x0
ffffffff8020c1c0:	68 ba 00 00 00       	push   $0xba
ffffffff8020c1c5:	e9 ea 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ca <__RME_X64_USER187_Handler>:
USER_HANDLER NAME=__RME_X64_USER187_Handler VECTNUM=187
ffffffff8020c1ca:	0f 01 f8             	swapgs 
ffffffff8020c1cd:	6a 00                	push   $0x0
ffffffff8020c1cf:	68 bb 00 00 00       	push   $0xbb
ffffffff8020c1d4:	e9 db 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1d9 <__RME_X64_USER188_Handler>:
USER_HANDLER NAME=__RME_X64_USER188_Handler VECTNUM=188
ffffffff8020c1d9:	0f 01 f8             	swapgs 
ffffffff8020c1dc:	6a 00                	push   $0x0
ffffffff8020c1de:	68 bc 00 00 00       	push   $0xbc
ffffffff8020c1e3:	e9 cc 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1e8 <__RME_X64_USER189_Handler>:
USER_HANDLER NAME=__RME_X64_USER189_Handler VECTNUM=189
ffffffff8020c1e8:	0f 01 f8             	swapgs 
ffffffff8020c1eb:	6a 00                	push   $0x0
ffffffff8020c1ed:	68 bd 00 00 00       	push   $0xbd
ffffffff8020c1f2:	e9 bd 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1f7 <__RME_X64_USER190_Handler>:

USER_HANDLER NAME=__RME_X64_USER190_Handler VECTNUM=190
ffffffff8020c1f7:	0f 01 f8             	swapgs 
ffffffff8020c1fa:	6a 00                	push   $0x0
ffffffff8020c1fc:	68 be 00 00 00       	push   $0xbe
ffffffff8020c201:	e9 ae 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c206 <__RME_X64_USER191_Handler>:
USER_HANDLER NAME=__RME_X64_USER191_Handler VECTNUM=191
ffffffff8020c206:	0f 01 f8             	swapgs 
ffffffff8020c209:	6a 00                	push   $0x0
ffffffff8020c20b:	68 bf 00 00 00       	push   $0xbf
ffffffff8020c210:	e9 9f 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c215 <__RME_X64_USER192_Handler>:
USER_HANDLER NAME=__RME_X64_USER192_Handler VECTNUM=192
ffffffff8020c215:	0f 01 f8             	swapgs 
ffffffff8020c218:	6a 00                	push   $0x0
ffffffff8020c21a:	68 c0 00 00 00       	push   $0xc0
ffffffff8020c21f:	e9 90 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c224 <__RME_X64_USER193_Handler>:
USER_HANDLER NAME=__RME_X64_USER193_Handler VECTNUM=193
ffffffff8020c224:	0f 01 f8             	swapgs 
ffffffff8020c227:	6a 00                	push   $0x0
ffffffff8020c229:	68 c1 00 00 00       	push   $0xc1
ffffffff8020c22e:	e9 81 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c233 <__RME_X64_USER194_Handler>:
USER_HANDLER NAME=__RME_X64_USER194_Handler VECTNUM=194
ffffffff8020c233:	0f 01 f8             	swapgs 
ffffffff8020c236:	6a 00                	push   $0x0
ffffffff8020c238:	68 c2 00 00 00       	push   $0xc2
ffffffff8020c23d:	e9 72 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c242 <__RME_X64_USER195_Handler>:
USER_HANDLER NAME=__RME_X64_USER195_Handler VECTNUM=195
ffffffff8020c242:	0f 01 f8             	swapgs 
ffffffff8020c245:	6a 00                	push   $0x0
ffffffff8020c247:	68 c3 00 00 00       	push   $0xc3
ffffffff8020c24c:	e9 63 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c251 <__RME_X64_USER196_Handler>:
USER_HANDLER NAME=__RME_X64_USER196_Handler VECTNUM=196
ffffffff8020c251:	0f 01 f8             	swapgs 
ffffffff8020c254:	6a 00                	push   $0x0
ffffffff8020c256:	68 c4 00 00 00       	push   $0xc4
ffffffff8020c25b:	e9 54 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c260 <__RME_X64_USER197_Handler>:
USER_HANDLER NAME=__RME_X64_USER197_Handler VECTNUM=197
ffffffff8020c260:	0f 01 f8             	swapgs 
ffffffff8020c263:	6a 00                	push   $0x0
ffffffff8020c265:	68 c5 00 00 00       	push   $0xc5
ffffffff8020c26a:	e9 45 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c26f <__RME_X64_USER198_Handler>:
USER_HANDLER NAME=__RME_X64_USER198_Handler VECTNUM=198
ffffffff8020c26f:	0f 01 f8             	swapgs 
ffffffff8020c272:	6a 00                	push   $0x0
ffffffff8020c274:	68 c6 00 00 00       	push   $0xc6
ffffffff8020c279:	e9 36 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c27e <__RME_X64_USER199_Handler>:
USER_HANDLER NAME=__RME_X64_USER199_Handler VECTNUM=199
ffffffff8020c27e:	0f 01 f8             	swapgs 
ffffffff8020c281:	6a 00                	push   $0x0
ffffffff8020c283:	68 c7 00 00 00       	push   $0xc7
ffffffff8020c288:	e9 27 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c28d <__RME_X64_USER200_Handler>:

USER_HANDLER NAME=__RME_X64_USER200_Handler VECTNUM=200
ffffffff8020c28d:	0f 01 f8             	swapgs 
ffffffff8020c290:	6a 00                	push   $0x0
ffffffff8020c292:	68 c8 00 00 00       	push   $0xc8
ffffffff8020c297:	e9 18 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c29c <__RME_X64_USER201_Handler>:
USER_HANDLER NAME=__RME_X64_USER201_Handler VECTNUM=201
ffffffff8020c29c:	0f 01 f8             	swapgs 
ffffffff8020c29f:	6a 00                	push   $0x0
ffffffff8020c2a1:	68 c9 00 00 00       	push   $0xc9
ffffffff8020c2a6:	e9 09 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ab <__RME_X64_USER202_Handler>:
USER_HANDLER NAME=__RME_X64_USER202_Handler VECTNUM=202
ffffffff8020c2ab:	0f 01 f8             	swapgs 
ffffffff8020c2ae:	6a 00                	push   $0x0
ffffffff8020c2b0:	68 ca 00 00 00       	push   $0xca
ffffffff8020c2b5:	e9 fa 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ba <__RME_X64_USER203_Handler>:
USER_HANDLER NAME=__RME_X64_USER203_Handler VECTNUM=203
ffffffff8020c2ba:	0f 01 f8             	swapgs 
ffffffff8020c2bd:	6a 00                	push   $0x0
ffffffff8020c2bf:	68 cb 00 00 00       	push   $0xcb
ffffffff8020c2c4:	e9 eb 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2c9 <__RME_X64_USER204_Handler>:
USER_HANDLER NAME=__RME_X64_USER204_Handler VECTNUM=204
ffffffff8020c2c9:	0f 01 f8             	swapgs 
ffffffff8020c2cc:	6a 00                	push   $0x0
ffffffff8020c2ce:	68 cc 00 00 00       	push   $0xcc
ffffffff8020c2d3:	e9 dc 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2d8 <__RME_X64_USER205_Handler>:
USER_HANDLER NAME=__RME_X64_USER205_Handler VECTNUM=205
ffffffff8020c2d8:	0f 01 f8             	swapgs 
ffffffff8020c2db:	6a 00                	push   $0x0
ffffffff8020c2dd:	68 cd 00 00 00       	push   $0xcd
ffffffff8020c2e2:	e9 cd 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2e7 <__RME_X64_USER206_Handler>:
USER_HANDLER NAME=__RME_X64_USER206_Handler VECTNUM=206
ffffffff8020c2e7:	0f 01 f8             	swapgs 
ffffffff8020c2ea:	6a 00                	push   $0x0
ffffffff8020c2ec:	68 ce 00 00 00       	push   $0xce
ffffffff8020c2f1:	e9 be 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2f6 <__RME_X64_USER207_Handler>:
USER_HANDLER NAME=__RME_X64_USER207_Handler VECTNUM=207
ffffffff8020c2f6:	0f 01 f8             	swapgs 
ffffffff8020c2f9:	6a 00                	push   $0x0
ffffffff8020c2fb:	68 cf 00 00 00       	push   $0xcf
ffffffff8020c300:	e9 af 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c305 <__RME_X64_USER208_Handler>:
USER_HANDLER NAME=__RME_X64_USER208_Handler VECTNUM=208
ffffffff8020c305:	0f 01 f8             	swapgs 
ffffffff8020c308:	6a 00                	push   $0x0
ffffffff8020c30a:	68 d0 00 00 00       	push   $0xd0
ffffffff8020c30f:	e9 a0 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c314 <__RME_X64_USER209_Handler>:
USER_HANDLER NAME=__RME_X64_USER209_Handler VECTNUM=209
ffffffff8020c314:	0f 01 f8             	swapgs 
ffffffff8020c317:	6a 00                	push   $0x0
ffffffff8020c319:	68 d1 00 00 00       	push   $0xd1
ffffffff8020c31e:	e9 91 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c323 <__RME_X64_USER210_Handler>:

USER_HANDLER NAME=__RME_X64_USER210_Handler VECTNUM=210
ffffffff8020c323:	0f 01 f8             	swapgs 
ffffffff8020c326:	6a 00                	push   $0x0
ffffffff8020c328:	68 d2 00 00 00       	push   $0xd2
ffffffff8020c32d:	e9 82 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c332 <__RME_X64_USER211_Handler>:
USER_HANDLER NAME=__RME_X64_USER211_Handler VECTNUM=211
ffffffff8020c332:	0f 01 f8             	swapgs 
ffffffff8020c335:	6a 00                	push   $0x0
ffffffff8020c337:	68 d3 00 00 00       	push   $0xd3
ffffffff8020c33c:	e9 73 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c341 <__RME_X64_USER212_Handler>:
USER_HANDLER NAME=__RME_X64_USER212_Handler VECTNUM=212
ffffffff8020c341:	0f 01 f8             	swapgs 
ffffffff8020c344:	6a 00                	push   $0x0
ffffffff8020c346:	68 d4 00 00 00       	push   $0xd4
ffffffff8020c34b:	e9 64 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c350 <__RME_X64_USER213_Handler>:
USER_HANDLER NAME=__RME_X64_USER213_Handler VECTNUM=213
ffffffff8020c350:	0f 01 f8             	swapgs 
ffffffff8020c353:	6a 00                	push   $0x0
ffffffff8020c355:	68 d5 00 00 00       	push   $0xd5
ffffffff8020c35a:	e9 55 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c35f <__RME_X64_USER214_Handler>:
USER_HANDLER NAME=__RME_X64_USER214_Handler VECTNUM=214
ffffffff8020c35f:	0f 01 f8             	swapgs 
ffffffff8020c362:	6a 00                	push   $0x0
ffffffff8020c364:	68 d6 00 00 00       	push   $0xd6
ffffffff8020c369:	e9 46 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c36e <__RME_X64_USER215_Handler>:
USER_HANDLER NAME=__RME_X64_USER215_Handler VECTNUM=215
ffffffff8020c36e:	0f 01 f8             	swapgs 
ffffffff8020c371:	6a 00                	push   $0x0
ffffffff8020c373:	68 d7 00 00 00       	push   $0xd7
ffffffff8020c378:	e9 37 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c37d <__RME_X64_USER216_Handler>:
USER_HANDLER NAME=__RME_X64_USER216_Handler VECTNUM=216
ffffffff8020c37d:	0f 01 f8             	swapgs 
ffffffff8020c380:	6a 00                	push   $0x0
ffffffff8020c382:	68 d8 00 00 00       	push   $0xd8
ffffffff8020c387:	e9 28 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c38c <__RME_X64_USER217_Handler>:
USER_HANDLER NAME=__RME_X64_USER217_Handler VECTNUM=217
ffffffff8020c38c:	0f 01 f8             	swapgs 
ffffffff8020c38f:	6a 00                	push   $0x0
ffffffff8020c391:	68 d9 00 00 00       	push   $0xd9
ffffffff8020c396:	e9 19 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c39b <__RME_X64_USER218_Handler>:
USER_HANDLER NAME=__RME_X64_USER218_Handler VECTNUM=218
ffffffff8020c39b:	0f 01 f8             	swapgs 
ffffffff8020c39e:	6a 00                	push   $0x0
ffffffff8020c3a0:	68 da 00 00 00       	push   $0xda
ffffffff8020c3a5:	e9 0a 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3aa <__RME_X64_USER219_Handler>:
USER_HANDLER NAME=__RME_X64_USER219_Handler VECTNUM=219
ffffffff8020c3aa:	0f 01 f8             	swapgs 
ffffffff8020c3ad:	6a 00                	push   $0x0
ffffffff8020c3af:	68 db 00 00 00       	push   $0xdb
ffffffff8020c3b4:	e9 fb 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3b9 <__RME_X64_USER220_Handler>:

USER_HANDLER NAME=__RME_X64_USER220_Handler VECTNUM=220
ffffffff8020c3b9:	0f 01 f8             	swapgs 
ffffffff8020c3bc:	6a 00                	push   $0x0
ffffffff8020c3be:	68 dc 00 00 00       	push   $0xdc
ffffffff8020c3c3:	e9 ec 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3c8 <__RME_X64_USER221_Handler>:
USER_HANDLER NAME=__RME_X64_USER221_Handler VECTNUM=221
ffffffff8020c3c8:	0f 01 f8             	swapgs 
ffffffff8020c3cb:	6a 00                	push   $0x0
ffffffff8020c3cd:	68 dd 00 00 00       	push   $0xdd
ffffffff8020c3d2:	e9 dd 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3d7 <__RME_X64_USER222_Handler>:
USER_HANDLER NAME=__RME_X64_USER222_Handler VECTNUM=222
ffffffff8020c3d7:	0f 01 f8             	swapgs 
ffffffff8020c3da:	6a 00                	push   $0x0
ffffffff8020c3dc:	68 de 00 00 00       	push   $0xde
ffffffff8020c3e1:	e9 ce 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3e6 <__RME_X64_USER223_Handler>:
USER_HANDLER NAME=__RME_X64_USER223_Handler VECTNUM=223
ffffffff8020c3e6:	0f 01 f8             	swapgs 
ffffffff8020c3e9:	6a 00                	push   $0x0
ffffffff8020c3eb:	68 df 00 00 00       	push   $0xdf
ffffffff8020c3f0:	e9 bf 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3f5 <__RME_X64_USER224_Handler>:
USER_HANDLER NAME=__RME_X64_USER224_Handler VECTNUM=224
ffffffff8020c3f5:	0f 01 f8             	swapgs 
ffffffff8020c3f8:	6a 00                	push   $0x0
ffffffff8020c3fa:	68 e0 00 00 00       	push   $0xe0
ffffffff8020c3ff:	e9 b0 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c404 <__RME_X64_USER225_Handler>:
USER_HANDLER NAME=__RME_X64_USER225_Handler VECTNUM=225
ffffffff8020c404:	0f 01 f8             	swapgs 
ffffffff8020c407:	6a 00                	push   $0x0
ffffffff8020c409:	68 e1 00 00 00       	push   $0xe1
ffffffff8020c40e:	e9 a1 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c413 <__RME_X64_USER226_Handler>:
USER_HANDLER NAME=__RME_X64_USER226_Handler VECTNUM=226
ffffffff8020c413:	0f 01 f8             	swapgs 
ffffffff8020c416:	6a 00                	push   $0x0
ffffffff8020c418:	68 e2 00 00 00       	push   $0xe2
ffffffff8020c41d:	e9 92 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c422 <__RME_X64_USER227_Handler>:
USER_HANDLER NAME=__RME_X64_USER227_Handler VECTNUM=227
ffffffff8020c422:	0f 01 f8             	swapgs 
ffffffff8020c425:	6a 00                	push   $0x0
ffffffff8020c427:	68 e3 00 00 00       	push   $0xe3
ffffffff8020c42c:	e9 83 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c431 <__RME_X64_USER228_Handler>:
USER_HANDLER NAME=__RME_X64_USER228_Handler VECTNUM=228
ffffffff8020c431:	0f 01 f8             	swapgs 
ffffffff8020c434:	6a 00                	push   $0x0
ffffffff8020c436:	68 e4 00 00 00       	push   $0xe4
ffffffff8020c43b:	e9 74 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c440 <__RME_X64_USER229_Handler>:
USER_HANDLER NAME=__RME_X64_USER229_Handler VECTNUM=229
ffffffff8020c440:	0f 01 f8             	swapgs 
ffffffff8020c443:	6a 00                	push   $0x0
ffffffff8020c445:	68 e5 00 00 00       	push   $0xe5
ffffffff8020c44a:	e9 65 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c44f <__RME_X64_USER230_Handler>:

USER_HANDLER NAME=__RME_X64_USER230_Handler VECTNUM=230
ffffffff8020c44f:	0f 01 f8             	swapgs 
ffffffff8020c452:	6a 00                	push   $0x0
ffffffff8020c454:	68 e6 00 00 00       	push   $0xe6
ffffffff8020c459:	e9 56 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c45e <__RME_X64_USER231_Handler>:
USER_HANDLER NAME=__RME_X64_USER231_Handler VECTNUM=231
ffffffff8020c45e:	0f 01 f8             	swapgs 
ffffffff8020c461:	6a 00                	push   $0x0
ffffffff8020c463:	68 e7 00 00 00       	push   $0xe7
ffffffff8020c468:	e9 47 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c46d <__RME_X64_USER232_Handler>:
USER_HANDLER NAME=__RME_X64_USER232_Handler VECTNUM=232
ffffffff8020c46d:	0f 01 f8             	swapgs 
ffffffff8020c470:	6a 00                	push   $0x0
ffffffff8020c472:	68 e8 00 00 00       	push   $0xe8
ffffffff8020c477:	e9 38 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c47c <__RME_X64_USER233_Handler>:
USER_HANDLER NAME=__RME_X64_USER233_Handler VECTNUM=233
ffffffff8020c47c:	0f 01 f8             	swapgs 
ffffffff8020c47f:	6a 00                	push   $0x0
ffffffff8020c481:	68 e9 00 00 00       	push   $0xe9
ffffffff8020c486:	e9 29 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c48b <__RME_X64_USER234_Handler>:
USER_HANDLER NAME=__RME_X64_USER234_Handler VECTNUM=234
ffffffff8020c48b:	0f 01 f8             	swapgs 
ffffffff8020c48e:	6a 00                	push   $0x0
ffffffff8020c490:	68 ea 00 00 00       	push   $0xea
ffffffff8020c495:	e9 1a 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c49a <__RME_X64_USER235_Handler>:
USER_HANDLER NAME=__RME_X64_USER235_Handler VECTNUM=235
ffffffff8020c49a:	0f 01 f8             	swapgs 
ffffffff8020c49d:	6a 00                	push   $0x0
ffffffff8020c49f:	68 eb 00 00 00       	push   $0xeb
ffffffff8020c4a4:	e9 0b 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4a9 <__RME_X64_USER236_Handler>:
USER_HANDLER NAME=__RME_X64_USER236_Handler VECTNUM=236
ffffffff8020c4a9:	0f 01 f8             	swapgs 
ffffffff8020c4ac:	6a 00                	push   $0x0
ffffffff8020c4ae:	68 ec 00 00 00       	push   $0xec
ffffffff8020c4b3:	e9 fc 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4b8 <__RME_X64_USER237_Handler>:
USER_HANDLER NAME=__RME_X64_USER237_Handler VECTNUM=237
ffffffff8020c4b8:	0f 01 f8             	swapgs 
ffffffff8020c4bb:	6a 00                	push   $0x0
ffffffff8020c4bd:	68 ed 00 00 00       	push   $0xed
ffffffff8020c4c2:	e9 ed 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4c7 <__RME_X64_USER238_Handler>:
USER_HANDLER NAME=__RME_X64_USER238_Handler VECTNUM=238
ffffffff8020c4c7:	0f 01 f8             	swapgs 
ffffffff8020c4ca:	6a 00                	push   $0x0
ffffffff8020c4cc:	68 ee 00 00 00       	push   $0xee
ffffffff8020c4d1:	e9 de 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4d6 <__RME_X64_USER239_Handler>:
USER_HANDLER NAME=__RME_X64_USER239_Handler VECTNUM=239
ffffffff8020c4d6:	0f 01 f8             	swapgs 
ffffffff8020c4d9:	6a 00                	push   $0x0
ffffffff8020c4db:	68 ef 00 00 00       	push   $0xef
ffffffff8020c4e0:	e9 cf 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4e5 <__RME_X64_USER240_Handler>:

USER_HANDLER NAME=__RME_X64_USER240_Handler VECTNUM=240
ffffffff8020c4e5:	0f 01 f8             	swapgs 
ffffffff8020c4e8:	6a 00                	push   $0x0
ffffffff8020c4ea:	68 f0 00 00 00       	push   $0xf0
ffffffff8020c4ef:	e9 c0 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4f4 <__RME_X64_USER241_Handler>:
USER_HANDLER NAME=__RME_X64_USER241_Handler VECTNUM=241
ffffffff8020c4f4:	0f 01 f8             	swapgs 
ffffffff8020c4f7:	6a 00                	push   $0x0
ffffffff8020c4f9:	68 f1 00 00 00       	push   $0xf1
ffffffff8020c4fe:	e9 b1 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c503 <__RME_X64_USER242_Handler>:
USER_HANDLER NAME=__RME_X64_USER242_Handler VECTNUM=242
ffffffff8020c503:	0f 01 f8             	swapgs 
ffffffff8020c506:	6a 00                	push   $0x0
ffffffff8020c508:	68 f2 00 00 00       	push   $0xf2
ffffffff8020c50d:	e9 a2 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c512 <__RME_X64_USER243_Handler>:
USER_HANDLER NAME=__RME_X64_USER243_Handler VECTNUM=243
ffffffff8020c512:	0f 01 f8             	swapgs 
ffffffff8020c515:	6a 00                	push   $0x0
ffffffff8020c517:	68 f3 00 00 00       	push   $0xf3
ffffffff8020c51c:	e9 93 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c521 <__RME_X64_USER244_Handler>:
USER_HANDLER NAME=__RME_X64_USER244_Handler VECTNUM=244
ffffffff8020c521:	0f 01 f8             	swapgs 
ffffffff8020c524:	6a 00                	push   $0x0
ffffffff8020c526:	68 f4 00 00 00       	push   $0xf4
ffffffff8020c52b:	e9 84 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c530 <__RME_X64_USER245_Handler>:
USER_HANDLER NAME=__RME_X64_USER245_Handler VECTNUM=245
ffffffff8020c530:	0f 01 f8             	swapgs 
ffffffff8020c533:	6a 00                	push   $0x0
ffffffff8020c535:	68 f5 00 00 00       	push   $0xf5
ffffffff8020c53a:	eb 78                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c53c <__RME_X64_USER246_Handler>:
USER_HANDLER NAME=__RME_X64_USER246_Handler VECTNUM=246
ffffffff8020c53c:	0f 01 f8             	swapgs 
ffffffff8020c53f:	6a 00                	push   $0x0
ffffffff8020c541:	68 f6 00 00 00       	push   $0xf6
ffffffff8020c546:	eb 6c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c548 <__RME_X64_USER247_Handler>:
USER_HANDLER NAME=__RME_X64_USER247_Handler VECTNUM=247
ffffffff8020c548:	0f 01 f8             	swapgs 
ffffffff8020c54b:	6a 00                	push   $0x0
ffffffff8020c54d:	68 f7 00 00 00       	push   $0xf7
ffffffff8020c552:	eb 60                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c554 <__RME_X64_USER248_Handler>:
USER_HANDLER NAME=__RME_X64_USER248_Handler VECTNUM=248
ffffffff8020c554:	0f 01 f8             	swapgs 
ffffffff8020c557:	6a 00                	push   $0x0
ffffffff8020c559:	68 f8 00 00 00       	push   $0xf8
ffffffff8020c55e:	eb 54                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c560 <__RME_X64_USER249_Handler>:
USER_HANDLER NAME=__RME_X64_USER249_Handler VECTNUM=249
ffffffff8020c560:	0f 01 f8             	swapgs 
ffffffff8020c563:	6a 00                	push   $0x0
ffffffff8020c565:	68 f9 00 00 00       	push   $0xf9
ffffffff8020c56a:	eb 48                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c56c <__RME_X64_USER250_Handler>:

USER_HANDLER NAME=__RME_X64_USER250_Handler VECTNUM=250
ffffffff8020c56c:	0f 01 f8             	swapgs 
ffffffff8020c56f:	6a 00                	push   $0x0
ffffffff8020c571:	68 fa 00 00 00       	push   $0xfa
ffffffff8020c576:	eb 3c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c578 <__RME_X64_USER251_Handler>:
USER_HANDLER NAME=__RME_X64_USER251_Handler VECTNUM=251
ffffffff8020c578:	0f 01 f8             	swapgs 
ffffffff8020c57b:	6a 00                	push   $0x0
ffffffff8020c57d:	68 fb 00 00 00       	push   $0xfb
ffffffff8020c582:	eb 30                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c584 <__RME_X64_USER252_Handler>:
USER_HANDLER NAME=__RME_X64_USER252_Handler VECTNUM=252
ffffffff8020c584:	0f 01 f8             	swapgs 
ffffffff8020c587:	6a 00                	push   $0x0
ffffffff8020c589:	68 fc 00 00 00       	push   $0xfc
ffffffff8020c58e:	eb 24                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c590 <__RME_X64_USER253_Handler>:
USER_HANDLER NAME=__RME_X64_USER253_Handler VECTNUM=253
ffffffff8020c590:	0f 01 f8             	swapgs 
ffffffff8020c593:	6a 00                	push   $0x0
ffffffff8020c595:	68 fd 00 00 00       	push   $0xfd
ffffffff8020c59a:	eb 18                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c59c <__RME_X64_USER254_Handler>:
USER_HANDLER NAME=__RME_X64_USER254_Handler VECTNUM=254
ffffffff8020c59c:	0f 01 f8             	swapgs 
ffffffff8020c59f:	6a 00                	push   $0x0
ffffffff8020c5a1:	68 fe 00 00 00       	push   $0xfe
ffffffff8020c5a6:	eb 0c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5a8 <__RME_X64_USER255_Handler>:
USER_HANDLER NAME=__RME_X64_USER255_Handler VECTNUM=255
ffffffff8020c5a8:	0f 01 f8             	swapgs 
ffffffff8020c5ab:	6a 00                	push   $0x0
ffffffff8020c5ad:	68 ff 00 00 00       	push   $0xff
ffffffff8020c5b2:	eb 00                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5b4 <User_Handler>:
/* Common function body for generic interrupt handlers - reduce I-Cache usage */
User_Handler:
    SAVE_GP_REGS
ffffffff8020c5b4:	41 57                	push   %r15
ffffffff8020c5b6:	41 56                	push   %r14
ffffffff8020c5b8:	41 55                	push   %r13
ffffffff8020c5ba:	41 54                	push   %r12
ffffffff8020c5bc:	41 53                	push   %r11
ffffffff8020c5be:	41 52                	push   %r10
ffffffff8020c5c0:	41 51                	push   %r9
ffffffff8020c5c2:	41 50                	push   %r8
ffffffff8020c5c4:	55                   	push   %rbp
ffffffff8020c5c5:	57                   	push   %rdi
ffffffff8020c5c6:	56                   	push   %rsi
ffffffff8020c5c7:	52                   	push   %rdx
ffffffff8020c5c8:	51                   	push   %rcx
ffffffff8020c5c9:	53                   	push   %rbx
ffffffff8020c5ca:	50                   	push   %rax
ffffffff8020c5cb:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c5cf:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c5d1:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020c5d4:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Generic_Handler
ffffffff8020c5d9:	e8 51 a3 01 00       	call   ffffffff8022692f <__RME_X64_Generic_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c5de:	e8 93 7e 01 00       	call   ffffffff80224476 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c5e3:	0f 01 f8             	swapgs 
ffffffff8020c5e6:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c5ea:	8e d8                	mov    %eax,%ds
ffffffff8020c5ec:	58                   	pop    %rax
ffffffff8020c5ed:	5b                   	pop    %rbx
ffffffff8020c5ee:	59                   	pop    %rcx
ffffffff8020c5ef:	5a                   	pop    %rdx
ffffffff8020c5f0:	5e                   	pop    %rsi
ffffffff8020c5f1:	5f                   	pop    %rdi
ffffffff8020c5f2:	5d                   	pop    %rbp
ffffffff8020c5f3:	41 58                	pop    %r8
ffffffff8020c5f5:	41 59                	pop    %r9
ffffffff8020c5f7:	41 5a                	pop    %r10
ffffffff8020c5f9:	41 5b                	pop    %r11
ffffffff8020c5fb:	41 5c                	pop    %r12
ffffffff8020c5fd:	41 5d                	pop    %r13
ffffffff8020c5ff:	41 5e                	pop    %r14
ffffffff8020c601:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c603:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c607:	48 cf                	iretq  

ffffffff8020c609 <SysTick_SMP_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_SMP_Handler:
    .global             SysTick_SMP_Handler
    SWAPGS
ffffffff8020c609:	0f 01 f8             	swapgs 
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c60c:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c60e:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c613:	41 57                	push   %r15
ffffffff8020c615:	41 56                	push   %r14
ffffffff8020c617:	41 55                	push   %r13
ffffffff8020c619:	41 54                	push   %r12
ffffffff8020c61b:	41 53                	push   %r11
ffffffff8020c61d:	41 52                	push   %r10
ffffffff8020c61f:	41 51                	push   %r9
ffffffff8020c621:	41 50                	push   %r8
ffffffff8020c623:	55                   	push   %rbp
ffffffff8020c624:	57                   	push   %rdi
ffffffff8020c625:	56                   	push   %rsi
ffffffff8020c626:	52                   	push   %rdx
ffffffff8020c627:	51                   	push   %rcx
ffffffff8020c628:	53                   	push   %rbx
ffffffff8020c629:	50                   	push   %rax
ffffffff8020c62a:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c62e:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c630:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_SMP_Handler
ffffffff8020c633:	e8 26 01 00 00       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c638:	e8 39 7e 01 00       	call   ffffffff80224476 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c63d:	0f 01 f8             	swapgs 
ffffffff8020c640:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c644:	8e d8                	mov    %eax,%ds
ffffffff8020c646:	58                   	pop    %rax
ffffffff8020c647:	5b                   	pop    %rbx
ffffffff8020c648:	59                   	pop    %rcx
ffffffff8020c649:	5a                   	pop    %rdx
ffffffff8020c64a:	5e                   	pop    %rsi
ffffffff8020c64b:	5f                   	pop    %rdi
ffffffff8020c64c:	5d                   	pop    %rbp
ffffffff8020c64d:	41 58                	pop    %r8
ffffffff8020c64f:	41 59                	pop    %r9
ffffffff8020c651:	41 5a                	pop    %r10
ffffffff8020c653:	41 5b                	pop    %r11
ffffffff8020c655:	41 5c                	pop    %r12
ffffffff8020c657:	41 5d                	pop    %r13
ffffffff8020c659:	41 5e                	pop    %r14
ffffffff8020c65b:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c65d:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c661:	48 cf                	iretq  

ffffffff8020c663 <SysTick_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_Handler:
    .global             SysTick_Handler
    SWAPGS
ffffffff8020c663:	0f 01 f8             	swapgs 
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c666:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c668:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c66d:	41 57                	push   %r15
ffffffff8020c66f:	41 56                	push   %r14
ffffffff8020c671:	41 55                	push   %r13
ffffffff8020c673:	41 54                	push   %r12
ffffffff8020c675:	41 53                	push   %r11
ffffffff8020c677:	41 52                	push   %r10
ffffffff8020c679:	41 51                	push   %r9
ffffffff8020c67b:	41 50                	push   %r8
ffffffff8020c67d:	55                   	push   %rbp
ffffffff8020c67e:	57                   	push   %rdi
ffffffff8020c67f:	56                   	push   %rsi
ffffffff8020c680:	52                   	push   %rdx
ffffffff8020c681:	51                   	push   %rcx
ffffffff8020c682:	53                   	push   %rbx
ffffffff8020c683:	50                   	push   %rax
ffffffff8020c684:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c688:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c68a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tim_Handler
ffffffff8020c68d:	e8 95 12 00 00       	call   ffffffff8020d927 <_RME_Tim_Handler>
    CALLQ               __RME_X64_SMP_Tick
ffffffff8020c692:	e8 44 84 01 00       	call   ffffffff80224adb <__RME_X64_SMP_Tick>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c697:	e8 da 7d 01 00       	call   ffffffff80224476 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c69c:	0f 01 f8             	swapgs 
ffffffff8020c69f:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c6a3:	8e d8                	mov    %eax,%ds
ffffffff8020c6a5:	58                   	pop    %rax
ffffffff8020c6a6:	5b                   	pop    %rbx
ffffffff8020c6a7:	59                   	pop    %rcx
ffffffff8020c6a8:	5a                   	pop    %rdx
ffffffff8020c6a9:	5e                   	pop    %rsi
ffffffff8020c6aa:	5f                   	pop    %rdi
ffffffff8020c6ab:	5d                   	pop    %rbp
ffffffff8020c6ac:	41 58                	pop    %r8
ffffffff8020c6ae:	41 59                	pop    %r9
ffffffff8020c6b0:	41 5a                	pop    %r10
ffffffff8020c6b2:	41 5b                	pop    %r11
ffffffff8020c6b4:	41 5c                	pop    %r12
ffffffff8020c6b6:	41 5d                	pop    %r13
ffffffff8020c6b8:	41 5e                	pop    %r14
ffffffff8020c6ba:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c6bc:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c6c0:	48 cf                	iretq  

ffffffff8020c6c2 <SVC_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SVC_Handler:
    .global             SVC_Handler
    SWAPGS
ffffffff8020c6c2:	0f 01 f8             	swapgs 
    /* Swap the pointers with the per-core kernel RSP */
    MOVQ                %RSP,%GS:(8192-8)
ffffffff8020c6c5:	65 48 89 24 25 f8 1f 	mov    %rsp,%gs:0x1ff8
ffffffff8020c6cc:	00 00 
    MOVQ                %GS:(8192-16),%RSP
ffffffff8020c6ce:	65 48 8b 24 25 f0 1f 	mov    %gs:0x1ff0,%rsp
ffffffff8020c6d5:	00 00 
    /* Simulate INT stack: High - [SS, RSP, RFLAGS, CS, RIP, ERRCODE] - Low */
    PUSHQ               $(USER_DATA)
ffffffff8020c6d7:	6a 23                	push   $0x23
    PUSHQ               %GS:(8192-8)
ffffffff8020c6d9:	65 ff 34 25 f8 1f 00 	push   %gs:0x1ff8
ffffffff8020c6e0:	00 
    PUSHQ               %R11
ffffffff8020c6e1:	41 53                	push   %r11
    PUSHQ               $(USER_CODE)
ffffffff8020c6e3:	6a 2b                	push   $0x2b
    PUSHQ               %RCX
ffffffff8020c6e5:	51                   	push   %rcx
    PUSHQ               $0
ffffffff8020c6e6:	6a 00                	push   $0x0
    /* We went into this from a SYSCALL - interrupt number 0x10000 */
    PUSHQ               $0x10000
ffffffff8020c6e8:	68 00 00 01 00       	push   $0x10000
    SAVE_GP_REGS
ffffffff8020c6ed:	41 57                	push   %r15
ffffffff8020c6ef:	41 56                	push   %r14
ffffffff8020c6f1:	41 55                	push   %r13
ffffffff8020c6f3:	41 54                	push   %r12
ffffffff8020c6f5:	41 53                	push   %r11
ffffffff8020c6f7:	41 52                	push   %r10
ffffffff8020c6f9:	41 51                	push   %r9
ffffffff8020c6fb:	41 50                	push   %r8
ffffffff8020c6fd:	55                   	push   %rbp
ffffffff8020c6fe:	57                   	push   %rdi
ffffffff8020c6ff:	56                   	push   %rsi
ffffffff8020c700:	52                   	push   %rdx
ffffffff8020c701:	51                   	push   %rcx
ffffffff8020c702:	53                   	push   %rbx
ffffffff8020c703:	50                   	push   %rax
ffffffff8020c704:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c708:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c70a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Svc_Handler
ffffffff8020c70d:	e8 90 08 00 00       	call   ffffffff8020cfa2 <_RME_Svc_Handler>
    RESTORE_GP_REGS
ffffffff8020c712:	0f 01 f8             	swapgs 
ffffffff8020c715:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c719:	8e d8                	mov    %eax,%ds
ffffffff8020c71b:	58                   	pop    %rax
ffffffff8020c71c:	5b                   	pop    %rbx
ffffffff8020c71d:	59                   	pop    %rcx
ffffffff8020c71e:	5a                   	pop    %rdx
ffffffff8020c71f:	5e                   	pop    %rsi
ffffffff8020c720:	5f                   	pop    %rdi
ffffffff8020c721:	5d                   	pop    %rbp
ffffffff8020c722:	41 58                	pop    %r8
ffffffff8020c724:	41 59                	pop    %r9
ffffffff8020c726:	41 5a                	pop    %r10
ffffffff8020c728:	41 5b                	pop    %r11
ffffffff8020c72a:	41 5c                	pop    %r12
ffffffff8020c72c:	41 5d                	pop    %r13
ffffffff8020c72e:	41 5e                	pop    %r14
ffffffff8020c730:	41 5f                	pop    %r15
    /* See if we are forced to use IRET */
    TESTQ               $0x10000,(%RSP)
ffffffff8020c732:	48 f7 04 24 00 00 01 	testq  $0x10000,(%rsp)
ffffffff8020c739:	00 
    JZ                  Use_IRET
ffffffff8020c73a:	74 1c                	je     ffffffff8020c758 <Use_IRET>
    /* Just move these into the registers desired */
    /* CVE-2012-0217, CVE-2014-4699: Force canonical address on RIP */
    MOVQ                $0x7FFFFFFFFFFF,%RCX
ffffffff8020c73c:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffff,%rcx
ffffffff8020c743:	7f 00 00 
    ANDQ                16(%RSP),%RCX
ffffffff8020c746:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
    MOVQ                32(%RSP),%R11
ffffffff8020c74b:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    MOVQ                40(%RSP),%RSP
ffffffff8020c750:	48 8b 64 24 28       	mov    0x28(%rsp),%rsp
    /* Return to user-level */
    SYSRETQ
ffffffff8020c755:	48 0f 07             	sysretq 

ffffffff8020c758 <Use_IRET>:
Use_IRET:
    /* Flag is zero, We are forced to use IRET, because this is from INT */
    ADDQ                $16,%RSP
ffffffff8020c758:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c75c:	48 cf                	iretq  

ffffffff8020c75e <_RME_X64_Comp_Swap>:
/* Get most significant bit */
#define RME_MSB_GET(VAL)                     __RME_X64_MSB_Get(VAL)
/* Inline assembly implementation */
#else
static INLINE rme_ptr_t _RME_X64_Comp_Swap(volatile rme_ptr_t* Ptr, rme_ptr_t Old, rme_ptr_t New)
{
ffffffff8020c75e:	55                   	push   %rbp
ffffffff8020c75f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c762:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8020c766:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020c76a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020c76e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	rme_u8_t Zero;
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020c772:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020c776:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8020c77a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c77e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8020c782:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020c787:	0f 94 c0             	sete   %al
ffffffff8020c78a:	88 45 ff             	mov    %al,-0x1(%rbp)
	                     :[Ptr]"+m"(*Ptr), [Zero]"=r"(Zero)
	                     :[New]"r"(New), [Old]"a"(Old)
	                     :"memory", "cc");
	return (rme_ptr_t)Zero;
ffffffff8020c78d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
ffffffff8020c791:	c9                   	leave  
ffffffff8020c792:	c3                   	ret    

ffffffff8020c793 <_RME_X64_Fetch_Add>:
static INLINE rme_ptr_t _RME_X64_Fetch_Add(volatile rme_ptr_t* Ptr, rme_cnt_t Addend)
{
ffffffff8020c793:	55                   	push   %rbp
ffffffff8020c794:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c797:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8020c79b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020c79f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020c7a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020c7a7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8020c7ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c7af:	f0 48 0f c1 02       	lock xadd %rax,(%rdx)
ffffffff8020c7b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	                     :[Ptr]"+m"(*Ptr), [Addend]"+r"(Addend)
	                     :
	                     :"memory", "cc");
	return Addend;
ffffffff8020c7b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
ffffffff8020c7bc:	c9                   	leave  
ffffffff8020c7bd:	c3                   	ret    

ffffffff8020c7be <_RME_X64_Fetch_And>:
static INLINE rme_ptr_t _RME_X64_Fetch_And(rme_ptr_t* Ptr, rme_cnt_t Operand)
{
ffffffff8020c7be:	55                   	push   %rbp
ffffffff8020c7bf:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c7c2:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020c7c6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020c7ca:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	rme_u64_t Old;
	__asm__ __volatile__("MOVQ %[Ptr],%[Old]; LOCK ANDQ %[Operand], %[Ptr]"
ffffffff8020c7ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020c7d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c7d6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020c7da:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020c7dd:	f0 48 21 02          	lock and %rax,(%rdx)
ffffffff8020c7e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	                     :[Ptr]"+m"(*Ptr), [Old]"=r"(Old)
	                     :[Operand]"r"(Operand)
	                     :"memory", "cc");
	return Old;
ffffffff8020c7e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020c7e9:	c9                   	leave  
ffffffff8020c7ea:	c3                   	ret    

ffffffff8020c7eb <_RME_X64_MSB_Get>:
static INLINE rme_ptr_t _RME_X64_MSB_Get(rme_ptr_t Val)
{
ffffffff8020c7eb:	55                   	push   %rbp
ffffffff8020c7ec:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c7ef:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020c7f3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	rme_u64_t Ret;
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff8020c7f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c7fb:	48 0f bd c0          	bsr    %rax,%rax
ffffffff8020c7ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	                     :[Ret]"=r"(Ret)
	                     :[Val]"r"(Val)
	                     :"cc");
	return Ret;
ffffffff8020c803:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020c807:	c9                   	leave  
ffffffff8020c808:	c3                   	ret    

ffffffff8020c809 <__RME_Int_Disable>:

static INLINE void __RME_Int_Disable()
{
ffffffff8020c809:	55                   	push   %rbp
ffffffff8020c80a:	48 89 e5             	mov    %rsp,%rbp
	__asm__ __volatile__ (
ffffffff8020c80d:	fa                   	cli    
		"cli\n\t"
	);
}
ffffffff8020c80e:	90                   	nop
ffffffff8020c80f:	5d                   	pop    %rbp
ffffffff8020c810:	c3                   	ret    

ffffffff8020c811 <RME_Int_Print>:
Output      : None.
Return      : rme_cnt_t - The length of the string printed.
******************************************************************************/
#if(RME_DBGLOG_ENABLE!=0U)
rme_cnt_t RME_Int_Print(rme_cnt_t Int)
{
ffffffff8020c811:	f3 0f 1e fa          	endbr64 
ffffffff8020c815:	55                   	push   %rbp
ffffffff8020c816:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c819:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8020c81d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    rme_cnt_t Iter;
    rme_cnt_t Count;
    rme_cnt_t Div;
    
    /* Exit on zero */
    if(Int==0)
ffffffff8020c821:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8020c826:	75 14                	jne    ffffffff8020c83c <RME_Int_Print+0x2b>
    {
        RME_COV_MARKER();

        __RME_Putchar('0');
ffffffff8020c828:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020c82d:	e8 58 ea 00 00       	call   ffffffff8021b28a <__RME_Putchar>
        return 1;
ffffffff8020c832:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020c837:	e9 0b 01 00 00       	jmp    ffffffff8020c947 <RME_Int_Print+0x136>
        /* No action required */
    }


    /* Correct all negatives into positives */
    if(Int<0)
ffffffff8020c83c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8020c841:	79 1f                	jns    ffffffff8020c862 <RME_Int_Print+0x51>
    {
        RME_COV_MARKER();

        __RME_Putchar('-');
ffffffff8020c843:	bf 2d 00 00 00       	mov    $0x2d,%edi
ffffffff8020c848:	e8 3d ea 00 00       	call   ffffffff8021b28a <__RME_Putchar>
        Abs=-Int;
ffffffff8020c84d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020c851:	48 f7 d8             	neg    %rax
ffffffff8020c854:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        Num=1;
ffffffff8020c858:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8020c85f:	00 
ffffffff8020c860:	eb 10                	jmp    ffffffff8020c872 <RME_Int_Print+0x61>
    }
    else
    {
        RME_COV_MARKER();

        Abs=Int;
ffffffff8020c862:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020c866:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        Num=0;
ffffffff8020c86a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020c871:	00 
    }

    /* How many digits are there? */
    Count=0;
ffffffff8020c872:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8020c879:	00 
    Div=1;
ffffffff8020c87a:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
ffffffff8020c881:	00 
    Iter=Abs;
ffffffff8020c882:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c886:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while(1U)
    {
        Iter/=10;
ffffffff8020c88a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020c88e:	48 ba 67 66 66 66 66 	movabs $0x6666666666666667,%rdx
ffffffff8020c895:	66 66 66 
ffffffff8020c898:	48 89 c8             	mov    %rcx,%rax
ffffffff8020c89b:	48 f7 ea             	imul   %rdx
ffffffff8020c89e:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c8a1:	48 c1 f8 02          	sar    $0x2,%rax
ffffffff8020c8a5:	48 c1 f9 3f          	sar    $0x3f,%rcx
ffffffff8020c8a9:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020c8ac:	48 29 d0             	sub    %rdx,%rax
ffffffff8020c8af:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Count++;
ffffffff8020c8b3:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
        if(Iter!=0)
ffffffff8020c8b8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8020c8bd:	74 17                	je     ffffffff8020c8d6 <RME_Int_Print+0xc5>
        {
            RME_COV_MARKER();

            Div*=10;
ffffffff8020c8bf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020c8c3:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c8c6:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8020c8ca:	48 01 d0             	add    %rdx,%rax
ffffffff8020c8cd:	48 01 c0             	add    %rax,%rax
ffffffff8020c8d0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        Iter/=10;
ffffffff8020c8d4:	eb b4                	jmp    ffffffff8020c88a <RME_Int_Print+0x79>
        }
        else
        {
            RME_COV_MARKER();

            break;
ffffffff8020c8d6:	90                   	nop
        }
    }
    Num+=Count;
ffffffff8020c8d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c8db:	48 01 45 f8          	add    %rax,-0x8(%rbp)

    /* Print the integer */
    Iter=Abs;
ffffffff8020c8df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c8e3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while(Count>0)
ffffffff8020c8e7:	eb 53                	jmp    ffffffff8020c93c <RME_Int_Print+0x12b>
    {
        Count--;
ffffffff8020c8e9:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020c8ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c8f2:	48 99                	cqto   
ffffffff8020c8f4:	48 f7 7d d8          	idivq  -0x28(%rbp)
ffffffff8020c8f8:	83 c0 30             	add    $0x30,%eax
ffffffff8020c8fb:	0f be c0             	movsbl %al,%eax
ffffffff8020c8fe:	89 c7                	mov    %eax,%edi
ffffffff8020c900:	e8 85 e9 00 00       	call   ffffffff8021b28a <__RME_Putchar>
        Iter=Iter%Div;
ffffffff8020c905:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c909:	48 99                	cqto   
ffffffff8020c90b:	48 f7 7d d8          	idivq  -0x28(%rbp)
ffffffff8020c90f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        Div/=10;
ffffffff8020c913:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8020c917:	48 ba 67 66 66 66 66 	movabs $0x6666666666666667,%rdx
ffffffff8020c91e:	66 66 66 
ffffffff8020c921:	48 89 c8             	mov    %rcx,%rax
ffffffff8020c924:	48 f7 ea             	imul   %rdx
ffffffff8020c927:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c92a:	48 c1 f8 02          	sar    $0x2,%rax
ffffffff8020c92e:	48 c1 f9 3f          	sar    $0x3f,%rcx
ffffffff8020c932:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020c935:	48 29 d0             	sub    %rdx,%rax
ffffffff8020c938:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Count>0)
ffffffff8020c93c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8020c941:	7f a6                	jg     ffffffff8020c8e9 <RME_Int_Print+0xd8>
    }
    
    return Num;
ffffffff8020c943:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020c947:	c9                   	leave  
ffffffff8020c948:	c3                   	ret    

ffffffff8020c949 <RME_Hex_Print>:
Output      : None.
Return      : rme_cnt_t - The length of the string printed.
******************************************************************************/
#if(RME_DBGLOG_ENABLE!=0U)
rme_cnt_t RME_Hex_Print(rme_ptr_t Uint)
{
ffffffff8020c949:	f3 0f 1e fa          	endbr64 
ffffffff8020c94d:	55                   	push   %rbp
ffffffff8020c94e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c951:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8020c955:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    rme_ptr_t Iter;
    rme_ptr_t Count;
    rme_ptr_t Num;

    /* Exit on zero */
    if(Uint==0U)
ffffffff8020c959:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020c95e:	75 14                	jne    ffffffff8020c974 <RME_Hex_Print+0x2b>
    {
        RME_COV_MARKER();
        
        __RME_Putchar('0');
ffffffff8020c960:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020c965:	e8 20 e9 00 00       	call   ffffffff8021b28a <__RME_Putchar>
        return 1;
ffffffff8020c96a:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020c96f:	e9 95 00 00 00       	jmp    ffffffff8020ca09 <RME_Hex_Print+0xc0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Filter out all the zeroes */
    Count=0U;
ffffffff8020c974:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8020c97b:	00 
    Iter=Uint;
ffffffff8020c97c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020c980:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020c984:	eb 0a                	jmp    ffffffff8020c990 <RME_Hex_Print+0x47>
    {
        Iter<<=4;
ffffffff8020c986:	48 c1 65 f8 04       	shlq   $0x4,-0x8(%rbp)
        Count++;
ffffffff8020c98b:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020c990:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020c994:	48 c1 e8 3c          	shr    $0x3c,%rax
ffffffff8020c998:	48 85 c0             	test   %rax,%rax
ffffffff8020c99b:	74 e9                	je     ffffffff8020c986 <RME_Hex_Print+0x3d>
    }
    
    /* Count is the number of pts to print */
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020c99d:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff8020c9a2:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff8020c9a6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Num=Count;
ffffffff8020c9aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c9ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while(Count>0U)
ffffffff8020c9b2:	eb 4a                	jmp    ffffffff8020c9fe <RME_Hex_Print+0xb5>
    {
        Count--;
ffffffff8020c9b4:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
        Iter=(Uint>>(Count<<2U))&0x0FU;
ffffffff8020c9b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c9bd:	c1 e0 02             	shl    $0x2,%eax
ffffffff8020c9c0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020c9c4:	89 c1                	mov    %eax,%ecx
ffffffff8020c9c6:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020c9c9:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c9cc:	83 e0 0f             	and    $0xf,%eax
ffffffff8020c9cf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        if(Iter<10U)
ffffffff8020c9d3:	48 83 7d f8 09       	cmpq   $0x9,-0x8(%rbp)
ffffffff8020c9d8:	77 13                	ja     ffffffff8020c9ed <RME_Hex_Print+0xa4>
        {
            RME_COV_MARKER();
            
            __RME_Putchar((rme_s8_t)Iter+'0');
ffffffff8020c9da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020c9de:	83 c0 30             	add    $0x30,%eax
ffffffff8020c9e1:	0f be c0             	movsbl %al,%eax
ffffffff8020c9e4:	89 c7                	mov    %eax,%edi
ffffffff8020c9e6:	e8 9f e8 00 00       	call   ffffffff8021b28a <__RME_Putchar>
ffffffff8020c9eb:	eb 11                	jmp    ffffffff8020c9fe <RME_Hex_Print+0xb5>
        }
        else
        {
            RME_COV_MARKER();
            
            __RME_Putchar((rme_s8_t)Iter+'A'-10);
ffffffff8020c9ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020c9f1:	83 c0 37             	add    $0x37,%eax
ffffffff8020c9f4:	0f be c0             	movsbl %al,%eax
ffffffff8020c9f7:	89 c7                	mov    %eax,%edi
ffffffff8020c9f9:	e8 8c e8 00 00       	call   ffffffff8021b28a <__RME_Putchar>
    while(Count>0U)
ffffffff8020c9fe:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8020ca03:	75 af                	jne    ffffffff8020c9b4 <RME_Hex_Print+0x6b>
        }
    }
    
    return (rme_cnt_t)Num;
ffffffff8020ca05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff8020ca09:	c9                   	leave  
ffffffff8020ca0a:	c3                   	ret    

ffffffff8020ca0b <RME_Str_Print>:
Output      : None.
Return      : rme_cnt_t - The length of the string printed, the '\0' is not included.
******************************************************************************/
#if(RME_DBGLOG_ENABLE!=0U)
rme_cnt_t RME_Str_Print(const rme_s8_t* String)
{
ffffffff8020ca0b:	f3 0f 1e fa          	endbr64 
ffffffff8020ca0f:	55                   	push   %rbp
ffffffff8020ca10:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ca13:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ca17:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Count;
    
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020ca1b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ca22:	00 
ffffffff8020ca23:	eb 2f                	jmp    ffffffff8020ca54 <RME_Str_Print+0x49>
    {
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020ca25:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ca29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca2d:	48 01 d0             	add    %rdx,%rax
ffffffff8020ca30:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ca33:	84 c0                	test   %al,%al
ffffffff8020ca35:	74 29                	je     ffffffff8020ca60 <RME_Str_Print+0x55>
        else
        {
            RME_COV_MARKER();
            /* No action required */
        }
        __RME_Putchar(String[Count]);
ffffffff8020ca37:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ca3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca3f:	48 01 d0             	add    %rdx,%rax
ffffffff8020ca42:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ca45:	0f be c0             	movsbl %al,%eax
ffffffff8020ca48:	89 c7                	mov    %eax,%edi
ffffffff8020ca4a:	e8 3b e8 00 00       	call   ffffffff8021b28a <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020ca4f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020ca54:	48 81 7d f8 fe 00 00 	cmpq   $0xfe,-0x8(%rbp)
ffffffff8020ca5b:	00 
ffffffff8020ca5c:	76 c7                	jbe    ffffffff8020ca25 <RME_Str_Print+0x1a>
ffffffff8020ca5e:	eb 01                	jmp    ffffffff8020ca61 <RME_Str_Print+0x56>
            break;
ffffffff8020ca60:	90                   	nop
    }
    
    return (rme_cnt_t)Count;
ffffffff8020ca61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020ca65:	c9                   	leave  
ffffffff8020ca66:	c3                   	ret    

ffffffff8020ca67 <RME_Log>:
#ifndef RME_LOG
void RME_Log(const char* File,
             long Line,
             const char* Date,
             const char* Time)
{
ffffffff8020ca67:	f3 0f 1e fa          	endbr64 
ffffffff8020ca6b:	55                   	push   %rbp
ffffffff8020ca6c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ca6f:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ca73:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020ca77:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020ca7b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8020ca7f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    RME_DBG_S("\r\n***\r\nKernel panic - not syncing :\r\n"); \
ffffffff8020ca83:	48 c7 c7 40 92 22 80 	mov    $0xffffffff80229240,%rdi
ffffffff8020ca8a:	e8 7c ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(File); \
ffffffff8020ca8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca93:	48 89 c7             	mov    %rax,%rdi
ffffffff8020ca96:	e8 70 ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(" , Line "); \
ffffffff8020ca9b:	48 c7 c7 66 92 22 80 	mov    $0xffffffff80229266,%rdi
ffffffff8020caa2:	e8 64 ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(Line); \
ffffffff8020caa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020caab:	48 89 c7             	mov    %rax,%rdi
ffffffff8020caae:	e8 5e fd ff ff       	call   ffffffff8020c811 <RME_Int_Print>
    RME_DBG_S("\r\n"); \
ffffffff8020cab3:	48 c7 c7 6f 92 22 80 	mov    $0xffffffff8022926f,%rdi
ffffffff8020caba:	e8 4c ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(Date); \
ffffffff8020cabf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cac3:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cac6:	e8 40 ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(" , "); \
ffffffff8020cacb:	48 c7 c7 72 92 22 80 	mov    $0xffffffff80229272,%rdi
ffffffff8020cad2:	e8 34 ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(Time); \
ffffffff8020cad7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cadb:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cade:	e8 28 ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S("\r\n"); \
ffffffff8020cae3:	48 c7 c7 6f 92 22 80 	mov    $0xffffffff8022926f,%rdi
ffffffff8020caea:	e8 1c ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
}
ffffffff8020caef:	90                   	nop
ffffffff8020caf0:	c9                   	leave  
ffffffff8020caf1:	c3                   	ret    

ffffffff8020caf2 <_RME_MSB_Generic>:
Input       : rme_ptr_t Value - The value to compute for.
Output      : None.
Return      : rme_ptr_t - The result. 0 will be returned for 0.
******************************************************************************/
rme_ptr_t _RME_MSB_Generic(rme_ptr_t Value)
{
ffffffff8020caf2:	f3 0f 1e fa          	endbr64 
ffffffff8020caf6:	55                   	push   %rbp
ffffffff8020caf7:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cafa:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cafe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
            Bit=0U;
        }
    }
#elif(RME_WORD_ORDER==6U)
    /* 63-32 */
    if(Value>=RME_POW2(32U))
ffffffff8020cb02:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
ffffffff8020cb07:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020cb0b:	76 58                	jbe    ffffffff8020cb65 <_RME_MSB_Generic+0x73>
    {
        RME_COV_MARKER();
        
        /* 63-48 */
        if(Value>=RME_POW2(48U))
ffffffff8020cb0d:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffff,%rax
ffffffff8020cb14:	ff 00 00 
ffffffff8020cb17:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020cb1b:	76 24                	jbe    ffffffff8020cb41 <_RME_MSB_Generic+0x4f>
        {
            RME_COV_MARKER();
            
            /* 63-56 */
            if(Value>=RME_POW2(56U))
ffffffff8020cb1d:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffffff,%rax
ffffffff8020cb24:	ff ff 00 
ffffffff8020cb27:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020cb2b:	76 0a                	jbe    ffffffff8020cb37 <_RME_MSB_Generic+0x45>
            {
                RME_COV_MARKER();
                
                Bit=56U;
ffffffff8020cb2d:	48 c7 45 f8 38 00 00 	movq   $0x38,-0x8(%rbp)
ffffffff8020cb34:	00 
ffffffff8020cb35:	eb 72                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
            /* 56-48 */
            else
            {
                RME_COV_MARKER();
                
                Bit=48U;
ffffffff8020cb37:	48 c7 45 f8 30 00 00 	movq   $0x30,-0x8(%rbp)
ffffffff8020cb3e:	00 
ffffffff8020cb3f:	eb 68                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
        else
        {
            RME_COV_MARKER();
            
            /* 47-40 */
            if(Value>=RME_POW2(40U))
ffffffff8020cb41:	48 b8 ff ff ff ff ff 	movabs $0xffffffffff,%rax
ffffffff8020cb48:	00 00 00 
ffffffff8020cb4b:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020cb4f:	76 0a                	jbe    ffffffff8020cb5b <_RME_MSB_Generic+0x69>
            {
                RME_COV_MARKER();
                
                Bit=40U;
ffffffff8020cb51:	48 c7 45 f8 28 00 00 	movq   $0x28,-0x8(%rbp)
ffffffff8020cb58:	00 
ffffffff8020cb59:	eb 4e                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
            /* 39-32 */
            else
            {
                RME_COV_MARKER();
                
                Bit=32U;
ffffffff8020cb5b:	48 c7 45 f8 20 00 00 	movq   $0x20,-0x8(%rbp)
ffffffff8020cb62:	00 
ffffffff8020cb63:	eb 44                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
    else
    {
        RME_COV_MARKER();
        
        /* 31-16 */
        if(Value>=RME_POW2(16U))
ffffffff8020cb65:	48 81 7d e8 ff ff 00 	cmpq   $0xffff,-0x18(%rbp)
ffffffff8020cb6c:	00 
ffffffff8020cb6d:	76 1e                	jbe    ffffffff8020cb8d <_RME_MSB_Generic+0x9b>
        {
            RME_COV_MARKER();
            
            /* 31-24 */
            if(Value>=RME_POW2(24U))
ffffffff8020cb6f:	48 81 7d e8 ff ff ff 	cmpq   $0xffffff,-0x18(%rbp)
ffffffff8020cb76:	00 
ffffffff8020cb77:	76 0a                	jbe    ffffffff8020cb83 <_RME_MSB_Generic+0x91>
            {
                RME_COV_MARKER();
                
                Bit=24U;
ffffffff8020cb79:	48 c7 45 f8 18 00 00 	movq   $0x18,-0x8(%rbp)
ffffffff8020cb80:	00 
ffffffff8020cb81:	eb 26                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
            /* 24-16 */
            else
            {
                RME_COV_MARKER();
                
                Bit=16U;
ffffffff8020cb83:	48 c7 45 f8 10 00 00 	movq   $0x10,-0x8(%rbp)
ffffffff8020cb8a:	00 
ffffffff8020cb8b:	eb 1c                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
        else
        {
            RME_COV_MARKER();
            
            /* 15-8 */
            if(Value>=RME_POW2(8U))
ffffffff8020cb8d:	48 81 7d e8 ff 00 00 	cmpq   $0xff,-0x18(%rbp)
ffffffff8020cb94:	00 
ffffffff8020cb95:	76 0a                	jbe    ffffffff8020cba1 <_RME_MSB_Generic+0xaf>
            {
                RME_COV_MARKER();
                
                Bit=8U;
ffffffff8020cb97:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
ffffffff8020cb9e:	00 
ffffffff8020cb9f:	eb 08                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
            /* 7-0 */
            else
            {
                RME_COV_MARKER();
                
                Bit=0U;
ffffffff8020cba1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cba8:	00 
    }
#else
#error Generic MSB for 128-bits & above are not implemented.
#endif

    return Table[Value>>Bit]+Bit;
ffffffff8020cba9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cbad:	89 c2                	mov    %eax,%edx
ffffffff8020cbaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbb3:	89 d1                	mov    %edx,%ecx
ffffffff8020cbb5:	48 d3 e8             	shr    %cl,%rax
ffffffff8020cbb8:	0f b6 80 a0 94 22 80 	movzbl -0x7fdd6b60(%rax),%eax
ffffffff8020cbbf:	0f b6 d0             	movzbl %al,%edx
ffffffff8020cbc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cbc6:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020cbc9:	c9                   	leave  
ffffffff8020cbca:	c3                   	ret    

ffffffff8020cbcb <_RME_LSB_Generic>:
Input       : rme_ptr_t Value - The value to count.
Output      : None.
Return      : rme_ptr_t - The result. 0 will be returned for 0.
******************************************************************************/
rme_ptr_t _RME_LSB_Generic(rme_ptr_t Value)
{
ffffffff8020cbcb:	f3 0f 1e fa          	endbr64 
ffffffff8020cbcf:	55                   	push   %rbp
ffffffff8020cbd0:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cbd3:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cbd7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
            Bit=0U;
        }
    }
#elif(RME_WORD_ORDER==6U)
    /* 63-32 */
    if((Value<<32U)==0U)
ffffffff8020cbdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbdf:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020cbe3:	48 85 c0             	test   %rax,%rax
ffffffff8020cbe6:	75 4f                	jne    ffffffff8020cc37 <_RME_LSB_Generic+0x6c>
    {
        RME_COV_MARKER();
        
        /* 63-48 */
        if((Value<<16U)==0U)
ffffffff8020cbe8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbec:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff8020cbf0:	48 85 c0             	test   %rax,%rax
ffffffff8020cbf3:	75 21                	jne    ffffffff8020cc16 <_RME_LSB_Generic+0x4b>
        {
            RME_COV_MARKER();
            
            /* 63-56 */
            if((Value<<8U)==0U)
ffffffff8020cbf5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbf9:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8020cbfd:	48 85 c0             	test   %rax,%rax
ffffffff8020cc00:	75 0a                	jne    ffffffff8020cc0c <_RME_LSB_Generic+0x41>
            {
                RME_COV_MARKER();
                
                Bit=56U;
ffffffff8020cc02:	48 c7 45 f8 38 00 00 	movq   $0x38,-0x8(%rbp)
ffffffff8020cc09:	00 
ffffffff8020cc0a:	eb 78                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
            /* 56-48 */
            else
            {
                RME_COV_MARKER();
                
                Bit=48U;
ffffffff8020cc0c:	48 c7 45 f8 30 00 00 	movq   $0x30,-0x8(%rbp)
ffffffff8020cc13:	00 
ffffffff8020cc14:	eb 6e                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
        else
        {
            RME_COV_MARKER();
            
            /* 47-40 */
            if((Value<<24U)==0U)
ffffffff8020cc16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc1a:	48 c1 e0 18          	shl    $0x18,%rax
ffffffff8020cc1e:	48 85 c0             	test   %rax,%rax
ffffffff8020cc21:	75 0a                	jne    ffffffff8020cc2d <_RME_LSB_Generic+0x62>
            {
                RME_COV_MARKER();
                
                Bit=40U;
ffffffff8020cc23:	48 c7 45 f8 28 00 00 	movq   $0x28,-0x8(%rbp)
ffffffff8020cc2a:	00 
ffffffff8020cc2b:	eb 57                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
            /* 39-32 */
            else
            {
                RME_COV_MARKER();
                
                Bit=32U;
ffffffff8020cc2d:	48 c7 45 f8 20 00 00 	movq   $0x20,-0x8(%rbp)
ffffffff8020cc34:	00 
ffffffff8020cc35:	eb 4d                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
    else
    {
        RME_COV_MARKER();
        
        /* 31-16 */
        if((Value<<48U)==0U)
ffffffff8020cc37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc3b:	48 c1 e0 30          	shl    $0x30,%rax
ffffffff8020cc3f:	48 85 c0             	test   %rax,%rax
ffffffff8020cc42:	75 21                	jne    ffffffff8020cc65 <_RME_LSB_Generic+0x9a>
        {
            RME_COV_MARKER();
            
            /* 31-24 */
            if((Value<<40U)==0U)
ffffffff8020cc44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc48:	48 c1 e0 28          	shl    $0x28,%rax
ffffffff8020cc4c:	48 85 c0             	test   %rax,%rax
ffffffff8020cc4f:	75 0a                	jne    ffffffff8020cc5b <_RME_LSB_Generic+0x90>
            {
                RME_COV_MARKER();
                
                Bit=24U;
ffffffff8020cc51:	48 c7 45 f8 18 00 00 	movq   $0x18,-0x8(%rbp)
ffffffff8020cc58:	00 
ffffffff8020cc59:	eb 29                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
            /* 24-16 */
            else
            {
                RME_COV_MARKER();
                
                Bit=16U;
ffffffff8020cc5b:	48 c7 45 f8 10 00 00 	movq   $0x10,-0x8(%rbp)
ffffffff8020cc62:	00 
ffffffff8020cc63:	eb 1f                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
        else
        {
            RME_COV_MARKER();
            
            /* 15-8 */
            if((Value<<56U)==0U)
ffffffff8020cc65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc69:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff8020cc6d:	48 85 c0             	test   %rax,%rax
ffffffff8020cc70:	75 0a                	jne    ffffffff8020cc7c <_RME_LSB_Generic+0xb1>
            {
                RME_COV_MARKER();
                
                Bit=8U;
ffffffff8020cc72:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
ffffffff8020cc79:	00 
ffffffff8020cc7a:	eb 08                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
            /* 7-0 */
            else
            {
                RME_COV_MARKER();
                
                Bit=0U;
ffffffff8020cc7c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cc83:	00 
    }
#else
#error Generic LSB for 128-bits & above are not implemented.
#endif

    return Table[(rme_u8_t)(Value>>Bit)]+Bit;
ffffffff8020cc84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cc88:	89 c2                	mov    %eax,%edx
ffffffff8020cc8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc8e:	89 d1                	mov    %edx,%ecx
ffffffff8020cc90:	48 d3 e8             	shr    %cl,%rax
ffffffff8020cc93:	0f b6 c0             	movzbl %al,%eax
ffffffff8020cc96:	48 98                	cltq   
ffffffff8020cc98:	0f b6 80 a0 95 22 80 	movzbl -0x7fdd6a60(%rax),%eax
ffffffff8020cc9f:	0f b6 d0             	movzbl %al,%edx
ffffffff8020cca2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cca6:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020cca9:	c9                   	leave  
ffffffff8020ccaa:	c3                   	ret    

ffffffff8020ccab <_RME_Comp_Swap_Single>:
Return      : rme_ptr_t - If successful, 1; else 0.
******************************************************************************/
rme_ptr_t _RME_Comp_Swap_Single(volatile rme_ptr_t* Ptr,
                                rme_ptr_t Old,
                                rme_ptr_t New)
{
ffffffff8020ccab:	f3 0f 1e fa          	endbr64 
ffffffff8020ccaf:	55                   	push   %rbp
ffffffff8020ccb0:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ccb3:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020ccb7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020ccbb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020ccbf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    if(*Ptr==Old)
ffffffff8020ccc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ccc7:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ccca:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8020ccce:	75 12                	jne    ffffffff8020cce2 <_RME_Comp_Swap_Single+0x37>
    {
        RME_COV_MARKER();
        
        *Ptr=New;
ffffffff8020ccd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ccd4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ccd8:	48 89 10             	mov    %rdx,(%rax)
        return 1U;
ffffffff8020ccdb:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020cce0:	eb 05                	jmp    ffffffff8020cce7 <_RME_Comp_Swap_Single+0x3c>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0U;
ffffffff8020cce2:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cce7:	c9                   	leave  
ffffffff8020cce8:	c3                   	ret    

ffffffff8020cce9 <_RME_Fetch_Add_Single>:
Output      : volatile rme_ptr_t* Ptr - The pointer to the data.
Return      : rme_ptr_t - The value before the addition.
*******************************************************************************/
rme_ptr_t _RME_Fetch_Add_Single(volatile rme_ptr_t* Ptr,
                                rme_cnt_t Addend)
{
ffffffff8020cce9:	f3 0f 1e fa          	endbr64 
ffffffff8020cced:	55                   	push   %rbp
ffffffff8020ccee:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ccf1:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ccf5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020ccf9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_cnt_t Old;

    Old=(rme_cnt_t)(*Ptr);
ffffffff8020ccfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd01:	48 8b 00             	mov    (%rax),%rax
ffffffff8020cd04:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    *Ptr=(rme_ptr_t)(Old+Addend);
ffffffff8020cd08:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd0c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cd10:	48 01 d0             	add    %rdx,%rax
ffffffff8020cd13:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cd16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd1a:	48 89 10             	mov    %rdx,(%rax)

    return (rme_ptr_t)Old;
ffffffff8020cd1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020cd21:	c9                   	leave  
ffffffff8020cd22:	c3                   	ret    

ffffffff8020cd23 <_RME_Fetch_And_Single>:
Output      : volatile rme_ptr_t* Ptr - The pointer to the data.
Return      : rme_ptr_t - The value before the AND operation.
******************************************************************************/
rme_ptr_t _RME_Fetch_And_Single(volatile rme_ptr_t* Ptr,
                                rme_ptr_t Operand)
{
ffffffff8020cd23:	f3 0f 1e fa          	endbr64 
ffffffff8020cd27:	55                   	push   %rbp
ffffffff8020cd28:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd2b:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cd2f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cd33:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Old;

    Old=*Ptr;
ffffffff8020cd37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd3b:	48 8b 00             	mov    (%rax),%rax
ffffffff8020cd3e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    *Ptr=Old&Operand;
ffffffff8020cd42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd46:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff8020cd4a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cd4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd51:	48 89 10             	mov    %rdx,(%rax)

    return Old;
ffffffff8020cd54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020cd58:	c9                   	leave  
ffffffff8020cd59:	c3                   	ret    

ffffffff8020cd5a <_RME_List_Crt>:
Input       : struct RME_List* Head - The pointer to the list head.
Output      : None.
Return      : None.
******************************************************************************/
void _RME_List_Crt(volatile struct RME_List* Head)
{
ffffffff8020cd5a:	f3 0f 1e fa          	endbr64 
ffffffff8020cd5e:	55                   	push   %rbp
ffffffff8020cd5f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd62:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020cd66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    Head->Prev=Head;
ffffffff8020cd6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd72:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Head->Next=Head;
ffffffff8020cd76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd7a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd7e:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cd81:	90                   	nop
ffffffff8020cd82:	c9                   	leave  
ffffffff8020cd83:	c3                   	ret    

ffffffff8020cd84 <_RME_List_Del>:
Output      : None.
Return      : None.
******************************************************************************/
void _RME_List_Del(volatile struct RME_List* Prev,
                   volatile struct RME_List* Next)
{
ffffffff8020cd84:	f3 0f 1e fa          	endbr64 
ffffffff8020cd88:	55                   	push   %rbp
ffffffff8020cd89:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd8c:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8020cd90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020cd94:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Next->Prev=Prev;
ffffffff8020cd98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cd9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cda0:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=Next;
ffffffff8020cda4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cda8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020cdac:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cdaf:	90                   	nop
ffffffff8020cdb0:	c9                   	leave  
ffffffff8020cdb1:	c3                   	ret    

ffffffff8020cdb2 <_RME_List_Ins>:
Return      : None.
******************************************************************************/
void _RME_List_Ins(volatile struct RME_List* New,
                   volatile struct RME_List* Prev,
                   volatile struct RME_List* Next)
{
ffffffff8020cdb2:	f3 0f 1e fa          	endbr64 
ffffffff8020cdb6:	55                   	push   %rbp
ffffffff8020cdb7:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cdba:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cdbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020cdc2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020cdc6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    Next->Prev=New;
ffffffff8020cdca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cdce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cdd2:	48 89 50 08          	mov    %rdx,0x8(%rax)
    New->Next=Next;
ffffffff8020cdd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cdda:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020cdde:	48 89 10             	mov    %rdx,(%rax)
    New->Prev=Prev;
ffffffff8020cde1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cde5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020cde9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=New;
ffffffff8020cded:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cdf1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cdf5:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cdf8:	90                   	nop
ffffffff8020cdf9:	c9                   	leave  
ffffffff8020cdfa:	c3                   	ret    

ffffffff8020cdfb <_RME_Clear>:
Output      : None.
Return      : None.
******************************************************************************/
void _RME_Clear(void* Addr,
                rme_ptr_t Size)
{
ffffffff8020cdfb:	f3 0f 1e fa          	endbr64 
ffffffff8020cdff:	55                   	push   %rbp
ffffffff8020ce00:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ce03:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ce07:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020ce0b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Count;

    for(Count=0U;Count<Size;Count++)
ffffffff8020ce0f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ce16:	00 
ffffffff8020ce17:	eb 13                	jmp    ffffffff8020ce2c <_RME_Clear+0x31>
    {
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ce19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ce1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce21:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce24:	c6 00 00             	movb   $0x0,(%rax)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ce27:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020ce2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce30:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff8020ce34:	72 e3                	jb     ffffffff8020ce19 <_RME_Clear+0x1e>
    }
}
ffffffff8020ce36:	90                   	nop
ffffffff8020ce37:	90                   	nop
ffffffff8020ce38:	c9                   	leave  
ffffffff8020ce39:	c3                   	ret    

ffffffff8020ce3a <_RME_Memcmp>:
                          value. If Ptr1==Ptr2, then return 0;
******************************************************************************/
rme_ret_t _RME_Memcmp(const void* Ptr1,
                      const void* Ptr2,
                      rme_ptr_t Num)
{
ffffffff8020ce3a:	f3 0f 1e fa          	endbr64 
ffffffff8020ce3e:	55                   	push   %rbp
ffffffff8020ce3f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ce42:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8020ce46:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020ce4a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020ce4e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    const rme_s8_t* Dst;
    const rme_s8_t* Src;
    rme_ptr_t Count;

    Dst=(const rme_s8_t*)Ptr1;
ffffffff8020ce52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ce56:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Src=(const rme_s8_t*)Ptr2;
ffffffff8020ce5a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ce5e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    for(Count=0U;Count<Num;Count++)
ffffffff8020ce62:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ce69:	00 
ffffffff8020ce6a:	eb 4d                	jmp    ffffffff8020ceb9 <_RME_Memcmp+0x7f>
    {
        if(Dst[Count]!=Src[Count])
ffffffff8020ce6c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020ce70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce74:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce77:	0f b6 10             	movzbl (%rax),%edx
ffffffff8020ce7a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020ce7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce82:	48 01 c8             	add    %rcx,%rax
ffffffff8020ce85:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ce88:	38 c2                	cmp    %al,%dl
ffffffff8020ce8a:	74 28                	je     ffffffff8020ceb4 <_RME_Memcmp+0x7a>
        {
            RME_COV_MARKER();
            
            return Dst[Count]-Src[Count];
ffffffff8020ce8c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020ce90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce94:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce97:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ce9a:	0f be c0             	movsbl %al,%eax
ffffffff8020ce9d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020cea1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cea5:	48 01 ca             	add    %rcx,%rdx
ffffffff8020cea8:	0f b6 12             	movzbl (%rdx),%edx
ffffffff8020ceab:	0f be d2             	movsbl %dl,%edx
ffffffff8020ceae:	29 d0                	sub    %edx,%eax
ffffffff8020ceb0:	48 98                	cltq   
ffffffff8020ceb2:	eb 14                	jmp    ffffffff8020cec8 <_RME_Memcmp+0x8e>
    for(Count=0U;Count<Num;Count++)
ffffffff8020ceb4:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020ceb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cebd:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff8020cec1:	72 a9                	jb     ffffffff8020ce6c <_RME_Memcmp+0x32>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff8020cec3:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cec8:	c9                   	leave  
ffffffff8020cec9:	c3                   	ret    

ffffffff8020ceca <_RME_Memcpy>:
Return      : None.
******************************************************************************/
void _RME_Memcpy(void* Dst,
                 void* Src,
                 rme_ptr_t Num)
{
ffffffff8020ceca:	f3 0f 1e fa          	endbr64 
ffffffff8020cece:	55                   	push   %rbp
ffffffff8020cecf:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ced2:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8020ced6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020ceda:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020cede:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    rme_ptr_t Count;

    for(Count=0U;Count<Num;Count++)
ffffffff8020cee2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cee9:	00 
ffffffff8020ceea:	eb 20                	jmp    ffffffff8020cf0c <_RME_Memcpy+0x42>
    {
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020ceec:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020cef0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cef4:	48 01 d0             	add    %rdx,%rax
ffffffff8020cef7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020cefb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020ceff:	48 01 ca             	add    %rcx,%rdx
ffffffff8020cf02:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020cf05:	88 02                	mov    %al,(%rdx)
    for(Count=0U;Count<Num;Count++)
ffffffff8020cf07:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020cf0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cf10:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020cf14:	72 d6                	jb     ffffffff8020ceec <_RME_Memcpy+0x22>
    }
}
ffffffff8020cf16:	90                   	nop
ffffffff8020cf17:	90                   	nop
ffffffff8020cf18:	c9                   	leave  
ffffffff8020cf19:	c3                   	ret    

ffffffff8020cf1a <_RME_Diff>:
Output      : None.
Return      : rme_ptr_t - The distance.
******************************************************************************/
rme_ptr_t _RME_Diff(rme_ptr_t Num1,
                    rme_ptr_t Num2)
{
ffffffff8020cf1a:	f3 0f 1e fa          	endbr64 
ffffffff8020cf1e:	55                   	push   %rbp
ffffffff8020cf1f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cf22:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cf26:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cf2a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Diff1;
    rme_ptr_t Diff2;
    
    Diff1=Num1-Num2;
ffffffff8020cf2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cf32:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
ffffffff8020cf36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Diff2=Num2-Num1;
ffffffff8020cf3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cf3e:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff8020cf42:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    if(Diff1>Diff2)
ffffffff8020cf46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cf4a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8020cf4e:	76 06                	jbe    ffffffff8020cf56 <_RME_Diff+0x3c>
    {
        RME_COV_MARKER();
        
        return Diff2;
ffffffff8020cf50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cf54:	eb 04                	jmp    ffffffff8020cf5a <_RME_Diff+0x40>
    }
    else
    {
        RME_COV_MARKER();
        
        return Diff1;
ffffffff8020cf56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
}
ffffffff8020cf5a:	c9                   	leave  
ffffffff8020cf5b:	c3                   	ret    

ffffffff8020cf5c <RME_Kmain>:
Input       : None.
Output      : None.
Return      : rme_ret_t - This function never returns.
******************************************************************************/
rme_ret_t RME_Kmain(void)
{
ffffffff8020cf5c:	f3 0f 1e fa          	endbr64 
ffffffff8020cf60:	55                   	push   %rbp
ffffffff8020cf61:	48 89 e5             	mov    %rsp,%rbp
    /* Disable all interrupts first */
    __RME_Int_Disable();
ffffffff8020cf64:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020cf69:	e8 9b f8 ff ff       	call   ffffffff8020c809 <__RME_Int_Disable>
    /* Some low-level kernel assertions */
    _RME_Lowlvl_Check();
ffffffff8020cf6e:	e8 20 00 00 00       	call   ffffffff8020cf93 <_RME_Lowlvl_Check>
    /* Hardware low-level init */
    __RME_Lowlvl_Init();
ffffffff8020cf73:	e8 e7 7b 01 00       	call   ffffffff80224b5f <__RME_Lowlvl_Init>
    /* Initialize the kernel page tables or memory mappings */
    __RME_Pgt_Kom_Init();
ffffffff8020cf78:	e8 23 7c 01 00       	call   ffffffff80224ba0 <__RME_Pgt_Kom_Init>
    /* Initialize the kernel object allocation table - default init */
    _RME_Kot_Init(RME_KOT_WORD_NUM);
ffffffff8020cf7d:	bf 04 00 00 00       	mov    $0x4,%edi
ffffffff8020cf82:	e8 e0 53 00 00       	call   ffffffff80212367 <_RME_Kot_Init>
    /* Boot into the first process */
    __RME_Boot();
ffffffff8020cf87:	e8 dd 85 01 00       	call   ffffffff80225569 <__RME_Boot>
    /* Should never reach here */
    return 0;
ffffffff8020cf8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cf91:	5d                   	pop    %rbp
ffffffff8020cf92:	c3                   	ret    

ffffffff8020cf93 <_RME_Lowlvl_Check>:
Input       : None.
Output      : None.
Return      : rme_ret_t - Always 0.
******************************************************************************/
static rme_ret_t _RME_Lowlvl_Check(void)
{
ffffffff8020cf93:	f3 0f 1e fa          	endbr64 
ffffffff8020cf97:	55                   	push   %rbp
ffffffff8020cf98:	48 89 e5             	mov    %rsp,%rbp
    /* Kernel memory allocation minimal size aligned to word boundary */
    RME_ASSERT(RME_KOM_SLOT_ORDER>=RME_WORD_ORDER-3U);
    /* Make sure the number of priorities do not exceed half-word boundary */
    RME_ASSERT(RME_PREEMPT_PRIO_NUM<=RME_POW2(RME_WORD_BIT>>1));
    
    return 0;
ffffffff8020cf9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cfa0:	5d                   	pop    %rbp
ffffffff8020cfa1:	c3                   	ret    

ffffffff8020cfa2 <_RME_Svc_Handler>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Svc_Handler(struct RME_Reg_Struct* Reg)
{
ffffffff8020cfa2:	f3 0f 1e fa          	endbr64 
ffffffff8020cfa6:	55                   	push   %rbp
ffffffff8020cfa7:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cfaa:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020cfae:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    struct RME_Inv_Struct* Inv_Top;
    struct RME_Cap_Cpt* Cpt;

    /* Get the system call parameters from the system call */
    __RME_Svc_Param_Get(Reg, &Svc, &Cid, Param);
ffffffff8020cfb2:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
ffffffff8020cfb6:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
ffffffff8020cfba:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
ffffffff8020cfbe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020cfc2:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cfc5:	e8 2c a2 01 00       	call   ffffffff802271f6 <__RME_Svc_Param_Get>
    /* System call number takes [5:0] bits */
    Svc_Num=Svc&RME_MASK_END(5U);
ffffffff8020cfca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020cfce:	83 e0 3f             	and    $0x3f,%eax
ffffffff8020cfd1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* Ultra-fast path - synchronous invocation returning */
    if(Svc_Num==RME_SVC_INV_RET)
ffffffff8020cfd5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8020cfda:	75 48                	jne    ffffffff8020d024 <_RME_Svc_Handler+0x82>
    {
        RME_COV_MARKER();
        
        Retval=_RME_Inv_Ret(Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
ffffffff8020cfdc:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8020cfe0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020cfe4:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020cfe9:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020cfec:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cfef:	e8 fd da 00 00       	call   ffffffff8021aaf1 <_RME_Inv_Ret>
ffffffff8020cff4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                            Param[0],                                       /* rme_ptr_t Retval */
                            0U);                                            /* rme_ptr_t Is_Exc */
        RME_SWITCH_RETURN(Reg, Retval);
ffffffff8020cff8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cffc:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d000:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d003:	48 85 c0             	test   %rax,%rax
ffffffff8020d006:	0f 84 19 09 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x983>
ffffffff8020d00c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d010:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d014:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d017:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d01a:	e8 52 a2 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
ffffffff8020d01f:	e9 01 09 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x983>
        /* No action required */
    }
    
    /* Get our current capability table. No need to check whether it is frozen
     * because it can't be deleted anyway */
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020d024:	e8 16 e8 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020d029:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020d02d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff8020d031:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d035:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8020d03c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020d040:	48 81 c2 98 00 00 00 	add    $0x98,%rdx
ffffffff8020d047:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020d04a:	74 0d                	je     ffffffff8020d059 <_RME_Svc_Handler+0xb7>
ffffffff8020d04c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d050:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8020d057:	eb 05                	jmp    ffffffff8020d05e <_RME_Svc_Handler+0xbc>
ffffffff8020d059:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020d05e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d062:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020d067:	75 12                	jne    ffffffff8020d07b <_RME_Svc_Handler+0xd9>
    {
        RME_COV_MARKER();
        
        Cpt=Thd_Cur->Sched.Prc->Cpt;
ffffffff8020d069:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d06d:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8020d071:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020d075:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020d079:	eb 10                	jmp    ffffffff8020d08b <_RME_Svc_Handler+0xe9>
    }
    else
    {
        RME_COV_MARKER();
        
        Cpt=Inv_Top->Prc->Cpt;
ffffffff8020d07b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020d07f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d083:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020d087:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }

    /* Fast path - synchronous invocation activation */
    if(Svc_Num==RME_SVC_INV_ACT)
ffffffff8020d08b:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
ffffffff8020d090:	75 51                	jne    ffffffff8020d0e3 <_RME_Svc_Handler+0x141>
    {
        RME_COV_MARKER();
        
        Retval=_RME_Inv_Act(Cpt,
ffffffff8020d092:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                            Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
                            (rme_cid_t)Param[0],                            /* rme_cid_t Cap_Inv */
ffffffff8020d096:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
        Retval=_RME_Inv_Act(Cpt,
ffffffff8020d09a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d09d:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d0a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d0a5:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d0a8:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d0ab:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d0ae:	e8 c6 d6 00 00       	call   ffffffff8021a779 <_RME_Inv_Act>
ffffffff8020d0b3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                            Param[1]);                                      /* rme_ptr_t Param */
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d0b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d0bb:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d0bf:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d0c2:	48 85 c0             	test   %rax,%rax
ffffffff8020d0c5:	0f 84 5a 08 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x983>
ffffffff8020d0cb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d0cf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d0d3:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d0d6:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d0d9:	e8 93 a1 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
ffffffff8020d0de:	e9 42 08 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x983>
     * of these functions shall be: If the function is successful, they shall
     * perform the return value saving on proper register stacks by themselves;
     * if the function fails, it should not conduct such return value saving.
     * These paths are less optimized than synchronous invocation, but are still
     * optimized anyway. */
    switch(Svc_Num)
ffffffff8020d0e3:	48 83 7d e8 09       	cmpq   $0x9,-0x18(%rbp)
ffffffff8020d0e8:	0f 87 03 03 00 00    	ja     ffffffff8020d3f1 <_RME_Svc_Handler+0x44f>
ffffffff8020d0ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d0f2:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020d0f6:	48 05 78 92 22 80    	add    $0xffffffff80229278,%rax
ffffffff8020d0fc:	48 8b 00             	mov    (%rax),%rax
ffffffff8020d0ff:	3e ff e0             	notrack jmp *%rax
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Snd(Cpt,
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d102:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Snd(Cpt,
ffffffff8020d106:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d109:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff8020d10d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d111:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d114:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d117:	e8 5b bf 00 00       	call   ffffffff80219077 <_RME_Sig_Snd>
ffffffff8020d11c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d124:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d128:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d12b:	48 85 c0             	test   %rax,%rax
ffffffff8020d12e:	0f 84 f1 07 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x983>
ffffffff8020d134:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d138:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d13c:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d13f:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d142:	e8 2a a1 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
ffffffff8020d147:	e9 d9 07 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x983>
        /* Receive from a signal endpoint */
        case RME_SVC_SIG_RCV:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff8020d14c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Sig */
ffffffff8020d150:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff8020d154:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d157:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d15b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d15f:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d162:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d165:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d168:	e8 87 c2 00 00       	call   ffffffff802193f4 <_RME_Sig_Rcv>
ffffffff8020d16d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Option */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d171:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d175:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d179:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d17c:	48 85 c0             	test   %rax,%rax
ffffffff8020d17f:	0f 84 a0 07 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x983>
ffffffff8020d185:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d189:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d18d:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d190:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d193:	e8 d9 a0 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
ffffffff8020d198:	e9 88 07 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x983>
        /* Call kernel functions */
        case RME_SVC_KFN:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d19d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020d1a1:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Kfn */
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Func_ID */
                                RME_PARAM_D1(Param[0]),                     /* rme_ptr_t Sub_ID */
ffffffff8020d1a5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d1a9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d1ad:	48 89 c7             	mov    %rax,%rdi
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Func_ID */
ffffffff8020d1b0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d1b4:	41 89 c3             	mov    %eax,%r11d
ffffffff8020d1b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d1bb:	49 89 c2             	mov    %rax,%r10
ffffffff8020d1be:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d1c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d1c6:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d1ca:	52                   	push   %rdx
ffffffff8020d1cb:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d1ce:	49 89 f8             	mov    %rdi,%r8
ffffffff8020d1d1:	4c 89 d9             	mov    %r11,%rcx
ffffffff8020d1d4:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d1d7:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d1da:	e8 a9 dd 00 00       	call   ffffffff8021af88 <_RME_Kfn_Act>
ffffffff8020d1df:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d1e3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1],                                   /* rme_ptr_t Param1 */
                                Param[2]);                                  /* rme_ptr_t Param2 */
            RME_SWITCH_RETURN(Reg, Retval);
ffffffff8020d1e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d1eb:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d1ef:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d1f2:	48 85 c0             	test   %rax,%rax
ffffffff8020d1f5:	0f 84 2a 07 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x983>
ffffffff8020d1fb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d1ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d203:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d206:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d209:	e8 63 a0 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
ffffffff8020d20e:	e9 12 07 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x983>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Free(Cpt,
                                       Reg,                                 /* volatile struct RME_Reg_Struct* Reg */
                                       (rme_cid_t)Param[0]);                /* rme_cid_t Cap_Thd */
ffffffff8020d213:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Free(Cpt,
ffffffff8020d217:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d21a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff8020d21e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d222:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d225:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d228:	e8 f0 98 00 00       	call   ffffffff80216b1d <_RME_Thd_Sched_Free>
ffffffff8020d22d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d231:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d235:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d239:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d23c:	48 85 c0             	test   %rax,%rax
ffffffff8020d23f:	0f 84 e0 06 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x983>
ffffffff8020d245:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d249:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d24d:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d250:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d253:	e8 19 a0 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
ffffffff8020d258:	e9 c8 06 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x983>
        /* Changing thread execution context */
        case RME_SVC_THD_EXEC_SET:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Exec_Set(Cpt,
ffffffff8020d25d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8020d261:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff8020d265:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020d269:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d26d:	49 89 c2             	mov    %rax,%r10
ffffffff8020d270:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d274:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d278:	49 89 f9             	mov    %rdi,%r9
ffffffff8020d27b:	49 89 c8             	mov    %rcx,%r8
ffffffff8020d27e:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d281:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d284:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d287:	e8 73 9c 00 00       	call   ffffffff80216eff <_RME_Thd_Exec_Set>
ffffffff8020d28c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                     Reg,                                   /* volatile struct RME_Reg_Struct* Reg */
                                     (rme_cid_t)Cid,                        /* rme_cid_t Cap_Thd */
                                     Param[0],                              /* rme_ptr_t Entry */
                                     Param[1],                              /* rme_ptr_t Stack */
                                     Param[2]);                             /* rme_ptr_t Param */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d290:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d294:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d298:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d29b:	48 85 c0             	test   %rax,%rax
ffffffff8020d29e:	0f 84 81 06 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x983>
ffffffff8020d2a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d2a8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d2ac:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d2af:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d2b2:	e8 ba 9f 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
ffffffff8020d2b7:	e9 69 06 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x983>
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Thd0 */
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
                                       (rme_cid_t)RME_PARAM_D0(Param[1]),   /* rme_cid_t Cap_Thd1 */
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
                                       (rme_cid_t)RME_PARAM_D0(Param[2]),   /* rme_cid_t Cap_Thd2 */
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff8020d2bc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2c0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2c4:	48 89 c7             	mov    %rax,%rdi
                                       (rme_cid_t)RME_PARAM_D0(Param[2]),   /* rme_cid_t Cap_Thd2 */
ffffffff8020d2c7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2cb:	41 89 c1             	mov    %eax,%r9d
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
ffffffff8020d2ce:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2d2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2d6:	48 89 c1             	mov    %rax,%rcx
                                       (rme_cid_t)RME_PARAM_D0(Param[1]),   /* rme_cid_t Cap_Thd1 */
ffffffff8020d2d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2dd:	41 89 c3             	mov    %eax,%r11d
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
ffffffff8020d2e0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2e4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2e8:	49 89 c0             	mov    %rax,%r8
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Thd0 */
ffffffff8020d2eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2ef:	41 89 c2             	mov    %eax,%r10d
ffffffff8020d2f2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020d2f6:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d2fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d2fe:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d302:	57                   	push   %rdi
ffffffff8020d303:	41 51                	push   %r9
ffffffff8020d305:	51                   	push   %rcx
ffffffff8020d306:	4d 89 d9             	mov    %r11,%r9
ffffffff8020d309:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d30c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d30f:	e8 13 9f 00 00       	call   ffffffff80217227 <_RME_Thd_Sched_Prio>
ffffffff8020d314:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d318:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d31c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d320:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d324:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d327:	48 85 c0             	test   %rax,%rax
ffffffff8020d32a:	0f 84 f5 05 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x983>
ffffffff8020d330:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d334:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d338:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d33b:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d33e:	e8 2e 9f 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
ffffffff8020d343:	e9 dd 05 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x983>
        /* Transfer time to a thread */
        case RME_SVC_THD_TIME_XFER:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d348:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                      Reg,                                  /* volatile struct RME_Reg_Struct* Reg */
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
                                      (rme_cid_t)Param[1],                  /* rme_cid_t Cap_Thd_Src */
ffffffff8020d34c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d350:	48 89 c1             	mov    %rax,%rcx
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
ffffffff8020d353:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d357:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d35a:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d35e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d362:	49 89 d0             	mov    %rdx,%r8
ffffffff8020d365:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d368:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d36b:	e8 31 a6 00 00       	call   ffffffff802179a1 <_RME_Thd_Time_Xfer>
ffffffff8020d370:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                      Param[2]);                            /* rme_ptr_t Time */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d374:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d378:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d37c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d37f:	48 85 c0             	test   %rax,%rax
ffffffff8020d382:	0f 84 9d 05 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x983>
ffffffff8020d388:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d38c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d390:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d393:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d396:	e8 d6 9e 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
ffffffff8020d39b:	e9 85 05 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x983>
        /* Switch to another thread */
        case RME_SVC_THD_SWT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Swt(Cpt,
ffffffff8020d3a0:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Thd */
ffffffff8020d3a4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Swt(Cpt,
ffffffff8020d3a8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3ab:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d3af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d3b3:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d3b6:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d3b9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3bc:	e8 51 ad 00 00       	call   ffffffff80218112 <_RME_Thd_Swt>
ffffffff8020d3c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Full_Yield */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d3c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d3c9:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d3cd:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d3d0:	48 85 c0             	test   %rax,%rax
ffffffff8020d3d3:	0f 84 4c 05 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x983>
ffffffff8020d3d9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d3dd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d3e1:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d3e4:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3e7:	e8 85 9e 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
ffffffff8020d3ec:	e9 34 05 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x983>
        }
        default:
        {
            RME_COV_MARKER();
            break;
ffffffff8020d3f1:	90                   	nop
        }
    } 

    /* It is guaranteed that these functions will never cause a context switch */
    switch(Svc_Num)
ffffffff8020d3f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d3f6:	48 83 e8 0a          	sub    $0xa,%rax
ffffffff8020d3fa:	48 83 f8 17          	cmp    $0x17,%rax
ffffffff8020d3fe:	0f 87 05 05 00 00    	ja     ffffffff8020d909 <_RME_Svc_Handler+0x967>
ffffffff8020d404:	48 8b 04 c5 c8 92 22 	mov    -0x7fdd6d38(,%rax,8),%rax
ffffffff8020d40b:	80 
ffffffff8020d40c:	3e ff e0             	notrack jmp *%rax
    {
        /* Capability table */
        case RME_SVC_CPT_CRT:
        {
            RME_COV_MARKER();
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d40f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8020d413:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Crt */
ffffffff8020d417:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d41b:	41 89 c2             	mov    %eax,%r10d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d41e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d422:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d426:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d429:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d42d:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d430:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d434:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d437:	49 89 d0             	mov    %rdx,%r8
ffffffff8020d43a:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d43d:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d440:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d443:	e8 9b 0a 00 00       	call   ffffffff8020dee3 <_RME_Cpt_Crt>
ffffffff8020d448:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1],                                   /* rme_ptr_t Raddr */
                                Param[2]);                                  /* rme_ptr_t Entry_Num */
            break;
ffffffff8020d44c:	e9 c1 04 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Del */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Cpt */
ffffffff8020d451:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Del(Cpt,
ffffffff8020d455:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d458:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d45c:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d45f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d463:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d466:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d469:	e8 17 11 00 00       	call   ffffffff8020e585 <_RME_Cpt_Del>
ffffffff8020d46e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d472:	e9 9b 04 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Frz(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Frz */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Frz */
ffffffff8020d477:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Frz(Cpt,
ffffffff8020d47b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d47e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d482:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d485:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d489:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d48c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d48f:	e8 15 15 00 00       	call   ffffffff8020e9a9 <_RME_Cpt_Frz>
ffffffff8020d494:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d498:	e9 75 04 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Cpt_Src */
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
                                Param[2],                                   /* rme_ptr_t Flag */
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff8020d49d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d4a1:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020d4a5:	48 89 c2             	mov    %rax,%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d4ac:	48 09 c2             	or     %rax,%rdx
ffffffff8020d4af:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
ffffffff8020d4b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4b7:	41 89 c0             	mov    %eax,%r8d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Cpt_Src */
ffffffff8020d4ba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d4be:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4c2:	49 89 c2             	mov    %rax,%r10
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
ffffffff8020d4c5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4c9:	89 c7                	mov    %eax,%edi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
ffffffff8020d4cb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d4cf:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4d3:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d4d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d4da:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d4de:	52                   	push   %rdx
ffffffff8020d4df:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d4e2:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d4e5:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d4e8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d4eb:	e8 f5 17 00 00       	call   ffffffff8020ece5 <_RME_Cpt_Add>
ffffffff8020d4f0:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d4f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d4f8:	e9 15 04 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Rem(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Rem */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Rem */
ffffffff8020d4fd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Rem(Cpt,
ffffffff8020d501:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d504:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d508:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d50b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d50f:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d512:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d515:	e8 04 21 00 00       	call   ffffffff8020f61e <_RME_Cpt_Rem>
ffffffff8020d51a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d51e:	e9 ef 03 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
#if(RME_PGT_RAW_ENABLE==0U)
        case RME_SVC_PGT_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d523:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d527:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020d52b:	48 89 c7             	mov    %rax,%rdi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
                                Param[1],                                   /* rme_ptr_t Raddr */
                                Param[2]&RME_MASK_BEGIN(1U),                /* rme_ptr_t Base */
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
                                RME_PARAM_Q0(Param[0]),                     /* rme_ptr_t Size_Order */
ffffffff8020d52e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d532:	0f b7 c8             	movzwl %ax,%ecx
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
ffffffff8020d535:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d539:	83 e0 01             	and    $0x1,%eax
ffffffff8020d53c:	48 89 c6             	mov    %rax,%rsi
                                Param[2]&RME_MASK_BEGIN(1U),                /* rme_ptr_t Base */
ffffffff8020d53f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d543:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
ffffffff8020d547:	49 89 c1             	mov    %rax,%r9
ffffffff8020d54a:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff8020d54e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d552:	48 c1 e8 10          	shr    $0x10,%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d556:	0f b7 d0             	movzwl %ax,%edx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d559:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d55d:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d561:	49 89 c3             	mov    %rax,%r11
ffffffff8020d564:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d568:	49 89 c2             	mov    %rax,%r10
ffffffff8020d56b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d56f:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d573:	57                   	push   %rdi
ffffffff8020d574:	51                   	push   %rcx
ffffffff8020d575:	56                   	push   %rsi
ffffffff8020d576:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d579:	4c 89 da             	mov    %r11,%rdx
ffffffff8020d57c:	4c 89 d6             	mov    %r10,%rsi
ffffffff8020d57f:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d582:	e8 d8 2f 00 00       	call   ffffffff8021055f <_RME_Pgt_Crt>
ffffffff8020d587:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d58b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                RME_PARAM_PC(Svc));                         /* rme_ptr_t Num_Order */
            break;
ffffffff8020d58f:	e9 7e 03 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d594:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Del(Cpt,
ffffffff8020d598:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d59b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d59f:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d5a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d5a6:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d5a9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d5ac:	e8 d9 36 00 00       	call   ffffffff80210c8a <_RME_Pgt_Del>
ffffffff8020d5b1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d5b5:	e9 58 03 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        }
        case RME_SVC_PGT_ADD:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5ba:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
                                Cid,                                        /* rme_ptr_t Flag_Dst */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Pos_Src */
ffffffff8020d5be:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5c2:	41 89 c1             	mov    %eax,%r9d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
ffffffff8020d5c5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d5c9:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5cd:	49 89 c0             	mov    %rax,%r8
ffffffff8020d5d0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
ffffffff8020d5d4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5d8:	89 c7                	mov    %eax,%edi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
ffffffff8020d5da:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d5de:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5e2:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d5e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d5e9:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d5ed:	51                   	push   %rcx
ffffffff8020d5ee:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d5f1:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d5f4:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d5f7:	e8 82 3a 00 00       	call   ffffffff8021107e <_RME_Pgt_Add>
ffffffff8020d5fc:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d600:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Index */
            break;
ffffffff8020d604:	e9 09 03 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        }
        case RME_SVC_PGT_REM:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff8020d609:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt */
ffffffff8020d60d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff8020d611:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d614:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d618:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d61b:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d61e:	e8 1b 40 00 00       	call   ffffffff8021163e <_RME_Pgt_Rem>
ffffffff8020d623:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Pos */
            break;
ffffffff8020d627:	e9 e6 02 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        }
        case RME_SVC_PGT_CON:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d62c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
                                Param[1],                                   /* rme_ptr_t Pos */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Pgt_Child */
ffffffff8020d630:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d634:	89 c7                	mov    %eax,%edi
ffffffff8020d636:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff8020d63a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d63e:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d642:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d645:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d649:	49 89 c8             	mov    %rcx,%r8
ffffffff8020d64c:	48 89 f9             	mov    %rdi,%rcx
ffffffff8020d64f:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d652:	e8 78 42 00 00       	call   ffffffff802118cf <_RME_Pgt_Con>
ffffffff8020d657:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Flag_Child */
            break;
ffffffff8020d65b:	e9 b2 02 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Des(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
                                Param[1],                                   /* rme_ptr_t Pos */
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt_Child */
ffffffff8020d660:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Des(Cpt,
ffffffff8020d664:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d667:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
ffffffff8020d66b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Des(Cpt,
ffffffff8020d66f:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d672:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d676:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d679:	e8 ca 47 00 00       	call   ffffffff80211e48 <_RME_Pgt_Des>
ffffffff8020d67e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d682:	e9 8b 02 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
#if(RME_PGT_RAW_ENABLE==0U)
            Retval=_RME_Prc_Crt(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d687:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d68b:	48 89 c7             	mov    %rax,%rdi
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
ffffffff8020d68e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d692:	48 89 c1             	mov    %rax,%rcx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d695:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d699:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d69c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d6a0:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d6a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6a7:	49 89 f8             	mov    %rdi,%r8
ffffffff8020d6aa:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6ad:	e8 4b 62 00 00       	call   ffffffff802138fd <_RME_Prc_Crt>
ffffffff8020d6b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
                                (rme_ptr_t)Param[2]);                       /* rme_ptr_t Raw_Pgt */
#endif
            break;
ffffffff8020d6b6:	e9 57 02 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Prc_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Prc */
ffffffff8020d6bb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Del(Cpt,
ffffffff8020d6bf:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d6c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d6c6:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d6c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6cd:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d6d0:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6d3:	e8 b4 69 00 00       	call   ffffffff8021408c <_RME_Prc_Del>
ffffffff8020d6d8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d6dc:	e9 31 02 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Prc_Cpt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Cpt */
ffffffff8020d6e1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Cpt(Cpt,
ffffffff8020d6e5:	48 89 c2             	mov    %rax,%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d6e8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Cpt(Cpt,
ffffffff8020d6ec:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d6ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6f3:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d6f6:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6f9:	e8 4e 6d 00 00       	call   ffffffff8021444c <_RME_Prc_Cpt>
ffffffff8020d6fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d702:	e9 0b 02 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        {
            RME_COV_MARKER();
#if(RME_PGT_RAW_ENABLE==0U)
            Retval=_RME_Prc_Pgt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d707:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Pgt(Cpt,
ffffffff8020d70b:	48 89 c2             	mov    %rax,%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d70e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Pgt(Cpt,
ffffffff8020d712:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d715:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d719:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d71c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d71f:	e8 e8 71 00 00       	call   ffffffff8021490c <_RME_Prc_Pgt>
ffffffff8020d724:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
#else
            Retval=_RME_Prc_Pgt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                Param[1]);                                  /* rme_ptr_t Raw_Pgt */
#endif
            break;
ffffffff8020d728:	e9 e5 01 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        /* Thread */
        case RME_SVC_THD_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d72d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d731:	83 e0 40             	and    $0x40,%eax
ffffffff8020d734:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d737:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d73b:	48 c1 e8 07          	shr    $0x7,%rax
ffffffff8020d73f:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d742:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Prc */
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Prio_Max */
ffffffff8020d746:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d74a:	41 89 c1             	mov    %eax,%r9d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Prc */
ffffffff8020d74d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d751:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d755:	49 89 c0             	mov    %rax,%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
ffffffff8020d758:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d75c:	41 89 c3             	mov    %eax,%r11d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d75f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d763:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d767:	49 89 c2             	mov    %rax,%r10
ffffffff8020d76a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d76e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d771:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d775:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d779:	56                   	push   %rsi
ffffffff8020d77a:	51                   	push   %rcx
ffffffff8020d77b:	52                   	push   %rdx
ffffffff8020d77c:	4c 89 d9             	mov    %r11,%rcx
ffffffff8020d77f:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d782:	48 89 fe             	mov    %rdi,%rsi
ffffffff8020d785:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d788:	e8 bc 7c 00 00       	call   ffffffff80215449 <_RME_Thd_Crt>
ffffffff8020d78d:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d791:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2],                                   /* rme_ptr_t Raddr */
                                Svc>>7,                                     /* rme_ptr_t Attr */
                                Svc&0x40U);                                 /* rme_ptr_t Is_Hyp */
            break;
ffffffff8020d795:	e9 78 01 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Thd */
ffffffff8020d79a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Del(Cpt,
ffffffff8020d79e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d7a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d7a5:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d7a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d7ac:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d7af:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7b2:	e8 57 86 00 00       	call   ffffffff80215e0e <_RME_Thd_Del>
ffffffff8020d7b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d7bb:	e9 52 01 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        }
        case RME_SVC_THD_SCHED_BIND:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7c0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                       (rme_cid_t)Cid,                      /* rme_cid_t Cap_Thd */
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
                                       RME_PARAM_D0(Param[1]),              /* rme_ptr_t Prio */
ffffffff8020d7c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7c8:	41 89 c1             	mov    %eax,%r9d
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
ffffffff8020d7cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d7cf:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7d3:	49 89 c0             	mov    %rax,%r8
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
ffffffff8020d7d6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7da:	89 c1                	mov    %eax,%ecx
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff8020d7dc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d7e0:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7e4:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7e7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d7eb:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d7ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d7f2:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d7f6:	52                   	push   %rdx
ffffffff8020d7f7:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d7fa:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7fd:	e8 8f 8a 00 00       	call   ffffffff80216291 <_RME_Thd_Sched_Bind>
ffffffff8020d802:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d806:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                       Param[2]);                           /* rme_ptr_t Haddr */
            break;
ffffffff8020d80a:	e9 03 01 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        case RME_SVC_THD_SCHED_RCV:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Rcv(Cpt,
                                      (rme_cid_t)Param[0]);                 /* rme_cid_t Cap_Thd */
ffffffff8020d80f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Rcv(Cpt,
ffffffff8020d813:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d816:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d81a:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d81d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d820:	e8 61 9e 00 00       	call   ffffffff80217686 <_RME_Thd_Sched_Rcv>
ffffffff8020d825:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d829:	e9 e4 00 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        case RME_SVC_SIG_CRT:
        {
            RME_COV_MARKER();
            Retval=_RME_Sig_Crt(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d82e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Crt(Cpt,
ffffffff8020d832:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d835:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d839:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d83c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d840:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d843:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d846:	e8 e8 af 00 00       	call   ffffffff80218833 <_RME_Sig_Crt>
ffffffff8020d84b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d84f:	e9 be 00 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d854:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Del(Cpt,
ffffffff8020d858:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d85b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d85f:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d862:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d866:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d869:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d86c:	e8 be b2 00 00       	call   ffffffff80218b2f <_RME_Sig_Del>
ffffffff8020d871:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d875:	e9 98 00 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        
        /* Invocation */
        case RME_SVC_INV_CRT:
        {
            RME_COV_MARKER();
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d87a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Prc */
ffffffff8020d87e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d882:	49 89 c0             	mov    %rax,%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff8020d885:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d889:	89 c1                	mov    %eax,%ecx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d88b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d88f:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d893:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d896:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d89a:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d89d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d8a1:	49 89 d1             	mov    %rdx,%r9
ffffffff8020d8a4:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d8a7:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8aa:	e8 e0 bf 00 00       	call   ffffffff8021988f <_RME_Inv_Crt>
ffffffff8020d8af:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Raddr */
            break;
ffffffff8020d8b3:	eb 5d                	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Inv_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Inv */
ffffffff8020d8b5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Del(Cpt,
ffffffff8020d8b9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d8bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d8c0:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d8c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d8c7:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d8ca:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8cd:	e8 5b c8 00 00       	call   ffffffff8021a12d <_RME_Inv_Del>
ffffffff8020d8d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d8d6:	eb 3a                	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
            
            Retval=_RME_Inv_Set(Cpt,
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
                                Param[1],                                   /* rme_ptr_t Entry */
                                Param[2],                                   /* rme_ptr_t Stack */
                                RME_PARAM_D1(Param[0]));                    /* rme_ptr_t Is_Exc_Ret */
ffffffff8020d8d8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Set(Cpt,
ffffffff8020d8dc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d8e0:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d8e3:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8020d8e7:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff8020d8eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Set(Cpt,
ffffffff8020d8ef:	89 c7                	mov    %eax,%edi
ffffffff8020d8f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d8f5:	49 89 f0             	mov    %rsi,%r8
ffffffff8020d8f8:	48 89 fe             	mov    %rdi,%rsi
ffffffff8020d8fb:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8fe:	e8 19 cc 00 00       	call   ffffffff8021a51c <_RME_Inv_Set>
ffffffff8020d903:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d907:	eb 09                	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x970>
        /* This is an error */
        default: 
        {
            RME_COV_MARKER();
            
            Retval=RME_ERR_CPT_NULL;
ffffffff8020d909:	48 c7 45 f8 ff ff ff 	movq   $0xffffffffffffffff,-0x8(%rbp)
ffffffff8020d910:	ff 
            break;
ffffffff8020d911:	90                   	nop
        }
    }
    
    /* We set the registers and return */
    __RME_Svc_Retval_Set(Reg,Retval);
ffffffff8020d912:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d916:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d91a:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d91d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d920:	e8 4c 99 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
}
ffffffff8020d925:	c9                   	leave  
ffffffff8020d926:	c3                   	ret    

ffffffff8020d927 <_RME_Tim_Handler>:
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Tim_Handler(struct RME_Reg_Struct* Reg,
                      rme_ptr_t Slice)
{
ffffffff8020d927:	f3 0f 1e fa          	endbr64 
ffffffff8020d92b:	55                   	push   %rbp
ffffffff8020d92c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020d92f:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020d933:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020d937:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    RME_x64_timestamp++;
ffffffff8020d93b:	48 8b 05 be d6 01 00 	mov    0x1d6be(%rip),%rax        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8020d942:	48 83 c0 01          	add    $0x1,%rax
ffffffff8020d946:	48 89 05 b3 d6 01 00 	mov    %rax,0x1d6b3(%rip)        # ffffffff8022b000 <RME_x64_timestamp>
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    
    Local=RME_CPU_LOCAL();
ffffffff8020d94d:	e8 ed de ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020d952:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff8020d956:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d95a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020d95e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020d962:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d966:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d96a:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8020d971:	ff ff 7f 
ffffffff8020d974:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020d977:	77 57                	ja     ffffffff8020d9d0 <_RME_Tim_Handler+0xa9>
    {
        RME_COV_MARKER();

        /* Decrease timeslice count, and see if the timeslice is used up */
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff8020d979:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d97d:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d981:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8020d985:	73 19                	jae    ffffffff8020d9a0 <_RME_Tim_Handler+0x79>
        {
            RME_COV_MARKER();
            
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020d987:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d98b:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d98f:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
ffffffff8020d993:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d996:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d99a:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020d99e:	eb 30                	jmp    ffffffff8020d9d0 <_RME_Tim_Handler+0xa9>
        else
        {
            RME_COV_MARKER();

            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff8020d9a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9a4:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8020d9ab:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff8020d9ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9b0:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9b3:	e8 ec 54 00 00       	call   ffffffff80212ea4 <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff8020d9b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9bc:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8020d9c3:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff8020d9c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9c8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9cb:	e8 1f 56 00 00       	call   ffffffff80212fef <_RME_Run_Notif>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Send to the system tick timer endpoint. This endpoint is per-core */
    _RME_Kern_Snd(Local->Sig_Tim);
ffffffff8020d9d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d9d4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d9d8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9db:	e8 8a b5 00 00       	call   ffffffff80218f6a <_RME_Kern_Snd>

    /* All kernel send complete, now pick the highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff8020d9e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d9e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d9e8:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d9eb:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9ee:	e8 f0 b4 00 00       	call   ffffffff80218ee3 <_RME_Kern_High>
}
ffffffff8020d9f3:	90                   	nop
ffffffff8020d9f4:	c9                   	leave  
ffffffff8020d9f5:	c3                   	ret    

ffffffff8020d9f6 <_RME_Tim_Elapse>:
                                _RME_Tim_Elapse or _RME_Tim_Handler.
Output      : None.
Return      : None.
******************************************************************************/
void _RME_Tim_Elapse(rme_ptr_t Slice)
{
ffffffff8020d9f6:	f3 0f 1e fa          	endbr64 
ffffffff8020d9fa:	55                   	push   %rbp
ffffffff8020d9fb:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020d9fe:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020da02:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020da06:	e8 34 de ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020da0b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020da0f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    /* We don't want the slices less than 1 because we want to keep the kernel
     * SVC invariants - the current thread must still be running after this */
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020da13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da17:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020da1b:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8020da22:	ff ff 7f 
ffffffff8020da25:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020da28:	77 33                	ja     ffffffff8020da5d <_RME_Tim_Elapse+0x67>
    {
        RME_COV_MARKER();

        /* Decrease timeslice count, but no less than 1, so the thread is
         * always running, which keeps the invariant of the kernel */
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff8020da2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da2e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020da32:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020da36:	73 19                	jae    ffffffff8020da51 <_RME_Tim_Elapse+0x5b>
        {
            RME_COV_MARKER();
            
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020da38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da3c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020da40:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff8020da44:	48 89 c2             	mov    %rax,%rdx
ffffffff8020da47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da4b:	48 89 50 30          	mov    %rdx,0x30(%rax)
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff8020da4f:	eb 0c                	jmp    ffffffff8020da5d <_RME_Tim_Elapse+0x67>
            Thd_Cur->Sched.Slice=1U;
ffffffff8020da51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da55:	48 c7 40 30 01 00 00 	movq   $0x1,0x30(%rax)
ffffffff8020da5c:	00 
}
ffffffff8020da5d:	90                   	nop
ffffffff8020da5e:	c9                   	leave  
ffffffff8020da5f:	c3                   	ret    

ffffffff8020da60 <_RME_Tim_Future>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - How many slices to program until the next timeout.
******************************************************************************/
rme_ptr_t _RME_Tim_Future(void)
{
ffffffff8020da60:	f3 0f 1e fa          	endbr64 
ffffffff8020da64:	55                   	push   %rbp
ffffffff8020da65:	48 89 e5             	mov    %rsp,%rbp
    /* If we're running an infinite thread, just program infinite time,
     * these values are very large so that's fine */
    return RME_CPU_LOCAL()->Thd_Cur->Sched.Slice;
ffffffff8020da68:	e8 d2 dd ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020da6d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020da71:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff8020da75:	5d                   	pop    %rbp
ffffffff8020da76:	c3                   	ret    

ffffffff8020da77 <_RME_Cpt_Boot_Init>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Cpt_Boot_Init(rme_cid_t Cap_Cpt,
                             rme_ptr_t Vaddr,
                             rme_ptr_t Entry_Num)
{
ffffffff8020da77:	f3 0f 1e fa          	endbr64 
ffffffff8020da7b:	55                   	push   %rbp
ffffffff8020da7c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020da7f:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8020da83:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020da87:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020da8b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    rme_ptr_t Count;
    struct RME_Cap_Cpt* Cpt;

    /* See if the entry number is too big */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020da8f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020da94:	74 0a                	je     ffffffff8020daa0 <_RME_Cpt_Boot_Init+0x29>
ffffffff8020da96:	48 81 7d d8 00 80 00 	cmpq   $0x8000,-0x28(%rbp)
ffffffff8020da9d:	00 
ffffffff8020da9e:	76 0c                	jbe    ffffffff8020daac <_RME_Cpt_Boot_Init+0x35>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020daa0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020daa7:	e9 b8 00 00 00       	jmp    ffffffff8020db64 <_RME_Cpt_Boot_Init+0xed>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020daac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dab0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dab4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dab7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dabb:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020dabe:	48 89 c7             	mov    %rax,%rdi
ffffffff8020dac1:	e8 01 49 00 00       	call   ffffffff802123c7 <_RME_Kot_Mark>
ffffffff8020dac6:	48 85 c0             	test   %rax,%rax
ffffffff8020dac9:	74 0c                	je     ffffffff8020dad7 <_RME_Cpt_Boot_Init+0x60>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_KOT;
ffffffff8020dacb:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020dad2:	e9 8d 00 00 00       	jmp    ffffffff8020db64 <_RME_Cpt_Boot_Init+0xed>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020dad7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020dade:	00 
ffffffff8020dadf:	eb 1e                	jmp    ffffffff8020daff <_RME_Cpt_Boot_Init+0x88>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020dae1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020dae5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dae9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020daec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020daf0:	48 01 d0             	add    %rdx,%rax
ffffffff8020daf3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020dafa:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020daff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020db03:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020db07:	72 d8                	jb     ffffffff8020dae1 <_RME_Cpt_Boot_Init+0x6a>
    }

    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff8020db09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020db0d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020db11:	48 89 c2             	mov    %rax,%rdx
ffffffff8020db14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020db18:	48 01 d0             	add    %rdx,%rax
ffffffff8020db1b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Header init */
    Cpt->Head.Root_Ref=1U;
ffffffff8020db1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db23:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8020db2a:	00 
    Cpt->Head.Object=Vaddr;
ffffffff8020db2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db2f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020db33:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020db37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db3b:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020db42:	00 
    
    /* Info init */
    Cpt->Entry_Num=Entry_Num;
ffffffff8020db43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db47:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020db4b:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* At last, write into slot the correct information, and set status to VALID */
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020db4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db53:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020db5a:	00 03 00 
ffffffff8020db5d:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return Cap_Cpt;
ffffffff8020db60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff8020db64:	c9                   	leave  
ffffffff8020db65:	c3                   	ret    

ffffffff8020db66 <_RME_Cpt_Boot_Crt>:
rme_ret_t _RME_Cpt_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt_Crt,
                            rme_cid_t Cap_Crt,
                            rme_ptr_t Vaddr,
                            rme_ptr_t Entry_Num)
{
ffffffff8020db66:	f3 0f 1e fa          	endbr64 
ffffffff8020db6a:	55                   	push   %rbp
ffffffff8020db6b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020db6e:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020db72:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020db76:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020db7a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020db7e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020db82:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Cpt* Cpt_Crt;
    rme_ptr_t Type_Stat;
    
    /* See if the entry number is too big - this is not restricted by RME_CPT_ENTRY_MAX */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020db86:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff8020db8b:	74 0a                	je     ffffffff8020db97 <_RME_Cpt_Boot_Crt+0x31>
ffffffff8020db8d:	48 81 7d b8 00 80 00 	cmpq   $0x8000,-0x48(%rbp)
ffffffff8020db94:	00 
ffffffff8020db95:	76 0c                	jbe    ffffffff8020dba3 <_RME_Cpt_Boot_Crt+0x3d>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020db97:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020db9e:	e9 3e 03 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,
ffffffff8020dba3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dba7:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020dbac:	48 85 c0             	test   %rax,%rax
ffffffff8020dbaf:	0f 85 98 00 00 00    	jne    ffffffff8020dc4d <_RME_Cpt_Boot_Crt+0xe7>
ffffffff8020dbb5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dbb9:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020dbbd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dbc1:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dbc4:	0f 96 c0             	setbe  %al
ffffffff8020dbc7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dbca:	48 85 c0             	test   %rax,%rax
ffffffff8020dbcd:	74 0c                	je     ffffffff8020dbdb <_RME_Cpt_Boot_Crt+0x75>
ffffffff8020dbcf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dbd6:	e9 06 03 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dbdb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dbdf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dbe3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dbe6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dbea:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dbee:	48 01 d0             	add    %rdx,%rax
ffffffff8020dbf1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dbf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dbf9:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dbfc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dc00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dc04:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dc08:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dc0b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dc0f:	0f 94 c0             	sete   %al
ffffffff8020dc12:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc15:	48 85 c0             	test   %rax,%rax
ffffffff8020dc18:	74 0c                	je     ffffffff8020dc26 <_RME_Cpt_Boot_Crt+0xc0>
ffffffff8020dc1a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dc21:	e9 bb 02 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dc26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dc2a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dc2e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dc32:	0f 95 c0             	setne  %al
ffffffff8020dc35:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc38:	48 85 c0             	test   %rax,%rax
ffffffff8020dc3b:	0f 84 4c 01 00 00    	je     ffffffff8020dd8d <_RME_Cpt_Boot_Crt+0x227>
ffffffff8020dc41:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dc48:	e9 94 02 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dc4d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dc51:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dc55:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dc58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dc5c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dc60:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dc63:	0f 93 c0             	setae  %al
ffffffff8020dc66:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc69:	48 85 c0             	test   %rax,%rax
ffffffff8020dc6c:	74 0c                	je     ffffffff8020dc7a <_RME_Cpt_Boot_Crt+0x114>
ffffffff8020dc6e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dc75:	e9 67 02 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dc7a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dc7e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dc82:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dc86:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dc89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dc8d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dc91:	48 01 d0             	add    %rdx,%rax
ffffffff8020dc94:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dc98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dc9c:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dc9f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dca3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dca7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dcab:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dcae:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dcb2:	0f 94 c0             	sete   %al
ffffffff8020dcb5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dcb8:	48 85 c0             	test   %rax,%rax
ffffffff8020dcbb:	74 0c                	je     ffffffff8020dcc9 <_RME_Cpt_Boot_Crt+0x163>
ffffffff8020dcbd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dcc4:	e9 18 02 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dcc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dccd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dcd1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dcd5:	0f 95 c0             	setne  %al
ffffffff8020dcd8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dcdb:	48 85 c0             	test   %rax,%rax
ffffffff8020dcde:	74 0c                	je     ffffffff8020dcec <_RME_Cpt_Boot_Crt+0x186>
ffffffff8020dce0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dce7:	e9 f5 01 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dcec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dcf0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020dcf5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dcf8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dcfc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dd00:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dd03:	0f 93 c0             	setae  %al
ffffffff8020dd06:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd09:	48 85 c0             	test   %rax,%rax
ffffffff8020dd0c:	74 0c                	je     ffffffff8020dd1a <_RME_Cpt_Boot_Crt+0x1b4>
ffffffff8020dd0e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dd15:	e9 c7 01 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dd1a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dd1e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020dd23:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dd27:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dd2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd2e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dd32:	48 01 d0             	add    %rdx,%rax
ffffffff8020dd35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dd39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd3d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dd40:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dd44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dd48:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dd4c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dd4f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dd53:	0f 94 c0             	sete   %al
ffffffff8020dd56:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd59:	48 85 c0             	test   %rax,%rax
ffffffff8020dd5c:	74 0c                	je     ffffffff8020dd6a <_RME_Cpt_Boot_Crt+0x204>
ffffffff8020dd5e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dd65:	e9 77 01 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dd6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dd6e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dd72:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dd76:	0f 95 c0             	setne  %al
ffffffff8020dd79:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd7c:	48 85 c0             	test   %rax,%rax
ffffffff8020dd7f:	74 0c                	je     ffffffff8020dd8d <_RME_Cpt_Boot_Crt+0x227>
ffffffff8020dd81:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dd88:	e9 54 01 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
                   RME_CAP_TYPE_CPT,
                   struct RME_Cap_Cpt*,
                   Cpt_Op,
                   Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020dd8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd91:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020dd95:	83 e0 01             	and    $0x1,%eax
ffffffff8020dd98:	48 85 c0             	test   %rax,%rax
ffffffff8020dd9b:	0f 94 c0             	sete   %al
ffffffff8020dd9e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dda1:	48 85 c0             	test   %rax,%rax
ffffffff8020dda4:	74 0c                	je     ffffffff8020ddb2 <_RME_Cpt_Boot_Crt+0x24c>
ffffffff8020dda6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020ddad:	e9 2f 01 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020ddb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ddb6:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020ddba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020ddbe:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ddc1:	0f 96 c0             	setbe  %al
ffffffff8020ddc4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ddc7:	48 85 c0             	test   %rax,%rax
ffffffff8020ddca:	74 0c                	je     ffffffff8020ddd8 <_RME_Cpt_Boot_Crt+0x272>
ffffffff8020ddcc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ddd3:	e9 09 01 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020ddd8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020dddc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dde0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dde3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dde7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ddeb:	48 01 d0             	add    %rdx,%rax
ffffffff8020ddee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020ddf2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020ddf6:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020ddfd:	00 00 00 
ffffffff8020de00:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020de05:	48 89 c7             	mov    %rax,%rdi
ffffffff8020de08:	e8 51 e9 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020de0d:	48 85 c0             	test   %rax,%rax
ffffffff8020de10:	0f 94 c0             	sete   %al
ffffffff8020de13:	0f b6 c0             	movzbl %al,%eax
ffffffff8020de16:	48 85 c0             	test   %rax,%rax
ffffffff8020de19:	74 0c                	je     ffffffff8020de27 <_RME_Cpt_Boot_Crt+0x2c1>
ffffffff8020de1b:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020de22:	e9 ba 00 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020de27:	48 8b 15 d2 d1 01 00 	mov    0x1d1d2(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8020de2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de32:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Try to mark this area as populated */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020de36:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020de3a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020de3e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de41:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020de45:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020de48:	48 89 c7             	mov    %rax,%rdi
ffffffff8020de4b:	e8 77 45 00 00       	call   ffffffff802123c7 <_RME_Kot_Mark>
ffffffff8020de50:	48 85 c0             	test   %rax,%rax
ffffffff8020de53:	74 14                	je     ffffffff8020de69 <_RME_Cpt_Boot_Crt+0x303>
    {
        RME_COV_MARKER();
        
        /* Abort the creation process */
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020de55:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de59:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020de60:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020de67:	eb 78                	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020de69:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020de70:	00 
ffffffff8020de71:	eb 1e                	jmp    ffffffff8020de91 <_RME_Cpt_Boot_Crt+0x32b>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020de73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020de77:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020de7b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de7e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020de82:	48 01 d0             	add    %rdx,%rax
ffffffff8020de85:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020de8c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020de91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020de95:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff8020de99:	72 d8                	jb     ffffffff8020de73 <_RME_Cpt_Boot_Crt+0x30d>
    }

    /* Header init */
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020de9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de9f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020dea6:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020dea7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020deab:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020deaf:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020deb3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020deb7:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020debe:	00 
    /* Info init */
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020debf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dec3:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020dec7:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020decb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020decf:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020ded6:	00 03 00 
ffffffff8020ded9:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020dedc:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020dee1:	c9                   	leave  
ffffffff8020dee2:	c3                   	ret    

ffffffff8020dee3 <_RME_Cpt_Crt>:
                              rme_cid_t Cap_Cpt_Crt,
                              rme_cid_t Cap_Kom,
                              rme_cid_t Cap_Crt,
                              rme_ptr_t Raddr,
                              rme_ptr_t Entry_Num)
{
ffffffff8020dee3:	f3 0f 1e fa          	endbr64 
ffffffff8020dee7:	55                   	push   %rbp
ffffffff8020dee8:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020deeb:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020deef:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8020def3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8020def7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8020defb:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff8020deff:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff8020df03:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    volatile struct RME_Cap_Cpt* Cpt_Crt;
    rme_ptr_t Type_Stat;
    rme_ptr_t Vaddr;

    /* See if the entry number is too big */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020df07:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
ffffffff8020df0c:	74 0a                	je     ffffffff8020df18 <_RME_Cpt_Crt+0x35>
ffffffff8020df0e:	48 81 7d a0 00 80 00 	cmpq   $0x8000,-0x60(%rbp)
ffffffff8020df15:	00 
ffffffff8020df16:	76 0c                	jbe    ffffffff8020df24 <_RME_Cpt_Crt+0x41>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020df18:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020df1f:	e9 5f 06 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
        /* No action required */
    }
#endif

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020df24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020df28:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020df2d:	48 85 c0             	test   %rax,%rax
ffffffff8020df30:	0f 85 98 00 00 00    	jne    ffffffff8020dfce <_RME_Cpt_Crt+0xeb>
ffffffff8020df36:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020df3a:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020df3e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020df42:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020df45:	0f 96 c0             	setbe  %al
ffffffff8020df48:	0f b6 c0             	movzbl %al,%eax
ffffffff8020df4b:	48 85 c0             	test   %rax,%rax
ffffffff8020df4e:	74 0c                	je     ffffffff8020df5c <_RME_Cpt_Crt+0x79>
ffffffff8020df50:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020df57:	e9 27 06 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020df5c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020df60:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020df64:	48 89 c2             	mov    %rax,%rdx
ffffffff8020df67:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020df6b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020df6f:	48 01 d0             	add    %rdx,%rax
ffffffff8020df72:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020df76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020df7a:	48 8b 00             	mov    (%rax),%rax
ffffffff8020df7d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020df81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020df85:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020df89:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020df8c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020df90:	0f 94 c0             	sete   %al
ffffffff8020df93:	0f b6 c0             	movzbl %al,%eax
ffffffff8020df96:	48 85 c0             	test   %rax,%rax
ffffffff8020df99:	74 0c                	je     ffffffff8020dfa7 <_RME_Cpt_Crt+0xc4>
ffffffff8020df9b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dfa2:	e9 dc 05 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020dfa7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dfab:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dfaf:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dfb3:	0f 95 c0             	setne  %al
ffffffff8020dfb6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dfb9:	48 85 c0             	test   %rax,%rax
ffffffff8020dfbc:	0f 84 4c 01 00 00    	je     ffffffff8020e10e <_RME_Cpt_Crt+0x22b>
ffffffff8020dfc2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dfc9:	e9 b5 05 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020dfce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020dfd2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dfd6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dfd9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020dfdd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dfe1:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dfe4:	0f 93 c0             	setae  %al
ffffffff8020dfe7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dfea:	48 85 c0             	test   %rax,%rax
ffffffff8020dfed:	74 0c                	je     ffffffff8020dffb <_RME_Cpt_Crt+0x118>
ffffffff8020dfef:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dff6:	e9 88 05 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020dffb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020dfff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e003:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e007:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e00a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e00e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e012:	48 01 d0             	add    %rdx,%rax
ffffffff8020e015:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e019:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e01d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e020:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e024:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e028:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e02c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e02f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e033:	0f 94 c0             	sete   %al
ffffffff8020e036:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e039:	48 85 c0             	test   %rax,%rax
ffffffff8020e03c:	74 0c                	je     ffffffff8020e04a <_RME_Cpt_Crt+0x167>
ffffffff8020e03e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e045:	e9 39 05 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e04a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e04e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e052:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e056:	0f 95 c0             	setne  %al
ffffffff8020e059:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e05c:	48 85 c0             	test   %rax,%rax
ffffffff8020e05f:	74 0c                	je     ffffffff8020e06d <_RME_Cpt_Crt+0x18a>
ffffffff8020e061:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e068:	e9 16 05 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e06d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020e071:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e076:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e079:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e07d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e081:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e084:	0f 93 c0             	setae  %al
ffffffff8020e087:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e08a:	48 85 c0             	test   %rax,%rax
ffffffff8020e08d:	74 0c                	je     ffffffff8020e09b <_RME_Cpt_Crt+0x1b8>
ffffffff8020e08f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e096:	e9 e8 04 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e09b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020e09f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e0a4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e0a8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e0ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e0af:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e0b3:	48 01 d0             	add    %rdx,%rax
ffffffff8020e0b6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e0ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e0be:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e0c1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e0c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e0c9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e0cd:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e0d0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e0d4:	0f 94 c0             	sete   %al
ffffffff8020e0d7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e0da:	48 85 c0             	test   %rax,%rax
ffffffff8020e0dd:	74 0c                	je     ffffffff8020e0eb <_RME_Cpt_Crt+0x208>
ffffffff8020e0df:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e0e6:	e9 98 04 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e0eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e0ef:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e0f3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e0f7:	0f 95 c0             	setne  %al
ffffffff8020e0fa:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e0fd:	48 85 c0             	test   %rax,%rax
ffffffff8020e100:	74 0c                	je     ffffffff8020e10e <_RME_Cpt_Crt+0x22b>
ffffffff8020e102:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e109:	e9 75 04 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020e10e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e112:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e117:	48 85 c0             	test   %rax,%rax
ffffffff8020e11a:	0f 85 98 00 00 00    	jne    ffffffff8020e1b8 <_RME_Cpt_Crt+0x2d5>
ffffffff8020e120:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e124:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e128:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e12c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e12f:	0f 96 c0             	setbe  %al
ffffffff8020e132:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e135:	48 85 c0             	test   %rax,%rax
ffffffff8020e138:	74 0c                	je     ffffffff8020e146 <_RME_Cpt_Crt+0x263>
ffffffff8020e13a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e141:	e9 3d 04 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e146:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e14a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e14e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e151:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e155:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e159:	48 01 d0             	add    %rdx,%rax
ffffffff8020e15c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e160:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e164:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e167:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e16b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e16f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e173:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e176:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e17a:	0f 94 c0             	sete   %al
ffffffff8020e17d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e180:	48 85 c0             	test   %rax,%rax
ffffffff8020e183:	74 0c                	je     ffffffff8020e191 <_RME_Cpt_Crt+0x2ae>
ffffffff8020e185:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e18c:	e9 f2 03 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e191:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e195:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e199:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e19d:	0f 95 c0             	setne  %al
ffffffff8020e1a0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e1a3:	48 85 c0             	test   %rax,%rax
ffffffff8020e1a6:	0f 84 4c 01 00 00    	je     ffffffff8020e2f8 <_RME_Cpt_Crt+0x415>
ffffffff8020e1ac:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e1b3:	e9 cb 03 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e1b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e1bc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e1c0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e1c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e1c7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e1cb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e1ce:	0f 93 c0             	setae  %al
ffffffff8020e1d1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e1d4:	48 85 c0             	test   %rax,%rax
ffffffff8020e1d7:	74 0c                	je     ffffffff8020e1e5 <_RME_Cpt_Crt+0x302>
ffffffff8020e1d9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e1e0:	e9 9e 03 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e1e5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e1e9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e1ed:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e1f1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e1f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e1f8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e1fc:	48 01 d0             	add    %rdx,%rax
ffffffff8020e1ff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e203:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e207:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e20a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e20e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e212:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e216:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e219:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e21d:	0f 94 c0             	sete   %al
ffffffff8020e220:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e223:	48 85 c0             	test   %rax,%rax
ffffffff8020e226:	74 0c                	je     ffffffff8020e234 <_RME_Cpt_Crt+0x351>
ffffffff8020e228:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e22f:	e9 4f 03 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e234:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e238:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e23c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e240:	0f 95 c0             	setne  %al
ffffffff8020e243:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e246:	48 85 c0             	test   %rax,%rax
ffffffff8020e249:	74 0c                	je     ffffffff8020e257 <_RME_Cpt_Crt+0x374>
ffffffff8020e24b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e252:	e9 2c 03 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e257:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e25b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e260:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e263:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e267:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e26b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e26e:	0f 93 c0             	setae  %al
ffffffff8020e271:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e274:	48 85 c0             	test   %rax,%rax
ffffffff8020e277:	74 0c                	je     ffffffff8020e285 <_RME_Cpt_Crt+0x3a2>
ffffffff8020e279:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e280:	e9 fe 02 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e285:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e289:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e28e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e292:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e295:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e299:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e29d:	48 01 d0             	add    %rdx,%rax
ffffffff8020e2a0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e2a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e2a8:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e2ab:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e2af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e2b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e2b7:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e2ba:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e2be:	0f 94 c0             	sete   %al
ffffffff8020e2c1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e2c4:	48 85 c0             	test   %rax,%rax
ffffffff8020e2c7:	74 0c                	je     ffffffff8020e2d5 <_RME_Cpt_Crt+0x3f2>
ffffffff8020e2c9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e2d0:	e9 ae 02 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e2d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e2d9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e2dd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e2e1:	0f 95 c0             	setne  %al
ffffffff8020e2e4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e2e7:	48 85 c0             	test   %rax,%rax
ffffffff8020e2ea:	74 0c                	je     ffffffff8020e2f8 <_RME_Cpt_Crt+0x415>
ffffffff8020e2ec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e2f3:	e9 8b 02 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020e2f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e2fc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e300:	83 e0 01             	and    $0x1,%eax
ffffffff8020e303:	48 85 c0             	test   %rax,%rax
ffffffff8020e306:	0f 94 c0             	sete   %al
ffffffff8020e309:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e30c:	48 85 c0             	test   %rax,%rax
ffffffff8020e30f:	74 0c                	je     ffffffff8020e31d <_RME_Cpt_Crt+0x43a>
ffffffff8020e311:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e318:	e9 66 02 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
ffffffff8020e31d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e321:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e325:	83 e0 01             	and    $0x1,%eax
ffffffff8020e328:	48 85 c0             	test   %rax,%rax
ffffffff8020e32b:	0f 94 c0             	sete   %al
ffffffff8020e32e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e331:	48 85 c0             	test   %rax,%rax
ffffffff8020e334:	74 18                	je     ffffffff8020e34e <_RME_Cpt_Crt+0x46b>
ffffffff8020e336:	48 c7 c7 88 93 22 80 	mov    $0xffffffff80229388,%rdi
ffffffff8020e33d:	e8 c9 e6 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8020e342:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e349:	e9 35 02 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e34e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e352:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e356:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020e35a:	48 01 d0             	add    %rdx,%rax
ffffffff8020e35d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8020e361:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e365:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff8020e369:	0f 92 c0             	setb   %al
ffffffff8020e36c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e36f:	48 85 c0             	test   %rax,%rax
ffffffff8020e372:	74 34                	je     ffffffff8020e3a8 <_RME_Cpt_Crt+0x4c5>
ffffffff8020e374:	48 c7 c7 a8 93 22 80 	mov    $0xffffffff802293a8,%rdi
ffffffff8020e37b:	e8 8b e6 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8020e380:	48 c7 c7 c7 93 22 80 	mov    $0xffffffff802293c7,%rdi
ffffffff8020e387:	e8 7f e6 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8020e38c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e390:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e394:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e397:	e8 ad e5 ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
ffffffff8020e39c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e3a3:	e9 db 01 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e3a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e3ac:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e3b0:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff8020e3b4:	0f 92 c0             	setb   %al
ffffffff8020e3b7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e3ba:	48 85 c0             	test   %rax,%rax
ffffffff8020e3bd:	74 18                	je     ffffffff8020e3d7 <_RME_Cpt_Crt+0x4f4>
ffffffff8020e3bf:	48 c7 c7 d8 93 22 80 	mov    $0xffffffff802293d8,%rdi
ffffffff8020e3c6:	e8 40 e6 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8020e3cb:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e3d2:	e9 ac 01 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e3d7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e3db:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e3df:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e3e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e3e6:	48 01 d0             	add    %rdx,%rax
ffffffff8020e3e9:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff8020e3ed:	0f 97 c0             	seta   %al
ffffffff8020e3f0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e3f3:	48 85 c0             	test   %rax,%rax
ffffffff8020e3f6:	74 18                	je     ffffffff8020e410 <_RME_Cpt_Crt+0x52d>
ffffffff8020e3f8:	48 c7 c7 f8 93 22 80 	mov    $0xffffffff802293f8,%rdi
ffffffff8020e3ff:	e8 07 e6 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8020e404:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e40b:	e9 73 01 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e410:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e414:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020e418:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8020e41c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020e41f:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020e423:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020e427:	48 01 ca             	add    %rcx,%rdx
ffffffff8020e42a:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8020e42e:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e431:	0f 92 c0             	setb   %al
ffffffff8020e434:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e437:	48 85 c0             	test   %rax,%rax
ffffffff8020e43a:	74 18                	je     ffffffff8020e454 <_RME_Cpt_Crt+0x571>
ffffffff8020e43c:	48 c7 c7 18 94 22 80 	mov    $0xffffffff80229418,%rdi
ffffffff8020e443:	e8 c3 e5 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8020e448:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e44f:	e9 2f 01 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020e454:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e458:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e45c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e460:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e463:	0f 96 c0             	setbe  %al
ffffffff8020e466:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e469:	48 85 c0             	test   %rax,%rax
ffffffff8020e46c:	74 0c                	je     ffffffff8020e47a <_RME_Cpt_Crt+0x597>
ffffffff8020e46e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e475:	e9 09 01 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e47a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e47e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e482:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e485:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e489:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e48d:	48 01 d0             	add    %rdx,%rax
ffffffff8020e490:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020e494:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e498:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020e49f:	00 00 00 
ffffffff8020e4a2:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020e4a7:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e4aa:	e8 af e2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e4af:	48 85 c0             	test   %rax,%rax
ffffffff8020e4b2:	0f 94 c0             	sete   %al
ffffffff8020e4b5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e4b8:	48 85 c0             	test   %rax,%rax
ffffffff8020e4bb:	74 0c                	je     ffffffff8020e4c9 <_RME_Cpt_Crt+0x5e6>
ffffffff8020e4bd:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020e4c4:	e9 ba 00 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e4c9:	48 8b 15 30 cb 01 00 	mov    0x1cb30(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8020e4d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e4d4:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Try to mark this area as populated */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020e4d8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e4dc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e4e0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e4e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e4e7:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e4ea:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e4ed:	e8 d5 3e 00 00       	call   ffffffff802123c7 <_RME_Kot_Mark>
ffffffff8020e4f2:	48 85 c0             	test   %rax,%rax
ffffffff8020e4f5:	79 14                	jns    ffffffff8020e50b <_RME_Cpt_Crt+0x628>
    {
        RME_COV_MARKER();
        
        /* Failure. Set the Type_Stat back to 0 and abort the creation process */
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020e4f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e4fb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020e502:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020e509:	eb 78                	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e50b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020e512:	00 
ffffffff8020e513:	eb 1e                	jmp    ffffffff8020e533 <_RME_Cpt_Crt+0x650>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020e515:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e519:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e51d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e520:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e524:	48 01 d0             	add    %rdx,%rax
ffffffff8020e527:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e52e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020e533:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e537:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
ffffffff8020e53b:	72 d8                	jb     ffffffff8020e515 <_RME_Cpt_Crt+0x632>
    }

    /* Header init */
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020e53d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e541:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020e548:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020e549:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e54d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020e551:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020e555:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e559:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020e560:	00 
    
    /* Info init */
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020e561:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e565:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8020e569:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020e56d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e571:	48 be 00 00 00 00 00 	movabs $0x3000000000000,%rsi
ffffffff8020e578:	00 03 00 
ffffffff8020e57b:	48 89 30             	mov    %rsi,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020e57e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020e583:	c9                   	leave  
ffffffff8020e584:	c3                   	ret    

ffffffff8020e585 <_RME_Cpt_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Del,
                              rme_cid_t Cap_Del)
{
ffffffff8020e585:	f3 0f 1e fa          	endbr64 
ffffffff8020e589:	55                   	push   %rbp
ffffffff8020e58a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020e58d:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020e591:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8020e595:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff8020e599:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    /* These are used for deletion */
    rme_ptr_t Object;
    rme_ptr_t Size;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8020e59d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e5a1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e5a6:	48 85 c0             	test   %rax,%rax
ffffffff8020e5a9:	0f 85 98 00 00 00    	jne    ffffffff8020e647 <_RME_Cpt_Del+0xc2>
ffffffff8020e5af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e5b3:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e5b7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e5bb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e5be:	0f 96 c0             	setbe  %al
ffffffff8020e5c1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e5c4:	48 85 c0             	test   %rax,%rax
ffffffff8020e5c7:	74 0c                	je     ffffffff8020e5d5 <_RME_Cpt_Del+0x50>
ffffffff8020e5c9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e5d0:	e9 d2 03 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
ffffffff8020e5d5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e5d9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e5dd:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e5e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e5e4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e5e8:	48 01 d0             	add    %rdx,%rax
ffffffff8020e5eb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e5ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e5f3:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e5f6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e5fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e5fe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e602:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e605:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e609:	0f 94 c0             	sete   %al
ffffffff8020e60c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e60f:	48 85 c0             	test   %rax,%rax
ffffffff8020e612:	74 0c                	je     ffffffff8020e620 <_RME_Cpt_Del+0x9b>
ffffffff8020e614:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e61b:	e9 87 03 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
ffffffff8020e620:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e624:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e628:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e62c:	0f 95 c0             	setne  %al
ffffffff8020e62f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e632:	48 85 c0             	test   %rax,%rax
ffffffff8020e635:	0f 84 4c 01 00 00    	je     ffffffff8020e787 <_RME_Cpt_Del+0x202>
ffffffff8020e63b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e642:	e9 60 03 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
ffffffff8020e647:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e64b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e64f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e652:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e656:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e65a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e65d:	0f 93 c0             	setae  %al
ffffffff8020e660:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e663:	48 85 c0             	test   %rax,%rax
ffffffff8020e666:	74 0c                	je     ffffffff8020e674 <_RME_Cpt_Del+0xef>
ffffffff8020e668:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e66f:	e9 33 03 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
ffffffff8020e674:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e678:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e67c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e680:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e683:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e687:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e68b:	48 01 d0             	add    %rdx,%rax
ffffffff8020e68e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e692:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e696:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e699:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e69d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e6a1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e6a5:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e6a8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e6ac:	0f 94 c0             	sete   %al
ffffffff8020e6af:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e6b2:	48 85 c0             	test   %rax,%rax
ffffffff8020e6b5:	74 0c                	je     ffffffff8020e6c3 <_RME_Cpt_Del+0x13e>
ffffffff8020e6b7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e6be:	e9 e4 02 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
ffffffff8020e6c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e6c7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e6cb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e6cf:	0f 95 c0             	setne  %al
ffffffff8020e6d2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e6d5:	48 85 c0             	test   %rax,%rax
ffffffff8020e6d8:	74 0c                	je     ffffffff8020e6e6 <_RME_Cpt_Del+0x161>
ffffffff8020e6da:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e6e1:	e9 c1 02 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
ffffffff8020e6e6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e6ea:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e6ef:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e6f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e6f6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e6fa:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e6fd:	0f 93 c0             	setae  %al
ffffffff8020e700:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e703:	48 85 c0             	test   %rax,%rax
ffffffff8020e706:	74 0c                	je     ffffffff8020e714 <_RME_Cpt_Del+0x18f>
ffffffff8020e708:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e70f:	e9 93 02 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
ffffffff8020e714:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e718:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e71d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e721:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e724:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e728:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e72c:	48 01 d0             	add    %rdx,%rax
ffffffff8020e72f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e733:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e737:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e73a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e73e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e742:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e746:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e749:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e74d:	0f 94 c0             	sete   %al
ffffffff8020e750:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e753:	48 85 c0             	test   %rax,%rax
ffffffff8020e756:	74 0c                	je     ffffffff8020e764 <_RME_Cpt_Del+0x1df>
ffffffff8020e758:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e75f:	e9 43 02 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
ffffffff8020e764:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e768:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e76c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e770:	0f 95 c0             	setne  %al
ffffffff8020e773:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e776:	48 85 c0             	test   %rax,%rax
ffffffff8020e779:	74 0c                	je     ffffffff8020e787 <_RME_Cpt_Del+0x202>
ffffffff8020e77b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e782:	e9 20 02 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8020e787:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e78b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e78f:	83 e0 02             	and    $0x2,%eax
ffffffff8020e792:	48 85 c0             	test   %rax,%rax
ffffffff8020e795:	0f 94 c0             	sete   %al
ffffffff8020e798:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e79b:	48 85 c0             	test   %rax,%rax
ffffffff8020e79e:	74 0c                	je     ffffffff8020e7ac <_RME_Cpt_Del+0x227>
ffffffff8020e7a0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e7a7:	e9 fb 01 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff8020e7ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e7b0:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e7b4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020e7b8:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e7bb:	0f 96 c0             	setbe  %al
ffffffff8020e7be:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e7c1:	48 85 c0             	test   %rax,%rax
ffffffff8020e7c4:	74 0c                	je     ffffffff8020e7d2 <_RME_Cpt_Del+0x24d>
ffffffff8020e7c6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e7cd:	e9 d5 01 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
ffffffff8020e7d2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020e7d6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e7da:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e7dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e7e1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e7e5:	48 01 d0             	add    %rdx,%rax
ffffffff8020e7e8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff8020e7ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e7f0:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e7f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e7f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e7fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e7ff:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e802:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e806:	0f 95 c0             	setne  %al
ffffffff8020e809:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e80c:	48 85 c0             	test   %rax,%rax
ffffffff8020e80f:	74 0c                	je     ffffffff8020e81d <_RME_Cpt_Del+0x298>
ffffffff8020e811:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e818:	e9 8a 01 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
ffffffff8020e81d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e821:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e825:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e829:	0f 95 c0             	setne  %al
ffffffff8020e82c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e82f:	48 85 c0             	test   %rax,%rax
ffffffff8020e832:	74 0c                	je     ffffffff8020e840 <_RME_Cpt_Del+0x2bb>
ffffffff8020e834:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e83b:	e9 67 01 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
ffffffff8020e840:	48 8b 15 b9 c7 01 00 	mov    0x1c7b9(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8020e847:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e84b:	48 8b 48 20          	mov    0x20(%rax),%rcx
ffffffff8020e84f:	48 89 d0             	mov    %rdx,%rax
ffffffff8020e852:	48 29 c8             	sub    %rcx,%rax
ffffffff8020e855:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff8020e859:	0f 96 c0             	setbe  %al
ffffffff8020e85c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e85f:	48 98                	cltq   
ffffffff8020e861:	48 85 c0             	test   %rax,%rax
ffffffff8020e864:	74 0c                	je     ffffffff8020e872 <_RME_Cpt_Del+0x2ed>
ffffffff8020e866:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020e86d:	e9 35 01 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
ffffffff8020e872:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e876:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020e87a:	48 85 c0             	test   %rax,%rax
ffffffff8020e87d:	0f 95 c0             	setne  %al
ffffffff8020e880:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e883:	48 85 c0             	test   %rax,%rax
ffffffff8020e886:	74 44                	je     ffffffff8020e8cc <_RME_Cpt_Del+0x347>
ffffffff8020e888:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e88c:	89 c0                	mov    %eax,%eax
ffffffff8020e88e:	48 85 c0             	test   %rax,%rax
ffffffff8020e891:	0f 94 c0             	sete   %al
ffffffff8020e894:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e897:	48 85 c0             	test   %rax,%rax
ffffffff8020e89a:	74 24                	je     ffffffff8020e8c0 <_RME_Cpt_Del+0x33b>
ffffffff8020e89c:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020e8a3:	00 ff ff 
ffffffff8020e8a6:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff8020e8aa:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e8ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e8b1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e8b5:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e8b8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e8bb:	e8 9e de ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e8c0:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8020e8c7:	e9 db 00 00 00       	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
    /* Is there any capability in this capability table? If yes, we cannot destroy it.
     * We will check every slot to make sure nothing is there. This is surely,
     * predictable but not so perfect. So, if the time of such operations is to be 
     * bounded, the user must control the maximum number of entries in the table
     * by configuring RME_CPT_ENTRY_MAX to a non-zero value. */
    Table=RME_CAP_GETOBJ(Cpt_Del,struct RME_Cap_Struct*);
ffffffff8020e8cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e8d0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e8d4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Entry_Num=Cpt_Del->Entry_Num;
ffffffff8020e8d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e8dc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e8e0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e8e4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020e8eb:	00 
ffffffff8020e8ec:	eb 4c                	jmp    ffffffff8020e93a <_RME_Cpt_Del+0x3b5>
    {
        if(Table[Count].Head.Type_Stat!=0U)
ffffffff8020e8ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e8f2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e8f6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e8f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e8fd:	48 01 d0             	add    %rdx,%rax
ffffffff8020e900:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e903:	48 85 c0             	test   %rax,%rax
ffffffff8020e906:	74 2d                	je     ffffffff8020e935 <_RME_Cpt_Del+0x3b0>
        {
            RME_COV_MARKER();
            
            RME_CAP_DEFROST(Cpt_Del,Type_Stat);
ffffffff8020e908:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020e90f:	00 ff ff 
ffffffff8020e912:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff8020e916:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e919:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e91d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e921:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e924:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e927:	e8 32 de ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
            return RME_ERR_CPT_EXIST;
ffffffff8020e92c:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020e933:	eb 72                	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e935:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020e93a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e93e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8020e942:	72 aa                	jb     ffffffff8020e8ee <_RME_Cpt_Del+0x369>
            /* No action required */
        }
    }
    
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Cpt_Del,rme_ptr_t);
ffffffff8020e944:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e948:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e94c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Size=RME_CPT_SIZE(Cpt_Del->Entry_Num);
ffffffff8020e950:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e954:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e958:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e95c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Cpt_Del,Type_Stat);
ffffffff8020e960:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e964:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e968:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020e96d:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e970:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e973:	e8 e6 dd ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e978:	48 85 c0             	test   %rax,%rax
ffffffff8020e97b:	0f 94 c0             	sete   %al
ffffffff8020e97e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e981:	48 85 c0             	test   %rax,%rax
ffffffff8020e984:	74 09                	je     ffffffff8020e98f <_RME_Cpt_Del+0x40a>
ffffffff8020e986:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020e98d:	eb 18                	jmp    ffffffff8020e9a7 <_RME_Cpt_Del+0x422>

    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kot_Erase(Object,Size)==0);
ffffffff8020e98f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020e993:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e997:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e99a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e99d:	e8 6c 3d 00 00       	call   ffffffff8021270e <_RME_Kot_Erase>
    
    return 0;
ffffffff8020e9a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020e9a7:	c9                   	leave  
ffffffff8020e9a8:	c3                   	ret    

ffffffff8020e9a9 <_RME_Cpt_Frz>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Frz(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Frz,
                              rme_cid_t Cap_Frz)
{
ffffffff8020e9a9:	f3 0f 1e fa          	endbr64 
ffffffff8020e9ad:	55                   	push   %rbp
ffffffff8020e9ae:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020e9b1:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8020e9b5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020e9b9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020e9bd:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Struct* Capobj_Frz;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff8020e9c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e9c5:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e9ca:	48 85 c0             	test   %rax,%rax
ffffffff8020e9cd:	0f 85 98 00 00 00    	jne    ffffffff8020ea6b <_RME_Cpt_Frz+0xc2>
ffffffff8020e9d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e9d7:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e9db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e9df:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e9e2:	0f 96 c0             	setbe  %al
ffffffff8020e9e5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e9e8:	48 85 c0             	test   %rax,%rax
ffffffff8020e9eb:	74 0c                	je     ffffffff8020e9f9 <_RME_Cpt_Frz+0x50>
ffffffff8020e9ed:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e9f4:	e9 ea 02 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
ffffffff8020e9f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e9fd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ea01:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ea04:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ea08:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ea0c:	48 01 d0             	add    %rdx,%rax
ffffffff8020ea0f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ea13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ea17:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ea1a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ea1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ea22:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ea26:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ea29:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ea2d:	0f 94 c0             	sete   %al
ffffffff8020ea30:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea33:	48 85 c0             	test   %rax,%rax
ffffffff8020ea36:	74 0c                	je     ffffffff8020ea44 <_RME_Cpt_Frz+0x9b>
ffffffff8020ea38:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ea3f:	e9 9f 02 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
ffffffff8020ea44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ea48:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ea4c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ea50:	0f 95 c0             	setne  %al
ffffffff8020ea53:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea56:	48 85 c0             	test   %rax,%rax
ffffffff8020ea59:	0f 84 4c 01 00 00    	je     ffffffff8020ebab <_RME_Cpt_Frz+0x202>
ffffffff8020ea5f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ea66:	e9 78 02 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
ffffffff8020ea6b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ea6f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ea73:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ea76:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ea7a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ea7e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ea81:	0f 93 c0             	setae  %al
ffffffff8020ea84:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea87:	48 85 c0             	test   %rax,%rax
ffffffff8020ea8a:	74 0c                	je     ffffffff8020ea98 <_RME_Cpt_Frz+0xef>
ffffffff8020ea8c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ea93:	e9 4b 02 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
ffffffff8020ea98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ea9c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020eaa0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eaa4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eaa7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020eaab:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020eaaf:	48 01 d0             	add    %rdx,%rax
ffffffff8020eab2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020eab6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eaba:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eabd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020eac1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eac5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eac9:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eacc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ead0:	0f 94 c0             	sete   %al
ffffffff8020ead3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ead6:	48 85 c0             	test   %rax,%rax
ffffffff8020ead9:	74 0c                	je     ffffffff8020eae7 <_RME_Cpt_Frz+0x13e>
ffffffff8020eadb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020eae2:	e9 fc 01 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
ffffffff8020eae7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eaeb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eaef:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eaf3:	0f 95 c0             	setne  %al
ffffffff8020eaf6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eaf9:	48 85 c0             	test   %rax,%rax
ffffffff8020eafc:	74 0c                	je     ffffffff8020eb0a <_RME_Cpt_Frz+0x161>
ffffffff8020eafe:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eb05:	e9 d9 01 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
ffffffff8020eb0a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eb0e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020eb13:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eb16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb1a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020eb1e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020eb21:	0f 93 c0             	setae  %al
ffffffff8020eb24:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb27:	48 85 c0             	test   %rax,%rax
ffffffff8020eb2a:	74 0c                	je     ffffffff8020eb38 <_RME_Cpt_Frz+0x18f>
ffffffff8020eb2c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020eb33:	e9 ab 01 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
ffffffff8020eb38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eb3c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020eb41:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eb45:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eb48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb4c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020eb50:	48 01 d0             	add    %rdx,%rax
ffffffff8020eb53:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020eb57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb5b:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eb5e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020eb62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eb66:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eb6a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eb6d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eb71:	0f 94 c0             	sete   %al
ffffffff8020eb74:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb77:	48 85 c0             	test   %rax,%rax
ffffffff8020eb7a:	74 0c                	je     ffffffff8020eb88 <_RME_Cpt_Frz+0x1df>
ffffffff8020eb7c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020eb83:	e9 5b 01 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
ffffffff8020eb88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eb8c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eb90:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eb94:	0f 95 c0             	setne  %al
ffffffff8020eb97:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb9a:	48 85 c0             	test   %rax,%rax
ffffffff8020eb9d:	74 0c                	je     ffffffff8020ebab <_RME_Cpt_Frz+0x202>
ffffffff8020eb9f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eba6:	e9 38 01 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_FRZ);
ffffffff8020ebab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ebaf:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020ebb3:	83 e0 04             	and    $0x4,%eax
ffffffff8020ebb6:	48 85 c0             	test   %rax,%rax
ffffffff8020ebb9:	0f 94 c0             	sete   %al
ffffffff8020ebbc:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ebbf:	48 85 c0             	test   %rax,%rax
ffffffff8020ebc2:	74 0c                	je     ffffffff8020ebd0 <_RME_Cpt_Frz+0x227>
ffffffff8020ebc4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020ebcb:	e9 13 01 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Frz,struct RME_Cap_Struct*,Capobj_Frz);
ffffffff8020ebd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ebd4:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020ebd8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020ebdc:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ebdf:	0f 96 c0             	setbe  %al
ffffffff8020ebe2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ebe5:	48 85 c0             	test   %rax,%rax
ffffffff8020ebe8:	74 0c                	je     ffffffff8020ebf6 <_RME_Cpt_Frz+0x24d>
ffffffff8020ebea:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ebf1:	e9 ed 00 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
ffffffff8020ebf6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020ebfa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ebfe:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ec01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ec05:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ec09:	48 01 d0             	add    %rdx,%rax
ffffffff8020ec0c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* Check if anything is there. If nothing there, the Type_Stat must be 0. 
     * Need a read acquire barrier here to avoid stale reads below. */
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Frz->Head.Type_Stat));
ffffffff8020ec10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec14:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ec17:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* See if there is a cap */
    if(RME_CAP_TYPE(Type_Stat)==RME_CAP_TYPE_NOP)
ffffffff8020ec1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ec1f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ec23:	48 85 c0             	test   %rax,%rax
ffffffff8020ec26:	75 0c                	jne    ffffffff8020ec34 <_RME_Cpt_Frz+0x28b>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_NULL;
ffffffff8020ec28:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020ec2f:	e9 af 00 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* If this is a root capability, check if the reference count allows freezing */
    if(RME_CAP_ATTR(Type_Stat)==RME_CAP_ATTR_ROOT)
ffffffff8020ec34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ec38:	89 c0                	mov    %eax,%eax
ffffffff8020ec3a:	48 85 c0             	test   %rax,%rax
ffffffff8020ec3d:	75 19                	jne    ffffffff8020ec58 <_RME_Cpt_Frz+0x2af>
    {
        if(Capobj_Frz->Head.Root_Ref!=0U)
ffffffff8020ec3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec43:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020ec47:	48 85 c0             	test   %rax,%rax
ffffffff8020ec4a:	74 0c                	je     ffffffff8020ec58 <_RME_Cpt_Frz+0x2af>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_REFCNT;
ffffffff8020ec4c:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8020ec53:	e9 8b 00 00 00       	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* The capability is already frozen - why do it again? */
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020ec58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ec5c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ec60:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ec63:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ec67:	75 09                	jne    ffffffff8020ec72 <_RME_Cpt_Frz+0x2c9>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_FROZEN;
ffffffff8020ec69:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ec70:	eb 71                	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the slot is quiescent */
    if(RME_UNLIKELY(RME_CAP_QUIE(Capobj_Frz->Head.Timestamp)==0U))
ffffffff8020ec72:	48 8b 15 87 c3 01 00 	mov    0x1c387(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8020ec79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec7d:	48 8b 48 20          	mov    0x20(%rax),%rcx
ffffffff8020ec81:	48 89 d0             	mov    %rdx,%rax
ffffffff8020ec84:	48 29 c8             	sub    %rcx,%rax
ffffffff8020ec87:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff8020ec8b:	0f 96 c0             	setbe  %al
ffffffff8020ec8e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ec91:	48 98                	cltq   
ffffffff8020ec93:	48 85 c0             	test   %rax,%rax
ffffffff8020ec96:	74 09                	je     ffffffff8020eca1 <_RME_Cpt_Frz+0x2f8>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_QUIE;
ffffffff8020ec98:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020ec9f:	eb 42                	jmp    ffffffff8020ece3 <_RME_Cpt_Frz+0x33a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Update the timestamp */
    Capobj_Frz->Head.Timestamp=RME_TIMESTAMP();
ffffffff8020eca1:	48 8b 15 58 c3 01 00 	mov    0x1c358(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8020eca8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ecac:	48 89 50 20          	mov    %rdx,0x20(%rax)
    
    /* Finally, freeze it. We do not report error here because if we CASFAIL someone must have helped us */
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
ffffffff8020ecb0:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020ecb7:	00 ff ff 
ffffffff8020ecba:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8020ecbe:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff8020ecc5:	00 00 00 
ffffffff8020ecc8:	48 09 c2             	or     %rax,%rdx
ffffffff8020eccb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020eccf:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020ecd3:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020ecd6:	48 89 c7             	mov    %rax,%rdi
ffffffff8020ecd9:	e8 80 da ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
                  RME_CAP_TYPE_STAT(RME_CAP_TYPE(Type_Stat),
                                    RME_CAP_STAT_FROZEN,
                                    RME_CAP_ATTR(Type_Stat)));

    return 0;
ffffffff8020ecde:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020ece3:	c9                   	leave  
ffffffff8020ece4:	c3                   	ret    

ffffffff8020ece5 <_RME_Cpt_Add>:
                              rme_cid_t Cap_Dst, 
                              rme_cid_t Cap_Cpt_Src,
                              rme_cid_t Cap_Src,
                              rme_ptr_t Flag,
                              rme_ptr_t Ext_Flag)
{
ffffffff8020ece5:	f3 0f 1e fa          	endbr64 
ffffffff8020ece9:	55                   	push   %rbp
ffffffff8020ecea:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020eced:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff8020ecf1:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff8020ecf5:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff8020ecf9:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff8020ecfd:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff8020ed01:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff8020ed05:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Kom_Begin;
    rme_ptr_t Kom_End;
    rme_ptr_t Kom_Flag;

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020ed09:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ed0d:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020ed12:	48 85 c0             	test   %rax,%rax
ffffffff8020ed15:	0f 85 98 00 00 00    	jne    ffffffff8020edb3 <_RME_Cpt_Add+0xce>
ffffffff8020ed1b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ed1f:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020ed23:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ed27:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ed2a:	0f 96 c0             	setbe  %al
ffffffff8020ed2d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed30:	48 85 c0             	test   %rax,%rax
ffffffff8020ed33:	74 0c                	je     ffffffff8020ed41 <_RME_Cpt_Add+0x5c>
ffffffff8020ed35:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ed3c:	e9 db 08 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020ed41:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ed45:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ed49:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ed4c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ed50:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ed54:	48 01 d0             	add    %rdx,%rax
ffffffff8020ed57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ed5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ed5f:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ed62:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ed66:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ed6a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ed6e:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ed71:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ed75:	0f 94 c0             	sete   %al
ffffffff8020ed78:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed7b:	48 85 c0             	test   %rax,%rax
ffffffff8020ed7e:	74 0c                	je     ffffffff8020ed8c <_RME_Cpt_Add+0xa7>
ffffffff8020ed80:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ed87:	e9 90 08 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020ed8c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ed90:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ed94:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ed98:	0f 95 c0             	setne  %al
ffffffff8020ed9b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed9e:	48 85 c0             	test   %rax,%rax
ffffffff8020eda1:	0f 84 4c 01 00 00    	je     ffffffff8020eef3 <_RME_Cpt_Add+0x20e>
ffffffff8020eda7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020edae:	e9 69 08 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020edb3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020edb7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020edbb:	48 89 c2             	mov    %rax,%rdx
ffffffff8020edbe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020edc2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020edc6:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020edc9:	0f 93 c0             	setae  %al
ffffffff8020edcc:	0f b6 c0             	movzbl %al,%eax
ffffffff8020edcf:	48 85 c0             	test   %rax,%rax
ffffffff8020edd2:	74 0c                	je     ffffffff8020ede0 <_RME_Cpt_Add+0xfb>
ffffffff8020edd4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020eddb:	e9 3c 08 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020ede0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ede4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ede8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020edec:	48 89 c2             	mov    %rax,%rdx
ffffffff8020edef:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020edf3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020edf7:	48 01 d0             	add    %rdx,%rax
ffffffff8020edfa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020edfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ee02:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ee05:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ee09:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ee0d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ee11:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ee14:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ee18:	0f 94 c0             	sete   %al
ffffffff8020ee1b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee1e:	48 85 c0             	test   %rax,%rax
ffffffff8020ee21:	74 0c                	je     ffffffff8020ee2f <_RME_Cpt_Add+0x14a>
ffffffff8020ee23:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ee2a:	e9 ed 07 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020ee2f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ee33:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ee37:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ee3b:	0f 95 c0             	setne  %al
ffffffff8020ee3e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee41:	48 85 c0             	test   %rax,%rax
ffffffff8020ee44:	74 0c                	je     ffffffff8020ee52 <_RME_Cpt_Add+0x16d>
ffffffff8020ee46:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ee4d:	e9 ca 07 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020ee52:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ee56:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ee5b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ee5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ee62:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ee66:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ee69:	0f 93 c0             	setae  %al
ffffffff8020ee6c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee6f:	48 85 c0             	test   %rax,%rax
ffffffff8020ee72:	74 0c                	je     ffffffff8020ee80 <_RME_Cpt_Add+0x19b>
ffffffff8020ee74:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ee7b:	e9 9c 07 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020ee80:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ee84:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ee89:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ee8d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ee90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ee94:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ee98:	48 01 d0             	add    %rdx,%rax
ffffffff8020ee9b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ee9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eea3:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eea6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020eeaa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eeae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eeb2:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eeb5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eeb9:	0f 94 c0             	sete   %al
ffffffff8020eebc:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eebf:	48 85 c0             	test   %rax,%rax
ffffffff8020eec2:	74 0c                	je     ffffffff8020eed0 <_RME_Cpt_Add+0x1eb>
ffffffff8020eec4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020eecb:	e9 4c 07 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020eed0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eed4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eed8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eedc:	0f 95 c0             	setne  %al
ffffffff8020eedf:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eee2:	48 85 c0             	test   %rax,%rax
ffffffff8020eee5:	74 0c                	je     ffffffff8020eef3 <_RME_Cpt_Add+0x20e>
ffffffff8020eee7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eeee:	e9 29 07 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
                   struct RME_Cap_Cpt*,Cpt_Dst,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020eef3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020eef7:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020eefc:	48 85 c0             	test   %rax,%rax
ffffffff8020eeff:	0f 85 98 00 00 00    	jne    ffffffff8020ef9d <_RME_Cpt_Add+0x2b8>
ffffffff8020ef05:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ef09:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020ef0d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020ef11:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ef14:	0f 96 c0             	setbe  %al
ffffffff8020ef17:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef1a:	48 85 c0             	test   %rax,%rax
ffffffff8020ef1d:	74 0c                	je     ffffffff8020ef2b <_RME_Cpt_Add+0x246>
ffffffff8020ef1f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ef26:	e9 f1 06 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020ef2b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020ef2f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ef33:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ef36:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ef3a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ef3e:	48 01 d0             	add    %rdx,%rax
ffffffff8020ef41:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ef45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ef49:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ef4c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ef50:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ef54:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ef58:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ef5b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ef5f:	0f 94 c0             	sete   %al
ffffffff8020ef62:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef65:	48 85 c0             	test   %rax,%rax
ffffffff8020ef68:	74 0c                	je     ffffffff8020ef76 <_RME_Cpt_Add+0x291>
ffffffff8020ef6a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ef71:	e9 a6 06 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020ef76:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ef7a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ef7e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ef82:	0f 95 c0             	setne  %al
ffffffff8020ef85:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef88:	48 85 c0             	test   %rax,%rax
ffffffff8020ef8b:	0f 84 4c 01 00 00    	je     ffffffff8020f0dd <_RME_Cpt_Add+0x3f8>
ffffffff8020ef91:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ef98:	e9 7f 06 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020ef9d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020efa1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020efa5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020efa8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020efac:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020efb0:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020efb3:	0f 93 c0             	setae  %al
ffffffff8020efb6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020efb9:	48 85 c0             	test   %rax,%rax
ffffffff8020efbc:	74 0c                	je     ffffffff8020efca <_RME_Cpt_Add+0x2e5>
ffffffff8020efbe:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020efc5:	e9 52 06 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020efca:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020efce:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020efd2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020efd6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020efd9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020efdd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020efe1:	48 01 d0             	add    %rdx,%rax
ffffffff8020efe4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020efe8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020efec:	48 8b 00             	mov    (%rax),%rax
ffffffff8020efef:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020eff3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eff7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020effb:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020effe:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f002:	0f 94 c0             	sete   %al
ffffffff8020f005:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f008:	48 85 c0             	test   %rax,%rax
ffffffff8020f00b:	74 0c                	je     ffffffff8020f019 <_RME_Cpt_Add+0x334>
ffffffff8020f00d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f014:	e9 03 06 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020f019:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f01d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f021:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f025:	0f 95 c0             	setne  %al
ffffffff8020f028:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f02b:	48 85 c0             	test   %rax,%rax
ffffffff8020f02e:	74 0c                	je     ffffffff8020f03c <_RME_Cpt_Add+0x357>
ffffffff8020f030:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f037:	e9 e0 05 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020f03c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020f040:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f045:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f048:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f04c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f050:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f053:	0f 93 c0             	setae  %al
ffffffff8020f056:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f059:	48 85 c0             	test   %rax,%rax
ffffffff8020f05c:	74 0c                	je     ffffffff8020f06a <_RME_Cpt_Add+0x385>
ffffffff8020f05e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f065:	e9 b2 05 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020f06a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020f06e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f073:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f077:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f07a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f07e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f082:	48 01 d0             	add    %rdx,%rax
ffffffff8020f085:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f089:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f08d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f090:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020f094:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f098:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f09c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f09f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f0a3:	0f 94 c0             	sete   %al
ffffffff8020f0a6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f0a9:	48 85 c0             	test   %rax,%rax
ffffffff8020f0ac:	74 0c                	je     ffffffff8020f0ba <_RME_Cpt_Add+0x3d5>
ffffffff8020f0ae:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f0b5:	e9 62 05 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020f0ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f0be:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f0c2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f0c6:	0f 95 c0             	setne  %al
ffffffff8020f0c9:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f0cc:	48 85 c0             	test   %rax,%rax
ffffffff8020f0cf:	74 0c                	je     ffffffff8020f0dd <_RME_Cpt_Add+0x3f8>
ffffffff8020f0d1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f0d8:	e9 3f 05 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
                   struct RME_Cap_Cpt*,Cpt_Src,Type_Stat);
    /* Check if both captbls are not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020f0dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f0e1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f0e5:	83 e0 10             	and    $0x10,%eax
ffffffff8020f0e8:	48 85 c0             	test   %rax,%rax
ffffffff8020f0eb:	0f 94 c0             	sete   %al
ffffffff8020f0ee:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f0f1:	48 85 c0             	test   %rax,%rax
ffffffff8020f0f4:	74 0c                	je     ffffffff8020f102 <_RME_Cpt_Add+0x41d>
ffffffff8020f0f6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f0fd:	e9 1a 05 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
    RME_CAP_CHECK(Cpt_Src,RME_CPT_FLAG_ADD_SRC);
ffffffff8020f102:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f106:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f10a:	83 e0 08             	and    $0x8,%eax
ffffffff8020f10d:	48 85 c0             	test   %rax,%rax
ffffffff8020f110:	0f 94 c0             	sete   %al
ffffffff8020f113:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f116:	48 85 c0             	test   %rax,%rax
ffffffff8020f119:	74 0c                	je     ffffffff8020f127 <_RME_Cpt_Add+0x442>
ffffffff8020f11b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f122:	e9 f5 04 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
    
    /* Get the cap slots */
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff8020f127:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f12b:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f12f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8020f133:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f136:	0f 96 c0             	setbe  %al
ffffffff8020f139:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f13c:	48 85 c0             	test   %rax,%rax
ffffffff8020f13f:	74 0c                	je     ffffffff8020f14d <_RME_Cpt_Add+0x468>
ffffffff8020f141:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f148:	e9 cf 04 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020f14d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8020f151:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f155:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f158:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f15c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f160:	48 01 d0             	add    %rdx,%rax
ffffffff8020f163:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020f167:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f16b:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f16f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8020f173:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f176:	0f 96 c0             	setbe  %al
ffffffff8020f179:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f17c:	48 85 c0             	test   %rax,%rax
ffffffff8020f17f:	74 0c                	je     ffffffff8020f18d <_RME_Cpt_Add+0x4a8>
ffffffff8020f181:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f188:	e9 8f 04 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020f18d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8020f191:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f195:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f198:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f19c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f1a0:	48 01 d0             	add    %rdx,%rax
ffffffff8020f1a3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    
    /* Atomic read - Read barrier to avoid premature checking of the rest */
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Src->Head.Type_Stat));
ffffffff8020f1a7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f1ab:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f1ae:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Is the source cap frozen? */
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020f1b2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f1b6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f1ba:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f1bd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f1c1:	75 0c                	jne    ffffffff8020f1cf <_RME_Cpt_Add+0x4ea>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_FROZEN;
ffffffff8020f1c3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f1ca:	e9 4d 04 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Does the source cap exist at all? */
    if(Type_Stat==0U)
ffffffff8020f1cf:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff8020f1d4:	75 0c                	jne    ffffffff8020f1e2 <_RME_Cpt_Add+0x4fd>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_NULL;
ffffffff8020f1d6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f1dd:	e9 3a 04 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Dewarn some compilers that complain about uninitialized variables */
    Kom_Begin=0U;
ffffffff8020f1e2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8020f1e9:	00 
    Kom_End=0U;
ffffffff8020f1ea:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8020f1f1:	00 
    Kom_Flag=0U;
ffffffff8020f1f2:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8020f1f9:	00 
    
    /* Is there a flag conflict? - For page tables, we have different checking mechanisms */
    Src_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020f1fa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f1fe:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f202:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    if(Src_Type==RME_CAP_TYPE_PGT)
ffffffff8020f206:	48 83 7d b8 04       	cmpq   $0x4,-0x48(%rbp)
ffffffff8020f20b:	0f 85 c5 00 00 00    	jne    ffffffff8020f2d6 <_RME_Cpt_Add+0x5f1>
    {
        RME_COV_MARKER();
        
        /* Check the delegation range */
        if(RME_PGT_FLAG_HIGH(Flag)>RME_PGT_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020f211:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f215:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f219:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f21c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f220:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f224:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f228:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f22b:	76 0c                	jbe    ffffffff8020f239 <_RME_Cpt_Add+0x554>
        {
            RME_COV_MARKER();
        
            return RME_ERR_CPT_FLAG;
ffffffff8020f22d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f234:	e9 e3 03 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_PGT_FLAG_LOW(Flag)<RME_PGT_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020f239:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f23d:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f241:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f246:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f249:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f24d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f251:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f255:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f25a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f25d:	73 0c                	jae    ffffffff8020f26b <_RME_Cpt_Add+0x586>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f25f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f266:	e9 b1 03 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_PGT_FLAG_HIGH(Flag)<RME_PGT_FLAG_LOW(Flag))
ffffffff8020f26b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f26f:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f273:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f276:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f27a:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f27e:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f283:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f286:	73 0c                	jae    ffffffff8020f294 <_RME_Cpt_Add+0x5af>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f288:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f28f:	e9 88 03 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the flags - if there are extra ones, or all zero */
        if(RME_PGT_FLAG_FLAG(Flag)==0U)
ffffffff8020f294:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f298:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f29b:	48 85 c0             	test   %rax,%rax
ffffffff8020f29e:	75 0c                	jne    ffffffff8020f2ac <_RME_Cpt_Add+0x5c7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f2a0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f2a7:	e9 70 03 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if((RME_PGT_FLAG_FLAG(Flag)&(~RME_PGT_FLAG_FLAG(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f2ac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f2b0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f2b4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f2b7:	48 f7 d0             	not    %rax
ffffffff8020f2ba:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f2be:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f2c1:	48 85 c0             	test   %rax,%rax
ffffffff8020f2c4:	0f 84 c5 01 00 00    	je     ffffffff8020f48f <_RME_Cpt_Add+0x7aa>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f2ca:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f2d1:	e9 46 03 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
    }
    else if(Src_Type==RME_CAP_TYPE_KFN)
ffffffff8020f2d6:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
ffffffff8020f2db:	75 6c                	jne    ffffffff8020f349 <_RME_Cpt_Add+0x664>
    {
        RME_COV_MARKER();
        
        /* Kernel funcrions only have ranges, no flags - check the delegation range */
        if(RME_KFN_FLAG_HIGH(Flag)>RME_KFN_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020f2dd:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f2e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f2e5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f2e8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f2ec:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f2f0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f2f4:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f2f7:	76 0c                	jbe    ffffffff8020f305 <_RME_Cpt_Add+0x620>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f2f9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f300:	e9 17 03 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_KFN_FLAG_LOW(Flag)<RME_KFN_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020f305:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f309:	89 c2                	mov    %eax,%edx
ffffffff8020f30b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f30f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f313:	89 c0                	mov    %eax,%eax
ffffffff8020f315:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f318:	73 0c                	jae    ffffffff8020f326 <_RME_Cpt_Add+0x641>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f31a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f321:	e9 f6 02 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_KFN_FLAG_HIGH(Flag)<RME_KFN_FLAG_LOW(Flag))
ffffffff8020f326:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f32a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f32e:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff8020f332:	89 d2                	mov    %edx,%edx
ffffffff8020f334:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f337:	0f 83 52 01 00 00    	jae    ffffffff8020f48f <_RME_Cpt_Add+0x7aa>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f33d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f344:	e9 d3 02 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
    }
    else if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020f349:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f34e:	0f 85 08 01 00 00    	jne    ffffffff8020f45c <_RME_Cpt_Add+0x777>
    {
        RME_COV_MARKER();
        
        /* The Kom_End here is exclusive */
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020f354:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f358:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020f35c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020f360:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
ffffffff8020f367:	ff ff ff 
ffffffff8020f36a:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f36e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f371:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8020f375:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f379:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff8020f37d:	48 09 d0             	or     %rdx,%rax
ffffffff8020f380:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        Kom_Flag=RME_KOM_FLAG_KOM(Ext_Flag);
ffffffff8020f384:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8020f38b:	00 
        /* Round start and end to the slot boundary, if we are using slots bigger than 64 bytes */
#if(RME_KOM_SLOT_ORDER>6U)
        Kom_End=RME_ROUND_DOWN(Kom_End,RME_KOM_SLOT_ORDER);
        Kom_Begin=RME_ROUND_UP(Kom_Begin,RME_KOM_SLOT_ORDER);
#endif
        if(Kom_End<=Kom_Begin)
ffffffff8020f38c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f390:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020f394:	77 0c                	ja     ffffffff8020f3a2 <_RME_Cpt_Add+0x6bd>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f396:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f39d:	e9 7a 02 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Convert relative addresses to absolute addresses and check for overflow */
        Kom_Begin+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020f3a2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3a6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3aa:	48 01 45 e8          	add    %rax,-0x18(%rbp)
        if(Kom_Begin<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020f3ae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3b2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3b6:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f3ba:	73 0c                	jae    ffffffff8020f3c8 <_RME_Cpt_Add+0x6e3>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3bc:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3c3:	e9 54 02 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020f3c8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3cc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3d0:	48 01 45 e0          	add    %rax,-0x20(%rbp)
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020f3d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3d8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3dc:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8020f3e0:	73 0c                	jae    ffffffff8020f3ee <_RME_Cpt_Add+0x709>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3e2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3e9:	e9 2e 02 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Check the ranges of kernel memory */
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020f3ee:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3f2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3f6:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f3fa:	73 0c                	jae    ffffffff8020f408 <_RME_Cpt_Add+0x723>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3fc:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f403:	e9 14 02 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Internal encoding of 'end' is inclusive */
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->End<(Kom_End-1U))
ffffffff8020f408:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f40c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020f410:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020f414:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8020f418:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f41b:	73 0c                	jae    ffffffff8020f429 <_RME_Cpt_Add+0x744>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f41d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f424:	e9 f3 01 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the flags - if there are extra ones, or all zero */
        if(Kom_Flag==0U)
ffffffff8020f429:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020f42e:	75 0c                	jne    ffffffff8020f43c <_RME_Cpt_Add+0x757>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f430:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f437:	e9 e0 01 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if((Kom_Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f43c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f440:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f444:	48 f7 d0             	not    %rax
ffffffff8020f447:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff8020f44b:	48 85 c0             	test   %rax,%rax
ffffffff8020f44e:	74 3f                	je     ffffffff8020f48f <_RME_Cpt_Add+0x7aa>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f450:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f457:	e9 c0 01 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
    else
    {
        RME_COV_MARKER();
        
        /* Check the flags - if there are extra ones, or all zero */
        if(Flag==0U)
ffffffff8020f45c:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
ffffffff8020f461:	75 0c                	jne    ffffffff8020f46f <_RME_Cpt_Add+0x78a>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f463:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f46a:	e9 ad 01 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        else
        {
            RME_COV_MARKER();
            /* No action required */
        }
        if((Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f46f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f473:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f477:	48 f7 d0             	not    %rax
ffffffff8020f47a:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f47e:	48 85 c0             	test   %rax,%rax
ffffffff8020f481:	74 0c                	je     ffffffff8020f48f <_RME_Cpt_Add+0x7aa>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f483:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f48a:	e9 8d 01 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
            /* No action required */
        }
    }
    
    /* Is the destination slot unoccupied? */
    if(Capobj_Dst->Head.Type_Stat!=0U)
ffffffff8020f48f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f493:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f496:	48 85 c0             	test   %rax,%rax
ffffffff8020f499:	74 0c                	je     ffffffff8020f4a7 <_RME_Cpt_Add+0x7c2>
    {
        RME_COV_MARKER();
            
        return RME_ERR_CPT_EXIST;
ffffffff8020f49b:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f4a2:	e9 75 01 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Try to take the empty slot */
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff8020f4a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4ab:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f4b2:	00 00 00 
ffffffff8020f4b5:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020f4ba:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f4bd:	e8 9c d2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f4c2:	48 85 c0             	test   %rax,%rax
ffffffff8020f4c5:	0f 94 c0             	sete   %al
ffffffff8020f4c8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f4cb:	48 85 c0             	test   %rax,%rax
ffffffff8020f4ce:	74 0c                	je     ffffffff8020f4dc <_RME_Cpt_Add+0x7f7>
ffffffff8020f4d0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f4d7:	e9 40 01 00 00       	jmp    ffffffff8020f61c <_RME_Cpt_Add+0x937>
ffffffff8020f4dc:	48 8b 15 1d bb 01 00 	mov    0x1bb1d(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8020f4e3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4e7:	48 89 50 20          	mov    %rdx,0x20(%rax)
    
    /* All done, we replicate the cap with flags */
    if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020f4eb:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f4f0:	75 6a                	jne    ffffffff8020f55c <_RME_Cpt_Add+0x877>
    {
        RME_COV_MARKER();
            
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Kom_Flag);
ffffffff8020f4f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4f6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020f4fa:	48 89 50 10          	mov    %rdx,0x10(%rax)
ffffffff8020f4fe:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f502:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8020f506:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f50a:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff8020f50e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f512:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f516:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f51a:	48 89 50 28          	mov    %rdx,0x28(%rax)
ffffffff8020f51e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f522:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f526:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f52a:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f52e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f532:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff8020f536:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f53a:	48 89 50 38          	mov    %rdx,0x38(%rax)
        /* Write absolute range information for kernel memory caps */
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->Begin=Kom_Begin;
ffffffff8020f53e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f542:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020f546:	48 89 50 28          	mov    %rdx,0x28(%rax)
        /* The Kom_End encoded inclusively to avoid overflow at max address */
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->End=Kom_End-1U;
ffffffff8020f54a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f54e:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8020f552:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f556:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f55a:	eb 4c                	jmp    ffffffff8020f5a8 <_RME_Cpt_Add+0x8c3>
    }
    else
    {
        RME_COV_MARKER();
        
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
ffffffff8020f55c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f560:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff8020f564:	48 89 50 10          	mov    %rdx,0x10(%rax)
ffffffff8020f568:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f56c:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8020f570:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f574:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff8020f578:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f57c:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f580:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f584:	48 89 50 28          	mov    %rdx,0x28(%rax)
ffffffff8020f588:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f58c:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f590:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f594:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f598:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f59c:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff8020f5a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f5a4:	48 89 50 38          	mov    %rdx,0x38(%rax)
     * their parent, nor will they update the parent's reference count. This
     * design decision comes from the fact that these two capability types are
     * always created on boot and delegated everywhere, and they don't actually
     * have an object. If we use refcnt on these, we may cause scalability 
     * issues. The parent cap can't be deleted anyway, so this is fine. */
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020f5a8:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f5ad:	74 46                	je     ffffffff8020f5f5 <_RME_Cpt_Add+0x910>
ffffffff8020f5af:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
ffffffff8020f5b4:	74 3f                	je     ffffffff8020f5f5 <_RME_Cpt_Add+0x910>
    {
        RME_COV_MARKER();
        
        /* Register root */
        Capobj_Dst->Head.Root_Ref=RME_CAP_CONV_ROOT(Capobj_Src,rme_ptr_t);
ffffffff8020f5b6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f5ba:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f5bd:	89 c0                	mov    %eax,%eax
ffffffff8020f5bf:	48 85 c0             	test   %rax,%rax
ffffffff8020f5c2:	74 0a                	je     ffffffff8020f5ce <_RME_Cpt_Add+0x8e9>
ffffffff8020f5c4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f5c8:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f5cc:	eb 04                	jmp    ffffffff8020f5d2 <_RME_Cpt_Add+0x8ed>
ffffffff8020f5ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f5d2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020f5d6:	48 89 42 08          	mov    %rax,0x8(%rdx)
    
        /* Increase the parent's refcnt - never overflows, guaranteed by field size */
        RME_FETCH_ADD(&(((volatile struct RME_Cap_Struct*)
ffffffff8020f5da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f5de:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f5e2:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020f5e6:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8020f5eb:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f5ee:	e8 a0 d1 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff8020f5f3:	eb 0c                	jmp    ffffffff8020f601 <_RME_Cpt_Add+0x91c>
    else
    {
        RME_COV_MARKER();
        
        /* No root for KOM and KFN */
        Capobj_Dst->Head.Root_Ref=0U;
ffffffff8020f5f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f5f9:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020f600:	00 
    }

    /* Establish cap */
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff8020f601:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020f605:	48 c1 e0 30          	shl    $0x30,%rax
ffffffff8020f609:	48 83 c8 01          	or     $0x1,%rax
ffffffff8020f60d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f610:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f614:	48 89 10             	mov    %rdx,(%rax)
                      RME_CAP_TYPE_STAT(Src_Type,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_LEAF));

    return 0;
ffffffff8020f617:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020f61c:	c9                   	leave  
ffffffff8020f61d:	c3                   	ret    

ffffffff8020f61e <_RME_Cpt_Rem>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Rem(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Rem,
                              rme_cid_t Cap_Rem)
{
ffffffff8020f61e:	f3 0f 1e fa          	endbr64 
ffffffff8020f622:	55                   	push   %rbp
ffffffff8020f623:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020f626:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff8020f62a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8020f62e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8020f632:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    rme_ptr_t Rem_Type;
    /* This is used for removal */
    volatile struct RME_Cap_Struct* Capobj_Root;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff8020f636:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f63a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020f63f:	48 85 c0             	test   %rax,%rax
ffffffff8020f642:	0f 85 98 00 00 00    	jne    ffffffff8020f6e0 <_RME_Cpt_Rem+0xc2>
ffffffff8020f648:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f64c:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f650:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f654:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f657:	0f 96 c0             	setbe  %al
ffffffff8020f65a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f65d:	48 85 c0             	test   %rax,%rax
ffffffff8020f660:	74 0c                	je     ffffffff8020f66e <_RME_Cpt_Rem+0x50>
ffffffff8020f662:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f669:	e9 3c 03 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
ffffffff8020f66e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f672:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f676:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f679:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f67d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f681:	48 01 d0             	add    %rdx,%rax
ffffffff8020f684:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f68c:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f68f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f693:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f697:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f69b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f69e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f6a2:	0f 94 c0             	sete   %al
ffffffff8020f6a5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f6a8:	48 85 c0             	test   %rax,%rax
ffffffff8020f6ab:	74 0c                	je     ffffffff8020f6b9 <_RME_Cpt_Rem+0x9b>
ffffffff8020f6ad:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f6b4:	e9 f1 02 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
ffffffff8020f6b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f6bd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f6c1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f6c5:	0f 95 c0             	setne  %al
ffffffff8020f6c8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f6cb:	48 85 c0             	test   %rax,%rax
ffffffff8020f6ce:	0f 84 4c 01 00 00    	je     ffffffff8020f820 <_RME_Cpt_Rem+0x202>
ffffffff8020f6d4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f6db:	e9 ca 02 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
ffffffff8020f6e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f6e4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f6e8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f6eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f6ef:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f6f3:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f6f6:	0f 93 c0             	setae  %al
ffffffff8020f6f9:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f6fc:	48 85 c0             	test   %rax,%rax
ffffffff8020f6ff:	74 0c                	je     ffffffff8020f70d <_RME_Cpt_Rem+0xef>
ffffffff8020f701:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f708:	e9 9d 02 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
ffffffff8020f70d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f711:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f715:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f719:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f71c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f720:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f724:	48 01 d0             	add    %rdx,%rax
ffffffff8020f727:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f72b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f72f:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f732:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f736:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f73a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f73e:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f741:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f745:	0f 94 c0             	sete   %al
ffffffff8020f748:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f74b:	48 85 c0             	test   %rax,%rax
ffffffff8020f74e:	74 0c                	je     ffffffff8020f75c <_RME_Cpt_Rem+0x13e>
ffffffff8020f750:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f757:	e9 4e 02 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
ffffffff8020f75c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f760:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f764:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f768:	0f 95 c0             	setne  %al
ffffffff8020f76b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f76e:	48 85 c0             	test   %rax,%rax
ffffffff8020f771:	74 0c                	je     ffffffff8020f77f <_RME_Cpt_Rem+0x161>
ffffffff8020f773:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f77a:	e9 2b 02 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
ffffffff8020f77f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f783:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f788:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f78b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f78f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f793:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f796:	0f 93 c0             	setae  %al
ffffffff8020f799:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f79c:	48 85 c0             	test   %rax,%rax
ffffffff8020f79f:	74 0c                	je     ffffffff8020f7ad <_RME_Cpt_Rem+0x18f>
ffffffff8020f7a1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f7a8:	e9 fd 01 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
ffffffff8020f7ad:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f7b1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f7b6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f7ba:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f7bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f7c1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f7c5:	48 01 d0             	add    %rdx,%rax
ffffffff8020f7c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f7cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f7d0:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f7d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f7d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f7db:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f7df:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f7e2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f7e6:	0f 94 c0             	sete   %al
ffffffff8020f7e9:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f7ec:	48 85 c0             	test   %rax,%rax
ffffffff8020f7ef:	74 0c                	je     ffffffff8020f7fd <_RME_Cpt_Rem+0x1df>
ffffffff8020f7f1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f7f8:	e9 ad 01 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
ffffffff8020f7fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f801:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f805:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f809:	0f 95 c0             	setne  %al
ffffffff8020f80c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f80f:	48 85 c0             	test   %rax,%rax
ffffffff8020f812:	74 0c                	je     ffffffff8020f820 <_RME_Cpt_Rem+0x202>
ffffffff8020f814:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f81b:	e9 8a 01 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_REM);
ffffffff8020f820:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f824:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f828:	83 e0 20             	and    $0x20,%eax
ffffffff8020f82b:	48 85 c0             	test   %rax,%rax
ffffffff8020f82e:	0f 94 c0             	sete   %al
ffffffff8020f831:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f834:	48 85 c0             	test   %rax,%rax
ffffffff8020f837:	74 0c                	je     ffffffff8020f845 <_RME_Cpt_Rem+0x227>
ffffffff8020f839:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f840:	e9 65 01 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff8020f845:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f849:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f84d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020f851:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f854:	0f 96 c0             	setbe  %al
ffffffff8020f857:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f85a:	48 85 c0             	test   %rax,%rax
ffffffff8020f85d:	74 0c                	je     ffffffff8020f86b <_RME_Cpt_Rem+0x24d>
ffffffff8020f85f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f866:	e9 3f 01 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
ffffffff8020f86b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020f86f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f873:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f876:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f87a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f87e:	48 01 d0             	add    %rdx,%rax
ffffffff8020f881:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Removal check */
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff8020f885:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f889:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f88c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f890:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f894:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f898:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f89b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f89f:	0f 95 c0             	setne  %al
ffffffff8020f8a2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f8a5:	48 85 c0             	test   %rax,%rax
ffffffff8020f8a8:	74 0c                	je     ffffffff8020f8b6 <_RME_Cpt_Rem+0x298>
ffffffff8020f8aa:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f8b1:	e9 f4 00 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
ffffffff8020f8b6:	48 8b 15 43 b7 01 00 	mov    0x1b743(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8020f8bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f8c1:	48 8b 48 20          	mov    0x20(%rax),%rcx
ffffffff8020f8c5:	48 89 d0             	mov    %rdx,%rax
ffffffff8020f8c8:	48 29 c8             	sub    %rcx,%rax
ffffffff8020f8cb:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff8020f8cf:	0f 96 c0             	setbe  %al
ffffffff8020f8d2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f8d5:	48 98                	cltq   
ffffffff8020f8d7:	48 85 c0             	test   %rax,%rax
ffffffff8020f8da:	74 0c                	je     ffffffff8020f8e8 <_RME_Cpt_Rem+0x2ca>
ffffffff8020f8dc:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020f8e3:	e9 c2 00 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
ffffffff8020f8e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f8ec:	89 c0                	mov    %eax,%eax
ffffffff8020f8ee:	48 85 c0             	test   %rax,%rax
ffffffff8020f8f1:	0f 94 c0             	sete   %al
ffffffff8020f8f4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f8f7:	48 85 c0             	test   %rax,%rax
ffffffff8020f8fa:	74 0c                	je     ffffffff8020f908 <_RME_Cpt_Rem+0x2ea>
ffffffff8020f8fc:	48 c7 c0 f6 ff ff ff 	mov    $0xfffffffffffffff6,%rax
ffffffff8020f903:	e9 a2 00 00 00       	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
    
    /* If we are KFN or KOM, we don't care about parent or refcnt */
    Rem_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020f908:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f90c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f910:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if((Rem_Type!=RME_CAP_TYPE_KOM)&&(Rem_Type!=RME_CAP_TYPE_KFN))
ffffffff8020f914:	48 83 7d e0 02       	cmpq   $0x2,-0x20(%rbp)
ffffffff8020f919:	74 5b                	je     ffffffff8020f976 <_RME_Cpt_Rem+0x358>
ffffffff8020f91b:	48 83 7d e0 01       	cmpq   $0x1,-0x20(%rbp)
ffffffff8020f920:	74 54                	je     ffffffff8020f976 <_RME_Cpt_Rem+0x358>
    {
        RME_COV_MARKER();
        
        /* Remember this for refcnt operations */
        Capobj_Root=(struct RME_Cap_Struct*)(Capobj_Rem->Head.Root_Ref);
ffffffff8020f922:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f926:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f92a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8020f92e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f932:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020f936:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020f93b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020f93e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f941:	e8 18 ce ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f946:	48 85 c0             	test   %rax,%rax
ffffffff8020f949:	0f 94 c0             	sete   %al
ffffffff8020f94c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f94f:	48 85 c0             	test   %rax,%rax
ffffffff8020f952:	74 09                	je     ffffffff8020f95d <_RME_Cpt_Rem+0x33f>
ffffffff8020f954:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f95b:	eb 4d                	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>

        /* Check done, decrease its parent's refcnt. This must be done at last */
        RME_FETCH_ADD(&(Capobj_Root->Head.Root_Ref),-1);
ffffffff8020f95d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f961:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020f965:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8020f96c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f96f:	e8 1f ce ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff8020f974:	eb 2f                	jmp    ffffffff8020f9a5 <_RME_Cpt_Rem+0x387>
    else
    {
        RME_COV_MARKER();

        /* Helping also applies here */
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8020f976:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f97a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020f97e:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020f983:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020f986:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f989:	e8 d0 cd ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f98e:	48 85 c0             	test   %rax,%rax
ffffffff8020f991:	0f 94 c0             	sete   %al
ffffffff8020f994:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f997:	48 85 c0             	test   %rax,%rax
ffffffff8020f99a:	74 09                	je     ffffffff8020f9a5 <_RME_Cpt_Rem+0x387>
ffffffff8020f99c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f9a3:	eb 05                	jmp    ffffffff8020f9aa <_RME_Cpt_Rem+0x38c>
    }
    
    return 0;
ffffffff8020f9a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020f9aa:	c9                   	leave  
ffffffff8020f9ab:	c3                   	ret    

ffffffff8020f9ac <_RME_Pgt_Boot_Crt>:
                            rme_ptr_t Vaddr,
                            rme_ptr_t Base,
                            rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order,
                            rme_ptr_t Num_Order)
{
ffffffff8020f9ac:	f3 0f 1e fa          	endbr64 
ffffffff8020f9b0:	55                   	push   %rbp
ffffffff8020f9b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020f9b4:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020f9b8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020f9bc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020f9c0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020f9c4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020f9c8:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
ffffffff8020f9cc:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Table_Size;
    
    /* Check if the total representable memory exceeds our maximum possible
     * addressible memory under the machine word length */
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020f9d0:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020f9d4:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020f9d8:	48 01 d0             	add    %rdx,%rax
ffffffff8020f9db:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff8020f9df:	76 0c                	jbe    ffffffff8020f9ed <_RME_Pgt_Boot_Crt+0x41>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff8020f9e1:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020f9e8:	e9 e9 03 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f9ed:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f9f1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020f9f6:	48 85 c0             	test   %rax,%rax
ffffffff8020f9f9:	0f 85 98 00 00 00    	jne    ffffffff8020fa97 <_RME_Pgt_Boot_Crt+0xeb>
ffffffff8020f9ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fa03:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020fa07:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fa0b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fa0e:	0f 96 c0             	setbe  %al
ffffffff8020fa11:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa14:	48 85 c0             	test   %rax,%rax
ffffffff8020fa17:	74 0c                	je     ffffffff8020fa25 <_RME_Pgt_Boot_Crt+0x79>
ffffffff8020fa19:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fa20:	e9 b1 03 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fa25:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fa29:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fa2d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fa30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fa34:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fa38:	48 01 d0             	add    %rdx,%rax
ffffffff8020fa3b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fa3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fa43:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fa46:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fa4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fa4e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fa52:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fa55:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fa59:	0f 94 c0             	sete   %al
ffffffff8020fa5c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa5f:	48 85 c0             	test   %rax,%rax
ffffffff8020fa62:	74 0c                	je     ffffffff8020fa70 <_RME_Pgt_Boot_Crt+0xc4>
ffffffff8020fa64:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fa6b:	e9 66 03 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fa70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fa74:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fa78:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fa7c:	0f 95 c0             	setne  %al
ffffffff8020fa7f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa82:	48 85 c0             	test   %rax,%rax
ffffffff8020fa85:	0f 84 4c 01 00 00    	je     ffffffff8020fbd7 <_RME_Pgt_Boot_Crt+0x22b>
ffffffff8020fa8b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fa92:	e9 3f 03 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fa97:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fa9b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fa9f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020faa2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020faa6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020faaa:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020faad:	0f 93 c0             	setae  %al
ffffffff8020fab0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fab3:	48 85 c0             	test   %rax,%rax
ffffffff8020fab6:	74 0c                	je     ffffffff8020fac4 <_RME_Pgt_Boot_Crt+0x118>
ffffffff8020fab8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fabf:	e9 12 03 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fac4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fac8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020facc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fad0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fad3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fad7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fadb:	48 01 d0             	add    %rdx,%rax
ffffffff8020fade:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fae2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fae6:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fae9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020faed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020faf1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020faf5:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020faf8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fafc:	0f 94 c0             	sete   %al
ffffffff8020faff:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb02:	48 85 c0             	test   %rax,%rax
ffffffff8020fb05:	74 0c                	je     ffffffff8020fb13 <_RME_Pgt_Boot_Crt+0x167>
ffffffff8020fb07:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fb0e:	e9 c3 02 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fb13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fb17:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fb1b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fb1f:	0f 95 c0             	setne  %al
ffffffff8020fb22:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb25:	48 85 c0             	test   %rax,%rax
ffffffff8020fb28:	74 0c                	je     ffffffff8020fb36 <_RME_Pgt_Boot_Crt+0x18a>
ffffffff8020fb2a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fb31:	e9 a0 02 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fb36:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fb3a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fb3f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fb42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb46:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fb4a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fb4d:	0f 93 c0             	setae  %al
ffffffff8020fb50:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb53:	48 85 c0             	test   %rax,%rax
ffffffff8020fb56:	74 0c                	je     ffffffff8020fb64 <_RME_Pgt_Boot_Crt+0x1b8>
ffffffff8020fb58:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fb5f:	e9 72 02 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fb64:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fb68:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fb6d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fb71:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fb74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb78:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fb7c:	48 01 d0             	add    %rdx,%rax
ffffffff8020fb7f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fb83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb87:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fb8a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fb8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fb92:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fb96:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fb99:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fb9d:	0f 94 c0             	sete   %al
ffffffff8020fba0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fba3:	48 85 c0             	test   %rax,%rax
ffffffff8020fba6:	74 0c                	je     ffffffff8020fbb4 <_RME_Pgt_Boot_Crt+0x208>
ffffffff8020fba8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fbaf:	e9 22 02 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fbb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fbb8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fbbc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fbc0:	0f 95 c0             	setne  %al
ffffffff8020fbc3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fbc6:	48 85 c0             	test   %rax,%rax
ffffffff8020fbc9:	74 0c                	je     ffffffff8020fbd7 <_RME_Pgt_Boot_Crt+0x22b>
ffffffff8020fbcb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fbd2:	e9 ff 01 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fbd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fbdb:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020fbdf:	83 e0 01             	and    $0x1,%eax
ffffffff8020fbe2:	48 85 c0             	test   %rax,%rax
ffffffff8020fbe5:	0f 94 c0             	sete   %al
ffffffff8020fbe8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fbeb:	48 85 c0             	test   %rax,%rax
ffffffff8020fbee:	74 0c                	je     ffffffff8020fbfc <_RME_Pgt_Boot_Crt+0x250>
ffffffff8020fbf0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020fbf7:	e9 da 01 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
    
    /* Check if these parameters are feasible */
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)!=0)
ffffffff8020fbfc:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8020fc00:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff8020fc04:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
ffffffff8020fc08:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020fc0c:	49 89 c8             	mov    %rcx,%r8
ffffffff8020fc0f:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020fc12:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020fc16:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fc19:	e8 6d 6d 01 00       	call   ffffffff8022698b <__RME_Pgt_Check>
ffffffff8020fc1e:	48 85 c0             	test   %rax,%rax
ffffffff8020fc21:	74 0c                	je     ffffffff8020fc2f <_RME_Pgt_Boot_Crt+0x283>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff8020fc23:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020fc2a:	e9 a7 01 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if the base address is properly aligned to the total order of the page table */
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020fc2f:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8020fc33:	89 c2                	mov    %eax,%edx
ffffffff8020fc35:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fc39:	01 c2                	add    %eax,%edx
ffffffff8020fc3b:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff8020fc40:	29 d0                	sub    %edx,%eax
ffffffff8020fc42:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8020fc49:	89 c1                	mov    %eax,%ecx
ffffffff8020fc4b:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020fc4e:	48 89 d0             	mov    %rdx,%rax
ffffffff8020fc51:	48 23 45 b8          	and    -0x48(%rbp),%rax
ffffffff8020fc55:	48 85 c0             	test   %rax,%rax
ffffffff8020fc58:	74 0c                	je     ffffffff8020fc66 <_RME_Pgt_Boot_Crt+0x2ba>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_HW;
ffffffff8020fc5a:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020fc61:	e9 70 01 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020fc66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fc6a:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020fc6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020fc72:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fc75:	0f 96 c0             	setbe  %al
ffffffff8020fc78:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fc7b:	48 85 c0             	test   %rax,%rax
ffffffff8020fc7e:	74 0c                	je     ffffffff8020fc8c <_RME_Pgt_Boot_Crt+0x2e0>
ffffffff8020fc80:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fc87:	e9 4a 01 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fc8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020fc90:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fc94:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fc97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fc9b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fc9f:	48 01 d0             	add    %rdx,%rax
ffffffff8020fca2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020fca6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fcaa:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020fcb1:	00 00 00 
ffffffff8020fcb4:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020fcb9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fcbc:	e8 9d ca ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020fcc1:	48 85 c0             	test   %rax,%rax
ffffffff8020fcc4:	0f 94 c0             	sete   %al
ffffffff8020fcc7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fcca:	48 85 c0             	test   %rax,%rax
ffffffff8020fccd:	74 0c                	je     ffffffff8020fcdb <_RME_Pgt_Boot_Crt+0x32f>
ffffffff8020fccf:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020fcd6:	e9 fb 00 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fcdb:	48 8b 15 1e b3 01 00 	mov    0x1b31e(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8020fce2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fce6:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Are we creating the top level? */
    if(Is_Top!=0U)
ffffffff8020fcea:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8020fcef:	74 1b                	je     ffffffff8020fd0c <_RME_Pgt_Boot_Crt+0x360>
    {
        RME_COV_MARKER();
        
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020fcf1:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fcf5:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020fcfa:	89 c1                	mov    %eax,%ecx
ffffffff8020fcfc:	d3 e2                	shl    %cl,%edx
ffffffff8020fcfe:	89 d0                	mov    %edx,%eax
ffffffff8020fd00:	48 98                	cltq   
ffffffff8020fd02:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020fd06:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fd0a:	eb 19                	jmp    ffffffff8020fd25 <_RME_Pgt_Boot_Crt+0x379>
    }
    else
    {
        RME_COV_MARKER();
        
        Table_Size=RME_PGT_SIZE_NOM(Num_Order);
ffffffff8020fd0c:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fd10:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020fd15:	89 c1                	mov    %eax,%ecx
ffffffff8020fd17:	d3 e2                	shl    %cl,%edx
ffffffff8020fd19:	89 d0                	mov    %edx,%eax
ffffffff8020fd1b:	48 98                	cltq   
ffffffff8020fd1d:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020fd21:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020fd25:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020fd29:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020fd2d:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020fd30:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fd33:	e8 8f 26 00 00       	call   ffffffff802123c7 <_RME_Kot_Mark>
ffffffff8020fd38:	48 85 c0             	test   %rax,%rax
ffffffff8020fd3b:	74 17                	je     ffffffff8020fd54 <_RME_Pgt_Boot_Crt+0x3a8>
    {
        RME_COV_MARKER();
    
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020fd3d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd41:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020fd48:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020fd4f:	e9 82 00 00 00       	jmp    ffffffff8020fdd6 <_RME_Pgt_Boot_Crt+0x42a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Header init */
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020fd54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd58:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020fd5f:	00 
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020fd60:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd64:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020fd68:	48 89 50 18          	mov    %rdx,0x18(%rax)
    /* Set the property of the page table to only act as source and creating process */
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ADD_SRC|
ffffffff8020fd6c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd70:	48 bf c1 00 00 00 f0 	movabs $0xfffffff0000000c1,%rdi
ffffffff8020fd77:	ff ff ff 
ffffffff8020fd7a:	48 89 78 10          	mov    %rdi,0x10(%rax)
                       RME_PGT_FLAG_PRC_CRT|RME_PGT_FLAG_PRC_PGT;
    
    /* Info init */
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020fd7e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020fd82:	48 0b 45 b0          	or     -0x50(%rbp),%rax
ffffffff8020fd86:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fd89:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd8d:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fd91:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8020fd95:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020fd99:	48 0b 45 18          	or     0x18(%rbp),%rax
ffffffff8020fd9d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fda0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fda4:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Pgt_Crt->ASID=0U;
ffffffff8020fda8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fdac:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff8020fdb3:	00 

    /* Object init - need to add all kernel pages if they are top-level */
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020fdb4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fdb8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fdbb:	e8 5d 6c 01 00       	call   ffffffff80226a1d <__RME_Pgt_Init>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Establish cap */
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020fdc0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fdc4:	48 be 00 00 00 00 00 	movabs $0x4000000000000,%rsi
ffffffff8020fdcb:	00 04 00 
ffffffff8020fdce:	48 89 30             	mov    %rsi,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PGT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020fdd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020fdd6:	c9                   	leave  
ffffffff8020fdd7:	c3                   	ret    

ffffffff8020fdd8 <_RME_Pgt_Boot_Add>:
rme_ret_t _RME_Pgt_Boot_Add(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Pgt, 
                            rme_ptr_t Paddr,
                            rme_ptr_t Pos,
                            rme_ptr_t Flag)
{
ffffffff8020fdd8:	f3 0f 1e fa          	endbr64 
ffffffff8020fddc:	55                   	push   %rbp
ffffffff8020fddd:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020fde0:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020fde4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020fde8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020fdec:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020fdf0:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020fdf4:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Pgt* Pgt_Op;
    rme_ptr_t Type_Stat;
    rme_ptr_t Szord;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020fdf8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fdfc:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020fe01:	48 85 c0             	test   %rax,%rax
ffffffff8020fe04:	0f 85 98 00 00 00    	jne    ffffffff8020fea2 <_RME_Pgt_Boot_Add+0xca>
ffffffff8020fe0a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fe0e:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020fe12:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fe16:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fe19:	0f 96 c0             	setbe  %al
ffffffff8020fe1c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe1f:	48 85 c0             	test   %rax,%rax
ffffffff8020fe22:	74 0c                	je     ffffffff8020fe30 <_RME_Pgt_Boot_Add+0x58>
ffffffff8020fe24:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fe2b:	e9 33 02 00 00       	jmp    ffffffff80210063 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fe30:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fe34:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fe38:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fe3f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fe43:	48 01 d0             	add    %rdx,%rax
ffffffff8020fe46:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fe4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fe4e:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fe51:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fe55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fe59:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fe5d:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fe60:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fe64:	0f 94 c0             	sete   %al
ffffffff8020fe67:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe6a:	48 85 c0             	test   %rax,%rax
ffffffff8020fe6d:	74 0c                	je     ffffffff8020fe7b <_RME_Pgt_Boot_Add+0xa3>
ffffffff8020fe6f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fe76:	e9 e8 01 00 00       	jmp    ffffffff80210063 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fe7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fe7f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fe83:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020fe87:	0f 95 c0             	setne  %al
ffffffff8020fe8a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe8d:	48 85 c0             	test   %rax,%rax
ffffffff8020fe90:	0f 84 4c 01 00 00    	je     ffffffff8020ffe2 <_RME_Pgt_Boot_Add+0x20a>
ffffffff8020fe96:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fe9d:	e9 c1 01 00 00       	jmp    ffffffff80210063 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fea2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fea6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020feaa:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fead:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020feb1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020feb5:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020feb8:	0f 93 c0             	setae  %al
ffffffff8020febb:	0f b6 c0             	movzbl %al,%eax
ffffffff8020febe:	48 85 c0             	test   %rax,%rax
ffffffff8020fec1:	74 0c                	je     ffffffff8020fecf <_RME_Pgt_Boot_Add+0xf7>
ffffffff8020fec3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020feca:	e9 94 01 00 00       	jmp    ffffffff80210063 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fecf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fed3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fed7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fedb:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fede:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fee2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fee6:	48 01 d0             	add    %rdx,%rax
ffffffff8020fee9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020feed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fef1:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fef4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fef8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fefc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ff00:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ff03:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ff07:	0f 94 c0             	sete   %al
ffffffff8020ff0a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff0d:	48 85 c0             	test   %rax,%rax
ffffffff8020ff10:	74 0c                	je     ffffffff8020ff1e <_RME_Pgt_Boot_Add+0x146>
ffffffff8020ff12:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ff19:	e9 45 01 00 00       	jmp    ffffffff80210063 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ff1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ff22:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ff26:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ff2a:	0f 95 c0             	setne  %al
ffffffff8020ff2d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff30:	48 85 c0             	test   %rax,%rax
ffffffff8020ff33:	74 0c                	je     ffffffff8020ff41 <_RME_Pgt_Boot_Add+0x169>
ffffffff8020ff35:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ff3c:	e9 22 01 00 00       	jmp    ffffffff80210063 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ff41:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ff45:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ff4a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff51:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ff55:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ff58:	0f 93 c0             	setae  %al
ffffffff8020ff5b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff5e:	48 85 c0             	test   %rax,%rax
ffffffff8020ff61:	74 0c                	je     ffffffff8020ff6f <_RME_Pgt_Boot_Add+0x197>
ffffffff8020ff63:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ff6a:	e9 f4 00 00 00       	jmp    ffffffff80210063 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ff6f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ff73:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ff78:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ff7c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff83:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ff87:	48 01 d0             	add    %rdx,%rax
ffffffff8020ff8a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ff8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff92:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ff95:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ff99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ff9d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ffa1:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ffa4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ffa8:	0f 94 c0             	sete   %al
ffffffff8020ffab:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ffae:	48 85 c0             	test   %rax,%rax
ffffffff8020ffb1:	74 0c                	je     ffffffff8020ffbf <_RME_Pgt_Boot_Add+0x1e7>
ffffffff8020ffb3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ffba:	e9 a4 00 00 00       	jmp    ffffffff80210063 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ffbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ffc3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ffc7:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020ffcb:	0f 95 c0             	setne  %al
ffffffff8020ffce:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ffd1:	48 85 c0             	test   %rax,%rax
ffffffff8020ffd4:	74 0c                	je     ffffffff8020ffe2 <_RME_Pgt_Boot_Add+0x20a>
ffffffff8020ffd6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ffdd:	e9 81 00 00 00       	jmp    ffffffff80210063 <_RME_Pgt_Boot_Add+0x28b>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen, but don't check their properties */
    RME_CAP_CHECK(Pgt_Op,0U);

    Szord=RME_PGT_SIZEORD(Pgt_Op->Order);
ffffffff8020ffe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ffe6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ffea:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ffee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        /* No action required */
    }
#endif

    /* See if the mapping range and the granularity is allowed */
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020fff2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fff6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fffa:	89 c2                	mov    %eax,%edx
ffffffff8020fffc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210000:	89 d1                	mov    %edx,%ecx
ffffffff80210002:	48 d3 e8             	shr    %cl,%rax
ffffffff80210005:	48 85 c0             	test   %rax,%rax
ffffffff80210008:	75 25                	jne    ffffffff8021002f <_RME_Pgt_Boot_Add+0x257>
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8021000a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021000e:	89 c2                	mov    %eax,%edx
ffffffff80210010:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff80210015:	29 d0                	sub    %edx,%eax
ffffffff80210017:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8021001e:	89 c1                	mov    %eax,%ecx
ffffffff80210020:	48 d3 ea             	shr    %cl,%rdx
ffffffff80210023:	48 89 d0             	mov    %rdx,%rax
ffffffff80210026:	48 23 45 c8          	and    -0x38(%rbp),%rax
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8021002a:	48 85 c0             	test   %rax,%rax
ffffffff8021002d:	74 09                	je     ffffffff80210038 <_RME_Pgt_Boot_Add+0x260>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff8021002f:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80210036:	eb 2b                	jmp    ffffffff80210063 <_RME_Pgt_Boot_Add+0x28b>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Map(Pgt_Op,Paddr,Pos,Flag)!=0)
ffffffff80210038:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff8021003c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80210040:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
ffffffff80210044:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210048:	48 89 c7             	mov    %rax,%rdi
ffffffff8021004b:	e8 b6 6a 01 00       	call   ffffffff80226b06 <__RME_Pgt_Page_Map>
ffffffff80210050:	48 85 c0             	test   %rax,%rax
ffffffff80210053:	74 09                	je     ffffffff8021005e <_RME_Pgt_Boot_Add+0x286>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_MAP;
ffffffff80210055:	48 c7 c0 9a ff ff ff 	mov    $0xffffffffffffff9a,%rax
ffffffff8021005c:	eb 05                	jmp    ffffffff80210063 <_RME_Pgt_Boot_Add+0x28b>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff8021005e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210063:	c9                   	leave  
ffffffff80210064:	c3                   	ret    

ffffffff80210065 <_RME_Pgt_Boot_Con>:
rme_ret_t _RME_Pgt_Boot_Con(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Pgt_Parent,
                            rme_ptr_t Pos,
                            rme_cid_t Cap_Pgt_Child,
                            rme_ptr_t Flag_Child)
{
ffffffff80210065:	f3 0f 1e fa          	endbr64 
ffffffff80210069:	55                   	push   %rbp
ffffffff8021006a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021006d:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80210071:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80210075:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80210079:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021007d:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80210081:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
    rme_ptr_t Begin_Parent;
    rme_ptr_t End_Parent;
#endif
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff80210085:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210089:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021008e:	48 85 c0             	test   %rax,%rax
ffffffff80210091:	0f 85 98 00 00 00    	jne    ffffffff8021012f <_RME_Pgt_Boot_Con+0xca>
ffffffff80210097:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021009b:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021009f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802100a3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802100a6:	0f 96 c0             	setbe  %al
ffffffff802100a9:	0f b6 c0             	movzbl %al,%eax
ffffffff802100ac:	48 85 c0             	test   %rax,%rax
ffffffff802100af:	74 0c                	je     ffffffff802100bd <_RME_Pgt_Boot_Con+0x58>
ffffffff802100b1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802100b8:	e9 a0 04 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802100bd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802100c1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802100c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802100c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802100cc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802100d0:	48 01 d0             	add    %rdx,%rax
ffffffff802100d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802100d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802100db:	48 8b 00             	mov    (%rax),%rax
ffffffff802100de:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802100e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802100e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802100ea:	0f b7 c0             	movzwl %ax,%eax
ffffffff802100ed:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802100f1:	0f 94 c0             	sete   %al
ffffffff802100f4:	0f b6 c0             	movzbl %al,%eax
ffffffff802100f7:	48 85 c0             	test   %rax,%rax
ffffffff802100fa:	74 0c                	je     ffffffff80210108 <_RME_Pgt_Boot_Con+0xa3>
ffffffff802100fc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210103:	e9 55 04 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210108:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021010c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210110:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210114:	0f 95 c0             	setne  %al
ffffffff80210117:	0f b6 c0             	movzbl %al,%eax
ffffffff8021011a:	48 85 c0             	test   %rax,%rax
ffffffff8021011d:	0f 84 4c 01 00 00    	je     ffffffff8021026f <_RME_Pgt_Boot_Con+0x20a>
ffffffff80210123:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021012a:	e9 2e 04 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff8021012f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210133:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210137:	48 89 c2             	mov    %rax,%rdx
ffffffff8021013a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021013e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210142:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210145:	0f 93 c0             	setae  %al
ffffffff80210148:	0f b6 c0             	movzbl %al,%eax
ffffffff8021014b:	48 85 c0             	test   %rax,%rax
ffffffff8021014e:	74 0c                	je     ffffffff8021015c <_RME_Pgt_Boot_Con+0xf7>
ffffffff80210150:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210157:	e9 01 04 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff8021015c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210160:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210164:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210168:	48 89 c2             	mov    %rax,%rdx
ffffffff8021016b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021016f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210173:	48 01 d0             	add    %rdx,%rax
ffffffff80210176:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021017a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021017e:	48 8b 00             	mov    (%rax),%rax
ffffffff80210181:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210185:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210189:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021018d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210190:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210194:	0f 94 c0             	sete   %al
ffffffff80210197:	0f b6 c0             	movzbl %al,%eax
ffffffff8021019a:	48 85 c0             	test   %rax,%rax
ffffffff8021019d:	74 0c                	je     ffffffff802101ab <_RME_Pgt_Boot_Con+0x146>
ffffffff8021019f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802101a6:	e9 b2 03 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802101ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802101af:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802101b3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802101b7:	0f 95 c0             	setne  %al
ffffffff802101ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802101bd:	48 85 c0             	test   %rax,%rax
ffffffff802101c0:	74 0c                	je     ffffffff802101ce <_RME_Pgt_Boot_Con+0x169>
ffffffff802101c2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802101c9:	e9 8f 03 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802101ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802101d2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802101d7:	48 89 c2             	mov    %rax,%rdx
ffffffff802101da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802101de:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802101e2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802101e5:	0f 93 c0             	setae  %al
ffffffff802101e8:	0f b6 c0             	movzbl %al,%eax
ffffffff802101eb:	48 85 c0             	test   %rax,%rax
ffffffff802101ee:	74 0c                	je     ffffffff802101fc <_RME_Pgt_Boot_Con+0x197>
ffffffff802101f0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802101f7:	e9 61 03 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802101fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210200:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210205:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210209:	48 89 c2             	mov    %rax,%rdx
ffffffff8021020c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210210:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210214:	48 01 d0             	add    %rdx,%rax
ffffffff80210217:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021021b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021021f:	48 8b 00             	mov    (%rax),%rax
ffffffff80210222:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210226:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021022a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021022e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210231:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210235:	0f 94 c0             	sete   %al
ffffffff80210238:	0f b6 c0             	movzbl %al,%eax
ffffffff8021023b:	48 85 c0             	test   %rax,%rax
ffffffff8021023e:	74 0c                	je     ffffffff8021024c <_RME_Pgt_Boot_Con+0x1e7>
ffffffff80210240:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210247:	e9 11 03 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff8021024c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210250:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210254:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210258:	0f 95 c0             	setne  %al
ffffffff8021025b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021025e:	48 85 c0             	test   %rax,%rax
ffffffff80210261:	74 0c                	je     ffffffff8021026f <_RME_Pgt_Boot_Con+0x20a>
ffffffff80210263:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021026a:	e9 ee 02 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8021026f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210273:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210278:	48 85 c0             	test   %rax,%rax
ffffffff8021027b:	0f 85 98 00 00 00    	jne    ffffffff80210319 <_RME_Pgt_Boot_Con+0x2b4>
ffffffff80210281:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210285:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80210289:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021028d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210290:	0f 96 c0             	setbe  %al
ffffffff80210293:	0f b6 c0             	movzbl %al,%eax
ffffffff80210296:	48 85 c0             	test   %rax,%rax
ffffffff80210299:	74 0c                	je     ffffffff802102a7 <_RME_Pgt_Boot_Con+0x242>
ffffffff8021029b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802102a2:	e9 b6 02 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802102a7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802102ab:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802102af:	48 89 c2             	mov    %rax,%rdx
ffffffff802102b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802102b6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802102ba:	48 01 d0             	add    %rdx,%rax
ffffffff802102bd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802102c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802102c5:	48 8b 00             	mov    (%rax),%rax
ffffffff802102c8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802102cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802102d0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802102d4:	0f b7 c0             	movzwl %ax,%eax
ffffffff802102d7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802102db:	0f 94 c0             	sete   %al
ffffffff802102de:	0f b6 c0             	movzbl %al,%eax
ffffffff802102e1:	48 85 c0             	test   %rax,%rax
ffffffff802102e4:	74 0c                	je     ffffffff802102f2 <_RME_Pgt_Boot_Con+0x28d>
ffffffff802102e6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802102ed:	e9 6b 02 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802102f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802102f6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802102fa:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802102fe:	0f 95 c0             	setne  %al
ffffffff80210301:	0f b6 c0             	movzbl %al,%eax
ffffffff80210304:	48 85 c0             	test   %rax,%rax
ffffffff80210307:	0f 84 4c 01 00 00    	je     ffffffff80210459 <_RME_Pgt_Boot_Con+0x3f4>
ffffffff8021030d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210314:	e9 44 02 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210319:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021031d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210321:	48 89 c2             	mov    %rax,%rdx
ffffffff80210324:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210328:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021032c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021032f:	0f 93 c0             	setae  %al
ffffffff80210332:	0f b6 c0             	movzbl %al,%eax
ffffffff80210335:	48 85 c0             	test   %rax,%rax
ffffffff80210338:	74 0c                	je     ffffffff80210346 <_RME_Pgt_Boot_Con+0x2e1>
ffffffff8021033a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210341:	e9 17 02 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210346:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021034a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021034e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210352:	48 89 c2             	mov    %rax,%rdx
ffffffff80210355:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210359:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021035d:	48 01 d0             	add    %rdx,%rax
ffffffff80210360:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210364:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210368:	48 8b 00             	mov    (%rax),%rax
ffffffff8021036b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021036f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210373:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210377:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021037a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021037e:	0f 94 c0             	sete   %al
ffffffff80210381:	0f b6 c0             	movzbl %al,%eax
ffffffff80210384:	48 85 c0             	test   %rax,%rax
ffffffff80210387:	74 0c                	je     ffffffff80210395 <_RME_Pgt_Boot_Con+0x330>
ffffffff80210389:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210390:	e9 c8 01 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210395:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210399:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021039d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802103a1:	0f 95 c0             	setne  %al
ffffffff802103a4:	0f b6 c0             	movzbl %al,%eax
ffffffff802103a7:	48 85 c0             	test   %rax,%rax
ffffffff802103aa:	74 0c                	je     ffffffff802103b8 <_RME_Pgt_Boot_Con+0x353>
ffffffff802103ac:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802103b3:	e9 a5 01 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802103b8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802103bc:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802103c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802103c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802103c8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802103cc:	48 39 c2             	cmp    %rax,%rdx
ffffffff802103cf:	0f 93 c0             	setae  %al
ffffffff802103d2:	0f b6 c0             	movzbl %al,%eax
ffffffff802103d5:	48 85 c0             	test   %rax,%rax
ffffffff802103d8:	74 0c                	je     ffffffff802103e6 <_RME_Pgt_Boot_Con+0x381>
ffffffff802103da:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802103e1:	e9 77 01 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802103e6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802103ea:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802103ef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802103f3:	48 89 c2             	mov    %rax,%rdx
ffffffff802103f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802103fa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802103fe:	48 01 d0             	add    %rdx,%rax
ffffffff80210401:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210405:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210409:	48 8b 00             	mov    (%rax),%rax
ffffffff8021040c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210410:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210414:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210418:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021041b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021041f:	0f 94 c0             	sete   %al
ffffffff80210422:	0f b6 c0             	movzbl %al,%eax
ffffffff80210425:	48 85 c0             	test   %rax,%rax
ffffffff80210428:	74 0c                	je     ffffffff80210436 <_RME_Pgt_Boot_Con+0x3d1>
ffffffff8021042a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210431:	e9 27 01 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210436:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021043a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021043e:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210442:	0f 95 c0             	setne  %al
ffffffff80210445:	0f b6 c0             	movzbl %al,%eax
ffffffff80210448:	48 85 c0             	test   %rax,%rax
ffffffff8021044b:	74 0c                	je     ffffffff80210459 <_RME_Pgt_Boot_Con+0x3f4>
ffffffff8021044d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210454:	e9 04 01 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
    /* Check if both page table caps are not frozen but don't check flags */
    RME_CAP_CHECK(Pgt_Parent,0U);
    RME_CAP_CHECK(Pgt_Child,0U);
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff80210459:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021045d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210461:	89 c2                	mov    %eax,%edx
ffffffff80210463:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210467:	89 d1                	mov    %edx,%ecx
ffffffff80210469:	48 d3 e8             	shr    %cl,%rax
ffffffff8021046c:	48 85 c0             	test   %rax,%rax
ffffffff8021046f:	74 0c                	je     ffffffff8021047d <_RME_Pgt_Boot_Con+0x418>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff80210471:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80210478:	e9 e0 00 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the child table falls within one slot of the parent table */
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff8021047d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210481:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210485:	89 c2                	mov    %eax,%edx
ffffffff80210487:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021048b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021048f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210493:	48 01 d0             	add    %rdx,%rax
ffffffff80210496:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff8021049a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021049e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802104a2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802104a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Szord_Parent<Order_Child)
ffffffff802104aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802104ae:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff802104b2:	73 0c                	jae    ffffffff802104c0 <_RME_Pgt_Boot_Con+0x45b>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff802104b4:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802104bb:	e9 9d 00 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
        RME_COV_MARKER();
        /* No action required */
    }
#else
    /* Force no path compression when virtual mappings are enabled */
    if(Szord_Parent!=Order_Child)
ffffffff802104c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802104c4:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff802104c8:	74 0c                	je     ffffffff802104d6 <_RME_Pgt_Boot_Con+0x471>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff802104ca:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802104d1:	e9 87 00 00 00       	jmp    ffffffff8021055d <_RME_Pgt_Boot_Con+0x4f8>
    }
#endif

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff802104d6:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff802104da:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802104de:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff802104e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104e6:	48 89 c7             	mov    %rax,%rdi
ffffffff802104e9:	e8 f9 67 01 00       	call   ffffffff80226ce7 <__RME_Pgt_Pgdir_Map>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff802104ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104f2:	48 8b 00             	mov    (%rax),%rax
ffffffff802104f5:	89 c0                	mov    %eax,%eax
ffffffff802104f7:	48 85 c0             	test   %rax,%rax
ffffffff802104fa:	74 0a                	je     ffffffff80210506 <_RME_Pgt_Boot_Con+0x4a1>
ffffffff802104fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210500:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80210504:	eb 04                	jmp    ffffffff8021050a <_RME_Pgt_Boot_Con+0x4a5>
ffffffff80210506:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021050a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1U);
ffffffff8021050e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210512:	48 83 c0 08          	add    $0x8,%rax
ffffffff80210516:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021051b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021051e:	e8 70 c2 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff80210523:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210527:	48 8b 00             	mov    (%rax),%rax
ffffffff8021052a:	89 c0                	mov    %eax,%eax
ffffffff8021052c:	48 85 c0             	test   %rax,%rax
ffffffff8021052f:	74 0a                	je     ffffffff8021053b <_RME_Pgt_Boot_Con+0x4d6>
ffffffff80210531:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210535:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80210539:	eb 04                	jmp    ffffffff8021053f <_RME_Pgt_Boot_Con+0x4da>
ffffffff8021053b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021053f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1U);
ffffffff80210543:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210547:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021054b:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80210550:	48 89 c7             	mov    %rax,%rdi
ffffffff80210553:	e8 3b c2 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80210558:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021055d:	c9                   	leave  
ffffffff8021055e:	c3                   	ret    

ffffffff8021055f <_RME_Pgt_Crt>:
                              rme_ptr_t Raddr,
                              rme_ptr_t Base,
                              rme_ptr_t Is_Top,
                              rme_ptr_t Size_Order,
                              rme_ptr_t Num_Order)
{
ffffffff8021055f:	f3 0f 1e fa          	endbr64 
ffffffff80210563:	55                   	push   %rbp
ffffffff80210564:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210567:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8021056b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021056f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80210573:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80210577:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff8021057b:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff8021057f:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Vaddr;
    rme_ptr_t Table_Size;
    
    /* Check if the total representable memory exceeds our maximum possible
     * addressible memory under the machine word length */
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff80210583:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80210587:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff8021058b:	48 01 d0             	add    %rdx,%rax
ffffffff8021058e:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff80210592:	76 0c                	jbe    ffffffff802105a0 <_RME_Pgt_Crt+0x41>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff80210594:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8021059b:	e9 e8 06 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802105a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802105a4:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802105a9:	48 85 c0             	test   %rax,%rax
ffffffff802105ac:	0f 85 98 00 00 00    	jne    ffffffff8021064a <_RME_Pgt_Crt+0xeb>
ffffffff802105b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802105b6:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802105ba:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802105be:	48 39 c2             	cmp    %rax,%rdx
ffffffff802105c1:	0f 96 c0             	setbe  %al
ffffffff802105c4:	0f b6 c0             	movzbl %al,%eax
ffffffff802105c7:	48 85 c0             	test   %rax,%rax
ffffffff802105ca:	74 0c                	je     ffffffff802105d8 <_RME_Pgt_Crt+0x79>
ffffffff802105cc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802105d3:	e9 b0 06 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff802105d8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802105dc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802105e0:	48 89 c2             	mov    %rax,%rdx
ffffffff802105e3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802105e7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802105eb:	48 01 d0             	add    %rdx,%rax
ffffffff802105ee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802105f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802105f6:	48 8b 00             	mov    (%rax),%rax
ffffffff802105f9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802105fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210601:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210605:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210608:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021060c:	0f 94 c0             	sete   %al
ffffffff8021060f:	0f b6 c0             	movzbl %al,%eax
ffffffff80210612:	48 85 c0             	test   %rax,%rax
ffffffff80210615:	74 0c                	je     ffffffff80210623 <_RME_Pgt_Crt+0xc4>
ffffffff80210617:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021061e:	e9 65 06 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210623:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210627:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021062b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021062f:	0f 95 c0             	setne  %al
ffffffff80210632:	0f b6 c0             	movzbl %al,%eax
ffffffff80210635:	48 85 c0             	test   %rax,%rax
ffffffff80210638:	0f 84 4c 01 00 00    	je     ffffffff8021078a <_RME_Pgt_Crt+0x22b>
ffffffff8021063e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210645:	e9 3e 06 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff8021064a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021064e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210652:	48 89 c2             	mov    %rax,%rdx
ffffffff80210655:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210659:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021065d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210660:	0f 93 c0             	setae  %al
ffffffff80210663:	0f b6 c0             	movzbl %al,%eax
ffffffff80210666:	48 85 c0             	test   %rax,%rax
ffffffff80210669:	74 0c                	je     ffffffff80210677 <_RME_Pgt_Crt+0x118>
ffffffff8021066b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210672:	e9 11 06 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210677:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021067b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021067f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210683:	48 89 c2             	mov    %rax,%rdx
ffffffff80210686:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021068a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021068e:	48 01 d0             	add    %rdx,%rax
ffffffff80210691:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210695:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210699:	48 8b 00             	mov    (%rax),%rax
ffffffff8021069c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802106a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802106a4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802106a8:	0f b7 c0             	movzwl %ax,%eax
ffffffff802106ab:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802106af:	0f 94 c0             	sete   %al
ffffffff802106b2:	0f b6 c0             	movzbl %al,%eax
ffffffff802106b5:	48 85 c0             	test   %rax,%rax
ffffffff802106b8:	74 0c                	je     ffffffff802106c6 <_RME_Pgt_Crt+0x167>
ffffffff802106ba:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802106c1:	e9 c2 05 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff802106c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802106ca:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802106ce:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802106d2:	0f 95 c0             	setne  %al
ffffffff802106d5:	0f b6 c0             	movzbl %al,%eax
ffffffff802106d8:	48 85 c0             	test   %rax,%rax
ffffffff802106db:	74 0c                	je     ffffffff802106e9 <_RME_Pgt_Crt+0x18a>
ffffffff802106dd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802106e4:	e9 9f 05 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff802106e9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802106ed:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802106f2:	48 89 c2             	mov    %rax,%rdx
ffffffff802106f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802106f9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802106fd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210700:	0f 93 c0             	setae  %al
ffffffff80210703:	0f b6 c0             	movzbl %al,%eax
ffffffff80210706:	48 85 c0             	test   %rax,%rax
ffffffff80210709:	74 0c                	je     ffffffff80210717 <_RME_Pgt_Crt+0x1b8>
ffffffff8021070b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210712:	e9 71 05 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210717:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021071b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210720:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210724:	48 89 c2             	mov    %rax,%rdx
ffffffff80210727:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021072b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021072f:	48 01 d0             	add    %rdx,%rax
ffffffff80210732:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210736:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021073a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021073d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80210741:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210745:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210749:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021074c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210750:	0f 94 c0             	sete   %al
ffffffff80210753:	0f b6 c0             	movzbl %al,%eax
ffffffff80210756:	48 85 c0             	test   %rax,%rax
ffffffff80210759:	74 0c                	je     ffffffff80210767 <_RME_Pgt_Crt+0x208>
ffffffff8021075b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210762:	e9 21 05 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210767:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021076b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021076f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210773:	0f 95 c0             	setne  %al
ffffffff80210776:	0f b6 c0             	movzbl %al,%eax
ffffffff80210779:	48 85 c0             	test   %rax,%rax
ffffffff8021077c:	74 0c                	je     ffffffff8021078a <_RME_Pgt_Crt+0x22b>
ffffffff8021077e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210785:	e9 fe 04 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8021078a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021078e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210793:	48 85 c0             	test   %rax,%rax
ffffffff80210796:	0f 85 98 00 00 00    	jne    ffffffff80210834 <_RME_Pgt_Crt+0x2d5>
ffffffff8021079c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802107a0:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802107a4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802107a8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802107ab:	0f 96 c0             	setbe  %al
ffffffff802107ae:	0f b6 c0             	movzbl %al,%eax
ffffffff802107b1:	48 85 c0             	test   %rax,%rax
ffffffff802107b4:	74 0c                	je     ffffffff802107c2 <_RME_Pgt_Crt+0x263>
ffffffff802107b6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802107bd:	e9 c6 04 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff802107c2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802107c6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802107ca:	48 89 c2             	mov    %rax,%rdx
ffffffff802107cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802107d1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802107d5:	48 01 d0             	add    %rdx,%rax
ffffffff802107d8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802107dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802107e0:	48 8b 00             	mov    (%rax),%rax
ffffffff802107e3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802107e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802107eb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802107ef:	0f b7 c0             	movzwl %ax,%eax
ffffffff802107f2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802107f6:	0f 94 c0             	sete   %al
ffffffff802107f9:	0f b6 c0             	movzbl %al,%eax
ffffffff802107fc:	48 85 c0             	test   %rax,%rax
ffffffff802107ff:	74 0c                	je     ffffffff8021080d <_RME_Pgt_Crt+0x2ae>
ffffffff80210801:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210808:	e9 7b 04 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff8021080d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210811:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210815:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210819:	0f 95 c0             	setne  %al
ffffffff8021081c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021081f:	48 85 c0             	test   %rax,%rax
ffffffff80210822:	0f 84 4c 01 00 00    	je     ffffffff80210974 <_RME_Pgt_Crt+0x415>
ffffffff80210828:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021082f:	e9 54 04 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210834:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210838:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021083c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021083f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210843:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210847:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021084a:	0f 93 c0             	setae  %al
ffffffff8021084d:	0f b6 c0             	movzbl %al,%eax
ffffffff80210850:	48 85 c0             	test   %rax,%rax
ffffffff80210853:	74 0c                	je     ffffffff80210861 <_RME_Pgt_Crt+0x302>
ffffffff80210855:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021085c:	e9 27 04 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210861:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210865:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210869:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021086d:	48 89 c2             	mov    %rax,%rdx
ffffffff80210870:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210874:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210878:	48 01 d0             	add    %rdx,%rax
ffffffff8021087b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021087f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210883:	48 8b 00             	mov    (%rax),%rax
ffffffff80210886:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021088a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021088e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210892:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210895:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210899:	0f 94 c0             	sete   %al
ffffffff8021089c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021089f:	48 85 c0             	test   %rax,%rax
ffffffff802108a2:	74 0c                	je     ffffffff802108b0 <_RME_Pgt_Crt+0x351>
ffffffff802108a4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802108ab:	e9 d8 03 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff802108b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802108b4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802108b8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802108bc:	0f 95 c0             	setne  %al
ffffffff802108bf:	0f b6 c0             	movzbl %al,%eax
ffffffff802108c2:	48 85 c0             	test   %rax,%rax
ffffffff802108c5:	74 0c                	je     ffffffff802108d3 <_RME_Pgt_Crt+0x374>
ffffffff802108c7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802108ce:	e9 b5 03 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff802108d3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802108d7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802108dc:	48 89 c2             	mov    %rax,%rdx
ffffffff802108df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802108e3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802108e7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802108ea:	0f 93 c0             	setae  %al
ffffffff802108ed:	0f b6 c0             	movzbl %al,%eax
ffffffff802108f0:	48 85 c0             	test   %rax,%rax
ffffffff802108f3:	74 0c                	je     ffffffff80210901 <_RME_Pgt_Crt+0x3a2>
ffffffff802108f5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802108fc:	e9 87 03 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210901:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210905:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021090a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021090e:	48 89 c2             	mov    %rax,%rdx
ffffffff80210911:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210915:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210919:	48 01 d0             	add    %rdx,%rax
ffffffff8021091c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210920:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210924:	48 8b 00             	mov    (%rax),%rax
ffffffff80210927:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021092b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021092f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210933:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210936:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021093a:	0f 94 c0             	sete   %al
ffffffff8021093d:	0f b6 c0             	movzbl %al,%eax
ffffffff80210940:	48 85 c0             	test   %rax,%rax
ffffffff80210943:	74 0c                	je     ffffffff80210951 <_RME_Pgt_Crt+0x3f2>
ffffffff80210945:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021094c:	e9 37 03 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210951:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210955:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210959:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021095d:	0f 95 c0             	setne  %al
ffffffff80210960:	0f b6 c0             	movzbl %al,%eax
ffffffff80210963:	48 85 c0             	test   %rax,%rax
ffffffff80210966:	74 0c                	je     ffffffff80210974 <_RME_Pgt_Crt+0x415>
ffffffff80210968:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021096f:	e9 14 03 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff80210974:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210978:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021097c:	83 e0 01             	and    $0x1,%eax
ffffffff8021097f:	48 85 c0             	test   %rax,%rax
ffffffff80210982:	0f 94 c0             	sete   %al
ffffffff80210985:	0f b6 c0             	movzbl %al,%eax
ffffffff80210988:	48 85 c0             	test   %rax,%rax
ffffffff8021098b:	74 0c                	je     ffffffff80210999 <_RME_Pgt_Crt+0x43a>
ffffffff8021098d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210994:	e9 ef 02 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
    
    /* Are we creating the top-level? */
    if(Is_Top!=0U)
ffffffff80210999:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff8021099e:	74 1b                	je     ffffffff802109bb <_RME_Pgt_Crt+0x45c>
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff802109a0:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff802109a4:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802109a9:	89 c1                	mov    %eax,%ecx
ffffffff802109ab:	d3 e2                	shl    %cl,%edx
ffffffff802109ad:	89 d0                	mov    %edx,%eax
ffffffff802109af:	48 98                	cltq   
ffffffff802109b1:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff802109b5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802109b9:	eb 19                	jmp    ffffffff802109d4 <_RME_Pgt_Crt+0x475>
    }
    else
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_NOM(Num_Order);
ffffffff802109bb:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff802109bf:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802109c4:	89 c1                	mov    %eax,%ecx
ffffffff802109c6:	d3 e2                	shl    %cl,%edx
ffffffff802109c8:	89 d0                	mov    %edx,%eax
ffffffff802109ca:	48 98                	cltq   
ffffffff802109cc:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff802109d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    }
    
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff802109d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802109d8:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802109dc:	83 e0 02             	and    $0x2,%eax
ffffffff802109df:	48 85 c0             	test   %rax,%rax
ffffffff802109e2:	0f 94 c0             	sete   %al
ffffffff802109e5:	0f b6 c0             	movzbl %al,%eax
ffffffff802109e8:	48 85 c0             	test   %rax,%rax
ffffffff802109eb:	74 18                	je     ffffffff80210a05 <_RME_Pgt_Crt+0x4a6>
ffffffff802109ed:	48 c7 c7 88 93 22 80 	mov    $0xffffffff80229388,%rdi
ffffffff802109f4:	e8 12 c0 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802109f9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210a00:	e9 83 02 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210a05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210a09:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80210a0d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80210a11:	48 01 d0             	add    %rdx,%rax
ffffffff80210a14:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80210a18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210a1c:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff80210a20:	0f 92 c0             	setb   %al
ffffffff80210a23:	0f b6 c0             	movzbl %al,%eax
ffffffff80210a26:	48 85 c0             	test   %rax,%rax
ffffffff80210a29:	74 34                	je     ffffffff80210a5f <_RME_Pgt_Crt+0x500>
ffffffff80210a2b:	48 c7 c7 a8 93 22 80 	mov    $0xffffffff802293a8,%rdi
ffffffff80210a32:	e8 d4 bf ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80210a37:	48 c7 c7 c7 93 22 80 	mov    $0xffffffff802293c7,%rdi
ffffffff80210a3e:	e8 c8 bf ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80210a43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210a47:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210a4b:	48 89 c7             	mov    %rax,%rdi
ffffffff80210a4e:	e8 f6 be ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
ffffffff80210a53:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210a5a:	e9 29 02 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210a5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210a63:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210a67:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80210a6b:	0f 92 c0             	setb   %al
ffffffff80210a6e:	0f b6 c0             	movzbl %al,%eax
ffffffff80210a71:	48 85 c0             	test   %rax,%rax
ffffffff80210a74:	74 18                	je     ffffffff80210a8e <_RME_Pgt_Crt+0x52f>
ffffffff80210a76:	48 c7 c7 d8 93 22 80 	mov    $0xffffffff802293d8,%rdi
ffffffff80210a7d:	e8 89 bf ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80210a82:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210a89:	e9 fa 01 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210a8e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80210a92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210a96:	48 01 d0             	add    %rdx,%rax
ffffffff80210a99:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80210a9d:	0f 97 c0             	seta   %al
ffffffff80210aa0:	0f b6 c0             	movzbl %al,%eax
ffffffff80210aa3:	48 85 c0             	test   %rax,%rax
ffffffff80210aa6:	74 18                	je     ffffffff80210ac0 <_RME_Pgt_Crt+0x561>
ffffffff80210aa8:	48 c7 c7 f8 93 22 80 	mov    $0xffffffff802293f8,%rdi
ffffffff80210aaf:	e8 57 bf ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80210ab4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210abb:	e9 c8 01 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210ac0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210ac4:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80210ac8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80210acc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80210ad0:	48 01 ca             	add    %rcx,%rdx
ffffffff80210ad3:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff80210ad7:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210ada:	0f 92 c0             	setb   %al
ffffffff80210add:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ae0:	48 85 c0             	test   %rax,%rax
ffffffff80210ae3:	74 18                	je     ffffffff80210afd <_RME_Pgt_Crt+0x59e>
ffffffff80210ae5:	48 c7 c7 18 94 22 80 	mov    $0xffffffff80229418,%rdi
ffffffff80210aec:	e8 1a bf ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80210af1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210af8:	e9 8b 01 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>

    /* Check if these parameters are feasible */
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)<0)
ffffffff80210afd:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff80210b01:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
ffffffff80210b05:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80210b09:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80210b0d:	49 89 f0             	mov    %rsi,%r8
ffffffff80210b10:	48 8b 75 10          	mov    0x10(%rbp),%rsi
ffffffff80210b14:	48 89 c7             	mov    %rax,%rdi
ffffffff80210b17:	e8 6f 5e 01 00       	call   ffffffff8022698b <__RME_Pgt_Check>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check if the start address is properly aligned to the total order of the page table */
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff80210b1c:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80210b20:	89 c2                	mov    %eax,%edx
ffffffff80210b22:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff80210b26:	01 c2                	add    %eax,%edx
ffffffff80210b28:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff80210b2d:	29 d0                	sub    %edx,%eax
ffffffff80210b2f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80210b36:	89 c1                	mov    %eax,%ecx
ffffffff80210b38:	48 d3 ea             	shr    %cl,%rdx
ffffffff80210b3b:	48 89 d0             	mov    %rdx,%rax
ffffffff80210b3e:	48 23 45 a0          	and    -0x60(%rbp),%rax
ffffffff80210b42:	48 85 c0             	test   %rax,%rax
ffffffff80210b45:	74 0c                	je     ffffffff80210b53 <_RME_Pgt_Crt+0x5f4>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_HW;
ffffffff80210b47:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff80210b4e:	e9 35 01 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff80210b53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210b57:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80210b5b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210b5f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210b62:	0f 96 c0             	setbe  %al
ffffffff80210b65:	0f b6 c0             	movzbl %al,%eax
ffffffff80210b68:	48 85 c0             	test   %rax,%rax
ffffffff80210b6b:	74 0c                	je     ffffffff80210b79 <_RME_Pgt_Crt+0x61a>
ffffffff80210b6d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210b74:	e9 0f 01 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210b79:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210b7d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210b81:	48 89 c2             	mov    %rax,%rdx
ffffffff80210b84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210b88:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210b8c:	48 01 d0             	add    %rdx,%rax
ffffffff80210b8f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff80210b93:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b97:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80210b9e:	00 00 00 
ffffffff80210ba1:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80210ba6:	48 89 c7             	mov    %rax,%rdi
ffffffff80210ba9:	e8 b0 bb ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210bae:	48 85 c0             	test   %rax,%rax
ffffffff80210bb1:	0f 94 c0             	sete   %al
ffffffff80210bb4:	0f b6 c0             	movzbl %al,%eax
ffffffff80210bb7:	48 85 c0             	test   %rax,%rax
ffffffff80210bba:	74 0c                	je     ffffffff80210bc8 <_RME_Pgt_Crt+0x669>
ffffffff80210bbc:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80210bc3:	e9 c0 00 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
ffffffff80210bc8:	48 8b 15 31 a4 01 00 	mov    0x1a431(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff80210bcf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210bd3:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
ffffffff80210bd7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80210bdb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210bdf:	48 89 d6             	mov    %rdx,%rsi
ffffffff80210be2:	48 89 c7             	mov    %rax,%rdi
ffffffff80210be5:	e8 dd 17 00 00       	call   ffffffff802123c7 <_RME_Kot_Mark>
ffffffff80210bea:	48 85 c0             	test   %rax,%rax
ffffffff80210bed:	74 17                	je     ffffffff80210c06 <_RME_Pgt_Crt+0x6a7>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff80210bef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210bf3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80210bfa:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80210c01:	e9 82 00 00 00       	jmp    ffffffff80210c88 <_RME_Pgt_Crt+0x729>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Header init */
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff80210c06:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c0a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80210c11:	00 
    Pgt_Crt->Head.Object=Vaddr;
ffffffff80210c12:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c16:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80210c1a:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ALL;
ffffffff80210c1e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c22:	48 be ff 00 00 00 f0 	movabs $0xfffffff0000000ff,%rsi
ffffffff80210c29:	ff ff ff 
ffffffff80210c2c:	48 89 70 10          	mov    %rsi,0x10(%rax)
    
    /* Info init */
    Pgt_Crt->Base=Base|Is_Top;
ffffffff80210c30:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80210c34:	48 0b 45 10          	or     0x10(%rbp),%rax
ffffffff80210c38:	48 89 c2             	mov    %rax,%rdx
ffffffff80210c3b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c3f:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff80210c43:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80210c47:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff80210c4b:	48 0b 45 20          	or     0x20(%rbp),%rax
ffffffff80210c4f:	48 89 c2             	mov    %rax,%rdx
ffffffff80210c52:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c56:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Pgt_Crt->ASID=0U;
ffffffff80210c5a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c5e:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80210c65:	00 
    
    /* Object init - need to add all kernel pages if they are top-level */
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff80210c66:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c6a:	48 89 c7             	mov    %rax,%rdi
ffffffff80210c6d:	e8 ab 5d 01 00       	call   ffffffff80226a1d <__RME_Pgt_Init>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Creation complete */
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff80210c72:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c76:	48 be 00 00 00 00 00 	movabs $0x4000000000000,%rsi
ffffffff80210c7d:	00 04 00 
ffffffff80210c80:	48 89 30             	mov    %rsi,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PGT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80210c83:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210c88:	c9                   	leave  
ffffffff80210c89:	c3                   	ret    

ffffffff80210c8a <_RME_Pgt_Del>:
******************************************************************************/
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Pgt)
{
ffffffff80210c8a:	f3 0f 1e fa          	endbr64 
ffffffff80210c8e:	55                   	push   %rbp
ffffffff80210c8f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210c92:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80210c96:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80210c9a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80210c9e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    /* These are used for deletion */
    rme_ptr_t Object;
    rme_ptr_t Table_Size;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210ca2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210ca6:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210cab:	48 85 c0             	test   %rax,%rax
ffffffff80210cae:	0f 85 98 00 00 00    	jne    ffffffff80210d4c <_RME_Pgt_Del+0xc2>
ffffffff80210cb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210cb8:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80210cbc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210cc0:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210cc3:	0f 96 c0             	setbe  %al
ffffffff80210cc6:	0f b6 c0             	movzbl %al,%eax
ffffffff80210cc9:	48 85 c0             	test   %rax,%rax
ffffffff80210ccc:	74 0c                	je     ffffffff80210cda <_RME_Pgt_Del+0x50>
ffffffff80210cce:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210cd5:	e9 a2 03 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
ffffffff80210cda:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210cde:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210ce2:	48 89 c2             	mov    %rax,%rdx
ffffffff80210ce5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210ce9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210ced:	48 01 d0             	add    %rdx,%rax
ffffffff80210cf0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210cf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210cf8:	48 8b 00             	mov    (%rax),%rax
ffffffff80210cfb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210cff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210d03:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210d07:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210d0a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210d0e:	0f 94 c0             	sete   %al
ffffffff80210d11:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d14:	48 85 c0             	test   %rax,%rax
ffffffff80210d17:	74 0c                	je     ffffffff80210d25 <_RME_Pgt_Del+0x9b>
ffffffff80210d19:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210d20:	e9 57 03 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
ffffffff80210d25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210d29:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210d2d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210d31:	0f 95 c0             	setne  %al
ffffffff80210d34:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d37:	48 85 c0             	test   %rax,%rax
ffffffff80210d3a:	0f 84 4c 01 00 00    	je     ffffffff80210e8c <_RME_Pgt_Del+0x202>
ffffffff80210d40:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210d47:	e9 30 03 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
ffffffff80210d4c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210d50:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210d54:	48 89 c2             	mov    %rax,%rdx
ffffffff80210d57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210d5b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210d5f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210d62:	0f 93 c0             	setae  %al
ffffffff80210d65:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d68:	48 85 c0             	test   %rax,%rax
ffffffff80210d6b:	74 0c                	je     ffffffff80210d79 <_RME_Pgt_Del+0xef>
ffffffff80210d6d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210d74:	e9 03 03 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
ffffffff80210d79:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210d7d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210d81:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210d85:	48 89 c2             	mov    %rax,%rdx
ffffffff80210d88:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210d8c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210d90:	48 01 d0             	add    %rdx,%rax
ffffffff80210d93:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210d97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210d9b:	48 8b 00             	mov    (%rax),%rax
ffffffff80210d9e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210da2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210da6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210daa:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210dad:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210db1:	0f 94 c0             	sete   %al
ffffffff80210db4:	0f b6 c0             	movzbl %al,%eax
ffffffff80210db7:	48 85 c0             	test   %rax,%rax
ffffffff80210dba:	74 0c                	je     ffffffff80210dc8 <_RME_Pgt_Del+0x13e>
ffffffff80210dbc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210dc3:	e9 b4 02 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
ffffffff80210dc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210dcc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210dd0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210dd4:	0f 95 c0             	setne  %al
ffffffff80210dd7:	0f b6 c0             	movzbl %al,%eax
ffffffff80210dda:	48 85 c0             	test   %rax,%rax
ffffffff80210ddd:	74 0c                	je     ffffffff80210deb <_RME_Pgt_Del+0x161>
ffffffff80210ddf:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210de6:	e9 91 02 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
ffffffff80210deb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210def:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210df4:	48 89 c2             	mov    %rax,%rdx
ffffffff80210df7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210dfb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210dff:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210e02:	0f 93 c0             	setae  %al
ffffffff80210e05:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e08:	48 85 c0             	test   %rax,%rax
ffffffff80210e0b:	74 0c                	je     ffffffff80210e19 <_RME_Pgt_Del+0x18f>
ffffffff80210e0d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210e14:	e9 63 02 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
ffffffff80210e19:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210e1d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210e22:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210e26:	48 89 c2             	mov    %rax,%rdx
ffffffff80210e29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210e2d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210e31:	48 01 d0             	add    %rdx,%rax
ffffffff80210e34:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210e38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210e3c:	48 8b 00             	mov    (%rax),%rax
ffffffff80210e3f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210e43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210e47:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210e4b:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210e4e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210e52:	0f 94 c0             	sete   %al
ffffffff80210e55:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e58:	48 85 c0             	test   %rax,%rax
ffffffff80210e5b:	74 0c                	je     ffffffff80210e69 <_RME_Pgt_Del+0x1df>
ffffffff80210e5d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210e64:	e9 13 02 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
ffffffff80210e69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210e6d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210e71:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210e75:	0f 95 c0             	setne  %al
ffffffff80210e78:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e7b:	48 85 c0             	test   %rax,%rax
ffffffff80210e7e:	74 0c                	je     ffffffff80210e8c <_RME_Pgt_Del+0x202>
ffffffff80210e80:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210e87:	e9 f0 01 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80210e8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210e90:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210e94:	83 e0 02             	and    $0x2,%eax
ffffffff80210e97:	48 85 c0             	test   %rax,%rax
ffffffff80210e9a:	0f 94 c0             	sete   %al
ffffffff80210e9d:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ea0:	48 85 c0             	test   %rax,%rax
ffffffff80210ea3:	74 0c                	je     ffffffff80210eb1 <_RME_Pgt_Del+0x227>
ffffffff80210ea5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210eac:	e9 cb 01 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80210eb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210eb5:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80210eb9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210ebd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210ec0:	0f 96 c0             	setbe  %al
ffffffff80210ec3:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ec6:	48 85 c0             	test   %rax,%rax
ffffffff80210ec9:	74 0c                	je     ffffffff80210ed7 <_RME_Pgt_Del+0x24d>
ffffffff80210ecb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210ed2:	e9 a5 01 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
ffffffff80210ed7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210edb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210edf:	48 89 c2             	mov    %rax,%rdx
ffffffff80210ee2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210ee6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210eea:	48 01 d0             	add    %rdx,%rax
ffffffff80210eed:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80210ef1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210ef5:	48 8b 00             	mov    (%rax),%rax
ffffffff80210ef8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210efc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210f00:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210f04:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210f07:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210f0b:	0f 95 c0             	setne  %al
ffffffff80210f0e:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f11:	48 85 c0             	test   %rax,%rax
ffffffff80210f14:	74 0c                	je     ffffffff80210f22 <_RME_Pgt_Del+0x298>
ffffffff80210f16:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210f1d:	e9 5a 01 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
ffffffff80210f22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210f26:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210f2a:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210f2e:	0f 95 c0             	setne  %al
ffffffff80210f31:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f34:	48 85 c0             	test   %rax,%rax
ffffffff80210f37:	74 0c                	je     ffffffff80210f45 <_RME_Pgt_Del+0x2bb>
ffffffff80210f39:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210f40:	e9 37 01 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
ffffffff80210f45:	48 8b 15 b4 a0 01 00 	mov    0x1a0b4(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff80210f4c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f50:	48 8b 48 20          	mov    0x20(%rax),%rcx
ffffffff80210f54:	48 89 d0             	mov    %rdx,%rax
ffffffff80210f57:	48 29 c8             	sub    %rcx,%rax
ffffffff80210f5a:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80210f5e:	0f 96 c0             	setbe  %al
ffffffff80210f61:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f64:	48 98                	cltq   
ffffffff80210f66:	48 85 c0             	test   %rax,%rax
ffffffff80210f69:	74 0c                	je     ffffffff80210f77 <_RME_Pgt_Del+0x2ed>
ffffffff80210f6b:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80210f72:	e9 05 01 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
ffffffff80210f77:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f7b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80210f7f:	48 85 c0             	test   %rax,%rax
ffffffff80210f82:	0f 95 c0             	setne  %al
ffffffff80210f85:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f88:	48 85 c0             	test   %rax,%rax
ffffffff80210f8b:	74 44                	je     ffffffff80210fd1 <_RME_Pgt_Del+0x347>
ffffffff80210f8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210f91:	89 c0                	mov    %eax,%eax
ffffffff80210f93:	48 85 c0             	test   %rax,%rax
ffffffff80210f96:	0f 94 c0             	sete   %al
ffffffff80210f99:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f9c:	48 85 c0             	test   %rax,%rax
ffffffff80210f9f:	74 24                	je     ffffffff80210fc5 <_RME_Pgt_Del+0x33b>
ffffffff80210fa1:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80210fa8:	00 ff ff 
ffffffff80210fab:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80210faf:	48 89 c2             	mov    %rax,%rdx
ffffffff80210fb2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210fb6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80210fba:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210fbd:	48 89 c7             	mov    %rax,%rdi
ffffffff80210fc0:	e8 99 b7 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210fc5:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80210fcc:	e9 ab 00 00 00       	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>
    /* Hardware related deletion check passed down to the HAL. The driver should make
     * sure that it does not reference any lower level tables. If the driver layer does
     * not conform to this, the deletion of page table is not guaranteed to main kernel
     * consistency, and such consistency must be maintained by the user-level. It is 
     * recommended that the driver layer enforce such consistency. */
    if(__RME_Pgt_Del_Check(Pgt_Del)<0)
ffffffff80210fd1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210fd5:	48 89 c7             	mov    %rax,%rdi
ffffffff80210fd8:	e8 12 5b 01 00       	call   ffffffff80226aef <__RME_Pgt_Del_Check>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Pgt_Del,rme_ptr_t);
ffffffff80210fdd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210fe1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210fe5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(((Pgt_Del->Base)&RME_PGT_TOP)!=0U)
ffffffff80210fe9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210fed:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80210ff1:	83 e0 01             	and    $0x1,%eax
ffffffff80210ff4:	48 85 c0             	test   %rax,%rax
ffffffff80210ff7:	74 1f                	je     ffffffff80211018 <_RME_Pgt_Del+0x38e>
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_TOP(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80210ff9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210ffd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211001:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80211006:	89 c1                	mov    %eax,%ecx
ffffffff80211008:	d3 e2                	shl    %cl,%edx
ffffffff8021100a:	89 d0                	mov    %edx,%eax
ffffffff8021100c:	48 98                	cltq   
ffffffff8021100e:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80211012:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211016:	eb 1d                	jmp    ffffffff80211035 <_RME_Pgt_Del+0x3ab>
    }
    else
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_NOM(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80211018:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021101c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211020:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80211025:	89 c1                	mov    %eax,%ecx
ffffffff80211027:	d3 e2                	shl    %cl,%edx
ffffffff80211029:	89 d0                	mov    %edx,%eax
ffffffff8021102b:	48 98                	cltq   
ffffffff8021102d:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80211031:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Pgt_Del,Type_Stat);
ffffffff80211035:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211039:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8021103d:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80211042:	48 89 ce             	mov    %rcx,%rsi
ffffffff80211045:	48 89 c7             	mov    %rax,%rdi
ffffffff80211048:	e8 11 b7 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021104d:	48 85 c0             	test   %rax,%rax
ffffffff80211050:	0f 94 c0             	sete   %al
ffffffff80211053:	0f b6 c0             	movzbl %al,%eax
ffffffff80211056:	48 85 c0             	test   %rax,%rax
ffffffff80211059:	74 09                	je     ffffffff80211064 <_RME_Pgt_Del+0x3da>
ffffffff8021105b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80211062:	eb 18                	jmp    ffffffff8021107c <_RME_Pgt_Del+0x3f2>

    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kot_Erase(Object,Table_Size)==0);
ffffffff80211064:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80211068:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021106c:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021106f:	48 89 c7             	mov    %rax,%rdi
ffffffff80211072:	e8 97 16 00 00       	call   ffffffff8021270e <_RME_Kot_Erase>

    return 0;
ffffffff80211077:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021107c:	c9                   	leave  
ffffffff8021107d:	c3                   	ret    

ffffffff8021107e <_RME_Pgt_Add>:
                              rme_ptr_t Pos_Dst,
                              rme_ptr_t Flag_Dst,
                              rme_cid_t Cap_Pgt_Src,
                              rme_ptr_t Pos_Src,
                              rme_ptr_t Index)
{
ffffffff8021107e:	f3 0f 1e fa          	endbr64 
ffffffff80211082:	55                   	push   %rbp
ffffffff80211083:	48 89 e5             	mov    %rsp,%rbp
ffffffff80211086:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff8021108a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8021108e:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff80211092:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff80211096:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff8021109a:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
ffffffff8021109e:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Szord_Src;
    rme_ptr_t Szord_Dst;

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff802110a2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802110a6:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802110ab:	48 85 c0             	test   %rax,%rax
ffffffff802110ae:	0f 85 98 00 00 00    	jne    ffffffff8021114c <_RME_Pgt_Add+0xce>
ffffffff802110b4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802110b8:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802110bc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802110c0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802110c3:	0f 96 c0             	setbe  %al
ffffffff802110c6:	0f b6 c0             	movzbl %al,%eax
ffffffff802110c9:	48 85 c0             	test   %rax,%rax
ffffffff802110cc:	74 0c                	je     ffffffff802110da <_RME_Pgt_Add+0x5c>
ffffffff802110ce:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802110d5:	e9 62 05 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff802110da:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802110de:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802110e2:	48 89 c2             	mov    %rax,%rdx
ffffffff802110e5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802110e9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802110ed:	48 01 d0             	add    %rdx,%rax
ffffffff802110f0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802110f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802110f8:	48 8b 00             	mov    (%rax),%rax
ffffffff802110fb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802110ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211103:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211107:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021110a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021110e:	0f 94 c0             	sete   %al
ffffffff80211111:	0f b6 c0             	movzbl %al,%eax
ffffffff80211114:	48 85 c0             	test   %rax,%rax
ffffffff80211117:	74 0c                	je     ffffffff80211125 <_RME_Pgt_Add+0xa7>
ffffffff80211119:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211120:	e9 17 05 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff80211125:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211129:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021112d:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211131:	0f 95 c0             	setne  %al
ffffffff80211134:	0f b6 c0             	movzbl %al,%eax
ffffffff80211137:	48 85 c0             	test   %rax,%rax
ffffffff8021113a:	0f 84 4c 01 00 00    	je     ffffffff8021128c <_RME_Pgt_Add+0x20e>
ffffffff80211140:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211147:	e9 f0 04 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff8021114c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211150:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211154:	48 89 c2             	mov    %rax,%rdx
ffffffff80211157:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021115b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021115f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211162:	0f 93 c0             	setae  %al
ffffffff80211165:	0f b6 c0             	movzbl %al,%eax
ffffffff80211168:	48 85 c0             	test   %rax,%rax
ffffffff8021116b:	74 0c                	je     ffffffff80211179 <_RME_Pgt_Add+0xfb>
ffffffff8021116d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211174:	e9 c3 04 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff80211179:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021117d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211181:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211185:	48 89 c2             	mov    %rax,%rdx
ffffffff80211188:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021118c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211190:	48 01 d0             	add    %rdx,%rax
ffffffff80211193:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211197:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021119b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021119e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802111a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802111a6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802111aa:	0f b7 c0             	movzwl %ax,%eax
ffffffff802111ad:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802111b1:	0f 94 c0             	sete   %al
ffffffff802111b4:	0f b6 c0             	movzbl %al,%eax
ffffffff802111b7:	48 85 c0             	test   %rax,%rax
ffffffff802111ba:	74 0c                	je     ffffffff802111c8 <_RME_Pgt_Add+0x14a>
ffffffff802111bc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802111c3:	e9 74 04 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff802111c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802111cc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802111d0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802111d4:	0f 95 c0             	setne  %al
ffffffff802111d7:	0f b6 c0             	movzbl %al,%eax
ffffffff802111da:	48 85 c0             	test   %rax,%rax
ffffffff802111dd:	74 0c                	je     ffffffff802111eb <_RME_Pgt_Add+0x16d>
ffffffff802111df:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802111e6:	e9 51 04 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff802111eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802111ef:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802111f4:	48 89 c2             	mov    %rax,%rdx
ffffffff802111f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802111fb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802111ff:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211202:	0f 93 c0             	setae  %al
ffffffff80211205:	0f b6 c0             	movzbl %al,%eax
ffffffff80211208:	48 85 c0             	test   %rax,%rax
ffffffff8021120b:	74 0c                	je     ffffffff80211219 <_RME_Pgt_Add+0x19b>
ffffffff8021120d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211214:	e9 23 04 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff80211219:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021121d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211222:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211226:	48 89 c2             	mov    %rax,%rdx
ffffffff80211229:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021122d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211231:	48 01 d0             	add    %rdx,%rax
ffffffff80211234:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211238:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021123c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021123f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80211243:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211247:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021124b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021124e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211252:	0f 94 c0             	sete   %al
ffffffff80211255:	0f b6 c0             	movzbl %al,%eax
ffffffff80211258:	48 85 c0             	test   %rax,%rax
ffffffff8021125b:	74 0c                	je     ffffffff80211269 <_RME_Pgt_Add+0x1eb>
ffffffff8021125d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211264:	e9 d3 03 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff80211269:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021126d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211271:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211275:	0f 95 c0             	setne  %al
ffffffff80211278:	0f b6 c0             	movzbl %al,%eax
ffffffff8021127b:	48 85 c0             	test   %rax,%rax
ffffffff8021127e:	74 0c                	je     ffffffff8021128c <_RME_Pgt_Add+0x20e>
ffffffff80211280:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211287:	e9 b0 03 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
                   struct RME_Cap_Pgt*,Pgt_Dst,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff8021128c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80211290:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211295:	48 85 c0             	test   %rax,%rax
ffffffff80211298:	0f 85 98 00 00 00    	jne    ffffffff80211336 <_RME_Pgt_Add+0x2b8>
ffffffff8021129e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802112a2:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802112a6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802112aa:	48 39 c2             	cmp    %rax,%rdx
ffffffff802112ad:	0f 96 c0             	setbe  %al
ffffffff802112b0:	0f b6 c0             	movzbl %al,%eax
ffffffff802112b3:	48 85 c0             	test   %rax,%rax
ffffffff802112b6:	74 0c                	je     ffffffff802112c4 <_RME_Pgt_Add+0x246>
ffffffff802112b8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802112bf:	e9 78 03 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff802112c4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802112c8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802112cc:	48 89 c2             	mov    %rax,%rdx
ffffffff802112cf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802112d3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802112d7:	48 01 d0             	add    %rdx,%rax
ffffffff802112da:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802112de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802112e2:	48 8b 00             	mov    (%rax),%rax
ffffffff802112e5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802112e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802112ed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802112f1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802112f4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802112f8:	0f 94 c0             	sete   %al
ffffffff802112fb:	0f b6 c0             	movzbl %al,%eax
ffffffff802112fe:	48 85 c0             	test   %rax,%rax
ffffffff80211301:	74 0c                	je     ffffffff8021130f <_RME_Pgt_Add+0x291>
ffffffff80211303:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021130a:	e9 2d 03 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff8021130f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211313:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211317:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021131b:	0f 95 c0             	setne  %al
ffffffff8021131e:	0f b6 c0             	movzbl %al,%eax
ffffffff80211321:	48 85 c0             	test   %rax,%rax
ffffffff80211324:	0f 84 4c 01 00 00    	je     ffffffff80211476 <_RME_Pgt_Add+0x3f8>
ffffffff8021132a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211331:	e9 06 03 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff80211336:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021133a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021133e:	48 89 c2             	mov    %rax,%rdx
ffffffff80211341:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211345:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211349:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021134c:	0f 93 c0             	setae  %al
ffffffff8021134f:	0f b6 c0             	movzbl %al,%eax
ffffffff80211352:	48 85 c0             	test   %rax,%rax
ffffffff80211355:	74 0c                	je     ffffffff80211363 <_RME_Pgt_Add+0x2e5>
ffffffff80211357:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021135e:	e9 d9 02 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff80211363:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80211367:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021136b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021136f:	48 89 c2             	mov    %rax,%rdx
ffffffff80211372:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211376:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021137a:	48 01 d0             	add    %rdx,%rax
ffffffff8021137d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211381:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211385:	48 8b 00             	mov    (%rax),%rax
ffffffff80211388:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021138c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211390:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211394:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211397:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021139b:	0f 94 c0             	sete   %al
ffffffff8021139e:	0f b6 c0             	movzbl %al,%eax
ffffffff802113a1:	48 85 c0             	test   %rax,%rax
ffffffff802113a4:	74 0c                	je     ffffffff802113b2 <_RME_Pgt_Add+0x334>
ffffffff802113a6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802113ad:	e9 8a 02 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff802113b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802113b6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802113ba:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802113be:	0f 95 c0             	setne  %al
ffffffff802113c1:	0f b6 c0             	movzbl %al,%eax
ffffffff802113c4:	48 85 c0             	test   %rax,%rax
ffffffff802113c7:	74 0c                	je     ffffffff802113d5 <_RME_Pgt_Add+0x357>
ffffffff802113c9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802113d0:	e9 67 02 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff802113d5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802113d9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802113de:	48 89 c2             	mov    %rax,%rdx
ffffffff802113e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802113e5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802113e9:	48 39 c2             	cmp    %rax,%rdx
ffffffff802113ec:	0f 93 c0             	setae  %al
ffffffff802113ef:	0f b6 c0             	movzbl %al,%eax
ffffffff802113f2:	48 85 c0             	test   %rax,%rax
ffffffff802113f5:	74 0c                	je     ffffffff80211403 <_RME_Pgt_Add+0x385>
ffffffff802113f7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802113fe:	e9 39 02 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff80211403:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80211407:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021140c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211410:	48 89 c2             	mov    %rax,%rdx
ffffffff80211413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211417:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021141b:	48 01 d0             	add    %rdx,%rax
ffffffff8021141e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211422:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211426:	48 8b 00             	mov    (%rax),%rax
ffffffff80211429:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021142d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211431:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211435:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211438:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021143c:	0f 94 c0             	sete   %al
ffffffff8021143f:	0f b6 c0             	movzbl %al,%eax
ffffffff80211442:	48 85 c0             	test   %rax,%rax
ffffffff80211445:	74 0c                	je     ffffffff80211453 <_RME_Pgt_Add+0x3d5>
ffffffff80211447:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021144e:	e9 e9 01 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
ffffffff80211453:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211457:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021145b:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021145f:	0f 95 c0             	setne  %al
ffffffff80211462:	0f b6 c0             	movzbl %al,%eax
ffffffff80211465:	48 85 c0             	test   %rax,%rax
ffffffff80211468:	74 0c                	je     ffffffff80211476 <_RME_Pgt_Add+0x3f8>
ffffffff8021146a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211471:	e9 c6 01 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
                   struct RME_Cap_Pgt*,Pgt_Src,Type_Stat);
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff80211476:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021147a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021147e:	83 e0 02             	and    $0x2,%eax
ffffffff80211481:	48 85 c0             	test   %rax,%rax
ffffffff80211484:	0f 94 c0             	sete   %al
ffffffff80211487:	0f b6 c0             	movzbl %al,%eax
ffffffff8021148a:	48 85 c0             	test   %rax,%rax
ffffffff8021148d:	74 0c                	je     ffffffff8021149b <_RME_Pgt_Add+0x41d>
ffffffff8021148f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211496:	e9 a1 01 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
    RME_CAP_CHECK(Pgt_Src,RME_PGT_FLAG_ADD_SRC);
ffffffff8021149b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021149f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802114a3:	83 e0 01             	and    $0x1,%eax
ffffffff802114a6:	48 85 c0             	test   %rax,%rax
ffffffff802114a9:	0f 94 c0             	sete   %al
ffffffff802114ac:	0f b6 c0             	movzbl %al,%eax
ffffffff802114af:	48 85 c0             	test   %rax,%rax
ffffffff802114b2:	74 0c                	je     ffffffff802114c0 <_RME_Pgt_Add+0x442>
ffffffff802114b4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802114bb:	e9 7c 01 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
    /* Check the operation range - This is page table specific */
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff802114c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802114c4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802114c8:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff802114cc:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff802114d0:	77 40                	ja     ffffffff80211512 <_RME_Pgt_Add+0x494>
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff802114d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802114d6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802114da:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802114de:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff802114e3:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff802114e7:	72 29                	jb     ffffffff80211512 <_RME_Pgt_Add+0x494>
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff802114e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802114ed:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802114f1:	48 c1 e8 24          	shr    $0x24,%rax
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff802114f5:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
ffffffff802114f9:	77 17                	ja     ffffffff80211512 <_RME_Pgt_Add+0x494>
       (Pos_Src<RME_PGT_FLAG_LOW(Pgt_Src->Head.Flag)))
ffffffff802114fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802114ff:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211503:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211507:	25 ff ff ff 0f       	and    $0xfffffff,%eax
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff8021150c:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
ffffffff80211510:	73 0c                	jae    ffffffff8021151e <_RME_Pgt_Add+0x4a0>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80211512:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211519:	e9 1e 01 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the size order relationship is correct */
    Szord_Dst=RME_PGT_SIZEORD(Pgt_Dst->Order);
ffffffff8021151e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211522:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211526:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021152a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Szord_Src=RME_PGT_SIZEORD(Pgt_Src->Order);
ffffffff8021152e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211532:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211536:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021153a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Szord_Dst>Szord_Src)
ffffffff8021153e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211542:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff80211546:	76 0c                	jbe    ffffffff80211554 <_RME_Pgt_Add+0x4d6>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211548:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8021154f:	e9 e8 00 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the positions are out of range - NMORD is restricted, no UB */
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff80211554:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211558:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021155c:	89 c2                	mov    %eax,%edx
ffffffff8021155e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80211562:	89 d1                	mov    %edx,%ecx
ffffffff80211564:	48 d3 e8             	shr    %cl,%rax
ffffffff80211567:	48 85 c0             	test   %rax,%rax
ffffffff8021156a:	75 18                	jne    ffffffff80211584 <_RME_Pgt_Add+0x506>
       ((Pos_Src>>RME_PGT_NUMORD(Pgt_Src->Order))!=0U))
ffffffff8021156c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211570:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211574:	89 c2                	mov    %eax,%edx
ffffffff80211576:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8021157a:	89 d1                	mov    %edx,%ecx
ffffffff8021157c:	48 d3 e8             	shr    %cl,%rax
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff8021157f:	48 85 c0             	test   %rax,%rax
ffffffff80211582:	74 0c                	je     ffffffff80211590 <_RME_Pgt_Add+0x512>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211584:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8021158b:	e9 ac 00 00 00       	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the source subposition is out of range - avoid UB */
    if(Szord_Src<RME_WORD_BIT)
ffffffff80211590:	48 83 7d d0 3f       	cmpq   $0x3f,-0x30(%rbp)
ffffffff80211595:	77 29                	ja     ffffffff802115c0 <_RME_Pgt_Add+0x542>
    {
        RME_COV_MARKER();
        
        /* No UB because Szord_Dst<=Szord_Src */
        if(RME_POW2(Szord_Src)<=(Index<<Szord_Dst))
ffffffff80211597:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021159b:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802115a0:	89 c1                	mov    %eax,%ecx
ffffffff802115a2:	48 d3 e2             	shl    %cl,%rdx
ffffffff802115a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802115a9:	89 c1                	mov    %eax,%ecx
ffffffff802115ab:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802115af:	48 d3 e0             	shl    %cl,%rax
ffffffff802115b2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802115b5:	77 09                	ja     ffffffff802115c0 <_RME_Pgt_Add+0x542>
        {
            RME_COV_MARKER();

            return RME_ERR_PGT_ADDR;
ffffffff802115b7:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802115be:	eb 7c                	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the physical address and RME standard flags of that source page */
    if(__RME_Pgt_Lookup(Pgt_Src,Pos_Src,&Paddr_Src,&Flag_Src)<0)
ffffffff802115c0:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
ffffffff802115c4:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
ffffffff802115c8:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
ffffffff802115cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802115d0:	48 89 c7             	mov    %rax,%rdi
ffffffff802115d3:	e8 fa 58 01 00       	call   ffffffff80226ed2 <__RME_Pgt_Lookup>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Calculate the destination physical address - avoid UB */
    if(Szord_Dst<RME_WORD_BIT)
ffffffff802115d8:	48 83 7d d8 3f       	cmpq   $0x3f,-0x28(%rbp)
ffffffff802115dd:	77 1f                	ja     ffffffff802115fe <_RME_Pgt_Add+0x580>
    {
        RME_COV_MARKER();
        
        Paddr_Dst=Paddr_Src+(Index<<Szord_Dst);
ffffffff802115df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802115e3:	89 c2                	mov    %eax,%edx
ffffffff802115e5:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802115e9:	89 d1                	mov    %edx,%ecx
ffffffff802115eb:	48 d3 e0             	shl    %cl,%rax
ffffffff802115ee:	48 89 c2             	mov    %rax,%rdx
ffffffff802115f1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802115f5:	48 01 d0             	add    %rdx,%rax
ffffffff802115f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802115fc:	eb 08                	jmp    ffffffff80211606 <_RME_Pgt_Add+0x588>
    /* The destination is also full range */
    else
    {
        RME_COV_MARKER();
        
        Paddr_Dst=Paddr_Src;
ffffffff802115fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211602:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        }
#endif
    }
    
    /* Analyze the flags - we do not allow expansion of access permissions */
    if(((Flag_Dst)&(~Flag_Src))!=0U)
ffffffff80211606:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021160a:	48 f7 d0             	not    %rax
ffffffff8021160d:	48 23 45 a0          	and    -0x60(%rbp),%rax
ffffffff80211611:	48 85 c0             	test   %rax,%rax
ffffffff80211614:	74 09                	je     ffffffff8021161f <_RME_Pgt_Add+0x5a1>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_PERM;
ffffffff80211616:	48 c7 c0 98 ff ff ff 	mov    $0xffffffffffffff98,%rax
ffffffff8021161d:	eb 1d                	jmp    ffffffff8021163c <_RME_Pgt_Add+0x5be>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Map(Pgt_Dst,Paddr_Dst,Pos_Dst,Flag_Dst)<0)
ffffffff8021161f:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
ffffffff80211623:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80211627:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8021162b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021162f:	48 89 c7             	mov    %rax,%rdi
ffffffff80211632:	e8 cf 54 01 00       	call   ffffffff80226b06 <__RME_Pgt_Page_Map>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff80211637:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021163c:	c9                   	leave  
ffffffff8021163d:	c3                   	ret    

ffffffff8021163e <_RME_Pgt_Rem>:
******************************************************************************/
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Rem(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Pgt,
                              rme_ptr_t Pos)
{
ffffffff8021163e:	f3 0f 1e fa          	endbr64 
ffffffff80211642:	55                   	push   %rbp
ffffffff80211643:	48 89 e5             	mov    %rsp,%rbp
ffffffff80211646:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021164a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021164e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80211652:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    struct RME_Cap_Pgt* Pgt_Rem;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff80211656:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021165a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021165f:	48 85 c0             	test   %rax,%rax
ffffffff80211662:	0f 85 98 00 00 00    	jne    ffffffff80211700 <_RME_Pgt_Rem+0xc2>
ffffffff80211668:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021166c:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80211670:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211674:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211677:	0f 96 c0             	setbe  %al
ffffffff8021167a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021167d:	48 85 c0             	test   %rax,%rax
ffffffff80211680:	74 0c                	je     ffffffff8021168e <_RME_Pgt_Rem+0x50>
ffffffff80211682:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211689:	e9 3f 02 00 00       	jmp    ffffffff802118cd <_RME_Pgt_Rem+0x28f>
ffffffff8021168e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211692:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211696:	48 89 c2             	mov    %rax,%rdx
ffffffff80211699:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021169d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802116a1:	48 01 d0             	add    %rdx,%rax
ffffffff802116a4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802116a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802116ac:	48 8b 00             	mov    (%rax),%rax
ffffffff802116af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802116b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802116b7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802116bb:	0f b7 c0             	movzwl %ax,%eax
ffffffff802116be:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802116c2:	0f 94 c0             	sete   %al
ffffffff802116c5:	0f b6 c0             	movzbl %al,%eax
ffffffff802116c8:	48 85 c0             	test   %rax,%rax
ffffffff802116cb:	74 0c                	je     ffffffff802116d9 <_RME_Pgt_Rem+0x9b>
ffffffff802116cd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802116d4:	e9 f4 01 00 00       	jmp    ffffffff802118cd <_RME_Pgt_Rem+0x28f>
ffffffff802116d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802116dd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802116e1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802116e5:	0f 95 c0             	setne  %al
ffffffff802116e8:	0f b6 c0             	movzbl %al,%eax
ffffffff802116eb:	48 85 c0             	test   %rax,%rax
ffffffff802116ee:	0f 84 4c 01 00 00    	je     ffffffff80211840 <_RME_Pgt_Rem+0x202>
ffffffff802116f4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802116fb:	e9 cd 01 00 00       	jmp    ffffffff802118cd <_RME_Pgt_Rem+0x28f>
ffffffff80211700:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211704:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211708:	48 89 c2             	mov    %rax,%rdx
ffffffff8021170b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021170f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211713:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211716:	0f 93 c0             	setae  %al
ffffffff80211719:	0f b6 c0             	movzbl %al,%eax
ffffffff8021171c:	48 85 c0             	test   %rax,%rax
ffffffff8021171f:	74 0c                	je     ffffffff8021172d <_RME_Pgt_Rem+0xef>
ffffffff80211721:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211728:	e9 a0 01 00 00       	jmp    ffffffff802118cd <_RME_Pgt_Rem+0x28f>
ffffffff8021172d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211731:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211735:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211739:	48 89 c2             	mov    %rax,%rdx
ffffffff8021173c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211740:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211744:	48 01 d0             	add    %rdx,%rax
ffffffff80211747:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021174b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021174f:	48 8b 00             	mov    (%rax),%rax
ffffffff80211752:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211756:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021175a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021175e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211761:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211765:	0f 94 c0             	sete   %al
ffffffff80211768:	0f b6 c0             	movzbl %al,%eax
ffffffff8021176b:	48 85 c0             	test   %rax,%rax
ffffffff8021176e:	74 0c                	je     ffffffff8021177c <_RME_Pgt_Rem+0x13e>
ffffffff80211770:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211777:	e9 51 01 00 00       	jmp    ffffffff802118cd <_RME_Pgt_Rem+0x28f>
ffffffff8021177c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211780:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211784:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211788:	0f 95 c0             	setne  %al
ffffffff8021178b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021178e:	48 85 c0             	test   %rax,%rax
ffffffff80211791:	74 0c                	je     ffffffff8021179f <_RME_Pgt_Rem+0x161>
ffffffff80211793:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021179a:	e9 2e 01 00 00       	jmp    ffffffff802118cd <_RME_Pgt_Rem+0x28f>
ffffffff8021179f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802117a3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802117a8:	48 89 c2             	mov    %rax,%rdx
ffffffff802117ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117af:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802117b3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802117b6:	0f 93 c0             	setae  %al
ffffffff802117b9:	0f b6 c0             	movzbl %al,%eax
ffffffff802117bc:	48 85 c0             	test   %rax,%rax
ffffffff802117bf:	74 0c                	je     ffffffff802117cd <_RME_Pgt_Rem+0x18f>
ffffffff802117c1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802117c8:	e9 00 01 00 00       	jmp    ffffffff802118cd <_RME_Pgt_Rem+0x28f>
ffffffff802117cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802117d1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802117d6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802117da:	48 89 c2             	mov    %rax,%rdx
ffffffff802117dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117e1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802117e5:	48 01 d0             	add    %rdx,%rax
ffffffff802117e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802117ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117f0:	48 8b 00             	mov    (%rax),%rax
ffffffff802117f3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802117f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802117fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802117ff:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211802:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211806:	0f 94 c0             	sete   %al
ffffffff80211809:	0f b6 c0             	movzbl %al,%eax
ffffffff8021180c:	48 85 c0             	test   %rax,%rax
ffffffff8021180f:	74 0c                	je     ffffffff8021181d <_RME_Pgt_Rem+0x1df>
ffffffff80211811:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211818:	e9 b0 00 00 00       	jmp    ffffffff802118cd <_RME_Pgt_Rem+0x28f>
ffffffff8021181d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211821:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211825:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211829:	0f 95 c0             	setne  %al
ffffffff8021182c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021182f:	48 85 c0             	test   %rax,%rax
ffffffff80211832:	74 0c                	je     ffffffff80211840 <_RME_Pgt_Rem+0x202>
ffffffff80211834:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021183b:	e9 8d 00 00 00       	jmp    ffffffff802118cd <_RME_Pgt_Rem+0x28f>
                   struct RME_Cap_Pgt*,Pgt_Rem,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80211840:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211844:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211848:	83 e0 04             	and    $0x4,%eax
ffffffff8021184b:	48 85 c0             	test   %rax,%rax
ffffffff8021184e:	0f 94 c0             	sete   %al
ffffffff80211851:	0f b6 c0             	movzbl %al,%eax
ffffffff80211854:	48 85 c0             	test   %rax,%rax
ffffffff80211857:	74 09                	je     ffffffff80211862 <_RME_Pgt_Rem+0x224>
ffffffff80211859:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211860:	eb 6b                	jmp    ffffffff802118cd <_RME_Pgt_Rem+0x28f>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80211862:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211866:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021186a:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8021186e:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80211872:	77 17                	ja     ffffffff8021188b <_RME_Pgt_Rem+0x24d>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Rem->Head.Flag)))
ffffffff80211874:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211878:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021187c:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211880:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80211885:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80211889:	73 09                	jae    ffffffff80211894 <_RME_Pgt_Rem+0x256>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff8021188b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211892:	eb 39                	jmp    ffffffff802118cd <_RME_Pgt_Rem+0x28f>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Rem->Order))!=0U)
ffffffff80211894:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211898:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021189c:	89 c2                	mov    %eax,%edx
ffffffff8021189e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802118a2:	89 d1                	mov    %edx,%ecx
ffffffff802118a4:	48 d3 e8             	shr    %cl,%rax
ffffffff802118a7:	48 85 c0             	test   %rax,%rax
ffffffff802118aa:	74 09                	je     ffffffff802118b5 <_RME_Pgt_Rem+0x277>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff802118ac:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802118b3:	eb 18                	jmp    ffffffff802118cd <_RME_Pgt_Rem+0x28f>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Unmap(Pgt_Rem,Pos)<0)
ffffffff802118b5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802118b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802118bd:	48 89 d6             	mov    %rdx,%rsi
ffffffff802118c0:	48 89 c7             	mov    %rax,%rdi
ffffffff802118c3:	e8 49 53 01 00       	call   ffffffff80226c11 <__RME_Pgt_Page_Unmap>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff802118c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802118cd:	c9                   	leave  
ffffffff802118ce:	c3                   	ret    

ffffffff802118cf <_RME_Pgt_Con>:
static rme_ret_t _RME_Pgt_Con(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Pgt_Parent,
                              rme_ptr_t Pos,
                              rme_cid_t Cap_Pgt_Child,
                              rme_ptr_t Flag_Child)
{
ffffffff802118cf:	f3 0f 1e fa          	endbr64 
ffffffff802118d3:	55                   	push   %rbp
ffffffff802118d4:	48 89 e5             	mov    %rsp,%rbp
ffffffff802118d7:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff802118db:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff802118df:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff802118e3:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff802118e7:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff802118eb:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
    rme_ptr_t End_Parent;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff802118ef:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802118f3:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802118f8:	48 85 c0             	test   %rax,%rax
ffffffff802118fb:	0f 85 98 00 00 00    	jne    ffffffff80211999 <_RME_Pgt_Con+0xca>
ffffffff80211901:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211905:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80211909:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021190d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211910:	0f 96 c0             	setbe  %al
ffffffff80211913:	0f b6 c0             	movzbl %al,%eax
ffffffff80211916:	48 85 c0             	test   %rax,%rax
ffffffff80211919:	74 0c                	je     ffffffff80211927 <_RME_Pgt_Con+0x58>
ffffffff8021191b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211922:	e9 1f 05 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211927:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021192b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021192f:	48 89 c2             	mov    %rax,%rdx
ffffffff80211932:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211936:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021193a:	48 01 d0             	add    %rdx,%rax
ffffffff8021193d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211941:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211945:	48 8b 00             	mov    (%rax),%rax
ffffffff80211948:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021194c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211950:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211954:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211957:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021195b:	0f 94 c0             	sete   %al
ffffffff8021195e:	0f b6 c0             	movzbl %al,%eax
ffffffff80211961:	48 85 c0             	test   %rax,%rax
ffffffff80211964:	74 0c                	je     ffffffff80211972 <_RME_Pgt_Con+0xa3>
ffffffff80211966:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021196d:	e9 d4 04 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211972:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211976:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021197a:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021197e:	0f 95 c0             	setne  %al
ffffffff80211981:	0f b6 c0             	movzbl %al,%eax
ffffffff80211984:	48 85 c0             	test   %rax,%rax
ffffffff80211987:	0f 84 4c 01 00 00    	je     ffffffff80211ad9 <_RME_Pgt_Con+0x20a>
ffffffff8021198d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211994:	e9 ad 04 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211999:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021199d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802119a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802119a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802119a8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802119ac:	48 39 c2             	cmp    %rax,%rdx
ffffffff802119af:	0f 93 c0             	setae  %al
ffffffff802119b2:	0f b6 c0             	movzbl %al,%eax
ffffffff802119b5:	48 85 c0             	test   %rax,%rax
ffffffff802119b8:	74 0c                	je     ffffffff802119c6 <_RME_Pgt_Con+0xf7>
ffffffff802119ba:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802119c1:	e9 80 04 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff802119c6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802119ca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802119ce:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802119d2:	48 89 c2             	mov    %rax,%rdx
ffffffff802119d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802119d9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802119dd:	48 01 d0             	add    %rdx,%rax
ffffffff802119e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802119e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802119e8:	48 8b 00             	mov    (%rax),%rax
ffffffff802119eb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802119ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802119f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802119f7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802119fa:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802119fe:	0f 94 c0             	sete   %al
ffffffff80211a01:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a04:	48 85 c0             	test   %rax,%rax
ffffffff80211a07:	74 0c                	je     ffffffff80211a15 <_RME_Pgt_Con+0x146>
ffffffff80211a09:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211a10:	e9 31 04 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211a15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211a19:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211a1d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211a21:	0f 95 c0             	setne  %al
ffffffff80211a24:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a27:	48 85 c0             	test   %rax,%rax
ffffffff80211a2a:	74 0c                	je     ffffffff80211a38 <_RME_Pgt_Con+0x169>
ffffffff80211a2c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211a33:	e9 0e 04 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211a38:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211a3c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211a41:	48 89 c2             	mov    %rax,%rdx
ffffffff80211a44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211a48:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211a4c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211a4f:	0f 93 c0             	setae  %al
ffffffff80211a52:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a55:	48 85 c0             	test   %rax,%rax
ffffffff80211a58:	74 0c                	je     ffffffff80211a66 <_RME_Pgt_Con+0x197>
ffffffff80211a5a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211a61:	e9 e0 03 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211a66:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211a6a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211a6f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211a73:	48 89 c2             	mov    %rax,%rdx
ffffffff80211a76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211a7a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211a7e:	48 01 d0             	add    %rdx,%rax
ffffffff80211a81:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211a85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211a89:	48 8b 00             	mov    (%rax),%rax
ffffffff80211a8c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211a90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211a94:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211a98:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211a9b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211a9f:	0f 94 c0             	sete   %al
ffffffff80211aa2:	0f b6 c0             	movzbl %al,%eax
ffffffff80211aa5:	48 85 c0             	test   %rax,%rax
ffffffff80211aa8:	74 0c                	je     ffffffff80211ab6 <_RME_Pgt_Con+0x1e7>
ffffffff80211aaa:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211ab1:	e9 90 03 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211ab6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211aba:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211abe:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211ac2:	0f 95 c0             	setne  %al
ffffffff80211ac5:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ac8:	48 85 c0             	test   %rax,%rax
ffffffff80211acb:	74 0c                	je     ffffffff80211ad9 <_RME_Pgt_Con+0x20a>
ffffffff80211acd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211ad4:	e9 6d 03 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff80211ad9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211add:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211ae2:	48 85 c0             	test   %rax,%rax
ffffffff80211ae5:	0f 85 98 00 00 00    	jne    ffffffff80211b83 <_RME_Pgt_Con+0x2b4>
ffffffff80211aeb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211aef:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80211af3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211af7:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211afa:	0f 96 c0             	setbe  %al
ffffffff80211afd:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b00:	48 85 c0             	test   %rax,%rax
ffffffff80211b03:	74 0c                	je     ffffffff80211b11 <_RME_Pgt_Con+0x242>
ffffffff80211b05:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211b0c:	e9 35 03 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211b11:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211b15:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211b19:	48 89 c2             	mov    %rax,%rdx
ffffffff80211b1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211b20:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211b24:	48 01 d0             	add    %rdx,%rax
ffffffff80211b27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211b2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211b2f:	48 8b 00             	mov    (%rax),%rax
ffffffff80211b32:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211b36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211b3a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211b3e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211b41:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211b45:	0f 94 c0             	sete   %al
ffffffff80211b48:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b4b:	48 85 c0             	test   %rax,%rax
ffffffff80211b4e:	74 0c                	je     ffffffff80211b5c <_RME_Pgt_Con+0x28d>
ffffffff80211b50:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211b57:	e9 ea 02 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211b5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211b60:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211b64:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211b68:	0f 95 c0             	setne  %al
ffffffff80211b6b:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b6e:	48 85 c0             	test   %rax,%rax
ffffffff80211b71:	0f 84 4c 01 00 00    	je     ffffffff80211cc3 <_RME_Pgt_Con+0x3f4>
ffffffff80211b77:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211b7e:	e9 c3 02 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211b83:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211b87:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211b8b:	48 89 c2             	mov    %rax,%rdx
ffffffff80211b8e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211b92:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211b96:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211b99:	0f 93 c0             	setae  %al
ffffffff80211b9c:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b9f:	48 85 c0             	test   %rax,%rax
ffffffff80211ba2:	74 0c                	je     ffffffff80211bb0 <_RME_Pgt_Con+0x2e1>
ffffffff80211ba4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211bab:	e9 96 02 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211bb0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211bb4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211bb8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211bbc:	48 89 c2             	mov    %rax,%rdx
ffffffff80211bbf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211bc3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211bc7:	48 01 d0             	add    %rdx,%rax
ffffffff80211bca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211bce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211bd2:	48 8b 00             	mov    (%rax),%rax
ffffffff80211bd5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211bd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211bdd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211be1:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211be4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211be8:	0f 94 c0             	sete   %al
ffffffff80211beb:	0f b6 c0             	movzbl %al,%eax
ffffffff80211bee:	48 85 c0             	test   %rax,%rax
ffffffff80211bf1:	74 0c                	je     ffffffff80211bff <_RME_Pgt_Con+0x330>
ffffffff80211bf3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211bfa:	e9 47 02 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211bff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211c03:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211c07:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211c0b:	0f 95 c0             	setne  %al
ffffffff80211c0e:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c11:	48 85 c0             	test   %rax,%rax
ffffffff80211c14:	74 0c                	je     ffffffff80211c22 <_RME_Pgt_Con+0x353>
ffffffff80211c16:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211c1d:	e9 24 02 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211c22:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211c26:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211c2b:	48 89 c2             	mov    %rax,%rdx
ffffffff80211c2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211c32:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211c36:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211c39:	0f 93 c0             	setae  %al
ffffffff80211c3c:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c3f:	48 85 c0             	test   %rax,%rax
ffffffff80211c42:	74 0c                	je     ffffffff80211c50 <_RME_Pgt_Con+0x381>
ffffffff80211c44:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211c4b:	e9 f6 01 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211c50:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211c54:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211c59:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211c5d:	48 89 c2             	mov    %rax,%rdx
ffffffff80211c60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211c64:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211c68:	48 01 d0             	add    %rdx,%rax
ffffffff80211c6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211c6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211c73:	48 8b 00             	mov    (%rax),%rax
ffffffff80211c76:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211c7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211c7e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211c82:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211c85:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211c89:	0f 94 c0             	sete   %al
ffffffff80211c8c:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c8f:	48 85 c0             	test   %rax,%rax
ffffffff80211c92:	74 0c                	je     ffffffff80211ca0 <_RME_Pgt_Con+0x3d1>
ffffffff80211c94:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211c9b:	e9 a6 01 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
ffffffff80211ca0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211ca4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211ca8:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211cac:	0f 95 c0             	setne  %al
ffffffff80211caf:	0f b6 c0             	movzbl %al,%eax
ffffffff80211cb2:	48 85 c0             	test   %rax,%rax
ffffffff80211cb5:	74 0c                	je     ffffffff80211cc3 <_RME_Pgt_Con+0x3f4>
ffffffff80211cb7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211cbe:	e9 83 01 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
                   struct RME_Cap_Pgt*,Pgt_Child,Type_Stat);
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff80211cc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211cc7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211ccb:	83 e0 10             	and    $0x10,%eax
ffffffff80211cce:	48 85 c0             	test   %rax,%rax
ffffffff80211cd1:	0f 94 c0             	sete   %al
ffffffff80211cd4:	0f b6 c0             	movzbl %al,%eax
ffffffff80211cd7:	48 85 c0             	test   %rax,%rax
ffffffff80211cda:	74 0c                	je     ffffffff80211ce8 <_RME_Pgt_Con+0x419>
ffffffff80211cdc:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211ce3:	e9 5e 01 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff80211ce8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211cec:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211cf0:	83 e0 08             	and    $0x8,%eax
ffffffff80211cf3:	48 85 c0             	test   %rax,%rax
ffffffff80211cf6:	0f 94 c0             	sete   %al
ffffffff80211cf9:	0f b6 c0             	movzbl %al,%eax
ffffffff80211cfc:	48 85 c0             	test   %rax,%rax
ffffffff80211cff:	74 0c                	je     ffffffff80211d0d <_RME_Pgt_Con+0x43e>
ffffffff80211d01:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211d08:	e9 39 01 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211d0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d11:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211d15:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff80211d19:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
ffffffff80211d1d:	77 17                	ja     ffffffff80211d36 <_RME_Pgt_Con+0x467>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff80211d1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d23:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211d27:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211d2b:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211d30:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
ffffffff80211d34:	73 0c                	jae    ffffffff80211d42 <_RME_Pgt_Con+0x473>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80211d36:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211d3d:	e9 04 01 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff80211d42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d46:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211d4a:	89 c2                	mov    %eax,%edx
ffffffff80211d4c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211d50:	89 d1                	mov    %edx,%ecx
ffffffff80211d52:	48 d3 e8             	shr    %cl,%rax
ffffffff80211d55:	48 85 c0             	test   %rax,%rax
ffffffff80211d58:	74 0c                	je     ffffffff80211d66 <_RME_Pgt_Con+0x497>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211d5a:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211d61:	e9 e0 00 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the child table falls within one slot of the parent table */
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff80211d66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211d6a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211d6e:	89 c2                	mov    %eax,%edx
ffffffff80211d70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211d74:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211d78:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211d7c:	48 01 d0             	add    %rdx,%rax
ffffffff80211d7f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff80211d83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d87:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211d8b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211d8f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Szord_Parent<Order_Child)
ffffffff80211d93:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211d97:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80211d9b:	73 0c                	jae    ffffffff80211da9 <_RME_Pgt_Con+0x4da>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff80211d9d:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211da4:	e9 9d 00 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
        RME_COV_MARKER();
        /* No action required */
    }
#else
    /* Force no path compression when virtual mappings are enabled */
    if(Szord_Parent!=Order_Child)
ffffffff80211da9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211dad:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80211db1:	74 0c                	je     ffffffff80211dbf <_RME_Pgt_Con+0x4f0>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211db3:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211dba:	e9 87 00 00 00       	jmp    ffffffff80211e46 <_RME_Pgt_Con+0x577>
    }
#endif

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff80211dbf:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff80211dc3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80211dc7:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff80211dcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211dcf:	48 89 c7             	mov    %rax,%rdi
ffffffff80211dd2:	e8 10 4f 01 00       	call   ffffffff80226ce7 <__RME_Pgt_Pgdir_Map>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff80211dd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211ddb:	48 8b 00             	mov    (%rax),%rax
ffffffff80211dde:	89 c0                	mov    %eax,%eax
ffffffff80211de0:	48 85 c0             	test   %rax,%rax
ffffffff80211de3:	74 0a                	je     ffffffff80211def <_RME_Pgt_Con+0x520>
ffffffff80211de5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211de9:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80211ded:	eb 04                	jmp    ffffffff80211df3 <_RME_Pgt_Con+0x524>
ffffffff80211def:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211df3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1);
ffffffff80211df7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211dfb:	48 83 c0 08          	add    $0x8,%rax
ffffffff80211dff:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80211e04:	48 89 c7             	mov    %rax,%rdi
ffffffff80211e07:	e8 87 a9 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff80211e0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211e10:	48 8b 00             	mov    (%rax),%rax
ffffffff80211e13:	89 c0                	mov    %eax,%eax
ffffffff80211e15:	48 85 c0             	test   %rax,%rax
ffffffff80211e18:	74 0a                	je     ffffffff80211e24 <_RME_Pgt_Con+0x555>
ffffffff80211e1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211e1e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80211e22:	eb 04                	jmp    ffffffff80211e28 <_RME_Pgt_Con+0x559>
ffffffff80211e24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211e28:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1);
ffffffff80211e2c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211e30:	48 83 c0 08          	add    $0x8,%rax
ffffffff80211e34:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80211e39:	48 89 c7             	mov    %rax,%rdi
ffffffff80211e3c:	e8 52 a9 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80211e41:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80211e46:	c9                   	leave  
ffffffff80211e47:	c3                   	ret    

ffffffff80211e48 <_RME_Pgt_Des>:
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Des(struct RME_Cap_Cpt* Cpt, 
                              rme_cid_t Cap_Pgt_Parent,
                              rme_ptr_t Pos,
                              rme_cid_t Cap_Pgt_Child)
{
ffffffff80211e48:	f3 0f 1e fa          	endbr64 
ffffffff80211e4c:	55                   	push   %rbp
ffffffff80211e4d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80211e50:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80211e54:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80211e58:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80211e5c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80211e60:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    struct RME_Cap_Pgt* Pgt_Child;
    struct RME_Cap_Pgt* Pgt_Root;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff80211e64:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211e68:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211e6d:	48 85 c0             	test   %rax,%rax
ffffffff80211e70:	0f 85 98 00 00 00    	jne    ffffffff80211f0e <_RME_Pgt_Des+0xc6>
ffffffff80211e76:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211e7a:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80211e7e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211e82:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211e85:	0f 96 c0             	setbe  %al
ffffffff80211e88:	0f b6 c0             	movzbl %al,%eax
ffffffff80211e8b:	48 85 c0             	test   %rax,%rax
ffffffff80211e8e:	74 0c                	je     ffffffff80211e9c <_RME_Pgt_Des+0x54>
ffffffff80211e90:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211e97:	e9 c9 04 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff80211e9c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211ea0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211ea4:	48 89 c2             	mov    %rax,%rdx
ffffffff80211ea7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211eab:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211eaf:	48 01 d0             	add    %rdx,%rax
ffffffff80211eb2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211eb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211eba:	48 8b 00             	mov    (%rax),%rax
ffffffff80211ebd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211ec1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211ec5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211ec9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211ecc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211ed0:	0f 94 c0             	sete   %al
ffffffff80211ed3:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ed6:	48 85 c0             	test   %rax,%rax
ffffffff80211ed9:	74 0c                	je     ffffffff80211ee7 <_RME_Pgt_Des+0x9f>
ffffffff80211edb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211ee2:	e9 7e 04 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff80211ee7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211eeb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211eef:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211ef3:	0f 95 c0             	setne  %al
ffffffff80211ef6:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ef9:	48 85 c0             	test   %rax,%rax
ffffffff80211efc:	0f 84 4c 01 00 00    	je     ffffffff8021204e <_RME_Pgt_Des+0x206>
ffffffff80211f02:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211f09:	e9 57 04 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff80211f0e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211f12:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211f16:	48 89 c2             	mov    %rax,%rdx
ffffffff80211f19:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211f1d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211f21:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211f24:	0f 93 c0             	setae  %al
ffffffff80211f27:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f2a:	48 85 c0             	test   %rax,%rax
ffffffff80211f2d:	74 0c                	je     ffffffff80211f3b <_RME_Pgt_Des+0xf3>
ffffffff80211f2f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211f36:	e9 2a 04 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff80211f3b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211f3f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211f43:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211f47:	48 89 c2             	mov    %rax,%rdx
ffffffff80211f4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211f4e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211f52:	48 01 d0             	add    %rdx,%rax
ffffffff80211f55:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211f5d:	48 8b 00             	mov    (%rax),%rax
ffffffff80211f60:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211f64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211f68:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211f6c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211f6f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211f73:	0f 94 c0             	sete   %al
ffffffff80211f76:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f79:	48 85 c0             	test   %rax,%rax
ffffffff80211f7c:	74 0c                	je     ffffffff80211f8a <_RME_Pgt_Des+0x142>
ffffffff80211f7e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211f85:	e9 db 03 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff80211f8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211f8e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211f92:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211f96:	0f 95 c0             	setne  %al
ffffffff80211f99:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f9c:	48 85 c0             	test   %rax,%rax
ffffffff80211f9f:	74 0c                	je     ffffffff80211fad <_RME_Pgt_Des+0x165>
ffffffff80211fa1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211fa8:	e9 b8 03 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff80211fad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211fb1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211fb6:	48 89 c2             	mov    %rax,%rdx
ffffffff80211fb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211fbd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211fc1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211fc4:	0f 93 c0             	setae  %al
ffffffff80211fc7:	0f b6 c0             	movzbl %al,%eax
ffffffff80211fca:	48 85 c0             	test   %rax,%rax
ffffffff80211fcd:	74 0c                	je     ffffffff80211fdb <_RME_Pgt_Des+0x193>
ffffffff80211fcf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211fd6:	e9 8a 03 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff80211fdb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211fdf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211fe4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211fe8:	48 89 c2             	mov    %rax,%rdx
ffffffff80211feb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211fef:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211ff3:	48 01 d0             	add    %rdx,%rax
ffffffff80211ff6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211ffa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211ffe:	48 8b 00             	mov    (%rax),%rax
ffffffff80212001:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80212005:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212009:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021200d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212010:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212014:	0f 94 c0             	sete   %al
ffffffff80212017:	0f b6 c0             	movzbl %al,%eax
ffffffff8021201a:	48 85 c0             	test   %rax,%rax
ffffffff8021201d:	74 0c                	je     ffffffff8021202b <_RME_Pgt_Des+0x1e3>
ffffffff8021201f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212026:	e9 3a 03 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff8021202b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021202f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212033:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212037:	0f 95 c0             	setne  %al
ffffffff8021203a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021203d:	48 85 c0             	test   %rax,%rax
ffffffff80212040:	74 0c                	je     ffffffff8021204e <_RME_Pgt_Des+0x206>
ffffffff80212042:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212049:	e9 17 03 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff8021204e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212052:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80212057:	48 85 c0             	test   %rax,%rax
ffffffff8021205a:	0f 85 98 00 00 00    	jne    ffffffff802120f8 <_RME_Pgt_Des+0x2b0>
ffffffff80212060:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212064:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80212068:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021206c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021206f:	0f 96 c0             	setbe  %al
ffffffff80212072:	0f b6 c0             	movzbl %al,%eax
ffffffff80212075:	48 85 c0             	test   %rax,%rax
ffffffff80212078:	74 0c                	je     ffffffff80212086 <_RME_Pgt_Des+0x23e>
ffffffff8021207a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212081:	e9 df 02 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff80212086:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021208a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021208e:	48 89 c2             	mov    %rax,%rdx
ffffffff80212091:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212095:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212099:	48 01 d0             	add    %rdx,%rax
ffffffff8021209c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802120a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802120a4:	48 8b 00             	mov    (%rax),%rax
ffffffff802120a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802120ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802120af:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802120b3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802120b6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802120ba:	0f 94 c0             	sete   %al
ffffffff802120bd:	0f b6 c0             	movzbl %al,%eax
ffffffff802120c0:	48 85 c0             	test   %rax,%rax
ffffffff802120c3:	74 0c                	je     ffffffff802120d1 <_RME_Pgt_Des+0x289>
ffffffff802120c5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802120cc:	e9 94 02 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff802120d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802120d5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802120d9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802120dd:	0f 95 c0             	setne  %al
ffffffff802120e0:	0f b6 c0             	movzbl %al,%eax
ffffffff802120e3:	48 85 c0             	test   %rax,%rax
ffffffff802120e6:	0f 84 4c 01 00 00    	je     ffffffff80212238 <_RME_Pgt_Des+0x3f0>
ffffffff802120ec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802120f3:	e9 6d 02 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff802120f8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802120fc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80212100:	48 89 c2             	mov    %rax,%rdx
ffffffff80212103:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212107:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021210b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021210e:	0f 93 c0             	setae  %al
ffffffff80212111:	0f b6 c0             	movzbl %al,%eax
ffffffff80212114:	48 85 c0             	test   %rax,%rax
ffffffff80212117:	74 0c                	je     ffffffff80212125 <_RME_Pgt_Des+0x2dd>
ffffffff80212119:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212120:	e9 40 02 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff80212125:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212129:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021212d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212131:	48 89 c2             	mov    %rax,%rdx
ffffffff80212134:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212138:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021213c:	48 01 d0             	add    %rdx,%rax
ffffffff8021213f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212143:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212147:	48 8b 00             	mov    (%rax),%rax
ffffffff8021214a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021214e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212152:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212156:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212159:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021215d:	0f 94 c0             	sete   %al
ffffffff80212160:	0f b6 c0             	movzbl %al,%eax
ffffffff80212163:	48 85 c0             	test   %rax,%rax
ffffffff80212166:	74 0c                	je     ffffffff80212174 <_RME_Pgt_Des+0x32c>
ffffffff80212168:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021216f:	e9 f1 01 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff80212174:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212178:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021217c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212180:	0f 95 c0             	setne  %al
ffffffff80212183:	0f b6 c0             	movzbl %al,%eax
ffffffff80212186:	48 85 c0             	test   %rax,%rax
ffffffff80212189:	74 0c                	je     ffffffff80212197 <_RME_Pgt_Des+0x34f>
ffffffff8021218b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212192:	e9 ce 01 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff80212197:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021219b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802121a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802121a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802121a7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802121ab:	48 39 c2             	cmp    %rax,%rdx
ffffffff802121ae:	0f 93 c0             	setae  %al
ffffffff802121b1:	0f b6 c0             	movzbl %al,%eax
ffffffff802121b4:	48 85 c0             	test   %rax,%rax
ffffffff802121b7:	74 0c                	je     ffffffff802121c5 <_RME_Pgt_Des+0x37d>
ffffffff802121b9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802121c0:	e9 a0 01 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff802121c5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802121c9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802121ce:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802121d2:	48 89 c2             	mov    %rax,%rdx
ffffffff802121d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802121d9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802121dd:	48 01 d0             	add    %rdx,%rax
ffffffff802121e0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802121e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802121e8:	48 8b 00             	mov    (%rax),%rax
ffffffff802121eb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802121ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802121f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802121f7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802121fa:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802121fe:	0f 94 c0             	sete   %al
ffffffff80212201:	0f b6 c0             	movzbl %al,%eax
ffffffff80212204:	48 85 c0             	test   %rax,%rax
ffffffff80212207:	74 0c                	je     ffffffff80212215 <_RME_Pgt_Des+0x3cd>
ffffffff80212209:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212210:	e9 50 01 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
ffffffff80212215:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212219:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021221d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212221:	0f 95 c0             	setne  %al
ffffffff80212224:	0f b6 c0             	movzbl %al,%eax
ffffffff80212227:	48 85 c0             	test   %rax,%rax
ffffffff8021222a:	74 0c                	je     ffffffff80212238 <_RME_Pgt_Des+0x3f0>
ffffffff8021222c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212233:	e9 2d 01 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
                   struct RME_Cap_Pgt*,Pgt_Child,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
ffffffff80212238:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021223c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212240:	83 e0 20             	and    $0x20,%eax
ffffffff80212243:	48 85 c0             	test   %rax,%rax
ffffffff80212246:	0f 94 c0             	sete   %al
ffffffff80212249:	0f b6 c0             	movzbl %al,%eax
ffffffff8021224c:	48 85 c0             	test   %rax,%rax
ffffffff8021224f:	74 0c                	je     ffffffff8021225d <_RME_Pgt_Des+0x415>
ffffffff80212251:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80212258:	e9 08 01 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff8021225d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212261:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212265:	83 e0 08             	and    $0x8,%eax
ffffffff80212268:	48 85 c0             	test   %rax,%rax
ffffffff8021226b:	0f 94 c0             	sete   %al
ffffffff8021226e:	0f b6 c0             	movzbl %al,%eax
ffffffff80212271:	48 85 c0             	test   %rax,%rax
ffffffff80212274:	74 0c                	je     ffffffff80212282 <_RME_Pgt_Des+0x43a>
ffffffff80212276:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021227d:	e9 e3 00 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80212282:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212286:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021228a:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8021228e:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff80212292:	77 17                	ja     ffffffff802122ab <_RME_Pgt_Des+0x463>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff80212294:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212298:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021229c:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802122a0:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff802122a5:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff802122a9:	73 0c                	jae    ffffffff802122b7 <_RME_Pgt_Des+0x46f>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff802122ab:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802122b2:	e9 ae 00 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff802122b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802122bb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802122bf:	89 c2                	mov    %eax,%edx
ffffffff802122c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802122c5:	89 d1                	mov    %edx,%ecx
ffffffff802122c7:	48 d3 e8             	shr    %cl,%rax
ffffffff802122ca:	48 85 c0             	test   %rax,%rax
ffffffff802122cd:	74 0c                	je     ffffffff802122db <_RME_Pgt_Des+0x493>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff802122cf:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802122d6:	e9 8a 00 00 00       	jmp    ffffffff80212365 <_RME_Pgt_Des+0x51d>

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict. Also,
     * the HAL needs to guarantee that the Child is actually mapped there,
     * and use that as the old value in CAS */
    if(__RME_Pgt_Pgdir_Unmap(Pgt_Parent,Pos,Pgt_Child)<0)
ffffffff802122db:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802122df:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff802122e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802122e7:	48 89 ce             	mov    %rcx,%rsi
ffffffff802122ea:	48 89 c7             	mov    %rax,%rdi
ffffffff802122ed:	e8 dc 4a 01 00       	call   ffffffff80226dce <__RME_Pgt_Pgdir_Unmap>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Decrease refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff802122f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802122f6:	48 8b 00             	mov    (%rax),%rax
ffffffff802122f9:	89 c0                	mov    %eax,%eax
ffffffff802122fb:	48 85 c0             	test   %rax,%rax
ffffffff802122fe:	74 0a                	je     ffffffff8021230a <_RME_Pgt_Des+0x4c2>
ffffffff80212300:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212304:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212308:	eb 04                	jmp    ffffffff8021230e <_RME_Pgt_Des+0x4c6>
ffffffff8021230a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021230e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),-1);
ffffffff80212312:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212316:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021231a:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80212321:	48 89 c7             	mov    %rax,%rdi
ffffffff80212324:	e8 6a a4 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff80212329:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021232d:	48 8b 00             	mov    (%rax),%rax
ffffffff80212330:	89 c0                	mov    %eax,%eax
ffffffff80212332:	48 85 c0             	test   %rax,%rax
ffffffff80212335:	74 0a                	je     ffffffff80212341 <_RME_Pgt_Des+0x4f9>
ffffffff80212337:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021233b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021233f:	eb 04                	jmp    ffffffff80212345 <_RME_Pgt_Des+0x4fd>
ffffffff80212341:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212345:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),-1);
ffffffff80212349:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021234d:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212351:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80212358:	48 89 c7             	mov    %rax,%rdi
ffffffff8021235b:	e8 33 a4 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80212360:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212365:	c9                   	leave  
ffffffff80212366:	c3                   	ret    

ffffffff80212367 <_RME_Kot_Init>:
Output      : None.
Return      : rme_ret_t - If the number of words are is not sufficient to hold 
                          all kernel memory, -1; else 0.
******************************************************************************/
rme_ret_t _RME_Kot_Init(rme_ptr_t Word)
{
ffffffff80212367:	f3 0f 1e fa          	endbr64 
ffffffff8021236b:	55                   	push   %rbp
ffffffff8021236c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021236f:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212373:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Count;
    
    if(Word<RME_KOT_WORD_NUM)
ffffffff80212377:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
ffffffff8021237c:	77 09                	ja     ffffffff80212387 <_RME_Kot_Init+0x20>
    {
        RME_COV_MARKER();

        return -1;
ffffffff8021237e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212385:	eb 3e                	jmp    ffffffff802123c5 <_RME_Kot_Init+0x5e>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Zero out the whole table */
    for(Count=0U;Count<Word;Count++)
ffffffff80212387:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021238e:	00 
ffffffff8021238f:	eb 25                	jmp    ffffffff802123b6 <_RME_Kot_Init+0x4f>
    {
        RME_KOT_VA_BASE[Count]=0U;
ffffffff80212391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212395:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021239c:	00 
ffffffff8021239d:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802123a4:	80 ff ff 
ffffffff802123a7:	48 01 d0             	add    %rdx,%rax
ffffffff802123aa:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff802123b1:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802123b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802123ba:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff802123be:	72 d1                	jb     ffffffff80212391 <_RME_Kot_Init+0x2a>
    }

    return 0;
ffffffff802123c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802123c5:	c9                   	leave  
ffffffff802123c6:	c3                   	ret    

ffffffff802123c7 <_RME_Kot_Mark>:
Output      : None.
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Kot_Mark(rme_ptr_t Kaddr,
                        rme_ptr_t Size)
{
ffffffff802123c7:	f3 0f 1e fa          	endbr64 
ffffffff802123cb:	55                   	push   %rbp
ffffffff802123cc:	48 89 e5             	mov    %rsp,%rbp
ffffffff802123cf:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff802123d3:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802123d7:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    rme_ptr_t Mask_Begin;
    /* The mask at the end word */
    rme_ptr_t Mask_End;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff802123db:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802123df:	83 e0 0f             	and    $0xf,%eax
ffffffff802123e2:	48 85 c0             	test   %rax,%rax
ffffffff802123e5:	74 0c                	je     ffffffff802123f3 <_RME_Kot_Mark+0x2c>
    {
        RME_COV_MARKER();

        return RME_ERR_KOT_BMP;
ffffffff802123e7:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802123ee:	e9 19 03 00 00       	jmp    ffffffff8021270c <_RME_Kot_Mark+0x345>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Round the marking to RME_KOM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802123f3:	48 ba 00 00 a0 fe ff 	movabs $0x7ffffea00000,%rdx
ffffffff802123fa:	7f 00 00 
ffffffff802123fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80212401:	48 01 d0             	add    %rdx,%rax
ffffffff80212404:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80212408:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8021240c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212410:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212413:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8021241a:	89 c1                	mov    %eax,%ecx
ffffffff8021241c:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021241f:	48 89 d0             	mov    %rdx,%rax
ffffffff80212422:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Start=Start>>RME_WORD_ORDER;
ffffffff80212426:	48 c1 6d e8 06       	shrq   $0x6,-0x18(%rbp)
    
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8021242b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021242f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80212433:	48 01 c2             	add    %rax,%rdx
ffffffff80212436:	48 b8 ff ff 9f fe ff 	movabs $0x7ffffe9fffff,%rax
ffffffff8021243d:	7f 00 00 
ffffffff80212440:	48 01 d0             	add    %rdx,%rax
ffffffff80212443:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80212447:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8021244b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021244f:	f7 d0                	not    %eax
ffffffff80212451:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212454:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8021245b:	89 c1                	mov    %eax,%ecx
ffffffff8021245d:	48 d3 ea             	shr    %cl,%rdx
ffffffff80212460:	48 89 d0             	mov    %rdx,%rax
ffffffff80212463:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    End=End>>RME_WORD_ORDER;
ffffffff80212467:	48 c1 6d d8 06       	shrq   $0x6,-0x28(%rbp)
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff8021246c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212470:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80212474:	0f 85 89 00 00 00    	jne    ffffffff80212503 <_RME_Kot_Mark+0x13c>
    {
        RME_COV_MARKER();

        /* Someone already populated something here */
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8021247a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021247e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212485:	00 
ffffffff80212486:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021248d:	80 ff ff 
ffffffff80212490:	48 01 d0             	add    %rdx,%rax
ffffffff80212493:	48 8b 00             	mov    (%rax),%rax
ffffffff80212496:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        if((Old_Val&(Mask_Begin&Mask_End))!=0U)
ffffffff8021249a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021249e:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff802124a2:	48 23 45 c8          	and    -0x38(%rbp),%rax
ffffffff802124a6:	48 85 c0             	test   %rax,%rax
ffffffff802124a9:	74 0c                	je     ffffffff802124b7 <_RME_Kot_Mark+0xf0>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802124ab:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802124b2:	e9 55 02 00 00       	jmp    ffffffff8021270c <_RME_Kot_Mark+0x345>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check done, do the marking with CAS */
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff802124b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802124bb:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff802124bf:	48 0b 45 c8          	or     -0x38(%rbp),%rax
ffffffff802124c3:	48 89 c2             	mov    %rax,%rdx
ffffffff802124c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802124ca:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff802124d1:	00 
ffffffff802124d2:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802124d9:	80 ff ff 
ffffffff802124dc:	48 01 c1             	add    %rax,%rcx
ffffffff802124df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802124e3:	48 89 c6             	mov    %rax,%rsi
ffffffff802124e6:	48 89 cf             	mov    %rcx,%rdi
ffffffff802124e9:	e8 70 a2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802124ee:	48 85 c0             	test   %rax,%rax
ffffffff802124f1:	0f 85 10 02 00 00    	jne    ffffffff80212707 <_RME_Kot_Mark+0x340>
                         Old_Val,
                         Old_Val|(Mask_Begin&Mask_End))==RME_CASFAIL)
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802124f7:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802124fe:	e9 09 02 00 00       	jmp    ffffffff8021270c <_RME_Kot_Mark+0x345>
    }
    else
    {
        RME_COV_MARKER();
        
        Undo=0U;
ffffffff80212503:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021250a:	00 
        /* Check&Mark the start */
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8021250b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021250f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212516:	00 
ffffffff80212517:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021251e:	80 ff ff 
ffffffff80212521:	48 01 d0             	add    %rdx,%rax
ffffffff80212524:	48 8b 00             	mov    (%rax),%rax
ffffffff80212527:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        if((Old_Val&Mask_Begin)!=0U)
ffffffff8021252b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021252f:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff80212533:	48 85 c0             	test   %rax,%rax
ffffffff80212536:	74 0c                	je     ffffffff80212544 <_RME_Kot_Mark+0x17d>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff80212538:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021253f:	e9 c8 01 00 00       	jmp    ffffffff8021270c <_RME_Kot_Mark+0x345>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff80212544:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212548:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff8021254c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021254f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212553:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff8021255a:	00 
ffffffff8021255b:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212562:	80 ff ff 
ffffffff80212565:	48 01 c1             	add    %rax,%rcx
ffffffff80212568:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021256c:	48 89 c6             	mov    %rax,%rsi
ffffffff8021256f:	48 89 cf             	mov    %rcx,%rdi
ffffffff80212572:	e8 e7 a1 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212577:	48 85 c0             	test   %rax,%rax
ffffffff8021257a:	75 0c                	jne    ffffffff80212588 <_RME_Kot_Mark+0x1c1>
                         Old_Val,
                         Old_Val|Mask_Begin)==RME_CASFAIL)
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff8021257c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212583:	e9 84 01 00 00       	jmp    ffffffff8021270c <_RME_Kot_Mark+0x345>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check&Mark the middle */
        for(Count=Start+1U;Count<End;Count++)
ffffffff80212588:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021258c:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212590:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212594:	eb 75                	jmp    ffffffff8021260b <_RME_Kot_Mark+0x244>
        {
            Old_Val=RME_KOT_VA_BASE[Count];
ffffffff80212596:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021259a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802125a1:	00 
ffffffff802125a2:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802125a9:	80 ff ff 
ffffffff802125ac:	48 01 d0             	add    %rdx,%rax
ffffffff802125af:	48 8b 00             	mov    (%rax),%rax
ffffffff802125b2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            if(Old_Val!=0U)
ffffffff802125b6:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff802125bb:	74 0a                	je     ffffffff802125c7 <_RME_Kot_Mark+0x200>
            {
                RME_COV_MARKER();

                Undo=1U;
ffffffff802125bd:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff802125c4:	00 
                break;
ffffffff802125c5:	eb 4e                	jmp    ffffffff80212615 <_RME_Kot_Mark+0x24e>
            }
            else
            {
                RME_COV_MARKER();
                
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Count],
ffffffff802125c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802125cb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802125d2:	00 
ffffffff802125d3:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802125da:	80 ff ff 
ffffffff802125dd:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff802125e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802125e5:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802125ec:	48 89 c6             	mov    %rax,%rsi
ffffffff802125ef:	48 89 cf             	mov    %rcx,%rdi
ffffffff802125f2:	e8 67 a1 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802125f7:	48 85 c0             	test   %rax,%rax
ffffffff802125fa:	75 0a                	jne    ffffffff80212606 <_RME_Kot_Mark+0x23f>
                                 Old_Val,
                                 RME_MASK_FULL)==RME_CASFAIL)
                {
                    RME_COV_MARKER();
                    
                    Undo=1U;
ffffffff802125fc:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff80212603:	00 
                    break;
ffffffff80212604:	eb 0f                	jmp    ffffffff80212615 <_RME_Kot_Mark+0x24e>
        for(Count=Start+1U;Count<End;Count++)
ffffffff80212606:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021260b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021260f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80212613:	72 81                	jb     ffffffff80212596 <_RME_Kot_Mark+0x1cf>
                }
            }
        }
        
        /* See if the middle part failed. If yes, we skip the end marking */
        if(Undo==0U)
ffffffff80212615:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021261a:	75 77                	jne    ffffffff80212693 <_RME_Kot_Mark+0x2cc>
        {
            RME_COV_MARKER();

            /* Check&Mark the end */
            Old_Val=RME_KOT_VA_BASE[End];
ffffffff8021261c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212620:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212627:	00 
ffffffff80212628:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021262f:	80 ff ff 
ffffffff80212632:	48 01 d0             	add    %rdx,%rax
ffffffff80212635:	48 8b 00             	mov    (%rax),%rax
ffffffff80212638:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            if((Old_Val&Mask_End)!=0U)
ffffffff8021263c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212640:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80212644:	48 85 c0             	test   %rax,%rax
ffffffff80212647:	74 0a                	je     ffffffff80212653 <_RME_Kot_Mark+0x28c>
            {
                RME_COV_MARKER();

                Undo=1U;
ffffffff80212649:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff80212650:	00 
ffffffff80212651:	eb 40                	jmp    ffffffff80212693 <_RME_Kot_Mark+0x2cc>
            }
            else
            {
                RME_COV_MARKER();

                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[End],
ffffffff80212653:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212657:	48 0b 45 d0          	or     -0x30(%rbp),%rax
ffffffff8021265b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021265e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212662:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff80212669:	00 
ffffffff8021266a:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212671:	80 ff ff 
ffffffff80212674:	48 01 c1             	add    %rax,%rcx
ffffffff80212677:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021267b:	48 89 c6             	mov    %rax,%rsi
ffffffff8021267e:	48 89 cf             	mov    %rcx,%rdi
ffffffff80212681:	e8 d8 a0 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212686:	48 85 c0             	test   %rax,%rax
ffffffff80212689:	75 08                	jne    ffffffff80212693 <_RME_Kot_Mark+0x2cc>
                                 Old_Val,
                                 Old_Val|Mask_End)==RME_CASFAIL)
                {
                    RME_COV_MARKER();

                    Undo=1U;
ffffffff8021268b:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff80212692:	00 
        {
            RME_COV_MARKER();
        }
        
        /* See if we need to undo. If yes, proceed to unroll and return error */
        if(Undo!=0U)
ffffffff80212693:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80212698:	74 6d                	je     ffffffff80212707 <_RME_Kot_Mark+0x340>
        {
            RME_COV_MARKER();

            /* Undo the middle part - no CAS neeeded, write back is always atomic */
            for(Count--;Count>Start;Count--)
ffffffff8021269a:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff8021269f:	eb 25                	jmp    ffffffff802126c6 <_RME_Kot_Mark+0x2ff>
            {
                RME_KOT_VA_BASE[Count]=0U;
ffffffff802126a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802126a5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802126ac:	00 
ffffffff802126ad:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802126b4:	80 ff ff 
ffffffff802126b7:	48 01 d0             	add    %rdx,%rax
ffffffff802126ba:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            for(Count--;Count>Start;Count--)
ffffffff802126c1:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff802126c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802126ca:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff802126ce:	77 d1                	ja     ffffffff802126a1 <_RME_Kot_Mark+0x2da>
            }
            /* Undo the first word - need atomic instructions */
            RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff802126d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802126d4:	48 f7 d0             	not    %rax
ffffffff802126d7:	48 89 c2             	mov    %rax,%rdx
ffffffff802126da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802126de:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff802126e5:	00 
ffffffff802126e6:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802126ed:	80 ff ff 
ffffffff802126f0:	48 01 c8             	add    %rcx,%rax
ffffffff802126f3:	48 89 d6             	mov    %rdx,%rsi
ffffffff802126f6:	48 89 c7             	mov    %rax,%rdi
ffffffff802126f9:	e8 c0 a0 ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
            /* Return failure */
            return RME_ERR_KOT_BMP;
ffffffff802126fe:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212705:	eb 05                	jmp    ffffffff8021270c <_RME_Kot_Mark+0x345>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff80212707:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021270c:	c9                   	leave  
ffffffff8021270d:	c3                   	ret    

ffffffff8021270e <_RME_Kot_Erase>:
Output      : None.
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Kot_Erase(rme_ptr_t Kaddr,
                         rme_ptr_t Size)
{
ffffffff8021270e:	f3 0f 1e fa          	endbr64 
ffffffff80212712:	55                   	push   %rbp
ffffffff80212713:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212716:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021271a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021271e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    /* The mask at the end word */
    rme_ptr_t Mask_End;
    rme_ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff80212722:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212726:	83 e0 0f             	and    $0xf,%eax
ffffffff80212729:	48 85 c0             	test   %rax,%rax
ffffffff8021272c:	74 0c                	je     ffffffff8021273a <_RME_Kot_Erase+0x2c>
    {
        RME_COV_MARKER();

        return RME_ERR_KOT_BMP;
ffffffff8021272e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212735:	e9 4f 02 00 00       	jmp    ffffffff80212989 <_RME_Kot_Erase+0x27b>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Round the marking to RME_KOM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8021273a:	48 ba 00 00 a0 fe ff 	movabs $0x7ffffea00000,%rdx
ffffffff80212741:	7f 00 00 
ffffffff80212744:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212748:	48 01 d0             	add    %rdx,%rax
ffffffff8021274b:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff8021274f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80212753:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212757:	83 e0 3f             	and    $0x3f,%eax
ffffffff8021275a:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212761:	89 c1                	mov    %eax,%ecx
ffffffff80212763:	48 d3 e2             	shl    %cl,%rdx
ffffffff80212766:	48 89 d0             	mov    %rdx,%rax
ffffffff80212769:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Start=Start>>RME_WORD_ORDER;
ffffffff8021276d:	48 c1 6d f0 06       	shrq   $0x6,-0x10(%rbp)
    
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff80212772:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80212776:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021277a:	48 01 c2             	add    %rax,%rdx
ffffffff8021277d:	48 b8 ff ff 9f fe ff 	movabs $0x7ffffe9fffff,%rax
ffffffff80212784:	7f 00 00 
ffffffff80212787:	48 01 d0             	add    %rdx,%rax
ffffffff8021278a:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff8021278e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80212792:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212796:	f7 d0                	not    %eax
ffffffff80212798:	83 e0 3f             	and    $0x3f,%eax
ffffffff8021279b:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802127a2:	89 c1                	mov    %eax,%ecx
ffffffff802127a4:	48 d3 ea             	shr    %cl,%rdx
ffffffff802127a7:	48 89 d0             	mov    %rdx,%rax
ffffffff802127aa:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    End=End>>RME_WORD_ORDER;
ffffffff802127ae:	48 c1 6d e0 06       	shrq   $0x6,-0x20(%rbp)
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff802127b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802127b7:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff802127bb:	75 77                	jne    ffffffff80212834 <_RME_Kot_Erase+0x126>
    {
        RME_COV_MARKER();

        /* This address range is not fully populated */
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff802127bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802127c1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802127c8:	00 
ffffffff802127c9:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802127d0:	80 ff ff 
ffffffff802127d3:	48 01 d0             	add    %rdx,%rax
ffffffff802127d6:	48 8b 10             	mov    (%rax),%rdx
ffffffff802127d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802127dd:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff802127e1:	48 21 c2             	and    %rax,%rdx
ffffffff802127e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802127e8:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff802127ec:	48 39 c2             	cmp    %rax,%rdx
ffffffff802127ef:	74 0c                	je     ffffffff802127fd <_RME_Kot_Erase+0xef>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802127f1:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802127f8:	e9 8c 01 00 00       	jmp    ffffffff80212989 <_RME_Kot_Erase+0x27b>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Check done, do the unmarking - need atomic operations */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~(Mask_Begin&Mask_End));
ffffffff802127fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212801:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff80212805:	48 f7 d0             	not    %rax
ffffffff80212808:	48 89 c2             	mov    %rax,%rdx
ffffffff8021280b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021280f:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff80212816:	00 
ffffffff80212817:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021281e:	80 ff ff 
ffffffff80212821:	48 01 c8             	add    %rcx,%rax
ffffffff80212824:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212827:	48 89 c7             	mov    %rax,%rdi
ffffffff8021282a:	e8 8f 9f ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
ffffffff8021282f:	e9 50 01 00 00       	jmp    ffffffff80212984 <_RME_Kot_Erase+0x276>
    else
    {
        RME_COV_MARKER();

        /* Check the start */
        if((RME_KOT_VA_BASE[Start]&Mask_Begin)!=Mask_Begin)
ffffffff80212834:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212838:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021283f:	00 
ffffffff80212840:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212847:	80 ff ff 
ffffffff8021284a:	48 01 d0             	add    %rdx,%rax
ffffffff8021284d:	48 8b 00             	mov    (%rax),%rax
ffffffff80212850:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80212854:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80212858:	74 0c                	je     ffffffff80212866 <_RME_Kot_Erase+0x158>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff8021285a:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212861:	e9 23 01 00 00       	jmp    ffffffff80212989 <_RME_Kot_Erase+0x27b>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the middle */
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80212866:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021286a:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021286e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212872:	eb 33                	jmp    ffffffff802128a7 <_RME_Kot_Erase+0x199>
        {
            if(RME_KOT_VA_BASE[Count]!=RME_MASK_FULL)
ffffffff80212874:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212878:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021287f:	00 
ffffffff80212880:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212887:	80 ff ff 
ffffffff8021288a:	48 01 d0             	add    %rdx,%rax
ffffffff8021288d:	48 8b 00             	mov    (%rax),%rax
ffffffff80212890:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff80212894:	74 0c                	je     ffffffff802128a2 <_RME_Kot_Erase+0x194>
            {
                RME_COV_MARKER();

                return RME_ERR_KOT_BMP;
ffffffff80212896:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021289d:	e9 e7 00 00 00       	jmp    ffffffff80212989 <_RME_Kot_Erase+0x27b>
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802128a2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802128a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802128ab:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802128af:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff802128b3:	72 bf                	jb     ffffffff80212874 <_RME_Kot_Erase+0x166>
                /* No action required */
            }
        }

        /* Check the end */
        if((RME_KOT_VA_BASE[End]&Mask_End)!=Mask_End)
ffffffff802128b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802128b9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802128c0:	00 
ffffffff802128c1:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802128c8:	80 ff ff 
ffffffff802128cb:	48 01 d0             	add    %rdx,%rax
ffffffff802128ce:	48 8b 00             	mov    (%rax),%rax
ffffffff802128d1:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff802128d5:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff802128d9:	74 0c                	je     ffffffff802128e7 <_RME_Kot_Erase+0x1d9>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802128db:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802128e2:	e9 a2 00 00 00       	jmp    ffffffff80212989 <_RME_Kot_Erase+0x27b>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Erase the start - make it atomic */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff802128e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802128eb:	48 f7 d0             	not    %rax
ffffffff802128ee:	48 89 c2             	mov    %rax,%rdx
ffffffff802128f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802128f5:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff802128fc:	00 
ffffffff802128fd:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212904:	80 ff ff 
ffffffff80212907:	48 01 c8             	add    %rcx,%rax
ffffffff8021290a:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021290d:	48 89 c7             	mov    %rax,%rdi
ffffffff80212910:	e8 a9 9e ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
        /* Erase the middle - do not need atomics here */
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80212915:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212919:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021291d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212921:	eb 25                	jmp    ffffffff80212948 <_RME_Kot_Erase+0x23a>
        {
            RME_KOT_VA_BASE[Count]=0U;
ffffffff80212923:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212927:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021292e:	00 
ffffffff8021292f:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212936:	80 ff ff 
ffffffff80212939:	48 01 d0             	add    %rdx,%rax
ffffffff8021293c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80212943:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212948:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021294c:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80212950:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff80212954:	72 cd                	jb     ffffffff80212923 <_RME_Kot_Erase+0x215>
        }
        /* Erase the end - make it atomic */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[End]),~Mask_End);
ffffffff80212956:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021295a:	48 f7 d0             	not    %rax
ffffffff8021295d:	48 89 c2             	mov    %rax,%rdx
ffffffff80212960:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212964:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff8021296b:	00 
ffffffff8021296c:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212973:	80 ff ff 
ffffffff80212976:	48 01 c8             	add    %rcx,%rax
ffffffff80212979:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021297c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021297f:	e8 3a 9e ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
    }

    return 0;
ffffffff80212984:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212989:	c9                   	leave  
ffffffff8021298a:	c3                   	ret    

ffffffff8021298b <_RME_Kom_Boot_Crt>:
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Kom,
                            rme_ptr_t Begin,
                            rme_ptr_t End,
                            rme_ptr_t Flag)
{
ffffffff8021298b:	f3 0f 1e fa          	endbr64 
ffffffff8021298f:	55                   	push   %rbp
ffffffff80212990:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212993:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80212997:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021299b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021299f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff802129a3:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff802129a7:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff802129ab:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Kom_Begin;
    rme_ptr_t Kom_End;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802129af:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802129b3:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802129b8:	48 85 c0             	test   %rax,%rax
ffffffff802129bb:	0f 85 98 00 00 00    	jne    ffffffff80212a59 <_RME_Kom_Boot_Crt+0xce>
ffffffff802129c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802129c5:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802129c9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802129cd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802129d0:	0f 96 c0             	setbe  %al
ffffffff802129d3:	0f b6 c0             	movzbl %al,%eax
ffffffff802129d6:	48 85 c0             	test   %rax,%rax
ffffffff802129d9:	74 0c                	je     ffffffff802129e7 <_RME_Kom_Boot_Crt+0x5c>
ffffffff802129db:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802129e2:	e9 d1 02 00 00       	jmp    ffffffff80212cb8 <_RME_Kom_Boot_Crt+0x32d>
ffffffff802129e7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802129eb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802129ef:	48 89 c2             	mov    %rax,%rdx
ffffffff802129f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802129f6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802129fa:	48 01 d0             	add    %rdx,%rax
ffffffff802129fd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212a01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212a05:	48 8b 00             	mov    (%rax),%rax
ffffffff80212a08:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212a10:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212a14:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212a17:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212a1b:	0f 94 c0             	sete   %al
ffffffff80212a1e:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a21:	48 85 c0             	test   %rax,%rax
ffffffff80212a24:	74 0c                	je     ffffffff80212a32 <_RME_Kom_Boot_Crt+0xa7>
ffffffff80212a26:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212a2d:	e9 86 02 00 00       	jmp    ffffffff80212cb8 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212a32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212a36:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212a3a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212a3e:	0f 95 c0             	setne  %al
ffffffff80212a41:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a44:	48 85 c0             	test   %rax,%rax
ffffffff80212a47:	0f 84 4c 01 00 00    	je     ffffffff80212b99 <_RME_Kom_Boot_Crt+0x20e>
ffffffff80212a4d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212a54:	e9 5f 02 00 00       	jmp    ffffffff80212cb8 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212a59:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212a5d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80212a61:	48 89 c2             	mov    %rax,%rdx
ffffffff80212a64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212a68:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212a6c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212a6f:	0f 93 c0             	setae  %al
ffffffff80212a72:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a75:	48 85 c0             	test   %rax,%rax
ffffffff80212a78:	74 0c                	je     ffffffff80212a86 <_RME_Kom_Boot_Crt+0xfb>
ffffffff80212a7a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212a81:	e9 32 02 00 00       	jmp    ffffffff80212cb8 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212a86:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212a8a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80212a8e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212a92:	48 89 c2             	mov    %rax,%rdx
ffffffff80212a95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212a99:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212a9d:	48 01 d0             	add    %rdx,%rax
ffffffff80212aa0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212aa4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212aa8:	48 8b 00             	mov    (%rax),%rax
ffffffff80212aab:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212aaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212ab3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212ab7:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212aba:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212abe:	0f 94 c0             	sete   %al
ffffffff80212ac1:	0f b6 c0             	movzbl %al,%eax
ffffffff80212ac4:	48 85 c0             	test   %rax,%rax
ffffffff80212ac7:	74 0c                	je     ffffffff80212ad5 <_RME_Kom_Boot_Crt+0x14a>
ffffffff80212ac9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212ad0:	e9 e3 01 00 00       	jmp    ffffffff80212cb8 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212ad5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212ad9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212add:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212ae1:	0f 95 c0             	setne  %al
ffffffff80212ae4:	0f b6 c0             	movzbl %al,%eax
ffffffff80212ae7:	48 85 c0             	test   %rax,%rax
ffffffff80212aea:	74 0c                	je     ffffffff80212af8 <_RME_Kom_Boot_Crt+0x16d>
ffffffff80212aec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212af3:	e9 c0 01 00 00       	jmp    ffffffff80212cb8 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212af8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212afc:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212b01:	48 89 c2             	mov    %rax,%rdx
ffffffff80212b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b08:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212b0c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212b0f:	0f 93 c0             	setae  %al
ffffffff80212b12:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b15:	48 85 c0             	test   %rax,%rax
ffffffff80212b18:	74 0c                	je     ffffffff80212b26 <_RME_Kom_Boot_Crt+0x19b>
ffffffff80212b1a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212b21:	e9 92 01 00 00       	jmp    ffffffff80212cb8 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212b26:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212b2a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212b2f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212b33:	48 89 c2             	mov    %rax,%rdx
ffffffff80212b36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b3a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212b3e:	48 01 d0             	add    %rdx,%rax
ffffffff80212b41:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212b45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b49:	48 8b 00             	mov    (%rax),%rax
ffffffff80212b4c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212b50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212b54:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212b58:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212b5b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212b5f:	0f 94 c0             	sete   %al
ffffffff80212b62:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b65:	48 85 c0             	test   %rax,%rax
ffffffff80212b68:	74 0c                	je     ffffffff80212b76 <_RME_Kom_Boot_Crt+0x1eb>
ffffffff80212b6a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212b71:	e9 42 01 00 00       	jmp    ffffffff80212cb8 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212b76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212b7a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212b7e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212b82:	0f 95 c0             	setne  %al
ffffffff80212b85:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b88:	48 85 c0             	test   %rax,%rax
ffffffff80212b8b:	74 0c                	je     ffffffff80212b99 <_RME_Kom_Boot_Crt+0x20e>
ffffffff80212b8d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212b94:	e9 1f 01 00 00       	jmp    ffffffff80212cb8 <_RME_Kom_Boot_Crt+0x32d>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80212b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b9d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212ba1:	83 e0 01             	and    $0x1,%eax
ffffffff80212ba4:	48 85 c0             	test   %rax,%rax
ffffffff80212ba7:	0f 94 c0             	sete   %al
ffffffff80212baa:	0f b6 c0             	movzbl %al,%eax
ffffffff80212bad:	48 85 c0             	test   %rax,%rax
ffffffff80212bb0:	74 0c                	je     ffffffff80212bbe <_RME_Kom_Boot_Crt+0x233>
ffffffff80212bb2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80212bb9:	e9 fa 00 00 00       	jmp    ffffffff80212cb8 <_RME_Kom_Boot_Crt+0x32d>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kom,struct RME_Cap_Kom*,Kom_Crt);
ffffffff80212bbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212bc2:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80212bc6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80212bca:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212bcd:	0f 96 c0             	setbe  %al
ffffffff80212bd0:	0f b6 c0             	movzbl %al,%eax
ffffffff80212bd3:	48 85 c0             	test   %rax,%rax
ffffffff80212bd6:	74 0c                	je     ffffffff80212be4 <_RME_Kom_Boot_Crt+0x259>
ffffffff80212bd8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212bdf:	e9 d4 00 00 00       	jmp    ffffffff80212cb8 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212be4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80212be8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212bec:	48 89 c2             	mov    %rax,%rdx
ffffffff80212bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212bf3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212bf7:	48 01 d0             	add    %rdx,%rax
ffffffff80212bfa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff80212bfe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c02:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80212c09:	00 00 00 
ffffffff80212c0c:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80212c11:	48 89 c7             	mov    %rax,%rdi
ffffffff80212c14:	e8 45 9b ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212c19:	48 85 c0             	test   %rax,%rax
ffffffff80212c1c:	0f 94 c0             	sete   %al
ffffffff80212c1f:	0f b6 c0             	movzbl %al,%eax
ffffffff80212c22:	48 85 c0             	test   %rax,%rax
ffffffff80212c25:	74 0c                	je     ffffffff80212c33 <_RME_Kom_Boot_Crt+0x2a8>
ffffffff80212c27:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80212c2e:	e9 85 00 00 00       	jmp    ffffffff80212cb8 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212c33:	48 8b 15 c6 83 01 00 	mov    0x183c6(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff80212c3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c3e:	48 89 50 20          	mov    %rdx,0x20(%rax)
    /* Align addresses */
#if(RME_KOM_SLOT_ORDER>6U)
    Kom_End=RME_ROUND_DOWN(End+1U,RME_KOM_SLOT_ORDER);
    Kom_Begin=RME_ROUND_UP(Start,RME_KOM_SLOT_ORDER);
#else
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff80212c42:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80212c46:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212c4a:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff80212c4e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff80212c52:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80212c56:	48 83 c0 3f          	add    $0x3f,%rax
ffffffff80212c5a:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff80212c5e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    /* Must at least allow creation of something */
    RME_ASSERT(Flag!=0U);

    /* Header init */
    Kom_Crt->Head.Root_Ref=1U;
ffffffff80212c62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c66:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff80212c6d:	00 
    Kom_Crt->Head.Object=0U;
ffffffff80212c6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c72:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80212c79:	00 
    Kom_Crt->Head.Flag=Flag;
ffffffff80212c7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c7e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80212c82:	48 89 50 10          	mov    %rdx,0x10(%rax)
    
    /* Info init */
    Kom_Crt->Begin=Kom_Begin;
ffffffff80212c86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c8a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80212c8e:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Kom_Crt->End=Kom_End-1U;
ffffffff80212c92:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212c96:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80212c9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c9e:	48 89 50 30          	mov    %rdx,0x30(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff80212ca2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ca6:	48 b9 00 00 00 00 00 	movabs $0x2000000000000,%rcx
ffffffff80212cad:	00 02 00 
ffffffff80212cb0:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_KOM,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80212cb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212cb8:	c9                   	leave  
ffffffff80212cb9:	c3                   	ret    

ffffffff80212cba <_RME_CPU_Local_Init>:
Output      : None.
Return      : None.
******************************************************************************/
void _RME_CPU_Local_Init(struct RME_CPU_Local* Local,
                         rme_ptr_t CPUID)
{
ffffffff80212cba:	f3 0f 1e fa          	endbr64 
ffffffff80212cbe:	55                   	push   %rbp
ffffffff80212cbf:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212cc2:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212cc6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80212cca:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Prio_Cnt;
    
    Local->CPUID=CPUID;
ffffffff80212cce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212cd2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80212cd6:	48 89 10             	mov    %rdx,(%rax)
    Local->Thd_Cur=RME_NULL;
ffffffff80212cd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212cdd:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80212ce4:	00 
    Local->Sig_Vct=RME_NULL;
ffffffff80212ce5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ce9:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80212cf0:	00 
    Local->Sig_Tim=RME_NULL;
ffffffff80212cf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212cf5:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80212cfc:	00 
    
    /* Initialize the run-queue and bitmap */
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80212cfd:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80212d04:	00 
ffffffff80212d05:	eb 42                	jmp    ffffffff80212d49 <_RME_CPU_Local_Init+0x8f>
    {
        Local->Run.Bitmap[Prio_Cnt>>RME_WORD_ORDER]=0U;
ffffffff80212d07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212d0b:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212d0f:	48 89 c2             	mov    %rax,%rdx
ffffffff80212d12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d16:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212d1a:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
ffffffff80212d21:	00 
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
ffffffff80212d22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212d26:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212d2a:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212d2e:	48 89 c2             	mov    %rax,%rdx
ffffffff80212d31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d35:	48 01 d0             	add    %rdx,%rax
ffffffff80212d38:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212d3c:	48 89 c7             	mov    %rax,%rdi
ffffffff80212d3f:	e8 16 a0 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80212d44:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212d49:	48 83 7d f8 3f       	cmpq   $0x3f,-0x8(%rbp)
ffffffff80212d4e:	76 b7                	jbe    ffffffff80212d07 <_RME_CPU_Local_Init+0x4d>
    }
}
ffffffff80212d50:	90                   	nop
ffffffff80212d51:	90                   	nop
ffffffff80212d52:	c9                   	leave  
ffffffff80212d53:	c3                   	ret    

ffffffff80212d54 <_RME_Thd_Fatal>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Thd_Fatal(struct RME_Reg_Struct* Reg)
{
ffffffff80212d54:	f3 0f 1e fa          	endbr64 
ffffffff80212d58:	55                   	push   %rbp
ffffffff80212d59:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212d5c:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212d60:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    
    /* Attempt to return from the invocation, from fault */
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80212d64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d68:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212d6d:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80212d72:	48 89 c7             	mov    %rax,%rdi
ffffffff80212d75:	e8 77 7d 00 00       	call   ffffffff8021aaf1 <_RME_Inv_Ret>
ffffffff80212d7a:	48 85 c0             	test   %rax,%rax
ffffffff80212d7d:	74 6f                	je     ffffffff80212dee <_RME_Thd_Fatal+0x9a>
    {
        RME_COV_MARKER();

        /* Return failure - report the exception */
        Local=RME_CPU_LOCAL();
ffffffff80212d7f:	e8 bb 8a ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80212d84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        Thd_Cur=Local->Thd_Cur;
ffffffff80212d88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212d8c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212d90:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        
        /* Init thread shall never have exceptions */
        if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80212d94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212d98:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80212d9c:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff80212da3:	ff ff 7f 
ffffffff80212da6:	48 39 d0             	cmp    %rdx,%rax
ffffffff80212da9:	75 0c                	jne    ffffffff80212db7 <_RME_Thd_Fatal+0x63>
        {
            RME_COV_MARKER();
            
            RME_DBG_S("Attempted to kill init thread.");
ffffffff80212dab:	48 c7 c7 38 94 22 80 	mov    $0xffffffff80229438,%rdi
ffffffff80212db2:	e8 54 9c ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
        
        /* We must be running at this point to trigger a synchronous exception */
        RME_ASSERT(Thd_Cur->Sched.State==RME_THD_READY);
        
        /* Remove from runqueue */
        _RME_Run_Del(Thd_Cur);
ffffffff80212db7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212dbb:	48 89 c7             	mov    %rax,%rdi
ffffffff80212dbe:	e8 e1 00 00 00       	call   ffffffff80212ea4 <_RME_Run_Del>
        
        /* Exception pending and notify parent */
        Thd_Cur->Sched.State=RME_THD_EXCPEND;
ffffffff80212dc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212dc7:	48 c7 40 38 03 00 00 	movq   $0x3,0x38(%rax)
ffffffff80212dce:	00 
        _RME_Run_Notif(Thd_Cur);
ffffffff80212dcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212dd3:	48 89 c7             	mov    %rax,%rdi
ffffffff80212dd6:	e8 14 02 00 00       	call   ffffffff80212fef <_RME_Run_Notif>
        
        /* All kernel send complete, now pick the highest priority thread to run */
        _RME_Kern_High(Reg,Local);
ffffffff80212ddb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212ddf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212de3:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212de6:	48 89 c7             	mov    %rax,%rdi
ffffffff80212de9:	e8 f5 60 00 00       	call   ffffffff80218ee3 <_RME_Kern_High>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212dee:	90                   	nop
ffffffff80212def:	c9                   	leave  
ffffffff80212df0:	c3                   	ret    

ffffffff80212df1 <_RME_Run_Ins>:
              rme_ptr_t CPUID - The cpu to consult.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Ins(struct RME_Thd_Struct* Thd)
{
ffffffff80212df1:	f3 0f 1e fa          	endbr64 
ffffffff80212df5:	55                   	push   %rbp
ffffffff80212df6:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212df9:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212dfd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff80212e01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e05:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80212e09:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Local=Thd->Sched.Local;
ffffffff80212e0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e11:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212e15:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Insert this thread into the runqueue */
    _RME_List_Ins(&(Thd->Sched.Run),
                  Local->Run.List[Prio].Prev,
                  &(Local->Run.List[Prio]));
ffffffff80212e19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e1d:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212e21:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212e25:	48 89 c2             	mov    %rax,%rdx
ffffffff80212e28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e2c:	48 01 d0             	add    %rdx,%rax
ffffffff80212e2f:	48 8d 50 08          	lea    0x8(%rax),%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80212e33:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80212e37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e3b:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212e3f:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212e43:	48 01 c8             	add    %rcx,%rax
ffffffff80212e46:	48 83 c0 10          	add    $0x10,%rax
ffffffff80212e4a:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212e4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e51:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212e54:	48 89 c7             	mov    %rax,%rdi
ffffffff80212e57:	e8 56 9f ff ff       	call   ffffffff8020cdb2 <_RME_List_Ins>
    
    /* Set the bit in the bitmap */
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80212e5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e60:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212e64:	48 89 c2             	mov    %rax,%rdx
ffffffff80212e67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e6b:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212e6f:	48 8b 34 d0          	mov    (%rax,%rdx,8),%rsi
ffffffff80212e73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e77:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212e7a:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212e7f:	89 c1                	mov    %eax,%ecx
ffffffff80212e81:	48 d3 e2             	shl    %cl,%rdx
ffffffff80212e84:	48 89 d1             	mov    %rdx,%rcx
ffffffff80212e87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e8b:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212e8f:	48 89 c2             	mov    %rax,%rdx
ffffffff80212e92:	48 09 f1             	or     %rsi,%rcx
ffffffff80212e95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e99:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212e9d:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
}
ffffffff80212ea1:	90                   	nop
ffffffff80212ea2:	c9                   	leave  
ffffffff80212ea3:	c3                   	ret    

ffffffff80212ea4 <_RME_Run_Del>:
Input       : struct RME_Thd_Struct* Thd - The thread to delete.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
ffffffff80212ea4:	f3 0f 1e fa          	endbr64 
ffffffff80212ea8:	55                   	push   %rbp
ffffffff80212ea9:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212eac:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212eb0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff80212eb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212eb8:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80212ebc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Local=Thd->Sched.Local;
ffffffff80212ec0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ec4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212ec8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* It can't be free or there must be an error */
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Delete this thread from the runqueue */
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80212ecc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ed0:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212ed3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ed7:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212edb:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212ede:	48 89 c7             	mov    %rax,%rdi
ffffffff80212ee1:	e8 9e 9e ff ff       	call   ffffffff8020cd84 <_RME_List_Del>
    
    /* See if there are any thread on this priority level */
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff80212ee6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80212eea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212eee:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212ef2:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212ef6:	48 01 d0             	add    %rdx,%rax
ffffffff80212ef9:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212efd:	48 8b 00             	mov    (%rax),%rax
ffffffff80212f00:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212f04:	48 83 c2 02          	add    $0x2,%rdx
ffffffff80212f08:	48 89 d1             	mov    %rdx,%rcx
ffffffff80212f0b:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff80212f0f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80212f13:	48 01 ca             	add    %rcx,%rdx
ffffffff80212f16:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80212f1a:	48 39 d0             	cmp    %rdx,%rax
ffffffff80212f1d:	75 4b                	jne    ffffffff80212f6a <_RME_Run_Del+0xc6>
    {
        RME_COV_MARKER();

        /* Nothing running, clear the bit in the bitmap */
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff80212f1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212f23:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212f27:	48 89 c2             	mov    %rax,%rdx
ffffffff80212f2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212f2e:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212f32:	48 8b 34 d0          	mov    (%rax,%rdx,8),%rsi
ffffffff80212f36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212f3a:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212f3d:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212f42:	89 c1                	mov    %eax,%ecx
ffffffff80212f44:	48 d3 e2             	shl    %cl,%rdx
ffffffff80212f47:	48 89 d0             	mov    %rdx,%rax
ffffffff80212f4a:	48 f7 d0             	not    %rax
ffffffff80212f4d:	48 89 c1             	mov    %rax,%rcx
ffffffff80212f50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212f54:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212f58:	48 89 c2             	mov    %rax,%rdx
ffffffff80212f5b:	48 21 f1             	and    %rsi,%rcx
ffffffff80212f5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212f62:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212f66:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212f6a:	90                   	nop
ffffffff80212f6b:	c9                   	leave  
ffffffff80212f6c:	c3                   	ret    

ffffffff80212f6d <_RME_Run_High>:
Input       : struct RME_CPU_Local* Local - The CPU-local data structure.
Output      : None.
Return      : struct RME_Thd_Struct* - The thread returned.
******************************************************************************/
static struct RME_Thd_Struct* _RME_Run_High(struct RME_CPU_Local* Local)
{
ffffffff80212f6d:	f3 0f 1e fa          	endbr64 
ffffffff80212f71:	55                   	push   %rbp
ffffffff80212f72:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212f75:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212f79:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_cnt_t Count;
    rme_ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=(rme_cnt_t)(RME_PRIO_WORD_NUM-1U);Count>=0;Count--)
ffffffff80212f7d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80212f84:	00 
ffffffff80212f85:	eb 1a                	jmp    ffffffff80212fa1 <_RME_Run_High+0x34>
    {
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80212f87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f8b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212f8f:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212f93:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212f97:	48 85 c0             	test   %rax,%rax
ffffffff80212f9a:	75 0e                	jne    ffffffff80212faa <_RME_Run_High+0x3d>
    for(Count=(rme_cnt_t)(RME_PRIO_WORD_NUM-1U);Count>=0;Count--)
ffffffff80212f9c:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff80212fa1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80212fa6:	79 df                	jns    ffffffff80212f87 <_RME_Run_High+0x1a>
ffffffff80212fa8:	eb 01                	jmp    ffffffff80212fab <_RME_Run_High+0x3e>
        {
            RME_COV_MARKER();
            
            break;
ffffffff80212faa:	90                   	nop
    
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);

    /* Get the first "1"'s position in the word */
    Prio=RME_MSB_GET(Local->Run.Bitmap[Count]);
ffffffff80212fab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212faf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212fb3:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212fb7:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212fbb:	48 89 c7             	mov    %rax,%rdi
ffffffff80212fbe:	e8 28 98 ff ff       	call   ffffffff8020c7eb <_RME_X64_MSB_Get>
ffffffff80212fc3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80212fc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212fcb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212fcf:	48 01 45 f0          	add    %rax,-0x10(%rbp)

    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80212fd3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80212fd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212fdb:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212fdf:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212fe3:	48 01 d0             	add    %rdx,%rax
ffffffff80212fe6:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212fea:	48 8b 00             	mov    (%rax),%rax
}
ffffffff80212fed:	c9                   	leave  
ffffffff80212fee:	c3                   	ret    

ffffffff80212fef <_RME_Run_Notif>:
Input       : struct RME_Thd_Struct* Thd - The thread to send notification for.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
ffffffff80212fef:	f3 0f 1e fa          	endbr64 
ffffffff80212ff3:	55                   	push   %rbp
ffffffff80212ff4:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212ff7:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212ffb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Thd_Struct* Sched_Thd;
    
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80212fff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213003:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80213007:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8021300b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021300f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213013:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80213017:	48 83 c2 10          	add    $0x10,%rdx
ffffffff8021301b:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021301e:	75 26                	jne    ffffffff80213046 <_RME_Run_Notif+0x57>
    {
        RME_COV_MARKER();

        _RME_List_Ins(&(Thd->Sched.Notif), 
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff80213020:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213024:	48 8d 50 78          	lea    0x78(%rax),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80213028:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021302c:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80213033:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80213037:	48 83 c1 10          	add    $0x10,%rcx
ffffffff8021303b:	48 89 c6             	mov    %rax,%rsi
ffffffff8021303e:	48 89 cf             	mov    %rcx,%rdi
ffffffff80213041:	e8 6c 9d ff ff       	call   ffffffff8020cdb2 <_RME_List_Ins>
        RME_COV_MARKER();
        /* No action required */
    }

    /* If this guy have an endpoint, send to it */
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80213046:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021304a:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff8021304e:	48 85 c0             	test   %rax,%rax
ffffffff80213051:	74 10                	je     ffffffff80213063 <_RME_Run_Notif+0x74>
    {
        RME_COV_MARKER();
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80213053:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213057:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff8021305b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021305e:	e8 07 5f 00 00       	call   ffffffff80218f6a <_RME_Kern_Snd>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80213063:	90                   	nop
ffffffff80213064:	c9                   	leave  
ffffffff80213065:	c3                   	ret    

ffffffff80213066 <_RME_Thd_Pgt>:
#if(RME_PGT_RAW_ENABLE==0U)
struct RME_Cap_Pgt* _RME_Thd_Pgt(struct RME_Thd_Struct* Thd)
#else
rme_ptr_t _RME_Thd_Pgt(struct RME_Thd_Struct* Thd)
#endif
{
ffffffff80213066:	f3 0f 1e fa          	endbr64 
ffffffff8021306a:	55                   	push   %rbp
ffffffff8021306b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021306e:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80213072:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Inv_Struct* Inv_Top;
    
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80213076:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021307a:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff80213081:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80213085:	48 81 c2 98 00 00 00 	add    $0x98,%rdx
ffffffff8021308c:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021308f:	74 0d                	je     ffffffff8021309e <_RME_Thd_Pgt+0x38>
ffffffff80213091:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213095:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021309c:	eb 05                	jmp    ffffffff802130a3 <_RME_Thd_Pgt+0x3d>
ffffffff8021309e:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802130a3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    if(Inv_Top==(void*)RME_NULL)
ffffffff802130a7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff802130ac:	75 0e                	jne    ffffffff802130bc <_RME_Thd_Pgt+0x56>
    {
        RME_COV_MARKER();

        return Thd->Sched.Prc->Pgt;
ffffffff802130ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802130b2:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff802130b6:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802130ba:	eb 0c                	jmp    ffffffff802130c8 <_RME_Thd_Pgt+0x62>
    }
    else
    {
        RME_COV_MARKER();

        return Inv_Top->Prc->Pgt;
ffffffff802130bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802130c0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802130c4:	48 8b 40 30          	mov    0x30(%rax),%rax
    }
}
ffffffff802130c8:	c9                   	leave  
ffffffff802130c9:	c3                   	ret    

ffffffff802130ca <_RME_Run_Swt>:
Return      : rme_ret_t - Always 0.
******************************************************************************/
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
                              struct RME_Thd_Struct* Thd_Cur, 
                              struct RME_Thd_Struct* Thd_New)
{
ffffffff802130ca:	f3 0f 1e fa          	endbr64 
ffffffff802130ce:	55                   	push   %rbp
ffffffff802130cf:	48 89 e5             	mov    %rsp,%rbp
ffffffff802130d2:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff802130d6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff802130da:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff802130de:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Pgt_New;
#endif
    struct RME_Reg_Struct* Reg_Cur;
    struct RME_Reg_Struct* Reg_New;
    
    Reg_Cur=&(Thd_Cur->Ctx.Reg->Reg);
ffffffff802130e2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802130e6:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff802130ed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff802130f1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802130f5:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff802130fc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Save register context */
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff80213100:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80213104:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213108:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021310b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021310e:	e8 a5 2e 01 00       	call   ffffffff80225fb8 <__RME_Thd_Reg_Copy>
                       RME_THD_IS_HYP(Thd_Cur->Ctx.Hyp_Attr),
                       Reg_Cur,Thd_Cur->Ctx.Reg->Cop);
#endif

    /* Load register context */
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80213113:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80213117:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021311b:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021311e:	48 89 c7             	mov    %rax,%rdi
ffffffff80213121:	e8 92 2e 01 00       	call   ffffffff80225fb8 <__RME_Thd_Reg_Copy>

    /* Are we going to switch page tables? If yes, we change it now */
    Pgt_Cur=_RME_Thd_Pgt(Thd_Cur);
ffffffff80213126:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021312a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021312d:	e8 34 ff ff ff       	call   ffffffff80213066 <_RME_Thd_Pgt>
ffffffff80213132:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Pgt_New=_RME_Thd_Pgt(Thd_New);
ffffffff80213136:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021313a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021313d:	e8 24 ff ff ff       	call   ffffffff80213066 <_RME_Thd_Pgt>
ffffffff80213142:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_Cur)!=0U);
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_New)!=0U);
#endif
    
#if(RME_PGT_RAW_ENABLE==0U)
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff80213146:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021314a:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8021314e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213152:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213156:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213159:	74 0c                	je     ffffffff80213167 <_RME_Run_Swt+0x9d>
    if(Pgt_Cur!=Pgt_New)
#endif
    {
        RME_COV_MARKER();
        
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff8021315b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021315f:	48 89 c7             	mov    %rax,%rdi
ffffffff80213162:	e8 f8 37 01 00       	call   ffffffff8022695f <__RME_Pgt_Set>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff80213167:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021316c:	c9                   	leave  
ffffffff8021316d:	c3                   	ret    

ffffffff8021316e <_RME_Prc_Boot_Crt>:
                            rme_cid_t Cap_Cpt_Crt,
                            rme_cid_t Cap_Prc,
                            rme_cid_t Cap_Cpt,
                            rme_ptr_t Raw_Pgt)
#endif
{
ffffffff8021316e:	f3 0f 1e fa          	endbr64 
ffffffff80213172:	55                   	push   %rbp
ffffffff80213173:	48 89 e5             	mov    %rsp,%rbp
ffffffff80213176:	48 83 ec 68          	sub    $0x68,%rsp
ffffffff8021317a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8021317e:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff80213182:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff80213186:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff8021318a:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8021318e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213192:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213197:	48 85 c0             	test   %rax,%rax
ffffffff8021319a:	0f 85 98 00 00 00    	jne    ffffffff80213238 <_RME_Prc_Boot_Crt+0xca>
ffffffff802131a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802131a4:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802131a8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802131ac:	48 39 c2             	cmp    %rax,%rdx
ffffffff802131af:	0f 96 c0             	setbe  %al
ffffffff802131b2:	0f b6 c0             	movzbl %al,%eax
ffffffff802131b5:	48 85 c0             	test   %rax,%rax
ffffffff802131b8:	74 0c                	je     ffffffff802131c6 <_RME_Prc_Boot_Crt+0x58>
ffffffff802131ba:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802131c1:	e9 35 07 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff802131c6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802131ca:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802131ce:	48 89 c2             	mov    %rax,%rdx
ffffffff802131d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802131d5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802131d9:	48 01 d0             	add    %rdx,%rax
ffffffff802131dc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802131e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802131e4:	48 8b 00             	mov    (%rax),%rax
ffffffff802131e7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802131eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802131ef:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802131f3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802131f6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802131fa:	0f 94 c0             	sete   %al
ffffffff802131fd:	0f b6 c0             	movzbl %al,%eax
ffffffff80213200:	48 85 c0             	test   %rax,%rax
ffffffff80213203:	74 0c                	je     ffffffff80213211 <_RME_Prc_Boot_Crt+0xa3>
ffffffff80213205:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021320c:	e9 ea 06 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213211:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213215:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213219:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021321d:	0f 95 c0             	setne  %al
ffffffff80213220:	0f b6 c0             	movzbl %al,%eax
ffffffff80213223:	48 85 c0             	test   %rax,%rax
ffffffff80213226:	0f 84 4c 01 00 00    	je     ffffffff80213378 <_RME_Prc_Boot_Crt+0x20a>
ffffffff8021322c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213233:	e9 c3 06 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213238:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021323c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213240:	48 89 c2             	mov    %rax,%rdx
ffffffff80213243:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213247:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021324b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021324e:	0f 93 c0             	setae  %al
ffffffff80213251:	0f b6 c0             	movzbl %al,%eax
ffffffff80213254:	48 85 c0             	test   %rax,%rax
ffffffff80213257:	74 0c                	je     ffffffff80213265 <_RME_Prc_Boot_Crt+0xf7>
ffffffff80213259:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213260:	e9 96 06 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213265:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213269:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021326d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213271:	48 89 c2             	mov    %rax,%rdx
ffffffff80213274:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213278:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021327c:	48 01 d0             	add    %rdx,%rax
ffffffff8021327f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80213283:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213287:	48 8b 00             	mov    (%rax),%rax
ffffffff8021328a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021328e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213292:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213296:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213299:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021329d:	0f 94 c0             	sete   %al
ffffffff802132a0:	0f b6 c0             	movzbl %al,%eax
ffffffff802132a3:	48 85 c0             	test   %rax,%rax
ffffffff802132a6:	74 0c                	je     ffffffff802132b4 <_RME_Prc_Boot_Crt+0x146>
ffffffff802132a8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802132af:	e9 47 06 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff802132b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802132b8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802132bc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802132c0:	0f 95 c0             	setne  %al
ffffffff802132c3:	0f b6 c0             	movzbl %al,%eax
ffffffff802132c6:	48 85 c0             	test   %rax,%rax
ffffffff802132c9:	74 0c                	je     ffffffff802132d7 <_RME_Prc_Boot_Crt+0x169>
ffffffff802132cb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802132d2:	e9 24 06 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff802132d7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802132db:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802132e0:	48 89 c2             	mov    %rax,%rdx
ffffffff802132e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802132e7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802132eb:	48 39 c2             	cmp    %rax,%rdx
ffffffff802132ee:	0f 93 c0             	setae  %al
ffffffff802132f1:	0f b6 c0             	movzbl %al,%eax
ffffffff802132f4:	48 85 c0             	test   %rax,%rax
ffffffff802132f7:	74 0c                	je     ffffffff80213305 <_RME_Prc_Boot_Crt+0x197>
ffffffff802132f9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213300:	e9 f6 05 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213305:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213309:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021330e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213312:	48 89 c2             	mov    %rax,%rdx
ffffffff80213315:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213319:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021331d:	48 01 d0             	add    %rdx,%rax
ffffffff80213320:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80213324:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213328:	48 8b 00             	mov    (%rax),%rax
ffffffff8021332b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021332f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213333:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213337:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021333a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021333e:	0f 94 c0             	sete   %al
ffffffff80213341:	0f b6 c0             	movzbl %al,%eax
ffffffff80213344:	48 85 c0             	test   %rax,%rax
ffffffff80213347:	74 0c                	je     ffffffff80213355 <_RME_Prc_Boot_Crt+0x1e7>
ffffffff80213349:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213350:	e9 a6 05 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213355:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213359:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021335d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213361:	0f 95 c0             	setne  %al
ffffffff80213364:	0f b6 c0             	movzbl %al,%eax
ffffffff80213367:	48 85 c0             	test   %rax,%rax
ffffffff8021336a:	74 0c                	je     ffffffff80213378 <_RME_Prc_Boot_Crt+0x20a>
ffffffff8021336c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213373:	e9 83 05 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213378:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021337c:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213381:	48 85 c0             	test   %rax,%rax
ffffffff80213384:	0f 85 98 00 00 00    	jne    ffffffff80213422 <_RME_Prc_Boot_Crt+0x2b4>
ffffffff8021338a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021338e:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80213392:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213396:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213399:	0f 96 c0             	setbe  %al
ffffffff8021339c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021339f:	48 85 c0             	test   %rax,%rax
ffffffff802133a2:	74 0c                	je     ffffffff802133b0 <_RME_Prc_Boot_Crt+0x242>
ffffffff802133a4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802133ab:	e9 4b 05 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff802133b0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802133b4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802133b8:	48 89 c2             	mov    %rax,%rdx
ffffffff802133bb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802133bf:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802133c3:	48 01 d0             	add    %rdx,%rax
ffffffff802133c6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802133ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802133ce:	48 8b 00             	mov    (%rax),%rax
ffffffff802133d1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802133d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802133d9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802133dd:	0f b7 c0             	movzwl %ax,%eax
ffffffff802133e0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802133e4:	0f 94 c0             	sete   %al
ffffffff802133e7:	0f b6 c0             	movzbl %al,%eax
ffffffff802133ea:	48 85 c0             	test   %rax,%rax
ffffffff802133ed:	74 0c                	je     ffffffff802133fb <_RME_Prc_Boot_Crt+0x28d>
ffffffff802133ef:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802133f6:	e9 00 05 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff802133fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802133ff:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213403:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213407:	0f 95 c0             	setne  %al
ffffffff8021340a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021340d:	48 85 c0             	test   %rax,%rax
ffffffff80213410:	0f 84 4c 01 00 00    	je     ffffffff80213562 <_RME_Prc_Boot_Crt+0x3f4>
ffffffff80213416:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021341d:	e9 d9 04 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213422:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213426:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021342a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021342d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213431:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213435:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213438:	0f 93 c0             	setae  %al
ffffffff8021343b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021343e:	48 85 c0             	test   %rax,%rax
ffffffff80213441:	74 0c                	je     ffffffff8021344f <_RME_Prc_Boot_Crt+0x2e1>
ffffffff80213443:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021344a:	e9 ac 04 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff8021344f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213453:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213457:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021345b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021345e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213462:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213466:	48 01 d0             	add    %rdx,%rax
ffffffff80213469:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021346d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213471:	48 8b 00             	mov    (%rax),%rax
ffffffff80213474:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213478:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021347c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213480:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213483:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213487:	0f 94 c0             	sete   %al
ffffffff8021348a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021348d:	48 85 c0             	test   %rax,%rax
ffffffff80213490:	74 0c                	je     ffffffff8021349e <_RME_Prc_Boot_Crt+0x330>
ffffffff80213492:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213499:	e9 5d 04 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff8021349e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802134a2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802134a6:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802134aa:	0f 95 c0             	setne  %al
ffffffff802134ad:	0f b6 c0             	movzbl %al,%eax
ffffffff802134b0:	48 85 c0             	test   %rax,%rax
ffffffff802134b3:	74 0c                	je     ffffffff802134c1 <_RME_Prc_Boot_Crt+0x353>
ffffffff802134b5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802134bc:	e9 3a 04 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff802134c1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802134c5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802134ca:	48 89 c2             	mov    %rax,%rdx
ffffffff802134cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802134d1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802134d5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802134d8:	0f 93 c0             	setae  %al
ffffffff802134db:	0f b6 c0             	movzbl %al,%eax
ffffffff802134de:	48 85 c0             	test   %rax,%rax
ffffffff802134e1:	74 0c                	je     ffffffff802134ef <_RME_Prc_Boot_Crt+0x381>
ffffffff802134e3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802134ea:	e9 0c 04 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff802134ef:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802134f3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802134f8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802134fc:	48 89 c2             	mov    %rax,%rdx
ffffffff802134ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213503:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213507:	48 01 d0             	add    %rdx,%rax
ffffffff8021350a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021350e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213512:	48 8b 00             	mov    (%rax),%rax
ffffffff80213515:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213519:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021351d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213521:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213524:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213528:	0f 94 c0             	sete   %al
ffffffff8021352b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021352e:	48 85 c0             	test   %rax,%rax
ffffffff80213531:	74 0c                	je     ffffffff8021353f <_RME_Prc_Boot_Crt+0x3d1>
ffffffff80213533:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021353a:	e9 bc 03 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff8021353f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213543:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213547:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021354b:	0f 95 c0             	setne  %al
ffffffff8021354e:	0f b6 c0             	movzbl %al,%eax
ffffffff80213551:	48 85 c0             	test   %rax,%rax
ffffffff80213554:	74 0c                	je     ffffffff80213562 <_RME_Prc_Boot_Crt+0x3f4>
ffffffff80213556:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021355d:	e9 99 03 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80213562:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213566:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021356b:	48 85 c0             	test   %rax,%rax
ffffffff8021356e:	0f 85 98 00 00 00    	jne    ffffffff8021360c <_RME_Prc_Boot_Crt+0x49e>
ffffffff80213574:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213578:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021357c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213580:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213583:	0f 96 c0             	setbe  %al
ffffffff80213586:	0f b6 c0             	movzbl %al,%eax
ffffffff80213589:	48 85 c0             	test   %rax,%rax
ffffffff8021358c:	74 0c                	je     ffffffff8021359a <_RME_Prc_Boot_Crt+0x42c>
ffffffff8021358e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213595:	e9 61 03 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff8021359a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021359e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802135a2:	48 89 c2             	mov    %rax,%rdx
ffffffff802135a5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802135a9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802135ad:	48 01 d0             	add    %rdx,%rax
ffffffff802135b0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802135b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802135b8:	48 8b 00             	mov    (%rax),%rax
ffffffff802135bb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802135bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802135c3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802135c7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802135ca:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802135ce:	0f 94 c0             	sete   %al
ffffffff802135d1:	0f b6 c0             	movzbl %al,%eax
ffffffff802135d4:	48 85 c0             	test   %rax,%rax
ffffffff802135d7:	74 0c                	je     ffffffff802135e5 <_RME_Prc_Boot_Crt+0x477>
ffffffff802135d9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802135e0:	e9 16 03 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff802135e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802135e9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802135ed:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802135f1:	0f 95 c0             	setne  %al
ffffffff802135f4:	0f b6 c0             	movzbl %al,%eax
ffffffff802135f7:	48 85 c0             	test   %rax,%rax
ffffffff802135fa:	0f 84 4c 01 00 00    	je     ffffffff8021374c <_RME_Prc_Boot_Crt+0x5de>
ffffffff80213600:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213607:	e9 ef 02 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff8021360c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213610:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213614:	48 89 c2             	mov    %rax,%rdx
ffffffff80213617:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021361b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021361f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213622:	0f 93 c0             	setae  %al
ffffffff80213625:	0f b6 c0             	movzbl %al,%eax
ffffffff80213628:	48 85 c0             	test   %rax,%rax
ffffffff8021362b:	74 0c                	je     ffffffff80213639 <_RME_Prc_Boot_Crt+0x4cb>
ffffffff8021362d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213634:	e9 c2 02 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213639:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021363d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213641:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213645:	48 89 c2             	mov    %rax,%rdx
ffffffff80213648:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021364c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213650:	48 01 d0             	add    %rdx,%rax
ffffffff80213653:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213657:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021365b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021365e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213662:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213666:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021366a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021366d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213671:	0f 94 c0             	sete   %al
ffffffff80213674:	0f b6 c0             	movzbl %al,%eax
ffffffff80213677:	48 85 c0             	test   %rax,%rax
ffffffff8021367a:	74 0c                	je     ffffffff80213688 <_RME_Prc_Boot_Crt+0x51a>
ffffffff8021367c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213683:	e9 73 02 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213688:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021368c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213690:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213694:	0f 95 c0             	setne  %al
ffffffff80213697:	0f b6 c0             	movzbl %al,%eax
ffffffff8021369a:	48 85 c0             	test   %rax,%rax
ffffffff8021369d:	74 0c                	je     ffffffff802136ab <_RME_Prc_Boot_Crt+0x53d>
ffffffff8021369f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802136a6:	e9 50 02 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff802136ab:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802136af:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802136b4:	48 89 c2             	mov    %rax,%rdx
ffffffff802136b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802136bb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802136bf:	48 39 c2             	cmp    %rax,%rdx
ffffffff802136c2:	0f 93 c0             	setae  %al
ffffffff802136c5:	0f b6 c0             	movzbl %al,%eax
ffffffff802136c8:	48 85 c0             	test   %rax,%rax
ffffffff802136cb:	74 0c                	je     ffffffff802136d9 <_RME_Prc_Boot_Crt+0x56b>
ffffffff802136cd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802136d4:	e9 22 02 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff802136d9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802136dd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802136e2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802136e6:	48 89 c2             	mov    %rax,%rdx
ffffffff802136e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802136ed:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802136f1:	48 01 d0             	add    %rdx,%rax
ffffffff802136f4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802136f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802136fc:	48 8b 00             	mov    (%rax),%rax
ffffffff802136ff:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213703:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213707:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021370b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021370e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213712:	0f 94 c0             	sete   %al
ffffffff80213715:	0f b6 c0             	movzbl %al,%eax
ffffffff80213718:	48 85 c0             	test   %rax,%rax
ffffffff8021371b:	74 0c                	je     ffffffff80213729 <_RME_Prc_Boot_Crt+0x5bb>
ffffffff8021371d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213724:	e9 d2 01 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213729:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021372d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213731:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213735:	0f 95 c0             	setne  %al
ffffffff80213738:	0f b6 c0             	movzbl %al,%eax
ffffffff8021373b:	48 85 c0             	test   %rax,%rax
ffffffff8021373e:	74 0c                	je     ffffffff8021374c <_RME_Prc_Boot_Crt+0x5de>
ffffffff80213740:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213747:	e9 af 01 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);
#endif
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8021374c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213750:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213754:	83 e0 01             	and    $0x1,%eax
ffffffff80213757:	48 85 c0             	test   %rax,%rax
ffffffff8021375a:	0f 94 c0             	sete   %al
ffffffff8021375d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213760:	48 85 c0             	test   %rax,%rax
ffffffff80213763:	74 0c                	je     ffffffff80213771 <_RME_Prc_Boot_Crt+0x603>
ffffffff80213765:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021376c:	e9 8a 01 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff80213771:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213775:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213779:	83 e0 40             	and    $0x40,%eax
ffffffff8021377c:	48 85 c0             	test   %rax,%rax
ffffffff8021377f:	0f 94 c0             	sete   %al
ffffffff80213782:	0f b6 c0             	movzbl %al,%eax
ffffffff80213785:	48 85 c0             	test   %rax,%rax
ffffffff80213788:	74 0c                	je     ffffffff80213796 <_RME_Prc_Boot_Crt+0x628>
ffffffff8021378a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213791:	e9 65 01 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff80213796:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021379a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021379e:	83 e0 40             	and    $0x40,%eax
ffffffff802137a1:	48 85 c0             	test   %rax,%rax
ffffffff802137a4:	0f 94 c0             	sete   %al
ffffffff802137a7:	0f b6 c0             	movzbl %al,%eax
ffffffff802137aa:	48 85 c0             	test   %rax,%rax
ffffffff802137ad:	74 0c                	je     ffffffff802137bb <_RME_Prc_Boot_Crt+0x64d>
ffffffff802137af:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802137b6:	e9 40 01 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
#endif
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff802137bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802137bf:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802137c3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802137c7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802137ca:	0f 96 c0             	setbe  %al
ffffffff802137cd:	0f b6 c0             	movzbl %al,%eax
ffffffff802137d0:	48 85 c0             	test   %rax,%rax
ffffffff802137d3:	74 0c                	je     ffffffff802137e1 <_RME_Prc_Boot_Crt+0x673>
ffffffff802137d5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802137dc:	e9 1a 01 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff802137e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802137e5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802137e9:	48 89 c2             	mov    %rax,%rdx
ffffffff802137ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802137f0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802137f4:	48 01 d0             	add    %rdx,%rax
ffffffff802137f7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff802137fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802137ff:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80213806:	00 00 00 
ffffffff80213809:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021380e:	48 89 c7             	mov    %rax,%rdi
ffffffff80213811:	e8 48 8f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80213816:	48 85 c0             	test   %rax,%rax
ffffffff80213819:	0f 94 c0             	sete   %al
ffffffff8021381c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021381f:	48 85 c0             	test   %rax,%rax
ffffffff80213822:	74 0c                	je     ffffffff80213830 <_RME_Prc_Boot_Crt+0x6c2>
ffffffff80213824:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021382b:	e9 cb 00 00 00       	jmp    ffffffff802138fb <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213830:	48 8b 15 c9 77 01 00 	mov    0x177c9(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff80213837:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021383b:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Header init */
    Prc_Crt->Head.Root_Ref=1U;
ffffffff8021383f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213843:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8021384a:	00 
    Prc_Crt->Head.Object=0U;
ffffffff8021384b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021384f:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80213856:	00 
    Prc_Crt->Head.Flag=RME_PRC_FLAG_INV|RME_PRC_FLAG_THD;
ffffffff80213857:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021385b:	48 c7 40 10 03 00 00 	movq   $0x3,0x10(%rax)
ffffffff80213862:	00 

    /* Info init */
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff80213863:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213867:	48 8b 00             	mov    (%rax),%rax
ffffffff8021386a:	89 c0                	mov    %eax,%eax
ffffffff8021386c:	48 85 c0             	test   %rax,%rax
ffffffff8021386f:	74 0a                	je     ffffffff8021387b <_RME_Prc_Boot_Crt+0x70d>
ffffffff80213871:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213875:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213879:	eb 04                	jmp    ffffffff8021387f <_RME_Prc_Boot_Crt+0x711>
ffffffff8021387b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021387f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff80213883:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213887:	48 8b 00             	mov    (%rax),%rax
ffffffff8021388a:	89 c0                	mov    %eax,%eax
ffffffff8021388c:	48 85 c0             	test   %rax,%rax
ffffffff8021388f:	74 0a                	je     ffffffff8021389b <_RME_Prc_Boot_Crt+0x72d>
ffffffff80213891:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213895:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213899:	eb 04                	jmp    ffffffff8021389f <_RME_Prc_Boot_Crt+0x731>
ffffffff8021389b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021389f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
#endif
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff802138a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802138a7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802138ab:	48 89 50 28          	mov    %rdx,0x28(%rax)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff802138af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802138b3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff802138b7:	48 89 50 30          	mov    %rdx,0x30(%rax)
#else
    Prc_Crt->Pgt=Raw_Pgt;
#endif
    
    /* Reference objects */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),1U);
ffffffff802138bb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802138bf:	48 83 c0 08          	add    $0x8,%rax
ffffffff802138c3:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802138c8:	48 89 c7             	mov    %rax,%rdi
ffffffff802138cb:	e8 c3 8e ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),1U);
ffffffff802138d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802138d4:	48 83 c0 08          	add    $0x8,%rax
ffffffff802138d8:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802138dd:	48 89 c7             	mov    %rax,%rdi
ffffffff802138e0:	e8 ae 8e ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif

    /* Establish cap */
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff802138e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802138e9:	48 b9 00 00 00 00 00 	movabs $0x5000000000000,%rcx
ffffffff802138f0:	00 05 00 
ffffffff802138f3:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PRC,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff802138f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802138fb:	c9                   	leave  
ffffffff802138fc:	c3                   	ret    

ffffffff802138fd <_RME_Prc_Crt>:
                              rme_cid_t Cap_Cpt_Crt,
                              rme_cid_t Cap_Prc,
                              rme_cid_t Cap_Cpt,
                              rme_ptr_t Raw_Pgt)
#endif
{
ffffffff802138fd:	f3 0f 1e fa          	endbr64 
ffffffff80213901:	55                   	push   %rbp
ffffffff80213902:	48 89 e5             	mov    %rsp,%rbp
ffffffff80213905:	48 83 ec 68          	sub    $0x68,%rsp
ffffffff80213909:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8021390d:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff80213911:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff80213915:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff80213919:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif
    rme_ptr_t Type_Stat;
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8021391d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213921:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213926:	48 85 c0             	test   %rax,%rax
ffffffff80213929:	0f 85 98 00 00 00    	jne    ffffffff802139c7 <_RME_Prc_Crt+0xca>
ffffffff8021392f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213933:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80213937:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021393b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021393e:	0f 96 c0             	setbe  %al
ffffffff80213941:	0f b6 c0             	movzbl %al,%eax
ffffffff80213944:	48 85 c0             	test   %rax,%rax
ffffffff80213947:	74 0c                	je     ffffffff80213955 <_RME_Prc_Crt+0x58>
ffffffff80213949:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213950:	e9 35 07 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213955:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213959:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021395d:	48 89 c2             	mov    %rax,%rdx
ffffffff80213960:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213964:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213968:	48 01 d0             	add    %rdx,%rax
ffffffff8021396b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021396f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213973:	48 8b 00             	mov    (%rax),%rax
ffffffff80213976:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021397a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021397e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213982:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213985:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213989:	0f 94 c0             	sete   %al
ffffffff8021398c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021398f:	48 85 c0             	test   %rax,%rax
ffffffff80213992:	74 0c                	je     ffffffff802139a0 <_RME_Prc_Crt+0xa3>
ffffffff80213994:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021399b:	e9 ea 06 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff802139a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802139a4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802139a8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802139ac:	0f 95 c0             	setne  %al
ffffffff802139af:	0f b6 c0             	movzbl %al,%eax
ffffffff802139b2:	48 85 c0             	test   %rax,%rax
ffffffff802139b5:	0f 84 4c 01 00 00    	je     ffffffff80213b07 <_RME_Prc_Crt+0x20a>
ffffffff802139bb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802139c2:	e9 c3 06 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff802139c7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802139cb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802139cf:	48 89 c2             	mov    %rax,%rdx
ffffffff802139d2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802139d6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802139da:	48 39 c2             	cmp    %rax,%rdx
ffffffff802139dd:	0f 93 c0             	setae  %al
ffffffff802139e0:	0f b6 c0             	movzbl %al,%eax
ffffffff802139e3:	48 85 c0             	test   %rax,%rax
ffffffff802139e6:	74 0c                	je     ffffffff802139f4 <_RME_Prc_Crt+0xf7>
ffffffff802139e8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802139ef:	e9 96 06 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff802139f4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802139f8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802139fc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213a00:	48 89 c2             	mov    %rax,%rdx
ffffffff80213a03:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213a07:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213a0b:	48 01 d0             	add    %rdx,%rax
ffffffff80213a0e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80213a12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213a16:	48 8b 00             	mov    (%rax),%rax
ffffffff80213a19:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213a1d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213a21:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213a25:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213a28:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213a2c:	0f 94 c0             	sete   %al
ffffffff80213a2f:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a32:	48 85 c0             	test   %rax,%rax
ffffffff80213a35:	74 0c                	je     ffffffff80213a43 <_RME_Prc_Crt+0x146>
ffffffff80213a37:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213a3e:	e9 47 06 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213a43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213a47:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213a4b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213a4f:	0f 95 c0             	setne  %al
ffffffff80213a52:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a55:	48 85 c0             	test   %rax,%rax
ffffffff80213a58:	74 0c                	je     ffffffff80213a66 <_RME_Prc_Crt+0x169>
ffffffff80213a5a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213a61:	e9 24 06 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213a66:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213a6a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213a6f:	48 89 c2             	mov    %rax,%rdx
ffffffff80213a72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213a76:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213a7a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213a7d:	0f 93 c0             	setae  %al
ffffffff80213a80:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a83:	48 85 c0             	test   %rax,%rax
ffffffff80213a86:	74 0c                	je     ffffffff80213a94 <_RME_Prc_Crt+0x197>
ffffffff80213a88:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213a8f:	e9 f6 05 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213a94:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213a98:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213a9d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213aa1:	48 89 c2             	mov    %rax,%rdx
ffffffff80213aa4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213aa8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213aac:	48 01 d0             	add    %rdx,%rax
ffffffff80213aaf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80213ab3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213ab7:	48 8b 00             	mov    (%rax),%rax
ffffffff80213aba:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213abe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213ac2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213ac6:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213ac9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213acd:	0f 94 c0             	sete   %al
ffffffff80213ad0:	0f b6 c0             	movzbl %al,%eax
ffffffff80213ad3:	48 85 c0             	test   %rax,%rax
ffffffff80213ad6:	74 0c                	je     ffffffff80213ae4 <_RME_Prc_Crt+0x1e7>
ffffffff80213ad8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213adf:	e9 a6 05 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213ae4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213ae8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213aec:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213af0:	0f 95 c0             	setne  %al
ffffffff80213af3:	0f b6 c0             	movzbl %al,%eax
ffffffff80213af6:	48 85 c0             	test   %rax,%rax
ffffffff80213af9:	74 0c                	je     ffffffff80213b07 <_RME_Prc_Crt+0x20a>
ffffffff80213afb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213b02:	e9 83 05 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213b07:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213b0b:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213b10:	48 85 c0             	test   %rax,%rax
ffffffff80213b13:	0f 85 98 00 00 00    	jne    ffffffff80213bb1 <_RME_Prc_Crt+0x2b4>
ffffffff80213b19:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213b1d:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80213b21:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213b25:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213b28:	0f 96 c0             	setbe  %al
ffffffff80213b2b:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b2e:	48 85 c0             	test   %rax,%rax
ffffffff80213b31:	74 0c                	je     ffffffff80213b3f <_RME_Prc_Crt+0x242>
ffffffff80213b33:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213b3a:	e9 4b 05 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213b3f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213b43:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213b47:	48 89 c2             	mov    %rax,%rdx
ffffffff80213b4a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213b4e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213b52:	48 01 d0             	add    %rdx,%rax
ffffffff80213b55:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213b59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213b5d:	48 8b 00             	mov    (%rax),%rax
ffffffff80213b60:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213b64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213b68:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213b6c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213b6f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213b73:	0f 94 c0             	sete   %al
ffffffff80213b76:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b79:	48 85 c0             	test   %rax,%rax
ffffffff80213b7c:	74 0c                	je     ffffffff80213b8a <_RME_Prc_Crt+0x28d>
ffffffff80213b7e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213b85:	e9 00 05 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213b8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213b8e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213b92:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213b96:	0f 95 c0             	setne  %al
ffffffff80213b99:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b9c:	48 85 c0             	test   %rax,%rax
ffffffff80213b9f:	0f 84 4c 01 00 00    	je     ffffffff80213cf1 <_RME_Prc_Crt+0x3f4>
ffffffff80213ba5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213bac:	e9 d9 04 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213bb1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213bb5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213bb9:	48 89 c2             	mov    %rax,%rdx
ffffffff80213bbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213bc0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213bc4:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213bc7:	0f 93 c0             	setae  %al
ffffffff80213bca:	0f b6 c0             	movzbl %al,%eax
ffffffff80213bcd:	48 85 c0             	test   %rax,%rax
ffffffff80213bd0:	74 0c                	je     ffffffff80213bde <_RME_Prc_Crt+0x2e1>
ffffffff80213bd2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213bd9:	e9 ac 04 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213bde:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213be2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213be6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213bea:	48 89 c2             	mov    %rax,%rdx
ffffffff80213bed:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213bf1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213bf5:	48 01 d0             	add    %rdx,%rax
ffffffff80213bf8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213bfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213c00:	48 8b 00             	mov    (%rax),%rax
ffffffff80213c03:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213c07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213c0b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213c0f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213c12:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213c16:	0f 94 c0             	sete   %al
ffffffff80213c19:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c1c:	48 85 c0             	test   %rax,%rax
ffffffff80213c1f:	74 0c                	je     ffffffff80213c2d <_RME_Prc_Crt+0x330>
ffffffff80213c21:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213c28:	e9 5d 04 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213c2d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213c31:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213c35:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213c39:	0f 95 c0             	setne  %al
ffffffff80213c3c:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c3f:	48 85 c0             	test   %rax,%rax
ffffffff80213c42:	74 0c                	je     ffffffff80213c50 <_RME_Prc_Crt+0x353>
ffffffff80213c44:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213c4b:	e9 3a 04 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213c50:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213c54:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213c59:	48 89 c2             	mov    %rax,%rdx
ffffffff80213c5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213c60:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213c64:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213c67:	0f 93 c0             	setae  %al
ffffffff80213c6a:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c6d:	48 85 c0             	test   %rax,%rax
ffffffff80213c70:	74 0c                	je     ffffffff80213c7e <_RME_Prc_Crt+0x381>
ffffffff80213c72:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213c79:	e9 0c 04 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213c7e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213c82:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213c87:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213c8b:	48 89 c2             	mov    %rax,%rdx
ffffffff80213c8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213c92:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213c96:	48 01 d0             	add    %rdx,%rax
ffffffff80213c99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213c9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213ca1:	48 8b 00             	mov    (%rax),%rax
ffffffff80213ca4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213ca8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213cac:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213cb0:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213cb3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213cb7:	0f 94 c0             	sete   %al
ffffffff80213cba:	0f b6 c0             	movzbl %al,%eax
ffffffff80213cbd:	48 85 c0             	test   %rax,%rax
ffffffff80213cc0:	74 0c                	je     ffffffff80213cce <_RME_Prc_Crt+0x3d1>
ffffffff80213cc2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213cc9:	e9 bc 03 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213cce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213cd2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213cd6:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213cda:	0f 95 c0             	setne  %al
ffffffff80213cdd:	0f b6 c0             	movzbl %al,%eax
ffffffff80213ce0:	48 85 c0             	test   %rax,%rax
ffffffff80213ce3:	74 0c                	je     ffffffff80213cf1 <_RME_Prc_Crt+0x3f4>
ffffffff80213ce5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213cec:	e9 99 03 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80213cf1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213cf5:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213cfa:	48 85 c0             	test   %rax,%rax
ffffffff80213cfd:	0f 85 98 00 00 00    	jne    ffffffff80213d9b <_RME_Prc_Crt+0x49e>
ffffffff80213d03:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213d07:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80213d0b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213d0f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213d12:	0f 96 c0             	setbe  %al
ffffffff80213d15:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d18:	48 85 c0             	test   %rax,%rax
ffffffff80213d1b:	74 0c                	je     ffffffff80213d29 <_RME_Prc_Crt+0x42c>
ffffffff80213d1d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213d24:	e9 61 03 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213d29:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213d2d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213d31:	48 89 c2             	mov    %rax,%rdx
ffffffff80213d34:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213d38:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213d3c:	48 01 d0             	add    %rdx,%rax
ffffffff80213d3f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213d43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213d47:	48 8b 00             	mov    (%rax),%rax
ffffffff80213d4a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213d4e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213d52:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213d56:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213d59:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213d5d:	0f 94 c0             	sete   %al
ffffffff80213d60:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d63:	48 85 c0             	test   %rax,%rax
ffffffff80213d66:	74 0c                	je     ffffffff80213d74 <_RME_Prc_Crt+0x477>
ffffffff80213d68:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213d6f:	e9 16 03 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213d74:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213d78:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213d7c:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213d80:	0f 95 c0             	setne  %al
ffffffff80213d83:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d86:	48 85 c0             	test   %rax,%rax
ffffffff80213d89:	0f 84 4c 01 00 00    	je     ffffffff80213edb <_RME_Prc_Crt+0x5de>
ffffffff80213d8f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213d96:	e9 ef 02 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213d9b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213d9f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213da3:	48 89 c2             	mov    %rax,%rdx
ffffffff80213da6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213daa:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213dae:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213db1:	0f 93 c0             	setae  %al
ffffffff80213db4:	0f b6 c0             	movzbl %al,%eax
ffffffff80213db7:	48 85 c0             	test   %rax,%rax
ffffffff80213dba:	74 0c                	je     ffffffff80213dc8 <_RME_Prc_Crt+0x4cb>
ffffffff80213dbc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213dc3:	e9 c2 02 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213dc8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213dcc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213dd0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213dd4:	48 89 c2             	mov    %rax,%rdx
ffffffff80213dd7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213ddb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213ddf:	48 01 d0             	add    %rdx,%rax
ffffffff80213de2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213de6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213dea:	48 8b 00             	mov    (%rax),%rax
ffffffff80213ded:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213df1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213df5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213df9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213dfc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213e00:	0f 94 c0             	sete   %al
ffffffff80213e03:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e06:	48 85 c0             	test   %rax,%rax
ffffffff80213e09:	74 0c                	je     ffffffff80213e17 <_RME_Prc_Crt+0x51a>
ffffffff80213e0b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213e12:	e9 73 02 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213e17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213e1b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213e1f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213e23:	0f 95 c0             	setne  %al
ffffffff80213e26:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e29:	48 85 c0             	test   %rax,%rax
ffffffff80213e2c:	74 0c                	je     ffffffff80213e3a <_RME_Prc_Crt+0x53d>
ffffffff80213e2e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213e35:	e9 50 02 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213e3a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213e3e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213e43:	48 89 c2             	mov    %rax,%rdx
ffffffff80213e46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213e4a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213e4e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213e51:	0f 93 c0             	setae  %al
ffffffff80213e54:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e57:	48 85 c0             	test   %rax,%rax
ffffffff80213e5a:	74 0c                	je     ffffffff80213e68 <_RME_Prc_Crt+0x56b>
ffffffff80213e5c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213e63:	e9 22 02 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213e68:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213e6c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213e71:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213e75:	48 89 c2             	mov    %rax,%rdx
ffffffff80213e78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213e7c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213e80:	48 01 d0             	add    %rdx,%rax
ffffffff80213e83:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213e87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213e8b:	48 8b 00             	mov    (%rax),%rax
ffffffff80213e8e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213e92:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213e96:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213e9a:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213e9d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213ea1:	0f 94 c0             	sete   %al
ffffffff80213ea4:	0f b6 c0             	movzbl %al,%eax
ffffffff80213ea7:	48 85 c0             	test   %rax,%rax
ffffffff80213eaa:	74 0c                	je     ffffffff80213eb8 <_RME_Prc_Crt+0x5bb>
ffffffff80213eac:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213eb3:	e9 d2 01 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213eb8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213ebc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213ec0:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213ec4:	0f 95 c0             	setne  %al
ffffffff80213ec7:	0f b6 c0             	movzbl %al,%eax
ffffffff80213eca:	48 85 c0             	test   %rax,%rax
ffffffff80213ecd:	74 0c                	je     ffffffff80213edb <_RME_Prc_Crt+0x5de>
ffffffff80213ecf:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213ed6:	e9 af 01 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);
#endif
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80213edb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213edf:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213ee3:	83 e0 01             	and    $0x1,%eax
ffffffff80213ee6:	48 85 c0             	test   %rax,%rax
ffffffff80213ee9:	0f 94 c0             	sete   %al
ffffffff80213eec:	0f b6 c0             	movzbl %al,%eax
ffffffff80213eef:	48 85 c0             	test   %rax,%rax
ffffffff80213ef2:	74 0c                	je     ffffffff80213f00 <_RME_Prc_Crt+0x603>
ffffffff80213ef4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213efb:	e9 8a 01 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff80213f00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213f04:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213f08:	83 e0 40             	and    $0x40,%eax
ffffffff80213f0b:	48 85 c0             	test   %rax,%rax
ffffffff80213f0e:	0f 94 c0             	sete   %al
ffffffff80213f11:	0f b6 c0             	movzbl %al,%eax
ffffffff80213f14:	48 85 c0             	test   %rax,%rax
ffffffff80213f17:	74 0c                	je     ffffffff80213f25 <_RME_Prc_Crt+0x628>
ffffffff80213f19:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213f20:	e9 65 01 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff80213f25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213f29:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213f2d:	83 e0 40             	and    $0x40,%eax
ffffffff80213f30:	48 85 c0             	test   %rax,%rax
ffffffff80213f33:	0f 94 c0             	sete   %al
ffffffff80213f36:	0f b6 c0             	movzbl %al,%eax
ffffffff80213f39:	48 85 c0             	test   %rax,%rax
ffffffff80213f3c:	74 0c                	je     ffffffff80213f4a <_RME_Prc_Crt+0x64d>
ffffffff80213f3e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213f45:	e9 40 01 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
#endif

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff80213f4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213f4e:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80213f52:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80213f56:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213f59:	0f 96 c0             	setbe  %al
ffffffff80213f5c:	0f b6 c0             	movzbl %al,%eax
ffffffff80213f5f:	48 85 c0             	test   %rax,%rax
ffffffff80213f62:	74 0c                	je     ffffffff80213f70 <_RME_Prc_Crt+0x673>
ffffffff80213f64:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213f6b:	e9 1a 01 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213f70:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80213f74:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213f78:	48 89 c2             	mov    %rax,%rdx
ffffffff80213f7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213f7f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213f83:	48 01 d0             	add    %rdx,%rax
ffffffff80213f86:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff80213f8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213f8e:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80213f95:	00 00 00 
ffffffff80213f98:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80213f9d:	48 89 c7             	mov    %rax,%rdi
ffffffff80213fa0:	e8 b9 87 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80213fa5:	48 85 c0             	test   %rax,%rax
ffffffff80213fa8:	0f 94 c0             	sete   %al
ffffffff80213fab:	0f b6 c0             	movzbl %al,%eax
ffffffff80213fae:	48 85 c0             	test   %rax,%rax
ffffffff80213fb1:	74 0c                	je     ffffffff80213fbf <_RME_Prc_Crt+0x6c2>
ffffffff80213fb3:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80213fba:	e9 cb 00 00 00       	jmp    ffffffff8021408a <_RME_Prc_Crt+0x78d>
ffffffff80213fbf:	48 8b 15 3a 70 01 00 	mov    0x1703a(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff80213fc6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213fca:	48 89 50 20          	mov    %rdx,0x20(%rax)
    
    /* Header init */
    Prc_Crt->Head.Root_Ref=0U;
ffffffff80213fce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213fd2:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80213fd9:	00 
    Prc_Crt->Head.Object=0U;
ffffffff80213fda:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213fde:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80213fe5:	00 
    Prc_Crt->Head.Flag=RME_PRC_FLAG_ALL;
ffffffff80213fe6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213fea:	48 c7 40 10 0f 00 00 	movq   $0xf,0x10(%rax)
ffffffff80213ff1:	00 
    
    /* Info init */
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff80213ff2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213ff6:	48 8b 00             	mov    (%rax),%rax
ffffffff80213ff9:	89 c0                	mov    %eax,%eax
ffffffff80213ffb:	48 85 c0             	test   %rax,%rax
ffffffff80213ffe:	74 0a                	je     ffffffff8021400a <_RME_Prc_Crt+0x70d>
ffffffff80214000:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214004:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214008:	eb 04                	jmp    ffffffff8021400e <_RME_Prc_Crt+0x711>
ffffffff8021400a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021400e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff80214012:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214016:	48 8b 00             	mov    (%rax),%rax
ffffffff80214019:	89 c0                	mov    %eax,%eax
ffffffff8021401b:	48 85 c0             	test   %rax,%rax
ffffffff8021401e:	74 0a                	je     ffffffff8021402a <_RME_Prc_Crt+0x72d>
ffffffff80214020:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214024:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214028:	eb 04                	jmp    ffffffff8021402e <_RME_Prc_Crt+0x731>
ffffffff8021402a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021402e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
#endif
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff80214032:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214036:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021403a:	48 89 50 28          	mov    %rdx,0x28(%rax)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff8021403e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214042:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80214046:	48 89 50 30          	mov    %rdx,0x30(%rax)
#else
    Prc_Crt->Pgt=Raw_Pgt;
#endif
    
    /* Reference objects */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),1U);
ffffffff8021404a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021404e:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214052:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214057:	48 89 c7             	mov    %rax,%rdi
ffffffff8021405a:	e8 34 87 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),1U);
ffffffff8021405f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214063:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214067:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021406c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021406f:	e8 1f 87 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif

    /* Establish cap */
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff80214074:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214078:	48 b9 00 00 00 00 00 	movabs $0x5000000000000,%rcx
ffffffff8021407f:	00 05 00 
ffffffff80214082:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PRC,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80214085:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021408a:	c9                   	leave  
ffffffff8021408b:	c3                   	ret    

ffffffff8021408c <_RME_Prc_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Prc_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Prc)
{
ffffffff8021408c:	f3 0f 1e fa          	endbr64 
ffffffff80214090:	55                   	push   %rbp
ffffffff80214091:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214094:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80214098:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021409c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff802140a0:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802140a4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802140a8:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802140ad:	48 85 c0             	test   %rax,%rax
ffffffff802140b0:	0f 85 98 00 00 00    	jne    ffffffff8021414e <_RME_Prc_Del+0xc2>
ffffffff802140b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802140ba:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802140be:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802140c2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802140c5:	0f 96 c0             	setbe  %al
ffffffff802140c8:	0f b6 c0             	movzbl %al,%eax
ffffffff802140cb:	48 85 c0             	test   %rax,%rax
ffffffff802140ce:	74 0c                	je     ffffffff802140dc <_RME_Prc_Del+0x50>
ffffffff802140d0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802140d7:	e9 6e 03 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
ffffffff802140dc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802140e0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802140e4:	48 89 c2             	mov    %rax,%rdx
ffffffff802140e7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802140eb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802140ef:	48 01 d0             	add    %rdx,%rax
ffffffff802140f2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802140f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802140fa:	48 8b 00             	mov    (%rax),%rax
ffffffff802140fd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214101:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214105:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214109:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021410c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214110:	0f 94 c0             	sete   %al
ffffffff80214113:	0f b6 c0             	movzbl %al,%eax
ffffffff80214116:	48 85 c0             	test   %rax,%rax
ffffffff80214119:	74 0c                	je     ffffffff80214127 <_RME_Prc_Del+0x9b>
ffffffff8021411b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214122:	e9 23 03 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
ffffffff80214127:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021412b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021412f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214133:	0f 95 c0             	setne  %al
ffffffff80214136:	0f b6 c0             	movzbl %al,%eax
ffffffff80214139:	48 85 c0             	test   %rax,%rax
ffffffff8021413c:	0f 84 4c 01 00 00    	je     ffffffff8021428e <_RME_Prc_Del+0x202>
ffffffff80214142:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214149:	e9 fc 02 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
ffffffff8021414e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214152:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214156:	48 89 c2             	mov    %rax,%rdx
ffffffff80214159:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021415d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214161:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214164:	0f 93 c0             	setae  %al
ffffffff80214167:	0f b6 c0             	movzbl %al,%eax
ffffffff8021416a:	48 85 c0             	test   %rax,%rax
ffffffff8021416d:	74 0c                	je     ffffffff8021417b <_RME_Prc_Del+0xef>
ffffffff8021416f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214176:	e9 cf 02 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
ffffffff8021417b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021417f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214183:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214187:	48 89 c2             	mov    %rax,%rdx
ffffffff8021418a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021418e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214192:	48 01 d0             	add    %rdx,%rax
ffffffff80214195:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214199:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021419d:	48 8b 00             	mov    (%rax),%rax
ffffffff802141a0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802141a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802141a8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802141ac:	0f b7 c0             	movzwl %ax,%eax
ffffffff802141af:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802141b3:	0f 94 c0             	sete   %al
ffffffff802141b6:	0f b6 c0             	movzbl %al,%eax
ffffffff802141b9:	48 85 c0             	test   %rax,%rax
ffffffff802141bc:	74 0c                	je     ffffffff802141ca <_RME_Prc_Del+0x13e>
ffffffff802141be:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802141c5:	e9 80 02 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
ffffffff802141ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802141ce:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802141d2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802141d6:	0f 95 c0             	setne  %al
ffffffff802141d9:	0f b6 c0             	movzbl %al,%eax
ffffffff802141dc:	48 85 c0             	test   %rax,%rax
ffffffff802141df:	74 0c                	je     ffffffff802141ed <_RME_Prc_Del+0x161>
ffffffff802141e1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802141e8:	e9 5d 02 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
ffffffff802141ed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802141f1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802141f6:	48 89 c2             	mov    %rax,%rdx
ffffffff802141f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802141fd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214201:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214204:	0f 93 c0             	setae  %al
ffffffff80214207:	0f b6 c0             	movzbl %al,%eax
ffffffff8021420a:	48 85 c0             	test   %rax,%rax
ffffffff8021420d:	74 0c                	je     ffffffff8021421b <_RME_Prc_Del+0x18f>
ffffffff8021420f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214216:	e9 2f 02 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
ffffffff8021421b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021421f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214224:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214228:	48 89 c2             	mov    %rax,%rdx
ffffffff8021422b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021422f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214233:	48 01 d0             	add    %rdx,%rax
ffffffff80214236:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021423a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021423e:	48 8b 00             	mov    (%rax),%rax
ffffffff80214241:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214245:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214249:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021424d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214250:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214254:	0f 94 c0             	sete   %al
ffffffff80214257:	0f b6 c0             	movzbl %al,%eax
ffffffff8021425a:	48 85 c0             	test   %rax,%rax
ffffffff8021425d:	74 0c                	je     ffffffff8021426b <_RME_Prc_Del+0x1df>
ffffffff8021425f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214266:	e9 df 01 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
ffffffff8021426b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021426f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214273:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214277:	0f 95 c0             	setne  %al
ffffffff8021427a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021427d:	48 85 c0             	test   %rax,%rax
ffffffff80214280:	74 0c                	je     ffffffff8021428e <_RME_Prc_Del+0x202>
ffffffff80214282:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214289:	e9 bc 01 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021428e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214292:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214296:	83 e0 02             	and    $0x2,%eax
ffffffff80214299:	48 85 c0             	test   %rax,%rax
ffffffff8021429c:	0f 94 c0             	sete   %al
ffffffff8021429f:	0f b6 c0             	movzbl %al,%eax
ffffffff802142a2:	48 85 c0             	test   %rax,%rax
ffffffff802142a5:	74 0c                	je     ffffffff802142b3 <_RME_Prc_Del+0x227>
ffffffff802142a7:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802142ae:	e9 97 01 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff802142b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802142b7:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802142bb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802142bf:	48 39 c2             	cmp    %rax,%rdx
ffffffff802142c2:	0f 96 c0             	setbe  %al
ffffffff802142c5:	0f b6 c0             	movzbl %al,%eax
ffffffff802142c8:	48 85 c0             	test   %rax,%rax
ffffffff802142cb:	74 0c                	je     ffffffff802142d9 <_RME_Prc_Del+0x24d>
ffffffff802142cd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802142d4:	e9 71 01 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
ffffffff802142d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802142dd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802142e1:	48 89 c2             	mov    %rax,%rdx
ffffffff802142e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802142e8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802142ec:	48 01 d0             	add    %rdx,%rax
ffffffff802142ef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff802142f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802142f7:	48 8b 00             	mov    (%rax),%rax
ffffffff802142fa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802142fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214302:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214306:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214309:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021430d:	0f 95 c0             	setne  %al
ffffffff80214310:	0f b6 c0             	movzbl %al,%eax
ffffffff80214313:	48 85 c0             	test   %rax,%rax
ffffffff80214316:	74 0c                	je     ffffffff80214324 <_RME_Prc_Del+0x298>
ffffffff80214318:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021431f:	e9 26 01 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
ffffffff80214324:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214328:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021432c:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214330:	0f 95 c0             	setne  %al
ffffffff80214333:	0f b6 c0             	movzbl %al,%eax
ffffffff80214336:	48 85 c0             	test   %rax,%rax
ffffffff80214339:	74 0c                	je     ffffffff80214347 <_RME_Prc_Del+0x2bb>
ffffffff8021433b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214342:	e9 03 01 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
ffffffff80214347:	48 8b 15 b2 6c 01 00 	mov    0x16cb2(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8021434e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214352:	48 8b 48 20          	mov    0x20(%rax),%rcx
ffffffff80214356:	48 89 d0             	mov    %rdx,%rax
ffffffff80214359:	48 29 c8             	sub    %rcx,%rax
ffffffff8021435c:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80214360:	0f 96 c0             	setbe  %al
ffffffff80214363:	0f b6 c0             	movzbl %al,%eax
ffffffff80214366:	48 98                	cltq   
ffffffff80214368:	48 85 c0             	test   %rax,%rax
ffffffff8021436b:	74 0c                	je     ffffffff80214379 <_RME_Prc_Del+0x2ed>
ffffffff8021436d:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80214374:	e9 d1 00 00 00       	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>
ffffffff80214379:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021437d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214381:	48 85 c0             	test   %rax,%rax
ffffffff80214384:	0f 95 c0             	setne  %al
ffffffff80214387:	0f b6 c0             	movzbl %al,%eax
ffffffff8021438a:	48 85 c0             	test   %rax,%rax
ffffffff8021438d:	74 41                	je     ffffffff802143d0 <_RME_Prc_Del+0x344>
ffffffff8021438f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214393:	89 c0                	mov    %eax,%eax
ffffffff80214395:	48 85 c0             	test   %rax,%rax
ffffffff80214398:	0f 94 c0             	sete   %al
ffffffff8021439b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021439e:	48 85 c0             	test   %rax,%rax
ffffffff802143a1:	74 24                	je     ffffffff802143c7 <_RME_Prc_Del+0x33b>
ffffffff802143a3:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff802143aa:	00 ff ff 
ffffffff802143ad:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff802143b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802143b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802143b8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff802143bc:	48 89 ce             	mov    %rcx,%rsi
ffffffff802143bf:	48 89 c7             	mov    %rax,%rdi
ffffffff802143c2:	e8 97 83 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802143c7:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff802143ce:	eb 7a                	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>

    /* Remember for deletion */
    Prc_Cpt=Prc_Del->Cpt;
ffffffff802143d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802143d4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802143d8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=Prc_Del->Pgt;
ffffffff802143dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802143e0:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802143e4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
#endif

    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Prc_Del,Type_Stat);
ffffffff802143e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802143ec:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff802143f0:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802143f5:	48 89 ce             	mov    %rcx,%rsi
ffffffff802143f8:	48 89 c7             	mov    %rax,%rdi
ffffffff802143fb:	e8 5e 83 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80214400:	48 85 c0             	test   %rax,%rax
ffffffff80214403:	0f 94 c0             	sete   %al
ffffffff80214406:	0f b6 c0             	movzbl %al,%eax
ffffffff80214409:	48 85 c0             	test   %rax,%rax
ffffffff8021440c:	74 09                	je     ffffffff80214417 <_RME_Prc_Del+0x38b>
ffffffff8021440e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80214415:	eb 33                	jmp    ffffffff8021444a <_RME_Prc_Del+0x3be>

    /* Dereference caps */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),-1);
ffffffff80214417:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021441b:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021441f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80214426:	48 89 c7             	mov    %rax,%rdi
ffffffff80214429:	e8 65 83 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),-1);
ffffffff8021442e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214432:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214436:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021443d:	48 89 c7             	mov    %rax,%rdi
ffffffff80214440:	e8 4e 83 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif
    
    return 0;
ffffffff80214445:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021444a:	c9                   	leave  
ffffffff8021444b:	c3                   	ret    

ffffffff8021444c <_RME_Prc_Cpt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Prc_Cpt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Prc,
                              rme_cid_t Cap_Cpt)
{
ffffffff8021444c:	f3 0f 1e fa          	endbr64 
ffffffff80214450:	55                   	push   %rbp
ffffffff80214451:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214454:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80214458:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021445c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80214460:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_New;
    struct RME_Cap_Cpt* Cpt_Old;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80214464:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214468:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021446d:	48 85 c0             	test   %rax,%rax
ffffffff80214470:	0f 85 98 00 00 00    	jne    ffffffff8021450e <_RME_Prc_Cpt+0xc2>
ffffffff80214476:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021447a:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021447e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214482:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214485:	0f 96 c0             	setbe  %al
ffffffff80214488:	0f b6 c0             	movzbl %al,%eax
ffffffff8021448b:	48 85 c0             	test   %rax,%rax
ffffffff8021448e:	74 0c                	je     ffffffff8021449c <_RME_Prc_Cpt+0x50>
ffffffff80214490:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214497:	e9 6e 04 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff8021449c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802144a0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802144a4:	48 89 c2             	mov    %rax,%rdx
ffffffff802144a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802144ab:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802144af:	48 01 d0             	add    %rdx,%rax
ffffffff802144b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802144b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802144ba:	48 8b 00             	mov    (%rax),%rax
ffffffff802144bd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802144c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802144c5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802144c9:	0f b7 c0             	movzwl %ax,%eax
ffffffff802144cc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802144d0:	0f 94 c0             	sete   %al
ffffffff802144d3:	0f b6 c0             	movzbl %al,%eax
ffffffff802144d6:	48 85 c0             	test   %rax,%rax
ffffffff802144d9:	74 0c                	je     ffffffff802144e7 <_RME_Prc_Cpt+0x9b>
ffffffff802144db:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802144e2:	e9 23 04 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff802144e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802144eb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802144ef:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802144f3:	0f 95 c0             	setne  %al
ffffffff802144f6:	0f b6 c0             	movzbl %al,%eax
ffffffff802144f9:	48 85 c0             	test   %rax,%rax
ffffffff802144fc:	0f 84 4c 01 00 00    	je     ffffffff8021464e <_RME_Prc_Cpt+0x202>
ffffffff80214502:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214509:	e9 fc 03 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff8021450e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214512:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214516:	48 89 c2             	mov    %rax,%rdx
ffffffff80214519:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021451d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214521:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214524:	0f 93 c0             	setae  %al
ffffffff80214527:	0f b6 c0             	movzbl %al,%eax
ffffffff8021452a:	48 85 c0             	test   %rax,%rax
ffffffff8021452d:	74 0c                	je     ffffffff8021453b <_RME_Prc_Cpt+0xef>
ffffffff8021452f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214536:	e9 cf 03 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff8021453b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021453f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214543:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214547:	48 89 c2             	mov    %rax,%rdx
ffffffff8021454a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021454e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214552:	48 01 d0             	add    %rdx,%rax
ffffffff80214555:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214559:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021455d:	48 8b 00             	mov    (%rax),%rax
ffffffff80214560:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214564:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214568:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021456c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021456f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214573:	0f 94 c0             	sete   %al
ffffffff80214576:	0f b6 c0             	movzbl %al,%eax
ffffffff80214579:	48 85 c0             	test   %rax,%rax
ffffffff8021457c:	74 0c                	je     ffffffff8021458a <_RME_Prc_Cpt+0x13e>
ffffffff8021457e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214585:	e9 80 03 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff8021458a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021458e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214592:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214596:	0f 95 c0             	setne  %al
ffffffff80214599:	0f b6 c0             	movzbl %al,%eax
ffffffff8021459c:	48 85 c0             	test   %rax,%rax
ffffffff8021459f:	74 0c                	je     ffffffff802145ad <_RME_Prc_Cpt+0x161>
ffffffff802145a1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802145a8:	e9 5d 03 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff802145ad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802145b1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802145b6:	48 89 c2             	mov    %rax,%rdx
ffffffff802145b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802145bd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802145c1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802145c4:	0f 93 c0             	setae  %al
ffffffff802145c7:	0f b6 c0             	movzbl %al,%eax
ffffffff802145ca:	48 85 c0             	test   %rax,%rax
ffffffff802145cd:	74 0c                	je     ffffffff802145db <_RME_Prc_Cpt+0x18f>
ffffffff802145cf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802145d6:	e9 2f 03 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff802145db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802145df:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802145e4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802145e8:	48 89 c2             	mov    %rax,%rdx
ffffffff802145eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802145ef:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802145f3:	48 01 d0             	add    %rdx,%rax
ffffffff802145f6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802145fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802145fe:	48 8b 00             	mov    (%rax),%rax
ffffffff80214601:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214605:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214609:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021460d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214610:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214614:	0f 94 c0             	sete   %al
ffffffff80214617:	0f b6 c0             	movzbl %al,%eax
ffffffff8021461a:	48 85 c0             	test   %rax,%rax
ffffffff8021461d:	74 0c                	je     ffffffff8021462b <_RME_Prc_Cpt+0x1df>
ffffffff8021461f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214626:	e9 df 02 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff8021462b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021462f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214633:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214637:	0f 95 c0             	setne  %al
ffffffff8021463a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021463d:	48 85 c0             	test   %rax,%rax
ffffffff80214640:	74 0c                	je     ffffffff8021464e <_RME_Prc_Cpt+0x202>
ffffffff80214642:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214649:	e9 bc 02 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021464e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214652:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214657:	48 85 c0             	test   %rax,%rax
ffffffff8021465a:	0f 85 98 00 00 00    	jne    ffffffff802146f8 <_RME_Prc_Cpt+0x2ac>
ffffffff80214660:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214664:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80214668:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021466c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021466f:	0f 96 c0             	setbe  %al
ffffffff80214672:	0f b6 c0             	movzbl %al,%eax
ffffffff80214675:	48 85 c0             	test   %rax,%rax
ffffffff80214678:	74 0c                	je     ffffffff80214686 <_RME_Prc_Cpt+0x23a>
ffffffff8021467a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214681:	e9 84 02 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff80214686:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021468a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021468e:	48 89 c2             	mov    %rax,%rdx
ffffffff80214691:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214695:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214699:	48 01 d0             	add    %rdx,%rax
ffffffff8021469c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802146a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802146a4:	48 8b 00             	mov    (%rax),%rax
ffffffff802146a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802146ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802146af:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802146b3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802146b6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802146ba:	0f 94 c0             	sete   %al
ffffffff802146bd:	0f b6 c0             	movzbl %al,%eax
ffffffff802146c0:	48 85 c0             	test   %rax,%rax
ffffffff802146c3:	74 0c                	je     ffffffff802146d1 <_RME_Prc_Cpt+0x285>
ffffffff802146c5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802146cc:	e9 39 02 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff802146d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802146d5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802146d9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802146dd:	0f 95 c0             	setne  %al
ffffffff802146e0:	0f b6 c0             	movzbl %al,%eax
ffffffff802146e3:	48 85 c0             	test   %rax,%rax
ffffffff802146e6:	0f 84 4c 01 00 00    	je     ffffffff80214838 <_RME_Prc_Cpt+0x3ec>
ffffffff802146ec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802146f3:	e9 12 02 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff802146f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802146fc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214700:	48 89 c2             	mov    %rax,%rdx
ffffffff80214703:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214707:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021470b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021470e:	0f 93 c0             	setae  %al
ffffffff80214711:	0f b6 c0             	movzbl %al,%eax
ffffffff80214714:	48 85 c0             	test   %rax,%rax
ffffffff80214717:	74 0c                	je     ffffffff80214725 <_RME_Prc_Cpt+0x2d9>
ffffffff80214719:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214720:	e9 e5 01 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff80214725:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214729:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021472d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214731:	48 89 c2             	mov    %rax,%rdx
ffffffff80214734:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214738:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021473c:	48 01 d0             	add    %rdx,%rax
ffffffff8021473f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214743:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214747:	48 8b 00             	mov    (%rax),%rax
ffffffff8021474a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021474e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214752:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214756:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214759:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021475d:	0f 94 c0             	sete   %al
ffffffff80214760:	0f b6 c0             	movzbl %al,%eax
ffffffff80214763:	48 85 c0             	test   %rax,%rax
ffffffff80214766:	74 0c                	je     ffffffff80214774 <_RME_Prc_Cpt+0x328>
ffffffff80214768:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021476f:	e9 96 01 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff80214774:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214778:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021477c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214780:	0f 95 c0             	setne  %al
ffffffff80214783:	0f b6 c0             	movzbl %al,%eax
ffffffff80214786:	48 85 c0             	test   %rax,%rax
ffffffff80214789:	74 0c                	je     ffffffff80214797 <_RME_Prc_Cpt+0x34b>
ffffffff8021478b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214792:	e9 73 01 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff80214797:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021479b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802147a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802147a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802147a7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802147ab:	48 39 c2             	cmp    %rax,%rdx
ffffffff802147ae:	0f 93 c0             	setae  %al
ffffffff802147b1:	0f b6 c0             	movzbl %al,%eax
ffffffff802147b4:	48 85 c0             	test   %rax,%rax
ffffffff802147b7:	74 0c                	je     ffffffff802147c5 <_RME_Prc_Cpt+0x379>
ffffffff802147b9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802147c0:	e9 45 01 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff802147c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802147c9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802147ce:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802147d2:	48 89 c2             	mov    %rax,%rdx
ffffffff802147d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802147d9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802147dd:	48 01 d0             	add    %rdx,%rax
ffffffff802147e0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802147e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802147e8:	48 8b 00             	mov    (%rax),%rax
ffffffff802147eb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802147ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802147f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802147f7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802147fa:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802147fe:	0f 94 c0             	sete   %al
ffffffff80214801:	0f b6 c0             	movzbl %al,%eax
ffffffff80214804:	48 85 c0             	test   %rax,%rax
ffffffff80214807:	74 0c                	je     ffffffff80214815 <_RME_Prc_Cpt+0x3c9>
ffffffff80214809:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214810:	e9 f5 00 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
ffffffff80214815:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214819:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021481d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214821:	0f 95 c0             	setne  %al
ffffffff80214824:	0f b6 c0             	movzbl %al,%eax
ffffffff80214827:	48 85 c0             	test   %rax,%rax
ffffffff8021482a:	74 0c                	je     ffffffff80214838 <_RME_Prc_Cpt+0x3ec>
ffffffff8021482c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214833:	e9 d2 00 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
                   struct RME_Cap_Cpt*,Cpt_New,Type_Stat);     
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_CPT);
ffffffff80214838:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021483c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214840:	83 e0 04             	and    $0x4,%eax
ffffffff80214843:	48 85 c0             	test   %rax,%rax
ffffffff80214846:	0f 94 c0             	sete   %al
ffffffff80214849:	0f b6 c0             	movzbl %al,%eax
ffffffff8021484c:	48 85 c0             	test   %rax,%rax
ffffffff8021484f:	74 0c                	je     ffffffff8021485d <_RME_Prc_Cpt+0x411>
ffffffff80214851:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214858:	e9 ad 00 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
    RME_CAP_CHECK(Cpt_New,RME_CPT_FLAG_PRC_CPT);
ffffffff8021485d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214861:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214865:	25 80 00 00 00       	and    $0x80,%eax
ffffffff8021486a:	48 85 c0             	test   %rax,%rax
ffffffff8021486d:	0f 94 c0             	sete   %al
ffffffff80214870:	0f b6 c0             	movzbl %al,%eax
ffffffff80214873:	48 85 c0             	test   %rax,%rax
ffffffff80214876:	74 0c                	je     ffffffff80214884 <_RME_Prc_Cpt+0x438>
ffffffff80214878:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021487f:	e9 86 00 00 00       	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
    
    /* Convert to root */
    Cpt_New=RME_CAP_CONV_ROOT(Cpt_New,struct RME_Cap_Cpt*);
ffffffff80214884:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214888:	48 8b 00             	mov    (%rax),%rax
ffffffff8021488b:	89 c0                	mov    %eax,%eax
ffffffff8021488d:	48 85 c0             	test   %rax,%rax
ffffffff80214890:	74 0a                	je     ffffffff8021489c <_RME_Prc_Cpt+0x450>
ffffffff80214892:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214896:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021489a:	eb 04                	jmp    ffffffff802148a0 <_RME_Prc_Cpt+0x454>
ffffffff8021489c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802148a0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Commit the change */
    Cpt_Old=Prc_Op->Cpt;
ffffffff802148a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802148a8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802148ac:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Cpt)),
ffffffff802148b0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802148b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802148b8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff802148bc:	48 83 c1 28          	add    $0x28,%rcx
ffffffff802148c0:	48 89 c6             	mov    %rax,%rsi
ffffffff802148c3:	48 89 cf             	mov    %rcx,%rdi
ffffffff802148c6:	e8 93 7e ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802148cb:	48 85 c0             	test   %rax,%rax
ffffffff802148ce:	75 09                	jne    ffffffff802148d9 <_RME_Prc_Cpt+0x48d>
                     (rme_ptr_t)Cpt_Old,(rme_ptr_t)Cpt_New)==RME_CASFAIL)
    {
        RME_COV_MARKER();
        
        return RME_ERR_PTH_CONFLICT;
ffffffff802148d0:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff802148d7:	eb 31                	jmp    ffffffff8021490a <_RME_Prc_Cpt+0x4be>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Reference new table and dereference the old table */
    RME_FETCH_ADD(&(Cpt_New->Head.Root_Ref),1);
ffffffff802148d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802148dd:	48 83 c0 08          	add    $0x8,%rax
ffffffff802148e1:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802148e6:	48 89 c7             	mov    %rax,%rdi
ffffffff802148e9:	e8 a5 7e ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    RME_FETCH_ADD(&(Cpt_Old->Head.Root_Ref),-1);
ffffffff802148ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802148f2:	48 83 c0 08          	add    $0x8,%rax
ffffffff802148f6:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802148fd:	48 89 c7             	mov    %rax,%rdi
ffffffff80214900:	e8 8e 7e ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80214905:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021490a:	c9                   	leave  
ffffffff8021490b:	c3                   	ret    

ffffffff8021490c <_RME_Prc_Pgt>:
#else
static rme_ret_t _RME_Prc_Pgt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Raw_Pgt)
#endif
{
ffffffff8021490c:	f3 0f 1e fa          	endbr64 
ffffffff80214910:	55                   	push   %rbp
ffffffff80214911:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214914:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80214918:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021491c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80214920:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Pgt_Old;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80214924:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214928:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021492d:	48 85 c0             	test   %rax,%rax
ffffffff80214930:	0f 85 98 00 00 00    	jne    ffffffff802149ce <_RME_Prc_Pgt+0xc2>
ffffffff80214936:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021493a:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021493e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214942:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214945:	0f 96 c0             	setbe  %al
ffffffff80214948:	0f b6 c0             	movzbl %al,%eax
ffffffff8021494b:	48 85 c0             	test   %rax,%rax
ffffffff8021494e:	74 0c                	je     ffffffff8021495c <_RME_Prc_Pgt+0x50>
ffffffff80214950:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214957:	e9 6e 04 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff8021495c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214960:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214964:	48 89 c2             	mov    %rax,%rdx
ffffffff80214967:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021496b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021496f:	48 01 d0             	add    %rdx,%rax
ffffffff80214972:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214976:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021497a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021497d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214981:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214985:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214989:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021498c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214990:	0f 94 c0             	sete   %al
ffffffff80214993:	0f b6 c0             	movzbl %al,%eax
ffffffff80214996:	48 85 c0             	test   %rax,%rax
ffffffff80214999:	74 0c                	je     ffffffff802149a7 <_RME_Prc_Pgt+0x9b>
ffffffff8021499b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802149a2:	e9 23 04 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff802149a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802149ab:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802149af:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802149b3:	0f 95 c0             	setne  %al
ffffffff802149b6:	0f b6 c0             	movzbl %al,%eax
ffffffff802149b9:	48 85 c0             	test   %rax,%rax
ffffffff802149bc:	0f 84 4c 01 00 00    	je     ffffffff80214b0e <_RME_Prc_Pgt+0x202>
ffffffff802149c2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802149c9:	e9 fc 03 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff802149ce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802149d2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802149d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802149d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802149dd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802149e1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802149e4:	0f 93 c0             	setae  %al
ffffffff802149e7:	0f b6 c0             	movzbl %al,%eax
ffffffff802149ea:	48 85 c0             	test   %rax,%rax
ffffffff802149ed:	74 0c                	je     ffffffff802149fb <_RME_Prc_Pgt+0xef>
ffffffff802149ef:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802149f6:	e9 cf 03 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff802149fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802149ff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214a03:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214a07:	48 89 c2             	mov    %rax,%rdx
ffffffff80214a0a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214a0e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214a12:	48 01 d0             	add    %rdx,%rax
ffffffff80214a15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214a19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214a1d:	48 8b 00             	mov    (%rax),%rax
ffffffff80214a20:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214a24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214a28:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214a2c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214a2f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214a33:	0f 94 c0             	sete   %al
ffffffff80214a36:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a39:	48 85 c0             	test   %rax,%rax
ffffffff80214a3c:	74 0c                	je     ffffffff80214a4a <_RME_Prc_Pgt+0x13e>
ffffffff80214a3e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214a45:	e9 80 03 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff80214a4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214a4e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214a52:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214a56:	0f 95 c0             	setne  %al
ffffffff80214a59:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a5c:	48 85 c0             	test   %rax,%rax
ffffffff80214a5f:	74 0c                	je     ffffffff80214a6d <_RME_Prc_Pgt+0x161>
ffffffff80214a61:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214a68:	e9 5d 03 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff80214a6d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214a71:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214a76:	48 89 c2             	mov    %rax,%rdx
ffffffff80214a79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214a7d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214a81:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214a84:	0f 93 c0             	setae  %al
ffffffff80214a87:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a8a:	48 85 c0             	test   %rax,%rax
ffffffff80214a8d:	74 0c                	je     ffffffff80214a9b <_RME_Prc_Pgt+0x18f>
ffffffff80214a8f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214a96:	e9 2f 03 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff80214a9b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214a9f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214aa4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214aa8:	48 89 c2             	mov    %rax,%rdx
ffffffff80214aab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214aaf:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214ab3:	48 01 d0             	add    %rdx,%rax
ffffffff80214ab6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214aba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214abe:	48 8b 00             	mov    (%rax),%rax
ffffffff80214ac1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214ac5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214ac9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214acd:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214ad0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214ad4:	0f 94 c0             	sete   %al
ffffffff80214ad7:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ada:	48 85 c0             	test   %rax,%rax
ffffffff80214add:	74 0c                	je     ffffffff80214aeb <_RME_Prc_Pgt+0x1df>
ffffffff80214adf:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214ae6:	e9 df 02 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff80214aeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214aef:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214af3:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214af7:	0f 95 c0             	setne  %al
ffffffff80214afa:	0f b6 c0             	movzbl %al,%eax
ffffffff80214afd:	48 85 c0             	test   %rax,%rax
ffffffff80214b00:	74 0c                	je     ffffffff80214b0e <_RME_Prc_Pgt+0x202>
ffffffff80214b02:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214b09:	e9 bc 02 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat); 
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80214b0e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214b12:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214b17:	48 85 c0             	test   %rax,%rax
ffffffff80214b1a:	0f 85 98 00 00 00    	jne    ffffffff80214bb8 <_RME_Prc_Pgt+0x2ac>
ffffffff80214b20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214b24:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80214b28:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214b2c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214b2f:	0f 96 c0             	setbe  %al
ffffffff80214b32:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b35:	48 85 c0             	test   %rax,%rax
ffffffff80214b38:	74 0c                	je     ffffffff80214b46 <_RME_Prc_Pgt+0x23a>
ffffffff80214b3a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214b41:	e9 84 02 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff80214b46:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214b4a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214b4e:	48 89 c2             	mov    %rax,%rdx
ffffffff80214b51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214b55:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214b59:	48 01 d0             	add    %rdx,%rax
ffffffff80214b5c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214b60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214b64:	48 8b 00             	mov    (%rax),%rax
ffffffff80214b67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214b6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214b6f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214b73:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214b76:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214b7a:	0f 94 c0             	sete   %al
ffffffff80214b7d:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b80:	48 85 c0             	test   %rax,%rax
ffffffff80214b83:	74 0c                	je     ffffffff80214b91 <_RME_Prc_Pgt+0x285>
ffffffff80214b85:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214b8c:	e9 39 02 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff80214b91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214b95:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214b99:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214b9d:	0f 95 c0             	setne  %al
ffffffff80214ba0:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ba3:	48 85 c0             	test   %rax,%rax
ffffffff80214ba6:	0f 84 4c 01 00 00    	je     ffffffff80214cf8 <_RME_Prc_Pgt+0x3ec>
ffffffff80214bac:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214bb3:	e9 12 02 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff80214bb8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214bbc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214bc0:	48 89 c2             	mov    %rax,%rdx
ffffffff80214bc3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214bc7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214bcb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214bce:	0f 93 c0             	setae  %al
ffffffff80214bd1:	0f b6 c0             	movzbl %al,%eax
ffffffff80214bd4:	48 85 c0             	test   %rax,%rax
ffffffff80214bd7:	74 0c                	je     ffffffff80214be5 <_RME_Prc_Pgt+0x2d9>
ffffffff80214bd9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214be0:	e9 e5 01 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff80214be5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214be9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214bed:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214bf1:	48 89 c2             	mov    %rax,%rdx
ffffffff80214bf4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214bf8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214bfc:	48 01 d0             	add    %rdx,%rax
ffffffff80214bff:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214c03:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c07:	48 8b 00             	mov    (%rax),%rax
ffffffff80214c0a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214c0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214c12:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214c16:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214c19:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214c1d:	0f 94 c0             	sete   %al
ffffffff80214c20:	0f b6 c0             	movzbl %al,%eax
ffffffff80214c23:	48 85 c0             	test   %rax,%rax
ffffffff80214c26:	74 0c                	je     ffffffff80214c34 <_RME_Prc_Pgt+0x328>
ffffffff80214c28:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214c2f:	e9 96 01 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff80214c34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214c38:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214c3c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214c40:	0f 95 c0             	setne  %al
ffffffff80214c43:	0f b6 c0             	movzbl %al,%eax
ffffffff80214c46:	48 85 c0             	test   %rax,%rax
ffffffff80214c49:	74 0c                	je     ffffffff80214c57 <_RME_Prc_Pgt+0x34b>
ffffffff80214c4b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214c52:	e9 73 01 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff80214c57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214c5b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214c60:	48 89 c2             	mov    %rax,%rdx
ffffffff80214c63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c67:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214c6b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214c6e:	0f 93 c0             	setae  %al
ffffffff80214c71:	0f b6 c0             	movzbl %al,%eax
ffffffff80214c74:	48 85 c0             	test   %rax,%rax
ffffffff80214c77:	74 0c                	je     ffffffff80214c85 <_RME_Prc_Pgt+0x379>
ffffffff80214c79:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214c80:	e9 45 01 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff80214c85:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214c89:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214c8e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214c92:	48 89 c2             	mov    %rax,%rdx
ffffffff80214c95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c99:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214c9d:	48 01 d0             	add    %rdx,%rax
ffffffff80214ca0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214ca4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214ca8:	48 8b 00             	mov    (%rax),%rax
ffffffff80214cab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214caf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214cb3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214cb7:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214cba:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214cbe:	0f 94 c0             	sete   %al
ffffffff80214cc1:	0f b6 c0             	movzbl %al,%eax
ffffffff80214cc4:	48 85 c0             	test   %rax,%rax
ffffffff80214cc7:	74 0c                	je     ffffffff80214cd5 <_RME_Prc_Pgt+0x3c9>
ffffffff80214cc9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214cd0:	e9 f5 00 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
ffffffff80214cd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214cd9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214cdd:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214ce1:	0f 95 c0             	setne  %al
ffffffff80214ce4:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ce7:	48 85 c0             	test   %rax,%rax
ffffffff80214cea:	74 0c                	je     ffffffff80214cf8 <_RME_Prc_Pgt+0x3ec>
ffffffff80214cec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214cf3:	e9 d2 00 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
                   struct RME_Cap_Pgt*,Pgt_New,Type_Stat);
#endif
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
ffffffff80214cf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214cfc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214d00:	83 e0 08             	and    $0x8,%eax
ffffffff80214d03:	48 85 c0             	test   %rax,%rax
ffffffff80214d06:	0f 94 c0             	sete   %al
ffffffff80214d09:	0f b6 c0             	movzbl %al,%eax
ffffffff80214d0c:	48 85 c0             	test   %rax,%rax
ffffffff80214d0f:	74 0c                	je     ffffffff80214d1d <_RME_Prc_Pgt+0x411>
ffffffff80214d11:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214d18:	e9 ad 00 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_New,RME_PGT_FLAG_PRC_PGT);
ffffffff80214d1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214d21:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214d25:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80214d2a:	48 85 c0             	test   %rax,%rax
ffffffff80214d2d:	0f 94 c0             	sete   %al
ffffffff80214d30:	0f b6 c0             	movzbl %al,%eax
ffffffff80214d33:	48 85 c0             	test   %rax,%rax
ffffffff80214d36:	74 0c                	je     ffffffff80214d44 <_RME_Prc_Pgt+0x438>
ffffffff80214d38:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214d3f:	e9 86 00 00 00       	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
#endif
    
    Pgt_Old=Prc_Op->Pgt;
ffffffff80214d44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214d48:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80214d4c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
#if(RME_PGT_RAW_ENABLE==0U)
    /* Convert to root */
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff80214d50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214d54:	48 8b 00             	mov    (%rax),%rax
ffffffff80214d57:	89 c0                	mov    %eax,%eax
ffffffff80214d59:	48 85 c0             	test   %rax,%rax
ffffffff80214d5c:	74 0a                	je     ffffffff80214d68 <_RME_Prc_Pgt+0x45c>
ffffffff80214d5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214d62:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214d66:	eb 04                	jmp    ffffffff80214d6c <_RME_Prc_Pgt+0x460>
ffffffff80214d68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214d6c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* Actually commit the change */
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Pgt)),
ffffffff80214d70:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80214d74:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214d78:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80214d7c:	48 83 c1 30          	add    $0x30,%rcx
ffffffff80214d80:	48 89 c6             	mov    %rax,%rsi
ffffffff80214d83:	48 89 cf             	mov    %rcx,%rdi
ffffffff80214d86:	e8 d3 79 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80214d8b:	48 85 c0             	test   %rax,%rax
ffffffff80214d8e:	75 09                	jne    ffffffff80214d99 <_RME_Prc_Pgt+0x48d>
                     Raw_Pgt)==RME_CASFAIL)
#endif
    {
        RME_COV_MARKER();
        
        return RME_ERR_PTH_CONFLICT;
ffffffff80214d90:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff80214d97:	eb 31                	jmp    ffffffff80214dca <_RME_Prc_Pgt+0x4be>
        /* No action required */
    }
    
    /* Reference new table and dereference the old table */
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Pgt_New->Head.Root_Ref),1);
ffffffff80214d99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214d9d:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214da1:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214da6:	48 89 c7             	mov    %rax,%rdi
ffffffff80214da9:	e8 e5 79 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    RME_FETCH_ADD(&(Pgt_Old->Head.Root_Ref),-1);
ffffffff80214dae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214db2:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214db6:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80214dbd:	48 89 c7             	mov    %rax,%rdi
ffffffff80214dc0:	e8 ce 79 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif
    
    return 0;
ffffffff80214dc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80214dca:	c9                   	leave  
ffffffff80214dcb:	c3                   	ret    

ffffffff80214dcc <_RME_Thd_Boot_Crt>:
                            rme_cid_t Cap_Thd,
                            rme_cid_t Cap_Prc,
                            rme_ptr_t Vaddr,
                            rme_ptr_t Prio,
                            struct RME_CPU_Local* Local)
{
ffffffff80214dcc:	f3 0f 1e fa          	endbr64 
ffffffff80214dd0:	55                   	push   %rbp
ffffffff80214dd1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214dd4:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80214dd8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80214ddc:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80214de0:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80214de4:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80214de8:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80214dec:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    struct RME_Cap_Prc* Prc_Root;
    struct RME_Thd_Struct* Thread;
    rme_ptr_t Type_Stat;
    
    /* Check whether the priority level is allowed */
    if(Prio>=RME_PREEMPT_PRIO_NUM)
ffffffff80214df0:	48 83 7d a0 3f       	cmpq   $0x3f,-0x60(%rbp)
ffffffff80214df5:	76 0c                	jbe    ffffffff80214e03 <_RME_Thd_Boot_Crt+0x37>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80214df7:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80214dfe:	e9 44 06 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214e03:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214e07:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214e0c:	48 85 c0             	test   %rax,%rax
ffffffff80214e0f:	0f 85 98 00 00 00    	jne    ffffffff80214ead <_RME_Thd_Boot_Crt+0xe1>
ffffffff80214e15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214e19:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80214e1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214e21:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214e24:	0f 96 c0             	setbe  %al
ffffffff80214e27:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e2a:	48 85 c0             	test   %rax,%rax
ffffffff80214e2d:	74 0c                	je     ffffffff80214e3b <_RME_Thd_Boot_Crt+0x6f>
ffffffff80214e2f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214e36:	e9 0c 06 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214e3b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214e3f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214e43:	48 89 c2             	mov    %rax,%rdx
ffffffff80214e46:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214e4a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214e4e:	48 01 d0             	add    %rdx,%rax
ffffffff80214e51:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214e55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214e59:	48 8b 00             	mov    (%rax),%rax
ffffffff80214e5c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214e60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214e64:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214e68:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214e6b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214e6f:	0f 94 c0             	sete   %al
ffffffff80214e72:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e75:	48 85 c0             	test   %rax,%rax
ffffffff80214e78:	74 0c                	je     ffffffff80214e86 <_RME_Thd_Boot_Crt+0xba>
ffffffff80214e7a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214e81:	e9 c1 05 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214e86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214e8a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214e8e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214e92:	0f 95 c0             	setne  %al
ffffffff80214e95:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e98:	48 85 c0             	test   %rax,%rax
ffffffff80214e9b:	0f 84 4c 01 00 00    	je     ffffffff80214fed <_RME_Thd_Boot_Crt+0x221>
ffffffff80214ea1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214ea8:	e9 9a 05 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214ead:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214eb1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214eb5:	48 89 c2             	mov    %rax,%rdx
ffffffff80214eb8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214ebc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214ec0:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214ec3:	0f 93 c0             	setae  %al
ffffffff80214ec6:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ec9:	48 85 c0             	test   %rax,%rax
ffffffff80214ecc:	74 0c                	je     ffffffff80214eda <_RME_Thd_Boot_Crt+0x10e>
ffffffff80214ece:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214ed5:	e9 6d 05 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214eda:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214ede:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214ee2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214ee6:	48 89 c2             	mov    %rax,%rdx
ffffffff80214ee9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214eed:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214ef1:	48 01 d0             	add    %rdx,%rax
ffffffff80214ef4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214ef8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214efc:	48 8b 00             	mov    (%rax),%rax
ffffffff80214eff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214f03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214f07:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214f0b:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214f0e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214f12:	0f 94 c0             	sete   %al
ffffffff80214f15:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f18:	48 85 c0             	test   %rax,%rax
ffffffff80214f1b:	74 0c                	je     ffffffff80214f29 <_RME_Thd_Boot_Crt+0x15d>
ffffffff80214f1d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214f24:	e9 1e 05 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214f29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214f2d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214f31:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214f35:	0f 95 c0             	setne  %al
ffffffff80214f38:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f3b:	48 85 c0             	test   %rax,%rax
ffffffff80214f3e:	74 0c                	je     ffffffff80214f4c <_RME_Thd_Boot_Crt+0x180>
ffffffff80214f40:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214f47:	e9 fb 04 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214f4c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214f50:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214f55:	48 89 c2             	mov    %rax,%rdx
ffffffff80214f58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214f5c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214f60:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214f63:	0f 93 c0             	setae  %al
ffffffff80214f66:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f69:	48 85 c0             	test   %rax,%rax
ffffffff80214f6c:	74 0c                	je     ffffffff80214f7a <_RME_Thd_Boot_Crt+0x1ae>
ffffffff80214f6e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214f75:	e9 cd 04 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214f7a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214f7e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214f83:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214f87:	48 89 c2             	mov    %rax,%rdx
ffffffff80214f8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214f8e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214f92:	48 01 d0             	add    %rdx,%rax
ffffffff80214f95:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214f99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214f9d:	48 8b 00             	mov    (%rax),%rax
ffffffff80214fa0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214fa4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214fa8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214fac:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214faf:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214fb3:	0f 94 c0             	sete   %al
ffffffff80214fb6:	0f b6 c0             	movzbl %al,%eax
ffffffff80214fb9:	48 85 c0             	test   %rax,%rax
ffffffff80214fbc:	74 0c                	je     ffffffff80214fca <_RME_Thd_Boot_Crt+0x1fe>
ffffffff80214fbe:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214fc5:	e9 7d 04 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214fca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214fce:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214fd2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214fd6:	0f 95 c0             	setne  %al
ffffffff80214fd9:	0f b6 c0             	movzbl %al,%eax
ffffffff80214fdc:	48 85 c0             	test   %rax,%rax
ffffffff80214fdf:	74 0c                	je     ffffffff80214fed <_RME_Thd_Boot_Crt+0x221>
ffffffff80214fe1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214fe8:	e9 5a 04 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80214fed:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80214ff1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214ff6:	48 85 c0             	test   %rax,%rax
ffffffff80214ff9:	0f 85 98 00 00 00    	jne    ffffffff80215097 <_RME_Thd_Boot_Crt+0x2cb>
ffffffff80214fff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215003:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80215007:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021500b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021500e:	0f 96 c0             	setbe  %al
ffffffff80215011:	0f b6 c0             	movzbl %al,%eax
ffffffff80215014:	48 85 c0             	test   %rax,%rax
ffffffff80215017:	74 0c                	je     ffffffff80215025 <_RME_Thd_Boot_Crt+0x259>
ffffffff80215019:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215020:	e9 22 04 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80215025:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80215029:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021502d:	48 89 c2             	mov    %rax,%rdx
ffffffff80215030:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215034:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215038:	48 01 d0             	add    %rdx,%rax
ffffffff8021503b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021503f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215043:	48 8b 00             	mov    (%rax),%rax
ffffffff80215046:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021504a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021504e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215052:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215055:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215059:	0f 94 c0             	sete   %al
ffffffff8021505c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021505f:	48 85 c0             	test   %rax,%rax
ffffffff80215062:	74 0c                	je     ffffffff80215070 <_RME_Thd_Boot_Crt+0x2a4>
ffffffff80215064:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021506b:	e9 d7 03 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80215070:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215074:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215078:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8021507c:	0f 95 c0             	setne  %al
ffffffff8021507f:	0f b6 c0             	movzbl %al,%eax
ffffffff80215082:	48 85 c0             	test   %rax,%rax
ffffffff80215085:	0f 84 4c 01 00 00    	je     ffffffff802151d7 <_RME_Thd_Boot_Crt+0x40b>
ffffffff8021508b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215092:	e9 b0 03 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80215097:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021509b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021509f:	48 89 c2             	mov    %rax,%rdx
ffffffff802150a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802150a6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802150aa:	48 39 c2             	cmp    %rax,%rdx
ffffffff802150ad:	0f 93 c0             	setae  %al
ffffffff802150b0:	0f b6 c0             	movzbl %al,%eax
ffffffff802150b3:	48 85 c0             	test   %rax,%rax
ffffffff802150b6:	74 0c                	je     ffffffff802150c4 <_RME_Thd_Boot_Crt+0x2f8>
ffffffff802150b8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802150bf:	e9 83 03 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff802150c4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802150c8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802150cc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802150d0:	48 89 c2             	mov    %rax,%rdx
ffffffff802150d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802150d7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802150db:	48 01 d0             	add    %rdx,%rax
ffffffff802150de:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802150e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802150e6:	48 8b 00             	mov    (%rax),%rax
ffffffff802150e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802150ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802150f1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802150f5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802150f8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802150fc:	0f 94 c0             	sete   %al
ffffffff802150ff:	0f b6 c0             	movzbl %al,%eax
ffffffff80215102:	48 85 c0             	test   %rax,%rax
ffffffff80215105:	74 0c                	je     ffffffff80215113 <_RME_Thd_Boot_Crt+0x347>
ffffffff80215107:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021510e:	e9 34 03 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80215113:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215117:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021511b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021511f:	0f 95 c0             	setne  %al
ffffffff80215122:	0f b6 c0             	movzbl %al,%eax
ffffffff80215125:	48 85 c0             	test   %rax,%rax
ffffffff80215128:	74 0c                	je     ffffffff80215136 <_RME_Thd_Boot_Crt+0x36a>
ffffffff8021512a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215131:	e9 11 03 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80215136:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021513a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021513f:	48 89 c2             	mov    %rax,%rdx
ffffffff80215142:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215146:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021514a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021514d:	0f 93 c0             	setae  %al
ffffffff80215150:	0f b6 c0             	movzbl %al,%eax
ffffffff80215153:	48 85 c0             	test   %rax,%rax
ffffffff80215156:	74 0c                	je     ffffffff80215164 <_RME_Thd_Boot_Crt+0x398>
ffffffff80215158:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021515f:	e9 e3 02 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80215164:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80215168:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021516d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215171:	48 89 c2             	mov    %rax,%rdx
ffffffff80215174:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215178:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021517c:	48 01 d0             	add    %rdx,%rax
ffffffff8021517f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215183:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215187:	48 8b 00             	mov    (%rax),%rax
ffffffff8021518a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021518e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215192:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215196:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215199:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021519d:	0f 94 c0             	sete   %al
ffffffff802151a0:	0f b6 c0             	movzbl %al,%eax
ffffffff802151a3:	48 85 c0             	test   %rax,%rax
ffffffff802151a6:	74 0c                	je     ffffffff802151b4 <_RME_Thd_Boot_Crt+0x3e8>
ffffffff802151a8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802151af:	e9 93 02 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff802151b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802151b8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802151bc:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802151c0:	0f 95 c0             	setne  %al
ffffffff802151c3:	0f b6 c0             	movzbl %al,%eax
ffffffff802151c6:	48 85 c0             	test   %rax,%rax
ffffffff802151c9:	74 0c                	je     ffffffff802151d7 <_RME_Thd_Boot_Crt+0x40b>
ffffffff802151cb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802151d2:	e9 70 02 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);   
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802151d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802151db:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802151df:	83 e0 01             	and    $0x1,%eax
ffffffff802151e2:	48 85 c0             	test   %rax,%rax
ffffffff802151e5:	0f 94 c0             	sete   %al
ffffffff802151e8:	0f b6 c0             	movzbl %al,%eax
ffffffff802151eb:	48 85 c0             	test   %rax,%rax
ffffffff802151ee:	74 0c                	je     ffffffff802151fc <_RME_Thd_Boot_Crt+0x430>
ffffffff802151f0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802151f7:	e9 4b 02 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff802151fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215200:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215204:	83 e0 02             	and    $0x2,%eax
ffffffff80215207:	48 85 c0             	test   %rax,%rax
ffffffff8021520a:	0f 94 c0             	sete   %al
ffffffff8021520d:	0f b6 c0             	movzbl %al,%eax
ffffffff80215210:	48 85 c0             	test   %rax,%rax
ffffffff80215213:	74 0c                	je     ffffffff80215221 <_RME_Thd_Boot_Crt+0x455>
ffffffff80215215:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021521c:	e9 26 02 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff80215221:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215225:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80215229:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021522d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215230:	0f 96 c0             	setbe  %al
ffffffff80215233:	0f b6 c0             	movzbl %al,%eax
ffffffff80215236:	48 85 c0             	test   %rax,%rax
ffffffff80215239:	74 0c                	je     ffffffff80215247 <_RME_Thd_Boot_Crt+0x47b>
ffffffff8021523b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215242:	e9 00 02 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80215247:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021524b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021524f:	48 89 c2             	mov    %rax,%rdx
ffffffff80215252:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215256:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021525a:	48 01 d0             	add    %rdx,%rax
ffffffff8021525d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff80215261:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215265:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021526c:	00 00 00 
ffffffff8021526f:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80215274:	48 89 c7             	mov    %rax,%rdi
ffffffff80215277:	e8 e2 74 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021527c:	48 85 c0             	test   %rax,%rax
ffffffff8021527f:	0f 94 c0             	sete   %al
ffffffff80215282:	0f b6 c0             	movzbl %al,%eax
ffffffff80215285:	48 85 c0             	test   %rax,%rax
ffffffff80215288:	74 0c                	je     ffffffff80215296 <_RME_Thd_Boot_Crt+0x4ca>
ffffffff8021528a:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80215291:	e9 b1 01 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80215296:	48 8b 15 63 5d 01 00 	mov    0x15d63(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8021529d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802152a1:	48 89 50 20          	mov    %rdx,0x20(%rax)
     
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_THD_SIZE(0U))!=0)
ffffffff802152a5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802152a9:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff802152ae:	48 89 c7             	mov    %rax,%rdi
ffffffff802152b1:	e8 11 d1 ff ff       	call   ffffffff802123c7 <_RME_Kot_Mark>
ffffffff802152b6:	48 85 c0             	test   %rax,%rax
ffffffff802152b9:	74 17                	je     ffffffff802152d2 <_RME_Thd_Boot_Crt+0x506>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff802152bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802152bf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff802152c6:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff802152cd:	e9 75 01 00 00       	jmp    ffffffff80215447 <_RME_Thd_Boot_Crt+0x67b>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    Thread=(struct RME_Thd_Struct*)Vaddr;
ffffffff802152d2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802152d6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* The TID of these threads are by default taken care of by the kernel */
    Thread->Sched.TID=0U;
ffffffff802152da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152de:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff802152e5:	00 
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff802152e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152ea:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff802152f1:	ff ff 7f 
ffffffff802152f4:	48 89 48 30          	mov    %rcx,0x30(%rax)
    Thread->Sched.State=RME_THD_READY;
ffffffff802152f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152fc:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80215303:	00 
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80215304:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215308:	48 8b 00             	mov    (%rax),%rax
ffffffff8021530b:	89 c0                	mov    %eax,%eax
ffffffff8021530d:	48 85 c0             	test   %rax,%rax
ffffffff80215310:	74 0a                	je     ffffffff8021531c <_RME_Thd_Boot_Crt+0x550>
ffffffff80215312:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215316:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021531a:	eb 04                	jmp    ffffffff80215320 <_RME_Thd_Boot_Crt+0x554>
ffffffff8021531c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215320:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Thread->Sched.Prc=Prc_Root;
ffffffff80215324:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215328:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021532c:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Thread->Sched.Signal=0U;
ffffffff80215330:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215334:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff8021533b:	00 
    Thread->Sched.Prio=Prio;
ffffffff8021533c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215340:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80215344:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Thread->Sched.Prio_Max=RME_PREEMPT_PRIO_NUM-1U;
ffffffff80215348:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021534c:	48 c7 40 48 3f 00 00 	movq   $0x3f,0x48(%rax)
ffffffff80215353:	00 
    /* Set scheduler reference to 1 so cannot be free */
    Thread->Sched.Sched_Ref=1U;
ffffffff80215354:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215358:	48 c7 40 60 01 00 00 	movq   $0x1,0x60(%rax)
ffffffff8021535f:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff80215360:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215364:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff8021536b:	00 
    /* Bind the thread to the current CPU */
    Thread->Sched.Local=Local;
ffffffff8021536c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215370:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff80215374:	48 89 50 28          	mov    %rdx,0x28(%rax)
    /* This is a marking that this thread haven't sent any notifications */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80215378:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021537c:	48 83 c0 10          	add    $0x10,%rax
ffffffff80215380:	48 89 c7             	mov    %rax,%rdi
ffffffff80215383:	e8 d2 79 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff80215388:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021538c:	48 83 c0 78          	add    $0x78,%rax
ffffffff80215390:	48 89 c7             	mov    %rax,%rdi
ffffffff80215393:	e8 c2 79 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    /* Point its pointer to itself - this will never be a hypervisor thread */
    Thread->Ctx.Hyp_Attr=0U;
ffffffff80215398:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021539c:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
ffffffff802153a3:	00 00 00 00 
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff802153a7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802153ab:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff802153b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802153b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802153b8:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    /* Initialize the invocation stack */
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff802153bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802153c3:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff802153c9:	48 89 c7             	mov    %rax,%rdi
ffffffff802153cc:	e8 89 79 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    Thread->Ctx.Invstk_Depth=0U;
ffffffff802153d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802153d5:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
ffffffff802153dc:	00 00 00 00 
    
    /* Info init */
    Thd_Crt->Head.Root_Ref=1U;
ffffffff802153e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802153e4:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff802153eb:	00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff802153ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802153f0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff802153f4:	48 89 50 18          	mov    %rdx,0x18(%rax)
    /* This can only be a parent, and not a child, and cannot be freed. Additionally,
     * this should not be blocked on any endpoint. Any attempt to block this thread will fail.
     * Setting execution information for this is also prohibited. */
    Thd_Crt->Head.Flag=RME_THD_FLAG_SCHED_PRIO|RME_THD_FLAG_SCHED_PARENT|
ffffffff802153f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802153fc:	48 c7 40 10 ec 01 00 	movq   $0x1ec,0x10(%rax)
ffffffff80215403:	00 
                       RME_THD_FLAG_XFER_DST|RME_THD_FLAG_XFER_SRC|
                       RME_THD_FLAG_SCHED_RCV|RME_THD_FLAG_SWT;

    /* Referece process */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref), 1U);
ffffffff80215404:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215408:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021540c:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80215411:	48 89 c7             	mov    %rax,%rdi
ffffffff80215414:	e8 7a 73 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Insert this into the runqueue, and set current thread to it */
    _RME_Run_Ins(Thread);
ffffffff80215419:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021541d:	48 89 c7             	mov    %rax,%rdi
ffffffff80215420:	e8 cc d9 ff ff       	call   ffffffff80212df1 <_RME_Run_Ins>
    Local->Thd_Cur=Thread;
ffffffff80215425:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80215429:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021542d:	48 89 50 08          	mov    %rdx,0x8(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff80215431:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215435:	48 b9 00 00 00 00 00 	movabs $0x6000000000000,%rcx
ffffffff8021543c:	00 06 00 
ffffffff8021543f:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_THD,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80215442:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80215447:	c9                   	leave  
ffffffff80215448:	c3                   	ret    

ffffffff80215449 <_RME_Thd_Crt>:
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Prio_Max,
                              rme_ptr_t Raddr,
                              rme_ptr_t Attr,
                              rme_ptr_t Is_Hyp)
{
ffffffff80215449:	f3 0f 1e fa          	endbr64 
ffffffff8021544d:	55                   	push   %rbp
ffffffff8021544e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80215451:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff80215455:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff80215459:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff8021545d:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff80215461:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff80215465:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff80215469:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Vaddr;
    rme_ptr_t Size;
    
    /* See if the maximum priority relationship is correct - a thread
     * can never create a thread with higher maximum priority */
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
ffffffff8021546d:	e8 cd 63 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80215472:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80215476:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff8021547a:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
ffffffff8021547e:	76 0c                	jbe    ffffffff8021548c <_RME_Thd_Crt+0x43>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80215480:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80215487:	e9 80 09 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021548c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80215490:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215495:	48 85 c0             	test   %rax,%rax
ffffffff80215498:	0f 85 98 00 00 00    	jne    ffffffff80215536 <_RME_Thd_Crt+0xed>
ffffffff8021549e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802154a2:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802154a6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802154aa:	48 39 c2             	cmp    %rax,%rdx
ffffffff802154ad:	0f 96 c0             	setbe  %al
ffffffff802154b0:	0f b6 c0             	movzbl %al,%eax
ffffffff802154b3:	48 85 c0             	test   %rax,%rax
ffffffff802154b6:	74 0c                	je     ffffffff802154c4 <_RME_Thd_Crt+0x7b>
ffffffff802154b8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802154bf:	e9 48 09 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff802154c4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802154c8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802154cc:	48 89 c2             	mov    %rax,%rdx
ffffffff802154cf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802154d3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802154d7:	48 01 d0             	add    %rdx,%rax
ffffffff802154da:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802154de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802154e2:	48 8b 00             	mov    (%rax),%rax
ffffffff802154e5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802154e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802154ed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802154f1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802154f4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802154f8:	0f 94 c0             	sete   %al
ffffffff802154fb:	0f b6 c0             	movzbl %al,%eax
ffffffff802154fe:	48 85 c0             	test   %rax,%rax
ffffffff80215501:	74 0c                	je     ffffffff8021550f <_RME_Thd_Crt+0xc6>
ffffffff80215503:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021550a:	e9 fd 08 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff8021550f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215513:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215517:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021551b:	0f 95 c0             	setne  %al
ffffffff8021551e:	0f b6 c0             	movzbl %al,%eax
ffffffff80215521:	48 85 c0             	test   %rax,%rax
ffffffff80215524:	0f 84 4c 01 00 00    	je     ffffffff80215676 <_RME_Thd_Crt+0x22d>
ffffffff8021552a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215531:	e9 d6 08 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215536:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021553a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021553e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215541:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215545:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215549:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021554c:	0f 93 c0             	setae  %al
ffffffff8021554f:	0f b6 c0             	movzbl %al,%eax
ffffffff80215552:	48 85 c0             	test   %rax,%rax
ffffffff80215555:	74 0c                	je     ffffffff80215563 <_RME_Thd_Crt+0x11a>
ffffffff80215557:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021555e:	e9 a9 08 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215563:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80215567:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021556b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021556f:	48 89 c2             	mov    %rax,%rdx
ffffffff80215572:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215576:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021557a:	48 01 d0             	add    %rdx,%rax
ffffffff8021557d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215581:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215585:	48 8b 00             	mov    (%rax),%rax
ffffffff80215588:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021558c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215590:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215594:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215597:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021559b:	0f 94 c0             	sete   %al
ffffffff8021559e:	0f b6 c0             	movzbl %al,%eax
ffffffff802155a1:	48 85 c0             	test   %rax,%rax
ffffffff802155a4:	74 0c                	je     ffffffff802155b2 <_RME_Thd_Crt+0x169>
ffffffff802155a6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802155ad:	e9 5a 08 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff802155b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802155b6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802155ba:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802155be:	0f 95 c0             	setne  %al
ffffffff802155c1:	0f b6 c0             	movzbl %al,%eax
ffffffff802155c4:	48 85 c0             	test   %rax,%rax
ffffffff802155c7:	74 0c                	je     ffffffff802155d5 <_RME_Thd_Crt+0x18c>
ffffffff802155c9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802155d0:	e9 37 08 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff802155d5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802155d9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802155de:	48 89 c2             	mov    %rax,%rdx
ffffffff802155e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802155e5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802155e9:	48 39 c2             	cmp    %rax,%rdx
ffffffff802155ec:	0f 93 c0             	setae  %al
ffffffff802155ef:	0f b6 c0             	movzbl %al,%eax
ffffffff802155f2:	48 85 c0             	test   %rax,%rax
ffffffff802155f5:	74 0c                	je     ffffffff80215603 <_RME_Thd_Crt+0x1ba>
ffffffff802155f7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802155fe:	e9 09 08 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215603:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80215607:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021560c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215610:	48 89 c2             	mov    %rax,%rdx
ffffffff80215613:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215617:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021561b:	48 01 d0             	add    %rdx,%rax
ffffffff8021561e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215622:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215626:	48 8b 00             	mov    (%rax),%rax
ffffffff80215629:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021562d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215631:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215635:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215638:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021563c:	0f 94 c0             	sete   %al
ffffffff8021563f:	0f b6 c0             	movzbl %al,%eax
ffffffff80215642:	48 85 c0             	test   %rax,%rax
ffffffff80215645:	74 0c                	je     ffffffff80215653 <_RME_Thd_Crt+0x20a>
ffffffff80215647:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021564e:	e9 b9 07 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215653:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215657:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021565b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021565f:	0f 95 c0             	setne  %al
ffffffff80215662:	0f b6 c0             	movzbl %al,%eax
ffffffff80215665:	48 85 c0             	test   %rax,%rax
ffffffff80215668:	74 0c                	je     ffffffff80215676 <_RME_Thd_Crt+0x22d>
ffffffff8021566a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215671:	e9 96 07 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff80215676:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021567a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021567f:	48 85 c0             	test   %rax,%rax
ffffffff80215682:	0f 85 98 00 00 00    	jne    ffffffff80215720 <_RME_Thd_Crt+0x2d7>
ffffffff80215688:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021568c:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80215690:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215694:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215697:	0f 96 c0             	setbe  %al
ffffffff8021569a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021569d:	48 85 c0             	test   %rax,%rax
ffffffff802156a0:	74 0c                	je     ffffffff802156ae <_RME_Thd_Crt+0x265>
ffffffff802156a2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802156a9:	e9 5e 07 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff802156ae:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802156b2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802156b6:	48 89 c2             	mov    %rax,%rdx
ffffffff802156b9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802156bd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802156c1:	48 01 d0             	add    %rdx,%rax
ffffffff802156c4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802156c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802156cc:	48 8b 00             	mov    (%rax),%rax
ffffffff802156cf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802156d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802156d7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802156db:	0f b7 c0             	movzwl %ax,%eax
ffffffff802156de:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802156e2:	0f 94 c0             	sete   %al
ffffffff802156e5:	0f b6 c0             	movzbl %al,%eax
ffffffff802156e8:	48 85 c0             	test   %rax,%rax
ffffffff802156eb:	74 0c                	je     ffffffff802156f9 <_RME_Thd_Crt+0x2b0>
ffffffff802156ed:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802156f4:	e9 13 07 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff802156f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802156fd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215701:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215705:	0f 95 c0             	setne  %al
ffffffff80215708:	0f b6 c0             	movzbl %al,%eax
ffffffff8021570b:	48 85 c0             	test   %rax,%rax
ffffffff8021570e:	0f 84 4c 01 00 00    	je     ffffffff80215860 <_RME_Thd_Crt+0x417>
ffffffff80215714:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021571b:	e9 ec 06 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215720:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215724:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215728:	48 89 c2             	mov    %rax,%rdx
ffffffff8021572b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021572f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215733:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215736:	0f 93 c0             	setae  %al
ffffffff80215739:	0f b6 c0             	movzbl %al,%eax
ffffffff8021573c:	48 85 c0             	test   %rax,%rax
ffffffff8021573f:	74 0c                	je     ffffffff8021574d <_RME_Thd_Crt+0x304>
ffffffff80215741:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215748:	e9 bf 06 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff8021574d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215751:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215755:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215759:	48 89 c2             	mov    %rax,%rdx
ffffffff8021575c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215760:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215764:	48 01 d0             	add    %rdx,%rax
ffffffff80215767:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021576b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021576f:	48 8b 00             	mov    (%rax),%rax
ffffffff80215772:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215776:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021577a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021577e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215781:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215785:	0f 94 c0             	sete   %al
ffffffff80215788:	0f b6 c0             	movzbl %al,%eax
ffffffff8021578b:	48 85 c0             	test   %rax,%rax
ffffffff8021578e:	74 0c                	je     ffffffff8021579c <_RME_Thd_Crt+0x353>
ffffffff80215790:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215797:	e9 70 06 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff8021579c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802157a0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802157a4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802157a8:	0f 95 c0             	setne  %al
ffffffff802157ab:	0f b6 c0             	movzbl %al,%eax
ffffffff802157ae:	48 85 c0             	test   %rax,%rax
ffffffff802157b1:	74 0c                	je     ffffffff802157bf <_RME_Thd_Crt+0x376>
ffffffff802157b3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802157ba:	e9 4d 06 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff802157bf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802157c3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802157c8:	48 89 c2             	mov    %rax,%rdx
ffffffff802157cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802157cf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802157d3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802157d6:	0f 93 c0             	setae  %al
ffffffff802157d9:	0f b6 c0             	movzbl %al,%eax
ffffffff802157dc:	48 85 c0             	test   %rax,%rax
ffffffff802157df:	74 0c                	je     ffffffff802157ed <_RME_Thd_Crt+0x3a4>
ffffffff802157e1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802157e8:	e9 1f 06 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff802157ed:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802157f1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802157f6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802157fa:	48 89 c2             	mov    %rax,%rdx
ffffffff802157fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215801:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215805:	48 01 d0             	add    %rdx,%rax
ffffffff80215808:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021580c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215810:	48 8b 00             	mov    (%rax),%rax
ffffffff80215813:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215817:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021581b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021581f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215822:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215826:	0f 94 c0             	sete   %al
ffffffff80215829:	0f b6 c0             	movzbl %al,%eax
ffffffff8021582c:	48 85 c0             	test   %rax,%rax
ffffffff8021582f:	74 0c                	je     ffffffff8021583d <_RME_Thd_Crt+0x3f4>
ffffffff80215831:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215838:	e9 cf 05 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff8021583d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215841:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215845:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215849:	0f 95 c0             	setne  %al
ffffffff8021584c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021584f:	48 85 c0             	test   %rax,%rax
ffffffff80215852:	74 0c                	je     ffffffff80215860 <_RME_Thd_Crt+0x417>
ffffffff80215854:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021585b:	e9 ac 05 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80215860:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80215864:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215869:	48 85 c0             	test   %rax,%rax
ffffffff8021586c:	0f 85 98 00 00 00    	jne    ffffffff8021590a <_RME_Thd_Crt+0x4c1>
ffffffff80215872:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215876:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021587a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8021587e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215881:	0f 96 c0             	setbe  %al
ffffffff80215884:	0f b6 c0             	movzbl %al,%eax
ffffffff80215887:	48 85 c0             	test   %rax,%rax
ffffffff8021588a:	74 0c                	je     ffffffff80215898 <_RME_Thd_Crt+0x44f>
ffffffff8021588c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215893:	e9 74 05 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215898:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8021589c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802158a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802158a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802158a7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802158ab:	48 01 d0             	add    %rdx,%rax
ffffffff802158ae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802158b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802158b6:	48 8b 00             	mov    (%rax),%rax
ffffffff802158b9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802158bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802158c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802158c5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802158c8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802158cc:	0f 94 c0             	sete   %al
ffffffff802158cf:	0f b6 c0             	movzbl %al,%eax
ffffffff802158d2:	48 85 c0             	test   %rax,%rax
ffffffff802158d5:	74 0c                	je     ffffffff802158e3 <_RME_Thd_Crt+0x49a>
ffffffff802158d7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802158de:	e9 29 05 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff802158e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802158e7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802158eb:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802158ef:	0f 95 c0             	setne  %al
ffffffff802158f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802158f5:	48 85 c0             	test   %rax,%rax
ffffffff802158f8:	0f 84 4c 01 00 00    	je     ffffffff80215a4a <_RME_Thd_Crt+0x601>
ffffffff802158fe:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215905:	e9 02 05 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff8021590a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8021590e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215912:	48 89 c2             	mov    %rax,%rdx
ffffffff80215915:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215919:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021591d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215920:	0f 93 c0             	setae  %al
ffffffff80215923:	0f b6 c0             	movzbl %al,%eax
ffffffff80215926:	48 85 c0             	test   %rax,%rax
ffffffff80215929:	74 0c                	je     ffffffff80215937 <_RME_Thd_Crt+0x4ee>
ffffffff8021592b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215932:	e9 d5 04 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215937:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8021593b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021593f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215943:	48 89 c2             	mov    %rax,%rdx
ffffffff80215946:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021594a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021594e:	48 01 d0             	add    %rdx,%rax
ffffffff80215951:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215955:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215959:	48 8b 00             	mov    (%rax),%rax
ffffffff8021595c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215960:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215964:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215968:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021596b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021596f:	0f 94 c0             	sete   %al
ffffffff80215972:	0f b6 c0             	movzbl %al,%eax
ffffffff80215975:	48 85 c0             	test   %rax,%rax
ffffffff80215978:	74 0c                	je     ffffffff80215986 <_RME_Thd_Crt+0x53d>
ffffffff8021597a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215981:	e9 86 04 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215986:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021598a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021598e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215992:	0f 95 c0             	setne  %al
ffffffff80215995:	0f b6 c0             	movzbl %al,%eax
ffffffff80215998:	48 85 c0             	test   %rax,%rax
ffffffff8021599b:	74 0c                	je     ffffffff802159a9 <_RME_Thd_Crt+0x560>
ffffffff8021599d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802159a4:	e9 63 04 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff802159a9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff802159ad:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802159b2:	48 89 c2             	mov    %rax,%rdx
ffffffff802159b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802159b9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802159bd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802159c0:	0f 93 c0             	setae  %al
ffffffff802159c3:	0f b6 c0             	movzbl %al,%eax
ffffffff802159c6:	48 85 c0             	test   %rax,%rax
ffffffff802159c9:	74 0c                	je     ffffffff802159d7 <_RME_Thd_Crt+0x58e>
ffffffff802159cb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802159d2:	e9 35 04 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff802159d7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff802159db:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802159e0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802159e4:	48 89 c2             	mov    %rax,%rdx
ffffffff802159e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802159eb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802159ef:	48 01 d0             	add    %rdx,%rax
ffffffff802159f2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802159f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802159fa:	48 8b 00             	mov    (%rax),%rax
ffffffff802159fd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215a01:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215a05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215a09:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215a0c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215a10:	0f 94 c0             	sete   %al
ffffffff80215a13:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a16:	48 85 c0             	test   %rax,%rax
ffffffff80215a19:	74 0c                	je     ffffffff80215a27 <_RME_Thd_Crt+0x5de>
ffffffff80215a1b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215a22:	e9 e5 03 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215a27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215a2b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215a2f:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80215a33:	0f 95 c0             	setne  %al
ffffffff80215a36:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a39:	48 85 c0             	test   %rax,%rax
ffffffff80215a3c:	74 0c                	je     ffffffff80215a4a <_RME_Thd_Crt+0x601>
ffffffff80215a3e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215a45:	e9 c2 03 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80215a4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215a4e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215a52:	83 e0 01             	and    $0x1,%eax
ffffffff80215a55:	48 85 c0             	test   %rax,%rax
ffffffff80215a58:	0f 94 c0             	sete   %al
ffffffff80215a5b:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a5e:	48 85 c0             	test   %rax,%rax
ffffffff80215a61:	74 0c                	je     ffffffff80215a6f <_RME_Thd_Crt+0x626>
ffffffff80215a63:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215a6a:	e9 9d 03 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff80215a6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215a73:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215a77:	83 e0 02             	and    $0x2,%eax
ffffffff80215a7a:	48 85 c0             	test   %rax,%rax
ffffffff80215a7d:	0f 94 c0             	sete   %al
ffffffff80215a80:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a83:	48 85 c0             	test   %rax,%rax
ffffffff80215a86:	74 0c                	je     ffffffff80215a94 <_RME_Thd_Crt+0x64b>
ffffffff80215a88:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215a8f:	e9 78 03 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
    /* See if the creation is valid for this kmem range */
    if(Is_Hyp==0U)
ffffffff80215a94:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
ffffffff80215a99:	75 23                	jne    ffffffff80215abe <_RME_Thd_Crt+0x675>
    {
        RME_COV_MARKER();
        
        Size=RME_THD_SIZE(Attr);
ffffffff80215a9b:	48 c7 45 d8 60 01 00 	movq   $0x160,-0x28(%rbp)
ffffffff80215aa2:	00 
#else
        Size=RME_HYP_SIZE;
#endif
    }
    
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff80215aa3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215aa7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215aab:	83 e0 04             	and    $0x4,%eax
ffffffff80215aae:	48 85 c0             	test   %rax,%rax
ffffffff80215ab1:	0f 94 c0             	sete   %al
ffffffff80215ab4:	0f b6 c0             	movzbl %al,%eax
ffffffff80215ab7:	48 85 c0             	test   %rax,%rax
ffffffff80215aba:	74 26                	je     ffffffff80215ae2 <_RME_Thd_Crt+0x699>
ffffffff80215abc:	eb 0c                	jmp    ffffffff80215aca <_RME_Thd_Crt+0x681>
        return RME_ERR_PTH_HADDR;
ffffffff80215abe:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80215ac5:	e9 42 03 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff80215aca:	48 c7 c7 88 93 22 80 	mov    $0xffffffff80229388,%rdi
ffffffff80215ad1:	e8 35 6f ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80215ad6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215add:	e9 2a 03 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215ae2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215ae6:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80215aea:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80215aee:	48 01 d0             	add    %rdx,%rax
ffffffff80215af1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80215af5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215af9:	48 3b 45 10          	cmp    0x10(%rbp),%rax
ffffffff80215afd:	0f 92 c0             	setb   %al
ffffffff80215b00:	0f b6 c0             	movzbl %al,%eax
ffffffff80215b03:	48 85 c0             	test   %rax,%rax
ffffffff80215b06:	74 34                	je     ffffffff80215b3c <_RME_Thd_Crt+0x6f3>
ffffffff80215b08:	48 c7 c7 a8 93 22 80 	mov    $0xffffffff802293a8,%rdi
ffffffff80215b0f:	e8 f7 6e ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80215b14:	48 c7 c7 c7 93 22 80 	mov    $0xffffffff802293c7,%rdi
ffffffff80215b1b:	e8 eb 6e ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80215b20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215b24:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215b28:	48 89 c7             	mov    %rax,%rdi
ffffffff80215b2b:	e8 19 6e ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
ffffffff80215b30:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215b37:	e9 d0 02 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215b3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215b40:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215b44:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff80215b48:	0f 92 c0             	setb   %al
ffffffff80215b4b:	0f b6 c0             	movzbl %al,%eax
ffffffff80215b4e:	48 85 c0             	test   %rax,%rax
ffffffff80215b51:	74 18                	je     ffffffff80215b6b <_RME_Thd_Crt+0x722>
ffffffff80215b53:	48 c7 c7 d8 93 22 80 	mov    $0xffffffff802293d8,%rdi
ffffffff80215b5a:	e8 ac 6e ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80215b5f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215b66:	e9 a1 02 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215b6b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80215b6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215b73:	48 01 d0             	add    %rdx,%rax
ffffffff80215b76:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff80215b7a:	0f 97 c0             	seta   %al
ffffffff80215b7d:	0f b6 c0             	movzbl %al,%eax
ffffffff80215b80:	48 85 c0             	test   %rax,%rax
ffffffff80215b83:	74 18                	je     ffffffff80215b9d <_RME_Thd_Crt+0x754>
ffffffff80215b85:	48 c7 c7 f8 93 22 80 	mov    $0xffffffff802293f8,%rdi
ffffffff80215b8c:	e8 7a 6e ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80215b91:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215b98:	e9 6f 02 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215b9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215ba1:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80215ba5:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80215ba9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80215bad:	48 01 ca             	add    %rcx,%rdx
ffffffff80215bb0:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff80215bb4:	48 39 d0             	cmp    %rdx,%rax
ffffffff80215bb7:	0f 92 c0             	setb   %al
ffffffff80215bba:	0f b6 c0             	movzbl %al,%eax
ffffffff80215bbd:	48 85 c0             	test   %rax,%rax
ffffffff80215bc0:	74 18                	je     ffffffff80215bda <_RME_Thd_Crt+0x791>
ffffffff80215bc2:	48 c7 c7 18 94 22 80 	mov    $0xffffffff80229418,%rdi
ffffffff80215bc9:	e8 3d 6e ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80215bce:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215bd5:	e9 32 02 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff80215bda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215bde:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80215be2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80215be6:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215be9:	0f 96 c0             	setbe  %al
ffffffff80215bec:	0f b6 c0             	movzbl %al,%eax
ffffffff80215bef:	48 85 c0             	test   %rax,%rax
ffffffff80215bf2:	74 0c                	je     ffffffff80215c00 <_RME_Thd_Crt+0x7b7>
ffffffff80215bf4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215bfb:	e9 0c 02 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215c00:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80215c04:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215c08:	48 89 c2             	mov    %rax,%rdx
ffffffff80215c0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215c0f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215c13:	48 01 d0             	add    %rdx,%rax
ffffffff80215c16:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff80215c1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215c1e:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80215c25:	00 00 00 
ffffffff80215c28:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80215c2d:	48 89 c7             	mov    %rax,%rdi
ffffffff80215c30:	e8 29 6b ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80215c35:	48 85 c0             	test   %rax,%rax
ffffffff80215c38:	0f 94 c0             	sete   %al
ffffffff80215c3b:	0f b6 c0             	movzbl %al,%eax
ffffffff80215c3e:	48 85 c0             	test   %rax,%rax
ffffffff80215c41:	74 0c                	je     ffffffff80215c4f <_RME_Thd_Crt+0x806>
ffffffff80215c43:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80215c4a:	e9 bd 01 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
ffffffff80215c4f:	48 8b 15 aa 53 01 00 	mov    0x153aa(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff80215c56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215c5a:	48 89 50 20          	mov    %rdx,0x20(%rax)
     
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,Size)<0)
ffffffff80215c5e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80215c62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215c66:	48 89 d6             	mov    %rdx,%rsi
ffffffff80215c69:	48 89 c7             	mov    %rax,%rdi
ffffffff80215c6c:	e8 56 c7 ff ff       	call   ffffffff802123c7 <_RME_Kot_Mark>
ffffffff80215c71:	48 85 c0             	test   %rax,%rax
ffffffff80215c74:	79 17                	jns    ffffffff80215c8d <_RME_Thd_Crt+0x844>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff80215c76:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215c7a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80215c81:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80215c88:	e9 7f 01 00 00       	jmp    ffffffff80215e0c <_RME_Thd_Crt+0x9c3>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Object init */
    Thread=(struct RME_Thd_Struct*)Vaddr;
ffffffff80215c8d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215c91:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    /* These thread's TID default to 0, and have no timeslices assigned */
    Thread->Sched.TID=0U;
ffffffff80215c95:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c99:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80215ca0:	00 
    Thread->Sched.Slice=0U;
ffffffff80215ca1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ca5:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80215cac:	00 
    Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80215cad:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cb1:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80215cb8:	00 
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80215cb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215cbd:	48 8b 00             	mov    (%rax),%rax
ffffffff80215cc0:	89 c0                	mov    %eax,%eax
ffffffff80215cc2:	48 85 c0             	test   %rax,%rax
ffffffff80215cc5:	74 0a                	je     ffffffff80215cd1 <_RME_Thd_Crt+0x888>
ffffffff80215cc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215ccb:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80215ccf:	eb 04                	jmp    ffffffff80215cd5 <_RME_Thd_Crt+0x88c>
ffffffff80215cd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215cd5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Thread->Sched.Prc=Prc_Root;
ffffffff80215cd9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cdd:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80215ce1:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Thread->Sched.Signal=0U;
ffffffff80215ce5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ce9:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff80215cf0:	00 
    Thread->Sched.Prio_Max=Prio_Max;
ffffffff80215cf1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cf5:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff80215cf9:	48 89 50 48          	mov    %rdx,0x48(%rax)
    Thread->Sched.Sched_Ref=0U;
ffffffff80215cfd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d01:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
ffffffff80215d08:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff80215d09:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d0d:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff80215d14:	00 
    /* Currently the thread is not bound to any particular CPU */
    Thread->Sched.Local=RME_THD_FREE;
ffffffff80215d15:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d19:	48 c7 40 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%rax)
ffffffff80215d20:	ff 
    /* This is a marking that this thread haven't sent any notifications */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80215d21:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d25:	48 83 c0 10          	add    $0x10,%rax
ffffffff80215d29:	48 89 c7             	mov    %rax,%rdi
ffffffff80215d2c:	e8 29 70 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff80215d31:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d35:	48 83 c0 78          	add    $0x78,%rax
ffffffff80215d39:	48 89 c7             	mov    %rax,%rdi
ffffffff80215d3c:	e8 19 70 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    /* Point its pointer to itself - this is not a hypervisor thread yet */
    if(Is_Hyp==0U)
ffffffff80215d41:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
ffffffff80215d46:	75 29                	jne    ffffffff80215d71 <_RME_Thd_Crt+0x928>
    {
        RME_COV_MARKER();
        
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff80215d48:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d4c:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80215d50:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80215d57:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215d5b:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff80215d61:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d68:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
ffffffff80215d6f:	eb 2b                	jmp    ffffffff80215d9c <_RME_Thd_Crt+0x953>
    /* Default to HYP_VA_BASE for all created hypervisor threads */
    else
    {
        RME_COV_MARKER();
        
        Thread->Ctx.Hyp_Attr=Attr|RME_THD_HYP_FLAG;
ffffffff80215d71:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
ffffffff80215d78:	00 00 80 
ffffffff80215d7b:	48 0b 45 18          	or     0x18(%rbp),%rax
ffffffff80215d7f:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d82:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d86:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
        Thread->Ctx.Reg=RME_HYP_VA_BASE;
ffffffff80215d8d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d91:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
ffffffff80215d98:	00 00 00 00 
    }
    /* Initialize the invocation stack */
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff80215d9c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215da0:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff80215da6:	48 89 c7             	mov    %rax,%rdi
ffffffff80215da9:	e8 ac 6f ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    Thread->Ctx.Invstk_Depth=0U;
ffffffff80215dae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215db2:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
ffffffff80215db9:	00 00 00 00 

    /* Header init */
    Thd_Crt->Head.Root_Ref=0U;
ffffffff80215dbd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215dc1:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80215dc8:	00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff80215dc9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215dcd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80215dd1:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Thd_Crt->Head.Flag=RME_THD_FLAG_ALL;
ffffffff80215dd5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215dd9:	48 c7 40 10 ff 01 00 	movq   $0x1ff,0x10(%rax)
ffffffff80215de0:	00 

    /* Reference process */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref), 1U);
ffffffff80215de1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80215de5:	48 83 c0 08          	add    $0x8,%rax
ffffffff80215de9:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80215dee:	48 89 c7             	mov    %rax,%rdi
ffffffff80215df1:	e8 9d 69 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff80215df6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215dfa:	48 b9 00 00 00 00 00 	movabs $0x6000000000000,%rcx
ffffffff80215e01:	00 06 00 
ffffffff80215e04:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_THD,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80215e07:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80215e0c:	c9                   	leave  
ffffffff80215e0d:	c3                   	ret    

ffffffff80215e0e <_RME_Thd_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Thd)
{
ffffffff80215e0e:	f3 0f 1e fa          	endbr64 
ffffffff80215e12:	55                   	push   %rbp
ffffffff80215e13:	48 89 e5             	mov    %rsp,%rbp
ffffffff80215e16:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80215e1a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80215e1e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80215e22:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    /* These are for deletion */
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80215e26:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215e2a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215e2f:	48 85 c0             	test   %rax,%rax
ffffffff80215e32:	0f 85 98 00 00 00    	jne    ffffffff80215ed0 <_RME_Thd_Del+0xc2>
ffffffff80215e38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215e3c:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80215e40:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215e44:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215e47:	0f 96 c0             	setbe  %al
ffffffff80215e4a:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e4d:	48 85 c0             	test   %rax,%rax
ffffffff80215e50:	74 0c                	je     ffffffff80215e5e <_RME_Thd_Del+0x50>
ffffffff80215e52:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215e59:	e9 31 04 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
ffffffff80215e5e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215e62:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215e66:	48 89 c2             	mov    %rax,%rdx
ffffffff80215e69:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215e6d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215e71:	48 01 d0             	add    %rdx,%rax
ffffffff80215e74:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215e78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215e7c:	48 8b 00             	mov    (%rax),%rax
ffffffff80215e7f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215e83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215e87:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215e8b:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215e8e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215e92:	0f 94 c0             	sete   %al
ffffffff80215e95:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e98:	48 85 c0             	test   %rax,%rax
ffffffff80215e9b:	74 0c                	je     ffffffff80215ea9 <_RME_Thd_Del+0x9b>
ffffffff80215e9d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215ea4:	e9 e6 03 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
ffffffff80215ea9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215ead:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215eb1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215eb5:	0f 95 c0             	setne  %al
ffffffff80215eb8:	0f b6 c0             	movzbl %al,%eax
ffffffff80215ebb:	48 85 c0             	test   %rax,%rax
ffffffff80215ebe:	0f 84 4c 01 00 00    	je     ffffffff80216010 <_RME_Thd_Del+0x202>
ffffffff80215ec4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215ecb:	e9 bf 03 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
ffffffff80215ed0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ed4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215ed8:	48 89 c2             	mov    %rax,%rdx
ffffffff80215edb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215edf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215ee3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215ee6:	0f 93 c0             	setae  %al
ffffffff80215ee9:	0f b6 c0             	movzbl %al,%eax
ffffffff80215eec:	48 85 c0             	test   %rax,%rax
ffffffff80215eef:	74 0c                	je     ffffffff80215efd <_RME_Thd_Del+0xef>
ffffffff80215ef1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215ef8:	e9 92 03 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
ffffffff80215efd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215f01:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215f05:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215f09:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f0c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215f10:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215f14:	48 01 d0             	add    %rdx,%rax
ffffffff80215f17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215f1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215f1f:	48 8b 00             	mov    (%rax),%rax
ffffffff80215f22:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215f26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215f2a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215f2e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215f31:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215f35:	0f 94 c0             	sete   %al
ffffffff80215f38:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f3b:	48 85 c0             	test   %rax,%rax
ffffffff80215f3e:	74 0c                	je     ffffffff80215f4c <_RME_Thd_Del+0x13e>
ffffffff80215f40:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215f47:	e9 43 03 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
ffffffff80215f4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215f50:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215f54:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215f58:	0f 95 c0             	setne  %al
ffffffff80215f5b:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f5e:	48 85 c0             	test   %rax,%rax
ffffffff80215f61:	74 0c                	je     ffffffff80215f6f <_RME_Thd_Del+0x161>
ffffffff80215f63:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215f6a:	e9 20 03 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
ffffffff80215f6f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215f73:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215f78:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215f7f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215f83:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215f86:	0f 93 c0             	setae  %al
ffffffff80215f89:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f8c:	48 85 c0             	test   %rax,%rax
ffffffff80215f8f:	74 0c                	je     ffffffff80215f9d <_RME_Thd_Del+0x18f>
ffffffff80215f91:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215f98:	e9 f2 02 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
ffffffff80215f9d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215fa1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215fa6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215faa:	48 89 c2             	mov    %rax,%rdx
ffffffff80215fad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215fb1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215fb5:	48 01 d0             	add    %rdx,%rax
ffffffff80215fb8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215fbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215fc0:	48 8b 00             	mov    (%rax),%rax
ffffffff80215fc3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215fc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215fcb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215fcf:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215fd2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215fd6:	0f 94 c0             	sete   %al
ffffffff80215fd9:	0f b6 c0             	movzbl %al,%eax
ffffffff80215fdc:	48 85 c0             	test   %rax,%rax
ffffffff80215fdf:	74 0c                	je     ffffffff80215fed <_RME_Thd_Del+0x1df>
ffffffff80215fe1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215fe8:	e9 a2 02 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
ffffffff80215fed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215ff1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215ff5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215ff9:	0f 95 c0             	setne  %al
ffffffff80215ffc:	0f b6 c0             	movzbl %al,%eax
ffffffff80215fff:	48 85 c0             	test   %rax,%rax
ffffffff80216002:	74 0c                	je     ffffffff80216010 <_RME_Thd_Del+0x202>
ffffffff80216004:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021600b:	e9 7f 02 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80216010:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216014:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216018:	83 e0 02             	and    $0x2,%eax
ffffffff8021601b:	48 85 c0             	test   %rax,%rax
ffffffff8021601e:	0f 94 c0             	sete   %al
ffffffff80216021:	0f b6 c0             	movzbl %al,%eax
ffffffff80216024:	48 85 c0             	test   %rax,%rax
ffffffff80216027:	74 0c                	je     ffffffff80216035 <_RME_Thd_Del+0x227>
ffffffff80216029:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80216030:	e9 5a 02 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff80216035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216039:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021603d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80216041:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216044:	0f 96 c0             	setbe  %al
ffffffff80216047:	0f b6 c0             	movzbl %al,%eax
ffffffff8021604a:	48 85 c0             	test   %rax,%rax
ffffffff8021604d:	74 0c                	je     ffffffff8021605b <_RME_Thd_Del+0x24d>
ffffffff8021604f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216056:	e9 34 02 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
ffffffff8021605b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021605f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216063:	48 89 c2             	mov    %rax,%rdx
ffffffff80216066:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021606a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021606e:	48 01 d0             	add    %rdx,%rax
ffffffff80216071:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff80216075:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216079:	48 8b 00             	mov    (%rax),%rax
ffffffff8021607c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216080:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216084:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216088:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021608b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021608f:	0f 95 c0             	setne  %al
ffffffff80216092:	0f b6 c0             	movzbl %al,%eax
ffffffff80216095:	48 85 c0             	test   %rax,%rax
ffffffff80216098:	74 0c                	je     ffffffff802160a6 <_RME_Thd_Del+0x298>
ffffffff8021609a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802160a1:	e9 e9 01 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
ffffffff802160a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802160aa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802160ae:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802160b2:	0f 95 c0             	setne  %al
ffffffff802160b5:	0f b6 c0             	movzbl %al,%eax
ffffffff802160b8:	48 85 c0             	test   %rax,%rax
ffffffff802160bb:	74 0c                	je     ffffffff802160c9 <_RME_Thd_Del+0x2bb>
ffffffff802160bd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802160c4:	e9 c6 01 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
ffffffff802160c9:	48 8b 15 30 4f 01 00 	mov    0x14f30(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff802160d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802160d4:	48 8b 48 20          	mov    0x20(%rax),%rcx
ffffffff802160d8:	48 89 d0             	mov    %rdx,%rax
ffffffff802160db:	48 29 c8             	sub    %rcx,%rax
ffffffff802160de:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff802160e2:	0f 96 c0             	setbe  %al
ffffffff802160e5:	0f b6 c0             	movzbl %al,%eax
ffffffff802160e8:	48 98                	cltq   
ffffffff802160ea:	48 85 c0             	test   %rax,%rax
ffffffff802160ed:	74 0c                	je     ffffffff802160fb <_RME_Thd_Del+0x2ed>
ffffffff802160ef:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff802160f6:	e9 94 01 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
ffffffff802160fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802160ff:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216103:	48 85 c0             	test   %rax,%rax
ffffffff80216106:	0f 95 c0             	setne  %al
ffffffff80216109:	0f b6 c0             	movzbl %al,%eax
ffffffff8021610c:	48 85 c0             	test   %rax,%rax
ffffffff8021610f:	74 44                	je     ffffffff80216155 <_RME_Thd_Del+0x347>
ffffffff80216111:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216115:	89 c0                	mov    %eax,%eax
ffffffff80216117:	48 85 c0             	test   %rax,%rax
ffffffff8021611a:	0f 94 c0             	sete   %al
ffffffff8021611d:	0f b6 c0             	movzbl %al,%eax
ffffffff80216120:	48 85 c0             	test   %rax,%rax
ffffffff80216123:	74 24                	je     ffffffff80216149 <_RME_Thd_Del+0x33b>
ffffffff80216125:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021612c:	00 ff ff 
ffffffff8021612f:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80216133:	48 89 c2             	mov    %rax,%rdx
ffffffff80216136:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021613a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021613e:	48 89 ce             	mov    %rcx,%rsi
ffffffff80216141:	48 89 c7             	mov    %rax,%rdi
ffffffff80216144:	e8 15 66 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80216149:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80216150:	e9 3a 01 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
    
    /* Get the thread */
    Thread=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
ffffffff80216155:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216159:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021615d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* See if the thread is free. If still bound, we cannot proceed to deletion */
    if(Thread->Sched.Local!=RME_THD_FREE)
ffffffff80216161:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216165:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216169:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff8021616d:	74 30                	je     ffffffff8021619f <_RME_Thd_Del+0x391>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Thd_Del,Type_Stat);
ffffffff8021616f:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80216176:	00 ff ff 
ffffffff80216179:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021617d:	48 89 c2             	mov    %rax,%rdx
ffffffff80216180:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216184:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80216188:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021618b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021618e:	e8 cb 65 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_PTH_INVSTATE;
ffffffff80216193:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021619a:	e9 f0 00 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Thd_Del,Type_Stat);
ffffffff8021619f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802161a3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff802161a7:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802161ac:	48 89 ce             	mov    %rcx,%rsi
ffffffff802161af:	48 89 c7             	mov    %rax,%rdi
ffffffff802161b2:	e8 a7 65 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802161b7:	48 85 c0             	test   %rax,%rax
ffffffff802161ba:	0f 94 c0             	sete   %al
ffffffff802161bd:	0f b6 c0             	movzbl %al,%eax
ffffffff802161c0:	48 85 c0             	test   %rax,%rax
ffffffff802161c3:	74 5b                	je     ffffffff80216220 <_RME_Thd_Del+0x412>
ffffffff802161c5:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802161cc:	e9 be 00 00 00       	jmp    ffffffff8021628f <_RME_Thd_Del+0x481>
     * stack to empty, and free all the invocation stubs. This can be virtually
     * unbounded if the invocation stack is just too deep. This is left to the
     * user; if this is what he or she wants, be our guest. */
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
    {
        Invocation=(struct RME_Inv_Struct*)(Thread->Ctx.Invstk.Next);
ffffffff802161d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802161d5:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff802161dc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff802161e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802161e4:	48 8b 10             	mov    (%rax),%rdx
ffffffff802161e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802161eb:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802161ef:	48 89 d6             	mov    %rdx,%rsi
ffffffff802161f2:	48 89 c7             	mov    %rax,%rdi
ffffffff802161f5:	e8 8a 6b ff ff       	call   ffffffff8020cd84 <_RME_List_Del>
        Invocation->Thd_Act=0U;
ffffffff802161fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802161fe:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80216205:	00 
        Thread->Ctx.Invstk_Depth--;
ffffffff80216206:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021620a:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff80216211:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80216215:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216219:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff80216220:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216224:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021622b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021622f:	48 81 c2 98 00 00 00 	add    $0x98,%rdx
ffffffff80216236:	48 39 d0             	cmp    %rdx,%rax
ffffffff80216239:	75 96                	jne    ffffffff802161d1 <_RME_Thd_Del+0x3c3>
    }
    RME_ASSERT(Thread->Ctx.Invstk_Depth==0U);
    
    /* Dereference the process */
    RME_FETCH_ADD(&(Thread->Sched.Prc->Head.Root_Ref), -1);
ffffffff8021623b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021623f:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80216243:	48 83 c0 08          	add    $0x8,%rax
ffffffff80216247:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021624e:	48 89 c7             	mov    %rax,%rdi
ffffffff80216251:	e8 3d 65 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Try to depopulate the area - this must be successful */
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)==0U)
ffffffff80216256:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021625a:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80216261:	48 85 c0             	test   %rax,%rax
ffffffff80216264:	78 13                	js     ffffffff80216279 <_RME_Thd_Del+0x46b>
    {
        RME_COV_MARKER();

        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff80216266:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021626a:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff8021626f:	48 89 c7             	mov    %rax,%rdi
ffffffff80216272:	e8 97 c4 ff ff       	call   ffffffff8021270e <_RME_Kot_Erase>
ffffffff80216277:	eb 11                	jmp    ffffffff8021628a <_RME_Thd_Del+0x47c>
    }
    else
    {
        RME_COV_MARKER();

        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff80216279:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021627d:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff80216282:	48 89 c7             	mov    %rax,%rdi
ffffffff80216285:	e8 84 c4 ff ff       	call   ffffffff8021270e <_RME_Kot_Erase>
                   RME_HYP_SIZE)==0);
    }
    
    return 0;
ffffffff8021628a:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021628f:	c9                   	leave  
ffffffff80216290:	c3                   	ret    

ffffffff80216291 <_RME_Thd_Sched_Bind>:
                                     rme_cid_t Cap_Thd_Sched,
                                     rme_cid_t Cap_Sig,
                                     rme_tid_t TID,
                                     rme_ptr_t Prio,
                                     rme_ptr_t Haddr)
{
ffffffff80216291:	f3 0f 1e fa          	endbr64 
ffffffff80216295:	55                   	push   %rbp
ffffffff80216296:	48 89 e5             	mov    %rsp,%rbp
ffffffff80216299:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff8021629d:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff802162a1:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff802162a5:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff802162a9:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff802162ad:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff802162b1:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Hyp_Attr;
    rme_ptr_t End;

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802162b5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802162b9:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802162be:	48 85 c0             	test   %rax,%rax
ffffffff802162c1:	0f 85 98 00 00 00    	jne    ffffffff8021635f <_RME_Thd_Sched_Bind+0xce>
ffffffff802162c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802162cb:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802162cf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802162d3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802162d6:	0f 96 c0             	setbe  %al
ffffffff802162d9:	0f b6 c0             	movzbl %al,%eax
ffffffff802162dc:	48 85 c0             	test   %rax,%rax
ffffffff802162df:	74 0c                	je     ffffffff802162ed <_RME_Thd_Sched_Bind+0x5c>
ffffffff802162e1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802162e8:	e9 2e 08 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff802162ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802162f1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802162f5:	48 89 c2             	mov    %rax,%rdx
ffffffff802162f8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802162fc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216300:	48 01 d0             	add    %rdx,%rax
ffffffff80216303:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216307:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021630b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021630e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216312:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216316:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021631a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021631d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216321:	0f 94 c0             	sete   %al
ffffffff80216324:	0f b6 c0             	movzbl %al,%eax
ffffffff80216327:	48 85 c0             	test   %rax,%rax
ffffffff8021632a:	74 0c                	je     ffffffff80216338 <_RME_Thd_Sched_Bind+0xa7>
ffffffff8021632c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216333:	e9 e3 07 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216338:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021633c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216340:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216344:	0f 95 c0             	setne  %al
ffffffff80216347:	0f b6 c0             	movzbl %al,%eax
ffffffff8021634a:	48 85 c0             	test   %rax,%rax
ffffffff8021634d:	0f 84 4c 01 00 00    	je     ffffffff8021649f <_RME_Thd_Sched_Bind+0x20e>
ffffffff80216353:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021635a:	e9 bc 07 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021635f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216363:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216367:	48 89 c2             	mov    %rax,%rdx
ffffffff8021636a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021636e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216372:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216375:	0f 93 c0             	setae  %al
ffffffff80216378:	0f b6 c0             	movzbl %al,%eax
ffffffff8021637b:	48 85 c0             	test   %rax,%rax
ffffffff8021637e:	74 0c                	je     ffffffff8021638c <_RME_Thd_Sched_Bind+0xfb>
ffffffff80216380:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216387:	e9 8f 07 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021638c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216390:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216394:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216398:	48 89 c2             	mov    %rax,%rdx
ffffffff8021639b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021639f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802163a3:	48 01 d0             	add    %rdx,%rax
ffffffff802163a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802163aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802163ae:	48 8b 00             	mov    (%rax),%rax
ffffffff802163b1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802163b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802163b9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802163bd:	0f b7 c0             	movzwl %ax,%eax
ffffffff802163c0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802163c4:	0f 94 c0             	sete   %al
ffffffff802163c7:	0f b6 c0             	movzbl %al,%eax
ffffffff802163ca:	48 85 c0             	test   %rax,%rax
ffffffff802163cd:	74 0c                	je     ffffffff802163db <_RME_Thd_Sched_Bind+0x14a>
ffffffff802163cf:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802163d6:	e9 40 07 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff802163db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802163df:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802163e3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802163e7:	0f 95 c0             	setne  %al
ffffffff802163ea:	0f b6 c0             	movzbl %al,%eax
ffffffff802163ed:	48 85 c0             	test   %rax,%rax
ffffffff802163f0:	74 0c                	je     ffffffff802163fe <_RME_Thd_Sched_Bind+0x16d>
ffffffff802163f2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802163f9:	e9 1d 07 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff802163fe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216402:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216407:	48 89 c2             	mov    %rax,%rdx
ffffffff8021640a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021640e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216412:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216415:	0f 93 c0             	setae  %al
ffffffff80216418:	0f b6 c0             	movzbl %al,%eax
ffffffff8021641b:	48 85 c0             	test   %rax,%rax
ffffffff8021641e:	74 0c                	je     ffffffff8021642c <_RME_Thd_Sched_Bind+0x19b>
ffffffff80216420:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216427:	e9 ef 06 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021642c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216430:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216435:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216439:	48 89 c2             	mov    %rax,%rdx
ffffffff8021643c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216440:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216444:	48 01 d0             	add    %rdx,%rax
ffffffff80216447:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021644b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021644f:	48 8b 00             	mov    (%rax),%rax
ffffffff80216452:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216456:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021645a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021645e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216461:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216465:	0f 94 c0             	sete   %al
ffffffff80216468:	0f b6 c0             	movzbl %al,%eax
ffffffff8021646b:	48 85 c0             	test   %rax,%rax
ffffffff8021646e:	74 0c                	je     ffffffff8021647c <_RME_Thd_Sched_Bind+0x1eb>
ffffffff80216470:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216477:	e9 9f 06 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021647c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216480:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216484:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216488:	0f 95 c0             	setne  %al
ffffffff8021648b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021648e:	48 85 c0             	test   %rax,%rax
ffffffff80216491:	74 0c                	je     ffffffff8021649f <_RME_Thd_Sched_Bind+0x20e>
ffffffff80216493:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021649a:	e9 7c 06 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff8021649f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802164a3:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802164a8:	48 85 c0             	test   %rax,%rax
ffffffff802164ab:	0f 85 98 00 00 00    	jne    ffffffff80216549 <_RME_Thd_Sched_Bind+0x2b8>
ffffffff802164b1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802164b5:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802164b9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802164bd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802164c0:	0f 96 c0             	setbe  %al
ffffffff802164c3:	0f b6 c0             	movzbl %al,%eax
ffffffff802164c6:	48 85 c0             	test   %rax,%rax
ffffffff802164c9:	74 0c                	je     ffffffff802164d7 <_RME_Thd_Sched_Bind+0x246>
ffffffff802164cb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802164d2:	e9 44 06 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff802164d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802164db:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802164df:	48 89 c2             	mov    %rax,%rdx
ffffffff802164e2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802164e6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802164ea:	48 01 d0             	add    %rdx,%rax
ffffffff802164ed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802164f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802164f5:	48 8b 00             	mov    (%rax),%rax
ffffffff802164f8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802164fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216500:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216504:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216507:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021650b:	0f 94 c0             	sete   %al
ffffffff8021650e:	0f b6 c0             	movzbl %al,%eax
ffffffff80216511:	48 85 c0             	test   %rax,%rax
ffffffff80216514:	74 0c                	je     ffffffff80216522 <_RME_Thd_Sched_Bind+0x291>
ffffffff80216516:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021651d:	e9 f9 05 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216522:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216526:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021652a:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021652e:	0f 95 c0             	setne  %al
ffffffff80216531:	0f b6 c0             	movzbl %al,%eax
ffffffff80216534:	48 85 c0             	test   %rax,%rax
ffffffff80216537:	0f 84 4c 01 00 00    	je     ffffffff80216689 <_RME_Thd_Sched_Bind+0x3f8>
ffffffff8021653d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216544:	e9 d2 05 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216549:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021654d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216551:	48 89 c2             	mov    %rax,%rdx
ffffffff80216554:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216558:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021655c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021655f:	0f 93 c0             	setae  %al
ffffffff80216562:	0f b6 c0             	movzbl %al,%eax
ffffffff80216565:	48 85 c0             	test   %rax,%rax
ffffffff80216568:	74 0c                	je     ffffffff80216576 <_RME_Thd_Sched_Bind+0x2e5>
ffffffff8021656a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216571:	e9 a5 05 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216576:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021657a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021657e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216582:	48 89 c2             	mov    %rax,%rdx
ffffffff80216585:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216589:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021658d:	48 01 d0             	add    %rdx,%rax
ffffffff80216590:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216594:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216598:	48 8b 00             	mov    (%rax),%rax
ffffffff8021659b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021659f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802165a3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802165a7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802165aa:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802165ae:	0f 94 c0             	sete   %al
ffffffff802165b1:	0f b6 c0             	movzbl %al,%eax
ffffffff802165b4:	48 85 c0             	test   %rax,%rax
ffffffff802165b7:	74 0c                	je     ffffffff802165c5 <_RME_Thd_Sched_Bind+0x334>
ffffffff802165b9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802165c0:	e9 56 05 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff802165c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802165c9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802165cd:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802165d1:	0f 95 c0             	setne  %al
ffffffff802165d4:	0f b6 c0             	movzbl %al,%eax
ffffffff802165d7:	48 85 c0             	test   %rax,%rax
ffffffff802165da:	74 0c                	je     ffffffff802165e8 <_RME_Thd_Sched_Bind+0x357>
ffffffff802165dc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802165e3:	e9 33 05 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff802165e8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802165ec:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802165f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802165f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802165f8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802165fc:	48 39 c2             	cmp    %rax,%rdx
ffffffff802165ff:	0f 93 c0             	setae  %al
ffffffff80216602:	0f b6 c0             	movzbl %al,%eax
ffffffff80216605:	48 85 c0             	test   %rax,%rax
ffffffff80216608:	74 0c                	je     ffffffff80216616 <_RME_Thd_Sched_Bind+0x385>
ffffffff8021660a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216611:	e9 05 05 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216616:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021661a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021661f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216623:	48 89 c2             	mov    %rax,%rdx
ffffffff80216626:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021662a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021662e:	48 01 d0             	add    %rdx,%rax
ffffffff80216631:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216635:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216639:	48 8b 00             	mov    (%rax),%rax
ffffffff8021663c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216640:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216644:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216648:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021664b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021664f:	0f 94 c0             	sete   %al
ffffffff80216652:	0f b6 c0             	movzbl %al,%eax
ffffffff80216655:	48 85 c0             	test   %rax,%rax
ffffffff80216658:	74 0c                	je     ffffffff80216666 <_RME_Thd_Sched_Bind+0x3d5>
ffffffff8021665a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216661:	e9 b5 04 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216666:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021666a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021666e:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216672:	0f 95 c0             	setne  %al
ffffffff80216675:	0f b6 c0             	movzbl %al,%eax
ffffffff80216678:	48 85 c0             	test   %rax,%rax
ffffffff8021667b:	74 0c                	je     ffffffff80216689 <_RME_Thd_Sched_Bind+0x3f8>
ffffffff8021667d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216684:	e9 92 04 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
                   struct RME_Cap_Thd*,Thd_Sched,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff80216689:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021668d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216691:	83 e0 02             	and    $0x2,%eax
ffffffff80216694:	48 85 c0             	test   %rax,%rax
ffffffff80216697:	0f 94 c0             	sete   %al
ffffffff8021669a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021669d:	48 85 c0             	test   %rax,%rax
ffffffff802166a0:	74 0c                	je     ffffffff802166ae <_RME_Thd_Sched_Bind+0x41d>
ffffffff802166a2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802166a9:	e9 6d 04 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
ffffffff802166ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802166b2:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802166b6:	83 e0 04             	and    $0x4,%eax
ffffffff802166b9:	48 85 c0             	test   %rax,%rax
ffffffff802166bc:	0f 94 c0             	sete   %al
ffffffff802166bf:	0f b6 c0             	movzbl %al,%eax
ffffffff802166c2:	48 85 c0             	test   %rax,%rax
ffffffff802166c5:	74 0c                	je     ffffffff802166d3 <_RME_Thd_Sched_Bind+0x442>
ffffffff802166c7:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802166ce:	e9 48 04 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
    
    /* Check if we need the signal endpoint for this operation */
    if(Cap_Sig!=RME_CID_NULL)
ffffffff802166d3:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff802166d8:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
ffffffff802166dc:	0f 84 0f 02 00 00    	je     ffffffff802168f1 <_RME_Thd_Sched_Bind+0x660>
    {
        RME_COV_MARKER();

        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802166e2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff802166e6:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802166eb:	48 85 c0             	test   %rax,%rax
ffffffff802166ee:	0f 85 98 00 00 00    	jne    ffffffff8021678c <_RME_Thd_Sched_Bind+0x4fb>
ffffffff802166f4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802166f8:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802166fc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216700:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216703:	0f 96 c0             	setbe  %al
ffffffff80216706:	0f b6 c0             	movzbl %al,%eax
ffffffff80216709:	48 85 c0             	test   %rax,%rax
ffffffff8021670c:	74 0c                	je     ffffffff8021671a <_RME_Thd_Sched_Bind+0x489>
ffffffff8021670e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216715:	e9 01 04 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021671a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8021671e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216722:	48 89 c2             	mov    %rax,%rdx
ffffffff80216725:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216729:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021672d:	48 01 d0             	add    %rdx,%rax
ffffffff80216730:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80216734:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216738:	48 8b 00             	mov    (%rax),%rax
ffffffff8021673b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021673f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216743:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216747:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021674a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021674e:	0f 94 c0             	sete   %al
ffffffff80216751:	0f b6 c0             	movzbl %al,%eax
ffffffff80216754:	48 85 c0             	test   %rax,%rax
ffffffff80216757:	74 0c                	je     ffffffff80216765 <_RME_Thd_Sched_Bind+0x4d4>
ffffffff80216759:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216760:	e9 b6 03 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216765:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216769:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021676d:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80216771:	0f 95 c0             	setne  %al
ffffffff80216774:	0f b6 c0             	movzbl %al,%eax
ffffffff80216777:	48 85 c0             	test   %rax,%rax
ffffffff8021677a:	0f 84 4c 01 00 00    	je     ffffffff802168cc <_RME_Thd_Sched_Bind+0x63b>
ffffffff80216780:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216787:	e9 8f 03 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021678c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216790:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216794:	48 89 c2             	mov    %rax,%rdx
ffffffff80216797:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021679b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021679f:	48 39 c2             	cmp    %rax,%rdx
ffffffff802167a2:	0f 93 c0             	setae  %al
ffffffff802167a5:	0f b6 c0             	movzbl %al,%eax
ffffffff802167a8:	48 85 c0             	test   %rax,%rax
ffffffff802167ab:	74 0c                	je     ffffffff802167b9 <_RME_Thd_Sched_Bind+0x528>
ffffffff802167ad:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802167b4:	e9 62 03 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff802167b9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff802167bd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802167c1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802167c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802167c8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802167cc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802167d0:	48 01 d0             	add    %rdx,%rax
ffffffff802167d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802167d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802167db:	48 8b 00             	mov    (%rax),%rax
ffffffff802167de:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802167e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802167e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802167ea:	0f b7 c0             	movzwl %ax,%eax
ffffffff802167ed:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802167f1:	0f 94 c0             	sete   %al
ffffffff802167f4:	0f b6 c0             	movzbl %al,%eax
ffffffff802167f7:	48 85 c0             	test   %rax,%rax
ffffffff802167fa:	74 0c                	je     ffffffff80216808 <_RME_Thd_Sched_Bind+0x577>
ffffffff802167fc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216803:	e9 13 03 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216808:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021680c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216810:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216814:	0f 95 c0             	setne  %al
ffffffff80216817:	0f b6 c0             	movzbl %al,%eax
ffffffff8021681a:	48 85 c0             	test   %rax,%rax
ffffffff8021681d:	74 0c                	je     ffffffff8021682b <_RME_Thd_Sched_Bind+0x59a>
ffffffff8021681f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216826:	e9 f0 02 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021682b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8021682f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216834:	48 89 c2             	mov    %rax,%rdx
ffffffff80216837:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021683b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021683f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216842:	0f 93 c0             	setae  %al
ffffffff80216845:	0f b6 c0             	movzbl %al,%eax
ffffffff80216848:	48 85 c0             	test   %rax,%rax
ffffffff8021684b:	74 0c                	je     ffffffff80216859 <_RME_Thd_Sched_Bind+0x5c8>
ffffffff8021684d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216854:	e9 c2 02 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216859:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8021685d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216862:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216866:	48 89 c2             	mov    %rax,%rdx
ffffffff80216869:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021686d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216871:	48 01 d0             	add    %rdx,%rax
ffffffff80216874:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80216878:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021687c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021687f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216883:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216887:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021688b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021688e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216892:	0f 94 c0             	sete   %al
ffffffff80216895:	0f b6 c0             	movzbl %al,%eax
ffffffff80216898:	48 85 c0             	test   %rax,%rax
ffffffff8021689b:	74 0c                	je     ffffffff802168a9 <_RME_Thd_Sched_Bind+0x618>
ffffffff8021689d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802168a4:	e9 72 02 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
ffffffff802168a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802168ad:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802168b1:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802168b5:	0f 95 c0             	setne  %al
ffffffff802168b8:	0f b6 c0             	movzbl %al,%eax
ffffffff802168bb:	48 85 c0             	test   %rax,%rax
ffffffff802168be:	74 0c                	je     ffffffff802168cc <_RME_Thd_Sched_Bind+0x63b>
ffffffff802168c0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802168c7:	e9 4f 02 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
                       struct RME_Cap_Sig*,Sig_Op,Type_Stat);
        RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SCHED);
ffffffff802168cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802168d0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802168d4:	83 e0 20             	and    $0x20,%eax
ffffffff802168d7:	48 85 c0             	test   %rax,%rax
ffffffff802168da:	0f 94 c0             	sete   %al
ffffffff802168dd:	0f b6 c0             	movzbl %al,%eax
ffffffff802168e0:	48 85 c0             	test   %rax,%rax
ffffffff802168e3:	74 14                	je     ffffffff802168f9 <_RME_Thd_Sched_Bind+0x668>
ffffffff802168e5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802168ec:	e9 2a 02 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
    }
    else
    {
        RME_COV_MARKER();

        Sig_Op=RME_NULL;
ffffffff802168f1:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff802168f8:	00 
    }

    /* Check if the target thread is already bound. If yes, we just quit */
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff802168f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802168fd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216901:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Local_Old=Thread->Sched.Local;
ffffffff80216905:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216909:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021690d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Local_Old!=RME_THD_FREE)
ffffffff80216911:	48 83 7d d0 ff       	cmpq   $0xffffffffffffffff,-0x30(%rbp)
ffffffff80216916:	74 0c                	je     ffffffff80216924 <_RME_Thd_Sched_Bind+0x693>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80216918:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021691f:	e9 f7 01 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the parent thread is on the same core with the current processor */
    Local_New=RME_CPU_LOCAL();
ffffffff80216924:	e8 16 4f ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80216929:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Scheduler=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
ffffffff8021692d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216931:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216935:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    if(Scheduler->Sched.Local!=Local_New)
ffffffff80216939:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021693d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216941:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff80216945:	74 0c                	je     ffffffff80216953 <_RME_Thd_Sched_Bind+0x6c2>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80216947:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021694e:	e9 c8 01 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if we are trying to bind to ourself - prohibited */
    if(Thread==Scheduler)
ffffffff80216953:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216957:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff8021695b:	75 0c                	jne    ffffffff80216969 <_RME_Thd_Sched_Bind+0x6d8>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_NOTIF;
ffffffff8021695d:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff80216964:	e9 b2 01 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the priority relationship is correct */
    if(Scheduler->Sched.Prio_Max<Prio)
ffffffff80216969:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021696d:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80216971:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
ffffffff80216975:	76 0c                	jbe    ffffffff80216983 <_RME_Thd_Sched_Bind+0x6f2>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80216977:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8021697e:	e9 98 01 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check whether the coprocessor context attribute is compatible with this core */
    Hyp_Attr=Thread->Ctx.Hyp_Attr;
ffffffff80216983:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216987:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff8021698e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
    }
#else
    if(RME_THD_ATTR(Hyp_Attr)!=0U)
ffffffff80216992:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80216999:	ff ff 7f 
ffffffff8021699c:	48 23 45 b8          	and    -0x48(%rbp),%rax
ffffffff802169a0:	48 85 c0             	test   %rax,%rax
ffffffff802169a3:	74 0c                	je     ffffffff802169b1 <_RME_Thd_Sched_Bind+0x720>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff802169a5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802169ac:	e9 6a 01 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check the hypervisor context buffer passed in to see whether it is good */
    if((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)!=0U))
ffffffff802169b1:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff802169b6:	74 5c                	je     ffffffff80216a14 <_RME_Thd_Sched_Bind+0x783>
ffffffff802169b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802169bc:	48 85 c0             	test   %rax,%rax
ffffffff802169bf:	79 53                	jns    ffffffff80216a14 <_RME_Thd_Sched_Bind+0x783>
    {
        RME_COV_MARKER();
        
        /* Register save area must be aligned to word boundary */
        if(RME_IS_ALIGNED(Haddr)!=0U)
ffffffff802169c1:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802169c5:	83 e0 07             	and    $0x7,%eax
ffffffff802169c8:	48 85 c0             	test   %rax,%rax
ffffffff802169cb:	75 07                	jne    ffffffff802169d4 <_RME_Thd_Sched_Bind+0x743>
ffffffff802169cd:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff802169d2:	eb 05                	jmp    ffffffff802169d9 <_RME_Thd_Sched_Bind+0x748>
ffffffff802169d4:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802169d9:	84 c0                	test   %al,%al
ffffffff802169db:	74 2b                	je     ffffffff80216a08 <_RME_Thd_Sched_Bind+0x777>
                return RME_ERR_PTH_HADDR;
            }
            else
            {
#endif
                End=Haddr+RME_REG_SIZE(RME_THD_ATTR(Thread->Ctx.Hyp_Attr));
ffffffff802169dd:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802169e1:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff802169e7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
                if((End<=Haddr)||(End>(RME_HYP_VA_BASE+RME_HYP_VA_SIZE)))
ffffffff802169eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802169ef:	48 3b 45 10          	cmp    0x10(%rbp),%rax
ffffffff802169f3:	76 07                	jbe    ffffffff802169fc <_RME_Thd_Sched_Bind+0x76b>
ffffffff802169f5:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff802169fa:	74 44                	je     ffffffff80216a40 <_RME_Thd_Sched_Bind+0x7af>
                {
                    RME_COV_MARKER();

                    return RME_ERR_PTH_HADDR;
ffffffff802169fc:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80216a03:	e9 13 01 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
        /* Not aligned, exiting */
        else
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_HADDR;
ffffffff80216a08:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80216a0f:	e9 07 01 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
        }
    }
    /* We don't allow setting HYP addr for normal threads, nor do we allow
     * setting HYP addr to NULL for hypervisor-managed threads. */
    else if(((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)==0U))||
ffffffff80216a14:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff80216a19:	74 09                	je     ffffffff80216a24 <_RME_Thd_Sched_Bind+0x793>
ffffffff80216a1b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80216a1f:	48 85 c0             	test   %rax,%rax
ffffffff80216a22:	79 10                	jns    ffffffff80216a34 <_RME_Thd_Sched_Bind+0x7a3>
ffffffff80216a24:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff80216a29:	75 16                	jne    ffffffff80216a41 <_RME_Thd_Sched_Bind+0x7b0>
            ((Haddr==RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)!=0U)))
ffffffff80216a2b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80216a2f:	48 85 c0             	test   %rax,%rax
ffffffff80216a32:	79 0d                	jns    ffffffff80216a41 <_RME_Thd_Sched_Bind+0x7b0>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_HADDR;
ffffffff80216a34:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80216a3b:	e9 db 00 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
        if(RME_IS_ALIGNED(Haddr)!=0U)
ffffffff80216a40:	90                   	nop
        RME_COV_MARKER();
        /* No action required */
    }

    /* Try to bind the thread */
    if(RME_COMP_SWAP((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff80216a41:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80216a45:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216a49:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80216a4d:	48 83 c1 28          	add    $0x28,%rcx
ffffffff80216a51:	48 89 c6             	mov    %rax,%rsi
ffffffff80216a54:	48 89 cf             	mov    %rcx,%rdi
ffffffff80216a57:	e8 02 5d ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80216a5c:	48 85 c0             	test   %rax,%rax
ffffffff80216a5f:	75 0c                	jne    ffffffff80216a6d <_RME_Thd_Sched_Bind+0x7dc>
                     (rme_ptr_t)Local_Old,
                     (rme_ptr_t)Local_New)==RME_CASFAIL)
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_CONFLICT;
ffffffff80216a61:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff80216a68:	e9 ae 00 00 00       	jmp    ffffffff80216b1b <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase the reference count of the scheduler thread struct - same core */
    Scheduler->Sched.Sched_Ref++;
ffffffff80216a6d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80216a71:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80216a75:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80216a79:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80216a7d:	48 89 50 60          	mov    %rdx,0x60(%rax)
    
    /* Bind successful and finish the work off. No need to worry about other cores'
     * operations on this thread because this thread is already bound to this core.
     * TID is half-word parameter-wise, but is stored and returned as a full word. */
    Thread->Sched.Sched_Thd=Scheduler;
ffffffff80216a81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a85:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80216a89:	48 89 50 68          	mov    %rdx,0x68(%rax)
    Thread->Sched.Prio=Prio;
ffffffff80216a8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a91:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff80216a95:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Thread->Sched.TID=(rme_ptr_t)TID;
ffffffff80216a99:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff80216a9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216aa1:	48 89 50 20          	mov    %rdx,0x20(%rax)
    /* The state must be TIMEOUT or EXCPEND at this point */
    RME_ASSERT((Thread->Sched.State==RME_THD_TIMEOUT)||
               (Thread->Sched.State==RME_THD_EXCPEND));

    /* Tie the signal endpoint to it if not zero */
    if(Sig_Op==(void*)0U)
ffffffff80216aa5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80216aaa:	75 0e                	jne    ffffffff80216aba <_RME_Thd_Sched_Bind+0x829>
    {
        RME_COV_MARKER();

        Thread->Sched.Sched_Sig=0U;
ffffffff80216aac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216ab0:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff80216ab7:	00 
ffffffff80216ab8:	eb 3d                	jmp    ffffffff80216af7 <_RME_Thd_Sched_Bind+0x866>
    else
    {
        RME_COV_MARKER();

        /* Convert to root cap */
        Thread->Sched.Sched_Sig=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff80216aba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216abe:	48 8b 00             	mov    (%rax),%rax
ffffffff80216ac1:	89 c0                	mov    %eax,%eax
ffffffff80216ac3:	48 85 c0             	test   %rax,%rax
ffffffff80216ac6:	74 0a                	je     ffffffff80216ad2 <_RME_Thd_Sched_Bind+0x841>
ffffffff80216ac8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216acc:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216ad0:	eb 04                	jmp    ffffffff80216ad6 <_RME_Thd_Sched_Bind+0x845>
ffffffff80216ad2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216ad6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80216ada:	48 89 42 70          	mov    %rax,0x70(%rdx)
        
        /* Increase refcnt */
        RME_FETCH_ADD(&(Thread->Sched.Sched_Sig->Head.Root_Ref),1U);
ffffffff80216ade:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216ae2:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216ae6:	48 83 c0 08          	add    $0x8,%rax
ffffffff80216aea:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80216aef:	48 89 c7             	mov    %rax,%rdi
ffffffff80216af2:	e8 9c 5c ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    }
    
    /* Set hypervisor context address if we're hypervisor-managed */
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)!=0U)
ffffffff80216af7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216afb:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80216b02:	48 85 c0             	test   %rax,%rax
ffffffff80216b05:	79 0f                	jns    ffffffff80216b16 <_RME_Thd_Sched_Bind+0x885>
    {
        RME_COV_MARKER();
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)Haddr;
ffffffff80216b07:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff80216b0b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216b0f:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    return 0;
ffffffff80216b16:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80216b1b:	c9                   	leave  
ffffffff80216b1c:	c3                   	ret    

ffffffff80216b1d <_RME_Thd_Sched_Free>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Sched_Free(struct RME_Cap_Cpt* Cpt, 
                                     struct RME_Reg_Struct* Reg,
                                     rme_cid_t Cap_Thd)
{
ffffffff80216b1d:	f3 0f 1e fa          	endbr64 
ffffffff80216b21:	55                   	push   %rbp
ffffffff80216b22:	48 89 e5             	mov    %rsp,%rbp
ffffffff80216b25:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80216b29:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80216b2d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80216b31:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    /* These are used to free the thread */
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80216b35:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216b39:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80216b3e:	48 85 c0             	test   %rax,%rax
ffffffff80216b41:	0f 85 98 00 00 00    	jne    ffffffff80216bdf <_RME_Thd_Sched_Free+0xc2>
ffffffff80216b47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216b4b:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80216b4f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216b53:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216b56:	0f 96 c0             	setbe  %al
ffffffff80216b59:	0f b6 c0             	movzbl %al,%eax
ffffffff80216b5c:	48 85 c0             	test   %rax,%rax
ffffffff80216b5f:	74 0c                	je     ffffffff80216b6d <_RME_Thd_Sched_Free+0x50>
ffffffff80216b61:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216b68:	e9 90 03 00 00       	jmp    ffffffff80216efd <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216b6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216b71:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216b75:	48 89 c2             	mov    %rax,%rdx
ffffffff80216b78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216b7c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216b80:	48 01 d0             	add    %rdx,%rax
ffffffff80216b83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216b87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216b8b:	48 8b 00             	mov    (%rax),%rax
ffffffff80216b8e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216b92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216b96:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216b9a:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216b9d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216ba1:	0f 94 c0             	sete   %al
ffffffff80216ba4:	0f b6 c0             	movzbl %al,%eax
ffffffff80216ba7:	48 85 c0             	test   %rax,%rax
ffffffff80216baa:	74 0c                	je     ffffffff80216bb8 <_RME_Thd_Sched_Free+0x9b>
ffffffff80216bac:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216bb3:	e9 45 03 00 00       	jmp    ffffffff80216efd <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216bb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216bbc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216bc0:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216bc4:	0f 95 c0             	setne  %al
ffffffff80216bc7:	0f b6 c0             	movzbl %al,%eax
ffffffff80216bca:	48 85 c0             	test   %rax,%rax
ffffffff80216bcd:	0f 84 4c 01 00 00    	je     ffffffff80216d1f <_RME_Thd_Sched_Free+0x202>
ffffffff80216bd3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216bda:	e9 1e 03 00 00       	jmp    ffffffff80216efd <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216bdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216be3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216be7:	48 89 c2             	mov    %rax,%rdx
ffffffff80216bea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216bee:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216bf2:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216bf5:	0f 93 c0             	setae  %al
ffffffff80216bf8:	0f b6 c0             	movzbl %al,%eax
ffffffff80216bfb:	48 85 c0             	test   %rax,%rax
ffffffff80216bfe:	74 0c                	je     ffffffff80216c0c <_RME_Thd_Sched_Free+0xef>
ffffffff80216c00:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216c07:	e9 f1 02 00 00       	jmp    ffffffff80216efd <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216c0c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216c10:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216c14:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216c18:	48 89 c2             	mov    %rax,%rdx
ffffffff80216c1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216c1f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216c23:	48 01 d0             	add    %rdx,%rax
ffffffff80216c26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216c2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216c2e:	48 8b 00             	mov    (%rax),%rax
ffffffff80216c31:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216c35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216c39:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216c3d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216c40:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216c44:	0f 94 c0             	sete   %al
ffffffff80216c47:	0f b6 c0             	movzbl %al,%eax
ffffffff80216c4a:	48 85 c0             	test   %rax,%rax
ffffffff80216c4d:	74 0c                	je     ffffffff80216c5b <_RME_Thd_Sched_Free+0x13e>
ffffffff80216c4f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216c56:	e9 a2 02 00 00       	jmp    ffffffff80216efd <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216c5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216c5f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216c63:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216c67:	0f 95 c0             	setne  %al
ffffffff80216c6a:	0f b6 c0             	movzbl %al,%eax
ffffffff80216c6d:	48 85 c0             	test   %rax,%rax
ffffffff80216c70:	74 0c                	je     ffffffff80216c7e <_RME_Thd_Sched_Free+0x161>
ffffffff80216c72:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216c79:	e9 7f 02 00 00       	jmp    ffffffff80216efd <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216c7e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216c82:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216c87:	48 89 c2             	mov    %rax,%rdx
ffffffff80216c8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216c8e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216c92:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216c95:	0f 93 c0             	setae  %al
ffffffff80216c98:	0f b6 c0             	movzbl %al,%eax
ffffffff80216c9b:	48 85 c0             	test   %rax,%rax
ffffffff80216c9e:	74 0c                	je     ffffffff80216cac <_RME_Thd_Sched_Free+0x18f>
ffffffff80216ca0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216ca7:	e9 51 02 00 00       	jmp    ffffffff80216efd <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216cac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216cb0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216cb5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216cb9:	48 89 c2             	mov    %rax,%rdx
ffffffff80216cbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216cc0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216cc4:	48 01 d0             	add    %rdx,%rax
ffffffff80216cc7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216ccb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216ccf:	48 8b 00             	mov    (%rax),%rax
ffffffff80216cd2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216cd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216cda:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216cde:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216ce1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216ce5:	0f 94 c0             	sete   %al
ffffffff80216ce8:	0f b6 c0             	movzbl %al,%eax
ffffffff80216ceb:	48 85 c0             	test   %rax,%rax
ffffffff80216cee:	74 0c                	je     ffffffff80216cfc <_RME_Thd_Sched_Free+0x1df>
ffffffff80216cf0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216cf7:	e9 01 02 00 00       	jmp    ffffffff80216efd <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216cfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216d00:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216d04:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216d08:	0f 95 c0             	setne  %al
ffffffff80216d0b:	0f b6 c0             	movzbl %al,%eax
ffffffff80216d0e:	48 85 c0             	test   %rax,%rax
ffffffff80216d11:	74 0c                	je     ffffffff80216d1f <_RME_Thd_Sched_Free+0x202>
ffffffff80216d13:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216d1a:	e9 de 01 00 00       	jmp    ffffffff80216efd <_RME_Thd_Sched_Free+0x3e0>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff80216d1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216d23:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216d27:	83 e0 10             	and    $0x10,%eax
ffffffff80216d2a:	48 85 c0             	test   %rax,%rax
ffffffff80216d2d:	0f 94 c0             	sete   %al
ffffffff80216d30:	0f b6 c0             	movzbl %al,%eax
ffffffff80216d33:	48 85 c0             	test   %rax,%rax
ffffffff80216d36:	74 0c                	je     ffffffff80216d44 <_RME_Thd_Sched_Free+0x227>
ffffffff80216d38:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80216d3f:	e9 b9 01 00 00       	jmp    ffffffff80216efd <_RME_Thd_Sched_Free+0x3e0>
    
    /* Check if the target thread is already bound to this core */
    Local=RME_CPU_LOCAL();
ffffffff80216d44:	e8 f6 4a ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80216d49:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Thread=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff80216d4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216d51:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216d55:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(Thread->Sched.Local!=Local)
ffffffff80216d59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d5d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216d61:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80216d65:	74 0c                	je     ffffffff80216d73 <_RME_Thd_Sched_Free+0x256>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80216d67:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216d6e:	e9 8a 01 00 00       	jmp    ffffffff80216efd <_RME_Thd_Sched_Free+0x3e0>
        /* No action required */
    }
    
    /* Am I referenced by someone as a scheduler? If yes, we cannot unbind. Because
     * boot-time thread's refcnt will never be 0, thus they will never pass this checking */
    if(Thread->Sched.Sched_Ref!=0U)
ffffffff80216d73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d77:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80216d7b:	48 85 c0             	test   %rax,%rax
ffffffff80216d7e:	74 0c                	je     ffffffff80216d8c <_RME_Thd_Sched_Free+0x26f>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_REFCNT;
ffffffff80216d80:	48 c7 c0 32 ff ff ff 	mov    $0xffffffffffffff32,%rax
ffffffff80216d87:	e9 71 01 00 00       	jmp    ffffffff80216efd <_RME_Thd_Sched_Free+0x3e0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Decrease the parent's reference count - on the same core */
    Thread->Sched.Sched_Thd->Sched.Sched_Ref--;
ffffffff80216d8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d90:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80216d94:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80216d98:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff80216d9c:	48 89 50 60          	mov    %rdx,0x60(%rax)

    /* See if we have any events sent to the parent. If yes, remove that event */
    if(Thread->Sched.Notif.Next!=&(Thread->Sched.Notif))
ffffffff80216da0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216da4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216da8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80216dac:	48 83 c2 10          	add    $0x10,%rdx
ffffffff80216db0:	48 39 d0             	cmp    %rdx,%rax
ffffffff80216db3:	74 2b                	je     ffffffff80216de0 <_RME_Thd_Sched_Free+0x2c3>
    {
        RME_COV_MARKER();

        _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff80216db5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216db9:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80216dbd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216dc1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216dc5:	48 89 d6             	mov    %rdx,%rsi
ffffffff80216dc8:	48 89 c7             	mov    %rax,%rdi
ffffffff80216dcb:	e8 b4 5f ff ff       	call   ffffffff8020cd84 <_RME_List_Del>
        _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80216dd0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216dd4:	48 83 c0 10          	add    $0x10,%rax
ffffffff80216dd8:	48 89 c7             	mov    %rax,%rdi
ffffffff80216ddb:	e8 7a 5f ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
        RME_COV_MARKER();
        /* No action required */
    }

    /* If we have an scheduler event endpoint, release it */
    if(Thread->Sched.Sched_Sig!=(void*)RME_NULL)
ffffffff80216de0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216de4:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216de8:	48 85 c0             	test   %rax,%rax
ffffffff80216deb:	74 1b                	je     ffffffff80216e08 <_RME_Thd_Sched_Free+0x2eb>
    {
        RME_COV_MARKER();

        RME_FETCH_ADD(&(Thread->Sched.Sched_Sig->Head.Root_Ref),-1);
ffffffff80216ded:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216df1:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216df5:	48 83 c0 08          	add    $0x8,%rax
ffffffff80216df9:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80216e00:	48 89 c7             	mov    %rax,%rdi
ffffffff80216e03:	e8 8b 59 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80216e08:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216e0c:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80216e11:	48 89 c7             	mov    %rax,%rdi
ffffffff80216e14:	e8 58 04 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
    /* If the thread is ready, kick it out of the run queue. If it is blocked on
     * some endpoint, end the blocking and set the return value to RME_ERR_SIV_FREE.
     * If the thread is killed due to a fault, we will not clear the fault here, and
     * we will wait for the Exec_Set to clear it. No scheduler notifications are sent
     * because the thread is being freed and notifications at this point are useless. */
    if(Thread->Sched.State==RME_THD_READY)
ffffffff80216e19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e1d:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80216e21:	48 85 c0             	test   %rax,%rax
ffffffff80216e24:	75 1a                	jne    ffffffff80216e40 <_RME_Thd_Sched_Free+0x323>
    {
        RME_COV_MARKER();

        /* Remove from runqueue and timeout but don't notify parent */
        _RME_Run_Del(Thread);
ffffffff80216e26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e2a:	48 89 c7             	mov    %rax,%rdi
ffffffff80216e2d:	e8 72 c0 ff ff       	call   ffffffff80212ea4 <_RME_Run_Del>
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80216e32:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e36:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80216e3d:	00 
ffffffff80216e3e:	eb 50                	jmp    ffffffff80216e90 <_RME_Thd_Sched_Free+0x373>
    }
    /* BLOCKED */
    else if(Thread->Sched.State==RME_THD_BLOCKED)
ffffffff80216e40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e44:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80216e48:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80216e4c:	75 42                	jne    ffffffff80216e90 <_RME_Thd_Sched_Free+0x373>
    {
        RME_COV_MARKER();
        
        /* If it got here, the thread that is operated on cannot be the current 
         * thread, so we are not overwriting the return value of the caller. */
        __RME_Svc_Retval_Set(&(Thread->Ctx.Reg->Reg),RME_ERR_SIV_FREE);
ffffffff80216e4e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e52:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80216e59:	48 c7 c6 ce fe ff ff 	mov    $0xfffffffffffffece,%rsi
ffffffff80216e60:	48 89 c7             	mov    %rax,%rdi
ffffffff80216e63:	e8 09 04 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
        /* Release signal and thread from each other */
        Thread->Sched.Signal->Thd=RME_NULL;
ffffffff80216e68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e6c:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff80216e70:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80216e77:	00 
        Thread->Sched.Signal=RME_NULL;
ffffffff80216e78:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e7c:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff80216e83:	00 
        /* Timeout but don't notify parent */
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80216e84:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e88:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80216e8f:	00 
        RME_COV_MARKER();
        /* No action required */
    }

    /* Cleanup all remaining timeslices on it */
    Thread->Sched.Slice=0U;
ffffffff80216e90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e94:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80216e9b:	00 
    
    /* Check if this thread is the current one and we may need to switch away */
    if(Local->Thd_Cur==Thread)
ffffffff80216e9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216ea0:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216ea4:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80216ea8:	75 3f                	jne    ffffffff80216ee9 <_RME_Thd_Sched_Free+0x3cc>
    {
        RME_COV_MARKER();

        Local->Thd_Cur=_RME_Run_High(Local);
ffffffff80216eaa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216eae:	48 89 c7             	mov    %rax,%rdi
ffffffff80216eb1:	e8 b7 c0 ff ff       	call   ffffffff80212f6d <_RME_Run_High>
ffffffff80216eb6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80216eba:	48 89 42 08          	mov    %rax,0x8(%rdx)
        _RME_Run_Ins(Local->Thd_Cur);
ffffffff80216ebe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216ec2:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216ec6:	48 89 c7             	mov    %rax,%rdi
ffffffff80216ec9:	e8 23 bf ff ff       	call   ffffffff80212df1 <_RME_Run_Ins>
        RME_ASSERT(Local->Thd_Cur->Sched.State==RME_THD_READY);
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff80216ece:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216ed2:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80216ed6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80216eda:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216ede:	48 89 ce             	mov    %rcx,%rsi
ffffffff80216ee1:	48 89 c7             	mov    %rax,%rdi
ffffffff80216ee4:	e8 e1 c1 ff ff       	call   ffffffff802130ca <_RME_Run_Swt>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Set the state to free so other cores can bind */
    RME_WRITE_RELEASE((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff80216ee9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216eed:	48 83 c0 28          	add    $0x28,%rax
ffffffff80216ef1:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
                      (rme_ptr_t)RME_THD_FREE);

    return 0;
ffffffff80216ef8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80216efd:	c9                   	leave  
ffffffff80216efe:	c3                   	ret    

ffffffff80216eff <_RME_Thd_Exec_Set>:
                                   struct RME_Reg_Struct* Reg,
                                   rme_cid_t Cap_Thd,
                                   rme_ptr_t Entry,
                                   rme_ptr_t Stack,
                                   rme_ptr_t Param)
{
ffffffff80216eff:	f3 0f 1e fa          	endbr64 
ffffffff80216f03:	55                   	push   %rbp
ffffffff80216f04:	48 89 e5             	mov    %rsp,%rbp
ffffffff80216f07:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80216f0b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80216f0f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80216f13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80216f17:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff80216f1b:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
ffffffff80216f1f:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    struct RME_Thd_Struct* Thread;
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80216f23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216f27:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80216f2c:	48 85 c0             	test   %rax,%rax
ffffffff80216f2f:	0f 85 98 00 00 00    	jne    ffffffff80216fcd <_RME_Thd_Exec_Set+0xce>
ffffffff80216f35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216f39:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80216f3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216f41:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216f44:	0f 96 c0             	setbe  %al
ffffffff80216f47:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f4a:	48 85 c0             	test   %rax,%rax
ffffffff80216f4d:	74 0c                	je     ffffffff80216f5b <_RME_Thd_Exec_Set+0x5c>
ffffffff80216f4f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216f56:	e9 ca 02 00 00       	jmp    ffffffff80217225 <_RME_Thd_Exec_Set+0x326>
ffffffff80216f5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216f5f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216f63:	48 89 c2             	mov    %rax,%rdx
ffffffff80216f66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216f6a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216f6e:	48 01 d0             	add    %rdx,%rax
ffffffff80216f71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216f75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216f79:	48 8b 00             	mov    (%rax),%rax
ffffffff80216f7c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216f80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216f84:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216f88:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216f8b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216f8f:	0f 94 c0             	sete   %al
ffffffff80216f92:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f95:	48 85 c0             	test   %rax,%rax
ffffffff80216f98:	74 0c                	je     ffffffff80216fa6 <_RME_Thd_Exec_Set+0xa7>
ffffffff80216f9a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216fa1:	e9 7f 02 00 00       	jmp    ffffffff80217225 <_RME_Thd_Exec_Set+0x326>
ffffffff80216fa6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216faa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216fae:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216fb2:	0f 95 c0             	setne  %al
ffffffff80216fb5:	0f b6 c0             	movzbl %al,%eax
ffffffff80216fb8:	48 85 c0             	test   %rax,%rax
ffffffff80216fbb:	0f 84 4c 01 00 00    	je     ffffffff8021710d <_RME_Thd_Exec_Set+0x20e>
ffffffff80216fc1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216fc8:	e9 58 02 00 00       	jmp    ffffffff80217225 <_RME_Thd_Exec_Set+0x326>
ffffffff80216fcd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216fd1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216fd5:	48 89 c2             	mov    %rax,%rdx
ffffffff80216fd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216fdc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216fe0:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216fe3:	0f 93 c0             	setae  %al
ffffffff80216fe6:	0f b6 c0             	movzbl %al,%eax
ffffffff80216fe9:	48 85 c0             	test   %rax,%rax
ffffffff80216fec:	74 0c                	je     ffffffff80216ffa <_RME_Thd_Exec_Set+0xfb>
ffffffff80216fee:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216ff5:	e9 2b 02 00 00       	jmp    ffffffff80217225 <_RME_Thd_Exec_Set+0x326>
ffffffff80216ffa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216ffe:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217002:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217006:	48 89 c2             	mov    %rax,%rdx
ffffffff80217009:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021700d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217011:	48 01 d0             	add    %rdx,%rax
ffffffff80217014:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217018:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021701c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021701f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217023:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217027:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021702b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021702e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217032:	0f 94 c0             	sete   %al
ffffffff80217035:	0f b6 c0             	movzbl %al,%eax
ffffffff80217038:	48 85 c0             	test   %rax,%rax
ffffffff8021703b:	74 0c                	je     ffffffff80217049 <_RME_Thd_Exec_Set+0x14a>
ffffffff8021703d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217044:	e9 dc 01 00 00       	jmp    ffffffff80217225 <_RME_Thd_Exec_Set+0x326>
ffffffff80217049:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021704d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217051:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217055:	0f 95 c0             	setne  %al
ffffffff80217058:	0f b6 c0             	movzbl %al,%eax
ffffffff8021705b:	48 85 c0             	test   %rax,%rax
ffffffff8021705e:	74 0c                	je     ffffffff8021706c <_RME_Thd_Exec_Set+0x16d>
ffffffff80217060:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217067:	e9 b9 01 00 00       	jmp    ffffffff80217225 <_RME_Thd_Exec_Set+0x326>
ffffffff8021706c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217070:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217075:	48 89 c2             	mov    %rax,%rdx
ffffffff80217078:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021707c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217080:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217083:	0f 93 c0             	setae  %al
ffffffff80217086:	0f b6 c0             	movzbl %al,%eax
ffffffff80217089:	48 85 c0             	test   %rax,%rax
ffffffff8021708c:	74 0c                	je     ffffffff8021709a <_RME_Thd_Exec_Set+0x19b>
ffffffff8021708e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217095:	e9 8b 01 00 00       	jmp    ffffffff80217225 <_RME_Thd_Exec_Set+0x326>
ffffffff8021709a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021709e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802170a3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802170a7:	48 89 c2             	mov    %rax,%rdx
ffffffff802170aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802170ae:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802170b2:	48 01 d0             	add    %rdx,%rax
ffffffff802170b5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802170b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802170bd:	48 8b 00             	mov    (%rax),%rax
ffffffff802170c0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802170c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802170c8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802170cc:	0f b7 c0             	movzwl %ax,%eax
ffffffff802170cf:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802170d3:	0f 94 c0             	sete   %al
ffffffff802170d6:	0f b6 c0             	movzbl %al,%eax
ffffffff802170d9:	48 85 c0             	test   %rax,%rax
ffffffff802170dc:	74 0c                	je     ffffffff802170ea <_RME_Thd_Exec_Set+0x1eb>
ffffffff802170de:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802170e5:	e9 3b 01 00 00       	jmp    ffffffff80217225 <_RME_Thd_Exec_Set+0x326>
ffffffff802170ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802170ee:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802170f2:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802170f6:	0f 95 c0             	setne  %al
ffffffff802170f9:	0f b6 c0             	movzbl %al,%eax
ffffffff802170fc:	48 85 c0             	test   %rax,%rax
ffffffff802170ff:	74 0c                	je     ffffffff8021710d <_RME_Thd_Exec_Set+0x20e>
ffffffff80217101:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217108:	e9 18 01 00 00       	jmp    ffffffff80217225 <_RME_Thd_Exec_Set+0x326>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff8021710d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217111:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217115:	83 e0 01             	and    $0x1,%eax
ffffffff80217118:	48 85 c0             	test   %rax,%rax
ffffffff8021711b:	0f 94 c0             	sete   %al
ffffffff8021711e:	0f b6 c0             	movzbl %al,%eax
ffffffff80217121:	48 85 c0             	test   %rax,%rax
ffffffff80217124:	74 0c                	je     ffffffff80217132 <_RME_Thd_Exec_Set+0x233>
ffffffff80217126:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021712d:	e9 f3 00 00 00       	jmp    ffffffff80217225 <_RME_Thd_Exec_Set+0x326>
    
    /* Check if the target thread is already bound, and quit if it is not on our core */
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff80217132:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217136:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021713a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Local=RME_CPU_LOCAL();
ffffffff8021713e:	e8 fc 46 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80217143:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(Thread->Sched.Local!=Local)
ffffffff80217147:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021714b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021714f:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80217153:	74 0c                	je     ffffffff80217161 <_RME_Thd_Exec_Set+0x262>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217155:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021715c:	e9 c4 00 00 00       	jmp    ffffffff80217225 <_RME_Thd_Exec_Set+0x326>
        /* No action required */
    }
    
    /* Commit the change if both values are non-zero. If both are zero we are just
     * clearing the error flag and continue from where the exception happened. */
    if((Entry!=RME_NULL)&&(Stack!=RME_NULL))
ffffffff80217161:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
ffffffff80217166:	74 47                	je     ffffffff802171af <_RME_Thd_Exec_Set+0x2b0>
ffffffff80217168:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff8021716d:	74 40                	je     ffffffff802171af <_RME_Thd_Exec_Set+0x2b0>
    {
        RME_COV_MARKER();

        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
                           Entry,Stack,Param,&(Thread->Ctx.Reg->Reg));
ffffffff8021716f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217173:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
ffffffff8021717a:	48 89 c6             	mov    %rax,%rsi
ffffffff8021717d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217181:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80217188:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff8021718f:	ff ff 7f 
ffffffff80217192:	48 21 d0             	and    %rdx,%rax
ffffffff80217195:	48 89 c7             	mov    %rax,%rdi
ffffffff80217198:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8021719c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff802171a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802171a4:	49 89 f0             	mov    %rsi,%r8
ffffffff802171a7:	48 89 c6             	mov    %rax,%rsi
ffffffff802171aa:	e8 74 ed 00 00       	call   ffffffff80225f23 <__RME_Thd_Reg_Init>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff802171af:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802171b3:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802171b8:	48 89 c7             	mov    %rax,%rdi
ffffffff802171bb:	e8 b1 00 01 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
    
    /* Check if there is a exception pending and clear it if there is */
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff802171c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802171c4:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802171c8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802171cc:	75 52                	jne    ffffffff80217220 <_RME_Thd_Exec_Set+0x321>
    {
        RME_COV_MARKER();
        
        /* Check if the thread still have timeslices. If yes, put it into the runqueue;
         * if no, mark it as TIMEOUT and send scheduler notification to its parent. */
        if(Thread->Sched.Slice!=0U)
ffffffff802171ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802171d2:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802171d6:	48 85 c0             	test   %rax,%rax
ffffffff802171d9:	74 1a                	je     ffffffff802171f5 <_RME_Thd_Exec_Set+0x2f6>
        {
            RME_COV_MARKER();
            
            /* Ready and add to runqueue */
            Thread->Sched.State=RME_THD_READY;
ffffffff802171db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802171df:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff802171e6:	00 
            _RME_Run_Ins(Thread);
ffffffff802171e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802171eb:	48 89 c7             	mov    %rax,%rdi
ffffffff802171ee:	e8 fe bb ff ff       	call   ffffffff80212df1 <_RME_Run_Ins>
ffffffff802171f3:	eb 18                	jmp    ffffffff8021720d <_RME_Thd_Exec_Set+0x30e>
        else
        {
            RME_COV_MARKER();
            
            /* Timeout and notify parent */
            Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff802171f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802171f9:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80217200:	00 
            _RME_Run_Notif(Thread);
ffffffff80217201:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217205:	48 89 c7             	mov    %rax,%rdi
ffffffff80217208:	e8 e2 bd ff ff       	call   ffffffff80212fef <_RME_Run_Notif>
        }
        
        /* Pick the highest priority thread because something unblocked */
        _RME_Kern_High(Reg,Local);
ffffffff8021720d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80217211:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217215:	48 89 d6             	mov    %rdx,%rsi
ffffffff80217218:	48 89 c7             	mov    %rax,%rdi
ffffffff8021721b:	e8 c3 1c 00 00       	call   ffffffff80218ee3 <_RME_Kern_High>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    return 0;
ffffffff80217220:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80217225:	c9                   	leave  
ffffffff80217226:	c3                   	ret    

ffffffff80217227 <_RME_Thd_Sched_Prio>:
                                     rme_ptr_t Prio0,
                                     rme_cid_t Cap_Thd1,
                                     rme_ptr_t Prio1,
                                     rme_cid_t Cap_Thd2,
                                     rme_ptr_t Prio2)
{
ffffffff80217227:	f3 0f 1e fa          	endbr64 
ffffffff8021722b:	55                   	push   %rbp
ffffffff8021722c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021722f:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
ffffffff80217236:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
ffffffff8021723d:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
ffffffff80217244:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
ffffffff8021724b:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
ffffffff80217252:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
ffffffff80217259:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
    struct RME_Thd_Struct* Thread[3];
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Check parameter validity */
    if((Number==0U)||(Number>3U))
ffffffff80217260:	48 83 bd 58 ff ff ff 	cmpq   $0x0,-0xa8(%rbp)
ffffffff80217267:	00 
ffffffff80217268:	74 0a                	je     ffffffff80217274 <_RME_Thd_Sched_Prio+0x4d>
ffffffff8021726a:	48 83 bd 58 ff ff ff 	cmpq   $0x3,-0xa8(%rbp)
ffffffff80217271:	03 
ffffffff80217272:	76 0c                	jbe    ffffffff80217280 <_RME_Thd_Sched_Prio+0x59>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217274:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021727b:	e9 04 04 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
    }
    
    /* We'll use arrays in the next */
    Cap_Thd[0]=Cap_Thd0;
ffffffff80217280:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
ffffffff80217287:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Cap_Thd[1]=Cap_Thd1;
ffffffff8021728b:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
ffffffff80217292:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Cap_Thd[2]=Cap_Thd2;
ffffffff80217296:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8021729a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Prio[0]=Prio0;
ffffffff8021729e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
ffffffff802172a5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    Prio[1]=Prio1;
ffffffff802172a9:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802172ad:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Prio[2]=Prio2;
ffffffff802172b1:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff802172b5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

    Local=RME_CPU_LOCAL();
ffffffff802172b9:	e8 81 45 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802172be:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0U;Count<Number;Count++)
ffffffff802172c2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802172c9:	00 
ffffffff802172ca:	e9 e4 02 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x38c>
    {
        /* Get the capability slot */
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff802172cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802172d3:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802172d8:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802172dd:	48 85 c0             	test   %rax,%rax
ffffffff802172e0:	0f 85 b8 00 00 00    	jne    ffffffff8021739e <_RME_Thd_Sched_Prio+0x177>
ffffffff802172e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802172ea:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802172ef:	48 89 c2             	mov    %rax,%rdx
ffffffff802172f2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff802172f9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802172fd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217300:	0f 93 c0             	setae  %al
ffffffff80217303:	0f b6 c0             	movzbl %al,%eax
ffffffff80217306:	48 85 c0             	test   %rax,%rax
ffffffff80217309:	74 0c                	je     ffffffff80217317 <_RME_Thd_Sched_Prio+0xf0>
ffffffff8021730b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217312:	e9 6d 03 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217317:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021731b:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217320:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217324:	48 89 c2             	mov    %rax,%rdx
ffffffff80217327:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff8021732e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217332:	48 01 d0             	add    %rdx,%rax
ffffffff80217335:	48 89 c2             	mov    %rax,%rdx
ffffffff80217338:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021733c:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff80217341:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217345:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff8021734a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021734d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217351:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217355:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217359:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021735c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217360:	0f 94 c0             	sete   %al
ffffffff80217363:	0f b6 c0             	movzbl %al,%eax
ffffffff80217366:	48 85 c0             	test   %rax,%rax
ffffffff80217369:	74 0c                	je     ffffffff80217377 <_RME_Thd_Sched_Prio+0x150>
ffffffff8021736b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217372:	e9 0d 03 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217377:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021737b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021737f:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217383:	0f 95 c0             	setne  %al
ffffffff80217386:	0f b6 c0             	movzbl %al,%eax
ffffffff80217389:	48 85 c0             	test   %rax,%rax
ffffffff8021738c:	0f 84 8a 01 00 00    	je     ffffffff8021751c <_RME_Thd_Sched_Prio+0x2f5>
ffffffff80217392:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217399:	e9 e6 02 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
ffffffff8021739e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173a2:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802173a7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802173ab:	48 89 c2             	mov    %rax,%rdx
ffffffff802173ae:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff802173b5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802173b9:	48 39 c2             	cmp    %rax,%rdx
ffffffff802173bc:	0f 93 c0             	setae  %al
ffffffff802173bf:	0f b6 c0             	movzbl %al,%eax
ffffffff802173c2:	48 85 c0             	test   %rax,%rax
ffffffff802173c5:	74 0c                	je     ffffffff802173d3 <_RME_Thd_Sched_Prio+0x1ac>
ffffffff802173c7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802173ce:	e9 b1 02 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
ffffffff802173d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173d7:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802173dc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802173e0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802173e4:	48 89 c2             	mov    %rax,%rdx
ffffffff802173e7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff802173ee:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802173f2:	48 01 d0             	add    %rdx,%rax
ffffffff802173f5:	48 89 c2             	mov    %rax,%rdx
ffffffff802173f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173fc:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff80217401:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217405:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff8021740a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021740d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217411:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217415:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217419:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021741c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217420:	0f 94 c0             	sete   %al
ffffffff80217423:	0f b6 c0             	movzbl %al,%eax
ffffffff80217426:	48 85 c0             	test   %rax,%rax
ffffffff80217429:	74 0c                	je     ffffffff80217437 <_RME_Thd_Sched_Prio+0x210>
ffffffff8021742b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217432:	e9 4d 02 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217437:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021743b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021743f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217443:	0f 95 c0             	setne  %al
ffffffff80217446:	0f b6 c0             	movzbl %al,%eax
ffffffff80217449:	48 85 c0             	test   %rax,%rax
ffffffff8021744c:	74 0c                	je     ffffffff8021745a <_RME_Thd_Sched_Prio+0x233>
ffffffff8021744e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217455:	e9 2a 02 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
ffffffff8021745a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021745e:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217463:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217468:	48 89 c2             	mov    %rax,%rdx
ffffffff8021746b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021746f:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217474:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217478:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021747b:	0f 93 c0             	setae  %al
ffffffff8021747e:	0f b6 c0             	movzbl %al,%eax
ffffffff80217481:	48 85 c0             	test   %rax,%rax
ffffffff80217484:	74 0c                	je     ffffffff80217492 <_RME_Thd_Sched_Prio+0x26b>
ffffffff80217486:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021748d:	e9 f2 01 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217492:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217496:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff8021749b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802174a0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802174a4:	48 89 c2             	mov    %rax,%rdx
ffffffff802174a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802174ab:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff802174b0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802174b4:	48 01 d0             	add    %rdx,%rax
ffffffff802174b7:	48 89 c2             	mov    %rax,%rdx
ffffffff802174ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802174be:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff802174c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802174c7:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff802174cc:	48 8b 00             	mov    (%rax),%rax
ffffffff802174cf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802174d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802174d7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802174db:	0f b7 c0             	movzwl %ax,%eax
ffffffff802174de:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802174e2:	0f 94 c0             	sete   %al
ffffffff802174e5:	0f b6 c0             	movzbl %al,%eax
ffffffff802174e8:	48 85 c0             	test   %rax,%rax
ffffffff802174eb:	74 0c                	je     ffffffff802174f9 <_RME_Thd_Sched_Prio+0x2d2>
ffffffff802174ed:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802174f4:	e9 8b 01 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
ffffffff802174f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802174fd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217501:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217505:	0f 95 c0             	setne  %al
ffffffff80217508:	0f b6 c0             	movzbl %al,%eax
ffffffff8021750b:	48 85 c0             	test   %rax,%rax
ffffffff8021750e:	74 0c                	je     ffffffff8021751c <_RME_Thd_Sched_Prio+0x2f5>
ffffffff80217510:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217517:	e9 68 01 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
                       struct RME_Cap_Thd*,Thd_Op[Count],Type_Stat);
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff8021751c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217520:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217525:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217529:	83 e0 08             	and    $0x8,%eax
ffffffff8021752c:	48 85 c0             	test   %rax,%rax
ffffffff8021752f:	0f 94 c0             	sete   %al
ffffffff80217532:	0f b6 c0             	movzbl %al,%eax
ffffffff80217535:	48 85 c0             	test   %rax,%rax
ffffffff80217538:	74 0c                	je     ffffffff80217546 <_RME_Thd_Sched_Prio+0x31f>
ffffffff8021753a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217541:	e9 3e 01 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
        
        /* See if the target thread is already bound to this core. If no, we just quit */
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff80217546:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021754a:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff8021754f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217553:	48 89 c2             	mov    %rax,%rdx
ffffffff80217556:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021755a:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
ffffffff80217561:	ff 
        if(Thread[Count]->Sched.Local!=Local)
ffffffff80217562:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217566:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff8021756d:	ff 
ffffffff8021756e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217572:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff80217576:	74 0c                	je     ffffffff80217584 <_RME_Thd_Sched_Prio+0x35d>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff80217578:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021757f:	e9 00 01 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* See if the priority relationship is correct */
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff80217584:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217588:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff8021758f:	ff 
ffffffff80217590:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff80217594:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217598:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
ffffffff8021759d:	48 39 c2             	cmp    %rax,%rdx
ffffffff802175a0:	73 0c                	jae    ffffffff802175ae <_RME_Thd_Sched_Prio+0x387>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_PRIO;
ffffffff802175a2:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff802175a9:	e9 d6 00 00 00       	jmp    ffffffff80217684 <_RME_Thd_Sched_Prio+0x45d>
    for(Count=0U;Count<Number;Count++)
ffffffff802175ae:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802175b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802175b7:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
ffffffff802175be:	0f 82 0b fd ff ff    	jb     ffffffff802172cf <_RME_Thd_Sched_Prio+0xa8>
            /* No action required */
        }
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);
ffffffff802175c4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff802175cb:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802175d0:	48 89 c7             	mov    %rax,%rdi
ffffffff802175d3:	e8 99 fc 00 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
    
    /* Change priority for each thread, and we'll switch to the real highest priority
     * thread after all these changes. This can help remove the excessive overhead. */
    for(Count=0U;Count<Number;Count++)
ffffffff802175d8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802175df:	00 
ffffffff802175e0:	eb 76                	jmp    ffffffff80217658 <_RME_Thd_Sched_Prio+0x431>
    {
        /* See if this thread is currently in the runqueue */
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff802175e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802175e6:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff802175ed:	ff 
ffffffff802175ee:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802175f2:	48 85 c0             	test   %rax,%rax
ffffffff802175f5:	75 43                	jne    ffffffff8021763a <_RME_Thd_Sched_Prio+0x413>
        {
            RME_COV_MARKER();

            /* Remove from runqueue, change priority, and add it back */
            _RME_Run_Del(Thread[Count]);
ffffffff802175f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802175fb:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217602:	ff 
ffffffff80217603:	48 89 c7             	mov    %rax,%rdi
ffffffff80217606:	e8 99 b8 ff ff       	call   ffffffff80212ea4 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff8021760b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021760f:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217616:	ff 
ffffffff80217617:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021761b:	48 8b 54 d5 b0       	mov    -0x50(%rbp,%rdx,8),%rdx
ffffffff80217620:	48 89 50 40          	mov    %rdx,0x40(%rax)
            _RME_Run_Ins(Thread[Count]);
ffffffff80217624:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217628:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff8021762f:	ff 
ffffffff80217630:	48 89 c7             	mov    %rax,%rdi
ffffffff80217633:	e8 b9 b7 ff ff       	call   ffffffff80212df1 <_RME_Run_Ins>
ffffffff80217638:	eb 19                	jmp    ffffffff80217653 <_RME_Thd_Sched_Prio+0x42c>
        /* If it is BLOCKED, TIMEOUT or EXCPEND, changing the number will suffice */
        else
        {
            RME_COV_MARKER();

            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff8021763a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021763e:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217645:	ff 
ffffffff80217646:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021764a:	48 8b 54 d5 b0       	mov    -0x50(%rbp,%rdx,8),%rdx
ffffffff8021764f:	48 89 50 40          	mov    %rdx,0x40(%rax)
    for(Count=0U;Count<Number;Count++)
ffffffff80217653:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80217658:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021765c:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
ffffffff80217663:	0f 82 79 ff ff ff    	jb     ffffffff802175e2 <_RME_Thd_Sched_Prio+0x3bb>
        }
    }
    
    /* Pick the current highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff80217669:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8021766d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff80217674:	48 89 d6             	mov    %rdx,%rsi
ffffffff80217677:	48 89 c7             	mov    %rax,%rdi
ffffffff8021767a:	e8 64 18 00 00       	call   ffffffff80218ee3 <_RME_Kern_High>

    return 0;
ffffffff8021767f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80217684:	c9                   	leave  
ffffffff80217685:	c3                   	ret    

ffffffff80217686 <_RME_Thd_Sched_Rcv>:
Output      : None.
Return      : rme_ret_t - If successful, the thread ID; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Sched_Rcv(struct RME_Cap_Cpt* Cpt,
                                    rme_cid_t Cap_Thd)
{
ffffffff80217686:	f3 0f 1e fa          	endbr64 
ffffffff8021768a:	55                   	push   %rbp
ffffffff8021768b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021768e:	53                   	push   %rbx
ffffffff8021768f:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80217693:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff80217697:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    struct RME_Thd_Struct* Thread;
    rme_ptr_t Type_Stat;
    rme_ptr_t Flag;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8021769b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021769f:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802176a4:	48 85 c0             	test   %rax,%rax
ffffffff802176a7:	0f 85 98 00 00 00    	jne    ffffffff80217745 <_RME_Thd_Sched_Rcv+0xbf>
ffffffff802176ad:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802176b1:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802176b5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802176b9:	48 39 c2             	cmp    %rax,%rdx
ffffffff802176bc:	0f 96 c0             	setbe  %al
ffffffff802176bf:	0f b6 c0             	movzbl %al,%eax
ffffffff802176c2:	48 85 c0             	test   %rax,%rax
ffffffff802176c5:	74 0c                	je     ffffffff802176d3 <_RME_Thd_Sched_Rcv+0x4d>
ffffffff802176c7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802176ce:	e9 c8 02 00 00       	jmp    ffffffff8021799b <_RME_Thd_Sched_Rcv+0x315>
ffffffff802176d3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802176d7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802176db:	48 89 c2             	mov    %rax,%rdx
ffffffff802176de:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802176e2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802176e6:	48 01 d0             	add    %rdx,%rax
ffffffff802176e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802176ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802176f1:	48 8b 00             	mov    (%rax),%rax
ffffffff802176f4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff802176f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802176fc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217700:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217703:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217707:	0f 94 c0             	sete   %al
ffffffff8021770a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021770d:	48 85 c0             	test   %rax,%rax
ffffffff80217710:	74 0c                	je     ffffffff8021771e <_RME_Thd_Sched_Rcv+0x98>
ffffffff80217712:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217719:	e9 7d 02 00 00       	jmp    ffffffff8021799b <_RME_Thd_Sched_Rcv+0x315>
ffffffff8021771e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217722:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217726:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021772a:	0f 95 c0             	setne  %al
ffffffff8021772d:	0f b6 c0             	movzbl %al,%eax
ffffffff80217730:	48 85 c0             	test   %rax,%rax
ffffffff80217733:	0f 84 4c 01 00 00    	je     ffffffff80217885 <_RME_Thd_Sched_Rcv+0x1ff>
ffffffff80217739:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217740:	e9 56 02 00 00       	jmp    ffffffff8021799b <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217745:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217749:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021774d:	48 89 c2             	mov    %rax,%rdx
ffffffff80217750:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217754:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217758:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021775b:	0f 93 c0             	setae  %al
ffffffff8021775e:	0f b6 c0             	movzbl %al,%eax
ffffffff80217761:	48 85 c0             	test   %rax,%rax
ffffffff80217764:	74 0c                	je     ffffffff80217772 <_RME_Thd_Sched_Rcv+0xec>
ffffffff80217766:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021776d:	e9 29 02 00 00       	jmp    ffffffff8021799b <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217772:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217776:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021777a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021777e:	48 89 c2             	mov    %rax,%rdx
ffffffff80217781:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217785:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217789:	48 01 d0             	add    %rdx,%rax
ffffffff8021778c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217790:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217794:	48 8b 00             	mov    (%rax),%rax
ffffffff80217797:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8021779b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021779f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802177a3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802177a6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802177aa:	0f 94 c0             	sete   %al
ffffffff802177ad:	0f b6 c0             	movzbl %al,%eax
ffffffff802177b0:	48 85 c0             	test   %rax,%rax
ffffffff802177b3:	74 0c                	je     ffffffff802177c1 <_RME_Thd_Sched_Rcv+0x13b>
ffffffff802177b5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802177bc:	e9 da 01 00 00       	jmp    ffffffff8021799b <_RME_Thd_Sched_Rcv+0x315>
ffffffff802177c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802177c5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802177c9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802177cd:	0f 95 c0             	setne  %al
ffffffff802177d0:	0f b6 c0             	movzbl %al,%eax
ffffffff802177d3:	48 85 c0             	test   %rax,%rax
ffffffff802177d6:	74 0c                	je     ffffffff802177e4 <_RME_Thd_Sched_Rcv+0x15e>
ffffffff802177d8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802177df:	e9 b7 01 00 00       	jmp    ffffffff8021799b <_RME_Thd_Sched_Rcv+0x315>
ffffffff802177e4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802177e8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802177ed:	48 89 c2             	mov    %rax,%rdx
ffffffff802177f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802177f4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802177f8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802177fb:	0f 93 c0             	setae  %al
ffffffff802177fe:	0f b6 c0             	movzbl %al,%eax
ffffffff80217801:	48 85 c0             	test   %rax,%rax
ffffffff80217804:	74 0c                	je     ffffffff80217812 <_RME_Thd_Sched_Rcv+0x18c>
ffffffff80217806:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021780d:	e9 89 01 00 00       	jmp    ffffffff8021799b <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217812:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217816:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021781b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021781f:	48 89 c2             	mov    %rax,%rdx
ffffffff80217822:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217826:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021782a:	48 01 d0             	add    %rdx,%rax
ffffffff8021782d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217831:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217835:	48 8b 00             	mov    (%rax),%rax
ffffffff80217838:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8021783c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217840:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217844:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217847:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021784b:	0f 94 c0             	sete   %al
ffffffff8021784e:	0f b6 c0             	movzbl %al,%eax
ffffffff80217851:	48 85 c0             	test   %rax,%rax
ffffffff80217854:	74 0c                	je     ffffffff80217862 <_RME_Thd_Sched_Rcv+0x1dc>
ffffffff80217856:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021785d:	e9 39 01 00 00       	jmp    ffffffff8021799b <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217862:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217866:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021786a:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021786e:	0f 95 c0             	setne  %al
ffffffff80217871:	0f b6 c0             	movzbl %al,%eax
ffffffff80217874:	48 85 c0             	test   %rax,%rax
ffffffff80217877:	74 0c                	je     ffffffff80217885 <_RME_Thd_Sched_Rcv+0x1ff>
ffffffff80217879:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217880:	e9 16 01 00 00       	jmp    ffffffff8021799b <_RME_Thd_Sched_Rcv+0x315>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
ffffffff80217885:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217889:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021788d:	83 e0 20             	and    $0x20,%eax
ffffffff80217890:	48 85 c0             	test   %rax,%rax
ffffffff80217893:	0f 94 c0             	sete   %al
ffffffff80217896:	0f b6 c0             	movzbl %al,%eax
ffffffff80217899:	48 85 c0             	test   %rax,%rax
ffffffff8021789c:	74 0c                	je     ffffffff802178aa <_RME_Thd_Sched_Rcv+0x224>
ffffffff8021789e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802178a5:	e9 f1 00 00 00       	jmp    ffffffff8021799b <_RME_Thd_Sched_Rcv+0x315>
    
    /* Check if we are on the same core with the target thread */
    Scheduler=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff802178aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802178ae:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802178b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Scheduler->Sched.Local!=RME_CPU_LOCAL())
ffffffff802178b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802178ba:	48 8b 58 28          	mov    0x28(%rax),%rbx
ffffffff802178be:	e8 7c 3f ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802178c3:	48 39 c3             	cmp    %rax,%rbx
ffffffff802178c6:	74 0c                	je     ffffffff802178d4 <_RME_Thd_Sched_Rcv+0x24e>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802178c8:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802178cf:	e9 c7 00 00 00       	jmp    ffffffff8021799b <_RME_Thd_Sched_Rcv+0x315>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if there are any notifications */
    if(Scheduler->Sched.Event.Next==&(Scheduler->Sched.Event))
ffffffff802178d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802178d8:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff802178dc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802178e0:	48 83 c2 78          	add    $0x78,%rdx
ffffffff802178e4:	48 39 d0             	cmp    %rdx,%rax
ffffffff802178e7:	75 0c                	jne    ffffffff802178f5 <_RME_Thd_Sched_Rcv+0x26f>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_NOTIF;
ffffffff802178e9:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff802178f0:	e9 a6 00 00 00       	jmp    ffffffff8021799b <_RME_Thd_Sched_Rcv+0x315>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Return one notification and delete it from the notification list */
    Thread=(struct RME_Thd_Struct*)(Scheduler->Sched.Event.Next-1U);
ffffffff802178f5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802178f9:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff802178fd:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80217901:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff80217905:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217909:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff8021790d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217911:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217915:	48 89 d6             	mov    %rdx,%rsi
ffffffff80217918:	48 89 c7             	mov    %rax,%rdi
ffffffff8021791b:	e8 64 54 ff ff       	call   ffffffff8020cd84 <_RME_List_Del>
    /* We need to do this because we are using this to detect whether the notification is sent */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80217920:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217924:	48 83 c0 10          	add    $0x10,%rax
ffffffff80217928:	48 89 c7             	mov    %rax,%rdi
ffffffff8021792b:	e8 2a 54 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    
    /* Exception pending */
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80217930:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217934:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80217938:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021793c:	75 2b                	jne    ffffffff80217969 <_RME_Thd_Sched_Rcv+0x2e3>
    {
        RME_COV_MARKER();
        
        Flag=RME_THD_EXCPEND_FLAG;
ffffffff8021793e:	48 b8 00 00 00 00 00 	movabs $0x4000000000000000,%rax
ffffffff80217945:	00 00 40 
ffffffff80217948:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        
        /* Is it also out of timeslice? */
        if(Thread->Sched.Slice==0U)
ffffffff8021794c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217950:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217954:	48 85 c0             	test   %rax,%rax
ffffffff80217957:	75 36                	jne    ffffffff8021798f <_RME_Thd_Sched_Rcv+0x309>
        {
            RME_COV_MARKER();
            
            Flag|=RME_THD_TIMEOUT_FLAG;
ffffffff80217959:	48 b8 00 00 00 00 00 	movabs $0x2000000000000000,%rax
ffffffff80217960:	00 00 20 
ffffffff80217963:	48 09 45 e0          	or     %rax,-0x20(%rbp)
ffffffff80217967:	eb 26                	jmp    ffffffff8021798f <_RME_Thd_Sched_Rcv+0x309>
            RME_COV_MARKER();
            /* No action required */
        }
    }
    /* Timeout */
    else if(Thread->Sched.State==RME_THD_TIMEOUT)
ffffffff80217969:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021796d:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80217971:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217975:	75 10                	jne    ffffffff80217987 <_RME_Thd_Sched_Rcv+0x301>
    {
        RME_COV_MARKER();
        
        Flag=RME_THD_TIMEOUT_FLAG;
ffffffff80217977:	48 b8 00 00 00 00 00 	movabs $0x2000000000000000,%rax
ffffffff8021797e:	00 00 20 
ffffffff80217981:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217985:	eb 08                	jmp    ffffffff8021798f <_RME_Thd_Sched_Rcv+0x309>
    /* Spurious notification, cause eliminated before this sched rcv */
    else
    {
        RME_COV_MARKER();
        
        Flag=0U;
ffffffff80217987:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8021798e:	00 
    }
    
    /* Return the notification TID with the flags */
    return (rme_ret_t)(Thread->Sched.TID|Flag);
ffffffff8021798f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217993:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80217997:	48 0b 45 e0          	or     -0x20(%rbp),%rax
}
ffffffff8021799b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff8021799f:	c9                   	leave  
ffffffff802179a0:	c3                   	ret    

ffffffff802179a1 <_RME_Thd_Time_Xfer>:
static rme_ret_t _RME_Thd_Time_Xfer(struct RME_Cap_Cpt* Cpt,
                                    struct RME_Reg_Struct* Reg,
                                    rme_cid_t Cap_Thd_Dst,
                                    rme_cid_t Cap_Thd_Src,
                                    rme_ptr_t Time)
{
ffffffff802179a1:	f3 0f 1e fa          	endbr64 
ffffffff802179a5:	55                   	push   %rbp
ffffffff802179a6:	48 89 e5             	mov    %rsp,%rbp
ffffffff802179a9:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff802179ad:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802179b1:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff802179b5:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff802179b9:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff802179bd:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_CPU_Local* Local;
    rme_ptr_t Time_Xfer;
    rme_ptr_t Type_Stat;
    
    /* We may allow transferring infinite time here */
    if(Time==0U)
ffffffff802179c1:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
ffffffff802179c6:	75 0c                	jne    ffffffff802179d4 <_RME_Thd_Time_Xfer+0x33>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802179c8:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802179cf:	e9 3c 07 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff802179d4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802179d8:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802179dd:	48 85 c0             	test   %rax,%rax
ffffffff802179e0:	0f 85 98 00 00 00    	jne    ffffffff80217a7e <_RME_Thd_Time_Xfer+0xdd>
ffffffff802179e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802179ea:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802179ee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802179f2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802179f5:	0f 96 c0             	setbe  %al
ffffffff802179f8:	0f b6 c0             	movzbl %al,%eax
ffffffff802179fb:	48 85 c0             	test   %rax,%rax
ffffffff802179fe:	74 0c                	je     ffffffff80217a0c <_RME_Thd_Time_Xfer+0x6b>
ffffffff80217a00:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217a07:	e9 04 07 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217a0c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217a10:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217a14:	48 89 c2             	mov    %rax,%rdx
ffffffff80217a17:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217a1b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217a1f:	48 01 d0             	add    %rdx,%rax
ffffffff80217a22:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217a26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217a2a:	48 8b 00             	mov    (%rax),%rax
ffffffff80217a2d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217a31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217a35:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217a39:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217a3c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217a40:	0f 94 c0             	sete   %al
ffffffff80217a43:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a46:	48 85 c0             	test   %rax,%rax
ffffffff80217a49:	74 0c                	je     ffffffff80217a57 <_RME_Thd_Time_Xfer+0xb6>
ffffffff80217a4b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217a52:	e9 b9 06 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217a57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217a5b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217a5f:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217a63:	0f 95 c0             	setne  %al
ffffffff80217a66:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a69:	48 85 c0             	test   %rax,%rax
ffffffff80217a6c:	0f 84 4c 01 00 00    	je     ffffffff80217bbe <_RME_Thd_Time_Xfer+0x21d>
ffffffff80217a72:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217a79:	e9 92 06 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217a7e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217a82:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217a86:	48 89 c2             	mov    %rax,%rdx
ffffffff80217a89:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217a8d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217a91:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217a94:	0f 93 c0             	setae  %al
ffffffff80217a97:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a9a:	48 85 c0             	test   %rax,%rax
ffffffff80217a9d:	74 0c                	je     ffffffff80217aab <_RME_Thd_Time_Xfer+0x10a>
ffffffff80217a9f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217aa6:	e9 65 06 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217aab:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217aaf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217ab3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217ab7:	48 89 c2             	mov    %rax,%rdx
ffffffff80217aba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217abe:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217ac2:	48 01 d0             	add    %rdx,%rax
ffffffff80217ac5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217ac9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217acd:	48 8b 00             	mov    (%rax),%rax
ffffffff80217ad0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217ad4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217ad8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217adc:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217adf:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217ae3:	0f 94 c0             	sete   %al
ffffffff80217ae6:	0f b6 c0             	movzbl %al,%eax
ffffffff80217ae9:	48 85 c0             	test   %rax,%rax
ffffffff80217aec:	74 0c                	je     ffffffff80217afa <_RME_Thd_Time_Xfer+0x159>
ffffffff80217aee:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217af5:	e9 16 06 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217afa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217afe:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217b02:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217b06:	0f 95 c0             	setne  %al
ffffffff80217b09:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b0c:	48 85 c0             	test   %rax,%rax
ffffffff80217b0f:	74 0c                	je     ffffffff80217b1d <_RME_Thd_Time_Xfer+0x17c>
ffffffff80217b11:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217b18:	e9 f3 05 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217b1d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217b21:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217b26:	48 89 c2             	mov    %rax,%rdx
ffffffff80217b29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217b2d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217b31:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217b34:	0f 93 c0             	setae  %al
ffffffff80217b37:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b3a:	48 85 c0             	test   %rax,%rax
ffffffff80217b3d:	74 0c                	je     ffffffff80217b4b <_RME_Thd_Time_Xfer+0x1aa>
ffffffff80217b3f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217b46:	e9 c5 05 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217b4b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217b4f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217b54:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217b58:	48 89 c2             	mov    %rax,%rdx
ffffffff80217b5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217b5f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217b63:	48 01 d0             	add    %rdx,%rax
ffffffff80217b66:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217b6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217b6e:	48 8b 00             	mov    (%rax),%rax
ffffffff80217b71:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217b75:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217b79:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217b7d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217b80:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217b84:	0f 94 c0             	sete   %al
ffffffff80217b87:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b8a:	48 85 c0             	test   %rax,%rax
ffffffff80217b8d:	74 0c                	je     ffffffff80217b9b <_RME_Thd_Time_Xfer+0x1fa>
ffffffff80217b8f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217b96:	e9 75 05 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217b9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217b9f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217ba3:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217ba7:	0f 95 c0             	setne  %al
ffffffff80217baa:	0f b6 c0             	movzbl %al,%eax
ffffffff80217bad:	48 85 c0             	test   %rax,%rax
ffffffff80217bb0:	74 0c                	je     ffffffff80217bbe <_RME_Thd_Time_Xfer+0x21d>
ffffffff80217bb2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217bb9:	e9 52 05 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
                   struct RME_Cap_Thd*,Thd_Dst_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff80217bbe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217bc2:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80217bc7:	48 85 c0             	test   %rax,%rax
ffffffff80217bca:	0f 85 98 00 00 00    	jne    ffffffff80217c68 <_RME_Thd_Time_Xfer+0x2c7>
ffffffff80217bd0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217bd4:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80217bd8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217bdc:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217bdf:	0f 96 c0             	setbe  %al
ffffffff80217be2:	0f b6 c0             	movzbl %al,%eax
ffffffff80217be5:	48 85 c0             	test   %rax,%rax
ffffffff80217be8:	74 0c                	je     ffffffff80217bf6 <_RME_Thd_Time_Xfer+0x255>
ffffffff80217bea:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217bf1:	e9 1a 05 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217bf6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217bfa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217bfe:	48 89 c2             	mov    %rax,%rdx
ffffffff80217c01:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217c05:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217c09:	48 01 d0             	add    %rdx,%rax
ffffffff80217c0c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217c10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217c14:	48 8b 00             	mov    (%rax),%rax
ffffffff80217c17:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217c1b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217c1f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217c23:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217c26:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217c2a:	0f 94 c0             	sete   %al
ffffffff80217c2d:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c30:	48 85 c0             	test   %rax,%rax
ffffffff80217c33:	74 0c                	je     ffffffff80217c41 <_RME_Thd_Time_Xfer+0x2a0>
ffffffff80217c35:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217c3c:	e9 cf 04 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217c41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217c45:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217c49:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217c4d:	0f 95 c0             	setne  %al
ffffffff80217c50:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c53:	48 85 c0             	test   %rax,%rax
ffffffff80217c56:	0f 84 4c 01 00 00    	je     ffffffff80217da8 <_RME_Thd_Time_Xfer+0x407>
ffffffff80217c5c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217c63:	e9 a8 04 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217c68:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217c6c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217c70:	48 89 c2             	mov    %rax,%rdx
ffffffff80217c73:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217c77:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217c7b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217c7e:	0f 93 c0             	setae  %al
ffffffff80217c81:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c84:	48 85 c0             	test   %rax,%rax
ffffffff80217c87:	74 0c                	je     ffffffff80217c95 <_RME_Thd_Time_Xfer+0x2f4>
ffffffff80217c89:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217c90:	e9 7b 04 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217c95:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217c99:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217c9d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217ca1:	48 89 c2             	mov    %rax,%rdx
ffffffff80217ca4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217ca8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217cac:	48 01 d0             	add    %rdx,%rax
ffffffff80217caf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217cb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217cb7:	48 8b 00             	mov    (%rax),%rax
ffffffff80217cba:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217cbe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217cc2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217cc6:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217cc9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217ccd:	0f 94 c0             	sete   %al
ffffffff80217cd0:	0f b6 c0             	movzbl %al,%eax
ffffffff80217cd3:	48 85 c0             	test   %rax,%rax
ffffffff80217cd6:	74 0c                	je     ffffffff80217ce4 <_RME_Thd_Time_Xfer+0x343>
ffffffff80217cd8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217cdf:	e9 2c 04 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217ce4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217ce8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217cec:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217cf0:	0f 95 c0             	setne  %al
ffffffff80217cf3:	0f b6 c0             	movzbl %al,%eax
ffffffff80217cf6:	48 85 c0             	test   %rax,%rax
ffffffff80217cf9:	74 0c                	je     ffffffff80217d07 <_RME_Thd_Time_Xfer+0x366>
ffffffff80217cfb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217d02:	e9 09 04 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217d07:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217d0b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217d10:	48 89 c2             	mov    %rax,%rdx
ffffffff80217d13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217d17:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217d1b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217d1e:	0f 93 c0             	setae  %al
ffffffff80217d21:	0f b6 c0             	movzbl %al,%eax
ffffffff80217d24:	48 85 c0             	test   %rax,%rax
ffffffff80217d27:	74 0c                	je     ffffffff80217d35 <_RME_Thd_Time_Xfer+0x394>
ffffffff80217d29:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217d30:	e9 db 03 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217d35:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217d39:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217d3e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217d42:	48 89 c2             	mov    %rax,%rdx
ffffffff80217d45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217d49:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217d4d:	48 01 d0             	add    %rdx,%rax
ffffffff80217d50:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217d54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217d58:	48 8b 00             	mov    (%rax),%rax
ffffffff80217d5b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217d5f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217d63:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217d67:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217d6a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217d6e:	0f 94 c0             	sete   %al
ffffffff80217d71:	0f b6 c0             	movzbl %al,%eax
ffffffff80217d74:	48 85 c0             	test   %rax,%rax
ffffffff80217d77:	74 0c                	je     ffffffff80217d85 <_RME_Thd_Time_Xfer+0x3e4>
ffffffff80217d79:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217d80:	e9 8b 03 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217d85:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217d89:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217d8d:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217d91:	0f 95 c0             	setne  %al
ffffffff80217d94:	0f b6 c0             	movzbl %al,%eax
ffffffff80217d97:	48 85 c0             	test   %rax,%rax
ffffffff80217d9a:	74 0c                	je     ffffffff80217da8 <_RME_Thd_Time_Xfer+0x407>
ffffffff80217d9c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217da3:	e9 68 03 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
                   struct RME_Cap_Thd*,Thd_Src_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff80217da8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217dac:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217db0:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80217db5:	48 85 c0             	test   %rax,%rax
ffffffff80217db8:	0f 94 c0             	sete   %al
ffffffff80217dbb:	0f b6 c0             	movzbl %al,%eax
ffffffff80217dbe:	48 85 c0             	test   %rax,%rax
ffffffff80217dc1:	74 0c                	je     ffffffff80217dcf <_RME_Thd_Time_Xfer+0x42e>
ffffffff80217dc3:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217dca:	e9 41 03 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
    RME_CAP_CHECK(Thd_Src_Op,RME_THD_FLAG_XFER_SRC);
ffffffff80217dcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217dd3:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217dd7:	83 e0 40             	and    $0x40,%eax
ffffffff80217dda:	48 85 c0             	test   %rax,%rax
ffffffff80217ddd:	0f 94 c0             	sete   %al
ffffffff80217de0:	0f b6 c0             	movzbl %al,%eax
ffffffff80217de3:	48 85 c0             	test   %rax,%rax
ffffffff80217de6:	74 0c                	je     ffffffff80217df4 <_RME_Thd_Time_Xfer+0x453>
ffffffff80217de8:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217def:	e9 1c 03 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>

    /* Check if the two threads are on the core that is accordance with what we are on */
    Local=RME_CPU_LOCAL();
ffffffff80217df4:	e8 46 3a ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80217df9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Thd_Src=RME_CAP_GETOBJ(Thd_Src_Op,struct RME_Thd_Struct*);
ffffffff80217dfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217e01:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217e05:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Thd_Src->Sched.Local!=Local)
ffffffff80217e09:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217e0d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217e11:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80217e15:	74 0c                	je     ffffffff80217e23 <_RME_Thd_Time_Xfer+0x482>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217e17:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217e1e:	e9 ed 02 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if we have slices to transfer; 0 implies TIMEOUT, BLOCKED, or EXCPEND */
    if(Thd_Src->Sched.Slice==0U)
ffffffff80217e23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217e27:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e2b:	48 85 c0             	test   %rax,%rax
ffffffff80217e2e:	75 0c                	jne    ffffffff80217e3c <_RME_Thd_Time_Xfer+0x49b>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217e30:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217e37:	e9 d4 02 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    Thd_Dst=RME_CAP_GETOBJ(Thd_Dst_Op,struct RME_Thd_Struct*);
ffffffff80217e3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217e40:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217e44:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    
    if(Thd_Dst->Sched.Local!=Local)
ffffffff80217e48:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e4c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217e50:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80217e54:	74 0c                	je     ffffffff80217e62 <_RME_Thd_Time_Xfer+0x4c1>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217e56:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217e5d:	e9 ae 02 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
        /* No action required */
    }

    /* The destination must never have higher maximum priority than the source,
     * unless it is a init thread which could be used as a black hole */
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80217e62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217e66:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff80217e6a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e6e:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80217e72:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e75:	73 23                	jae    ffffffff80217e9a <_RME_Thd_Time_Xfer+0x4f9>
       (Thd_Dst->Sched.Slice!=RME_THD_INIT_TIME))
ffffffff80217e77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e7b:	48 8b 40 30          	mov    0x30(%rax),%rax
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80217e7f:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff80217e86:	ff ff 7f 
ffffffff80217e89:	48 39 d0             	cmp    %rdx,%rax
ffffffff80217e8c:	74 0c                	je     ffffffff80217e9a <_RME_Thd_Time_Xfer+0x4f9>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80217e8e:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80217e95:	e9 76 02 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Delegating from a normal thread */
    if(Thd_Src->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217e9a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217e9e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217ea2:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217ea9:	ff ff 7f 
ffffffff80217eac:	48 39 d0             	cmp    %rdx,%rax
ffffffff80217eaf:	0f 87 e4 00 00 00    	ja     ffffffff80217f99 <_RME_Thd_Time_Xfer+0x5f8>
    {
        RME_COV_MARKER();

        /* Delegate all our time */
        if(Time>=RME_THD_INF_TIME)
ffffffff80217eb5:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80217ebc:	ff ff 7f 
ffffffff80217ebf:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff80217ec3:	76 0e                	jbe    ffffffff80217ed3 <_RME_Thd_Time_Xfer+0x532>
        {
            RME_COV_MARKER();

            Time_Xfer=Thd_Src->Sched.Slice;
ffffffff80217ec5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217ec9:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217ecd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217ed1:	eb 24                	jmp    ffffffff80217ef7 <_RME_Thd_Time_Xfer+0x556>
        /* Delegate some time, if not sufficient, clean up the source time */
        else
        {
            RME_COV_MARKER();
            
            if(Thd_Src->Sched.Slice>Time)
ffffffff80217ed3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217ed7:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217edb:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff80217edf:	73 0a                	jae    ffffffff80217eeb <_RME_Thd_Time_Xfer+0x54a>
            {
                RME_COV_MARKER();

                Time_Xfer=Time;
ffffffff80217ee1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217ee5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217ee9:	eb 0c                	jmp    ffffffff80217ef7 <_RME_Thd_Time_Xfer+0x556>
            }
            else
            {
                RME_COV_MARKER();

                Time_Xfer=Thd_Src->Sched.Slice;
ffffffff80217eeb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217eef:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217ef3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            }
        }
        
        /* See if we are transferring to an infinite budget thread. If yes, we
         * are revoking timeslices; If not, this is a finite transfer */
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217ef7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217efb:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217eff:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217f06:	ff ff 7f 
ffffffff80217f09:	48 39 d0             	cmp    %rdx,%rax
ffffffff80217f0c:	77 6f                	ja     ffffffff80217f7d <_RME_Thd_Time_Xfer+0x5dc>
        {
            RME_COV_MARKER();
            
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80217f0e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f12:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217f16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217f1a:	48 01 c2             	add    %rax,%rdx
ffffffff80217f1d:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80217f24:	ff ff 7f 
ffffffff80217f27:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217f2a:	0f 97 c0             	seta   %al
ffffffff80217f2d:	0f b6 c0             	movzbl %al,%eax
ffffffff80217f30:	48 85 c0             	test   %rax,%rax
ffffffff80217f33:	75 25                	jne    ffffffff80217f5a <_RME_Thd_Time_Xfer+0x5b9>
ffffffff80217f35:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f39:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217f3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217f41:	48 01 c2             	add    %rax,%rdx
ffffffff80217f44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f48:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217f4c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217f4f:	0f 92 c0             	setb   %al
ffffffff80217f52:	0f b6 c0             	movzbl %al,%eax
ffffffff80217f55:	48 85 c0             	test   %rax,%rax
ffffffff80217f58:	74 0c                	je     ffffffff80217f66 <_RME_Thd_Time_Xfer+0x5c5>
ffffffff80217f5a:	48 c7 c0 30 ff ff ff 	mov    $0xffffffffffffff30,%rax
ffffffff80217f61:	e9 aa 01 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
            Thd_Dst->Sched.Slice+=Time_Xfer;
ffffffff80217f66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f6a:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217f6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217f72:	48 01 c2             	add    %rax,%rdx
ffffffff80217f75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f79:	48 89 50 30          	mov    %rdx,0x30(%rax)
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff80217f7d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217f81:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217f85:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff80217f89:	48 89 c2             	mov    %rax,%rdx
ffffffff80217f8c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217f90:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff80217f94:	e9 e1 00 00 00       	jmp    ffffffff8021807a <_RME_Thd_Time_Xfer+0x6d9>
    else
    {
        RME_COV_MARKER();

        /* Infinite transfer to the destination */
        if(Time>=RME_THD_INF_TIME)
ffffffff80217f99:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80217fa0:	ff ff 7f 
ffffffff80217fa3:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff80217fa7:	76 62                	jbe    ffffffff8021800b <_RME_Thd_Time_Xfer+0x66a>
        {
            RME_COV_MARKER();

            /* This transfer will revoke the infinite budget */
            if(Time==RME_THD_INIT_TIME)
ffffffff80217fa9:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217fb0:	ff ff 7f 
ffffffff80217fb3:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff80217fb7:	75 23                	jne    ffffffff80217fdc <_RME_Thd_Time_Xfer+0x63b>
            {
                RME_COV_MARKER();
                
                /* Will not revoke, source is an init thread */
                if(Thd_Src->Sched.Slice!=RME_THD_INIT_TIME)
ffffffff80217fb9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fbd:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217fc1:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff80217fc8:	ff ff 7f 
ffffffff80217fcb:	48 39 d0             	cmp    %rdx,%rax
ffffffff80217fce:	74 0c                	je     ffffffff80217fdc <_RME_Thd_Time_Xfer+0x63b>
                {
                    RME_COV_MARKER();
                    
                    Thd_Src->Sched.Slice=0U;
ffffffff80217fd0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fd4:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80217fdb:	00 
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* Set destination to infinite if it is not an init thread */
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217fdc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217fe0:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217fe4:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217feb:	ff ff 7f 
ffffffff80217fee:	48 39 d0             	cmp    %rdx,%rax
ffffffff80217ff1:	0f 87 83 00 00 00    	ja     ffffffff8021807a <_RME_Thd_Time_Xfer+0x6d9>
            {
                RME_COV_MARKER();
                
                Thd_Dst->Sched.Slice=RME_THD_INF_TIME;
ffffffff80217ff7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217ffb:	48 b9 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rcx
ffffffff80218002:	ff ff 7f 
ffffffff80218005:	48 89 48 30          	mov    %rcx,0x30(%rax)
ffffffff80218009:	eb 6f                	jmp    ffffffff8021807a <_RME_Thd_Time_Xfer+0x6d9>
        else
        {
            RME_COV_MARKER();

            /* Just increase the budget of the other thread - check first */
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time);
ffffffff8021800b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021800f:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80218013:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80218017:	48 01 c2             	add    %rax,%rdx
ffffffff8021801a:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80218021:	ff ff 7f 
ffffffff80218024:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218027:	0f 97 c0             	seta   %al
ffffffff8021802a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021802d:	48 85 c0             	test   %rax,%rax
ffffffff80218030:	75 25                	jne    ffffffff80218057 <_RME_Thd_Time_Xfer+0x6b6>
ffffffff80218032:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218036:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8021803a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021803e:	48 01 c2             	add    %rax,%rdx
ffffffff80218041:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218045:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218049:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021804c:	0f 92 c0             	setb   %al
ffffffff8021804f:	0f b6 c0             	movzbl %al,%eax
ffffffff80218052:	48 85 c0             	test   %rax,%rax
ffffffff80218055:	74 0c                	je     ffffffff80218063 <_RME_Thd_Time_Xfer+0x6c2>
ffffffff80218057:	48 c7 c0 30 ff ff ff 	mov    $0xffffffffffffff30,%rax
ffffffff8021805e:	e9 ad 00 00 00       	jmp    ffffffff80218110 <_RME_Thd_Time_Xfer+0x76f>
            Thd_Dst->Sched.Slice+=Time;
ffffffff80218063:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218067:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8021806b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021806f:	48 01 c2             	add    %rax,%rdx
ffffffff80218072:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218076:	48 89 50 30          	mov    %rdx,0x30(%rax)
        }
    }

    /* Is the source time used up? If yes, delete it from the run queue, and notify its 
     * parent. If it is not in the run queue, The state of the source must be BLOCKED. */
    if(Thd_Src->Sched.Slice==0U)
ffffffff8021807a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021807e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218082:	48 85 c0             	test   %rax,%rax
ffffffff80218085:	75 31                	jne    ffffffff802180b8 <_RME_Thd_Time_Xfer+0x717>
        
        /* If it is blocked or have an exception, we neither change its state nor send
         * the scheduler notification. It will be sent when the thread unblocks, or gets
         * its exception handled. The rule of the thumb is, we only send scheduler 
         * notifications when the thread really enter TIMEOUT or EXCPEND state. */
        if(Thd_Src->Sched.State==RME_THD_READY)
ffffffff80218087:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021808b:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff8021808f:	48 85 c0             	test   %rax,%rax
ffffffff80218092:	75 24                	jne    ffffffff802180b8 <_RME_Thd_Time_Xfer+0x717>
        {
            RME_COV_MARKER();
            
            /* Remove from runqueue */
            _RME_Run_Del(Thd_Src);
ffffffff80218094:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218098:	48 89 c7             	mov    %rax,%rdi
ffffffff8021809b:	e8 04 ae ff ff       	call   ffffffff80212ea4 <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Src->Sched.State=RME_THD_TIMEOUT;
ffffffff802180a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802180a4:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff802180ab:	00 
            _RME_Run_Notif(Thd_Src);
ffffffff802180ac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802180b0:	48 89 c7             	mov    %rax,%rdi
ffffffff802180b3:	e8 37 af ff ff       	call   ffffffff80212fef <_RME_Run_Notif>
        /* No action required */
    }

    /* Now save the system call return value to the caller 
     * stack - how much time the destination have now */
    __RME_Svc_Retval_Set(Reg,(rme_ret_t)(Thd_Dst->Sched.Slice));
ffffffff802180b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802180bc:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802180c0:	48 89 c2             	mov    %rax,%rdx
ffffffff802180c3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802180c7:	48 89 d6             	mov    %rdx,%rsi
ffffffff802180ca:	48 89 c7             	mov    %rax,%rdi
ffffffff802180cd:	e8 9f f1 00 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>

    /* See what was the state of the destination thread. If it is timeout, then activate
     * it. If it is BLOCKED or EXCPEND, then leave it alone, and it will be activated
     * when it unblocks or when the exception is handled. */
    if(Thd_Dst->Sched.State==RME_THD_TIMEOUT)
ffffffff802180d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802180d6:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802180da:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802180de:	75 18                	jne    ffffffff802180f8 <_RME_Thd_Time_Xfer+0x757>
    {
        RME_COV_MARKER();

        /* Ready and add to runqueue */
        Thd_Dst->Sched.State=RME_THD_READY;
ffffffff802180e0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802180e4:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff802180eb:	00 
        _RME_Run_Ins(Thd_Dst);
ffffffff802180ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802180f0:	48 89 c7             	mov    %rax,%rdi
ffffffff802180f3:	e8 f9 ac ff ff       	call   ffffffff80212df1 <_RME_Run_Ins>
        RME_COV_MARKER();
    }
    
    /* All possible kernel send (scheduler notifications) done,
     * now pick the highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff802180f8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802180fc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80218100:	48 89 d6             	mov    %rdx,%rsi
ffffffff80218103:	48 89 c7             	mov    %rax,%rdi
ffffffff80218106:	e8 d8 0d 00 00       	call   ffffffff80218ee3 <_RME_Kern_High>

    return 0;
ffffffff8021810b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218110:	c9                   	leave  
ffffffff80218111:	c3                   	ret    

ffffffff80218112 <_RME_Thd_Swt>:
******************************************************************************/
static rme_ret_t _RME_Thd_Swt(struct RME_Cap_Cpt* Cpt,
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Thd,
                              rme_ptr_t Is_Yield)
{
ffffffff80218112:	f3 0f 1e fa          	endbr64 
ffffffff80218116:	55                   	push   %rbp
ffffffff80218117:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021811a:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8021811e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80218122:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80218126:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021812a:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    struct RME_Thd_Struct* Thd_High;
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    rme_ptr_t Type_Stat;

    Local=RME_CPU_LOCAL();
ffffffff8021812e:	e8 0c 37 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80218133:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff80218137:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021813b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021813f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* The caller have picked a thread to switch to */
    if(Cap_Thd<RME_CID_NULL)
ffffffff80218143:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff80218148:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
ffffffff8021814c:	0f 8d 21 03 00 00    	jge    ffffffff80218473 <_RME_Thd_Swt+0x361>
    {
        RME_COV_MARKER();
        
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80218152:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218156:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021815b:	48 85 c0             	test   %rax,%rax
ffffffff8021815e:	0f 85 98 00 00 00    	jne    ffffffff802181fc <_RME_Thd_Swt+0xea>
ffffffff80218164:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218168:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021816c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218170:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218173:	0f 96 c0             	setbe  %al
ffffffff80218176:	0f b6 c0             	movzbl %al,%eax
ffffffff80218179:	48 85 c0             	test   %rax,%rax
ffffffff8021817c:	74 0c                	je     ffffffff8021818a <_RME_Thd_Swt+0x78>
ffffffff8021817e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218185:	e9 ab 03 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
ffffffff8021818a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021818e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218192:	48 89 c2             	mov    %rax,%rdx
ffffffff80218195:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218199:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021819d:	48 01 d0             	add    %rdx,%rax
ffffffff802181a0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802181a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802181a8:	48 8b 00             	mov    (%rax),%rax
ffffffff802181ab:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff802181af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802181b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802181b7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802181ba:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802181be:	0f 94 c0             	sete   %al
ffffffff802181c1:	0f b6 c0             	movzbl %al,%eax
ffffffff802181c4:	48 85 c0             	test   %rax,%rax
ffffffff802181c7:	74 0c                	je     ffffffff802181d5 <_RME_Thd_Swt+0xc3>
ffffffff802181c9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802181d0:	e9 60 03 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
ffffffff802181d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802181d9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802181dd:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802181e1:	0f 95 c0             	setne  %al
ffffffff802181e4:	0f b6 c0             	movzbl %al,%eax
ffffffff802181e7:	48 85 c0             	test   %rax,%rax
ffffffff802181ea:	0f 84 4c 01 00 00    	je     ffffffff8021833c <_RME_Thd_Swt+0x22a>
ffffffff802181f0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802181f7:	e9 39 03 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
ffffffff802181fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218200:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218204:	48 89 c2             	mov    %rax,%rdx
ffffffff80218207:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021820b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021820f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218212:	0f 93 c0             	setae  %al
ffffffff80218215:	0f b6 c0             	movzbl %al,%eax
ffffffff80218218:	48 85 c0             	test   %rax,%rax
ffffffff8021821b:	74 0c                	je     ffffffff80218229 <_RME_Thd_Swt+0x117>
ffffffff8021821d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218224:	e9 0c 03 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
ffffffff80218229:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021822d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218231:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218235:	48 89 c2             	mov    %rax,%rdx
ffffffff80218238:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021823c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218240:	48 01 d0             	add    %rdx,%rax
ffffffff80218243:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218247:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021824b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021824e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80218252:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218256:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021825a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021825d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218261:	0f 94 c0             	sete   %al
ffffffff80218264:	0f b6 c0             	movzbl %al,%eax
ffffffff80218267:	48 85 c0             	test   %rax,%rax
ffffffff8021826a:	74 0c                	je     ffffffff80218278 <_RME_Thd_Swt+0x166>
ffffffff8021826c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218273:	e9 bd 02 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
ffffffff80218278:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021827c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218280:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218284:	0f 95 c0             	setne  %al
ffffffff80218287:	0f b6 c0             	movzbl %al,%eax
ffffffff8021828a:	48 85 c0             	test   %rax,%rax
ffffffff8021828d:	74 0c                	je     ffffffff8021829b <_RME_Thd_Swt+0x189>
ffffffff8021828f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218296:	e9 9a 02 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
ffffffff8021829b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021829f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802182a4:	48 89 c2             	mov    %rax,%rdx
ffffffff802182a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802182ab:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802182af:	48 39 c2             	cmp    %rax,%rdx
ffffffff802182b2:	0f 93 c0             	setae  %al
ffffffff802182b5:	0f b6 c0             	movzbl %al,%eax
ffffffff802182b8:	48 85 c0             	test   %rax,%rax
ffffffff802182bb:	74 0c                	je     ffffffff802182c9 <_RME_Thd_Swt+0x1b7>
ffffffff802182bd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802182c4:	e9 6c 02 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
ffffffff802182c9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802182cd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802182d2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802182d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802182d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802182dd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802182e1:	48 01 d0             	add    %rdx,%rax
ffffffff802182e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802182e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802182ec:	48 8b 00             	mov    (%rax),%rax
ffffffff802182ef:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff802182f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802182f7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802182fb:	0f b7 c0             	movzwl %ax,%eax
ffffffff802182fe:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218302:	0f 94 c0             	sete   %al
ffffffff80218305:	0f b6 c0             	movzbl %al,%eax
ffffffff80218308:	48 85 c0             	test   %rax,%rax
ffffffff8021830b:	74 0c                	je     ffffffff80218319 <_RME_Thd_Swt+0x207>
ffffffff8021830d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218314:	e9 1c 02 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
ffffffff80218319:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021831d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218321:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80218325:	0f 95 c0             	setne  %al
ffffffff80218328:	0f b6 c0             	movzbl %al,%eax
ffffffff8021832b:	48 85 c0             	test   %rax,%rax
ffffffff8021832e:	74 0c                	je     ffffffff8021833c <_RME_Thd_Swt+0x22a>
ffffffff80218330:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218337:	e9 f9 01 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
                       struct RME_Cap_Thd*,Thd_Cap_New,Type_Stat);
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff8021833c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218340:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218344:	25 00 01 00 00       	and    $0x100,%eax
ffffffff80218349:	48 85 c0             	test   %rax,%rax
ffffffff8021834c:	0f 94 c0             	sete   %al
ffffffff8021834f:	0f b6 c0             	movzbl %al,%eax
ffffffff80218352:	48 85 c0             	test   %rax,%rax
ffffffff80218355:	74 0c                	je     ffffffff80218363 <_RME_Thd_Swt+0x251>
ffffffff80218357:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021835e:	e9 d2 01 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
        /* See if we can do operation on this core */
        Thd_New=RME_CAP_GETOBJ(Thd_Cap_New,struct RME_Thd_Struct*);
ffffffff80218363:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218367:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021836b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        if(Thd_New->Sched.Local!=Local)
ffffffff8021836f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218373:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218377:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8021837b:	74 0c                	je     ffffffff80218389 <_RME_Thd_Swt+0x277>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff8021837d:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80218384:	e9 ac 01 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
            RME_COV_MARKER();
            /* No action required */
        }
            
        /* See if we can yield to the thread */
        if(Thd_Cur->Sched.Prio!=Thd_New->Sched.Prio)
ffffffff80218389:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021838d:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80218391:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218395:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80218399:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021839c:	74 0c                	je     ffffffff802183aa <_RME_Thd_Swt+0x298>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_PRIO;
ffffffff8021839e:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff802183a5:	e9 8b 01 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
            RME_COV_MARKER();
            /* No action required */
        }
            
        /* Check if the target thread state is valid */
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff802183aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802183ae:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802183b2:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802183b6:	74 1c                	je     ffffffff802183d4 <_RME_Thd_Swt+0x2c2>
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff802183b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802183bc:	48 8b 40 38          	mov    0x38(%rax),%rax
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff802183c0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802183c4:	74 0e                	je     ffffffff802183d4 <_RME_Thd_Swt+0x2c2>
           (Thd_New->Sched.State==RME_THD_EXCPEND))
ffffffff802183c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802183ca:	48 8b 40 38          	mov    0x38(%rax),%rax
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff802183ce:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802183d2:	75 0c                	jne    ffffffff802183e0 <_RME_Thd_Swt+0x2ce>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff802183d4:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802183db:	e9 55 01 00 00       	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* See if we need to give up all our timeslices in this yield */
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff802183e0:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff802183e5:	0f 84 00 01 00 00    	je     ffffffff802184eb <_RME_Thd_Swt+0x3d9>
ffffffff802183eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183ef:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802183f3:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff802183fa:	ff ff 7f 
ffffffff802183fd:	48 39 d0             	cmp    %rdx,%rax
ffffffff80218400:	0f 87 e5 00 00 00    	ja     ffffffff802184eb <_RME_Thd_Swt+0x3d9>
        {
            RME_COV_MARKER();
            
            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff80218406:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021840a:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218411:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80218412:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218416:	48 89 c7             	mov    %rax,%rdi
ffffffff80218419:	e8 86 aa ff ff       	call   ffffffff80212ea4 <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff8021841e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218422:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80218429:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff8021842a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021842e:	48 89 c7             	mov    %rax,%rdi
ffffffff80218431:	e8 b9 ab ff ff       	call   ffffffff80212fef <_RME_Run_Notif>
            
            /* Because we have sent a notification, we could have unblocked a
             * thread at higher priority. Additionally, if the new thread is
             * the current thread, we are forced to switch to someone else,
             * because the current thread's timeslice must be exhausted. */
            Thd_High=_RME_Run_High(Local);
ffffffff80218436:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021843a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021843d:	e8 2b ab ff ff       	call   ffffffff80212f6d <_RME_Run_High>
ffffffff80218442:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
            if((Thd_High->Sched.Prio>Thd_New->Sched.Prio)||(Thd_Cur==Thd_New))
ffffffff80218446:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021844a:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff8021844e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218452:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80218456:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218459:	77 0e                	ja     ffffffff80218469 <_RME_Thd_Swt+0x357>
ffffffff8021845b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021845f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218463:	0f 85 82 00 00 00    	jne    ffffffff802184eb <_RME_Thd_Swt+0x3d9>
            {
                RME_COV_MARKER();

                Thd_New=Thd_High;
ffffffff80218469:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021846d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218471:	eb 78                	jmp    ffffffff802184eb <_RME_Thd_Swt+0x3d9>
    else
    {
        RME_COV_MARKER();
        
        /* See if we need to give up all our timeslices in this yield */
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80218473:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80218478:	74 49                	je     ffffffff802184c3 <_RME_Thd_Swt+0x3b1>
ffffffff8021847a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021847e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218482:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80218489:	ff ff 7f 
ffffffff8021848c:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021848f:	77 32                	ja     ffffffff802184c3 <_RME_Thd_Swt+0x3b1>
        {
            RME_COV_MARKER();
            
            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff80218491:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218495:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8021849c:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff8021849d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802184a1:	48 89 c7             	mov    %rax,%rdi
ffffffff802184a4:	e8 fb a9 ff ff       	call   ffffffff80212ea4 <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff802184a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802184ad:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff802184b4:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff802184b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802184b9:	48 89 c7             	mov    %rax,%rdi
ffffffff802184bc:	e8 2e ab ff ff       	call   ffffffff80212fef <_RME_Run_Notif>
ffffffff802184c1:	eb 18                	jmp    ffffffff802184db <_RME_Thd_Swt+0x3c9>
            RME_COV_MARKER();
            
            /* This operation is just to make sure that if there are any other
             * thread at the same priority level, we're not switching to ourself */
            RME_ASSERT(Thd_Cur->Sched.State==RME_THD_READY);
            _RME_Run_Del(Thd_Cur);
ffffffff802184c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802184c7:	48 89 c7             	mov    %rax,%rdi
ffffffff802184ca:	e8 d5 a9 ff ff       	call   ffffffff80212ea4 <_RME_Run_Del>
            _RME_Run_Ins(Thd_Cur);
ffffffff802184cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802184d3:	48 89 c7             	mov    %rax,%rdi
ffffffff802184d6:	e8 16 a9 ff ff       	call   ffffffff80212df1 <_RME_Run_Ins>
        }
        
        Thd_New=_RME_Run_High(Local);
ffffffff802184db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802184df:	48 89 c7             	mov    %rax,%rdi
ffffffff802184e2:	e8 86 aa ff ff       	call   ffffffff80212f6d <_RME_Run_High>
ffffffff802184e7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Now that we are successful, save the return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);
ffffffff802184eb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802184ef:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802184f4:	48 89 c7             	mov    %rax,%rdi
ffffffff802184f7:	e8 75 ed 00 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>

    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
    /* We cannot call _RME_Kern_High because it picks some random thread. Instead,
     * we use a manual implementation that is faster than the _RME_Kern_High. */
    if(Thd_Cur==Thd_New)
ffffffff802184fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218500:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218504:	75 07                	jne    ffffffff8021850d <_RME_Thd_Swt+0x3fb>
    {
        RME_COV_MARKER();
        
        return 0;
ffffffff80218506:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021850b:	eb 28                	jmp    ffffffff80218535 <_RME_Thd_Swt+0x423>
        RME_COV_MARKER();
        /* No action required */
    }
            
    /* We have a solid context switch at this point */
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff8021850d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80218511:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80218515:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80218519:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021851c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021851f:	e8 a6 ab ff ff       	call   ffffffff802130ca <_RME_Run_Swt>
    Local->Thd_Cur=Thd_New;
ffffffff80218524:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218528:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8021852c:	48 89 50 08          	mov    %rdx,0x8(%rax)

    return 0;
ffffffff80218530:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218535:	c9                   	leave  
ffffffff80218536:	c3                   	ret    

ffffffff80218537 <_RME_Sig_Boot_Crt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Sig_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Sig)
{
ffffffff80218537:	f3 0f 1e fa          	endbr64 
ffffffff8021853b:	55                   	push   %rbp
ffffffff8021853c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021853f:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218543:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80218547:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021854b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Crt;
    struct RME_Cap_Sig* Sig_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021854f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218553:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218558:	48 85 c0             	test   %rax,%rax
ffffffff8021855b:	0f 85 98 00 00 00    	jne    ffffffff802185f9 <_RME_Sig_Boot_Crt+0xc2>
ffffffff80218561:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218565:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80218569:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021856d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218570:	0f 96 c0             	setbe  %al
ffffffff80218573:	0f b6 c0             	movzbl %al,%eax
ffffffff80218576:	48 85 c0             	test   %rax,%rax
ffffffff80218579:	74 0c                	je     ffffffff80218587 <_RME_Sig_Boot_Crt+0x50>
ffffffff8021857b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218582:	e9 aa 02 00 00       	jmp    ffffffff80218831 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff80218587:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021858b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021858f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218592:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218596:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021859a:	48 01 d0             	add    %rdx,%rax
ffffffff8021859d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802185a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802185a5:	48 8b 00             	mov    (%rax),%rax
ffffffff802185a8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802185ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802185b0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802185b4:	0f b7 c0             	movzwl %ax,%eax
ffffffff802185b7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802185bb:	0f 94 c0             	sete   %al
ffffffff802185be:	0f b6 c0             	movzbl %al,%eax
ffffffff802185c1:	48 85 c0             	test   %rax,%rax
ffffffff802185c4:	74 0c                	je     ffffffff802185d2 <_RME_Sig_Boot_Crt+0x9b>
ffffffff802185c6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802185cd:	e9 5f 02 00 00       	jmp    ffffffff80218831 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff802185d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802185d6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802185da:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802185de:	0f 95 c0             	setne  %al
ffffffff802185e1:	0f b6 c0             	movzbl %al,%eax
ffffffff802185e4:	48 85 c0             	test   %rax,%rax
ffffffff802185e7:	0f 84 4c 01 00 00    	je     ffffffff80218739 <_RME_Sig_Boot_Crt+0x202>
ffffffff802185ed:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802185f4:	e9 38 02 00 00       	jmp    ffffffff80218831 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff802185f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802185fd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218601:	48 89 c2             	mov    %rax,%rdx
ffffffff80218604:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218608:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021860c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021860f:	0f 93 c0             	setae  %al
ffffffff80218612:	0f b6 c0             	movzbl %al,%eax
ffffffff80218615:	48 85 c0             	test   %rax,%rax
ffffffff80218618:	74 0c                	je     ffffffff80218626 <_RME_Sig_Boot_Crt+0xef>
ffffffff8021861a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218621:	e9 0b 02 00 00       	jmp    ffffffff80218831 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff80218626:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021862a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021862e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218632:	48 89 c2             	mov    %rax,%rdx
ffffffff80218635:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218639:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021863d:	48 01 d0             	add    %rdx,%rax
ffffffff80218640:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218644:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218648:	48 8b 00             	mov    (%rax),%rax
ffffffff8021864b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021864f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218653:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218657:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021865a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021865e:	0f 94 c0             	sete   %al
ffffffff80218661:	0f b6 c0             	movzbl %al,%eax
ffffffff80218664:	48 85 c0             	test   %rax,%rax
ffffffff80218667:	74 0c                	je     ffffffff80218675 <_RME_Sig_Boot_Crt+0x13e>
ffffffff80218669:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218670:	e9 bc 01 00 00       	jmp    ffffffff80218831 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff80218675:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218679:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021867d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218681:	0f 95 c0             	setne  %al
ffffffff80218684:	0f b6 c0             	movzbl %al,%eax
ffffffff80218687:	48 85 c0             	test   %rax,%rax
ffffffff8021868a:	74 0c                	je     ffffffff80218698 <_RME_Sig_Boot_Crt+0x161>
ffffffff8021868c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218693:	e9 99 01 00 00       	jmp    ffffffff80218831 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff80218698:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021869c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802186a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802186a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802186a8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802186ac:	48 39 c2             	cmp    %rax,%rdx
ffffffff802186af:	0f 93 c0             	setae  %al
ffffffff802186b2:	0f b6 c0             	movzbl %al,%eax
ffffffff802186b5:	48 85 c0             	test   %rax,%rax
ffffffff802186b8:	74 0c                	je     ffffffff802186c6 <_RME_Sig_Boot_Crt+0x18f>
ffffffff802186ba:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802186c1:	e9 6b 01 00 00       	jmp    ffffffff80218831 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff802186c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802186ca:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802186cf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802186d3:	48 89 c2             	mov    %rax,%rdx
ffffffff802186d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802186da:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802186de:	48 01 d0             	add    %rdx,%rax
ffffffff802186e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802186e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802186e9:	48 8b 00             	mov    (%rax),%rax
ffffffff802186ec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802186f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802186f4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802186f8:	0f b7 c0             	movzwl %ax,%eax
ffffffff802186fb:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802186ff:	0f 94 c0             	sete   %al
ffffffff80218702:	0f b6 c0             	movzbl %al,%eax
ffffffff80218705:	48 85 c0             	test   %rax,%rax
ffffffff80218708:	74 0c                	je     ffffffff80218716 <_RME_Sig_Boot_Crt+0x1df>
ffffffff8021870a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218711:	e9 1b 01 00 00       	jmp    ffffffff80218831 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff80218716:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021871a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021871e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218722:	0f 95 c0             	setne  %al
ffffffff80218725:	0f b6 c0             	movzbl %al,%eax
ffffffff80218728:	48 85 c0             	test   %rax,%rax
ffffffff8021872b:	74 0c                	je     ffffffff80218739 <_RME_Sig_Boot_Crt+0x202>
ffffffff8021872d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218734:	e9 f8 00 00 00       	jmp    ffffffff80218831 <_RME_Sig_Boot_Crt+0x2fa>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80218739:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021873d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218741:	83 e0 01             	and    $0x1,%eax
ffffffff80218744:	48 85 c0             	test   %rax,%rax
ffffffff80218747:	0f 94 c0             	sete   %al
ffffffff8021874a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021874d:	48 85 c0             	test   %rax,%rax
ffffffff80218750:	74 0c                	je     ffffffff8021875e <_RME_Sig_Boot_Crt+0x227>
ffffffff80218752:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218759:	e9 d3 00 00 00       	jmp    ffffffff80218831 <_RME_Sig_Boot_Crt+0x2fa>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff8021875e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218762:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80218766:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021876a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021876d:	0f 96 c0             	setbe  %al
ffffffff80218770:	0f b6 c0             	movzbl %al,%eax
ffffffff80218773:	48 85 c0             	test   %rax,%rax
ffffffff80218776:	74 0c                	je     ffffffff80218784 <_RME_Sig_Boot_Crt+0x24d>
ffffffff80218778:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021877f:	e9 ad 00 00 00       	jmp    ffffffff80218831 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff80218784:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218788:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021878c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021878f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218793:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218797:	48 01 d0             	add    %rdx,%rax
ffffffff8021879a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff8021879e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802187a2:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802187a9:	00 00 00 
ffffffff802187ac:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802187b1:	48 89 c7             	mov    %rax,%rdi
ffffffff802187b4:	e8 a5 3f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802187b9:	48 85 c0             	test   %rax,%rax
ffffffff802187bc:	0f 94 c0             	sete   %al
ffffffff802187bf:	0f b6 c0             	movzbl %al,%eax
ffffffff802187c2:	48 85 c0             	test   %rax,%rax
ffffffff802187c5:	74 09                	je     ffffffff802187d0 <_RME_Sig_Boot_Crt+0x299>
ffffffff802187c7:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff802187ce:	eb 61                	jmp    ffffffff80218831 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff802187d0:	48 8b 15 29 28 01 00 	mov    0x12829(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff802187d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802187db:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Header init */
    Sig_Crt->Head.Root_Ref=1U;
ffffffff802187df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802187e3:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff802187ea:	00 
    Sig_Crt->Head.Object=0U;
ffffffff802187eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802187ef:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff802187f6:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff802187f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802187fb:	48 c7 40 10 3f 00 00 	movq   $0x3f,0x10(%rax)
ffffffff80218802:	00 
    
    /* Info init */
    Sig_Crt->Sig_Num=0U;
ffffffff80218803:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218807:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
ffffffff8021880e:	00 
    Sig_Crt->Thd=RME_NULL;
ffffffff8021880f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218813:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8021881a:	00 

    /* Establish cap */
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff8021881b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021881f:	48 b9 00 00 00 00 00 	movabs $0x8000000000000,%rcx
ffffffff80218826:	00 08 00 
ffffffff80218829:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_SIG,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8021882c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218831:	c9                   	leave  
ffffffff80218832:	c3                   	ret    

ffffffff80218833 <_RME_Sig_Crt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Crt(struct RME_Cap_Cpt *Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Sig)
{
ffffffff80218833:	f3 0f 1e fa          	endbr64 
ffffffff80218837:	55                   	push   %rbp
ffffffff80218838:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021883b:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8021883f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80218843:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80218847:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Sig* Sig_Crt;
    rme_ptr_t Type_Stat;
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021884b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021884f:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218854:	48 85 c0             	test   %rax,%rax
ffffffff80218857:	0f 85 98 00 00 00    	jne    ffffffff802188f5 <_RME_Sig_Crt+0xc2>
ffffffff8021885d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218861:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80218865:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218869:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021886c:	0f 96 c0             	setbe  %al
ffffffff8021886f:	0f b6 c0             	movzbl %al,%eax
ffffffff80218872:	48 85 c0             	test   %rax,%rax
ffffffff80218875:	74 0c                	je     ffffffff80218883 <_RME_Sig_Crt+0x50>
ffffffff80218877:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021887e:	e9 aa 02 00 00       	jmp    ffffffff80218b2d <_RME_Sig_Crt+0x2fa>
ffffffff80218883:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218887:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021888b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021888e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218892:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218896:	48 01 d0             	add    %rdx,%rax
ffffffff80218899:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021889d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802188a1:	48 8b 00             	mov    (%rax),%rax
ffffffff802188a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802188a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802188ac:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802188b0:	0f b7 c0             	movzwl %ax,%eax
ffffffff802188b3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802188b7:	0f 94 c0             	sete   %al
ffffffff802188ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802188bd:	48 85 c0             	test   %rax,%rax
ffffffff802188c0:	74 0c                	je     ffffffff802188ce <_RME_Sig_Crt+0x9b>
ffffffff802188c2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802188c9:	e9 5f 02 00 00       	jmp    ffffffff80218b2d <_RME_Sig_Crt+0x2fa>
ffffffff802188ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802188d2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802188d6:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802188da:	0f 95 c0             	setne  %al
ffffffff802188dd:	0f b6 c0             	movzbl %al,%eax
ffffffff802188e0:	48 85 c0             	test   %rax,%rax
ffffffff802188e3:	0f 84 4c 01 00 00    	je     ffffffff80218a35 <_RME_Sig_Crt+0x202>
ffffffff802188e9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802188f0:	e9 38 02 00 00       	jmp    ffffffff80218b2d <_RME_Sig_Crt+0x2fa>
ffffffff802188f5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802188f9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802188fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80218900:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218904:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218908:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021890b:	0f 93 c0             	setae  %al
ffffffff8021890e:	0f b6 c0             	movzbl %al,%eax
ffffffff80218911:	48 85 c0             	test   %rax,%rax
ffffffff80218914:	74 0c                	je     ffffffff80218922 <_RME_Sig_Crt+0xef>
ffffffff80218916:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021891d:	e9 0b 02 00 00       	jmp    ffffffff80218b2d <_RME_Sig_Crt+0x2fa>
ffffffff80218922:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218926:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021892a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021892e:	48 89 c2             	mov    %rax,%rdx
ffffffff80218931:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218935:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218939:	48 01 d0             	add    %rdx,%rax
ffffffff8021893c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218940:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218944:	48 8b 00             	mov    (%rax),%rax
ffffffff80218947:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021894b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021894f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218953:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218956:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021895a:	0f 94 c0             	sete   %al
ffffffff8021895d:	0f b6 c0             	movzbl %al,%eax
ffffffff80218960:	48 85 c0             	test   %rax,%rax
ffffffff80218963:	74 0c                	je     ffffffff80218971 <_RME_Sig_Crt+0x13e>
ffffffff80218965:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021896c:	e9 bc 01 00 00       	jmp    ffffffff80218b2d <_RME_Sig_Crt+0x2fa>
ffffffff80218971:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218975:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218979:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021897d:	0f 95 c0             	setne  %al
ffffffff80218980:	0f b6 c0             	movzbl %al,%eax
ffffffff80218983:	48 85 c0             	test   %rax,%rax
ffffffff80218986:	74 0c                	je     ffffffff80218994 <_RME_Sig_Crt+0x161>
ffffffff80218988:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021898f:	e9 99 01 00 00       	jmp    ffffffff80218b2d <_RME_Sig_Crt+0x2fa>
ffffffff80218994:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218998:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021899d:	48 89 c2             	mov    %rax,%rdx
ffffffff802189a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802189a4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802189a8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802189ab:	0f 93 c0             	setae  %al
ffffffff802189ae:	0f b6 c0             	movzbl %al,%eax
ffffffff802189b1:	48 85 c0             	test   %rax,%rax
ffffffff802189b4:	74 0c                	je     ffffffff802189c2 <_RME_Sig_Crt+0x18f>
ffffffff802189b6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802189bd:	e9 6b 01 00 00       	jmp    ffffffff80218b2d <_RME_Sig_Crt+0x2fa>
ffffffff802189c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802189c6:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802189cb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802189cf:	48 89 c2             	mov    %rax,%rdx
ffffffff802189d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802189d6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802189da:	48 01 d0             	add    %rdx,%rax
ffffffff802189dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802189e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802189e5:	48 8b 00             	mov    (%rax),%rax
ffffffff802189e8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802189ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802189f0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802189f4:	0f b7 c0             	movzwl %ax,%eax
ffffffff802189f7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802189fb:	0f 94 c0             	sete   %al
ffffffff802189fe:	0f b6 c0             	movzbl %al,%eax
ffffffff80218a01:	48 85 c0             	test   %rax,%rax
ffffffff80218a04:	74 0c                	je     ffffffff80218a12 <_RME_Sig_Crt+0x1df>
ffffffff80218a06:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218a0d:	e9 1b 01 00 00       	jmp    ffffffff80218b2d <_RME_Sig_Crt+0x2fa>
ffffffff80218a12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218a16:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218a1a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218a1e:	0f 95 c0             	setne  %al
ffffffff80218a21:	0f b6 c0             	movzbl %al,%eax
ffffffff80218a24:	48 85 c0             	test   %rax,%rax
ffffffff80218a27:	74 0c                	je     ffffffff80218a35 <_RME_Sig_Crt+0x202>
ffffffff80218a29:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218a30:	e9 f8 00 00 00       	jmp    ffffffff80218b2d <_RME_Sig_Crt+0x2fa>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80218a35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218a39:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218a3d:	83 e0 01             	and    $0x1,%eax
ffffffff80218a40:	48 85 c0             	test   %rax,%rax
ffffffff80218a43:	0f 94 c0             	sete   %al
ffffffff80218a46:	0f b6 c0             	movzbl %al,%eax
ffffffff80218a49:	48 85 c0             	test   %rax,%rax
ffffffff80218a4c:	74 0c                	je     ffffffff80218a5a <_RME_Sig_Crt+0x227>
ffffffff80218a4e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218a55:	e9 d3 00 00 00       	jmp    ffffffff80218b2d <_RME_Sig_Crt+0x2fa>
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80218a5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218a5e:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80218a62:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218a66:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218a69:	0f 96 c0             	setbe  %al
ffffffff80218a6c:	0f b6 c0             	movzbl %al,%eax
ffffffff80218a6f:	48 85 c0             	test   %rax,%rax
ffffffff80218a72:	74 0c                	je     ffffffff80218a80 <_RME_Sig_Crt+0x24d>
ffffffff80218a74:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218a7b:	e9 ad 00 00 00       	jmp    ffffffff80218b2d <_RME_Sig_Crt+0x2fa>
ffffffff80218a80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218a84:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218a88:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218a8f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218a93:	48 01 d0             	add    %rdx,%rax
ffffffff80218a96:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80218a9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a9e:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80218aa5:	00 00 00 
ffffffff80218aa8:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80218aad:	48 89 c7             	mov    %rax,%rdi
ffffffff80218ab0:	e8 a9 3c ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80218ab5:	48 85 c0             	test   %rax,%rax
ffffffff80218ab8:	0f 94 c0             	sete   %al
ffffffff80218abb:	0f b6 c0             	movzbl %al,%eax
ffffffff80218abe:	48 85 c0             	test   %rax,%rax
ffffffff80218ac1:	74 09                	je     ffffffff80218acc <_RME_Sig_Crt+0x299>
ffffffff80218ac3:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80218aca:	eb 61                	jmp    ffffffff80218b2d <_RME_Sig_Crt+0x2fa>
ffffffff80218acc:	48 8b 15 2d 25 01 00 	mov    0x1252d(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff80218ad3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218ad7:	48 89 50 20          	mov    %rdx,0x20(%rax)
    /* Header init */
    Sig_Crt->Head.Root_Ref=0U;
ffffffff80218adb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218adf:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80218ae6:	00 
    Sig_Crt->Head.Object=0U;
ffffffff80218ae7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218aeb:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80218af2:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff80218af3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218af7:	48 c7 40 10 3f 00 00 	movq   $0x3f,0x10(%rax)
ffffffff80218afe:	00 
    
    /* Info init */
    Sig_Crt->Sig_Num=0U;
ffffffff80218aff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218b03:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
ffffffff80218b0a:	00 
    Sig_Crt->Thd=0U;
ffffffff80218b0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218b0f:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218b16:	00 
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80218b17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218b1b:	48 b9 00 00 00 00 00 	movabs $0x8000000000000,%rcx
ffffffff80218b22:	00 08 00 
ffffffff80218b25:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_SIG,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80218b28:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218b2d:	c9                   	leave  
ffffffff80218b2e:	c3                   	ret    

ffffffff80218b2f <_RME_Sig_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Sig)
{
ffffffff80218b2f:	f3 0f 1e fa          	endbr64 
ffffffff80218b33:	55                   	push   %rbp
ffffffff80218b34:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218b37:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218b3b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80218b3f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80218b43:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Sig* Sig_Del;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80218b47:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218b4b:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218b50:	48 85 c0             	test   %rax,%rax
ffffffff80218b53:	0f 85 98 00 00 00    	jne    ffffffff80218bf1 <_RME_Sig_Del+0xc2>
ffffffff80218b59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218b5d:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80218b61:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218b65:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218b68:	0f 96 c0             	setbe  %al
ffffffff80218b6b:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b6e:	48 85 c0             	test   %rax,%rax
ffffffff80218b71:	74 0c                	je     ffffffff80218b7f <_RME_Sig_Del+0x50>
ffffffff80218b73:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218b7a:	e9 62 03 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
ffffffff80218b7f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218b83:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218b87:	48 89 c2             	mov    %rax,%rdx
ffffffff80218b8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218b8e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218b92:	48 01 d0             	add    %rdx,%rax
ffffffff80218b95:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218b9d:	48 8b 00             	mov    (%rax),%rax
ffffffff80218ba0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218ba4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218ba8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218bac:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218baf:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218bb3:	0f 94 c0             	sete   %al
ffffffff80218bb6:	0f b6 c0             	movzbl %al,%eax
ffffffff80218bb9:	48 85 c0             	test   %rax,%rax
ffffffff80218bbc:	74 0c                	je     ffffffff80218bca <_RME_Sig_Del+0x9b>
ffffffff80218bbe:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218bc5:	e9 17 03 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
ffffffff80218bca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218bce:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218bd2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218bd6:	0f 95 c0             	setne  %al
ffffffff80218bd9:	0f b6 c0             	movzbl %al,%eax
ffffffff80218bdc:	48 85 c0             	test   %rax,%rax
ffffffff80218bdf:	0f 84 4c 01 00 00    	je     ffffffff80218d31 <_RME_Sig_Del+0x202>
ffffffff80218be5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218bec:	e9 f0 02 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
ffffffff80218bf1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218bf5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218bf9:	48 89 c2             	mov    %rax,%rdx
ffffffff80218bfc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218c00:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218c04:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218c07:	0f 93 c0             	setae  %al
ffffffff80218c0a:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c0d:	48 85 c0             	test   %rax,%rax
ffffffff80218c10:	74 0c                	je     ffffffff80218c1e <_RME_Sig_Del+0xef>
ffffffff80218c12:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218c19:	e9 c3 02 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
ffffffff80218c1e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218c22:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218c26:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218c2a:	48 89 c2             	mov    %rax,%rdx
ffffffff80218c2d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218c31:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218c35:	48 01 d0             	add    %rdx,%rax
ffffffff80218c38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218c3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218c40:	48 8b 00             	mov    (%rax),%rax
ffffffff80218c43:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218c47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218c4b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218c4f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218c52:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218c56:	0f 94 c0             	sete   %al
ffffffff80218c59:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c5c:	48 85 c0             	test   %rax,%rax
ffffffff80218c5f:	74 0c                	je     ffffffff80218c6d <_RME_Sig_Del+0x13e>
ffffffff80218c61:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218c68:	e9 74 02 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
ffffffff80218c6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218c71:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218c75:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218c79:	0f 95 c0             	setne  %al
ffffffff80218c7c:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c7f:	48 85 c0             	test   %rax,%rax
ffffffff80218c82:	74 0c                	je     ffffffff80218c90 <_RME_Sig_Del+0x161>
ffffffff80218c84:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218c8b:	e9 51 02 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
ffffffff80218c90:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218c94:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218c99:	48 89 c2             	mov    %rax,%rdx
ffffffff80218c9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218ca0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218ca4:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218ca7:	0f 93 c0             	setae  %al
ffffffff80218caa:	0f b6 c0             	movzbl %al,%eax
ffffffff80218cad:	48 85 c0             	test   %rax,%rax
ffffffff80218cb0:	74 0c                	je     ffffffff80218cbe <_RME_Sig_Del+0x18f>
ffffffff80218cb2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218cb9:	e9 23 02 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
ffffffff80218cbe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218cc2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218cc7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218ccb:	48 89 c2             	mov    %rax,%rdx
ffffffff80218cce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218cd2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218cd6:	48 01 d0             	add    %rdx,%rax
ffffffff80218cd9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218cdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218ce1:	48 8b 00             	mov    (%rax),%rax
ffffffff80218ce4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218ce8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218cec:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218cf0:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218cf3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218cf7:	0f 94 c0             	sete   %al
ffffffff80218cfa:	0f b6 c0             	movzbl %al,%eax
ffffffff80218cfd:	48 85 c0             	test   %rax,%rax
ffffffff80218d00:	74 0c                	je     ffffffff80218d0e <_RME_Sig_Del+0x1df>
ffffffff80218d02:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218d09:	e9 d3 01 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
ffffffff80218d0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218d12:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218d16:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218d1a:	0f 95 c0             	setne  %al
ffffffff80218d1d:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d20:	48 85 c0             	test   %rax,%rax
ffffffff80218d23:	74 0c                	je     ffffffff80218d31 <_RME_Sig_Del+0x202>
ffffffff80218d25:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218d2c:	e9 b0 01 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80218d31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218d35:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218d39:	83 e0 02             	and    $0x2,%eax
ffffffff80218d3c:	48 85 c0             	test   %rax,%rax
ffffffff80218d3f:	0f 94 c0             	sete   %al
ffffffff80218d42:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d45:	48 85 c0             	test   %rax,%rax
ffffffff80218d48:	74 0c                	je     ffffffff80218d56 <_RME_Sig_Del+0x227>
ffffffff80218d4a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218d51:	e9 8b 01 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff80218d56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218d5a:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80218d5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218d62:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218d65:	0f 96 c0             	setbe  %al
ffffffff80218d68:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d6b:	48 85 c0             	test   %rax,%rax
ffffffff80218d6e:	74 0c                	je     ffffffff80218d7c <_RME_Sig_Del+0x24d>
ffffffff80218d70:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218d77:	e9 65 01 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
ffffffff80218d7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218d80:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218d84:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218d8b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218d8f:	48 01 d0             	add    %rdx,%rax
ffffffff80218d92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80218d96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218d9a:	48 8b 00             	mov    (%rax),%rax
ffffffff80218d9d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218da1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218da5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218da9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218dac:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218db0:	0f 95 c0             	setne  %al
ffffffff80218db3:	0f b6 c0             	movzbl %al,%eax
ffffffff80218db6:	48 85 c0             	test   %rax,%rax
ffffffff80218db9:	74 0c                	je     ffffffff80218dc7 <_RME_Sig_Del+0x298>
ffffffff80218dbb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218dc2:	e9 1a 01 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
ffffffff80218dc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218dcb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218dcf:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80218dd3:	0f 95 c0             	setne  %al
ffffffff80218dd6:	0f b6 c0             	movzbl %al,%eax
ffffffff80218dd9:	48 85 c0             	test   %rax,%rax
ffffffff80218ddc:	74 0c                	je     ffffffff80218dea <_RME_Sig_Del+0x2bb>
ffffffff80218dde:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218de5:	e9 f7 00 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
ffffffff80218dea:	48 8b 15 0f 22 01 00 	mov    0x1220f(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff80218df1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218df5:	48 8b 48 20          	mov    0x20(%rax),%rcx
ffffffff80218df9:	48 89 d0             	mov    %rdx,%rax
ffffffff80218dfc:	48 29 c8             	sub    %rcx,%rax
ffffffff80218dff:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80218e03:	0f 96 c0             	setbe  %al
ffffffff80218e06:	0f b6 c0             	movzbl %al,%eax
ffffffff80218e09:	48 98                	cltq   
ffffffff80218e0b:	48 85 c0             	test   %rax,%rax
ffffffff80218e0e:	74 0c                	je     ffffffff80218e1c <_RME_Sig_Del+0x2ed>
ffffffff80218e10:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80218e17:	e9 c5 00 00 00       	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
ffffffff80218e1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218e20:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218e24:	48 85 c0             	test   %rax,%rax
ffffffff80218e27:	0f 95 c0             	setne  %al
ffffffff80218e2a:	0f b6 c0             	movzbl %al,%eax
ffffffff80218e2d:	48 85 c0             	test   %rax,%rax
ffffffff80218e30:	74 41                	je     ffffffff80218e73 <_RME_Sig_Del+0x344>
ffffffff80218e32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218e36:	89 c0                	mov    %eax,%eax
ffffffff80218e38:	48 85 c0             	test   %rax,%rax
ffffffff80218e3b:	0f 94 c0             	sete   %al
ffffffff80218e3e:	0f b6 c0             	movzbl %al,%eax
ffffffff80218e41:	48 85 c0             	test   %rax,%rax
ffffffff80218e44:	74 24                	je     ffffffff80218e6a <_RME_Sig_Del+0x33b>
ffffffff80218e46:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80218e4d:	00 ff ff 
ffffffff80218e50:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80218e54:	48 89 c2             	mov    %rax,%rdx
ffffffff80218e57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218e5b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218e5f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218e62:	48 89 c7             	mov    %rax,%rdi
ffffffff80218e65:	e8 f4 38 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80218e6a:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80218e71:	eb 6e                	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>

    /* Check if the signal endpoint is currently used and cannot be deleted */
    if(Sig_Del->Thd!=(void*)0U)
ffffffff80218e73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218e77:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218e7b:	48 85 c0             	test   %rax,%rax
ffffffff80218e7e:	74 2d                	je     ffffffff80218ead <_RME_Sig_Del+0x37e>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Sig_Del,Type_Stat);
ffffffff80218e80:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80218e87:	00 ff ff 
ffffffff80218e8a:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80218e8e:	48 89 c2             	mov    %rax,%rdx
ffffffff80218e91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218e95:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218e99:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218e9c:	48 89 c7             	mov    %rax,%rdi
ffffffff80218e9f:	e8 ba 38 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_SIV_ACT;
ffffffff80218ea4:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff80218eab:	eb 34                	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Sig_Del,Type_Stat);
ffffffff80218ead:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218eb1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218eb5:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80218eba:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218ebd:	48 89 c7             	mov    %rax,%rdi
ffffffff80218ec0:	e8 99 38 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80218ec5:	48 85 c0             	test   %rax,%rax
ffffffff80218ec8:	0f 94 c0             	sete   %al
ffffffff80218ecb:	0f b6 c0             	movzbl %al,%eax
ffffffff80218ece:	48 85 c0             	test   %rax,%rax
ffffffff80218ed1:	74 09                	je     ffffffff80218edc <_RME_Sig_Del+0x3ad>
ffffffff80218ed3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80218eda:	eb 05                	jmp    ffffffff80218ee1 <_RME_Sig_Del+0x3b2>
    
    return 0;
ffffffff80218edc:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218ee1:	c9                   	leave  
ffffffff80218ee2:	c3                   	ret    

ffffffff80218ee3 <_RME_Kern_High>:
Output      : volatile struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Kern_High(struct RME_Reg_Struct* Reg,
                    struct RME_CPU_Local* Local)
{
ffffffff80218ee3:	f3 0f 1e fa          	endbr64 
ffffffff80218ee7:	55                   	push   %rbp
ffffffff80218ee8:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218eeb:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80218eef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80218ef3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct RME_Thd_Struct* Thd_New;
    struct RME_Thd_Struct* Thd_Cur;

    Thd_New=_RME_Run_High(Local);
ffffffff80218ef7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218efb:	48 89 c7             	mov    %rax,%rdi
ffffffff80218efe:	e8 6a a0 ff ff       	call   ffffffff80212f6d <_RME_Run_High>
ffffffff80218f03:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_ASSERT(Thd_New!=(void*)RME_NULL);
    Thd_Cur=Local->Thd_Cur;
ffffffff80218f07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f0b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218f0f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Are these two threads the same? */
    if(Thd_New==Thd_Cur)
ffffffff80218f13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218f17:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218f1b:	74 47                	je     ffffffff80218f64 <_RME_Kern_High+0x81>
        /* No action required */
    }

    /* Check if we need to do the context switch regardless of priority
     * because the current thread is not ready yet. */
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff80218f1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218f21:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80218f25:	48 85 c0             	test   %rax,%rax
ffffffff80218f28:	75 15                	jne    ffffffff80218f3f <_RME_Kern_High+0x5c>
    {
        RME_COV_MARKER();

        /* Check priority to see if the switch is necessary */
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff80218f2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218f2e:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80218f32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218f36:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80218f3a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218f3d:	76 28                	jbe    ffffffff80218f67 <_RME_Kern_High+0x84>
    }

    /* We will have a solid context switch on this point. The current 
     * thread is not necessarily READY, it could be EXCPEND as well. */
    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff80218f3f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80218f43:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218f47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218f4b:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218f4e:	48 89 c7             	mov    %rax,%rdi
ffffffff80218f51:	e8 74 a1 ff ff       	call   ffffffff802130ca <_RME_Run_Swt>
    Local->Thd_Cur=Thd_New;
ffffffff80218f56:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f5a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80218f5e:	48 89 50 08          	mov    %rdx,0x8(%rax)
ffffffff80218f62:	eb 04                	jmp    ffffffff80218f68 <_RME_Kern_High+0x85>
        return;
ffffffff80218f64:	90                   	nop
ffffffff80218f65:	eb 01                	jmp    ffffffff80218f68 <_RME_Kern_High+0x85>
            return;
ffffffff80218f67:	90                   	nop
}
ffffffff80218f68:	c9                   	leave  
ffffffff80218f69:	c3                   	ret    

ffffffff80218f6a <_RME_Kern_Snd>:
Input       : struct RME_Cap_Sig* Cap_Sig - The signal root capability.
Output      : None.
Return      : rme_ret_t - If successful, 0, or an error code.
******************************************************************************/
rme_ret_t _RME_Kern_Snd(struct RME_Cap_Sig* Cap_Sig)
{
ffffffff80218f6a:	f3 0f 1e fa          	endbr64 
ffffffff80218f6e:	55                   	push   %rbp
ffffffff80218f6f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218f72:	53                   	push   %rbx
ffffffff80218f73:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80218f77:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    rme_ptr_t Unblock;
    struct RME_Thd_Struct* Thd_Sig;
    
    Thd_Sig=Cap_Sig->Thd;
ffffffff80218f7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218f7f:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218f83:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* If and only if we are calling from the same core do we unblock */
    if(Thd_Sig!=(void*)RME_NULL)
ffffffff80218f87:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80218f8c:	74 26                	je     ffffffff80218fb4 <_RME_Kern_Snd+0x4a>
    {
        RME_COV_MARKER();

        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff80218f8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f92:	48 8b 58 28          	mov    0x28(%rax),%rbx
ffffffff80218f96:	e8 a4 28 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80218f9b:	48 39 c3             	cmp    %rax,%rbx
ffffffff80218f9e:	75 0a                	jne    ffffffff80218faa <_RME_Kern_Snd+0x40>
        {
            RME_COV_MARKER();

            Unblock=1U;
ffffffff80218fa0:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
ffffffff80218fa7:	00 
ffffffff80218fa8:	eb 12                	jmp    ffffffff80218fbc <_RME_Kern_Snd+0x52>
        }
        else
        {
            RME_COV_MARKER();

            Unblock=0U;
ffffffff80218faa:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80218fb1:	00 
ffffffff80218fb2:	eb 08                	jmp    ffffffff80218fbc <_RME_Kern_Snd+0x52>
    }
    else
    {
        RME_COV_MARKER();

        Unblock=0U;
ffffffff80218fb4:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80218fbb:	00 
    }

    if(Unblock!=0U)
ffffffff80218fbc:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80218fc1:	74 65                	je     ffffffff80219028 <_RME_Kern_Snd+0xbe>

        /* The thread is blocked, and it is on our core. Unblock it, and
         * set the return value to one as always, Even if we were specifying
         * multi-receive. This is because other cores may reduce the count
         * to zero while we are doing this. */
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff80218fc3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218fc7:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80218fce:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80218fd3:	48 89 c7             	mov    %rax,%rdi
ffffffff80218fd6:	e8 96 e2 00 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
        
        /* See if the thread still have time left */
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff80218fdb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218fdf:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218fe3:	48 85 c0             	test   %rax,%rax
ffffffff80218fe6:	74 1a                	je     ffffffff80219002 <_RME_Kern_Snd+0x98>
        {
            RME_COV_MARKER();

            /* Ready and add to runqueue */
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff80218fe8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218fec:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80218ff3:	00 
            _RME_Run_Ins(Thd_Sig);
ffffffff80218ff4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218ff8:	48 89 c7             	mov    %rax,%rdi
ffffffff80218ffb:	e8 f1 9d ff ff       	call   ffffffff80212df1 <_RME_Run_Ins>
ffffffff80219000:	eb 18                	jmp    ffffffff8021901a <_RME_Kern_Snd+0xb0>
        else
        {
            RME_COV_MARKER();

            /* Timeout and notify parent */
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff80219002:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219006:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8021900d:	00 
            _RME_Run_Notif(Thd_Sig);
ffffffff8021900e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219012:	48 89 c7             	mov    %rax,%rdi
ffffffff80219015:	e8 d5 9f ff ff       	call   ffffffff80212fef <_RME_Run_Notif>
         * we hope to perform the context switch only once when exiting that
         * handler. Also note that the current thread could be EXCPEND as well;
         * this is different from the normal signal sending system call. */
        
        /* Clear endpoint blocking status - no write release required */
        Cap_Sig->Thd=RME_NULL;
ffffffff8021901a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021901e:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80219025:	00 
ffffffff80219026:	eb 44                	jmp    ffffffff8021906c <_RME_Kern_Snd+0x102>
    {
        RME_COV_MARKER();

        /* The guy who blocked on it is not on our core, or nobody blocked.
         * We just faa the counter value and return. */
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80219028:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021902c:	48 83 c0 28          	add    $0x28,%rax
ffffffff80219030:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219035:	48 89 c7             	mov    %rax,%rdi
ffffffff80219038:	e8 56 37 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff8021903d:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80219044:	ff ff 7f 
ffffffff80219047:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021904a:	76 20                	jbe    ffffffff8021906c <_RME_Kern_Snd+0x102>
        {
            RME_COV_MARKER();

            RME_FETCH_ADD(&(Cap_Sig->Sig_Num),-1);
ffffffff8021904c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219050:	48 83 c0 28          	add    $0x28,%rax
ffffffff80219054:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021905b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021905e:	e8 30 37 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
            return RME_ERR_SIV_FULL;
ffffffff80219063:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff8021906a:	eb 05                	jmp    ffffffff80219071 <_RME_Kern_Snd+0x107>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff8021906c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80219071:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff80219075:	c9                   	leave  
ffffffff80219076:	c3                   	ret    

ffffffff80219077 <_RME_Sig_Snd>:
Return      : rme_ret_t - If successful, 0, or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Snd(struct RME_Cap_Cpt* Cpt, 
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Sig)
{
ffffffff80219077:	f3 0f 1e fa          	endbr64 
ffffffff8021907b:	55                   	push   %rbp
ffffffff8021907c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021907f:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80219083:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80219087:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021908b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    struct RME_CPU_Local* Local;
    rme_ptr_t Unblock;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8021908f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219093:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219098:	48 85 c0             	test   %rax,%rax
ffffffff8021909b:	0f 85 98 00 00 00    	jne    ffffffff80219139 <_RME_Sig_Snd+0xc2>
ffffffff802190a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802190a5:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802190a9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802190ad:	48 39 c2             	cmp    %rax,%rdx
ffffffff802190b0:	0f 96 c0             	setbe  %al
ffffffff802190b3:	0f b6 c0             	movzbl %al,%eax
ffffffff802190b6:	48 85 c0             	test   %rax,%rax
ffffffff802190b9:	74 0c                	je     ffffffff802190c7 <_RME_Sig_Snd+0x50>
ffffffff802190bb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802190c2:	e9 2b 03 00 00       	jmp    ffffffff802193f2 <_RME_Sig_Snd+0x37b>
ffffffff802190c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802190cb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802190cf:	48 89 c2             	mov    %rax,%rdx
ffffffff802190d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802190d6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802190da:	48 01 d0             	add    %rdx,%rax
ffffffff802190dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802190e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802190e5:	48 8b 00             	mov    (%rax),%rax
ffffffff802190e8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802190ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802190f0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802190f4:	0f b7 c0             	movzwl %ax,%eax
ffffffff802190f7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802190fb:	0f 94 c0             	sete   %al
ffffffff802190fe:	0f b6 c0             	movzbl %al,%eax
ffffffff80219101:	48 85 c0             	test   %rax,%rax
ffffffff80219104:	74 0c                	je     ffffffff80219112 <_RME_Sig_Snd+0x9b>
ffffffff80219106:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021910d:	e9 e0 02 00 00       	jmp    ffffffff802193f2 <_RME_Sig_Snd+0x37b>
ffffffff80219112:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219116:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021911a:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff8021911e:	0f 95 c0             	setne  %al
ffffffff80219121:	0f b6 c0             	movzbl %al,%eax
ffffffff80219124:	48 85 c0             	test   %rax,%rax
ffffffff80219127:	0f 84 4c 01 00 00    	je     ffffffff80219279 <_RME_Sig_Snd+0x202>
ffffffff8021912d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219134:	e9 b9 02 00 00       	jmp    ffffffff802193f2 <_RME_Sig_Snd+0x37b>
ffffffff80219139:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021913d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219141:	48 89 c2             	mov    %rax,%rdx
ffffffff80219144:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219148:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021914c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021914f:	0f 93 c0             	setae  %al
ffffffff80219152:	0f b6 c0             	movzbl %al,%eax
ffffffff80219155:	48 85 c0             	test   %rax,%rax
ffffffff80219158:	74 0c                	je     ffffffff80219166 <_RME_Sig_Snd+0xef>
ffffffff8021915a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219161:	e9 8c 02 00 00       	jmp    ffffffff802193f2 <_RME_Sig_Snd+0x37b>
ffffffff80219166:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021916a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021916e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219172:	48 89 c2             	mov    %rax,%rdx
ffffffff80219175:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219179:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021917d:	48 01 d0             	add    %rdx,%rax
ffffffff80219180:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219184:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219188:	48 8b 00             	mov    (%rax),%rax
ffffffff8021918b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021918f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219193:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219197:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021919a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021919e:	0f 94 c0             	sete   %al
ffffffff802191a1:	0f b6 c0             	movzbl %al,%eax
ffffffff802191a4:	48 85 c0             	test   %rax,%rax
ffffffff802191a7:	74 0c                	je     ffffffff802191b5 <_RME_Sig_Snd+0x13e>
ffffffff802191a9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802191b0:	e9 3d 02 00 00       	jmp    ffffffff802193f2 <_RME_Sig_Snd+0x37b>
ffffffff802191b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802191b9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802191bd:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802191c1:	0f 95 c0             	setne  %al
ffffffff802191c4:	0f b6 c0             	movzbl %al,%eax
ffffffff802191c7:	48 85 c0             	test   %rax,%rax
ffffffff802191ca:	74 0c                	je     ffffffff802191d8 <_RME_Sig_Snd+0x161>
ffffffff802191cc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802191d3:	e9 1a 02 00 00       	jmp    ffffffff802193f2 <_RME_Sig_Snd+0x37b>
ffffffff802191d8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802191dc:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802191e1:	48 89 c2             	mov    %rax,%rdx
ffffffff802191e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802191e8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802191ec:	48 39 c2             	cmp    %rax,%rdx
ffffffff802191ef:	0f 93 c0             	setae  %al
ffffffff802191f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802191f5:	48 85 c0             	test   %rax,%rax
ffffffff802191f8:	74 0c                	je     ffffffff80219206 <_RME_Sig_Snd+0x18f>
ffffffff802191fa:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219201:	e9 ec 01 00 00       	jmp    ffffffff802193f2 <_RME_Sig_Snd+0x37b>
ffffffff80219206:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021920a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021920f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219213:	48 89 c2             	mov    %rax,%rdx
ffffffff80219216:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021921a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021921e:	48 01 d0             	add    %rdx,%rax
ffffffff80219221:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219225:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219229:	48 8b 00             	mov    (%rax),%rax
ffffffff8021922c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219230:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219234:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219238:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021923b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021923f:	0f 94 c0             	sete   %al
ffffffff80219242:	0f b6 c0             	movzbl %al,%eax
ffffffff80219245:	48 85 c0             	test   %rax,%rax
ffffffff80219248:	74 0c                	je     ffffffff80219256 <_RME_Sig_Snd+0x1df>
ffffffff8021924a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219251:	e9 9c 01 00 00       	jmp    ffffffff802193f2 <_RME_Sig_Snd+0x37b>
ffffffff80219256:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021925a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021925e:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80219262:	0f 95 c0             	setne  %al
ffffffff80219265:	0f b6 c0             	movzbl %al,%eax
ffffffff80219268:	48 85 c0             	test   %rax,%rax
ffffffff8021926b:	74 0c                	je     ffffffff80219279 <_RME_Sig_Snd+0x202>
ffffffff8021926d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219274:	e9 79 01 00 00       	jmp    ffffffff802193f2 <_RME_Sig_Snd+0x37b>
                   struct RME_Cap_Sig*,Sig_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff80219279:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021927d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219281:	83 e0 01             	and    $0x1,%eax
ffffffff80219284:	48 85 c0             	test   %rax,%rax
ffffffff80219287:	0f 94 c0             	sete   %al
ffffffff8021928a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021928d:	48 85 c0             	test   %rax,%rax
ffffffff80219290:	74 0c                	je     ffffffff8021929e <_RME_Sig_Snd+0x227>
ffffffff80219292:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219299:	e9 54 01 00 00       	jmp    ffffffff802193f2 <_RME_Sig_Snd+0x37b>
    
    Local=RME_CPU_LOCAL();
ffffffff8021929e:	e8 9c 25 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802192a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802192a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802192ab:	48 8b 00             	mov    (%rax),%rax
ffffffff802192ae:	89 c0                	mov    %eax,%eax
ffffffff802192b0:	48 85 c0             	test   %rax,%rax
ffffffff802192b3:	74 0a                	je     ffffffff802192bf <_RME_Sig_Snd+0x248>
ffffffff802192b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802192b9:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802192bd:	eb 04                	jmp    ffffffff802192c3 <_RME_Sig_Snd+0x24c>
ffffffff802192bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802192c3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Thd_Rcv=Sig_Root->Thd;
ffffffff802192c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802192cb:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802192cf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    /* If and only if we are calling from the same core do we unblock */
    if(Thd_Rcv!=(void*)RME_NULL)
ffffffff802192d3:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff802192d8:	74 22                	je     ffffffff802192fc <_RME_Sig_Snd+0x285>
    {
        RME_COV_MARKER();

        if(Thd_Rcv->Sched.Local==Local)
ffffffff802192da:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802192de:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802192e2:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff802192e6:	75 0a                	jne    ffffffff802192f2 <_RME_Sig_Snd+0x27b>
        {
            RME_COV_MARKER();

            Unblock=1U;
ffffffff802192e8:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff802192ef:	00 
ffffffff802192f0:	eb 12                	jmp    ffffffff80219304 <_RME_Sig_Snd+0x28d>
        }
        else
        {
            RME_COV_MARKER();

            Unblock=0U;
ffffffff802192f2:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802192f9:	00 
ffffffff802192fa:	eb 08                	jmp    ffffffff80219304 <_RME_Sig_Snd+0x28d>
    }
    else
    {
        RME_COV_MARKER();

        Unblock=0U;
ffffffff802192fc:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80219303:	00 
    }
    
    if(Unblock!=0U)
ffffffff80219304:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80219309:	0f 84 89 00 00 00    	je     ffffffff80219398 <_RME_Sig_Snd+0x321>
    {
        RME_COV_MARKER();

        /* Now save the system call return value to the caller stack */
        __RME_Svc_Retval_Set(Reg,0);
ffffffff8021930f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80219313:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219318:	48 89 c7             	mov    %rax,%rdi
ffffffff8021931b:	e8 51 df 00 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
        
        /* The thread is blocked, and it is on our core. Unblock it, and
         * set the return value to one as always, Even if we were specifying
         * multi-receive. This is because other cores may reduce the count
         * to zero while we are doing this. */
        __RME_Svc_Retval_Set(&(Thd_Rcv->Ctx.Reg->Reg),1);
ffffffff80219320:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219324:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff8021932b:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219330:	48 89 c7             	mov    %rax,%rdi
ffffffff80219333:	e8 39 df 00 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
        
        /* See if the thread still have time left */
        if(Thd_Rcv->Sched.Slice!=0U)
ffffffff80219338:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021933c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80219340:	48 85 c0             	test   %rax,%rax
ffffffff80219343:	74 1a                	je     ffffffff8021935f <_RME_Sig_Snd+0x2e8>
        {
            RME_COV_MARKER();

            /* Ready and add to runqueue */
            Thd_Rcv->Sched.State=RME_THD_READY;
ffffffff80219345:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219349:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80219350:	00 
            _RME_Run_Ins(Thd_Rcv);
ffffffff80219351:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219355:	48 89 c7             	mov    %rax,%rdi
ffffffff80219358:	e8 94 9a ff ff       	call   ffffffff80212df1 <_RME_Run_Ins>
ffffffff8021935d:	eb 18                	jmp    ffffffff80219377 <_RME_Sig_Snd+0x300>
        else
        {
            RME_COV_MARKER();

            /* Timeout and notify parent */
            Thd_Rcv->Sched.State=RME_THD_TIMEOUT;
ffffffff8021935f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219363:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8021936a:	00 
            _RME_Run_Notif(Thd_Rcv);
ffffffff8021936b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021936f:	48 89 c7             	mov    %rax,%rdi
ffffffff80219372:	e8 78 9c ff ff       	call   ffffffff80212fef <_RME_Run_Notif>
        }
        
        /* Pick the highest priority thread to run */
        _RME_Kern_High(Reg,Local);
ffffffff80219377:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021937b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021937f:	48 89 d6             	mov    %rdx,%rsi
ffffffff80219382:	48 89 c7             	mov    %rax,%rdi
ffffffff80219385:	e8 59 fb ff ff       	call   ffffffff80218ee3 <_RME_Kern_High>
        
        /* Clear endpoint blocking status - no write release required */
        Sig_Root->Thd=RME_NULL;
ffffffff8021938a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021938e:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80219395:	00 
ffffffff80219396:	eb 55                	jmp    ffffffff802193ed <_RME_Sig_Snd+0x376>
    else
    {
        RME_COV_MARKER();

        /* The guy who blocked on it is not on our core, we just faa and return */
        if(RME_FETCH_ADD(&(Sig_Root->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80219398:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021939c:	48 83 c0 28          	add    $0x28,%rax
ffffffff802193a0:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802193a5:	48 89 c7             	mov    %rax,%rdi
ffffffff802193a8:	e8 e6 33 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff802193ad:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff802193b4:	ff ff 7f 
ffffffff802193b7:	48 39 d0             	cmp    %rdx,%rax
ffffffff802193ba:	76 20                	jbe    ffffffff802193dc <_RME_Sig_Snd+0x365>
        {
            RME_COV_MARKER();

            RME_FETCH_ADD(&(Sig_Root->Sig_Num),-1);
ffffffff802193bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802193c0:	48 83 c0 28          	add    $0x28,%rax
ffffffff802193c4:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802193cb:	48 89 c7             	mov    %rax,%rdi
ffffffff802193ce:	e8 c0 33 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
            return RME_ERR_SIV_FULL;
ffffffff802193d3:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff802193da:	eb 16                	jmp    ffffffff802193f2 <_RME_Sig_Snd+0x37b>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Now save the system call return value to the caller stack */
        __RME_Svc_Retval_Set(Reg,0);
ffffffff802193dc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802193e0:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802193e5:	48 89 c7             	mov    %rax,%rdi
ffffffff802193e8:	e8 84 de 00 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
    }

    return 0;
ffffffff802193ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802193f2:	c9                   	leave  
ffffffff802193f3:	c3                   	ret    

ffffffff802193f4 <_RME_Sig_Rcv>:
******************************************************************************/
static rme_ret_t _RME_Sig_Rcv(struct RME_Cap_Cpt* Cpt,
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Sig,
                              rme_ptr_t Option)
{
ffffffff802193f4:	f3 0f 1e fa          	endbr64 
ffffffff802193f8:	55                   	push   %rbp
ffffffff802193f9:	48 89 e5             	mov    %rsp,%rbp
ffffffff802193fc:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80219400:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80219404:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80219408:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021940c:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    rme_ptr_t Old_Value;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80219410:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219414:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219419:	48 85 c0             	test   %rax,%rax
ffffffff8021941c:	0f 85 98 00 00 00    	jne    ffffffff802194ba <_RME_Sig_Rcv+0xc6>
ffffffff80219422:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219426:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021942a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021942e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219431:	0f 96 c0             	setbe  %al
ffffffff80219434:	0f b6 c0             	movzbl %al,%eax
ffffffff80219437:	48 85 c0             	test   %rax,%rax
ffffffff8021943a:	74 0c                	je     ffffffff80219448 <_RME_Sig_Rcv+0x54>
ffffffff8021943c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219443:	e9 45 04 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
ffffffff80219448:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021944c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219450:	48 89 c2             	mov    %rax,%rdx
ffffffff80219453:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219457:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021945b:	48 01 d0             	add    %rdx,%rax
ffffffff8021945e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219466:	48 8b 00             	mov    (%rax),%rax
ffffffff80219469:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021946d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219471:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219475:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219478:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021947c:	0f 94 c0             	sete   %al
ffffffff8021947f:	0f b6 c0             	movzbl %al,%eax
ffffffff80219482:	48 85 c0             	test   %rax,%rax
ffffffff80219485:	74 0c                	je     ffffffff80219493 <_RME_Sig_Rcv+0x9f>
ffffffff80219487:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021948e:	e9 fa 03 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
ffffffff80219493:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219497:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021949b:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff8021949f:	0f 95 c0             	setne  %al
ffffffff802194a2:	0f b6 c0             	movzbl %al,%eax
ffffffff802194a5:	48 85 c0             	test   %rax,%rax
ffffffff802194a8:	0f 84 4c 01 00 00    	je     ffffffff802195fa <_RME_Sig_Rcv+0x206>
ffffffff802194ae:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802194b5:	e9 d3 03 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
ffffffff802194ba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802194be:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802194c2:	48 89 c2             	mov    %rax,%rdx
ffffffff802194c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802194c9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802194cd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802194d0:	0f 93 c0             	setae  %al
ffffffff802194d3:	0f b6 c0             	movzbl %al,%eax
ffffffff802194d6:	48 85 c0             	test   %rax,%rax
ffffffff802194d9:	74 0c                	je     ffffffff802194e7 <_RME_Sig_Rcv+0xf3>
ffffffff802194db:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802194e2:	e9 a6 03 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
ffffffff802194e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802194eb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802194ef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802194f3:	48 89 c2             	mov    %rax,%rdx
ffffffff802194f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802194fa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802194fe:	48 01 d0             	add    %rdx,%rax
ffffffff80219501:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219505:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219509:	48 8b 00             	mov    (%rax),%rax
ffffffff8021950c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219510:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219514:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219518:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021951b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021951f:	0f 94 c0             	sete   %al
ffffffff80219522:	0f b6 c0             	movzbl %al,%eax
ffffffff80219525:	48 85 c0             	test   %rax,%rax
ffffffff80219528:	74 0c                	je     ffffffff80219536 <_RME_Sig_Rcv+0x142>
ffffffff8021952a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219531:	e9 57 03 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
ffffffff80219536:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021953a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021953e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219542:	0f 95 c0             	setne  %al
ffffffff80219545:	0f b6 c0             	movzbl %al,%eax
ffffffff80219548:	48 85 c0             	test   %rax,%rax
ffffffff8021954b:	74 0c                	je     ffffffff80219559 <_RME_Sig_Rcv+0x165>
ffffffff8021954d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219554:	e9 34 03 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
ffffffff80219559:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021955d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219562:	48 89 c2             	mov    %rax,%rdx
ffffffff80219565:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219569:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021956d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219570:	0f 93 c0             	setae  %al
ffffffff80219573:	0f b6 c0             	movzbl %al,%eax
ffffffff80219576:	48 85 c0             	test   %rax,%rax
ffffffff80219579:	74 0c                	je     ffffffff80219587 <_RME_Sig_Rcv+0x193>
ffffffff8021957b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219582:	e9 06 03 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
ffffffff80219587:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021958b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219590:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219594:	48 89 c2             	mov    %rax,%rdx
ffffffff80219597:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021959b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021959f:	48 01 d0             	add    %rdx,%rax
ffffffff802195a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802195a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802195aa:	48 8b 00             	mov    (%rax),%rax
ffffffff802195ad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802195b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802195b5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802195b9:	0f b7 c0             	movzwl %ax,%eax
ffffffff802195bc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802195c0:	0f 94 c0             	sete   %al
ffffffff802195c3:	0f b6 c0             	movzbl %al,%eax
ffffffff802195c6:	48 85 c0             	test   %rax,%rax
ffffffff802195c9:	74 0c                	je     ffffffff802195d7 <_RME_Sig_Rcv+0x1e3>
ffffffff802195cb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802195d2:	e9 b6 02 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
ffffffff802195d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802195db:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802195df:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802195e3:	0f 95 c0             	setne  %al
ffffffff802195e6:	0f b6 c0             	movzbl %al,%eax
ffffffff802195e9:	48 85 c0             	test   %rax,%rax
ffffffff802195ec:	74 0c                	je     ffffffff802195fa <_RME_Sig_Rcv+0x206>
ffffffff802195ee:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802195f5:	e9 93 02 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
                   struct RME_Cap_Sig*,Sig_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    switch(Option)
ffffffff802195fa:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
ffffffff802195ff:	0f 84 a3 00 00 00    	je     ffffffff802196a8 <_RME_Sig_Rcv+0x2b4>
ffffffff80219605:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
ffffffff8021960a:	0f 87 bd 00 00 00    	ja     ffffffff802196cd <_RME_Sig_Rcv+0x2d9>
ffffffff80219610:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff80219615:	74 6c                	je     ffffffff80219683 <_RME_Sig_Rcv+0x28f>
ffffffff80219617:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff8021961c:	0f 87 ab 00 00 00    	ja     ffffffff802196cd <_RME_Sig_Rcv+0x2d9>
ffffffff80219622:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80219627:	74 0c                	je     ffffffff80219635 <_RME_Sig_Rcv+0x241>
ffffffff80219629:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
ffffffff8021962e:	74 2e                	je     ffffffff8021965e <_RME_Sig_Rcv+0x26a>
ffffffff80219630:	e9 98 00 00 00       	jmp    ffffffff802196cd <_RME_Sig_Rcv+0x2d9>
    {
        case RME_RCV_BS:
        {
            RME_COV_MARKER();

            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff80219635:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219639:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021963d:	83 e0 02             	and    $0x2,%eax
ffffffff80219640:	48 85 c0             	test   %rax,%rax
ffffffff80219643:	0f 94 c0             	sete   %al
ffffffff80219646:	0f b6 c0             	movzbl %al,%eax
ffffffff80219649:	48 85 c0             	test   %rax,%rax
ffffffff8021964c:	0f 84 87 00 00 00    	je     ffffffff802196d9 <_RME_Sig_Rcv+0x2e5>
ffffffff80219652:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219659:	e9 2f 02 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
        }
        case RME_RCV_BM:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BM);
ffffffff8021965e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219662:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219666:	83 e0 04             	and    $0x4,%eax
ffffffff80219669:	48 85 c0             	test   %rax,%rax
ffffffff8021966c:	0f 94 c0             	sete   %al
ffffffff8021966f:	0f b6 c0             	movzbl %al,%eax
ffffffff80219672:	48 85 c0             	test   %rax,%rax
ffffffff80219675:	74 65                	je     ffffffff802196dc <_RME_Sig_Rcv+0x2e8>
ffffffff80219677:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021967e:	e9 0a 02 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
        }
        case RME_RCV_NS:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NS);
ffffffff80219683:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219687:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021968b:	83 e0 08             	and    $0x8,%eax
ffffffff8021968e:	48 85 c0             	test   %rax,%rax
ffffffff80219691:	0f 94 c0             	sete   %al
ffffffff80219694:	0f b6 c0             	movzbl %al,%eax
ffffffff80219697:	48 85 c0             	test   %rax,%rax
ffffffff8021969a:	74 43                	je     ffffffff802196df <_RME_Sig_Rcv+0x2eb>
ffffffff8021969c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802196a3:	e9 e5 01 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
        }
        case RME_RCV_NM:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NM);
ffffffff802196a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802196ac:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802196b0:	83 e0 10             	and    $0x10,%eax
ffffffff802196b3:	48 85 c0             	test   %rax,%rax
ffffffff802196b6:	0f 94 c0             	sete   %al
ffffffff802196b9:	0f b6 c0             	movzbl %al,%eax
ffffffff802196bc:	48 85 c0             	test   %rax,%rax
ffffffff802196bf:	74 21                	je     ffffffff802196e2 <_RME_Sig_Rcv+0x2ee>
ffffffff802196c1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802196c8:	e9 c0 01 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
        }
        default:
        {
            RME_COV_MARKER();
            
            return RME_ERR_SIV_ACT;
ffffffff802196cd:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff802196d4:	e9 b4 01 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
            break;
ffffffff802196d9:	90                   	nop
ffffffff802196da:	eb 07                	jmp    ffffffff802196e3 <_RME_Sig_Rcv+0x2ef>
            break;
ffffffff802196dc:	90                   	nop
ffffffff802196dd:	eb 04                	jmp    ffffffff802196e3 <_RME_Sig_Rcv+0x2ef>
            break;
ffffffff802196df:	90                   	nop
ffffffff802196e0:	eb 01                	jmp    ffffffff802196e3 <_RME_Sig_Rcv+0x2ef>
            break;
ffffffff802196e2:	90                   	nop
        }
    }
    
    /* Convert to root cap */
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802196e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802196e7:	48 8b 00             	mov    (%rax),%rax
ffffffff802196ea:	89 c0                	mov    %eax,%eax
ffffffff802196ec:	48 85 c0             	test   %rax,%rax
ffffffff802196ef:	74 0a                	je     ffffffff802196fb <_RME_Sig_Rcv+0x307>
ffffffff802196f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802196f5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802196f9:	eb 04                	jmp    ffffffff802196ff <_RME_Sig_Rcv+0x30b>
ffffffff802196fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802196ff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* See if we can receive on that endpoint - if someone blocks on it, we 
     * must wait for it to unblock before we can proceed. */
    if(Sig_Root->Thd!=(void*)RME_NULL)
ffffffff80219703:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219707:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021970b:	48 85 c0             	test   %rax,%rax
ffffffff8021970e:	74 0c                	je     ffffffff8021971c <_RME_Sig_Rcv+0x328>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff80219710:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff80219717:	e9 71 01 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    Local=RME_CPU_LOCAL();
ffffffff8021971c:	e8 1e 21 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80219721:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff80219725:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219729:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021972d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    
    /* Check if we trying to let a boot-time thread block on a signal, which is
     * disallowed. Additionally, if the current thread have no timeslice left
     * (which shouldn't happen under any circumstances), we assert and die. */
    RME_ASSERT(Thd_Cur->Sched.Slice!=0U);
    if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80219731:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219735:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80219739:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff80219740:	ff ff 7f 
ffffffff80219743:	48 39 d0             	cmp    %rdx,%rax
ffffffff80219746:	75 0c                	jne    ffffffff80219754 <_RME_Sig_Rcv+0x360>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_BOOT;
ffffffff80219748:	48 c7 c0 cd fe ff ff 	mov    $0xfffffffffffffecd,%rax
ffffffff8021974f:	e9 39 01 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check if there are signals available */
    Old_Value=Sig_Root->Sig_Num;
ffffffff80219754:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219758:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021975c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Old_Value>0U)
ffffffff80219760:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80219765:	0f 84 9b 00 00 00    	je     ffffffff80219806 <_RME_Sig_Rcv+0x412>
    {
        RME_COV_MARKER();

        /* Can't use faa, other cores may reduce count to zero in the meantime */
        if((Option==RME_RCV_BS)||(Option==RME_RCV_NS))
ffffffff8021976b:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80219770:	74 07                	je     ffffffff80219779 <_RME_Sig_Rcv+0x385>
ffffffff80219772:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff80219777:	75 43                	jne    ffffffff802197bc <_RME_Sig_Rcv+0x3c8>
        {
            RME_COV_MARKER();

            /* Try to take one */
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff80219779:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021977d:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80219781:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219785:	48 8d 48 28          	lea    0x28(%rax),%rcx
ffffffff80219789:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021978d:	48 89 c6             	mov    %rax,%rsi
ffffffff80219790:	48 89 cf             	mov    %rcx,%rdi
ffffffff80219793:	e8 c6 2f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80219798:	48 85 c0             	test   %rax,%rax
ffffffff8021979b:	75 0c                	jne    ffffffff802197a9 <_RME_Sig_Rcv+0x3b5>
                             Old_Value,
                             Old_Value-1U)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff8021979d:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff802197a4:	e9 e4 00 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* We have taken it, now return what we have taken */
            __RME_Svc_Retval_Set(Reg,1);
ffffffff802197a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802197ad:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802197b2:	48 89 c7             	mov    %rax,%rdi
ffffffff802197b5:	e8 b7 da 00 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
ffffffff802197ba:	eb 40                	jmp    ffffffff802197fc <_RME_Sig_Rcv+0x408>
        else
        {
            RME_COV_MARKER();

            /* Try to take all */
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff802197bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802197c0:	48 8d 48 28          	lea    0x28(%rax),%rcx
ffffffff802197c4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802197c8:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802197cd:	48 89 c6             	mov    %rax,%rsi
ffffffff802197d0:	48 89 cf             	mov    %rcx,%rdi
ffffffff802197d3:	e8 86 2f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802197d8:	48 85 c0             	test   %rax,%rax
ffffffff802197db:	75 0c                	jne    ffffffff802197e9 <_RME_Sig_Rcv+0x3f5>
                             Old_Value,
                             0U)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff802197dd:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff802197e4:	e9 a4 00 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* We have taken all, now return what we have taken */
            __RME_Svc_Retval_Set(Reg,(rme_ret_t)Old_Value);
ffffffff802197e9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802197ed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802197f1:	48 89 d6             	mov    %rdx,%rsi
ffffffff802197f4:	48 89 c7             	mov    %rax,%rdi
ffffffff802197f7:	e8 75 da 00 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
        }
        
        return 0;
ffffffff802197fc:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80219801:	e9 87 00 00 00       	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
    else
    {
        RME_COV_MARKER();

        /* There's no value, try to block */
        if((Option==RME_RCV_BS)||(Option==RME_RCV_BM))
ffffffff80219806:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8021980b:	74 07                	je     ffffffff80219814 <_RME_Sig_Rcv+0x420>
ffffffff8021980d:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
ffffffff80219812:	75 63                	jne    ffffffff80219877 <_RME_Sig_Rcv+0x483>
        {
            RME_COV_MARKER();

            if(RME_COMP_SWAP((rme_ptr_t*)&(Sig_Root->Thd),
ffffffff80219814:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219818:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021981c:	48 8d 4a 30          	lea    0x30(%rdx),%rcx
ffffffff80219820:	48 89 c2             	mov    %rax,%rdx
ffffffff80219823:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219828:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021982b:	e8 2e 2f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80219830:	48 85 c0             	test   %rax,%rax
ffffffff80219833:	75 09                	jne    ffffffff8021983e <_RME_Sig_Rcv+0x44a>
                             RME_NULL,
                             (rme_ptr_t)Thd_Cur)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff80219835:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff8021983c:	eb 4f                	jmp    ffffffff8021988d <_RME_Sig_Rcv+0x499>
            /* Now we block our current thread. No need to set any return value
             * to the register set here, because we do not yet know how many
             * signals will be there when the thread unblocks. The unblocking
             * does not need an option so we don't keep that; we always treat
             * it as single receive when we unblock anyway. */
            Thd_Cur->Sched.Signal=Sig_Root;
ffffffff8021983e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219842:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80219846:	48 89 50 50          	mov    %rdx,0x50(%rax)
            Thd_Cur->Sched.State=RME_THD_BLOCKED;
ffffffff8021984a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021984e:	48 c7 40 38 01 00 00 	movq   $0x1,0x38(%rax)
ffffffff80219855:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80219856:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021985a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021985d:	e8 42 96 ff ff       	call   ffffffff80212ea4 <_RME_Run_Del>
            
            /* Pick the highest priority thread to run */
            _RME_Kern_High(Reg,Local);
ffffffff80219862:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80219866:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021986a:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021986d:	48 89 c7             	mov    %rax,%rdi
ffffffff80219870:	e8 6e f6 ff ff       	call   ffffffff80218ee3 <_RME_Kern_High>
ffffffff80219875:	eb 11                	jmp    ffffffff80219888 <_RME_Sig_Rcv+0x494>
        else
        {
            RME_COV_MARKER();

            /* We have taken nothing but the system call is successful anyway */
            __RME_Svc_Retval_Set(Reg,0);
ffffffff80219877:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021987b:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219880:	48 89 c7             	mov    %rax,%rdi
ffffffff80219883:	e8 e9 d9 00 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
        }
    }
    
    return 0;
ffffffff80219888:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021988d:	c9                   	leave  
ffffffff8021988e:	c3                   	ret    

ffffffff8021988f <_RME_Inv_Crt>:
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Kom,
                              rme_cid_t Cap_Inv,
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Raddr)
{
ffffffff8021988f:	f3 0f 1e fa          	endbr64 
ffffffff80219893:	55                   	push   %rbp
ffffffff80219894:	48 89 e5             	mov    %rsp,%rbp
ffffffff80219897:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff8021989b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8021989f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff802198a3:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff802198a7:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff802198ab:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
ffffffff802198af:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    struct RME_Cap_Prc* Prc_Root;
    struct RME_Inv_Struct* Invocation;
    rme_ptr_t Type_Stat;
    rme_ptr_t Vaddr;
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802198b3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802198b7:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802198bc:	48 85 c0             	test   %rax,%rax
ffffffff802198bf:	0f 85 98 00 00 00    	jne    ffffffff8021995d <_RME_Inv_Crt+0xce>
ffffffff802198c5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802198c9:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802198cd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802198d1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802198d4:	0f 96 c0             	setbe  %al
ffffffff802198d7:	0f b6 c0             	movzbl %al,%eax
ffffffff802198da:	48 85 c0             	test   %rax,%rax
ffffffff802198dd:	74 0c                	je     ffffffff802198eb <_RME_Inv_Crt+0x5c>
ffffffff802198df:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802198e6:	e9 40 08 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff802198eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802198ef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802198f3:	48 89 c2             	mov    %rax,%rdx
ffffffff802198f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802198fa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802198fe:	48 01 d0             	add    %rdx,%rax
ffffffff80219901:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219905:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219909:	48 8b 00             	mov    (%rax),%rax
ffffffff8021990c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219910:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219914:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219918:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021991b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021991f:	0f 94 c0             	sete   %al
ffffffff80219922:	0f b6 c0             	movzbl %al,%eax
ffffffff80219925:	48 85 c0             	test   %rax,%rax
ffffffff80219928:	74 0c                	je     ffffffff80219936 <_RME_Inv_Crt+0xa7>
ffffffff8021992a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219931:	e9 f5 07 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219936:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021993a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021993e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219942:	0f 95 c0             	setne  %al
ffffffff80219945:	0f b6 c0             	movzbl %al,%eax
ffffffff80219948:	48 85 c0             	test   %rax,%rax
ffffffff8021994b:	0f 84 4c 01 00 00    	je     ffffffff80219a9d <_RME_Inv_Crt+0x20e>
ffffffff80219951:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219958:	e9 ce 07 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff8021995d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219961:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219965:	48 89 c2             	mov    %rax,%rdx
ffffffff80219968:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021996c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219970:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219973:	0f 93 c0             	setae  %al
ffffffff80219976:	0f b6 c0             	movzbl %al,%eax
ffffffff80219979:	48 85 c0             	test   %rax,%rax
ffffffff8021997c:	74 0c                	je     ffffffff8021998a <_RME_Inv_Crt+0xfb>
ffffffff8021997e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219985:	e9 a1 07 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff8021998a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021998e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219992:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219996:	48 89 c2             	mov    %rax,%rdx
ffffffff80219999:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021999d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802199a1:	48 01 d0             	add    %rdx,%rax
ffffffff802199a4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802199a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802199ac:	48 8b 00             	mov    (%rax),%rax
ffffffff802199af:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802199b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802199b7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802199bb:	0f b7 c0             	movzwl %ax,%eax
ffffffff802199be:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802199c2:	0f 94 c0             	sete   %al
ffffffff802199c5:	0f b6 c0             	movzbl %al,%eax
ffffffff802199c8:	48 85 c0             	test   %rax,%rax
ffffffff802199cb:	74 0c                	je     ffffffff802199d9 <_RME_Inv_Crt+0x14a>
ffffffff802199cd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802199d4:	e9 52 07 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff802199d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802199dd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802199e1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802199e5:	0f 95 c0             	setne  %al
ffffffff802199e8:	0f b6 c0             	movzbl %al,%eax
ffffffff802199eb:	48 85 c0             	test   %rax,%rax
ffffffff802199ee:	74 0c                	je     ffffffff802199fc <_RME_Inv_Crt+0x16d>
ffffffff802199f0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802199f7:	e9 2f 07 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff802199fc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219a00:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219a05:	48 89 c2             	mov    %rax,%rdx
ffffffff80219a08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219a0c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219a10:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219a13:	0f 93 c0             	setae  %al
ffffffff80219a16:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a19:	48 85 c0             	test   %rax,%rax
ffffffff80219a1c:	74 0c                	je     ffffffff80219a2a <_RME_Inv_Crt+0x19b>
ffffffff80219a1e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219a25:	e9 01 07 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219a2a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219a2e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219a33:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219a37:	48 89 c2             	mov    %rax,%rdx
ffffffff80219a3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219a3e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219a42:	48 01 d0             	add    %rdx,%rax
ffffffff80219a45:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219a49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219a4d:	48 8b 00             	mov    (%rax),%rax
ffffffff80219a50:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219a54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219a58:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219a5c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219a5f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219a63:	0f 94 c0             	sete   %al
ffffffff80219a66:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a69:	48 85 c0             	test   %rax,%rax
ffffffff80219a6c:	74 0c                	je     ffffffff80219a7a <_RME_Inv_Crt+0x1eb>
ffffffff80219a6e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219a75:	e9 b1 06 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219a7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219a7e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219a82:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219a86:	0f 95 c0             	setne  %al
ffffffff80219a89:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a8c:	48 85 c0             	test   %rax,%rax
ffffffff80219a8f:	74 0c                	je     ffffffff80219a9d <_RME_Inv_Crt+0x20e>
ffffffff80219a91:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219a98:	e9 8e 06 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80219a9d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219aa1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219aa6:	48 85 c0             	test   %rax,%rax
ffffffff80219aa9:	0f 85 98 00 00 00    	jne    ffffffff80219b47 <_RME_Inv_Crt+0x2b8>
ffffffff80219aaf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219ab3:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80219ab7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219abb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219abe:	0f 96 c0             	setbe  %al
ffffffff80219ac1:	0f b6 c0             	movzbl %al,%eax
ffffffff80219ac4:	48 85 c0             	test   %rax,%rax
ffffffff80219ac7:	74 0c                	je     ffffffff80219ad5 <_RME_Inv_Crt+0x246>
ffffffff80219ac9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219ad0:	e9 56 06 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219ad5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219ad9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219add:	48 89 c2             	mov    %rax,%rdx
ffffffff80219ae0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219ae4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219ae8:	48 01 d0             	add    %rdx,%rax
ffffffff80219aeb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219aef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219af3:	48 8b 00             	mov    (%rax),%rax
ffffffff80219af6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219afa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219afe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219b02:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219b05:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219b09:	0f 94 c0             	sete   %al
ffffffff80219b0c:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b0f:	48 85 c0             	test   %rax,%rax
ffffffff80219b12:	74 0c                	je     ffffffff80219b20 <_RME_Inv_Crt+0x291>
ffffffff80219b14:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219b1b:	e9 0b 06 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219b20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219b24:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219b28:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80219b2c:	0f 95 c0             	setne  %al
ffffffff80219b2f:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b32:	48 85 c0             	test   %rax,%rax
ffffffff80219b35:	0f 84 4c 01 00 00    	je     ffffffff80219c87 <_RME_Inv_Crt+0x3f8>
ffffffff80219b3b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219b42:	e9 e4 05 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219b47:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219b4b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219b4f:	48 89 c2             	mov    %rax,%rdx
ffffffff80219b52:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219b56:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219b5a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219b5d:	0f 93 c0             	setae  %al
ffffffff80219b60:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b63:	48 85 c0             	test   %rax,%rax
ffffffff80219b66:	74 0c                	je     ffffffff80219b74 <_RME_Inv_Crt+0x2e5>
ffffffff80219b68:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219b6f:	e9 b7 05 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219b74:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219b78:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219b7c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219b80:	48 89 c2             	mov    %rax,%rdx
ffffffff80219b83:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219b87:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219b8b:	48 01 d0             	add    %rdx,%rax
ffffffff80219b8e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219b92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219b96:	48 8b 00             	mov    (%rax),%rax
ffffffff80219b99:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219b9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219ba1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219ba5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219ba8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219bac:	0f 94 c0             	sete   %al
ffffffff80219baf:	0f b6 c0             	movzbl %al,%eax
ffffffff80219bb2:	48 85 c0             	test   %rax,%rax
ffffffff80219bb5:	74 0c                	je     ffffffff80219bc3 <_RME_Inv_Crt+0x334>
ffffffff80219bb7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219bbe:	e9 68 05 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219bc3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219bc7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219bcb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219bcf:	0f 95 c0             	setne  %al
ffffffff80219bd2:	0f b6 c0             	movzbl %al,%eax
ffffffff80219bd5:	48 85 c0             	test   %rax,%rax
ffffffff80219bd8:	74 0c                	je     ffffffff80219be6 <_RME_Inv_Crt+0x357>
ffffffff80219bda:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219be1:	e9 45 05 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219be6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219bea:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219bef:	48 89 c2             	mov    %rax,%rdx
ffffffff80219bf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219bf6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219bfa:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219bfd:	0f 93 c0             	setae  %al
ffffffff80219c00:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c03:	48 85 c0             	test   %rax,%rax
ffffffff80219c06:	74 0c                	je     ffffffff80219c14 <_RME_Inv_Crt+0x385>
ffffffff80219c08:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219c0f:	e9 17 05 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219c14:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219c18:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219c1d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219c21:	48 89 c2             	mov    %rax,%rdx
ffffffff80219c24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219c28:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219c2c:	48 01 d0             	add    %rdx,%rax
ffffffff80219c2f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219c33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219c37:	48 8b 00             	mov    (%rax),%rax
ffffffff80219c3a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219c3e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219c42:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219c46:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219c49:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219c4d:	0f 94 c0             	sete   %al
ffffffff80219c50:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c53:	48 85 c0             	test   %rax,%rax
ffffffff80219c56:	74 0c                	je     ffffffff80219c64 <_RME_Inv_Crt+0x3d5>
ffffffff80219c58:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219c5f:	e9 c7 04 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219c64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219c68:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219c6c:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80219c70:	0f 95 c0             	setne  %al
ffffffff80219c73:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c76:	48 85 c0             	test   %rax,%rax
ffffffff80219c79:	74 0c                	je     ffffffff80219c87 <_RME_Inv_Crt+0x3f8>
ffffffff80219c7b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219c82:	e9 a4 04 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff80219c87:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219c8b:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219c90:	48 85 c0             	test   %rax,%rax
ffffffff80219c93:	0f 85 98 00 00 00    	jne    ffffffff80219d31 <_RME_Inv_Crt+0x4a2>
ffffffff80219c99:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219c9d:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80219ca1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219ca5:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219ca8:	0f 96 c0             	setbe  %al
ffffffff80219cab:	0f b6 c0             	movzbl %al,%eax
ffffffff80219cae:	48 85 c0             	test   %rax,%rax
ffffffff80219cb1:	74 0c                	je     ffffffff80219cbf <_RME_Inv_Crt+0x430>
ffffffff80219cb3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219cba:	e9 6c 04 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219cbf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219cc3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219cc7:	48 89 c2             	mov    %rax,%rdx
ffffffff80219cca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219cce:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219cd2:	48 01 d0             	add    %rdx,%rax
ffffffff80219cd5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219cd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219cdd:	48 8b 00             	mov    (%rax),%rax
ffffffff80219ce0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219ce4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219ce8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219cec:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219cef:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219cf3:	0f 94 c0             	sete   %al
ffffffff80219cf6:	0f b6 c0             	movzbl %al,%eax
ffffffff80219cf9:	48 85 c0             	test   %rax,%rax
ffffffff80219cfc:	74 0c                	je     ffffffff80219d0a <_RME_Inv_Crt+0x47b>
ffffffff80219cfe:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219d05:	e9 21 04 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219d0a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219d0e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219d12:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219d16:	0f 95 c0             	setne  %al
ffffffff80219d19:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d1c:	48 85 c0             	test   %rax,%rax
ffffffff80219d1f:	0f 84 4c 01 00 00    	je     ffffffff80219e71 <_RME_Inv_Crt+0x5e2>
ffffffff80219d25:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219d2c:	e9 fa 03 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219d31:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219d35:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219d39:	48 89 c2             	mov    %rax,%rdx
ffffffff80219d3c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219d40:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219d44:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219d47:	0f 93 c0             	setae  %al
ffffffff80219d4a:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d4d:	48 85 c0             	test   %rax,%rax
ffffffff80219d50:	74 0c                	je     ffffffff80219d5e <_RME_Inv_Crt+0x4cf>
ffffffff80219d52:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219d59:	e9 cd 03 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219d5e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219d62:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219d66:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219d6a:	48 89 c2             	mov    %rax,%rdx
ffffffff80219d6d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219d71:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219d75:	48 01 d0             	add    %rdx,%rax
ffffffff80219d78:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219d7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219d80:	48 8b 00             	mov    (%rax),%rax
ffffffff80219d83:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219d87:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219d8b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219d8f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219d92:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219d96:	0f 94 c0             	sete   %al
ffffffff80219d99:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d9c:	48 85 c0             	test   %rax,%rax
ffffffff80219d9f:	74 0c                	je     ffffffff80219dad <_RME_Inv_Crt+0x51e>
ffffffff80219da1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219da8:	e9 7e 03 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219dad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219db1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219db5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219db9:	0f 95 c0             	setne  %al
ffffffff80219dbc:	0f b6 c0             	movzbl %al,%eax
ffffffff80219dbf:	48 85 c0             	test   %rax,%rax
ffffffff80219dc2:	74 0c                	je     ffffffff80219dd0 <_RME_Inv_Crt+0x541>
ffffffff80219dc4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219dcb:	e9 5b 03 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219dd0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219dd4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219dd9:	48 89 c2             	mov    %rax,%rdx
ffffffff80219ddc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219de0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219de4:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219de7:	0f 93 c0             	setae  %al
ffffffff80219dea:	0f b6 c0             	movzbl %al,%eax
ffffffff80219ded:	48 85 c0             	test   %rax,%rax
ffffffff80219df0:	74 0c                	je     ffffffff80219dfe <_RME_Inv_Crt+0x56f>
ffffffff80219df2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219df9:	e9 2d 03 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219dfe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219e02:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219e07:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219e0b:	48 89 c2             	mov    %rax,%rdx
ffffffff80219e0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219e12:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219e16:	48 01 d0             	add    %rdx,%rax
ffffffff80219e19:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219e1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219e21:	48 8b 00             	mov    (%rax),%rax
ffffffff80219e24:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219e28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219e2c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219e30:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219e33:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219e37:	0f 94 c0             	sete   %al
ffffffff80219e3a:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e3d:	48 85 c0             	test   %rax,%rax
ffffffff80219e40:	74 0c                	je     ffffffff80219e4e <_RME_Inv_Crt+0x5bf>
ffffffff80219e42:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219e49:	e9 dd 02 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219e4e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219e52:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219e56:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219e5a:	0f 95 c0             	setne  %al
ffffffff80219e5d:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e60:	48 85 c0             	test   %rax,%rax
ffffffff80219e63:	74 0c                	je     ffffffff80219e71 <_RME_Inv_Crt+0x5e2>
ffffffff80219e65:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219e6c:	e9 ba 02 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80219e71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219e75:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219e79:	83 e0 01             	and    $0x1,%eax
ffffffff80219e7c:	48 85 c0             	test   %rax,%rax
ffffffff80219e7f:	0f 94 c0             	sete   %al
ffffffff80219e82:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e85:	48 85 c0             	test   %rax,%rax
ffffffff80219e88:	74 0c                	je     ffffffff80219e96 <_RME_Inv_Crt+0x607>
ffffffff80219e8a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219e91:	e9 95 02 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_INV);
ffffffff80219e96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219e9a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219e9e:	83 e0 01             	and    $0x1,%eax
ffffffff80219ea1:	48 85 c0             	test   %rax,%rax
ffffffff80219ea4:	0f 94 c0             	sete   %al
ffffffff80219ea7:	0f b6 c0             	movzbl %al,%eax
ffffffff80219eaa:	48 85 c0             	test   %rax,%rax
ffffffff80219ead:	74 0c                	je     ffffffff80219ebb <_RME_Inv_Crt+0x62c>
ffffffff80219eaf:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219eb6:	e9 70 02 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
ffffffff80219ebb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219ebf:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219ec3:	83 e0 08             	and    $0x8,%eax
ffffffff80219ec6:	48 85 c0             	test   %rax,%rax
ffffffff80219ec9:	0f 94 c0             	sete   %al
ffffffff80219ecc:	0f b6 c0             	movzbl %al,%eax
ffffffff80219ecf:	48 85 c0             	test   %rax,%rax
ffffffff80219ed2:	74 18                	je     ffffffff80219eec <_RME_Inv_Crt+0x65d>
ffffffff80219ed4:	48 c7 c7 88 93 22 80 	mov    $0xffffffff80229388,%rdi
ffffffff80219edb:	e8 2b 2b ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80219ee0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219ee7:	e9 3f 02 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219eec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219ef0:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80219ef4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80219ef8:	48 01 d0             	add    %rdx,%rax
ffffffff80219efb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80219eff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219f03:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
ffffffff80219f07:	0f 92 c0             	setb   %al
ffffffff80219f0a:	0f b6 c0             	movzbl %al,%eax
ffffffff80219f0d:	48 85 c0             	test   %rax,%rax
ffffffff80219f10:	74 34                	je     ffffffff80219f46 <_RME_Inv_Crt+0x6b7>
ffffffff80219f12:	48 c7 c7 a8 93 22 80 	mov    $0xffffffff802293a8,%rdi
ffffffff80219f19:	e8 ed 2a ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80219f1e:	48 c7 c7 c7 93 22 80 	mov    $0xffffffff802293c7,%rdi
ffffffff80219f25:	e8 e1 2a ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80219f2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219f2e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219f32:	48 89 c7             	mov    %rax,%rdi
ffffffff80219f35:	e8 0f 2a ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
ffffffff80219f3a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219f41:	e9 e5 01 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219f46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219f4a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219f4e:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80219f52:	0f 92 c0             	setb   %al
ffffffff80219f55:	0f b6 c0             	movzbl %al,%eax
ffffffff80219f58:	48 85 c0             	test   %rax,%rax
ffffffff80219f5b:	74 18                	je     ffffffff80219f75 <_RME_Inv_Crt+0x6e6>
ffffffff80219f5d:	48 c7 c7 d8 93 22 80 	mov    $0xffffffff802293d8,%rdi
ffffffff80219f64:	e8 a2 2a ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80219f69:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219f70:	e9 b6 01 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219f75:	48 83 7d d8 b7       	cmpq   $0xffffffffffffffb7,-0x28(%rbp)
ffffffff80219f7a:	0f 97 c0             	seta   %al
ffffffff80219f7d:	0f b6 c0             	movzbl %al,%eax
ffffffff80219f80:	48 85 c0             	test   %rax,%rax
ffffffff80219f83:	74 18                	je     ffffffff80219f9d <_RME_Inv_Crt+0x70e>
ffffffff80219f85:	48 c7 c7 f8 93 22 80 	mov    $0xffffffff802293f8,%rdi
ffffffff80219f8c:	e8 7a 2a ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80219f91:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219f98:	e9 8e 01 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219f9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219fa1:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80219fa5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80219fa9:	48 83 c2 47          	add    $0x47,%rdx
ffffffff80219fad:	48 39 d0             	cmp    %rdx,%rax
ffffffff80219fb0:	0f 92 c0             	setb   %al
ffffffff80219fb3:	0f b6 c0             	movzbl %al,%eax
ffffffff80219fb6:	48 85 c0             	test   %rax,%rax
ffffffff80219fb9:	74 18                	je     ffffffff80219fd3 <_RME_Inv_Crt+0x744>
ffffffff80219fbb:	48 c7 c7 18 94 22 80 	mov    $0xffffffff80229418,%rdi
ffffffff80219fc2:	e8 44 2a ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80219fc7:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219fce:	e9 58 01 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff80219fd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219fd7:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80219fdb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80219fdf:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219fe2:	0f 96 c0             	setbe  %al
ffffffff80219fe5:	0f b6 c0             	movzbl %al,%eax
ffffffff80219fe8:	48 85 c0             	test   %rax,%rax
ffffffff80219feb:	74 0c                	je     ffffffff80219ff9 <_RME_Inv_Crt+0x76a>
ffffffff80219fed:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219ff4:	e9 32 01 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff80219ff9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80219ffd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a001:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a004:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a008:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a00c:	48 01 d0             	add    %rdx,%rax
ffffffff8021a00f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff8021a013:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a017:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021a01e:	00 00 00 
ffffffff8021a021:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021a026:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a029:	e8 30 27 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a02e:	48 85 c0             	test   %rax,%rax
ffffffff8021a031:	0f 94 c0             	sete   %al
ffffffff8021a034:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a037:	48 85 c0             	test   %rax,%rax
ffffffff8021a03a:	74 0c                	je     ffffffff8021a048 <_RME_Inv_Crt+0x7b9>
ffffffff8021a03c:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021a043:	e9 e3 00 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
ffffffff8021a048:	48 8b 15 b1 0f 01 00 	mov    0x10fb1(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8021a04f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a053:	48 89 50 20          	mov    %rdx,0x20(%rax)
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff8021a057:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a05b:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8021a060:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a063:	e8 5f 83 ff ff       	call   ffffffff802123c7 <_RME_Kot_Mark>
ffffffff8021a068:	48 85 c0             	test   %rax,%rax
ffffffff8021a06b:	74 23                	je     ffffffff8021a090 <_RME_Inv_Crt+0x801>
    {
        RME_DBG_S("\nKOT_MARK didn't pass!!");
ffffffff8021a06d:	48 c7 c7 57 94 22 80 	mov    $0xffffffff80229457,%rdi
ffffffff8021a074:	e8 92 29 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_COV_MARKER();
        RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),0U);
ffffffff8021a079:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a07d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8021a084:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8021a08b:	e9 9b 00 00 00       	jmp    ffffffff8021a12b <_RME_Inv_Crt+0x89c>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    /* Object init */
    Invocation=(struct RME_Inv_Struct*)Vaddr;
ffffffff8021a090:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a094:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8021a098:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a09c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a09f:	89 c0                	mov    %eax,%eax
ffffffff8021a0a1:	48 85 c0             	test   %rax,%rax
ffffffff8021a0a4:	74 0a                	je     ffffffff8021a0b0 <_RME_Inv_Crt+0x821>
ffffffff8021a0a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a0aa:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a0ae:	eb 04                	jmp    ffffffff8021a0b4 <_RME_Inv_Crt+0x825>
ffffffff8021a0b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a0b4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    Invocation->Prc=Prc_Root;
ffffffff8021a0b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a0bc:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8021a0c0:	48 89 50 10          	mov    %rdx,0x10(%rax)
    Invocation->Thd_Act=RME_NULL;
ffffffff8021a0c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a0c8:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021a0cf:	00 
    /* By default we do not return on exception */
    Invocation->Is_Exc_Ret=0U;
ffffffff8021a0d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a0d4:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8021a0db:	00 
    
    /* Header init */
    Inv_Crt->Head.Root_Ref=0U;
ffffffff8021a0dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a0e0:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8021a0e7:	00 
    Inv_Crt->Head.Object=Vaddr;
ffffffff8021a0e8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a0ec:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021a0f0:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Inv_Crt->Head.Flag=RME_INV_FLAG_ALL;
ffffffff8021a0f4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a0f8:	48 c7 40 10 03 00 00 	movq   $0x3,0x10(%rax)
ffffffff8021a0ff:	00 
    
    /* Reference object */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref),1U);
ffffffff8021a100:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021a104:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021a108:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a10d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a110:	e8 7e 26 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),
ffffffff8021a115:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a119:	48 b9 00 00 00 00 00 	movabs $0x7000000000000,%rcx
ffffffff8021a120:	00 07 00 
ffffffff8021a123:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_INV,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8021a126:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a12b:	c9                   	leave  
ffffffff8021a12c:	c3                   	ret    

ffffffff8021a12d <_RME_Inv_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Inv)
{
ffffffff8021a12d:	f3 0f 1e fa          	endbr64 
ffffffff8021a131:	55                   	push   %rbp
ffffffff8021a132:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a135:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8021a139:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021a13d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021a141:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Type_Stat;
    /* These are for deletion */
    struct RME_Inv_Struct* Invocation;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021a145:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a149:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a14e:	48 85 c0             	test   %rax,%rax
ffffffff8021a151:	0f 85 98 00 00 00    	jne    ffffffff8021a1ef <_RME_Inv_Del+0xc2>
ffffffff8021a157:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a15b:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021a15f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a163:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a166:	0f 96 c0             	setbe  %al
ffffffff8021a169:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a16c:	48 85 c0             	test   %rax,%rax
ffffffff8021a16f:	74 0c                	je     ffffffff8021a17d <_RME_Inv_Del+0x50>
ffffffff8021a171:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a178:	e9 9d 03 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
ffffffff8021a17d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a181:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a185:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a188:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a18c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a190:	48 01 d0             	add    %rdx,%rax
ffffffff8021a193:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a197:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a19b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a19e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a1a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a1a6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a1aa:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a1ad:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a1b1:	0f 94 c0             	sete   %al
ffffffff8021a1b4:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a1b7:	48 85 c0             	test   %rax,%rax
ffffffff8021a1ba:	74 0c                	je     ffffffff8021a1c8 <_RME_Inv_Del+0x9b>
ffffffff8021a1bc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a1c3:	e9 52 03 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
ffffffff8021a1c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a1cc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a1d0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a1d4:	0f 95 c0             	setne  %al
ffffffff8021a1d7:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a1da:	48 85 c0             	test   %rax,%rax
ffffffff8021a1dd:	0f 84 4c 01 00 00    	je     ffffffff8021a32f <_RME_Inv_Del+0x202>
ffffffff8021a1e3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a1ea:	e9 2b 03 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
ffffffff8021a1ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a1f3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a1f7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a1fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a1fe:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a202:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a205:	0f 93 c0             	setae  %al
ffffffff8021a208:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a20b:	48 85 c0             	test   %rax,%rax
ffffffff8021a20e:	74 0c                	je     ffffffff8021a21c <_RME_Inv_Del+0xef>
ffffffff8021a210:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a217:	e9 fe 02 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
ffffffff8021a21c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a220:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a224:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a228:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a22b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a22f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a233:	48 01 d0             	add    %rdx,%rax
ffffffff8021a236:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a23a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a23e:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a241:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a245:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a249:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a24d:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a250:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a254:	0f 94 c0             	sete   %al
ffffffff8021a257:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a25a:	48 85 c0             	test   %rax,%rax
ffffffff8021a25d:	74 0c                	je     ffffffff8021a26b <_RME_Inv_Del+0x13e>
ffffffff8021a25f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a266:	e9 af 02 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
ffffffff8021a26b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a26f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a273:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a277:	0f 95 c0             	setne  %al
ffffffff8021a27a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a27d:	48 85 c0             	test   %rax,%rax
ffffffff8021a280:	74 0c                	je     ffffffff8021a28e <_RME_Inv_Del+0x161>
ffffffff8021a282:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a289:	e9 8c 02 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
ffffffff8021a28e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a292:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a297:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a29a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a29e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a2a2:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a2a5:	0f 93 c0             	setae  %al
ffffffff8021a2a8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a2ab:	48 85 c0             	test   %rax,%rax
ffffffff8021a2ae:	74 0c                	je     ffffffff8021a2bc <_RME_Inv_Del+0x18f>
ffffffff8021a2b0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a2b7:	e9 5e 02 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
ffffffff8021a2bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a2c0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a2c5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a2c9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a2cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a2d0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a2d4:	48 01 d0             	add    %rdx,%rax
ffffffff8021a2d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a2db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a2df:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a2e2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a2e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a2ea:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a2ee:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a2f1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a2f5:	0f 94 c0             	sete   %al
ffffffff8021a2f8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a2fb:	48 85 c0             	test   %rax,%rax
ffffffff8021a2fe:	74 0c                	je     ffffffff8021a30c <_RME_Inv_Del+0x1df>
ffffffff8021a300:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a307:	e9 0e 02 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
ffffffff8021a30c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a310:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a314:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a318:	0f 95 c0             	setne  %al
ffffffff8021a31b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a31e:	48 85 c0             	test   %rax,%rax
ffffffff8021a321:	74 0c                	je     ffffffff8021a32f <_RME_Inv_Del+0x202>
ffffffff8021a323:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a32a:	e9 eb 01 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021a32f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a333:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a337:	83 e0 02             	and    $0x2,%eax
ffffffff8021a33a:	48 85 c0             	test   %rax,%rax
ffffffff8021a33d:	0f 94 c0             	sete   %al
ffffffff8021a340:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a343:	48 85 c0             	test   %rax,%rax
ffffffff8021a346:	74 0c                	je     ffffffff8021a354 <_RME_Inv_Del+0x227>
ffffffff8021a348:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a34f:	e9 c6 01 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff8021a354:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a358:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021a35c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a360:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a363:	0f 96 c0             	setbe  %al
ffffffff8021a366:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a369:	48 85 c0             	test   %rax,%rax
ffffffff8021a36c:	74 0c                	je     ffffffff8021a37a <_RME_Inv_Del+0x24d>
ffffffff8021a36e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a375:	e9 a0 01 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
ffffffff8021a37a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a37e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a382:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a385:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a389:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a38d:	48 01 d0             	add    %rdx,%rax
ffffffff8021a390:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff8021a394:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a398:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a39b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a39f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a3a3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a3a7:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a3aa:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a3ae:	0f 95 c0             	setne  %al
ffffffff8021a3b1:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a3b4:	48 85 c0             	test   %rax,%rax
ffffffff8021a3b7:	74 0c                	je     ffffffff8021a3c5 <_RME_Inv_Del+0x298>
ffffffff8021a3b9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a3c0:	e9 55 01 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
ffffffff8021a3c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a3c9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a3cd:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a3d1:	0f 95 c0             	setne  %al
ffffffff8021a3d4:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a3d7:	48 85 c0             	test   %rax,%rax
ffffffff8021a3da:	74 0c                	je     ffffffff8021a3e8 <_RME_Inv_Del+0x2bb>
ffffffff8021a3dc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a3e3:	e9 32 01 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
ffffffff8021a3e8:	48 8b 15 11 0c 01 00 	mov    0x10c11(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8021a3ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a3f3:	48 8b 48 20          	mov    0x20(%rax),%rcx
ffffffff8021a3f7:	48 89 d0             	mov    %rdx,%rax
ffffffff8021a3fa:	48 29 c8             	sub    %rcx,%rax
ffffffff8021a3fd:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff8021a401:	0f 96 c0             	setbe  %al
ffffffff8021a404:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a407:	48 98                	cltq   
ffffffff8021a409:	48 85 c0             	test   %rax,%rax
ffffffff8021a40c:	74 0c                	je     ffffffff8021a41a <_RME_Inv_Del+0x2ed>
ffffffff8021a40e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8021a415:	e9 00 01 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
ffffffff8021a41a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a41e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a422:	48 85 c0             	test   %rax,%rax
ffffffff8021a425:	0f 95 c0             	setne  %al
ffffffff8021a428:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a42b:	48 85 c0             	test   %rax,%rax
ffffffff8021a42e:	74 44                	je     ffffffff8021a474 <_RME_Inv_Del+0x347>
ffffffff8021a430:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a434:	89 c0                	mov    %eax,%eax
ffffffff8021a436:	48 85 c0             	test   %rax,%rax
ffffffff8021a439:	0f 94 c0             	sete   %al
ffffffff8021a43c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a43f:	48 85 c0             	test   %rax,%rax
ffffffff8021a442:	74 24                	je     ffffffff8021a468 <_RME_Inv_Del+0x33b>
ffffffff8021a444:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021a44b:	00 ff ff 
ffffffff8021a44e:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021a452:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a455:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a459:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a45d:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a460:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a463:	e8 f6 22 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a468:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8021a46f:	e9 a6 00 00 00       	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
    
    /* Get the invocation */
    Invocation=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
ffffffff8021a474:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a478:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a47c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* See if the invocation is currently being used. If yes, we cannot delete it */
    if(Invocation->Thd_Act!=(void*)RME_NULL)
ffffffff8021a480:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a484:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a488:	48 85 c0             	test   %rax,%rax
ffffffff8021a48b:	74 2d                	je     ffffffff8021a4ba <_RME_Inv_Del+0x38d>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Inv_Del,Type_Stat);
ffffffff8021a48d:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021a494:	00 ff ff 
ffffffff8021a497:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021a49b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a49e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a4a2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a4a6:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a4a9:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a4ac:	e8 ad 22 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_SIV_ACT;
ffffffff8021a4b1:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a4b8:	eb 60                	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Inv_Del,Type_Stat);
ffffffff8021a4ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a4be:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a4c2:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8021a4c7:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a4ca:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a4cd:	e8 8c 22 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a4d2:	48 85 c0             	test   %rax,%rax
ffffffff8021a4d5:	0f 94 c0             	sete   %al
ffffffff8021a4d8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a4db:	48 85 c0             	test   %rax,%rax
ffffffff8021a4de:	74 09                	je     ffffffff8021a4e9 <_RME_Inv_Del+0x3bc>
ffffffff8021a4e0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021a4e7:	eb 31                	jmp    ffffffff8021a51a <_RME_Inv_Del+0x3ed>
    
    /* Dereference the process */
    RME_FETCH_ADD(&(Invocation->Prc->Head.Root_Ref), -1);
ffffffff8021a4e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a4ed:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a4f1:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021a4f5:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021a4fc:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a4ff:	e8 8f 22 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Try to clear the area - this must be successful */
    RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Invocation,RME_INV_SIZE)==0);
ffffffff8021a504:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a508:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8021a50d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a510:	e8 f9 81 ff ff       	call   ffffffff8021270e <_RME_Kot_Erase>
    
    return 0;
ffffffff8021a515:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a51a:	c9                   	leave  
ffffffff8021a51b:	c3                   	ret    

ffffffff8021a51c <_RME_Inv_Set>:
static rme_ret_t _RME_Inv_Set(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Inv,
                              rme_ptr_t Entry,
                              rme_ptr_t Stack,
                              rme_ptr_t Is_Exc_Ret)
{
ffffffff8021a51c:	f3 0f 1e fa          	endbr64 
ffffffff8021a520:	55                   	push   %rbp
ffffffff8021a521:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a524:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff8021a528:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021a52c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021a530:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8021a534:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8021a538:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Inv* Inv_Op;
    volatile struct RME_Inv_Struct* Invocation;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8021a53c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a540:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a545:	48 85 c0             	test   %rax,%rax
ffffffff8021a548:	0f 85 98 00 00 00    	jne    ffffffff8021a5e6 <_RME_Inv_Set+0xca>
ffffffff8021a54e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a552:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021a556:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a55a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a55d:	0f 96 c0             	setbe  %al
ffffffff8021a560:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a563:	48 85 c0             	test   %rax,%rax
ffffffff8021a566:	74 0c                	je     ffffffff8021a574 <_RME_Inv_Set+0x58>
ffffffff8021a568:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a56f:	e9 03 02 00 00       	jmp    ffffffff8021a777 <_RME_Inv_Set+0x25b>
ffffffff8021a574:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a578:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a57c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a57f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a583:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a587:	48 01 d0             	add    %rdx,%rax
ffffffff8021a58a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a58e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a592:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a595:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a599:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a59d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a5a1:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a5a4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a5a8:	0f 94 c0             	sete   %al
ffffffff8021a5ab:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a5ae:	48 85 c0             	test   %rax,%rax
ffffffff8021a5b1:	74 0c                	je     ffffffff8021a5bf <_RME_Inv_Set+0xa3>
ffffffff8021a5b3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a5ba:	e9 b8 01 00 00       	jmp    ffffffff8021a777 <_RME_Inv_Set+0x25b>
ffffffff8021a5bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a5c3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a5c7:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a5cb:	0f 95 c0             	setne  %al
ffffffff8021a5ce:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a5d1:	48 85 c0             	test   %rax,%rax
ffffffff8021a5d4:	0f 84 46 01 00 00    	je     ffffffff8021a720 <_RME_Inv_Set+0x204>
ffffffff8021a5da:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a5e1:	e9 91 01 00 00       	jmp    ffffffff8021a777 <_RME_Inv_Set+0x25b>
ffffffff8021a5e6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a5ea:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a5ee:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a5f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a5f5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a5f9:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a5fc:	0f 93 c0             	setae  %al
ffffffff8021a5ff:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a602:	48 85 c0             	test   %rax,%rax
ffffffff8021a605:	74 0c                	je     ffffffff8021a613 <_RME_Inv_Set+0xf7>
ffffffff8021a607:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a60e:	e9 64 01 00 00       	jmp    ffffffff8021a777 <_RME_Inv_Set+0x25b>
ffffffff8021a613:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a617:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a61b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a61f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a622:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a626:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a62a:	48 01 d0             	add    %rdx,%rax
ffffffff8021a62d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a631:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a635:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a638:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a63c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a640:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a644:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a647:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a64b:	0f 94 c0             	sete   %al
ffffffff8021a64e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a651:	48 85 c0             	test   %rax,%rax
ffffffff8021a654:	74 0c                	je     ffffffff8021a662 <_RME_Inv_Set+0x146>
ffffffff8021a656:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a65d:	e9 15 01 00 00       	jmp    ffffffff8021a777 <_RME_Inv_Set+0x25b>
ffffffff8021a662:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a666:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a66a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a66e:	0f 95 c0             	setne  %al
ffffffff8021a671:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a674:	48 85 c0             	test   %rax,%rax
ffffffff8021a677:	74 0c                	je     ffffffff8021a685 <_RME_Inv_Set+0x169>
ffffffff8021a679:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a680:	e9 f2 00 00 00       	jmp    ffffffff8021a777 <_RME_Inv_Set+0x25b>
ffffffff8021a685:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a689:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a68e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a691:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a695:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a699:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a69c:	0f 93 c0             	setae  %al
ffffffff8021a69f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a6a2:	48 85 c0             	test   %rax,%rax
ffffffff8021a6a5:	74 0c                	je     ffffffff8021a6b3 <_RME_Inv_Set+0x197>
ffffffff8021a6a7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a6ae:	e9 c4 00 00 00       	jmp    ffffffff8021a777 <_RME_Inv_Set+0x25b>
ffffffff8021a6b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a6b7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a6bc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a6c0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a6c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a6c7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a6cb:	48 01 d0             	add    %rdx,%rax
ffffffff8021a6ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a6d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a6d6:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a6d9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a6dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a6e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a6e5:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a6e8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a6ec:	0f 94 c0             	sete   %al
ffffffff8021a6ef:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a6f2:	48 85 c0             	test   %rax,%rax
ffffffff8021a6f5:	74 09                	je     ffffffff8021a700 <_RME_Inv_Set+0x1e4>
ffffffff8021a6f7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a6fe:	eb 77                	jmp    ffffffff8021a777 <_RME_Inv_Set+0x25b>
ffffffff8021a700:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a704:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a708:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a70c:	0f 95 c0             	setne  %al
ffffffff8021a70f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a712:	48 85 c0             	test   %rax,%rax
ffffffff8021a715:	74 09                	je     ffffffff8021a720 <_RME_Inv_Set+0x204>
ffffffff8021a717:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a71e:	eb 57                	jmp    ffffffff8021a777 <_RME_Inv_Set+0x25b>
                   struct RME_Cap_Inv*,Inv_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff8021a720:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a724:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a728:	83 e0 01             	and    $0x1,%eax
ffffffff8021a72b:	48 85 c0             	test   %rax,%rax
ffffffff8021a72e:	0f 94 c0             	sete   %al
ffffffff8021a731:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a734:	48 85 c0             	test   %rax,%rax
ffffffff8021a737:	74 09                	je     ffffffff8021a742 <_RME_Inv_Set+0x226>
ffffffff8021a739:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a740:	eb 35                	jmp    ffffffff8021a777 <_RME_Inv_Set+0x25b>
    
    /* Commit the change - we do not care if the invocation is in use, it is
     * the user's responsibility to guarantee the integrity of applications */
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8021a742:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a746:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a74a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Invocation->Entry=Entry;
ffffffff8021a74e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a752:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021a756:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Invocation->Stack=Stack;
ffffffff8021a75a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a75e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8021a762:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Invocation->Is_Exc_Ret=Is_Exc_Ret;
ffffffff8021a766:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a76a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021a76e:	48 89 50 30          	mov    %rdx,0x30(%rax)
    
    return 0;
ffffffff8021a772:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a777:	c9                   	leave  
ffffffff8021a778:	c3                   	ret    

ffffffff8021a779 <_RME_Inv_Act>:
******************************************************************************/
static rme_ret_t _RME_Inv_Act(struct RME_Cap_Cpt* Cpt, 
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Inv,
                              rme_ptr_t Param)
{
ffffffff8021a779:	f3 0f 1e fa          	endbr64 
ffffffff8021a77d:	55                   	push   %rbp
ffffffff8021a77e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a781:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8021a785:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021a789:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021a78d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021a791:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        /* No action required */
    }
#endif

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8021a795:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a799:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a79e:	48 85 c0             	test   %rax,%rax
ffffffff8021a7a1:	0f 85 98 00 00 00    	jne    ffffffff8021a83f <_RME_Inv_Act+0xc6>
ffffffff8021a7a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a7ab:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021a7af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a7b3:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a7b6:	0f 96 c0             	setbe  %al
ffffffff8021a7b9:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a7bc:	48 85 c0             	test   %rax,%rax
ffffffff8021a7bf:	74 0c                	je     ffffffff8021a7cd <_RME_Inv_Act+0x54>
ffffffff8021a7c1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a7c8:	e9 22 03 00 00       	jmp    ffffffff8021aaef <_RME_Inv_Act+0x376>
ffffffff8021a7cd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a7d1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a7d5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a7d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a7dc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a7e0:	48 01 d0             	add    %rdx,%rax
ffffffff8021a7e3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a7e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a7eb:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a7ee:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a7f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a7f6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a7fa:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a7fd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a801:	0f 94 c0             	sete   %al
ffffffff8021a804:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a807:	48 85 c0             	test   %rax,%rax
ffffffff8021a80a:	74 0c                	je     ffffffff8021a818 <_RME_Inv_Act+0x9f>
ffffffff8021a80c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a813:	e9 d7 02 00 00       	jmp    ffffffff8021aaef <_RME_Inv_Act+0x376>
ffffffff8021a818:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a81c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a820:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a824:	0f 95 c0             	setne  %al
ffffffff8021a827:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a82a:	48 85 c0             	test   %rax,%rax
ffffffff8021a82d:	0f 84 4c 01 00 00    	je     ffffffff8021a97f <_RME_Inv_Act+0x206>
ffffffff8021a833:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a83a:	e9 b0 02 00 00       	jmp    ffffffff8021aaef <_RME_Inv_Act+0x376>
ffffffff8021a83f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a843:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a847:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a84a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a84e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a852:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a855:	0f 93 c0             	setae  %al
ffffffff8021a858:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a85b:	48 85 c0             	test   %rax,%rax
ffffffff8021a85e:	74 0c                	je     ffffffff8021a86c <_RME_Inv_Act+0xf3>
ffffffff8021a860:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a867:	e9 83 02 00 00       	jmp    ffffffff8021aaef <_RME_Inv_Act+0x376>
ffffffff8021a86c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a870:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a874:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a878:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a87b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a87f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a883:	48 01 d0             	add    %rdx,%rax
ffffffff8021a886:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a88a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a88e:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a891:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a895:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a899:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a89d:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a8a0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a8a4:	0f 94 c0             	sete   %al
ffffffff8021a8a7:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a8aa:	48 85 c0             	test   %rax,%rax
ffffffff8021a8ad:	74 0c                	je     ffffffff8021a8bb <_RME_Inv_Act+0x142>
ffffffff8021a8af:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a8b6:	e9 34 02 00 00       	jmp    ffffffff8021aaef <_RME_Inv_Act+0x376>
ffffffff8021a8bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a8bf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a8c3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a8c7:	0f 95 c0             	setne  %al
ffffffff8021a8ca:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a8cd:	48 85 c0             	test   %rax,%rax
ffffffff8021a8d0:	74 0c                	je     ffffffff8021a8de <_RME_Inv_Act+0x165>
ffffffff8021a8d2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a8d9:	e9 11 02 00 00       	jmp    ffffffff8021aaef <_RME_Inv_Act+0x376>
ffffffff8021a8de:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a8e2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a8e7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a8ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a8ee:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a8f2:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a8f5:	0f 93 c0             	setae  %al
ffffffff8021a8f8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a8fb:	48 85 c0             	test   %rax,%rax
ffffffff8021a8fe:	74 0c                	je     ffffffff8021a90c <_RME_Inv_Act+0x193>
ffffffff8021a900:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a907:	e9 e3 01 00 00       	jmp    ffffffff8021aaef <_RME_Inv_Act+0x376>
ffffffff8021a90c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a910:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a915:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a919:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a91c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a920:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a924:	48 01 d0             	add    %rdx,%rax
ffffffff8021a927:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a92b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a92f:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a932:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a936:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a93a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a93e:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a941:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a945:	0f 94 c0             	sete   %al
ffffffff8021a948:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a94b:	48 85 c0             	test   %rax,%rax
ffffffff8021a94e:	74 0c                	je     ffffffff8021a95c <_RME_Inv_Act+0x1e3>
ffffffff8021a950:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a957:	e9 93 01 00 00       	jmp    ffffffff8021aaef <_RME_Inv_Act+0x376>
ffffffff8021a95c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a960:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a964:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a968:	0f 95 c0             	setne  %al
ffffffff8021a96b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a96e:	48 85 c0             	test   %rax,%rax
ffffffff8021a971:	74 0c                	je     ffffffff8021a97f <_RME_Inv_Act+0x206>
ffffffff8021a973:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a97a:	e9 70 01 00 00       	jmp    ffffffff8021aaef <_RME_Inv_Act+0x376>
                   struct RME_Cap_Inv*,Inv_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff8021a97f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a983:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a987:	83 e0 02             	and    $0x2,%eax
ffffffff8021a98a:	48 85 c0             	test   %rax,%rax
ffffffff8021a98d:	0f 94 c0             	sete   %al
ffffffff8021a990:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a993:	48 85 c0             	test   %rax,%rax
ffffffff8021a996:	74 0c                	je     ffffffff8021a9a4 <_RME_Inv_Act+0x22b>
ffffffff8021a998:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a99f:	e9 4b 01 00 00       	jmp    ffffffff8021aaef <_RME_Inv_Act+0x376>
    /* Get the invocation struct */
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8021a9a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a9a8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a9ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Check if this invocation port is already active */
    Thd_Act=Invocation->Thd_Act;
ffffffff8021a9b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a9b4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a9b8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(RME_UNLIKELY(Thd_Act!=(void*)0U))
ffffffff8021a9bc:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8021a9c1:	0f 95 c0             	setne  %al
ffffffff8021a9c4:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a9c7:	48 85 c0             	test   %rax,%rax
ffffffff8021a9ca:	74 0c                	je     ffffffff8021a9d8 <_RME_Inv_Act+0x25f>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff8021a9cc:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a9d3:	e9 17 01 00 00       	jmp    ffffffff8021aaef <_RME_Inv_Act+0x376>
        RME_COV_MARKER();
        /* No action required */
    }

#if(RME_CPT_ENTRY_MAX==0U)
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8021a9d8:	e8 62 0e ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021a9dd:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a9e1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
#endif
    /* Try to do CAS and activate this port */
    if(RME_UNLIKELY(RME_COMP_SWAP((volatile rme_ptr_t*)&(Invocation->Thd_Act),
ffffffff8021a9e5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021a9e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a9ed:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8021a9f1:	48 83 c1 18          	add    $0x18,%rcx
ffffffff8021a9f5:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a9f8:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021a9fb:	e8 5e 1d ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021aa00:	48 85 c0             	test   %rax,%rax
ffffffff8021aa03:	0f 94 c0             	sete   %al
ffffffff8021aa06:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aa09:	48 85 c0             	test   %rax,%rax
ffffffff8021aa0c:	74 0c                	je     ffffffff8021aa1a <_RME_Inv_Act+0x2a1>
                                  (rme_ptr_t)Thd_Act,
                                  (rme_ptr_t)Thd_Cur)==RME_CASFAIL))
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff8021aa0e:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021aa15:	e9 d5 00 00 00       	jmp    ffffffff8021aaef <_RME_Inv_Act+0x376>

    /* Save whatever is needed to return to the point - normally only SP and IP needed
     * because all other registers, including the coprocessor registers, are saved at
     * user-level. We do not set the return value because it will be set by Inv_Ret.
     * The coprocessor state will be consistent across the call */
    __RME_Inv_Reg_Save(&(Invocation->Ret),Reg);
ffffffff8021aa1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aa1e:	48 8d 50 38          	lea    0x38(%rax),%rdx
ffffffff8021aa22:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021aa26:	48 89 c6             	mov    %rax,%rsi
ffffffff8021aa29:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021aa2c:	e8 65 b7 00 00       	call   ffffffff80226196 <__RME_Inv_Reg_Save>
    /* Push this into the stack: insert after the thread list header */
    _RME_List_Ins(&(Invocation->Head),
ffffffff8021aa31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aa35:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
                  &(Thd_Cur->Ctx.Invstk),
ffffffff8021aa3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aa40:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    _RME_List_Ins(&(Invocation->Head),
ffffffff8021aa47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aa4b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021aa4e:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aa51:	e8 5c 23 ff ff       	call   ffffffff8020cdb2 <_RME_List_Ins>
                  Thd_Cur->Ctx.Invstk.Next);
    /* Increase invocation depth - no atomic operation needed */
    Thd_Cur->Ctx.Invstk_Depth++;
ffffffff8021aa56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aa5a:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff8021aa61:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff8021aa65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aa69:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
    /* Setup the register contents, and do the invocation */
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff8021aa70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aa74:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021aa78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aa7c:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8021aa80:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8021aa84:	48 8b 89 88 00 00 00 	mov    0x88(%rcx),%rcx
ffffffff8021aa8b:	48 be ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rsi
ffffffff8021aa92:	ff ff 7f 
ffffffff8021aa95:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021aa98:	48 21 f7             	and    %rsi,%rdi
ffffffff8021aa9b:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff8021aa9f:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8021aaa3:	49 89 f0             	mov    %rsi,%r8
ffffffff8021aaa6:	48 89 c6             	mov    %rax,%rsi
ffffffff8021aaa9:	e8 75 b4 00 00       	call   ffffffff80225f23 <__RME_Thd_Reg_Init>
    /* We are assuming that we are always invoking into a new process (why use synchronous
     * invocation if you don't do so?). So we always switch page tables regardless. */
#if(RME_PGT_RAW_ENABLE==0U)
    RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
    RME_DBG_S("\r\nInit page table address:");
ffffffff8021aaae:	48 c7 c7 6f 94 22 80 	mov    $0xffffffff8022946f,%rdi
ffffffff8021aab5:	e8 51 1f ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_CAP_GETOBJ(Invocation->Prc->Pgt,rme_ptr_t));
ffffffff8021aaba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aabe:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021aac2:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021aac6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021aaca:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aacd:	e8 77 1e ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
    __RME_Pgt_Set(RME_CAP_GETOBJ(Invocation->Prc->Pgt,rme_ptr_t));
ffffffff8021aad2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aad6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021aada:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021aade:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021aae2:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aae5:	e8 75 be 00 00       	call   ffffffff8022695f <__RME_Pgt_Set>
    return 0;
ffffffff8021aaea:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021aaef:	c9                   	leave  
ffffffff8021aaf0:	c3                   	ret    

ffffffff8021aaf1 <_RME_Inv_Ret>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Ret(struct RME_Reg_Struct* Reg,
                              rme_ptr_t Retval,
                              rme_ptr_t Is_Exc)
{
ffffffff8021aaf1:	f3 0f 1e fa          	endbr64 
ffffffff8021aaf5:	55                   	push   %rbp
ffffffff8021aaf6:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021aaf9:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021aafd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021ab01:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021ab05:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;

    /* See if we can return; If we can, get the structure */
    Thread=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8021ab09:	e8 31 0d ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021ab0e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021ab12:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8021ab16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ab1a:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021ab21:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021ab25:	48 81 c2 98 00 00 00 	add    $0x98,%rdx
ffffffff8021ab2c:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021ab2f:	74 0d                	je     ffffffff8021ab3e <_RME_Inv_Ret+0x4d>
ffffffff8021ab31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ab35:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021ab3c:	eb 05                	jmp    ffffffff8021ab43 <_RME_Inv_Ret+0x52>
ffffffff8021ab3e:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021ab43:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(RME_UNLIKELY(Invocation==(void*)RME_NULL))
ffffffff8021ab47:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021ab4c:	0f 94 c0             	sete   %al
ffffffff8021ab4f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ab52:	48 85 c0             	test   %rax,%rax
ffffffff8021ab55:	74 0c                	je     ffffffff8021ab63 <_RME_Inv_Ret+0x72>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_EMPTY;
ffffffff8021ab57:	48 c7 c0 d0 fe ff ff 	mov    $0xfffffffffffffed0,%rax
ffffffff8021ab5e:	e9 39 01 00 00       	jmp    ffffffff8021ac9c <_RME_Inv_Ret+0x1ab>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if this port allows return-on-fault */
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8021ab63:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8021ab68:	0f 95 c0             	setne  %al
ffffffff8021ab6b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ab6e:	48 85 c0             	test   %rax,%rax
ffffffff8021ab71:	74 22                	je     ffffffff8021ab95 <_RME_Inv_Ret+0xa4>
ffffffff8021ab73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ab77:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021ab7b:	48 85 c0             	test   %rax,%rax
ffffffff8021ab7e:	0f 94 c0             	sete   %al
ffffffff8021ab81:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ab84:	48 85 c0             	test   %rax,%rax
ffffffff8021ab87:	74 0c                	je     ffffffff8021ab95 <_RME_Inv_Ret+0xa4>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_FAULT;
ffffffff8021ab89:	48 c7 c0 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rax
ffffffff8021ab90:	e9 07 01 00 00       	jmp    ffffffff8021ac9c <_RME_Inv_Ret+0x1ab>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Pop it from the stack */
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8021ab95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ab99:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021ab9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aba0:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021aba4:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021aba7:	48 89 c7             	mov    %rax,%rdi
ffffffff8021abaa:	e8 d5 21 ff ff       	call   ffffffff8020cd84 <_RME_List_Del>
    /* Decrease invocation depth - no atomic operation needed */
    Thread->Ctx.Invstk_Depth--;
ffffffff8021abaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021abb3:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff8021abba:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8021abbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021abc2:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well. */
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8021abc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021abcd:	48 8d 50 38          	lea    0x38(%rax),%rdx
ffffffff8021abd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021abd5:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021abd8:	48 89 c7             	mov    %rax,%rdi
ffffffff8021abdb:	e8 f2 b5 00 00       	call   ffffffff802261d2 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8021abe0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021abe4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021abe8:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021abeb:	48 89 c7             	mov    %rax,%rdi
ffffffff8021abee:	e8 a0 c6 00 00       	call   ffffffff80227293 <__RME_Inv_Retval_Set>

    /* We have successfully returned, set the invocation as inactive. We need
     * a barrier here to avoid potential destruction of the return value. */
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8021abf3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021abf7:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021abfe:	00 

    /* Decide the system call's return value */
    if(RME_UNLIKELY(Is_Exc!=0U))
ffffffff8021abff:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8021ac04:	0f 95 c0             	setne  %al
ffffffff8021ac07:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ac0a:	48 85 c0             	test   %rax,%rax
ffffffff8021ac0d:	74 15                	je     ffffffff8021ac24 <_RME_Inv_Ret+0x133>
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg, RME_ERR_SIV_FAULT);
ffffffff8021ac0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ac13:	48 c7 c6 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rsi
ffffffff8021ac1a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ac1d:	e8 4f c6 00 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
ffffffff8021ac22:	eb 11                	jmp    ffffffff8021ac35 <_RME_Inv_Ret+0x144>
    }
    else
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg,0);
ffffffff8021ac24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ac28:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021ac2d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ac30:	e8 3c c6 00 00       	call   ffffffff80227271 <__RME_Svc_Retval_Set>
    }

    /* Same assumptions as in invocation activation */
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8021ac35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ac39:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021ac40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021ac44:	48 81 c2 98 00 00 00 	add    $0x98,%rdx
ffffffff8021ac4b:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021ac4e:	74 0d                	je     ffffffff8021ac5d <_RME_Inv_Ret+0x16c>
ffffffff8021ac50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ac54:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021ac5b:	eb 05                	jmp    ffffffff8021ac62 <_RME_Inv_Ret+0x171>
ffffffff8021ac5d:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021ac62:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Invocation!=(void*)RME_NULL)
ffffffff8021ac66:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021ac6b:	74 16                	je     ffffffff8021ac83 <_RME_Inv_Ret+0x192>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8021ac6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ac71:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021ac75:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021ac79:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ac7c:	e8 de bc 00 00       	call   ffffffff8022695f <__RME_Pgt_Set>
ffffffff8021ac81:	eb 14                	jmp    ffffffff8021ac97 <_RME_Inv_Ret+0x1a6>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Thread->Sched.Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
ffffffff8021ac83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ac87:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021ac8b:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021ac8f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ac92:	e8 c8 bc 00 00       	call   ffffffff8022695f <__RME_Pgt_Set>
    }
    
    return 0;
ffffffff8021ac97:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021ac9c:	c9                   	leave  
ffffffff8021ac9d:	c3                   	ret    

ffffffff8021ac9e <_RME_Kfn_Boot_Crt>:
Return      : rme_ret_t - If successful, 0; or error code.
******************************************************************************/
rme_ret_t _RME_Kfn_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Kfn)
{
ffffffff8021ac9e:	f3 0f 1e fa          	endbr64 
ffffffff8021aca2:	55                   	push   %rbp
ffffffff8021aca3:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021aca6:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8021acaa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021acae:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021acb2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Kfn* Kfn_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021acb6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021acba:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021acbf:	48 85 c0             	test   %rax,%rax
ffffffff8021acc2:	0f 85 98 00 00 00    	jne    ffffffff8021ad60 <_RME_Kfn_Boot_Crt+0xc2>
ffffffff8021acc8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021accc:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021acd0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021acd4:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021acd7:	0f 96 c0             	setbe  %al
ffffffff8021acda:	0f b6 c0             	movzbl %al,%eax
ffffffff8021acdd:	48 85 c0             	test   %rax,%rax
ffffffff8021ace0:	74 0c                	je     ffffffff8021acee <_RME_Kfn_Boot_Crt+0x50>
ffffffff8021ace2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ace9:	e9 98 02 00 00       	jmp    ffffffff8021af86 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021acee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021acf2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021acf6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021acf9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021acfd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021ad01:	48 01 d0             	add    %rdx,%rax
ffffffff8021ad04:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021ad08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ad0c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021ad0f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021ad13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ad17:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ad1b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021ad1e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021ad22:	0f 94 c0             	sete   %al
ffffffff8021ad25:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad28:	48 85 c0             	test   %rax,%rax
ffffffff8021ad2b:	74 0c                	je     ffffffff8021ad39 <_RME_Kfn_Boot_Crt+0x9b>
ffffffff8021ad2d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021ad34:	e9 4d 02 00 00       	jmp    ffffffff8021af86 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ad39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ad3d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021ad41:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ad45:	0f 95 c0             	setne  %al
ffffffff8021ad48:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad4b:	48 85 c0             	test   %rax,%rax
ffffffff8021ad4e:	0f 84 4c 01 00 00    	je     ffffffff8021aea0 <_RME_Kfn_Boot_Crt+0x202>
ffffffff8021ad54:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ad5b:	e9 26 02 00 00       	jmp    ffffffff8021af86 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ad60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ad64:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ad68:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ad6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ad6f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ad73:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ad76:	0f 93 c0             	setae  %al
ffffffff8021ad79:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad7c:	48 85 c0             	test   %rax,%rax
ffffffff8021ad7f:	74 0c                	je     ffffffff8021ad8d <_RME_Kfn_Boot_Crt+0xef>
ffffffff8021ad81:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ad88:	e9 f9 01 00 00       	jmp    ffffffff8021af86 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ad8d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ad91:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ad95:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ad99:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ad9c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ada0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021ada4:	48 01 d0             	add    %rdx,%rax
ffffffff8021ada7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021adab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021adaf:	48 8b 00             	mov    (%rax),%rax
ffffffff8021adb2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021adb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021adba:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021adbe:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021adc1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021adc5:	0f 94 c0             	sete   %al
ffffffff8021adc8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021adcb:	48 85 c0             	test   %rax,%rax
ffffffff8021adce:	74 0c                	je     ffffffff8021addc <_RME_Kfn_Boot_Crt+0x13e>
ffffffff8021add0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021add7:	e9 aa 01 00 00       	jmp    ffffffff8021af86 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021addc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ade0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021ade4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ade8:	0f 95 c0             	setne  %al
ffffffff8021adeb:	0f b6 c0             	movzbl %al,%eax
ffffffff8021adee:	48 85 c0             	test   %rax,%rax
ffffffff8021adf1:	74 0c                	je     ffffffff8021adff <_RME_Kfn_Boot_Crt+0x161>
ffffffff8021adf3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021adfa:	e9 87 01 00 00       	jmp    ffffffff8021af86 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021adff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ae03:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021ae08:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ae0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ae0f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ae13:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ae16:	0f 93 c0             	setae  %al
ffffffff8021ae19:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ae1c:	48 85 c0             	test   %rax,%rax
ffffffff8021ae1f:	74 0c                	je     ffffffff8021ae2d <_RME_Kfn_Boot_Crt+0x18f>
ffffffff8021ae21:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ae28:	e9 59 01 00 00       	jmp    ffffffff8021af86 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ae2d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ae31:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021ae36:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ae3a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ae3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ae41:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021ae45:	48 01 d0             	add    %rdx,%rax
ffffffff8021ae48:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021ae4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ae50:	48 8b 00             	mov    (%rax),%rax
ffffffff8021ae53:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021ae57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ae5b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ae5f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021ae62:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021ae66:	0f 94 c0             	sete   %al
ffffffff8021ae69:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ae6c:	48 85 c0             	test   %rax,%rax
ffffffff8021ae6f:	74 0c                	je     ffffffff8021ae7d <_RME_Kfn_Boot_Crt+0x1df>
ffffffff8021ae71:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021ae78:	e9 09 01 00 00       	jmp    ffffffff8021af86 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ae7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ae81:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021ae85:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ae89:	0f 95 c0             	setne  %al
ffffffff8021ae8c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ae8f:	48 85 c0             	test   %rax,%rax
ffffffff8021ae92:	74 0c                	je     ffffffff8021aea0 <_RME_Kfn_Boot_Crt+0x202>
ffffffff8021ae94:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ae9b:	e9 e6 00 00 00       	jmp    ffffffff8021af86 <_RME_Kfn_Boot_Crt+0x2e8>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8021aea0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aea4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021aea8:	83 e0 01             	and    $0x1,%eax
ffffffff8021aeab:	48 85 c0             	test   %rax,%rax
ffffffff8021aeae:	0f 94 c0             	sete   %al
ffffffff8021aeb1:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aeb4:	48 85 c0             	test   %rax,%rax
ffffffff8021aeb7:	74 0c                	je     ffffffff8021aec5 <_RME_Kfn_Boot_Crt+0x227>
ffffffff8021aeb9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021aec0:	e9 c1 00 00 00       	jmp    ffffffff8021af86 <_RME_Kfn_Boot_Crt+0x2e8>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kfn,struct RME_Cap_Kfn*,Kfn_Crt);
ffffffff8021aec5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aec9:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021aecd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021aed1:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021aed4:	0f 96 c0             	setbe  %al
ffffffff8021aed7:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aeda:	48 85 c0             	test   %rax,%rax
ffffffff8021aedd:	74 0c                	je     ffffffff8021aeeb <_RME_Kfn_Boot_Crt+0x24d>
ffffffff8021aedf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021aee6:	e9 9b 00 00 00       	jmp    ffffffff8021af86 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021aeeb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021aeef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021aef3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021aef6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aefa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021aefe:	48 01 d0             	add    %rdx,%rax
ffffffff8021af01:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff8021af05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af09:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021af10:	00 00 00 
ffffffff8021af13:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021af18:	48 89 c7             	mov    %rax,%rdi
ffffffff8021af1b:	e8 3e 18 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021af20:	48 85 c0             	test   %rax,%rax
ffffffff8021af23:	0f 94 c0             	sete   %al
ffffffff8021af26:	0f b6 c0             	movzbl %al,%eax
ffffffff8021af29:	48 85 c0             	test   %rax,%rax
ffffffff8021af2c:	74 09                	je     ffffffff8021af37 <_RME_Kfn_Boot_Crt+0x299>
ffffffff8021af2e:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021af35:	eb 4f                	jmp    ffffffff8021af86 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021af37:	48 8b 15 c2 00 01 00 	mov    0x100c2(%rip),%rdx        # ffffffff8022b000 <RME_x64_timestamp>
ffffffff8021af3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af42:	48 89 50 20          	mov    %rdx,0x20(%rax)
    
    /* Header init */
    Kfn_Crt->Head.Root_Ref=1U;
ffffffff8021af46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af4a:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8021af51:	00 
    Kfn_Crt->Head.Object=0U;
ffffffff8021af52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af56:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021af5d:	00 
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff8021af5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af62:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
ffffffff8021af69:	ff ff ff 
ffffffff8021af6c:	48 89 48 10          	mov    %rcx,0x10(%rax)
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Kfn_Crt->Head.Type_Stat),
ffffffff8021af70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af74:	48 b9 00 00 00 00 00 	movabs $0x1000000000000,%rcx
ffffffff8021af7b:	00 01 00 
ffffffff8021af7e:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_KFN,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8021af81:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021af86:	c9                   	leave  
ffffffff8021af87:	c3                   	ret    

ffffffff8021af88 <_RME_Kfn_Act>:
                              rme_cid_t Cap_Kfn,
                              rme_ptr_t Func_ID,
                              rme_ptr_t Sub_ID,
                              rme_ptr_t Param1,
                              rme_ptr_t Param2)
{
ffffffff8021af88:	f3 0f 1e fa          	endbr64 
ffffffff8021af8c:	55                   	push   %rbp
ffffffff8021af8d:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021af90:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021af94:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021af98:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021af9c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff8021afa0:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff8021afa4:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff8021afa8:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
    struct RME_Cap_Kfn* Kfn_Op;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff8021afac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021afb0:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021afb5:	48 85 c0             	test   %rax,%rax
ffffffff8021afb8:	0f 85 98 00 00 00    	jne    ffffffff8021b056 <_RME_Kfn_Act+0xce>
ffffffff8021afbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021afc2:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021afc6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021afca:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021afcd:	0f 96 c0             	setbe  %al
ffffffff8021afd0:	0f b6 c0             	movzbl %al,%eax
ffffffff8021afd3:	48 85 c0             	test   %rax,%rax
ffffffff8021afd6:	74 0c                	je     ffffffff8021afe4 <_RME_Kfn_Act+0x5c>
ffffffff8021afd8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021afdf:	e9 fa 01 00 00       	jmp    ffffffff8021b1de <_RME_Kfn_Act+0x256>
ffffffff8021afe4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021afe8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021afec:	48 89 c2             	mov    %rax,%rdx
ffffffff8021afef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aff3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021aff7:	48 01 d0             	add    %rdx,%rax
ffffffff8021affa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021affe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b002:	48 8b 00             	mov    (%rax),%rax
ffffffff8021b005:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021b009:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b00d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021b011:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b014:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021b018:	0f 94 c0             	sete   %al
ffffffff8021b01b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b01e:	48 85 c0             	test   %rax,%rax
ffffffff8021b021:	74 0c                	je     ffffffff8021b02f <_RME_Kfn_Act+0xa7>
ffffffff8021b023:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021b02a:	e9 af 01 00 00       	jmp    ffffffff8021b1de <_RME_Kfn_Act+0x256>
ffffffff8021b02f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b033:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021b037:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021b03b:	0f 95 c0             	setne  %al
ffffffff8021b03e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b041:	48 85 c0             	test   %rax,%rax
ffffffff8021b044:	0f 84 46 01 00 00    	je     ffffffff8021b190 <_RME_Kfn_Act+0x208>
ffffffff8021b04a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021b051:	e9 88 01 00 00       	jmp    ffffffff8021b1de <_RME_Kfn_Act+0x256>
ffffffff8021b056:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b05a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021b05e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b061:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b065:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021b069:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b06c:	0f 93 c0             	setae  %al
ffffffff8021b06f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b072:	48 85 c0             	test   %rax,%rax
ffffffff8021b075:	74 0c                	je     ffffffff8021b083 <_RME_Kfn_Act+0xfb>
ffffffff8021b077:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021b07e:	e9 5b 01 00 00       	jmp    ffffffff8021b1de <_RME_Kfn_Act+0x256>
ffffffff8021b083:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b087:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021b08b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021b08f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b092:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b096:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021b09a:	48 01 d0             	add    %rdx,%rax
ffffffff8021b09d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021b0a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b0a5:	48 8b 00             	mov    (%rax),%rax
ffffffff8021b0a8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021b0ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b0b0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021b0b4:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b0b7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021b0bb:	0f 94 c0             	sete   %al
ffffffff8021b0be:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b0c1:	48 85 c0             	test   %rax,%rax
ffffffff8021b0c4:	74 0c                	je     ffffffff8021b0d2 <_RME_Kfn_Act+0x14a>
ffffffff8021b0c6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021b0cd:	e9 0c 01 00 00       	jmp    ffffffff8021b1de <_RME_Kfn_Act+0x256>
ffffffff8021b0d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b0d6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021b0da:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021b0de:	0f 95 c0             	setne  %al
ffffffff8021b0e1:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b0e4:	48 85 c0             	test   %rax,%rax
ffffffff8021b0e7:	74 0c                	je     ffffffff8021b0f5 <_RME_Kfn_Act+0x16d>
ffffffff8021b0e9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021b0f0:	e9 e9 00 00 00       	jmp    ffffffff8021b1de <_RME_Kfn_Act+0x256>
ffffffff8021b0f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b0f9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021b0fe:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b105:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021b109:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b10c:	0f 93 c0             	setae  %al
ffffffff8021b10f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b112:	48 85 c0             	test   %rax,%rax
ffffffff8021b115:	74 0c                	je     ffffffff8021b123 <_RME_Kfn_Act+0x19b>
ffffffff8021b117:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021b11e:	e9 bb 00 00 00       	jmp    ffffffff8021b1de <_RME_Kfn_Act+0x256>
ffffffff8021b123:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b127:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021b12c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021b130:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b137:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021b13b:	48 01 d0             	add    %rdx,%rax
ffffffff8021b13e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021b142:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b146:	48 8b 00             	mov    (%rax),%rax
ffffffff8021b149:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021b14d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b151:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021b155:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b158:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021b15c:	0f 94 c0             	sete   %al
ffffffff8021b15f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b162:	48 85 c0             	test   %rax,%rax
ffffffff8021b165:	74 09                	je     ffffffff8021b170 <_RME_Kfn_Act+0x1e8>
ffffffff8021b167:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021b16e:	eb 6e                	jmp    ffffffff8021b1de <_RME_Kfn_Act+0x256>
ffffffff8021b170:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b174:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021b178:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021b17c:	0f 95 c0             	setne  %al
ffffffff8021b17f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b182:	48 85 c0             	test   %rax,%rax
ffffffff8021b185:	74 09                	je     ffffffff8021b190 <_RME_Kfn_Act+0x208>
ffffffff8021b187:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021b18e:	eb 4e                	jmp    ffffffff8021b1de <_RME_Kfn_Act+0x256>
                   struct RME_Cap_Kfn*,Kfn_Op,Type_Stat);    

    /* Check if the range of calling is allowed - kernel function specific */
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021b190:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b194:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021b198:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021b19c:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff8021b1a0:	77 10                	ja     ffffffff8021b1b2 <_RME_Kfn_Act+0x22a>
       (Func_ID<RME_KFN_FLAG_LOW(Kfn_Op->Head.Flag)))
ffffffff8021b1a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b1a6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021b1aa:	89 c0                	mov    %eax,%eax
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021b1ac:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff8021b1b0:	73 09                	jae    ffffffff8021b1bb <_RME_Kfn_Act+0x233>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff8021b1b2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021b1b9:	eb 23                	jmp    ffffffff8021b1de <_RME_Kfn_Act+0x256>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Return whatever the function returns */
    return __RME_Kfn_Handler(Cpt,Reg,Func_ID,Sub_ID,Param1,Param2);
ffffffff8021b1bb:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8021b1bf:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8021b1c3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021b1c7:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff8021b1cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b1cf:	4c 8b 4d 10          	mov    0x10(%rbp),%r9
ffffffff8021b1d3:	49 89 f8             	mov    %rdi,%r8
ffffffff8021b1d6:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b1d9:	e8 75 00 00 00       	call   ffffffff8021b253 <__RME_Kfn_Handler>
}
ffffffff8021b1de:	c9                   	leave  
ffffffff8021b1df:	c3                   	ret    

ffffffff8021b1e0 <_RME_X64_Comp_Swap>:
{
ffffffff8021b1e0:	55                   	push   %rbp
ffffffff8021b1e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b1e4:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8021b1e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021b1ec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021b1f0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021b1f4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021b1f8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8021b1fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b200:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8021b204:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021b209:	0f 94 c0             	sete   %al
ffffffff8021b20c:	88 45 ff             	mov    %al,-0x1(%rbp)
	return (rme_ptr_t)Zero;
ffffffff8021b20f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
ffffffff8021b213:	c9                   	leave  
ffffffff8021b214:	c3                   	ret    

ffffffff8021b215 <main>:
Input       : rme_ptr_t MBInfo - The multiboot information structure's physical address.
Output      : None.
Return      : int - This function never returns.
******************************************************************************/
int main(rme_ptr_t MBInfo)
{
ffffffff8021b215:	f3 0f 1e fa          	endbr64 
ffffffff8021b219:	55                   	push   %rbp
ffffffff8021b21a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b21d:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8021b221:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021b225:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8021b22c:	80 ff ff 
ffffffff8021b22f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b233:	48 01 d0             	add    %rdx,%rax
ffffffff8021b236:	48 89 05 eb 7d 01 00 	mov    %rax,0x17deb(%rip)        # ffffffff80233028 <RME_X64_MBInfo>
    /* The main function of the kernel - we will start our kernel boot here */
    _RME_Kmain(RME_KOM_STACK_ADDR);
ffffffff8021b23d:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
ffffffff8021b244:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b247:	e8 67 06 ff ff       	call   ffffffff8020b8b3 <_RME_Kmain>
    return 0;
ffffffff8021b24c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b251:	c9                   	leave  
ffffffff8021b252:	c3                   	ret    

ffffffff8021b253 <__RME_Kfn_Handler>:
/* End Function:main *********************************************************/


/* Function: __RME_Kfn_Handler ************************************************/
rme_ret_t __RME_Kfn_Handler(struct RME_Cap_Cpt* Cpt, struct RME_Reg_Struct* Reg,rme_ptr_t FuncID, rme_ptr_t SubID,rme_ptr_t Param1, rme_ptr_t Param2)
{
ffffffff8021b253:	f3 0f 1e fa          	endbr64 
ffffffff8021b257:	55                   	push   %rbp
ffffffff8021b258:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b25b:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021b25f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8021b263:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8021b267:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8021b26b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff8021b26f:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
ffffffff8021b273:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    RME_DBG_S("\nSystem call successfully processed!");
ffffffff8021b277:	48 c7 c7 88 98 22 80 	mov    $0xffffffff80229888,%rdi
ffffffff8021b27e:	e8 88 17 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    return 0;
ffffffff8021b283:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b288:	c9                   	leave  
ffffffff8021b289:	c3                   	ret    

ffffffff8021b28a <__RME_Putchar>:
Input       : char Char - The character to print.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Putchar(char Char)
{
ffffffff8021b28a:	f3 0f 1e fa          	endbr64 
ffffffff8021b28e:	55                   	push   %rbp
ffffffff8021b28f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b292:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8021b296:	89 f8                	mov    %edi,%eax
ffffffff8021b298:	88 45 fc             	mov    %al,-0x4(%rbp)
    //if(RME_X64_UART_Exist==0)
     //   return 0;
    /* Wait until we have transmitted */

    while((__RME_X64_In(RME_X64_COM1+5)&0x20)==0);
ffffffff8021b29b:	90                   	nop
ffffffff8021b29c:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff8021b2a1:	e8 5a 05 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff8021b2a6:	83 e0 20             	and    $0x20,%eax
ffffffff8021b2a9:	48 85 c0             	test   %rax,%rax
ffffffff8021b2ac:	74 ee                	je     ffffffff8021b29c <__RME_Putchar+0x12>
    __RME_X64_Out(RME_X64_COM1, Char);
ffffffff8021b2ae:	48 0f be 45 fc       	movsbq -0x4(%rbp),%rax
ffffffff8021b2b3:	48 89 c6             	mov    %rax,%rsi
ffffffff8021b2b6:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8021b2bb:	e8 4a 05 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>

    return 0;
ffffffff8021b2c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b2c5:	c9                   	leave  
ffffffff8021b2c6:	c3                   	ret    

ffffffff8021b2c7 <__RME_X64_UART_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_UART_Init(void)
{
ffffffff8021b2c7:	f3 0f 1e fa          	endbr64 
ffffffff8021b2cb:	55                   	push   %rbp
ffffffff8021b2cc:	48 89 e5             	mov    %rsp,%rbp
    /* Disable interrupts */
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021b2cf:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b2d4:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff8021b2d9:	e8 2c 05 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    /* Unlock divisor */
    __RME_X64_Out(RME_X64_COM1+3, 0x80);
ffffffff8021b2de:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff8021b2e3:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff8021b2e8:	e8 1d 05 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    /* Set baudrate - on some computer, the hardware only support this reliably */
    __RME_X64_Out(RME_X64_COM1+0, 115200/9600);
ffffffff8021b2ed:	be 0c 00 00 00       	mov    $0xc,%esi
ffffffff8021b2f2:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8021b2f7:	e8 0e 05 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021b2fc:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b301:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff8021b306:	e8 ff 04 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    /* Lock divisor, 8 data bits, 1 stop bit, parity off */
    __RME_X64_Out(RME_X64_COM1+3, 0x03);
ffffffff8021b30b:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021b310:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff8021b315:	e8 f0 04 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    /* Turn on the FIFO */
    __RME_X64_Out(RME_X64_COM1+2, 0xC7);
ffffffff8021b31a:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff8021b31f:	bf fa 03 00 00       	mov    $0x3fa,%edi
ffffffff8021b324:	e8 e1 04 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    /* Turn off all model control, fully asynchronous */
    __RME_X64_Out(RME_X64_COM1+4, 0);
ffffffff8021b329:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b32e:	bf fc 03 00 00       	mov    $0x3fc,%edi
ffffffff8021b333:	e8 d2 04 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* If status is 0xFF, no serial port */
    if(__RME_X64_In(RME_X64_COM1+5)==0xFF)
ffffffff8021b338:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff8021b33d:	e8 be 04 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff8021b342:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff8021b348:	75 0d                	jne    ffffffff8021b357 <__RME_X64_UART_Init+0x90>
        RME_X64_UART_Exist=0;
ffffffff8021b34a:	48 c7 05 cb 7c 01 00 	movq   $0x0,0x17ccb(%rip)        # ffffffff80233020 <RME_X64_UART_Exist>
ffffffff8021b351:	00 00 00 00 
    else
        RME_X64_UART_Exist=1;
}
ffffffff8021b355:	eb 0b                	jmp    ffffffff8021b362 <__RME_X64_UART_Init+0x9b>
        RME_X64_UART_Exist=1;
ffffffff8021b357:	48 c7 05 be 7c 01 00 	movq   $0x1,0x17cbe(%rip)        # ffffffff80233020 <RME_X64_UART_Exist>
ffffffff8021b35e:	01 00 00 00 
}
ffffffff8021b362:	90                   	nop
ffffffff8021b363:	5d                   	pop    %rbp
ffffffff8021b364:	c3                   	ret    

ffffffff8021b365 <__RME_X64_RDSP_Scan>:
              rme_ptr_t Base - The length of the memory segment.
Output      : None.
Return      : struct RME_X64_ACPI_RDSP_Desc* - The descriptor physical address.
******************************************************************************/
struct RME_X64_ACPI_RDSP_Desc* __RME_X64_RDSP_Scan(rme_ptr_t Base, rme_ptr_t Len)
{
ffffffff8021b365:	f3 0f 1e fa          	endbr64 
ffffffff8021b369:	55                   	push   %rbp
ffffffff8021b36a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b36d:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021b371:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021b375:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    rme_u8_t* Pos;
    rme_cnt_t Count;
    rme_ptr_t Checksum;
    rme_cnt_t Check_Cnt;
    Pos=(rme_u8_t*)RME_X64_PA2VA(Base);
ffffffff8021b379:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8021b380:	80 ff ff 
ffffffff8021b383:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b387:	48 01 d0             	add    %rdx,%rax
ffffffff8021b38a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Search a word at a time */
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff8021b38e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021b395:	00 
ffffffff8021b396:	eb 7f                	jmp    ffffffff8021b417 <__RME_X64_RDSP_Scan+0xb2>
    {
        /* It seemed that we have found one. See if the checksum is good */
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff8021b398:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b39c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b3a0:	48 01 d0             	add    %rdx,%rax
ffffffff8021b3a3:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8021b3a8:	48 c7 c6 ad 98 22 80 	mov    $0xffffffff802298ad,%rsi
ffffffff8021b3af:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b3b2:	e8 83 1a ff ff       	call   ffffffff8020ce3a <_RME_Memcmp>
ffffffff8021b3b7:	48 85 c0             	test   %rax,%rax
ffffffff8021b3ba:	75 56                	jne    ffffffff8021b412 <__RME_X64_RDSP_Scan+0xad>
        {
            //RME_DBG_H((rme_ptr_t)(Pos[Count+15]));
            Checksum=0;
ffffffff8021b3bc:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021b3c3:	00 
            /* 20 is the length of the first part of the table */
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff8021b3c4:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021b3cb:	00 
ffffffff8021b3cc:	eb 24                	jmp    ffffffff8021b3f2 <__RME_X64_RDSP_Scan+0x8d>
            {
                Checksum+=( rme_ptr_t)Pos[Count+Check_Cnt];
ffffffff8021b3ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b3d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b3d6:	48 01 d0             	add    %rdx,%rax
ffffffff8021b3d9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b3dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b3e0:	48 01 d0             	add    %rdx,%rax
ffffffff8021b3e3:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b3e6:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b3e9:	48 01 45 f0          	add    %rax,-0x10(%rbp)
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff8021b3ed:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff8021b3f2:	48 83 7d e8 13       	cmpq   $0x13,-0x18(%rbp)
ffffffff8021b3f7:	7e d5                	jle    ffffffff8021b3ce <__RME_X64_RDSP_Scan+0x69>
            }
            /* Is the checksum good? */
            if((Checksum&0xFF)==0)
ffffffff8021b3f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b3fd:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b400:	48 85 c0             	test   %rax,%rax
ffffffff8021b403:	75 0d                	jne    ffffffff8021b412 <__RME_X64_RDSP_Scan+0xad>
            {
                return (struct RME_X64_ACPI_RDSP_Desc*)&(Pos[Count]);
ffffffff8021b405:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b409:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b40d:	48 01 d0             	add    %rdx,%rax
ffffffff8021b410:	eb 1f                	jmp    ffffffff8021b431 <__RME_X64_RDSP_Scan+0xcc>
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff8021b412:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
ffffffff8021b417:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b41b:	48 8d 50 dc          	lea    -0x24(%rax),%rdx
ffffffff8021b41f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b423:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b426:	0f 83 6c ff ff ff    	jae    ffffffff8021b398 <__RME_X64_RDSP_Scan+0x33>
            }
        }
    }
    return 0;
ffffffff8021b42c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b431:	c9                   	leave  
ffffffff8021b432:	c3                   	ret    

ffffffff8021b433 <__RME_X64_RDSP_Find>:
Input       : None.
Output      : None.
Return      : struct RME_X64_ACPI_RDSP_Desc* - The descriptor address.
******************************************************************************/
struct RME_X64_ACPI_RDSP_Desc*__RME_X64_RDSP_Find(void)
{
ffffffff8021b433:	f3 0f 1e fa          	endbr64 
ffffffff8021b437:	55                   	push   %rbp
ffffffff8021b438:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b43b:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_X64_ACPI_RDSP_Desc* RDSP;
    rme_ptr_t Paddr;
    /* 0x40E contains the address of Extended BIOS Data Area (EBDA). Let's try
     * to find the RDSP there first */
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff8021b43f:	48 b8 0e 04 00 00 00 	movabs $0xffff80000000040e,%rax
ffffffff8021b446:	80 ff ff 
ffffffff8021b449:	0f b7 00             	movzwl (%rax),%eax
ffffffff8021b44c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b44f:	c1 e0 04             	shl    $0x4,%eax
ffffffff8021b452:	48 98                	cltq   
ffffffff8021b454:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    if(Paddr!=0)
ffffffff8021b458:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8021b45d:	74 22                	je     ffffffff8021b481 <__RME_X64_RDSP_Find+0x4e>
    {
        RDSP=__RME_X64_RDSP_Scan(Paddr,1024);
ffffffff8021b45f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b463:	be 00 04 00 00       	mov    $0x400,%esi
ffffffff8021b468:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b46b:	e8 f5 fe ff ff       	call   ffffffff8021b365 <__RME_X64_RDSP_Scan>
ffffffff8021b470:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        /* Found */
        if(RDSP!=0)
ffffffff8021b474:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021b479:	74 06                	je     ffffffff8021b481 <__RME_X64_RDSP_Find+0x4e>
            return RDSP;
ffffffff8021b47b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b47f:	eb 0f                	jmp    ffffffff8021b490 <__RME_X64_RDSP_Find+0x5d>
    }

    /* If that fails, the RDSP must be here */
    return __RME_X64_RDSP_Scan(0xE0000, 0x20000);
ffffffff8021b481:	be 00 00 02 00       	mov    $0x20000,%esi
ffffffff8021b486:	bf 00 00 0e 00       	mov    $0xe0000,%edi
ffffffff8021b48b:	e8 d5 fe ff ff       	call   ffffffff8021b365 <__RME_X64_RDSP_Scan>
}
ffffffff8021b490:	c9                   	leave  
ffffffff8021b491:	c3                   	ret    

ffffffff8021b492 <__RME_X64_SMP_Detect>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
rme_ret_t __RME_X64_SMP_Detect(struct RME_X64_ACPI_MADT_Hdr* MADT)
{
ffffffff8021b492:	f3 0f 1e fa          	endbr64 
ffffffff8021b496:	55                   	push   %rbp
ffffffff8021b497:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b49a:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021b49e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    rme_ptr_t Length;
    rme_u8_t* Ptr;
    rme_u8_t* End;

    /* Is there a MADT? */
    if(MADT==0)
ffffffff8021b4a2:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8021b4a7:	75 0c                	jne    ffffffff8021b4b5 <__RME_X64_SMP_Detect+0x23>
        return -1;
ffffffff8021b4a9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b4b0:	e9 18 03 00 00       	jmp    ffffffff8021b7cd <__RME_X64_SMP_Detect+0x33b>
    /* Is the MADT valid? */
    if(MADT->Header.Length<sizeof(struct RME_X64_ACPI_MADT_Hdr))
ffffffff8021b4b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b4b9:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b4bc:	83 f8 2b             	cmp    $0x2b,%eax
ffffffff8021b4bf:	77 0c                	ja     ffffffff8021b4cd <__RME_X64_SMP_Detect+0x3b>
        return -1;
ffffffff8021b4c1:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b4c8:	e9 00 03 00 00       	jmp    ffffffff8021b7cd <__RME_X64_SMP_Detect+0x33b>

    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff8021b4cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b4d1:	8b 40 24             	mov    0x24(%rax),%eax
ffffffff8021b4d4:	89 c0                	mov    %eax,%eax
ffffffff8021b4d6:	48 89 05 43 8e 01 00 	mov    %rax,0x18e43(%rip)        # ffffffff80234320 <RME_X64_LAPIC_Addr>

    /* Where does the actual table contents start? */
    Ptr=MADT->Table;
ffffffff8021b4dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b4e1:	48 83 c0 2c          	add    $0x2c,%rax
ffffffff8021b4e5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Where does it end? */
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);
ffffffff8021b4e9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b4ed:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b4f0:	89 c0                	mov    %eax,%eax
ffffffff8021b4f2:	48 8d 50 d4          	lea    -0x2c(%rax),%rdx
ffffffff8021b4f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b4fa:	48 01 d0             	add    %rdx,%rax
ffffffff8021b4fd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    RME_X64_Num_IOAPIC=0;
ffffffff8021b501:	48 c7 05 b4 8d 01 00 	movq   $0x0,0x18db4(%rip)        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
ffffffff8021b508:	00 00 00 00 
    RME_X64_Num_CPU=0;
ffffffff8021b50c:	48 c7 05 91 7d 01 00 	movq   $0x0,0x17d91(%rip)        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021b513:	00 00 00 00 
    while(Ptr<End)
ffffffff8021b517:	e9 98 02 00 00       	jmp    ffffffff8021b7b4 <__RME_X64_SMP_Detect+0x322>
    {
        /* See if we have finished scanning the table */
        if((End-Ptr)<2)
ffffffff8021b51c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b520:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff8021b524:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021b528:	0f 8e 96 02 00 00    	jle    ffffffff8021b7c4 <__RME_X64_SMP_Detect+0x332>
            break;
        Length=Ptr[1];
ffffffff8021b52e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b532:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b536:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b539:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b53c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        if((End-Ptr)<Length)
ffffffff8021b540:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b544:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff8021b548:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8021b54c:	0f 87 75 02 00 00    	ja     ffffffff8021b7c7 <__RME_X64_SMP_Detect+0x335>
            break;

        /* See what is in the table */
        switch(Ptr[0])
ffffffff8021b552:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b556:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b559:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b55c:	83 f8 02             	cmp    $0x2,%eax
ffffffff8021b55f:	0f 84 a9 01 00 00    	je     ffffffff8021b70e <__RME_X64_SMP_Detect+0x27c>
ffffffff8021b565:	83 f8 02             	cmp    $0x2,%eax
ffffffff8021b568:	0f 8f 31 02 00 00    	jg     ffffffff8021b79f <__RME_X64_SMP_Detect+0x30d>
ffffffff8021b56e:	85 c0                	test   %eax,%eax
ffffffff8021b570:	74 0e                	je     ffffffff8021b580 <__RME_X64_SMP_Detect+0xee>
ffffffff8021b572:	83 f8 01             	cmp    $0x1,%eax
ffffffff8021b575:	0f 84 ba 00 00 00    	je     ffffffff8021b635 <__RME_X64_SMP_Detect+0x1a3>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);

                break;
            }
            /* All other types are ignored */
            default:break;
ffffffff8021b57b:	e9 1f 02 00 00       	jmp    ffffffff8021b79f <__RME_X64_SMP_Detect+0x30d>
                LAPIC=(struct RME_X64_ACPI_MADT_LAPIC_Record*)Ptr;
ffffffff8021b580:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b584:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_LAPIC_Record))
ffffffff8021b588:	48 83 7d e8 07       	cmpq   $0x7,-0x18(%rbp)
ffffffff8021b58d:	0f 86 0f 02 00 00    	jbe    ffffffff8021b7a2 <__RME_X64_SMP_Detect+0x310>
                if((LAPIC->Flags&RME_X64_APIC_LAPIC_ENABLED)==0)
ffffffff8021b593:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b597:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b59a:	83 e0 01             	and    $0x1,%eax
ffffffff8021b59d:	85 c0                	test   %eax,%eax
ffffffff8021b59f:	0f 84 00 02 00 00    	je     ffffffff8021b7a5 <__RME_X64_SMP_Detect+0x313>
                RME_DBG_S("\n\rACPI: CPU ");
ffffffff8021b5a5:	48 c7 c7 b6 98 22 80 	mov    $0xffffffff802298b6,%rdi
ffffffff8021b5ac:	e8 5a 14 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print((rme_cnt_t)RME_X64_Num_CPU);
ffffffff8021b5b1:	48 8b 05 f0 7c 01 00 	mov    0x17cf0(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021b5b8:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b5bb:	e8 51 12 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                RME_DBG_S(", LAPIC ID ");
ffffffff8021b5c0:	48 c7 c7 c3 98 22 80 	mov    $0xffffffff802298c3,%rdi
ffffffff8021b5c7:	e8 3f 14 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print(LAPIC->APIC_ID);
ffffffff8021b5cc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b5d0:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b5d4:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b5d7:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b5da:	e8 32 12 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                RME_X64_CPU_Info[RME_X64_Num_CPU].LAPIC_ID=LAPIC->APIC_ID;
ffffffff8021b5df:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b5e3:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b5e7:	48 8b 15 ba 7c 01 00 	mov    0x17cba(%rip),%rdx        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021b5ee:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b5f1:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff8021b5f5:	48 81 c2 c0 32 23 80 	add    $0xffffffff802332c0,%rdx
ffffffff8021b5fc:	48 89 02             	mov    %rax,(%rdx)
                RME_X64_CPU_Info[RME_X64_Num_CPU].Boot_Done=0;
ffffffff8021b5ff:	48 8b 05 a2 7c 01 00 	mov    0x17ca2(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021b606:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021b60a:	48 05 c8 32 23 80    	add    $0xffffffff802332c8,%rax
ffffffff8021b610:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
                RME_X64_Num_CPU++;
ffffffff8021b617:	48 8b 05 8a 7c 01 00 	mov    0x17c8a(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021b61e:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b622:	48 89 05 7f 7c 01 00 	mov    %rax,0x17c7f(%rip)        # ffffffff802332a8 <RME_X64_Num_CPU>
                RME_ASSERT(RME_X64_Num_CPU<=RME_X64_CPU_NUM);
ffffffff8021b629:	48 8b 05 78 7c 01 00 	mov    0x17c78(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
                break;
ffffffff8021b630:	e9 77 01 00 00       	jmp    ffffffff8021b7ac <__RME_X64_SMP_Detect+0x31a>
                IOAPIC=(struct RME_X64_ACPI_MADT_IOAPIC_Record*)Ptr;
ffffffff8021b635:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b639:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_IOAPIC_Record))
ffffffff8021b63d:	48 83 7d e8 0b       	cmpq   $0xb,-0x18(%rbp)
ffffffff8021b642:	0f 86 60 01 00 00    	jbe    ffffffff8021b7a8 <__RME_X64_SMP_Detect+0x316>
                RME_DBG_S("\n\rACPI: IOAPIC ");
ffffffff8021b648:	48 c7 c7 cf 98 22 80 	mov    $0xffffffff802298cf,%rdi
ffffffff8021b64f:	e8 b7 13 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print((rme_cnt_t)RME_X64_Num_IOAPIC);
ffffffff8021b654:	48 8b 05 65 8c 01 00 	mov    0x18c65(%rip),%rax        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
ffffffff8021b65b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b65e:	e8 ae 11 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                RME_DBG_S(" @ ");
ffffffff8021b663:	48 c7 c7 df 98 22 80 	mov    $0xffffffff802298df,%rdi
ffffffff8021b66a:	e8 9c 13 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Hex_Print(IOAPIC->Addr);
ffffffff8021b66f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b673:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b676:	89 c0                	mov    %eax,%eax
ffffffff8021b678:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b67b:	e8 c9 12 ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
                RME_DBG_S(", ID ");
ffffffff8021b680:	48 c7 c7 e3 98 22 80 	mov    $0xffffffff802298e3,%rdi
ffffffff8021b687:	e8 7f 13 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print(IOAPIC->ID);
ffffffff8021b68c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b690:	0f b6 40 02          	movzbl 0x2(%rax),%eax
ffffffff8021b694:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b697:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b69a:	e8 72 11 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                RME_DBG_S(", IBASE ");
ffffffff8021b69f:	48 c7 c7 e9 98 22 80 	mov    $0xffffffff802298e9,%rdi
ffffffff8021b6a6:	e8 60 13 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print(IOAPIC->Interrupt_Base);
ffffffff8021b6ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b6af:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff8021b6b2:	89 c0                	mov    %eax,%eax
ffffffff8021b6b4:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b6b7:	e8 55 11 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                if(RME_X64_Num_IOAPIC!=0)
ffffffff8021b6bc:	48 8b 05 fd 8b 01 00 	mov    0x18bfd(%rip),%rax        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
ffffffff8021b6c3:	48 85 c0             	test   %rax,%rax
ffffffff8021b6c6:	74 0e                	je     ffffffff8021b6d6 <__RME_X64_SMP_Detect+0x244>
                    RME_DBG_S("Warning: multiple ioapics are not supported - currently we will not initialize IOAPIC > 1\n");
ffffffff8021b6c8:	48 c7 c7 f8 98 22 80 	mov    $0xffffffff802298f8,%rdi
ffffffff8021b6cf:	e8 37 13 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8021b6d4:	eb 1a                	jmp    ffffffff8021b6f0 <__RME_X64_SMP_Detect+0x25e>
                    RME_X64_IOAPIC_Info[RME_X64_Num_IOAPIC].IOAPIC_ID=IOAPIC->ID;
ffffffff8021b6d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b6da:	0f b6 50 02          	movzbl 0x2(%rax),%edx
ffffffff8021b6de:	48 8b 05 db 8b 01 00 	mov    0x18bdb(%rip),%rax        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
ffffffff8021b6e5:	0f b6 d2             	movzbl %dl,%edx
ffffffff8021b6e8:	48 89 14 c5 e0 42 23 	mov    %rdx,-0x7fdcbd20(,%rax,8)
ffffffff8021b6ef:	80 
                RME_X64_Num_IOAPIC++;
ffffffff8021b6f0:	48 8b 05 c9 8b 01 00 	mov    0x18bc9(%rip),%rax        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
ffffffff8021b6f7:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b6fb:	48 89 05 be 8b 01 00 	mov    %rax,0x18bbe(%rip)        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
                RME_ASSERT(RME_X64_Num_IOAPIC<=RME_X64_IOAPIC_NUM);
ffffffff8021b702:	48 8b 05 b7 8b 01 00 	mov    0x18bb7(%rip),%rax        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
                break;
ffffffff8021b709:	e9 9e 00 00 00       	jmp    ffffffff8021b7ac <__RME_X64_SMP_Detect+0x31a>
                OVERRIDE=(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record*)Ptr;
ffffffff8021b70e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b712:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record))
ffffffff8021b716:	48 83 7d e8 06       	cmpq   $0x6,-0x18(%rbp)
ffffffff8021b71b:	0f 86 8a 00 00 00    	jbe    ffffffff8021b7ab <__RME_X64_SMP_Detect+0x319>
                RME_DBG_S("\n\rACPI: OVERRIDE Bus ");
ffffffff8021b721:	48 c7 c7 53 99 22 80 	mov    $0xffffffff80229953,%rdi
ffffffff8021b728:	e8 de 12 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print(OVERRIDE->Bus);
ffffffff8021b72d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b731:	0f b6 40 02          	movzbl 0x2(%rax),%eax
ffffffff8021b735:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b738:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b73b:	e8 d1 10 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                RME_DBG_S(", Source ");
ffffffff8021b740:	48 c7 c7 69 99 22 80 	mov    $0xffffffff80229969,%rdi
ffffffff8021b747:	e8 bf 12 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Hex_Print(OVERRIDE->Source);
ffffffff8021b74c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b750:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b754:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b757:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b75a:	e8 ea 11 ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
                RME_DBG_S(", GSI ");
ffffffff8021b75f:	48 c7 c7 73 99 22 80 	mov    $0xffffffff80229973,%rdi
ffffffff8021b766:	e8 a0 12 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print(OVERRIDE->GS_Interrupt);
ffffffff8021b76b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b76f:	0f b6 40 04          	movzbl 0x4(%rax),%eax
ffffffff8021b773:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b776:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b779:	e8 93 10 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                RME_DBG_S(", Flags ");
ffffffff8021b77e:	48 c7 c7 7a 99 22 80 	mov    $0xffffffff8022997a,%rdi
ffffffff8021b785:	e8 81 12 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);
ffffffff8021b78a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b78e:	0f b7 40 05          	movzwl 0x5(%rax),%eax
ffffffff8021b792:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b795:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b798:	e8 74 10 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                break;
ffffffff8021b79d:	eb 0d                	jmp    ffffffff8021b7ac <__RME_X64_SMP_Detect+0x31a>
            default:break;
ffffffff8021b79f:	90                   	nop
ffffffff8021b7a0:	eb 0a                	jmp    ffffffff8021b7ac <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b7a2:	90                   	nop
ffffffff8021b7a3:	eb 07                	jmp    ffffffff8021b7ac <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b7a5:	90                   	nop
ffffffff8021b7a6:	eb 04                	jmp    ffffffff8021b7ac <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b7a8:	90                   	nop
ffffffff8021b7a9:	eb 01                	jmp    ffffffff8021b7ac <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b7ab:	90                   	nop
        }
        
        Ptr+=Length;
ffffffff8021b7ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b7b0:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    while(Ptr<End)
ffffffff8021b7b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b7b8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8021b7bc:	0f 82 5a fd ff ff    	jb     ffffffff8021b51c <__RME_X64_SMP_Detect+0x8a>
ffffffff8021b7c2:	eb 04                	jmp    ffffffff8021b7c8 <__RME_X64_SMP_Detect+0x336>
            break;
ffffffff8021b7c4:	90                   	nop
ffffffff8021b7c5:	eb 01                	jmp    ffffffff8021b7c8 <__RME_X64_SMP_Detect+0x336>
            break;
ffffffff8021b7c7:	90                   	nop
    }

    return 0;
ffffffff8021b7c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b7cd:	c9                   	leave  
ffffffff8021b7ce:	c3                   	ret    

ffffffff8021b7cf <__RME_X64_ACPI_Debug>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
void __RME_X64_ACPI_Debug(struct RME_X64_ACPI_Desc_Hdr *Header)
{
ffffffff8021b7cf:	f3 0f 1e fa          	endbr64 
ffffffff8021b7d3:	55                   	push   %rbp
ffffffff8021b7d4:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b7d7:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021b7db:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    rme_u8_t Creator[5];
    rme_ptr_t OEM_Rev;
    rme_ptr_t Creator_Rev;

    /* Copy everything into our buffer */
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff8021b7df:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8021b7e3:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
ffffffff8021b7e7:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b7ec:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b7ef:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b7f2:	e8 d3 16 ff ff       	call   ffffffff8020ceca <_RME_Memcpy>
    Signature[4]='\0';
ffffffff8021b7f7:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff8021b7fb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b7ff:	48 8d 48 0a          	lea    0xa(%rax),%rcx
ffffffff8021b803:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
ffffffff8021b807:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff8021b80c:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b80f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b812:	e8 b3 16 ff ff       	call   ffffffff8020ceca <_RME_Memcpy>
    ID[6]='\0';
ffffffff8021b817:	c6 45 ea 00          	movb   $0x0,-0x16(%rbp)
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff8021b81b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b81f:	48 8d 48 10          	lea    0x10(%rax),%rcx
ffffffff8021b823:	48 8d 45 db          	lea    -0x25(%rbp),%rax
ffffffff8021b827:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8021b82c:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b82f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b832:	e8 93 16 ff ff       	call   ffffffff8020ceca <_RME_Memcpy>
    Table_ID[8]='\0';
ffffffff8021b837:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff8021b83b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b83f:	48 8d 48 1c          	lea    0x1c(%rax),%rcx
ffffffff8021b843:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
ffffffff8021b847:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b84c:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b84f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b852:	e8 73 16 ff ff       	call   ffffffff8020ceca <_RME_Memcpy>
    Creator[4]='\0';
ffffffff8021b857:	c6 45 da 00          	movb   $0x0,-0x26(%rbp)

    OEM_Rev=Header->OEM_Revision;
ffffffff8021b85b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b85f:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff8021b862:	89 c0                	mov    %eax,%eax
ffffffff8021b864:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Creator_Rev=Header->Creator_Revision;
ffffffff8021b868:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b86c:	8b 40 20             	mov    0x20(%rax),%eax
ffffffff8021b86f:	89 c0                	mov    %eax,%eax
ffffffff8021b871:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* And print these entries */
    RME_DBG_S("\n\rACPI:");
ffffffff8021b875:	48 c7 c7 83 99 22 80 	mov    $0xffffffff80229983,%rdi
ffffffff8021b87c:	e8 8a 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(Signature);
ffffffff8021b881:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
ffffffff8021b885:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b888:	e8 7e 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b88d:	48 c7 c7 8b 99 22 80 	mov    $0xffffffff8022998b,%rdi
ffffffff8021b894:	e8 72 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(ID);
ffffffff8021b899:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
ffffffff8021b89d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b8a0:	e8 66 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b8a5:	48 c7 c7 8b 99 22 80 	mov    $0xffffffff8022998b,%rdi
ffffffff8021b8ac:	e8 5a 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(Table_ID);
ffffffff8021b8b1:	48 8d 45 db          	lea    -0x25(%rbp),%rax
ffffffff8021b8b5:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b8b8:	e8 4e 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b8bd:	48 c7 c7 8b 99 22 80 	mov    $0xffffffff8022998b,%rdi
ffffffff8021b8c4:	e8 42 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(OEM_Rev);
ffffffff8021b8c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b8cd:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b8d0:	e8 3c 0f ff ff       	call   ffffffff8020c811 <RME_Int_Print>
    RME_DBG_S(", ");
ffffffff8021b8d5:	48 c7 c7 8b 99 22 80 	mov    $0xffffffff8022998b,%rdi
ffffffff8021b8dc:	e8 2a 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(Creator);
ffffffff8021b8e1:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
ffffffff8021b8e5:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b8e8:	e8 1e 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b8ed:	48 c7 c7 8b 99 22 80 	mov    $0xffffffff8022998b,%rdi
ffffffff8021b8f4:	e8 12 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(Creator_Rev);
ffffffff8021b8f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b8fd:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b900:	e8 0c 0f ff ff       	call   ffffffff8020c811 <RME_Int_Print>
    RME_DBG_S(".");
ffffffff8021b905:	48 c7 c7 8e 99 22 80 	mov    $0xffffffff8022998e,%rdi
ffffffff8021b90c:	e8 fa 10 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
}
ffffffff8021b911:	90                   	nop
ffffffff8021b912:	c9                   	leave  
ffffffff8021b913:	c3                   	ret    

ffffffff8021b914 <__RME_X64_ACPI_Init>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
rme_ret_t __RME_X64_ACPI_Init(void)
{
ffffffff8021b914:	f3 0f 1e fa          	endbr64 
ffffffff8021b918:	55                   	push   %rbp
ffffffff8021b919:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b91c:	48 83 ec 30          	sub    $0x30,%rsp
    rme_cnt_t Count;
    rme_cnt_t Table_Num;
    struct RME_X64_ACPI_RDSP_Desc* RDSP=RME_NULL;
ffffffff8021b920:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021b927:	00 
    struct RME_X64_ACPI_RSDT_Hdr* RSDT=RME_NULL;
ffffffff8021b928:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8021b92f:	00 
    struct RME_X64_ACPI_MADT_Hdr* MADT=RME_NULL;
ffffffff8021b930:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021b937:	00 
    struct RME_X64_ACPI_Desc_Hdr* Header=RME_NULL;
ffffffff8021b938:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8021b93f:	00 

    /* Try to find RDSP */
    RDSP=__RME_X64_RDSP_Find();
ffffffff8021b940:	e8 ee fa ff ff       	call   ffffffff8021b433 <__RME_X64_RDSP_Find>
ffffffff8021b945:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    RME_DBG_S("\r\nRDSP address: ");
ffffffff8021b949:	48 c7 c7 90 99 22 80 	mov    $0xffffffff80229990,%rdi
ffffffff8021b950:	e8 b6 10 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H((rme_ptr_t)RDSP);
ffffffff8021b955:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b959:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b95c:	e8 e8 0f ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
    /* Find the RSDT */
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff8021b961:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b965:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff8021b968:	89 c2                	mov    %eax,%edx
ffffffff8021b96a:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b971:	80 ff ff 
ffffffff8021b974:	48 01 d0             	add    %rdx,%rax
ffffffff8021b977:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_DBG_S("\r\nRSDT address: ");
ffffffff8021b97b:	48 c7 c7 a1 99 22 80 	mov    $0xffffffff802299a1,%rdi
ffffffff8021b982:	e8 84 10 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H((rme_ptr_t)RSDT);
ffffffff8021b987:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b98b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b98e:	e8 b6 0f ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;
ffffffff8021b993:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b997:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b99a:	89 c0                	mov    %eax,%eax
ffffffff8021b99c:	48 83 e8 24          	sub    $0x24,%rax
ffffffff8021b9a0:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff8021b9a4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    for(Count=0;Count<Table_Num;Count++)
ffffffff8021b9a8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021b9af:	00 
ffffffff8021b9b0:	eb 59                	jmp    ffffffff8021ba0b <__RME_X64_ACPI_Init+0xf7>
    {
        /* See what did we find */
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff8021b9b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b9b6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b9ba:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8021b9be:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
ffffffff8021b9c2:	89 c2                	mov    %eax,%edx
ffffffff8021b9c4:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b9cb:	80 ff ff 
ffffffff8021b9ce:	48 01 d0             	add    %rdx,%rax
ffffffff8021b9d1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        __RME_X64_ACPI_Debug(Header);
ffffffff8021b9d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b9d9:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b9dc:	e8 ee fd ff ff       	call   ffffffff8021b7cf <__RME_X64_ACPI_Debug>
        /* See if this is the MADT */
        if(_RME_Memcmp(Header->Signature, "APIC", 4)==0)
ffffffff8021b9e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b9e5:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b9ea:	48 c7 c6 b2 99 22 80 	mov    $0xffffffff802299b2,%rsi
ffffffff8021b9f1:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b9f4:	e8 41 14 ff ff       	call   ffffffff8020ce3a <_RME_Memcmp>
ffffffff8021b9f9:	48 85 c0             	test   %rax,%rax
ffffffff8021b9fc:	75 08                	jne    ffffffff8021ba06 <__RME_X64_ACPI_Init+0xf2>
            MADT=(struct RME_X64_ACPI_MADT_Hdr*)Header;
ffffffff8021b9fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ba02:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0;Count<Table_Num;Count++)
ffffffff8021ba06:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021ba0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba0f:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021ba13:	7c 9d                	jl     ffffffff8021b9b2 <__RME_X64_ACPI_Init+0x9e>
    }

    return __RME_X64_SMP_Detect(MADT);
ffffffff8021ba15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ba19:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ba1c:	e8 71 fa ff ff       	call   ffffffff8021b492 <__RME_X64_SMP_Detect>
}
ffffffff8021ba21:	c9                   	leave  
ffffffff8021ba22:	c3                   	ret    

ffffffff8021ba23 <__RME_X64_Feature_Get>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_Feature_Get(void)
{
ffffffff8021ba23:	f3 0f 1e fa          	endbr64 
ffffffff8021ba27:	55                   	push   %rbp
ffffffff8021ba28:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021ba2b:	48 83 ec 10          	sub    $0x10,%rsp
    rme_cnt_t Count;

    /* What's the maximum feature? */
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff8021ba2f:	48 c7 c1 68 43 23 80 	mov    $0xffffffff80234368,%rcx
ffffffff8021ba36:	48 c7 c2 60 43 23 80 	mov    $0xffffffff80234360,%rdx
ffffffff8021ba3d:	48 c7 c6 58 43 23 80 	mov    $0xffffffff80234358,%rsi
ffffffff8021ba44:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff8021ba49:	e8 fb fd fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021ba4e:	48 89 05 eb 88 01 00 	mov    %rax,0x188eb(%rip)        # ffffffff80234340 <RME_X64_Feature>
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][1]),
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][2]),
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][3]));
    RME_X64_Feature.Func[0][0]=RME_X64_Feature.Max_Func;
ffffffff8021ba55:	48 8b 05 e4 88 01 00 	mov    0x188e4(%rip),%rax        # ffffffff80234340 <RME_X64_Feature>
ffffffff8021ba5c:	48 89 05 ed 88 01 00 	mov    %rax,0x188ed(%rip)        # ffffffff80234350 <RME_X64_Feature+0x10>

    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff8021ba63:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8021ba6a:	00 
ffffffff8021ba6b:	eb 5c                	jmp    ffffffff8021bac9 <__RME_X64_Feature_Get+0xa6>
    {
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][1]),
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][2]),
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][3]));
ffffffff8021ba6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba71:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021ba75:	48 83 c0 28          	add    $0x28,%rax
ffffffff8021ba79:	48 8d 88 40 43 23 80 	lea    -0x7fdcbcc0(%rax),%rcx
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][2]),
ffffffff8021ba80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba84:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021ba88:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021ba8c:	48 8d 90 40 43 23 80 	lea    -0x7fdcbcc0(%rax),%rdx
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][1]),
ffffffff8021ba93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba97:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021ba9b:	48 83 c0 18          	add    $0x18,%rax
ffffffff8021ba9f:	48 8d b0 40 43 23 80 	lea    -0x7fdcbcc0(%rax),%rsi
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff8021baa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021baaa:	48 89 c7             	mov    %rax,%rdi
ffffffff8021baad:	e8 97 fd fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021bab2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021bab6:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021baba:	48 81 c2 50 43 23 80 	add    $0xffffffff80234350,%rdx
ffffffff8021bac1:	48 89 02             	mov    %rax,(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff8021bac4:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021bac9:	48 8b 15 70 88 01 00 	mov    0x18870(%rip),%rdx        # ffffffff80234340 <RME_X64_Feature>
ffffffff8021bad0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bad4:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021bad7:	73 94                	jae    ffffffff8021ba6d <__RME_X64_Feature_Get+0x4a>
    }

    /* What's the maximum extended feature? */
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff8021bad9:	48 c7 c1 68 45 23 80 	mov    $0xffffffff80234568,%rcx
ffffffff8021bae0:	48 c7 c2 60 45 23 80 	mov    $0xffffffff80234560,%rdx
ffffffff8021bae7:	48 c7 c6 58 45 23 80 	mov    $0xffffffff80234558,%rsi
ffffffff8021baee:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff8021baf3:	48 89 c7             	mov    %rax,%rdi
ffffffff8021baf6:	e8 4e fd fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021bafb:	48 89 05 46 88 01 00 	mov    %rax,0x18846(%rip)        # ffffffff80234348 <RME_X64_Feature+0x8>
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][1]),
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][2]),
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][3]));
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;
ffffffff8021bb02:	48 8b 05 3f 88 01 00 	mov    0x1883f(%rip),%rax        # ffffffff80234348 <RME_X64_Feature+0x8>
ffffffff8021bb09:	48 89 05 40 8a 01 00 	mov    %rax,0x18a40(%rip)        # ffffffff80234550 <RME_X64_Feature+0x210>


    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff8021bb10:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8021bb17:	00 
ffffffff8021bb18:	eb 67                	jmp    ffffffff8021bb81 <__RME_X64_Feature_Get+0x15e>
    {
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][1]),
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][2]),
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][3]));
ffffffff8021bb1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb1e:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021bb22:	48 05 28 02 00 00    	add    $0x228,%rax
ffffffff8021bb28:	48 8d 88 40 43 23 80 	lea    -0x7fdcbcc0(%rax),%rcx
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][2]),
ffffffff8021bb2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb33:	48 83 c0 11          	add    $0x11,%rax
ffffffff8021bb37:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021bb3b:	48 8d 90 40 43 23 80 	lea    -0x7fdcbcc0(%rax),%rdx
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][1]),
ffffffff8021bb42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb46:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021bb4a:	48 05 18 02 00 00    	add    $0x218,%rax
ffffffff8021bb50:	48 05 40 43 23 80    	add    $0xffffffff80234340,%rax
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff8021bb56:	be 00 00 00 80       	mov    $0x80000000,%esi
ffffffff8021bb5b:	48 0b 75 f8          	or     -0x8(%rbp),%rsi
ffffffff8021bb5f:	48 89 f7             	mov    %rsi,%rdi
ffffffff8021bb62:	48 89 c6             	mov    %rax,%rsi
ffffffff8021bb65:	e8 df fc fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021bb6a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021bb6e:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bb72:	48 81 c2 50 45 23 80 	add    $0xffffffff80234550,%rdx
ffffffff8021bb79:	48 89 02             	mov    %rax,(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff8021bb7c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021bb81:	48 8b 05 c0 87 01 00 	mov    0x187c0(%rip),%rax        # ffffffff80234348 <RME_X64_Feature+0x8>
ffffffff8021bb88:	48 8d 90 00 00 00 80 	lea    -0x80000000(%rax),%rdx
ffffffff8021bb8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb93:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021bb96:	73 82                	jae    ffffffff8021bb1a <__RME_X64_Feature_Get+0xf7>
    }

    /* TODO: Check these flags. If not satisfied, we hang immediately. */
}
ffffffff8021bb98:	90                   	nop
ffffffff8021bb99:	90                   	nop
ffffffff8021bb9a:	c9                   	leave  
ffffffff8021bb9b:	c3                   	ret    

ffffffff8021bb9c <__RME_X64_Mem_Init>:
volatile struct RME_List RME_X64_Phys_Mem;
/* The BIOS wouldn't really report more than 1024 blocks of memory */
struct __RME_X64_Mem RME_X64_Mem[1024];

void __RME_X64_Mem_Init(rme_ptr_t MMap_Addr, rme_ptr_t MMap_Length)
{
ffffffff8021bb9c:	f3 0f 1e fa          	endbr64 
ffffffff8021bba0:	55                   	push   %rbp
ffffffff8021bba1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021bba4:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021bba8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021bbac:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    struct multiboot_mmap_entry* MMap;
    volatile struct RME_List* Trav_Ptr;
    rme_ptr_t MMap_Cnt;
    rme_ptr_t Info_Cnt;
    MMap_Cnt=0;
ffffffff8021bbb0:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021bbb7:	00 
    Info_Cnt=0;
ffffffff8021bbb8:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021bbbf:	00 

    __RME_List_Crt(&RME_X64_Phys_Mem);
ffffffff8021bbc0:	48 c7 c7 10 b0 22 80 	mov    $0xffffffff8022b010,%rdi
ffffffff8021bbc7:	e8 ea b6 00 00       	call   ffffffff802272b6 <__RME_List_Crt>

    while(MMap_Cnt<MMap_Length)
ffffffff8021bbcc:	e9 72 01 00 00       	jmp    ffffffff8021bd43 <__RME_X64_Mem_Init+0x1a7>
    {
        MMap=(struct multiboot_mmap_entry*)(MMap_Addr+MMap_Cnt);
ffffffff8021bbd1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021bbd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bbd9:	48 01 d0             	add    %rdx,%rax
ffffffff8021bbdc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        MMap_Cnt+=MMap->size+4;
ffffffff8021bbe0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bbe4:	8b 00                	mov    (%rax),%eax
ffffffff8021bbe6:	83 c0 04             	add    $0x4,%eax
ffffffff8021bbe9:	89 c0                	mov    %eax,%eax
ffffffff8021bbeb:	48 01 45 f0          	add    %rax,-0x10(%rbp)

        if(MMap->type!=1)
ffffffff8021bbef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bbf3:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021bbf6:	83 f8 01             	cmp    $0x1,%eax
ffffffff8021bbf9:	74 5a                	je     ffffffff8021bc55 <__RME_X64_Mem_Init+0xb9>
        {
            RME_DBG_S("\n\rPhysical memory: 0x");
ffffffff8021bbfb:	48 c7 c7 b7 99 22 80 	mov    $0xffffffff802299b7,%rdi
ffffffff8021bc02:	e8 04 0e ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_Hex_Print(MMap->addr);
ffffffff8021bc07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bc0b:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021bc0f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bc12:	e8 32 0d ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
            RME_DBG_S(", 0x");
ffffffff8021bc17:	48 c7 c7 cd 99 22 80 	mov    $0xffffffff802299cd,%rdi
ffffffff8021bc1e:	e8 e8 0d ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_Hex_Print(MMap->len);
ffffffff8021bc23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bc27:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021bc2b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bc2e:	e8 16 0d ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
            RME_DBG_S(", ");
ffffffff8021bc33:	48 c7 c7 8b 99 22 80 	mov    $0xffffffff8022998b,%rdi
ffffffff8021bc3a:	e8 cc 0d ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_Hex_Print(MMap->type);
ffffffff8021bc3f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bc43:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021bc46:	89 c0                	mov    %eax,%eax
ffffffff8021bc48:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bc4b:	e8 f9 0c ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
            continue;
ffffffff8021bc50:	e9 ee 00 00 00       	jmp    ffffffff8021bd43 <__RME_X64_Mem_Init+0x1a7>
        }

        Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021bc55:	48 8b 05 b4 f3 00 00 	mov    0xf3b4(%rip),%rax        # ffffffff8022b010 <RME_X64_Phys_Mem>
ffffffff8021bc5c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bc60:	eb 20                	jmp    ffffffff8021bc82 <__RME_X64_Mem_Init+0xe6>
        {
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
ffffffff8021bc62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc66:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff8021bc6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bc6e:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021bc72:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021bc75:	77 17                	ja     ffffffff8021bc8e <__RME_X64_Mem_Init+0xf2>
                break;
            Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bc77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc7b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bc7e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bc82:	48 81 7d f8 10 b0 22 	cmpq   $0xffffffff8022b010,-0x8(%rbp)
ffffffff8021bc89:	80 
ffffffff8021bc8a:	75 d6                	jne    ffffffff8021bc62 <__RME_X64_Mem_Init+0xc6>
ffffffff8021bc8c:	eb 01                	jmp    ffffffff8021bc8f <__RME_X64_Mem_Init+0xf3>
                break;
ffffffff8021bc8e:	90                   	nop
        }
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff8021bc8f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bc93:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021bc97:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021bc9b:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bc9f:	48 81 c2 30 b0 22 80 	add    $0xffffffff8022b030,%rdx
ffffffff8021bca6:	48 89 02             	mov    %rax,(%rdx)
        RME_X64_Mem[Info_Cnt].Length=MMap->len;
ffffffff8021bca9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bcad:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021bcb1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021bcb5:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bcb9:	48 81 c2 38 b0 22 80 	add    $0xffffffff8022b038,%rdx
ffffffff8021bcc0:	48 89 02             	mov    %rax,(%rdx)
        __RME_List_Ins(&(RME_X64_Mem[Info_Cnt].Head),Trav_Ptr->Prev,Trav_Ptr);
ffffffff8021bcc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bcc7:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021bccb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021bccf:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bcd3:	48 8d 8a 20 b0 22 80 	lea    -0x7fdd4fe0(%rdx),%rcx
ffffffff8021bcda:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021bcde:	48 89 c6             	mov    %rax,%rsi
ffffffff8021bce1:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021bce4:	e8 f7 b5 00 00       	call   ffffffff802272e0 <__RME_List_Ins>

        /* Just print them then */
        RME_DBG_S("\n\rPhysical memory: 0x");
ffffffff8021bce9:	48 c7 c7 b7 99 22 80 	mov    $0xffffffff802299b7,%rdi
ffffffff8021bcf0:	e8 16 0d ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_Hex_Print(MMap->addr);
ffffffff8021bcf5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bcf9:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021bcfd:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bd00:	e8 44 0c ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
        RME_DBG_S(", 0x");
ffffffff8021bd05:	48 c7 c7 cd 99 22 80 	mov    $0xffffffff802299cd,%rdi
ffffffff8021bd0c:	e8 fa 0c ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_Hex_Print(MMap->len);
ffffffff8021bd11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bd15:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021bd19:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bd1c:	e8 28 0c ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
        RME_DBG_S(", ");
ffffffff8021bd21:	48 c7 c7 8b 99 22 80 	mov    $0xffffffff8022998b,%rdi
ffffffff8021bd28:	e8 de 0c ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_Hex_Print(MMap->type);
ffffffff8021bd2d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bd31:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021bd34:	89 c0                	mov    %eax,%eax
ffffffff8021bd36:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bd39:	e8 0b 0c ff ff       	call   ffffffff8020c949 <RME_Hex_Print>

        Info_Cnt++;
ffffffff8021bd3e:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    while(MMap_Cnt<MMap_Length)
ffffffff8021bd43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd47:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021bd4b:	0f 82 80 fe ff ff    	jb     ffffffff8021bbd1 <__RME_X64_Mem_Init+0x35>
    }

    /* Check if any memory segment overlaps. If yes, merge them into one,
     * until there is no overlapping segments */
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021bd51:	48 8b 05 b8 f2 00 00 	mov    0xf2b8(%rip),%rax        # ffffffff8022b010 <RME_X64_Phys_Mem>
ffffffff8021bd58:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021bd5c:	eb 75                	jmp    ffffffff8021bdd3 <__RME_X64_Mem_Init+0x237>
    {
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bd5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd62:	48 8b 50 10          	mov    0x10(%rax),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length)>
ffffffff8021bd66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd6a:	48 8b 40 18          	mov    0x18(%rax),%rax
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bd6e:	48 01 c2             	add    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr)
ffffffff8021bd71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd75:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bd78:	48 8b 40 10          	mov    0x10(%rax),%rax
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bd7c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021bd7f:	76 47                	jbe    ffffffff8021bdc8 <__RME_X64_Mem_Init+0x22c>
        {
            /* Merge these two blocks */
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length=
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff8021bd81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd85:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bd88:	48 8b 50 10          	mov    0x10(%rax),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021bd8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd90:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bd93:	48 8b 40 18          	mov    0x18(%rax),%rax
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff8021bd97:	48 01 c2             	add    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr;
ffffffff8021bd9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd9e:	48 8b 40 10          	mov    0x10(%rax),%rax
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021bda2:	48 29 c2             	sub    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length=
ffffffff8021bda5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bda9:	48 89 50 18          	mov    %rdx,0x18(%rax)
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff8021bdad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bdb1:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bdb4:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021bdb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bdbb:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021bdbe:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bdc1:	e8 63 b5 00 00       	call   ffffffff80227329 <__RME_List_Del>
            continue;
ffffffff8021bdc6:	eb 0b                	jmp    ffffffff8021bdd3 <__RME_X64_Mem_Init+0x237>
        }
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bdc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bdcc:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bdcf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021bdd3:	48 81 7d f8 10 b0 22 	cmpq   $0xffffffff8022b010,-0x8(%rbp)
ffffffff8021bdda:	80 
ffffffff8021bddb:	74 13                	je     ffffffff8021bdf0 <__RME_X64_Mem_Init+0x254>
ffffffff8021bddd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bde1:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bde4:	48 3d 10 b0 22 80    	cmp    $0xffffffff8022b010,%rax
ffffffff8021bdea:	0f 85 6e ff ff ff    	jne    ffffffff8021bd5e <__RME_X64_Mem_Init+0x1c2>
    }

    /* Calculate total memory */
    MMap_Cnt=0;
ffffffff8021bdf0:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021bdf7:	00 
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021bdf8:	48 8b 05 11 f2 00 00 	mov    0xf211(%rip),%rax        # ffffffff8022b010 <RME_X64_Phys_Mem>
ffffffff8021bdff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021be03:	eb 17                	jmp    ffffffff8021be1c <__RME_X64_Mem_Init+0x280>
    {
        MMap_Cnt+=((struct __RME_X64_Mem*)(Trav_Ptr))->Length;
ffffffff8021be05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021be09:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021be0d:	48 01 45 f0          	add    %rax,-0x10(%rbp)
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021be11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021be15:	48 8b 00             	mov    (%rax),%rax
ffffffff8021be18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021be1c:	48 81 7d f8 10 b0 22 	cmpq   $0xffffffff8022b010,-0x8(%rbp)
ffffffff8021be23:	80 
ffffffff8021be24:	75 df                	jne    ffffffff8021be05 <__RME_X64_Mem_Init+0x269>
    }
    RME_DBG_S("\n\rTotal physical memory: 0x");
ffffffff8021be26:	48 c7 c7 d2 99 22 80 	mov    $0xffffffff802299d2,%rdi
ffffffff8021be2d:	e8 d9 0b ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_Hex_Print(MMap_Cnt);
ffffffff8021be32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be36:	48 89 c7             	mov    %rax,%rdi
ffffffff8021be39:	e8 0b 0b ff ff       	call   ffffffff8020c949 <RME_Hex_Print>

    /* At least 256MB memory required on x64 architecture */
    RME_ASSERT(MMap_Cnt>=RME_POW2(RME_PGT_SIZE_256M));

    /* Kernel virtual memory layout */
    RME_X64_Layout.Kot_Start=(rme_ptr_t)RME_KOT_VA_BASE;
ffffffff8021be3e:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021be45:	80 ff ff 
ffffffff8021be48:	48 89 05 f1 71 01 00 	mov    %rax,0x171f1(%rip)        # ffffffff80233040 <RME_X64_Layout>
    /* +1G in cases where we have > 3GB memory for covering the memory hole */
    Info_Cnt=(MMap_Cnt>3*RME_POW2(RME_PGT_SIZE_1G))?(MMap_Cnt+RME_POW2(RME_PGT_SIZE_1G)):MMap_Cnt;
ffffffff8021be4f:	b8 00 00 00 c0       	mov    $0xc0000000,%eax
ffffffff8021be54:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8021be58:	76 0c                	jbe    ffffffff8021be66 <__RME_X64_Mem_Init+0x2ca>
ffffffff8021be5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be5e:	48 05 00 00 00 40    	add    $0x40000000,%rax
ffffffff8021be64:	eb 04                	jmp    ffffffff8021be6a <__RME_X64_Mem_Init+0x2ce>
ffffffff8021be66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be6a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    RME_X64_Layout.Kot_Size=((Info_Cnt>>RME_KOM_SLOT_ORDER)>>RME_WORD_ORDER)+1;
ffffffff8021be6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021be72:	48 c1 e8 0a          	shr    $0xa,%rax
ffffffff8021be76:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021be7a:	48 89 05 c7 71 01 00 	mov    %rax,0x171c7(%rip)        # ffffffff80233048 <RME_X64_Layout+0x8>

    /* Calculate the per-CPU data structure size - each CPU have two 4k pages */
    RME_X64_Layout.PerCPU_Start=RME_ROUND_UP(RME_X64_Layout.Kot_Start+RME_X64_Layout.Kot_Size,RME_PGT_SIZE_4K);
ffffffff8021be81:	48 8b 15 b8 71 01 00 	mov    0x171b8(%rip),%rdx        # ffffffff80233040 <RME_X64_Layout>
ffffffff8021be88:	48 8b 05 b9 71 01 00 	mov    0x171b9(%rip),%rax        # ffffffff80233048 <RME_X64_Layout+0x8>
ffffffff8021be8f:	48 01 d0             	add    %rdx,%rax
ffffffff8021be92:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff8021be98:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff8021be9e:	48 89 05 ab 71 01 00 	mov    %rax,0x171ab(%rip)        # ffffffff80233050 <RME_X64_Layout+0x10>
    RME_X64_Layout.PerCPU_Size=2*RME_POW2(RME_PGT_SIZE_4K)*RME_X64_Num_CPU;
ffffffff8021bea5:	48 8b 05 fc 73 01 00 	mov    0x173fc(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021beac:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff8021beb0:	48 89 05 a1 71 01 00 	mov    %rax,0x171a1(%rip)        # ffffffff80233058 <RME_X64_Layout+0x18>

    /* Now decide the size of the stack */
    RME_X64_Layout.Stack_Size=RME_X64_Num_CPU<<RME_X64_KSTACK_ORDER;
ffffffff8021beb7:	48 8b 05 ea 73 01 00 	mov    0x173ea(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021bebe:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff8021bec2:	48 89 05 d7 73 01 00 	mov    %rax,0x173d7(%rip)        # ffffffff802332a0 <RME_X64_Layout+0x260>
}
ffffffff8021bec9:	90                   	nop
ffffffff8021beca:	c9                   	leave  
ffffffff8021becb:	c3                   	ret    

ffffffff8021becc <__RME_X64_CPU_Local_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_CPU_Local_Init(void)
{
ffffffff8021becc:	f3 0f 1e fa          	endbr64 
ffffffff8021bed0:	55                   	push   %rbp
ffffffff8021bed1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021bed4:	48 83 ec 40          	sub    $0x40,%rsp
    struct RME_CPU_Local* CPU_Local;
    rme_ptr_t* GDT_Table;
    rme_ptr_t TSS_Table;
    rme_cnt_t Count;

    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff8021bed8:	48 8b 15 71 71 01 00 	mov    0x17171(%rip),%rdx        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff8021bedf:	48 8b 05 ca 73 01 00 	mov    0x173ca(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8021bee6:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff8021beea:	48 01 d0             	add    %rdx,%rax
ffffffff8021beed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
ffffffff8021bef1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021bef8:	00 
ffffffff8021bef9:	eb 1b                	jmp    ffffffff8021bf16 <__RME_X64_CPU_Local_Init+0x4a>
        IDT_Table[Count].Type_Attr=0;
ffffffff8021befb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021beff:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021bf03:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bf06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf0a:	48 01 d0             	add    %rdx,%rax
ffffffff8021bf0d:	c6 40 05 00          	movb   $0x0,0x5(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8021bf11:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021bf16:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff8021bf1d:	00 
ffffffff8021bf1e:	7e db                	jle    ffffffff8021befb <__RME_X64_CPU_Local_Init+0x2f>

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8021bf20:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021bf27:	89 c2                	mov    %eax,%edx
ffffffff8021bf29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf2d:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bf30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf34:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bf3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf3e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bf42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf46:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bf4a:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021bf51:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bf55:	89 c2                	mov    %eax,%edx
ffffffff8021bf57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf5b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bf5f:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021bf66:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bf6a:	89 c2                	mov    %eax,%edx
ffffffff8021bf6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf70:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bf73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf77:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8021bf7e:	48 c7 c2 df b8 20 80 	mov    $0xffffffff8020b8df,%rdx
ffffffff8021bf85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf89:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bf8d:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bf90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf94:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bf98:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bf9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfa2:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bfa6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bfaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfae:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bfb2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bfb6:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
ffffffff8021bfbd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bfc1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bfc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfc8:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bfcc:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bfd0:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
ffffffff8021bfd7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bfdb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bfde:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfe2:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bfe6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bfe9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfed:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bff1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8021bff8:	48 c7 c2 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rdx
ffffffff8021bfff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c003:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021c007:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c00a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c00e:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021c012:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c018:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c01c:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021c020:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c024:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c028:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021c02c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c030:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
ffffffff8021c037:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c03b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c03e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c042:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021c046:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c04a:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
ffffffff8021c051:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c055:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c058:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c05c:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021c060:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c063:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c067:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021c06b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8021c072:	48 c7 c2 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rdx
ffffffff8021c079:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c07d:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c081:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c084:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c088:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c08c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c092:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c096:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c09a:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c09e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0a2:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c0a6:	c6 40 05 ee          	movb   $0xee,0x5(%rax)
ffffffff8021c0aa:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
ffffffff8021c0b1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c0b5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c0b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0bc:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c0c0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c0c4:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
ffffffff8021c0cb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c0cf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c0d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0d6:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c0da:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c0dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0e1:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c0e5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8021c0ec:	48 c7 c2 03 b9 20 80 	mov    $0xffffffff8020b903,%rdx
ffffffff8021c0f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0f7:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c0fb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c0fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c102:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c106:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c10c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c110:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c114:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c118:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c11c:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c120:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c124:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
ffffffff8021c12b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c12f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c132:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c136:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c13a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c13e:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
ffffffff8021c145:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c149:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c14c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c150:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c154:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c157:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c15b:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c15f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8021c166:	48 c7 c2 0c b9 20 80 	mov    $0xffffffff8020b90c,%rdx
ffffffff8021c16d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c171:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c175:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c178:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c17c:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c180:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c186:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c18a:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c18e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c192:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c196:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c19a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c19e:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
ffffffff8021c1a5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c1a9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c1ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1b0:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c1b4:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c1b8:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
ffffffff8021c1bf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c1c3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c1c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1ca:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c1ce:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c1d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1d5:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c1d9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8021c1e0:	48 c7 c2 15 b9 20 80 	mov    $0xffffffff8020b915,%rdx
ffffffff8021c1e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1eb:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c1ef:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c1f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1f6:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c1fa:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c200:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c204:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c208:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c20c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c210:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c214:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c218:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
ffffffff8021c21f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c223:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c226:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c22a:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c22e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c232:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
ffffffff8021c239:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c23d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c240:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c244:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c248:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c24b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c24f:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c253:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff8021c25a:	48 c7 c2 1e b9 20 80 	mov    $0xffffffff8020b91e,%rdx
ffffffff8021c261:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c265:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c269:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c26c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c270:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c274:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c27a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c27e:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c282:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c286:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c28a:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c28e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c292:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff8021c299:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c29d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c2a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2a4:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c2a8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c2ac:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff8021c2b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c2b7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c2ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2be:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c2c2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c2c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2c9:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c2cd:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff8021c2d4:	48 c7 c2 27 b9 20 80 	mov    $0xffffffff8020b927,%rdx
ffffffff8021c2db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2df:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c2e3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c2e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2ea:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c2ee:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c2f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2f8:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c2fc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c300:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c304:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c308:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c30c:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
ffffffff8021c313:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c317:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c31a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c31e:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c322:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c326:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
ffffffff8021c32d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c331:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c334:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c338:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c33c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c33f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c343:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c347:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8021c34e:	48 c7 c2 2e b9 20 80 	mov    $0xffffffff8020b92e,%rdx
ffffffff8021c355:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c359:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c35f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c362:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c366:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c36c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c372:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c376:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c37c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c380:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c384:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c38a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c38e:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
ffffffff8021c395:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c399:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c39c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3a0:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c3a6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c3aa:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
ffffffff8021c3b1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c3b5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c3b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3bc:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c3c2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c3c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3c9:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c3cf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8021c3d6:	48 c7 c2 37 b9 20 80 	mov    $0xffffffff8020b937,%rdx
ffffffff8021c3dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3e1:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c3e7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c3ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3ee:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c3f4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c3fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3fe:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c404:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c408:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c40c:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c412:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c416:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
ffffffff8021c41d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c421:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c424:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c428:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c42e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c432:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
ffffffff8021c439:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c43d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c440:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c444:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c44a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c44d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c451:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c457:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021c45e:	48 c7 c2 3e b9 20 80 	mov    $0xffffffff8020b93e,%rdx
ffffffff8021c465:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c469:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c46f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c472:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c476:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c47c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c482:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c486:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c48c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c490:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c494:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c49a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c49e:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
ffffffff8021c4a5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c4a9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c4ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4b0:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c4b6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c4ba:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
ffffffff8021c4c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c4c5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c4c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4cc:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c4d2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c4d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4d9:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c4df:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8021c4e6:	48 c7 c2 45 b9 20 80 	mov    $0xffffffff8020b945,%rdx
ffffffff8021c4ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4f1:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c4f7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c4fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4fe:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c504:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c50a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c50e:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c514:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c518:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c51c:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c522:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c526:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
ffffffff8021c52d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c531:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c534:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c538:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c53e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c542:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
ffffffff8021c549:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c54d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c550:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c554:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c55a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c55d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c561:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c567:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8021c56e:	48 c7 c2 4c b9 20 80 	mov    $0xffffffff8020b94c,%rdx
ffffffff8021c575:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c579:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c57f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c582:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c586:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c58c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c592:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c596:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c59c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c5a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5a4:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c5aa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c5ae:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
ffffffff8021c5b5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c5b9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c5bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5c0:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c5c6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c5ca:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
ffffffff8021c5d1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c5d5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c5d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5dc:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c5e2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c5e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5e9:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c5ef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8021c5f6:	48 c7 c2 53 b9 20 80 	mov    $0xffffffff8020b953,%rdx
ffffffff8021c5fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c601:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c607:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c60a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c60e:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c614:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c61a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c61e:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c624:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c628:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c62c:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c632:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c636:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
ffffffff8021c63d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c641:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c644:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c648:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c64e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c652:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
ffffffff8021c659:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c65d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c660:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c664:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c66a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c66d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c671:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c677:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8021c67e:	48 c7 c2 5a b9 20 80 	mov    $0xffffffff8020b95a,%rdx
ffffffff8021c685:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c689:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c68f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c692:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c696:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c69c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c6a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6a6:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c6ac:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c6b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6b4:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c6ba:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c6be:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
ffffffff8021c6c5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c6c9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c6cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6d0:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c6d6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c6da:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
ffffffff8021c6e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c6e5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c6e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6ec:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c6f2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c6f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6f9:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c6ff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8021c706:	48 c7 c2 63 b9 20 80 	mov    $0xffffffff8020b963,%rdx
ffffffff8021c70d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c711:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c717:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c71a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c71e:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c724:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c72a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c72e:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c734:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c738:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c73c:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c742:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c746:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
ffffffff8021c74d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c751:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c754:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c758:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c75e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c762:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
ffffffff8021c769:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c76d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c770:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c774:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c77a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c77d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c781:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c787:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8021c78e:	48 c7 c2 6a b9 20 80 	mov    $0xffffffff8020b96a,%rdx
ffffffff8021c795:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c799:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c79f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c7a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7a6:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c7ac:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c7b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7b6:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c7bc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c7c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7c4:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c7ca:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c7ce:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
ffffffff8021c7d5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c7d9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c7dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7e0:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c7e6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c7ea:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
ffffffff8021c7f1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c7f5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c7f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7fc:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c802:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c805:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c809:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c80f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8021c816:	48 c7 c2 73 b9 20 80 	mov    $0xffffffff8020b973,%rdx
ffffffff8021c81d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c821:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c827:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c82a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c82e:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c834:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c83a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c83e:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c844:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c848:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c84c:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c852:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c856:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
ffffffff8021c85d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c861:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c864:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c868:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c86e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c872:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
ffffffff8021c879:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c87d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c880:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c884:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c88a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c88d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c891:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c897:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff8021c89e:	48 c7 c2 7c b9 20 80 	mov    $0xffffffff8020b97c,%rdx
ffffffff8021c8a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8a9:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c8af:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c8b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8b6:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c8bc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c8c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8c6:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c8cc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c8d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8d4:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c8da:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c8de:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
ffffffff8021c8e5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c8e9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c8ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8f0:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c8f6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c8fa:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
ffffffff8021c901:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c905:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c908:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c90c:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c912:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c915:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c919:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c91f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8021c926:	48 c7 c2 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rdx
ffffffff8021c92d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c931:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c937:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c93a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c93e:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c944:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c94a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c94e:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c954:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c958:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c95c:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c962:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c966:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff8021c96d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c971:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c974:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c978:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c97e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c982:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff8021c989:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c98d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c990:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c994:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c99a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c99d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9a1:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c9a7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021c9ae:	48 c7 c2 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rdx
ffffffff8021c9b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9b9:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c9bf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c9c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9c6:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c9cc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c9d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9d6:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c9dc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c9e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9e4:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c9ea:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c9ee:	48 c7 c0 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rax
ffffffff8021c9f5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c9f9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c9fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca00:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021ca06:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ca0a:	48 c7 c0 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rax
ffffffff8021ca11:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ca15:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ca18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca1c:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021ca22:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ca25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca29:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021ca2f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8021ca36:	48 c7 c2 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rdx
ffffffff8021ca3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca41:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021ca47:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ca4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca4e:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021ca54:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ca5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca5e:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021ca64:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ca68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca6c:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021ca72:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ca76:	48 c7 c0 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rax
ffffffff8021ca7d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ca81:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ca84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca88:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021ca8e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ca92:	48 c7 c0 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rax
ffffffff8021ca99:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ca9d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021caa0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021caa4:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021caaa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021caad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cab1:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021cab7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cabe:	48 c7 c2 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rdx
ffffffff8021cac5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cac9:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021cacf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cad2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cad6:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021cadc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cae2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cae6:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021caec:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021caf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021caf4:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021cafa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cafe:	48 c7 c0 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rax
ffffffff8021cb05:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cb09:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb10:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021cb16:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cb1a:	48 c7 c0 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rax
ffffffff8021cb21:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cb25:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb2c:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021cb32:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cb35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb39:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021cb3f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8021cb46:	48 c7 c2 05 ba 20 80 	mov    $0xffffffff8020ba05,%rdx
ffffffff8021cb4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb51:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cb57:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cb5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb5e:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cb64:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cb6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb6e:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cb74:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cb78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb7c:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cb82:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cb86:	48 c7 c0 05 ba 20 80 	mov    $0xffffffff8020ba05,%rax
ffffffff8021cb8d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cb91:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb98:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cb9e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cba2:	48 c7 c0 05 ba 20 80 	mov    $0xffffffff8020ba05,%rax
ffffffff8021cba9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cbad:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cbb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbb4:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cbba:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cbbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbc1:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cbc7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cbce:	48 c7 c2 11 ba 20 80 	mov    $0xffffffff8020ba11,%rdx
ffffffff8021cbd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbd9:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cbdf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cbe2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbe6:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cbec:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cbf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbf6:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cbfc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cc00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc04:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cc0a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cc0e:	48 c7 c0 11 ba 20 80 	mov    $0xffffffff8020ba11,%rax
ffffffff8021cc15:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cc19:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc20:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cc26:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cc2a:	48 c7 c0 11 ba 20 80 	mov    $0xffffffff8020ba11,%rax
ffffffff8021cc31:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cc35:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc3c:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cc42:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cc45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc49:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cc4f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8021cc56:	48 c7 c2 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rdx
ffffffff8021cc5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc61:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cc67:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cc6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc6e:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cc74:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cc7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc7e:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cc84:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cc88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc8c:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cc92:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cc96:	48 c7 c0 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rax
ffffffff8021cc9d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cca1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cca4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cca8:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021ccae:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ccb2:	48 c7 c0 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rax
ffffffff8021ccb9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ccbd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ccc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccc4:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021ccca:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cccd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccd1:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021ccd7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ccde:	48 c7 c2 29 ba 20 80 	mov    $0xffffffff8020ba29,%rdx
ffffffff8021cce5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cce9:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021ccef:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ccf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccf6:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021ccfc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cd02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd06:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cd0c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cd10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd14:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cd1a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cd1e:	48 c7 c0 29 ba 20 80 	mov    $0xffffffff8020ba29,%rax
ffffffff8021cd25:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cd29:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cd2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd30:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cd36:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cd3a:	48 c7 c0 29 ba 20 80 	mov    $0xffffffff8020ba29,%rax
ffffffff8021cd41:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cd45:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cd48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd4c:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cd52:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cd55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd59:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cd5f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8021cd66:	48 c7 c2 35 ba 20 80 	mov    $0xffffffff8020ba35,%rdx
ffffffff8021cd6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd71:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cd77:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cd7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd7e:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cd84:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cd8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd8e:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cd94:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cd98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd9c:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cda2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cda6:	48 c7 c0 35 ba 20 80 	mov    $0xffffffff8020ba35,%rax
ffffffff8021cdad:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cdb1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cdb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdb8:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cdbe:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cdc2:	48 c7 c0 35 ba 20 80 	mov    $0xffffffff8020ba35,%rax
ffffffff8021cdc9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cdcd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cdd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdd4:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cdda:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cddd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cde1:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cde7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cdee:	48 c7 c2 41 ba 20 80 	mov    $0xffffffff8020ba41,%rdx
ffffffff8021cdf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdf9:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cdff:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ce02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce06:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ce0c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ce12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce16:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ce1c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ce20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce24:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ce2a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ce2e:	48 c7 c0 41 ba 20 80 	mov    $0xffffffff8020ba41,%rax
ffffffff8021ce35:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ce39:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce40:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ce46:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ce4a:	48 c7 c0 41 ba 20 80 	mov    $0xffffffff8020ba41,%rax
ffffffff8021ce51:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ce55:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce5c:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ce62:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ce65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce69:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ce6f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8021ce76:	48 c7 c2 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rdx
ffffffff8021ce7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce81:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021ce87:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ce8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce8e:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021ce94:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ce9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce9e:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cea4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cea8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ceac:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021ceb2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ceb6:	48 c7 c0 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rax
ffffffff8021cebd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cec1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cec4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cec8:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cece:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ced2:	48 c7 c0 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rax
ffffffff8021ced9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cedd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cee0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cee4:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021ceea:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ceed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cef1:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cef7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cefe:	48 c7 c2 59 ba 20 80 	mov    $0xffffffff8020ba59,%rdx
ffffffff8021cf05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf09:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cf0f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cf12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf16:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cf1c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cf22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf26:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cf2c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cf30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf34:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cf3a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cf3e:	48 c7 c0 59 ba 20 80 	mov    $0xffffffff8020ba59,%rax
ffffffff8021cf45:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cf49:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cf4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf50:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cf56:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cf5a:	48 c7 c0 59 ba 20 80 	mov    $0xffffffff8020ba59,%rax
ffffffff8021cf61:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cf65:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cf68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf6c:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cf72:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cf75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf79:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cf7f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8021cf86:	48 c7 c2 65 ba 20 80 	mov    $0xffffffff8020ba65,%rdx
ffffffff8021cf8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf91:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cf97:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cf9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf9e:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cfa4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cfaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfae:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cfb4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cfb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfbc:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cfc2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cfc6:	48 c7 c0 65 ba 20 80 	mov    $0xffffffff8020ba65,%rax
ffffffff8021cfcd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cfd1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cfd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfd8:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cfde:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cfe2:	48 c7 c0 65 ba 20 80 	mov    $0xffffffff8020ba65,%rax
ffffffff8021cfe9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cfed:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cff0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cff4:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cffa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cffd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d001:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021d007:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d00e:	48 c7 c2 71 ba 20 80 	mov    $0xffffffff8020ba71,%rdx
ffffffff8021d015:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d019:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021d01f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d022:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d026:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021d02c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d032:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d036:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021d03c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d040:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d044:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021d04a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d04e:	48 c7 c0 71 ba 20 80 	mov    $0xffffffff8020ba71,%rax
ffffffff8021d055:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d059:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d05c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d060:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021d066:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d06a:	48 c7 c0 71 ba 20 80 	mov    $0xffffffff8020ba71,%rax
ffffffff8021d071:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d075:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d078:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d07c:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021d082:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d085:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d089:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021d08f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8021d096:	48 c7 c2 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rdx
ffffffff8021d09d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0a1:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d0a7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d0aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0ae:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d0b4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d0ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0be:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d0c4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d0c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0cc:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d0d2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d0d6:	48 c7 c0 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rax
ffffffff8021d0dd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d0e1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d0e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0e8:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d0ee:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d0f2:	48 c7 c0 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rax
ffffffff8021d0f9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d0fd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d100:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d104:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d10a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d10d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d111:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d117:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d11e:	48 c7 c2 89 ba 20 80 	mov    $0xffffffff8020ba89,%rdx
ffffffff8021d125:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d129:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d12f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d132:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d136:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d13c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d142:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d146:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d14c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d150:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d154:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d15a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d15e:	48 c7 c0 89 ba 20 80 	mov    $0xffffffff8020ba89,%rax
ffffffff8021d165:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d169:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d16c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d170:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d176:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d17a:	48 c7 c0 89 ba 20 80 	mov    $0xffffffff8020ba89,%rax
ffffffff8021d181:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d185:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d188:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d18c:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d192:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d195:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d199:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d19f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff8021d1a6:	48 c7 c2 95 ba 20 80 	mov    $0xffffffff8020ba95,%rdx
ffffffff8021d1ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1b1:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d1b7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d1ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1be:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d1c4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d1ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1ce:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d1d4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d1d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1dc:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d1e2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d1e6:	48 c7 c0 95 ba 20 80 	mov    $0xffffffff8020ba95,%rax
ffffffff8021d1ed:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d1f1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d1f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1f8:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d1fe:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d202:	48 c7 c0 95 ba 20 80 	mov    $0xffffffff8020ba95,%rax
ffffffff8021d209:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d20d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d210:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d214:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d21a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d21d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d221:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d227:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d22e:	48 c7 c2 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rdx
ffffffff8021d235:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d239:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d23f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d242:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d246:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d24c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d252:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d256:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d25c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d260:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d264:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d26a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d26e:	48 c7 c0 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rax
ffffffff8021d275:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d279:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d27c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d280:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d286:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d28a:	48 c7 c0 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rax
ffffffff8021d291:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d295:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d298:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d29c:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d2a2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d2a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2a9:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d2af:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8021d2b6:	48 c7 c2 ad ba 20 80 	mov    $0xffffffff8020baad,%rdx
ffffffff8021d2bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2c1:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d2c7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d2ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2ce:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d2d4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d2da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2de:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d2e4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d2e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2ec:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d2f2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d2f6:	48 c7 c0 ad ba 20 80 	mov    $0xffffffff8020baad,%rax
ffffffff8021d2fd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d301:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d304:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d308:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d30e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d312:	48 c7 c0 ad ba 20 80 	mov    $0xffffffff8020baad,%rax
ffffffff8021d319:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d31d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d320:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d324:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d32a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d32d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d331:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d337:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d33e:	48 c7 c2 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rdx
ffffffff8021d345:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d349:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d34f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d352:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d356:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d35c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d362:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d366:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d36c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d370:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d374:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d37a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d37e:	48 c7 c0 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rax
ffffffff8021d385:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d389:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d38c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d390:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d396:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d39a:	48 c7 c0 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rax
ffffffff8021d3a1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d3a5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d3a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3ac:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d3b2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d3b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3b9:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d3bf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8021d3c6:	48 c7 c2 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rdx
ffffffff8021d3cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3d1:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d3d7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d3da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3de:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d3e4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d3ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3ee:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d3f4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d3f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3fc:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d402:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d406:	48 c7 c0 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rax
ffffffff8021d40d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d411:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d414:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d418:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d41e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d422:	48 c7 c0 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rax
ffffffff8021d429:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d42d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d430:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d434:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d43a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d43d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d441:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d447:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d44e:	48 c7 c2 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rdx
ffffffff8021d455:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d459:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d45f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d462:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d466:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d46c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d472:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d476:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d47c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d480:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d484:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d48a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d48e:	48 c7 c0 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rax
ffffffff8021d495:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d499:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d49c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4a0:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d4a6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d4aa:	48 c7 c0 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rax
ffffffff8021d4b1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d4b5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d4b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4bc:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d4c2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d4c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4c9:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d4cf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8021d4d6:	48 c7 c2 dd ba 20 80 	mov    $0xffffffff8020badd,%rdx
ffffffff8021d4dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4e1:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d4e7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d4ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4ee:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d4f4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d4fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4fe:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d504:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d508:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d50c:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d512:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d516:	48 c7 c0 dd ba 20 80 	mov    $0xffffffff8020badd,%rax
ffffffff8021d51d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d521:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d524:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d528:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d52e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d532:	48 c7 c0 dd ba 20 80 	mov    $0xffffffff8020badd,%rax
ffffffff8021d539:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d53d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d540:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d544:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d54a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d54d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d551:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d557:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d55e:	48 c7 c2 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rdx
ffffffff8021d565:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d569:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d56f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d572:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d576:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d57c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d582:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d586:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d58c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d590:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d594:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d59a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d59e:	48 c7 c0 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rax
ffffffff8021d5a5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d5a9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d5ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5b0:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d5b6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d5ba:	48 c7 c0 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rax
ffffffff8021d5c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d5c5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d5c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5cc:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d5d2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d5d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5d9:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d5df:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8021d5e6:	48 c7 c2 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rdx
ffffffff8021d5ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5f1:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d5f7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d5fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5fe:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d604:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d60a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d60e:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d614:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d618:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d61c:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d622:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d626:	48 c7 c0 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rax
ffffffff8021d62d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d631:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d634:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d638:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d63e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d642:	48 c7 c0 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rax
ffffffff8021d649:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d64d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d650:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d654:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d65a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d65d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d661:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d667:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d66e:	48 c7 c2 01 bb 20 80 	mov    $0xffffffff8020bb01,%rdx
ffffffff8021d675:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d679:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d67f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d682:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d686:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d68c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d692:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d696:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d69c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d6a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6a4:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d6aa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d6ae:	48 c7 c0 01 bb 20 80 	mov    $0xffffffff8020bb01,%rax
ffffffff8021d6b5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d6b9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d6bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6c0:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d6c6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d6ca:	48 c7 c0 01 bb 20 80 	mov    $0xffffffff8020bb01,%rax
ffffffff8021d6d1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d6d5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d6d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6dc:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d6e2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d6e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6e9:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d6ef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8021d6f6:	48 c7 c2 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rdx
ffffffff8021d6fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d701:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d707:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d70a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d70e:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d714:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d71a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d71e:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d724:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d728:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d72c:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d732:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d736:	48 c7 c0 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rax
ffffffff8021d73d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d741:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d744:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d748:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d74e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d752:	48 c7 c0 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rax
ffffffff8021d759:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d75d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d760:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d764:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d76a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d76d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d771:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d777:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d77e:	48 c7 c2 19 bb 20 80 	mov    $0xffffffff8020bb19,%rdx
ffffffff8021d785:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d789:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d78f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d792:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d796:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d79c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d7a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7a6:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d7ac:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d7b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7b4:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d7ba:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d7be:	48 c7 c0 19 bb 20 80 	mov    $0xffffffff8020bb19,%rax
ffffffff8021d7c5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d7c9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d7cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7d0:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d7d6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d7da:	48 c7 c0 19 bb 20 80 	mov    $0xffffffff8020bb19,%rax
ffffffff8021d7e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d7e5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d7e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7ec:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d7f2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d7f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7f9:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d7ff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8021d806:	48 c7 c2 25 bb 20 80 	mov    $0xffffffff8020bb25,%rdx
ffffffff8021d80d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d811:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d817:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d81a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d81e:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d824:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d82a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d82e:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d834:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d838:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d83c:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d842:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d846:	48 c7 c0 25 bb 20 80 	mov    $0xffffffff8020bb25,%rax
ffffffff8021d84d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d851:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d854:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d858:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d85e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d862:	48 c7 c0 25 bb 20 80 	mov    $0xffffffff8020bb25,%rax
ffffffff8021d869:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d86d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d870:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d874:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d87a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d87d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d881:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d887:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d88e:	48 c7 c2 31 bb 20 80 	mov    $0xffffffff8020bb31,%rdx
ffffffff8021d895:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d899:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d89f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d8a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8a6:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d8ac:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d8b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8b6:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d8bc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d8c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8c4:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d8ca:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d8ce:	48 c7 c0 31 bb 20 80 	mov    $0xffffffff8020bb31,%rax
ffffffff8021d8d5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d8d9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d8dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8e0:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d8e6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d8ea:	48 c7 c0 31 bb 20 80 	mov    $0xffffffff8020bb31,%rax
ffffffff8021d8f1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d8f5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d8f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8fc:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d902:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d905:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d909:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d90f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8021d916:	48 c7 c2 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rdx
ffffffff8021d91d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d921:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d927:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d92a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d92e:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d934:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d93a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d93e:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d944:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d948:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d94c:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d952:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d956:	48 c7 c0 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rax
ffffffff8021d95d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d961:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d964:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d968:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d96e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d972:	48 c7 c0 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rax
ffffffff8021d979:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d97d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d980:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d984:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d98a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d98d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d991:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d997:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d99e:	48 c7 c2 49 bb 20 80 	mov    $0xffffffff8020bb49,%rdx
ffffffff8021d9a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9a9:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d9af:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d9b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9b6:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d9bc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d9c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9c6:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d9cc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d9d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9d4:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d9da:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d9de:	48 c7 c0 49 bb 20 80 	mov    $0xffffffff8020bb49,%rax
ffffffff8021d9e5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d9e9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d9ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9f0:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d9f6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d9fa:	48 c7 c0 49 bb 20 80 	mov    $0xffffffff8020bb49,%rax
ffffffff8021da01:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021da05:	48 89 c2             	mov    %rax,%rdx
ffffffff8021da08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da0c:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021da12:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021da15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da19:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021da1f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8021da26:	48 c7 c2 55 bb 20 80 	mov    $0xffffffff8020bb55,%rdx
ffffffff8021da2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da31:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021da37:	66 89 10             	mov    %dx,(%rax)
ffffffff8021da3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da3e:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021da44:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021da4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da4e:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021da54:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021da58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da5c:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021da62:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021da66:	48 c7 c0 55 bb 20 80 	mov    $0xffffffff8020bb55,%rax
ffffffff8021da6d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021da71:	48 89 c2             	mov    %rax,%rdx
ffffffff8021da74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da78:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021da7e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021da82:	48 c7 c0 55 bb 20 80 	mov    $0xffffffff8020bb55,%rax
ffffffff8021da89:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021da8d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021da90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da94:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021da9a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021da9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daa1:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021daa7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021daae:	48 c7 c2 61 bb 20 80 	mov    $0xffffffff8020bb61,%rdx
ffffffff8021dab5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dab9:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021dabf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dac2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dac6:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021dacc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dad2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dad6:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021dadc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dae0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dae4:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021daea:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021daee:	48 c7 c0 61 bb 20 80 	mov    $0xffffffff8020bb61,%rax
ffffffff8021daf5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021daf9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dafc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db00:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021db06:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021db0a:	48 c7 c0 61 bb 20 80 	mov    $0xffffffff8020bb61,%rax
ffffffff8021db11:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021db15:	48 89 c2             	mov    %rax,%rdx
ffffffff8021db18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db1c:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021db22:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021db25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db29:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021db2f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8021db36:	48 c7 c2 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rdx
ffffffff8021db3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db41:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021db47:	66 89 10             	mov    %dx,(%rax)
ffffffff8021db4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db4e:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021db54:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021db5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db5e:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021db64:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021db68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db6c:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021db72:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021db76:	48 c7 c0 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rax
ffffffff8021db7d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021db81:	48 89 c2             	mov    %rax,%rdx
ffffffff8021db84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db88:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021db8e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021db92:	48 c7 c0 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rax
ffffffff8021db99:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021db9d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dba0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dba4:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021dbaa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dbad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbb1:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021dbb7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dbbe:	48 c7 c2 79 bb 20 80 	mov    $0xffffffff8020bb79,%rdx
ffffffff8021dbc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbc9:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dbcf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dbd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbd6:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dbdc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dbe2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbe6:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dbec:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dbf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbf4:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dbfa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dbfe:	48 c7 c0 79 bb 20 80 	mov    $0xffffffff8020bb79,%rax
ffffffff8021dc05:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dc09:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc10:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dc16:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dc1a:	48 c7 c0 79 bb 20 80 	mov    $0xffffffff8020bb79,%rax
ffffffff8021dc21:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dc25:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc2c:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dc32:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dc35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc39:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dc3f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8021dc46:	48 c7 c2 85 bb 20 80 	mov    $0xffffffff8020bb85,%rdx
ffffffff8021dc4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc51:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dc57:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dc5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc5e:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dc64:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dc6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc6e:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dc74:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dc78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc7c:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dc82:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dc86:	48 c7 c0 85 bb 20 80 	mov    $0xffffffff8020bb85,%rax
ffffffff8021dc8d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dc91:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc98:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dc9e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dca2:	48 c7 c0 85 bb 20 80 	mov    $0xffffffff8020bb85,%rax
ffffffff8021dca9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dcad:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dcb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcb4:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dcba:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dcbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcc1:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dcc7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dcce:	48 c7 c2 91 bb 20 80 	mov    $0xffffffff8020bb91,%rdx
ffffffff8021dcd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcd9:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dcdf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dce2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dce6:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dcec:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dcf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcf6:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dcfc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dd00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd04:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dd0a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dd0e:	48 c7 c0 91 bb 20 80 	mov    $0xffffffff8020bb91,%rax
ffffffff8021dd15:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dd19:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd20:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dd26:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dd2a:	48 c7 c0 91 bb 20 80 	mov    $0xffffffff8020bb91,%rax
ffffffff8021dd31:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dd35:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd3c:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dd42:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dd45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd49:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dd4f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8021dd56:	48 c7 c2 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rdx
ffffffff8021dd5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd61:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dd67:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dd6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd6e:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dd74:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dd7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd7e:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dd84:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dd88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd8c:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dd92:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dd96:	48 c7 c0 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rax
ffffffff8021dd9d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dda1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dda4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dda8:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021ddae:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ddb2:	48 c7 c0 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rax
ffffffff8021ddb9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ddbd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ddc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddc4:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021ddca:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ddcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddd1:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021ddd7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ddde:	48 c7 c2 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rdx
ffffffff8021dde5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dde9:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021ddef:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ddf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddf6:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021ddfc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021de02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de06:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021de0c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021de10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de14:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021de1a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021de1e:	48 c7 c0 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rax
ffffffff8021de25:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021de29:	48 89 c2             	mov    %rax,%rdx
ffffffff8021de2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de30:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021de36:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021de3a:	48 c7 c0 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rax
ffffffff8021de41:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021de45:	48 89 c2             	mov    %rax,%rdx
ffffffff8021de48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de4c:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021de52:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021de55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de59:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021de5f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8021de66:	48 c7 c2 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rdx
ffffffff8021de6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de71:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021de77:	66 89 10             	mov    %dx,(%rax)
ffffffff8021de7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de7e:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021de84:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021de8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de8e:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021de94:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021de98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de9c:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dea2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dea6:	48 c7 c0 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rax
ffffffff8021dead:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021deb1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021deb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021deb8:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021debe:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dec2:	48 c7 c0 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rax
ffffffff8021dec9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021decd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ded0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ded4:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021deda:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dedd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dee1:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dee7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021deee:	48 c7 c2 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rdx
ffffffff8021def5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021def9:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021deff:	66 89 10             	mov    %dx,(%rax)
ffffffff8021df02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df06:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021df0c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021df12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df16:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021df1c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021df20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df24:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021df2a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021df2e:	48 c7 c0 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rax
ffffffff8021df35:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021df39:	48 89 c2             	mov    %rax,%rdx
ffffffff8021df3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df40:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021df46:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021df4a:	48 c7 c0 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rax
ffffffff8021df51:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021df55:	48 89 c2             	mov    %rax,%rdx
ffffffff8021df58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df5c:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021df62:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021df65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df69:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021df6f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8021df76:	48 c7 c2 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rdx
ffffffff8021df7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df81:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021df87:	66 89 10             	mov    %dx,(%rax)
ffffffff8021df8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df8e:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021df94:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021df9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df9e:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dfa4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dfa8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfac:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dfb2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dfb6:	48 c7 c0 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rax
ffffffff8021dfbd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dfc1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dfc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfc8:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dfce:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dfd2:	48 c7 c0 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rax
ffffffff8021dfd9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dfdd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dfe0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfe4:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dfea:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dfed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dff1:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dff7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dffe:	48 c7 c2 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rdx
ffffffff8021e005:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e009:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021e00f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e012:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e016:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021e01c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e022:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e026:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021e02c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e030:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e034:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021e03a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e03e:	48 c7 c0 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rax
ffffffff8021e045:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e049:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e04c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e050:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021e056:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e05a:	48 c7 c0 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rax
ffffffff8021e061:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e065:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e068:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e06c:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021e072:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e075:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e079:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021e07f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8021e086:	48 c7 c2 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rdx
ffffffff8021e08d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e091:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e097:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e09a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e09e:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e0a4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e0aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0ae:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e0b4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e0b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0bc:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e0c2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e0c6:	48 c7 c0 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rax
ffffffff8021e0cd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e0d1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e0d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0d8:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e0de:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e0e2:	48 c7 c0 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rax
ffffffff8021e0e9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e0ed:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e0f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0f4:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e0fa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e0fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e101:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e107:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e10e:	48 c7 c2 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rdx
ffffffff8021e115:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e119:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e11f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e122:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e126:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e12c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e132:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e136:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e13c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e140:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e144:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e14a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e14e:	48 c7 c0 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rax
ffffffff8021e155:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e159:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e15c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e160:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e166:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e16a:	48 c7 c0 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rax
ffffffff8021e171:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e175:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e178:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e17c:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e182:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e185:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e189:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e18f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8021e196:	48 c7 c2 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rdx
ffffffff8021e19d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1a1:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e1a7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e1aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1ae:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e1b4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e1ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1be:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e1c4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e1c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1cc:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e1d2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e1d6:	48 c7 c0 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rax
ffffffff8021e1dd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e1e1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e1e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1e8:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e1ee:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e1f2:	48 c7 c0 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rax
ffffffff8021e1f9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e1fd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e200:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e204:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e20a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e20d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e211:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e217:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e21e:	48 c7 c2 09 bc 20 80 	mov    $0xffffffff8020bc09,%rdx
ffffffff8021e225:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e229:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e22f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e232:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e236:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e23c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e242:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e246:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e24c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e250:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e254:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e25a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e25e:	48 c7 c0 09 bc 20 80 	mov    $0xffffffff8020bc09,%rax
ffffffff8021e265:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e269:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e26c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e270:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e276:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e27a:	48 c7 c0 09 bc 20 80 	mov    $0xffffffff8020bc09,%rax
ffffffff8021e281:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e285:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e288:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e28c:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e292:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e295:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e299:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e29f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8021e2a6:	48 c7 c2 15 bc 20 80 	mov    $0xffffffff8020bc15,%rdx
ffffffff8021e2ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2b1:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e2b7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e2ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2be:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e2c4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e2ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2ce:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e2d4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e2d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2dc:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e2e2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e2e6:	48 c7 c0 15 bc 20 80 	mov    $0xffffffff8020bc15,%rax
ffffffff8021e2ed:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e2f1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e2f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2f8:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e2fe:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e302:	48 c7 c0 15 bc 20 80 	mov    $0xffffffff8020bc15,%rax
ffffffff8021e309:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e30d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e310:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e314:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e31a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e31d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e321:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e327:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e32e:	48 c7 c2 21 bc 20 80 	mov    $0xffffffff8020bc21,%rdx
ffffffff8021e335:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e339:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e33f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e342:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e346:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e34c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e352:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e356:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e35c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e360:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e364:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e36a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e36e:	48 c7 c0 21 bc 20 80 	mov    $0xffffffff8020bc21,%rax
ffffffff8021e375:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e379:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e37c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e380:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e386:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e38a:	48 c7 c0 21 bc 20 80 	mov    $0xffffffff8020bc21,%rax
ffffffff8021e391:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e395:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e398:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e39c:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e3a2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e3a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3a9:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e3af:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8021e3b6:	48 c7 c2 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rdx
ffffffff8021e3bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3c1:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e3c7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e3ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3ce:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e3d4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e3da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3de:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e3e4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e3e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3ec:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e3f2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e3f6:	48 c7 c0 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rax
ffffffff8021e3fd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e401:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e404:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e408:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e40e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e412:	48 c7 c0 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rax
ffffffff8021e419:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e41d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e420:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e424:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e42a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e42d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e431:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e437:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e43e:	48 c7 c2 39 bc 20 80 	mov    $0xffffffff8020bc39,%rdx
ffffffff8021e445:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e449:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e44f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e452:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e456:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e45c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e462:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e466:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e46c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e470:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e474:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e47a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e47e:	48 c7 c0 39 bc 20 80 	mov    $0xffffffff8020bc39,%rax
ffffffff8021e485:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e489:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e48c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e490:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e496:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e49a:	48 c7 c0 39 bc 20 80 	mov    $0xffffffff8020bc39,%rax
ffffffff8021e4a1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e4a5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e4a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4ac:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e4b2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e4b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4b9:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e4bf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8021e4c6:	48 c7 c2 45 bc 20 80 	mov    $0xffffffff8020bc45,%rdx
ffffffff8021e4cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4d1:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e4d7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e4da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4de:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e4e4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e4ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4ee:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e4f4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e4f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4fc:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e502:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e506:	48 c7 c0 45 bc 20 80 	mov    $0xffffffff8020bc45,%rax
ffffffff8021e50d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e511:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e514:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e518:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e51e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e522:	48 c7 c0 45 bc 20 80 	mov    $0xffffffff8020bc45,%rax
ffffffff8021e529:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e52d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e530:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e534:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e53a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e53d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e541:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e547:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e54e:	48 c7 c2 51 bc 20 80 	mov    $0xffffffff8020bc51,%rdx
ffffffff8021e555:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e559:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e55f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e562:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e566:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e56c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e572:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e576:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e57c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e580:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e584:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e58a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e58e:	48 c7 c0 51 bc 20 80 	mov    $0xffffffff8020bc51,%rax
ffffffff8021e595:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e599:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e59c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5a0:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e5a6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e5aa:	48 c7 c0 51 bc 20 80 	mov    $0xffffffff8020bc51,%rax
ffffffff8021e5b1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e5b5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e5b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5bc:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e5c2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e5c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5c9:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e5cf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8021e5d6:	48 c7 c2 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rdx
ffffffff8021e5dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5e1:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e5e7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e5ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5ee:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e5f4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e5fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5fe:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e604:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e608:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e60c:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e612:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e616:	48 c7 c0 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rax
ffffffff8021e61d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e621:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e624:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e628:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e62e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e632:	48 c7 c0 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rax
ffffffff8021e639:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e63d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e640:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e644:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e64a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e64d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e651:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e657:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e65e:	48 c7 c2 69 bc 20 80 	mov    $0xffffffff8020bc69,%rdx
ffffffff8021e665:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e669:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e66f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e672:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e676:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e67c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e682:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e686:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e68c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e690:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e694:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e69a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e69e:	48 c7 c0 69 bc 20 80 	mov    $0xffffffff8020bc69,%rax
ffffffff8021e6a5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e6a9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e6ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6b0:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e6b6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e6ba:	48 c7 c0 69 bc 20 80 	mov    $0xffffffff8020bc69,%rax
ffffffff8021e6c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e6c5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e6c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6cc:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e6d2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e6d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6d9:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e6df:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8021e6e6:	48 c7 c2 75 bc 20 80 	mov    $0xffffffff8020bc75,%rdx
ffffffff8021e6ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6f1:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e6f7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e6fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6fe:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e704:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e70a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e70e:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e714:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e718:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e71c:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e722:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e726:	48 c7 c0 75 bc 20 80 	mov    $0xffffffff8020bc75,%rax
ffffffff8021e72d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e731:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e734:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e738:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e73e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e742:	48 c7 c0 75 bc 20 80 	mov    $0xffffffff8020bc75,%rax
ffffffff8021e749:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e74d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e750:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e754:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e75a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e75d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e761:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e767:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e76e:	48 c7 c2 81 bc 20 80 	mov    $0xffffffff8020bc81,%rdx
ffffffff8021e775:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e779:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e77f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e782:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e786:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e78c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e792:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e796:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e79c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e7a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7a4:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e7aa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e7ae:	48 c7 c0 81 bc 20 80 	mov    $0xffffffff8020bc81,%rax
ffffffff8021e7b5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e7b9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e7bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7c0:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e7c6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e7ca:	48 c7 c0 81 bc 20 80 	mov    $0xffffffff8020bc81,%rax
ffffffff8021e7d1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e7d5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e7d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7dc:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e7e2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e7e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7e9:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e7ef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8021e7f6:	48 c7 c2 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rdx
ffffffff8021e7fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e801:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e807:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e80a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e80e:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e814:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e81a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e81e:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e824:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e828:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e82c:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e832:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e836:	48 c7 c0 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rax
ffffffff8021e83d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e841:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e844:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e848:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e84e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e852:	48 c7 c0 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rax
ffffffff8021e859:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e85d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e860:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e864:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e86a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e86d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e871:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e877:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e87e:	48 c7 c2 99 bc 20 80 	mov    $0xffffffff8020bc99,%rdx
ffffffff8021e885:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e889:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e88f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e892:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e896:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e89c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e8a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8a6:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e8ac:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e8b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8b4:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e8ba:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e8be:	48 c7 c0 99 bc 20 80 	mov    $0xffffffff8020bc99,%rax
ffffffff8021e8c5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e8c9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e8cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8d0:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e8d6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e8da:	48 c7 c0 99 bc 20 80 	mov    $0xffffffff8020bc99,%rax
ffffffff8021e8e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e8e5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e8e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8ec:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e8f2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e8f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8f9:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e8ff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8021e906:	48 c7 c2 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rdx
ffffffff8021e90d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e911:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e917:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e91a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e91e:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e924:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e92a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e92e:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e934:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e938:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e93c:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e942:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e946:	48 c7 c0 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rax
ffffffff8021e94d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e951:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e954:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e958:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e95e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e962:	48 c7 c0 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rax
ffffffff8021e969:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e96d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e970:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e974:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e97a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e97d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e981:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e987:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e98e:	48 c7 c2 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rdx
ffffffff8021e995:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e999:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e99f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e9a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9a6:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e9ac:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e9b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9b6:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e9bc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e9c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9c4:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e9ca:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e9ce:	48 c7 c0 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rax
ffffffff8021e9d5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e9d9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e9dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9e0:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e9e6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e9ea:	48 c7 c0 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rax
ffffffff8021e9f1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e9f5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e9f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9fc:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021ea02:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ea05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea09:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021ea0f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021ea16:	48 c7 c2 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rdx
ffffffff8021ea1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea21:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021ea27:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ea2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea2e:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021ea34:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ea3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea3e:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021ea44:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ea48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea4c:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021ea52:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ea56:	48 c7 c0 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rax
ffffffff8021ea5d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ea61:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ea64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea68:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021ea6e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ea72:	48 c7 c0 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rax
ffffffff8021ea79:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ea7d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ea80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea84:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021ea8a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ea8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea91:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021ea97:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ea9e:	48 c7 c2 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rdx
ffffffff8021eaa5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eaa9:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021eaaf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eab2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eab6:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021eabc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eac2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eac6:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021eacc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ead0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ead4:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021eada:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eade:	48 c7 c0 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rax
ffffffff8021eae5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021eae9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eaec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eaf0:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021eaf6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eafa:	48 c7 c0 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rax
ffffffff8021eb01:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eb05:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eb08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb0c:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021eb12:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eb15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb19:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021eb1f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8021eb26:	48 c7 c2 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rdx
ffffffff8021eb2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb31:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eb37:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eb3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb3e:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eb44:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eb4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb4e:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eb54:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021eb58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb5c:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eb62:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eb66:	48 c7 c0 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rax
ffffffff8021eb6d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021eb71:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eb74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb78:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eb7e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eb82:	48 c7 c0 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rax
ffffffff8021eb89:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eb8d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eb90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb94:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eb9a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eb9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eba1:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eba7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ebae:	48 c7 c2 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rdx
ffffffff8021ebb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebb9:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ebbf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ebc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebc6:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ebcc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ebd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebd6:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ebdc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ebe0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebe4:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ebea:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ebee:	48 c7 c0 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rax
ffffffff8021ebf5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ebf9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ebfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec00:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ec06:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ec0a:	48 c7 c0 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rax
ffffffff8021ec11:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ec15:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ec18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec1c:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ec22:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ec25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec29:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ec2f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8021ec36:	48 c7 c2 ed bc 20 80 	mov    $0xffffffff8020bced,%rdx
ffffffff8021ec3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec41:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ec47:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ec4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec4e:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ec54:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ec5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec5e:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ec64:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ec68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec6c:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ec72:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ec76:	48 c7 c0 ed bc 20 80 	mov    $0xffffffff8020bced,%rax
ffffffff8021ec7d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ec81:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ec84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec88:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ec8e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ec92:	48 c7 c0 ed bc 20 80 	mov    $0xffffffff8020bced,%rax
ffffffff8021ec99:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ec9d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eca0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eca4:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ecaa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ecad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecb1:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ecb7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ecbe:	48 c7 c2 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rdx
ffffffff8021ecc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecc9:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021eccf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ecd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecd6:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ecdc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ece2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ece6:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ecec:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ecf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecf4:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ecfa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ecfe:	48 c7 c0 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rax
ffffffff8021ed05:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ed09:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed10:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ed16:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ed1a:	48 c7 c0 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rax
ffffffff8021ed21:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ed25:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed2c:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ed32:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ed35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed39:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ed3f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8021ed46:	48 c7 c2 05 bd 20 80 	mov    $0xffffffff8020bd05,%rdx
ffffffff8021ed4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed51:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ed57:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ed5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed5e:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ed64:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ed6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed6e:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ed74:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ed78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed7c:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ed82:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ed86:	48 c7 c0 05 bd 20 80 	mov    $0xffffffff8020bd05,%rax
ffffffff8021ed8d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ed91:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed98:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ed9e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eda2:	48 c7 c0 05 bd 20 80 	mov    $0xffffffff8020bd05,%rax
ffffffff8021eda9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021edad:	48 89 c2             	mov    %rax,%rdx
ffffffff8021edb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edb4:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021edba:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021edbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edc1:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021edc7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021edce:	48 c7 c2 11 bd 20 80 	mov    $0xffffffff8020bd11,%rdx
ffffffff8021edd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edd9:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021eddf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ede2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ede6:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021edec:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021edf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edf6:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021edfc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ee00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee04:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ee0a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ee0e:	48 c7 c0 11 bd 20 80 	mov    $0xffffffff8020bd11,%rax
ffffffff8021ee15:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ee19:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee20:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ee26:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ee2a:	48 c7 c0 11 bd 20 80 	mov    $0xffffffff8020bd11,%rax
ffffffff8021ee31:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ee35:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee3c:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ee42:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ee45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee49:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ee4f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8021ee56:	48 c7 c2 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rdx
ffffffff8021ee5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee61:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ee67:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ee6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee6e:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ee74:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ee7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee7e:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ee84:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ee88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee8c:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ee92:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ee96:	48 c7 c0 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rax
ffffffff8021ee9d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021eea1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eea4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eea8:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021eeae:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eeb2:	48 c7 c0 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rax
ffffffff8021eeb9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eebd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eec0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eec4:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021eeca:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eecd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eed1:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021eed7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021eede:	48 c7 c2 29 bd 20 80 	mov    $0xffffffff8020bd29,%rdx
ffffffff8021eee5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eee9:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021eeef:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eef2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eef6:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021eefc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ef02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef06:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ef0c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ef10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef14:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ef1a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ef1e:	48 c7 c0 29 bd 20 80 	mov    $0xffffffff8020bd29,%rax
ffffffff8021ef25:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ef29:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ef2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef30:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ef36:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ef3a:	48 c7 c0 29 bd 20 80 	mov    $0xffffffff8020bd29,%rax
ffffffff8021ef41:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ef45:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ef48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef4c:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ef52:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ef55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef59:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ef5f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8021ef66:	48 c7 c2 35 bd 20 80 	mov    $0xffffffff8020bd35,%rdx
ffffffff8021ef6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef71:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ef77:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ef7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef7e:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ef84:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ef8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef8e:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ef94:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ef98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef9c:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021efa2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021efa6:	48 c7 c0 35 bd 20 80 	mov    $0xffffffff8020bd35,%rax
ffffffff8021efad:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021efb1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021efb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efb8:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021efbe:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021efc2:	48 c7 c0 35 bd 20 80 	mov    $0xffffffff8020bd35,%rax
ffffffff8021efc9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021efcd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021efd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efd4:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021efda:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021efdd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efe1:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021efe7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021efee:	48 c7 c2 41 bd 20 80 	mov    $0xffffffff8020bd41,%rdx
ffffffff8021eff5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eff9:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021efff:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f002:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f006:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021f00c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f012:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f016:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021f01c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f020:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f024:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021f02a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f02e:	48 c7 c0 41 bd 20 80 	mov    $0xffffffff8020bd41,%rax
ffffffff8021f035:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f039:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f03c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f040:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021f046:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f04a:	48 c7 c0 41 bd 20 80 	mov    $0xffffffff8020bd41,%rax
ffffffff8021f051:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f055:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f058:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f05c:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021f062:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f065:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f069:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021f06f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8021f076:	48 c7 c2 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rdx
ffffffff8021f07d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f081:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f087:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f08a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f08e:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f094:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f09a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f09e:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f0a4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f0a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0ac:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f0b2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f0b6:	48 c7 c0 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rax
ffffffff8021f0bd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f0c1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f0c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0c8:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f0ce:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f0d2:	48 c7 c0 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rax
ffffffff8021f0d9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f0dd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f0e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0e4:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f0ea:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f0ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0f1:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f0f7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f0fe:	48 c7 c2 59 bd 20 80 	mov    $0xffffffff8020bd59,%rdx
ffffffff8021f105:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f109:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f10f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f112:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f116:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f11c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f122:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f126:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f12c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f130:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f134:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f13a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f13e:	48 c7 c0 59 bd 20 80 	mov    $0xffffffff8020bd59,%rax
ffffffff8021f145:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f149:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f14c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f150:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f156:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f15a:	48 c7 c0 59 bd 20 80 	mov    $0xffffffff8020bd59,%rax
ffffffff8021f161:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f165:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f168:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f16c:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f172:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f175:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f179:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f17f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8021f186:	48 c7 c2 65 bd 20 80 	mov    $0xffffffff8020bd65,%rdx
ffffffff8021f18d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f191:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f197:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f19a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f19e:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f1a4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f1aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1ae:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f1b4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f1b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1bc:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f1c2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f1c6:	48 c7 c0 65 bd 20 80 	mov    $0xffffffff8020bd65,%rax
ffffffff8021f1cd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f1d1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f1d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1d8:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f1de:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f1e2:	48 c7 c0 65 bd 20 80 	mov    $0xffffffff8020bd65,%rax
ffffffff8021f1e9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f1ed:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f1f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1f4:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f1fa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f1fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f201:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f207:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f20e:	48 c7 c2 71 bd 20 80 	mov    $0xffffffff8020bd71,%rdx
ffffffff8021f215:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f219:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f21f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f222:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f226:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f22c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f232:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f236:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f23c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f240:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f244:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f24a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f24e:	48 c7 c0 71 bd 20 80 	mov    $0xffffffff8020bd71,%rax
ffffffff8021f255:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f259:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f25c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f260:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f266:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f26a:	48 c7 c0 71 bd 20 80 	mov    $0xffffffff8020bd71,%rax
ffffffff8021f271:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f275:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f278:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f27c:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f282:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f285:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f289:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f28f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8021f296:	48 c7 c2 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rdx
ffffffff8021f29d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2a1:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f2a7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f2aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2ae:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f2b4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f2ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2be:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f2c4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f2c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2cc:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f2d2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f2d6:	48 c7 c0 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rax
ffffffff8021f2dd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f2e1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f2e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2e8:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f2ee:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f2f2:	48 c7 c0 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rax
ffffffff8021f2f9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f2fd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f300:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f304:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f30a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f30d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f311:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f317:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f31e:	48 c7 c2 89 bd 20 80 	mov    $0xffffffff8020bd89,%rdx
ffffffff8021f325:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f329:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f32f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f332:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f336:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f33c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f342:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f346:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f34c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f350:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f354:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f35a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f35e:	48 c7 c0 89 bd 20 80 	mov    $0xffffffff8020bd89,%rax
ffffffff8021f365:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f369:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f36c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f370:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f376:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f37a:	48 c7 c0 89 bd 20 80 	mov    $0xffffffff8020bd89,%rax
ffffffff8021f381:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f385:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f388:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f38c:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f392:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f395:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f399:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f39f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8021f3a6:	48 c7 c2 95 bd 20 80 	mov    $0xffffffff8020bd95,%rdx
ffffffff8021f3ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3b1:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f3b7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f3ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3be:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f3c4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f3ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3ce:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f3d4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f3d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3dc:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f3e2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f3e6:	48 c7 c0 95 bd 20 80 	mov    $0xffffffff8020bd95,%rax
ffffffff8021f3ed:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f3f1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f3f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3f8:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f3fe:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f402:	48 c7 c0 95 bd 20 80 	mov    $0xffffffff8020bd95,%rax
ffffffff8021f409:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f40d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f410:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f414:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f41a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f41d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f421:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f427:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f42e:	48 c7 c2 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rdx
ffffffff8021f435:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f439:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f43f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f442:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f446:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f44c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f452:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f456:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f45c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f460:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f464:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f46a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f46e:	48 c7 c0 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rax
ffffffff8021f475:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f479:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f47c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f480:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f486:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f48a:	48 c7 c0 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rax
ffffffff8021f491:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f495:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f498:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f49c:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f4a2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f4a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4a9:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f4af:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8021f4b6:	48 c7 c2 ad bd 20 80 	mov    $0xffffffff8020bdad,%rdx
ffffffff8021f4bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4c1:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f4c7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f4ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4ce:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f4d4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f4da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4de:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f4e4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f4e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4ec:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f4f2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f4f6:	48 c7 c0 ad bd 20 80 	mov    $0xffffffff8020bdad,%rax
ffffffff8021f4fd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f501:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f504:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f508:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f50e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f512:	48 c7 c0 ad bd 20 80 	mov    $0xffffffff8020bdad,%rax
ffffffff8021f519:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f51d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f520:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f524:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f52a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f52d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f531:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f537:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f53e:	48 c7 c2 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rdx
ffffffff8021f545:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f549:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f54f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f552:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f556:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f55c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f562:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f566:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f56c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f570:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f574:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f57a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f57e:	48 c7 c0 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rax
ffffffff8021f585:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f589:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f58c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f590:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f596:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f59a:	48 c7 c0 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rax
ffffffff8021f5a1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f5a5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f5a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5ac:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f5b2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f5b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5b9:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f5bf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff8021f5c6:	48 c7 c2 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rdx
ffffffff8021f5cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5d1:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f5d7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f5da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5de:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f5e4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f5ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5ee:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f5f4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f5f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5fc:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f602:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f606:	48 c7 c0 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rax
ffffffff8021f60d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f611:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f614:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f618:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f61e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f622:	48 c7 c0 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rax
ffffffff8021f629:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f62d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f630:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f634:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f63a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f63d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f641:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f647:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f64e:	48 c7 c2 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rdx
ffffffff8021f655:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f659:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f65f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f662:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f666:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f66c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f672:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f676:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f67c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f680:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f684:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f68a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f68e:	48 c7 c0 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rax
ffffffff8021f695:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f699:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f69c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6a0:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f6a6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f6aa:	48 c7 c0 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rax
ffffffff8021f6b1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f6b5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f6b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6bc:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f6c2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f6c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6c9:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f6cf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8021f6d6:	48 c7 c2 dd bd 20 80 	mov    $0xffffffff8020bddd,%rdx
ffffffff8021f6dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6e1:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f6e7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f6ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6ee:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f6f4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f6fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6fe:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f704:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f708:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f70c:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f712:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f716:	48 c7 c0 dd bd 20 80 	mov    $0xffffffff8020bddd,%rax
ffffffff8021f71d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f721:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f724:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f728:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f72e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f732:	48 c7 c0 dd bd 20 80 	mov    $0xffffffff8020bddd,%rax
ffffffff8021f739:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f73d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f740:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f744:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f74a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f74d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f751:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f757:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f75e:	48 c7 c2 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rdx
ffffffff8021f765:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f769:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f76f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f772:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f776:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f77c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f782:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f786:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f78c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f790:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f794:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f79a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f79e:	48 c7 c0 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rax
ffffffff8021f7a5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f7a9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f7ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7b0:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f7b6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f7ba:	48 c7 c0 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rax
ffffffff8021f7c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f7c5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f7c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7cc:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f7d2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f7d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7d9:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f7df:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8021f7e6:	48 c7 c2 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rdx
ffffffff8021f7ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7f1:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f7f7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f7fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7fe:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f804:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f80a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f80e:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f814:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f818:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f81c:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f822:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f826:	48 c7 c0 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rax
ffffffff8021f82d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f831:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f834:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f838:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f83e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f842:	48 c7 c0 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rax
ffffffff8021f849:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f84d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f850:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f854:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f85a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f85d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f861:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f867:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f86e:	48 c7 c2 01 be 20 80 	mov    $0xffffffff8020be01,%rdx
ffffffff8021f875:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f879:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f87f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f882:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f886:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f88c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f892:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f896:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f89c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f8a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8a4:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f8aa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f8ae:	48 c7 c0 01 be 20 80 	mov    $0xffffffff8020be01,%rax
ffffffff8021f8b5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f8b9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f8bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8c0:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f8c6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f8ca:	48 c7 c0 01 be 20 80 	mov    $0xffffffff8020be01,%rax
ffffffff8021f8d1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f8d5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f8d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8dc:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f8e2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f8e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8e9:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f8ef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8021f8f6:	48 c7 c2 0d be 20 80 	mov    $0xffffffff8020be0d,%rdx
ffffffff8021f8fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f901:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f907:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f90a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f90e:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f914:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f91a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f91e:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f924:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f928:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f92c:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f932:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f936:	48 c7 c0 0d be 20 80 	mov    $0xffffffff8020be0d,%rax
ffffffff8021f93d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f941:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f944:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f948:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f94e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f952:	48 c7 c0 0d be 20 80 	mov    $0xffffffff8020be0d,%rax
ffffffff8021f959:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f95d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f960:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f964:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f96a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f96d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f971:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f977:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f97e:	48 c7 c2 19 be 20 80 	mov    $0xffffffff8020be19,%rdx
ffffffff8021f985:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f989:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f98f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f992:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f996:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f99c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f9a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9a6:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f9ac:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f9b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9b4:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f9ba:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f9be:	48 c7 c0 19 be 20 80 	mov    $0xffffffff8020be19,%rax
ffffffff8021f9c5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f9c9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f9cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9d0:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f9d6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f9da:	48 c7 c0 19 be 20 80 	mov    $0xffffffff8020be19,%rax
ffffffff8021f9e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f9e5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f9e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9ec:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f9f2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f9f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9f9:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f9ff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8021fa06:	48 c7 c2 25 be 20 80 	mov    $0xffffffff8020be25,%rdx
ffffffff8021fa0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa11:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021fa17:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fa1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa1e:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021fa24:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fa2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa2e:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021fa34:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fa38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa3c:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021fa42:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fa46:	48 c7 c0 25 be 20 80 	mov    $0xffffffff8020be25,%rax
ffffffff8021fa4d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fa51:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fa54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa58:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021fa5e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fa62:	48 c7 c0 25 be 20 80 	mov    $0xffffffff8020be25,%rax
ffffffff8021fa69:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fa6d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fa70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa74:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021fa7a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fa7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa81:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021fa87:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fa8e:	48 c7 c2 31 be 20 80 	mov    $0xffffffff8020be31,%rdx
ffffffff8021fa95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa99:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021fa9f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021faa2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021faa6:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021faac:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fab2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fab6:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021fabc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fac0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fac4:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021faca:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021face:	48 c7 c0 31 be 20 80 	mov    $0xffffffff8020be31,%rax
ffffffff8021fad5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fad9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fadc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fae0:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021fae6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021faea:	48 c7 c0 31 be 20 80 	mov    $0xffffffff8020be31,%rax
ffffffff8021faf1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021faf5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021faf8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fafc:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021fb02:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fb05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb09:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021fb0f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8021fb16:	48 c7 c2 3d be 20 80 	mov    $0xffffffff8020be3d,%rdx
ffffffff8021fb1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb21:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fb27:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fb2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb2e:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fb34:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fb3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb3e:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fb44:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fb48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb4c:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fb52:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fb56:	48 c7 c0 3d be 20 80 	mov    $0xffffffff8020be3d,%rax
ffffffff8021fb5d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fb61:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fb64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb68:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fb6e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fb72:	48 c7 c0 3d be 20 80 	mov    $0xffffffff8020be3d,%rax
ffffffff8021fb79:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fb7d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fb80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb84:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fb8a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fb8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb91:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fb97:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fb9e:	48 c7 c2 49 be 20 80 	mov    $0xffffffff8020be49,%rdx
ffffffff8021fba5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fba9:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fbaf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fbb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbb6:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fbbc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fbc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbc6:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fbcc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fbd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbd4:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fbda:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fbde:	48 c7 c0 49 be 20 80 	mov    $0xffffffff8020be49,%rax
ffffffff8021fbe5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fbe9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fbec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbf0:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fbf6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fbfa:	48 c7 c0 49 be 20 80 	mov    $0xffffffff8020be49,%rax
ffffffff8021fc01:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fc05:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fc08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc0c:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fc12:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fc15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc19:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fc1f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8021fc26:	48 c7 c2 55 be 20 80 	mov    $0xffffffff8020be55,%rdx
ffffffff8021fc2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc31:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fc37:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fc3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc3e:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fc44:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fc4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc4e:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fc54:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fc58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc5c:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fc62:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fc66:	48 c7 c0 55 be 20 80 	mov    $0xffffffff8020be55,%rax
ffffffff8021fc6d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fc71:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fc74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc78:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fc7e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fc82:	48 c7 c0 55 be 20 80 	mov    $0xffffffff8020be55,%rax
ffffffff8021fc89:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fc8d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fc90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc94:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fc9a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fc9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fca1:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fca7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fcae:	48 c7 c2 64 be 20 80 	mov    $0xffffffff8020be64,%rdx
ffffffff8021fcb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcb9:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fcbf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fcc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcc6:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fccc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fcd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcd6:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fcdc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fce0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fce4:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fcea:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fcee:	48 c7 c0 64 be 20 80 	mov    $0xffffffff8020be64,%rax
ffffffff8021fcf5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fcf9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fcfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd00:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fd06:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fd0a:	48 c7 c0 64 be 20 80 	mov    $0xffffffff8020be64,%rax
ffffffff8021fd11:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fd15:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fd18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd1c:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fd22:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fd25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd29:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fd2f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8021fd36:	48 c7 c2 73 be 20 80 	mov    $0xffffffff8020be73,%rdx
ffffffff8021fd3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd41:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fd47:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fd4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd4e:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fd54:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fd5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd5e:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fd64:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fd68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd6c:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fd72:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fd76:	48 c7 c0 73 be 20 80 	mov    $0xffffffff8020be73,%rax
ffffffff8021fd7d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fd81:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fd84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd88:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fd8e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fd92:	48 c7 c0 73 be 20 80 	mov    $0xffffffff8020be73,%rax
ffffffff8021fd99:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fd9d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fda0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fda4:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fdaa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fdad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdb1:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fdb7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fdbe:	48 c7 c2 82 be 20 80 	mov    $0xffffffff8020be82,%rdx
ffffffff8021fdc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdc9:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fdcf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fdd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdd6:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fddc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fde2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fde6:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fdec:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fdf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdf4:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fdfa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fdfe:	48 c7 c0 82 be 20 80 	mov    $0xffffffff8020be82,%rax
ffffffff8021fe05:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fe09:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe10:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fe16:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fe1a:	48 c7 c0 82 be 20 80 	mov    $0xffffffff8020be82,%rax
ffffffff8021fe21:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fe25:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe2c:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fe32:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fe35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe39:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fe3f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8021fe46:	48 c7 c2 91 be 20 80 	mov    $0xffffffff8020be91,%rdx
ffffffff8021fe4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe51:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fe57:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fe5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe5e:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fe64:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fe6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe6e:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fe74:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fe78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe7c:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fe82:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fe86:	48 c7 c0 91 be 20 80 	mov    $0xffffffff8020be91,%rax
ffffffff8021fe8d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fe91:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe98:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fe9e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fea2:	48 c7 c0 91 be 20 80 	mov    $0xffffffff8020be91,%rax
ffffffff8021fea9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fead:	48 89 c2             	mov    %rax,%rdx
ffffffff8021feb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021feb4:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021feba:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021febd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fec1:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fec7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fece:	48 c7 c2 a0 be 20 80 	mov    $0xffffffff8020bea0,%rdx
ffffffff8021fed5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fed9:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fedf:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fee2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fee6:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021feec:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fef2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fef6:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fefc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ff00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff04:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021ff0a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ff0e:	48 c7 c0 a0 be 20 80 	mov    $0xffffffff8020bea0,%rax
ffffffff8021ff15:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ff19:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff20:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021ff26:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ff2a:	48 c7 c0 a0 be 20 80 	mov    $0xffffffff8020bea0,%rax
ffffffff8021ff31:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ff35:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff3c:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021ff42:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ff45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff49:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021ff4f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8021ff56:	48 c7 c2 af be 20 80 	mov    $0xffffffff8020beaf,%rdx
ffffffff8021ff5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff61:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ff67:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ff6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff6e:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ff74:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ff7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff7e:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ff84:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ff88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff8c:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ff92:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ff96:	48 c7 c0 af be 20 80 	mov    $0xffffffff8020beaf,%rax
ffffffff8021ff9d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ffa1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ffa4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffa8:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ffae:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ffb2:	48 c7 c0 af be 20 80 	mov    $0xffffffff8020beaf,%rax
ffffffff8021ffb9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ffbd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ffc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffc4:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ffca:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ffcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffd1:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ffd7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ffde:	48 c7 c2 be be 20 80 	mov    $0xffffffff8020bebe,%rdx
ffffffff8021ffe5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffe9:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021ffef:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fff2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fff6:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fffc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220002:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220006:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8022000c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220010:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220014:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8022001a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022001e:	48 c7 c0 be be 20 80 	mov    $0xffffffff8020bebe,%rax
ffffffff80220025:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220029:	48 89 c2             	mov    %rax,%rdx
ffffffff8022002c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220030:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff80220036:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022003a:	48 c7 c0 be be 20 80 	mov    $0xffffffff8020bebe,%rax
ffffffff80220041:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220045:	48 89 c2             	mov    %rax,%rdx
ffffffff80220048:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022004c:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff80220052:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220055:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220059:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8022005f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80220066:	48 c7 c2 cd be 20 80 	mov    $0xffffffff8020becd,%rdx
ffffffff8022006d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220071:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff80220077:	66 89 10             	mov    %dx,(%rax)
ffffffff8022007a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022007e:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff80220084:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022008a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022008e:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff80220094:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220098:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022009c:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff802200a2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802200a6:	48 c7 c0 cd be 20 80 	mov    $0xffffffff8020becd,%rax
ffffffff802200ad:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802200b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802200b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200b8:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff802200be:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802200c2:	48 c7 c0 cd be 20 80 	mov    $0xffffffff8020becd,%rax
ffffffff802200c9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802200cd:	48 89 c2             	mov    %rax,%rdx
ffffffff802200d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200d4:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff802200da:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802200dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200e1:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff802200e7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802200ee:	48 c7 c2 dc be 20 80 	mov    $0xffffffff8020bedc,%rdx
ffffffff802200f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200f9:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff802200ff:	66 89 10             	mov    %dx,(%rax)
ffffffff80220102:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220106:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8022010c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220112:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220116:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8022011c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220120:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220124:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8022012a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022012e:	48 c7 c0 dc be 20 80 	mov    $0xffffffff8020bedc,%rax
ffffffff80220135:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220139:	48 89 c2             	mov    %rax,%rdx
ffffffff8022013c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220140:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff80220146:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022014a:	48 c7 c0 dc be 20 80 	mov    $0xffffffff8020bedc,%rax
ffffffff80220151:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220155:	48 89 c2             	mov    %rax,%rdx
ffffffff80220158:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022015c:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff80220162:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220165:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220169:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8022016f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80220176:	48 c7 c2 eb be 20 80 	mov    $0xffffffff8020beeb,%rdx
ffffffff8022017d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220181:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff80220187:	66 89 10             	mov    %dx,(%rax)
ffffffff8022018a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022018e:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff80220194:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022019a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022019e:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff802201a4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802201a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201ac:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff802201b2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802201b6:	48 c7 c0 eb be 20 80 	mov    $0xffffffff8020beeb,%rax
ffffffff802201bd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802201c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802201c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201c8:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff802201ce:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802201d2:	48 c7 c0 eb be 20 80 	mov    $0xffffffff8020beeb,%rax
ffffffff802201d9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802201dd:	48 89 c2             	mov    %rax,%rdx
ffffffff802201e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201e4:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff802201ea:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802201ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201f1:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff802201f7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802201fe:	48 c7 c2 fa be 20 80 	mov    $0xffffffff8020befa,%rdx
ffffffff80220205:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220209:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8022020f:	66 89 10             	mov    %dx,(%rax)
ffffffff80220212:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220216:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8022021c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220222:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220226:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8022022c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220230:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220234:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8022023a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022023e:	48 c7 c0 fa be 20 80 	mov    $0xffffffff8020befa,%rax
ffffffff80220245:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220249:	48 89 c2             	mov    %rax,%rdx
ffffffff8022024c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220250:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff80220256:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022025a:	48 c7 c0 fa be 20 80 	mov    $0xffffffff8020befa,%rax
ffffffff80220261:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220265:	48 89 c2             	mov    %rax,%rdx
ffffffff80220268:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022026c:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff80220272:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220275:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220279:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8022027f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80220286:	48 c7 c2 09 bf 20 80 	mov    $0xffffffff8020bf09,%rdx
ffffffff8022028d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220291:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220297:	66 89 10             	mov    %dx,(%rax)
ffffffff8022029a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022029e:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff802202a4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802202aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202ae:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff802202b4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802202b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202bc:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff802202c2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802202c6:	48 c7 c0 09 bf 20 80 	mov    $0xffffffff8020bf09,%rax
ffffffff802202cd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802202d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802202d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202d8:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff802202de:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802202e2:	48 c7 c0 09 bf 20 80 	mov    $0xffffffff8020bf09,%rax
ffffffff802202e9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802202ed:	48 89 c2             	mov    %rax,%rdx
ffffffff802202f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202f4:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff802202fa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802202fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220301:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220307:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022030e:	48 c7 c2 18 bf 20 80 	mov    $0xffffffff8020bf18,%rdx
ffffffff80220315:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220319:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff8022031f:	66 89 10             	mov    %dx,(%rax)
ffffffff80220322:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220326:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff8022032c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220332:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220336:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff8022033c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220340:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220344:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff8022034a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022034e:	48 c7 c0 18 bf 20 80 	mov    $0xffffffff8020bf18,%rax
ffffffff80220355:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220359:	48 89 c2             	mov    %rax,%rdx
ffffffff8022035c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220360:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff80220366:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022036a:	48 c7 c0 18 bf 20 80 	mov    $0xffffffff8020bf18,%rax
ffffffff80220371:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220375:	48 89 c2             	mov    %rax,%rdx
ffffffff80220378:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022037c:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff80220382:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220385:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220389:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff8022038f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80220396:	48 c7 c2 27 bf 20 80 	mov    $0xffffffff8020bf27,%rdx
ffffffff8022039d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203a1:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff802203a7:	66 89 10             	mov    %dx,(%rax)
ffffffff802203aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203ae:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff802203b4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802203ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203be:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff802203c4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802203c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203cc:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff802203d2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802203d6:	48 c7 c0 27 bf 20 80 	mov    $0xffffffff8020bf27,%rax
ffffffff802203dd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802203e1:	48 89 c2             	mov    %rax,%rdx
ffffffff802203e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203e8:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff802203ee:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802203f2:	48 c7 c0 27 bf 20 80 	mov    $0xffffffff8020bf27,%rax
ffffffff802203f9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802203fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80220400:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220404:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff8022040a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022040d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220411:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff80220417:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022041e:	48 c7 c2 36 bf 20 80 	mov    $0xffffffff8020bf36,%rdx
ffffffff80220425:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220429:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff8022042f:	66 89 10             	mov    %dx,(%rax)
ffffffff80220432:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220436:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff8022043c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220442:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220446:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff8022044c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220450:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220454:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff8022045a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022045e:	48 c7 c0 36 bf 20 80 	mov    $0xffffffff8020bf36,%rax
ffffffff80220465:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220469:	48 89 c2             	mov    %rax,%rdx
ffffffff8022046c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220470:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff80220476:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022047a:	48 c7 c0 36 bf 20 80 	mov    $0xffffffff8020bf36,%rax
ffffffff80220481:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220485:	48 89 c2             	mov    %rax,%rdx
ffffffff80220488:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022048c:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff80220492:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220495:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220499:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff8022049f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff802204a6:	48 c7 c2 45 bf 20 80 	mov    $0xffffffff8020bf45,%rdx
ffffffff802204ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204b1:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff802204b7:	66 89 10             	mov    %dx,(%rax)
ffffffff802204ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204be:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff802204c4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802204ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204ce:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff802204d4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802204d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204dc:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff802204e2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802204e6:	48 c7 c0 45 bf 20 80 	mov    $0xffffffff8020bf45,%rax
ffffffff802204ed:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802204f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802204f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204f8:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff802204fe:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220502:	48 c7 c0 45 bf 20 80 	mov    $0xffffffff8020bf45,%rax
ffffffff80220509:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022050d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220510:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220514:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff8022051a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022051d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220521:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220527:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022052e:	48 c7 c2 54 bf 20 80 	mov    $0xffffffff8020bf54,%rdx
ffffffff80220535:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220539:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff8022053f:	66 89 10             	mov    %dx,(%rax)
ffffffff80220542:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220546:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff8022054c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220552:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220556:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff8022055c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220560:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220564:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff8022056a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022056e:	48 c7 c0 54 bf 20 80 	mov    $0xffffffff8020bf54,%rax
ffffffff80220575:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220579:	48 89 c2             	mov    %rax,%rdx
ffffffff8022057c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220580:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff80220586:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022058a:	48 c7 c0 54 bf 20 80 	mov    $0xffffffff8020bf54,%rax
ffffffff80220591:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220595:	48 89 c2             	mov    %rax,%rdx
ffffffff80220598:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022059c:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802205a2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802205a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205a9:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802205af:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff802205b6:	48 c7 c2 63 bf 20 80 	mov    $0xffffffff8020bf63,%rdx
ffffffff802205bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205c1:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff802205c7:	66 89 10             	mov    %dx,(%rax)
ffffffff802205ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205ce:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff802205d4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802205da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205de:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff802205e4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802205e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205ec:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff802205f2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802205f6:	48 c7 c0 63 bf 20 80 	mov    $0xffffffff8020bf63,%rax
ffffffff802205fd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220601:	48 89 c2             	mov    %rax,%rdx
ffffffff80220604:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220608:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff8022060e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220612:	48 c7 c0 63 bf 20 80 	mov    $0xffffffff8020bf63,%rax
ffffffff80220619:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022061d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220620:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220624:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff8022062a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022062d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220631:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220637:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022063e:	48 c7 c2 72 bf 20 80 	mov    $0xffffffff8020bf72,%rdx
ffffffff80220645:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220649:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff8022064f:	66 89 10             	mov    %dx,(%rax)
ffffffff80220652:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220656:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff8022065c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220662:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220666:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff8022066c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220670:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220674:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff8022067a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022067e:	48 c7 c0 72 bf 20 80 	mov    $0xffffffff8020bf72,%rax
ffffffff80220685:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220689:	48 89 c2             	mov    %rax,%rdx
ffffffff8022068c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220690:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220696:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022069a:	48 c7 c0 72 bf 20 80 	mov    $0xffffffff8020bf72,%rax
ffffffff802206a1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802206a5:	48 89 c2             	mov    %rax,%rdx
ffffffff802206a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206ac:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802206b2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802206b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206b9:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802206bf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff802206c6:	48 c7 c2 81 bf 20 80 	mov    $0xffffffff8020bf81,%rdx
ffffffff802206cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206d1:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff802206d7:	66 89 10             	mov    %dx,(%rax)
ffffffff802206da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206de:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff802206e4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802206ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206ee:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff802206f4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802206f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206fc:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220702:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220706:	48 c7 c0 81 bf 20 80 	mov    $0xffffffff8020bf81,%rax
ffffffff8022070d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220711:	48 89 c2             	mov    %rax,%rdx
ffffffff80220714:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220718:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff8022071e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220722:	48 c7 c0 81 bf 20 80 	mov    $0xffffffff8020bf81,%rax
ffffffff80220729:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022072d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220730:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220734:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff8022073a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022073d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220741:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220747:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022074e:	48 c7 c2 90 bf 20 80 	mov    $0xffffffff8020bf90,%rdx
ffffffff80220755:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220759:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff8022075f:	66 89 10             	mov    %dx,(%rax)
ffffffff80220762:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220766:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff8022076c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220772:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220776:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff8022077c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220780:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220784:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff8022078a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022078e:	48 c7 c0 90 bf 20 80 	mov    $0xffffffff8020bf90,%rax
ffffffff80220795:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220799:	48 89 c2             	mov    %rax,%rdx
ffffffff8022079c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207a0:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802207a6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802207aa:	48 c7 c0 90 bf 20 80 	mov    $0xffffffff8020bf90,%rax
ffffffff802207b1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802207b5:	48 89 c2             	mov    %rax,%rdx
ffffffff802207b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207bc:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802207c2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802207c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207c9:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802207cf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff802207d6:	48 c7 c2 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rdx
ffffffff802207dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207e1:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802207e7:	66 89 10             	mov    %dx,(%rax)
ffffffff802207ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207ee:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802207f4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802207fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207fe:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220804:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220808:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022080c:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220812:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220816:	48 c7 c0 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rax
ffffffff8022081d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220821:	48 89 c2             	mov    %rax,%rdx
ffffffff80220824:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220828:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff8022082e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220832:	48 c7 c0 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rax
ffffffff80220839:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022083d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220840:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220844:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff8022084a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022084d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220851:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220857:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022085e:	48 c7 c2 ae bf 20 80 	mov    $0xffffffff8020bfae,%rdx
ffffffff80220865:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220869:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff8022086f:	66 89 10             	mov    %dx,(%rax)
ffffffff80220872:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220876:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff8022087c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220882:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220886:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff8022088c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220890:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220894:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff8022089a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022089e:	48 c7 c0 ae bf 20 80 	mov    $0xffffffff8020bfae,%rax
ffffffff802208a5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802208a9:	48 89 c2             	mov    %rax,%rdx
ffffffff802208ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208b0:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff802208b6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802208ba:	48 c7 c0 ae bf 20 80 	mov    $0xffffffff8020bfae,%rax
ffffffff802208c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802208c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802208c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208cc:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff802208d2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802208d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208d9:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff802208df:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff802208e6:	48 c7 c2 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rdx
ffffffff802208ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208f1:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802208f7:	66 89 10             	mov    %dx,(%rax)
ffffffff802208fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208fe:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220904:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022090a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022090e:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220914:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220918:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022091c:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220922:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220926:	48 c7 c0 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rax
ffffffff8022092d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220931:	48 89 c2             	mov    %rax,%rdx
ffffffff80220934:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220938:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff8022093e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220942:	48 c7 c0 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rax
ffffffff80220949:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022094d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220950:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220954:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff8022095a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022095d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220961:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220967:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022096e:	48 c7 c2 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rdx
ffffffff80220975:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220979:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff8022097f:	66 89 10             	mov    %dx,(%rax)
ffffffff80220982:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220986:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff8022098c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220992:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220996:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff8022099c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802209a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209a4:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff802209aa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802209ae:	48 c7 c0 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rax
ffffffff802209b5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802209b9:	48 89 c2             	mov    %rax,%rdx
ffffffff802209bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209c0:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff802209c6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802209ca:	48 c7 c0 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rax
ffffffff802209d1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802209d5:	48 89 c2             	mov    %rax,%rdx
ffffffff802209d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209dc:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff802209e2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802209e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209e9:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff802209ef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff802209f6:	48 c7 c2 db bf 20 80 	mov    $0xffffffff8020bfdb,%rdx
ffffffff802209fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a01:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220a07:	66 89 10             	mov    %dx,(%rax)
ffffffff80220a0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a0e:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220a14:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220a1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a1e:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220a24:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220a28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a2c:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220a32:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220a36:	48 c7 c0 db bf 20 80 	mov    $0xffffffff8020bfdb,%rax
ffffffff80220a3d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220a41:	48 89 c2             	mov    %rax,%rdx
ffffffff80220a44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a48:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220a4e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220a52:	48 c7 c0 db bf 20 80 	mov    $0xffffffff8020bfdb,%rax
ffffffff80220a59:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220a5d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220a60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a64:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220a6a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220a6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a71:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220a77:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220a7e:	48 c7 c2 ea bf 20 80 	mov    $0xffffffff8020bfea,%rdx
ffffffff80220a85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a89:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220a8f:	66 89 10             	mov    %dx,(%rax)
ffffffff80220a92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a96:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220a9c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220aa2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220aa6:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220aac:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220ab0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ab4:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220aba:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220abe:	48 c7 c0 ea bf 20 80 	mov    $0xffffffff8020bfea,%rax
ffffffff80220ac5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220ac9:	48 89 c2             	mov    %rax,%rdx
ffffffff80220acc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ad0:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220ad6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220ada:	48 c7 c0 ea bf 20 80 	mov    $0xffffffff8020bfea,%rax
ffffffff80220ae1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220ae5:	48 89 c2             	mov    %rax,%rdx
ffffffff80220ae8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220aec:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220af2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220af5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220af9:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220aff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80220b06:	48 c7 c2 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rdx
ffffffff80220b0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b11:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220b17:	66 89 10             	mov    %dx,(%rax)
ffffffff80220b1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b1e:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220b24:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220b2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b2e:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220b34:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220b38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b3c:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220b42:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220b46:	48 c7 c0 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rax
ffffffff80220b4d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220b51:	48 89 c2             	mov    %rax,%rdx
ffffffff80220b54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b58:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220b5e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220b62:	48 c7 c0 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rax
ffffffff80220b69:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220b6d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220b70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b74:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220b7a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220b7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b81:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220b87:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220b8e:	48 c7 c2 08 c0 20 80 	mov    $0xffffffff8020c008,%rdx
ffffffff80220b95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b99:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220b9f:	66 89 10             	mov    %dx,(%rax)
ffffffff80220ba2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ba6:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220bac:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220bb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bb6:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220bbc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220bc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bc4:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220bca:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220bce:	48 c7 c0 08 c0 20 80 	mov    $0xffffffff8020c008,%rax
ffffffff80220bd5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220bd9:	48 89 c2             	mov    %rax,%rdx
ffffffff80220bdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220be0:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220be6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220bea:	48 c7 c0 08 c0 20 80 	mov    $0xffffffff8020c008,%rax
ffffffff80220bf1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220bf5:	48 89 c2             	mov    %rax,%rdx
ffffffff80220bf8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bfc:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220c02:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220c05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c09:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220c0f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80220c16:	48 c7 c2 17 c0 20 80 	mov    $0xffffffff8020c017,%rdx
ffffffff80220c1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c21:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220c27:	66 89 10             	mov    %dx,(%rax)
ffffffff80220c2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c2e:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220c34:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220c3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c3e:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220c44:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220c48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c4c:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220c52:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220c56:	48 c7 c0 17 c0 20 80 	mov    $0xffffffff8020c017,%rax
ffffffff80220c5d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220c61:	48 89 c2             	mov    %rax,%rdx
ffffffff80220c64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c68:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220c6e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220c72:	48 c7 c0 17 c0 20 80 	mov    $0xffffffff8020c017,%rax
ffffffff80220c79:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220c7d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220c80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c84:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220c8a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220c8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c91:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220c97:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220c9e:	48 c7 c2 26 c0 20 80 	mov    $0xffffffff8020c026,%rdx
ffffffff80220ca5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ca9:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220caf:	66 89 10             	mov    %dx,(%rax)
ffffffff80220cb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cb6:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220cbc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220cc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cc6:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220ccc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220cd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cd4:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220cda:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220cde:	48 c7 c0 26 c0 20 80 	mov    $0xffffffff8020c026,%rax
ffffffff80220ce5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220ce9:	48 89 c2             	mov    %rax,%rdx
ffffffff80220cec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cf0:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220cf6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220cfa:	48 c7 c0 26 c0 20 80 	mov    $0xffffffff8020c026,%rax
ffffffff80220d01:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220d05:	48 89 c2             	mov    %rax,%rdx
ffffffff80220d08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d0c:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220d12:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220d15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d19:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220d1f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80220d26:	48 c7 c2 35 c0 20 80 	mov    $0xffffffff8020c035,%rdx
ffffffff80220d2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d31:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220d37:	66 89 10             	mov    %dx,(%rax)
ffffffff80220d3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d3e:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220d44:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220d4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d4e:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220d54:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220d58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d5c:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220d62:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220d66:	48 c7 c0 35 c0 20 80 	mov    $0xffffffff8020c035,%rax
ffffffff80220d6d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220d71:	48 89 c2             	mov    %rax,%rdx
ffffffff80220d74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d78:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220d7e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220d82:	48 c7 c0 35 c0 20 80 	mov    $0xffffffff8020c035,%rax
ffffffff80220d89:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220d8d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220d90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d94:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220d9a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220d9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220da1:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220da7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220dae:	48 c7 c2 44 c0 20 80 	mov    $0xffffffff8020c044,%rdx
ffffffff80220db5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220db9:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220dbf:	66 89 10             	mov    %dx,(%rax)
ffffffff80220dc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dc6:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220dcc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220dd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dd6:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220ddc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220de0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220de4:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220dea:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220dee:	48 c7 c0 44 c0 20 80 	mov    $0xffffffff8020c044,%rax
ffffffff80220df5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220df9:	48 89 c2             	mov    %rax,%rdx
ffffffff80220dfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e00:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220e06:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220e0a:	48 c7 c0 44 c0 20 80 	mov    $0xffffffff8020c044,%rax
ffffffff80220e11:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220e15:	48 89 c2             	mov    %rax,%rdx
ffffffff80220e18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e1c:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220e22:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220e25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e29:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220e2f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80220e36:	48 c7 c2 53 c0 20 80 	mov    $0xffffffff8020c053,%rdx
ffffffff80220e3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e41:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220e47:	66 89 10             	mov    %dx,(%rax)
ffffffff80220e4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e4e:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220e54:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220e5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e5e:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220e64:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220e68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e6c:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220e72:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220e76:	48 c7 c0 53 c0 20 80 	mov    $0xffffffff8020c053,%rax
ffffffff80220e7d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220e81:	48 89 c2             	mov    %rax,%rdx
ffffffff80220e84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e88:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220e8e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220e92:	48 c7 c0 53 c0 20 80 	mov    $0xffffffff8020c053,%rax
ffffffff80220e99:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220e9d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220ea0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ea4:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220eaa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220ead:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220eb1:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220eb7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220ebe:	48 c7 c2 62 c0 20 80 	mov    $0xffffffff8020c062,%rdx
ffffffff80220ec5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ec9:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220ecf:	66 89 10             	mov    %dx,(%rax)
ffffffff80220ed2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ed6:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220edc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220ee2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ee6:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220eec:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220ef0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ef4:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220efa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220efe:	48 c7 c0 62 c0 20 80 	mov    $0xffffffff8020c062,%rax
ffffffff80220f05:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220f09:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f10:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220f16:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220f1a:	48 c7 c0 62 c0 20 80 	mov    $0xffffffff8020c062,%rax
ffffffff80220f21:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220f25:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f2c:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220f32:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220f35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f39:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220f3f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80220f46:	48 c7 c2 71 c0 20 80 	mov    $0xffffffff8020c071,%rdx
ffffffff80220f4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f51:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220f57:	66 89 10             	mov    %dx,(%rax)
ffffffff80220f5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f5e:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220f64:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220f6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f6e:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220f74:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220f78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f7c:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220f82:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220f86:	48 c7 c0 71 c0 20 80 	mov    $0xffffffff8020c071,%rax
ffffffff80220f8d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220f91:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f98:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220f9e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220fa2:	48 c7 c0 71 c0 20 80 	mov    $0xffffffff8020c071,%rax
ffffffff80220fa9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220fad:	48 89 c2             	mov    %rax,%rdx
ffffffff80220fb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fb4:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220fba:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220fbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fc1:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220fc7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220fce:	48 c7 c2 80 c0 20 80 	mov    $0xffffffff8020c080,%rdx
ffffffff80220fd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fd9:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220fdf:	66 89 10             	mov    %dx,(%rax)
ffffffff80220fe2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fe6:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220fec:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220ff2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ff6:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220ffc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221000:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221004:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff8022100a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022100e:	48 c7 c0 80 c0 20 80 	mov    $0xffffffff8020c080,%rax
ffffffff80221015:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221019:	48 89 c2             	mov    %rax,%rdx
ffffffff8022101c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221020:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80221026:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022102a:	48 c7 c0 80 c0 20 80 	mov    $0xffffffff8020c080,%rax
ffffffff80221031:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221035:	48 89 c2             	mov    %rax,%rdx
ffffffff80221038:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022103c:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80221042:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221045:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221049:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff8022104f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80221056:	48 c7 c2 8f c0 20 80 	mov    $0xffffffff8020c08f,%rdx
ffffffff8022105d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221061:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80221067:	66 89 10             	mov    %dx,(%rax)
ffffffff8022106a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022106e:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80221074:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022107a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022107e:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80221084:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221088:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022108c:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80221092:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221096:	48 c7 c0 8f c0 20 80 	mov    $0xffffffff8020c08f,%rax
ffffffff8022109d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802210a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802210a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210a8:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff802210ae:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802210b2:	48 c7 c0 8f c0 20 80 	mov    $0xffffffff8020c08f,%rax
ffffffff802210b9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802210bd:	48 89 c2             	mov    %rax,%rdx
ffffffff802210c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210c4:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff802210ca:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802210cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210d1:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff802210d7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802210de:	48 c7 c2 9e c0 20 80 	mov    $0xffffffff8020c09e,%rdx
ffffffff802210e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210e9:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff802210ef:	66 89 10             	mov    %dx,(%rax)
ffffffff802210f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210f6:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff802210fc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221102:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221106:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff8022110c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221110:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221114:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff8022111a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022111e:	48 c7 c0 9e c0 20 80 	mov    $0xffffffff8020c09e,%rax
ffffffff80221125:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221129:	48 89 c2             	mov    %rax,%rdx
ffffffff8022112c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221130:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80221136:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022113a:	48 c7 c0 9e c0 20 80 	mov    $0xffffffff8020c09e,%rax
ffffffff80221141:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221145:	48 89 c2             	mov    %rax,%rdx
ffffffff80221148:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022114c:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80221152:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221155:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221159:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff8022115f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80221166:	48 c7 c2 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rdx
ffffffff8022116d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221171:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221177:	66 89 10             	mov    %dx,(%rax)
ffffffff8022117a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022117e:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221184:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022118a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022118e:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221194:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221198:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022119c:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff802211a2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802211a6:	48 c7 c0 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rax
ffffffff802211ad:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802211b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802211b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211b8:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff802211be:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802211c2:	48 c7 c0 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rax
ffffffff802211c9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802211cd:	48 89 c2             	mov    %rax,%rdx
ffffffff802211d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211d4:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff802211da:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802211dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211e1:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff802211e7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802211ee:	48 c7 c2 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rdx
ffffffff802211f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211f9:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff802211ff:	66 89 10             	mov    %dx,(%rax)
ffffffff80221202:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221206:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff8022120c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221212:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221216:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff8022121c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221220:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221224:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff8022122a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022122e:	48 c7 c0 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rax
ffffffff80221235:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221239:	48 89 c2             	mov    %rax,%rdx
ffffffff8022123c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221240:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80221246:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022124a:	48 c7 c0 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rax
ffffffff80221251:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221255:	48 89 c2             	mov    %rax,%rdx
ffffffff80221258:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022125c:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80221262:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221265:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221269:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff8022126f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80221276:	48 c7 c2 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rdx
ffffffff8022127d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221281:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221287:	66 89 10             	mov    %dx,(%rax)
ffffffff8022128a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022128e:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221294:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022129a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022129e:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff802212a4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802212a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212ac:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff802212b2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802212b6:	48 c7 c0 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rax
ffffffff802212bd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802212c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802212c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212c8:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff802212ce:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802212d2:	48 c7 c0 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rax
ffffffff802212d9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802212dd:	48 89 c2             	mov    %rax,%rdx
ffffffff802212e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212e4:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff802212ea:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802212ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212f1:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff802212f7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802212fe:	48 c7 c2 da c0 20 80 	mov    $0xffffffff8020c0da,%rdx
ffffffff80221305:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221309:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff8022130f:	66 89 10             	mov    %dx,(%rax)
ffffffff80221312:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221316:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff8022131c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221322:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221326:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff8022132c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221330:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221334:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff8022133a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022133e:	48 c7 c0 da c0 20 80 	mov    $0xffffffff8020c0da,%rax
ffffffff80221345:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221349:	48 89 c2             	mov    %rax,%rdx
ffffffff8022134c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221350:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff80221356:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022135a:	48 c7 c0 da c0 20 80 	mov    $0xffffffff8020c0da,%rax
ffffffff80221361:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221365:	48 89 c2             	mov    %rax,%rdx
ffffffff80221368:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022136c:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff80221372:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221375:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221379:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff8022137f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80221386:	48 c7 c2 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rdx
ffffffff8022138d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221391:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221397:	66 89 10             	mov    %dx,(%rax)
ffffffff8022139a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022139e:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802213a4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802213aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213ae:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802213b4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802213b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213bc:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802213c2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802213c6:	48 c7 c0 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rax
ffffffff802213cd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802213d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802213d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213d8:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802213de:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802213e2:	48 c7 c0 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rax
ffffffff802213e9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802213ed:	48 89 c2             	mov    %rax,%rdx
ffffffff802213f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213f4:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802213fa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802213fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221401:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221407:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022140e:	48 c7 c2 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rdx
ffffffff80221415:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221419:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff8022141f:	66 89 10             	mov    %dx,(%rax)
ffffffff80221422:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221426:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff8022142c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221432:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221436:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff8022143c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221440:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221444:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff8022144a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022144e:	48 c7 c0 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rax
ffffffff80221455:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221459:	48 89 c2             	mov    %rax,%rdx
ffffffff8022145c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221460:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff80221466:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022146a:	48 c7 c0 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rax
ffffffff80221471:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221475:	48 89 c2             	mov    %rax,%rdx
ffffffff80221478:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022147c:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff80221482:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221485:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221489:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff8022148f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80221496:	48 c7 c2 07 c1 20 80 	mov    $0xffffffff8020c107,%rdx
ffffffff8022149d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214a1:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff802214a7:	66 89 10             	mov    %dx,(%rax)
ffffffff802214aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214ae:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff802214b4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802214ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214be:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff802214c4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802214c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214cc:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff802214d2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802214d6:	48 c7 c0 07 c1 20 80 	mov    $0xffffffff8020c107,%rax
ffffffff802214dd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802214e1:	48 89 c2             	mov    %rax,%rdx
ffffffff802214e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214e8:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff802214ee:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802214f2:	48 c7 c0 07 c1 20 80 	mov    $0xffffffff8020c107,%rax
ffffffff802214f9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802214fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80221500:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221504:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff8022150a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022150d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221511:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff80221517:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022151e:	48 c7 c2 16 c1 20 80 	mov    $0xffffffff8020c116,%rdx
ffffffff80221525:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221529:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff8022152f:	66 89 10             	mov    %dx,(%rax)
ffffffff80221532:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221536:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff8022153c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221542:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221546:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff8022154c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221550:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221554:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff8022155a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022155e:	48 c7 c0 16 c1 20 80 	mov    $0xffffffff8020c116,%rax
ffffffff80221565:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221569:	48 89 c2             	mov    %rax,%rdx
ffffffff8022156c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221570:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff80221576:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022157a:	48 c7 c0 16 c1 20 80 	mov    $0xffffffff8020c116,%rax
ffffffff80221581:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221585:	48 89 c2             	mov    %rax,%rdx
ffffffff80221588:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022158c:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff80221592:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221595:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221599:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff8022159f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff802215a6:	48 c7 c2 25 c1 20 80 	mov    $0xffffffff8020c125,%rdx
ffffffff802215ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215b1:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff802215b7:	66 89 10             	mov    %dx,(%rax)
ffffffff802215ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215be:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff802215c4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802215ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215ce:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff802215d4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802215d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215dc:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff802215e2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802215e6:	48 c7 c0 25 c1 20 80 	mov    $0xffffffff8020c125,%rax
ffffffff802215ed:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802215f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802215f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215f8:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff802215fe:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221602:	48 c7 c0 25 c1 20 80 	mov    $0xffffffff8020c125,%rax
ffffffff80221609:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022160d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221610:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221614:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff8022161a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022161d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221621:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221627:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022162e:	48 c7 c2 34 c1 20 80 	mov    $0xffffffff8020c134,%rdx
ffffffff80221635:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221639:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff8022163f:	66 89 10             	mov    %dx,(%rax)
ffffffff80221642:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221646:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff8022164c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221652:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221656:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff8022165c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221660:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221664:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff8022166a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022166e:	48 c7 c0 34 c1 20 80 	mov    $0xffffffff8020c134,%rax
ffffffff80221675:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221679:	48 89 c2             	mov    %rax,%rdx
ffffffff8022167c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221680:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff80221686:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022168a:	48 c7 c0 34 c1 20 80 	mov    $0xffffffff8020c134,%rax
ffffffff80221691:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221695:	48 89 c2             	mov    %rax,%rdx
ffffffff80221698:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022169c:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802216a2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802216a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216a9:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802216af:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff802216b6:	48 c7 c2 43 c1 20 80 	mov    $0xffffffff8020c143,%rdx
ffffffff802216bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216c1:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff802216c7:	66 89 10             	mov    %dx,(%rax)
ffffffff802216ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216ce:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff802216d4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802216da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216de:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff802216e4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802216e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216ec:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff802216f2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802216f6:	48 c7 c0 43 c1 20 80 	mov    $0xffffffff8020c143,%rax
ffffffff802216fd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221701:	48 89 c2             	mov    %rax,%rdx
ffffffff80221704:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221708:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff8022170e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221712:	48 c7 c0 43 c1 20 80 	mov    $0xffffffff8020c143,%rax
ffffffff80221719:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022171d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221720:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221724:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff8022172a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022172d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221731:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221737:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022173e:	48 c7 c2 52 c1 20 80 	mov    $0xffffffff8020c152,%rdx
ffffffff80221745:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221749:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff8022174f:	66 89 10             	mov    %dx,(%rax)
ffffffff80221752:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221756:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff8022175c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221762:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221766:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff8022176c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221770:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221774:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff8022177a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022177e:	48 c7 c0 52 c1 20 80 	mov    $0xffffffff8020c152,%rax
ffffffff80221785:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221789:	48 89 c2             	mov    %rax,%rdx
ffffffff8022178c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221790:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221796:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022179a:	48 c7 c0 52 c1 20 80 	mov    $0xffffffff8020c152,%rax
ffffffff802217a1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802217a5:	48 89 c2             	mov    %rax,%rdx
ffffffff802217a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217ac:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802217b2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802217b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217b9:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802217bf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff802217c6:	48 c7 c2 61 c1 20 80 	mov    $0xffffffff8020c161,%rdx
ffffffff802217cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217d1:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff802217d7:	66 89 10             	mov    %dx,(%rax)
ffffffff802217da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217de:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff802217e4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802217ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217ee:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff802217f4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802217f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217fc:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221802:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221806:	48 c7 c0 61 c1 20 80 	mov    $0xffffffff8020c161,%rax
ffffffff8022180d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221811:	48 89 c2             	mov    %rax,%rdx
ffffffff80221814:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221818:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff8022181e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221822:	48 c7 c0 61 c1 20 80 	mov    $0xffffffff8020c161,%rax
ffffffff80221829:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022182d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221830:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221834:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff8022183a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022183d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221841:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221847:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022184e:	48 c7 c2 70 c1 20 80 	mov    $0xffffffff8020c170,%rdx
ffffffff80221855:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221859:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff8022185f:	66 89 10             	mov    %dx,(%rax)
ffffffff80221862:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221866:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff8022186c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221872:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221876:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff8022187c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221880:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221884:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff8022188a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022188e:	48 c7 c0 70 c1 20 80 	mov    $0xffffffff8020c170,%rax
ffffffff80221895:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221899:	48 89 c2             	mov    %rax,%rdx
ffffffff8022189c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218a0:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802218a6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802218aa:	48 c7 c0 70 c1 20 80 	mov    $0xffffffff8020c170,%rax
ffffffff802218b1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802218b5:	48 89 c2             	mov    %rax,%rdx
ffffffff802218b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218bc:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802218c2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802218c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218c9:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802218cf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff802218d6:	48 c7 c2 7f c1 20 80 	mov    $0xffffffff8020c17f,%rdx
ffffffff802218dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218e1:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802218e7:	66 89 10             	mov    %dx,(%rax)
ffffffff802218ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218ee:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802218f4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802218fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218fe:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221904:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221908:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022190c:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221912:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221916:	48 c7 c0 7f c1 20 80 	mov    $0xffffffff8020c17f,%rax
ffffffff8022191d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221921:	48 89 c2             	mov    %rax,%rdx
ffffffff80221924:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221928:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff8022192e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221932:	48 c7 c0 7f c1 20 80 	mov    $0xffffffff8020c17f,%rax
ffffffff80221939:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022193d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221940:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221944:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff8022194a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022194d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221951:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221957:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022195e:	48 c7 c2 8e c1 20 80 	mov    $0xffffffff8020c18e,%rdx
ffffffff80221965:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221969:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff8022196f:	66 89 10             	mov    %dx,(%rax)
ffffffff80221972:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221976:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff8022197c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221982:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221986:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff8022198c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221990:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221994:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff8022199a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022199e:	48 c7 c0 8e c1 20 80 	mov    $0xffffffff8020c18e,%rax
ffffffff802219a5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802219a9:	48 89 c2             	mov    %rax,%rdx
ffffffff802219ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219b0:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff802219b6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802219ba:	48 c7 c0 8e c1 20 80 	mov    $0xffffffff8020c18e,%rax
ffffffff802219c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802219c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802219c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219cc:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff802219d2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802219d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219d9:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff802219df:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff802219e6:	48 c7 c2 9d c1 20 80 	mov    $0xffffffff8020c19d,%rdx
ffffffff802219ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219f1:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802219f7:	66 89 10             	mov    %dx,(%rax)
ffffffff802219fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219fe:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221a04:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221a0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a0e:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221a14:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221a18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a1c:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221a22:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221a26:	48 c7 c0 9d c1 20 80 	mov    $0xffffffff8020c19d,%rax
ffffffff80221a2d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221a31:	48 89 c2             	mov    %rax,%rdx
ffffffff80221a34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a38:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221a3e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221a42:	48 c7 c0 9d c1 20 80 	mov    $0xffffffff8020c19d,%rax
ffffffff80221a49:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221a4d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221a50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a54:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221a5a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221a5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a61:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221a67:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221a6e:	48 c7 c2 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rdx
ffffffff80221a75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a79:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221a7f:	66 89 10             	mov    %dx,(%rax)
ffffffff80221a82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a86:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221a8c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221a92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a96:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221a9c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221aa0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221aa4:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221aaa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221aae:	48 c7 c0 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rax
ffffffff80221ab5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221ab9:	48 89 c2             	mov    %rax,%rdx
ffffffff80221abc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ac0:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221ac6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221aca:	48 c7 c0 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rax
ffffffff80221ad1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221ad5:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ad8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221adc:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221ae2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221ae5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ae9:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221aef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80221af6:	48 c7 c2 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rdx
ffffffff80221afd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b01:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221b07:	66 89 10             	mov    %dx,(%rax)
ffffffff80221b0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b0e:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221b14:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221b1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b1e:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221b24:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221b28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b2c:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221b32:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221b36:	48 c7 c0 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rax
ffffffff80221b3d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221b41:	48 89 c2             	mov    %rax,%rdx
ffffffff80221b44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b48:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221b4e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221b52:	48 c7 c0 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rax
ffffffff80221b59:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221b5d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221b60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b64:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221b6a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221b6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b71:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221b77:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221b7e:	48 c7 c2 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rdx
ffffffff80221b85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b89:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221b8f:	66 89 10             	mov    %dx,(%rax)
ffffffff80221b92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b96:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221b9c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221ba2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ba6:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221bac:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221bb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bb4:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221bba:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221bbe:	48 c7 c0 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rax
ffffffff80221bc5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221bc9:	48 89 c2             	mov    %rax,%rdx
ffffffff80221bcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bd0:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221bd6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221bda:	48 c7 c0 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rax
ffffffff80221be1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221be5:	48 89 c2             	mov    %rax,%rdx
ffffffff80221be8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bec:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221bf2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221bf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bf9:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221bff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80221c06:	48 c7 c2 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rdx
ffffffff80221c0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c11:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221c17:	66 89 10             	mov    %dx,(%rax)
ffffffff80221c1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c1e:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221c24:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221c2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c2e:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221c34:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221c38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c3c:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221c42:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221c46:	48 c7 c0 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rax
ffffffff80221c4d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221c51:	48 89 c2             	mov    %rax,%rdx
ffffffff80221c54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c58:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221c5e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221c62:	48 c7 c0 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rax
ffffffff80221c69:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221c6d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221c70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c74:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221c7a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221c7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c81:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221c87:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221c8e:	48 c7 c2 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rdx
ffffffff80221c95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c99:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221c9f:	66 89 10             	mov    %dx,(%rax)
ffffffff80221ca2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ca6:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221cac:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221cb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cb6:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221cbc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221cc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cc4:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221cca:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221cce:	48 c7 c0 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rax
ffffffff80221cd5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221cd9:	48 89 c2             	mov    %rax,%rdx
ffffffff80221cdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ce0:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221ce6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221cea:	48 c7 c0 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rax
ffffffff80221cf1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221cf5:	48 89 c2             	mov    %rax,%rdx
ffffffff80221cf8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cfc:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221d02:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221d05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d09:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221d0f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80221d16:	48 c7 c2 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rdx
ffffffff80221d1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d21:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221d27:	66 89 10             	mov    %dx,(%rax)
ffffffff80221d2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d2e:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221d34:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221d3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d3e:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221d44:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221d48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d4c:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221d52:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221d56:	48 c7 c0 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rax
ffffffff80221d5d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221d61:	48 89 c2             	mov    %rax,%rdx
ffffffff80221d64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d68:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221d6e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221d72:	48 c7 c0 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rax
ffffffff80221d79:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221d7d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221d80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d84:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221d8a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221d8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d91:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221d97:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221d9e:	48 c7 c2 06 c2 20 80 	mov    $0xffffffff8020c206,%rdx
ffffffff80221da5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221da9:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221daf:	66 89 10             	mov    %dx,(%rax)
ffffffff80221db2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221db6:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221dbc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221dc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221dc6:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221dcc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221dd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221dd4:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221dda:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221dde:	48 c7 c0 06 c2 20 80 	mov    $0xffffffff8020c206,%rax
ffffffff80221de5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221de9:	48 89 c2             	mov    %rax,%rdx
ffffffff80221dec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221df0:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221df6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221dfa:	48 c7 c0 06 c2 20 80 	mov    $0xffffffff8020c206,%rax
ffffffff80221e01:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221e05:	48 89 c2             	mov    %rax,%rdx
ffffffff80221e08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e0c:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221e12:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221e15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e19:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221e1f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80221e26:	48 c7 c2 15 c2 20 80 	mov    $0xffffffff8020c215,%rdx
ffffffff80221e2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e31:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221e37:	66 89 10             	mov    %dx,(%rax)
ffffffff80221e3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e3e:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221e44:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221e4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e4e:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221e54:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221e58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e5c:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221e62:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221e66:	48 c7 c0 15 c2 20 80 	mov    $0xffffffff8020c215,%rax
ffffffff80221e6d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221e71:	48 89 c2             	mov    %rax,%rdx
ffffffff80221e74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e78:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221e7e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221e82:	48 c7 c0 15 c2 20 80 	mov    $0xffffffff8020c215,%rax
ffffffff80221e89:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221e8d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221e90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e94:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221e9a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221e9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ea1:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221ea7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221eae:	48 c7 c2 24 c2 20 80 	mov    $0xffffffff8020c224,%rdx
ffffffff80221eb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221eb9:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221ebf:	66 89 10             	mov    %dx,(%rax)
ffffffff80221ec2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ec6:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221ecc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221ed2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ed6:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221edc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221ee0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ee4:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221eea:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221eee:	48 c7 c0 24 c2 20 80 	mov    $0xffffffff8020c224,%rax
ffffffff80221ef5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221ef9:	48 89 c2             	mov    %rax,%rdx
ffffffff80221efc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f00:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221f06:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221f0a:	48 c7 c0 24 c2 20 80 	mov    $0xffffffff8020c224,%rax
ffffffff80221f11:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221f15:	48 89 c2             	mov    %rax,%rdx
ffffffff80221f18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f1c:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221f22:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221f25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f29:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221f2f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80221f36:	48 c7 c2 33 c2 20 80 	mov    $0xffffffff8020c233,%rdx
ffffffff80221f3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f41:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221f47:	66 89 10             	mov    %dx,(%rax)
ffffffff80221f4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f4e:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221f54:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221f5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f5e:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221f64:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221f68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f6c:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221f72:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221f76:	48 c7 c0 33 c2 20 80 	mov    $0xffffffff8020c233,%rax
ffffffff80221f7d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221f81:	48 89 c2             	mov    %rax,%rdx
ffffffff80221f84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f88:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221f8e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221f92:	48 c7 c0 33 c2 20 80 	mov    $0xffffffff8020c233,%rax
ffffffff80221f99:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221f9d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221fa0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fa4:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221faa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221fad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fb1:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221fb7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221fbe:	48 c7 c2 42 c2 20 80 	mov    $0xffffffff8020c242,%rdx
ffffffff80221fc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fc9:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221fcf:	66 89 10             	mov    %dx,(%rax)
ffffffff80221fd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fd6:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221fdc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221fe2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fe6:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221fec:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221ff0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ff4:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221ffa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221ffe:	48 c7 c0 42 c2 20 80 	mov    $0xffffffff8020c242,%rax
ffffffff80222005:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222009:	48 89 c2             	mov    %rax,%rdx
ffffffff8022200c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222010:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80222016:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022201a:	48 c7 c0 42 c2 20 80 	mov    $0xffffffff8020c242,%rax
ffffffff80222021:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222025:	48 89 c2             	mov    %rax,%rdx
ffffffff80222028:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022202c:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80222032:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222035:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222039:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff8022203f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80222046:	48 c7 c2 51 c2 20 80 	mov    $0xffffffff8020c251,%rdx
ffffffff8022204d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222051:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80222057:	66 89 10             	mov    %dx,(%rax)
ffffffff8022205a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022205e:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80222064:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022206a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022206e:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80222074:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222078:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022207c:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80222082:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222086:	48 c7 c0 51 c2 20 80 	mov    $0xffffffff8020c251,%rax
ffffffff8022208d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222091:	48 89 c2             	mov    %rax,%rdx
ffffffff80222094:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222098:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff8022209e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802220a2:	48 c7 c0 51 c2 20 80 	mov    $0xffffffff8020c251,%rax
ffffffff802220a9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802220ad:	48 89 c2             	mov    %rax,%rdx
ffffffff802220b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220b4:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff802220ba:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802220bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220c1:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff802220c7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802220ce:	48 c7 c2 60 c2 20 80 	mov    $0xffffffff8020c260,%rdx
ffffffff802220d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220d9:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff802220df:	66 89 10             	mov    %dx,(%rax)
ffffffff802220e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220e6:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff802220ec:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802220f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220f6:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff802220fc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222100:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222104:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff8022210a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022210e:	48 c7 c0 60 c2 20 80 	mov    $0xffffffff8020c260,%rax
ffffffff80222115:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222119:	48 89 c2             	mov    %rax,%rdx
ffffffff8022211c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222120:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80222126:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022212a:	48 c7 c0 60 c2 20 80 	mov    $0xffffffff8020c260,%rax
ffffffff80222131:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222135:	48 89 c2             	mov    %rax,%rdx
ffffffff80222138:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022213c:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80222142:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222145:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222149:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff8022214f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80222156:	48 c7 c2 6f c2 20 80 	mov    $0xffffffff8020c26f,%rdx
ffffffff8022215d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222161:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222167:	66 89 10             	mov    %dx,(%rax)
ffffffff8022216a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022216e:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222174:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022217a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022217e:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222184:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222188:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022218c:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222192:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222196:	48 c7 c0 6f c2 20 80 	mov    $0xffffffff8020c26f,%rax
ffffffff8022219d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802221a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802221a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221a8:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff802221ae:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802221b2:	48 c7 c0 6f c2 20 80 	mov    $0xffffffff8020c26f,%rax
ffffffff802221b9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802221bd:	48 89 c2             	mov    %rax,%rdx
ffffffff802221c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221c4:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff802221ca:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802221cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221d1:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff802221d7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802221de:	48 c7 c2 7e c2 20 80 	mov    $0xffffffff8020c27e,%rdx
ffffffff802221e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221e9:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802221ef:	66 89 10             	mov    %dx,(%rax)
ffffffff802221f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221f6:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802221fc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222202:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222206:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff8022220c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222210:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222214:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff8022221a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022221e:	48 c7 c0 7e c2 20 80 	mov    $0xffffffff8020c27e,%rax
ffffffff80222225:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222229:	48 89 c2             	mov    %rax,%rdx
ffffffff8022222c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222230:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80222236:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022223a:	48 c7 c0 7e c2 20 80 	mov    $0xffffffff8020c27e,%rax
ffffffff80222241:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222245:	48 89 c2             	mov    %rax,%rdx
ffffffff80222248:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022224c:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80222252:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222255:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222259:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff8022225f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80222266:	48 c7 c2 8d c2 20 80 	mov    $0xffffffff8020c28d,%rdx
ffffffff8022226d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222271:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222277:	66 89 10             	mov    %dx,(%rax)
ffffffff8022227a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022227e:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222284:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022228a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022228e:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222294:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222298:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022229c:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff802222a2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802222a6:	48 c7 c0 8d c2 20 80 	mov    $0xffffffff8020c28d,%rax
ffffffff802222ad:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802222b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802222b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222b8:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff802222be:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802222c2:	48 c7 c0 8d c2 20 80 	mov    $0xffffffff8020c28d,%rax
ffffffff802222c9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802222cd:	48 89 c2             	mov    %rax,%rdx
ffffffff802222d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222d4:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff802222da:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802222dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222e1:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff802222e7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802222ee:	48 c7 c2 9c c2 20 80 	mov    $0xffffffff8020c29c,%rdx
ffffffff802222f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222f9:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802222ff:	66 89 10             	mov    %dx,(%rax)
ffffffff80222302:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222306:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff8022230c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222312:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222316:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff8022231c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222320:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222324:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff8022232a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022232e:	48 c7 c0 9c c2 20 80 	mov    $0xffffffff8020c29c,%rax
ffffffff80222335:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222339:	48 89 c2             	mov    %rax,%rdx
ffffffff8022233c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222340:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff80222346:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022234a:	48 c7 c0 9c c2 20 80 	mov    $0xffffffff8020c29c,%rax
ffffffff80222351:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222355:	48 89 c2             	mov    %rax,%rdx
ffffffff80222358:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022235c:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff80222362:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222365:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222369:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff8022236f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80222376:	48 c7 c2 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rdx
ffffffff8022237d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222381:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222387:	66 89 10             	mov    %dx,(%rax)
ffffffff8022238a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022238e:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222394:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022239a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022239e:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802223a4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802223a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223ac:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802223b2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802223b6:	48 c7 c0 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rax
ffffffff802223bd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802223c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802223c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223c8:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802223ce:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802223d2:	48 c7 c0 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rax
ffffffff802223d9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802223dd:	48 89 c2             	mov    %rax,%rdx
ffffffff802223e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223e4:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802223ea:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802223ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223f1:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802223f7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802223fe:	48 c7 c2 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rdx
ffffffff80222405:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222409:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff8022240f:	66 89 10             	mov    %dx,(%rax)
ffffffff80222412:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222416:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff8022241c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222422:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222426:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff8022242c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222430:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222434:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff8022243a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022243e:	48 c7 c0 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rax
ffffffff80222445:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222449:	48 89 c2             	mov    %rax,%rdx
ffffffff8022244c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222450:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff80222456:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022245a:	48 c7 c0 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rax
ffffffff80222461:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222465:	48 89 c2             	mov    %rax,%rdx
ffffffff80222468:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022246c:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff80222472:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222475:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222479:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff8022247f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80222486:	48 c7 c2 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rdx
ffffffff8022248d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222491:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222497:	66 89 10             	mov    %dx,(%rax)
ffffffff8022249a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022249e:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802224a4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802224aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224ae:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802224b4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802224b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224bc:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802224c2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802224c6:	48 c7 c0 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rax
ffffffff802224cd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802224d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802224d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224d8:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802224de:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802224e2:	48 c7 c0 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rax
ffffffff802224e9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802224ed:	48 89 c2             	mov    %rax,%rdx
ffffffff802224f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224f4:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802224fa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802224fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222501:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222507:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022250e:	48 c7 c2 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rdx
ffffffff80222515:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222519:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff8022251f:	66 89 10             	mov    %dx,(%rax)
ffffffff80222522:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222526:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff8022252c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222532:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222536:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff8022253c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222540:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222544:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff8022254a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022254e:	48 c7 c0 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rax
ffffffff80222555:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222559:	48 89 c2             	mov    %rax,%rdx
ffffffff8022255c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222560:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff80222566:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022256a:	48 c7 c0 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rax
ffffffff80222571:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222575:	48 89 c2             	mov    %rax,%rdx
ffffffff80222578:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022257c:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff80222582:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222585:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222589:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff8022258f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80222596:	48 c7 c2 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rdx
ffffffff8022259d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225a1:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff802225a7:	66 89 10             	mov    %dx,(%rax)
ffffffff802225aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225ae:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff802225b4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802225ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225be:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff802225c4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802225c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225cc:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff802225d2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802225d6:	48 c7 c0 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rax
ffffffff802225dd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802225e1:	48 89 c2             	mov    %rax,%rdx
ffffffff802225e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225e8:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff802225ee:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802225f2:	48 c7 c0 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rax
ffffffff802225f9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802225fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80222600:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222604:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff8022260a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022260d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222611:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff80222617:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022261e:	48 c7 c2 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rdx
ffffffff80222625:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222629:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff8022262f:	66 89 10             	mov    %dx,(%rax)
ffffffff80222632:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222636:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff8022263c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222642:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222646:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff8022264c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222650:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222654:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff8022265a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022265e:	48 c7 c0 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rax
ffffffff80222665:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222669:	48 89 c2             	mov    %rax,%rdx
ffffffff8022266c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222670:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff80222676:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022267a:	48 c7 c0 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rax
ffffffff80222681:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222685:	48 89 c2             	mov    %rax,%rdx
ffffffff80222688:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022268c:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff80222692:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222695:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222699:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff8022269f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802226a6:	48 c7 c2 05 c3 20 80 	mov    $0xffffffff8020c305,%rdx
ffffffff802226ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226b1:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff802226b7:	66 89 10             	mov    %dx,(%rax)
ffffffff802226ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226be:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff802226c4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802226ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226ce:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff802226d4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802226d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226dc:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff802226e2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802226e6:	48 c7 c0 05 c3 20 80 	mov    $0xffffffff8020c305,%rax
ffffffff802226ed:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802226f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802226f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226f8:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff802226fe:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222702:	48 c7 c0 05 c3 20 80 	mov    $0xffffffff8020c305,%rax
ffffffff80222709:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022270d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222710:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222714:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff8022271a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022271d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222721:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222727:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022272e:	48 c7 c2 14 c3 20 80 	mov    $0xffffffff8020c314,%rdx
ffffffff80222735:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222739:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff8022273f:	66 89 10             	mov    %dx,(%rax)
ffffffff80222742:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222746:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff8022274c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222752:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222756:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff8022275c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222760:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222764:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff8022276a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022276e:	48 c7 c0 14 c3 20 80 	mov    $0xffffffff8020c314,%rax
ffffffff80222775:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222779:	48 89 c2             	mov    %rax,%rdx
ffffffff8022277c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222780:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff80222786:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022278a:	48 c7 c0 14 c3 20 80 	mov    $0xffffffff8020c314,%rax
ffffffff80222791:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222795:	48 89 c2             	mov    %rax,%rdx
ffffffff80222798:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022279c:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802227a2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802227a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227a9:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802227af:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff802227b6:	48 c7 c2 23 c3 20 80 	mov    $0xffffffff8020c323,%rdx
ffffffff802227bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227c1:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff802227c7:	66 89 10             	mov    %dx,(%rax)
ffffffff802227ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227ce:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff802227d4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802227da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227de:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff802227e4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802227e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227ec:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff802227f2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802227f6:	48 c7 c0 23 c3 20 80 	mov    $0xffffffff8020c323,%rax
ffffffff802227fd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222801:	48 89 c2             	mov    %rax,%rdx
ffffffff80222804:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222808:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff8022280e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222812:	48 c7 c0 23 c3 20 80 	mov    $0xffffffff8020c323,%rax
ffffffff80222819:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022281d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222820:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222824:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff8022282a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022282d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222831:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222837:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022283e:	48 c7 c2 32 c3 20 80 	mov    $0xffffffff8020c332,%rdx
ffffffff80222845:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222849:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff8022284f:	66 89 10             	mov    %dx,(%rax)
ffffffff80222852:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222856:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff8022285c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222862:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222866:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff8022286c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222870:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222874:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff8022287a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022287e:	48 c7 c0 32 c3 20 80 	mov    $0xffffffff8020c332,%rax
ffffffff80222885:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222889:	48 89 c2             	mov    %rax,%rdx
ffffffff8022288c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222890:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222896:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022289a:	48 c7 c0 32 c3 20 80 	mov    $0xffffffff8020c332,%rax
ffffffff802228a1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802228a5:	48 89 c2             	mov    %rax,%rdx
ffffffff802228a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228ac:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802228b2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802228b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228b9:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802228bf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff802228c6:	48 c7 c2 41 c3 20 80 	mov    $0xffffffff8020c341,%rdx
ffffffff802228cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228d1:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff802228d7:	66 89 10             	mov    %dx,(%rax)
ffffffff802228da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228de:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff802228e4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802228ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228ee:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff802228f4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802228f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228fc:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222902:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222906:	48 c7 c0 41 c3 20 80 	mov    $0xffffffff8020c341,%rax
ffffffff8022290d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222911:	48 89 c2             	mov    %rax,%rdx
ffffffff80222914:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222918:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff8022291e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222922:	48 c7 c0 41 c3 20 80 	mov    $0xffffffff8020c341,%rax
ffffffff80222929:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022292d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222930:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222934:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff8022293a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022293d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222941:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222947:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022294e:	48 c7 c2 50 c3 20 80 	mov    $0xffffffff8020c350,%rdx
ffffffff80222955:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222959:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff8022295f:	66 89 10             	mov    %dx,(%rax)
ffffffff80222962:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222966:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff8022296c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222972:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222976:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff8022297c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222980:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222984:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff8022298a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022298e:	48 c7 c0 50 c3 20 80 	mov    $0xffffffff8020c350,%rax
ffffffff80222995:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222999:	48 89 c2             	mov    %rax,%rdx
ffffffff8022299c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229a0:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802229a6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802229aa:	48 c7 c0 50 c3 20 80 	mov    $0xffffffff8020c350,%rax
ffffffff802229b1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802229b5:	48 89 c2             	mov    %rax,%rdx
ffffffff802229b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229bc:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802229c2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802229c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229c9:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802229cf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802229d6:	48 c7 c2 5f c3 20 80 	mov    $0xffffffff8020c35f,%rdx
ffffffff802229dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229e1:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802229e7:	66 89 10             	mov    %dx,(%rax)
ffffffff802229ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229ee:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802229f4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802229fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229fe:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222a04:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222a08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a0c:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222a12:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222a16:	48 c7 c0 5f c3 20 80 	mov    $0xffffffff8020c35f,%rax
ffffffff80222a1d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222a21:	48 89 c2             	mov    %rax,%rdx
ffffffff80222a24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a28:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222a2e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222a32:	48 c7 c0 5f c3 20 80 	mov    $0xffffffff8020c35f,%rax
ffffffff80222a39:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222a3d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222a40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a44:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222a4a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222a4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a51:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222a57:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222a5e:	48 c7 c2 6e c3 20 80 	mov    $0xffffffff8020c36e,%rdx
ffffffff80222a65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a69:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222a6f:	66 89 10             	mov    %dx,(%rax)
ffffffff80222a72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a76:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222a7c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222a82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a86:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222a8c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222a90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a94:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222a9a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222a9e:	48 c7 c0 6e c3 20 80 	mov    $0xffffffff8020c36e,%rax
ffffffff80222aa5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222aa9:	48 89 c2             	mov    %rax,%rdx
ffffffff80222aac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ab0:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222ab6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222aba:	48 c7 c0 6e c3 20 80 	mov    $0xffffffff8020c36e,%rax
ffffffff80222ac1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222ac5:	48 89 c2             	mov    %rax,%rdx
ffffffff80222ac8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222acc:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222ad2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222ad5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ad9:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222adf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80222ae6:	48 c7 c2 7d c3 20 80 	mov    $0xffffffff8020c37d,%rdx
ffffffff80222aed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222af1:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222af7:	66 89 10             	mov    %dx,(%rax)
ffffffff80222afa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222afe:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222b04:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222b0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b0e:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222b14:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222b18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b1c:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222b22:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222b26:	48 c7 c0 7d c3 20 80 	mov    $0xffffffff8020c37d,%rax
ffffffff80222b2d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222b31:	48 89 c2             	mov    %rax,%rdx
ffffffff80222b34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b38:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222b3e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222b42:	48 c7 c0 7d c3 20 80 	mov    $0xffffffff8020c37d,%rax
ffffffff80222b49:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222b4d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222b50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b54:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222b5a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222b5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b61:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222b67:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222b6e:	48 c7 c2 8c c3 20 80 	mov    $0xffffffff8020c38c,%rdx
ffffffff80222b75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b79:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222b7f:	66 89 10             	mov    %dx,(%rax)
ffffffff80222b82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b86:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222b8c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222b92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b96:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222b9c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222ba0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ba4:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222baa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222bae:	48 c7 c0 8c c3 20 80 	mov    $0xffffffff8020c38c,%rax
ffffffff80222bb5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222bb9:	48 89 c2             	mov    %rax,%rdx
ffffffff80222bbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bc0:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222bc6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222bca:	48 c7 c0 8c c3 20 80 	mov    $0xffffffff8020c38c,%rax
ffffffff80222bd1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222bd5:	48 89 c2             	mov    %rax,%rdx
ffffffff80222bd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bdc:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222be2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222be5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222be9:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222bef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80222bf6:	48 c7 c2 9b c3 20 80 	mov    $0xffffffff8020c39b,%rdx
ffffffff80222bfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c01:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222c07:	66 89 10             	mov    %dx,(%rax)
ffffffff80222c0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c0e:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222c14:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222c1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c1e:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222c24:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222c28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c2c:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222c32:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222c36:	48 c7 c0 9b c3 20 80 	mov    $0xffffffff8020c39b,%rax
ffffffff80222c3d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222c41:	48 89 c2             	mov    %rax,%rdx
ffffffff80222c44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c48:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222c4e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222c52:	48 c7 c0 9b c3 20 80 	mov    $0xffffffff8020c39b,%rax
ffffffff80222c59:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222c5d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222c60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c64:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222c6a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222c6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c71:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222c77:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222c7e:	48 c7 c2 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rdx
ffffffff80222c85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c89:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222c8f:	66 89 10             	mov    %dx,(%rax)
ffffffff80222c92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c96:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222c9c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222ca2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ca6:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222cac:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222cb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cb4:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222cba:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222cbe:	48 c7 c0 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rax
ffffffff80222cc5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222cc9:	48 89 c2             	mov    %rax,%rdx
ffffffff80222ccc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cd0:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222cd6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222cda:	48 c7 c0 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rax
ffffffff80222ce1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222ce5:	48 89 c2             	mov    %rax,%rdx
ffffffff80222ce8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cec:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222cf2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222cf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cf9:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222cff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80222d06:	48 c7 c2 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rdx
ffffffff80222d0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d11:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222d17:	66 89 10             	mov    %dx,(%rax)
ffffffff80222d1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d1e:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222d24:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222d2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d2e:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222d34:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222d38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d3c:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222d42:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222d46:	48 c7 c0 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rax
ffffffff80222d4d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222d51:	48 89 c2             	mov    %rax,%rdx
ffffffff80222d54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d58:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222d5e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222d62:	48 c7 c0 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rax
ffffffff80222d69:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222d6d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222d70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d74:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222d7a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222d7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d81:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222d87:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222d8e:	48 c7 c2 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rdx
ffffffff80222d95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d99:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222d9f:	66 89 10             	mov    %dx,(%rax)
ffffffff80222da2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222da6:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222dac:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222db2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222db6:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222dbc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222dc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222dc4:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222dca:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222dce:	48 c7 c0 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rax
ffffffff80222dd5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222dd9:	48 89 c2             	mov    %rax,%rdx
ffffffff80222ddc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222de0:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222de6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222dea:	48 c7 c0 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rax
ffffffff80222df1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222df5:	48 89 c2             	mov    %rax,%rdx
ffffffff80222df8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222dfc:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222e02:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222e05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e09:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222e0f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80222e16:	48 c7 c2 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rdx
ffffffff80222e1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e21:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222e27:	66 89 10             	mov    %dx,(%rax)
ffffffff80222e2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e2e:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222e34:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222e3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e3e:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222e44:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222e48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e4c:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222e52:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222e56:	48 c7 c0 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rax
ffffffff80222e5d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222e61:	48 89 c2             	mov    %rax,%rdx
ffffffff80222e64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e68:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222e6e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222e72:	48 c7 c0 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rax
ffffffff80222e79:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222e7d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222e80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e84:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222e8a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222e8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e91:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222e97:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222e9e:	48 c7 c2 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rdx
ffffffff80222ea5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ea9:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222eaf:	66 89 10             	mov    %dx,(%rax)
ffffffff80222eb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222eb6:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222ebc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222ec2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ec6:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222ecc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222ed0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ed4:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222eda:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222ede:	48 c7 c0 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rax
ffffffff80222ee5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222ee9:	48 89 c2             	mov    %rax,%rdx
ffffffff80222eec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ef0:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222ef6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222efa:	48 c7 c0 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rax
ffffffff80222f01:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222f05:	48 89 c2             	mov    %rax,%rdx
ffffffff80222f08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f0c:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222f12:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222f15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f19:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222f1f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80222f26:	48 c7 c2 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rdx
ffffffff80222f2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f31:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222f37:	66 89 10             	mov    %dx,(%rax)
ffffffff80222f3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f3e:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222f44:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222f4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f4e:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222f54:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222f58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f5c:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222f62:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222f66:	48 c7 c0 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rax
ffffffff80222f6d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222f71:	48 89 c2             	mov    %rax,%rdx
ffffffff80222f74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f78:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222f7e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222f82:	48 c7 c0 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rax
ffffffff80222f89:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222f8d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222f90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f94:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222f9a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222f9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fa1:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222fa7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222fae:	48 c7 c2 04 c4 20 80 	mov    $0xffffffff8020c404,%rdx
ffffffff80222fb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fb9:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222fbf:	66 89 10             	mov    %dx,(%rax)
ffffffff80222fc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fc6:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222fcc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222fd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fd6:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222fdc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222fe0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fe4:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222fea:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222fee:	48 c7 c0 04 c4 20 80 	mov    $0xffffffff8020c404,%rax
ffffffff80222ff5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222ff9:	48 89 c2             	mov    %rax,%rdx
ffffffff80222ffc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223000:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80223006:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022300a:	48 c7 c0 04 c4 20 80 	mov    $0xffffffff8020c404,%rax
ffffffff80223011:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223015:	48 89 c2             	mov    %rax,%rdx
ffffffff80223018:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022301c:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80223022:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223025:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223029:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff8022302f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80223036:	48 c7 c2 13 c4 20 80 	mov    $0xffffffff8020c413,%rdx
ffffffff8022303d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223041:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80223047:	66 89 10             	mov    %dx,(%rax)
ffffffff8022304a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022304e:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80223054:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022305a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022305e:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80223064:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223068:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022306c:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80223072:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223076:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
ffffffff8022307d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223081:	48 89 c2             	mov    %rax,%rdx
ffffffff80223084:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223088:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff8022308e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223092:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
ffffffff80223099:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022309d:	48 89 c2             	mov    %rax,%rdx
ffffffff802230a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230a4:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff802230aa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802230ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230b1:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff802230b7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802230be:	48 c7 c2 22 c4 20 80 	mov    $0xffffffff8020c422,%rdx
ffffffff802230c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230c9:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff802230cf:	66 89 10             	mov    %dx,(%rax)
ffffffff802230d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230d6:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff802230dc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802230e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230e6:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff802230ec:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802230f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230f4:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff802230fa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802230fe:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff80223105:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223109:	48 89 c2             	mov    %rax,%rdx
ffffffff8022310c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223110:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80223116:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022311a:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff80223121:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223125:	48 89 c2             	mov    %rax,%rdx
ffffffff80223128:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022312c:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80223132:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223135:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223139:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff8022313f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80223146:	48 c7 c2 31 c4 20 80 	mov    $0xffffffff8020c431,%rdx
ffffffff8022314d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223151:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223157:	66 89 10             	mov    %dx,(%rax)
ffffffff8022315a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022315e:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223164:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022316a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022316e:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223174:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223178:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022317c:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223182:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223186:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
ffffffff8022318d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223191:	48 89 c2             	mov    %rax,%rdx
ffffffff80223194:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223198:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff8022319e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802231a2:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
ffffffff802231a9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802231ad:	48 89 c2             	mov    %rax,%rdx
ffffffff802231b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231b4:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff802231ba:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802231bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231c1:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff802231c7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802231ce:	48 c7 c2 40 c4 20 80 	mov    $0xffffffff8020c440,%rdx
ffffffff802231d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231d9:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802231df:	66 89 10             	mov    %dx,(%rax)
ffffffff802231e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231e6:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802231ec:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802231f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231f6:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802231fc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223200:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223204:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff8022320a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022320e:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff80223215:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223219:	48 89 c2             	mov    %rax,%rdx
ffffffff8022321c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223220:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80223226:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022322a:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff80223231:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223235:	48 89 c2             	mov    %rax,%rdx
ffffffff80223238:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022323c:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80223242:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223245:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223249:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff8022324f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80223256:	48 c7 c2 4f c4 20 80 	mov    $0xffffffff8020c44f,%rdx
ffffffff8022325d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223261:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223267:	66 89 10             	mov    %dx,(%rax)
ffffffff8022326a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022326e:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223274:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022327a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022327e:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223284:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223288:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022328c:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223292:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223296:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
ffffffff8022329d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802232a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802232a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232a8:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff802232ae:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802232b2:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
ffffffff802232b9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802232bd:	48 89 c2             	mov    %rax,%rdx
ffffffff802232c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232c4:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff802232ca:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802232cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232d1:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff802232d7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802232de:	48 c7 c2 5e c4 20 80 	mov    $0xffffffff8020c45e,%rdx
ffffffff802232e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232e9:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802232ef:	66 89 10             	mov    %dx,(%rax)
ffffffff802232f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232f6:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802232fc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223302:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223306:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff8022330c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223310:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223314:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff8022331a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022331e:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff80223325:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223329:	48 89 c2             	mov    %rax,%rdx
ffffffff8022332c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223330:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff80223336:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022333a:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff80223341:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223345:	48 89 c2             	mov    %rax,%rdx
ffffffff80223348:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022334c:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff80223352:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223355:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223359:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff8022335f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80223366:	48 c7 c2 6d c4 20 80 	mov    $0xffffffff8020c46d,%rdx
ffffffff8022336d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223371:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223377:	66 89 10             	mov    %dx,(%rax)
ffffffff8022337a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022337e:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223384:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022338a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022338e:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223394:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223398:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022339c:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802233a2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802233a6:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
ffffffff802233ad:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802233b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802233b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233b8:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802233be:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802233c2:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
ffffffff802233c9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802233cd:	48 89 c2             	mov    %rax,%rdx
ffffffff802233d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233d4:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802233da:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802233dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233e1:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802233e7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802233ee:	48 c7 c2 7c c4 20 80 	mov    $0xffffffff8020c47c,%rdx
ffffffff802233f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233f9:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802233ff:	66 89 10             	mov    %dx,(%rax)
ffffffff80223402:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223406:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff8022340c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223412:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223416:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff8022341c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223420:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223424:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff8022342a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022342e:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff80223435:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223439:	48 89 c2             	mov    %rax,%rdx
ffffffff8022343c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223440:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff80223446:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022344a:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff80223451:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223455:	48 89 c2             	mov    %rax,%rdx
ffffffff80223458:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022345c:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff80223462:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223465:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223469:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff8022346f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80223476:	48 c7 c2 8b c4 20 80 	mov    $0xffffffff8020c48b,%rdx
ffffffff8022347d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223481:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223487:	66 89 10             	mov    %dx,(%rax)
ffffffff8022348a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022348e:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223494:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022349a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022349e:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802234a4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802234a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234ac:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802234b2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802234b6:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
ffffffff802234bd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802234c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802234c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234c8:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802234ce:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802234d2:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
ffffffff802234d9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802234dd:	48 89 c2             	mov    %rax,%rdx
ffffffff802234e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234e4:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802234ea:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802234ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234f1:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802234f7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802234fe:	48 c7 c2 9a c4 20 80 	mov    $0xffffffff8020c49a,%rdx
ffffffff80223505:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223509:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff8022350f:	66 89 10             	mov    %dx,(%rax)
ffffffff80223512:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223516:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff8022351c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223522:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223526:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff8022352c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223530:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223534:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff8022353a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022353e:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff80223545:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223549:	48 89 c2             	mov    %rax,%rdx
ffffffff8022354c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223550:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff80223556:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022355a:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff80223561:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223565:	48 89 c2             	mov    %rax,%rdx
ffffffff80223568:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022356c:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff80223572:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223575:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223579:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff8022357f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80223586:	48 c7 c2 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rdx
ffffffff8022358d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223591:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223597:	66 89 10             	mov    %dx,(%rax)
ffffffff8022359a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022359e:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802235a4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802235aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235ae:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802235b4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802235b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235bc:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802235c2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802235c6:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
ffffffff802235cd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802235d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802235d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235d8:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802235de:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802235e2:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
ffffffff802235e9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802235ed:	48 89 c2             	mov    %rax,%rdx
ffffffff802235f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235f4:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802235fa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802235fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223601:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223607:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022360e:	48 c7 c2 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rdx
ffffffff80223615:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223619:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff8022361f:	66 89 10             	mov    %dx,(%rax)
ffffffff80223622:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223626:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff8022362c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223632:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223636:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff8022363c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223640:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223644:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff8022364a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022364e:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff80223655:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223659:	48 89 c2             	mov    %rax,%rdx
ffffffff8022365c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223660:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff80223666:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022366a:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff80223671:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223675:	48 89 c2             	mov    %rax,%rdx
ffffffff80223678:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022367c:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff80223682:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223685:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223689:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff8022368f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80223696:	48 c7 c2 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rdx
ffffffff8022369d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236a1:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff802236a7:	66 89 10             	mov    %dx,(%rax)
ffffffff802236aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236ae:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff802236b4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802236ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236be:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff802236c4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802236c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236cc:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff802236d2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802236d6:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
ffffffff802236dd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802236e1:	48 89 c2             	mov    %rax,%rdx
ffffffff802236e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236e8:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff802236ee:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802236f2:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
ffffffff802236f9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802236fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80223700:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223704:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff8022370a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022370d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223711:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff80223717:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022371e:	48 c7 c2 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rdx
ffffffff80223725:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223729:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff8022372f:	66 89 10             	mov    %dx,(%rax)
ffffffff80223732:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223736:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff8022373c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223742:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223746:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff8022374c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223750:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223754:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff8022375a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022375e:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff80223765:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223769:	48 89 c2             	mov    %rax,%rdx
ffffffff8022376c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223770:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff80223776:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022377a:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff80223781:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223785:	48 89 c2             	mov    %rax,%rdx
ffffffff80223788:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022378c:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff80223792:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223795:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223799:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff8022379f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff802237a6:	48 c7 c2 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rdx
ffffffff802237ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237b1:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff802237b7:	66 89 10             	mov    %dx,(%rax)
ffffffff802237ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237be:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff802237c4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802237ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237ce:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff802237d4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802237d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237dc:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff802237e2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802237e6:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
ffffffff802237ed:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802237f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802237f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237f8:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff802237fe:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223802:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
ffffffff80223809:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022380d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223810:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223814:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff8022381a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022381d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223821:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223827:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022382e:	48 c7 c2 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rdx
ffffffff80223835:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223839:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff8022383f:	66 89 10             	mov    %dx,(%rax)
ffffffff80223842:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223846:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff8022384c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223852:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223856:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff8022385c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223860:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223864:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff8022386a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022386e:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff80223875:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223879:	48 89 c2             	mov    %rax,%rdx
ffffffff8022387c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223880:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff80223886:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022388a:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff80223891:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223895:	48 89 c2             	mov    %rax,%rdx
ffffffff80223898:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022389c:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802238a2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802238a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238a9:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802238af:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff802238b6:	48 c7 c2 03 c5 20 80 	mov    $0xffffffff8020c503,%rdx
ffffffff802238bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238c1:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff802238c7:	66 89 10             	mov    %dx,(%rax)
ffffffff802238ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238ce:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff802238d4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802238da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238de:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff802238e4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802238e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238ec:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff802238f2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802238f6:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
ffffffff802238fd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223901:	48 89 c2             	mov    %rax,%rdx
ffffffff80223904:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223908:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff8022390e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223912:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
ffffffff80223919:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022391d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223920:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223924:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff8022392a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022392d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223931:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223937:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022393e:	48 c7 c2 12 c5 20 80 	mov    $0xffffffff8020c512,%rdx
ffffffff80223945:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223949:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff8022394f:	66 89 10             	mov    %dx,(%rax)
ffffffff80223952:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223956:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff8022395c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223962:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223966:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff8022396c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223970:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223974:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff8022397a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022397e:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff80223985:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223989:	48 89 c2             	mov    %rax,%rdx
ffffffff8022398c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223990:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223996:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022399a:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff802239a1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802239a5:	48 89 c2             	mov    %rax,%rdx
ffffffff802239a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239ac:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802239b2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802239b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239b9:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802239bf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff802239c6:	48 c7 c2 21 c5 20 80 	mov    $0xffffffff8020c521,%rdx
ffffffff802239cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239d1:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff802239d7:	66 89 10             	mov    %dx,(%rax)
ffffffff802239da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239de:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff802239e4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802239ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239ee:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff802239f4:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802239f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239fc:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223a02:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223a06:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
ffffffff80223a0d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223a11:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a18:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223a1e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223a22:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
ffffffff80223a29:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223a2d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a34:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223a3a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223a3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a41:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223a47:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223a4e:	48 c7 c2 30 c5 20 80 	mov    $0xffffffff8020c530,%rdx
ffffffff80223a55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a59:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223a5f:	66 89 10             	mov    %dx,(%rax)
ffffffff80223a62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a66:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223a6c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223a72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a76:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223a7c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223a80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a84:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223a8a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223a8e:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff80223a95:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223a99:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223aa0:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223aa6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223aaa:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff80223ab1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223ab5:	48 89 c2             	mov    %rax,%rdx
ffffffff80223ab8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223abc:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223ac2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223ac5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ac9:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223acf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80223ad6:	48 c7 c2 3c c5 20 80 	mov    $0xffffffff8020c53c,%rdx
ffffffff80223add:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ae1:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223ae7:	66 89 10             	mov    %dx,(%rax)
ffffffff80223aea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223aee:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223af4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223afa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223afe:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223b04:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223b08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b0c:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223b12:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223b16:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
ffffffff80223b1d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223b21:	48 89 c2             	mov    %rax,%rdx
ffffffff80223b24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b28:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223b2e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223b32:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
ffffffff80223b39:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223b3d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223b40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b44:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223b4a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223b4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b51:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223b57:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223b5e:	48 c7 c2 48 c5 20 80 	mov    $0xffffffff8020c548,%rdx
ffffffff80223b65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b69:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223b6f:	66 89 10             	mov    %dx,(%rax)
ffffffff80223b72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b76:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223b7c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223b82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b86:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223b8c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223b90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b94:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223b9a:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223b9e:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff80223ba5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223ba9:	48 89 c2             	mov    %rax,%rdx
ffffffff80223bac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bb0:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223bb6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223bba:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff80223bc1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223bc5:	48 89 c2             	mov    %rax,%rdx
ffffffff80223bc8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bcc:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223bd2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223bd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bd9:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223bdf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80223be6:	48 c7 c2 54 c5 20 80 	mov    $0xffffffff8020c554,%rdx
ffffffff80223bed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bf1:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223bf7:	66 89 10             	mov    %dx,(%rax)
ffffffff80223bfa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bfe:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223c04:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223c0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c0e:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223c14:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223c18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c1c:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223c22:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223c26:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
ffffffff80223c2d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223c31:	48 89 c2             	mov    %rax,%rdx
ffffffff80223c34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c38:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223c3e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223c42:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
ffffffff80223c49:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223c4d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223c50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c54:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223c5a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223c5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c61:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223c67:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223c6e:	48 c7 c2 60 c5 20 80 	mov    $0xffffffff8020c560,%rdx
ffffffff80223c75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c79:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223c7f:	66 89 10             	mov    %dx,(%rax)
ffffffff80223c82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c86:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223c8c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223c92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c96:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223c9c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223ca0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ca4:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223caa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223cae:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff80223cb5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223cb9:	48 89 c2             	mov    %rax,%rdx
ffffffff80223cbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cc0:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223cc6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223cca:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff80223cd1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223cd5:	48 89 c2             	mov    %rax,%rdx
ffffffff80223cd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cdc:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223ce2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223ce5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ce9:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223cef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80223cf6:	48 c7 c2 6c c5 20 80 	mov    $0xffffffff8020c56c,%rdx
ffffffff80223cfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d01:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223d07:	66 89 10             	mov    %dx,(%rax)
ffffffff80223d0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d0e:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223d14:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223d1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d1e:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223d24:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223d28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d2c:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223d32:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223d36:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
ffffffff80223d3d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223d41:	48 89 c2             	mov    %rax,%rdx
ffffffff80223d44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d48:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223d4e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223d52:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
ffffffff80223d59:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223d5d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223d60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d64:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223d6a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223d6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d71:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223d77:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223d7e:	48 c7 c2 78 c5 20 80 	mov    $0xffffffff8020c578,%rdx
ffffffff80223d85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d89:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223d8f:	66 89 10             	mov    %dx,(%rax)
ffffffff80223d92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d96:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223d9c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223da2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223da6:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223dac:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223db0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223db4:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223dba:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223dbe:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80223dc5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223dc9:	48 89 c2             	mov    %rax,%rdx
ffffffff80223dcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223dd0:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223dd6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223dda:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80223de1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223de5:	48 89 c2             	mov    %rax,%rdx
ffffffff80223de8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223dec:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223df2:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223df5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223df9:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223dff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80223e06:	48 c7 c2 84 c5 20 80 	mov    $0xffffffff8020c584,%rdx
ffffffff80223e0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e11:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223e17:	66 89 10             	mov    %dx,(%rax)
ffffffff80223e1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e1e:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223e24:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223e2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e2e:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223e34:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223e38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e3c:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223e42:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223e46:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
ffffffff80223e4d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223e51:	48 89 c2             	mov    %rax,%rdx
ffffffff80223e54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e58:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223e5e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223e62:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
ffffffff80223e69:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223e6d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223e70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e74:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223e7a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223e7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e81:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223e87:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223e8e:	48 c7 c2 90 c5 20 80 	mov    $0xffffffff8020c590,%rdx
ffffffff80223e95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e99:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223e9f:	66 89 10             	mov    %dx,(%rax)
ffffffff80223ea2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ea6:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223eac:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223eb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223eb6:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223ebc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223ec0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ec4:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223eca:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223ece:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff80223ed5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223ed9:	48 89 c2             	mov    %rax,%rdx
ffffffff80223edc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ee0:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223ee6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223eea:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff80223ef1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223ef5:	48 89 c2             	mov    %rax,%rdx
ffffffff80223ef8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223efc:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223f02:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223f05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f09:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223f0f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80223f16:	48 c7 c2 9c c5 20 80 	mov    $0xffffffff8020c59c,%rdx
ffffffff80223f1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f21:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223f27:	66 89 10             	mov    %dx,(%rax)
ffffffff80223f2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f2e:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223f34:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223f3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f3e:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223f44:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223f48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f4c:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223f52:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223f56:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
ffffffff80223f5d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223f61:	48 89 c2             	mov    %rax,%rdx
ffffffff80223f64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f68:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223f6e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223f72:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
ffffffff80223f79:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223f7d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223f80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f84:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223f8a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223f8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f91:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223f97:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223f9e:	48 c7 c2 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rdx
ffffffff80223fa5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fa9:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223faf:	66 89 10             	mov    %dx,(%rax)
ffffffff80223fb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fb6:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223fbc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223fc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fc6:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223fcc:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223fd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fd4:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223fda:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223fde:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80223fe5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223fe9:	48 89 c2             	mov    %rax,%rdx
ffffffff80223fec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ff0:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223ff6:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223ffa:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80224001:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80224005:	48 89 c2             	mov    %rax,%rdx
ffffffff80224008:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022400c:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80224012:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80224015:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224019:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff8022401f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Replace systick handler with customized ones - spurious interrupts
     * and IPIs are handled in the general interrupt path. SysTick handler
     * is only processed by the first processor, so we don't register it
     * for other auxiliary processors */
    if(RME_X64_CPU_Cnt==0)
ffffffff80224026:	48 8b 05 83 f2 00 00 	mov    0xf283(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8022402d:	48 85 c0             	test   %rax,%rax
ffffffff80224030:	0f 85 88 00 00 00    	jne    ffffffff802240be <__RME_X64_CPU_Local_Init+0x81f2>
        RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
ffffffff80224036:	48 c7 c2 63 c6 20 80 	mov    $0xffffffff8020c663,%rdx
ffffffff8022403d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224041:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80224047:	66 89 10             	mov    %dx,(%rax)
ffffffff8022404a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022404e:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80224054:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022405a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022405e:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80224064:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80224068:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022406c:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80224072:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80224076:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff8022407d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80224081:	48 89 c2             	mov    %rax,%rdx
ffffffff80224084:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224088:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8022408e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80224092:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff80224099:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022409d:	48 89 c2             	mov    %rax,%rdx
ffffffff802240a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802240a4:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff802240aa:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802240ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802240b1:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff802240b7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    /* Register SMP handlers */
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff802240be:	48 c7 c2 09 c6 20 80 	mov    $0xffffffff8020c609,%rdx
ffffffff802240c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802240c9:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff802240cf:	66 89 10             	mov    %dx,(%rax)
ffffffff802240d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802240d6:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff802240dc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802240e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802240e6:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff802240ec:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802240f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802240f4:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff802240fa:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802240fe:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
ffffffff80224105:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80224109:	48 89 c2             	mov    %rax,%rdx
ffffffff8022410c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224110:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80224116:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022411a:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
ffffffff80224121:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80224125:	48 89 c2             	mov    %rax,%rdx
ffffffff80224128:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022412c:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80224132:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80224135:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224139:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8022413f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Load the IDT */
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff80224146:	66 c7 45 c6 ff 0f    	movw   $0xfff,-0x3a(%rbp)
    Desc[1]=(rme_ptr_t)IDT_Table;
ffffffff8022414c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224150:	66 89 45 c8          	mov    %ax,-0x38(%rbp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80224154:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224158:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022415c:	66 89 45 ca          	mov    %ax,-0x36(%rbp)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff80224160:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224164:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80224168:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
    Desc[4]=((rme_ptr_t)IDT_Table)>>48;
ffffffff8022416c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224170:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80224174:	66 89 45 ce          	mov    %ax,-0x32(%rbp)
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80224178:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
ffffffff8022417c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022417f:	e8 f5 76 fe ff       	call   ffffffff8020b879 <__RME_X64_IDT_Load>

    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80224184:	48 8b 15 c5 ee 00 00 	mov    0xeec5(%rip),%rdx        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff8022418b:	48 8b 05 1e f1 00 00 	mov    0xf11e(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff80224192:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80224196:	48 01 d0             	add    %rdx,%rax
ffffffff80224199:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff8022419f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff802241a3:	48 8b 15 a6 ee 00 00 	mov    0xeea6(%rip),%rdx        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff802241aa:	48 8b 05 ff f0 00 00 	mov    0xf0ff(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff802241b1:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff802241b5:	48 01 d0             	add    %rdx,%rax
ffffffff802241b8:	48 05 80 10 00 00    	add    $0x1080,%rax
ffffffff802241be:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    /* Dummy entry */
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff802241c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802241c6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    /* Kernel code, DPL=0, R/X */
    GDT_Table[1]=0x0020980000000000ULL;
ffffffff802241cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802241d1:	48 83 c0 08          	add    $0x8,%rax
ffffffff802241d5:	48 b9 00 00 00 00 00 	movabs $0x20980000000000,%rcx
ffffffff802241dc:	98 20 00 
ffffffff802241df:	48 89 08             	mov    %rcx,(%rax)
    /* Kernel data, DPL=0, W */
    GDT_Table[2]=0x0000920000000000ULL;
ffffffff802241e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802241e6:	48 83 c0 10          	add    $0x10,%rax
ffffffff802241ea:	48 b9 00 00 00 00 00 	movabs $0x920000000000,%rcx
ffffffff802241f1:	92 00 00 
ffffffff802241f4:	48 89 08             	mov    %rcx,(%rax)
    /* Unused entry - this is for sysret instruction's requirement */
    GDT_Table[3]=0x0000000000000000ULL;
ffffffff802241f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802241fb:	48 83 c0 18          	add    $0x18,%rax
ffffffff802241ff:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
ffffffff80224206:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022420a:	48 83 c0 20          	add    $0x20,%rax
ffffffff8022420e:	48 be 00 00 00 00 00 	movabs $0xf20000000000,%rsi
ffffffff80224215:	f2 00 00 
ffffffff80224218:	48 89 30             	mov    %rsi,(%rax)
    /* User code, DPL=3, R/X */
    GDT_Table[5]=0x0020F80000000000ULL;
ffffffff8022421b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022421f:	48 83 c0 28          	add    $0x28,%rax
ffffffff80224223:	48 b9 00 00 00 00 00 	movabs $0x20f80000000000,%rcx
ffffffff8022422a:	f8 20 00 
ffffffff8022422d:	48 89 08             	mov    %rcx,(%rax)
    /* TSS */
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80224230:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224234:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff80224238:	48 89 c2             	mov    %rax,%rdx
ffffffff8022423b:	48 b8 00 00 ff ff ff 	movabs $0xffffff0000,%rax
ffffffff80224242:	00 00 00 
ffffffff80224245:	48 21 c2             	and    %rax,%rdx
ffffffff80224248:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022424c:	48 c1 e8 18          	shr    $0x18,%rax
ffffffff80224250:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff80224254:	48 89 d1             	mov    %rdx,%rcx
ffffffff80224257:	48 09 c1             	or     %rax,%rcx
ffffffff8022425a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022425e:	48 83 c0 30          	add    $0x30,%rax
ffffffff80224262:	48 ba 67 00 00 00 00 	movabs $0x890000000067,%rdx
ffffffff80224269:	89 00 00 
ffffffff8022426c:	48 09 ca             	or     %rcx,%rdx
ffffffff8022426f:	48 89 10             	mov    %rdx,(%rax)
    GDT_Table[7]=(TSS_Table>>32);
ffffffff80224272:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224276:	48 83 c0 38          	add    $0x38,%rax
ffffffff8022427a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8022427e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80224282:	48 89 10             	mov    %rdx,(%rax)

    /* Load the GDT */
    Desc[0]=8*sizeof(rme_ptr_t)-1;
ffffffff80224285:	66 c7 45 c6 3f 00    	movw   $0x3f,-0x3a(%rbp)
    Desc[1]=(rme_ptr_t)GDT_Table;
ffffffff8022428b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022428f:	66 89 45 c8          	mov    %ax,-0x38(%rbp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff80224293:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224297:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022429b:	66 89 45 ca          	mov    %ax,-0x36(%rbp)
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff8022429f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802242a3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802242a7:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff802242ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802242af:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802242b3:	66 89 45 ce          	mov    %ax,-0x32(%rbp)
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff802242b7:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
ffffffff802242bb:	48 89 c7             	mov    %rax,%rdi
ffffffff802242be:	e8 b2 75 fe ff       	call   ffffffff8020b875 <__RME_X64_GDT_Load>
    /* Set the RSP to TSS */
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff802242c3:	48 8b 05 ce ef 00 00 	mov    0xefce(%rip),%rax        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff802242ca:	89 c6                	mov    %eax,%esi
ffffffff802242cc:	48 8b 05 dd ef 00 00 	mov    0xefdd(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff802242d3:	83 c0 01             	add    $0x1,%eax
ffffffff802242d6:	c1 e0 14             	shl    $0x14,%eax
ffffffff802242d9:	89 c1                	mov    %eax,%ecx
ffffffff802242db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802242df:	48 83 c0 04          	add    $0x4,%rax
ffffffff802242e3:	48 89 c2             	mov    %rax,%rdx
ffffffff802242e6:	8d 04 0e             	lea    (%rsi,%rcx,1),%eax
ffffffff802242e9:	89 02                	mov    %eax,(%rdx)
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff802242eb:	48 8b 15 a6 ef 00 00 	mov    0xefa6(%rip),%rdx        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff802242f2:	48 8b 05 b7 ef 00 00 	mov    0xefb7(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff802242f9:	48 83 c0 01          	add    $0x1,%rax
ffffffff802242fd:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80224301:	48 01 d0             	add    %rdx,%rax
ffffffff80224304:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80224308:	48 89 c2             	mov    %rax,%rdx
ffffffff8022430b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022430f:	48 83 c0 08          	add    $0x8,%rax
ffffffff80224313:	89 10                	mov    %edx,(%rax)
    /* IO Map Base = End of TSS (What's this?) */
    ((rme_u32_t*)TSS_Table)[16]=0x00680000;
ffffffff80224315:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224319:	48 83 c0 40          	add    $0x40,%rax
ffffffff8022431d:	c7 00 00 00 68 00    	movl   $0x680000,(%rax)
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff80224323:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff80224328:	e8 50 75 fe ff       	call   ffffffff8020b87d <__RME_X64_TSS_Load>

    /* Initialize the RME per-cpu data here */
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff8022432d:	48 8b 15 1c ed 00 00 	mov    0xed1c(%rip),%rdx        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff80224334:	48 8b 05 75 ef 00 00 	mov    0xef75(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8022433b:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff8022433f:	48 01 d0             	add    %rdx,%rax
    		                          RME_POW2(RME_PGT_SIZE_4K)+
ffffffff80224342:	48 05 00 14 00 00    	add    $0x1400,%rax
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80224348:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
									  RME_POW2(RME_PGT_SIZE_1K));
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff8022434c:	48 8b 15 5d ef 00 00 	mov    0xef5d(%rip),%rdx        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff80224353:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224357:	48 89 d6             	mov    %rdx,%rsi
ffffffff8022435a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022435d:	e8 58 e9 fe ff       	call   ffffffff80212cba <_RME_CPU_Local_Init>

    /* Initialize x64 specific CPU-local data structure */
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff80224362:	48 8b 15 e7 ec 00 00 	mov    0xece7(%rip),%rdx        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff80224369:	48 8b 05 40 ef 00 00 	mov    0xef40(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff80224370:	48 83 c0 01          	add    $0x1,%rax
ffffffff80224374:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80224378:	48 01 d0             	add    %rdx,%rax
ffffffff8022437b:	48 83 e8 18          	sub    $0x18,%rax
ffffffff8022437f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Temp->CPU_Local_Addr=(rme_ptr_t)CPU_Local;
ffffffff80224383:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80224387:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8022438b:	48 89 10             	mov    %rdx,(%rax)
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff8022438e:	48 8b 15 03 ef 00 00 	mov    0xef03(%rip),%rdx        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff80224395:	48 8b 05 14 ef 00 00 	mov    0xef14(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8022439c:	48 83 c0 01          	add    $0x1,%rax
ffffffff802243a0:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff802243a4:	48 01 c2             	add    %rax,%rdx
ffffffff802243a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802243ab:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Temp->Temp_User_SP=0;
ffffffff802243af:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802243b3:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff802243ba:	00 

    /* Set the base of GS to this memory */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff802243bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802243bf:	48 89 c6             	mov    %rax,%rsi
ffffffff802243c2:	b8 02 01 00 c0       	mov    $0xc0000102,%eax
ffffffff802243c7:	48 89 c7             	mov    %rax,%rdi
ffffffff802243ca:	e8 5b 74 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff802243cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802243d3:	48 89 c6             	mov    %rax,%rsi
ffffffff802243d6:	b8 01 01 00 c0       	mov    $0xc0000101,%eax
ffffffff802243db:	48 89 c7             	mov    %rax,%rdi
ffffffff802243de:	e8 47 74 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* Enable SYSCALL/SYSRET */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff802243e3:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
ffffffff802243e8:	48 89 c7             	mov    %rax,%rdi
ffffffff802243eb:	e8 26 74 fe ff       	call   ffffffff8020b816 <__RME_X64_Read_MSR>
ffffffff802243f0:	48 83 c8 01          	or     $0x1,%rax
ffffffff802243f4:	48 89 c6             	mov    %rax,%rsi
ffffffff802243f7:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
ffffffff802243fc:	48 89 c7             	mov    %rax,%rdi
ffffffff802243ff:	e8 26 74 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* Set up SYSCALL/SYSRET parameters */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_LSTAR, (rme_ptr_t)SVC_Handler);
ffffffff80224404:	48 c7 c0 c2 c6 20 80 	mov    $0xffffffff8020c6c2,%rax
ffffffff8022440b:	48 89 c6             	mov    %rax,%rsi
ffffffff8022440e:	b8 82 00 00 c0       	mov    $0xc0000082,%eax
ffffffff80224413:	48 89 c7             	mov    %rax,%rdi
ffffffff80224416:	e8 0f 74 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_FMASK, ~RME_X64_RFLAGS_IF);
ffffffff8022441b:	48 c7 c6 ff fd ff ff 	mov    $0xfffffffffffffdff,%rsi
ffffffff80224422:	b8 84 00 00 c0       	mov    $0xc0000084,%eax
ffffffff80224427:	48 89 c7             	mov    %rax,%rdi
ffffffff8022442a:	e8 fb 73 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* The SYSRET, when returning to user mode in 64-bit, will load the SS from +8, and CS from +16.
     * The original place for CS is reserved for 32-bit usages and is thus not usable by 64-bit */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_STAR, (((rme_ptr_t)RME_X64_SEG_EMPTY)<<48)|(((rme_ptr_t)RME_X64_SEG_KERNEL_CODE)<<32));
ffffffff8022442f:	48 b8 00 00 00 00 08 	movabs $0x1b000800000000,%rax
ffffffff80224436:	00 1b 00 
ffffffff80224439:	48 89 c6             	mov    %rax,%rsi
ffffffff8022443c:	b8 81 00 00 c0       	mov    $0xc0000081,%eax
ffffffff80224441:	48 89 c7             	mov    %rax,%rdi
ffffffff80224444:	e8 e1 73 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
}
ffffffff80224449:	90                   	nop
ffffffff8022444a:	c9                   	leave  
ffffffff8022444b:	c3                   	ret    

ffffffff8022444c <__RME_X64_CPU_Local_Get_By_CPUID>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
struct RME_CPU_Local* __RME_X64_CPU_Local_Get_By_CPUID(rme_ptr_t CPUID)
{
ffffffff8022444c:	f3 0f 1e fa          	endbr64 
ffffffff80224450:	55                   	push   %rbp
ffffffff80224451:	48 89 e5             	mov    %rsp,%rbp
ffffffff80224454:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80224458:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8022445c:	48 8b 15 ed eb 00 00 	mov    0xebed(%rip),%rdx        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff80224463:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224467:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff8022446b:	48 01 d0             	add    %rdx,%rax
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8022446e:	48 05 00 14 00 00    	add    $0x1400,%rax
								   RME_POW2(RME_PGT_SIZE_1K));
}
ffffffff80224474:	c9                   	leave  
ffffffff80224475:	c3                   	ret    

ffffffff80224476 <__RME_X64_LAPIC_Ack>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Ack(void)
{
ffffffff80224476:	f3 0f 1e fa          	endbr64 
ffffffff8022447a:	55                   	push   %rbp
ffffffff8022447b:	48 89 e5             	mov    %rsp,%rbp
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff8022447e:	48 8b 05 9b fe 00 00 	mov    0xfe9b(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224485:	48 ba b0 00 00 00 00 	movabs $0xffff8000000000b0,%rdx
ffffffff8022448c:	80 ff ff 
ffffffff8022448f:	48 01 d0             	add    %rdx,%rax
ffffffff80224492:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
ffffffff80224498:	90                   	nop
ffffffff80224499:	5d                   	pop    %rbp
ffffffff8022449a:	c3                   	ret    

ffffffff8022449b <__RME_X64_LAPIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Init(void)
{
ffffffff8022449b:	f3 0f 1e fa          	endbr64 
ffffffff8022449f:	55                   	push   %rbp
ffffffff802244a0:	48 89 e5             	mov    %rsp,%rbp
    /* LAPIC initialization - Check if there is any LAPIC */
    RME_ASSERT(RME_X64_LAPIC_Addr!=0);
ffffffff802244a3:	48 8b 05 76 fe 00 00 	mov    0xfe76(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>

    /* Enable local APIC; set spurious interrupt vector to 32 */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_SVR, RME_X64_LAPIC_SVR_ENABLE|RME_X64_INT_SPUR);
ffffffff802244aa:	48 8b 05 6f fe 00 00 	mov    0xfe6f(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802244b1:	48 ba f0 00 00 00 00 	movabs $0xffff8000000000f0,%rdx
ffffffff802244b8:	80 ff ff 
ffffffff802244bb:	48 01 d0             	add    %rdx,%rax
ffffffff802244be:	c7 00 80 01 00 00    	movl   $0x180,(%rax)

    /* Disable local interrupt lines */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff802244c4:	48 8b 05 55 fe 00 00 	mov    0xfe55(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802244cb:	48 ba 50 03 00 00 00 	movabs $0xffff800000000350,%rdx
ffffffff802244d2:	80 ff ff 
ffffffff802244d5:	48 01 d0             	add    %rdx,%rax
ffffffff802244d8:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);
ffffffff802244de:	48 8b 05 3b fe 00 00 	mov    0xfe3b(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802244e5:	48 ba 60 03 00 00 00 	movabs $0xffff800000000360,%rdx
ffffffff802244ec:	80 ff ff 
ffffffff802244ef:	48 01 d0             	add    %rdx,%rax
ffffffff802244f2:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)

    /* Disable performance counter overflow interrupts when there is one */
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff802244f8:	48 8b 05 21 fe 00 00 	mov    0xfe21(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802244ff:	48 ba 30 00 00 00 00 	movabs $0xffff800000000030,%rdx
ffffffff80224506:	80 ff ff 
ffffffff80224509:	48 01 d0             	add    %rdx,%rax
ffffffff8022450c:	8b 00                	mov    (%rax),%eax
ffffffff8022450e:	c1 e8 10             	shr    $0x10,%eax
ffffffff80224511:	25 fc 00 00 00       	and    $0xfc,%eax
ffffffff80224516:	85 c0                	test   %eax,%eax
ffffffff80224518:	74 1a                	je     ffffffff80224534 <__RME_X64_LAPIC_Init+0x99>
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_PCINT, RME_X64_LAPIC_MASKED);
ffffffff8022451a:	48 8b 05 ff fd 00 00 	mov    0xfdff(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224521:	48 ba 40 03 00 00 00 	movabs $0xffff800000000340,%rdx
ffffffff80224528:	80 ff ff 
ffffffff8022452b:	48 01 d0             	add    %rdx,%rax
ffffffff8022452e:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)

    /* Map error interrupt to IRQ_ERROR */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ERROR, RME_X64_INT_ERROR);
ffffffff80224534:	48 8b 05 e5 fd 00 00 	mov    0xfde5(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff8022453b:	48 ba 70 03 00 00 00 	movabs $0xffff800000000370,%rdx
ffffffff80224542:	80 ff ff 
ffffffff80224545:	48 01 d0             	add    %rdx,%rax
ffffffff80224548:	c7 00 81 00 00 00    	movl   $0x81,(%rax)

    /* Clear error status register (requires back-to-back writes) */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff8022454e:	48 8b 05 cb fd 00 00 	mov    0xfdcb(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224555:	48 ba 80 02 00 00 00 	movabs $0xffff800000000280,%rdx
ffffffff8022455c:	80 ff ff 
ffffffff8022455f:	48 01 d0             	add    %rdx,%rax
ffffffff80224562:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff80224568:	48 8b 05 b1 fd 00 00 	mov    0xfdb1(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff8022456f:	48 ba 80 02 00 00 00 	movabs $0xffff800000000280,%rdx
ffffffff80224576:	80 ff ff 
ffffffff80224579:	48 01 d0             	add    %rdx,%rax
ffffffff8022457c:	c7 00 00 00 00 00    	movl   $0x0,(%rax)

    /* Acknowledge any outstanding interrupts */
    __RME_X64_LAPIC_Ack();
ffffffff80224582:	e8 ef fe ff ff       	call   ffffffff80224476 <__RME_X64_LAPIC_Ack>

    /* Send an Init Level De-Assert to synchronise arbitration IDs */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0);
ffffffff80224587:	48 8b 05 92 fd 00 00 	mov    0xfd92(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff8022458e:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff80224595:	80 ff ff 
ffffffff80224598:	48 01 d0             	add    %rdx,%rax
ffffffff8022459b:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_BCAST|
ffffffff802245a1:	48 8b 05 78 fd 00 00 	mov    0xfd78(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802245a8:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff802245af:	80 ff ff 
ffffffff802245b2:	48 01 d0             	add    %rdx,%rax
ffffffff802245b5:	c7 00 00 85 08 00    	movl   $0x88500,(%rax)
                                             RME_X64_LAPIC_ICRLO_INIT|
                                             RME_X64_LAPIC_ICRLO_LEVEL);
    while(RME_X64_LAPIC_READ(RME_X64_LAPIC_ICRLO)&RME_X64_LAPIC_ICRLO_DELIVS);
ffffffff802245bb:	90                   	nop
ffffffff802245bc:	48 8b 05 5d fd 00 00 	mov    0xfd5d(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802245c3:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff802245ca:	80 ff ff 
ffffffff802245cd:	48 01 d0             	add    %rdx,%rax
ffffffff802245d0:	8b 00                	mov    (%rax),%eax
ffffffff802245d2:	25 00 10 00 00       	and    $0x1000,%eax
ffffffff802245d7:	85 c0                	test   %eax,%eax
ffffffff802245d9:	75 e1                	jne    ffffffff802245bc <__RME_X64_LAPIC_Init+0x121>

    /* Enable interrupts on the APIC */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_TPR, 0);
ffffffff802245db:	48 8b 05 3e fd 00 00 	mov    0xfd3e(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802245e2:	48 ba 80 00 00 00 00 	movabs $0xffff800000000080,%rdx
ffffffff802245e9:	80 ff ff 
ffffffff802245ec:	48 01 d0             	add    %rdx,%rax
ffffffff802245ef:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
ffffffff802245f5:	90                   	nop
ffffffff802245f6:	5d                   	pop    %rbp
ffffffff802245f7:	c3                   	ret    

ffffffff802245f8 <__RME_X64_PIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_PIC_Init(void)
{
ffffffff802245f8:	f3 0f 1e fa          	endbr64 
ffffffff802245fc:	55                   	push   %rbp
ffffffff802245fd:	48 89 e5             	mov    %rsp,%rbp
    /* Mask all interrupts */
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80224600:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80224605:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8022460a:	e8 fb 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff8022460f:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80224614:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80224619:	e8 ec 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Set up master (8259A-1) */
    __RME_X64_Out(RME_X64_PIC1, 0x11);
ffffffff8022461e:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80224623:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80224628:	e8 dd 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, RME_X64_INT_USER(0));
ffffffff8022462d:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80224632:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80224637:	e8 ce 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 1<<2);
ffffffff8022463c:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80224641:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80224646:	e8 bf 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0x3);
ffffffff8022464b:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80224650:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80224655:	e8 b0 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Set up slave (8259A-2) */
    __RME_X64_Out(RME_X64_PIC2, 0x11);
ffffffff8022465a:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff8022465f:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80224664:	e8 a1 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, RME_X64_INT_USER(8));
ffffffff80224669:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff8022466e:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80224673:	e8 92 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 2);
ffffffff80224678:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff8022467d:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80224682:	e8 83 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0x3);
ffffffff80224687:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8022468c:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80224691:	e8 74 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    __RME_X64_Out(RME_X64_PIC1, 0x68);
ffffffff80224696:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff8022469b:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff802246a0:	e8 65 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x0A);
ffffffff802246a5:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff802246aa:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff802246af:	e8 56 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    __RME_X64_Out(RME_X64_PIC2, 0x68);
ffffffff802246b4:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff802246b9:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff802246be:	e8 47 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x0A);
ffffffff802246c3:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff802246c8:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff802246cd:	e8 38 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Mask all interrupts - we do not use the PIC at all */
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff802246d2:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff802246d7:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff802246dc:	e8 29 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff802246e1:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff802246e6:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff802246eb:	e8 1a 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff802246f0:	90                   	nop
ffffffff802246f1:	5d                   	pop    %rbp
ffffffff802246f2:	c3                   	ret    

ffffffff802246f3 <__RME_X64_IOAPIC_Int_Enable>:
              rme_ptr_t CPUID - The CPU to enable this IRQ on.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Int_Enable(rme_ptr_t IRQ, rme_ptr_t CPUID)
{
ffffffff802246f3:	f3 0f 1e fa          	endbr64 
ffffffff802246f7:	55                   	push   %rbp
ffffffff802246f8:	48 89 e5             	mov    %rsp,%rbp
ffffffff802246fb:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802246ff:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80224703:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Mark interrupt edge-triggered, active high, enabled, and routed to the
     * given cpunum, which happens to be that cpu's APIC ID. */
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1),RME_X64_INT_USER(IRQ));
ffffffff80224707:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022470b:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff8022470e:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224715:	80 ff ff 
ffffffff80224718:	83 c2 10             	add    $0x10,%edx
ffffffff8022471b:	89 10                	mov    %edx,(%rax)
ffffffff8022471d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224721:	89 c2                	mov    %eax,%edx
ffffffff80224723:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022472a:	80 ff ff 
ffffffff8022472d:	83 c2 20             	add    $0x20,%edx
ffffffff80224730:	89 50 10             	mov    %edx,0x10(%rax)
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,CPUID<<24);
ffffffff80224733:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224737:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff8022473a:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224741:	80 ff ff 
ffffffff80224744:	83 c2 11             	add    $0x11,%edx
ffffffff80224747:	89 10                	mov    %edx,(%rax)
ffffffff80224749:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022474d:	89 c2                	mov    %eax,%edx
ffffffff8022474f:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224756:	80 ff ff 
ffffffff80224759:	c1 e2 18             	shl    $0x18,%edx
ffffffff8022475c:	89 50 10             	mov    %edx,0x10(%rax)
}
ffffffff8022475f:	90                   	nop
ffffffff80224760:	c9                   	leave  
ffffffff80224761:	c3                   	ret    

ffffffff80224762 <__RME_X64_IOAPIC_Int_Disable>:
Input       : rme_ptr_t IRQ - The user vector to enable.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Int_Disable(rme_ptr_t IRQ)
{
ffffffff80224762:	f3 0f 1e fa          	endbr64 
ffffffff80224766:	55                   	push   %rbp
ffffffff80224767:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022476a:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8022476e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    /* Mark interrupt edge-triggered, active high, enabled, and routed to the
     * given cpunum, which happens to be that cpu's APIC ID. */
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1),RME_X64_IOAPIC_INT_DISABLED|RME_X64_INT_USER(IRQ));
ffffffff80224772:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224776:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff80224779:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224780:	80 ff ff 
ffffffff80224783:	83 c2 10             	add    $0x10,%edx
ffffffff80224786:	89 10                	mov    %edx,(%rax)
ffffffff80224788:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022478c:	8d 50 20             	lea    0x20(%rax),%edx
ffffffff8022478f:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224796:	80 ff ff 
ffffffff80224799:	81 ca 00 00 01 00    	or     $0x10000,%edx
ffffffff8022479f:	89 50 10             	mov    %edx,0x10(%rax)
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,0);
ffffffff802247a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802247a6:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff802247a9:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802247b0:	80 ff ff 
ffffffff802247b3:	83 c2 11             	add    $0x11,%edx
ffffffff802247b6:	89 10                	mov    %edx,(%rax)
ffffffff802247b8:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802247bf:	80 ff ff 
ffffffff802247c2:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
}
ffffffff802247c9:	90                   	nop
ffffffff802247ca:	c9                   	leave  
ffffffff802247cb:	c3                   	ret    

ffffffff802247cc <__RME_X64_IOAPIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Init(void)
{
ffffffff802247cc:	f3 0f 1e fa          	endbr64 
ffffffff802247d0:	55                   	push   %rbp
ffffffff802247d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff802247d4:	48 83 ec 20          	sub    $0x20,%rsp
    rme_ptr_t Max_Int;
    rme_ptr_t IOAPIC_ID;
    rme_cnt_t Count;
    /* IOAPIC initialization */
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff802247d8:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802247df:	80 ff ff 
ffffffff802247e2:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
ffffffff802247e8:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802247ef:	80 ff ff 
ffffffff802247f2:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff802247f5:	89 c0                	mov    %eax,%eax
ffffffff802247f7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Max_Int=((Max_Int>>16)&0xFF);
ffffffff802247fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802247ff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80224803:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80224808:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    RME_DBG_S("\n\rMax interupt number is: ");
ffffffff8022480c:	48 c7 c7 ee 99 22 80 	mov    $0xffffffff802299ee,%rdi
ffffffff80224813:	e8 f3 81 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(Max_Int);
ffffffff80224818:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022481c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022481f:	e8 ed 7f fe ff       	call   ffffffff8020c811 <RME_Int_Print>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_ID,IOAPIC_ID);
ffffffff80224824:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022482b:	80 ff ff 
ffffffff8022482e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
ffffffff80224834:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022483b:	80 ff ff 
ffffffff8022483e:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80224841:	89 c0                	mov    %eax,%eax
ffffffff80224843:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    IOAPIC_ID>>=24;
ffffffff80224847:	48 c1 6d e8 18       	shrq   $0x18,-0x18(%rbp)
    /* This is not necessarily true when we have >1 IOAPICs */
    /* RME_ASSERT(IOAPIC_ID==RME_X64_IOAPIC_Info[0].IOAPIC_ID); */
    RME_DBG_S("\n\rIOAPIC ID is: ");
ffffffff8022484c:	48 c7 c7 09 9a 22 80 	mov    $0xffffffff80229a09,%rdi
ffffffff80224853:	e8 b3 81 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(IOAPIC_ID);
ffffffff80224858:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022485c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022485f:	e8 ad 7f fe ff       	call   ffffffff8020c811 <RME_Int_Print>

    /* Disable all interrupts */
    for(Count=0;Count<=Max_Int;Count++)
ffffffff80224864:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8022486b:	00 
ffffffff8022486c:	eb 11                	jmp    ffffffff8022487f <__RME_X64_IOAPIC_Init+0xb3>
        __RME_X64_IOAPIC_Int_Disable(Count);
ffffffff8022486e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224872:	48 89 c7             	mov    %rax,%rdi
ffffffff80224875:	e8 e8 fe ff ff       	call   ffffffff80224762 <__RME_X64_IOAPIC_Int_Disable>
    for(Count=0;Count<=Max_Int;Count++)
ffffffff8022487a:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8022487f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224883:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff80224887:	73 e5                	jae    ffffffff8022486e <__RME_X64_IOAPIC_Init+0xa2>
}
ffffffff80224889:	90                   	nop
ffffffff8022488a:	90                   	nop
ffffffff8022488b:	c9                   	leave  
ffffffff8022488c:	c3                   	ret    

ffffffff8022488d <__RME_X64_SMP_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff8022488d:	f3 0f 1e fa          	endbr64 
ffffffff80224891:	55                   	push   %rbp
ffffffff80224892:	48 89 e5             	mov    %rsp,%rbp
ffffffff80224895:	48 83 ec 20          	sub    $0x20,%rsp
    rme_u8_t* Code;
    rme_cnt_t Count;
    rme_u16_t* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(rme_u8_t*)RME_X64_PA2VA(0x7000);
ffffffff80224899:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax
ffffffff802248a0:	80 ff ff 
ffffffff802248a3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff802248a7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802248ae:	00 
ffffffff802248af:	eb 1f                	jmp    ffffffff802248d0 <__RME_X64_SMP_Init+0x43>
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff802248b1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802248b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802248b9:	48 01 c2             	add    %rax,%rdx
ffffffff802248bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802248c0:	48 05 20 98 22 80    	add    $0xffffffff80229820,%rax
ffffffff802248c6:	0f b6 00             	movzbl (%rax),%eax
ffffffff802248c9:	88 02                	mov    %al,(%rdx)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff802248cb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802248d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802248d4:	48 83 f8 61          	cmp    $0x61,%rax
ffffffff802248d8:	76 d7                	jbe    ffffffff802248b1 <__RME_X64_SMP_Init+0x24>

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
ffffffff802248da:	48 c7 05 cb e9 00 00 	movq   $0x1,0xe9cb(%rip)        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff802248e1:	01 00 00 00 
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff802248e5:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff802248ec:	00 
ffffffff802248ed:	e9 d1 01 00 00       	jmp    ffffffff80224ac3 <__RME_X64_SMP_Init+0x236>
    {
        RME_DBG_S("\n\rBooting CPU ");
ffffffff802248f2:	48 c7 c7 1a 9a 22 80 	mov    $0xffffffff80229a1a,%rdi
ffffffff802248f9:	e8 0d 81 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_DBG_I(Count);
ffffffff802248fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224902:	48 89 c7             	mov    %rax,%rdi
ffffffff80224905:	e8 07 7f fe ff       	call   ffffffff8020c811 <RME_Int_Print>
        /* Temporary stack */
        *(rme_u32_t*)(Code-4)=0x8000;
ffffffff8022490a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022490e:	48 83 e8 04          	sub    $0x4,%rax
ffffffff80224912:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80224918:	48 c7 c0 89 80 10 80 	mov    $0xffffffff80108089,%rax
ffffffff8022491f:	89 c2                	mov    %eax,%edx
ffffffff80224921:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224925:	48 83 e8 08          	sub    $0x8,%rax
ffffffff80224929:	81 c2 00 00 00 80    	add    $0x80000000,%edx
ffffffff8022492f:	89 10                	mov    %edx,(%rax)
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80224931:	48 8b 15 60 e9 00 00 	mov    0xe960(%rip),%rdx        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff80224938:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022493c:	48 83 c0 01          	add    $0x1,%rax
ffffffff80224940:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80224944:	48 89 c1             	mov    %rax,%rcx
ffffffff80224947:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022494b:	48 83 e8 10          	sub    $0x10,%rax
ffffffff8022494f:	48 01 ca             	add    %rcx,%rdx
ffffffff80224952:	48 89 10             	mov    %rdx,(%rax)

        /* Initialize CMOS shutdown code to 0AH */
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff80224955:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff8022495a:	bf 70 00 00 00       	mov    $0x70,%edi
ffffffff8022495f:	e8 a6 6e fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
        __RME_X64_Out(RME_X64_RTC_DATA,0xA);
ffffffff80224964:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80224969:	bf 71 00 00 00       	mov    $0x71,%edi
ffffffff8022496e:	e8 97 6e fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
        /* Warm reset vector point to AP code */
        Warm_Reset=(rme_u16_t*)RME_X64_PA2VA((0x40<<4|0x67));
ffffffff80224973:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax
ffffffff8022497a:	80 ff ff 
ffffffff8022497d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Warm_Reset[0]=0;
ffffffff80224981:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224985:	66 c7 00 00 00       	movw   $0x0,(%rax)
        Warm_Reset[1]=0x7000>>4;
ffffffff8022498a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022498e:	48 83 c0 02          	add    $0x2,%rax
ffffffff80224992:	66 c7 00 00 07       	movw   $0x700,(%rax)

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80224997:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022499b:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8022499f:	48 05 c0 32 23 80    	add    $0xffffffff802332c0,%rax
ffffffff802249a5:	48 8b 00             	mov    (%rax),%rax
ffffffff802249a8:	89 c1                	mov    %eax,%ecx
ffffffff802249aa:	48 8b 05 6f f9 00 00 	mov    0xf96f(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802249b1:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff802249b8:	80 ff ff 
ffffffff802249bb:	48 01 d0             	add    %rdx,%rax
ffffffff802249be:	48 89 c2             	mov    %rax,%rdx
ffffffff802249c1:	89 c8                	mov    %ecx,%eax
ffffffff802249c3:	c1 e0 18             	shl    $0x18,%eax
ffffffff802249c6:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff802249c8:	48 8b 05 51 f9 00 00 	mov    0xf951(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802249cf:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff802249d6:	80 ff ff 
ffffffff802249d9:	48 01 d0             	add    %rdx,%rax
ffffffff802249dc:	c7 00 00 c5 00 00    	movl   $0xc500,(%rax)
                                                 RME_X64_LAPIC_ICRLO_LEVEL|
                                                 RME_X64_LAPIC_ICRLO_ASSERT);
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff802249e2:	48 8b 05 37 f9 00 00 	mov    0xf937(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802249e9:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff802249f0:	80 ff ff 
ffffffff802249f3:	48 01 d0             	add    %rdx,%rax
ffffffff802249f6:	c7 00 00 85 00 00    	movl   $0x8500,(%rax)
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802249fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224a00:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80224a04:	48 05 c0 32 23 80    	add    $0xffffffff802332c0,%rax
ffffffff80224a0a:	48 8b 00             	mov    (%rax),%rax
ffffffff80224a0d:	89 c1                	mov    %eax,%ecx
ffffffff80224a0f:	48 8b 05 0a f9 00 00 	mov    0xf90a(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224a16:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff80224a1d:	80 ff ff 
ffffffff80224a20:	48 01 d0             	add    %rdx,%rax
ffffffff80224a23:	48 89 c2             	mov    %rax,%rdx
ffffffff80224a26:	89 c8                	mov    %ecx,%eax
ffffffff80224a28:	c1 e0 18             	shl    $0x18,%eax
ffffffff80224a2b:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff80224a2d:	48 8b 05 ec f8 00 00 	mov    0xf8ec(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224a34:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224a3b:	80 ff ff 
ffffffff80224a3e:	48 01 d0             	add    %rdx,%rax
ffffffff80224a41:	c7 00 07 06 00 00    	movl   $0x607,(%rax)
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80224a47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224a4b:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80224a4f:	48 05 c0 32 23 80    	add    $0xffffffff802332c0,%rax
ffffffff80224a55:	48 8b 00             	mov    (%rax),%rax
ffffffff80224a58:	89 c1                	mov    %eax,%ecx
ffffffff80224a5a:	48 8b 05 bf f8 00 00 	mov    0xf8bf(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224a61:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff80224a68:	80 ff ff 
ffffffff80224a6b:	48 01 d0             	add    %rdx,%rax
ffffffff80224a6e:	48 89 c2             	mov    %rax,%rdx
ffffffff80224a71:	89 c8                	mov    %ecx,%eax
ffffffff80224a73:	c1 e0 18             	shl    $0x18,%eax
ffffffff80224a76:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff80224a78:	48 8b 05 a1 f8 00 00 	mov    0xf8a1(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224a7f:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224a86:	80 ff ff 
ffffffff80224a89:	48 01 d0             	add    %rdx,%rax
ffffffff80224a8c:	c7 00 07 06 00 00    	movl   $0x607,(%rax)
        RME_X64_UDELAY(200);

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
ffffffff80224a92:	90                   	nop
ffffffff80224a93:	48 8b 05 16 e8 00 00 	mov    0xe816(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff80224a9a:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80224a9e:	48 05 c8 32 23 80    	add    $0xffffffff802332c8,%rax
ffffffff80224aa4:	48 8b 00             	mov    (%rax),%rax
ffffffff80224aa7:	48 85 c0             	test   %rax,%rax
ffffffff80224aaa:	74 e7                	je     ffffffff80224a93 <__RME_X64_SMP_Init+0x206>
        RME_X64_CPU_Cnt++;
ffffffff80224aac:	48 8b 05 fd e7 00 00 	mov    0xe7fd(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff80224ab3:	48 83 c0 01          	add    $0x1,%rax
ffffffff80224ab7:	48 89 05 f2 e7 00 00 	mov    %rax,0xe7f2(%rip)        # ffffffff802332b0 <RME_X64_CPU_Cnt>
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80224abe:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224ac3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80224ac7:	48 8b 05 da e7 00 00 	mov    0xe7da(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80224ace:	48 39 c2             	cmp    %rax,%rdx
ffffffff80224ad1:	0f 82 1b fe ff ff    	jb     ffffffff802248f2 <__RME_X64_SMP_Init+0x65>
    }
}
ffffffff80224ad7:	90                   	nop
ffffffff80224ad8:	90                   	nop
ffffffff80224ad9:	c9                   	leave  
ffffffff80224ada:	c3                   	ret    

ffffffff80224adb <__RME_X64_SMP_Tick>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Tick(void)
{
ffffffff80224adb:	f3 0f 1e fa          	endbr64 
ffffffff80224adf:	55                   	push   %rbp
ffffffff80224ae0:	48 89 e5             	mov    %rsp,%rbp
    /* Is this a SMP? */
    if(RME_X64_Num_CPU>1)
ffffffff80224ae3:	48 8b 05 be e7 00 00 	mov    0xe7be(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80224aea:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80224aee:	76 34                	jbe    ffffffff80224b24 <__RME_X64_SMP_Tick+0x49>
    {
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0xFFULL<<24);
ffffffff80224af0:	48 8b 05 29 f8 00 00 	mov    0xf829(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224af7:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff80224afe:	80 ff ff 
ffffffff80224b01:	48 01 d0             	add    %rdx,%rax
ffffffff80224b04:	c7 00 00 00 00 ff    	movl   $0xff000000,(%rax)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_EXC_SELF|
ffffffff80224b0a:	48 8b 05 0f f8 00 00 	mov    0xf80f(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224b11:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224b18:	80 ff ff 
ffffffff80224b1b:	48 01 d0             	add    %rdx,%rax
ffffffff80224b1e:	c7 00 83 00 0c 00    	movl   $0xc0083,(%rax)
                                                 RME_X64_LAPIC_ICRLO_FIXED|
                                                 RME_X64_INT_SMP_SYSTICK);
    }
}
ffffffff80224b24:	90                   	nop
ffffffff80224b25:	5d                   	pop    %rbp
ffffffff80224b26:	c3                   	ret    

ffffffff80224b27 <__RME_X64_Timer_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_Timer_Init(void)
{
ffffffff80224b27:	f3 0f 1e fa          	endbr64 
ffffffff80224b2b:	55                   	push   %rbp
ffffffff80224b2c:	48 89 e5             	mov    %rsp,%rbp
    /* For timer interrupts, they will always be handled by core 1, and all the other
     * cores should receive a IPI for that, so their scheduler can look after their
     * threads. We are using square wave mode. */
    __RME_X64_Out(RME_X64_PIT_CMD,0x34);
ffffffff80224b2f:	be 34 00 00 00       	mov    $0x34,%esi
ffffffff80224b34:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff80224b39:	e8 cc 6c fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,(1193182/2/RME_X64_TIMER_FREQ)&0xFF);
ffffffff80224b3e:	be 54 00 00 00       	mov    $0x54,%esi
ffffffff80224b43:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80224b48:	e8 bd 6c fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,((1193182/2/RME_X64_TIMER_FREQ)>>8)&0xFF);
ffffffff80224b4d:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80224b52:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80224b57:	e8 ae 6c fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff80224b5c:	90                   	nop
ffffffff80224b5d:	5d                   	pop    %rbp
ffffffff80224b5e:	c3                   	ret    

ffffffff80224b5f <__RME_Lowlvl_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Lowlvl_Init(void)
{
ffffffff80224b5f:	f3 0f 1e fa          	endbr64 
ffffffff80224b63:	55                   	push   %rbp
ffffffff80224b64:	48 89 e5             	mov    %rsp,%rbp
    /* We are here now ! */
    __RME_X64_UART_Init();
ffffffff80224b67:	e8 5b 67 ff ff       	call   ffffffff8021b2c7 <__RME_X64_UART_Init>
    /* Read APIC tables and detect the configurations. Now we are not NUMA-aware */
    RME_ASSERT(__RME_X64_ACPI_Init()==0);
ffffffff80224b6c:	e8 a3 6d ff ff       	call   ffffffff8021b914 <__RME_X64_ACPI_Init>
    /* Detect CPU features */
    __RME_X64_Feature_Get();
ffffffff80224b71:	e8 ad 6e ff ff       	call   ffffffff8021ba23 <__RME_X64_Feature_Get>
    /* Extract memory specifications */
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80224b76:	48 8b 05 ab e4 00 00 	mov    0xe4ab(%rip),%rax        # ffffffff80233028 <RME_X64_MBInfo>
ffffffff80224b7d:	8b 40 2c             	mov    0x2c(%rax),%eax
ffffffff80224b80:	89 c2                	mov    %eax,%edx
ffffffff80224b82:	48 8b 05 9f e4 00 00 	mov    0xe49f(%rip),%rax        # ffffffff80233028 <RME_X64_MBInfo>
ffffffff80224b89:	8b 40 30             	mov    0x30(%rax),%eax
ffffffff80224b8c:	89 c0                	mov    %eax,%eax
ffffffff80224b8e:	48 89 d6             	mov    %rdx,%rsi
ffffffff80224b91:	48 89 c7             	mov    %rax,%rdi
ffffffff80224b94:	e8 03 70 ff ff       	call   ffffffff8021bb9c <__RME_X64_Mem_Init>

    return 0;
ffffffff80224b99:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80224b9e:	5d                   	pop    %rbp
ffffffff80224b9f:	c3                   	ret    

ffffffff80224ba0 <__RME_Pgt_Kom_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Kom_Init(void)
{
ffffffff80224ba0:	f3 0f 1e fa          	endbr64 
ffffffff80224ba4:	55                   	push   %rbp
ffffffff80224ba5:	48 89 e5             	mov    %rsp,%rbp
ffffffff80224ba8:	48 83 ec 30          	sub    $0x30,%rsp
    rme_cnt_t PDE_Cnt;
    rme_cnt_t Addr_Cnt;
    struct __RME_X64_Mem* Mem;

    /* Now initialize the kernel object allocation table */
    _RME_Kot_Init(RME_X64_Layout.Kot_Size/sizeof(rme_ptr_t));
ffffffff80224bac:	48 8b 05 95 e4 00 00 	mov    0xe495(%rip),%rax        # ffffffff80233048 <RME_X64_Layout+0x8>
ffffffff80224bb3:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80224bb7:	48 89 c7             	mov    %rax,%rdi
ffffffff80224bba:	e8 a8 d7 fe ff       	call   ffffffff80212367 <_RME_Kot_Init>
    /* Reset PCID counter */
    RME_X64_PCID_Inc=0;
ffffffff80224bbf:	48 c7 05 86 fb 00 00 	movq   $0x0,0xfb86(%rip)        # ffffffff80234750 <RME_X64_PCID_Inc>
ffffffff80224bc6:	00 00 00 00 

    /* Create the frame for kernel page tables */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80224bca:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224bd1:	00 
ffffffff80224bd2:	e9 87 00 00 00       	jmp    ffffffff80224c5e <__RME_Pgt_Kom_Init+0xbe>
    {
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|
ffffffff80224bd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224bdb:	48 83 c0 01          	add    $0x1,%rax
ffffffff80224bdf:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80224be3:	48 05 00 90 10 80    	add    $0xffffffff80109000,%rax
ffffffff80224be9:	48 89 c2             	mov    %rax,%rdx
ffffffff80224bec:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff80224bf1:	48 01 c2             	add    %rax,%rdx
ffffffff80224bf4:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80224bfb:	ff 0f 00 
ffffffff80224bfe:	48 21 d0             	and    %rdx,%rax
ffffffff80224c01:	48 0d 03 01 00 00    	or     $0x103,%rax
ffffffff80224c07:	48 89 c2             	mov    %rax,%rdx
ffffffff80224c0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224c0e:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff80224c14:	48 89 14 c5 00 90 10 	mov    %rdx,-0x7fef7000(,%rax,8)
ffffffff80224c1b:	80 
        		                    RME_X64_MMU_KERN_PML4;

        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80224c1c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80224c23:	00 
ffffffff80224c24:	eb 29                	jmp    ffffffff80224c4f <__RME_Pgt_Kom_Init+0xaf>
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff80224c26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224c2a:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff80224c2e:	48 89 c2             	mov    %rax,%rdx
ffffffff80224c31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224c35:	48 01 d0             	add    %rdx,%rax
ffffffff80224c38:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80224c3e:	48 c7 04 c5 00 90 10 	movq   $0x102,-0x7fef7000(,%rax,8)
ffffffff80224c45:	80 02 01 00 00 
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80224c4a:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80224c4f:	48 81 7d f0 ff 01 00 	cmpq   $0x1ff,-0x10(%rbp)
ffffffff80224c56:	00 
ffffffff80224c57:	7e cd                	jle    ffffffff80224c26 <__RME_Pgt_Kom_Init+0x86>
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80224c59:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224c5e:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff80224c65:	00 
ffffffff80224c66:	0f 8e 6b ff ff ff    	jle    ffffffff80224bd7 <__RME_Pgt_Kom_Init+0x37>
    }

    /* Map in the first 4GB as linear mappings as always, 4 super pages, including the device hole.
     * We need to detect whether the 1GB page is supported. If not, we just map the initial tables
     * in, and we know where they are hard-coded in the assembly file */
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff80224c6c:	48 8b 05 15 f9 00 00 	mov    0xf915(%rip),%rax        # ffffffff80234588 <RME_X64_Feature+0x248>
ffffffff80224c73:	25 00 00 00 04       	and    $0x4000000,%eax
ffffffff80224c78:	48 85 c0             	test   %rax,%rax
ffffffff80224c7b:	0f 84 97 00 00 00    	je     ffffffff80224d18 <__RME_Pgt_Kom_Init+0x178>
    {
        /* Can use 1GB pages */
        RME_DBG_S("\n\rThis CPU have 1GB superpage support");
ffffffff80224c81:	48 c7 c7 30 9a 22 80 	mov    $0xffffffff80229a30,%rdi
ffffffff80224c88:	e8 7e 7d fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224c8d:	48 8b 05 6c 53 ee ff 	mov    -0x11ac94(%rip),%rax        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80224c94:	0c 81                	or     $0x81,%al
ffffffff80224c96:	48 89 05 63 53 ee ff 	mov    %rax,-0x11ac9d(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224c9d:	48 8b 05 64 53 ee ff 	mov    -0x11ac9c(%rip),%rax        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80224ca4:	48 0d 81 00 00 40    	or     $0x40000081,%rax
ffffffff80224caa:	48 89 05 57 53 ee ff 	mov    %rax,-0x11aca9(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224cb1:	48 8b 05 58 53 ee ff 	mov    -0x11aca8(%rip),%rax        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80224cb8:	ba 81 00 00 80       	mov    $0x80000081,%edx
ffffffff80224cbd:	48 09 d0             	or     %rdx,%rax
ffffffff80224cc0:	48 89 05 49 53 ee ff 	mov    %rax,-0x11acb7(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        /* We need to mark the device hole as unbufferable */
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_ADDR(3*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224cc7:	48 8b 05 4a 53 ee ff 	mov    -0x11acb6(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224cce:	ba 81 00 00 c0       	mov    $0xc0000081,%edx
ffffffff80224cd3:	48 09 d0             	or     %rdx,%rax
ffffffff80224cd6:	48 89 05 3b 53 ee ff 	mov    %rax,-0x11acc5(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff80224cdd:	48 8b 05 34 53 ee ff 	mov    -0x11accc(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224ce4:	48 83 c8 18          	or     $0x18,%rax
ffffffff80224ce8:	48 89 05 29 53 ee ff 	mov    %rax,-0x11acd7(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224cef:	48 8b 05 fa 52 fe ff 	mov    -0x1ad06(%rip),%rax        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff80224cf6:	0c 81                	or     $0x81,%al
ffffffff80224cf8:	48 89 05 f1 52 fe ff 	mov    %rax,-0x1ad0f(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224cff:	48 8b 05 f2 52 fe ff 	mov    -0x1ad0e(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224d06:	48 0d 81 00 00 40    	or     $0x40000081,%rax
ffffffff80224d0c:	48 89 05 e5 52 fe ff 	mov    %rax,-0x1ad1b(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224d13:	e9 84 00 00 00       	jmp    ffffffff80224d9c <__RME_Pgt_Kom_Init+0x1fc>
    }
    else
    {
        RME_DBG_S("\n\rThis CPU do not have 1GB superpage support");
ffffffff80224d18:	48 c7 c7 58 9a 22 80 	mov    $0xffffffff80229a58,%rdi
ffffffff80224d1f:	e8 e7 7c fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        /* Cannot use 1GB pages, we revert to 2MB pages used during kernel startup */
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff80224d24:	48 8b 05 d5 52 ee ff 	mov    -0x11ad2b(%rip),%rax        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80224d2b:	48 0d 01 40 10 00    	or     $0x104001,%rax
ffffffff80224d31:	48 89 05 c8 52 ee ff 	mov    %rax,-0x11ad38(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[0][1]|=0x105000|RME_X64_MMU_P;
ffffffff80224d38:	48 8b 05 c9 52 ee ff 	mov    -0x11ad37(%rip),%rax        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80224d3f:	48 0d 01 50 10 00    	or     $0x105001,%rax
ffffffff80224d45:	48 89 05 bc 52 ee ff 	mov    %rax,-0x11ad44(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
        RME_X64_Kpgt.PDP[0][2]|=0x106000|RME_X64_MMU_P;
ffffffff80224d4c:	48 8b 05 bd 52 ee ff 	mov    -0x11ad43(%rip),%rax        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80224d53:	48 0d 01 60 10 00    	or     $0x106001,%rax
ffffffff80224d59:	48 89 05 b0 52 ee ff 	mov    %rax,-0x11ad50(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        RME_X64_Kpgt.PDP[0][3]|=0x107000|RME_X64_MMU_PCD|RME_X64_MMU_PWT|RME_X64_MMU_P;
ffffffff80224d60:	48 8b 05 b1 52 ee ff 	mov    -0x11ad4f(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224d67:	48 0d 19 70 10 00    	or     $0x107019,%rax
ffffffff80224d6d:	48 89 05 a4 52 ee ff 	mov    %rax,-0x11ad5c(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
ffffffff80224d74:	48 8b 05 75 52 fe ff 	mov    -0x1ad8b(%rip),%rax        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff80224d7b:	48 0d 01 40 10 00    	or     $0x104001,%rax
ffffffff80224d81:	48 89 05 68 52 fe ff 	mov    %rax,-0x1ad98(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff80224d88:	48 8b 05 69 52 fe ff 	mov    -0x1ad97(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224d8f:	48 0d 01 50 10 00    	or     $0x105001,%rax
ffffffff80224d95:	48 89 05 5c 52 fe ff 	mov    %rax,-0x1ada4(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
    }

    /* Ignore all memory below 4G, but we need to get the size of such memory above 16MB */
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
ffffffff80224d9c:	48 8b 05 6d 62 00 00 	mov    0x626d(%rip),%rax        # ffffffff8022b010 <RME_X64_Phys_Mem>
ffffffff80224da3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224da7:	eb 26                	jmp    ffffffff80224dcf <__RME_Pgt_Kom_Init+0x22f>
    {
        /* See if this memory segment passes 16MB limit */
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
ffffffff80224da9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224dad:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224db1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224db5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224db9:	48 01 d0             	add    %rdx,%rax
ffffffff80224dbc:	48 3d 00 00 00 01    	cmp    $0x1000000,%rax
ffffffff80224dc2:	77 17                	ja     ffffffff80224ddb <__RME_Pgt_Kom_Init+0x23b>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224dc4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224dc8:	48 8b 00             	mov    (%rax),%rax
ffffffff80224dcb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224dcf:	48 81 7d d8 10 b0 22 	cmpq   $0xffffffff8022b010,-0x28(%rbp)
ffffffff80224dd6:	80 
ffffffff80224dd7:	75 d0                	jne    ffffffff80224da9 <__RME_Pgt_Kom_Init+0x209>
ffffffff80224dd9:	eb 01                	jmp    ffffffff80224ddc <__RME_Pgt_Kom_Init+0x23c>
        else
            break;
ffffffff80224ddb:	90                   	nop
    }

    /* The first Kom1 trunk must start at smaller or equal to 16MB */
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGT_SIZE_16M));
    /* The raw sizes of kernel memory segment 1 - per CPU area is already aligned so no need to align again */
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80224ddc:	48 8b 15 6d e2 00 00 	mov    0xe26d(%rip),%rdx        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff80224de3:	48 8b 05 6e e2 00 00 	mov    0xe26e(%rip),%rax        # ffffffff80233058 <RME_X64_Layout+0x18>
ffffffff80224dea:	48 01 d0             	add    %rdx,%rax
ffffffff80224ded:	48 89 05 84 e2 00 00 	mov    %rax,0xe284(%rip)        # ffffffff80233078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80224df4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224df8:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224dfc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e00:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224e04:	48 01 d0             	add    %rdx,%rax
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80224e07:	48 8b 15 6a e2 00 00 	mov    0xe26a(%rip),%rdx        # ffffffff80233078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80224e0e:	48 29 d0             	sub    %rdx,%rax
ffffffff80224e11:	48 89 c1             	mov    %rax,%rcx
ffffffff80224e14:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff80224e1b:	7f ff ff 
ffffffff80224e1e:	48 01 c8             	add    %rcx,%rax
ffffffff80224e21:	48 89 05 50 e3 00 00 	mov    %rax,0xe350(%rip)        # ffffffff80233178 <RME_X64_Layout+0x138>

    /* Add the rest of Kom1 into the array */
    Addr_Cnt=1;
ffffffff80224e28:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
ffffffff80224e2f:	00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224e30:	e9 d8 00 00 00       	jmp    ffffffff80224f0d <__RME_Pgt_Kom_Init+0x36d>
    {
        /* Add all segments under 4GB to Kom1 */
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224e35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e39:	48 8b 00             	mov    (%rax),%rax
ffffffff80224e3c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        /* If detected anything above 4GB, then this is not Kom1, exiting */
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff80224e40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e44:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224e48:	ba ff ff ff ff       	mov    $0xffffffff,%edx
ffffffff80224e4d:	48 39 d0             	cmp    %rdx,%rax
ffffffff80224e50:	0f 87 c7 00 00 00    	ja     ffffffff80224f1d <__RME_Pgt_Kom_Init+0x37d>
            break;
        /* If this memory trunk have less than 4MB, drop it */
        if(Mem->Length<RME_POW2(RME_PGT_SIZE_4M))
ffffffff80224e56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e5a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224e5e:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80224e64:	77 3a                	ja     ffffffff80224ea0 <__RME_Pgt_Kom_Init+0x300>
        {
            RME_DBG_S("\n\rAbandoning physical memory below 4G: addr 0x");
ffffffff80224e66:	48 c7 c7 88 9a 22 80 	mov    $0xffffffff80229a88,%rdi
ffffffff80224e6d:	e8 99 7b fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_DBG_H(Mem->Start_Addr);
ffffffff80224e72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e76:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224e7a:	48 89 c7             	mov    %rax,%rdi
ffffffff80224e7d:	e8 c7 7a fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
            RME_DBG_S(", length 0x");
ffffffff80224e82:	48 c7 c7 b7 9a 22 80 	mov    $0xffffffff80229ab7,%rdi
ffffffff80224e89:	e8 7d 7b fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_DBG_H(Mem->Length);
ffffffff80224e8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e92:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224e96:	48 89 c7             	mov    %rax,%rdi
ffffffff80224e99:	e8 ab 7a fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
            continue;
ffffffff80224e9e:	eb 6d                	jmp    ffffffff80224f0d <__RME_Pgt_Kom_Init+0x36d>
        }
        if(Addr_Cnt>=RME_X64_KOM1_MAXSEGS)
ffffffff80224ea0:	48 83 7d e0 1f       	cmpq   $0x1f,-0x20(%rbp)
ffffffff80224ea5:	7e 0c                	jle    ffffffff80224eb3 <__RME_Pgt_Kom_Init+0x313>
        {
            RME_DBG_S("\r\nThe memory under 4G is too fragmented. Aborting.");
ffffffff80224ea7:	48 c7 c7 c8 9a 22 80 	mov    $0xffffffff80229ac8,%rdi
ffffffff80224eae:	e8 58 7b fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_ASSERT(0);
        }
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff80224eb3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224eb7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224ebb:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80224ec1:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224ec7:	48 89 c2             	mov    %rax,%rdx
ffffffff80224eca:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80224ed1:	80 ff ff 
ffffffff80224ed4:	48 01 c2             	add    %rax,%rdx
ffffffff80224ed7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224edb:	48 83 c0 06          	add    $0x6,%rax
ffffffff80224edf:	48 89 14 c5 48 30 23 	mov    %rdx,-0x7fdccfb8(,%rax,8)
ffffffff80224ee6:	80 
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff80224ee7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224eeb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224eef:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224ef5:	48 89 c2             	mov    %rax,%rdx
ffffffff80224ef8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224efc:	48 83 c0 26          	add    $0x26,%rax
ffffffff80224f00:	48 89 14 c5 48 30 23 	mov    %rdx,-0x7fdccfb8(,%rax,8)
ffffffff80224f07:	80 
        Addr_Cnt++;
ffffffff80224f08:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224f0d:	48 81 7d d8 10 b0 22 	cmpq   $0xffffffff8022b010,-0x28(%rbp)
ffffffff80224f14:	80 
ffffffff80224f15:	0f 85 1a ff ff ff    	jne    ffffffff80224e35 <__RME_Pgt_Kom_Init+0x295>
ffffffff80224f1b:	eb 01                	jmp    ffffffff80224f1e <__RME_Pgt_Kom_Init+0x37e>
            break;
ffffffff80224f1d:	90                   	nop
    }
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff80224f1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224f22:	48 89 05 47 e1 00 00 	mov    %rax,0xe147(%rip)        # ffffffff80233070 <RME_X64_Layout+0x30>

    /* This is the hole */
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff80224f29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224f2d:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224f31:	48 83 c0 06          	add    $0x6,%rax
ffffffff80224f35:	48 8b 14 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rdx
ffffffff80224f3c:	80 
ffffffff80224f3d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224f41:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224f45:	48 83 c0 26          	add    $0x26,%rax
ffffffff80224f49:	48 8b 04 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rax
ffffffff80224f50:	80 
ffffffff80224f51:	48 01 d0             	add    %rdx,%rax
ffffffff80224f54:	48 89 05 1d e3 00 00 	mov    %rax,0xe31d(%rip)        # ffffffff80233278 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff80224f5b:	48 8b 15 16 e3 00 00 	mov    0xe316(%rip),%rdx        # ffffffff80233278 <RME_X64_Layout+0x238>
ffffffff80224f62:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff80224f69:	80 ff ff 
ffffffff80224f6c:	48 29 d0             	sub    %rdx,%rax
ffffffff80224f6f:	48 89 05 0a e3 00 00 	mov    %rax,0xe30a(%rip)        # ffffffff80233280 <RME_X64_Layout+0x240>

    /* Create kernel page mappings for memory above 4GB - we assume only one segment below 4GB */
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff80224f76:	48 8b 05 fb e0 00 00 	mov    0xe0fb(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff80224f7d:	48 89 05 dc e0 00 00 	mov    %rax,0xe0dc(%rip)        # ffffffff80233060 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff80224f84:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff80224f8b:	80 ff ff 
ffffffff80224f8e:	48 89 05 f3 e2 00 00 	mov    %rax,0xe2f3(%rip)        # ffffffff80233288 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff80224f95:	48 c7 05 f0 e2 00 00 	movq   $0x0,0xe2f0(%rip)        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff80224f9c:	00 00 00 00 

    /* We have filled the first 4 1GB superpages */
    PML4_Cnt=0;
ffffffff80224fa0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224fa7:	00 
    PDP_Cnt=3;
ffffffff80224fa8:	48 c7 45 f0 03 00 00 	movq   $0x3,-0x10(%rbp)
ffffffff80224faf:	00 
    PDE_Cnt=511;
ffffffff80224fb0:	48 c7 45 e8 ff 01 00 	movq   $0x1ff,-0x18(%rbp)
ffffffff80224fb7:	00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224fb8:	e9 db 01 00 00       	jmp    ffffffff80225198 <__RME_Pgt_Kom_Init+0x5f8>
    {
        /* Throw away small segments */
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff80224fbd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224fc1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224fc5:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80224fcb:	77 48                	ja     ffffffff80225015 <__RME_Pgt_Kom_Init+0x475>
        {
            RME_DBG_S("\n\rAbandoning physical memory above 4G: addr 0x");
ffffffff80224fcd:	48 c7 c7 00 9b 22 80 	mov    $0xffffffff80229b00,%rdi
ffffffff80224fd4:	e8 32 7a fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_DBG_H(Mem->Start_Addr);
ffffffff80224fd9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224fdd:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224fe1:	48 89 c7             	mov    %rax,%rdi
ffffffff80224fe4:	e8 60 79 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
            RME_DBG_S(", length 0x");
ffffffff80224fe9:	48 c7 c7 b7 9a 22 80 	mov    $0xffffffff80229ab7,%rdi
ffffffff80224ff0:	e8 16 7a fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_DBG_H(Mem->Length);
ffffffff80224ff5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ff9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224ffd:	48 89 c7             	mov    %rax,%rdi
ffffffff80225000:	e8 44 79 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80225005:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225009:	48 8b 00             	mov    (%rax),%rax
ffffffff8022500c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            continue;
ffffffff80225010:	e9 83 01 00 00       	jmp    ffffffff80225198 <__RME_Pgt_Kom_Init+0x5f8>
        }

        /* Align the memory segment to 2MB */
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80225015:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225019:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8022501d:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80225023:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80225029:	48 89 c2             	mov    %rax,%rdx
ffffffff8022502c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225030:	48 89 50 10          	mov    %rdx,0x10(%rax)
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff80225034:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225038:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8022503c:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80225040:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80225046:	48 89 c2             	mov    %rax,%rdx
ffffffff80225049:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022504d:	48 89 50 18          	mov    %rdx,0x18(%rax)

        /* Add these pages into the kernel at addresses above 4GB offset as 2MB pages */
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80225051:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80225058:	00 
ffffffff80225059:	e9 1a 01 00 00       	jmp    ffffffff80225178 <__RME_Pgt_Kom_Init+0x5d8>
        {
            PDE_Cnt++;
ffffffff8022505e:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
            if(PDE_Cnt==512)
ffffffff80225063:	48 81 7d e8 00 02 00 	cmpq   $0x200,-0x18(%rbp)
ffffffff8022506a:	00 
ffffffff8022506b:	0f 85 8f 00 00 00    	jne    ffffffff80225100 <__RME_Pgt_Kom_Init+0x560>
            {
                PDE_Cnt=0;
ffffffff80225071:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80225078:	00 
                PDP_Cnt++;
ffffffff80225079:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
                if(PDP_Cnt==512)
ffffffff8022507e:	48 81 7d f0 00 02 00 	cmpq   $0x200,-0x10(%rbp)
ffffffff80225085:	00 
ffffffff80225086:	75 0d                	jne    ffffffff80225095 <__RME_Pgt_Kom_Init+0x4f5>
                {
                    PDP_Cnt=0;
ffffffff80225088:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8022508f:	00 
                    PML4_Cnt++;
ffffffff80225090:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
                }
                /* Map this PDE into the PDP */
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff80225095:	48 8b 05 dc df 00 00 	mov    0xdfdc(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff8022509c:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802250a3:	80 00 00 
ffffffff802250a6:	48 01 c2             	add    %rax,%rdx
ffffffff802250a9:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff802250b0:	ff 0f 00 
ffffffff802250b3:	48 21 d0             	and    %rdx,%rax
ffffffff802250b6:	48 83 c8 01          	or     $0x1,%rax
ffffffff802250ba:	48 89 c2             	mov    %rax,%rdx
ffffffff802250bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802250c1:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff802250c5:	48 89 c1             	mov    %rax,%rcx
ffffffff802250c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802250cc:	48 01 c8             	add    %rcx,%rax
ffffffff802250cf:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff802250d5:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff802250dc:	80 
ffffffff802250dd:	48 09 c2             	or     %rax,%rdx
ffffffff802250e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802250e4:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff802250e8:	48 89 c1             	mov    %rax,%rcx
ffffffff802250eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802250ef:	48 01 c8             	add    %rcx,%rax
ffffffff802250f2:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff802250f8:	48 89 14 c5 00 90 10 	mov    %rdx,-0x7fef7000(,%rax,8)
ffffffff802250ff:	80 
            }

            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff80225100:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225104:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80225108:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022510c:	48 01 c2             	add    %rax,%rdx
ffffffff8022510f:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80225116:	ff 0f 00 
ffffffff80225119:	48 21 c2             	and    %rax,%rdx
ffffffff8022511c:	48 8b 05 55 df 00 00 	mov    0xdf55(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff80225123:	48 89 c1             	mov    %rax,%rcx
ffffffff80225126:	48 89 d0             	mov    %rdx,%rax
ffffffff80225129:	48 0d 83 01 00 00    	or     $0x183,%rax
ffffffff8022512f:	48 89 01             	mov    %rax,(%rcx)
            RME_X64_Layout.Kom1_Start[0]+=sizeof(rme_ptr_t);
ffffffff80225132:	48 8b 05 3f df 00 00 	mov    0xdf3f(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff80225139:	48 83 c0 08          	add    $0x8,%rax
ffffffff8022513d:	48 89 05 34 df 00 00 	mov    %rax,0xdf34(%rip)        # ffffffff80233078 <RME_X64_Layout+0x38>
            RME_X64_Layout.Kom1_Size[0]-=sizeof(rme_ptr_t);
ffffffff80225144:	48 8b 05 2d e0 00 00 	mov    0xe02d(%rip),%rax        # ffffffff80233178 <RME_X64_Layout+0x138>
ffffffff8022514b:	48 83 e8 08          	sub    $0x8,%rax
ffffffff8022514f:	48 89 05 22 e0 00 00 	mov    %rax,0xe022(%rip)        # ffffffff80233178 <RME_X64_Layout+0x138>
            RME_X64_Layout.Kom2_Size+=RME_POW2(RME_PGT_SIZE_2M);
ffffffff80225156:	48 8b 05 33 e1 00 00 	mov    0xe133(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff8022515d:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80225163:	48 89 05 26 e1 00 00 	mov    %rax,0xe126(%rip)        # ffffffff80233290 <RME_X64_Layout+0x250>
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8022516a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022516e:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80225174:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80225178:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022517c:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff80225180:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225184:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225187:	0f 87 d1 fe ff ff    	ja     ffffffff8022505e <__RME_Pgt_Kom_Init+0x4be>
        }

        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff8022518d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225191:	48 8b 00             	mov    (%rax),%rax
ffffffff80225194:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80225198:	48 81 7d d8 10 b0 22 	cmpq   $0xffffffff8022b010,-0x28(%rbp)
ffffffff8022519f:	80 
ffffffff802251a0:	0f 85 17 fe ff ff    	jne    ffffffff80224fbd <__RME_Pgt_Kom_Init+0x41d>
    }

    /* Copy the new page tables to the temporary entries, so that we can boot SMP */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff802251a6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802251ad:	00 
ffffffff802251ae:	eb 33                	jmp    ffffffff802251e3 <__RME_Pgt_Kom_Init+0x643>
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff802251b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802251b4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802251bb:	00 
ffffffff802251bc:	48 b8 00 18 10 00 00 	movabs $0xffff800000101800,%rax
ffffffff802251c3:	80 ff ff 
ffffffff802251c6:	48 01 c2             	add    %rax,%rdx
ffffffff802251c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802251cd:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff802251d3:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff802251da:	80 
ffffffff802251db:	48 89 02             	mov    %rax,(%rdx)
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff802251de:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802251e3:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff802251ea:	00 
ffffffff802251eb:	7e c3                	jle    ffffffff802251b0 <__RME_Pgt_Kom_Init+0x610>

    /* Page table allocation finished. Now need to align Kom1 to 2MB page boundary */
    RME_X64_Layout.Kom1_Start[0]=RME_ROUND_UP(RME_X64_Layout.Kom1_Start[0],RME_PGT_SIZE_2M);
ffffffff802251ed:	48 8b 05 84 de 00 00 	mov    0xde84(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff802251f4:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff802251fa:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80225200:	48 89 05 71 de 00 00 	mov    %rax,0xde71(%rip)        # ffffffff80233078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Size[0]-1,RME_PGT_SIZE_2M);
ffffffff80225207:	48 8b 05 6a df 00 00 	mov    0xdf6a(%rip),%rax        # ffffffff80233178 <RME_X64_Layout+0x138>
ffffffff8022520e:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80225212:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80225218:	48 89 05 59 df 00 00 	mov    %rax,0xdf59(%rip)        # ffffffff80233178 <RME_X64_Layout+0x138>

    /* All memory is mapped. Now figure out the size of kernel stacks */
    RME_X64_Layout.Kpgtbl_Size=RME_X64_Layout.Kom1_Start[0]-RME_X64_Layout.Kpgtbl_Start;
ffffffff8022521f:	48 8b 05 52 de 00 00 	mov    0xde52(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff80225226:	48 8b 15 33 de 00 00 	mov    0xde33(%rip),%rdx        # ffffffff80233060 <RME_X64_Layout+0x20>
ffffffff8022522d:	48 29 d0             	sub    %rdx,%rax
ffffffff80225230:	48 89 05 31 de 00 00 	mov    %rax,0xde31(%rip)        # ffffffff80233068 <RME_X64_Layout+0x28>

    /* See if we are allocating the stack from Kom2 or Kom1 */
    if(RME_X64_Layout.Kom2_Size==0)
ffffffff80225237:	48 8b 05 52 e0 00 00 	mov    0xe052(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff8022523e:	48 85 c0             	test   %rax,%rax
ffffffff80225241:	75 54                	jne    ffffffff80225297 <__RME_Pgt_Kom_Init+0x6f7>
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Start[0]+RME_X64_Layout.Kom1_Size[0]-1,RME_X64_KSTACK_ORDER);
ffffffff80225243:	48 8b 15 2e de 00 00 	mov    0xde2e(%rip),%rdx        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff8022524a:	48 8b 05 27 df 00 00 	mov    0xdf27(%rip),%rax        # ffffffff80233178 <RME_X64_Layout+0x138>
ffffffff80225251:	48 01 d0             	add    %rdx,%rax
ffffffff80225254:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80225258:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff8022525e:	48 89 05 33 e0 00 00 	mov    %rax,0xe033(%rip)        # ffffffff80233298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80225265:	48 8b 15 34 e0 00 00 	mov    0xe034(%rip),%rdx        # ffffffff802332a0 <RME_X64_Layout+0x260>
ffffffff8022526c:	48 8b 05 25 e0 00 00 	mov    0xe025(%rip),%rax        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff80225273:	48 29 d0             	sub    %rdx,%rax
ffffffff80225276:	48 89 05 1b e0 00 00 	mov    %rax,0xe01b(%rip)        # ffffffff80233298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom1_Size[0]=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom1_Start[0];
ffffffff8022527d:	48 8b 05 14 e0 00 00 	mov    0xe014(%rip),%rax        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff80225284:	48 8b 15 ed dd 00 00 	mov    0xdded(%rip),%rdx        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff8022528b:	48 29 d0             	sub    %rdx,%rax
ffffffff8022528e:	48 89 05 e3 de 00 00 	mov    %rax,0xdee3(%rip)        # ffffffff80233178 <RME_X64_Layout+0x138>
ffffffff80225295:	eb 52                	jmp    ffffffff802252e9 <__RME_Pgt_Kom_Init+0x749>
    }


    else
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size-1,RME_X64_KSTACK_ORDER);
ffffffff80225297:	48 8b 15 ea df 00 00 	mov    0xdfea(%rip),%rdx        # ffffffff80233288 <RME_X64_Layout+0x248>
ffffffff8022529e:	48 8b 05 eb df 00 00 	mov    0xdfeb(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff802252a5:	48 01 d0             	add    %rdx,%rax
ffffffff802252a8:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802252ac:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff802252b2:	48 89 05 df df 00 00 	mov    %rax,0xdfdf(%rip)        # ffffffff80233298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff802252b9:	48 8b 15 e0 df 00 00 	mov    0xdfe0(%rip),%rdx        # ffffffff802332a0 <RME_X64_Layout+0x260>
ffffffff802252c0:	48 8b 05 d1 df 00 00 	mov    0xdfd1(%rip),%rax        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff802252c7:	48 29 d0             	sub    %rdx,%rax
ffffffff802252ca:	48 89 05 c7 df 00 00 	mov    %rax,0xdfc7(%rip)        # ffffffff80233298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom2_Start;
ffffffff802252d1:	48 8b 05 c0 df 00 00 	mov    0xdfc0(%rip),%rax        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff802252d8:	48 8b 15 a9 df 00 00 	mov    0xdfa9(%rip),%rdx        # ffffffff80233288 <RME_X64_Layout+0x248>
ffffffff802252df:	48 29 d0             	sub    %rdx,%rax
ffffffff802252e2:	48 89 05 a7 df 00 00 	mov    %rax,0xdfa7(%rip)        # ffffffff80233290 <RME_X64_Layout+0x250>
    }

    /* Now report all mapping info */
    RME_DBG_S("\n\r\n\rKot_Start:     0x");
ffffffff802252e9:	48 c7 c7 2f 9b 22 80 	mov    $0xffffffff80229b2f,%rdi
ffffffff802252f0:	e8 16 77 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kot_Start);
ffffffff802252f5:	48 8b 05 44 dd 00 00 	mov    0xdd44(%rip),%rax        # ffffffff80233040 <RME_X64_Layout>
ffffffff802252fc:	48 89 c7             	mov    %rax,%rdi
ffffffff802252ff:	e8 45 76 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rKot_Size:      0x");
ffffffff80225304:	48 c7 c7 45 9b 22 80 	mov    $0xffffffff80229b45,%rdi
ffffffff8022530b:	e8 fb 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kot_Size);
ffffffff80225310:	48 8b 05 31 dd 00 00 	mov    0xdd31(%rip),%rax        # ffffffff80233048 <RME_X64_Layout+0x8>
ffffffff80225317:	48 89 c7             	mov    %rax,%rdi
ffffffff8022531a:	e8 2a 76 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rPerCPU_Start:    0x");
ffffffff8022531f:	48 c7 c7 59 9b 22 80 	mov    $0xffffffff80229b59,%rdi
ffffffff80225326:	e8 e0 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.PerCPU_Start);
ffffffff8022532b:	48 8b 05 1e dd 00 00 	mov    0xdd1e(%rip),%rax        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff80225332:	48 89 c7             	mov    %rax,%rdi
ffffffff80225335:	e8 0f 76 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rPerCPU_Size:     0x");
ffffffff8022533a:	48 c7 c7 6f 9b 22 80 	mov    $0xffffffff80229b6f,%rdi
ffffffff80225341:	e8 c5 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.PerCPU_Size);
ffffffff80225346:	48 8b 05 0b dd 00 00 	mov    0xdd0b(%rip),%rax        # ffffffff80233058 <RME_X64_Layout+0x18>
ffffffff8022534d:	48 89 c7             	mov    %rax,%rdi
ffffffff80225350:	e8 f4 75 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rKpgtbl_Start:    0x");
ffffffff80225355:	48 c7 c7 85 9b 22 80 	mov    $0xffffffff80229b85,%rdi
ffffffff8022535c:	e8 aa 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kpgtbl_Start);
ffffffff80225361:	48 8b 05 f8 dc 00 00 	mov    0xdcf8(%rip),%rax        # ffffffff80233060 <RME_X64_Layout+0x20>
ffffffff80225368:	48 89 c7             	mov    %rax,%rdi
ffffffff8022536b:	e8 d9 75 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rKpgtbl_Size:     0x");
ffffffff80225370:	48 c7 c7 9b 9b 22 80 	mov    $0xffffffff80229b9b,%rdi
ffffffff80225377:	e8 8f 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kpgtbl_Size);
ffffffff8022537c:	48 8b 05 e5 dc 00 00 	mov    0xdce5(%rip),%rax        # ffffffff80233068 <RME_X64_Layout+0x28>
ffffffff80225383:	48 89 c7             	mov    %rax,%rdi
ffffffff80225386:	e8 be 75 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff8022538b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80225392:	00 
ffffffff80225393:	eb 7d                	jmp    ffffffff80225412 <__RME_Pgt_Kom_Init+0x872>
    {
        RME_DBG_S("\n\rKom1_Start[");
ffffffff80225395:	48 c7 c7 b1 9b 22 80 	mov    $0xffffffff80229bb1,%rdi
ffffffff8022539c:	e8 6a 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff802253a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802253a5:	48 89 c7             	mov    %rax,%rdi
ffffffff802253a8:	e8 64 74 fe ff       	call   ffffffff8020c811 <RME_Int_Print>
        RME_DBG_S("]:  0x");
ffffffff802253ad:	48 c7 c7 bf 9b 22 80 	mov    $0xffffffff80229bbf,%rdi
ffffffff802253b4:	e8 52 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_DBG_H(RME_X64_Layout.Kom1_Start[Addr_Cnt]);
ffffffff802253b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802253bd:	48 83 c0 06          	add    $0x6,%rax
ffffffff802253c1:	48 8b 04 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rax
ffffffff802253c8:	80 
ffffffff802253c9:	48 89 c7             	mov    %rax,%rdi
ffffffff802253cc:	e8 78 75 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
        RME_DBG_S("\n\rKom1_Size[");
ffffffff802253d1:	48 c7 c7 c6 9b 22 80 	mov    $0xffffffff80229bc6,%rdi
ffffffff802253d8:	e8 2e 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff802253dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802253e1:	48 89 c7             	mov    %rax,%rdi
ffffffff802253e4:	e8 28 74 fe ff       	call   ffffffff8020c811 <RME_Int_Print>
        RME_DBG_S("]:   0x");
ffffffff802253e9:	48 c7 c7 d3 9b 22 80 	mov    $0xffffffff80229bd3,%rdi
ffffffff802253f0:	e8 16 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_DBG_H(RME_X64_Layout.Kom1_Size[Addr_Cnt]);
ffffffff802253f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802253f9:	48 83 c0 26          	add    $0x26,%rax
ffffffff802253fd:	48 8b 04 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rax
ffffffff80225404:	80 
ffffffff80225405:	48 89 c7             	mov    %rax,%rdi
ffffffff80225408:	e8 3c 75 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff8022540d:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
ffffffff80225412:	48 8b 15 57 dc 00 00 	mov    0xdc57(%rip),%rdx        # ffffffff80233070 <RME_X64_Layout+0x30>
ffffffff80225419:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022541d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225420:	0f 87 6f ff ff ff    	ja     ffffffff80225395 <__RME_Pgt_Kom_Init+0x7f5>
    }
    RME_DBG_S("\n\rHole_Start:      0x");
ffffffff80225426:	48 c7 c7 db 9b 22 80 	mov    $0xffffffff80229bdb,%rdi
ffffffff8022542d:	e8 d9 75 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Hole_Start);
ffffffff80225432:	48 8b 05 3f de 00 00 	mov    0xde3f(%rip),%rax        # ffffffff80233278 <RME_X64_Layout+0x238>
ffffffff80225439:	48 89 c7             	mov    %rax,%rdi
ffffffff8022543c:	e8 08 75 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rHole_Size:       0x");
ffffffff80225441:	48 c7 c7 f1 9b 22 80 	mov    $0xffffffff80229bf1,%rdi
ffffffff80225448:	e8 be 75 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Hole_Size);
ffffffff8022544d:	48 8b 05 2c de 00 00 	mov    0xde2c(%rip),%rax        # ffffffff80233280 <RME_X64_Layout+0x240>
ffffffff80225454:	48 89 c7             	mov    %rax,%rdi
ffffffff80225457:	e8 ed 74 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rKom2_Start:     0x");
ffffffff8022545c:	48 c7 c7 07 9c 22 80 	mov    $0xffffffff80229c07,%rdi
ffffffff80225463:	e8 a3 75 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Start);
ffffffff80225468:	48 8b 05 19 de 00 00 	mov    0xde19(%rip),%rax        # ffffffff80233288 <RME_X64_Layout+0x248>
ffffffff8022546f:	48 89 c7             	mov    %rax,%rdi
ffffffff80225472:	e8 d2 74 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rKom2_Size:      0x");
ffffffff80225477:	48 c7 c7 1c 9c 22 80 	mov    $0xffffffff80229c1c,%rdi
ffffffff8022547e:	e8 88 75 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Size);
ffffffff80225483:	48 8b 05 06 de 00 00 	mov    0xde06(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff8022548a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022548d:	e8 b7 74 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rStack_Start:     0x");
ffffffff80225492:	48 c7 c7 31 9c 22 80 	mov    $0xffffffff80229c31,%rdi
ffffffff80225499:	e8 6d 75 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Stack_Start);
ffffffff8022549e:	48 8b 05 f3 dd 00 00 	mov    0xddf3(%rip),%rax        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff802254a5:	48 89 c7             	mov    %rax,%rdi
ffffffff802254a8:	e8 9c 74 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rStack_Size:      0x");
ffffffff802254ad:	48 c7 c7 47 9c 22 80 	mov    $0xffffffff80229c47,%rdi
ffffffff802254b4:	e8 52 75 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Stack_Size);
ffffffff802254b9:	48 8b 05 e0 dd 00 00 	mov    0xdde0(%rip),%rax        # ffffffff802332a0 <RME_X64_Layout+0x260>
ffffffff802254c0:	48 89 c7             	mov    %rax,%rdi
ffffffff802254c3:	e8 81 74 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>

    return 0;
ffffffff802254c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802254cd:	c9                   	leave  
ffffffff802254ce:	c3                   	ret    

ffffffff802254cf <__RME_SMP_Low_Level_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
rme_ptr_t __RME_SMP_Low_Level_Init(void)
{
ffffffff802254cf:	f3 0f 1e fa          	endbr64 
ffffffff802254d3:	55                   	push   %rbp
ffffffff802254d4:	48 89 e5             	mov    %rsp,%rbp
ffffffff802254d7:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_CPU_Local* CPU_Local;

    /* Initialize all vector tables */
    __RME_X64_CPU_Local_Init();
ffffffff802254db:	e8 ec 69 ff ff       	call   ffffffff8021becc <__RME_X64_CPU_Local_Init>
    /* Initialize LAPIC */
    __RME_X64_LAPIC_Init();
ffffffff802254e0:	e8 b6 ef ff ff       	call   ffffffff8022449b <__RME_X64_LAPIC_Init>

    /* Check to see if we are booting this correctly */
    CPU_Local=RME_CPU_LOCAL();
ffffffff802254e5:	e8 55 63 fe ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802254ea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_ASSERT(CPU_Local->CPUID==RME_X64_CPU_Cnt);
ffffffff802254ee:	48 8b 05 bb dd 00 00 	mov    0xddbb(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>

    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
ffffffff802254f5:	48 8b 05 b4 dd 00 00 	mov    0xddb4(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff802254fc:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80225500:	48 05 c8 32 23 80    	add    $0xffffffff802332c8,%rax
ffffffff80225506:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    /* Spin until the global CPU counter is zero again, which means the booting
     * processor has done booting and we can proceed now */
    while(RME_X64_CPU_Cnt!=0);
ffffffff8022550d:	90                   	nop
ffffffff8022550e:	48 8b 05 9b dd 00 00 	mov    0xdd9b(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff80225515:	48 85 c0             	test   %rax,%rax
ffffffff80225518:	75 f4                	jne    ffffffff8022550e <__RME_SMP_Low_Level_Init+0x3f>
    RME_ASSERT(CPU_Local->Thd_Cur!=0);
    RME_ASSERT(CPU_Local->Sig_Tim!=0);
    RME_ASSERT(CPU_Local->Sig_Vct!=0);

    /* Change page tables */
    __RME_Pgt_Set(RME_CAP_GETOBJ((CPU_Local->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff8022551a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022551e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80225522:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80225526:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8022552a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8022552e:	48 89 c7             	mov    %rax,%rdi
ffffffff80225531:	e8 29 14 00 00       	call   ffffffff8022695f <__RME_Pgt_Set>
    /* Boot into the init thread - never returns */
    __RME_Enter_User_Mode(0, RME_X64_USTACK(CPU_Local->CPUID), CPU_Local->CPUID);
ffffffff80225536:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022553a:	48 8b 00             	mov    (%rax),%rax
ffffffff8022553d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225541:	48 8b 12             	mov    (%rdx),%rdx
ffffffff80225544:	48 81 c2 01 04 00 00 	add    $0x401,%rdx
ffffffff8022554b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022554e:	48 c1 e1 0b          	shl    $0xb,%rcx
ffffffff80225552:	48 89 c2             	mov    %rax,%rdx
ffffffff80225555:	48 89 ce             	mov    %rcx,%rsi
ffffffff80225558:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff8022555d:	e8 5e 63 fe ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>

    return 0;
ffffffff80225562:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80225567:	c9                   	leave  
ffffffff80225568:	c3                   	ret    

ffffffff80225569 <__RME_Boot>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Boot(void)
{
ffffffff80225569:	f3 0f 1e fa          	endbr64 
ffffffff8022556d:	55                   	push   %rbp
ffffffff8022556e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225571:	48 83 ec 40          	sub    $0x40,%rsp
    rme_ptr_t Phys_Addr;
    rme_ptr_t Page_Ptr;
    struct RME_Cap_Cpt* Cpt;
    struct RME_CPU_Local* CPU_Local;
    /* Initialize our own CPU-local data structures */
    RME_X64_CPU_Cnt = 0;
ffffffff80225575:	48 c7 05 30 dd 00 00 	movq   $0x0,0xdd30(%rip)        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8022557c:	00 00 00 00 
    RME_DBG_S("\r\nCPU 0 local IDT/GDT init");
ffffffff80225580:	48 c7 c7 5d 9c 22 80 	mov    $0xffffffff80229c5d,%rdi
ffffffff80225587:	e8 7f 74 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    __RME_X64_CPU_Local_Init();
ffffffff8022558c:	e8 3b 69 ff ff       	call   ffffffff8021becc <__RME_X64_CPU_Local_Init>
    /* Initialize interrupt controllers (PIC, LAPIC, IOAPIC) */
    RME_DBG_S("\r\nCPU 0 LAPIC init");
ffffffff80225591:	48 c7 c7 78 9c 22 80 	mov    $0xffffffff80229c78,%rdi
ffffffff80225598:	e8 6e 74 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    __RME_X64_LAPIC_Init();
ffffffff8022559d:	e8 f9 ee ff ff       	call   ffffffff8022449b <__RME_X64_LAPIC_Init>
    RME_DBG_S("\r\nPIC init");
ffffffff802255a2:	48 c7 c7 8b 9c 22 80 	mov    $0xffffffff80229c8b,%rdi
ffffffff802255a9:	e8 5d 74 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    __RME_X64_PIC_Init();
ffffffff802255ae:	e8 45 f0 ff ff       	call   ffffffff802245f8 <__RME_X64_PIC_Init>
    RME_DBG_S("\r\nIOAPIC init");
ffffffff802255b3:	48 c7 c7 96 9c 22 80 	mov    $0xffffffff80229c96,%rdi
ffffffff802255ba:	e8 4c 74 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    __RME_X64_IOAPIC_Init();
ffffffff802255bf:	e8 08 f2 ff ff       	call   ffffffff802247cc <__RME_X64_IOAPIC_Init>
    /* Start other processors, if there are any. They will keep spinning until
     * the booting processor finish all its work. */
    __RME_X64_SMP_Init();
ffffffff802255c4:	e8 c4 f2 ff ff       	call   ffffffff8022488d <__RME_X64_SMP_Init>

    /* Create all initial tables in Kom1, which is sure to be present */
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff802255c9:	48 8b 05 a8 da 00 00 	mov    0xdaa8(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff802255d0:	48 05 00 00 00 02    	add    $0x2000000,%rax
ffffffff802255d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_DBG_S("\r\nKot registration start offset: 0x");
ffffffff802255da:	48 c7 c7 a8 9c 22 80 	mov    $0xffffffff80229ca8,%rdi
ffffffff802255e1:	e8 25 74 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff802255e6:	48 ba 00 00 a0 fe ff 	movabs $0x7ffffea00000,%rdx
ffffffff802255ed:	7f 00 00 
ffffffff802255f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802255f4:	48 01 d0             	add    %rdx,%rax
ffffffff802255f7:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff802255fb:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff802255ff:	48 89 c7             	mov    %rax,%rdi
ffffffff80225602:	e8 42 73 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>

    /* Create the capability table for the init process - always 16 */
    Cpt=(struct RME_Cap_Cpt*)Cur_Addr;
ffffffff80225607:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022560b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    RME_ASSERT(_RME_Cpt_Boot_Init(RME_BOOT_INIT_CPT,Cur_Addr,16)==RME_BOOT_INIT_CPT);
ffffffff8022560f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225613:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff80225618:	48 89 c6             	mov    %rax,%rsi
ffffffff8022561b:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80225620:	e8 52 84 fe ff       	call   ffffffff8020da77 <_RME_Cpt_Boot_Init>
    Cur_Addr+=RME_KOM_ROUND(RME_CPT_SIZE(16));
ffffffff80225625:	48 81 45 f8 00 04 00 	addq   $0x400,-0x8(%rbp)
ffffffff8022562c:	00 
    /* Create the capability table for initial page tables - now we are only
     * adding 2MB pages. There will be 1 PML4, 16 PDP, and 16*512=8192 PGD.
     * This should provide support for up to 4TB of memory, which will be sufficient
     * for at least a decade. These data structures will eat 32MB of memory, which
     * is fine */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff8022562d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225631:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225635:	41 b8 11 20 00 00    	mov    $0x2011,%r8d
ffffffff8022563b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022563e:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80225643:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225648:	48 89 c7             	mov    %rax,%rdi
ffffffff8022564b:	e8 16 85 fe ff       	call   ffffffff8020db66 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOM_ROUND(RME_CPT_SIZE(1+16+8192));
ffffffff80225650:	48 81 45 f8 40 04 08 	addq   $0x80440,-0x8(%rbp)
ffffffff80225657:	00 

    /* Align the address to 4096 to prepare for page table creation */
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff80225658:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022565c:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225662:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225668:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Create PML4 */
    RME_DBG_S("\r\nPML4 address:");
ffffffff8022566c:	48 c7 c7 cc 9c 22 80 	mov    $0xffffffff80229ccc,%rdi
ffffffff80225673:	e8 93 73 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(Cur_Addr);
ffffffff80225678:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022567c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022567f:	e8 c5 72 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff80225684:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225688:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022568c:	6a 09                	push   $0x9
ffffffff8022568e:	6a 27                	push   $0x27
ffffffff80225690:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff80225696:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff8022569c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022569f:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802256a4:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802256a9:	48 89 c7             	mov    %rax,%rdi
ffffffff802256ac:	e8 fb a2 fe ff       	call   ffffffff8020f9ac <_RME_Pgt_Boot_Crt>
ffffffff802256b1:	48 83 c4 10          	add    $0x10,%rsp
                                   Cur_Addr, 0, RME_PGT_TOP, RME_PGT_SIZE_512G, RME_PGT_NUM_512)==0);
    Cur_Addr+=RME_KOM_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff802256b5:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff802256bc:	00 
    /* Create all our 16 PDPs, and cons them into the PML4 */
    for(Count=0;Count<16;Count++)
ffffffff802256bd:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802256c4:	00 
ffffffff802256c5:	eb 73                	jmp    ffffffff8022573a <__RME_Boot+0x1d1>
    {
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff802256c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802256cb:	48 8d 70 01          	lea    0x1(%rax),%rsi
ffffffff802256cf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802256d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802256d7:	6a 09                	push   $0x9
ffffffff802256d9:	6a 1e                	push   $0x1e
ffffffff802256db:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff802256e1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff802256e7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802256ea:	48 89 f2             	mov    %rsi,%rdx
ffffffff802256ed:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802256f2:	48 89 c7             	mov    %rax,%rdi
ffffffff802256f5:	e8 b2 a2 fe ff       	call   ffffffff8020f9ac <_RME_Pgt_Boot_Crt>
ffffffff802256fa:	48 83 c4 10          	add    $0x10,%rsp
                                       Cur_Addr, 0, RME_PGT_NOM, RME_PGT_SIZE_1G, RME_PGT_NUM_512)==0);
        Cur_Addr+=RME_KOM_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff802256fe:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225705:	00 
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4), Count,
ffffffff80225706:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022570a:	48 83 c0 01          	add    $0x1,%rax
ffffffff8022570e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80225711:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff80225717:	48 89 c1             	mov    %rax,%rcx
ffffffff8022571a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8022571e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225722:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80225728:	be 00 80 01 00       	mov    $0x18000,%esi
ffffffff8022572d:	48 89 c7             	mov    %rax,%rdi
ffffffff80225730:	e8 30 a9 fe ff       	call   ffffffff80210065 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<16;Count++)
ffffffff80225735:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff8022573a:	48 83 7d f0 0f       	cmpq   $0xf,-0x10(%rbp)
ffffffff8022573f:	7e 86                	jle    ffffffff802256c7 <__RME_Boot+0x15e>
                                       RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count)), RME_PGT_ALL_PERM)==0);
    }

    /* Create 8192 PDEs, and cons them into their respective PDPs */
    for(Count=0;Count<8192;Count++)
ffffffff80225741:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225748:	00 
ffffffff80225749:	e9 8e 00 00 00       	jmp    ffffffff802257dc <__RME_Boot+0x273>
    {
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff8022574e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225752:	48 8d 70 11          	lea    0x11(%rax),%rsi
ffffffff80225756:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022575a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022575e:	6a 09                	push   $0x9
ffffffff80225760:	6a 15                	push   $0x15
ffffffff80225762:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff80225768:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff8022576e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225771:	48 89 f2             	mov    %rsi,%rdx
ffffffff80225774:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80225779:	48 89 c7             	mov    %rax,%rdi
ffffffff8022577c:	e8 2b a2 fe ff       	call   ffffffff8020f9ac <_RME_Pgt_Boot_Crt>
ffffffff80225781:	48 83 c4 10          	add    $0x10,%rsp
                                       Cur_Addr, 0, RME_PGT_NOM, RME_PGT_SIZE_2M, RME_PGT_NUM_512)==0);
        Cur_Addr+=RME_KOM_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff80225785:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff8022578c:	00 
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff8022578d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225791:	48 83 c0 11          	add    $0x11,%rax
ffffffff80225795:	0f b7 c0             	movzwl %ax,%eax
ffffffff80225798:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff8022579e:	48 89 c1             	mov    %rax,%rcx
ffffffff802257a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802257a5:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff802257aa:	48 89 c2             	mov    %rax,%rdx
ffffffff802257ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802257b1:	48 c1 f8 09          	sar    $0x9,%rax
ffffffff802257b5:	48 83 c0 01          	add    $0x1,%rax
ffffffff802257b9:	0f b7 c0             	movzwl %ax,%eax
ffffffff802257bc:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff802257c2:	48 89 c6             	mov    %rax,%rsi
ffffffff802257c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802257c9:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff802257cf:	48 89 c7             	mov    %rax,%rdi
ffffffff802257d2:	e8 8e a8 fe ff       	call   ffffffff80210065 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<8192;Count++)
ffffffff802257d7:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff802257dc:	48 81 7d f0 ff 1f 00 	cmpq   $0x1fff,-0x10(%rbp)
ffffffff802257e3:	00 
ffffffff802257e4:	0f 8e 64 ff ff ff    	jle    ffffffff8022574e <__RME_Boot+0x1e5>
                                       RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Count)), RME_PGT_ALL_PERM)==0);
    }

    /* Map all the Kom1 that we have into it */
    Page_Ptr=0;
ffffffff802257ea:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff802257f1:	00 
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff802257f2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff802257f9:	00 
ffffffff802257fa:	e9 a1 00 00 00       	jmp    ffffffff802258a0 <__RME_Boot+0x337>
    {
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff802257ff:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225806:	00 
ffffffff80225807:	eb 75                	jmp    ffffffff8022587e <__RME_Boot+0x315>
        {
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff80225809:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022580d:	48 83 c0 06          	add    $0x6,%rax
ffffffff80225811:	48 8b 14 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rdx
ffffffff80225818:	80 
ffffffff80225819:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022581d:	48 01 c2             	add    %rax,%rdx
ffffffff80225820:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff80225827:	80 00 00 
ffffffff8022582a:	48 01 d0             	add    %rdx,%rax
ffffffff8022582d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff80225831:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225835:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff8022583a:	48 89 c1             	mov    %rax,%rcx
ffffffff8022583d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225841:	48 c1 e8 09          	shr    $0x9,%rax
ffffffff80225845:	48 83 c0 11          	add    $0x11,%rax
ffffffff80225849:	0f b7 c0             	movzwl %ax,%eax
ffffffff8022584c:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff80225852:	48 89 c6             	mov    %rax,%rsi
ffffffff80225855:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80225859:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022585d:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80225863:	48 89 c7             	mov    %rax,%rdi
ffffffff80225866:	e8 6d a5 fe ff       	call   ffffffff8020fdd8 <_RME_Pgt_Boot_Add>
                                           Phys_Addr, Page_Ptr&0x1FF, RME_PGT_ALL_PERM)==0);
            Page_Ptr++;
ffffffff8022586b:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80225870:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225874:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff8022587a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8022587e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80225882:	48 83 c0 26          	add    $0x26,%rax
ffffffff80225886:	48 8b 14 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rdx
ffffffff8022588d:	80 
ffffffff8022588e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225892:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225895:	0f 87 6e ff ff ff    	ja     ffffffff80225809 <__RME_Boot+0x2a0>
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff8022589b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff802258a0:	48 8b 15 c9 d7 00 00 	mov    0xd7c9(%rip),%rdx        # ffffffff80233070 <RME_X64_Layout+0x30>
ffffffff802258a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802258ab:	48 39 c2             	cmp    %rax,%rdx
ffffffff802258ae:	0f 87 4b ff ff ff    	ja     ffffffff802257ff <__RME_Boot+0x296>
        }
    }
    RME_DBG_S("\r\nKom1 pages: 0x");
ffffffff802258b4:	48 c7 c7 dc 9c 22 80 	mov    $0xffffffff80229cdc,%rdi
ffffffff802258bb:	e8 4b 71 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(Page_Ptr);
ffffffff802258c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802258c4:	48 89 c7             	mov    %rax,%rdi
ffffffff802258c7:	e8 7d 70 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S(", [0x0, 0x");
ffffffff802258cc:	48 c7 c7 ed 9c 22 80 	mov    $0xffffffff80229ced,%rdi
ffffffff802258d3:	e8 33 71 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff802258d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802258dc:	48 83 c0 01          	add    $0x1,%rax
ffffffff802258e0:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff802258e4:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802258e8:	48 89 c7             	mov    %rax,%rdi
ffffffff802258eb:	e8 59 70 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("]");
ffffffff802258f0:	48 c7 c7 f8 9c 22 80 	mov    $0xffffffff80229cf8,%rdi
ffffffff802258f7:	e8 0f 71 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>

    /* Map the Kom2 in - don't want lookups, we know where they are. Offset by 2048 because they are mapped above 4G */
    RME_DBG_S("\r\nKom2 pages: 0x");
ffffffff802258fc:	48 c7 c7 fa 9c 22 80 	mov    $0xffffffff80229cfa,%rdi
ffffffff80225903:	e8 03 71 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M));
ffffffff80225908:	48 8b 05 81 d9 00 00 	mov    0xd981(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff8022590f:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff80225913:	48 89 c7             	mov    %rax,%rdi
ffffffff80225916:	e8 2e 70 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S(", [0x");
ffffffff8022591b:	48 c7 c7 0b 9d 22 80 	mov    $0xffffffff80229d0b,%rdi
ffffffff80225922:	e8 e4 70 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M));
ffffffff80225927:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022592b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8022592f:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff80225933:	48 89 c7             	mov    %rax,%rdi
ffffffff80225936:	e8 0e 70 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S(", 0x");
ffffffff8022593b:	48 c7 c7 cd 99 22 80 	mov    $0xffffffff802299cd,%rdi
ffffffff80225942:	e8 c4 70 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff80225947:	48 c7 45 f0 00 08 00 	movq   $0x800,-0x10(%rbp)
ffffffff8022594e:	00 
ffffffff8022594f:	e9 bb 00 00 00       	jmp    ffffffff80225a0f <__RME_Boot+0x4a6>
    {
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff80225954:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225958:	48 c1 f8 12          	sar    $0x12,%rax
ffffffff8022595c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022595f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225963:	48 c1 f8 09          	sar    $0x9,%rax
ffffffff80225967:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff8022596c:	48 c1 e2 09          	shl    $0x9,%rdx
ffffffff80225970:	48 01 d0             	add    %rdx,%rax
ffffffff80225973:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80225979:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80225980:	80 
ffffffff80225981:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff80225988:	ff 0f 00 
ffffffff8022598b:	48 21 c2             	and    %rax,%rdx
ffffffff8022598e:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80225995:	80 ff ff 
ffffffff80225998:	48 01 d0             	add    %rdx,%rax
ffffffff8022599b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8022599f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802259a3:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff802259a8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802259af:	00 
ffffffff802259b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802259b4:	48 01 d0             	add    %rdx,%rax
ffffffff802259b7:	48 8b 00             	mov    (%rax),%rax
ffffffff802259ba:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff802259c1:	ff 0f 00 
ffffffff802259c4:	48 21 d0             	and    %rdx,%rax
ffffffff802259c7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff802259cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802259cf:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff802259d4:	48 89 c1             	mov    %rax,%rcx
ffffffff802259d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802259db:	48 c1 e8 09          	shr    $0x9,%rax
ffffffff802259df:	48 83 c0 11          	add    $0x11,%rax
ffffffff802259e3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802259e6:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff802259ec:	48 89 c6             	mov    %rax,%rsi
ffffffff802259ef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff802259f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802259f7:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff802259fd:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a00:	e8 d3 a3 fe ff       	call   ffffffff8020fdd8 <_RME_Pgt_Boot_Add>
                                       Phys_Addr, Page_Ptr&0x1FF, RME_PGT_ALL_PERM)==0);
        Page_Ptr++;
ffffffff80225a05:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff80225a0a:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225a0f:	48 8b 05 7a d8 00 00 	mov    0xd87a(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff80225a16:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff80225a1a:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
ffffffff80225a21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225a25:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225a28:	0f 87 26 ff ff ff    	ja     ffffffff80225954 <__RME_Boot+0x3eb>
    }
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff80225a2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225a32:	48 83 c0 01          	add    $0x1,%rax
ffffffff80225a36:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff80225a3a:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80225a3e:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a41:	e8 03 6f fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("]");
ffffffff80225a46:	48 c7 c7 f8 9c 22 80 	mov    $0xffffffff80229cf8,%rdi
ffffffff80225a4d:	e8 b9 6f fe ff       	call   ffffffff8020ca0b <RME_Str_Print>

    /* Activate the first process - This process cannot be deleted */
    RME_ASSERT(_RME_Prc_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_PRC,
ffffffff80225a52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225a56:	41 b8 00 80 01 00    	mov    $0x18000,%r8d
ffffffff80225a5c:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff80225a61:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff80225a66:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225a6b:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a6e:	e8 fb d6 fe ff       	call   ffffffff8021316e <_RME_Prc_Boot_Crt>
                                  RME_BOOT_INIT_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4))==0);

    /* Create the initial kernel function capability */
    RME_ASSERT(_RME_Kfn_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_KERN)==0);
ffffffff80225a73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225a77:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80225a7c:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225a81:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a84:	e8 15 52 ff ff       	call   ffffffff8021ac9e <_RME_Kfn_Boot_Crt>

    /* Create a capability table for initial kernel memory capabilities. We need a few for Kom1, and another one for Kom2 */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_KOM, Cur_Addr, RME_X64_KOM1_MAXSEGS+1)==0);
ffffffff80225a89:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225a8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225a91:	41 b8 21 00 00 00    	mov    $0x21,%r8d
ffffffff80225a97:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225a9a:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff80225a9f:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225aa4:	48 89 c7             	mov    %rax,%rdi
ffffffff80225aa7:	e8 ba 80 fe ff       	call   ffffffff8020db66 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOM_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff80225aac:	48 81 45 f8 40 08 00 	addq   $0x840,-0x8(%rbp)
ffffffff80225ab3:	00 
    /* Create Kom1 capabilities - can create page tables here */
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff80225ab4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225abb:	00 
ffffffff80225abc:	eb 57                	jmp    ffffffff80225b15 <__RME_Boot+0x5ac>
    {
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff80225abe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ac2:	48 83 c0 06          	add    $0x6,%rax
ffffffff80225ac6:	48 8b 14 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rdx
ffffffff80225acd:	80 
ffffffff80225ace:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ad2:	48 83 c0 26          	add    $0x26,%rax
ffffffff80225ad6:	48 8b 04 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rax
ffffffff80225add:	80 
ffffffff80225ade:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
ffffffff80225ae2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ae6:	48 83 c0 06          	add    $0x6,%rax
ffffffff80225aea:	48 8b 0c c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rcx
ffffffff80225af1:	80 
ffffffff80225af2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225af6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225afa:	41 b9 0f 00 00 00    	mov    $0xf,%r9d
ffffffff80225b00:	49 89 f0             	mov    %rsi,%r8
ffffffff80225b03:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff80225b08:	48 89 c7             	mov    %rax,%rdi
ffffffff80225b0b:	e8 7b ce fe ff       	call   ffffffff8021298b <_RME_Kom_Boot_Crt>
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff80225b10:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225b15:	48 8b 15 54 d5 00 00 	mov    0xd554(%rip),%rdx        # ffffffff80233070 <RME_X64_Layout+0x30>
ffffffff80225b1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225b20:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225b23:	77 99                	ja     ffffffff80225abe <__RME_Boot+0x555>
                                      RME_X64_Layout.Kom1_Start[Count],
                                      RME_X64_Layout.Kom1_Start[Count]+RME_X64_Layout.Kom1_Size[Count],
                                      RME_KOM_FLAG_ALL)==0);
    }
    /* Create Kom2 capability - cannot create page tables here */
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff80225b25:	48 8b 15 5c d7 00 00 	mov    0xd75c(%rip),%rdx        # ffffffff80233288 <RME_X64_Layout+0x248>
ffffffff80225b2c:	48 8b 05 5d d7 00 00 	mov    0xd75d(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff80225b33:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80225b37:	48 8b 15 4a d7 00 00 	mov    0xd74a(%rip),%rdx        # ffffffff80233288 <RME_X64_Layout+0x248>
ffffffff80225b3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225b42:	41 b9 0d 00 00 00    	mov    $0xd,%r9d
ffffffff80225b48:	49 89 c8             	mov    %rcx,%r8
ffffffff80225b4b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225b4e:	ba 20 00 00 00       	mov    $0x20,%edx
ffffffff80225b53:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff80225b58:	48 89 c7             	mov    %rax,%rdi
ffffffff80225b5b:	e8 2b ce fe ff       	call   ffffffff8021298b <_RME_Kom_Boot_Crt>
                                  RME_X64_Layout.Kom2_Start,
                                  RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size,
                                  RME_KOM_FLAG_CPT|RME_KOM_FLAG_THD|RME_KOM_FLAG_INV)==0);

    /* Create the initial kernel endpoints for timer ticks */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80225b60:	48 8b 0d 41 d7 00 00 	mov    0xd741(%rip),%rcx        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225b67:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225b6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225b6f:	49 89 c8             	mov    %rcx,%r8
ffffffff80225b72:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225b75:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff80225b7a:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225b7f:	48 89 c7             	mov    %rax,%rdi
ffffffff80225b82:	e8 df 7f fe ff       	call   ffffffff8020db66 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOM_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff80225b87:	48 8b 05 1a d7 00 00 	mov    0xd71a(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225b8e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225b92:	48 83 c0 0f          	add    $0xf,%rax
ffffffff80225b96:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
ffffffff80225b9a:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225b9e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225ba5:	00 
ffffffff80225ba6:	eb 51                	jmp    ffffffff80225bf9 <__RME_Boot+0x690>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225ba8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225bac:	48 89 c7             	mov    %rax,%rdi
ffffffff80225baf:	e8 98 e8 ff ff       	call   ffffffff8022444c <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff80225bb4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff80225bb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225bbc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225bc0:	48 89 c2             	mov    %rax,%rdx
ffffffff80225bc3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225bc7:	48 05 80 01 00 00    	add    $0x180,%rax
ffffffff80225bcd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225bd1:	48 01 d0             	add    %rdx,%rax
ffffffff80225bd4:	48 89 c2             	mov    %rax,%rdx
ffffffff80225bd7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80225bdb:	48 89 50 10          	mov    %rdx,0x10(%rax)
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff80225bdf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225be3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225be7:	be 06 00 00 00       	mov    $0x6,%esi
ffffffff80225bec:	48 89 c7             	mov    %rax,%rdi
ffffffff80225bef:	e8 43 29 ff ff       	call   ffffffff80218537 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225bf4:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225bf9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225bfd:	48 8b 05 a4 d6 00 00 	mov    0xd6a4(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225c04:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225c07:	72 9f                	jb     ffffffff80225ba8 <__RME_Boot+0x63f>
    }

    /* Create the initial kernel endpoints for all other interrupts */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80225c09:	48 8b 0d 98 d6 00 00 	mov    0xd698(%rip),%rcx        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225c10:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225c14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225c18:	49 89 c8             	mov    %rcx,%r8
ffffffff80225c1b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225c1e:	ba 07 00 00 00       	mov    $0x7,%edx
ffffffff80225c23:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225c28:	48 89 c7             	mov    %rax,%rdi
ffffffff80225c2b:	e8 36 7f fe ff       	call   ffffffff8020db66 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff80225c30:	48 8b 05 71 d6 00 00 	mov    0xd671(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225c37:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225c3b:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225c41:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225c47:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225c4b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225c52:	00 
ffffffff80225c53:	eb 51                	jmp    ffffffff80225ca6 <__RME_Boot+0x73d>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225c55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225c59:	48 89 c7             	mov    %rax,%rdi
ffffffff80225c5c:	e8 eb e7 ff ff       	call   ffffffff8022444c <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff80225c61:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff80225c65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225c69:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225c6d:	48 89 c2             	mov    %rax,%rdx
ffffffff80225c70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225c74:	48 05 c0 01 00 00    	add    $0x1c0,%rax
ffffffff80225c7a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225c7e:	48 01 d0             	add    %rdx,%rax
ffffffff80225c81:	48 89 c2             	mov    %rax,%rdx
ffffffff80225c84:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80225c88:	48 89 50 18          	mov    %rdx,0x18(%rax)
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff80225c8c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225c90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225c94:	be 07 00 00 00       	mov    $0x7,%esi
ffffffff80225c99:	48 89 c7             	mov    %rax,%rdi
ffffffff80225c9c:	e8 96 28 ff ff       	call   ffffffff80218537 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225ca1:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225ca6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225caa:	48 8b 05 f7 d5 00 00 	mov    0xd5f7(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225cb1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225cb4:	72 9f                	jb     ffffffff80225c55 <__RME_Boot+0x6ec>
    }

    /* Activate the first thread, and set its priority */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80225cb6:	48 8b 0d eb d5 00 00 	mov    0xd5eb(%rip),%rcx        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225cbd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225cc1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225cc5:	49 89 c8             	mov    %rcx,%r8
ffffffff80225cc8:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225ccb:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80225cd0:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225cd5:	48 89 c7             	mov    %rax,%rdi
ffffffff80225cd8:	e8 89 7e fe ff       	call   ffffffff8020db66 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOM_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff80225cdd:	48 8b 05 c4 d5 00 00 	mov    0xd5c4(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225ce4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225ce8:	48 83 c0 0f          	add    $0xf,%rax
ffffffff80225cec:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
ffffffff80225cf0:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225cf4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225cfb:	00 
ffffffff80225cfc:	eb 4f                	jmp    ffffffff80225d4d <__RME_Boot+0x7e4>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225cfe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225d02:	48 89 c7             	mov    %rax,%rdi
ffffffff80225d05:	e8 42 e7 ff ff       	call   ffffffff8022444c <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff80225d0a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff80225d0e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80225d12:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225d16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225d1a:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80225d1e:	ff 75 d0             	push   -0x30(%rbp)
ffffffff80225d21:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff80225d27:	49 89 c8             	mov    %rcx,%r8
ffffffff80225d2a:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff80225d2f:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80225d34:	48 89 c7             	mov    %rax,%rdi
ffffffff80225d37:	e8 90 f0 fe ff       	call   ffffffff80214dcc <_RME_Thd_Boot_Crt>
ffffffff80225d3c:	48 83 c4 10          	add    $0x10,%rsp
        Cur_Addr+=RME_KOM_ROUND(RME_THD_SIZE(Count));
ffffffff80225d40:	48 81 45 f8 60 01 00 	addq   $0x160,-0x8(%rbp)
ffffffff80225d47:	00 
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225d48:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225d4d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225d51:	48 8b 05 50 d5 00 00 	mov    0xd550(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225d58:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225d5b:	72 a1                	jb     ffffffff80225cfe <__RME_Boot+0x795>
    }

    RME_DBG_S("\r\nKot registration end offset: 0x");
ffffffff80225d5d:	48 c7 c7 18 9d 22 80 	mov    $0xffffffff80229d18,%rdi
ffffffff80225d64:	e8 a2 6c fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff80225d69:	48 ba 00 00 a0 fe ff 	movabs $0x7ffffea00000,%rdx
ffffffff80225d70:	7f 00 00 
ffffffff80225d73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d77:	48 01 d0             	add    %rdx,%rax
ffffffff80225d7a:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80225d7e:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80225d82:	48 89 c7             	mov    %rax,%rdi
ffffffff80225d85:	e8 bf 6b fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\r\nKom1 frontier: 0x");
ffffffff80225d8a:	48 c7 c7 3a 9d 22 80 	mov    $0xffffffff80229d3a,%rdi
ffffffff80225d91:	e8 75 6c fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(Cur_Addr);
ffffffff80225d96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d9a:	48 89 c7             	mov    %rax,%rdi
ffffffff80225d9d:	e8 a7 6b fe ff       	call   ffffffff8020c949 <RME_Hex_Print>

    /* Print sizes and halt */
    RME_DBG_S("\r\nThread object size: ");
ffffffff80225da2:	48 c7 c7 4e 9d 22 80 	mov    $0xffffffff80229d4e,%rdi
ffffffff80225da9:	e8 5d 6c fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Thd_Struct)/sizeof(rme_ptr_t));
ffffffff80225dae:	bf 16 00 00 00       	mov    $0x16,%edi
ffffffff80225db3:	e8 59 6a fe ff       	call   ffffffff8020c811 <RME_Int_Print>
    RME_DBG_S("\r\nInvocation object size: ");
ffffffff80225db8:	48 c7 c7 65 9d 22 80 	mov    $0xffffffff80229d65,%rdi
ffffffff80225dbf:	e8 47 6c fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Inv_Struct)/sizeof(rme_ptr_t));
ffffffff80225dc4:	bf 09 00 00 00       	mov    $0x9,%edi
ffffffff80225dc9:	e8 43 6a fe ff       	call   ffffffff8020c811 <RME_Int_Print>

    /* Initialize the timer and start its interrupt routing */
    RME_DBG_S("\r\nTimer init");
ffffffff80225dce:	48 c7 c7 80 9d 22 80 	mov    $0xffffffff80229d80,%rdi
ffffffff80225dd5:	e8 31 6c fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    __RME_X64_Timer_Init();
ffffffff80225dda:	e8 48 ed ff ff       	call   ffffffff80224b27 <__RME_X64_Timer_Init>
    __RME_X64_IOAPIC_Int_Enable(2,0);
ffffffff80225ddf:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225de4:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff80225de9:	e8 05 e9 ff ff       	call   ffffffff802246f3 <__RME_X64_IOAPIC_Int_Enable>
    /* Change page tables */
    RME_DBG_S("\r\nInit page table address:");
ffffffff80225dee:	48 c7 c7 8d 9d 22 80 	mov    $0xffffffff80229d8d,%rdi
ffffffff80225df5:	e8 11 6c fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_CAP_GETOBJ((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff80225dfa:	e8 40 5a fe ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80225dff:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80225e03:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80225e07:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80225e0b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225e0f:	48 89 c7             	mov    %rax,%rdi
ffffffff80225e12:	e8 32 6b fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    __RME_Pgt_Set(RME_CAP_GETOBJ((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff80225e17:	e8 23 5a fe ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80225e1c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80225e20:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80225e24:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80225e28:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225e2c:	48 89 c7             	mov    %rax,%rdi
ffffffff80225e2f:	e8 2b 0b 00 00       	call   ffffffff8022695f <__RME_Pgt_Set>

    /* Load the init process to address 0x20000000 - It should be smaller than 2MB */
    extern const unsigned char UVM_Init[];
    _RME_Memcpy((void*)0x20000000,(void*)UVM_Init,RME_POW2(RME_PGT_SIZE_2M));
ffffffff80225e34:	ba 00 00 20 00       	mov    $0x200000,%edx
ffffffff80225e39:	48 c7 c6 60 73 22 80 	mov    $0xffffffff80227360,%rsi
ffffffff80225e40:	bf 00 00 00 20       	mov    $0x20000000,%edi
ffffffff80225e45:	e8 80 70 fe ff       	call   ffffffff8020ceca <_RME_Memcpy>

    /* Now other non-booting processors may proceed and go into their threads */
    RME_X64_CPU_Cnt=0;
ffffffff80225e4a:	48 c7 05 5b d4 00 00 	movq   $0x0,0xd45b(%rip)        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff80225e51:	00 00 00 00 
    /* Boot into the init thread */
    __RME_Enter_User_Mode(0x20000000ULL, RME_X64_USTACK(0)+0x20000000ULL, 0);
ffffffff80225e55:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80225e5a:	be 00 08 20 20       	mov    $0x20200800,%esi
ffffffff80225e5f:	bf 00 00 00 20       	mov    $0x20000000,%edi
ffffffff80225e64:	e8 57 5a fe ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
    return 0;
ffffffff80225e69:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80225e6e:	c9                   	leave  
ffffffff80225e6f:	c3                   	ret    

ffffffff80225e70 <__RME_Reboot>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Reboot(void)
{
ffffffff80225e70:	f3 0f 1e fa          	endbr64 
ffffffff80225e74:	55                   	push   %rbp
ffffffff80225e75:	48 89 e5             	mov    %rsp,%rbp
    /* Currently we cannot parse th FADT yet. We need these info to shutdown the machine */
    /* outportb(FADT->ResetReg.Address, FADT->ResetValue); */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
}
ffffffff80225e78:	90                   	nop
ffffffff80225e79:	5d                   	pop    %rbp
ffffffff80225e7a:	c3                   	ret    

ffffffff80225e7b <__RME_Shutdown>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Shutdown(void)
{
ffffffff80225e7b:	f3 0f 1e fa          	endbr64 
ffffffff80225e7f:	55                   	push   %rbp
ffffffff80225e80:	48 89 e5             	mov    %rsp,%rbp
    /* Currently we cannot parse th DSDT yet. We need these info to shutdown the machine */
    /* outw(PM1a_CNT,SLP_TYPa|SLP_EN) */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
}
ffffffff80225e83:	90                   	nop
ffffffff80225e84:	5d                   	pop    %rbp
ffffffff80225e85:	c3                   	ret    

ffffffff80225e86 <__RME_Get_Syscall_Param>:
              rme_ptr_t* Capid - The capability ID number.
              rme_ptr_t* Param - The parameters.
Return      : None.
******************************************************************************/
void __RME_Get_Syscall_Param(struct RME_Reg_Struct* Reg, rme_ptr_t* Svc, rme_ptr_t* Capid, rme_ptr_t* Param)
{
ffffffff80225e86:	f3 0f 1e fa          	endbr64 
ffffffff80225e8a:	55                   	push   %rbp
ffffffff80225e8b:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225e8e:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80225e92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225e96:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80225e9a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80225e9e:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    *Svc=(Reg->RDI)>>32;
ffffffff80225ea2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ea6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80225eaa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80225eae:	48 89 c2             	mov    %rax,%rdx
ffffffff80225eb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225eb5:	48 89 10             	mov    %rdx,(%rax)
    *Capid=(Reg->RDI)&0xFFFFFFFF;
ffffffff80225eb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ebc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80225ec0:	89 c2                	mov    %eax,%edx
ffffffff80225ec2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80225ec6:	48 89 10             	mov    %rdx,(%rax)
    Param[0]=Reg->RSI;
ffffffff80225ec9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ecd:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff80225ed1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225ed5:	48 89 10             	mov    %rdx,(%rax)
    Param[1]=Reg->RDX;
ffffffff80225ed8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225edc:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80225ee0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ee4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225ee8:	48 89 02             	mov    %rax,(%rdx)
    Param[2]=Reg->R8;
ffffffff80225eeb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225eef:	48 8d 50 10          	lea    0x10(%rax),%rdx
ffffffff80225ef3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ef7:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80225efb:	48 89 02             	mov    %rax,(%rdx)
}
ffffffff80225efe:	90                   	nop
ffffffff80225eff:	c9                   	leave  
ffffffff80225f00:	c3                   	ret    

ffffffff80225f01 <__RME_Set_Syscall_Retval>:
Input       : rme_ret_t Retval - The return value.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Syscall_Retval(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
{
ffffffff80225f01:	f3 0f 1e fa          	endbr64 
ffffffff80225f05:	55                   	push   %rbp
ffffffff80225f06:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225f09:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225f0d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225f11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff80225f15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225f19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f1d:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff80225f20:	90                   	nop
ffffffff80225f21:	c9                   	leave  
ffffffff80225f22:	c3                   	ret    

ffffffff80225f23 <__RME_Thd_Reg_Init>:
              rme_ptr_t Param - The parameter to pass to it.
Output      : struct RME_Reg_Struct* Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Init(rme_ptr_t Attr,rme_ptr_t Entry, rme_ptr_t Stack, rme_ptr_t Param, struct RME_Reg_Struct* Reg)
{
ffffffff80225f23:	f3 0f 1e fa          	endbr64 
ffffffff80225f27:	55                   	push   %rbp
ffffffff80225f28:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225f2b:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80225f2f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225f33:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80225f37:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80225f3b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff80225f3f:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    /* We use the SYSRET path on creation if possible */
    Reg->INT_NUM=0x10000;
ffffffff80225f43:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225f47:	48 c7 40 78 00 00 01 	movq   $0x10000,0x78(%rax)
ffffffff80225f4e:	00 
    Reg->ERROR_CODE=0;
ffffffff80225f4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225f53:	48 c7 80 80 00 00 00 	movq   $0x0,0x80(%rax)
ffffffff80225f5a:	00 00 00 00 
    Reg->RIP=Entry;
ffffffff80225f5e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225f62:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225f66:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Reg->CS=RME_X64_SEG_USER_CODE;
ffffffff80225f6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225f71:	48 c7 80 90 00 00 00 	movq   $0x2b,0x90(%rax)
ffffffff80225f78:	2b 00 00 00 
    /* IOPL 3, IF */
    Reg->RFLAGS=0x3200;
ffffffff80225f7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225f80:	48 c7 80 98 00 00 00 	movq   $0x3200,0x98(%rax)
ffffffff80225f87:	00 32 00 00 
    Reg->RSP=Stack;
ffffffff80225f8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225f8f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80225f93:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
    Reg->SS=RME_X64_SEG_USER_DATA;
ffffffff80225f9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225f9e:	48 c7 80 a8 00 00 00 	movq   $0x23,0xa8(%rax)
ffffffff80225fa5:	23 00 00 00 
    /* Pass the parameter */
    Reg->RDI=Param;
ffffffff80225fa9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225fad:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80225fb1:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff80225fb5:	90                   	nop
ffffffff80225fb6:	c9                   	leave  
ffffffff80225fb7:	c3                   	ret    

ffffffff80225fb8 <__RME_Thd_Reg_Copy>:
Input       : struct RME_Reg_Struct* Src - The source register set.
Output      : struct RME_Reg_Struct* Dst - The destination register set.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Copy(struct RME_Reg_Struct* Dst, struct RME_Reg_Struct* Src)
{
ffffffff80225fb8:	f3 0f 1e fa          	endbr64 
ffffffff80225fbc:	55                   	push   %rbp
ffffffff80225fbd:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225fc0:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225fc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225fc8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Make sure that the ordering is the same so the compiler can optimize */
    Dst->RAX=Src->RAX;
ffffffff80225fcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225fd0:	48 8b 10             	mov    (%rax),%rdx
ffffffff80225fd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225fd7:	48 89 10             	mov    %rdx,(%rax)
    Dst->RBX=Src->RBX;
ffffffff80225fda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225fde:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80225fe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225fe6:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Dst->RCX=Src->RCX;
ffffffff80225fea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225fee:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80225ff2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ff6:	48 89 50 10          	mov    %rdx,0x10(%rax)
    Dst->RDX=Src->RDX;
ffffffff80225ffa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ffe:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff80226002:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226006:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Dst->RSI=Src->RSI;
ffffffff8022600a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022600e:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff80226012:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226016:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Dst->RDI=Src->RDI;
ffffffff8022601a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022601e:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80226022:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226026:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Dst->RBP=Src->RBP;
ffffffff8022602a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022602e:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80226032:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226036:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Dst->R8=Src->R8;
ffffffff8022603a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022603e:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff80226042:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226046:	48 89 50 38          	mov    %rdx,0x38(%rax)
    Dst->R9=Src->R9;
ffffffff8022604a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022604e:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80226052:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226056:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Dst->R10=Src->R10;
ffffffff8022605a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022605e:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff80226062:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226066:	48 89 50 48          	mov    %rdx,0x48(%rax)
    Dst->R11=Src->R11;
ffffffff8022606a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022606e:	48 8b 50 50          	mov    0x50(%rax),%rdx
ffffffff80226072:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226076:	48 89 50 50          	mov    %rdx,0x50(%rax)
    Dst->R12=Src->R12;
ffffffff8022607a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022607e:	48 8b 50 58          	mov    0x58(%rax),%rdx
ffffffff80226082:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226086:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Dst->R13=Src->R13;
ffffffff8022608a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022608e:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80226092:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226096:	48 89 50 60          	mov    %rdx,0x60(%rax)
    Dst->R14=Src->R14;
ffffffff8022609a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022609e:	48 8b 50 68          	mov    0x68(%rax),%rdx
ffffffff802260a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802260a6:	48 89 50 68          	mov    %rdx,0x68(%rax)
    Dst->R15=Src->R15;
ffffffff802260aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802260ae:	48 8b 50 70          	mov    0x70(%rax),%rdx
ffffffff802260b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802260b6:	48 89 50 70          	mov    %rdx,0x70(%rax)
    /* Don't worry about user modifying INTNUM. If he or she did that it will corrupt userspace */
    Dst->INT_NUM=Src->INT_NUM;
ffffffff802260ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802260be:	48 8b 50 78          	mov    0x78(%rax),%rdx
ffffffff802260c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802260c6:	48 89 50 78          	mov    %rdx,0x78(%rax)
    Dst->ERROR_CODE=Src->ERROR_CODE;
ffffffff802260ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802260ce:	48 8b 90 80 00 00 00 	mov    0x80(%rax),%rdx
ffffffff802260d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802260d9:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
    /* This will always be canonical upon SYSRET, because we will truncate in on return */
    Dst->RIP=Src->RIP;
ffffffff802260e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802260e4:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
ffffffff802260eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802260ef:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Dst->CS=Src->CS;
ffffffff802260f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802260fa:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
ffffffff80226101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226105:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    Dst->RFLAGS=Src->RFLAGS;
ffffffff8022610c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226110:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff80226117:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022611b:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
    Dst->RSP=Src->RSP;
ffffffff80226122:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226126:	48 8b 90 a0 00 00 00 	mov    0xa0(%rax),%rdx
ffffffff8022612d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226131:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
    Dst->SS=Src->SS;
ffffffff80226138:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022613c:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
ffffffff80226143:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226147:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
ffffffff8022614e:	90                   	nop
ffffffff8022614f:	c9                   	leave  
ffffffff80226150:	c3                   	ret    

ffffffff80226151 <__RME_Thd_Cop_Init>:
Input       : struct RME_Reg_Struct* Reg - The register struct to help initialize the coprocessor.
Output      : struct RME_Reg_Cop_Struct* Cop_Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Init(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80226151:	f3 0f 1e fa          	endbr64 
ffffffff80226155:	55                   	push   %rbp
ffffffff80226156:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226159:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022615d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226161:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Empty function, return immediately. The FPU contents is not predictable */
}
ffffffff80226165:	90                   	nop
ffffffff80226166:	c9                   	leave  
ffffffff80226167:	c3                   	ret    

ffffffff80226168 <__RME_Thd_Cop_Save>:
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Save(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80226168:	f3 0f 1e fa          	endbr64 
ffffffff8022616c:	55                   	push   %rbp
ffffffff8022616d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226170:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226174:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226178:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not used for now */
}
ffffffff8022617c:	90                   	nop
ffffffff8022617d:	c9                   	leave  
ffffffff8022617e:	c3                   	ret    

ffffffff8022617f <__RME_Thd_Cop_Restore>:
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Restore(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff8022617f:	f3 0f 1e fa          	endbr64 
ffffffff80226183:	55                   	push   %rbp
ffffffff80226184:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226187:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022618b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022618f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not used for now */
}
ffffffff80226193:	90                   	nop
ffffffff80226194:	c9                   	leave  
ffffffff80226195:	c3                   	ret    

ffffffff80226196 <__RME_Inv_Reg_Save>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Iret_Struct* Ret - The invocation return register context.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Save(struct RME_Iret_Struct* Ret, struct RME_Reg_Struct* Reg)
{
ffffffff80226196:	f3 0f 1e fa          	endbr64 
ffffffff8022619a:	55                   	push   %rbp
ffffffff8022619b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022619e:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802261a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802261a6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Ret->RIP=Reg->RIP;
ffffffff802261aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802261ae:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
ffffffff802261b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802261b9:	48 89 10             	mov    %rdx,(%rax)
    Ret->RSP=Reg->RSP;
ffffffff802261bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802261c0:	48 8b 90 a0 00 00 00 	mov    0xa0(%rax),%rdx
ffffffff802261c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802261cb:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff802261cf:	90                   	nop
ffffffff802261d0:	c9                   	leave  
ffffffff802261d1:	c3                   	ret    

ffffffff802261d2 <__RME_Inv_Reg_Restore>:
Input       : struct RME_Iret_Struct* Ret - The invocation return register context.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Restore(struct RME_Reg_Struct* Reg, struct RME_Iret_Struct* Ret)
{
ffffffff802261d2:	f3 0f 1e fa          	endbr64 
ffffffff802261d6:	55                   	push   %rbp
ffffffff802261d7:	48 89 e5             	mov    %rsp,%rbp
ffffffff802261da:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802261de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802261e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RIP=Ret->RIP;
ffffffff802261e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802261ea:	48 8b 10             	mov    (%rax),%rdx
ffffffff802261ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802261f1:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Reg->RSP=Ret->RSP;
ffffffff802261f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802261fc:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80226200:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226204:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
}
ffffffff8022620b:	90                   	nop
ffffffff8022620c:	c9                   	leave  
ffffffff8022620d:	c3                   	ret    

ffffffff8022620e <__RME_Set_Inv_Retval>:
Input       : rme_ret_t Retval - The return value.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Inv_Retval(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
{
ffffffff8022620e:	f3 0f 1e fa          	endbr64 
ffffffff80226212:	55                   	push   %rbp
ffffffff80226213:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226216:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022621a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022621e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff80226222:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80226226:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022622a:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff8022622e:	90                   	nop
ffffffff8022622f:	c9                   	leave  
ffffffff80226230:	c3                   	ret    

ffffffff80226231 <write_string>:
/* End Function:__RME_Set_Inv_Retval *****************************************/

/* Crap for test */
void write_string( int colour, const char *string, rme_ptr_t pos)
{
ffffffff80226231:	f3 0f 1e fa          	endbr64 
ffffffff80226235:	55                   	push   %rbp
ffffffff80226236:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226239:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8022623d:	89 7d ec             	mov    %edi,-0x14(%rbp)
ffffffff80226240:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80226244:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff80226248:	48 ba 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rdx
ffffffff8022624f:	80 ff ff 
ffffffff80226252:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226256:	48 01 d0             	add    %rdx,%rax
ffffffff80226259:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while( *string != 0 )
ffffffff8022625d:	eb 2e                	jmp    ffffffff8022628d <write_string+0x5c>
    {
        *video++ = *string++;
ffffffff8022625f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80226263:	48 8d 42 01          	lea    0x1(%rdx),%rax
ffffffff80226267:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8022626b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022626f:	48 8d 48 01          	lea    0x1(%rax),%rcx
ffffffff80226273:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff80226277:	0f b6 12             	movzbl (%rdx),%edx
ffffffff8022627a:	88 10                	mov    %dl,(%rax)
        *video++ = colour;
ffffffff8022627c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226280:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80226284:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80226288:	8b 55 ec             	mov    -0x14(%rbp),%edx
ffffffff8022628b:	88 10                	mov    %dl,(%rax)
    while( *string != 0 )
ffffffff8022628d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226291:	0f b6 00             	movzbl (%rax),%eax
ffffffff80226294:	84 c0                	test   %al,%al
ffffffff80226296:	75 c7                	jne    ffffffff8022625f <write_string+0x2e>
    }
}
ffffffff80226298:	90                   	nop
ffffffff80226299:	90                   	nop
ffffffff8022629a:	c9                   	leave  
ffffffff8022629b:	c3                   	ret    

ffffffff8022629c <NDBG>:

void NDBG(void)
{
ffffffff8022629c:	f3 0f 1e fa          	endbr64 
ffffffff802262a0:	55                   	push   %rbp
ffffffff802262a1:	48 89 e5             	mov    %rsp,%rbp
    write_string( 0x07, "Here", 0);
ffffffff802262a4:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802262a9:	48 c7 c6 a8 9d 22 80 	mov    $0xffffffff80229da8,%rsi
ffffffff802262b0:	bf 07 00 00 00       	mov    $0x7,%edi
ffffffff802262b5:	e8 77 ff ff ff       	call   ffffffff80226231 <write_string>
}
ffffffff802262ba:	90                   	nop
ffffffff802262bb:	5d                   	pop    %rbp
ffffffff802262bc:	c3                   	ret    

ffffffff802262bd <__RME_Kern_Func_Handler>:
Output      : None.
Return      : rme_ret_t - The value that the function returned.
******************************************************************************/
rme_ret_t __RME_Kern_Func_Handler(struct RME_Cap_Cpt* Cpt, struct RME_Reg_Struct* Reg,
                                  rme_ptr_t Func_ID, rme_ptr_t Sub_ID, rme_ptr_t Param1, rme_ptr_t Param2)
{
ffffffff802262bd:	f3 0f 1e fa          	endbr64 
ffffffff802262c1:	55                   	push   %rbp
ffffffff802262c2:	48 89 e5             	mov    %rsp,%rbp
ffffffff802262c5:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff802262c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff802262cd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff802262d1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff802262d5:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff802262d9:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff802262dd:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
    /* Now always call the HALT */
    char String[16];

    String[0]=Param1/10000000+'0';
ffffffff802262e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802262e5:	48 ba bd 42 7a e5 d5 	movabs $0xd6bf94d5e57a42bd,%rdx
ffffffff802262ec:	94 bf d6 
ffffffff802262ef:	48 f7 e2             	mul    %rdx
ffffffff802262f2:	48 89 d0             	mov    %rdx,%rax
ffffffff802262f5:	48 c1 e8 17          	shr    $0x17,%rax
ffffffff802262f9:	83 c0 30             	add    $0x30,%eax
ffffffff802262fc:	88 45 f0             	mov    %al,-0x10(%rbp)
    String[1]=(Param1/1000000)%10+'0';
ffffffff802262ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226303:	48 ba db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rdx
ffffffff8022630a:	de 1b 43 
ffffffff8022630d:	48 f7 e2             	mul    %rdx
ffffffff80226310:	48 89 d1             	mov    %rdx,%rcx
ffffffff80226313:	48 c1 e9 12          	shr    $0x12,%rcx
ffffffff80226317:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff8022631e:	cc cc cc 
ffffffff80226321:	48 89 c8             	mov    %rcx,%rax
ffffffff80226324:	48 f7 e2             	mul    %rdx
ffffffff80226327:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8022632b:	48 89 d0             	mov    %rdx,%rax
ffffffff8022632e:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80226332:	48 01 d0             	add    %rdx,%rax
ffffffff80226335:	48 01 c0             	add    %rax,%rax
ffffffff80226338:	48 29 c1             	sub    %rax,%rcx
ffffffff8022633b:	48 89 ca             	mov    %rcx,%rdx
ffffffff8022633e:	89 d0                	mov    %edx,%eax
ffffffff80226340:	83 c0 30             	add    $0x30,%eax
ffffffff80226343:	88 45 f1             	mov    %al,-0xf(%rbp)
    String[2]=(Param1/100000)%10+'0';
ffffffff80226346:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8022634a:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff8022634e:	48 ba 43 78 b4 71 c4 	movabs $0xa7c5ac471b47843,%rdx
ffffffff80226355:	5a 7c 0a 
ffffffff80226358:	48 f7 e2             	mul    %rdx
ffffffff8022635b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022635e:	48 c1 e9 07          	shr    $0x7,%rcx
ffffffff80226362:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226369:	cc cc cc 
ffffffff8022636c:	48 89 c8             	mov    %rcx,%rax
ffffffff8022636f:	48 f7 e2             	mul    %rdx
ffffffff80226372:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226376:	48 89 d0             	mov    %rdx,%rax
ffffffff80226379:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8022637d:	48 01 d0             	add    %rdx,%rax
ffffffff80226380:	48 01 c0             	add    %rax,%rax
ffffffff80226383:	48 29 c1             	sub    %rax,%rcx
ffffffff80226386:	48 89 ca             	mov    %rcx,%rdx
ffffffff80226389:	89 d0                	mov    %edx,%eax
ffffffff8022638b:	83 c0 30             	add    $0x30,%eax
ffffffff8022638e:	88 45 f2             	mov    %al,-0xe(%rbp)
    String[3]=(Param1/10000)%10+'0';
ffffffff80226391:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226395:	48 ba 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rdx
ffffffff8022639c:	c5 6d 34 
ffffffff8022639f:	48 f7 e2             	mul    %rdx
ffffffff802263a2:	48 89 d1             	mov    %rdx,%rcx
ffffffff802263a5:	48 c1 e9 0b          	shr    $0xb,%rcx
ffffffff802263a9:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802263b0:	cc cc cc 
ffffffff802263b3:	48 89 c8             	mov    %rcx,%rax
ffffffff802263b6:	48 f7 e2             	mul    %rdx
ffffffff802263b9:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff802263bd:	48 89 d0             	mov    %rdx,%rax
ffffffff802263c0:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff802263c4:	48 01 d0             	add    %rdx,%rax
ffffffff802263c7:	48 01 c0             	add    %rax,%rax
ffffffff802263ca:	48 29 c1             	sub    %rax,%rcx
ffffffff802263cd:	48 89 ca             	mov    %rcx,%rdx
ffffffff802263d0:	89 d0                	mov    %edx,%eax
ffffffff802263d2:	83 c0 30             	add    $0x30,%eax
ffffffff802263d5:	88 45 f3             	mov    %al,-0xd(%rbp)
    String[4]=(Param1/1000)%10+'0';
ffffffff802263d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802263dc:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff802263e0:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
ffffffff802263e7:	9b c4 20 
ffffffff802263ea:	48 f7 e2             	mul    %rdx
ffffffff802263ed:	48 89 d1             	mov    %rdx,%rcx
ffffffff802263f0:	48 c1 e9 04          	shr    $0x4,%rcx
ffffffff802263f4:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802263fb:	cc cc cc 
ffffffff802263fe:	48 89 c8             	mov    %rcx,%rax
ffffffff80226401:	48 f7 e2             	mul    %rdx
ffffffff80226404:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226408:	48 89 d0             	mov    %rdx,%rax
ffffffff8022640b:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8022640f:	48 01 d0             	add    %rdx,%rax
ffffffff80226412:	48 01 c0             	add    %rax,%rax
ffffffff80226415:	48 29 c1             	sub    %rax,%rcx
ffffffff80226418:	48 89 ca             	mov    %rcx,%rdx
ffffffff8022641b:	89 d0                	mov    %edx,%eax
ffffffff8022641d:	83 c0 30             	add    $0x30,%eax
ffffffff80226420:	88 45 f4             	mov    %al,-0xc(%rbp)
    String[5]=(Param1/100)%10+'0';
ffffffff80226423:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226427:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff8022642b:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
ffffffff80226432:	c2 f5 28 
ffffffff80226435:	48 f7 e2             	mul    %rdx
ffffffff80226438:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022643b:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff8022643f:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226446:	cc cc cc 
ffffffff80226449:	48 89 c8             	mov    %rcx,%rax
ffffffff8022644c:	48 f7 e2             	mul    %rdx
ffffffff8022644f:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226453:	48 89 d0             	mov    %rdx,%rax
ffffffff80226456:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8022645a:	48 01 d0             	add    %rdx,%rax
ffffffff8022645d:	48 01 c0             	add    %rax,%rax
ffffffff80226460:	48 29 c1             	sub    %rax,%rcx
ffffffff80226463:	48 89 ca             	mov    %rcx,%rdx
ffffffff80226466:	89 d0                	mov    %edx,%eax
ffffffff80226468:	83 c0 30             	add    $0x30,%eax
ffffffff8022646b:	88 45 f5             	mov    %al,-0xb(%rbp)
    String[6]=(Param1/10)%10+'0';
ffffffff8022646e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226472:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226479:	cc cc cc 
ffffffff8022647c:	48 f7 e2             	mul    %rdx
ffffffff8022647f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80226482:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff80226486:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff8022648d:	cc cc cc 
ffffffff80226490:	48 89 c8             	mov    %rcx,%rax
ffffffff80226493:	48 f7 e2             	mul    %rdx
ffffffff80226496:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8022649a:	48 89 d0             	mov    %rdx,%rax
ffffffff8022649d:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff802264a1:	48 01 d0             	add    %rdx,%rax
ffffffff802264a4:	48 01 c0             	add    %rax,%rax
ffffffff802264a7:	48 29 c1             	sub    %rax,%rcx
ffffffff802264aa:	48 89 ca             	mov    %rcx,%rdx
ffffffff802264ad:	89 d0                	mov    %edx,%eax
ffffffff802264af:	83 c0 30             	add    $0x30,%eax
ffffffff802264b2:	88 45 f6             	mov    %al,-0xa(%rbp)
    String[7]=(Param1)%10+'0';
ffffffff802264b5:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff802264b9:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802264c0:	cc cc cc 
ffffffff802264c3:	48 89 c8             	mov    %rcx,%rax
ffffffff802264c6:	48 f7 e2             	mul    %rdx
ffffffff802264c9:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff802264cd:	48 89 d0             	mov    %rdx,%rax
ffffffff802264d0:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff802264d4:	48 01 d0             	add    %rdx,%rax
ffffffff802264d7:	48 01 c0             	add    %rax,%rax
ffffffff802264da:	48 29 c1             	sub    %rax,%rcx
ffffffff802264dd:	48 89 ca             	mov    %rcx,%rdx
ffffffff802264e0:	89 d0                	mov    %edx,%eax
ffffffff802264e2:	83 c0 30             	add    $0x30,%eax
ffffffff802264e5:	88 45 f7             	mov    %al,-0x9(%rbp)
    String[8]='\0';
ffffffff802264e8:	c6 45 f8 00          	movb   $0x0,-0x8(%rbp)
    write_string(Func_ID, (const char *)String, Sub_ID);
ffffffff802264ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802264f0:	89 c1                	mov    %eax,%ecx
ffffffff802264f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802264f6:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
ffffffff802264fa:	48 89 c6             	mov    %rax,%rsi
ffffffff802264fd:	89 cf                	mov    %ecx,%edi
ffffffff802264ff:	e8 2d fd ff ff       	call   ffffffff80226231 <write_string>

    //__RME_X64_Halt();
    return 0;
ffffffff80226504:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226509:	c9                   	leave  
ffffffff8022650a:	c3                   	ret    

ffffffff8022650b <__RME_X64_Fault_Handler>:
              rme_ptr_t Reason - The fault source.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Fault_Handler(struct RME_Reg_Struct* Reg, rme_ptr_t Reason)
{
ffffffff8022650b:	f3 0f 1e fa          	endbr64 
ffffffff8022650f:	55                   	push   %rbp
ffffffff80226510:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226513:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226517:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022651b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not handling faults */
    RME_DBG_S("\n\r\n\r*** Fault: ");RME_DBG_I(Reason);RME_DBG_S(" - ");
ffffffff8022651f:	48 c7 c7 ad 9d 22 80 	mov    $0xffffffff80229dad,%rdi
ffffffff80226526:	e8 e0 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022652b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022652f:	48 89 c7             	mov    %rax,%rdi
ffffffff80226532:	e8 da 62 fe ff       	call   ffffffff8020c811 <RME_Int_Print>
ffffffff80226537:	48 c7 c7 bd 9d 22 80 	mov    $0xffffffff80229dbd,%rdi
ffffffff8022653e:	e8 c8 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    /* When handling debug exceptions, note CVE 2018-8897, we may get something at
     * kernel level - If this is what we have, the user must have touched SS + INT */
    /* Print reason */
    switch(Reason)
ffffffff80226543:	48 83 7d f0 14       	cmpq   $0x14,-0x10(%rbp)
ffffffff80226548:	0f 87 4d 01 00 00    	ja     ffffffff8022669b <__RME_X64_Fault_Handler+0x190>
ffffffff8022654e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226552:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80226556:	48 05 20 a1 22 80    	add    $0xffffffff8022a120,%rax
ffffffff8022655c:	48 8b 00             	mov    (%rax),%rax
ffffffff8022655f:	3e ff e0             	notrack jmp *%rax
    {
        case RME_X64_FAULT_DE:RME_DBG_S("Divide error");break;
ffffffff80226562:	48 c7 c7 c1 9d 22 80 	mov    $0xffffffff80229dc1,%rdi
ffffffff80226569:	e8 9d 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022656e:	e9 35 01 00 00       	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_TRAP_DB:RME_DBG_S("Debug exception");break;
ffffffff80226573:	48 c7 c7 ce 9d 22 80 	mov    $0xffffffff80229dce,%rdi
ffffffff8022657a:	e8 8c 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022657f:	e9 24 01 00 00       	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_INT_NMI:RME_DBG_S("NMI error");break;
ffffffff80226584:	48 c7 c7 de 9d 22 80 	mov    $0xffffffff80229dde,%rdi
ffffffff8022658b:	e8 7b 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226590:	e9 13 01 00 00       	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_TRAP_BP:RME_DBG_S("Debug breakpoint");break;
ffffffff80226595:	48 c7 c7 e8 9d 22 80 	mov    $0xffffffff80229de8,%rdi
ffffffff8022659c:	e8 6a 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265a1:	e9 02 01 00 00       	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_TRAP_OF:RME_DBG_S("Overflow exception");break;
ffffffff802265a6:	48 c7 c7 f9 9d 22 80 	mov    $0xffffffff80229df9,%rdi
ffffffff802265ad:	e8 59 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265b2:	e9 f1 00 00 00       	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_BR:RME_DBG_S("Bound range exception");break;
ffffffff802265b7:	48 c7 c7 0c 9e 22 80 	mov    $0xffffffff80229e0c,%rdi
ffffffff802265be:	e8 48 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265c3:	e9 e0 00 00 00       	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_UD:RME_DBG_S("Undefined instruction");break;
ffffffff802265c8:	48 c7 c7 22 9e 22 80 	mov    $0xffffffff80229e22,%rdi
ffffffff802265cf:	e8 37 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265d4:	e9 cf 00 00 00       	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_NM:RME_DBG_S("Device not available");break;
ffffffff802265d9:	48 c7 c7 38 9e 22 80 	mov    $0xffffffff80229e38,%rdi
ffffffff802265e0:	e8 26 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265e5:	e9 be 00 00 00       	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_ABORT_DF:RME_DBG_S("Double(nested) fault exception");break;
ffffffff802265ea:	48 c7 c7 50 9e 22 80 	mov    $0xffffffff80229e50,%rdi
ffffffff802265f1:	e8 15 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265f6:	e9 ad 00 00 00       	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_ABORT_OLD_MF:RME_DBG_S("Coprocessor overrun - not used later on");break;
ffffffff802265fb:	48 c7 c7 70 9e 22 80 	mov    $0xffffffff80229e70,%rdi
ffffffff80226602:	e8 04 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226607:	e9 9c 00 00 00       	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_TS:RME_DBG_S("Invalid TSS exception");break;
ffffffff8022660c:	48 c7 c7 98 9e 22 80 	mov    $0xffffffff80229e98,%rdi
ffffffff80226613:	e8 f3 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226618:	e9 8b 00 00 00       	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_NP:RME_DBG_S("Segment not present");break;
ffffffff8022661d:	48 c7 c7 ae 9e 22 80 	mov    $0xffffffff80229eae,%rdi
ffffffff80226624:	e8 e2 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226629:	eb 7d                	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_SS:RME_DBG_S("Stack fault exception");break;
ffffffff8022662b:	48 c7 c7 c2 9e 22 80 	mov    $0xffffffff80229ec2,%rdi
ffffffff80226632:	e8 d4 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226637:	eb 6f                	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_GP:RME_DBG_S("General protection exception");break;
ffffffff80226639:	48 c7 c7 d8 9e 22 80 	mov    $0xffffffff80229ed8,%rdi
ffffffff80226640:	e8 c6 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226645:	eb 61                	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_PF:RME_DBG_S("Page fault exception");break;
ffffffff80226647:	48 c7 c7 f5 9e 22 80 	mov    $0xffffffff80229ef5,%rdi
ffffffff8022664e:	e8 b8 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226653:	eb 53                	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_MF:RME_DBG_S("X87 FPU floating-point error:");break;
ffffffff80226655:	48 c7 c7 0a 9f 22 80 	mov    $0xffffffff80229f0a,%rdi
ffffffff8022665c:	e8 aa 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226661:	eb 45                	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_AC:RME_DBG_S("Alignment check exception");break;
ffffffff80226663:	48 c7 c7 28 9f 22 80 	mov    $0xffffffff80229f28,%rdi
ffffffff8022666a:	e8 9c 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022666f:	eb 37                	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_ABORT_MC:RME_DBG_S("Machine check exception");break;
ffffffff80226671:	48 c7 c7 42 9f 22 80 	mov    $0xffffffff80229f42,%rdi
ffffffff80226678:	e8 8e 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022667d:	eb 29                	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_XM:RME_DBG_S("SIMD floating-point exception");break;
ffffffff8022667f:	48 c7 c7 5a 9f 22 80 	mov    $0xffffffff80229f5a,%rdi
ffffffff80226686:	e8 80 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022668b:	eb 1b                	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_VE:RME_DBG_S("Virtualization exception");break;
ffffffff8022668d:	48 c7 c7 78 9f 22 80 	mov    $0xffffffff80229f78,%rdi
ffffffff80226694:	e8 72 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226699:	eb 0d                	jmp    ffffffff802266a8 <__RME_X64_Fault_Handler+0x19d>
        default:RME_DBG_S("Unknown exception");break;
ffffffff8022669b:	48 c7 c7 91 9f 22 80 	mov    $0xffffffff80229f91,%rdi
ffffffff802266a2:	e8 64 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802266a7:	90                   	nop
    }
    /* Print all registers */
    RME_DBG_S("\n\rRAX:        0x");RME_DBG_H(Reg->RAX);
ffffffff802266a8:	48 c7 c7 a3 9f 22 80 	mov    $0xffffffff80229fa3,%rdi
ffffffff802266af:	e8 57 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802266b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266b8:	48 8b 00             	mov    (%rax),%rax
ffffffff802266bb:	48 89 c7             	mov    %rax,%rdi
ffffffff802266be:	e8 86 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRBX:        0x");RME_DBG_H(Reg->RBX);
ffffffff802266c3:	48 c7 c7 b4 9f 22 80 	mov    $0xffffffff80229fb4,%rdi
ffffffff802266ca:	e8 3c 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802266cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266d3:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802266d7:	48 89 c7             	mov    %rax,%rdi
ffffffff802266da:	e8 6a 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRCX:        0x");RME_DBG_H(Reg->RCX);
ffffffff802266df:	48 c7 c7 c5 9f 22 80 	mov    $0xffffffff80229fc5,%rdi
ffffffff802266e6:	e8 20 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802266eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266ef:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802266f3:	48 89 c7             	mov    %rax,%rdi
ffffffff802266f6:	e8 4e 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRDX:        0x");RME_DBG_H(Reg->RDX);
ffffffff802266fb:	48 c7 c7 d6 9f 22 80 	mov    $0xffffffff80229fd6,%rdi
ffffffff80226702:	e8 04 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226707:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022670b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8022670f:	48 89 c7             	mov    %rax,%rdi
ffffffff80226712:	e8 32 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRSI:        0x");RME_DBG_H(Reg->RSI);
ffffffff80226717:	48 c7 c7 e7 9f 22 80 	mov    $0xffffffff80229fe7,%rdi
ffffffff8022671e:	e8 e8 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226723:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226727:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8022672b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022672e:	e8 16 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRDI:        0x");RME_DBG_H(Reg->RDI);
ffffffff80226733:	48 c7 c7 f8 9f 22 80 	mov    $0xffffffff80229ff8,%rdi
ffffffff8022673a:	e8 cc 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022673f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226743:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226747:	48 89 c7             	mov    %rax,%rdi
ffffffff8022674a:	e8 fa 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRBP:        0x");RME_DBG_H(Reg->RBP);
ffffffff8022674f:	48 c7 c7 09 a0 22 80 	mov    $0xffffffff8022a009,%rdi
ffffffff80226756:	e8 b0 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022675b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022675f:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226763:	48 89 c7             	mov    %rax,%rdi
ffffffff80226766:	e8 de 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR8:         0x");RME_DBG_H(Reg->R8);
ffffffff8022676b:	48 c7 c7 1a a0 22 80 	mov    $0xffffffff8022a01a,%rdi
ffffffff80226772:	e8 94 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226777:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022677b:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff8022677f:	48 89 c7             	mov    %rax,%rdi
ffffffff80226782:	e8 c2 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR9:         0x");RME_DBG_H(Reg->R9);
ffffffff80226787:	48 c7 c7 2b a0 22 80 	mov    $0xffffffff8022a02b,%rdi
ffffffff8022678e:	e8 78 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226793:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226797:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff8022679b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022679e:	e8 a6 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR10:        0x");RME_DBG_H(Reg->R10);
ffffffff802267a3:	48 c7 c7 3c a0 22 80 	mov    $0xffffffff8022a03c,%rdi
ffffffff802267aa:	e8 5c 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802267af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802267b3:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff802267b7:	48 89 c7             	mov    %rax,%rdi
ffffffff802267ba:	e8 8a 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR11:        0x");RME_DBG_H(Reg->R11);
ffffffff802267bf:	48 c7 c7 4d a0 22 80 	mov    $0xffffffff8022a04d,%rdi
ffffffff802267c6:	e8 40 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802267cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802267cf:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff802267d3:	48 89 c7             	mov    %rax,%rdi
ffffffff802267d6:	e8 6e 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR12:        0x");RME_DBG_H(Reg->R12);
ffffffff802267db:	48 c7 c7 5e a0 22 80 	mov    $0xffffffff8022a05e,%rdi
ffffffff802267e2:	e8 24 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802267e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802267eb:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff802267ef:	48 89 c7             	mov    %rax,%rdi
ffffffff802267f2:	e8 52 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR13:        0x");RME_DBG_H(Reg->R13);
ffffffff802267f7:	48 c7 c7 6f a0 22 80 	mov    $0xffffffff8022a06f,%rdi
ffffffff802267fe:	e8 08 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226803:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226807:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff8022680b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022680e:	e8 36 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR14:        0x");RME_DBG_H(Reg->R14);
ffffffff80226813:	48 c7 c7 80 a0 22 80 	mov    $0xffffffff8022a080,%rdi
ffffffff8022681a:	e8 ec 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022681f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226823:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80226827:	48 89 c7             	mov    %rax,%rdi
ffffffff8022682a:	e8 1a 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR15:        0x");RME_DBG_H(Reg->R15);
ffffffff8022682f:	48 c7 c7 91 a0 22 80 	mov    $0xffffffff8022a091,%rdi
ffffffff80226836:	e8 d0 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022683b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022683f:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80226843:	48 89 c7             	mov    %rax,%rdi
ffffffff80226846:	e8 fe 60 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rINT_NUM:    0x");RME_DBG_H(Reg->INT_NUM);
ffffffff8022684b:	48 c7 c7 a2 a0 22 80 	mov    $0xffffffff8022a0a2,%rdi
ffffffff80226852:	e8 b4 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226857:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022685b:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff8022685f:	48 89 c7             	mov    %rax,%rdi
ffffffff80226862:	e8 e2 60 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rERROR_CODE: 0x");RME_DBG_H(Reg->ERROR_CODE);
ffffffff80226867:	48 c7 c7 b3 a0 22 80 	mov    $0xffffffff8022a0b3,%rdi
ffffffff8022686e:	e8 98 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226873:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226877:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff8022687e:	48 89 c7             	mov    %rax,%rdi
ffffffff80226881:	e8 c3 60 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRIP:        0x");RME_DBG_H(Reg->RIP);
ffffffff80226886:	48 c7 c7 c4 a0 22 80 	mov    $0xffffffff8022a0c4,%rdi
ffffffff8022688d:	e8 79 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226892:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226896:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff8022689d:	48 89 c7             	mov    %rax,%rdi
ffffffff802268a0:	e8 a4 60 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rCS:         0x");RME_DBG_H(Reg->CS);
ffffffff802268a5:	48 c7 c7 d5 a0 22 80 	mov    $0xffffffff8022a0d5,%rdi
ffffffff802268ac:	e8 5a 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802268b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802268b5:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff802268bc:	48 89 c7             	mov    %rax,%rdi
ffffffff802268bf:	e8 85 60 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRFLAGS:     0x");RME_DBG_H(Reg->RFLAGS);
ffffffff802268c4:	48 c7 c7 e6 a0 22 80 	mov    $0xffffffff8022a0e6,%rdi
ffffffff802268cb:	e8 3b 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802268d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802268d4:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff802268db:	48 89 c7             	mov    %rax,%rdi
ffffffff802268de:	e8 66 60 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRSP:        0x");RME_DBG_H(Reg->RSP);
ffffffff802268e3:	48 c7 c7 f7 a0 22 80 	mov    $0xffffffff8022a0f7,%rdi
ffffffff802268ea:	e8 1c 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802268ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802268f3:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax
ffffffff802268fa:	48 89 c7             	mov    %rax,%rdi
ffffffff802268fd:	e8 47 60 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rSS:         0x");RME_DBG_H(Reg->SS);
ffffffff80226902:	48 c7 c7 08 a1 22 80 	mov    $0xffffffff8022a108,%rdi
ffffffff80226909:	e8 fd 60 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022690e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226912:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff80226919:	48 89 c7             	mov    %rax,%rdi
ffffffff8022691c:	e8 28 60 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rHang");
ffffffff80226921:	48 c7 c7 19 a1 22 80 	mov    $0xffffffff8022a119,%rdi
ffffffff80226928:	e8 de 60 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>

    while(1);
ffffffff8022692d:	eb fe                	jmp    ffffffff8022692d <__RME_X64_Fault_Handler+0x422>

ffffffff8022692f <__RME_X64_Generic_Handler>:
              rme_ptr_t Int_Num - The interrupt number.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Generic_Handler(struct RME_Reg_Struct* Reg, rme_ptr_t Int_Num)
{
ffffffff8022692f:	f3 0f 1e fa          	endbr64 
ffffffff80226933:	55                   	push   %rbp
ffffffff80226934:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226937:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022693b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022693f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not handling interrupts */
    RME_DBG_S("\r\nGeneral int:");
ffffffff80226943:	48 c7 c7 c8 a1 22 80 	mov    $0xffffffff8022a1c8,%rdi
ffffffff8022694a:	e8 bc 60 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(Int_Num);
ffffffff8022694f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226953:	48 89 c7             	mov    %rax,%rdi
ffffffff80226956:	e8 b6 5e fe ff       	call   ffffffff8020c811 <RME_Int_Print>

    switch(Int_Num)
    {
        /* Is this a generic IPI from other processors? */

        default:break;
ffffffff8022695b:	90                   	nop
    }
    /* Remember to perform context switch after any kernel sends */
}
ffffffff8022695c:	90                   	nop
ffffffff8022695d:	c9                   	leave  
ffffffff8022695e:	c3                   	ret    

ffffffff8022695f <__RME_Pgt_Set>:
Input       : rme_ptr_t Pgt - The virtual address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgt_Set(rme_ptr_t Pgt)
{
ffffffff8022695f:	f3 0f 1e fa          	endbr64 
ffffffff80226963:	55                   	push   %rbp
ffffffff80226964:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226967:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022696b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff8022696f:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80226976:	80 00 00 
ffffffff80226979:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022697d:	48 01 d0             	add    %rdx,%rax
ffffffff80226980:	48 89 c7             	mov    %rax,%rdi
ffffffff80226983:	e8 21 4f fe ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
}
ffffffff80226988:	90                   	nop
ffffffff80226989:	c9                   	leave  
ffffffff8022698a:	c3                   	ret    

ffffffff8022698b <__RME_Pgt_Check>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Check(rme_ptr_t Base_Addr, rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order, rme_ptr_t Num_Order, rme_ptr_t Vaddr)
{
ffffffff8022698b:	f3 0f 1e fa          	endbr64 
ffffffff8022698f:	55                   	push   %rbp
ffffffff80226990:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226993:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80226997:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022699b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8022699f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff802269a3:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff802269a7:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    /* Is the table address aligned to 4kB? */
    if((Vaddr&0xFFF)!=0)
ffffffff802269ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802269af:	25 ff 0f 00 00       	and    $0xfff,%eax
ffffffff802269b4:	48 85 c0             	test   %rax,%rax
ffffffff802269b7:	74 09                	je     ffffffff802269c2 <__RME_Pgt_Check+0x37>
        return RME_ERR_HAL_FAIL;
ffffffff802269b9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802269c0:	eb 59                	jmp    ffffffff80226a1b <__RME_Pgt_Check+0x90>

    /* Is the size order allowed? */
    if((Size_Order!=RME_PGT_SIZE_512G)&&(Size_Order!=RME_PGT_SIZE_1G)&&
ffffffff802269c2:	48 83 7d e8 27       	cmpq   $0x27,-0x18(%rbp)
ffffffff802269c7:	74 1e                	je     ffffffff802269e7 <__RME_Pgt_Check+0x5c>
ffffffff802269c9:	48 83 7d e8 1e       	cmpq   $0x1e,-0x18(%rbp)
ffffffff802269ce:	74 17                	je     ffffffff802269e7 <__RME_Pgt_Check+0x5c>
ffffffff802269d0:	48 83 7d e8 15       	cmpq   $0x15,-0x18(%rbp)
ffffffff802269d5:	74 10                	je     ffffffff802269e7 <__RME_Pgt_Check+0x5c>
       (Size_Order!=RME_PGT_SIZE_2M)&&(Size_Order!=RME_PGT_SIZE_4K))
ffffffff802269d7:	48 83 7d e8 0c       	cmpq   $0xc,-0x18(%rbp)
ffffffff802269dc:	74 09                	je     ffffffff802269e7 <__RME_Pgt_Check+0x5c>
        return RME_ERR_HAL_FAIL;
ffffffff802269de:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802269e5:	eb 34                	jmp    ffffffff80226a1b <__RME_Pgt_Check+0x90>

    /* Is the top-level relationship correct? */
    if(((Size_Order==RME_PGT_SIZE_512G)^(Is_Top!=0))!=0)
ffffffff802269e7:	48 83 7d e8 27       	cmpq   $0x27,-0x18(%rbp)
ffffffff802269ec:	0f 94 c2             	sete   %dl
ffffffff802269ef:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff802269f4:	0f 95 c0             	setne  %al
ffffffff802269f7:	31 d0                	xor    %edx,%eax
ffffffff802269f9:	84 c0                	test   %al,%al
ffffffff802269fb:	74 09                	je     ffffffff80226a06 <__RME_Pgt_Check+0x7b>
        return RME_ERR_HAL_FAIL;
ffffffff802269fd:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226a04:	eb 15                	jmp    ffffffff80226a1b <__RME_Pgt_Check+0x90>

    /* Is the number order allowed? */
    if(Num_Order!=RME_PGT_NUM_512)
ffffffff80226a06:	48 83 7d e0 09       	cmpq   $0x9,-0x20(%rbp)
ffffffff80226a0b:	74 09                	je     ffffffff80226a16 <__RME_Pgt_Check+0x8b>
        return RME_ERR_HAL_FAIL;
ffffffff80226a0d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226a14:	eb 05                	jmp    ffffffff80226a1b <__RME_Pgt_Check+0x90>

    return 0;
ffffffff80226a16:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226a1b:	c9                   	leave  
ffffffff80226a1c:	c3                   	ret    

ffffffff80226a1d <__RME_Pgt_Init>:
Input       : struct RME_Cap_Pgt* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Init(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff80226a1d:	f3 0f 1e fa          	endbr64 
ffffffff80226a21:	55                   	push   %rbp
ffffffff80226a22:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226a25:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80226a29:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_cnt_t Count;
    rme_ptr_t* Ptr;
    
    /* Get the actual table */
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226a2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226a31:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226a35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Hopefully the compiler optimize this to rep stos */
    for(Count=0;Count<256;Count++)
ffffffff80226a39:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80226a40:	00 
ffffffff80226a41:	eb 1f                	jmp    ffffffff80226a62 <__RME_Pgt_Init+0x45>
        Ptr[Count]=0;
ffffffff80226a43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226a47:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226a4e:	00 
ffffffff80226a4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226a53:	48 01 d0             	add    %rdx,%rax
ffffffff80226a56:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0;Count<256;Count++)
ffffffff80226a5d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80226a62:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff80226a69:	00 
ffffffff80226a6a:	7e d7                	jle    ffffffff80226a43 <__RME_Pgt_Init+0x26>

    /* Hopefully the compiler optimize this to rep movs */
    if((Pgt_Op->Base&RME_PGT_TOP)!=0)
ffffffff80226a6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226a70:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226a74:	83 e0 01             	and    $0x1,%eax
ffffffff80226a77:	48 85 c0             	test   %rax,%rax
ffffffff80226a7a:	74 62                	je     ffffffff80226ade <__RME_Pgt_Init+0xc1>
    {
        for(;Count<512;Count++)
ffffffff80226a7c:	eb 35                	jmp    ffffffff80226ab3 <__RME_Pgt_Init+0x96>
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff80226a7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226a82:	48 8d 88 00 ff ff ff 	lea    -0x100(%rax),%rcx
ffffffff80226a89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226a8d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226a94:	00 
ffffffff80226a95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226a99:	48 01 c2             	add    %rax,%rdx
ffffffff80226a9c:	48 8d 81 00 01 00 00 	lea    0x100(%rcx),%rax
ffffffff80226aa3:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80226aaa:	80 
ffffffff80226aab:	48 89 02             	mov    %rax,(%rdx)
        for(;Count<512;Count++)
ffffffff80226aae:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80226ab3:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
ffffffff80226aba:	00 
ffffffff80226abb:	7e c1                	jle    ffffffff80226a7e <__RME_Pgt_Init+0x61>
ffffffff80226abd:	eb 29                	jmp    ffffffff80226ae8 <__RME_Pgt_Init+0xcb>
    }
    else
    {
        for(;Count<512;Count++)
            Ptr[Count]=0;
ffffffff80226abf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226ac3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226aca:	00 
ffffffff80226acb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226acf:	48 01 d0             	add    %rdx,%rax
ffffffff80226ad2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        for(;Count<512;Count++)
ffffffff80226ad9:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80226ade:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
ffffffff80226ae5:	00 
ffffffff80226ae6:	7e d7                	jle    ffffffff80226abf <__RME_Pgt_Init+0xa2>
    }

    return 0;
ffffffff80226ae8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226aed:	c9                   	leave  
ffffffff80226aee:	c3                   	ret    

ffffffff80226aef <__RME_Pgt_Del_Check>:
Input       : struct RME_Cap_Pgt Pgt_Op* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If can be deleted, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Del_Check(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff80226aef:	f3 0f 1e fa          	endbr64 
ffffffff80226af3:	55                   	push   %rbp
ffffffff80226af4:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226af7:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80226afb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

    return 0;
ffffffff80226aff:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226b04:	c9                   	leave  
ffffffff80226b05:	c3                   	ret    

ffffffff80226b06 <__RME_Pgt_Page_Map>:
                                architecture specific page table's settings.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Map(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Paddr, rme_ptr_t Pos, rme_ptr_t Flags)
{
ffffffff80226b06:	f3 0f 1e fa          	endbr64 
ffffffff80226b0a:	55                   	push   %rbp
ffffffff80226b0b:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226b0e:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80226b12:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226b16:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80226b1a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80226b1e:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff80226b22:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226b26:	83 e0 01             	and    $0x1,%eax
ffffffff80226b29:	48 85 c0             	test   %rax,%rax
ffffffff80226b2c:	75 0c                	jne    ffffffff80226b3a <__RME_Pgt_Page_Map+0x34>
        return RME_ERR_HAL_FAIL;
ffffffff80226b2e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226b35:	e9 d5 00 00 00       	jmp    ffffffff80226c0f <__RME_Pgt_Page_Map+0x109>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226b3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226b3e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226b42:	83 e0 01             	and    $0x1,%eax
ffffffff80226b45:	48 85 c0             	test   %rax,%rax
ffffffff80226b48:	74 16                	je     ffffffff80226b60 <__RME_Pgt_Page_Map+0x5a>
ffffffff80226b4a:	48 81 7d d8 ff 00 00 	cmpq   $0xff,-0x28(%rbp)
ffffffff80226b51:	00 
ffffffff80226b52:	76 0c                	jbe    ffffffff80226b60 <__RME_Pgt_Page_Map+0x5a>
        return RME_ERR_HAL_FAIL;
ffffffff80226b54:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226b5b:	e9 af 00 00 00       	jmp    ffffffff80226c0f <__RME_Pgt_Page_Map+0x109>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226b60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226b64:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226b68:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Generate flags */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff80226b6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226b70:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226b74:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226b78:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226b7c:	75 2d                	jne    ffffffff80226bab <__RME_Pgt_Page_Map+0xa5>
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff80226b7e:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226b85:	ff 0f 00 
ffffffff80226b88:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff80226b8c:	48 89 c2             	mov    %rax,%rdx
ffffffff80226b8f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226b93:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff80226b96:	48 8b 04 c5 a0 96 22 	mov    -0x7fdd6960(,%rax,8),%rax
ffffffff80226b9d:	80 
ffffffff80226b9e:	48 09 d0             	or     %rdx,%rax
ffffffff80226ba1:	48 83 c8 04          	or     $0x4,%rax
ffffffff80226ba5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80226ba9:	eb 29                	jmp    ffffffff80226bd4 <__RME_Pgt_Page_Map+0xce>
    else
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;
ffffffff80226bab:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226bb2:	ff 0f 00 
ffffffff80226bb5:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff80226bb9:	48 89 c2             	mov    %rax,%rdx
ffffffff80226bbc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226bc0:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff80226bc3:	48 8b 04 c5 a0 96 22 	mov    -0x7fdd6960(,%rax,8),%rax
ffffffff80226bca:	80 
ffffffff80226bcb:	48 09 d0             	or     %rdx,%rax
ffffffff80226bce:	0c 84                	or     $0x84,%al
ffffffff80226bd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Try to map it in */
    if(RME_COMP_SWAP(&(Table[Pos]),0,X64_Flags)==0)
ffffffff80226bd4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226bd8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226bdf:	00 
ffffffff80226be0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226be4:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226be8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226bec:	48 89 c2             	mov    %rax,%rdx
ffffffff80226bef:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80226bf4:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226bf7:	e8 e4 45 ff ff       	call   ffffffff8021b1e0 <_RME_X64_Comp_Swap>
ffffffff80226bfc:	48 85 c0             	test   %rax,%rax
ffffffff80226bff:	75 09                	jne    ffffffff80226c0a <__RME_Pgt_Page_Map+0x104>
        return RME_ERR_HAL_FAIL;
ffffffff80226c01:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226c08:	eb 05                	jmp    ffffffff80226c0f <__RME_Pgt_Page_Map+0x109>

    return 0;
ffffffff80226c0a:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226c0f:	c9                   	leave  
ffffffff80226c10:	c3                   	ret    

ffffffff80226c11 <__RME_Pgt_Page_Unmap>:
              rme_ptr_t Pos - The position in the page table.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Unmap(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos)
{
ffffffff80226c11:	f3 0f 1e fa          	endbr64 
ffffffff80226c15:	55                   	push   %rbp
ffffffff80226c16:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226c19:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80226c1d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226c21:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226c25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226c29:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226c2d:	83 e0 01             	and    $0x1,%eax
ffffffff80226c30:	48 85 c0             	test   %rax,%rax
ffffffff80226c33:	74 16                	je     ffffffff80226c4b <__RME_Pgt_Page_Unmap+0x3a>
ffffffff80226c35:	48 81 7d e0 ff 00 00 	cmpq   $0xff,-0x20(%rbp)
ffffffff80226c3c:	00 
ffffffff80226c3d:	76 0c                	jbe    ffffffff80226c4b <__RME_Pgt_Page_Unmap+0x3a>
        return RME_ERR_HAL_FAIL;
ffffffff80226c3f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226c46:	e9 9a 00 00 00       	jmp    ffffffff80226ce5 <__RME_Pgt_Page_Unmap+0xd4>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226c4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226c4f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226c53:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Make sure that there is something */
    Temp=Table[Pos];
ffffffff80226c57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226c5b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226c62:	00 
ffffffff80226c63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226c67:	48 01 d0             	add    %rdx,%rax
ffffffff80226c6a:	48 8b 00             	mov    (%rax),%rax
ffffffff80226c6d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Temp==0)
ffffffff80226c71:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226c76:	75 09                	jne    ffffffff80226c81 <__RME_Pgt_Page_Unmap+0x70>
        return RME_ERR_HAL_FAIL;
ffffffff80226c78:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226c7f:	eb 64                	jmp    ffffffff80226ce5 <__RME_Pgt_Page_Unmap+0xd4>

    /* Is this a page directory? We cannot unmap page directories like this */
    if((RME_PGT_SIZEORD(Pgt_Op->Order)!=RME_PGT_SIZE_4K)&&((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff80226c81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226c85:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226c89:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226c8d:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226c91:	74 17                	je     ffffffff80226caa <__RME_Pgt_Page_Unmap+0x99>
ffffffff80226c93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226c97:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226c9c:	48 85 c0             	test   %rax,%rax
ffffffff80226c9f:	75 09                	jne    ffffffff80226caa <__RME_Pgt_Page_Unmap+0x99>
        return RME_ERR_HAL_FAIL;
ffffffff80226ca1:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226ca8:	eb 3b                	jmp    ffffffff80226ce5 <__RME_Pgt_Page_Unmap+0xd4>

    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Table[Pos]),Temp,0)==0)
ffffffff80226caa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226cae:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226cb5:	00 
ffffffff80226cb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226cba:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226cbe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226cc2:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80226cc7:	48 89 c6             	mov    %rax,%rsi
ffffffff80226cca:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226ccd:	e8 0e 45 ff ff       	call   ffffffff8021b1e0 <_RME_X64_Comp_Swap>
ffffffff80226cd2:	48 85 c0             	test   %rax,%rax
ffffffff80226cd5:	75 09                	jne    ffffffff80226ce0 <__RME_Pgt_Page_Unmap+0xcf>
        return RME_ERR_HAL_FAIL;
ffffffff80226cd7:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226cde:	eb 05                	jmp    ffffffff80226ce5 <__RME_Pgt_Page_Unmap+0xd4>

    return 0;
ffffffff80226ce0:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226ce5:	c9                   	leave  
ffffffff80226ce6:	c3                   	ret    

ffffffff80226ce7 <__RME_Pgt_Pgdir_Map>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Map(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                struct RME_Cap_Pgt* Pgt_Child, rme_ptr_t Flags)
{
ffffffff80226ce7:	f3 0f 1e fa          	endbr64 
ffffffff80226ceb:	55                   	push   %rbp
ffffffff80226cec:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226cef:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80226cf3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80226cf7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80226cfb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80226cff:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff80226d03:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226d07:	83 e0 01             	and    $0x1,%eax
ffffffff80226d0a:	48 85 c0             	test   %rax,%rax
ffffffff80226d0d:	75 0c                	jne    ffffffff80226d1b <__RME_Pgt_Pgdir_Map+0x34>
        return RME_ERR_HAL_FAIL;
ffffffff80226d0f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226d16:	e9 b1 00 00 00       	jmp    ffffffff80226dcc <__RME_Pgt_Pgdir_Map+0xe5>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226d1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226d1f:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226d23:	83 e0 01             	and    $0x1,%eax
ffffffff80226d26:	48 85 c0             	test   %rax,%rax
ffffffff80226d29:	74 16                	je     ffffffff80226d41 <__RME_Pgt_Pgdir_Map+0x5a>
ffffffff80226d2b:	48 81 7d d0 ff 00 00 	cmpq   $0xff,-0x30(%rbp)
ffffffff80226d32:	00 
ffffffff80226d33:	76 0c                	jbe    ffffffff80226d41 <__RME_Pgt_Pgdir_Map+0x5a>
        return RME_ERR_HAL_FAIL;
ffffffff80226d35:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226d3c:	e9 8b 00 00 00       	jmp    ffffffff80226dcc <__RME_Pgt_Pgdir_Map+0xe5>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
ffffffff80226d41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226d45:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226d49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Child_Table=RME_CAP_GETOBJ(Pgt_Child,rme_ptr_t*);
ffffffff80226d4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226d51:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226d55:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff80226d59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226d5d:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80226d64:	80 00 00 
ffffffff80226d67:	48 01 c2             	add    %rax,%rdx
ffffffff80226d6a:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226d71:	ff 0f 00 
ffffffff80226d74:	48 21 c2             	and    %rax,%rdx
ffffffff80226d77:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226d7b:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff80226d7e:	48 8b 04 c5 a0 96 22 	mov    -0x7fdd6960(,%rax,8),%rax
ffffffff80226d85:	80 
ffffffff80226d86:	48 09 d0             	or     %rdx,%rax
ffffffff80226d89:	48 83 c8 04          	or     $0x4,%rax
ffffffff80226d8d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    /* Try to map it in - may need to increase some count */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff80226d91:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226d95:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226d9c:	00 
ffffffff80226d9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226da1:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226da5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226da9:	48 89 c2             	mov    %rax,%rdx
ffffffff80226dac:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80226db1:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226db4:	e8 27 44 ff ff       	call   ffffffff8021b1e0 <_RME_X64_Comp_Swap>
ffffffff80226db9:	48 85 c0             	test   %rax,%rax
ffffffff80226dbc:	75 09                	jne    ffffffff80226dc7 <__RME_Pgt_Pgdir_Map+0xe0>
        return RME_ERR_HAL_FAIL;
ffffffff80226dbe:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226dc5:	eb 05                	jmp    ffffffff80226dcc <__RME_Pgt_Pgdir_Map+0xe5>

    return 0;
ffffffff80226dc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226dcc:	c9                   	leave  
ffffffff80226dcd:	c3                   	ret    

ffffffff80226dce <__RME_Pgt_Pgdir_Unmap>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Unmap(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                  struct RME_Cap_Pgt* Pgt_Child)
{
ffffffff80226dce:	f3 0f 1e fa          	endbr64 
ffffffff80226dd2:	55                   	push   %rbp
ffffffff80226dd3:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226dd6:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80226dda:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80226dde:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80226de2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226de6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226dea:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226dee:	83 e0 01             	and    $0x1,%eax
ffffffff80226df1:	48 85 c0             	test   %rax,%rax
ffffffff80226df4:	74 16                	je     ffffffff80226e0c <__RME_Pgt_Pgdir_Unmap+0x3e>
ffffffff80226df6:	48 81 7d d0 ff 00 00 	cmpq   $0xff,-0x30(%rbp)
ffffffff80226dfd:	00 
ffffffff80226dfe:	76 0c                	jbe    ffffffff80226e0c <__RME_Pgt_Pgdir_Unmap+0x3e>
        return RME_ERR_HAL_FAIL;
ffffffff80226e00:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226e07:	e9 c4 00 00 00       	jmp    ffffffff80226ed0 <__RME_Pgt_Pgdir_Unmap+0x102>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
ffffffff80226e0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226e10:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226e14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Make sure that there is something */
    Temp=Parent_Table[Pos];
ffffffff80226e18:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226e1c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226e23:	00 
ffffffff80226e24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226e28:	48 01 d0             	add    %rdx,%rax
ffffffff80226e2b:	48 8b 00             	mov    (%rax),%rax
ffffffff80226e2e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Temp==0)
ffffffff80226e32:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226e37:	75 0c                	jne    ffffffff80226e45 <__RME_Pgt_Pgdir_Unmap+0x77>
        return RME_ERR_HAL_FAIL;
ffffffff80226e39:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226e40:	e9 8b 00 00 00       	jmp    ffffffff80226ed0 <__RME_Pgt_Pgdir_Unmap+0x102>

    /* Is this a page? We cannot unmap pages like this */
    if((RME_PGT_SIZEORD(Pgt_Parent->Order)==RME_PGT_SIZE_4K)||((Temp&RME_X64_MMU_PDE_SUP)!=0))
ffffffff80226e45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226e49:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226e4d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226e51:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226e55:	74 0e                	je     ffffffff80226e65 <__RME_Pgt_Pgdir_Unmap+0x97>
ffffffff80226e57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226e5b:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226e60:	48 85 c0             	test   %rax,%rax
ffffffff80226e63:	74 09                	je     ffffffff80226e6e <__RME_Pgt_Pgdir_Unmap+0xa0>
        return RME_ERR_HAL_FAIL;
ffffffff80226e65:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226e6c:	eb 62                	jmp    ffffffff80226ed0 <__RME_Pgt_Pgdir_Unmap+0x102>

    /* Is this child table mapped here? - check that in the future */

    Child_Table=(rme_ptr_t*)Temp;
ffffffff80226e6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226e72:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    rme_ptr_t* Expected_Child_Table = RME_CAP_GETOBJ(Pgt_Child, rme_ptr_t*);
ffffffff80226e76:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226e7a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226e7e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (Child_Table != Expected_Child_Table)
ffffffff80226e82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226e86:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80226e8a:	74 09                	je     ffffffff80226e95 <__RME_Pgt_Pgdir_Unmap+0xc7>
        return RME_ERR_HAL_FAIL;
ffffffff80226e8c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226e93:	eb 3b                	jmp    ffffffff80226ed0 <__RME_Pgt_Pgdir_Unmap+0x102>
    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),Temp,0)==0)
ffffffff80226e95:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226e99:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226ea0:	00 
ffffffff80226ea1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226ea5:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226ea9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226ead:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80226eb2:	48 89 c6             	mov    %rax,%rsi
ffffffff80226eb5:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226eb8:	e8 23 43 ff ff       	call   ffffffff8021b1e0 <_RME_X64_Comp_Swap>
ffffffff80226ebd:	48 85 c0             	test   %rax,%rax
ffffffff80226ec0:	75 09                	jne    ffffffff80226ecb <__RME_Pgt_Pgdir_Unmap+0xfd>
        return RME_ERR_HAL_FAIL;
ffffffff80226ec2:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226ec9:	eb 05                	jmp    ffffffff80226ed0 <__RME_Pgt_Pgdir_Unmap+0x102>

    return 0;
ffffffff80226ecb:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226ed0:	c9                   	leave  
ffffffff80226ed1:	c3                   	ret    

ffffffff80226ed2 <__RME_Pgt_Lookup>:
Output      : rme_ptr_t* Paddr - The physical address of the page.
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Lookup(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos, rme_ptr_t* Paddr, rme_ptr_t* Flags)
{
ffffffff80226ed2:	f3 0f 1e fa          	endbr64 
ffffffff80226ed6:	55                   	push   %rbp
ffffffff80226ed7:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226eda:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80226ede:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226ee2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80226ee6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80226eea:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Check if the position is within the range of this page table */
    if((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0)
ffffffff80226eee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226ef2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226ef6:	89 c2                	mov    %eax,%edx
ffffffff80226ef8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226efc:	89 d1                	mov    %edx,%ecx
ffffffff80226efe:	48 d3 e8             	shr    %cl,%rax
ffffffff80226f01:	48 85 c0             	test   %rax,%rax
ffffffff80226f04:	74 0c                	je     ffffffff80226f12 <__RME_Pgt_Lookup+0x40>
        return RME_ERR_HAL_FAIL;
ffffffff80226f06:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226f0d:	e9 d8 00 00 00       	jmp    ffffffff80226fea <__RME_Pgt_Lookup+0x118>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226f12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226f16:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226f1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Get the position requested - atomic read */
    Temp=Table[Pos];
ffffffff80226f1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226f22:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226f29:	00 
ffffffff80226f2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226f2e:	48 01 d0             	add    %rdx,%rax
ffffffff80226f31:	48 8b 00             	mov    (%rax),%rax
ffffffff80226f34:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Start lookup - is this a terminal page, or? */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff80226f38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226f3c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226f40:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226f44:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226f48:	75 18                	jne    ffffffff80226f62 <__RME_Pgt_Lookup+0x90>
    {
        if((Temp&RME_X64_MMU_P)==0)
ffffffff80226f4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226f4e:	83 e0 01             	and    $0x1,%eax
ffffffff80226f51:	48 85 c0             	test   %rax,%rax
ffffffff80226f54:	75 2f                	jne    ffffffff80226f85 <__RME_Pgt_Lookup+0xb3>
            return RME_ERR_HAL_FAIL;
ffffffff80226f56:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226f5d:	e9 88 00 00 00       	jmp    ffffffff80226fea <__RME_Pgt_Lookup+0x118>
    }
    else
    {
        if(((Temp&RME_X64_MMU_P)==0)||((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff80226f62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226f66:	83 e0 01             	and    $0x1,%eax
ffffffff80226f69:	48 85 c0             	test   %rax,%rax
ffffffff80226f6c:	74 0e                	je     ffffffff80226f7c <__RME_Pgt_Lookup+0xaa>
ffffffff80226f6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226f72:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226f77:	48 85 c0             	test   %rax,%rax
ffffffff80226f7a:	75 09                	jne    ffffffff80226f85 <__RME_Pgt_Lookup+0xb3>
            return RME_ERR_HAL_FAIL;
ffffffff80226f7c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226f83:	eb 65                	jmp    ffffffff80226fea <__RME_Pgt_Lookup+0x118>
    }

    /* This is a page. Return the physical address and flags */
    if(Paddr!=0)
ffffffff80226f85:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80226f8a:	74 18                	je     ffffffff80226fa4 <__RME_Pgt_Lookup+0xd2>
        *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff80226f8c:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226f93:	ff 0f 00 
ffffffff80226f96:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80226f9a:	48 89 c2             	mov    %rax,%rdx
ffffffff80226f9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226fa1:	48 89 10             	mov    %rdx,(%rax)

    if(Flags!=0)
ffffffff80226fa4:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80226fa9:	74 3a                	je     ffffffff80226fe5 <__RME_Pgt_Lookup+0x113>
        *Flags=RME_X64_PGFLG_NAT2RME(Temp);
ffffffff80226fab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226faf:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff80226fb3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226fba:	00 
ffffffff80226fbb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226fbf:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80226fc3:	83 e0 06             	and    $0x6,%eax
ffffffff80226fc6:	48 09 c2             	or     %rax,%rdx
ffffffff80226fc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226fcd:	48 d1 e8             	shr    %rax
ffffffff80226fd0:	83 e0 01             	and    $0x1,%eax
ffffffff80226fd3:	48 09 d0             	or     %rdx,%rax
ffffffff80226fd6:	48 8b 14 c5 a0 97 22 	mov    -0x7fdd6860(,%rax,8),%rdx
ffffffff80226fdd:	80 
ffffffff80226fde:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226fe2:	48 89 10             	mov    %rdx,(%rax)

    return 0;
ffffffff80226fe5:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226fea:	c9                   	leave  
ffffffff80226feb:	c3                   	ret    

ffffffff80226fec <__RME_Pgt_Walk>:
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Walk(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Vaddr, rme_ptr_t* Pgt,
                           rme_ptr_t* Map_Vaddr, rme_ptr_t* Paddr, rme_ptr_t* Size_Order, rme_ptr_t* Num_Order, rme_ptr_t* Flags)
{
ffffffff80226fec:	f3 0f 1e fa          	endbr64 
ffffffff80226ff0:	55                   	push   %rbp
ffffffff80226ff1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226ff4:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80226ff8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80226ffc:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80227000:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80227004:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80227008:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff8022700c:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Flags_Accum;
    /* No execute bit - this bit is ORed */
    rme_ptr_t No_Execute;

    /* Check if this is the top-level page table */
    if(((Pgt_Op->Base)&RME_PGT_TOP)==0)
ffffffff80227010:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80227014:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80227018:	83 e0 01             	and    $0x1,%eax
ffffffff8022701b:	48 85 c0             	test   %rax,%rax
ffffffff8022701e:	75 0c                	jne    ffffffff8022702c <__RME_Pgt_Walk+0x40>
        return RME_ERR_HAL_FAIL;
ffffffff80227020:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80227027:	e9 c8 01 00 00       	jmp    ffffffff802271f4 <__RME_Pgt_Walk+0x208>

    /* Are we attempting a kernel or non-canonical lookup? If yes, stop immediately */
    if(Vaddr>=0x7FFFFFFFFFFFULL)
ffffffff8022702c:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffe,%rax
ffffffff80227033:	7f 00 00 
ffffffff80227036:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
ffffffff8022703a:	76 0c                	jbe    ffffffff80227048 <__RME_Pgt_Walk+0x5c>
        return RME_ERR_HAL_FAIL;
ffffffff8022703c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80227043:	e9 ac 01 00 00       	jmp    ffffffff802271f4 <__RME_Pgt_Walk+0x208>

    /* Get the table and start lookup */
    Table=RME_CAP_GETOBJ(Pgt_Op, rme_ptr_t*);
ffffffff80227048:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8022704c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80227050:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Do lookup recursively */
    Size_Cnt=RME_PGT_SIZE_512G;
ffffffff80227054:	48 c7 45 f0 27 00 00 	movq   $0x27,-0x10(%rbp)
ffffffff8022705b:	00 
    Flags_Accum=0xFFF;
ffffffff8022705c:	48 c7 45 e8 ff 0f 00 	movq   $0xfff,-0x18(%rbp)
ffffffff80227063:	00 
    No_Execute=0;
ffffffff80227064:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8022706b:	00 
    while(1)
    {
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8022706c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80227070:	89 c2                	mov    %eax,%edx
ffffffff80227072:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80227076:	89 d1                	mov    %edx,%ecx
ffffffff80227078:	48 d3 e8             	shr    %cl,%rax
ffffffff8022707b:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80227080:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        /* Atomic read */
        Temp=Table[Pos];
ffffffff80227084:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80227088:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8022708f:	00 
ffffffff80227090:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227094:	48 01 d0             	add    %rdx,%rax
ffffffff80227097:	48 8b 00             	mov    (%rax),%rax
ffffffff8022709a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8022709e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802270a2:	83 e0 01             	and    $0x1,%eax
ffffffff802270a5:	48 85 c0             	test   %rax,%rax
ffffffff802270a8:	75 0c                	jne    ffffffff802270b6 <__RME_Pgt_Walk+0xca>
            return RME_ERR_HAL_FAIL;
ffffffff802270aa:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802270b1:	e9 3e 01 00 00       	jmp    ffffffff802271f4 <__RME_Pgt_Walk+0x208>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff802270b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802270ba:	25 80 00 00 00       	and    $0x80,%eax
ffffffff802270bf:	48 85 c0             	test   %rax,%rax
ffffffff802270c2:	75 0b                	jne    ffffffff802270cf <__RME_Pgt_Walk+0xe3>
ffffffff802270c4:	48 83 7d f0 0c       	cmpq   $0xc,-0x10(%rbp)
ffffffff802270c9:	0f 85 dc 00 00 00    	jne    ffffffff802271ab <__RME_Pgt_Walk+0x1bf>
        {
            /* This is a page - we found it */
            if(Pgt!=0)
ffffffff802270cf:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff802270d4:	74 0b                	je     ffffffff802270e1 <__RME_Pgt_Walk+0xf5>
                *Pgt=(rme_ptr_t)Table;
ffffffff802270d6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802270da:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802270de:	48 89 10             	mov    %rdx,(%rax)
            if(Map_Vaddr!=0)
ffffffff802270e1:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff802270e6:	74 21                	je     ffffffff80227109 <__RME_Pgt_Walk+0x11d>
                *Map_Vaddr=RME_ROUND_DOWN(Vaddr,Size_Cnt);
ffffffff802270e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802270ec:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802270f3:	89 c1                	mov    %eax,%ecx
ffffffff802270f5:	48 d3 e2             	shl    %cl,%rdx
ffffffff802270f8:	48 89 d0             	mov    %rdx,%rax
ffffffff802270fb:	48 23 45 c0          	and    -0x40(%rbp),%rax
ffffffff802270ff:	48 89 c2             	mov    %rax,%rdx
ffffffff80227102:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80227106:	48 89 10             	mov    %rdx,(%rax)
            if(Paddr!=0)
ffffffff80227109:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
ffffffff8022710e:	74 18                	je     ffffffff80227128 <__RME_Pgt_Walk+0x13c>
                *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff80227110:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80227117:	ff 0f 00 
ffffffff8022711a:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff8022711e:	48 89 c2             	mov    %rax,%rdx
ffffffff80227121:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80227125:	48 89 10             	mov    %rdx,(%rax)
            if(Size_Order!=0)
ffffffff80227128:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
ffffffff8022712d:	74 0b                	je     ffffffff8022713a <__RME_Pgt_Walk+0x14e>
                *Size_Order=Size_Cnt;
ffffffff8022712f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80227133:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80227137:	48 89 10             	mov    %rdx,(%rax)
            if(Num_Order!=0)
ffffffff8022713a:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff8022713f:	74 0b                	je     ffffffff8022714c <__RME_Pgt_Walk+0x160>
                *Num_Order=RME_PGT_NUM_512;
ffffffff80227141:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80227145:	48 c7 00 09 00 00 00 	movq   $0x9,(%rax)
            if(Flags!=0)
ffffffff8022714c:	48 83 7d 18 00       	cmpq   $0x0,0x18(%rbp)
ffffffff80227151:	0f 84 97 00 00 00    	je     ffffffff802271ee <__RME_Pgt_Walk+0x202>
                *Flags=RME_X64_PGFLG_NAT2RME(No_Execute|(Temp&Flags_Accum));
ffffffff80227157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8022715b:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff8022715f:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff80227163:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff80227167:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8022716e:	00 
ffffffff8022716f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80227173:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80227177:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff8022717b:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff8022717f:	83 e0 06             	and    $0x6,%eax
ffffffff80227182:	48 09 c2             	or     %rax,%rdx
ffffffff80227185:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80227189:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff8022718d:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff80227191:	48 d1 e8             	shr    %rax
ffffffff80227194:	83 e0 01             	and    $0x1,%eax
ffffffff80227197:	48 09 d0             	or     %rdx,%rax
ffffffff8022719a:	48 8b 14 c5 a0 97 22 	mov    -0x7fdd6860(,%rax,8),%rdx
ffffffff802271a1:	80 
ffffffff802271a2:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff802271a6:	48 89 10             	mov    %rdx,(%rax)

            break;
ffffffff802271a9:	eb 43                	jmp    ffffffff802271ee <__RME_Pgt_Walk+0x202>
        }
        else
        {
            /* This is a directory, we goto that directory to continue walking */
            Flags_Accum&=Temp;
ffffffff802271ab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802271af:	48 21 45 e8          	and    %rax,-0x18(%rbp)
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff802271b3:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
ffffffff802271ba:	00 00 80 
ffffffff802271bd:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff802271c1:	48 09 45 e0          	or     %rax,-0x20(%rbp)
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff802271c5:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff802271cc:	ff 0f 00 
ffffffff802271cf:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff802271d3:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff802271da:	80 ff ff 
ffffffff802271dd:	48 01 d0             	add    %rdx,%rax
ffffffff802271e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        }

        /* The size order always decreases by 512 */
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff802271e4:	48 83 6d f0 09       	subq   $0x9,-0x10(%rbp)
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff802271e9:	e9 7e fe ff ff       	jmp    ffffffff8022706c <__RME_Pgt_Walk+0x80>
            break;
ffffffff802271ee:	90                   	nop
    }

    return 0;
ffffffff802271ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802271f4:	c9                   	leave  
ffffffff802271f5:	c3                   	ret    

ffffffff802271f6 <__RME_Svc_Param_Get>:

/*Function:__RME_Svc_Param_Get*/

void __RME_Svc_Param_Get(struct RME_Reg_Struct* Reg,rme_ptr_t* Svc,rme_ptr_t* Cid,rme_ptr_t* Param)
{
ffffffff802271f6:	f3 0f 1e fa          	endbr64 
ffffffff802271fa:	55                   	push   %rbp
ffffffff802271fb:	48 89 e5             	mov    %rsp,%rbp
ffffffff802271fe:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80227202:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80227206:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8022720a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8022720e:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    *Svc=(Reg->RDI)>>32;
ffffffff80227212:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227216:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8022721a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022721e:	48 89 c2             	mov    %rax,%rdx
ffffffff80227221:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80227225:	48 89 10             	mov    %rdx,(%rax)
    *Cid=(Reg->RDI)&0xFFFFFFFF;
ffffffff80227228:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022722c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80227230:	89 c2                	mov    %eax,%edx
ffffffff80227232:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80227236:	48 89 10             	mov    %rdx,(%rax)
    Param[0]=Reg->RSI;
ffffffff80227239:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022723d:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff80227241:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80227245:	48 89 10             	mov    %rdx,(%rax)
    Param[1]=Reg->RDX;
ffffffff80227248:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022724c:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80227250:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227254:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80227258:	48 89 02             	mov    %rax,(%rdx)
    Param[2]=Reg->R8;
ffffffff8022725b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022725f:	48 8d 50 10          	lea    0x10(%rax),%rdx
ffffffff80227263:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227267:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff8022726b:	48 89 02             	mov    %rax,(%rdx)
}
ffffffff8022726e:	90                   	nop
ffffffff8022726f:	c9                   	leave  
ffffffff80227270:	c3                   	ret    

ffffffff80227271 <__RME_Svc_Retval_Set>:
/*End Function:__RME_Svc_Param_Get*/

/*Function:__RME_Svc_Retval_Set*/

void __RME_Svc_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff80227271:	f3 0f 1e fa          	endbr64 
ffffffff80227275:	55                   	push   %rbp
ffffffff80227276:	48 89 e5             	mov    %rsp,%rbp
ffffffff80227279:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022727d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80227281:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff80227285:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80227289:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022728d:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff80227290:	90                   	nop
ffffffff80227291:	c9                   	leave  
ffffffff80227292:	c3                   	ret    

ffffffff80227293 <__RME_Inv_Retval_Set>:

/*End Function:__RME_Svc_Retval_Set*/

void __RME_Inv_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff80227293:	f3 0f 1e fa          	endbr64 
ffffffff80227297:	55                   	push   %rbp
ffffffff80227298:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022729b:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022729f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802272a3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff802272a7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802272ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802272af:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff802272b3:	90                   	nop
ffffffff802272b4:	c9                   	leave  
ffffffff802272b5:	c3                   	ret    

ffffffff802272b6 <__RME_List_Crt>:

void __RME_List_Crt(volatile struct RME_List* Head)
{
ffffffff802272b6:	f3 0f 1e fa          	endbr64 
ffffffff802272ba:	55                   	push   %rbp
ffffffff802272bb:	48 89 e5             	mov    %rsp,%rbp
ffffffff802272be:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff802272c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    Head->Next=Head;
ffffffff802272c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802272ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802272ce:	48 89 10             	mov    %rdx,(%rax)
    Head->Prev=Head;
ffffffff802272d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802272d5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802272d9:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff802272dd:	90                   	nop
ffffffff802272de:	c9                   	leave  
ffffffff802272df:	c3                   	ret    

ffffffff802272e0 <__RME_List_Ins>:

void __RME_List_Ins(volatile struct RME_List* New,volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
ffffffff802272e0:	f3 0f 1e fa          	endbr64 
ffffffff802272e4:	55                   	push   %rbp
ffffffff802272e5:	48 89 e5             	mov    %rsp,%rbp
ffffffff802272e8:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff802272ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802272f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff802272f4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    New->Prev=Prev;
ffffffff802272f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802272fc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80227300:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=New;
ffffffff80227304:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80227308:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022730c:	48 89 10             	mov    %rdx,(%rax)
    New->Next=Next;
ffffffff8022730f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227313:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80227317:	48 89 10             	mov    %rdx,(%rax)
    Next->Prev=New;
ffffffff8022731a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022731e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80227322:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff80227326:	90                   	nop
ffffffff80227327:	c9                   	leave  
ffffffff80227328:	c3                   	ret    

ffffffff80227329 <__RME_List_Del>:

void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
ffffffff80227329:	f3 0f 1e fa          	endbr64 
ffffffff8022732d:	55                   	push   %rbp
ffffffff8022732e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80227331:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80227335:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80227339:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Prev->Next = Next;
ffffffff8022733d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227341:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80227345:	48 89 10             	mov    %rdx,(%rax)
    Next->Prev = Prev;
ffffffff80227348:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022734c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80227350:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff80227354:	90                   	nop
ffffffff80227355:	c9                   	leave  
ffffffff80227356:	c3                   	ret    
