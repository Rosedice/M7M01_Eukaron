
./Object/RME：     文件格式 elf64-x86-64


Disassembly of section .text:

ffffffff80100000 <__RME_X64_Mboot_Header>:
ffffffff80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
ffffffff80100006:	01 00                	add    %eax,(%rax)
ffffffff80100008:	fe 4f 51             	decb   0x51(%rdi)
ffffffff8010000b:	e4 00                	in     $0x0,%al
ffffffff8010000d:	00 10                	add    %dl,(%rax)
ffffffff8010000f:	00 00                	add    %al,(%rax)
ffffffff80100011:	00 10                	add    %dl,(%rax)
ffffffff80100013:	00 00                	add    %al,(%rax)
ffffffff80100015:	70 23                	jo     ffffffff8010003a <__RME_X64_Mboot_Header+0x3a>
ffffffff80100017:	00 58 07             	add    %bl,0x7(%rax)
ffffffff8010001a:	24 00                	and    $0x0,%al
ffffffff8010001c:	00 80 10 00 e9 db    	add    %al,-0x2416fff0(%rax)
ffffffff80100022:	0f 00 00             	sldt   (%rax)
ffffffff80100025:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010002c:	00 00 00 00 
ffffffff80100030:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100037:	00 00 00 00 
ffffffff8010003b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100042:	00 00 00 00 
ffffffff80100046:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010004d:	00 00 00 00 
ffffffff80100051:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100058:	00 00 00 00 
ffffffff8010005c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100063:	00 00 00 00 
ffffffff80100067:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010006e:	00 00 00 00 
ffffffff80100072:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100079:	00 00 00 00 
ffffffff8010007d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100084:	00 00 00 00 
ffffffff80100088:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010008f:	00 00 00 00 
ffffffff80100093:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010009a:	00 00 00 00 
ffffffff8010009e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000a5:	00 00 00 00 
ffffffff801000a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000b0:	00 00 00 00 
ffffffff801000b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000bb:	00 00 00 00 
ffffffff801000bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000c6:	00 00 00 00 
ffffffff801000ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000d1:	00 00 00 00 
ffffffff801000d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000dc:	00 00 00 00 
ffffffff801000e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000e7:	00 00 00 00 
ffffffff801000eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000f2:	00 00 00 00 
ffffffff801000f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000fd:	00 00 00 00 
ffffffff80100101:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100108:	00 00 00 00 
ffffffff8010010c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100113:	00 00 00 00 
ffffffff80100117:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010011e:	00 00 00 00 
ffffffff80100122:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100129:	00 00 00 00 
ffffffff8010012d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100134:	00 00 00 00 
ffffffff80100138:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010013f:	00 00 00 00 
ffffffff80100143:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010014a:	00 00 00 00 
ffffffff8010014e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100155:	00 00 00 00 
ffffffff80100159:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100160:	00 00 00 00 
ffffffff80100164:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010016b:	00 00 00 00 
ffffffff8010016f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100176:	00 00 00 00 
ffffffff8010017a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100181:	00 00 00 00 
ffffffff80100185:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010018c:	00 00 00 00 
ffffffff80100190:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100197:	00 00 00 00 
ffffffff8010019b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001a2:	00 00 00 00 
ffffffff801001a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ad:	00 00 00 00 
ffffffff801001b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001b8:	00 00 00 00 
ffffffff801001bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001c3:	00 00 00 00 
ffffffff801001c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ce:	00 00 00 00 
ffffffff801001d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001d9:	00 00 00 00 
ffffffff801001dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001e4:	00 00 00 00 
ffffffff801001e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ef:	00 00 00 00 
ffffffff801001f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001fa:	00 00 00 00 
ffffffff801001fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100205:	00 00 00 00 
ffffffff80100209:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100210:	00 00 00 00 
ffffffff80100214:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010021b:	00 00 00 00 
ffffffff8010021f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100226:	00 00 00 00 
ffffffff8010022a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100231:	00 00 00 00 
ffffffff80100235:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010023c:	00 00 00 00 
ffffffff80100240:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100247:	00 00 00 00 
ffffffff8010024b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100252:	00 00 00 00 
ffffffff80100256:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010025d:	00 00 00 00 
ffffffff80100261:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100268:	00 00 00 00 
ffffffff8010026c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100273:	00 00 00 00 
ffffffff80100277:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010027e:	00 00 00 00 
ffffffff80100282:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100289:	00 00 00 00 
ffffffff8010028d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100294:	00 00 00 00 
ffffffff80100298:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010029f:	00 00 00 00 
ffffffff801002a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002aa:	00 00 00 00 
ffffffff801002ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002b5:	00 00 00 00 
ffffffff801002b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002c0:	00 00 00 00 
ffffffff801002c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002cb:	00 00 00 00 
ffffffff801002cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002d6:	00 00 00 00 
ffffffff801002da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002e1:	00 00 00 00 
ffffffff801002e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ec:	00 00 00 00 
ffffffff801002f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002f7:	00 00 00 00 
ffffffff801002fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100302:	00 00 00 00 
ffffffff80100306:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010030d:	00 00 00 00 
ffffffff80100311:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100318:	00 00 00 00 
ffffffff8010031c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100323:	00 00 00 00 
ffffffff80100327:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010032e:	00 00 00 00 
ffffffff80100332:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100339:	00 00 00 00 
ffffffff8010033d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100344:	00 00 00 00 
ffffffff80100348:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010034f:	00 00 00 00 
ffffffff80100353:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010035a:	00 00 00 00 
ffffffff8010035e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100365:	00 00 00 00 
ffffffff80100369:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100370:	00 00 00 00 
ffffffff80100374:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010037b:	00 00 00 00 
ffffffff8010037f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100386:	00 00 00 00 
ffffffff8010038a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100391:	00 00 00 00 
ffffffff80100395:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010039c:	00 00 00 00 
ffffffff801003a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003a7:	00 00 00 00 
ffffffff801003ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003b2:	00 00 00 00 
ffffffff801003b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003bd:	00 00 00 00 
ffffffff801003c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003c8:	00 00 00 00 
ffffffff801003cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003d3:	00 00 00 00 
ffffffff801003d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003de:	00 00 00 00 
ffffffff801003e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003e9:	00 00 00 00 
ffffffff801003ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003f4:	00 00 00 00 
ffffffff801003f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003ff:	00 00 00 00 
ffffffff80100403:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010040a:	00 00 00 00 
ffffffff8010040e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100415:	00 00 00 00 
ffffffff80100419:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100420:	00 00 00 00 
ffffffff80100424:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010042b:	00 00 00 00 
ffffffff8010042f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100436:	00 00 00 00 
ffffffff8010043a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100441:	00 00 00 00 
ffffffff80100445:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010044c:	00 00 00 00 
ffffffff80100450:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100457:	00 00 00 00 
ffffffff8010045b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100462:	00 00 00 00 
ffffffff80100466:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010046d:	00 00 00 00 
ffffffff80100471:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100478:	00 00 00 00 
ffffffff8010047c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100483:	00 00 00 00 
ffffffff80100487:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010048e:	00 00 00 00 
ffffffff80100492:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100499:	00 00 00 00 
ffffffff8010049d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004a4:	00 00 00 00 
ffffffff801004a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004af:	00 00 00 00 
ffffffff801004b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004ba:	00 00 00 00 
ffffffff801004be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004c5:	00 00 00 00 
ffffffff801004c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004d0:	00 00 00 00 
ffffffff801004d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004db:	00 00 00 00 
ffffffff801004df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004e6:	00 00 00 00 
ffffffff801004ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004f1:	00 00 00 00 
ffffffff801004f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004fc:	00 00 00 00 
ffffffff80100500:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100507:	00 00 00 00 
ffffffff8010050b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100512:	00 00 00 00 
ffffffff80100516:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010051d:	00 00 00 00 
ffffffff80100521:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100528:	00 00 00 00 
ffffffff8010052c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100533:	00 00 00 00 
ffffffff80100537:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010053e:	00 00 00 00 
ffffffff80100542:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100549:	00 00 00 00 
ffffffff8010054d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100554:	00 00 00 00 
ffffffff80100558:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010055f:	00 00 00 00 
ffffffff80100563:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010056a:	00 00 00 00 
ffffffff8010056e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100575:	00 00 00 00 
ffffffff80100579:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100580:	00 00 00 00 
ffffffff80100584:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010058b:	00 00 00 00 
ffffffff8010058f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100596:	00 00 00 00 
ffffffff8010059a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005a1:	00 00 00 00 
ffffffff801005a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ac:	00 00 00 00 
ffffffff801005b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005b7:	00 00 00 00 
ffffffff801005bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005c2:	00 00 00 00 
ffffffff801005c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005cd:	00 00 00 00 
ffffffff801005d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005d8:	00 00 00 00 
ffffffff801005dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005e3:	00 00 00 00 
ffffffff801005e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ee:	00 00 00 00 
ffffffff801005f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005f9:	00 00 00 00 
ffffffff801005fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100604:	00 00 00 00 
ffffffff80100608:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010060f:	00 00 00 00 
ffffffff80100613:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010061a:	00 00 00 00 
ffffffff8010061e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100625:	00 00 00 00 
ffffffff80100629:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100630:	00 00 00 00 
ffffffff80100634:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010063b:	00 00 00 00 
ffffffff8010063f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100646:	00 00 00 00 
ffffffff8010064a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100651:	00 00 00 00 
ffffffff80100655:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010065c:	00 00 00 00 
ffffffff80100660:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100667:	00 00 00 00 
ffffffff8010066b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100672:	00 00 00 00 
ffffffff80100676:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010067d:	00 00 00 00 
ffffffff80100681:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100688:	00 00 00 00 
ffffffff8010068c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100693:	00 00 00 00 
ffffffff80100697:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010069e:	00 00 00 00 
ffffffff801006a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006a9:	00 00 00 00 
ffffffff801006ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006b4:	00 00 00 00 
ffffffff801006b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006bf:	00 00 00 00 
ffffffff801006c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006ca:	00 00 00 00 
ffffffff801006ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006d5:	00 00 00 00 
ffffffff801006d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006e0:	00 00 00 00 
ffffffff801006e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006eb:	00 00 00 00 
ffffffff801006ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006f6:	00 00 00 00 
ffffffff801006fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100701:	00 00 00 00 
ffffffff80100705:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010070c:	00 00 00 00 
ffffffff80100710:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100717:	00 00 00 00 
ffffffff8010071b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100722:	00 00 00 00 
ffffffff80100726:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010072d:	00 00 00 00 
ffffffff80100731:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100738:	00 00 00 00 
ffffffff8010073c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100743:	00 00 00 00 
ffffffff80100747:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010074e:	00 00 00 00 
ffffffff80100752:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100759:	00 00 00 00 
ffffffff8010075d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100764:	00 00 00 00 
ffffffff80100768:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010076f:	00 00 00 00 
ffffffff80100773:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010077a:	00 00 00 00 
ffffffff8010077e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100785:	00 00 00 00 
ffffffff80100789:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100790:	00 00 00 00 
ffffffff80100794:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010079b:	00 00 00 00 
ffffffff8010079f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007a6:	00 00 00 00 
ffffffff801007aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007b1:	00 00 00 00 
ffffffff801007b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007bc:	00 00 00 00 
ffffffff801007c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007c7:	00 00 00 00 
ffffffff801007cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007d2:	00 00 00 00 
ffffffff801007d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007dd:	00 00 00 00 
ffffffff801007e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007e8:	00 00 00 00 
ffffffff801007ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007f3:	00 00 00 00 
ffffffff801007f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007fe:	00 00 00 00 
ffffffff80100802:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100809:	00 00 00 00 
ffffffff8010080d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100814:	00 00 00 00 
ffffffff80100818:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010081f:	00 00 00 00 
ffffffff80100823:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010082a:	00 00 00 00 
ffffffff8010082e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100835:	00 00 00 00 
ffffffff80100839:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100840:	00 00 00 00 
ffffffff80100844:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010084b:	00 00 00 00 
ffffffff8010084f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100856:	00 00 00 00 
ffffffff8010085a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100861:	00 00 00 00 
ffffffff80100865:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010086c:	00 00 00 00 
ffffffff80100870:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100877:	00 00 00 00 
ffffffff8010087b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100882:	00 00 00 00 
ffffffff80100886:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010088d:	00 00 00 00 
ffffffff80100891:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100898:	00 00 00 00 
ffffffff8010089c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008a3:	00 00 00 00 
ffffffff801008a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008ae:	00 00 00 00 
ffffffff801008b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008b9:	00 00 00 00 
ffffffff801008bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008c4:	00 00 00 00 
ffffffff801008c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008cf:	00 00 00 00 
ffffffff801008d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008da:	00 00 00 00 
ffffffff801008de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008e5:	00 00 00 00 
ffffffff801008e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008f0:	00 00 00 00 
ffffffff801008f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008fb:	00 00 00 00 
ffffffff801008ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100906:	00 00 00 00 
ffffffff8010090a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100911:	00 00 00 00 
ffffffff80100915:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010091c:	00 00 00 00 
ffffffff80100920:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100927:	00 00 00 00 
ffffffff8010092b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100932:	00 00 00 00 
ffffffff80100936:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010093d:	00 00 00 00 
ffffffff80100941:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100948:	00 00 00 00 
ffffffff8010094c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100953:	00 00 00 00 
ffffffff80100957:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010095e:	00 00 00 00 
ffffffff80100962:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100969:	00 00 00 00 
ffffffff8010096d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100974:	00 00 00 00 
ffffffff80100978:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010097f:	00 00 00 00 
ffffffff80100983:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010098a:	00 00 00 00 
ffffffff8010098e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100995:	00 00 00 00 
ffffffff80100999:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009a0:	00 00 00 00 
ffffffff801009a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ab:	00 00 00 00 
ffffffff801009af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009b6:	00 00 00 00 
ffffffff801009ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009c1:	00 00 00 00 
ffffffff801009c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009cc:	00 00 00 00 
ffffffff801009d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009d7:	00 00 00 00 
ffffffff801009db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009e2:	00 00 00 00 
ffffffff801009e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ed:	00 00 00 00 
ffffffff801009f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009f8:	00 00 00 00 
ffffffff801009fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a03:	00 00 00 00 
ffffffff80100a07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a0e:	00 00 00 00 
ffffffff80100a12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a19:	00 00 00 00 
ffffffff80100a1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a24:	00 00 00 00 
ffffffff80100a28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a2f:	00 00 00 00 
ffffffff80100a33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a3a:	00 00 00 00 
ffffffff80100a3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a45:	00 00 00 00 
ffffffff80100a49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a50:	00 00 00 00 
ffffffff80100a54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a5b:	00 00 00 00 
ffffffff80100a5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a66:	00 00 00 00 
ffffffff80100a6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a71:	00 00 00 00 
ffffffff80100a75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a7c:	00 00 00 00 
ffffffff80100a80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a87:	00 00 00 00 
ffffffff80100a8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a92:	00 00 00 00 
ffffffff80100a96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a9d:	00 00 00 00 
ffffffff80100aa1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aa8:	00 00 00 00 
ffffffff80100aac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ab3:	00 00 00 00 
ffffffff80100ab7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100abe:	00 00 00 00 
ffffffff80100ac2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ac9:	00 00 00 00 
ffffffff80100acd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ad4:	00 00 00 00 
ffffffff80100ad8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100adf:	00 00 00 00 
ffffffff80100ae3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aea:	00 00 00 00 
ffffffff80100aee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100af5:	00 00 00 00 
ffffffff80100af9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b00:	00 00 00 00 
ffffffff80100b04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b0b:	00 00 00 00 
ffffffff80100b0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b16:	00 00 00 00 
ffffffff80100b1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b21:	00 00 00 00 
ffffffff80100b25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b2c:	00 00 00 00 
ffffffff80100b30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b37:	00 00 00 00 
ffffffff80100b3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b42:	00 00 00 00 
ffffffff80100b46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b4d:	00 00 00 00 
ffffffff80100b51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b58:	00 00 00 00 
ffffffff80100b5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b63:	00 00 00 00 
ffffffff80100b67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b6e:	00 00 00 00 
ffffffff80100b72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b79:	00 00 00 00 
ffffffff80100b7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b84:	00 00 00 00 
ffffffff80100b88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b8f:	00 00 00 00 
ffffffff80100b93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b9a:	00 00 00 00 
ffffffff80100b9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ba5:	00 00 00 00 
ffffffff80100ba9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bb0:	00 00 00 00 
ffffffff80100bb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bbb:	00 00 00 00 
ffffffff80100bbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bc6:	00 00 00 00 
ffffffff80100bca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bd1:	00 00 00 00 
ffffffff80100bd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bdc:	00 00 00 00 
ffffffff80100be0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100be7:	00 00 00 00 
ffffffff80100beb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bf2:	00 00 00 00 
ffffffff80100bf6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bfd:	00 00 00 00 
ffffffff80100c01:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c08:	00 00 00 00 
ffffffff80100c0c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c13:	00 00 00 00 
ffffffff80100c17:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c1e:	00 00 00 00 
ffffffff80100c22:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c29:	00 00 00 00 
ffffffff80100c2d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c34:	00 00 00 00 
ffffffff80100c38:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c3f:	00 00 00 00 
ffffffff80100c43:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c4a:	00 00 00 00 
ffffffff80100c4e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c55:	00 00 00 00 
ffffffff80100c59:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c60:	00 00 00 00 
ffffffff80100c64:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c6b:	00 00 00 00 
ffffffff80100c6f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c76:	00 00 00 00 
ffffffff80100c7a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c81:	00 00 00 00 
ffffffff80100c85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c8c:	00 00 00 00 
ffffffff80100c90:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c97:	00 00 00 00 
ffffffff80100c9b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ca2:	00 00 00 00 
ffffffff80100ca6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cad:	00 00 00 00 
ffffffff80100cb1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cb8:	00 00 00 00 
ffffffff80100cbc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cc3:	00 00 00 00 
ffffffff80100cc7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cce:	00 00 00 00 
ffffffff80100cd2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cd9:	00 00 00 00 
ffffffff80100cdd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ce4:	00 00 00 00 
ffffffff80100ce8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cef:	00 00 00 00 
ffffffff80100cf3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cfa:	00 00 00 00 
ffffffff80100cfe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d05:	00 00 00 00 
ffffffff80100d09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d10:	00 00 00 00 
ffffffff80100d14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d1b:	00 00 00 00 
ffffffff80100d1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d26:	00 00 00 00 
ffffffff80100d2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d31:	00 00 00 00 
ffffffff80100d35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d3c:	00 00 00 00 
ffffffff80100d40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d47:	00 00 00 00 
ffffffff80100d4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d52:	00 00 00 00 
ffffffff80100d56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d5d:	00 00 00 00 
ffffffff80100d61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d68:	00 00 00 00 
ffffffff80100d6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d73:	00 00 00 00 
ffffffff80100d77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d7e:	00 00 00 00 
ffffffff80100d82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d89:	00 00 00 00 
ffffffff80100d8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d94:	00 00 00 00 
ffffffff80100d98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d9f:	00 00 00 00 
ffffffff80100da3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100daa:	00 00 00 00 
ffffffff80100dae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100db5:	00 00 00 00 
ffffffff80100db9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dc0:	00 00 00 00 
ffffffff80100dc4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dcb:	00 00 00 00 
ffffffff80100dcf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dd6:	00 00 00 00 
ffffffff80100dda:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100de1:	00 00 00 00 
ffffffff80100de5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dec:	00 00 00 00 
ffffffff80100df0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100df7:	00 00 00 00 
ffffffff80100dfb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e02:	00 00 00 00 
ffffffff80100e06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e0d:	00 00 00 00 
ffffffff80100e11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e18:	00 00 00 00 
ffffffff80100e1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e23:	00 00 00 00 
ffffffff80100e27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e2e:	00 00 00 00 
ffffffff80100e32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e39:	00 00 00 00 
ffffffff80100e3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e44:	00 00 00 00 
ffffffff80100e48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e4f:	00 00 00 00 
ffffffff80100e53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e5a:	00 00 00 00 
ffffffff80100e5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e65:	00 00 00 00 
ffffffff80100e69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e70:	00 00 00 00 
ffffffff80100e74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e7b:	00 00 00 00 
ffffffff80100e7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e86:	00 00 00 00 
ffffffff80100e8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e91:	00 00 00 00 
ffffffff80100e95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e9c:	00 00 00 00 
ffffffff80100ea0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ea7:	00 00 00 00 
ffffffff80100eab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eb2:	00 00 00 00 
ffffffff80100eb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ebd:	00 00 00 00 
ffffffff80100ec1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ec8:	00 00 00 00 
ffffffff80100ecc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ed3:	00 00 00 00 
ffffffff80100ed7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ede:	00 00 00 00 
ffffffff80100ee2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ee9:	00 00 00 00 
ffffffff80100eed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ef4:	00 00 00 00 
ffffffff80100ef8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eff:	00 00 00 00 
ffffffff80100f03:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f0a:	00 00 00 00 
ffffffff80100f0e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f15:	00 00 00 00 
ffffffff80100f19:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f20:	00 00 00 00 
ffffffff80100f24:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f2b:	00 00 00 00 
ffffffff80100f2f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f36:	00 00 00 00 
ffffffff80100f3a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f41:	00 00 00 00 
ffffffff80100f45:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f4c:	00 00 00 00 
ffffffff80100f50:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f57:	00 00 00 00 
ffffffff80100f5b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f62:	00 00 00 00 
ffffffff80100f66:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f6d:	00 00 00 00 
ffffffff80100f71:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f78:	00 00 00 00 
ffffffff80100f7c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f83:	00 00 00 00 
ffffffff80100f87:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f8e:	00 00 00 00 
ffffffff80100f92:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f99:	00 00 00 00 
ffffffff80100f9d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fa4:	00 00 00 00 
ffffffff80100fa8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100faf:	00 00 00 00 
ffffffff80100fb3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fba:	00 00 00 00 
ffffffff80100fbe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fc5:	00 00 00 00 
ffffffff80100fc9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fd0:	00 00 00 00 
ffffffff80100fd4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fdb:	00 00 00 00 
ffffffff80100fdf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fe6:	00 00 00 00 
ffffffff80100fea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ff1:	00 00 00 00 
ffffffff80100ff5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ffc:	00 00 00 00 
	...

ffffffff80108000 <__RME_X64_Mboot_Entry>:
/* The entry point after the bootloader finishes *****************************/
    .code32
    .align              16
__RME_X64_Mboot_Entry:
     /* EBX contains Multiboot data structure, let's relocate it to some other places */
     MOV                %EBX,%ESI
ffffffff80108000:	89 de                	mov    %ebx,%esi
     /* Zero 7 pages for our bootstrap page tables, PML4 @ 0x101000 */
     CLD
ffffffff80108002:	fc                   	cld
     XOR                %EAX,%EAX
ffffffff80108003:	31 c0                	xor    %eax,%eax
     MOV                $0x101000,%EDI
ffffffff80108005:	bf 00 10 10 00       	mov    $0x101000,%edi
     MOV                $0x7000,%ECX
ffffffff8010800a:	b9 00 70 00 00       	mov    $0x7000,%ecx
     REP STOSB
ffffffff8010800f:	f3 aa                	rep stos %al,%es:(%rdi)
     /* PML4[0] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff80108011:	b8 03 20 10 00       	mov    $0x102003,%eax
     MOV                %EAX,0x101000
ffffffff80108016:	a3 00 10 10 00 b8 03 	movabs %eax,0x102003b800101000
ffffffff8010801d:	20 10 
     /* PML4[256] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff8010801f:	00 a3 00 18 10 00    	add    %ah,0x101800(%rbx)
     MOV                %EAX,0x101800
     /* PML4[511] -> PDP-B @ 0x103000 */
     MOV                $(0x103000|3),%EAX
ffffffff80108025:	b8 03 30 10 00       	mov    $0x103003,%eax
     MOV                %EAX,0x101FF8
ffffffff8010802a:	a3 f8 1f 10 00 b8 03 	movabs %eax,0x104003b800101ff8
ffffffff80108031:	40 10 
     /* PDP-A[0] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff80108033:	00 a3 00 20 10 00    	add    %ah,0x102000(%rbx)
     MOV                %EAX,0x102000
     /* PDP-A[1] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108039:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x102008
ffffffff8010803e:	a3 08 20 10 00 b8 03 	movabs %eax,0x106003b800102008
ffffffff80108045:	60 10 
     /* PDP-A[2] -> PDE-C @ 0x106000 */
     MOV                $(0x106000|3),%EAX
ffffffff80108047:	00 a3 10 20 10 00    	add    %ah,0x102010(%rbx)
     MOV                %EAX,0x102010
     /* PDP-A[3] -> PDE-D @ 0x107000 unbufferable uncacheable */
     MOV                $(0x107000|3|0x18),%EAX
ffffffff8010804d:	b8 1b 70 10 00       	mov    $0x10701b,%eax
     MOV                %EAX,0x102018
ffffffff80108052:	a3 18 20 10 00 b8 03 	movabs %eax,0x104003b800102018
ffffffff80108059:	40 10 
     /* PDP-B[510] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff8010805b:	00 a3 f0 3f 10 00    	add    %ah,0x103ff0(%rbx)
     MOV                %EAX,0x103FF0
     /* PDP-B[511] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108061:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x103FF8
ffffffff80108066:	a3 f8 3f 10 00 b8 83 	movabs %eax,0x83b800103ff8
ffffffff8010806d:	00 00 
     /* PDE-A/B/C/D [0..511/0...511/0..511/0..511] -> 0..4094MB */
     MOV                $(0x83),%EAX
ffffffff8010806f:	00 bb 00 40 10 00    	add    %bh,0x104000(%rbx)
     MOV                $0x104000,%EBX
     MOV                $(512*4),%ECX
ffffffff80108075:	b9 00 08 00 00       	mov    $0x800,%ecx

ffffffff8010807a <PDE_Loop>:
PDE_Loop:
     MOV                %EAX,(%EBX)
ffffffff8010807a:	89 03                	mov    %eax,(%rbx)
     ADD                $0x200000,%EAX
ffffffff8010807c:	05 00 00 20 00       	add    $0x200000,%eax
     ADD                $0x8,%EBX
ffffffff80108081:	83 c3 08             	add    $0x8,%ebx
     DEC                %ECX
ffffffff80108084:	49 75 f3             	rex.WB jne ffffffff8010807a <PDE_Loop>
     JNZ                PDE_Loop
	 /* Clear ebx for initial processor boot.
      * When secondary processors boot, they'll call through
      * __RME_X64_SMP_Boot, but with a nonzero ebx.
      * We'll reuse these bootstrap pagetables and GDT. */
     XOR                %EBX,%EBX
ffffffff80108087:	31 db                	xor    %ebx,%ebx

ffffffff80108089 <__RME_X64_SMP_Boot_32>:
     /* SMP boot will run directly from here */
__RME_X64_SMP_Boot_32:
     /* CR3 -> PML4 @ 0x101000 */
     MOV                $0x101000,%EAX
ffffffff80108089:	b8 00 10 10 00       	mov    $0x101000,%eax
     MOV                %EAX,%CR3
ffffffff8010808e:	0f 22 d8             	mov    %rax,%cr3
     /* Load GDT */
     LGDT               (Boot_GDT_Desc-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff80108091:	0f 01 15 28 81 10 00 	lgdt   0x108128(%rip)        # ffffffff802101c0 <_RME_Pgt_Boot_Con+0x20f>
     /* Enable PAE - CR4.PAE=1 */
     MOV                %CR4,%EAX
ffffffff80108098:	0f 20 e0             	mov    %cr4,%rax
     BTS                $5,%EAX
ffffffff8010809b:	0f ba e8 05          	bts    $0x5,%eax
     MOV                %EAX,%CR4
ffffffff8010809f:	0f 22 e0             	mov    %rax,%cr4
     /* Enable long mode and no execute bit - EFER.LME=1, EFER.NXE=1 */
     MOV                $0xC0000080,%ECX
ffffffff801080a2:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
     RDMSR
ffffffff801080a7:	0f 32                	rdmsr
     BTS                $8,%EAX
ffffffff801080a9:	0f ba e8 08          	bts    $0x8,%eax
     BTS                $11,%EAX
ffffffff801080ad:	0f ba e8 0b          	bts    $0xb,%eax
     WRMSR
ffffffff801080b1:	0f 30                	wrmsr
     /* Enable paging */
     MOV                %CR0,%EAX
ffffffff801080b3:	0f 20 c0             	mov    %cr0,%rax
     BTS                $31,%EAX
ffffffff801080b6:	0f ba e8 1f          	bts    $0x1f,%eax
     MOV                %EAX,%CR0
ffffffff801080ba:	0f 22 c0             	mov    %rax,%cr0
     /* Enable PCID - CR4.PCIDE=1 FIXME: this made things slower - due to extra logic for PCID processing *//*
     MOV                %CR4,%EAX
     BTS                $17,%EAX
     MOV                %EAX,%CR4 */
     /* shift to 64bit segment */
     LJMP               $8,$(Boot_Low_64-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff801080bd:	ea                   	(bad)
ffffffff801080be:	d0 80 10 00 08 00    	rolb   0x80010(%rax)
ffffffff801080c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801080cb:	00 00 00 00 
ffffffff801080cf:	90                   	nop

ffffffff801080d0 <Boot_Low_64>:

/* Now we are in 64-bit mode *************************************************/
    .align              16
    .code64
Boot_Low_64:
    movq                $Boot_High_64,%RAX
ffffffff801080d0:	48 c7 c0 d9 80 10 80 	mov    $0xffffffff801080d9,%rax
    jmp                 *%RAX
ffffffff801080d7:	ff e0                	jmp    *%rax

ffffffff801080d9 <_start>:
_start:
Boot_High_64:
    /* ensure data segment registers are sane - zero out all of them */
    XOR                 %RAX,%RAX
ffffffff801080d9:	48 31 c0             	xor    %rax,%rax
    /* Below are all 16-bit moves */
    MOV                 %AX,%SS
ffffffff801080dc:	8e d0                	mov    %eax,%ss
    MOV                 %AX,%DS
ffffffff801080de:	8e d8                	mov    %eax,%ds
    MOV                 %AX,%ES
ffffffff801080e0:	8e c0                	mov    %eax,%es
    MOV                 %AX,%FS
ffffffff801080e2:	8e e0                	mov    %eax,%fs
    MOV                 %AX,%GS
ffffffff801080e4:	8e e8                	mov    %eax,%gs
    /* Check to see if we're booting a secondary core */
    TEST                %EBX,%EBX
ffffffff801080e6:	85 db                	test   %ebx,%ebx
    JNZ                 Boot_SMP_64
ffffffff801080e8:	75 14                	jne    ffffffff801080fe <Boot_SMP_64>
    /* Setup initial stack - this is hard-coded at low memory */
    MOV                 $__RME_X64_Kern_Boot_Stack,%RAX
ffffffff801080ea:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
    MOV                 %RAX,%RSP
ffffffff801080f1:	48 89 c4             	mov    %rax,%rsp
    /* Pass the physical address of RSI to it */
    MOV                 %RSI,%RDI
ffffffff801080f4:	48 89 f7             	mov    %rsi,%rdi
    JMP                 main
ffffffff801080f7:	e9 95 2e 11 00       	jmp    ffffffff8021af91 <main>
    JMP                 .
ffffffff801080fc:	eb fe                	jmp    ffffffff801080fc <_start+0x23>

ffffffff801080fe <Boot_SMP_64>:
Boot_SMP_64:
    MOV                 $0x7000,%RAX
ffffffff801080fe:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax
    MOV                 -16(%RAX),%RSP
ffffffff80108105:	48 8b 60 f0          	mov    -0x10(%rax),%rsp
    JMP                 __RME_SMP_Low_Level_Init
ffffffff80108109:	e9 d1 d0 11 00       	jmp    ffffffff802251df <__RME_SMP_Low_Level_Init>
    JMP                 .
ffffffff8010810e:	eb fe                	jmp    ffffffff8010810e <Boot_SMP_64+0x10>

ffffffff80108110 <Boot_GDT>:
	...
ffffffff8010811c:	00 98 20 00 00 00    	add    %bl,0x20(%rax)
ffffffff80108122:	00 00                	add    %al,(%rax)
ffffffff80108124:	00                   	.byte 0x0
ffffffff80108125:	90                   	nop
	...

ffffffff80108128 <Boot_GDT_Desc>:
ffffffff80108128:	17                   	(bad)
ffffffff80108129:	00 10                	add    %dl,(%rax)
ffffffff8010812b:	81 10 00 00 00 00    	adcl   $0x0,(%rax)
ffffffff80108131:	00 66 66             	add    %ah,0x66(%rsi)
ffffffff80108134:	2e 0f 1f 84 00 00 00 	cs nopl 0x0(%rax,%rax,1)
ffffffff8010813b:	00 00 
ffffffff8010813d:	0f 1f 00             	nopl   (%rax)
ffffffff80108140:	e9 bb 0e 00 00       	jmp    ffffffff80109000 <RME_X64_Kpgt>
ffffffff80108145:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010814c:	00 00 00 00 
ffffffff80108150:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108157:	00 00 00 00 
ffffffff8010815b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108162:	00 00 00 00 
ffffffff80108166:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010816d:	00 00 00 00 
ffffffff80108171:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108178:	00 00 00 00 
ffffffff8010817c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108183:	00 00 00 00 
ffffffff80108187:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010818e:	00 00 00 00 
ffffffff80108192:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108199:	00 00 00 00 
ffffffff8010819d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081a4:	00 00 00 00 
ffffffff801081a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081af:	00 00 00 00 
ffffffff801081b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081ba:	00 00 00 00 
ffffffff801081be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081c5:	00 00 00 00 
ffffffff801081c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081d0:	00 00 00 00 
ffffffff801081d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081db:	00 00 00 00 
ffffffff801081df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081e6:	00 00 00 00 
ffffffff801081ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081f1:	00 00 00 00 
ffffffff801081f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081fc:	00 00 00 00 
ffffffff80108200:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108207:	00 00 00 00 
ffffffff8010820b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108212:	00 00 00 00 
ffffffff80108216:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010821d:	00 00 00 00 
ffffffff80108221:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108228:	00 00 00 00 
ffffffff8010822c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108233:	00 00 00 00 
ffffffff80108237:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010823e:	00 00 00 00 
ffffffff80108242:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108249:	00 00 00 00 
ffffffff8010824d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108254:	00 00 00 00 
ffffffff80108258:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010825f:	00 00 00 00 
ffffffff80108263:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010826a:	00 00 00 00 
ffffffff8010826e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108275:	00 00 00 00 
ffffffff80108279:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108280:	00 00 00 00 
ffffffff80108284:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010828b:	00 00 00 00 
ffffffff8010828f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108296:	00 00 00 00 
ffffffff8010829a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082a1:	00 00 00 00 
ffffffff801082a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ac:	00 00 00 00 
ffffffff801082b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082b7:	00 00 00 00 
ffffffff801082bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082c2:	00 00 00 00 
ffffffff801082c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082cd:	00 00 00 00 
ffffffff801082d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082d8:	00 00 00 00 
ffffffff801082dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082e3:	00 00 00 00 
ffffffff801082e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ee:	00 00 00 00 
ffffffff801082f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082f9:	00 00 00 00 
ffffffff801082fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108304:	00 00 00 00 
ffffffff80108308:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010830f:	00 00 00 00 
ffffffff80108313:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010831a:	00 00 00 00 
ffffffff8010831e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108325:	00 00 00 00 
ffffffff80108329:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108330:	00 00 00 00 
ffffffff80108334:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010833b:	00 00 00 00 
ffffffff8010833f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108346:	00 00 00 00 
ffffffff8010834a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108351:	00 00 00 00 
ffffffff80108355:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010835c:	00 00 00 00 
ffffffff80108360:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108367:	00 00 00 00 
ffffffff8010836b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108372:	00 00 00 00 
ffffffff80108376:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010837d:	00 00 00 00 
ffffffff80108381:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108388:	00 00 00 00 
ffffffff8010838c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108393:	00 00 00 00 
ffffffff80108397:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010839e:	00 00 00 00 
ffffffff801083a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083a9:	00 00 00 00 
ffffffff801083ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083b4:	00 00 00 00 
ffffffff801083b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083bf:	00 00 00 00 
ffffffff801083c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083ca:	00 00 00 00 
ffffffff801083ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083d5:	00 00 00 00 
ffffffff801083d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083e0:	00 00 00 00 
ffffffff801083e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083eb:	00 00 00 00 
ffffffff801083ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083f6:	00 00 00 00 
ffffffff801083fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108401:	00 00 00 00 
ffffffff80108405:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010840c:	00 00 00 00 
ffffffff80108410:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108417:	00 00 00 00 
ffffffff8010841b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108422:	00 00 00 00 
ffffffff80108426:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010842d:	00 00 00 00 
ffffffff80108431:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108438:	00 00 00 00 
ffffffff8010843c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108443:	00 00 00 00 
ffffffff80108447:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010844e:	00 00 00 00 
ffffffff80108452:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108459:	00 00 00 00 
ffffffff8010845d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108464:	00 00 00 00 
ffffffff80108468:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010846f:	00 00 00 00 
ffffffff80108473:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010847a:	00 00 00 00 
ffffffff8010847e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108485:	00 00 00 00 
ffffffff80108489:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108490:	00 00 00 00 
ffffffff80108494:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010849b:	00 00 00 00 
ffffffff8010849f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084a6:	00 00 00 00 
ffffffff801084aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084b1:	00 00 00 00 
ffffffff801084b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084bc:	00 00 00 00 
ffffffff801084c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084c7:	00 00 00 00 
ffffffff801084cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084d2:	00 00 00 00 
ffffffff801084d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084dd:	00 00 00 00 
ffffffff801084e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084e8:	00 00 00 00 
ffffffff801084ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084f3:	00 00 00 00 
ffffffff801084f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084fe:	00 00 00 00 
ffffffff80108502:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108509:	00 00 00 00 
ffffffff8010850d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108514:	00 00 00 00 
ffffffff80108518:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010851f:	00 00 00 00 
ffffffff80108523:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010852a:	00 00 00 00 
ffffffff8010852e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108535:	00 00 00 00 
ffffffff80108539:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108540:	00 00 00 00 
ffffffff80108544:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010854b:	00 00 00 00 
ffffffff8010854f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108556:	00 00 00 00 
ffffffff8010855a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108561:	00 00 00 00 
ffffffff80108565:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010856c:	00 00 00 00 
ffffffff80108570:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108577:	00 00 00 00 
ffffffff8010857b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108582:	00 00 00 00 
ffffffff80108586:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010858d:	00 00 00 00 
ffffffff80108591:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108598:	00 00 00 00 
ffffffff8010859c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085a3:	00 00 00 00 
ffffffff801085a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085ae:	00 00 00 00 
ffffffff801085b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085b9:	00 00 00 00 
ffffffff801085bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085c4:	00 00 00 00 
ffffffff801085c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085cf:	00 00 00 00 
ffffffff801085d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085da:	00 00 00 00 
ffffffff801085de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085e5:	00 00 00 00 
ffffffff801085e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085f0:	00 00 00 00 
ffffffff801085f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085fb:	00 00 00 00 
ffffffff801085ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108606:	00 00 00 00 
ffffffff8010860a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108611:	00 00 00 00 
ffffffff80108615:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010861c:	00 00 00 00 
ffffffff80108620:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108627:	00 00 00 00 
ffffffff8010862b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108632:	00 00 00 00 
ffffffff80108636:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010863d:	00 00 00 00 
ffffffff80108641:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108648:	00 00 00 00 
ffffffff8010864c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108653:	00 00 00 00 
ffffffff80108657:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010865e:	00 00 00 00 
ffffffff80108662:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108669:	00 00 00 00 
ffffffff8010866d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108674:	00 00 00 00 
ffffffff80108678:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010867f:	00 00 00 00 
ffffffff80108683:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010868a:	00 00 00 00 
ffffffff8010868e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108695:	00 00 00 00 
ffffffff80108699:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086a0:	00 00 00 00 
ffffffff801086a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ab:	00 00 00 00 
ffffffff801086af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086b6:	00 00 00 00 
ffffffff801086ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086c1:	00 00 00 00 
ffffffff801086c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086cc:	00 00 00 00 
ffffffff801086d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086d7:	00 00 00 00 
ffffffff801086db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086e2:	00 00 00 00 
ffffffff801086e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ed:	00 00 00 00 
ffffffff801086f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086f8:	00 00 00 00 
ffffffff801086fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108703:	00 00 00 00 
ffffffff80108707:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010870e:	00 00 00 00 
ffffffff80108712:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108719:	00 00 00 00 
ffffffff8010871d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108724:	00 00 00 00 
ffffffff80108728:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010872f:	00 00 00 00 
ffffffff80108733:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010873a:	00 00 00 00 
ffffffff8010873e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108745:	00 00 00 00 
ffffffff80108749:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108750:	00 00 00 00 
ffffffff80108754:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010875b:	00 00 00 00 
ffffffff8010875f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108766:	00 00 00 00 
ffffffff8010876a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108771:	00 00 00 00 
ffffffff80108775:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010877c:	00 00 00 00 
ffffffff80108780:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108787:	00 00 00 00 
ffffffff8010878b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108792:	00 00 00 00 
ffffffff80108796:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010879d:	00 00 00 00 
ffffffff801087a1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087a8:	00 00 00 00 
ffffffff801087ac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087b3:	00 00 00 00 
ffffffff801087b7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087be:	00 00 00 00 
ffffffff801087c2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087c9:	00 00 00 00 
ffffffff801087cd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087d4:	00 00 00 00 
ffffffff801087d8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087df:	00 00 00 00 
ffffffff801087e3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087ea:	00 00 00 00 
ffffffff801087ee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087f5:	00 00 00 00 
ffffffff801087f9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108800:	00 00 00 00 
ffffffff80108804:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010880b:	00 00 00 00 
ffffffff8010880f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108816:	00 00 00 00 
ffffffff8010881a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108821:	00 00 00 00 
ffffffff80108825:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010882c:	00 00 00 00 
ffffffff80108830:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108837:	00 00 00 00 
ffffffff8010883b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108842:	00 00 00 00 
ffffffff80108846:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010884d:	00 00 00 00 
ffffffff80108851:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108858:	00 00 00 00 
ffffffff8010885c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108863:	00 00 00 00 
ffffffff80108867:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010886e:	00 00 00 00 
ffffffff80108872:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108879:	00 00 00 00 
ffffffff8010887d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108884:	00 00 00 00 
ffffffff80108888:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010888f:	00 00 00 00 
ffffffff80108893:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010889a:	00 00 00 00 
ffffffff8010889e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088a5:	00 00 00 00 
ffffffff801088a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088b0:	00 00 00 00 
ffffffff801088b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088bb:	00 00 00 00 
ffffffff801088bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088c6:	00 00 00 00 
ffffffff801088ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088d1:	00 00 00 00 
ffffffff801088d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088dc:	00 00 00 00 
ffffffff801088e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088e7:	00 00 00 00 
ffffffff801088eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088f2:	00 00 00 00 
ffffffff801088f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088fd:	00 00 00 00 
ffffffff80108901:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108908:	00 00 00 00 
ffffffff8010890c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108913:	00 00 00 00 
ffffffff80108917:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010891e:	00 00 00 00 
ffffffff80108922:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108929:	00 00 00 00 
ffffffff8010892d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108934:	00 00 00 00 
ffffffff80108938:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010893f:	00 00 00 00 
ffffffff80108943:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010894a:	00 00 00 00 
ffffffff8010894e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108955:	00 00 00 00 
ffffffff80108959:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108960:	00 00 00 00 
ffffffff80108964:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010896b:	00 00 00 00 
ffffffff8010896f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108976:	00 00 00 00 
ffffffff8010897a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108981:	00 00 00 00 
ffffffff80108985:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010898c:	00 00 00 00 
ffffffff80108990:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108997:	00 00 00 00 
ffffffff8010899b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089a2:	00 00 00 00 
ffffffff801089a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ad:	00 00 00 00 
ffffffff801089b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089b8:	00 00 00 00 
ffffffff801089bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089c3:	00 00 00 00 
ffffffff801089c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ce:	00 00 00 00 
ffffffff801089d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089d9:	00 00 00 00 
ffffffff801089dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089e4:	00 00 00 00 
ffffffff801089e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ef:	00 00 00 00 
ffffffff801089f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089fa:	00 00 00 00 
ffffffff801089fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a05:	00 00 00 00 
ffffffff80108a09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a10:	00 00 00 00 
ffffffff80108a14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a1b:	00 00 00 00 
ffffffff80108a1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a26:	00 00 00 00 
ffffffff80108a2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a31:	00 00 00 00 
ffffffff80108a35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a3c:	00 00 00 00 
ffffffff80108a40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a47:	00 00 00 00 
ffffffff80108a4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a52:	00 00 00 00 
ffffffff80108a56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a5d:	00 00 00 00 
ffffffff80108a61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a68:	00 00 00 00 
ffffffff80108a6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a73:	00 00 00 00 
ffffffff80108a77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a7e:	00 00 00 00 
ffffffff80108a82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a89:	00 00 00 00 
ffffffff80108a8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a94:	00 00 00 00 
ffffffff80108a98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a9f:	00 00 00 00 
ffffffff80108aa3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aaa:	00 00 00 00 
ffffffff80108aae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ab5:	00 00 00 00 
ffffffff80108ab9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ac0:	00 00 00 00 
ffffffff80108ac4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108acb:	00 00 00 00 
ffffffff80108acf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ad6:	00 00 00 00 
ffffffff80108ada:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ae1:	00 00 00 00 
ffffffff80108ae5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aec:	00 00 00 00 
ffffffff80108af0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108af7:	00 00 00 00 
ffffffff80108afb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b02:	00 00 00 00 
ffffffff80108b06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b0d:	00 00 00 00 
ffffffff80108b11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b18:	00 00 00 00 
ffffffff80108b1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b23:	00 00 00 00 
ffffffff80108b27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b2e:	00 00 00 00 
ffffffff80108b32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b39:	00 00 00 00 
ffffffff80108b3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b44:	00 00 00 00 
ffffffff80108b48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b4f:	00 00 00 00 
ffffffff80108b53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b5a:	00 00 00 00 
ffffffff80108b5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b65:	00 00 00 00 
ffffffff80108b69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b70:	00 00 00 00 
ffffffff80108b74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b7b:	00 00 00 00 
ffffffff80108b7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b86:	00 00 00 00 
ffffffff80108b8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b91:	00 00 00 00 
ffffffff80108b95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b9c:	00 00 00 00 
ffffffff80108ba0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ba7:	00 00 00 00 
ffffffff80108bab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bb2:	00 00 00 00 
ffffffff80108bb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bbd:	00 00 00 00 
ffffffff80108bc1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bc8:	00 00 00 00 
ffffffff80108bcc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bd3:	00 00 00 00 
ffffffff80108bd7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bde:	00 00 00 00 
ffffffff80108be2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108be9:	00 00 00 00 
ffffffff80108bed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bf4:	00 00 00 00 
ffffffff80108bf8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bff:	00 00 00 00 
ffffffff80108c03:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c0a:	00 00 00 00 
ffffffff80108c0e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c15:	00 00 00 00 
ffffffff80108c19:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c20:	00 00 00 00 
ffffffff80108c24:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c2b:	00 00 00 00 
ffffffff80108c2f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c36:	00 00 00 00 
ffffffff80108c3a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c41:	00 00 00 00 
ffffffff80108c45:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c4c:	00 00 00 00 
ffffffff80108c50:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c57:	00 00 00 00 
ffffffff80108c5b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c62:	00 00 00 00 
ffffffff80108c66:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c6d:	00 00 00 00 
ffffffff80108c71:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c78:	00 00 00 00 
ffffffff80108c7c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c83:	00 00 00 00 
ffffffff80108c87:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c8e:	00 00 00 00 
ffffffff80108c92:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c99:	00 00 00 00 
ffffffff80108c9d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ca4:	00 00 00 00 
ffffffff80108ca8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108caf:	00 00 00 00 
ffffffff80108cb3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cba:	00 00 00 00 
ffffffff80108cbe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cc5:	00 00 00 00 
ffffffff80108cc9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cd0:	00 00 00 00 
ffffffff80108cd4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cdb:	00 00 00 00 
ffffffff80108cdf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ce6:	00 00 00 00 
ffffffff80108cea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cf1:	00 00 00 00 
ffffffff80108cf5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cfc:	00 00 00 00 
ffffffff80108d00:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d07:	00 00 00 00 
ffffffff80108d0b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d12:	00 00 00 00 
ffffffff80108d16:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d1d:	00 00 00 00 
ffffffff80108d21:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d28:	00 00 00 00 
ffffffff80108d2c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d33:	00 00 00 00 
ffffffff80108d37:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d3e:	00 00 00 00 
ffffffff80108d42:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d49:	00 00 00 00 
ffffffff80108d4d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d54:	00 00 00 00 
ffffffff80108d58:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d5f:	00 00 00 00 
ffffffff80108d63:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d6a:	00 00 00 00 
ffffffff80108d6e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d75:	00 00 00 00 
ffffffff80108d79:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d80:	00 00 00 00 
ffffffff80108d84:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d8b:	00 00 00 00 
ffffffff80108d8f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d96:	00 00 00 00 
ffffffff80108d9a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108da1:	00 00 00 00 
ffffffff80108da5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dac:	00 00 00 00 
ffffffff80108db0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108db7:	00 00 00 00 
ffffffff80108dbb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dc2:	00 00 00 00 
ffffffff80108dc6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dcd:	00 00 00 00 
ffffffff80108dd1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dd8:	00 00 00 00 
ffffffff80108ddc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108de3:	00 00 00 00 
ffffffff80108de7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dee:	00 00 00 00 
ffffffff80108df2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108df9:	00 00 00 00 
ffffffff80108dfd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e04:	00 00 00 00 
ffffffff80108e08:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e0f:	00 00 00 00 
ffffffff80108e13:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e1a:	00 00 00 00 
ffffffff80108e1e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e25:	00 00 00 00 
ffffffff80108e29:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e30:	00 00 00 00 
ffffffff80108e34:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e3b:	00 00 00 00 
ffffffff80108e3f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e46:	00 00 00 00 
ffffffff80108e4a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e51:	00 00 00 00 
ffffffff80108e55:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e5c:	00 00 00 00 
ffffffff80108e60:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e67:	00 00 00 00 
ffffffff80108e6b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e72:	00 00 00 00 
ffffffff80108e76:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e7d:	00 00 00 00 
ffffffff80108e81:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e88:	00 00 00 00 
ffffffff80108e8c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e93:	00 00 00 00 
ffffffff80108e97:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e9e:	00 00 00 00 
ffffffff80108ea2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ea9:	00 00 00 00 
ffffffff80108ead:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eb4:	00 00 00 00 
ffffffff80108eb8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ebf:	00 00 00 00 
ffffffff80108ec3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eca:	00 00 00 00 
ffffffff80108ece:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ed5:	00 00 00 00 
ffffffff80108ed9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ee0:	00 00 00 00 
ffffffff80108ee4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eeb:	00 00 00 00 
ffffffff80108eef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ef6:	00 00 00 00 
ffffffff80108efa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f01:	00 00 00 00 
ffffffff80108f05:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f0c:	00 00 00 00 
ffffffff80108f10:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f17:	00 00 00 00 
ffffffff80108f1b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f22:	00 00 00 00 
ffffffff80108f26:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f2d:	00 00 00 00 
ffffffff80108f31:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f38:	00 00 00 00 
ffffffff80108f3c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f43:	00 00 00 00 
ffffffff80108f47:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f4e:	00 00 00 00 
ffffffff80108f52:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f59:	00 00 00 00 
ffffffff80108f5d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f64:	00 00 00 00 
ffffffff80108f68:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f6f:	00 00 00 00 
ffffffff80108f73:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f7a:	00 00 00 00 
ffffffff80108f7e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f85:	00 00 00 00 
ffffffff80108f89:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f90:	00 00 00 00 
ffffffff80108f94:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f9b:	00 00 00 00 
ffffffff80108f9f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fa6:	00 00 00 00 
ffffffff80108faa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fb1:	00 00 00 00 
ffffffff80108fb5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fbc:	00 00 00 00 
ffffffff80108fc0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fc7:	00 00 00 00 
ffffffff80108fcb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fd2:	00 00 00 00 
ffffffff80108fd6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fdd:	00 00 00 00 
ffffffff80108fe1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fe8:	00 00 00 00 
ffffffff80108fec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ff3:	00 00 00 00 
ffffffff80108ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80108ffe:	00 00 

ffffffff80109000 <RME_X64_Kpgt>:
	...

ffffffff8020b800 <__RME_X64_In>:
Input       : ptr_t Port - The port to output to.
Output      : None.
Return      : ptr_t - The data received from that port.
******************************************************************************/
__RME_X64_In:
    PUSHQ               %RDX
ffffffff8020b800:	52                   	push   %rdx
    MOVQ                %RDI,%RDX
ffffffff8020b801:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RAX,%RAX
ffffffff8020b804:	48 89 c0             	mov    %rax,%rax
    INB                 (%DX),%AL
ffffffff8020b807:	ec                   	in     (%dx),%al
    POPQ                %RDX
ffffffff8020b808:	5a                   	pop    %rdx
    RETQ
ffffffff8020b809:	c3                   	ret

ffffffff8020b80a <__RME_X64_Out>:
                 ptr_t Data - The data to send to that port.
Output         : None.
Return         : None.
******************************************************************************/
__RME_X64_Out:
    PUSHQ               %RDX
ffffffff8020b80a:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b80b:	50                   	push   %rax
    MOVQ                %RDI,%RDX
ffffffff8020b80c:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RSI,%RAX
ffffffff8020b80f:	48 89 f0             	mov    %rsi,%rax
    OUTB                %AL,(%DX)
ffffffff8020b812:	ee                   	out    %al,(%dx)
    POPQ                %RAX
ffffffff8020b813:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b814:	5a                   	pop    %rdx
    RETQ
ffffffff8020b815:	c3                   	ret

ffffffff8020b816 <__RME_X64_Read_MSR>:
Input       : ptr_t MSR - The MSR to read.
Output      : None.
Return      : ptr_t - The content of the MSR.
******************************************************************************/
__RME_X64_Read_MSR:
    PUSHQ               %RCX
ffffffff8020b816:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b817:	52                   	push   %rdx
    MOVQ                %RDI,%RCX
ffffffff8020b818:	48 89 f9             	mov    %rdi,%rcx
    XORQ                %RAX,%RAX
ffffffff8020b81b:	48 31 c0             	xor    %rax,%rax
    RDMSR
ffffffff8020b81e:	0f 32                	rdmsr
    SHLQ                $32,%RDX
ffffffff8020b820:	48 c1 e2 20          	shl    $0x20,%rdx
    ADDQ                %RDX,%RAX
ffffffff8020b824:	48 01 d0             	add    %rdx,%rax
    POPQ                %RDX
ffffffff8020b827:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b828:	59                   	pop    %rcx
    RETQ
ffffffff8020b829:	c3                   	ret

ffffffff8020b82a <__RME_X64_Write_MSR>:
              ptr_t Value - The value to write to it.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_MSR:
    PUSHQ               %RCX
ffffffff8020b82a:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b82b:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b82c:	50                   	push   %rax
    MOVQ                %RDI,%RCX
ffffffff8020b82d:	48 89 f9             	mov    %rdi,%rcx
    MOVL                %ESI,%EAX
ffffffff8020b830:	89 f0                	mov    %esi,%eax
    MOVQ                %RSI,%RDX
ffffffff8020b832:	48 89 f2             	mov    %rsi,%rdx
    SHR                 $32,%RDX
ffffffff8020b835:	48 c1 ea 20          	shr    $0x20,%rdx
    WRMSR
ffffffff8020b839:	0f 30                	wrmsr
    POPQ                %RAX
ffffffff8020b83b:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b83c:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b83d:	59                   	pop    %rcx
    RETQ
ffffffff8020b83e:	c3                   	ret

ffffffff8020b83f <__RME_X64_CPU_Local_Get>:
Input       : None.
Output      : None.
Return      : struct RME_CPU_Local* - The CPU-local data structures.
******************************************************************************/
__RME_X64_CPU_Local_Get:
    MOVQ                %GS:(8192-8*3),%RAX
ffffffff8020b83f:	65 48 8b 04 25 e8 1f 	mov    %gs:0x1fe8,%rax
ffffffff8020b846:	00 00 
    RETQ
ffffffff8020b848:	c3                   	ret

ffffffff8020b849 <__RME_X64_CPUID_Get>:
              ptr_t* ECX - The ECX info.
              ptr_t* EDX - The EDX info.
Return      : ptr_t - The maximum number for CPUID instruction.
******************************************************************************/
__RME_X64_CPUID_Get:
    PUSHQ               %R8
ffffffff8020b849:	41 50                	push   %r8
    PUSHQ               %R9
ffffffff8020b84b:	41 51                	push   %r9
    PUSHQ               %RBX
ffffffff8020b84d:	53                   	push   %rbx
    PUSHQ               %RCX
ffffffff8020b84e:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b84f:	52                   	push   %rdx

    MOVQ                %RDI,%RAX
ffffffff8020b850:	48 89 f8             	mov    %rdi,%rax
    MOVQ                %RDX,%R8
ffffffff8020b853:	49 89 d0             	mov    %rdx,%r8
    MOVQ                %RCX,%R9
ffffffff8020b856:	49 89 c9             	mov    %rcx,%r9

    MOVQ                (%RSI),%RBX
ffffffff8020b859:	48 8b 1e             	mov    (%rsi),%rbx
    MOVQ                (%R8),%RCX
ffffffff8020b85c:	49 8b 08             	mov    (%r8),%rcx
    MOVQ                (%R9),%RDX
ffffffff8020b85f:	49 8b 11             	mov    (%r9),%rdx
    CPUID
ffffffff8020b862:	0f a2                	cpuid
    MOVQ                %RBX,(%RSI)
ffffffff8020b864:	48 89 1e             	mov    %rbx,(%rsi)
    MOVQ                %RCX,(%R8)
ffffffff8020b867:	49 89 08             	mov    %rcx,(%r8)
    MOVQ                %RDX,(%R9)
ffffffff8020b86a:	49 89 11             	mov    %rdx,(%r9)

    POPQ                %RDX
ffffffff8020b86d:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b86e:	59                   	pop    %rcx
    POPQ                %RBX
ffffffff8020b86f:	5b                   	pop    %rbx
    POPQ                %R9
ffffffff8020b870:	41 59                	pop    %r9
    POPQ                %R8
ffffffff8020b872:	41 58                	pop    %r8
    RETQ
ffffffff8020b874:	c3                   	ret

ffffffff8020b875 <__RME_X64_GDT_Load>:
Input       : ptr_t* GDTR - The pointer to the GDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_GDT_Load:
    LGDT                (%RDI)
ffffffff8020b875:	0f 01 17             	lgdt   (%rdi)
    RETQ
ffffffff8020b878:	c3                   	ret

ffffffff8020b879 <__RME_X64_IDT_Load>:
Input       : ptr_t* IDTR - The pointer to the IDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_IDT_Load:
    LIDT                (%RDI)
ffffffff8020b879:	0f 01 1f             	lidt   (%rdi)
    RETQ
ffffffff8020b87c:	c3                   	ret

ffffffff8020b87d <__RME_X64_TSS_Load>:
Input       : ptr_t TSS - The TSS's position in GDT.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_TSS_Load:
    LTR                 %DI
ffffffff8020b87d:	0f 00 df             	ltr    %di
    RETQ
ffffffff8020b880:	c3                   	ret

ffffffff8020b881 <__RME_X64_Comp_Swap>:
              ptr_t New - The new value.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - If successful, 1; else 0.
******************************************************************************/
__RME_X64_Comp_Swap:
    MOVQ                %RSI,%RAX
ffffffff8020b881:	48 89 f0             	mov    %rsi,%rax
    XOR                 %RSI,%RSI
ffffffff8020b884:	48 31 f6             	xor    %rsi,%rsi
    /* In x86, locked instructions act as a fence */
    LOCK CMPXCHGQ       %RDX,(%RDI)
ffffffff8020b887:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
    /* Set the bit if ZF is set */
    SETZ                %SIL
ffffffff8020b88c:	40 0f 94 c6          	sete   %sil
    MOVQ                %RSI,%RAX
ffffffff8020b890:	48 89 f0             	mov    %rsi,%rax
    RETQ
ffffffff8020b893:	c3                   	ret

ffffffff8020b894 <__RME_X64_Fetch_Add>:
              cnt_t Addend - The number to add.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the addition.
******************************************************************************/
__RME_X64_Fetch_Add:
    MOVQ                %RSI,%RAX
ffffffff8020b894:	48 89 f0             	mov    %rsi,%rax
    /* In x86, locked instructions act as a fence */
    LOCK XADDQ          %RAX,(%RDI)
ffffffff8020b897:	f0 48 0f c1 07       	lock xadd %rax,(%rdi)
    RETQ
ffffffff8020b89c:	c3                   	ret

ffffffff8020b89d <__RME_X64_Fetch_And>:
              cnt_t Operand - The number to logic AND with the destination.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the AND operation.
******************************************************************************/
__RME_X64_Fetch_And:
    MOVQ                (%RDI),%RAX
ffffffff8020b89d:	48 8b 07             	mov    (%rdi),%rax
    /* In x86, locked instructions act as a fence */
    LOCK ANDQ           %RSI,(%RDI)
ffffffff8020b8a0:	f0 48 21 37          	lock and %rsi,(%rdi)
    RETQ
ffffffff8020b8a4:	c3                   	ret

ffffffff8020b8a5 <__RME_X64_Write_Release>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_Release:
    MFENCE
ffffffff8020b8a5:	0f ae f0             	mfence
    RETQ
ffffffff8020b8a8:	c3                   	ret

ffffffff8020b8a9 <__RME_X64_Pgt_Set>:
Input       : ptr_t Pgt - The physical address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Pgt_Set:
    MOV                 %RDI,%CR3
ffffffff8020b8a9:	0f 22 df             	mov    %rdi,%cr3
    RETQ
ffffffff8020b8ac:	c3                   	ret

ffffffff8020b8ad <__RME_Disable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Disable_Int:
    /* Disable all interrupts */
    CLI
ffffffff8020b8ad:	fa                   	cli
    RETQ
ffffffff8020b8ae:	c3                   	ret

ffffffff8020b8af <__RME_Enable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enable_Int:
    /* Enable all interrupts */
    STI
ffffffff8020b8af:	fb                   	sti
    RETQ
ffffffff8020b8b0:	c3                   	ret

ffffffff8020b8b1 <__RME_X64_Halt>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Halt:
    /* Wait for interrupt */
    HLT
ffffffff8020b8b1:	f4                   	hlt
    RETQ
ffffffff8020b8b2:	c3                   	ret

ffffffff8020b8b3 <_RME_Kmain>:
Input       : ptr_t Stack - The stack address to set SP to.
Output      : None.
Return      : None.
******************************************************************************/
_RME_Kmain:
    MOVQ                %RDI,%RSP
ffffffff8020b8b3:	48 89 fc             	mov    %rdi,%rsp
    JMP                 RME_Kmain
ffffffff8020b8b6:	e9 84 16 00 00       	jmp    ffffffff8020cf3f <RME_Kmain>

ffffffff8020b8bb <__RME_X64_MSB_Get>:
Input       : ptr_t Val - The value.
Output      : None.
Return      : ptr_t - The MSB position.
******************************************************************************/
__RME_X64_MSB_Get:
    BSRQ                %RDI,%RAX
ffffffff8020b8bb:	48 0f bd c7          	bsr    %rdi,%rax
    RETQ
ffffffff8020b8bf:	c3                   	ret

ffffffff8020b8c0 <__RME_Enter_User_Mode>:
              ptr_t CPUID - The CPUID.
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enter_User_Mode:
    MOVQ                %RDI,%RCX           /* Entry */
ffffffff8020b8c0:	48 89 f9             	mov    %rdi,%rcx
    MOVQ                %RSI,%RSP           /* Stack */
ffffffff8020b8c3:	48 89 f4             	mov    %rsi,%rsp
    MOVQ                $0x3200,%R11        /* Flags - IOPL 3, IF */
ffffffff8020b8c6:	49 c7 c3 00 32 00 00 	mov    $0x3200,%r11
    MOVQ                %RDX,%RDI           /* CPUID */
ffffffff8020b8cd:	48 89 d7             	mov    %rdx,%rdi
    SYSRETQ
ffffffff8020b8d0:	48 0f 07             	sysretq

ffffffff8020b8d3 <__RME_X64_FAULT_DE_Handler>:
    PUSHQ               $\REASON
    JMP                 Fault_Handler
.endm

/* Fault handlers */
FAULT_HANDLER NAME=__RME_X64_FAULT_DE_Handler ERRCODE=0 REASON=0
ffffffff8020b8d3:	0f 01 f8             	swapgs
ffffffff8020b8d6:	6a 00                	push   $0x0
ffffffff8020b8d8:	6a 00                	push   $0x0
ffffffff8020b8da:	e9 a6 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8df <__RME_X64_TRAP_DB_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_DB_Handler ERRCODE=0 REASON=1
ffffffff8020b8df:	0f 01 f8             	swapgs
ffffffff8020b8e2:	6a 00                	push   $0x0
ffffffff8020b8e4:	6a 01                	push   $0x1
ffffffff8020b8e6:	e9 9a 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8eb <__RME_X64_INT_NMI_Handler>:
FAULT_HANDLER NAME=__RME_X64_INT_NMI_Handler ERRCODE=0 REASON=2
ffffffff8020b8eb:	0f 01 f8             	swapgs
ffffffff8020b8ee:	6a 00                	push   $0x0
ffffffff8020b8f0:	6a 02                	push   $0x2
ffffffff8020b8f2:	e9 8e 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8f7 <__RME_X64_TRAP_BP_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_BP_Handler ERRCODE=0 REASON=3
ffffffff8020b8f7:	0f 01 f8             	swapgs
ffffffff8020b8fa:	6a 00                	push   $0x0
ffffffff8020b8fc:	6a 03                	push   $0x3
ffffffff8020b8fe:	e9 82 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b903 <__RME_X64_TRAP_OF_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_OF_Handler ERRCODE=0 REASON=4
ffffffff8020b903:	0f 01 f8             	swapgs
ffffffff8020b906:	6a 00                	push   $0x0
ffffffff8020b908:	6a 04                	push   $0x4
ffffffff8020b90a:	eb 79                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b90c <__RME_X64_FAULT_BR_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_BR_Handler ERRCODE=0 REASON=5
ffffffff8020b90c:	0f 01 f8             	swapgs
ffffffff8020b90f:	6a 00                	push   $0x0
ffffffff8020b911:	6a 05                	push   $0x5
ffffffff8020b913:	eb 70                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b915 <__RME_X64_FAULT_UD_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_UD_Handler ERRCODE=0 REASON=6
ffffffff8020b915:	0f 01 f8             	swapgs
ffffffff8020b918:	6a 00                	push   $0x0
ffffffff8020b91a:	6a 06                	push   $0x6
ffffffff8020b91c:	eb 67                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b91e <__RME_X64_FAULT_NM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NM_Handler ERRCODE=0 REASON=7
ffffffff8020b91e:	0f 01 f8             	swapgs
ffffffff8020b921:	6a 00                	push   $0x0
ffffffff8020b923:	6a 07                	push   $0x7
ffffffff8020b925:	eb 5e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b927 <__RME_X64_ABORT_DF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_DF_Handler ERRCODE=1 REASON=8
ffffffff8020b927:	0f 01 f8             	swapgs
ffffffff8020b92a:	6a 08                	push   $0x8
ffffffff8020b92c:	eb 57                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b92e <__RME_X64_ABORT_OLD_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_OLD_MF_Handler ERRCODE=0 REASON=9
ffffffff8020b92e:	0f 01 f8             	swapgs
ffffffff8020b931:	6a 00                	push   $0x0
ffffffff8020b933:	6a 09                	push   $0x9
ffffffff8020b935:	eb 4e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b937 <__RME_X64_FAULT_TS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_TS_Handler ERRCODE=1 REASON=10
ffffffff8020b937:	0f 01 f8             	swapgs
ffffffff8020b93a:	6a 0a                	push   $0xa
ffffffff8020b93c:	eb 47                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b93e <__RME_X64_FAULT_NP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NP_Handler ERRCODE=1 REASON=11
ffffffff8020b93e:	0f 01 f8             	swapgs
ffffffff8020b941:	6a 0b                	push   $0xb
ffffffff8020b943:	eb 40                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b945 <__RME_X64_FAULT_SS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_SS_Handler ERRCODE=1 REASON=12
ffffffff8020b945:	0f 01 f8             	swapgs
ffffffff8020b948:	6a 0c                	push   $0xc
ffffffff8020b94a:	eb 39                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b94c <__RME_X64_FAULT_GP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_GP_Handler ERRCODE=1 REASON=13
ffffffff8020b94c:	0f 01 f8             	swapgs
ffffffff8020b94f:	6a 0d                	push   $0xd
ffffffff8020b951:	eb 32                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b953 <__RME_X64_FAULT_PF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_PF_Handler ERRCODE=1 REASON=14
ffffffff8020b953:	0f 01 f8             	swapgs
ffffffff8020b956:	6a 0e                	push   $0xe
ffffffff8020b958:	eb 2b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b95a <__RME_X64_FAULT_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_MF_Handler ERRCODE=0 REASON=16
ffffffff8020b95a:	0f 01 f8             	swapgs
ffffffff8020b95d:	6a 00                	push   $0x0
ffffffff8020b95f:	6a 10                	push   $0x10
ffffffff8020b961:	eb 22                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b963 <__RME_X64_FAULT_AC_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_AC_Handler ERRCODE=1 REASON=17
ffffffff8020b963:	0f 01 f8             	swapgs
ffffffff8020b966:	6a 11                	push   $0x11
ffffffff8020b968:	eb 1b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b96a <__RME_X64_ABORT_MC_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_MC_Handler ERRCODE=0 REASON=18
ffffffff8020b96a:	0f 01 f8             	swapgs
ffffffff8020b96d:	6a 00                	push   $0x0
ffffffff8020b96f:	6a 12                	push   $0x12
ffffffff8020b971:	eb 12                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b973 <__RME_X64_FAULT_XM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_XM_Handler ERRCODE=0 REASON=19
ffffffff8020b973:	0f 01 f8             	swapgs
ffffffff8020b976:	6a 00                	push   $0x0
ffffffff8020b978:	6a 13                	push   $0x13
ffffffff8020b97a:	eb 09                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b97c <__RME_X64_FAULT_VE_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_VE_Handler ERRCODE=0 REASON=20
ffffffff8020b97c:	0f 01 f8             	swapgs
ffffffff8020b97f:	6a 00                	push   $0x0
ffffffff8020b981:	6a 14                	push   $0x14
ffffffff8020b983:	eb 00                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b985 <Fault_Handler>:
/* Common function body for fault handlers - reduce I-Cache usage */
Fault_Handler:
    SAVE_GP_REGS
ffffffff8020b985:	41 57                	push   %r15
ffffffff8020b987:	41 56                	push   %r14
ffffffff8020b989:	41 55                	push   %r13
ffffffff8020b98b:	41 54                	push   %r12
ffffffff8020b98d:	41 53                	push   %r11
ffffffff8020b98f:	41 52                	push   %r10
ffffffff8020b991:	41 51                	push   %r9
ffffffff8020b993:	41 50                	push   %r8
ffffffff8020b995:	55                   	push   %rbp
ffffffff8020b996:	57                   	push   %rdi
ffffffff8020b997:	56                   	push   %rsi
ffffffff8020b998:	52                   	push   %rdx
ffffffff8020b999:	51                   	push   %rcx
ffffffff8020b99a:	53                   	push   %rbx
ffffffff8020b99b:	50                   	push   %rax
ffffffff8020b99c:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020b9a0:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020b9a2:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020b9a5:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Fault_Handler
ffffffff8020b9aa:	e8 ea a7 01 00       	call   ffffffff80226199 <__RME_X64_Fault_Handler>

    RESTORE_GP_REGS
ffffffff8020b9af:	0f 01 f8             	swapgs
ffffffff8020b9b2:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020b9b6:	8e d8                	mov    %eax,%ds
ffffffff8020b9b8:	58                   	pop    %rax
ffffffff8020b9b9:	5b                   	pop    %rbx
ffffffff8020b9ba:	59                   	pop    %rcx
ffffffff8020b9bb:	5a                   	pop    %rdx
ffffffff8020b9bc:	5e                   	pop    %rsi
ffffffff8020b9bd:	5f                   	pop    %rdi
ffffffff8020b9be:	5d                   	pop    %rbp
ffffffff8020b9bf:	41 58                	pop    %r8
ffffffff8020b9c1:	41 59                	pop    %r9
ffffffff8020b9c3:	41 5a                	pop    %r10
ffffffff8020b9c5:	41 5b                	pop    %r11
ffffffff8020b9c7:	41 5c                	pop    %r12
ffffffff8020b9c9:	41 5d                	pop    %r13
ffffffff8020b9cb:	41 5e                	pop    %r14
ffffffff8020b9cd:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020b9cf:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020b9d3:	48 cf                	iretq

ffffffff8020b9d5 <__RME_X64_USER32_Handler>:
    PUSHQ               $0                  /* Make a dummy error code */
    PUSHQ               $\VECTNUM           /* Interrupt number */
    JMP                 User_Handler
.endm
/* User handlers */
USER_HANDLER NAME=__RME_X64_USER32_Handler VECTNUM=32
ffffffff8020b9d5:	0f 01 f8             	swapgs
ffffffff8020b9d8:	6a 00                	push   $0x0
ffffffff8020b9da:	6a 20                	push   $0x20
ffffffff8020b9dc:	e9 d3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9e1 <__RME_X64_USER33_Handler>:
USER_HANDLER NAME=__RME_X64_USER33_Handler VECTNUM=33
ffffffff8020b9e1:	0f 01 f8             	swapgs
ffffffff8020b9e4:	6a 00                	push   $0x0
ffffffff8020b9e6:	6a 21                	push   $0x21
ffffffff8020b9e8:	e9 c7 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9ed <__RME_X64_USER34_Handler>:
USER_HANDLER NAME=__RME_X64_USER34_Handler VECTNUM=34
ffffffff8020b9ed:	0f 01 f8             	swapgs
ffffffff8020b9f0:	6a 00                	push   $0x0
ffffffff8020b9f2:	6a 22                	push   $0x22
ffffffff8020b9f4:	e9 bb 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9f9 <__RME_X64_USER35_Handler>:
USER_HANDLER NAME=__RME_X64_USER35_Handler VECTNUM=35
ffffffff8020b9f9:	0f 01 f8             	swapgs
ffffffff8020b9fc:	6a 00                	push   $0x0
ffffffff8020b9fe:	6a 23                	push   $0x23
ffffffff8020ba00:	e9 af 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba05 <__RME_X64_USER36_Handler>:
USER_HANDLER NAME=__RME_X64_USER36_Handler VECTNUM=36
ffffffff8020ba05:	0f 01 f8             	swapgs
ffffffff8020ba08:	6a 00                	push   $0x0
ffffffff8020ba0a:	6a 24                	push   $0x24
ffffffff8020ba0c:	e9 a3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba11 <__RME_X64_USER37_Handler>:
USER_HANDLER NAME=__RME_X64_USER37_Handler VECTNUM=37
ffffffff8020ba11:	0f 01 f8             	swapgs
ffffffff8020ba14:	6a 00                	push   $0x0
ffffffff8020ba16:	6a 25                	push   $0x25
ffffffff8020ba18:	e9 97 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba1d <__RME_X64_USER38_Handler>:
USER_HANDLER NAME=__RME_X64_USER38_Handler VECTNUM=38
ffffffff8020ba1d:	0f 01 f8             	swapgs
ffffffff8020ba20:	6a 00                	push   $0x0
ffffffff8020ba22:	6a 26                	push   $0x26
ffffffff8020ba24:	e9 8b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba29 <__RME_X64_USER39_Handler>:
USER_HANDLER NAME=__RME_X64_USER39_Handler VECTNUM=39
ffffffff8020ba29:	0f 01 f8             	swapgs
ffffffff8020ba2c:	6a 00                	push   $0x0
ffffffff8020ba2e:	6a 27                	push   $0x27
ffffffff8020ba30:	e9 7f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba35 <__RME_X64_USER40_Handler>:

USER_HANDLER NAME=__RME_X64_USER40_Handler VECTNUM=40
ffffffff8020ba35:	0f 01 f8             	swapgs
ffffffff8020ba38:	6a 00                	push   $0x0
ffffffff8020ba3a:	6a 28                	push   $0x28
ffffffff8020ba3c:	e9 73 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba41 <__RME_X64_USER41_Handler>:
USER_HANDLER NAME=__RME_X64_USER41_Handler VECTNUM=41
ffffffff8020ba41:	0f 01 f8             	swapgs
ffffffff8020ba44:	6a 00                	push   $0x0
ffffffff8020ba46:	6a 29                	push   $0x29
ffffffff8020ba48:	e9 67 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba4d <__RME_X64_USER42_Handler>:
USER_HANDLER NAME=__RME_X64_USER42_Handler VECTNUM=42
ffffffff8020ba4d:	0f 01 f8             	swapgs
ffffffff8020ba50:	6a 00                	push   $0x0
ffffffff8020ba52:	6a 2a                	push   $0x2a
ffffffff8020ba54:	e9 5b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba59 <__RME_X64_USER43_Handler>:
USER_HANDLER NAME=__RME_X64_USER43_Handler VECTNUM=43
ffffffff8020ba59:	0f 01 f8             	swapgs
ffffffff8020ba5c:	6a 00                	push   $0x0
ffffffff8020ba5e:	6a 2b                	push   $0x2b
ffffffff8020ba60:	e9 4f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba65 <__RME_X64_USER44_Handler>:
USER_HANDLER NAME=__RME_X64_USER44_Handler VECTNUM=44
ffffffff8020ba65:	0f 01 f8             	swapgs
ffffffff8020ba68:	6a 00                	push   $0x0
ffffffff8020ba6a:	6a 2c                	push   $0x2c
ffffffff8020ba6c:	e9 43 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba71 <__RME_X64_USER45_Handler>:
USER_HANDLER NAME=__RME_X64_USER45_Handler VECTNUM=45
ffffffff8020ba71:	0f 01 f8             	swapgs
ffffffff8020ba74:	6a 00                	push   $0x0
ffffffff8020ba76:	6a 2d                	push   $0x2d
ffffffff8020ba78:	e9 37 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba7d <__RME_X64_USER46_Handler>:
USER_HANDLER NAME=__RME_X64_USER46_Handler VECTNUM=46
ffffffff8020ba7d:	0f 01 f8             	swapgs
ffffffff8020ba80:	6a 00                	push   $0x0
ffffffff8020ba82:	6a 2e                	push   $0x2e
ffffffff8020ba84:	e9 2b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba89 <__RME_X64_USER47_Handler>:
USER_HANDLER NAME=__RME_X64_USER47_Handler VECTNUM=47
ffffffff8020ba89:	0f 01 f8             	swapgs
ffffffff8020ba8c:	6a 00                	push   $0x0
ffffffff8020ba8e:	6a 2f                	push   $0x2f
ffffffff8020ba90:	e9 1f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba95 <__RME_X64_USER48_Handler>:
USER_HANDLER NAME=__RME_X64_USER48_Handler VECTNUM=48
ffffffff8020ba95:	0f 01 f8             	swapgs
ffffffff8020ba98:	6a 00                	push   $0x0
ffffffff8020ba9a:	6a 30                	push   $0x30
ffffffff8020ba9c:	e9 13 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baa1 <__RME_X64_USER49_Handler>:
USER_HANDLER NAME=__RME_X64_USER49_Handler VECTNUM=49
ffffffff8020baa1:	0f 01 f8             	swapgs
ffffffff8020baa4:	6a 00                	push   $0x0
ffffffff8020baa6:	6a 31                	push   $0x31
ffffffff8020baa8:	e9 07 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baad <__RME_X64_USER50_Handler>:

USER_HANDLER NAME=__RME_X64_USER50_Handler VECTNUM=50
ffffffff8020baad:	0f 01 f8             	swapgs
ffffffff8020bab0:	6a 00                	push   $0x0
ffffffff8020bab2:	6a 32                	push   $0x32
ffffffff8020bab4:	e9 fb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bab9 <__RME_X64_USER51_Handler>:
USER_HANDLER NAME=__RME_X64_USER51_Handler VECTNUM=51
ffffffff8020bab9:	0f 01 f8             	swapgs
ffffffff8020babc:	6a 00                	push   $0x0
ffffffff8020babe:	6a 33                	push   $0x33
ffffffff8020bac0:	e9 ef 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bac5 <__RME_X64_USER52_Handler>:
USER_HANDLER NAME=__RME_X64_USER52_Handler VECTNUM=52
ffffffff8020bac5:	0f 01 f8             	swapgs
ffffffff8020bac8:	6a 00                	push   $0x0
ffffffff8020baca:	6a 34                	push   $0x34
ffffffff8020bacc:	e9 e3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bad1 <__RME_X64_USER53_Handler>:
USER_HANDLER NAME=__RME_X64_USER53_Handler VECTNUM=53
ffffffff8020bad1:	0f 01 f8             	swapgs
ffffffff8020bad4:	6a 00                	push   $0x0
ffffffff8020bad6:	6a 35                	push   $0x35
ffffffff8020bad8:	e9 d7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020badd <__RME_X64_USER54_Handler>:
USER_HANDLER NAME=__RME_X64_USER54_Handler VECTNUM=54
ffffffff8020badd:	0f 01 f8             	swapgs
ffffffff8020bae0:	6a 00                	push   $0x0
ffffffff8020bae2:	6a 36                	push   $0x36
ffffffff8020bae4:	e9 cb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bae9 <__RME_X64_USER55_Handler>:
USER_HANDLER NAME=__RME_X64_USER55_Handler VECTNUM=55
ffffffff8020bae9:	0f 01 f8             	swapgs
ffffffff8020baec:	6a 00                	push   $0x0
ffffffff8020baee:	6a 37                	push   $0x37
ffffffff8020baf0:	e9 bf 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baf5 <__RME_X64_USER56_Handler>:
USER_HANDLER NAME=__RME_X64_USER56_Handler VECTNUM=56
ffffffff8020baf5:	0f 01 f8             	swapgs
ffffffff8020baf8:	6a 00                	push   $0x0
ffffffff8020bafa:	6a 38                	push   $0x38
ffffffff8020bafc:	e9 b3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb01 <__RME_X64_USER57_Handler>:
USER_HANDLER NAME=__RME_X64_USER57_Handler VECTNUM=57
ffffffff8020bb01:	0f 01 f8             	swapgs
ffffffff8020bb04:	6a 00                	push   $0x0
ffffffff8020bb06:	6a 39                	push   $0x39
ffffffff8020bb08:	e9 a7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb0d <__RME_X64_USER58_Handler>:
USER_HANDLER NAME=__RME_X64_USER58_Handler VECTNUM=58
ffffffff8020bb0d:	0f 01 f8             	swapgs
ffffffff8020bb10:	6a 00                	push   $0x0
ffffffff8020bb12:	6a 3a                	push   $0x3a
ffffffff8020bb14:	e9 9b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb19 <__RME_X64_USER59_Handler>:
USER_HANDLER NAME=__RME_X64_USER59_Handler VECTNUM=59
ffffffff8020bb19:	0f 01 f8             	swapgs
ffffffff8020bb1c:	6a 00                	push   $0x0
ffffffff8020bb1e:	6a 3b                	push   $0x3b
ffffffff8020bb20:	e9 8f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb25 <__RME_X64_USER60_Handler>:

USER_HANDLER NAME=__RME_X64_USER60_Handler VECTNUM=60
ffffffff8020bb25:	0f 01 f8             	swapgs
ffffffff8020bb28:	6a 00                	push   $0x0
ffffffff8020bb2a:	6a 3c                	push   $0x3c
ffffffff8020bb2c:	e9 83 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb31 <__RME_X64_USER61_Handler>:
USER_HANDLER NAME=__RME_X64_USER61_Handler VECTNUM=61
ffffffff8020bb31:	0f 01 f8             	swapgs
ffffffff8020bb34:	6a 00                	push   $0x0
ffffffff8020bb36:	6a 3d                	push   $0x3d
ffffffff8020bb38:	e9 77 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb3d <__RME_X64_USER62_Handler>:
USER_HANDLER NAME=__RME_X64_USER62_Handler VECTNUM=62
ffffffff8020bb3d:	0f 01 f8             	swapgs
ffffffff8020bb40:	6a 00                	push   $0x0
ffffffff8020bb42:	6a 3e                	push   $0x3e
ffffffff8020bb44:	e9 6b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb49 <__RME_X64_USER63_Handler>:
USER_HANDLER NAME=__RME_X64_USER63_Handler VECTNUM=63
ffffffff8020bb49:	0f 01 f8             	swapgs
ffffffff8020bb4c:	6a 00                	push   $0x0
ffffffff8020bb4e:	6a 3f                	push   $0x3f
ffffffff8020bb50:	e9 5f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb55 <__RME_X64_USER64_Handler>:
USER_HANDLER NAME=__RME_X64_USER64_Handler VECTNUM=64
ffffffff8020bb55:	0f 01 f8             	swapgs
ffffffff8020bb58:	6a 00                	push   $0x0
ffffffff8020bb5a:	6a 40                	push   $0x40
ffffffff8020bb5c:	e9 53 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb61 <__RME_X64_USER65_Handler>:
USER_HANDLER NAME=__RME_X64_USER65_Handler VECTNUM=65
ffffffff8020bb61:	0f 01 f8             	swapgs
ffffffff8020bb64:	6a 00                	push   $0x0
ffffffff8020bb66:	6a 41                	push   $0x41
ffffffff8020bb68:	e9 47 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb6d <__RME_X64_USER66_Handler>:
USER_HANDLER NAME=__RME_X64_USER66_Handler VECTNUM=66
ffffffff8020bb6d:	0f 01 f8             	swapgs
ffffffff8020bb70:	6a 00                	push   $0x0
ffffffff8020bb72:	6a 42                	push   $0x42
ffffffff8020bb74:	e9 3b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb79 <__RME_X64_USER67_Handler>:
USER_HANDLER NAME=__RME_X64_USER67_Handler VECTNUM=67
ffffffff8020bb79:	0f 01 f8             	swapgs
ffffffff8020bb7c:	6a 00                	push   $0x0
ffffffff8020bb7e:	6a 43                	push   $0x43
ffffffff8020bb80:	e9 2f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb85 <__RME_X64_USER68_Handler>:
USER_HANDLER NAME=__RME_X64_USER68_Handler VECTNUM=68
ffffffff8020bb85:	0f 01 f8             	swapgs
ffffffff8020bb88:	6a 00                	push   $0x0
ffffffff8020bb8a:	6a 44                	push   $0x44
ffffffff8020bb8c:	e9 23 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb91 <__RME_X64_USER69_Handler>:
USER_HANDLER NAME=__RME_X64_USER69_Handler VECTNUM=69
ffffffff8020bb91:	0f 01 f8             	swapgs
ffffffff8020bb94:	6a 00                	push   $0x0
ffffffff8020bb96:	6a 45                	push   $0x45
ffffffff8020bb98:	e9 17 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb9d <__RME_X64_USER70_Handler>:

USER_HANDLER NAME=__RME_X64_USER70_Handler VECTNUM=70
ffffffff8020bb9d:	0f 01 f8             	swapgs
ffffffff8020bba0:	6a 00                	push   $0x0
ffffffff8020bba2:	6a 46                	push   $0x46
ffffffff8020bba4:	e9 0b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bba9 <__RME_X64_USER71_Handler>:
USER_HANDLER NAME=__RME_X64_USER71_Handler VECTNUM=71
ffffffff8020bba9:	0f 01 f8             	swapgs
ffffffff8020bbac:	6a 00                	push   $0x0
ffffffff8020bbae:	6a 47                	push   $0x47
ffffffff8020bbb0:	e9 ff 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbb5 <__RME_X64_USER72_Handler>:
USER_HANDLER NAME=__RME_X64_USER72_Handler VECTNUM=72
ffffffff8020bbb5:	0f 01 f8             	swapgs
ffffffff8020bbb8:	6a 00                	push   $0x0
ffffffff8020bbba:	6a 48                	push   $0x48
ffffffff8020bbbc:	e9 f3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbc1 <__RME_X64_USER73_Handler>:
USER_HANDLER NAME=__RME_X64_USER73_Handler VECTNUM=73
ffffffff8020bbc1:	0f 01 f8             	swapgs
ffffffff8020bbc4:	6a 00                	push   $0x0
ffffffff8020bbc6:	6a 49                	push   $0x49
ffffffff8020bbc8:	e9 e7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbcd <__RME_X64_USER74_Handler>:
USER_HANDLER NAME=__RME_X64_USER74_Handler VECTNUM=74
ffffffff8020bbcd:	0f 01 f8             	swapgs
ffffffff8020bbd0:	6a 00                	push   $0x0
ffffffff8020bbd2:	6a 4a                	push   $0x4a
ffffffff8020bbd4:	e9 db 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbd9 <__RME_X64_USER75_Handler>:
USER_HANDLER NAME=__RME_X64_USER75_Handler VECTNUM=75
ffffffff8020bbd9:	0f 01 f8             	swapgs
ffffffff8020bbdc:	6a 00                	push   $0x0
ffffffff8020bbde:	6a 4b                	push   $0x4b
ffffffff8020bbe0:	e9 cf 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbe5 <__RME_X64_USER76_Handler>:
USER_HANDLER NAME=__RME_X64_USER76_Handler VECTNUM=76
ffffffff8020bbe5:	0f 01 f8             	swapgs
ffffffff8020bbe8:	6a 00                	push   $0x0
ffffffff8020bbea:	6a 4c                	push   $0x4c
ffffffff8020bbec:	e9 c3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbf1 <__RME_X64_USER77_Handler>:
USER_HANDLER NAME=__RME_X64_USER77_Handler VECTNUM=77
ffffffff8020bbf1:	0f 01 f8             	swapgs
ffffffff8020bbf4:	6a 00                	push   $0x0
ffffffff8020bbf6:	6a 4d                	push   $0x4d
ffffffff8020bbf8:	e9 b7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbfd <__RME_X64_USER78_Handler>:
USER_HANDLER NAME=__RME_X64_USER78_Handler VECTNUM=78
ffffffff8020bbfd:	0f 01 f8             	swapgs
ffffffff8020bc00:	6a 00                	push   $0x0
ffffffff8020bc02:	6a 4e                	push   $0x4e
ffffffff8020bc04:	e9 ab 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc09 <__RME_X64_USER79_Handler>:
USER_HANDLER NAME=__RME_X64_USER79_Handler VECTNUM=79
ffffffff8020bc09:	0f 01 f8             	swapgs
ffffffff8020bc0c:	6a 00                	push   $0x0
ffffffff8020bc0e:	6a 4f                	push   $0x4f
ffffffff8020bc10:	e9 9f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc15 <__RME_X64_USER80_Handler>:

USER_HANDLER NAME=__RME_X64_USER80_Handler VECTNUM=80
ffffffff8020bc15:	0f 01 f8             	swapgs
ffffffff8020bc18:	6a 00                	push   $0x0
ffffffff8020bc1a:	6a 50                	push   $0x50
ffffffff8020bc1c:	e9 93 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc21 <__RME_X64_USER81_Handler>:
USER_HANDLER NAME=__RME_X64_USER81_Handler VECTNUM=81
ffffffff8020bc21:	0f 01 f8             	swapgs
ffffffff8020bc24:	6a 00                	push   $0x0
ffffffff8020bc26:	6a 51                	push   $0x51
ffffffff8020bc28:	e9 87 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc2d <__RME_X64_USER82_Handler>:
USER_HANDLER NAME=__RME_X64_USER82_Handler VECTNUM=82
ffffffff8020bc2d:	0f 01 f8             	swapgs
ffffffff8020bc30:	6a 00                	push   $0x0
ffffffff8020bc32:	6a 52                	push   $0x52
ffffffff8020bc34:	e9 7b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc39 <__RME_X64_USER83_Handler>:
USER_HANDLER NAME=__RME_X64_USER83_Handler VECTNUM=83
ffffffff8020bc39:	0f 01 f8             	swapgs
ffffffff8020bc3c:	6a 00                	push   $0x0
ffffffff8020bc3e:	6a 53                	push   $0x53
ffffffff8020bc40:	e9 6f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc45 <__RME_X64_USER84_Handler>:
USER_HANDLER NAME=__RME_X64_USER84_Handler VECTNUM=84
ffffffff8020bc45:	0f 01 f8             	swapgs
ffffffff8020bc48:	6a 00                	push   $0x0
ffffffff8020bc4a:	6a 54                	push   $0x54
ffffffff8020bc4c:	e9 63 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc51 <__RME_X64_USER85_Handler>:
USER_HANDLER NAME=__RME_X64_USER85_Handler VECTNUM=85
ffffffff8020bc51:	0f 01 f8             	swapgs
ffffffff8020bc54:	6a 00                	push   $0x0
ffffffff8020bc56:	6a 55                	push   $0x55
ffffffff8020bc58:	e9 57 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc5d <__RME_X64_USER86_Handler>:
USER_HANDLER NAME=__RME_X64_USER86_Handler VECTNUM=86
ffffffff8020bc5d:	0f 01 f8             	swapgs
ffffffff8020bc60:	6a 00                	push   $0x0
ffffffff8020bc62:	6a 56                	push   $0x56
ffffffff8020bc64:	e9 4b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc69 <__RME_X64_USER87_Handler>:
USER_HANDLER NAME=__RME_X64_USER87_Handler VECTNUM=87
ffffffff8020bc69:	0f 01 f8             	swapgs
ffffffff8020bc6c:	6a 00                	push   $0x0
ffffffff8020bc6e:	6a 57                	push   $0x57
ffffffff8020bc70:	e9 3f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc75 <__RME_X64_USER88_Handler>:
USER_HANDLER NAME=__RME_X64_USER88_Handler VECTNUM=88
ffffffff8020bc75:	0f 01 f8             	swapgs
ffffffff8020bc78:	6a 00                	push   $0x0
ffffffff8020bc7a:	6a 58                	push   $0x58
ffffffff8020bc7c:	e9 33 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc81 <__RME_X64_USER89_Handler>:
USER_HANDLER NAME=__RME_X64_USER89_Handler VECTNUM=89
ffffffff8020bc81:	0f 01 f8             	swapgs
ffffffff8020bc84:	6a 00                	push   $0x0
ffffffff8020bc86:	6a 59                	push   $0x59
ffffffff8020bc88:	e9 27 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc8d <__RME_X64_USER90_Handler>:

USER_HANDLER NAME=__RME_X64_USER90_Handler VECTNUM=90
ffffffff8020bc8d:	0f 01 f8             	swapgs
ffffffff8020bc90:	6a 00                	push   $0x0
ffffffff8020bc92:	6a 5a                	push   $0x5a
ffffffff8020bc94:	e9 1b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc99 <__RME_X64_USER91_Handler>:
USER_HANDLER NAME=__RME_X64_USER91_Handler VECTNUM=91
ffffffff8020bc99:	0f 01 f8             	swapgs
ffffffff8020bc9c:	6a 00                	push   $0x0
ffffffff8020bc9e:	6a 5b                	push   $0x5b
ffffffff8020bca0:	e9 0f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bca5 <__RME_X64_USER92_Handler>:
USER_HANDLER NAME=__RME_X64_USER92_Handler VECTNUM=92
ffffffff8020bca5:	0f 01 f8             	swapgs
ffffffff8020bca8:	6a 00                	push   $0x0
ffffffff8020bcaa:	6a 5c                	push   $0x5c
ffffffff8020bcac:	e9 03 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcb1 <__RME_X64_USER93_Handler>:
USER_HANDLER NAME=__RME_X64_USER93_Handler VECTNUM=93
ffffffff8020bcb1:	0f 01 f8             	swapgs
ffffffff8020bcb4:	6a 00                	push   $0x0
ffffffff8020bcb6:	6a 5d                	push   $0x5d
ffffffff8020bcb8:	e9 f7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcbd <__RME_X64_USER94_Handler>:
USER_HANDLER NAME=__RME_X64_USER94_Handler VECTNUM=94
ffffffff8020bcbd:	0f 01 f8             	swapgs
ffffffff8020bcc0:	6a 00                	push   $0x0
ffffffff8020bcc2:	6a 5e                	push   $0x5e
ffffffff8020bcc4:	e9 eb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcc9 <__RME_X64_USER95_Handler>:
USER_HANDLER NAME=__RME_X64_USER95_Handler VECTNUM=95
ffffffff8020bcc9:	0f 01 f8             	swapgs
ffffffff8020bccc:	6a 00                	push   $0x0
ffffffff8020bcce:	6a 5f                	push   $0x5f
ffffffff8020bcd0:	e9 df 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcd5 <__RME_X64_USER96_Handler>:
USER_HANDLER NAME=__RME_X64_USER96_Handler VECTNUM=96
ffffffff8020bcd5:	0f 01 f8             	swapgs
ffffffff8020bcd8:	6a 00                	push   $0x0
ffffffff8020bcda:	6a 60                	push   $0x60
ffffffff8020bcdc:	e9 d3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bce1 <__RME_X64_USER97_Handler>:
USER_HANDLER NAME=__RME_X64_USER97_Handler VECTNUM=97
ffffffff8020bce1:	0f 01 f8             	swapgs
ffffffff8020bce4:	6a 00                	push   $0x0
ffffffff8020bce6:	6a 61                	push   $0x61
ffffffff8020bce8:	e9 c7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bced <__RME_X64_USER98_Handler>:
USER_HANDLER NAME=__RME_X64_USER98_Handler VECTNUM=98
ffffffff8020bced:	0f 01 f8             	swapgs
ffffffff8020bcf0:	6a 00                	push   $0x0
ffffffff8020bcf2:	6a 62                	push   $0x62
ffffffff8020bcf4:	e9 bb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcf9 <__RME_X64_USER99_Handler>:
USER_HANDLER NAME=__RME_X64_USER99_Handler VECTNUM=99
ffffffff8020bcf9:	0f 01 f8             	swapgs
ffffffff8020bcfc:	6a 00                	push   $0x0
ffffffff8020bcfe:	6a 63                	push   $0x63
ffffffff8020bd00:	e9 af 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd05 <__RME_X64_USER100_Handler>:

USER_HANDLER NAME=__RME_X64_USER100_Handler VECTNUM=100
ffffffff8020bd05:	0f 01 f8             	swapgs
ffffffff8020bd08:	6a 00                	push   $0x0
ffffffff8020bd0a:	6a 64                	push   $0x64
ffffffff8020bd0c:	e9 a3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd11 <__RME_X64_USER101_Handler>:
USER_HANDLER NAME=__RME_X64_USER101_Handler VECTNUM=101
ffffffff8020bd11:	0f 01 f8             	swapgs
ffffffff8020bd14:	6a 00                	push   $0x0
ffffffff8020bd16:	6a 65                	push   $0x65
ffffffff8020bd18:	e9 97 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd1d <__RME_X64_USER102_Handler>:
USER_HANDLER NAME=__RME_X64_USER102_Handler VECTNUM=102
ffffffff8020bd1d:	0f 01 f8             	swapgs
ffffffff8020bd20:	6a 00                	push   $0x0
ffffffff8020bd22:	6a 66                	push   $0x66
ffffffff8020bd24:	e9 8b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd29 <__RME_X64_USER103_Handler>:
USER_HANDLER NAME=__RME_X64_USER103_Handler VECTNUM=103
ffffffff8020bd29:	0f 01 f8             	swapgs
ffffffff8020bd2c:	6a 00                	push   $0x0
ffffffff8020bd2e:	6a 67                	push   $0x67
ffffffff8020bd30:	e9 7f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd35 <__RME_X64_USER104_Handler>:
USER_HANDLER NAME=__RME_X64_USER104_Handler VECTNUM=104
ffffffff8020bd35:	0f 01 f8             	swapgs
ffffffff8020bd38:	6a 00                	push   $0x0
ffffffff8020bd3a:	6a 68                	push   $0x68
ffffffff8020bd3c:	e9 73 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd41 <__RME_X64_USER105_Handler>:
USER_HANDLER NAME=__RME_X64_USER105_Handler VECTNUM=105
ffffffff8020bd41:	0f 01 f8             	swapgs
ffffffff8020bd44:	6a 00                	push   $0x0
ffffffff8020bd46:	6a 69                	push   $0x69
ffffffff8020bd48:	e9 67 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd4d <__RME_X64_USER106_Handler>:
USER_HANDLER NAME=__RME_X64_USER106_Handler VECTNUM=106
ffffffff8020bd4d:	0f 01 f8             	swapgs
ffffffff8020bd50:	6a 00                	push   $0x0
ffffffff8020bd52:	6a 6a                	push   $0x6a
ffffffff8020bd54:	e9 5b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd59 <__RME_X64_USER107_Handler>:
USER_HANDLER NAME=__RME_X64_USER107_Handler VECTNUM=107
ffffffff8020bd59:	0f 01 f8             	swapgs
ffffffff8020bd5c:	6a 00                	push   $0x0
ffffffff8020bd5e:	6a 6b                	push   $0x6b
ffffffff8020bd60:	e9 4f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd65 <__RME_X64_USER108_Handler>:
USER_HANDLER NAME=__RME_X64_USER108_Handler VECTNUM=108
ffffffff8020bd65:	0f 01 f8             	swapgs
ffffffff8020bd68:	6a 00                	push   $0x0
ffffffff8020bd6a:	6a 6c                	push   $0x6c
ffffffff8020bd6c:	e9 43 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd71 <__RME_X64_USER109_Handler>:
USER_HANDLER NAME=__RME_X64_USER109_Handler VECTNUM=109
ffffffff8020bd71:	0f 01 f8             	swapgs
ffffffff8020bd74:	6a 00                	push   $0x0
ffffffff8020bd76:	6a 6d                	push   $0x6d
ffffffff8020bd78:	e9 37 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd7d <__RME_X64_USER110_Handler>:

USER_HANDLER NAME=__RME_X64_USER110_Handler VECTNUM=110
ffffffff8020bd7d:	0f 01 f8             	swapgs
ffffffff8020bd80:	6a 00                	push   $0x0
ffffffff8020bd82:	6a 6e                	push   $0x6e
ffffffff8020bd84:	e9 2b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd89 <__RME_X64_USER111_Handler>:
USER_HANDLER NAME=__RME_X64_USER111_Handler VECTNUM=111
ffffffff8020bd89:	0f 01 f8             	swapgs
ffffffff8020bd8c:	6a 00                	push   $0x0
ffffffff8020bd8e:	6a 6f                	push   $0x6f
ffffffff8020bd90:	e9 1f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd95 <__RME_X64_USER112_Handler>:
USER_HANDLER NAME=__RME_X64_USER112_Handler VECTNUM=112
ffffffff8020bd95:	0f 01 f8             	swapgs
ffffffff8020bd98:	6a 00                	push   $0x0
ffffffff8020bd9a:	6a 70                	push   $0x70
ffffffff8020bd9c:	e9 13 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bda1 <__RME_X64_USER113_Handler>:
USER_HANDLER NAME=__RME_X64_USER113_Handler VECTNUM=113
ffffffff8020bda1:	0f 01 f8             	swapgs
ffffffff8020bda4:	6a 00                	push   $0x0
ffffffff8020bda6:	6a 71                	push   $0x71
ffffffff8020bda8:	e9 07 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdad <__RME_X64_USER114_Handler>:
USER_HANDLER NAME=__RME_X64_USER114_Handler VECTNUM=114
ffffffff8020bdad:	0f 01 f8             	swapgs
ffffffff8020bdb0:	6a 00                	push   $0x0
ffffffff8020bdb2:	6a 72                	push   $0x72
ffffffff8020bdb4:	e9 fb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdb9 <__RME_X64_USER115_Handler>:
USER_HANDLER NAME=__RME_X64_USER115_Handler VECTNUM=115
ffffffff8020bdb9:	0f 01 f8             	swapgs
ffffffff8020bdbc:	6a 00                	push   $0x0
ffffffff8020bdbe:	6a 73                	push   $0x73
ffffffff8020bdc0:	e9 ef 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdc5 <__RME_X64_USER116_Handler>:
USER_HANDLER NAME=__RME_X64_USER116_Handler VECTNUM=116
ffffffff8020bdc5:	0f 01 f8             	swapgs
ffffffff8020bdc8:	6a 00                	push   $0x0
ffffffff8020bdca:	6a 74                	push   $0x74
ffffffff8020bdcc:	e9 e3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdd1 <__RME_X64_USER117_Handler>:
USER_HANDLER NAME=__RME_X64_USER117_Handler VECTNUM=117
ffffffff8020bdd1:	0f 01 f8             	swapgs
ffffffff8020bdd4:	6a 00                	push   $0x0
ffffffff8020bdd6:	6a 75                	push   $0x75
ffffffff8020bdd8:	e9 d7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bddd <__RME_X64_USER118_Handler>:
USER_HANDLER NAME=__RME_X64_USER118_Handler VECTNUM=118
ffffffff8020bddd:	0f 01 f8             	swapgs
ffffffff8020bde0:	6a 00                	push   $0x0
ffffffff8020bde2:	6a 76                	push   $0x76
ffffffff8020bde4:	e9 cb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bde9 <__RME_X64_USER119_Handler>:
USER_HANDLER NAME=__RME_X64_USER119_Handler VECTNUM=119
ffffffff8020bde9:	0f 01 f8             	swapgs
ffffffff8020bdec:	6a 00                	push   $0x0
ffffffff8020bdee:	6a 77                	push   $0x77
ffffffff8020bdf0:	e9 bf 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdf5 <__RME_X64_USER120_Handler>:

USER_HANDLER NAME=__RME_X64_USER120_Handler VECTNUM=120
ffffffff8020bdf5:	0f 01 f8             	swapgs
ffffffff8020bdf8:	6a 00                	push   $0x0
ffffffff8020bdfa:	6a 78                	push   $0x78
ffffffff8020bdfc:	e9 b3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be01 <__RME_X64_USER121_Handler>:
USER_HANDLER NAME=__RME_X64_USER121_Handler VECTNUM=121
ffffffff8020be01:	0f 01 f8             	swapgs
ffffffff8020be04:	6a 00                	push   $0x0
ffffffff8020be06:	6a 79                	push   $0x79
ffffffff8020be08:	e9 a7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be0d <__RME_X64_USER122_Handler>:
USER_HANDLER NAME=__RME_X64_USER122_Handler VECTNUM=122
ffffffff8020be0d:	0f 01 f8             	swapgs
ffffffff8020be10:	6a 00                	push   $0x0
ffffffff8020be12:	6a 7a                	push   $0x7a
ffffffff8020be14:	e9 9b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be19 <__RME_X64_USER123_Handler>:
USER_HANDLER NAME=__RME_X64_USER123_Handler VECTNUM=123
ffffffff8020be19:	0f 01 f8             	swapgs
ffffffff8020be1c:	6a 00                	push   $0x0
ffffffff8020be1e:	6a 7b                	push   $0x7b
ffffffff8020be20:	e9 8f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be25 <__RME_X64_USER124_Handler>:
USER_HANDLER NAME=__RME_X64_USER124_Handler VECTNUM=124
ffffffff8020be25:	0f 01 f8             	swapgs
ffffffff8020be28:	6a 00                	push   $0x0
ffffffff8020be2a:	6a 7c                	push   $0x7c
ffffffff8020be2c:	e9 83 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be31 <__RME_X64_USER125_Handler>:
USER_HANDLER NAME=__RME_X64_USER125_Handler VECTNUM=125
ffffffff8020be31:	0f 01 f8             	swapgs
ffffffff8020be34:	6a 00                	push   $0x0
ffffffff8020be36:	6a 7d                	push   $0x7d
ffffffff8020be38:	e9 77 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be3d <__RME_X64_USER126_Handler>:
USER_HANDLER NAME=__RME_X64_USER126_Handler VECTNUM=126
ffffffff8020be3d:	0f 01 f8             	swapgs
ffffffff8020be40:	6a 00                	push   $0x0
ffffffff8020be42:	6a 7e                	push   $0x7e
ffffffff8020be44:	e9 6b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be49 <__RME_X64_USER127_Handler>:
USER_HANDLER NAME=__RME_X64_USER127_Handler VECTNUM=127
ffffffff8020be49:	0f 01 f8             	swapgs
ffffffff8020be4c:	6a 00                	push   $0x0
ffffffff8020be4e:	6a 7f                	push   $0x7f
ffffffff8020be50:	e9 5f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be55 <__RME_X64_USER128_Handler>:
USER_HANDLER NAME=__RME_X64_USER128_Handler VECTNUM=128
ffffffff8020be55:	0f 01 f8             	swapgs
ffffffff8020be58:	6a 00                	push   $0x0
ffffffff8020be5a:	68 80 00 00 00       	push   $0x80
ffffffff8020be5f:	e9 50 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be64 <__RME_X64_USER129_Handler>:
USER_HANDLER NAME=__RME_X64_USER129_Handler VECTNUM=129
ffffffff8020be64:	0f 01 f8             	swapgs
ffffffff8020be67:	6a 00                	push   $0x0
ffffffff8020be69:	68 81 00 00 00       	push   $0x81
ffffffff8020be6e:	e9 41 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be73 <__RME_X64_USER130_Handler>:

USER_HANDLER NAME=__RME_X64_USER130_Handler VECTNUM=130
ffffffff8020be73:	0f 01 f8             	swapgs
ffffffff8020be76:	6a 00                	push   $0x0
ffffffff8020be78:	68 82 00 00 00       	push   $0x82
ffffffff8020be7d:	e9 32 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be82 <__RME_X64_USER131_Handler>:
USER_HANDLER NAME=__RME_X64_USER131_Handler VECTNUM=131
ffffffff8020be82:	0f 01 f8             	swapgs
ffffffff8020be85:	6a 00                	push   $0x0
ffffffff8020be87:	68 83 00 00 00       	push   $0x83
ffffffff8020be8c:	e9 23 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be91 <__RME_X64_USER132_Handler>:
USER_HANDLER NAME=__RME_X64_USER132_Handler VECTNUM=132
ffffffff8020be91:	0f 01 f8             	swapgs
ffffffff8020be94:	6a 00                	push   $0x0
ffffffff8020be96:	68 84 00 00 00       	push   $0x84
ffffffff8020be9b:	e9 14 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bea0 <__RME_X64_USER133_Handler>:
USER_HANDLER NAME=__RME_X64_USER133_Handler VECTNUM=133
ffffffff8020bea0:	0f 01 f8             	swapgs
ffffffff8020bea3:	6a 00                	push   $0x0
ffffffff8020bea5:	68 85 00 00 00       	push   $0x85
ffffffff8020beaa:	e9 05 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beaf <__RME_X64_USER134_Handler>:
USER_HANDLER NAME=__RME_X64_USER134_Handler VECTNUM=134
ffffffff8020beaf:	0f 01 f8             	swapgs
ffffffff8020beb2:	6a 00                	push   $0x0
ffffffff8020beb4:	68 86 00 00 00       	push   $0x86
ffffffff8020beb9:	e9 f6 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bebe <__RME_X64_USER135_Handler>:
USER_HANDLER NAME=__RME_X64_USER135_Handler VECTNUM=135
ffffffff8020bebe:	0f 01 f8             	swapgs
ffffffff8020bec1:	6a 00                	push   $0x0
ffffffff8020bec3:	68 87 00 00 00       	push   $0x87
ffffffff8020bec8:	e9 e7 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020becd <__RME_X64_USER136_Handler>:
USER_HANDLER NAME=__RME_X64_USER136_Handler VECTNUM=136
ffffffff8020becd:	0f 01 f8             	swapgs
ffffffff8020bed0:	6a 00                	push   $0x0
ffffffff8020bed2:	68 88 00 00 00       	push   $0x88
ffffffff8020bed7:	e9 d8 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bedc <__RME_X64_USER137_Handler>:
USER_HANDLER NAME=__RME_X64_USER137_Handler VECTNUM=137
ffffffff8020bedc:	0f 01 f8             	swapgs
ffffffff8020bedf:	6a 00                	push   $0x0
ffffffff8020bee1:	68 89 00 00 00       	push   $0x89
ffffffff8020bee6:	e9 c9 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beeb <__RME_X64_USER138_Handler>:
USER_HANDLER NAME=__RME_X64_USER138_Handler VECTNUM=138
ffffffff8020beeb:	0f 01 f8             	swapgs
ffffffff8020beee:	6a 00                	push   $0x0
ffffffff8020bef0:	68 8a 00 00 00       	push   $0x8a
ffffffff8020bef5:	e9 ba 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020befa <__RME_X64_USER139_Handler>:
USER_HANDLER NAME=__RME_X64_USER139_Handler VECTNUM=139
ffffffff8020befa:	0f 01 f8             	swapgs
ffffffff8020befd:	6a 00                	push   $0x0
ffffffff8020beff:	68 8b 00 00 00       	push   $0x8b
ffffffff8020bf04:	e9 ab 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf09 <__RME_X64_USER140_Handler>:

USER_HANDLER NAME=__RME_X64_USER140_Handler VECTNUM=140
ffffffff8020bf09:	0f 01 f8             	swapgs
ffffffff8020bf0c:	6a 00                	push   $0x0
ffffffff8020bf0e:	68 8c 00 00 00       	push   $0x8c
ffffffff8020bf13:	e9 9c 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf18 <__RME_X64_USER141_Handler>:
USER_HANDLER NAME=__RME_X64_USER141_Handler VECTNUM=141
ffffffff8020bf18:	0f 01 f8             	swapgs
ffffffff8020bf1b:	6a 00                	push   $0x0
ffffffff8020bf1d:	68 8d 00 00 00       	push   $0x8d
ffffffff8020bf22:	e9 8d 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf27 <__RME_X64_USER142_Handler>:
USER_HANDLER NAME=__RME_X64_USER142_Handler VECTNUM=142
ffffffff8020bf27:	0f 01 f8             	swapgs
ffffffff8020bf2a:	6a 00                	push   $0x0
ffffffff8020bf2c:	68 8e 00 00 00       	push   $0x8e
ffffffff8020bf31:	e9 7e 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf36 <__RME_X64_USER143_Handler>:
USER_HANDLER NAME=__RME_X64_USER143_Handler VECTNUM=143
ffffffff8020bf36:	0f 01 f8             	swapgs
ffffffff8020bf39:	6a 00                	push   $0x0
ffffffff8020bf3b:	68 8f 00 00 00       	push   $0x8f
ffffffff8020bf40:	e9 6f 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf45 <__RME_X64_USER144_Handler>:
USER_HANDLER NAME=__RME_X64_USER144_Handler VECTNUM=144
ffffffff8020bf45:	0f 01 f8             	swapgs
ffffffff8020bf48:	6a 00                	push   $0x0
ffffffff8020bf4a:	68 90 00 00 00       	push   $0x90
ffffffff8020bf4f:	e9 60 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf54 <__RME_X64_USER145_Handler>:
USER_HANDLER NAME=__RME_X64_USER145_Handler VECTNUM=145
ffffffff8020bf54:	0f 01 f8             	swapgs
ffffffff8020bf57:	6a 00                	push   $0x0
ffffffff8020bf59:	68 91 00 00 00       	push   $0x91
ffffffff8020bf5e:	e9 51 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf63 <__RME_X64_USER146_Handler>:
USER_HANDLER NAME=__RME_X64_USER146_Handler VECTNUM=146
ffffffff8020bf63:	0f 01 f8             	swapgs
ffffffff8020bf66:	6a 00                	push   $0x0
ffffffff8020bf68:	68 92 00 00 00       	push   $0x92
ffffffff8020bf6d:	e9 42 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf72 <__RME_X64_USER147_Handler>:
USER_HANDLER NAME=__RME_X64_USER147_Handler VECTNUM=147
ffffffff8020bf72:	0f 01 f8             	swapgs
ffffffff8020bf75:	6a 00                	push   $0x0
ffffffff8020bf77:	68 93 00 00 00       	push   $0x93
ffffffff8020bf7c:	e9 33 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf81 <__RME_X64_USER148_Handler>:
USER_HANDLER NAME=__RME_X64_USER148_Handler VECTNUM=148
ffffffff8020bf81:	0f 01 f8             	swapgs
ffffffff8020bf84:	6a 00                	push   $0x0
ffffffff8020bf86:	68 94 00 00 00       	push   $0x94
ffffffff8020bf8b:	e9 24 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf90 <__RME_X64_USER149_Handler>:
USER_HANDLER NAME=__RME_X64_USER149_Handler VECTNUM=149
ffffffff8020bf90:	0f 01 f8             	swapgs
ffffffff8020bf93:	6a 00                	push   $0x0
ffffffff8020bf95:	68 95 00 00 00       	push   $0x95
ffffffff8020bf9a:	e9 15 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf9f <__RME_X64_USER150_Handler>:

USER_HANDLER NAME=__RME_X64_USER150_Handler VECTNUM=150
ffffffff8020bf9f:	0f 01 f8             	swapgs
ffffffff8020bfa2:	6a 00                	push   $0x0
ffffffff8020bfa4:	68 96 00 00 00       	push   $0x96
ffffffff8020bfa9:	e9 06 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfae <__RME_X64_USER151_Handler>:
USER_HANDLER NAME=__RME_X64_USER151_Handler VECTNUM=151
ffffffff8020bfae:	0f 01 f8             	swapgs
ffffffff8020bfb1:	6a 00                	push   $0x0
ffffffff8020bfb3:	68 97 00 00 00       	push   $0x97
ffffffff8020bfb8:	e9 f7 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfbd <__RME_X64_USER152_Handler>:
USER_HANDLER NAME=__RME_X64_USER152_Handler VECTNUM=152
ffffffff8020bfbd:	0f 01 f8             	swapgs
ffffffff8020bfc0:	6a 00                	push   $0x0
ffffffff8020bfc2:	68 98 00 00 00       	push   $0x98
ffffffff8020bfc7:	e9 e8 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfcc <__RME_X64_USER153_Handler>:
USER_HANDLER NAME=__RME_X64_USER153_Handler VECTNUM=153
ffffffff8020bfcc:	0f 01 f8             	swapgs
ffffffff8020bfcf:	6a 00                	push   $0x0
ffffffff8020bfd1:	68 99 00 00 00       	push   $0x99
ffffffff8020bfd6:	e9 d9 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfdb <__RME_X64_USER154_Handler>:
USER_HANDLER NAME=__RME_X64_USER154_Handler VECTNUM=154
ffffffff8020bfdb:	0f 01 f8             	swapgs
ffffffff8020bfde:	6a 00                	push   $0x0
ffffffff8020bfe0:	68 9a 00 00 00       	push   $0x9a
ffffffff8020bfe5:	e9 ca 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfea <__RME_X64_USER155_Handler>:
USER_HANDLER NAME=__RME_X64_USER155_Handler VECTNUM=155
ffffffff8020bfea:	0f 01 f8             	swapgs
ffffffff8020bfed:	6a 00                	push   $0x0
ffffffff8020bfef:	68 9b 00 00 00       	push   $0x9b
ffffffff8020bff4:	e9 bb 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bff9 <__RME_X64_USER156_Handler>:
USER_HANDLER NAME=__RME_X64_USER156_Handler VECTNUM=156
ffffffff8020bff9:	0f 01 f8             	swapgs
ffffffff8020bffc:	6a 00                	push   $0x0
ffffffff8020bffe:	68 9c 00 00 00       	push   $0x9c
ffffffff8020c003:	e9 ac 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c008 <__RME_X64_USER157_Handler>:
USER_HANDLER NAME=__RME_X64_USER157_Handler VECTNUM=157
ffffffff8020c008:	0f 01 f8             	swapgs
ffffffff8020c00b:	6a 00                	push   $0x0
ffffffff8020c00d:	68 9d 00 00 00       	push   $0x9d
ffffffff8020c012:	e9 9d 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c017 <__RME_X64_USER158_Handler>:
USER_HANDLER NAME=__RME_X64_USER158_Handler VECTNUM=158
ffffffff8020c017:	0f 01 f8             	swapgs
ffffffff8020c01a:	6a 00                	push   $0x0
ffffffff8020c01c:	68 9e 00 00 00       	push   $0x9e
ffffffff8020c021:	e9 8e 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c026 <__RME_X64_USER159_Handler>:
USER_HANDLER NAME=__RME_X64_USER159_Handler VECTNUM=159
ffffffff8020c026:	0f 01 f8             	swapgs
ffffffff8020c029:	6a 00                	push   $0x0
ffffffff8020c02b:	68 9f 00 00 00       	push   $0x9f
ffffffff8020c030:	e9 7f 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c035 <__RME_X64_USER160_Handler>:

USER_HANDLER NAME=__RME_X64_USER160_Handler VECTNUM=160
ffffffff8020c035:	0f 01 f8             	swapgs
ffffffff8020c038:	6a 00                	push   $0x0
ffffffff8020c03a:	68 a0 00 00 00       	push   $0xa0
ffffffff8020c03f:	e9 70 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c044 <__RME_X64_USER161_Handler>:
USER_HANDLER NAME=__RME_X64_USER161_Handler VECTNUM=161
ffffffff8020c044:	0f 01 f8             	swapgs
ffffffff8020c047:	6a 00                	push   $0x0
ffffffff8020c049:	68 a1 00 00 00       	push   $0xa1
ffffffff8020c04e:	e9 61 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c053 <__RME_X64_USER162_Handler>:
USER_HANDLER NAME=__RME_X64_USER162_Handler VECTNUM=162
ffffffff8020c053:	0f 01 f8             	swapgs
ffffffff8020c056:	6a 00                	push   $0x0
ffffffff8020c058:	68 a2 00 00 00       	push   $0xa2
ffffffff8020c05d:	e9 52 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c062 <__RME_X64_USER163_Handler>:
USER_HANDLER NAME=__RME_X64_USER163_Handler VECTNUM=163
ffffffff8020c062:	0f 01 f8             	swapgs
ffffffff8020c065:	6a 00                	push   $0x0
ffffffff8020c067:	68 a3 00 00 00       	push   $0xa3
ffffffff8020c06c:	e9 43 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c071 <__RME_X64_USER164_Handler>:
USER_HANDLER NAME=__RME_X64_USER164_Handler VECTNUM=164
ffffffff8020c071:	0f 01 f8             	swapgs
ffffffff8020c074:	6a 00                	push   $0x0
ffffffff8020c076:	68 a4 00 00 00       	push   $0xa4
ffffffff8020c07b:	e9 34 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c080 <__RME_X64_USER165_Handler>:
USER_HANDLER NAME=__RME_X64_USER165_Handler VECTNUM=165
ffffffff8020c080:	0f 01 f8             	swapgs
ffffffff8020c083:	6a 00                	push   $0x0
ffffffff8020c085:	68 a5 00 00 00       	push   $0xa5
ffffffff8020c08a:	e9 25 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c08f <__RME_X64_USER166_Handler>:
USER_HANDLER NAME=__RME_X64_USER166_Handler VECTNUM=166
ffffffff8020c08f:	0f 01 f8             	swapgs
ffffffff8020c092:	6a 00                	push   $0x0
ffffffff8020c094:	68 a6 00 00 00       	push   $0xa6
ffffffff8020c099:	e9 16 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c09e <__RME_X64_USER167_Handler>:
USER_HANDLER NAME=__RME_X64_USER167_Handler VECTNUM=167
ffffffff8020c09e:	0f 01 f8             	swapgs
ffffffff8020c0a1:	6a 00                	push   $0x0
ffffffff8020c0a3:	68 a7 00 00 00       	push   $0xa7
ffffffff8020c0a8:	e9 07 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0ad <__RME_X64_USER168_Handler>:
USER_HANDLER NAME=__RME_X64_USER168_Handler VECTNUM=168
ffffffff8020c0ad:	0f 01 f8             	swapgs
ffffffff8020c0b0:	6a 00                	push   $0x0
ffffffff8020c0b2:	68 a8 00 00 00       	push   $0xa8
ffffffff8020c0b7:	e9 f8 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0bc <__RME_X64_USER169_Handler>:
USER_HANDLER NAME=__RME_X64_USER169_Handler VECTNUM=169
ffffffff8020c0bc:	0f 01 f8             	swapgs
ffffffff8020c0bf:	6a 00                	push   $0x0
ffffffff8020c0c1:	68 a9 00 00 00       	push   $0xa9
ffffffff8020c0c6:	e9 e9 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0cb <__RME_X64_USER170_Handler>:

USER_HANDLER NAME=__RME_X64_USER170_Handler VECTNUM=170
ffffffff8020c0cb:	0f 01 f8             	swapgs
ffffffff8020c0ce:	6a 00                	push   $0x0
ffffffff8020c0d0:	68 aa 00 00 00       	push   $0xaa
ffffffff8020c0d5:	e9 da 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0da <__RME_X64_USER171_Handler>:
USER_HANDLER NAME=__RME_X64_USER171_Handler VECTNUM=171
ffffffff8020c0da:	0f 01 f8             	swapgs
ffffffff8020c0dd:	6a 00                	push   $0x0
ffffffff8020c0df:	68 ab 00 00 00       	push   $0xab
ffffffff8020c0e4:	e9 cb 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0e9 <__RME_X64_USER172_Handler>:
USER_HANDLER NAME=__RME_X64_USER172_Handler VECTNUM=172
ffffffff8020c0e9:	0f 01 f8             	swapgs
ffffffff8020c0ec:	6a 00                	push   $0x0
ffffffff8020c0ee:	68 ac 00 00 00       	push   $0xac
ffffffff8020c0f3:	e9 bc 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0f8 <__RME_X64_USER173_Handler>:
USER_HANDLER NAME=__RME_X64_USER173_Handler VECTNUM=173
ffffffff8020c0f8:	0f 01 f8             	swapgs
ffffffff8020c0fb:	6a 00                	push   $0x0
ffffffff8020c0fd:	68 ad 00 00 00       	push   $0xad
ffffffff8020c102:	e9 ad 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c107 <__RME_X64_USER174_Handler>:
USER_HANDLER NAME=__RME_X64_USER174_Handler VECTNUM=174
ffffffff8020c107:	0f 01 f8             	swapgs
ffffffff8020c10a:	6a 00                	push   $0x0
ffffffff8020c10c:	68 ae 00 00 00       	push   $0xae
ffffffff8020c111:	e9 9e 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c116 <__RME_X64_USER175_Handler>:
USER_HANDLER NAME=__RME_X64_USER175_Handler VECTNUM=175
ffffffff8020c116:	0f 01 f8             	swapgs
ffffffff8020c119:	6a 00                	push   $0x0
ffffffff8020c11b:	68 af 00 00 00       	push   $0xaf
ffffffff8020c120:	e9 8f 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c125 <__RME_X64_USER176_Handler>:
USER_HANDLER NAME=__RME_X64_USER176_Handler VECTNUM=176
ffffffff8020c125:	0f 01 f8             	swapgs
ffffffff8020c128:	6a 00                	push   $0x0
ffffffff8020c12a:	68 b0 00 00 00       	push   $0xb0
ffffffff8020c12f:	e9 80 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c134 <__RME_X64_USER177_Handler>:
USER_HANDLER NAME=__RME_X64_USER177_Handler VECTNUM=177
ffffffff8020c134:	0f 01 f8             	swapgs
ffffffff8020c137:	6a 00                	push   $0x0
ffffffff8020c139:	68 b1 00 00 00       	push   $0xb1
ffffffff8020c13e:	e9 71 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c143 <__RME_X64_USER178_Handler>:
USER_HANDLER NAME=__RME_X64_USER178_Handler VECTNUM=178
ffffffff8020c143:	0f 01 f8             	swapgs
ffffffff8020c146:	6a 00                	push   $0x0
ffffffff8020c148:	68 b2 00 00 00       	push   $0xb2
ffffffff8020c14d:	e9 62 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c152 <__RME_X64_USER179_Handler>:
USER_HANDLER NAME=__RME_X64_USER179_Handler VECTNUM=179
ffffffff8020c152:	0f 01 f8             	swapgs
ffffffff8020c155:	6a 00                	push   $0x0
ffffffff8020c157:	68 b3 00 00 00       	push   $0xb3
ffffffff8020c15c:	e9 53 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c161 <__RME_X64_USER180_Handler>:

USER_HANDLER NAME=__RME_X64_USER180_Handler VECTNUM=180
ffffffff8020c161:	0f 01 f8             	swapgs
ffffffff8020c164:	6a 00                	push   $0x0
ffffffff8020c166:	68 b4 00 00 00       	push   $0xb4
ffffffff8020c16b:	e9 44 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c170 <__RME_X64_USER181_Handler>:
USER_HANDLER NAME=__RME_X64_USER181_Handler VECTNUM=181
ffffffff8020c170:	0f 01 f8             	swapgs
ffffffff8020c173:	6a 00                	push   $0x0
ffffffff8020c175:	68 b5 00 00 00       	push   $0xb5
ffffffff8020c17a:	e9 35 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c17f <__RME_X64_USER182_Handler>:
USER_HANDLER NAME=__RME_X64_USER182_Handler VECTNUM=182
ffffffff8020c17f:	0f 01 f8             	swapgs
ffffffff8020c182:	6a 00                	push   $0x0
ffffffff8020c184:	68 b6 00 00 00       	push   $0xb6
ffffffff8020c189:	e9 26 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c18e <__RME_X64_USER183_Handler>:
USER_HANDLER NAME=__RME_X64_USER183_Handler VECTNUM=183
ffffffff8020c18e:	0f 01 f8             	swapgs
ffffffff8020c191:	6a 00                	push   $0x0
ffffffff8020c193:	68 b7 00 00 00       	push   $0xb7
ffffffff8020c198:	e9 17 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c19d <__RME_X64_USER184_Handler>:
USER_HANDLER NAME=__RME_X64_USER184_Handler VECTNUM=184
ffffffff8020c19d:	0f 01 f8             	swapgs
ffffffff8020c1a0:	6a 00                	push   $0x0
ffffffff8020c1a2:	68 b8 00 00 00       	push   $0xb8
ffffffff8020c1a7:	e9 08 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ac <__RME_X64_USER185_Handler>:
USER_HANDLER NAME=__RME_X64_USER185_Handler VECTNUM=185
ffffffff8020c1ac:	0f 01 f8             	swapgs
ffffffff8020c1af:	6a 00                	push   $0x0
ffffffff8020c1b1:	68 b9 00 00 00       	push   $0xb9
ffffffff8020c1b6:	e9 f9 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1bb <__RME_X64_USER186_Handler>:
USER_HANDLER NAME=__RME_X64_USER186_Handler VECTNUM=186
ffffffff8020c1bb:	0f 01 f8             	swapgs
ffffffff8020c1be:	6a 00                	push   $0x0
ffffffff8020c1c0:	68 ba 00 00 00       	push   $0xba
ffffffff8020c1c5:	e9 ea 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ca <__RME_X64_USER187_Handler>:
USER_HANDLER NAME=__RME_X64_USER187_Handler VECTNUM=187
ffffffff8020c1ca:	0f 01 f8             	swapgs
ffffffff8020c1cd:	6a 00                	push   $0x0
ffffffff8020c1cf:	68 bb 00 00 00       	push   $0xbb
ffffffff8020c1d4:	e9 db 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1d9 <__RME_X64_USER188_Handler>:
USER_HANDLER NAME=__RME_X64_USER188_Handler VECTNUM=188
ffffffff8020c1d9:	0f 01 f8             	swapgs
ffffffff8020c1dc:	6a 00                	push   $0x0
ffffffff8020c1de:	68 bc 00 00 00       	push   $0xbc
ffffffff8020c1e3:	e9 cc 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1e8 <__RME_X64_USER189_Handler>:
USER_HANDLER NAME=__RME_X64_USER189_Handler VECTNUM=189
ffffffff8020c1e8:	0f 01 f8             	swapgs
ffffffff8020c1eb:	6a 00                	push   $0x0
ffffffff8020c1ed:	68 bd 00 00 00       	push   $0xbd
ffffffff8020c1f2:	e9 bd 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1f7 <__RME_X64_USER190_Handler>:

USER_HANDLER NAME=__RME_X64_USER190_Handler VECTNUM=190
ffffffff8020c1f7:	0f 01 f8             	swapgs
ffffffff8020c1fa:	6a 00                	push   $0x0
ffffffff8020c1fc:	68 be 00 00 00       	push   $0xbe
ffffffff8020c201:	e9 ae 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c206 <__RME_X64_USER191_Handler>:
USER_HANDLER NAME=__RME_X64_USER191_Handler VECTNUM=191
ffffffff8020c206:	0f 01 f8             	swapgs
ffffffff8020c209:	6a 00                	push   $0x0
ffffffff8020c20b:	68 bf 00 00 00       	push   $0xbf
ffffffff8020c210:	e9 9f 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c215 <__RME_X64_USER192_Handler>:
USER_HANDLER NAME=__RME_X64_USER192_Handler VECTNUM=192
ffffffff8020c215:	0f 01 f8             	swapgs
ffffffff8020c218:	6a 00                	push   $0x0
ffffffff8020c21a:	68 c0 00 00 00       	push   $0xc0
ffffffff8020c21f:	e9 90 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c224 <__RME_X64_USER193_Handler>:
USER_HANDLER NAME=__RME_X64_USER193_Handler VECTNUM=193
ffffffff8020c224:	0f 01 f8             	swapgs
ffffffff8020c227:	6a 00                	push   $0x0
ffffffff8020c229:	68 c1 00 00 00       	push   $0xc1
ffffffff8020c22e:	e9 81 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c233 <__RME_X64_USER194_Handler>:
USER_HANDLER NAME=__RME_X64_USER194_Handler VECTNUM=194
ffffffff8020c233:	0f 01 f8             	swapgs
ffffffff8020c236:	6a 00                	push   $0x0
ffffffff8020c238:	68 c2 00 00 00       	push   $0xc2
ffffffff8020c23d:	e9 72 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c242 <__RME_X64_USER195_Handler>:
USER_HANDLER NAME=__RME_X64_USER195_Handler VECTNUM=195
ffffffff8020c242:	0f 01 f8             	swapgs
ffffffff8020c245:	6a 00                	push   $0x0
ffffffff8020c247:	68 c3 00 00 00       	push   $0xc3
ffffffff8020c24c:	e9 63 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c251 <__RME_X64_USER196_Handler>:
USER_HANDLER NAME=__RME_X64_USER196_Handler VECTNUM=196
ffffffff8020c251:	0f 01 f8             	swapgs
ffffffff8020c254:	6a 00                	push   $0x0
ffffffff8020c256:	68 c4 00 00 00       	push   $0xc4
ffffffff8020c25b:	e9 54 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c260 <__RME_X64_USER197_Handler>:
USER_HANDLER NAME=__RME_X64_USER197_Handler VECTNUM=197
ffffffff8020c260:	0f 01 f8             	swapgs
ffffffff8020c263:	6a 00                	push   $0x0
ffffffff8020c265:	68 c5 00 00 00       	push   $0xc5
ffffffff8020c26a:	e9 45 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c26f <__RME_X64_USER198_Handler>:
USER_HANDLER NAME=__RME_X64_USER198_Handler VECTNUM=198
ffffffff8020c26f:	0f 01 f8             	swapgs
ffffffff8020c272:	6a 00                	push   $0x0
ffffffff8020c274:	68 c6 00 00 00       	push   $0xc6
ffffffff8020c279:	e9 36 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c27e <__RME_X64_USER199_Handler>:
USER_HANDLER NAME=__RME_X64_USER199_Handler VECTNUM=199
ffffffff8020c27e:	0f 01 f8             	swapgs
ffffffff8020c281:	6a 00                	push   $0x0
ffffffff8020c283:	68 c7 00 00 00       	push   $0xc7
ffffffff8020c288:	e9 27 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c28d <__RME_X64_USER200_Handler>:

USER_HANDLER NAME=__RME_X64_USER200_Handler VECTNUM=200
ffffffff8020c28d:	0f 01 f8             	swapgs
ffffffff8020c290:	6a 00                	push   $0x0
ffffffff8020c292:	68 c8 00 00 00       	push   $0xc8
ffffffff8020c297:	e9 18 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c29c <__RME_X64_USER201_Handler>:
USER_HANDLER NAME=__RME_X64_USER201_Handler VECTNUM=201
ffffffff8020c29c:	0f 01 f8             	swapgs
ffffffff8020c29f:	6a 00                	push   $0x0
ffffffff8020c2a1:	68 c9 00 00 00       	push   $0xc9
ffffffff8020c2a6:	e9 09 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ab <__RME_X64_USER202_Handler>:
USER_HANDLER NAME=__RME_X64_USER202_Handler VECTNUM=202
ffffffff8020c2ab:	0f 01 f8             	swapgs
ffffffff8020c2ae:	6a 00                	push   $0x0
ffffffff8020c2b0:	68 ca 00 00 00       	push   $0xca
ffffffff8020c2b5:	e9 fa 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ba <__RME_X64_USER203_Handler>:
USER_HANDLER NAME=__RME_X64_USER203_Handler VECTNUM=203
ffffffff8020c2ba:	0f 01 f8             	swapgs
ffffffff8020c2bd:	6a 00                	push   $0x0
ffffffff8020c2bf:	68 cb 00 00 00       	push   $0xcb
ffffffff8020c2c4:	e9 eb 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2c9 <__RME_X64_USER204_Handler>:
USER_HANDLER NAME=__RME_X64_USER204_Handler VECTNUM=204
ffffffff8020c2c9:	0f 01 f8             	swapgs
ffffffff8020c2cc:	6a 00                	push   $0x0
ffffffff8020c2ce:	68 cc 00 00 00       	push   $0xcc
ffffffff8020c2d3:	e9 dc 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2d8 <__RME_X64_USER205_Handler>:
USER_HANDLER NAME=__RME_X64_USER205_Handler VECTNUM=205
ffffffff8020c2d8:	0f 01 f8             	swapgs
ffffffff8020c2db:	6a 00                	push   $0x0
ffffffff8020c2dd:	68 cd 00 00 00       	push   $0xcd
ffffffff8020c2e2:	e9 cd 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2e7 <__RME_X64_USER206_Handler>:
USER_HANDLER NAME=__RME_X64_USER206_Handler VECTNUM=206
ffffffff8020c2e7:	0f 01 f8             	swapgs
ffffffff8020c2ea:	6a 00                	push   $0x0
ffffffff8020c2ec:	68 ce 00 00 00       	push   $0xce
ffffffff8020c2f1:	e9 be 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2f6 <__RME_X64_USER207_Handler>:
USER_HANDLER NAME=__RME_X64_USER207_Handler VECTNUM=207
ffffffff8020c2f6:	0f 01 f8             	swapgs
ffffffff8020c2f9:	6a 00                	push   $0x0
ffffffff8020c2fb:	68 cf 00 00 00       	push   $0xcf
ffffffff8020c300:	e9 af 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c305 <__RME_X64_USER208_Handler>:
USER_HANDLER NAME=__RME_X64_USER208_Handler VECTNUM=208
ffffffff8020c305:	0f 01 f8             	swapgs
ffffffff8020c308:	6a 00                	push   $0x0
ffffffff8020c30a:	68 d0 00 00 00       	push   $0xd0
ffffffff8020c30f:	e9 a0 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c314 <__RME_X64_USER209_Handler>:
USER_HANDLER NAME=__RME_X64_USER209_Handler VECTNUM=209
ffffffff8020c314:	0f 01 f8             	swapgs
ffffffff8020c317:	6a 00                	push   $0x0
ffffffff8020c319:	68 d1 00 00 00       	push   $0xd1
ffffffff8020c31e:	e9 91 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c323 <__RME_X64_USER210_Handler>:

USER_HANDLER NAME=__RME_X64_USER210_Handler VECTNUM=210
ffffffff8020c323:	0f 01 f8             	swapgs
ffffffff8020c326:	6a 00                	push   $0x0
ffffffff8020c328:	68 d2 00 00 00       	push   $0xd2
ffffffff8020c32d:	e9 82 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c332 <__RME_X64_USER211_Handler>:
USER_HANDLER NAME=__RME_X64_USER211_Handler VECTNUM=211
ffffffff8020c332:	0f 01 f8             	swapgs
ffffffff8020c335:	6a 00                	push   $0x0
ffffffff8020c337:	68 d3 00 00 00       	push   $0xd3
ffffffff8020c33c:	e9 73 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c341 <__RME_X64_USER212_Handler>:
USER_HANDLER NAME=__RME_X64_USER212_Handler VECTNUM=212
ffffffff8020c341:	0f 01 f8             	swapgs
ffffffff8020c344:	6a 00                	push   $0x0
ffffffff8020c346:	68 d4 00 00 00       	push   $0xd4
ffffffff8020c34b:	e9 64 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c350 <__RME_X64_USER213_Handler>:
USER_HANDLER NAME=__RME_X64_USER213_Handler VECTNUM=213
ffffffff8020c350:	0f 01 f8             	swapgs
ffffffff8020c353:	6a 00                	push   $0x0
ffffffff8020c355:	68 d5 00 00 00       	push   $0xd5
ffffffff8020c35a:	e9 55 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c35f <__RME_X64_USER214_Handler>:
USER_HANDLER NAME=__RME_X64_USER214_Handler VECTNUM=214
ffffffff8020c35f:	0f 01 f8             	swapgs
ffffffff8020c362:	6a 00                	push   $0x0
ffffffff8020c364:	68 d6 00 00 00       	push   $0xd6
ffffffff8020c369:	e9 46 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c36e <__RME_X64_USER215_Handler>:
USER_HANDLER NAME=__RME_X64_USER215_Handler VECTNUM=215
ffffffff8020c36e:	0f 01 f8             	swapgs
ffffffff8020c371:	6a 00                	push   $0x0
ffffffff8020c373:	68 d7 00 00 00       	push   $0xd7
ffffffff8020c378:	e9 37 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c37d <__RME_X64_USER216_Handler>:
USER_HANDLER NAME=__RME_X64_USER216_Handler VECTNUM=216
ffffffff8020c37d:	0f 01 f8             	swapgs
ffffffff8020c380:	6a 00                	push   $0x0
ffffffff8020c382:	68 d8 00 00 00       	push   $0xd8
ffffffff8020c387:	e9 28 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c38c <__RME_X64_USER217_Handler>:
USER_HANDLER NAME=__RME_X64_USER217_Handler VECTNUM=217
ffffffff8020c38c:	0f 01 f8             	swapgs
ffffffff8020c38f:	6a 00                	push   $0x0
ffffffff8020c391:	68 d9 00 00 00       	push   $0xd9
ffffffff8020c396:	e9 19 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c39b <__RME_X64_USER218_Handler>:
USER_HANDLER NAME=__RME_X64_USER218_Handler VECTNUM=218
ffffffff8020c39b:	0f 01 f8             	swapgs
ffffffff8020c39e:	6a 00                	push   $0x0
ffffffff8020c3a0:	68 da 00 00 00       	push   $0xda
ffffffff8020c3a5:	e9 0a 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3aa <__RME_X64_USER219_Handler>:
USER_HANDLER NAME=__RME_X64_USER219_Handler VECTNUM=219
ffffffff8020c3aa:	0f 01 f8             	swapgs
ffffffff8020c3ad:	6a 00                	push   $0x0
ffffffff8020c3af:	68 db 00 00 00       	push   $0xdb
ffffffff8020c3b4:	e9 fb 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3b9 <__RME_X64_USER220_Handler>:

USER_HANDLER NAME=__RME_X64_USER220_Handler VECTNUM=220
ffffffff8020c3b9:	0f 01 f8             	swapgs
ffffffff8020c3bc:	6a 00                	push   $0x0
ffffffff8020c3be:	68 dc 00 00 00       	push   $0xdc
ffffffff8020c3c3:	e9 ec 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3c8 <__RME_X64_USER221_Handler>:
USER_HANDLER NAME=__RME_X64_USER221_Handler VECTNUM=221
ffffffff8020c3c8:	0f 01 f8             	swapgs
ffffffff8020c3cb:	6a 00                	push   $0x0
ffffffff8020c3cd:	68 dd 00 00 00       	push   $0xdd
ffffffff8020c3d2:	e9 dd 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3d7 <__RME_X64_USER222_Handler>:
USER_HANDLER NAME=__RME_X64_USER222_Handler VECTNUM=222
ffffffff8020c3d7:	0f 01 f8             	swapgs
ffffffff8020c3da:	6a 00                	push   $0x0
ffffffff8020c3dc:	68 de 00 00 00       	push   $0xde
ffffffff8020c3e1:	e9 ce 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3e6 <__RME_X64_USER223_Handler>:
USER_HANDLER NAME=__RME_X64_USER223_Handler VECTNUM=223
ffffffff8020c3e6:	0f 01 f8             	swapgs
ffffffff8020c3e9:	6a 00                	push   $0x0
ffffffff8020c3eb:	68 df 00 00 00       	push   $0xdf
ffffffff8020c3f0:	e9 bf 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3f5 <__RME_X64_USER224_Handler>:
USER_HANDLER NAME=__RME_X64_USER224_Handler VECTNUM=224
ffffffff8020c3f5:	0f 01 f8             	swapgs
ffffffff8020c3f8:	6a 00                	push   $0x0
ffffffff8020c3fa:	68 e0 00 00 00       	push   $0xe0
ffffffff8020c3ff:	e9 b0 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c404 <__RME_X64_USER225_Handler>:
USER_HANDLER NAME=__RME_X64_USER225_Handler VECTNUM=225
ffffffff8020c404:	0f 01 f8             	swapgs
ffffffff8020c407:	6a 00                	push   $0x0
ffffffff8020c409:	68 e1 00 00 00       	push   $0xe1
ffffffff8020c40e:	e9 a1 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c413 <__RME_X64_USER226_Handler>:
USER_HANDLER NAME=__RME_X64_USER226_Handler VECTNUM=226
ffffffff8020c413:	0f 01 f8             	swapgs
ffffffff8020c416:	6a 00                	push   $0x0
ffffffff8020c418:	68 e2 00 00 00       	push   $0xe2
ffffffff8020c41d:	e9 92 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c422 <__RME_X64_USER227_Handler>:
USER_HANDLER NAME=__RME_X64_USER227_Handler VECTNUM=227
ffffffff8020c422:	0f 01 f8             	swapgs
ffffffff8020c425:	6a 00                	push   $0x0
ffffffff8020c427:	68 e3 00 00 00       	push   $0xe3
ffffffff8020c42c:	e9 83 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c431 <__RME_X64_USER228_Handler>:
USER_HANDLER NAME=__RME_X64_USER228_Handler VECTNUM=228
ffffffff8020c431:	0f 01 f8             	swapgs
ffffffff8020c434:	6a 00                	push   $0x0
ffffffff8020c436:	68 e4 00 00 00       	push   $0xe4
ffffffff8020c43b:	e9 74 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c440 <__RME_X64_USER229_Handler>:
USER_HANDLER NAME=__RME_X64_USER229_Handler VECTNUM=229
ffffffff8020c440:	0f 01 f8             	swapgs
ffffffff8020c443:	6a 00                	push   $0x0
ffffffff8020c445:	68 e5 00 00 00       	push   $0xe5
ffffffff8020c44a:	e9 65 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c44f <__RME_X64_USER230_Handler>:

USER_HANDLER NAME=__RME_X64_USER230_Handler VECTNUM=230
ffffffff8020c44f:	0f 01 f8             	swapgs
ffffffff8020c452:	6a 00                	push   $0x0
ffffffff8020c454:	68 e6 00 00 00       	push   $0xe6
ffffffff8020c459:	e9 56 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c45e <__RME_X64_USER231_Handler>:
USER_HANDLER NAME=__RME_X64_USER231_Handler VECTNUM=231
ffffffff8020c45e:	0f 01 f8             	swapgs
ffffffff8020c461:	6a 00                	push   $0x0
ffffffff8020c463:	68 e7 00 00 00       	push   $0xe7
ffffffff8020c468:	e9 47 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c46d <__RME_X64_USER232_Handler>:
USER_HANDLER NAME=__RME_X64_USER232_Handler VECTNUM=232
ffffffff8020c46d:	0f 01 f8             	swapgs
ffffffff8020c470:	6a 00                	push   $0x0
ffffffff8020c472:	68 e8 00 00 00       	push   $0xe8
ffffffff8020c477:	e9 38 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c47c <__RME_X64_USER233_Handler>:
USER_HANDLER NAME=__RME_X64_USER233_Handler VECTNUM=233
ffffffff8020c47c:	0f 01 f8             	swapgs
ffffffff8020c47f:	6a 00                	push   $0x0
ffffffff8020c481:	68 e9 00 00 00       	push   $0xe9
ffffffff8020c486:	e9 29 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c48b <__RME_X64_USER234_Handler>:
USER_HANDLER NAME=__RME_X64_USER234_Handler VECTNUM=234
ffffffff8020c48b:	0f 01 f8             	swapgs
ffffffff8020c48e:	6a 00                	push   $0x0
ffffffff8020c490:	68 ea 00 00 00       	push   $0xea
ffffffff8020c495:	e9 1a 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c49a <__RME_X64_USER235_Handler>:
USER_HANDLER NAME=__RME_X64_USER235_Handler VECTNUM=235
ffffffff8020c49a:	0f 01 f8             	swapgs
ffffffff8020c49d:	6a 00                	push   $0x0
ffffffff8020c49f:	68 eb 00 00 00       	push   $0xeb
ffffffff8020c4a4:	e9 0b 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4a9 <__RME_X64_USER236_Handler>:
USER_HANDLER NAME=__RME_X64_USER236_Handler VECTNUM=236
ffffffff8020c4a9:	0f 01 f8             	swapgs
ffffffff8020c4ac:	6a 00                	push   $0x0
ffffffff8020c4ae:	68 ec 00 00 00       	push   $0xec
ffffffff8020c4b3:	e9 fc 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4b8 <__RME_X64_USER237_Handler>:
USER_HANDLER NAME=__RME_X64_USER237_Handler VECTNUM=237
ffffffff8020c4b8:	0f 01 f8             	swapgs
ffffffff8020c4bb:	6a 00                	push   $0x0
ffffffff8020c4bd:	68 ed 00 00 00       	push   $0xed
ffffffff8020c4c2:	e9 ed 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4c7 <__RME_X64_USER238_Handler>:
USER_HANDLER NAME=__RME_X64_USER238_Handler VECTNUM=238
ffffffff8020c4c7:	0f 01 f8             	swapgs
ffffffff8020c4ca:	6a 00                	push   $0x0
ffffffff8020c4cc:	68 ee 00 00 00       	push   $0xee
ffffffff8020c4d1:	e9 de 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4d6 <__RME_X64_USER239_Handler>:
USER_HANDLER NAME=__RME_X64_USER239_Handler VECTNUM=239
ffffffff8020c4d6:	0f 01 f8             	swapgs
ffffffff8020c4d9:	6a 00                	push   $0x0
ffffffff8020c4db:	68 ef 00 00 00       	push   $0xef
ffffffff8020c4e0:	e9 cf 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4e5 <__RME_X64_USER240_Handler>:

USER_HANDLER NAME=__RME_X64_USER240_Handler VECTNUM=240
ffffffff8020c4e5:	0f 01 f8             	swapgs
ffffffff8020c4e8:	6a 00                	push   $0x0
ffffffff8020c4ea:	68 f0 00 00 00       	push   $0xf0
ffffffff8020c4ef:	e9 c0 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4f4 <__RME_X64_USER241_Handler>:
USER_HANDLER NAME=__RME_X64_USER241_Handler VECTNUM=241
ffffffff8020c4f4:	0f 01 f8             	swapgs
ffffffff8020c4f7:	6a 00                	push   $0x0
ffffffff8020c4f9:	68 f1 00 00 00       	push   $0xf1
ffffffff8020c4fe:	e9 b1 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c503 <__RME_X64_USER242_Handler>:
USER_HANDLER NAME=__RME_X64_USER242_Handler VECTNUM=242
ffffffff8020c503:	0f 01 f8             	swapgs
ffffffff8020c506:	6a 00                	push   $0x0
ffffffff8020c508:	68 f2 00 00 00       	push   $0xf2
ffffffff8020c50d:	e9 a2 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c512 <__RME_X64_USER243_Handler>:
USER_HANDLER NAME=__RME_X64_USER243_Handler VECTNUM=243
ffffffff8020c512:	0f 01 f8             	swapgs
ffffffff8020c515:	6a 00                	push   $0x0
ffffffff8020c517:	68 f3 00 00 00       	push   $0xf3
ffffffff8020c51c:	e9 93 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c521 <__RME_X64_USER244_Handler>:
USER_HANDLER NAME=__RME_X64_USER244_Handler VECTNUM=244
ffffffff8020c521:	0f 01 f8             	swapgs
ffffffff8020c524:	6a 00                	push   $0x0
ffffffff8020c526:	68 f4 00 00 00       	push   $0xf4
ffffffff8020c52b:	e9 84 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c530 <__RME_X64_USER245_Handler>:
USER_HANDLER NAME=__RME_X64_USER245_Handler VECTNUM=245
ffffffff8020c530:	0f 01 f8             	swapgs
ffffffff8020c533:	6a 00                	push   $0x0
ffffffff8020c535:	68 f5 00 00 00       	push   $0xf5
ffffffff8020c53a:	eb 78                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c53c <__RME_X64_USER246_Handler>:
USER_HANDLER NAME=__RME_X64_USER246_Handler VECTNUM=246
ffffffff8020c53c:	0f 01 f8             	swapgs
ffffffff8020c53f:	6a 00                	push   $0x0
ffffffff8020c541:	68 f6 00 00 00       	push   $0xf6
ffffffff8020c546:	eb 6c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c548 <__RME_X64_USER247_Handler>:
USER_HANDLER NAME=__RME_X64_USER247_Handler VECTNUM=247
ffffffff8020c548:	0f 01 f8             	swapgs
ffffffff8020c54b:	6a 00                	push   $0x0
ffffffff8020c54d:	68 f7 00 00 00       	push   $0xf7
ffffffff8020c552:	eb 60                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c554 <__RME_X64_USER248_Handler>:
USER_HANDLER NAME=__RME_X64_USER248_Handler VECTNUM=248
ffffffff8020c554:	0f 01 f8             	swapgs
ffffffff8020c557:	6a 00                	push   $0x0
ffffffff8020c559:	68 f8 00 00 00       	push   $0xf8
ffffffff8020c55e:	eb 54                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c560 <__RME_X64_USER249_Handler>:
USER_HANDLER NAME=__RME_X64_USER249_Handler VECTNUM=249
ffffffff8020c560:	0f 01 f8             	swapgs
ffffffff8020c563:	6a 00                	push   $0x0
ffffffff8020c565:	68 f9 00 00 00       	push   $0xf9
ffffffff8020c56a:	eb 48                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c56c <__RME_X64_USER250_Handler>:

USER_HANDLER NAME=__RME_X64_USER250_Handler VECTNUM=250
ffffffff8020c56c:	0f 01 f8             	swapgs
ffffffff8020c56f:	6a 00                	push   $0x0
ffffffff8020c571:	68 fa 00 00 00       	push   $0xfa
ffffffff8020c576:	eb 3c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c578 <__RME_X64_USER251_Handler>:
USER_HANDLER NAME=__RME_X64_USER251_Handler VECTNUM=251
ffffffff8020c578:	0f 01 f8             	swapgs
ffffffff8020c57b:	6a 00                	push   $0x0
ffffffff8020c57d:	68 fb 00 00 00       	push   $0xfb
ffffffff8020c582:	eb 30                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c584 <__RME_X64_USER252_Handler>:
USER_HANDLER NAME=__RME_X64_USER252_Handler VECTNUM=252
ffffffff8020c584:	0f 01 f8             	swapgs
ffffffff8020c587:	6a 00                	push   $0x0
ffffffff8020c589:	68 fc 00 00 00       	push   $0xfc
ffffffff8020c58e:	eb 24                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c590 <__RME_X64_USER253_Handler>:
USER_HANDLER NAME=__RME_X64_USER253_Handler VECTNUM=253
ffffffff8020c590:	0f 01 f8             	swapgs
ffffffff8020c593:	6a 00                	push   $0x0
ffffffff8020c595:	68 fd 00 00 00       	push   $0xfd
ffffffff8020c59a:	eb 18                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c59c <__RME_X64_USER254_Handler>:
USER_HANDLER NAME=__RME_X64_USER254_Handler VECTNUM=254
ffffffff8020c59c:	0f 01 f8             	swapgs
ffffffff8020c59f:	6a 00                	push   $0x0
ffffffff8020c5a1:	68 fe 00 00 00       	push   $0xfe
ffffffff8020c5a6:	eb 0c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5a8 <__RME_X64_USER255_Handler>:
USER_HANDLER NAME=__RME_X64_USER255_Handler VECTNUM=255
ffffffff8020c5a8:	0f 01 f8             	swapgs
ffffffff8020c5ab:	6a 00                	push   $0x0
ffffffff8020c5ad:	68 ff 00 00 00       	push   $0xff
ffffffff8020c5b2:	eb 00                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5b4 <User_Handler>:
/* Common function body for generic interrupt handlers - reduce I-Cache usage */
User_Handler:
    SAVE_GP_REGS
ffffffff8020c5b4:	41 57                	push   %r15
ffffffff8020c5b6:	41 56                	push   %r14
ffffffff8020c5b8:	41 55                	push   %r13
ffffffff8020c5ba:	41 54                	push   %r12
ffffffff8020c5bc:	41 53                	push   %r11
ffffffff8020c5be:	41 52                	push   %r10
ffffffff8020c5c0:	41 51                	push   %r9
ffffffff8020c5c2:	41 50                	push   %r8
ffffffff8020c5c4:	55                   	push   %rbp
ffffffff8020c5c5:	57                   	push   %rdi
ffffffff8020c5c6:	56                   	push   %rsi
ffffffff8020c5c7:	52                   	push   %rdx
ffffffff8020c5c8:	51                   	push   %rcx
ffffffff8020c5c9:	53                   	push   %rbx
ffffffff8020c5ca:	50                   	push   %rax
ffffffff8020c5cb:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c5cf:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c5d1:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020c5d4:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Generic_Handler
ffffffff8020c5d9:	e8 db 9f 01 00       	call   ffffffff802265b9 <__RME_X64_Generic_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c5de:	e8 db 7b 01 00       	call   ffffffff802241be <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c5e3:	0f 01 f8             	swapgs
ffffffff8020c5e6:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c5ea:	8e d8                	mov    %eax,%ds
ffffffff8020c5ec:	58                   	pop    %rax
ffffffff8020c5ed:	5b                   	pop    %rbx
ffffffff8020c5ee:	59                   	pop    %rcx
ffffffff8020c5ef:	5a                   	pop    %rdx
ffffffff8020c5f0:	5e                   	pop    %rsi
ffffffff8020c5f1:	5f                   	pop    %rdi
ffffffff8020c5f2:	5d                   	pop    %rbp
ffffffff8020c5f3:	41 58                	pop    %r8
ffffffff8020c5f5:	41 59                	pop    %r9
ffffffff8020c5f7:	41 5a                	pop    %r10
ffffffff8020c5f9:	41 5b                	pop    %r11
ffffffff8020c5fb:	41 5c                	pop    %r12
ffffffff8020c5fd:	41 5d                	pop    %r13
ffffffff8020c5ff:	41 5e                	pop    %r14
ffffffff8020c601:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c603:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c607:	48 cf                	iretq

ffffffff8020c609 <SysTick_SMP_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_SMP_Handler:
    .global             SysTick_SMP_Handler
    SWAPGS
ffffffff8020c609:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c60c:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c60e:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c613:	41 57                	push   %r15
ffffffff8020c615:	41 56                	push   %r14
ffffffff8020c617:	41 55                	push   %r13
ffffffff8020c619:	41 54                	push   %r12
ffffffff8020c61b:	41 53                	push   %r11
ffffffff8020c61d:	41 52                	push   %r10
ffffffff8020c61f:	41 51                	push   %r9
ffffffff8020c621:	41 50                	push   %r8
ffffffff8020c623:	55                   	push   %rbp
ffffffff8020c624:	57                   	push   %rdi
ffffffff8020c625:	56                   	push   %rsi
ffffffff8020c626:	52                   	push   %rdx
ffffffff8020c627:	51                   	push   %rcx
ffffffff8020c628:	53                   	push   %rbx
ffffffff8020c629:	50                   	push   %rax
ffffffff8020c62a:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c62e:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c630:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_SMP_Handler
ffffffff8020c633:	e8 26 01 00 00       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c638:	e8 81 7b 01 00       	call   ffffffff802241be <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c63d:	0f 01 f8             	swapgs
ffffffff8020c640:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c644:	8e d8                	mov    %eax,%ds
ffffffff8020c646:	58                   	pop    %rax
ffffffff8020c647:	5b                   	pop    %rbx
ffffffff8020c648:	59                   	pop    %rcx
ffffffff8020c649:	5a                   	pop    %rdx
ffffffff8020c64a:	5e                   	pop    %rsi
ffffffff8020c64b:	5f                   	pop    %rdi
ffffffff8020c64c:	5d                   	pop    %rbp
ffffffff8020c64d:	41 58                	pop    %r8
ffffffff8020c64f:	41 59                	pop    %r9
ffffffff8020c651:	41 5a                	pop    %r10
ffffffff8020c653:	41 5b                	pop    %r11
ffffffff8020c655:	41 5c                	pop    %r12
ffffffff8020c657:	41 5d                	pop    %r13
ffffffff8020c659:	41 5e                	pop    %r14
ffffffff8020c65b:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c65d:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c661:	48 cf                	iretq

ffffffff8020c663 <SysTick_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_Handler:
    .global             SysTick_Handler
    SWAPGS
ffffffff8020c663:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c666:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c668:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c66d:	41 57                	push   %r15
ffffffff8020c66f:	41 56                	push   %r14
ffffffff8020c671:	41 55                	push   %r13
ffffffff8020c673:	41 54                	push   %r12
ffffffff8020c675:	41 53                	push   %r11
ffffffff8020c677:	41 52                	push   %r10
ffffffff8020c679:	41 51                	push   %r9
ffffffff8020c67b:	41 50                	push   %r8
ffffffff8020c67d:	55                   	push   %rbp
ffffffff8020c67e:	57                   	push   %rdi
ffffffff8020c67f:	56                   	push   %rsi
ffffffff8020c680:	52                   	push   %rdx
ffffffff8020c681:	51                   	push   %rcx
ffffffff8020c682:	53                   	push   %rbx
ffffffff8020c683:	50                   	push   %rax
ffffffff8020c684:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c688:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c68a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_Handler
ffffffff8020c68d:	e8 cc 00 00 00       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
    CALLQ               __RME_X64_SMP_Tick
ffffffff8020c692:	e8 6d 81 01 00       	call   ffffffff80224804 <__RME_X64_SMP_Tick>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c697:	e8 22 7b 01 00       	call   ffffffff802241be <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c69c:	0f 01 f8             	swapgs
ffffffff8020c69f:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c6a3:	8e d8                	mov    %eax,%ds
ffffffff8020c6a5:	58                   	pop    %rax
ffffffff8020c6a6:	5b                   	pop    %rbx
ffffffff8020c6a7:	59                   	pop    %rcx
ffffffff8020c6a8:	5a                   	pop    %rdx
ffffffff8020c6a9:	5e                   	pop    %rsi
ffffffff8020c6aa:	5f                   	pop    %rdi
ffffffff8020c6ab:	5d                   	pop    %rbp
ffffffff8020c6ac:	41 58                	pop    %r8
ffffffff8020c6ae:	41 59                	pop    %r9
ffffffff8020c6b0:	41 5a                	pop    %r10
ffffffff8020c6b2:	41 5b                	pop    %r11
ffffffff8020c6b4:	41 5c                	pop    %r12
ffffffff8020c6b6:	41 5d                	pop    %r13
ffffffff8020c6b8:	41 5e                	pop    %r14
ffffffff8020c6ba:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c6bc:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c6c0:	48 cf                	iretq

ffffffff8020c6c2 <SVC_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SVC_Handler:
    .global             SVC_Handler
    SWAPGS
ffffffff8020c6c2:	0f 01 f8             	swapgs
    /* Swap the pointers with the per-core kernel RSP */
    MOVQ                %RSP,%GS:(8192-8)
ffffffff8020c6c5:	65 48 89 24 25 f8 1f 	mov    %rsp,%gs:0x1ff8
ffffffff8020c6cc:	00 00 
    MOVQ                %GS:(8192-16),%RSP
ffffffff8020c6ce:	65 48 8b 24 25 f0 1f 	mov    %gs:0x1ff0,%rsp
ffffffff8020c6d5:	00 00 
    /* Simulate INT stack: High - [SS, RSP, RFLAGS, CS, RIP, ERRCODE] - Low */
    PUSHQ               $(USER_DATA)
ffffffff8020c6d7:	6a 23                	push   $0x23
    PUSHQ               %GS:(8192-8)
ffffffff8020c6d9:	65 ff 34 25 f8 1f 00 	push   %gs:0x1ff8
ffffffff8020c6e0:	00 
    PUSHQ               %R11
ffffffff8020c6e1:	41 53                	push   %r11
    PUSHQ               $(USER_CODE)
ffffffff8020c6e3:	6a 2b                	push   $0x2b
    PUSHQ               %RCX
ffffffff8020c6e5:	51                   	push   %rcx
    PUSHQ               $0
ffffffff8020c6e6:	6a 00                	push   $0x0
    /* We went into this from a SYSCALL - interrupt number 0x10000 */
    PUSHQ               $0x10000
ffffffff8020c6e8:	68 00 00 01 00       	push   $0x10000
    SAVE_GP_REGS
ffffffff8020c6ed:	41 57                	push   %r15
ffffffff8020c6ef:	41 56                	push   %r14
ffffffff8020c6f1:	41 55                	push   %r13
ffffffff8020c6f3:	41 54                	push   %r12
ffffffff8020c6f5:	41 53                	push   %r11
ffffffff8020c6f7:	41 52                	push   %r10
ffffffff8020c6f9:	41 51                	push   %r9
ffffffff8020c6fb:	41 50                	push   %r8
ffffffff8020c6fd:	55                   	push   %rbp
ffffffff8020c6fe:	57                   	push   %rdi
ffffffff8020c6ff:	56                   	push   %rsi
ffffffff8020c700:	52                   	push   %rdx
ffffffff8020c701:	51                   	push   %rcx
ffffffff8020c702:	53                   	push   %rbx
ffffffff8020c703:	50                   	push   %rax
ffffffff8020c704:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c708:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c70a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Svc_Handler
ffffffff8020c70d:	e8 6b 08 00 00       	call   ffffffff8020cf7d <_RME_Svc_Handler>
    RESTORE_GP_REGS
ffffffff8020c712:	0f 01 f8             	swapgs
ffffffff8020c715:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c719:	8e d8                	mov    %eax,%ds
ffffffff8020c71b:	58                   	pop    %rax
ffffffff8020c71c:	5b                   	pop    %rbx
ffffffff8020c71d:	59                   	pop    %rcx
ffffffff8020c71e:	5a                   	pop    %rdx
ffffffff8020c71f:	5e                   	pop    %rsi
ffffffff8020c720:	5f                   	pop    %rdi
ffffffff8020c721:	5d                   	pop    %rbp
ffffffff8020c722:	41 58                	pop    %r8
ffffffff8020c724:	41 59                	pop    %r9
ffffffff8020c726:	41 5a                	pop    %r10
ffffffff8020c728:	41 5b                	pop    %r11
ffffffff8020c72a:	41 5c                	pop    %r12
ffffffff8020c72c:	41 5d                	pop    %r13
ffffffff8020c72e:	41 5e                	pop    %r14
ffffffff8020c730:	41 5f                	pop    %r15
    /* See if we are forced to use IRET */
    TESTQ               $0x10000,(%RSP)
ffffffff8020c732:	48 f7 04 24 00 00 01 	testq  $0x10000,(%rsp)
ffffffff8020c739:	00 
    JZ                  Use_IRET
ffffffff8020c73a:	74 1c                	je     ffffffff8020c758 <Use_IRET>
    /* Just move these into the registers desired */
    /* CVE-2012-0217, CVE-2014-4699: Force canonical address on RIP */
    MOVQ                $0x7FFFFFFFFFFF,%RCX
ffffffff8020c73c:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffff,%rcx
ffffffff8020c743:	7f 00 00 
    ANDQ                16(%RSP),%RCX
ffffffff8020c746:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
    MOVQ                32(%RSP),%R11
ffffffff8020c74b:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    MOVQ                40(%RSP),%RSP
ffffffff8020c750:	48 8b 64 24 28       	mov    0x28(%rsp),%rsp
    /* Return to user-level */
    SYSRETQ
ffffffff8020c755:	48 0f 07             	sysretq

ffffffff8020c758 <Use_IRET>:
Use_IRET:
    /* Flag is zero, We are forced to use IRET, because this is from INT */
    ADDQ                $16,%RSP
ffffffff8020c758:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c75c:	48 cf                	iretq

ffffffff8020c75e <_RME_X64_Comp_Swap>:
and asynchronous communication. Different from most operating systems, it employs
thread migration model for cross-boundary synchronous communication rather than
simple blockpoints. This invocation design have many benefits in many facets.

* Kernel Function *************************************************************
There's no perfect operating system for a particular hardware. A hardware may
ffffffff8020c75e:	55                   	push   %rbp
ffffffff8020c75f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c762:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8020c766:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020c76a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020c76e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
have its own idiosyncrasies that needs extra hacks. RME's kernel function utility
provides a disciplined way of making such hacks, in case you need to add new 
ffffffff8020c772:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020c776:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8020c77a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c77e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8020c782:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020c787:	0f 94 c0             	sete   %al
ffffffff8020c78a:	88 45 ff             	mov    %al,-0x1(%rbp)
system calls or directly manipulate hardware.

* The Use of 'volatile' *******************************************************
'volatile' is not needed in the kernel because the syscall interface acts as a
ffffffff8020c78d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
natural compiler barrier. We're safe to assume that, during one syscall, data
ffffffff8020c791:	c9                   	leave
ffffffff8020c792:	c3                   	ret

ffffffff8020c793 <_RME_X64_Fetch_Add>:
in memory remains unchanged. If anything changes, it has been dealt with the 
dedicated assembly atomics. If LTO has been enabled, there are three cases:
ffffffff8020c793:	55                   	push   %rbp
ffffffff8020c794:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c797:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8020c79b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020c79f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
(1) Uniprocessor with C-implemented "atomics" with no real atomic support.
ffffffff8020c7a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020c7a7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8020c7ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c7af:	f0 48 0f c1 02       	lock xadd %rax,(%rdx)
ffffffff8020c7b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    In this case, compiler barriers are not needed due to no kernel concurrency.
(2) Multiprocessor with assembly-implemented atomics, but the compiler LTO does
    not honor the assembly functions; instead it thinks that they are opaque.
    In this case, the opaque function call itself is a full compiler barrier.
ffffffff8020c7b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
(3) Multiprocessor with assembly-implemented atomics, and the compiler LTO does
ffffffff8020c7bc:	c9                   	leave
ffffffff8020c7bd:	c3                   	ret

ffffffff8020c7be <_RME_X64_Fetch_And>:
    honor the assembly functions.
    In this case, the compiler should be aware of the semantics of the assembly,
ffffffff8020c7be:	55                   	push   %rbp
ffffffff8020c7bf:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c7c2:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020c7c6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020c7ca:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    and produce correct code.
* Function Name Rules *********************************************************
ffffffff8020c7ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020c7d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c7d6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020c7da:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020c7dd:	f0 48 21 02          	lock and %rax,(%rdx)
ffffffff8020c7e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
(1) No "_": OS entry function RME_Kmain and C entry "main".
(2) "_"   : Kernel functions that are be called by kernel.
(3) "__"  : HAL functions that are called by kernel.
(4) "___" : HAL functions that should only be called by HAL.
ffffffff8020c7e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
******************************************************************************/
ffffffff8020c7e9:	c9                   	leave
ffffffff8020c7ea:	c3                   	ret

ffffffff8020c7eb <_RME_X64_MSB_Get>:

/* Include *******************************************************************/
ffffffff8020c7eb:	55                   	push   %rbp
ffffffff8020c7ec:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c7ef:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020c7f3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
#define __HDR_DEF__
#include "rme_platform.h"
ffffffff8020c7f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c7fb:	48 0f bd c0          	bsr    %rax,%rax
ffffffff8020c7ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
#include "Kernel/rme_kernel.h"
#undef __HDR_DEF__

#define __HDR_STRUCT__
ffffffff8020c803:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
#include "rme_platform.h"
ffffffff8020c807:	c9                   	leave
ffffffff8020c808:	c3                   	ret

ffffffff8020c809 <__RME_Int_Disable>:
#include "Kernel/rme_kernel.h"
#undef __HDR_STRUCT__

ffffffff8020c809:	55                   	push   %rbp
ffffffff8020c80a:	48 89 e5             	mov    %rsp,%rbp
/* Private include */
ffffffff8020c80d:	fa                   	cli
#include "Kernel/rme_kernel.h"

#define __HDR_PUBLIC__
ffffffff8020c80e:	90                   	nop
ffffffff8020c80f:	5d                   	pop    %rbp
ffffffff8020c810:	c3                   	ret

ffffffff8020c811 <RME_X64_RDTSC>:
Return      : None.
******************************************************************************/
void _RME_List_Del(volatile struct RME_List* Prev,
                   volatile struct RME_List* Next)
{
    Next->Prev=Prev;
ffffffff8020c811:	55                   	push   %rbp
ffffffff8020c812:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c815:	48 83 ec 10          	sub    $0x10,%rsp
    Prev->Next=Next;
}
ffffffff8020c819:	0f 31                	rdtsc
ffffffff8020c81b:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8020c81e:	89 55 f8             	mov    %edx,-0x8(%rbp)
/* End Function:_RME_List_Del ************************************************/

/* Function:_RME_List_Ins *****************************************************
Description : Insert a node to the doubly-linked list.
ffffffff8020c821:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8020c824:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020c828:	48 89 c2             	mov    %rax,%rdx
ffffffff8020c82b:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8020c82e:	48 09 d0             	or     %rdx,%rax
Input       : struct RME_List* New - The new node to insert.
ffffffff8020c831:	c9                   	leave
ffffffff8020c832:	c3                   	ret

ffffffff8020c833 <RME_Int_Print>:
{
ffffffff8020c833:	55                   	push   %rbp
ffffffff8020c834:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c837:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8020c83b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    if(Int==0)
ffffffff8020c83f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8020c844:	75 14                	jne    ffffffff8020c85a <RME_Int_Print+0x27>
        __RME_Putchar('0');
ffffffff8020c846:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020c84b:	e8 ae e7 00 00       	call   ffffffff8021affe <__RME_Putchar>
        return 1;
ffffffff8020c850:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020c855:	e9 0b 01 00 00       	jmp    ffffffff8020c965 <RME_Int_Print+0x132>
    if(Int<0)
ffffffff8020c85a:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8020c85f:	79 1f                	jns    ffffffff8020c880 <RME_Int_Print+0x4d>
        __RME_Putchar('-');
ffffffff8020c861:	bf 2d 00 00 00       	mov    $0x2d,%edi
ffffffff8020c866:	e8 93 e7 00 00       	call   ffffffff8021affe <__RME_Putchar>
        Abs=-Int;
ffffffff8020c86b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020c86f:	48 f7 d8             	neg    %rax
ffffffff8020c872:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        Num=1;
ffffffff8020c876:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8020c87d:	00 
ffffffff8020c87e:	eb 10                	jmp    ffffffff8020c890 <RME_Int_Print+0x5d>
        Abs=Int;
ffffffff8020c880:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020c884:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        Num=0;
ffffffff8020c888:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020c88f:	00 
    Count=0;
ffffffff8020c890:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8020c897:	00 
    Div=1;
ffffffff8020c898:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
ffffffff8020c89f:	00 
    Iter=Abs;
ffffffff8020c8a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c8a4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Iter/=10;
ffffffff8020c8a8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020c8ac:	48 ba 67 66 66 66 66 	movabs $0x6666666666666667,%rdx
ffffffff8020c8b3:	66 66 66 
ffffffff8020c8b6:	48 89 c8             	mov    %rcx,%rax
ffffffff8020c8b9:	48 f7 ea             	imul   %rdx
ffffffff8020c8bc:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c8bf:	48 c1 f8 02          	sar    $0x2,%rax
ffffffff8020c8c3:	48 c1 f9 3f          	sar    $0x3f,%rcx
ffffffff8020c8c7:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020c8ca:	48 29 d0             	sub    %rdx,%rax
ffffffff8020c8cd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Count++;
ffffffff8020c8d1:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
        if(Iter!=0)
ffffffff8020c8d6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8020c8db:	74 17                	je     ffffffff8020c8f4 <RME_Int_Print+0xc1>
            Div*=10;
ffffffff8020c8dd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020c8e1:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c8e4:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8020c8e8:	48 01 d0             	add    %rdx,%rax
ffffffff8020c8eb:	48 01 c0             	add    %rax,%rax
ffffffff8020c8ee:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        Iter/=10;
ffffffff8020c8f2:	eb b4                	jmp    ffffffff8020c8a8 <RME_Int_Print+0x75>
            break;
ffffffff8020c8f4:	90                   	nop
    Num+=Count;
ffffffff8020c8f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c8f9:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    Iter=Abs;
ffffffff8020c8fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c901:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while(Count>0)
ffffffff8020c905:	eb 53                	jmp    ffffffff8020c95a <RME_Int_Print+0x127>
        Count--;
ffffffff8020c907:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020c90c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c910:	48 99                	cqto
ffffffff8020c912:	48 f7 7d d8          	idivq  -0x28(%rbp)
ffffffff8020c916:	83 c0 30             	add    $0x30,%eax
ffffffff8020c919:	0f be c0             	movsbl %al,%eax
ffffffff8020c91c:	89 c7                	mov    %eax,%edi
ffffffff8020c91e:	e8 db e6 00 00       	call   ffffffff8021affe <__RME_Putchar>
        Iter=Iter%Div;
ffffffff8020c923:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c927:	48 99                	cqto
ffffffff8020c929:	48 f7 7d d8          	idivq  -0x28(%rbp)
ffffffff8020c92d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        Div/=10;
ffffffff8020c931:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8020c935:	48 ba 67 66 66 66 66 	movabs $0x6666666666666667,%rdx
ffffffff8020c93c:	66 66 66 
ffffffff8020c93f:	48 89 c8             	mov    %rcx,%rax
ffffffff8020c942:	48 f7 ea             	imul   %rdx
ffffffff8020c945:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c948:	48 c1 f8 02          	sar    $0x2,%rax
ffffffff8020c94c:	48 c1 f9 3f          	sar    $0x3f,%rcx
ffffffff8020c950:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020c953:	48 29 d0             	sub    %rdx,%rax
ffffffff8020c956:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Count>0)
ffffffff8020c95a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8020c95f:	7f a6                	jg     ffffffff8020c907 <RME_Int_Print+0xd4>
    return Num;
ffffffff8020c961:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020c965:	c9                   	leave
ffffffff8020c966:	c3                   	ret

ffffffff8020c967 <RME_Hex_Print>:
{
ffffffff8020c967:	55                   	push   %rbp
ffffffff8020c968:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c96b:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8020c96f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    if(Uint==0U)
ffffffff8020c973:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020c978:	75 14                	jne    ffffffff8020c98e <RME_Hex_Print+0x27>
        __RME_Putchar('0');
ffffffff8020c97a:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020c97f:	e8 7a e6 00 00       	call   ffffffff8021affe <__RME_Putchar>
        return 1;
ffffffff8020c984:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020c989:	e9 95 00 00 00       	jmp    ffffffff8020ca23 <RME_Hex_Print+0xbc>
    Count=0U;
ffffffff8020c98e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8020c995:	00 
    Iter=Uint;
ffffffff8020c996:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020c99a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020c99e:	eb 0a                	jmp    ffffffff8020c9aa <RME_Hex_Print+0x43>
        Iter<<=4;
ffffffff8020c9a0:	48 c1 65 f8 04       	shlq   $0x4,-0x8(%rbp)
        Count++;
ffffffff8020c9a5:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020c9aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020c9ae:	48 c1 e8 3c          	shr    $0x3c,%rax
ffffffff8020c9b2:	48 85 c0             	test   %rax,%rax
ffffffff8020c9b5:	74 e9                	je     ffffffff8020c9a0 <RME_Hex_Print+0x39>
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020c9b7:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff8020c9bc:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff8020c9c0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Num=Count;
ffffffff8020c9c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c9c8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while(Count>0U)
ffffffff8020c9cc:	eb 4a                	jmp    ffffffff8020ca18 <RME_Hex_Print+0xb1>
        Count--;
ffffffff8020c9ce:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
        Iter=(Uint>>(Count<<2U))&0x0FU;
ffffffff8020c9d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c9d7:	c1 e0 02             	shl    $0x2,%eax
ffffffff8020c9da:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020c9de:	89 c1                	mov    %eax,%ecx
ffffffff8020c9e0:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020c9e3:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c9e6:	83 e0 0f             	and    $0xf,%eax
ffffffff8020c9e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        if(Iter<10U)
ffffffff8020c9ed:	48 83 7d f8 09       	cmpq   $0x9,-0x8(%rbp)
ffffffff8020c9f2:	77 13                	ja     ffffffff8020ca07 <RME_Hex_Print+0xa0>
            __RME_Putchar((rme_s8_t)Iter+'0');
ffffffff8020c9f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020c9f8:	83 c0 30             	add    $0x30,%eax
ffffffff8020c9fb:	0f be c0             	movsbl %al,%eax
ffffffff8020c9fe:	89 c7                	mov    %eax,%edi
ffffffff8020ca00:	e8 f9 e5 00 00       	call   ffffffff8021affe <__RME_Putchar>
ffffffff8020ca05:	eb 11                	jmp    ffffffff8020ca18 <RME_Hex_Print+0xb1>
            __RME_Putchar((rme_s8_t)Iter+'A'-10);
ffffffff8020ca07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca0b:	83 c0 37             	add    $0x37,%eax
ffffffff8020ca0e:	0f be c0             	movsbl %al,%eax
ffffffff8020ca11:	89 c7                	mov    %eax,%edi
ffffffff8020ca13:	e8 e6 e5 00 00       	call   ffffffff8021affe <__RME_Putchar>
    while(Count>0U)
ffffffff8020ca18:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8020ca1d:	75 af                	jne    ffffffff8020c9ce <RME_Hex_Print+0x67>
    return (rme_cnt_t)Num;
ffffffff8020ca1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff8020ca23:	c9                   	leave
ffffffff8020ca24:	c3                   	ret

ffffffff8020ca25 <RME_Str_Print>:
{
ffffffff8020ca25:	55                   	push   %rbp
ffffffff8020ca26:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ca29:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ca2d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020ca31:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ca38:	00 
ffffffff8020ca39:	eb 2f                	jmp    ffffffff8020ca6a <RME_Str_Print+0x45>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020ca3b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ca3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca43:	48 01 d0             	add    %rdx,%rax
ffffffff8020ca46:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ca49:	84 c0                	test   %al,%al
ffffffff8020ca4b:	74 29                	je     ffffffff8020ca76 <RME_Str_Print+0x51>
        __RME_Putchar(String[Count]);
ffffffff8020ca4d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ca51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca55:	48 01 d0             	add    %rdx,%rax
ffffffff8020ca58:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ca5b:	0f be c0             	movsbl %al,%eax
ffffffff8020ca5e:	89 c7                	mov    %eax,%edi
ffffffff8020ca60:	e8 99 e5 00 00       	call   ffffffff8021affe <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020ca65:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020ca6a:	48 81 7d f8 fe 00 00 	cmpq   $0xfe,-0x8(%rbp)
ffffffff8020ca71:	00 
ffffffff8020ca72:	76 c7                	jbe    ffffffff8020ca3b <RME_Str_Print+0x16>
ffffffff8020ca74:	eb 01                	jmp    ffffffff8020ca77 <RME_Str_Print+0x52>
            break;
ffffffff8020ca76:	90                   	nop
    return (rme_cnt_t)Count;
ffffffff8020ca77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020ca7b:	c9                   	leave
ffffffff8020ca7c:	c3                   	ret

ffffffff8020ca7d <RME_Log>:
{
ffffffff8020ca7d:	55                   	push   %rbp
ffffffff8020ca7e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ca81:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ca85:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020ca89:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020ca8d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8020ca91:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    RME_DBG_S("\r\n***\r\nKernel panic - not syncing :\r\n"); \
ffffffff8020ca95:	48 c7 c7 a0 6f 22 80 	mov    $0xffffffff80226fa0,%rdi
ffffffff8020ca9c:	e8 84 ff ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(File); \
ffffffff8020caa1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020caa5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020caa8:	e8 78 ff ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(" , Line "); \
ffffffff8020caad:	48 c7 c7 c6 6f 22 80 	mov    $0xffffffff80226fc6,%rdi
ffffffff8020cab4:	e8 6c ff ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_I(Line); \
ffffffff8020cab9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cabd:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cac0:	e8 6e fd ff ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\r\n"); \
ffffffff8020cac5:	48 c7 c7 cf 6f 22 80 	mov    $0xffffffff80226fcf,%rdi
ffffffff8020cacc:	e8 54 ff ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(Date); \
ffffffff8020cad1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cad5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cad8:	e8 48 ff ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(" , "); \
ffffffff8020cadd:	48 c7 c7 d2 6f 22 80 	mov    $0xffffffff80226fd2,%rdi
ffffffff8020cae4:	e8 3c ff ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(Time); \
ffffffff8020cae9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020caed:	48 89 c7             	mov    %rax,%rdi
ffffffff8020caf0:	e8 30 ff ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S("\r\n"); \
ffffffff8020caf5:	48 c7 c7 cf 6f 22 80 	mov    $0xffffffff80226fcf,%rdi
ffffffff8020cafc:	e8 24 ff ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
}
ffffffff8020cb01:	90                   	nop
ffffffff8020cb02:	c9                   	leave
ffffffff8020cb03:	c3                   	ret

ffffffff8020cb04 <_RME_MSB_Generic>:
{
ffffffff8020cb04:	55                   	push   %rbp
ffffffff8020cb05:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cb08:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cb0c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    if(Value>=RME_POW2(32U))
ffffffff8020cb10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
ffffffff8020cb15:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb19:	73 58                	jae    ffffffff8020cb73 <_RME_MSB_Generic+0x6f>
        if(Value>=RME_POW2(48U))
ffffffff8020cb1b:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffff,%rax
ffffffff8020cb22:	ff 00 00 
ffffffff8020cb25:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb29:	73 24                	jae    ffffffff8020cb4f <_RME_MSB_Generic+0x4b>
            if(Value>=RME_POW2(56U))
ffffffff8020cb2b:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffffff,%rax
ffffffff8020cb32:	ff ff 00 
ffffffff8020cb35:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb39:	73 0a                	jae    ffffffff8020cb45 <_RME_MSB_Generic+0x41>
                Bit=56U;
ffffffff8020cb3b:	48 c7 45 f8 38 00 00 	movq   $0x38,-0x8(%rbp)
ffffffff8020cb42:	00 
ffffffff8020cb43:	eb 72                	jmp    ffffffff8020cbb7 <_RME_MSB_Generic+0xb3>
                Bit=48U;
ffffffff8020cb45:	48 c7 45 f8 30 00 00 	movq   $0x30,-0x8(%rbp)
ffffffff8020cb4c:	00 
ffffffff8020cb4d:	eb 68                	jmp    ffffffff8020cbb7 <_RME_MSB_Generic+0xb3>
            if(Value>=RME_POW2(40U))
ffffffff8020cb4f:	48 b8 ff ff ff ff ff 	movabs $0xffffffffff,%rax
ffffffff8020cb56:	00 00 00 
ffffffff8020cb59:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb5d:	73 0a                	jae    ffffffff8020cb69 <_RME_MSB_Generic+0x65>
                Bit=40U;
ffffffff8020cb5f:	48 c7 45 f8 28 00 00 	movq   $0x28,-0x8(%rbp)
ffffffff8020cb66:	00 
ffffffff8020cb67:	eb 4e                	jmp    ffffffff8020cbb7 <_RME_MSB_Generic+0xb3>
                Bit=32U;
ffffffff8020cb69:	48 c7 45 f8 20 00 00 	movq   $0x20,-0x8(%rbp)
ffffffff8020cb70:	00 
ffffffff8020cb71:	eb 44                	jmp    ffffffff8020cbb7 <_RME_MSB_Generic+0xb3>
        if(Value>=RME_POW2(16U))
ffffffff8020cb73:	48 81 7d e8 ff ff 00 	cmpq   $0xffff,-0x18(%rbp)
ffffffff8020cb7a:	00 
ffffffff8020cb7b:	76 1e                	jbe    ffffffff8020cb9b <_RME_MSB_Generic+0x97>
            if(Value>=RME_POW2(24U))
ffffffff8020cb7d:	48 81 7d e8 ff ff ff 	cmpq   $0xffffff,-0x18(%rbp)
ffffffff8020cb84:	00 
ffffffff8020cb85:	76 0a                	jbe    ffffffff8020cb91 <_RME_MSB_Generic+0x8d>
                Bit=24U;
ffffffff8020cb87:	48 c7 45 f8 18 00 00 	movq   $0x18,-0x8(%rbp)
ffffffff8020cb8e:	00 
ffffffff8020cb8f:	eb 26                	jmp    ffffffff8020cbb7 <_RME_MSB_Generic+0xb3>
                Bit=16U;
ffffffff8020cb91:	48 c7 45 f8 10 00 00 	movq   $0x10,-0x8(%rbp)
ffffffff8020cb98:	00 
ffffffff8020cb99:	eb 1c                	jmp    ffffffff8020cbb7 <_RME_MSB_Generic+0xb3>
            if(Value>=RME_POW2(8U))
ffffffff8020cb9b:	48 81 7d e8 ff 00 00 	cmpq   $0xff,-0x18(%rbp)
ffffffff8020cba2:	00 
ffffffff8020cba3:	76 0a                	jbe    ffffffff8020cbaf <_RME_MSB_Generic+0xab>
                Bit=8U;
ffffffff8020cba5:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
ffffffff8020cbac:	00 
ffffffff8020cbad:	eb 08                	jmp    ffffffff8020cbb7 <_RME_MSB_Generic+0xb3>
                Bit=0U;
ffffffff8020cbaf:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cbb6:	00 
    return Table[Value>>Bit]+Bit;
ffffffff8020cbb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cbbb:	89 c2                	mov    %eax,%edx
ffffffff8020cbbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbc1:	89 d1                	mov    %edx,%ecx
ffffffff8020cbc3:	48 d3 e8             	shr    %cl,%rax
ffffffff8020cbc6:	0f b6 80 20 71 22 80 	movzbl -0x7fdd8ee0(%rax),%eax
ffffffff8020cbcd:	0f b6 d0             	movzbl %al,%edx
ffffffff8020cbd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cbd4:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020cbd7:	c9                   	leave
ffffffff8020cbd8:	c3                   	ret

ffffffff8020cbd9 <_RME_LSB_Generic>:
{
ffffffff8020cbd9:	55                   	push   %rbp
ffffffff8020cbda:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cbdd:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cbe1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    if((Value<<32U)==0U)
ffffffff8020cbe5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbe9:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020cbed:	48 85 c0             	test   %rax,%rax
ffffffff8020cbf0:	75 4f                	jne    ffffffff8020cc41 <_RME_LSB_Generic+0x68>
        if((Value<<16U)==0U)
ffffffff8020cbf2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbf6:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff8020cbfa:	48 85 c0             	test   %rax,%rax
ffffffff8020cbfd:	75 21                	jne    ffffffff8020cc20 <_RME_LSB_Generic+0x47>
            if((Value<<8U)==0U)
ffffffff8020cbff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc03:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8020cc07:	48 85 c0             	test   %rax,%rax
ffffffff8020cc0a:	75 0a                	jne    ffffffff8020cc16 <_RME_LSB_Generic+0x3d>
                Bit=56U;
ffffffff8020cc0c:	48 c7 45 f8 38 00 00 	movq   $0x38,-0x8(%rbp)
ffffffff8020cc13:	00 
ffffffff8020cc14:	eb 78                	jmp    ffffffff8020cc8e <_RME_LSB_Generic+0xb5>
                Bit=48U;
ffffffff8020cc16:	48 c7 45 f8 30 00 00 	movq   $0x30,-0x8(%rbp)
ffffffff8020cc1d:	00 
ffffffff8020cc1e:	eb 6e                	jmp    ffffffff8020cc8e <_RME_LSB_Generic+0xb5>
            if((Value<<24U)==0U)
ffffffff8020cc20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc24:	48 c1 e0 18          	shl    $0x18,%rax
ffffffff8020cc28:	48 85 c0             	test   %rax,%rax
ffffffff8020cc2b:	75 0a                	jne    ffffffff8020cc37 <_RME_LSB_Generic+0x5e>
                Bit=40U;
ffffffff8020cc2d:	48 c7 45 f8 28 00 00 	movq   $0x28,-0x8(%rbp)
ffffffff8020cc34:	00 
ffffffff8020cc35:	eb 57                	jmp    ffffffff8020cc8e <_RME_LSB_Generic+0xb5>
                Bit=32U;
ffffffff8020cc37:	48 c7 45 f8 20 00 00 	movq   $0x20,-0x8(%rbp)
ffffffff8020cc3e:	00 
ffffffff8020cc3f:	eb 4d                	jmp    ffffffff8020cc8e <_RME_LSB_Generic+0xb5>
        if((Value<<48U)==0U)
ffffffff8020cc41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc45:	48 c1 e0 30          	shl    $0x30,%rax
ffffffff8020cc49:	48 85 c0             	test   %rax,%rax
ffffffff8020cc4c:	75 21                	jne    ffffffff8020cc6f <_RME_LSB_Generic+0x96>
            if((Value<<40U)==0U)
ffffffff8020cc4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc52:	48 c1 e0 28          	shl    $0x28,%rax
ffffffff8020cc56:	48 85 c0             	test   %rax,%rax
ffffffff8020cc59:	75 0a                	jne    ffffffff8020cc65 <_RME_LSB_Generic+0x8c>
                Bit=24U;
ffffffff8020cc5b:	48 c7 45 f8 18 00 00 	movq   $0x18,-0x8(%rbp)
ffffffff8020cc62:	00 
ffffffff8020cc63:	eb 29                	jmp    ffffffff8020cc8e <_RME_LSB_Generic+0xb5>
                Bit=16U;
ffffffff8020cc65:	48 c7 45 f8 10 00 00 	movq   $0x10,-0x8(%rbp)
ffffffff8020cc6c:	00 
ffffffff8020cc6d:	eb 1f                	jmp    ffffffff8020cc8e <_RME_LSB_Generic+0xb5>
            if((Value<<56U)==0U)
ffffffff8020cc6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc73:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff8020cc77:	48 85 c0             	test   %rax,%rax
ffffffff8020cc7a:	75 0a                	jne    ffffffff8020cc86 <_RME_LSB_Generic+0xad>
                Bit=8U;
ffffffff8020cc7c:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
ffffffff8020cc83:	00 
ffffffff8020cc84:	eb 08                	jmp    ffffffff8020cc8e <_RME_LSB_Generic+0xb5>
                Bit=0U;
ffffffff8020cc86:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cc8d:	00 
    return Table[(rme_u8_t)(Value>>Bit)]+Bit;
ffffffff8020cc8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cc92:	89 c2                	mov    %eax,%edx
ffffffff8020cc94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc98:	89 d1                	mov    %edx,%ecx
ffffffff8020cc9a:	48 d3 e8             	shr    %cl,%rax
ffffffff8020cc9d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020cca0:	48 98                	cltq
ffffffff8020cca2:	0f b6 80 20 72 22 80 	movzbl -0x7fdd8de0(%rax),%eax
ffffffff8020cca9:	0f b6 d0             	movzbl %al,%edx
ffffffff8020ccac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ccb0:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020ccb3:	c9                   	leave
ffffffff8020ccb4:	c3                   	ret

ffffffff8020ccb5 <_RME_Comp_Swap_Single>:
{
ffffffff8020ccb5:	55                   	push   %rbp
ffffffff8020ccb6:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ccb9:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020ccbd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020ccc1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020ccc5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    if(*Ptr==Old)
ffffffff8020ccc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cccd:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ccd0:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8020ccd4:	75 12                	jne    ffffffff8020cce8 <_RME_Comp_Swap_Single+0x33>
        *Ptr=New;
ffffffff8020ccd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ccda:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ccde:	48 89 10             	mov    %rdx,(%rax)
        return 1U;
ffffffff8020cce1:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020cce6:	eb 05                	jmp    ffffffff8020cced <_RME_Comp_Swap_Single+0x38>
    return 0U;
ffffffff8020cce8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cced:	c9                   	leave
ffffffff8020ccee:	c3                   	ret

ffffffff8020ccef <_RME_Fetch_Add_Single>:
{
ffffffff8020ccef:	55                   	push   %rbp
ffffffff8020ccf0:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ccf3:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ccf7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020ccfb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    Old=(rme_cnt_t)(*Ptr);
ffffffff8020ccff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd03:	48 8b 00             	mov    (%rax),%rax
ffffffff8020cd06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    *Ptr=(rme_ptr_t)(Old+Addend);
ffffffff8020cd0a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd0e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cd12:	48 01 d0             	add    %rdx,%rax
ffffffff8020cd15:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cd18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd1c:	48 89 10             	mov    %rdx,(%rax)
    return (rme_ptr_t)Old;
ffffffff8020cd1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020cd23:	c9                   	leave
ffffffff8020cd24:	c3                   	ret

ffffffff8020cd25 <_RME_Fetch_And_Single>:
{
ffffffff8020cd25:	55                   	push   %rbp
ffffffff8020cd26:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd29:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cd2d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cd31:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    Old=*Ptr;
ffffffff8020cd35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd39:	48 8b 00             	mov    (%rax),%rax
ffffffff8020cd3c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    *Ptr=Old&Operand;
ffffffff8020cd40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd44:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff8020cd48:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cd4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd4f:	48 89 10             	mov    %rdx,(%rax)
    return Old;
ffffffff8020cd52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020cd56:	c9                   	leave
ffffffff8020cd57:	c3                   	ret

ffffffff8020cd58 <_RME_List_Crt>:
{
ffffffff8020cd58:	55                   	push   %rbp
ffffffff8020cd59:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd5c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020cd60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    Head->Prev=Head;
ffffffff8020cd64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd68:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd6c:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Head->Next=Head;
ffffffff8020cd70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd74:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd78:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cd7b:	90                   	nop
ffffffff8020cd7c:	c9                   	leave
ffffffff8020cd7d:	c3                   	ret

ffffffff8020cd7e <_RME_List_Del>:
{
ffffffff8020cd7e:	55                   	push   %rbp
ffffffff8020cd7f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd82:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8020cd86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020cd8a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Next->Prev=Prev;
ffffffff8020cd8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cd92:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd96:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=Next;
ffffffff8020cd9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd9e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020cda2:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cda5:	90                   	nop
ffffffff8020cda6:	c9                   	leave
ffffffff8020cda7:	c3                   	ret

ffffffff8020cda8 <_RME_List_Ins>:
Return      : None.
******************************************************************************/
void _RME_List_Ins(volatile struct RME_List* New,
                   volatile struct RME_List* Prev,
                   volatile struct RME_List* Next)
{
ffffffff8020cda8:	55                   	push   %rbp
ffffffff8020cda9:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cdac:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cdb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020cdb4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020cdb8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    Next->Prev=New;
ffffffff8020cdbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cdc0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cdc4:	48 89 50 08          	mov    %rdx,0x8(%rax)
    New->Next=Next;
ffffffff8020cdc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cdcc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020cdd0:	48 89 10             	mov    %rdx,(%rax)
    New->Prev=Prev;
ffffffff8020cdd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cdd7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020cddb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=New;
ffffffff8020cddf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cde3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cde7:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cdea:	90                   	nop
ffffffff8020cdeb:	c9                   	leave
ffffffff8020cdec:	c3                   	ret

ffffffff8020cded <_RME_Clear>:
Output      : None.
Return      : None.
******************************************************************************/
void _RME_Clear(void* Addr,
                rme_ptr_t Size)
{
ffffffff8020cded:	55                   	push   %rbp
ffffffff8020cdee:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cdf1:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cdf5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cdf9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Count;

    for(Count=0U;Count<Size;Count++)
ffffffff8020cdfd:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ce04:	00 
ffffffff8020ce05:	eb 13                	jmp    ffffffff8020ce1a <_RME_Clear+0x2d>
    {
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ce07:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ce0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce0f:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce12:	c6 00 00             	movb   $0x0,(%rax)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ce15:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020ce1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce1e:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff8020ce22:	72 e3                	jb     ffffffff8020ce07 <_RME_Clear+0x1a>
    }
}
ffffffff8020ce24:	90                   	nop
ffffffff8020ce25:	90                   	nop
ffffffff8020ce26:	c9                   	leave
ffffffff8020ce27:	c3                   	ret

ffffffff8020ce28 <_RME_Memcmp>:
                          value. If Ptr1==Ptr2, then return 0;
******************************************************************************/
rme_ret_t _RME_Memcmp(const void* Ptr1,
                      const void* Ptr2,
                      rme_ptr_t Num)
{
ffffffff8020ce28:	55                   	push   %rbp
ffffffff8020ce29:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ce2c:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8020ce30:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020ce34:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020ce38:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    const rme_s8_t* Dst;
    const rme_s8_t* Src;
    rme_ptr_t Count;

    Dst=(const rme_s8_t*)Ptr1;
ffffffff8020ce3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ce40:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Src=(const rme_s8_t*)Ptr2;
ffffffff8020ce44:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ce48:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    for(Count=0U;Count<Num;Count++)
ffffffff8020ce4c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ce53:	00 
ffffffff8020ce54:	eb 4e                	jmp    ffffffff8020cea4 <_RME_Memcmp+0x7c>
    {
        if(Dst[Count]!=Src[Count])
ffffffff8020ce56:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020ce5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce5e:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce61:	0f b6 10             	movzbl (%rax),%edx
ffffffff8020ce64:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020ce68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce6c:	48 01 c8             	add    %rcx,%rax
ffffffff8020ce6f:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ce72:	38 c2                	cmp    %al,%dl
ffffffff8020ce74:	74 29                	je     ffffffff8020ce9f <_RME_Memcmp+0x77>
        {
            RME_COV_MARKER();
            
            return Dst[Count]-Src[Count];
ffffffff8020ce76:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020ce7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce7e:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce81:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ce84:	0f be d0             	movsbl %al,%edx
ffffffff8020ce87:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020ce8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce8f:	48 01 c8             	add    %rcx,%rax
ffffffff8020ce92:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ce95:	0f be c0             	movsbl %al,%eax
ffffffff8020ce98:	29 c2                	sub    %eax,%edx
ffffffff8020ce9a:	48 63 c2             	movslq %edx,%rax
ffffffff8020ce9d:	eb 14                	jmp    ffffffff8020ceb3 <_RME_Memcmp+0x8b>
    for(Count=0U;Count<Num;Count++)
ffffffff8020ce9f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020cea4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cea8:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff8020ceac:	72 a8                	jb     ffffffff8020ce56 <_RME_Memcmp+0x2e>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff8020ceae:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020ceb3:	c9                   	leave
ffffffff8020ceb4:	c3                   	ret

ffffffff8020ceb5 <_RME_Memcpy>:
Return      : None.
******************************************************************************/
void _RME_Memcpy(void* Dst,
                 void* Src,
                 rme_ptr_t Num)
{
ffffffff8020ceb5:	55                   	push   %rbp
ffffffff8020ceb6:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ceb9:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8020cebd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cec1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020cec5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    rme_ptr_t Count;

    for(Count=0U;Count<Num;Count++)
ffffffff8020cec9:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ced0:	00 
ffffffff8020ced1:	eb 20                	jmp    ffffffff8020cef3 <_RME_Memcpy+0x3e>
    {
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020ced3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020ced7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cedb:	48 01 d0             	add    %rdx,%rax
ffffffff8020cede:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020cee2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cee6:	48 01 ca             	add    %rcx,%rdx
ffffffff8020cee9:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ceec:	88 02                	mov    %al,(%rdx)
    for(Count=0U;Count<Num;Count++)
ffffffff8020ceee:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020cef3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cef7:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020cefb:	72 d6                	jb     ffffffff8020ced3 <_RME_Memcpy+0x1e>
    }
}
ffffffff8020cefd:	90                   	nop
ffffffff8020cefe:	90                   	nop
ffffffff8020ceff:	c9                   	leave
ffffffff8020cf00:	c3                   	ret

ffffffff8020cf01 <_RME_Diff>:
Output      : None.
Return      : rme_ptr_t - The distance.
******************************************************************************/
rme_ptr_t _RME_Diff(rme_ptr_t Num1,
                    rme_ptr_t Num2)
{
ffffffff8020cf01:	55                   	push   %rbp
ffffffff8020cf02:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cf05:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cf09:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cf0d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Diff1;
    rme_ptr_t Diff2;
    
    Diff1=Num1-Num2;
ffffffff8020cf11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cf15:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
ffffffff8020cf19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Diff2=Num2-Num1;
ffffffff8020cf1d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cf21:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff8020cf25:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    if(Diff1>Diff2)
ffffffff8020cf29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cf2d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8020cf31:	73 06                	jae    ffffffff8020cf39 <_RME_Diff+0x38>
    {
        RME_COV_MARKER();
        
        return Diff2;
ffffffff8020cf33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cf37:	eb 04                	jmp    ffffffff8020cf3d <_RME_Diff+0x3c>
    }
    else
    {
        RME_COV_MARKER();
        
        return Diff1;
ffffffff8020cf39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
}
ffffffff8020cf3d:	c9                   	leave
ffffffff8020cf3e:	c3                   	ret

ffffffff8020cf3f <RME_Kmain>:
Input       : None.
Output      : None.
Return      : rme_ret_t - This function never returns.
******************************************************************************/
rme_ret_t RME_Kmain(void)
{
ffffffff8020cf3f:	55                   	push   %rbp
ffffffff8020cf40:	48 89 e5             	mov    %rsp,%rbp
    /* Disable all interrupts first */
    __RME_Int_Disable();
ffffffff8020cf43:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020cf48:	e8 bc f8 ff ff       	call   ffffffff8020c809 <__RME_Int_Disable>
    /* Some low-level kernel assertions */
    _RME_Lowlvl_Check();
ffffffff8020cf4d:	e8 20 00 00 00       	call   ffffffff8020cf72 <_RME_Lowlvl_Check>
    /* Hardware low-level init */
    __RME_Lowlvl_Init();
ffffffff8020cf52:	e8 29 79 01 00       	call   ffffffff80224880 <__RME_Lowlvl_Init>
    /* Initialize the kernel page tables or memory mappings */
    __RME_Pgt_Kom_Init();
ffffffff8020cf57:	e8 61 79 01 00       	call   ffffffff802248bd <__RME_Pgt_Kom_Init>
    /* Initialize the kernel object allocation table - default init */
    _RME_Kot_Init(RME_KOT_WORD_NUM);
ffffffff8020cf5c:	bf 04 00 00 00       	mov    $0x4,%edi
ffffffff8020cf61:	e8 e2 52 00 00       	call   ffffffff80212248 <_RME_Kot_Init>
    /* Boot into the first process */
    __RME_Boot();
ffffffff8020cf66:	e8 0a 83 01 00       	call   ffffffff80225275 <__RME_Boot>
    /* Should never reach here */
    return 0;
ffffffff8020cf6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cf70:	5d                   	pop    %rbp
ffffffff8020cf71:	c3                   	ret

ffffffff8020cf72 <_RME_Lowlvl_Check>:
Input       : None.
Output      : None.
Return      : rme_ret_t - Always 0.
******************************************************************************/
static rme_ret_t _RME_Lowlvl_Check(void)
{
ffffffff8020cf72:	55                   	push   %rbp
ffffffff8020cf73:	48 89 e5             	mov    %rsp,%rbp
    /* Kernel memory allocation minimal size aligned to word boundary */
    RME_ASSERT(RME_KOM_SLOT_ORDER>=RME_WORD_ORDER-3U);
    /* Make sure the number of priorities do not exceed half-word boundary */
    RME_ASSERT(RME_PREEMPT_PRIO_NUM<=RME_POW2(RME_WORD_BIT>>1));
    
    return 0;
ffffffff8020cf76:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cf7b:	5d                   	pop    %rbp
ffffffff8020cf7c:	c3                   	ret

ffffffff8020cf7d <_RME_Svc_Handler>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Svc_Handler(struct RME_Reg_Struct* Reg)
{
ffffffff8020cf7d:	55                   	push   %rbp
ffffffff8020cf7e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cf81:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020cf85:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    struct RME_Inv_Struct* Inv_Top;
    struct RME_Cap_Cpt* Cpt;

    /* Get the system call parameters from the system call */
    __RME_Svc_Param_Get(Reg, &Svc, &Cid, Param);
ffffffff8020cf89:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
ffffffff8020cf8d:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
ffffffff8020cf91:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
ffffffff8020cf95:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020cf99:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cf9c:	e8 b3 9e 01 00       	call   ffffffff80226e54 <__RME_Svc_Param_Get>
    /* System call number takes [5:0] bits */
    Svc_Num=Svc&RME_MASK_END(5U);
ffffffff8020cfa1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020cfa5:	83 e0 3f             	and    $0x3f,%eax
ffffffff8020cfa8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* Ultra-fast path - synchronous invocation returning */
    if(Svc_Num==RME_SVC_INV_RET)
ffffffff8020cfac:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8020cfb1:	75 48                	jne    ffffffff8020cffb <_RME_Svc_Handler+0x7e>
    {
        RME_COV_MARKER();
        
        Retval=_RME_Inv_Ret(Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
ffffffff8020cfb3:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8020cfb7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020cfbb:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020cfc0:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020cfc3:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cfc6:	e8 aa d8 00 00       	call   ffffffff8021a875 <_RME_Inv_Ret>
ffffffff8020cfcb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                            Param[0],                                       /* rme_ptr_t Retval */
                            0U);                                            /* rme_ptr_t Is_Exc */
        RME_SWITCH_RETURN(Reg, Retval);
ffffffff8020cfcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cfd3:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020cfd7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020cfda:	48 85 c0             	test   %rax,%rax
ffffffff8020cfdd:	0f 84 16 09 00 00    	je     ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
ffffffff8020cfe3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cfe7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020cfeb:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020cfee:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cff1:	e8 d5 9e 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
ffffffff8020cff6:	e9 fe 08 00 00       	jmp    ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
        /* No action required */
    }
    
    /* Get our current capability table. No need to check whether it is frozen
     * because it can't be deleted anyway */
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020cffb:	e8 3f e8 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020d000:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020d004:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff8020d008:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d00c:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8020d013:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d017:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8020d01d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d020:	74 0d                	je     ffffffff8020d02f <_RME_Svc_Handler+0xb2>
ffffffff8020d022:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d026:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8020d02d:	eb 05                	jmp    ffffffff8020d034 <_RME_Svc_Handler+0xb7>
ffffffff8020d02f:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020d034:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d038:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020d03d:	75 12                	jne    ffffffff8020d051 <_RME_Svc_Handler+0xd4>
    {
        RME_COV_MARKER();
        
        Cpt=Thd_Cur->Sched.Prc->Cpt;
ffffffff8020d03f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d043:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8020d047:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020d04b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020d04f:	eb 10                	jmp    ffffffff8020d061 <_RME_Svc_Handler+0xe4>
    }
    else
    {
        RME_COV_MARKER();
        
        Cpt=Inv_Top->Prc->Cpt;
ffffffff8020d051:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020d055:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d059:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020d05d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }

    /* Fast path - synchronous invocation activation */
    if(Svc_Num==RME_SVC_INV_ACT)
ffffffff8020d061:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
ffffffff8020d066:	75 51                	jne    ffffffff8020d0b9 <_RME_Svc_Handler+0x13c>
    {
        RME_COV_MARKER();
        
        Retval=_RME_Inv_Act(Cpt,
ffffffff8020d068:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                            Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
                            (rme_cid_t)Param[0],                            /* rme_cid_t Cap_Inv */
ffffffff8020d06c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
        Retval=_RME_Inv_Act(Cpt,
ffffffff8020d070:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d073:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d077:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d07b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d07e:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d081:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d084:	e8 a0 d4 00 00       	call   ffffffff8021a529 <_RME_Inv_Act>
ffffffff8020d089:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                            Param[1]);                                      /* rme_ptr_t Param */
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d08d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d091:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d095:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d098:	48 85 c0             	test   %rax,%rax
ffffffff8020d09b:	0f 84 58 08 00 00    	je     ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
ffffffff8020d0a1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d0a5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d0a9:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d0ac:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d0af:	e8 17 9e 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
ffffffff8020d0b4:	e9 40 08 00 00       	jmp    ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
     * of these functions shall be: If the function is successful, they shall
     * perform the return value saving on proper register stacks by themselves;
     * if the function fails, it should not conduct such return value saving.
     * These paths are less optimized than synchronous invocation, but are still
     * optimized anyway. */
    switch(Svc_Num)
ffffffff8020d0b9:	48 83 7d e8 09       	cmpq   $0x9,-0x18(%rbp)
ffffffff8020d0be:	0f 87 02 03 00 00    	ja     ffffffff8020d3c6 <_RME_Svc_Handler+0x449>
ffffffff8020d0c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d0c8:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020d0cc:	48 05 d8 6f 22 80    	add    $0xffffffff80226fd8,%rax
ffffffff8020d0d2:	48 8b 00             	mov    (%rax),%rax
ffffffff8020d0d5:	ff e0                	jmp    *%rax
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Snd(Cpt,
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d0d7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Snd(Cpt,
ffffffff8020d0db:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d0de:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff8020d0e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d0e6:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d0e9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d0ec:	e8 a8 bd 00 00       	call   ffffffff80218e99 <_RME_Sig_Snd>
ffffffff8020d0f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d0f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d0f9:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d0fd:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d100:	48 85 c0             	test   %rax,%rax
ffffffff8020d103:	0f 84 f0 07 00 00    	je     ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
ffffffff8020d109:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d10d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d111:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d114:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d117:	e8 af 9d 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
ffffffff8020d11c:	e9 d8 07 00 00       	jmp    ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
        /* Receive from a signal endpoint */
        case RME_SVC_SIG_RCV:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff8020d121:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Sig */
ffffffff8020d125:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff8020d129:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d12c:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d130:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d134:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d137:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d13a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d13d:	e8 d0 c0 00 00       	call   ffffffff80219212 <_RME_Sig_Rcv>
ffffffff8020d142:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Option */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d146:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d14a:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d14e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d151:	48 85 c0             	test   %rax,%rax
ffffffff8020d154:	0f 84 9f 07 00 00    	je     ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
ffffffff8020d15a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d15e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d162:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d165:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d168:	e8 5e 9d 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
ffffffff8020d16d:	e9 87 07 00 00       	jmp    ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
        /* Call kernel functions */
        case RME_SVC_KFN:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d172:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020d176:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Kfn */
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Func_ID */
                                RME_PARAM_D1(Param[0]),                     /* rme_ptr_t Sub_ID */
ffffffff8020d17a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d17e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d182:	48 89 c7             	mov    %rax,%rdi
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Func_ID */
ffffffff8020d185:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d189:	41 89 c3             	mov    %eax,%r11d
ffffffff8020d18c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d190:	49 89 c2             	mov    %rax,%r10
ffffffff8020d193:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d197:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d19b:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d19f:	52                   	push   %rdx
ffffffff8020d1a0:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d1a3:	49 89 f8             	mov    %rdi,%r8
ffffffff8020d1a6:	4c 89 d9             	mov    %r11,%rcx
ffffffff8020d1a9:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d1ac:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d1af:	e8 51 db 00 00       	call   ffffffff8021ad05 <_RME_Kfn_Act>
ffffffff8020d1b4:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d1b8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1],                                   /* rme_ptr_t Param1 */
                                Param[2]);                                  /* rme_ptr_t Param2 */
            RME_SWITCH_RETURN(Reg, Retval);
ffffffff8020d1bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d1c0:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d1c4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d1c7:	48 85 c0             	test   %rax,%rax
ffffffff8020d1ca:	0f 84 29 07 00 00    	je     ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
ffffffff8020d1d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d1d4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d1d8:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d1db:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d1de:	e8 e8 9c 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
ffffffff8020d1e3:	e9 11 07 00 00       	jmp    ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Free(Cpt,
                                       Reg,                                 /* volatile struct RME_Reg_Struct* Reg */
                                       (rme_cid_t)Param[0]);                /* rme_cid_t Cap_Thd */
ffffffff8020d1e8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Free(Cpt,
ffffffff8020d1ec:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d1ef:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff8020d1f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d1f7:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d1fa:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d1fd:	e8 60 97 00 00       	call   ffffffff80216962 <_RME_Thd_Sched_Free>
ffffffff8020d202:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d206:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d20a:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d20e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d211:	48 85 c0             	test   %rax,%rax
ffffffff8020d214:	0f 84 df 06 00 00    	je     ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
ffffffff8020d21a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d21e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d222:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d225:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d228:	e8 9e 9c 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
ffffffff8020d22d:	e9 c7 06 00 00       	jmp    ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
        /* Changing thread execution context */
        case RME_SVC_THD_EXEC_SET:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Exec_Set(Cpt,
ffffffff8020d232:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8020d236:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff8020d23a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020d23e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d242:	49 89 c2             	mov    %rax,%r10
ffffffff8020d245:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d249:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d24d:	49 89 f9             	mov    %rdi,%r9
ffffffff8020d250:	49 89 c8             	mov    %rcx,%r8
ffffffff8020d253:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d256:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d259:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d25c:	e8 df 9a 00 00       	call   ffffffff80216d40 <_RME_Thd_Exec_Set>
ffffffff8020d261:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                     Reg,                                   /* volatile struct RME_Reg_Struct* Reg */
                                     (rme_cid_t)Cid,                        /* rme_cid_t Cap_Thd */
                                     Param[0],                              /* rme_ptr_t Entry */
                                     Param[1],                              /* rme_ptr_t Stack */
                                     Param[2]);                             /* rme_ptr_t Param */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d265:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d269:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d26d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d270:	48 85 c0             	test   %rax,%rax
ffffffff8020d273:	0f 84 80 06 00 00    	je     ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
ffffffff8020d279:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d27d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d281:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d284:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d287:	e8 3f 9c 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
ffffffff8020d28c:	e9 68 06 00 00       	jmp    ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Thd0 */
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
                                       (rme_cid_t)RME_PARAM_D0(Param[1]),   /* rme_cid_t Cap_Thd1 */
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
                                       (rme_cid_t)RME_PARAM_D0(Param[2]),   /* rme_cid_t Cap_Thd2 */
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff8020d291:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d295:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d299:	48 89 c7             	mov    %rax,%rdi
                                       (rme_cid_t)RME_PARAM_D0(Param[2]),   /* rme_cid_t Cap_Thd2 */
ffffffff8020d29c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2a0:	41 89 c1             	mov    %eax,%r9d
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
ffffffff8020d2a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2a7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2ab:	48 89 c1             	mov    %rax,%rcx
                                       (rme_cid_t)RME_PARAM_D0(Param[1]),   /* rme_cid_t Cap_Thd1 */
ffffffff8020d2ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2b2:	41 89 c3             	mov    %eax,%r11d
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
ffffffff8020d2b5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2b9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2bd:	49 89 c0             	mov    %rax,%r8
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Thd0 */
ffffffff8020d2c0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2c4:	41 89 c2             	mov    %eax,%r10d
ffffffff8020d2c7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020d2cb:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d2cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d2d3:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d2d7:	57                   	push   %rdi
ffffffff8020d2d8:	41 51                	push   %r9
ffffffff8020d2da:	51                   	push   %rcx
ffffffff8020d2db:	4d 89 d9             	mov    %r11,%r9
ffffffff8020d2de:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d2e1:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d2e4:	e8 7b 9d 00 00       	call   ffffffff80217064 <_RME_Thd_Sched_Prio>
ffffffff8020d2e9:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d2ed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d2f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d2f5:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d2f9:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d2fc:	48 85 c0             	test   %rax,%rax
ffffffff8020d2ff:	0f 84 f4 05 00 00    	je     ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
ffffffff8020d305:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d309:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d30d:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d310:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d313:	e8 b3 9b 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
ffffffff8020d318:	e9 dc 05 00 00       	jmp    ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
        /* Transfer time to a thread */
        case RME_SVC_THD_TIME_XFER:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d31d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                      Reg,                                  /* volatile struct RME_Reg_Struct* Reg */
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
                                      (rme_cid_t)Param[1],                  /* rme_cid_t Cap_Thd_Src */
ffffffff8020d321:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d325:	48 89 c1             	mov    %rax,%rcx
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
ffffffff8020d328:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d32c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d32f:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d333:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d337:	49 89 d0             	mov    %rdx,%r8
ffffffff8020d33a:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d33d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d340:	e8 91 a4 00 00       	call   ffffffff802177d6 <_RME_Thd_Time_Xfer>
ffffffff8020d345:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                      Param[2]);                            /* rme_ptr_t Time */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d349:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d34d:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d351:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d354:	48 85 c0             	test   %rax,%rax
ffffffff8020d357:	0f 84 9c 05 00 00    	je     ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
ffffffff8020d35d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d361:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d365:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d368:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d36b:	e8 5b 9b 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
ffffffff8020d370:	e9 84 05 00 00       	jmp    ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
        /* Switch to another thread */
        case RME_SVC_THD_SWT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Swt(Cpt,
ffffffff8020d375:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Thd */
ffffffff8020d379:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Swt(Cpt,
ffffffff8020d37d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d380:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d384:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d388:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d38b:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d38e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d391:	e8 ad ab 00 00       	call   ffffffff80217f43 <_RME_Thd_Swt>
ffffffff8020d396:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Full_Yield */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d39a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d39e:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d3a2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d3a5:	48 85 c0             	test   %rax,%rax
ffffffff8020d3a8:	0f 84 4b 05 00 00    	je     ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
ffffffff8020d3ae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d3b2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d3b6:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d3b9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3bc:	e8 0a 9b 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
ffffffff8020d3c1:	e9 33 05 00 00       	jmp    ffffffff8020d8f9 <_RME_Svc_Handler+0x97c>
        }
        default:
        {
            RME_COV_MARKER();
            break;
ffffffff8020d3c6:	90                   	nop
        }
    } 

    /* It is guaranteed that these functions will never cause a context switch */
    switch(Svc_Num)
ffffffff8020d3c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d3cb:	48 83 e8 0a          	sub    $0xa,%rax
ffffffff8020d3cf:	48 83 f8 17          	cmp    $0x17,%rax
ffffffff8020d3d3:	0f 87 04 05 00 00    	ja     ffffffff8020d8dd <_RME_Svc_Handler+0x960>
ffffffff8020d3d9:	48 8b 04 c5 28 70 22 	mov    -0x7fdd8fd8(,%rax,8),%rax
ffffffff8020d3e0:	80 
ffffffff8020d3e1:	ff e0                	jmp    *%rax
    {
        /* Capability table */
        case RME_SVC_CPT_CRT:
        {
            RME_COV_MARKER();
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d3e3:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8020d3e7:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Crt */
ffffffff8020d3eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d3ef:	41 89 c2             	mov    %eax,%r10d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d3f2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d3f6:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d3fa:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d401:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d404:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d408:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d40b:	49 89 d0             	mov    %rdx,%r8
ffffffff8020d40e:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d411:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d414:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d417:	e8 78 0a 00 00       	call   ffffffff8020de94 <_RME_Cpt_Crt>
ffffffff8020d41c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1],                                   /* rme_ptr_t Raddr */
                                Param[2]);                                  /* rme_ptr_t Entry_Num */
            break;
ffffffff8020d420:	e9 c1 04 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Del */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Cpt */
ffffffff8020d425:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Del(Cpt,
ffffffff8020d429:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d42c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d430:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d433:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d437:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d43a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d43d:	e8 9b 10 00 00       	call   ffffffff8020e4dd <_RME_Cpt_Del>
ffffffff8020d442:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d446:	e9 9b 04 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Frz(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Frz */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Frz */
ffffffff8020d44b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Frz(Cpt,
ffffffff8020d44f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d452:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d456:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d459:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d45d:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d460:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d463:	e8 98 14 00 00       	call   ffffffff8020e900 <_RME_Cpt_Frz>
ffffffff8020d468:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d46c:	e9 75 04 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Cpt_Src */
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
                                Param[2],                                   /* rme_ptr_t Flag */
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff8020d471:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d475:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020d479:	48 89 c2             	mov    %rax,%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d47c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d480:	48 09 c2             	or     %rax,%rdx
ffffffff8020d483:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
ffffffff8020d487:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d48b:	41 89 c0             	mov    %eax,%r8d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Cpt_Src */
ffffffff8020d48e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d492:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d496:	49 89 c2             	mov    %rax,%r10
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
ffffffff8020d499:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d49d:	89 c7                	mov    %eax,%edi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
ffffffff8020d49f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d4a3:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4a7:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d4aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d4ae:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d4b2:	52                   	push   %rdx
ffffffff8020d4b3:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d4b6:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d4b9:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d4bc:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d4bf:	e8 7a 17 00 00       	call   ffffffff8020ec3e <_RME_Cpt_Add>
ffffffff8020d4c4:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d4c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d4cc:	e9 15 04 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Rem(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Rem */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Rem */
ffffffff8020d4d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Rem(Cpt,
ffffffff8020d4d5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d4d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d4dc:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d4df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d4e3:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d4e6:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d4e9:	e8 85 20 00 00       	call   ffffffff8020f573 <_RME_Cpt_Rem>
ffffffff8020d4ee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d4f2:	e9 ef 03 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
#if(RME_PGT_RAW_ENABLE==0U)
        case RME_SVC_PGT_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d4f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d4fb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020d4ff:	48 89 c7             	mov    %rax,%rdi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
                                Param[1],                                   /* rme_ptr_t Raddr */
                                Param[2]&RME_MASK_BEGIN(1U),                /* rme_ptr_t Base */
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
                                RME_PARAM_Q0(Param[0]),                     /* rme_ptr_t Size_Order */
ffffffff8020d502:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d506:	0f b7 c8             	movzwl %ax,%ecx
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
ffffffff8020d509:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d50d:	83 e0 01             	and    $0x1,%eax
ffffffff8020d510:	48 89 c6             	mov    %rax,%rsi
                                Param[2]&RME_MASK_BEGIN(1U),                /* rme_ptr_t Base */
ffffffff8020d513:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d517:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
ffffffff8020d51b:	49 89 c1             	mov    %rax,%r9
ffffffff8020d51e:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff8020d522:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d526:	48 c1 e8 10          	shr    $0x10,%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d52a:	0f b7 d0             	movzwl %ax,%edx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d52d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d531:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d535:	49 89 c3             	mov    %rax,%r11
ffffffff8020d538:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d53c:	49 89 c2             	mov    %rax,%r10
ffffffff8020d53f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d543:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d547:	57                   	push   %rdi
ffffffff8020d548:	51                   	push   %rcx
ffffffff8020d549:	56                   	push   %rsi
ffffffff8020d54a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d54d:	4c 89 da             	mov    %r11,%rdx
ffffffff8020d550:	4c 89 d6             	mov    %r10,%rsi
ffffffff8020d553:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d556:	e8 4c 2f 00 00       	call   ffffffff802104a7 <_RME_Pgt_Crt>
ffffffff8020d55b:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d55f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                RME_PARAM_PC(Svc));                         /* rme_ptr_t Num_Order */
            break;
ffffffff8020d563:	e9 7e 03 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d568:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Del(Cpt,
ffffffff8020d56c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d56f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d573:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d576:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d57a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d57d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d580:	e8 f4 35 00 00       	call   ffffffff80210b79 <_RME_Pgt_Del>
ffffffff8020d585:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d589:	e9 58 03 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        }
        case RME_SVC_PGT_ADD:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d58e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
                                Cid,                                        /* rme_ptr_t Flag_Dst */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Pos_Src */
ffffffff8020d592:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d596:	41 89 c1             	mov    %eax,%r9d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
ffffffff8020d599:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d59d:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5a1:	49 89 c0             	mov    %rax,%r8
ffffffff8020d5a4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
ffffffff8020d5a8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5ac:	89 c7                	mov    %eax,%edi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
ffffffff8020d5ae:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d5b2:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5b6:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d5b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d5bd:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d5c1:	51                   	push   %rcx
ffffffff8020d5c2:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d5c5:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d5c8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d5cb:	e8 9c 39 00 00       	call   ffffffff80210f6c <_RME_Pgt_Add>
ffffffff8020d5d0:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d5d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Index */
            break;
ffffffff8020d5d8:	e9 09 03 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        }
        case RME_SVC_PGT_REM:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff8020d5dd:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt */
ffffffff8020d5e1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff8020d5e5:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d5e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d5ec:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d5ef:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d5f2:	e8 34 3f 00 00       	call   ffffffff8021152b <_RME_Pgt_Rem>
ffffffff8020d5f7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Pos */
            break;
ffffffff8020d5fb:	e9 e6 02 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        }
        case RME_SVC_PGT_CON:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d600:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
                                Param[1],                                   /* rme_ptr_t Pos */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Pgt_Child */
ffffffff8020d604:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d608:	89 c7                	mov    %eax,%edi
ffffffff8020d60a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff8020d60e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d612:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d616:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d619:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d61d:	49 89 c8             	mov    %rcx,%r8
ffffffff8020d620:	48 89 f9             	mov    %rdi,%rcx
ffffffff8020d623:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d626:	e8 8d 41 00 00       	call   ffffffff802117b8 <_RME_Pgt_Con>
ffffffff8020d62b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Flag_Child */
            break;
ffffffff8020d62f:	e9 b2 02 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Des(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
                                Param[1],                                   /* rme_ptr_t Pos */
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt_Child */
ffffffff8020d634:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Des(Cpt,
ffffffff8020d638:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d63b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
ffffffff8020d63f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Des(Cpt,
ffffffff8020d643:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d646:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d64a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d64d:	e8 db 46 00 00       	call   ffffffff80211d2d <_RME_Pgt_Des>
ffffffff8020d652:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d656:	e9 8b 02 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
#if(RME_PGT_RAW_ENABLE==0U)
            Retval=_RME_Prc_Crt(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d65b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d65f:	48 89 c7             	mov    %rax,%rdi
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
ffffffff8020d662:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d666:	48 89 c1             	mov    %rax,%rcx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d669:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d66d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d670:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d674:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d677:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d67b:	49 89 f8             	mov    %rdi,%r8
ffffffff8020d67e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d681:	e8 26 61 00 00       	call   ffffffff802137ac <_RME_Prc_Crt>
ffffffff8020d686:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
                                (rme_ptr_t)Param[2]);                       /* rme_ptr_t Raw_Pgt */
#endif
            break;
ffffffff8020d68a:	e9 57 02 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Prc_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Prc */
ffffffff8020d68f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Del(Cpt,
ffffffff8020d693:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d696:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d69a:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d69d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6a1:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d6a4:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6a7:	e8 8e 68 00 00       	call   ffffffff80213f3a <_RME_Prc_Del>
ffffffff8020d6ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d6b0:	e9 31 02 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Prc_Cpt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Cpt */
ffffffff8020d6b5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Cpt(Cpt,
ffffffff8020d6b9:	48 89 c2             	mov    %rax,%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d6bc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Cpt(Cpt,
ffffffff8020d6c0:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d6c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6c7:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d6ca:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6cd:	e8 27 6c 00 00       	call   ffffffff802142f9 <_RME_Prc_Cpt>
ffffffff8020d6d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d6d6:	e9 0b 02 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        {
            RME_COV_MARKER();
#if(RME_PGT_RAW_ENABLE==0U)
            Retval=_RME_Prc_Pgt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d6db:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Pgt(Cpt,
ffffffff8020d6df:	48 89 c2             	mov    %rax,%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d6e2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Pgt(Cpt,
ffffffff8020d6e6:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d6e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6ed:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d6f0:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6f3:	e8 bd 70 00 00       	call   ffffffff802147b5 <_RME_Prc_Pgt>
ffffffff8020d6f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
#else
            Retval=_RME_Prc_Pgt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                Param[1]);                                  /* rme_ptr_t Raw_Pgt */
#endif
            break;
ffffffff8020d6fc:	e9 e5 01 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        /* Thread */
        case RME_SVC_THD_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d701:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d705:	83 e0 40             	and    $0x40,%eax
ffffffff8020d708:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d70b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d70f:	48 c1 e8 07          	shr    $0x7,%rax
ffffffff8020d713:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d716:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Prc */
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Prio_Max */
ffffffff8020d71a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d71e:	41 89 c1             	mov    %eax,%r9d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Prc */
ffffffff8020d721:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d725:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d729:	49 89 c0             	mov    %rax,%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
ffffffff8020d72c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d730:	41 89 c3             	mov    %eax,%r11d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d733:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d737:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d73b:	49 89 c2             	mov    %rax,%r10
ffffffff8020d73e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d742:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d745:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d749:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d74d:	56                   	push   %rsi
ffffffff8020d74e:	51                   	push   %rcx
ffffffff8020d74f:	52                   	push   %rdx
ffffffff8020d750:	4c 89 d9             	mov    %r11,%rcx
ffffffff8020d753:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d756:	48 89 fe             	mov    %rdi,%rsi
ffffffff8020d759:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d75c:	e8 8c 7b 00 00       	call   ffffffff802152ed <_RME_Thd_Crt>
ffffffff8020d761:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d765:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2],                                   /* rme_ptr_t Raddr */
                                Svc>>7,                                     /* rme_ptr_t Attr */
                                Svc&0x40U);                                 /* rme_ptr_t Is_Hyp */
            break;
ffffffff8020d769:	e9 78 01 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Thd */
ffffffff8020d76e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Del(Cpt,
ffffffff8020d772:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d775:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d779:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d77c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d780:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d783:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d786:	e8 ce 84 00 00       	call   ffffffff80215c59 <_RME_Thd_Del>
ffffffff8020d78b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d78f:	e9 52 01 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        }
        case RME_SVC_THD_SCHED_BIND:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d794:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                       (rme_cid_t)Cid,                      /* rme_cid_t Cap_Thd */
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
                                       RME_PARAM_D0(Param[1]),              /* rme_ptr_t Prio */
ffffffff8020d798:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d79c:	41 89 c1             	mov    %eax,%r9d
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
ffffffff8020d79f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d7a3:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7a7:	49 89 c0             	mov    %rax,%r8
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
ffffffff8020d7aa:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7ae:	89 c1                	mov    %eax,%ecx
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff8020d7b0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d7b4:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7b8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d7bf:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d7c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d7c6:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d7ca:	52                   	push   %rdx
ffffffff8020d7cb:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d7ce:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7d1:	e8 04 89 00 00       	call   ffffffff802160da <_RME_Thd_Sched_Bind>
ffffffff8020d7d6:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d7da:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                       Param[2]);                           /* rme_ptr_t Haddr */
            break;
ffffffff8020d7de:	e9 03 01 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        case RME_SVC_THD_SCHED_RCV:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Rcv(Cpt,
                                      (rme_cid_t)Param[0]);                 /* rme_cid_t Cap_Thd */
ffffffff8020d7e3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Rcv(Cpt,
ffffffff8020d7e7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d7ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d7ee:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d7f1:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7f4:	e8 c6 9c 00 00       	call   ffffffff802174bf <_RME_Thd_Sched_Rcv>
ffffffff8020d7f9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d7fd:	e9 e4 00 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Crt(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d802:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Crt(Cpt,
ffffffff8020d806:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d809:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d80d:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d810:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d814:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d817:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d81a:	e8 40 ae 00 00       	call   ffffffff8021865f <_RME_Sig_Crt>
ffffffff8020d81f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d823:	e9 be 00 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d828:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Del(Cpt,
ffffffff8020d82c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d82f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d833:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d836:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d83a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d83d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d840:	e8 15 b1 00 00       	call   ffffffff8021895a <_RME_Sig_Del>
ffffffff8020d845:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d849:	e9 98 00 00 00       	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        /* Invocation */
        case RME_SVC_INV_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d84e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Prc */
ffffffff8020d852:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d856:	49 89 c0             	mov    %rax,%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff8020d859:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d85d:	89 c1                	mov    %eax,%ecx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d85f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d863:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d867:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d86a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d86e:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d871:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d875:	49 89 d1             	mov    %rdx,%r9
ffffffff8020d878:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d87b:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d87e:	e8 26 be 00 00       	call   ffffffff802196a9 <_RME_Inv_Crt>
ffffffff8020d883:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Raddr */
            break;
ffffffff8020d887:	eb 5d                	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Inv_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Inv */
ffffffff8020d889:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Del(Cpt,
ffffffff8020d88d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d890:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d894:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d897:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d89b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d89e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8a1:	e8 3c c6 00 00       	call   ffffffff80219ee2 <_RME_Inv_Del>
ffffffff8020d8a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d8aa:	eb 3a                	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
            
            Retval=_RME_Inv_Set(Cpt,
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
                                Param[1],                                   /* rme_ptr_t Entry */
                                Param[2],                                   /* rme_ptr_t Stack */
                                RME_PARAM_D1(Param[0]));                    /* rme_ptr_t Is_Exc_Ret */
ffffffff8020d8ac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Set(Cpt,
ffffffff8020d8b0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d8b4:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d8b7:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8020d8bb:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff8020d8bf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Set(Cpt,
ffffffff8020d8c3:	89 c7                	mov    %eax,%edi
ffffffff8020d8c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d8c9:	49 89 f0             	mov    %rsi,%r8
ffffffff8020d8cc:	48 89 fe             	mov    %rdi,%rsi
ffffffff8020d8cf:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8d2:	e8 f9 c9 00 00       	call   ffffffff8021a2d0 <_RME_Inv_Set>
ffffffff8020d8d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d8db:	eb 09                	jmp    ffffffff8020d8e6 <_RME_Svc_Handler+0x969>
        /* This is an error */
        default: 
        {
            RME_COV_MARKER();
            
            Retval=RME_ERR_CPT_NULL;
ffffffff8020d8dd:	48 c7 45 f8 ff ff ff 	movq   $0xffffffffffffffff,-0x8(%rbp)
ffffffff8020d8e4:	ff 
            break;
ffffffff8020d8e5:	90                   	nop
        }
    }
    
    /* We set the registers and return */
    __RME_Svc_Retval_Set(Reg,Retval);
ffffffff8020d8e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d8ea:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d8ee:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d8f1:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8f4:	e8 d2 95 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
}
ffffffff8020d8f9:	c9                   	leave
ffffffff8020d8fa:	c3                   	ret

ffffffff8020d8fb <_RME_Tim_Handler>:
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Tim_Handler(struct RME_Reg_Struct* Reg,
                      rme_ptr_t Slice)
{
ffffffff8020d8fb:	55                   	push   %rbp
ffffffff8020d8fc:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020d8ff:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020d903:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020d907:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    
    Local=RME_CPU_LOCAL();
ffffffff8020d90b:	e8 2f df ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020d910:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff8020d914:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d918:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020d91c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020d920:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d924:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d928:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8020d92f:	ff ff 7f 
ffffffff8020d932:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d935:	72 57                	jb     ffffffff8020d98e <_RME_Tim_Handler+0x93>
    {
        RME_COV_MARKER();

        /* Decrease timeslice count, and see if the timeslice is used up */
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff8020d937:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d93b:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d93f:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8020d943:	73 19                	jae    ffffffff8020d95e <_RME_Tim_Handler+0x63>
        {
            RME_COV_MARKER();
            
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020d945:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d949:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d94d:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
ffffffff8020d951:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d954:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d958:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020d95c:	eb 30                	jmp    ffffffff8020d98e <_RME_Tim_Handler+0x93>
        else
        {
            RME_COV_MARKER();

            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff8020d95e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d962:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8020d969:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff8020d96a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d96e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d971:	e8 f3 53 00 00       	call   ffffffff80212d69 <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff8020d976:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d97a:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8020d981:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff8020d982:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d986:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d989:	e8 1e 55 00 00       	call   ffffffff80212eac <_RME_Run_Notif>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Send to the system tick timer endpoint. This endpoint is per-core */
    _RME_Kern_Snd(Local->Sig_Tim);
ffffffff8020d98e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d992:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d996:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d999:	e8 f2 b3 00 00       	call   ffffffff80218d90 <_RME_Kern_Snd>

    /* All kernel send complete, now pick the highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff8020d99e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d9a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d9a6:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d9a9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9ac:	e8 5c b3 00 00       	call   ffffffff80218d0d <_RME_Kern_High>
}
ffffffff8020d9b1:	90                   	nop
ffffffff8020d9b2:	c9                   	leave
ffffffff8020d9b3:	c3                   	ret

ffffffff8020d9b4 <_RME_Tim_Elapse>:
                                _RME_Tim_Elapse or _RME_Tim_Handler.
Output      : None.
Return      : None.
******************************************************************************/
void _RME_Tim_Elapse(rme_ptr_t Slice)
{
ffffffff8020d9b4:	55                   	push   %rbp
ffffffff8020d9b5:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020d9b8:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020d9bc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020d9c0:	e8 7a de ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020d9c5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020d9c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    /* We don't want the slices less than 1 because we want to keep the kernel
     * SVC invariants - the current thread must still be running after this */
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020d9cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d9d1:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d9d5:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8020d9dc:	ff ff 7f 
ffffffff8020d9df:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d9e2:	72 33                	jb     ffffffff8020da17 <_RME_Tim_Elapse+0x63>
    {
        RME_COV_MARKER();

        /* Decrease timeslice count, but no less than 1, so the thread is
         * always running, which keeps the invariant of the kernel */
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff8020d9e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d9e8:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d9ec:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020d9f0:	73 19                	jae    ffffffff8020da0b <_RME_Tim_Elapse+0x57>
        {
            RME_COV_MARKER();
            
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020d9f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d9f6:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d9fa:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff8020d9fe:	48 89 c2             	mov    %rax,%rdx
ffffffff8020da01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da05:	48 89 50 30          	mov    %rdx,0x30(%rax)
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff8020da09:	eb 0c                	jmp    ffffffff8020da17 <_RME_Tim_Elapse+0x63>
            Thd_Cur->Sched.Slice=1U;
ffffffff8020da0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da0f:	48 c7 40 30 01 00 00 	movq   $0x1,0x30(%rax)
ffffffff8020da16:	00 
}
ffffffff8020da17:	90                   	nop
ffffffff8020da18:	c9                   	leave
ffffffff8020da19:	c3                   	ret

ffffffff8020da1a <_RME_Tim_Future>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - How many slices to program until the next timeout.
******************************************************************************/
rme_ptr_t _RME_Tim_Future(void)
{
ffffffff8020da1a:	55                   	push   %rbp
ffffffff8020da1b:	48 89 e5             	mov    %rsp,%rbp
    /* If we're running an infinite thread, just program infinite time,
     * these values are very large so that's fine */
    return RME_CPU_LOCAL()->Thd_Cur->Sched.Slice;
ffffffff8020da1e:	e8 1c de ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020da23:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020da27:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff8020da2b:	5d                   	pop    %rbp
ffffffff8020da2c:	c3                   	ret

ffffffff8020da2d <_RME_Cpt_Boot_Init>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Cpt_Boot_Init(rme_cid_t Cap_Cpt,
                             rme_ptr_t Vaddr,
                             rme_ptr_t Entry_Num)
{
ffffffff8020da2d:	55                   	push   %rbp
ffffffff8020da2e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020da31:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8020da35:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020da39:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020da3d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    rme_ptr_t Count;
    struct RME_Cap_Cpt* Cpt;

    /* See if the entry number is too big */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020da41:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020da46:	74 0a                	je     ffffffff8020da52 <_RME_Cpt_Boot_Init+0x25>
ffffffff8020da48:	48 81 7d d8 00 80 00 	cmpq   $0x8000,-0x28(%rbp)
ffffffff8020da4f:	00 
ffffffff8020da50:	76 0c                	jbe    ffffffff8020da5e <_RME_Cpt_Boot_Init+0x31>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020da52:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020da59:	e9 b8 00 00 00       	jmp    ffffffff8020db16 <_RME_Cpt_Boot_Init+0xe9>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020da5e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020da62:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020da66:	48 89 c2             	mov    %rax,%rdx
ffffffff8020da69:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020da6d:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020da70:	48 89 c7             	mov    %rax,%rdi
ffffffff8020da73:	e8 2c 48 00 00       	call   ffffffff802122a4 <_RME_Kot_Mark>
ffffffff8020da78:	48 85 c0             	test   %rax,%rax
ffffffff8020da7b:	74 0c                	je     ffffffff8020da89 <_RME_Cpt_Boot_Init+0x5c>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_KOT;
ffffffff8020da7d:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020da84:	e9 8d 00 00 00       	jmp    ffffffff8020db16 <_RME_Cpt_Boot_Init+0xe9>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020da89:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020da90:	00 
ffffffff8020da91:	eb 1e                	jmp    ffffffff8020dab1 <_RME_Cpt_Boot_Init+0x84>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020da93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da97:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020da9b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020da9e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020daa2:	48 01 d0             	add    %rdx,%rax
ffffffff8020daa5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020daac:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020dab1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020dab5:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020dab9:	72 d8                	jb     ffffffff8020da93 <_RME_Cpt_Boot_Init+0x66>
    }

    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff8020dabb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dabf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dac3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dac6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020daca:	48 01 d0             	add    %rdx,%rax
ffffffff8020dacd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Header init */
    Cpt->Head.Root_Ref=1U;
ffffffff8020dad1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dad5:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8020dadc:	00 
    Cpt->Head.Object=Vaddr;
ffffffff8020dadd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dae1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020dae5:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020dae9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020daed:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020daf4:	00 
    
    /* Info init */
    Cpt->Entry_Num=Entry_Num;
ffffffff8020daf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020daf9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020dafd:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* At last, write into slot the correct information, and set status to VALID */
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020db01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db05:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020db0c:	00 03 00 
ffffffff8020db0f:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return Cap_Cpt;
ffffffff8020db12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff8020db16:	c9                   	leave
ffffffff8020db17:	c3                   	ret

ffffffff8020db18 <_RME_Cpt_Boot_Crt>:
rme_ret_t _RME_Cpt_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt_Crt,
                            rme_cid_t Cap_Crt,
                            rme_ptr_t Vaddr,
                            rme_ptr_t Entry_Num)
{
ffffffff8020db18:	55                   	push   %rbp
ffffffff8020db19:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020db1c:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020db20:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020db24:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020db28:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020db2c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020db30:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Cpt* Cpt_Crt;
    rme_ptr_t Type_Stat;
    
    /* See if the entry number is too big - this is not restricted by RME_CPT_ENTRY_MAX */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020db34:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff8020db39:	74 0a                	je     ffffffff8020db45 <_RME_Cpt_Boot_Crt+0x2d>
ffffffff8020db3b:	48 81 7d b8 00 80 00 	cmpq   $0x8000,-0x48(%rbp)
ffffffff8020db42:	00 
ffffffff8020db43:	76 0c                	jbe    ffffffff8020db51 <_RME_Cpt_Boot_Crt+0x39>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020db45:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020db4c:	e9 41 03 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,
ffffffff8020db51:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020db55:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020db5a:	48 85 c0             	test   %rax,%rax
ffffffff8020db5d:	0f 85 98 00 00 00    	jne    ffffffff8020dbfb <_RME_Cpt_Boot_Crt+0xe3>
ffffffff8020db63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020db67:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020db6b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020db6f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020db72:	0f 93 c0             	setae  %al
ffffffff8020db75:	0f b6 c0             	movzbl %al,%eax
ffffffff8020db78:	48 85 c0             	test   %rax,%rax
ffffffff8020db7b:	74 0c                	je     ffffffff8020db89 <_RME_Cpt_Boot_Crt+0x71>
ffffffff8020db7d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020db84:	e9 09 03 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
ffffffff8020db89:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020db8d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020db91:	48 89 c2             	mov    %rax,%rdx
ffffffff8020db94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020db98:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020db9c:	48 01 d0             	add    %rdx,%rax
ffffffff8020db9f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dba3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dba7:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dbaa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dbae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dbb2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dbb6:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dbb9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dbbd:	0f 94 c0             	sete   %al
ffffffff8020dbc0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dbc3:	48 85 c0             	test   %rax,%rax
ffffffff8020dbc6:	74 0c                	je     ffffffff8020dbd4 <_RME_Cpt_Boot_Crt+0xbc>
ffffffff8020dbc8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dbcf:	e9 be 02 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
ffffffff8020dbd4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dbd8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dbdc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dbe0:	0f 95 c0             	setne  %al
ffffffff8020dbe3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dbe6:	48 85 c0             	test   %rax,%rax
ffffffff8020dbe9:	0f 84 4c 01 00 00    	je     ffffffff8020dd3b <_RME_Cpt_Boot_Crt+0x223>
ffffffff8020dbef:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dbf6:	e9 97 02 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
ffffffff8020dbfb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dbff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dc03:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dc06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dc0a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dc0e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dc11:	0f 93 c0             	setae  %al
ffffffff8020dc14:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc17:	48 85 c0             	test   %rax,%rax
ffffffff8020dc1a:	74 0c                	je     ffffffff8020dc28 <_RME_Cpt_Boot_Crt+0x110>
ffffffff8020dc1c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dc23:	e9 6a 02 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
ffffffff8020dc28:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dc2c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dc30:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dc34:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dc37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dc3b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dc3f:	48 01 d0             	add    %rdx,%rax
ffffffff8020dc42:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dc46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dc4a:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dc4d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dc51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dc55:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dc59:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dc5c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dc60:	0f 94 c0             	sete   %al
ffffffff8020dc63:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc66:	48 85 c0             	test   %rax,%rax
ffffffff8020dc69:	74 0c                	je     ffffffff8020dc77 <_RME_Cpt_Boot_Crt+0x15f>
ffffffff8020dc6b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dc72:	e9 1b 02 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
ffffffff8020dc77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dc7b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dc7f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dc83:	0f 95 c0             	setne  %al
ffffffff8020dc86:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc89:	48 85 c0             	test   %rax,%rax
ffffffff8020dc8c:	74 0c                	je     ffffffff8020dc9a <_RME_Cpt_Boot_Crt+0x182>
ffffffff8020dc8e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dc95:	e9 f8 01 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
ffffffff8020dc9a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dc9e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020dca3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dca6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dcaa:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dcae:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dcb1:	0f 93 c0             	setae  %al
ffffffff8020dcb4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dcb7:	48 85 c0             	test   %rax,%rax
ffffffff8020dcba:	74 0c                	je     ffffffff8020dcc8 <_RME_Cpt_Boot_Crt+0x1b0>
ffffffff8020dcbc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dcc3:	e9 ca 01 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
ffffffff8020dcc8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dccc:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020dcd1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dcd5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dcd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dcdc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dce0:	48 01 d0             	add    %rdx,%rax
ffffffff8020dce3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dce7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dceb:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dcee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dcf2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dcf6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dcfa:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dcfd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dd01:	0f 94 c0             	sete   %al
ffffffff8020dd04:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd07:	48 85 c0             	test   %rax,%rax
ffffffff8020dd0a:	74 0c                	je     ffffffff8020dd18 <_RME_Cpt_Boot_Crt+0x200>
ffffffff8020dd0c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dd13:	e9 7a 01 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
ffffffff8020dd18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dd1c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dd20:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dd24:	0f 95 c0             	setne  %al
ffffffff8020dd27:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd2a:	48 85 c0             	test   %rax,%rax
ffffffff8020dd2d:	74 0c                	je     ffffffff8020dd3b <_RME_Cpt_Boot_Crt+0x223>
ffffffff8020dd2f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dd36:	e9 57 01 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
                   RME_CAP_TYPE_CPT,
                   struct RME_Cap_Cpt*,
                   Cpt_Op,
                   Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020dd3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd3f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020dd43:	83 e0 01             	and    $0x1,%eax
ffffffff8020dd46:	48 85 c0             	test   %rax,%rax
ffffffff8020dd49:	0f 94 c0             	sete   %al
ffffffff8020dd4c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd4f:	48 85 c0             	test   %rax,%rax
ffffffff8020dd52:	74 0c                	je     ffffffff8020dd60 <_RME_Cpt_Boot_Crt+0x248>
ffffffff8020dd54:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020dd5b:	e9 32 01 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020dd60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd64:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dd68:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020dd6c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dd6f:	0f 93 c0             	setae  %al
ffffffff8020dd72:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd75:	48 85 c0             	test   %rax,%rax
ffffffff8020dd78:	74 0c                	je     ffffffff8020dd86 <_RME_Cpt_Boot_Crt+0x26e>
ffffffff8020dd7a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dd81:	e9 0c 01 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
ffffffff8020dd86:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020dd8a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dd8e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dd91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd95:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dd99:	48 01 d0             	add    %rdx,%rax
ffffffff8020dd9c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020dda0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dda4:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020ddab:	00 00 00 
ffffffff8020ddae:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020ddb3:	48 89 c7             	mov    %rax,%rdi
ffffffff8020ddb6:	e8 a3 e9 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020ddbb:	48 85 c0             	test   %rax,%rax
ffffffff8020ddbe:	0f 94 c0             	sete   %al
ffffffff8020ddc1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ddc4:	48 85 c0             	test   %rax,%rax
ffffffff8020ddc7:	74 0c                	je     ffffffff8020ddd5 <_RME_Cpt_Boot_Crt+0x2bd>
ffffffff8020ddc9:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020ddd0:	e9 bd 00 00 00       	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
ffffffff8020ddd5:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020ddda:	e8 32 ea ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020dddf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020dde3:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Try to mark this area as populated */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020dde7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020ddeb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ddef:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ddf2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020ddf6:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020ddf9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020ddfc:	e8 a3 44 00 00       	call   ffffffff802122a4 <_RME_Kot_Mark>
ffffffff8020de01:	48 85 c0             	test   %rax,%rax
ffffffff8020de04:	74 14                	je     ffffffff8020de1a <_RME_Cpt_Boot_Crt+0x302>
    {
        RME_COV_MARKER();
        
        /* Abort the creation process */
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020de06:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de0a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020de11:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020de18:	eb 78                	jmp    ffffffff8020de92 <_RME_Cpt_Boot_Crt+0x37a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020de1a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020de21:	00 
ffffffff8020de22:	eb 1e                	jmp    ffffffff8020de42 <_RME_Cpt_Boot_Crt+0x32a>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020de24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020de28:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020de2c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de2f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020de33:	48 01 d0             	add    %rdx,%rax
ffffffff8020de36:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020de3d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020de42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020de46:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff8020de4a:	72 d8                	jb     ffffffff8020de24 <_RME_Cpt_Boot_Crt+0x30c>
    }

    /* Header init */
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020de4c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de50:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020de57:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020de58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de5c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020de60:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020de64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de68:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020de6f:	00 
    /* Info init */
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020de70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de74:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020de78:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020de7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de80:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020de87:	00 03 00 
ffffffff8020de8a:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020de8d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020de92:	c9                   	leave
ffffffff8020de93:	c3                   	ret

ffffffff8020de94 <_RME_Cpt_Crt>:
                              rme_cid_t Cap_Cpt_Crt,
                              rme_cid_t Cap_Kom,
                              rme_cid_t Cap_Crt,
                              rme_ptr_t Raddr,
                              rme_ptr_t Entry_Num)
{
ffffffff8020de94:	55                   	push   %rbp
ffffffff8020de95:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020de98:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020de9c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8020dea0:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8020dea4:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8020dea8:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff8020deac:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff8020deb0:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    volatile struct RME_Cap_Cpt* Cpt_Crt;
    rme_ptr_t Type_Stat;
    rme_ptr_t Vaddr;

    /* See if the entry number is too big */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020deb4:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
ffffffff8020deb9:	74 0a                	je     ffffffff8020dec5 <_RME_Cpt_Crt+0x31>
ffffffff8020debb:	48 81 7d a0 00 80 00 	cmpq   $0x8000,-0x60(%rbp)
ffffffff8020dec2:	00 
ffffffff8020dec3:	76 0c                	jbe    ffffffff8020ded1 <_RME_Cpt_Crt+0x3d>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020dec5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020decc:	e9 0a 06 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
        /* No action required */
    }
#endif

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020ded1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020ded5:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020deda:	48 85 c0             	test   %rax,%rax
ffffffff8020dedd:	0f 85 98 00 00 00    	jne    ffffffff8020df7b <_RME_Cpt_Crt+0xe7>
ffffffff8020dee3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020dee7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020deeb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020deef:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020def2:	0f 93 c0             	setae  %al
ffffffff8020def5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020def8:	48 85 c0             	test   %rax,%rax
ffffffff8020defb:	74 0c                	je     ffffffff8020df09 <_RME_Cpt_Crt+0x75>
ffffffff8020defd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020df04:	e9 d2 05 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020df09:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020df0d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020df11:	48 89 c2             	mov    %rax,%rdx
ffffffff8020df14:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020df18:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020df1c:	48 01 d0             	add    %rdx,%rax
ffffffff8020df1f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020df23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020df27:	48 8b 00             	mov    (%rax),%rax
ffffffff8020df2a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020df2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020df32:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020df36:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020df39:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020df3d:	0f 94 c0             	sete   %al
ffffffff8020df40:	0f b6 c0             	movzbl %al,%eax
ffffffff8020df43:	48 85 c0             	test   %rax,%rax
ffffffff8020df46:	74 0c                	je     ffffffff8020df54 <_RME_Cpt_Crt+0xc0>
ffffffff8020df48:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020df4f:	e9 87 05 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020df54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020df58:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020df5c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020df60:	0f 95 c0             	setne  %al
ffffffff8020df63:	0f b6 c0             	movzbl %al,%eax
ffffffff8020df66:	48 85 c0             	test   %rax,%rax
ffffffff8020df69:	0f 84 4c 01 00 00    	je     ffffffff8020e0bb <_RME_Cpt_Crt+0x227>
ffffffff8020df6f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020df76:	e9 60 05 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020df7b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020df7f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020df83:	48 89 c2             	mov    %rax,%rdx
ffffffff8020df86:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020df8a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020df8e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020df91:	0f 93 c0             	setae  %al
ffffffff8020df94:	0f b6 c0             	movzbl %al,%eax
ffffffff8020df97:	48 85 c0             	test   %rax,%rax
ffffffff8020df9a:	74 0c                	je     ffffffff8020dfa8 <_RME_Cpt_Crt+0x114>
ffffffff8020df9c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dfa3:	e9 33 05 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020dfa8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020dfac:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dfb0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dfb4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dfb7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020dfbb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dfbf:	48 01 d0             	add    %rdx,%rax
ffffffff8020dfc2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dfc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dfca:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dfcd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020dfd1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dfd5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dfd9:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dfdc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dfe0:	0f 94 c0             	sete   %al
ffffffff8020dfe3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dfe6:	48 85 c0             	test   %rax,%rax
ffffffff8020dfe9:	74 0c                	je     ffffffff8020dff7 <_RME_Cpt_Crt+0x163>
ffffffff8020dfeb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dff2:	e9 e4 04 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020dff7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dffb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dfff:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e003:	0f 95 c0             	setne  %al
ffffffff8020e006:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e009:	48 85 c0             	test   %rax,%rax
ffffffff8020e00c:	74 0c                	je     ffffffff8020e01a <_RME_Cpt_Crt+0x186>
ffffffff8020e00e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e015:	e9 c1 04 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e01a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020e01e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e023:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e026:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e02a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e02e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e031:	0f 93 c0             	setae  %al
ffffffff8020e034:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e037:	48 85 c0             	test   %rax,%rax
ffffffff8020e03a:	74 0c                	je     ffffffff8020e048 <_RME_Cpt_Crt+0x1b4>
ffffffff8020e03c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e043:	e9 93 04 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e048:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020e04c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e051:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e055:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e058:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e05c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e060:	48 01 d0             	add    %rdx,%rax
ffffffff8020e063:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e067:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e06b:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e06e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e072:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e076:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e07a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e07d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e081:	0f 94 c0             	sete   %al
ffffffff8020e084:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e087:	48 85 c0             	test   %rax,%rax
ffffffff8020e08a:	74 0c                	je     ffffffff8020e098 <_RME_Cpt_Crt+0x204>
ffffffff8020e08c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e093:	e9 43 04 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e098:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e09c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e0a0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e0a4:	0f 95 c0             	setne  %al
ffffffff8020e0a7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e0aa:	48 85 c0             	test   %rax,%rax
ffffffff8020e0ad:	74 0c                	je     ffffffff8020e0bb <_RME_Cpt_Crt+0x227>
ffffffff8020e0af:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e0b6:	e9 20 04 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020e0bb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e0bf:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e0c4:	48 85 c0             	test   %rax,%rax
ffffffff8020e0c7:	0f 85 98 00 00 00    	jne    ffffffff8020e165 <_RME_Cpt_Crt+0x2d1>
ffffffff8020e0cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e0d1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e0d5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020e0d9:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e0dc:	0f 93 c0             	setae  %al
ffffffff8020e0df:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e0e2:	48 85 c0             	test   %rax,%rax
ffffffff8020e0e5:	74 0c                	je     ffffffff8020e0f3 <_RME_Cpt_Crt+0x25f>
ffffffff8020e0e7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e0ee:	e9 e8 03 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e0f3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e0f7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e0fb:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e0fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e102:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e106:	48 01 d0             	add    %rdx,%rax
ffffffff8020e109:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e10d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e111:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e114:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e118:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e11c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e120:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e123:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e127:	0f 94 c0             	sete   %al
ffffffff8020e12a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e12d:	48 85 c0             	test   %rax,%rax
ffffffff8020e130:	74 0c                	je     ffffffff8020e13e <_RME_Cpt_Crt+0x2aa>
ffffffff8020e132:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e139:	e9 9d 03 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e13e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e142:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e146:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e14a:	0f 95 c0             	setne  %al
ffffffff8020e14d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e150:	48 85 c0             	test   %rax,%rax
ffffffff8020e153:	0f 84 4c 01 00 00    	je     ffffffff8020e2a5 <_RME_Cpt_Crt+0x411>
ffffffff8020e159:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e160:	e9 76 03 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e165:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e169:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e16d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e170:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e174:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e178:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e17b:	0f 93 c0             	setae  %al
ffffffff8020e17e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e181:	48 85 c0             	test   %rax,%rax
ffffffff8020e184:	74 0c                	je     ffffffff8020e192 <_RME_Cpt_Crt+0x2fe>
ffffffff8020e186:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e18d:	e9 49 03 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e192:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e196:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e19a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e19e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e1a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e1a5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e1a9:	48 01 d0             	add    %rdx,%rax
ffffffff8020e1ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e1b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e1b4:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e1b7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e1bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e1bf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e1c3:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e1c6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e1ca:	0f 94 c0             	sete   %al
ffffffff8020e1cd:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e1d0:	48 85 c0             	test   %rax,%rax
ffffffff8020e1d3:	74 0c                	je     ffffffff8020e1e1 <_RME_Cpt_Crt+0x34d>
ffffffff8020e1d5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e1dc:	e9 fa 02 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e1e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e1e5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e1e9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e1ed:	0f 95 c0             	setne  %al
ffffffff8020e1f0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e1f3:	48 85 c0             	test   %rax,%rax
ffffffff8020e1f6:	74 0c                	je     ffffffff8020e204 <_RME_Cpt_Crt+0x370>
ffffffff8020e1f8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e1ff:	e9 d7 02 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e204:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e208:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e20d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e210:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e214:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e218:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e21b:	0f 93 c0             	setae  %al
ffffffff8020e21e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e221:	48 85 c0             	test   %rax,%rax
ffffffff8020e224:	74 0c                	je     ffffffff8020e232 <_RME_Cpt_Crt+0x39e>
ffffffff8020e226:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e22d:	e9 a9 02 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e232:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e236:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e23b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e23f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e242:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e246:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e24a:	48 01 d0             	add    %rdx,%rax
ffffffff8020e24d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e251:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e255:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e258:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e25c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e260:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e264:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e267:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e26b:	0f 94 c0             	sete   %al
ffffffff8020e26e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e271:	48 85 c0             	test   %rax,%rax
ffffffff8020e274:	74 0c                	je     ffffffff8020e282 <_RME_Cpt_Crt+0x3ee>
ffffffff8020e276:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e27d:	e9 59 02 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e282:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e286:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e28a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e28e:	0f 95 c0             	setne  %al
ffffffff8020e291:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e294:	48 85 c0             	test   %rax,%rax
ffffffff8020e297:	74 0c                	je     ffffffff8020e2a5 <_RME_Cpt_Crt+0x411>
ffffffff8020e299:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e2a0:	e9 36 02 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020e2a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e2a9:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e2ad:	83 e0 01             	and    $0x1,%eax
ffffffff8020e2b0:	48 85 c0             	test   %rax,%rax
ffffffff8020e2b3:	0f 94 c0             	sete   %al
ffffffff8020e2b6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e2b9:	48 85 c0             	test   %rax,%rax
ffffffff8020e2bc:	74 0c                	je     ffffffff8020e2ca <_RME_Cpt_Crt+0x436>
ffffffff8020e2be:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e2c5:	e9 11 02 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
ffffffff8020e2ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e2ce:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e2d2:	83 e0 01             	and    $0x1,%eax
ffffffff8020e2d5:	48 85 c0             	test   %rax,%rax
ffffffff8020e2d8:	0f 94 c0             	sete   %al
ffffffff8020e2db:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e2de:	48 85 c0             	test   %rax,%rax
ffffffff8020e2e1:	74 0c                	je     ffffffff8020e2ef <_RME_Cpt_Crt+0x45b>
ffffffff8020e2e3:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e2ea:	e9 ec 01 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e2ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e2f3:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e2f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020e2fb:	48 01 d0             	add    %rdx,%rax
ffffffff8020e2fe:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8020e302:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e306:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff8020e30a:	0f 92 c0             	setb   %al
ffffffff8020e30d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e310:	48 85 c0             	test   %rax,%rax
ffffffff8020e313:	74 0c                	je     ffffffff8020e321 <_RME_Cpt_Crt+0x48d>
ffffffff8020e315:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e31c:	e9 ba 01 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e321:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e325:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e329:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff8020e32d:	0f 92 c0             	setb   %al
ffffffff8020e330:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e333:	48 85 c0             	test   %rax,%rax
ffffffff8020e336:	74 0c                	je     ffffffff8020e344 <_RME_Cpt_Crt+0x4b0>
ffffffff8020e338:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e33f:	e9 97 01 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e344:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e348:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e34c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e34f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e353:	48 01 d0             	add    %rdx,%rax
ffffffff8020e356:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020e35a:	0f 92 c0             	setb   %al
ffffffff8020e35d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e360:	48 85 c0             	test   %rax,%rax
ffffffff8020e363:	74 0c                	je     ffffffff8020e371 <_RME_Cpt_Crt+0x4dd>
ffffffff8020e365:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e36c:	e9 6a 01 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e371:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e375:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020e379:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e37d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e381:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e384:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e388:	48 01 c8             	add    %rcx,%rax
ffffffff8020e38b:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8020e38f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e392:	0f 92 c0             	setb   %al
ffffffff8020e395:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e398:	48 85 c0             	test   %rax,%rax
ffffffff8020e39b:	74 0c                	je     ffffffff8020e3a9 <_RME_Cpt_Crt+0x515>
ffffffff8020e39d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e3a4:	e9 32 01 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020e3a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e3ad:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e3b1:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020e3b5:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e3b8:	0f 93 c0             	setae  %al
ffffffff8020e3bb:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e3be:	48 85 c0             	test   %rax,%rax
ffffffff8020e3c1:	74 0c                	je     ffffffff8020e3cf <_RME_Cpt_Crt+0x53b>
ffffffff8020e3c3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e3ca:	e9 0c 01 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e3cf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e3d3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e3d7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e3da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e3de:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e3e2:	48 01 d0             	add    %rdx,%rax
ffffffff8020e3e5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020e3e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e3ed:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020e3f4:	00 00 00 
ffffffff8020e3f7:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020e3fc:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e3ff:	e8 5a e3 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e404:	48 85 c0             	test   %rax,%rax
ffffffff8020e407:	0f 94 c0             	sete   %al
ffffffff8020e40a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e40d:	48 85 c0             	test   %rax,%rax
ffffffff8020e410:	74 0c                	je     ffffffff8020e41e <_RME_Cpt_Crt+0x58a>
ffffffff8020e412:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020e419:	e9 bd 00 00 00       	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
ffffffff8020e41e:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020e423:	e8 e9 e3 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020e428:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020e42c:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Try to mark this area as populated */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020e430:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e434:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e438:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e43b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e43f:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e442:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e445:	e8 5a 3e 00 00       	call   ffffffff802122a4 <_RME_Kot_Mark>
ffffffff8020e44a:	48 85 c0             	test   %rax,%rax
ffffffff8020e44d:	79 14                	jns    ffffffff8020e463 <_RME_Cpt_Crt+0x5cf>
    {
        RME_COV_MARKER();
        
        /* Failure. Set the Type_Stat back to 0 and abort the creation process */
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020e44f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e453:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020e45a:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020e461:	eb 78                	jmp    ffffffff8020e4db <_RME_Cpt_Crt+0x647>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e463:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020e46a:	00 
ffffffff8020e46b:	eb 1e                	jmp    ffffffff8020e48b <_RME_Cpt_Crt+0x5f7>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020e46d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e471:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e475:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e478:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e47c:	48 01 d0             	add    %rdx,%rax
ffffffff8020e47f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e486:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020e48b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e48f:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
ffffffff8020e493:	72 d8                	jb     ffffffff8020e46d <_RME_Cpt_Crt+0x5d9>
    }

    /* Header init */
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020e495:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e499:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020e4a0:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020e4a1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e4a5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020e4a9:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020e4ad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e4b1:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020e4b8:	00 
    
    /* Info init */
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020e4b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e4bd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8020e4c1:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020e4c5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e4c9:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020e4d0:	00 03 00 
ffffffff8020e4d3:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020e4d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020e4db:	c9                   	leave
ffffffff8020e4dc:	c3                   	ret

ffffffff8020e4dd <_RME_Cpt_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Del,
                              rme_cid_t Cap_Del)
{
ffffffff8020e4dd:	55                   	push   %rbp
ffffffff8020e4de:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020e4e1:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020e4e5:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8020e4e9:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff8020e4ed:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    /* These are used for deletion */
    rme_ptr_t Object;
    rme_ptr_t Size;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8020e4f1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e4f5:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e4fa:	48 85 c0             	test   %rax,%rax
ffffffff8020e4fd:	0f 85 98 00 00 00    	jne    ffffffff8020e59b <_RME_Cpt_Del+0xbe>
ffffffff8020e503:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e507:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e50b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020e50f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e512:	0f 93 c0             	setae  %al
ffffffff8020e515:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e518:	48 85 c0             	test   %rax,%rax
ffffffff8020e51b:	74 0c                	je     ffffffff8020e529 <_RME_Cpt_Del+0x4c>
ffffffff8020e51d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e524:	e9 d5 03 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
ffffffff8020e529:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e52d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e531:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e534:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e538:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e53c:	48 01 d0             	add    %rdx,%rax
ffffffff8020e53f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e543:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e547:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e54a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e54e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e552:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e556:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e559:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e55d:	0f 94 c0             	sete   %al
ffffffff8020e560:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e563:	48 85 c0             	test   %rax,%rax
ffffffff8020e566:	74 0c                	je     ffffffff8020e574 <_RME_Cpt_Del+0x97>
ffffffff8020e568:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e56f:	e9 8a 03 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
ffffffff8020e574:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e578:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e57c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e580:	0f 95 c0             	setne  %al
ffffffff8020e583:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e586:	48 85 c0             	test   %rax,%rax
ffffffff8020e589:	0f 84 4c 01 00 00    	je     ffffffff8020e6db <_RME_Cpt_Del+0x1fe>
ffffffff8020e58f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e596:	e9 63 03 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
ffffffff8020e59b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e59f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e5a3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e5a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e5aa:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e5ae:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e5b1:	0f 93 c0             	setae  %al
ffffffff8020e5b4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e5b7:	48 85 c0             	test   %rax,%rax
ffffffff8020e5ba:	74 0c                	je     ffffffff8020e5c8 <_RME_Cpt_Del+0xeb>
ffffffff8020e5bc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e5c3:	e9 36 03 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
ffffffff8020e5c8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e5cc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e5d0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e5d4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e5d7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e5db:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e5df:	48 01 d0             	add    %rdx,%rax
ffffffff8020e5e2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e5e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e5ea:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e5ed:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e5f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e5f5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e5f9:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e5fc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e600:	0f 94 c0             	sete   %al
ffffffff8020e603:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e606:	48 85 c0             	test   %rax,%rax
ffffffff8020e609:	74 0c                	je     ffffffff8020e617 <_RME_Cpt_Del+0x13a>
ffffffff8020e60b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e612:	e9 e7 02 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
ffffffff8020e617:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e61b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e61f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e623:	0f 95 c0             	setne  %al
ffffffff8020e626:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e629:	48 85 c0             	test   %rax,%rax
ffffffff8020e62c:	74 0c                	je     ffffffff8020e63a <_RME_Cpt_Del+0x15d>
ffffffff8020e62e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e635:	e9 c4 02 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
ffffffff8020e63a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e63e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e643:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e646:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e64a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e64e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e651:	0f 93 c0             	setae  %al
ffffffff8020e654:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e657:	48 85 c0             	test   %rax,%rax
ffffffff8020e65a:	74 0c                	je     ffffffff8020e668 <_RME_Cpt_Del+0x18b>
ffffffff8020e65c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e663:	e9 96 02 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
ffffffff8020e668:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e66c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e671:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e675:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e678:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e67c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e680:	48 01 d0             	add    %rdx,%rax
ffffffff8020e683:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e687:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e68b:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e68e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e692:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e696:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e69a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e69d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e6a1:	0f 94 c0             	sete   %al
ffffffff8020e6a4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e6a7:	48 85 c0             	test   %rax,%rax
ffffffff8020e6aa:	74 0c                	je     ffffffff8020e6b8 <_RME_Cpt_Del+0x1db>
ffffffff8020e6ac:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e6b3:	e9 46 02 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
ffffffff8020e6b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e6bc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e6c0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e6c4:	0f 95 c0             	setne  %al
ffffffff8020e6c7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e6ca:	48 85 c0             	test   %rax,%rax
ffffffff8020e6cd:	74 0c                	je     ffffffff8020e6db <_RME_Cpt_Del+0x1fe>
ffffffff8020e6cf:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e6d6:	e9 23 02 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8020e6db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e6df:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e6e3:	83 e0 02             	and    $0x2,%eax
ffffffff8020e6e6:	48 85 c0             	test   %rax,%rax
ffffffff8020e6e9:	0f 94 c0             	sete   %al
ffffffff8020e6ec:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e6ef:	48 85 c0             	test   %rax,%rax
ffffffff8020e6f2:	74 0c                	je     ffffffff8020e700 <_RME_Cpt_Del+0x223>
ffffffff8020e6f4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e6fb:	e9 fe 01 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff8020e700:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e704:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e708:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8020e70c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e70f:	0f 93 c0             	setae  %al
ffffffff8020e712:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e715:	48 85 c0             	test   %rax,%rax
ffffffff8020e718:	74 0c                	je     ffffffff8020e726 <_RME_Cpt_Del+0x249>
ffffffff8020e71a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e721:	e9 d8 01 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
ffffffff8020e726:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020e72a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e72e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e731:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e735:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e739:	48 01 d0             	add    %rdx,%rax
ffffffff8020e73c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff8020e740:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e744:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e747:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e74b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e74f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e753:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e756:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e75a:	0f 95 c0             	setne  %al
ffffffff8020e75d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e760:	48 85 c0             	test   %rax,%rax
ffffffff8020e763:	74 0c                	je     ffffffff8020e771 <_RME_Cpt_Del+0x294>
ffffffff8020e765:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e76c:	e9 8d 01 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
ffffffff8020e771:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e775:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e779:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e77d:	0f 95 c0             	setne  %al
ffffffff8020e780:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e783:	48 85 c0             	test   %rax,%rax
ffffffff8020e786:	74 0c                	je     ffffffff8020e794 <_RME_Cpt_Del+0x2b7>
ffffffff8020e788:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e78f:	e9 6a 01 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
ffffffff8020e794:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020e799:	e8 73 e0 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020e79e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e7a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e7a5:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8020e7a9:	48 29 c2             	sub    %rax,%rdx
ffffffff8020e7ac:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8020e7b0:	0f 96 c0             	setbe  %al
ffffffff8020e7b3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e7b6:	48 98                	cltq
ffffffff8020e7b8:	48 85 c0             	test   %rax,%rax
ffffffff8020e7bb:	74 0c                	je     ffffffff8020e7c9 <_RME_Cpt_Del+0x2ec>
ffffffff8020e7bd:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020e7c4:	e9 35 01 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
ffffffff8020e7c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e7cd:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020e7d1:	48 85 c0             	test   %rax,%rax
ffffffff8020e7d4:	0f 95 c0             	setne  %al
ffffffff8020e7d7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e7da:	48 85 c0             	test   %rax,%rax
ffffffff8020e7dd:	74 44                	je     ffffffff8020e823 <_RME_Cpt_Del+0x346>
ffffffff8020e7df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e7e3:	89 c0                	mov    %eax,%eax
ffffffff8020e7e5:	48 85 c0             	test   %rax,%rax
ffffffff8020e7e8:	0f 94 c0             	sete   %al
ffffffff8020e7eb:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e7ee:	48 85 c0             	test   %rax,%rax
ffffffff8020e7f1:	74 24                	je     ffffffff8020e817 <_RME_Cpt_Del+0x33a>
ffffffff8020e7f3:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020e7fa:	00 ff ff 
ffffffff8020e7fd:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff8020e801:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e804:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e808:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e80c:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e80f:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e812:	e8 47 df ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e817:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8020e81e:	e9 db 00 00 00       	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
    /* Is there any capability in this capability table? If yes, we cannot destroy it.
     * We will check every slot to make sure nothing is there. This is surely,
     * predictable but not so perfect. So, if the time of such operations is to be 
     * bounded, the user must control the maximum number of entries in the table
     * by configuring RME_CPT_ENTRY_MAX to a non-zero value. */
    Table=RME_CAP_GETOBJ(Cpt_Del,struct RME_Cap_Struct*);
ffffffff8020e823:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e827:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e82b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Entry_Num=Cpt_Del->Entry_Num;
ffffffff8020e82f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e833:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e837:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e83b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020e842:	00 
ffffffff8020e843:	eb 4c                	jmp    ffffffff8020e891 <_RME_Cpt_Del+0x3b4>
    {
        if(Table[Count].Head.Type_Stat!=0U)
ffffffff8020e845:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e849:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e84d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e850:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e854:	48 01 d0             	add    %rdx,%rax
ffffffff8020e857:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e85a:	48 85 c0             	test   %rax,%rax
ffffffff8020e85d:	74 2d                	je     ffffffff8020e88c <_RME_Cpt_Del+0x3af>
        {
            RME_COV_MARKER();
            
            RME_CAP_DEFROST(Cpt_Del,Type_Stat);
ffffffff8020e85f:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020e866:	00 ff ff 
ffffffff8020e869:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff8020e86d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e870:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e874:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e878:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e87b:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e87e:	e8 db de ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
            return RME_ERR_CPT_EXIST;
ffffffff8020e883:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020e88a:	eb 72                	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e88c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020e891:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e895:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8020e899:	72 aa                	jb     ffffffff8020e845 <_RME_Cpt_Del+0x368>
            /* No action required */
        }
    }
    
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Cpt_Del,rme_ptr_t);
ffffffff8020e89b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e89f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e8a3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Size=RME_CPT_SIZE(Cpt_Del->Entry_Num);
ffffffff8020e8a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e8ab:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e8af:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e8b3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Cpt_Del,Type_Stat);
ffffffff8020e8b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e8bb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e8bf:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020e8c4:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e8c7:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e8ca:	e8 8f de ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e8cf:	48 85 c0             	test   %rax,%rax
ffffffff8020e8d2:	0f 94 c0             	sete   %al
ffffffff8020e8d5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e8d8:	48 85 c0             	test   %rax,%rax
ffffffff8020e8db:	74 09                	je     ffffffff8020e8e6 <_RME_Cpt_Del+0x409>
ffffffff8020e8dd:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020e8e4:	eb 18                	jmp    ffffffff8020e8fe <_RME_Cpt_Del+0x421>

    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kot_Erase(Object,Size)==0);
ffffffff8020e8e6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020e8ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e8ee:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e8f1:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e8f4:	e8 ee 3c 00 00       	call   ffffffff802125e7 <_RME_Kot_Erase>
    
    return 0;
ffffffff8020e8f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020e8fe:	c9                   	leave
ffffffff8020e8ff:	c3                   	ret

ffffffff8020e900 <_RME_Cpt_Frz>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Frz(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Frz,
                              rme_cid_t Cap_Frz)
{
ffffffff8020e900:	55                   	push   %rbp
ffffffff8020e901:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020e904:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8020e908:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020e90c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020e910:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Struct* Capobj_Frz;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff8020e914:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e918:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e91d:	48 85 c0             	test   %rax,%rax
ffffffff8020e920:	0f 85 98 00 00 00    	jne    ffffffff8020e9be <_RME_Cpt_Frz+0xbe>
ffffffff8020e926:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e92a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e92e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020e932:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e935:	0f 93 c0             	setae  %al
ffffffff8020e938:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e93b:	48 85 c0             	test   %rax,%rax
ffffffff8020e93e:	74 0c                	je     ffffffff8020e94c <_RME_Cpt_Frz+0x4c>
ffffffff8020e940:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e947:	e9 f0 02 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
ffffffff8020e94c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e950:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e954:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e957:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e95b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e95f:	48 01 d0             	add    %rdx,%rax
ffffffff8020e962:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020e966:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e96a:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e96d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e971:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e975:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e979:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e97c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e980:	0f 94 c0             	sete   %al
ffffffff8020e983:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e986:	48 85 c0             	test   %rax,%rax
ffffffff8020e989:	74 0c                	je     ffffffff8020e997 <_RME_Cpt_Frz+0x97>
ffffffff8020e98b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e992:	e9 a5 02 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
ffffffff8020e997:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e99b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e99f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e9a3:	0f 95 c0             	setne  %al
ffffffff8020e9a6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e9a9:	48 85 c0             	test   %rax,%rax
ffffffff8020e9ac:	0f 84 4c 01 00 00    	je     ffffffff8020eafe <_RME_Cpt_Frz+0x1fe>
ffffffff8020e9b2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e9b9:	e9 7e 02 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
ffffffff8020e9be:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e9c2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e9c6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e9c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e9cd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e9d1:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e9d4:	0f 93 c0             	setae  %al
ffffffff8020e9d7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e9da:	48 85 c0             	test   %rax,%rax
ffffffff8020e9dd:	74 0c                	je     ffffffff8020e9eb <_RME_Cpt_Frz+0xeb>
ffffffff8020e9df:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e9e6:	e9 51 02 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
ffffffff8020e9eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e9ef:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e9f3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e9f7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e9fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e9fe:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ea02:	48 01 d0             	add    %rdx,%rax
ffffffff8020ea05:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ea09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ea0d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ea10:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ea14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ea18:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ea1c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ea1f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ea23:	0f 94 c0             	sete   %al
ffffffff8020ea26:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea29:	48 85 c0             	test   %rax,%rax
ffffffff8020ea2c:	74 0c                	je     ffffffff8020ea3a <_RME_Cpt_Frz+0x13a>
ffffffff8020ea2e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ea35:	e9 02 02 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
ffffffff8020ea3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ea3e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ea42:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ea46:	0f 95 c0             	setne  %al
ffffffff8020ea49:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea4c:	48 85 c0             	test   %rax,%rax
ffffffff8020ea4f:	74 0c                	je     ffffffff8020ea5d <_RME_Cpt_Frz+0x15d>
ffffffff8020ea51:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ea58:	e9 df 01 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
ffffffff8020ea5d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ea61:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ea66:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ea69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ea6d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ea71:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ea74:	0f 93 c0             	setae  %al
ffffffff8020ea77:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea7a:	48 85 c0             	test   %rax,%rax
ffffffff8020ea7d:	74 0c                	je     ffffffff8020ea8b <_RME_Cpt_Frz+0x18b>
ffffffff8020ea7f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ea86:	e9 b1 01 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
ffffffff8020ea8b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ea8f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ea94:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ea98:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ea9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ea9f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020eaa3:	48 01 d0             	add    %rdx,%rax
ffffffff8020eaa6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020eaaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eaae:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eab1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020eab5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eab9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eabd:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eac0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eac4:	0f 94 c0             	sete   %al
ffffffff8020eac7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eaca:	48 85 c0             	test   %rax,%rax
ffffffff8020eacd:	74 0c                	je     ffffffff8020eadb <_RME_Cpt_Frz+0x1db>
ffffffff8020eacf:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ead6:	e9 61 01 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
ffffffff8020eadb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eadf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eae3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eae7:	0f 95 c0             	setne  %al
ffffffff8020eaea:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eaed:	48 85 c0             	test   %rax,%rax
ffffffff8020eaf0:	74 0c                	je     ffffffff8020eafe <_RME_Cpt_Frz+0x1fe>
ffffffff8020eaf2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eaf9:	e9 3e 01 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_FRZ);
ffffffff8020eafe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb02:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020eb06:	83 e0 04             	and    $0x4,%eax
ffffffff8020eb09:	48 85 c0             	test   %rax,%rax
ffffffff8020eb0c:	0f 94 c0             	sete   %al
ffffffff8020eb0f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb12:	48 85 c0             	test   %rax,%rax
ffffffff8020eb15:	74 0c                	je     ffffffff8020eb23 <_RME_Cpt_Frz+0x223>
ffffffff8020eb17:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020eb1e:	e9 19 01 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Frz,struct RME_Cap_Struct*,Capobj_Frz);
ffffffff8020eb23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb27:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020eb2b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020eb2f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020eb32:	0f 93 c0             	setae  %al
ffffffff8020eb35:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb38:	48 85 c0             	test   %rax,%rax
ffffffff8020eb3b:	74 0c                	je     ffffffff8020eb49 <_RME_Cpt_Frz+0x249>
ffffffff8020eb3d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020eb44:	e9 f3 00 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
ffffffff8020eb49:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020eb4d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eb51:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eb54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb58:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020eb5c:	48 01 d0             	add    %rdx,%rax
ffffffff8020eb5f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* Check if anything is there. If nothing there, the Type_Stat must be 0. 
     * Need a read acquire barrier here to avoid stale reads below. */
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Frz->Head.Type_Stat));
ffffffff8020eb63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020eb67:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eb6a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* See if there is a cap */
    if(RME_CAP_TYPE(Type_Stat)==RME_CAP_TYPE_NOP)
ffffffff8020eb6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eb72:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eb76:	48 85 c0             	test   %rax,%rax
ffffffff8020eb79:	75 0c                	jne    ffffffff8020eb87 <_RME_Cpt_Frz+0x287>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_NULL;
ffffffff8020eb7b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020eb82:	e9 b5 00 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* If this is a root capability, check if the reference count allows freezing */
    if(RME_CAP_ATTR(Type_Stat)==RME_CAP_ATTR_ROOT)
ffffffff8020eb87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eb8b:	89 c0                	mov    %eax,%eax
ffffffff8020eb8d:	48 85 c0             	test   %rax,%rax
ffffffff8020eb90:	75 19                	jne    ffffffff8020ebab <_RME_Cpt_Frz+0x2ab>
    {
        if(Capobj_Frz->Head.Root_Ref!=0U)
ffffffff8020eb92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020eb96:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020eb9a:	48 85 c0             	test   %rax,%rax
ffffffff8020eb9d:	74 0c                	je     ffffffff8020ebab <_RME_Cpt_Frz+0x2ab>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_REFCNT;
ffffffff8020eb9f:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8020eba6:	e9 91 00 00 00       	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* The capability is already frozen - why do it again? */
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020ebab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ebaf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ebb3:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ebb6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ebba:	75 09                	jne    ffffffff8020ebc5 <_RME_Cpt_Frz+0x2c5>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_FROZEN;
ffffffff8020ebbc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ebc3:	eb 77                	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the slot is quiescent */
    if(RME_UNLIKELY(RME_CAP_QUIE(Capobj_Frz->Head.Timestamp)==0U))
ffffffff8020ebc5:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020ebca:	e8 42 dc ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020ebcf:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ebd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ebd6:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8020ebda:	48 29 c2             	sub    %rax,%rdx
ffffffff8020ebdd:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8020ebe1:	0f 96 c0             	setbe  %al
ffffffff8020ebe4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ebe7:	48 98                	cltq
ffffffff8020ebe9:	48 85 c0             	test   %rax,%rax
ffffffff8020ebec:	74 09                	je     ffffffff8020ebf7 <_RME_Cpt_Frz+0x2f7>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_QUIE;
ffffffff8020ebee:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020ebf5:	eb 45                	jmp    ffffffff8020ec3c <_RME_Cpt_Frz+0x33c>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Update the timestamp */
    Capobj_Frz->Head.Timestamp=RME_TIMESTAMP();
ffffffff8020ebf7:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020ebfc:	e8 10 dc ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020ec01:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ec05:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* Finally, freeze it. We do not report error here because if we CASFAIL someone must have helped us */
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
ffffffff8020ec09:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020ec10:	00 ff ff 
ffffffff8020ec13:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8020ec17:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff8020ec1e:	00 00 00 
ffffffff8020ec21:	48 09 c2             	or     %rax,%rdx
ffffffff8020ec24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020ec2c:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020ec2f:	48 89 c7             	mov    %rax,%rdi
ffffffff8020ec32:	e8 27 db ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
                  RME_CAP_TYPE_STAT(RME_CAP_TYPE(Type_Stat),
                                    RME_CAP_STAT_FROZEN,
                                    RME_CAP_ATTR(Type_Stat)));

    return 0;
ffffffff8020ec37:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020ec3c:	c9                   	leave
ffffffff8020ec3d:	c3                   	ret

ffffffff8020ec3e <_RME_Cpt_Add>:
                              rme_cid_t Cap_Dst, 
                              rme_cid_t Cap_Cpt_Src,
                              rme_cid_t Cap_Src,
                              rme_ptr_t Flag,
                              rme_ptr_t Ext_Flag)
{
ffffffff8020ec3e:	55                   	push   %rbp
ffffffff8020ec3f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ec42:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff8020ec46:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff8020ec4a:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff8020ec4e:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff8020ec52:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff8020ec56:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff8020ec5a:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Kom_Begin;
    rme_ptr_t Kom_End;
    rme_ptr_t Kom_Flag;

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020ec5e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ec62:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020ec67:	48 85 c0             	test   %rax,%rax
ffffffff8020ec6a:	0f 85 98 00 00 00    	jne    ffffffff8020ed08 <_RME_Cpt_Add+0xca>
ffffffff8020ec70:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ec74:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ec78:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8020ec7c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ec7f:	0f 93 c0             	setae  %al
ffffffff8020ec82:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ec85:	48 85 c0             	test   %rax,%rax
ffffffff8020ec88:	74 0c                	je     ffffffff8020ec96 <_RME_Cpt_Add+0x58>
ffffffff8020ec8a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ec91:	e9 db 08 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020ec96:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ec9a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ec9e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eca1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020eca5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020eca9:	48 01 d0             	add    %rdx,%rax
ffffffff8020ecac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ecb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ecb4:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ecb7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ecbb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ecbf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ecc3:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ecc6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ecca:	0f 94 c0             	sete   %al
ffffffff8020eccd:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ecd0:	48 85 c0             	test   %rax,%rax
ffffffff8020ecd3:	74 0c                	je     ffffffff8020ece1 <_RME_Cpt_Add+0xa3>
ffffffff8020ecd5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ecdc:	e9 90 08 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020ece1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ece5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ece9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eced:	0f 95 c0             	setne  %al
ffffffff8020ecf0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ecf3:	48 85 c0             	test   %rax,%rax
ffffffff8020ecf6:	0f 84 4c 01 00 00    	je     ffffffff8020ee48 <_RME_Cpt_Add+0x20a>
ffffffff8020ecfc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ed03:	e9 69 08 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020ed08:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ed0c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ed10:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ed13:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ed17:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ed1b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ed1e:	0f 93 c0             	setae  %al
ffffffff8020ed21:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed24:	48 85 c0             	test   %rax,%rax
ffffffff8020ed27:	74 0c                	je     ffffffff8020ed35 <_RME_Cpt_Add+0xf7>
ffffffff8020ed29:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ed30:	e9 3c 08 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020ed35:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ed39:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ed3d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ed41:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ed44:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ed48:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ed4c:	48 01 d0             	add    %rdx,%rax
ffffffff8020ed4f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ed53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ed57:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ed5a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ed5e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ed62:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ed66:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ed69:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ed6d:	0f 94 c0             	sete   %al
ffffffff8020ed70:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed73:	48 85 c0             	test   %rax,%rax
ffffffff8020ed76:	74 0c                	je     ffffffff8020ed84 <_RME_Cpt_Add+0x146>
ffffffff8020ed78:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ed7f:	e9 ed 07 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020ed84:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ed88:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ed8c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ed90:	0f 95 c0             	setne  %al
ffffffff8020ed93:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed96:	48 85 c0             	test   %rax,%rax
ffffffff8020ed99:	74 0c                	je     ffffffff8020eda7 <_RME_Cpt_Add+0x169>
ffffffff8020ed9b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eda2:	e9 ca 07 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020eda7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020edab:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020edb0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020edb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020edb7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020edbb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020edbe:	0f 93 c0             	setae  %al
ffffffff8020edc1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020edc4:	48 85 c0             	test   %rax,%rax
ffffffff8020edc7:	74 0c                	je     ffffffff8020edd5 <_RME_Cpt_Add+0x197>
ffffffff8020edc9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020edd0:	e9 9c 07 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020edd5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020edd9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020edde:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ede2:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ede5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ede9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020eded:	48 01 d0             	add    %rdx,%rax
ffffffff8020edf0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020edf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020edf8:	48 8b 00             	mov    (%rax),%rax
ffffffff8020edfb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020edff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ee03:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ee07:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ee0a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ee0e:	0f 94 c0             	sete   %al
ffffffff8020ee11:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee14:	48 85 c0             	test   %rax,%rax
ffffffff8020ee17:	74 0c                	je     ffffffff8020ee25 <_RME_Cpt_Add+0x1e7>
ffffffff8020ee19:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ee20:	e9 4c 07 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020ee25:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ee29:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ee2d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ee31:	0f 95 c0             	setne  %al
ffffffff8020ee34:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee37:	48 85 c0             	test   %rax,%rax
ffffffff8020ee3a:	74 0c                	je     ffffffff8020ee48 <_RME_Cpt_Add+0x20a>
ffffffff8020ee3c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ee43:	e9 29 07 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
                   struct RME_Cap_Cpt*,Cpt_Dst,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020ee48:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020ee4c:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020ee51:	48 85 c0             	test   %rax,%rax
ffffffff8020ee54:	0f 85 98 00 00 00    	jne    ffffffff8020eef2 <_RME_Cpt_Add+0x2b4>
ffffffff8020ee5a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ee5e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ee62:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
ffffffff8020ee66:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ee69:	0f 93 c0             	setae  %al
ffffffff8020ee6c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee6f:	48 85 c0             	test   %rax,%rax
ffffffff8020ee72:	74 0c                	je     ffffffff8020ee80 <_RME_Cpt_Add+0x242>
ffffffff8020ee74:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ee7b:	e9 f1 06 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020ee80:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020ee84:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ee88:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ee8b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ee8f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ee93:	48 01 d0             	add    %rdx,%rax
ffffffff8020ee96:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ee9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ee9e:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eea1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020eea5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eea9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eead:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eeb0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eeb4:	0f 94 c0             	sete   %al
ffffffff8020eeb7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eeba:	48 85 c0             	test   %rax,%rax
ffffffff8020eebd:	74 0c                	je     ffffffff8020eecb <_RME_Cpt_Add+0x28d>
ffffffff8020eebf:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020eec6:	e9 a6 06 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020eecb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eecf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eed3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eed7:	0f 95 c0             	setne  %al
ffffffff8020eeda:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eedd:	48 85 c0             	test   %rax,%rax
ffffffff8020eee0:	0f 84 4c 01 00 00    	je     ffffffff8020f032 <_RME_Cpt_Add+0x3f4>
ffffffff8020eee6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eeed:	e9 7f 06 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020eef2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020eef6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020eefa:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eefd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ef01:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ef05:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ef08:	0f 93 c0             	setae  %al
ffffffff8020ef0b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef0e:	48 85 c0             	test   %rax,%rax
ffffffff8020ef11:	74 0c                	je     ffffffff8020ef1f <_RME_Cpt_Add+0x2e1>
ffffffff8020ef13:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ef1a:	e9 52 06 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020ef1f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020ef23:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ef27:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ef2b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ef2e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ef32:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ef36:	48 01 d0             	add    %rdx,%rax
ffffffff8020ef39:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ef3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ef41:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ef44:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ef48:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ef4c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ef50:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ef53:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ef57:	0f 94 c0             	sete   %al
ffffffff8020ef5a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef5d:	48 85 c0             	test   %rax,%rax
ffffffff8020ef60:	74 0c                	je     ffffffff8020ef6e <_RME_Cpt_Add+0x330>
ffffffff8020ef62:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ef69:	e9 03 06 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020ef6e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ef72:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ef76:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ef7a:	0f 95 c0             	setne  %al
ffffffff8020ef7d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef80:	48 85 c0             	test   %rax,%rax
ffffffff8020ef83:	74 0c                	je     ffffffff8020ef91 <_RME_Cpt_Add+0x353>
ffffffff8020ef85:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ef8c:	e9 e0 05 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020ef91:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020ef95:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ef9a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ef9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020efa1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020efa5:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020efa8:	0f 93 c0             	setae  %al
ffffffff8020efab:	0f b6 c0             	movzbl %al,%eax
ffffffff8020efae:	48 85 c0             	test   %rax,%rax
ffffffff8020efb1:	74 0c                	je     ffffffff8020efbf <_RME_Cpt_Add+0x381>
ffffffff8020efb3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020efba:	e9 b2 05 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020efbf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020efc3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020efc8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020efcc:	48 89 c2             	mov    %rax,%rdx
ffffffff8020efcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020efd3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020efd7:	48 01 d0             	add    %rdx,%rax
ffffffff8020efda:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020efde:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020efe2:	48 8b 00             	mov    (%rax),%rax
ffffffff8020efe5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020efe9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020efed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eff1:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eff4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eff8:	0f 94 c0             	sete   %al
ffffffff8020effb:	0f b6 c0             	movzbl %al,%eax
ffffffff8020effe:	48 85 c0             	test   %rax,%rax
ffffffff8020f001:	74 0c                	je     ffffffff8020f00f <_RME_Cpt_Add+0x3d1>
ffffffff8020f003:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f00a:	e9 62 05 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020f00f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f013:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f017:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f01b:	0f 95 c0             	setne  %al
ffffffff8020f01e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f021:	48 85 c0             	test   %rax,%rax
ffffffff8020f024:	74 0c                	je     ffffffff8020f032 <_RME_Cpt_Add+0x3f4>
ffffffff8020f026:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f02d:	e9 3f 05 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
                   struct RME_Cap_Cpt*,Cpt_Src,Type_Stat);
    /* Check if both captbls are not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020f032:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f036:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f03a:	83 e0 10             	and    $0x10,%eax
ffffffff8020f03d:	48 85 c0             	test   %rax,%rax
ffffffff8020f040:	0f 94 c0             	sete   %al
ffffffff8020f043:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f046:	48 85 c0             	test   %rax,%rax
ffffffff8020f049:	74 0c                	je     ffffffff8020f057 <_RME_Cpt_Add+0x419>
ffffffff8020f04b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f052:	e9 1a 05 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
    RME_CAP_CHECK(Cpt_Src,RME_CPT_FLAG_ADD_SRC);
ffffffff8020f057:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f05b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f05f:	83 e0 08             	and    $0x8,%eax
ffffffff8020f062:	48 85 c0             	test   %rax,%rax
ffffffff8020f065:	0f 94 c0             	sete   %al
ffffffff8020f068:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f06b:	48 85 c0             	test   %rax,%rax
ffffffff8020f06e:	74 0c                	je     ffffffff8020f07c <_RME_Cpt_Add+0x43e>
ffffffff8020f070:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f077:	e9 f5 04 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
    
    /* Get the cap slots */
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff8020f07c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f080:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f084:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff8020f088:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f08b:	0f 93 c0             	setae  %al
ffffffff8020f08e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f091:	48 85 c0             	test   %rax,%rax
ffffffff8020f094:	74 0c                	je     ffffffff8020f0a2 <_RME_Cpt_Add+0x464>
ffffffff8020f096:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f09d:	e9 cf 04 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020f0a2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8020f0a6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f0aa:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f0ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f0b1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f0b5:	48 01 d0             	add    %rdx,%rax
ffffffff8020f0b8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020f0bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f0c0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f0c4:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff8020f0c8:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f0cb:	0f 93 c0             	setae  %al
ffffffff8020f0ce:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f0d1:	48 85 c0             	test   %rax,%rax
ffffffff8020f0d4:	74 0c                	je     ffffffff8020f0e2 <_RME_Cpt_Add+0x4a4>
ffffffff8020f0d6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f0dd:	e9 8f 04 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020f0e2:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8020f0e6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f0ea:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f0ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f0f1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f0f5:	48 01 d0             	add    %rdx,%rax
ffffffff8020f0f8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    
    /* Atomic read - Read barrier to avoid premature checking of the rest */
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Src->Head.Type_Stat));
ffffffff8020f0fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f100:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f103:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Is the source cap frozen? */
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020f107:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f10b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f10f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f112:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f116:	75 0c                	jne    ffffffff8020f124 <_RME_Cpt_Add+0x4e6>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_FROZEN;
ffffffff8020f118:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f11f:	e9 4d 04 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Does the source cap exist at all? */
    if(Type_Stat==0U)
ffffffff8020f124:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff8020f129:	75 0c                	jne    ffffffff8020f137 <_RME_Cpt_Add+0x4f9>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_NULL;
ffffffff8020f12b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f132:	e9 3a 04 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Dewarn some compilers that complain about uninitialized variables */
    Kom_Begin=0U;
ffffffff8020f137:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8020f13e:	00 
    Kom_End=0U;
ffffffff8020f13f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8020f146:	00 
    Kom_Flag=0U;
ffffffff8020f147:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8020f14e:	00 
    
    /* Is there a flag conflict? - For page tables, we have different checking mechanisms */
    Src_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020f14f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f153:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f157:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    if(Src_Type==RME_CAP_TYPE_PGT)
ffffffff8020f15b:	48 83 7d b8 04       	cmpq   $0x4,-0x48(%rbp)
ffffffff8020f160:	0f 85 c5 00 00 00    	jne    ffffffff8020f22b <_RME_Cpt_Add+0x5ed>
    {
        RME_COV_MARKER();
        
        /* Check the delegation range */
        if(RME_PGT_FLAG_HIGH(Flag)>RME_PGT_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020f166:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f16a:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f16e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f171:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f175:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f179:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f17d:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f180:	73 0c                	jae    ffffffff8020f18e <_RME_Cpt_Add+0x550>
        {
            RME_COV_MARKER();
        
            return RME_ERR_CPT_FLAG;
ffffffff8020f182:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f189:	e9 e3 03 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_PGT_FLAG_LOW(Flag)<RME_PGT_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020f18e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f192:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f196:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f19b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f19e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f1a2:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f1a6:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f1aa:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f1af:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f1b2:	73 0c                	jae    ffffffff8020f1c0 <_RME_Cpt_Add+0x582>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f1b4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f1bb:	e9 b1 03 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_PGT_FLAG_HIGH(Flag)<RME_PGT_FLAG_LOW(Flag))
ffffffff8020f1c0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f1c4:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f1c8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f1cb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f1cf:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f1d3:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f1d8:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f1db:	73 0c                	jae    ffffffff8020f1e9 <_RME_Cpt_Add+0x5ab>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f1dd:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f1e4:	e9 88 03 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the flags - if there are extra ones, or all zero */
        if(RME_PGT_FLAG_FLAG(Flag)==0U)
ffffffff8020f1e9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f1ed:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f1f0:	48 85 c0             	test   %rax,%rax
ffffffff8020f1f3:	75 0c                	jne    ffffffff8020f201 <_RME_Cpt_Add+0x5c3>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f1f5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f1fc:	e9 70 03 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if((RME_PGT_FLAG_FLAG(Flag)&(~RME_PGT_FLAG_FLAG(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f201:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f205:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f209:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f20c:	48 f7 d0             	not    %rax
ffffffff8020f20f:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f213:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f216:	48 85 c0             	test   %rax,%rax
ffffffff8020f219:	0f 84 c2 01 00 00    	je     ffffffff8020f3e1 <_RME_Cpt_Add+0x7a3>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f21f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f226:	e9 46 03 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        {
            RME_COV_MARKER();
            /* No action required */
        }
    }
    else if(Src_Type==RME_CAP_TYPE_KFN)
ffffffff8020f22b:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
ffffffff8020f230:	75 6c                	jne    ffffffff8020f29e <_RME_Cpt_Add+0x660>
    {
        RME_COV_MARKER();
        
        /* Kernel funcrions only have ranges, no flags - check the delegation range */
        if(RME_KFN_FLAG_HIGH(Flag)>RME_KFN_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020f232:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f236:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f23a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f23d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f241:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f245:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f249:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f24c:	73 0c                	jae    ffffffff8020f25a <_RME_Cpt_Add+0x61c>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f24e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f255:	e9 17 03 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_KFN_FLAG_LOW(Flag)<RME_KFN_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020f25a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f25e:	89 c2                	mov    %eax,%edx
ffffffff8020f260:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f264:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f268:	89 c0                	mov    %eax,%eax
ffffffff8020f26a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f26d:	73 0c                	jae    ffffffff8020f27b <_RME_Cpt_Add+0x63d>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f26f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f276:	e9 f6 02 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_KFN_FLAG_HIGH(Flag)<RME_KFN_FLAG_LOW(Flag))
ffffffff8020f27b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f27f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f283:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff8020f287:	89 d2                	mov    %edx,%edx
ffffffff8020f289:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f28c:	0f 83 4f 01 00 00    	jae    ffffffff8020f3e1 <_RME_Cpt_Add+0x7a3>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f292:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f299:	e9 d3 02 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        {
            RME_COV_MARKER();
            /* No action required */
        }
    }
    else if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020f29e:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f2a3:	0f 85 05 01 00 00    	jne    ffffffff8020f3ae <_RME_Cpt_Add+0x770>
    {
        RME_COV_MARKER();
        
        /* The Kom_End here is exclusive */
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020f2a9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f2ad:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020f2b1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020f2b5:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
ffffffff8020f2bc:	ff ff ff 
ffffffff8020f2bf:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f2c3:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020f2c7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8020f2cb:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
ffffffff8020f2cf:	48 09 d0             	or     %rdx,%rax
ffffffff8020f2d2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        Kom_Flag=RME_KOM_FLAG_KOM(Ext_Flag);
ffffffff8020f2d6:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8020f2dd:	00 
        /* Round start and end to the slot boundary, if we are using slots bigger than 64 bytes */
#if(RME_KOM_SLOT_ORDER>6U)
        Kom_End=RME_ROUND_DOWN(Kom_End,RME_KOM_SLOT_ORDER);
        Kom_Begin=RME_ROUND_UP(Kom_Begin,RME_KOM_SLOT_ORDER);
#endif
        if(Kom_End<=Kom_Begin)
ffffffff8020f2de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f2e2:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f2e6:	72 0c                	jb     ffffffff8020f2f4 <_RME_Cpt_Add+0x6b6>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f2e8:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f2ef:	e9 7d 02 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Convert relative addresses to absolute addresses and check for overflow */
        Kom_Begin+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020f2f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f2f8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f2fc:	48 01 45 e8          	add    %rax,-0x18(%rbp)
        if(Kom_Begin<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020f300:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f304:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f308:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f30c:	73 0c                	jae    ffffffff8020f31a <_RME_Cpt_Add+0x6dc>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f30e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f315:	e9 57 02 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020f31a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f31e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f322:	48 01 45 e0          	add    %rax,-0x20(%rbp)
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020f326:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f32a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f32e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8020f332:	73 0c                	jae    ffffffff8020f340 <_RME_Cpt_Add+0x702>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f334:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f33b:	e9 31 02 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Check the ranges of kernel memory */
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020f340:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f344:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f348:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f34c:	73 0c                	jae    ffffffff8020f35a <_RME_Cpt_Add+0x71c>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f34e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f355:	e9 17 02 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Internal encoding of 'end' is inclusive */
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->End<(Kom_End-1U))
ffffffff8020f35a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f35e:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f362:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f366:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8020f36a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f36d:	73 0c                	jae    ffffffff8020f37b <_RME_Cpt_Add+0x73d>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f36f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f376:	e9 f6 01 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the flags - if there are extra ones, or all zero */
        if(Kom_Flag==0U)
ffffffff8020f37b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020f380:	75 0c                	jne    ffffffff8020f38e <_RME_Cpt_Add+0x750>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f382:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f389:	e9 e3 01 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if((Kom_Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f38e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f392:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f396:	48 f7 d0             	not    %rax
ffffffff8020f399:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff8020f39d:	48 85 c0             	test   %rax,%rax
ffffffff8020f3a0:	74 3f                	je     ffffffff8020f3e1 <_RME_Cpt_Add+0x7a3>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3a2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3a9:	e9 c3 01 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
    else
    {
        RME_COV_MARKER();
        
        /* Check the flags - if there are extra ones, or all zero */
        if(Flag==0U)
ffffffff8020f3ae:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
ffffffff8020f3b3:	75 0c                	jne    ffffffff8020f3c1 <_RME_Cpt_Add+0x783>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3b5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3bc:	e9 b0 01 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        else
        {
            RME_COV_MARKER();
            /* No action required */
        }
        if((Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f3c1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3c5:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f3c9:	48 f7 d0             	not    %rax
ffffffff8020f3cc:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f3d0:	48 85 c0             	test   %rax,%rax
ffffffff8020f3d3:	74 0c                	je     ffffffff8020f3e1 <_RME_Cpt_Add+0x7a3>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3d5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3dc:	e9 90 01 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
            /* No action required */
        }
    }
    
    /* Is the destination slot unoccupied? */
    if(Capobj_Dst->Head.Type_Stat!=0U)
ffffffff8020f3e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f3e5:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f3e8:	48 85 c0             	test   %rax,%rax
ffffffff8020f3eb:	74 0c                	je     ffffffff8020f3f9 <_RME_Cpt_Add+0x7bb>
    {
        RME_COV_MARKER();
            
        return RME_ERR_CPT_EXIST;
ffffffff8020f3ed:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f3f4:	e9 78 01 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Try to take the empty slot */
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff8020f3f9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f3fd:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f404:	00 00 00 
ffffffff8020f407:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020f40c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f40f:	e8 4a d3 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f414:	48 85 c0             	test   %rax,%rax
ffffffff8020f417:	0f 94 c0             	sete   %al
ffffffff8020f41a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f41d:	48 85 c0             	test   %rax,%rax
ffffffff8020f420:	74 0c                	je     ffffffff8020f42e <_RME_Cpt_Add+0x7f0>
ffffffff8020f422:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f429:	e9 43 01 00 00       	jmp    ffffffff8020f571 <_RME_Cpt_Add+0x933>
ffffffff8020f42e:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020f433:	e8 d9 d3 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020f438:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020f43c:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* All done, we replicate the cap with flags */
    if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020f440:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f445:	75 6a                	jne    ffffffff8020f4b1 <_RME_Cpt_Add+0x873>
    {
        RME_COV_MARKER();
            
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Kom_Flag);
ffffffff8020f447:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f44b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020f44f:	48 89 50 10          	mov    %rdx,0x10(%rax)
ffffffff8020f453:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f457:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8020f45b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f45f:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff8020f463:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f467:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f46b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f46f:	48 89 50 28          	mov    %rdx,0x28(%rax)
ffffffff8020f473:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f477:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f47b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f47f:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f483:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f487:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff8020f48b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f48f:	48 89 50 38          	mov    %rdx,0x38(%rax)
        /* Write absolute range information for kernel memory caps */
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->Begin=Kom_Begin;
ffffffff8020f493:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f497:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020f49b:	48 89 50 28          	mov    %rdx,0x28(%rax)
        /* The Kom_End encoded inclusively to avoid overflow at max address */
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->End=Kom_End-1U;
ffffffff8020f49f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f4a3:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8020f4a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4ab:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f4af:	eb 4c                	jmp    ffffffff8020f4fd <_RME_Cpt_Add+0x8bf>
    }
    else
    {
        RME_COV_MARKER();
        
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
ffffffff8020f4b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4b5:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff8020f4b9:	48 89 50 10          	mov    %rdx,0x10(%rax)
ffffffff8020f4bd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4c1:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8020f4c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4c9:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff8020f4cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4d1:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f4d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4d9:	48 89 50 28          	mov    %rdx,0x28(%rax)
ffffffff8020f4dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4e1:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f4e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4e9:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f4ed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4f1:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff8020f4f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4f9:	48 89 50 38          	mov    %rdx,0x38(%rax)
     * their parent, nor will they update the parent's reference count. This
     * design decision comes from the fact that these two capability types are
     * always created on boot and delegated everywhere, and they don't actually
     * have an object. If we use refcnt on these, we may cause scalability 
     * issues. The parent cap can't be deleted anyway, so this is fine. */
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020f4fd:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f502:	74 46                	je     ffffffff8020f54a <_RME_Cpt_Add+0x90c>
ffffffff8020f504:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
ffffffff8020f509:	74 3f                	je     ffffffff8020f54a <_RME_Cpt_Add+0x90c>
    {
        RME_COV_MARKER();
        
        /* Register root */
        Capobj_Dst->Head.Root_Ref=RME_CAP_CONV_ROOT(Capobj_Src,rme_ptr_t);
ffffffff8020f50b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f50f:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f512:	89 c0                	mov    %eax,%eax
ffffffff8020f514:	48 85 c0             	test   %rax,%rax
ffffffff8020f517:	74 0a                	je     ffffffff8020f523 <_RME_Cpt_Add+0x8e5>
ffffffff8020f519:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f51d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f521:	eb 04                	jmp    ffffffff8020f527 <_RME_Cpt_Add+0x8e9>
ffffffff8020f523:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f527:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020f52b:	48 89 42 08          	mov    %rax,0x8(%rdx)
    
        /* Increase the parent's refcnt - never overflows, guaranteed by field size */
        RME_FETCH_ADD(&(((volatile struct RME_Cap_Struct*)
ffffffff8020f52f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f533:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f537:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020f53b:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8020f540:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f543:	e8 4b d2 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff8020f548:	eb 0c                	jmp    ffffffff8020f556 <_RME_Cpt_Add+0x918>
    else
    {
        RME_COV_MARKER();
        
        /* No root for KOM and KFN */
        Capobj_Dst->Head.Root_Ref=0U;
ffffffff8020f54a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f54e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020f555:	00 
    }

    /* Establish cap */
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff8020f556:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020f55a:	48 c1 e0 30          	shl    $0x30,%rax
ffffffff8020f55e:	48 83 c8 01          	or     $0x1,%rax
ffffffff8020f562:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f565:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f569:	48 89 10             	mov    %rdx,(%rax)
                      RME_CAP_TYPE_STAT(Src_Type,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_LEAF));

    return 0;
ffffffff8020f56c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020f571:	c9                   	leave
ffffffff8020f572:	c3                   	ret

ffffffff8020f573 <_RME_Cpt_Rem>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Rem(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Rem,
                              rme_cid_t Cap_Rem)
{
ffffffff8020f573:	55                   	push   %rbp
ffffffff8020f574:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020f577:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff8020f57b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8020f57f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8020f583:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    rme_ptr_t Rem_Type;
    /* This is used for removal */
    volatile struct RME_Cap_Struct* Capobj_Root;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff8020f587:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f58b:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020f590:	48 85 c0             	test   %rax,%rax
ffffffff8020f593:	0f 85 98 00 00 00    	jne    ffffffff8020f631 <_RME_Cpt_Rem+0xbe>
ffffffff8020f599:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f59d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f5a1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020f5a5:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f5a8:	0f 93 c0             	setae  %al
ffffffff8020f5ab:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f5ae:	48 85 c0             	test   %rax,%rax
ffffffff8020f5b1:	74 0c                	je     ffffffff8020f5bf <_RME_Cpt_Rem+0x4c>
ffffffff8020f5b3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f5ba:	e9 3f 03 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
ffffffff8020f5bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f5c3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f5c7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f5ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f5ce:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f5d2:	48 01 d0             	add    %rdx,%rax
ffffffff8020f5d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f5d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f5dd:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f5e0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f5e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f5e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f5ec:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f5ef:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f5f3:	0f 94 c0             	sete   %al
ffffffff8020f5f6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f5f9:	48 85 c0             	test   %rax,%rax
ffffffff8020f5fc:	74 0c                	je     ffffffff8020f60a <_RME_Cpt_Rem+0x97>
ffffffff8020f5fe:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f605:	e9 f4 02 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
ffffffff8020f60a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f60e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f612:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f616:	0f 95 c0             	setne  %al
ffffffff8020f619:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f61c:	48 85 c0             	test   %rax,%rax
ffffffff8020f61f:	0f 84 4c 01 00 00    	je     ffffffff8020f771 <_RME_Cpt_Rem+0x1fe>
ffffffff8020f625:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f62c:	e9 cd 02 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
ffffffff8020f631:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f635:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f639:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f63c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f640:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f644:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f647:	0f 93 c0             	setae  %al
ffffffff8020f64a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f64d:	48 85 c0             	test   %rax,%rax
ffffffff8020f650:	74 0c                	je     ffffffff8020f65e <_RME_Cpt_Rem+0xeb>
ffffffff8020f652:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f659:	e9 a0 02 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
ffffffff8020f65e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f662:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f666:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f66a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f66d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f671:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f675:	48 01 d0             	add    %rdx,%rax
ffffffff8020f678:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f67c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f680:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f683:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f687:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f68b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f68f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f692:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f696:	0f 94 c0             	sete   %al
ffffffff8020f699:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f69c:	48 85 c0             	test   %rax,%rax
ffffffff8020f69f:	74 0c                	je     ffffffff8020f6ad <_RME_Cpt_Rem+0x13a>
ffffffff8020f6a1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f6a8:	e9 51 02 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
ffffffff8020f6ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f6b1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f6b5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f6b9:	0f 95 c0             	setne  %al
ffffffff8020f6bc:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f6bf:	48 85 c0             	test   %rax,%rax
ffffffff8020f6c2:	74 0c                	je     ffffffff8020f6d0 <_RME_Cpt_Rem+0x15d>
ffffffff8020f6c4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f6cb:	e9 2e 02 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
ffffffff8020f6d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f6d4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f6d9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f6dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f6e0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f6e4:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f6e7:	0f 93 c0             	setae  %al
ffffffff8020f6ea:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f6ed:	48 85 c0             	test   %rax,%rax
ffffffff8020f6f0:	74 0c                	je     ffffffff8020f6fe <_RME_Cpt_Rem+0x18b>
ffffffff8020f6f2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f6f9:	e9 00 02 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
ffffffff8020f6fe:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f702:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f707:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f70b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f70e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f712:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f716:	48 01 d0             	add    %rdx,%rax
ffffffff8020f719:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f71d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f721:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f724:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f728:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f72c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f730:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f733:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f737:	0f 94 c0             	sete   %al
ffffffff8020f73a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f73d:	48 85 c0             	test   %rax,%rax
ffffffff8020f740:	74 0c                	je     ffffffff8020f74e <_RME_Cpt_Rem+0x1db>
ffffffff8020f742:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f749:	e9 b0 01 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
ffffffff8020f74e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f752:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f756:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f75a:	0f 95 c0             	setne  %al
ffffffff8020f75d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f760:	48 85 c0             	test   %rax,%rax
ffffffff8020f763:	74 0c                	je     ffffffff8020f771 <_RME_Cpt_Rem+0x1fe>
ffffffff8020f765:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f76c:	e9 8d 01 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_REM);
ffffffff8020f771:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f775:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f779:	83 e0 20             	and    $0x20,%eax
ffffffff8020f77c:	48 85 c0             	test   %rax,%rax
ffffffff8020f77f:	0f 94 c0             	sete   %al
ffffffff8020f782:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f785:	48 85 c0             	test   %rax,%rax
ffffffff8020f788:	74 0c                	je     ffffffff8020f796 <_RME_Cpt_Rem+0x223>
ffffffff8020f78a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f791:	e9 68 01 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff8020f796:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f79a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f79e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020f7a2:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f7a5:	0f 93 c0             	setae  %al
ffffffff8020f7a8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f7ab:	48 85 c0             	test   %rax,%rax
ffffffff8020f7ae:	74 0c                	je     ffffffff8020f7bc <_RME_Cpt_Rem+0x249>
ffffffff8020f7b0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f7b7:	e9 42 01 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
ffffffff8020f7bc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020f7c0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f7c4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f7c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f7cb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f7cf:	48 01 d0             	add    %rdx,%rax
ffffffff8020f7d2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Removal check */
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff8020f7d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f7da:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f7dd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f7e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f7e5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f7e9:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f7ec:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f7f0:	0f 95 c0             	setne  %al
ffffffff8020f7f3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f7f6:	48 85 c0             	test   %rax,%rax
ffffffff8020f7f9:	74 0c                	je     ffffffff8020f807 <_RME_Cpt_Rem+0x294>
ffffffff8020f7fb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f802:	e9 f7 00 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
ffffffff8020f807:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020f80c:	e8 00 d0 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020f811:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f814:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f818:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8020f81c:	48 29 c2             	sub    %rax,%rdx
ffffffff8020f81f:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8020f823:	0f 96 c0             	setbe  %al
ffffffff8020f826:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f829:	48 98                	cltq
ffffffff8020f82b:	48 85 c0             	test   %rax,%rax
ffffffff8020f82e:	74 0c                	je     ffffffff8020f83c <_RME_Cpt_Rem+0x2c9>
ffffffff8020f830:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020f837:	e9 c2 00 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
ffffffff8020f83c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f840:	89 c0                	mov    %eax,%eax
ffffffff8020f842:	48 85 c0             	test   %rax,%rax
ffffffff8020f845:	0f 94 c0             	sete   %al
ffffffff8020f848:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f84b:	48 85 c0             	test   %rax,%rax
ffffffff8020f84e:	74 0c                	je     ffffffff8020f85c <_RME_Cpt_Rem+0x2e9>
ffffffff8020f850:	48 c7 c0 f6 ff ff ff 	mov    $0xfffffffffffffff6,%rax
ffffffff8020f857:	e9 a2 00 00 00       	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
    
    /* If we are KFN or KOM, we don't care about parent or refcnt */
    Rem_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020f85c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f860:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f864:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if((Rem_Type!=RME_CAP_TYPE_KOM)&&(Rem_Type!=RME_CAP_TYPE_KFN))
ffffffff8020f868:	48 83 7d e0 02       	cmpq   $0x2,-0x20(%rbp)
ffffffff8020f86d:	74 5b                	je     ffffffff8020f8ca <_RME_Cpt_Rem+0x357>
ffffffff8020f86f:	48 83 7d e0 01       	cmpq   $0x1,-0x20(%rbp)
ffffffff8020f874:	74 54                	je     ffffffff8020f8ca <_RME_Cpt_Rem+0x357>
    {
        RME_COV_MARKER();
        
        /* Remember this for refcnt operations */
        Capobj_Root=(struct RME_Cap_Struct*)(Capobj_Rem->Head.Root_Ref);
ffffffff8020f876:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f87a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f87e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8020f882:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f886:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020f88a:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020f88f:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020f892:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f895:	e8 c4 ce ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f89a:	48 85 c0             	test   %rax,%rax
ffffffff8020f89d:	0f 94 c0             	sete   %al
ffffffff8020f8a0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f8a3:	48 85 c0             	test   %rax,%rax
ffffffff8020f8a6:	74 09                	je     ffffffff8020f8b1 <_RME_Cpt_Rem+0x33e>
ffffffff8020f8a8:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f8af:	eb 4d                	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>

        /* Check done, decrease its parent's refcnt. This must be done at last */
        RME_FETCH_ADD(&(Capobj_Root->Head.Root_Ref),-1);
ffffffff8020f8b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f8b5:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020f8b9:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8020f8c0:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f8c3:	e8 cb ce ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff8020f8c8:	eb 2f                	jmp    ffffffff8020f8f9 <_RME_Cpt_Rem+0x386>
    else
    {
        RME_COV_MARKER();

        /* Helping also applies here */
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8020f8ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f8ce:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020f8d2:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020f8d7:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020f8da:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f8dd:	e8 7c ce ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f8e2:	48 85 c0             	test   %rax,%rax
ffffffff8020f8e5:	0f 94 c0             	sete   %al
ffffffff8020f8e8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f8eb:	48 85 c0             	test   %rax,%rax
ffffffff8020f8ee:	74 09                	je     ffffffff8020f8f9 <_RME_Cpt_Rem+0x386>
ffffffff8020f8f0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f8f7:	eb 05                	jmp    ffffffff8020f8fe <_RME_Cpt_Rem+0x38b>
    }
    
    return 0;
ffffffff8020f8f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020f8fe:	c9                   	leave
ffffffff8020f8ff:	c3                   	ret

ffffffff8020f900 <_RME_Pgt_Boot_Crt>:
                            rme_ptr_t Vaddr,
                            rme_ptr_t Base,
                            rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order,
                            rme_ptr_t Num_Order)
{
ffffffff8020f900:	55                   	push   %rbp
ffffffff8020f901:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020f904:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020f908:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020f90c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020f910:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020f914:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020f918:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
ffffffff8020f91c:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Table_Size;
    
    /* Check if the total representable memory exceeds our maximum possible
     * addressible memory under the machine word length */
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020f920:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020f924:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020f928:	48 01 d0             	add    %rdx,%rax
ffffffff8020f92b:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff8020f92f:	76 0c                	jbe    ffffffff8020f93d <_RME_Pgt_Boot_Crt+0x3d>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff8020f931:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020f938:	e9 e9 03 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f93d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f941:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020f946:	48 85 c0             	test   %rax,%rax
ffffffff8020f949:	0f 85 98 00 00 00    	jne    ffffffff8020f9e7 <_RME_Pgt_Boot_Crt+0xe7>
ffffffff8020f94f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f953:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f957:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020f95b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f95e:	0f 93 c0             	setae  %al
ffffffff8020f961:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f964:	48 85 c0             	test   %rax,%rax
ffffffff8020f967:	74 0c                	je     ffffffff8020f975 <_RME_Pgt_Boot_Crt+0x75>
ffffffff8020f969:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f970:	e9 b1 03 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
ffffffff8020f975:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f979:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f97d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f980:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f984:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f988:	48 01 d0             	add    %rdx,%rax
ffffffff8020f98b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f98f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f993:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f996:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020f99a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f99e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f9a2:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f9a5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f9a9:	0f 94 c0             	sete   %al
ffffffff8020f9ac:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f9af:	48 85 c0             	test   %rax,%rax
ffffffff8020f9b2:	74 0c                	je     ffffffff8020f9c0 <_RME_Pgt_Boot_Crt+0xc0>
ffffffff8020f9b4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f9bb:	e9 66 03 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
ffffffff8020f9c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f9c4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f9c8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f9cc:	0f 95 c0             	setne  %al
ffffffff8020f9cf:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f9d2:	48 85 c0             	test   %rax,%rax
ffffffff8020f9d5:	0f 84 4c 01 00 00    	je     ffffffff8020fb27 <_RME_Pgt_Boot_Crt+0x227>
ffffffff8020f9db:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f9e2:	e9 3f 03 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
ffffffff8020f9e7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f9eb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f9ef:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f9f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f9f6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f9fa:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f9fd:	0f 93 c0             	setae  %al
ffffffff8020fa00:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa03:	48 85 c0             	test   %rax,%rax
ffffffff8020fa06:	74 0c                	je     ffffffff8020fa14 <_RME_Pgt_Boot_Crt+0x114>
ffffffff8020fa08:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fa0f:	e9 12 03 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
ffffffff8020fa14:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fa18:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fa1c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fa20:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fa23:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fa27:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fa2b:	48 01 d0             	add    %rdx,%rax
ffffffff8020fa2e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fa32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fa36:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fa39:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fa3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fa41:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fa45:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fa48:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fa4c:	0f 94 c0             	sete   %al
ffffffff8020fa4f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa52:	48 85 c0             	test   %rax,%rax
ffffffff8020fa55:	74 0c                	je     ffffffff8020fa63 <_RME_Pgt_Boot_Crt+0x163>
ffffffff8020fa57:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fa5e:	e9 c3 02 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
ffffffff8020fa63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fa67:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fa6b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fa6f:	0f 95 c0             	setne  %al
ffffffff8020fa72:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa75:	48 85 c0             	test   %rax,%rax
ffffffff8020fa78:	74 0c                	je     ffffffff8020fa86 <_RME_Pgt_Boot_Crt+0x186>
ffffffff8020fa7a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fa81:	e9 a0 02 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
ffffffff8020fa86:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fa8a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fa8f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fa92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fa96:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fa9a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fa9d:	0f 93 c0             	setae  %al
ffffffff8020faa0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020faa3:	48 85 c0             	test   %rax,%rax
ffffffff8020faa6:	74 0c                	je     ffffffff8020fab4 <_RME_Pgt_Boot_Crt+0x1b4>
ffffffff8020faa8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020faaf:	e9 72 02 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
ffffffff8020fab4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fab8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fabd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fac1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fac4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fac8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020facc:	48 01 d0             	add    %rdx,%rax
ffffffff8020facf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fad3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fad7:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fada:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fade:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fae2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fae6:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fae9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020faed:	0f 94 c0             	sete   %al
ffffffff8020faf0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020faf3:	48 85 c0             	test   %rax,%rax
ffffffff8020faf6:	74 0c                	je     ffffffff8020fb04 <_RME_Pgt_Boot_Crt+0x204>
ffffffff8020faf8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020faff:	e9 22 02 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
ffffffff8020fb04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fb08:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fb0c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fb10:	0f 95 c0             	setne  %al
ffffffff8020fb13:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb16:	48 85 c0             	test   %rax,%rax
ffffffff8020fb19:	74 0c                	je     ffffffff8020fb27 <_RME_Pgt_Boot_Crt+0x227>
ffffffff8020fb1b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fb22:	e9 ff 01 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fb27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb2b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020fb2f:	83 e0 01             	and    $0x1,%eax
ffffffff8020fb32:	48 85 c0             	test   %rax,%rax
ffffffff8020fb35:	0f 94 c0             	sete   %al
ffffffff8020fb38:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb3b:	48 85 c0             	test   %rax,%rax
ffffffff8020fb3e:	74 0c                	je     ffffffff8020fb4c <_RME_Pgt_Boot_Crt+0x24c>
ffffffff8020fb40:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020fb47:	e9 da 01 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
    
    /* Check if these parameters are feasible */
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)!=0)
ffffffff8020fb4c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8020fb50:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
ffffffff8020fb54:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020fb58:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
ffffffff8020fb5c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020fb60:	49 89 f8             	mov    %rdi,%r8
ffffffff8020fb63:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fb66:	e8 a2 6a 01 00       	call   ffffffff8022660d <__RME_Pgt_Check>
ffffffff8020fb6b:	48 85 c0             	test   %rax,%rax
ffffffff8020fb6e:	74 0c                	je     ffffffff8020fb7c <_RME_Pgt_Boot_Crt+0x27c>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff8020fb70:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020fb77:	e9 aa 01 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if the base address is properly aligned to the total order of the page table */
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020fb7c:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8020fb80:	89 c2                	mov    %eax,%edx
ffffffff8020fb82:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fb86:	01 c2                	add    %eax,%edx
ffffffff8020fb88:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff8020fb8d:	29 d0                	sub    %edx,%eax
ffffffff8020fb8f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8020fb96:	89 c1                	mov    %eax,%ecx
ffffffff8020fb98:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020fb9b:	48 89 d0             	mov    %rdx,%rax
ffffffff8020fb9e:	48 23 45 b8          	and    -0x48(%rbp),%rax
ffffffff8020fba2:	48 85 c0             	test   %rax,%rax
ffffffff8020fba5:	74 0c                	je     ffffffff8020fbb3 <_RME_Pgt_Boot_Crt+0x2b3>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_HW;
ffffffff8020fba7:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020fbae:	e9 73 01 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020fbb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fbb7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fbbb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020fbbf:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fbc2:	0f 93 c0             	setae  %al
ffffffff8020fbc5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fbc8:	48 85 c0             	test   %rax,%rax
ffffffff8020fbcb:	74 0c                	je     ffffffff8020fbd9 <_RME_Pgt_Boot_Crt+0x2d9>
ffffffff8020fbcd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fbd4:	e9 4d 01 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
ffffffff8020fbd9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020fbdd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fbe1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fbe4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fbe8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fbec:	48 01 d0             	add    %rdx,%rax
ffffffff8020fbef:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020fbf3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fbf7:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020fbfe:	00 00 00 
ffffffff8020fc01:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020fc06:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fc09:	e8 50 cb ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020fc0e:	48 85 c0             	test   %rax,%rax
ffffffff8020fc11:	0f 94 c0             	sete   %al
ffffffff8020fc14:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fc17:	48 85 c0             	test   %rax,%rax
ffffffff8020fc1a:	74 0c                	je     ffffffff8020fc28 <_RME_Pgt_Boot_Crt+0x328>
ffffffff8020fc1c:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020fc23:	e9 fe 00 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
ffffffff8020fc28:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020fc2d:	e8 df cb ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020fc32:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020fc36:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Are we creating the top level? */
    if(Is_Top!=0U)
ffffffff8020fc3a:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8020fc3f:	74 1b                	je     ffffffff8020fc5c <_RME_Pgt_Boot_Crt+0x35c>
    {
        RME_COV_MARKER();
        
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020fc41:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fc45:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020fc4a:	89 c1                	mov    %eax,%ecx
ffffffff8020fc4c:	d3 e2                	shl    %cl,%edx
ffffffff8020fc4e:	89 d0                	mov    %edx,%eax
ffffffff8020fc50:	48 98                	cltq
ffffffff8020fc52:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020fc56:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fc5a:	eb 19                	jmp    ffffffff8020fc75 <_RME_Pgt_Boot_Crt+0x375>
    }
    else
    {
        RME_COV_MARKER();
        
        Table_Size=RME_PGT_SIZE_NOM(Num_Order);
ffffffff8020fc5c:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fc60:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020fc65:	89 c1                	mov    %eax,%ecx
ffffffff8020fc67:	d3 e2                	shl    %cl,%edx
ffffffff8020fc69:	89 d0                	mov    %edx,%eax
ffffffff8020fc6b:	48 98                	cltq
ffffffff8020fc6d:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020fc71:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020fc75:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020fc79:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020fc7d:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020fc80:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fc83:	e8 1c 26 00 00       	call   ffffffff802122a4 <_RME_Kot_Mark>
ffffffff8020fc88:	48 85 c0             	test   %rax,%rax
ffffffff8020fc8b:	74 17                	je     ffffffff8020fca4 <_RME_Pgt_Boot_Crt+0x3a4>
    {
        RME_COV_MARKER();
    
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020fc8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fc91:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020fc98:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020fc9f:	e9 82 00 00 00       	jmp    ffffffff8020fd26 <_RME_Pgt_Boot_Crt+0x426>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Header init */
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020fca4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fca8:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020fcaf:	00 
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020fcb0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fcb4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020fcb8:	48 89 50 18          	mov    %rdx,0x18(%rax)
    /* Set the property of the page table to only act as source and creating process */
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ADD_SRC|
ffffffff8020fcbc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fcc0:	48 be c1 00 00 00 f0 	movabs $0xfffffff0000000c1,%rsi
ffffffff8020fcc7:	ff ff ff 
ffffffff8020fcca:	48 89 70 10          	mov    %rsi,0x10(%rax)
                       RME_PGT_FLAG_PRC_CRT|RME_PGT_FLAG_PRC_PGT;
    
    /* Info init */
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020fcce:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020fcd2:	48 0b 45 b0          	or     -0x50(%rbp),%rax
ffffffff8020fcd6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fcd9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fcdd:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fce1:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8020fce5:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020fce9:	48 0b 45 18          	or     0x18(%rbp),%rax
ffffffff8020fced:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fcf0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fcf4:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Pgt_Crt->ASID=0U;
ffffffff8020fcf8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fcfc:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff8020fd03:	00 

    /* Object init - need to add all kernel pages if they are top-level */
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020fd04:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd08:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fd0b:	e8 8b 69 01 00       	call   ffffffff8022669b <__RME_Pgt_Init>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Establish cap */
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020fd10:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd14:	48 bf 00 00 00 00 00 	movabs $0x4000000000000,%rdi
ffffffff8020fd1b:	00 04 00 
ffffffff8020fd1e:	48 89 38             	mov    %rdi,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PGT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020fd21:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020fd26:	c9                   	leave
ffffffff8020fd27:	c3                   	ret

ffffffff8020fd28 <_RME_Pgt_Boot_Add>:
rme_ret_t _RME_Pgt_Boot_Add(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Pgt, 
                            rme_ptr_t Paddr,
                            rme_ptr_t Pos,
                            rme_ptr_t Flag)
{
ffffffff8020fd28:	55                   	push   %rbp
ffffffff8020fd29:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020fd2c:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020fd30:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020fd34:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020fd38:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020fd3c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020fd40:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Pgt* Pgt_Op;
    rme_ptr_t Type_Stat;
    rme_ptr_t Szord;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020fd44:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fd48:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020fd4d:	48 85 c0             	test   %rax,%rax
ffffffff8020fd50:	0f 85 98 00 00 00    	jne    ffffffff8020fdee <_RME_Pgt_Boot_Add+0xc6>
ffffffff8020fd56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fd5a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fd5e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020fd62:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fd65:	0f 93 c0             	setae  %al
ffffffff8020fd68:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fd6b:	48 85 c0             	test   %rax,%rax
ffffffff8020fd6e:	74 0c                	je     ffffffff8020fd7c <_RME_Pgt_Boot_Add+0x54>
ffffffff8020fd70:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fd77:	e9 33 02 00 00       	jmp    ffffffff8020ffaf <_RME_Pgt_Boot_Add+0x287>
ffffffff8020fd7c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fd80:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fd84:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fd87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fd8b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fd8f:	48 01 d0             	add    %rdx,%rax
ffffffff8020fd92:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fd96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fd9a:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fd9d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fda1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fda5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fda9:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fdac:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fdb0:	0f 94 c0             	sete   %al
ffffffff8020fdb3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fdb6:	48 85 c0             	test   %rax,%rax
ffffffff8020fdb9:	74 0c                	je     ffffffff8020fdc7 <_RME_Pgt_Boot_Add+0x9f>
ffffffff8020fdbb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fdc2:	e9 e8 01 00 00       	jmp    ffffffff8020ffaf <_RME_Pgt_Boot_Add+0x287>
ffffffff8020fdc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fdcb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fdcf:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020fdd3:	0f 95 c0             	setne  %al
ffffffff8020fdd6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fdd9:	48 85 c0             	test   %rax,%rax
ffffffff8020fddc:	0f 84 4c 01 00 00    	je     ffffffff8020ff2e <_RME_Pgt_Boot_Add+0x206>
ffffffff8020fde2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fde9:	e9 c1 01 00 00       	jmp    ffffffff8020ffaf <_RME_Pgt_Boot_Add+0x287>
ffffffff8020fdee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fdf2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fdf6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fdf9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fdfd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fe01:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fe04:	0f 93 c0             	setae  %al
ffffffff8020fe07:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe0a:	48 85 c0             	test   %rax,%rax
ffffffff8020fe0d:	74 0c                	je     ffffffff8020fe1b <_RME_Pgt_Boot_Add+0xf3>
ffffffff8020fe0f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fe16:	e9 94 01 00 00       	jmp    ffffffff8020ffaf <_RME_Pgt_Boot_Add+0x287>
ffffffff8020fe1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fe1f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fe23:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fe27:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fe2e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fe32:	48 01 d0             	add    %rdx,%rax
ffffffff8020fe35:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fe39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fe3d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fe40:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fe44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fe48:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fe4c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fe4f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fe53:	0f 94 c0             	sete   %al
ffffffff8020fe56:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe59:	48 85 c0             	test   %rax,%rax
ffffffff8020fe5c:	74 0c                	je     ffffffff8020fe6a <_RME_Pgt_Boot_Add+0x142>
ffffffff8020fe5e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fe65:	e9 45 01 00 00       	jmp    ffffffff8020ffaf <_RME_Pgt_Boot_Add+0x287>
ffffffff8020fe6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fe6e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fe72:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fe76:	0f 95 c0             	setne  %al
ffffffff8020fe79:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe7c:	48 85 c0             	test   %rax,%rax
ffffffff8020fe7f:	74 0c                	je     ffffffff8020fe8d <_RME_Pgt_Boot_Add+0x165>
ffffffff8020fe81:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fe88:	e9 22 01 00 00       	jmp    ffffffff8020ffaf <_RME_Pgt_Boot_Add+0x287>
ffffffff8020fe8d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fe91:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fe96:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fe9d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fea1:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fea4:	0f 93 c0             	setae  %al
ffffffff8020fea7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020feaa:	48 85 c0             	test   %rax,%rax
ffffffff8020fead:	74 0c                	je     ffffffff8020febb <_RME_Pgt_Boot_Add+0x193>
ffffffff8020feaf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020feb6:	e9 f4 00 00 00       	jmp    ffffffff8020ffaf <_RME_Pgt_Boot_Add+0x287>
ffffffff8020febb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020febf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fec4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fec8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fecb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fecf:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fed3:	48 01 d0             	add    %rdx,%rax
ffffffff8020fed6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020feda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fede:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fee1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fee5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fee9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020feed:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fef0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fef4:	0f 94 c0             	sete   %al
ffffffff8020fef7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fefa:	48 85 c0             	test   %rax,%rax
ffffffff8020fefd:	74 0c                	je     ffffffff8020ff0b <_RME_Pgt_Boot_Add+0x1e3>
ffffffff8020feff:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ff06:	e9 a4 00 00 00       	jmp    ffffffff8020ffaf <_RME_Pgt_Boot_Add+0x287>
ffffffff8020ff0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ff0f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ff13:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020ff17:	0f 95 c0             	setne  %al
ffffffff8020ff1a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff1d:	48 85 c0             	test   %rax,%rax
ffffffff8020ff20:	74 0c                	je     ffffffff8020ff2e <_RME_Pgt_Boot_Add+0x206>
ffffffff8020ff22:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ff29:	e9 81 00 00 00       	jmp    ffffffff8020ffaf <_RME_Pgt_Boot_Add+0x287>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen, but don't check their properties */
    RME_CAP_CHECK(Pgt_Op,0U);

    Szord=RME_PGT_SIZEORD(Pgt_Op->Order);
ffffffff8020ff2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff32:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ff36:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ff3a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        /* No action required */
    }
#endif

    /* See if the mapping range and the granularity is allowed */
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020ff3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff42:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ff46:	89 c2                	mov    %eax,%edx
ffffffff8020ff48:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020ff4c:	89 d1                	mov    %edx,%ecx
ffffffff8020ff4e:	48 d3 e8             	shr    %cl,%rax
ffffffff8020ff51:	48 85 c0             	test   %rax,%rax
ffffffff8020ff54:	75 25                	jne    ffffffff8020ff7b <_RME_Pgt_Boot_Add+0x253>
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020ff56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ff5a:	89 c2                	mov    %eax,%edx
ffffffff8020ff5c:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff8020ff61:	29 d0                	sub    %edx,%eax
ffffffff8020ff63:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8020ff6a:	89 c1                	mov    %eax,%ecx
ffffffff8020ff6c:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020ff6f:	48 89 d0             	mov    %rdx,%rax
ffffffff8020ff72:	48 23 45 c8          	and    -0x38(%rbp),%rax
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020ff76:	48 85 c0             	test   %rax,%rax
ffffffff8020ff79:	74 09                	je     ffffffff8020ff84 <_RME_Pgt_Boot_Add+0x25c>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff8020ff7b:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020ff82:	eb 2b                	jmp    ffffffff8020ffaf <_RME_Pgt_Boot_Add+0x287>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Map(Pgt_Op,Paddr,Pos,Flag)!=0)
ffffffff8020ff84:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff8020ff88:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020ff8c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
ffffffff8020ff90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff94:	48 89 c7             	mov    %rax,%rdi
ffffffff8020ff97:	e8 e0 67 01 00       	call   ffffffff8022677c <__RME_Pgt_Page_Map>
ffffffff8020ff9c:	48 85 c0             	test   %rax,%rax
ffffffff8020ff9f:	74 09                	je     ffffffff8020ffaa <_RME_Pgt_Boot_Add+0x282>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_MAP;
ffffffff8020ffa1:	48 c7 c0 9a ff ff ff 	mov    $0xffffffffffffff9a,%rax
ffffffff8020ffa8:	eb 05                	jmp    ffffffff8020ffaf <_RME_Pgt_Boot_Add+0x287>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff8020ffaa:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020ffaf:	c9                   	leave
ffffffff8020ffb0:	c3                   	ret

ffffffff8020ffb1 <_RME_Pgt_Boot_Con>:
rme_ret_t _RME_Pgt_Boot_Con(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Pgt_Parent,
                            rme_ptr_t Pos,
                            rme_cid_t Cap_Pgt_Child,
                            rme_ptr_t Flag_Child)
{
ffffffff8020ffb1:	55                   	push   %rbp
ffffffff8020ffb2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ffb5:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020ffb9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8020ffbd:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8020ffc1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8020ffc5:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff8020ffc9:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
    rme_ptr_t Begin_Parent;
    rme_ptr_t End_Parent;
#endif
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020ffcd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020ffd1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020ffd6:	48 85 c0             	test   %rax,%rax
ffffffff8020ffd9:	0f 85 98 00 00 00    	jne    ffffffff80210077 <_RME_Pgt_Boot_Con+0xc6>
ffffffff8020ffdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020ffe3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ffe7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020ffeb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ffee:	0f 93 c0             	setae  %al
ffffffff8020fff1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fff4:	48 85 c0             	test   %rax,%rax
ffffffff8020fff7:	74 0c                	je     ffffffff80210005 <_RME_Pgt_Boot_Con+0x54>
ffffffff8020fff9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210000:	e9 a0 04 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff80210005:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210009:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021000d:	48 89 c2             	mov    %rax,%rdx
ffffffff80210010:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210014:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210018:	48 01 d0             	add    %rdx,%rax
ffffffff8021001b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021001f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210023:	48 8b 00             	mov    (%rax),%rax
ffffffff80210026:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021002a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021002e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210032:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210035:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210039:	0f 94 c0             	sete   %al
ffffffff8021003c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021003f:	48 85 c0             	test   %rax,%rax
ffffffff80210042:	74 0c                	je     ffffffff80210050 <_RME_Pgt_Boot_Con+0x9f>
ffffffff80210044:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021004b:	e9 55 04 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff80210050:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210054:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210058:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021005c:	0f 95 c0             	setne  %al
ffffffff8021005f:	0f b6 c0             	movzbl %al,%eax
ffffffff80210062:	48 85 c0             	test   %rax,%rax
ffffffff80210065:	0f 84 4c 01 00 00    	je     ffffffff802101b7 <_RME_Pgt_Boot_Con+0x206>
ffffffff8021006b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210072:	e9 2e 04 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff80210077:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021007b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021007f:	48 89 c2             	mov    %rax,%rdx
ffffffff80210082:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210086:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021008a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021008d:	0f 93 c0             	setae  %al
ffffffff80210090:	0f b6 c0             	movzbl %al,%eax
ffffffff80210093:	48 85 c0             	test   %rax,%rax
ffffffff80210096:	74 0c                	je     ffffffff802100a4 <_RME_Pgt_Boot_Con+0xf3>
ffffffff80210098:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021009f:	e9 01 04 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff802100a4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802100a8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802100ac:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802100b0:	48 89 c2             	mov    %rax,%rdx
ffffffff802100b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802100b7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802100bb:	48 01 d0             	add    %rdx,%rax
ffffffff802100be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802100c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802100c6:	48 8b 00             	mov    (%rax),%rax
ffffffff802100c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802100cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802100d1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802100d5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802100d8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802100dc:	0f 94 c0             	sete   %al
ffffffff802100df:	0f b6 c0             	movzbl %al,%eax
ffffffff802100e2:	48 85 c0             	test   %rax,%rax
ffffffff802100e5:	74 0c                	je     ffffffff802100f3 <_RME_Pgt_Boot_Con+0x142>
ffffffff802100e7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802100ee:	e9 b2 03 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff802100f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802100f7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802100fb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802100ff:	0f 95 c0             	setne  %al
ffffffff80210102:	0f b6 c0             	movzbl %al,%eax
ffffffff80210105:	48 85 c0             	test   %rax,%rax
ffffffff80210108:	74 0c                	je     ffffffff80210116 <_RME_Pgt_Boot_Con+0x165>
ffffffff8021010a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210111:	e9 8f 03 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff80210116:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021011a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021011f:	48 89 c2             	mov    %rax,%rdx
ffffffff80210122:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210126:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021012a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021012d:	0f 93 c0             	setae  %al
ffffffff80210130:	0f b6 c0             	movzbl %al,%eax
ffffffff80210133:	48 85 c0             	test   %rax,%rax
ffffffff80210136:	74 0c                	je     ffffffff80210144 <_RME_Pgt_Boot_Con+0x193>
ffffffff80210138:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021013f:	e9 61 03 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff80210144:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210148:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021014d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210151:	48 89 c2             	mov    %rax,%rdx
ffffffff80210154:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210158:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021015c:	48 01 d0             	add    %rdx,%rax
ffffffff8021015f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210163:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210167:	48 8b 00             	mov    (%rax),%rax
ffffffff8021016a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021016e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210172:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210176:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210179:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021017d:	0f 94 c0             	sete   %al
ffffffff80210180:	0f b6 c0             	movzbl %al,%eax
ffffffff80210183:	48 85 c0             	test   %rax,%rax
ffffffff80210186:	74 0c                	je     ffffffff80210194 <_RME_Pgt_Boot_Con+0x1e3>
ffffffff80210188:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021018f:	e9 11 03 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff80210194:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210198:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021019c:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802101a0:	0f 95 c0             	setne  %al
ffffffff802101a3:	0f b6 c0             	movzbl %al,%eax
ffffffff802101a6:	48 85 c0             	test   %rax,%rax
ffffffff802101a9:	74 0c                	je     ffffffff802101b7 <_RME_Pgt_Boot_Con+0x206>
ffffffff802101ab:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802101b2:	e9 ee 02 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff802101b7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802101bb:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802101c0:	48 85 c0             	test   %rax,%rax
ffffffff802101c3:	0f 85 98 00 00 00    	jne    ffffffff80210261 <_RME_Pgt_Boot_Con+0x2b0>
ffffffff802101c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802101cd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802101d1:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff802101d5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802101d8:	0f 93 c0             	setae  %al
ffffffff802101db:	0f b6 c0             	movzbl %al,%eax
ffffffff802101de:	48 85 c0             	test   %rax,%rax
ffffffff802101e1:	74 0c                	je     ffffffff802101ef <_RME_Pgt_Boot_Con+0x23e>
ffffffff802101e3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802101ea:	e9 b6 02 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff802101ef:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802101f3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802101f7:	48 89 c2             	mov    %rax,%rdx
ffffffff802101fa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802101fe:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210202:	48 01 d0             	add    %rdx,%rax
ffffffff80210205:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210209:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021020d:	48 8b 00             	mov    (%rax),%rax
ffffffff80210210:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210214:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210218:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021021c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021021f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210223:	0f 94 c0             	sete   %al
ffffffff80210226:	0f b6 c0             	movzbl %al,%eax
ffffffff80210229:	48 85 c0             	test   %rax,%rax
ffffffff8021022c:	74 0c                	je     ffffffff8021023a <_RME_Pgt_Boot_Con+0x289>
ffffffff8021022e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210235:	e9 6b 02 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff8021023a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021023e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210242:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210246:	0f 95 c0             	setne  %al
ffffffff80210249:	0f b6 c0             	movzbl %al,%eax
ffffffff8021024c:	48 85 c0             	test   %rax,%rax
ffffffff8021024f:	0f 84 4c 01 00 00    	je     ffffffff802103a1 <_RME_Pgt_Boot_Con+0x3f0>
ffffffff80210255:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021025c:	e9 44 02 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff80210261:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210265:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210269:	48 89 c2             	mov    %rax,%rdx
ffffffff8021026c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210270:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210274:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210277:	0f 93 c0             	setae  %al
ffffffff8021027a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021027d:	48 85 c0             	test   %rax,%rax
ffffffff80210280:	74 0c                	je     ffffffff8021028e <_RME_Pgt_Boot_Con+0x2dd>
ffffffff80210282:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210289:	e9 17 02 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff8021028e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210292:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210296:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021029a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021029d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802102a1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802102a5:	48 01 d0             	add    %rdx,%rax
ffffffff802102a8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802102ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802102b0:	48 8b 00             	mov    (%rax),%rax
ffffffff802102b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802102b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802102bb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802102bf:	0f b7 c0             	movzwl %ax,%eax
ffffffff802102c2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802102c6:	0f 94 c0             	sete   %al
ffffffff802102c9:	0f b6 c0             	movzbl %al,%eax
ffffffff802102cc:	48 85 c0             	test   %rax,%rax
ffffffff802102cf:	74 0c                	je     ffffffff802102dd <_RME_Pgt_Boot_Con+0x32c>
ffffffff802102d1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802102d8:	e9 c8 01 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff802102dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802102e1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802102e5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802102e9:	0f 95 c0             	setne  %al
ffffffff802102ec:	0f b6 c0             	movzbl %al,%eax
ffffffff802102ef:	48 85 c0             	test   %rax,%rax
ffffffff802102f2:	74 0c                	je     ffffffff80210300 <_RME_Pgt_Boot_Con+0x34f>
ffffffff802102f4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802102fb:	e9 a5 01 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff80210300:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210304:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210309:	48 89 c2             	mov    %rax,%rdx
ffffffff8021030c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210310:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210314:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210317:	0f 93 c0             	setae  %al
ffffffff8021031a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021031d:	48 85 c0             	test   %rax,%rax
ffffffff80210320:	74 0c                	je     ffffffff8021032e <_RME_Pgt_Boot_Con+0x37d>
ffffffff80210322:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210329:	e9 77 01 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff8021032e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210332:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210337:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021033b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021033e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210342:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210346:	48 01 d0             	add    %rdx,%rax
ffffffff80210349:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021034d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210351:	48 8b 00             	mov    (%rax),%rax
ffffffff80210354:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210358:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021035c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210360:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210363:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210367:	0f 94 c0             	sete   %al
ffffffff8021036a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021036d:	48 85 c0             	test   %rax,%rax
ffffffff80210370:	74 0c                	je     ffffffff8021037e <_RME_Pgt_Boot_Con+0x3cd>
ffffffff80210372:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210379:	e9 27 01 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
ffffffff8021037e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210382:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210386:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021038a:	0f 95 c0             	setne  %al
ffffffff8021038d:	0f b6 c0             	movzbl %al,%eax
ffffffff80210390:	48 85 c0             	test   %rax,%rax
ffffffff80210393:	74 0c                	je     ffffffff802103a1 <_RME_Pgt_Boot_Con+0x3f0>
ffffffff80210395:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021039c:	e9 04 01 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
    /* Check if both page table caps are not frozen but don't check flags */
    RME_CAP_CHECK(Pgt_Parent,0U);
    RME_CAP_CHECK(Pgt_Child,0U);
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff802103a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802103a5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802103a9:	89 c2                	mov    %eax,%edx
ffffffff802103ab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802103af:	89 d1                	mov    %edx,%ecx
ffffffff802103b1:	48 d3 e8             	shr    %cl,%rax
ffffffff802103b4:	48 85 c0             	test   %rax,%rax
ffffffff802103b7:	74 0c                	je     ffffffff802103c5 <_RME_Pgt_Boot_Con+0x414>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff802103b9:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802103c0:	e9 e0 00 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the child table falls within one slot of the parent table */
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff802103c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802103c9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802103cd:	89 c2                	mov    %eax,%edx
ffffffff802103cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802103d3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802103d7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802103db:	48 01 d0             	add    %rdx,%rax
ffffffff802103de:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff802103e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802103e6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802103ea:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802103ee:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Szord_Parent<Order_Child)
ffffffff802103f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802103f6:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff802103fa:	73 0c                	jae    ffffffff80210408 <_RME_Pgt_Boot_Con+0x457>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff802103fc:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80210403:	e9 9d 00 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
        RME_COV_MARKER();
        /* No action required */
    }
#else
    /* Force no path compression when virtual mappings are enabled */
    if(Szord_Parent!=Order_Child)
ffffffff80210408:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021040c:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80210410:	74 0c                	je     ffffffff8021041e <_RME_Pgt_Boot_Con+0x46d>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80210412:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80210419:	e9 87 00 00 00       	jmp    ffffffff802104a5 <_RME_Pgt_Boot_Con+0x4f4>
    }
#endif

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff8021041e:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff80210422:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80210426:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff8021042a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021042e:	48 89 c7             	mov    %rax,%rdi
ffffffff80210431:	e8 1f 65 01 00       	call   ffffffff80226955 <__RME_Pgt_Pgdir_Map>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff80210436:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021043a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021043d:	89 c0                	mov    %eax,%eax
ffffffff8021043f:	48 85 c0             	test   %rax,%rax
ffffffff80210442:	74 0a                	je     ffffffff8021044e <_RME_Pgt_Boot_Con+0x49d>
ffffffff80210444:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210448:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021044c:	eb 04                	jmp    ffffffff80210452 <_RME_Pgt_Boot_Con+0x4a1>
ffffffff8021044e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210452:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1U);
ffffffff80210456:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021045a:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021045e:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80210463:	48 89 c7             	mov    %rax,%rdi
ffffffff80210466:	e8 28 c3 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8021046b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021046f:	48 8b 00             	mov    (%rax),%rax
ffffffff80210472:	89 c0                	mov    %eax,%eax
ffffffff80210474:	48 85 c0             	test   %rax,%rax
ffffffff80210477:	74 0a                	je     ffffffff80210483 <_RME_Pgt_Boot_Con+0x4d2>
ffffffff80210479:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021047d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80210481:	eb 04                	jmp    ffffffff80210487 <_RME_Pgt_Boot_Con+0x4d6>
ffffffff80210483:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210487:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1U);
ffffffff8021048b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021048f:	48 83 c0 08          	add    $0x8,%rax
ffffffff80210493:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80210498:	48 89 c7             	mov    %rax,%rdi
ffffffff8021049b:	e8 f3 c2 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff802104a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802104a5:	c9                   	leave
ffffffff802104a6:	c3                   	ret

ffffffff802104a7 <_RME_Pgt_Crt>:
                              rme_ptr_t Raddr,
                              rme_ptr_t Base,
                              rme_ptr_t Is_Top,
                              rme_ptr_t Size_Order,
                              rme_ptr_t Num_Order)
{
ffffffff802104a7:	55                   	push   %rbp
ffffffff802104a8:	48 89 e5             	mov    %rsp,%rbp
ffffffff802104ab:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff802104af:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff802104b3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff802104b7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff802104bb:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff802104bf:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff802104c3:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Vaddr;
    rme_ptr_t Table_Size;
    
    /* Check if the total representable memory exceeds our maximum possible
     * addressible memory under the machine word length */
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff802104c7:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff802104cb:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff802104cf:	48 01 d0             	add    %rdx,%rax
ffffffff802104d2:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff802104d6:	76 0c                	jbe    ffffffff802104e4 <_RME_Pgt_Crt+0x3d>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff802104d8:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff802104df:	e9 93 06 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802104e4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802104e8:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802104ed:	48 85 c0             	test   %rax,%rax
ffffffff802104f0:	0f 85 98 00 00 00    	jne    ffffffff8021058e <_RME_Pgt_Crt+0xe7>
ffffffff802104f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802104fa:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802104fe:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80210502:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210505:	0f 93 c0             	setae  %al
ffffffff80210508:	0f b6 c0             	movzbl %al,%eax
ffffffff8021050b:	48 85 c0             	test   %rax,%rax
ffffffff8021050e:	74 0c                	je     ffffffff8021051c <_RME_Pgt_Crt+0x75>
ffffffff80210510:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210517:	e9 5b 06 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff8021051c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210520:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210524:	48 89 c2             	mov    %rax,%rdx
ffffffff80210527:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021052b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021052f:	48 01 d0             	add    %rdx,%rax
ffffffff80210532:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210536:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021053a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021053d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80210541:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210545:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210549:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021054c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210550:	0f 94 c0             	sete   %al
ffffffff80210553:	0f b6 c0             	movzbl %al,%eax
ffffffff80210556:	48 85 c0             	test   %rax,%rax
ffffffff80210559:	74 0c                	je     ffffffff80210567 <_RME_Pgt_Crt+0xc0>
ffffffff8021055b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210562:	e9 10 06 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff80210567:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021056b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021056f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210573:	0f 95 c0             	setne  %al
ffffffff80210576:	0f b6 c0             	movzbl %al,%eax
ffffffff80210579:	48 85 c0             	test   %rax,%rax
ffffffff8021057c:	0f 84 4c 01 00 00    	je     ffffffff802106ce <_RME_Pgt_Crt+0x227>
ffffffff80210582:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210589:	e9 e9 05 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff8021058e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210592:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210596:	48 89 c2             	mov    %rax,%rdx
ffffffff80210599:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021059d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802105a1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802105a4:	0f 93 c0             	setae  %al
ffffffff802105a7:	0f b6 c0             	movzbl %al,%eax
ffffffff802105aa:	48 85 c0             	test   %rax,%rax
ffffffff802105ad:	74 0c                	je     ffffffff802105bb <_RME_Pgt_Crt+0x114>
ffffffff802105af:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802105b6:	e9 bc 05 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff802105bb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802105bf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802105c3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802105c7:	48 89 c2             	mov    %rax,%rdx
ffffffff802105ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802105ce:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802105d2:	48 01 d0             	add    %rdx,%rax
ffffffff802105d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802105d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802105dd:	48 8b 00             	mov    (%rax),%rax
ffffffff802105e0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802105e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802105e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802105ec:	0f b7 c0             	movzwl %ax,%eax
ffffffff802105ef:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802105f3:	0f 94 c0             	sete   %al
ffffffff802105f6:	0f b6 c0             	movzbl %al,%eax
ffffffff802105f9:	48 85 c0             	test   %rax,%rax
ffffffff802105fc:	74 0c                	je     ffffffff8021060a <_RME_Pgt_Crt+0x163>
ffffffff802105fe:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210605:	e9 6d 05 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff8021060a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021060e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210612:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210616:	0f 95 c0             	setne  %al
ffffffff80210619:	0f b6 c0             	movzbl %al,%eax
ffffffff8021061c:	48 85 c0             	test   %rax,%rax
ffffffff8021061f:	74 0c                	je     ffffffff8021062d <_RME_Pgt_Crt+0x186>
ffffffff80210621:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210628:	e9 4a 05 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff8021062d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210631:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210636:	48 89 c2             	mov    %rax,%rdx
ffffffff80210639:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021063d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210641:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210644:	0f 93 c0             	setae  %al
ffffffff80210647:	0f b6 c0             	movzbl %al,%eax
ffffffff8021064a:	48 85 c0             	test   %rax,%rax
ffffffff8021064d:	74 0c                	je     ffffffff8021065b <_RME_Pgt_Crt+0x1b4>
ffffffff8021064f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210656:	e9 1c 05 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff8021065b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021065f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210664:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210668:	48 89 c2             	mov    %rax,%rdx
ffffffff8021066b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021066f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210673:	48 01 d0             	add    %rdx,%rax
ffffffff80210676:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021067a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021067e:	48 8b 00             	mov    (%rax),%rax
ffffffff80210681:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80210685:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210689:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021068d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210690:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210694:	0f 94 c0             	sete   %al
ffffffff80210697:	0f b6 c0             	movzbl %al,%eax
ffffffff8021069a:	48 85 c0             	test   %rax,%rax
ffffffff8021069d:	74 0c                	je     ffffffff802106ab <_RME_Pgt_Crt+0x204>
ffffffff8021069f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802106a6:	e9 cc 04 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff802106ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802106af:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802106b3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802106b7:	0f 95 c0             	setne  %al
ffffffff802106ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802106bd:	48 85 c0             	test   %rax,%rax
ffffffff802106c0:	74 0c                	je     ffffffff802106ce <_RME_Pgt_Crt+0x227>
ffffffff802106c2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802106c9:	e9 a9 04 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff802106ce:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802106d2:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802106d7:	48 85 c0             	test   %rax,%rax
ffffffff802106da:	0f 85 98 00 00 00    	jne    ffffffff80210778 <_RME_Pgt_Crt+0x2d1>
ffffffff802106e0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802106e4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802106e8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff802106ec:	48 39 c2             	cmp    %rax,%rdx
ffffffff802106ef:	0f 93 c0             	setae  %al
ffffffff802106f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802106f5:	48 85 c0             	test   %rax,%rax
ffffffff802106f8:	74 0c                	je     ffffffff80210706 <_RME_Pgt_Crt+0x25f>
ffffffff802106fa:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210701:	e9 71 04 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff80210706:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021070a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021070e:	48 89 c2             	mov    %rax,%rdx
ffffffff80210711:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210715:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210719:	48 01 d0             	add    %rdx,%rax
ffffffff8021071c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210720:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210724:	48 8b 00             	mov    (%rax),%rax
ffffffff80210727:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021072b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021072f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210733:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210736:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021073a:	0f 94 c0             	sete   %al
ffffffff8021073d:	0f b6 c0             	movzbl %al,%eax
ffffffff80210740:	48 85 c0             	test   %rax,%rax
ffffffff80210743:	74 0c                	je     ffffffff80210751 <_RME_Pgt_Crt+0x2aa>
ffffffff80210745:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021074c:	e9 26 04 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff80210751:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210755:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210759:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021075d:	0f 95 c0             	setne  %al
ffffffff80210760:	0f b6 c0             	movzbl %al,%eax
ffffffff80210763:	48 85 c0             	test   %rax,%rax
ffffffff80210766:	0f 84 4c 01 00 00    	je     ffffffff802108b8 <_RME_Pgt_Crt+0x411>
ffffffff8021076c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210773:	e9 ff 03 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff80210778:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021077c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210780:	48 89 c2             	mov    %rax,%rdx
ffffffff80210783:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210787:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021078b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021078e:	0f 93 c0             	setae  %al
ffffffff80210791:	0f b6 c0             	movzbl %al,%eax
ffffffff80210794:	48 85 c0             	test   %rax,%rax
ffffffff80210797:	74 0c                	je     ffffffff802107a5 <_RME_Pgt_Crt+0x2fe>
ffffffff80210799:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802107a0:	e9 d2 03 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff802107a5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802107a9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802107ad:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802107b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802107b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802107b8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802107bc:	48 01 d0             	add    %rdx,%rax
ffffffff802107bf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802107c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802107c7:	48 8b 00             	mov    (%rax),%rax
ffffffff802107ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802107ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802107d2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802107d6:	0f b7 c0             	movzwl %ax,%eax
ffffffff802107d9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802107dd:	0f 94 c0             	sete   %al
ffffffff802107e0:	0f b6 c0             	movzbl %al,%eax
ffffffff802107e3:	48 85 c0             	test   %rax,%rax
ffffffff802107e6:	74 0c                	je     ffffffff802107f4 <_RME_Pgt_Crt+0x34d>
ffffffff802107e8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802107ef:	e9 83 03 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff802107f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802107f8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802107fc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210800:	0f 95 c0             	setne  %al
ffffffff80210803:	0f b6 c0             	movzbl %al,%eax
ffffffff80210806:	48 85 c0             	test   %rax,%rax
ffffffff80210809:	74 0c                	je     ffffffff80210817 <_RME_Pgt_Crt+0x370>
ffffffff8021080b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210812:	e9 60 03 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff80210817:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021081b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210820:	48 89 c2             	mov    %rax,%rdx
ffffffff80210823:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210827:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021082b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021082e:	0f 93 c0             	setae  %al
ffffffff80210831:	0f b6 c0             	movzbl %al,%eax
ffffffff80210834:	48 85 c0             	test   %rax,%rax
ffffffff80210837:	74 0c                	je     ffffffff80210845 <_RME_Pgt_Crt+0x39e>
ffffffff80210839:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210840:	e9 32 03 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff80210845:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210849:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021084e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210852:	48 89 c2             	mov    %rax,%rdx
ffffffff80210855:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210859:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021085d:	48 01 d0             	add    %rdx,%rax
ffffffff80210860:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210864:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210868:	48 8b 00             	mov    (%rax),%rax
ffffffff8021086b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021086f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210873:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210877:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021087a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021087e:	0f 94 c0             	sete   %al
ffffffff80210881:	0f b6 c0             	movzbl %al,%eax
ffffffff80210884:	48 85 c0             	test   %rax,%rax
ffffffff80210887:	74 0c                	je     ffffffff80210895 <_RME_Pgt_Crt+0x3ee>
ffffffff80210889:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210890:	e9 e2 02 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff80210895:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210899:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021089d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802108a1:	0f 95 c0             	setne  %al
ffffffff802108a4:	0f b6 c0             	movzbl %al,%eax
ffffffff802108a7:	48 85 c0             	test   %rax,%rax
ffffffff802108aa:	74 0c                	je     ffffffff802108b8 <_RME_Pgt_Crt+0x411>
ffffffff802108ac:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802108b3:	e9 bf 02 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff802108b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802108bc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802108c0:	83 e0 01             	and    $0x1,%eax
ffffffff802108c3:	48 85 c0             	test   %rax,%rax
ffffffff802108c6:	0f 94 c0             	sete   %al
ffffffff802108c9:	0f b6 c0             	movzbl %al,%eax
ffffffff802108cc:	48 85 c0             	test   %rax,%rax
ffffffff802108cf:	74 0c                	je     ffffffff802108dd <_RME_Pgt_Crt+0x436>
ffffffff802108d1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802108d8:	e9 9a 02 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
    
    /* Are we creating the top-level? */
    if(Is_Top!=0U)
ffffffff802108dd:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff802108e2:	74 1b                	je     ffffffff802108ff <_RME_Pgt_Crt+0x458>
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff802108e4:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff802108e8:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802108ed:	89 c1                	mov    %eax,%ecx
ffffffff802108ef:	d3 e2                	shl    %cl,%edx
ffffffff802108f1:	89 d0                	mov    %edx,%eax
ffffffff802108f3:	48 98                	cltq
ffffffff802108f5:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff802108f9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802108fd:	eb 19                	jmp    ffffffff80210918 <_RME_Pgt_Crt+0x471>
    }
    else
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_NOM(Num_Order);
ffffffff802108ff:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff80210903:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80210908:	89 c1                	mov    %eax,%ecx
ffffffff8021090a:	d3 e2                	shl    %cl,%edx
ffffffff8021090c:	89 d0                	mov    %edx,%eax
ffffffff8021090e:	48 98                	cltq
ffffffff80210910:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80210914:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    }
    
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff80210918:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021091c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210920:	83 e0 02             	and    $0x2,%eax
ffffffff80210923:	48 85 c0             	test   %rax,%rax
ffffffff80210926:	0f 94 c0             	sete   %al
ffffffff80210929:	0f b6 c0             	movzbl %al,%eax
ffffffff8021092c:	48 85 c0             	test   %rax,%rax
ffffffff8021092f:	74 0c                	je     ffffffff8021093d <_RME_Pgt_Crt+0x496>
ffffffff80210931:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210938:	e9 3a 02 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff8021093d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210941:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80210945:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80210949:	48 01 d0             	add    %rdx,%rax
ffffffff8021094c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80210950:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210954:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff80210958:	0f 92 c0             	setb   %al
ffffffff8021095b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021095e:	48 85 c0             	test   %rax,%rax
ffffffff80210961:	74 0c                	je     ffffffff8021096f <_RME_Pgt_Crt+0x4c8>
ffffffff80210963:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021096a:	e9 08 02 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff8021096f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210973:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210977:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff8021097b:	0f 92 c0             	setb   %al
ffffffff8021097e:	0f b6 c0             	movzbl %al,%eax
ffffffff80210981:	48 85 c0             	test   %rax,%rax
ffffffff80210984:	74 0c                	je     ffffffff80210992 <_RME_Pgt_Crt+0x4eb>
ffffffff80210986:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021098d:	e9 e5 01 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff80210992:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80210996:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021099a:	48 01 d0             	add    %rdx,%rax
ffffffff8021099d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff802109a1:	0f 92 c0             	setb   %al
ffffffff802109a4:	0f b6 c0             	movzbl %al,%eax
ffffffff802109a7:	48 85 c0             	test   %rax,%rax
ffffffff802109aa:	74 0c                	je     ffffffff802109b8 <_RME_Pgt_Crt+0x511>
ffffffff802109ac:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802109b3:	e9 bf 01 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff802109b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802109bc:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff802109c0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff802109c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802109c8:	48 01 c8             	add    %rcx,%rax
ffffffff802109cb:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802109cf:	48 39 c2             	cmp    %rax,%rdx
ffffffff802109d2:	0f 92 c0             	setb   %al
ffffffff802109d5:	0f b6 c0             	movzbl %al,%eax
ffffffff802109d8:	48 85 c0             	test   %rax,%rax
ffffffff802109db:	74 0c                	je     ffffffff802109e9 <_RME_Pgt_Crt+0x542>
ffffffff802109dd:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802109e4:	e9 8e 01 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>

    /* Check if these parameters are feasible */
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)<0)
ffffffff802109e9:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff802109ed:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
ffffffff802109f1:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff802109f5:	48 8b 75 10          	mov    0x10(%rbp),%rsi
ffffffff802109f9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802109fd:	49 89 f8             	mov    %rdi,%r8
ffffffff80210a00:	48 89 c7             	mov    %rax,%rdi
ffffffff80210a03:	e8 05 5c 01 00       	call   ffffffff8022660d <__RME_Pgt_Check>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check if the start address is properly aligned to the total order of the page table */
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff80210a08:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80210a0c:	89 c2                	mov    %eax,%edx
ffffffff80210a0e:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff80210a12:	01 c2                	add    %eax,%edx
ffffffff80210a14:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff80210a19:	29 d0                	sub    %edx,%eax
ffffffff80210a1b:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80210a22:	89 c1                	mov    %eax,%ecx
ffffffff80210a24:	48 d3 ea             	shr    %cl,%rdx
ffffffff80210a27:	48 89 d0             	mov    %rdx,%rax
ffffffff80210a2a:	48 23 45 a0          	and    -0x60(%rbp),%rax
ffffffff80210a2e:	48 85 c0             	test   %rax,%rax
ffffffff80210a31:	74 0c                	je     ffffffff80210a3f <_RME_Pgt_Crt+0x598>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_HW;
ffffffff80210a33:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff80210a3a:	e9 38 01 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff80210a3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210a43:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210a47:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80210a4b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210a4e:	0f 93 c0             	setae  %al
ffffffff80210a51:	0f b6 c0             	movzbl %al,%eax
ffffffff80210a54:	48 85 c0             	test   %rax,%rax
ffffffff80210a57:	74 0c                	je     ffffffff80210a65 <_RME_Pgt_Crt+0x5be>
ffffffff80210a59:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210a60:	e9 12 01 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff80210a65:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210a69:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210a6d:	48 89 c2             	mov    %rax,%rdx
ffffffff80210a70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210a74:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210a78:	48 01 d0             	add    %rdx,%rax
ffffffff80210a7b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff80210a7f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210a83:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80210a8a:	00 00 00 
ffffffff80210a8d:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80210a92:	48 89 c7             	mov    %rax,%rdi
ffffffff80210a95:	e8 c4 bc ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210a9a:	48 85 c0             	test   %rax,%rax
ffffffff80210a9d:	0f 94 c0             	sete   %al
ffffffff80210aa0:	0f b6 c0             	movzbl %al,%eax
ffffffff80210aa3:	48 85 c0             	test   %rax,%rax
ffffffff80210aa6:	74 0c                	je     ffffffff80210ab4 <_RME_Pgt_Crt+0x60d>
ffffffff80210aa8:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80210aaf:	e9 c3 00 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
ffffffff80210ab4:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80210ab9:	e8 53 bd ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80210abe:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80210ac2:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
ffffffff80210ac6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80210aca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210ace:	48 89 d6             	mov    %rdx,%rsi
ffffffff80210ad1:	48 89 c7             	mov    %rax,%rdi
ffffffff80210ad4:	e8 cb 17 00 00       	call   ffffffff802122a4 <_RME_Kot_Mark>
ffffffff80210ad9:	48 85 c0             	test   %rax,%rax
ffffffff80210adc:	74 17                	je     ffffffff80210af5 <_RME_Pgt_Crt+0x64e>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff80210ade:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210ae2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80210ae9:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80210af0:	e9 82 00 00 00       	jmp    ffffffff80210b77 <_RME_Pgt_Crt+0x6d0>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Header init */
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff80210af5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210af9:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80210b00:	00 
    Pgt_Crt->Head.Object=Vaddr;
ffffffff80210b01:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b05:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80210b09:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ALL;
ffffffff80210b0d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b11:	48 be ff 00 00 00 f0 	movabs $0xfffffff0000000ff,%rsi
ffffffff80210b18:	ff ff ff 
ffffffff80210b1b:	48 89 70 10          	mov    %rsi,0x10(%rax)
    
    /* Info init */
    Pgt_Crt->Base=Base|Is_Top;
ffffffff80210b1f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80210b23:	48 0b 45 10          	or     0x10(%rbp),%rax
ffffffff80210b27:	48 89 c2             	mov    %rax,%rdx
ffffffff80210b2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b2e:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff80210b32:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80210b36:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff80210b3a:	48 0b 45 20          	or     0x20(%rbp),%rax
ffffffff80210b3e:	48 89 c2             	mov    %rax,%rdx
ffffffff80210b41:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b45:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Pgt_Crt->ASID=0U;
ffffffff80210b49:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b4d:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80210b54:	00 
    
    /* Object init - need to add all kernel pages if they are top-level */
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff80210b55:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b59:	48 89 c7             	mov    %rax,%rdi
ffffffff80210b5c:	e8 3a 5b 01 00       	call   ffffffff8022669b <__RME_Pgt_Init>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Creation complete */
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff80210b61:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b65:	48 bf 00 00 00 00 00 	movabs $0x4000000000000,%rdi
ffffffff80210b6c:	00 04 00 
ffffffff80210b6f:	48 89 38             	mov    %rdi,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PGT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80210b72:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210b77:	c9                   	leave
ffffffff80210b78:	c3                   	ret

ffffffff80210b79 <_RME_Pgt_Del>:
******************************************************************************/
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Pgt)
{
ffffffff80210b79:	55                   	push   %rbp
ffffffff80210b7a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210b7d:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80210b81:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80210b85:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80210b89:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    /* These are used for deletion */
    rme_ptr_t Object;
    rme_ptr_t Table_Size;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210b8d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210b91:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210b96:	48 85 c0             	test   %rax,%rax
ffffffff80210b99:	0f 85 98 00 00 00    	jne    ffffffff80210c37 <_RME_Pgt_Del+0xbe>
ffffffff80210b9f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210ba3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210ba7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80210bab:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210bae:	0f 93 c0             	setae  %al
ffffffff80210bb1:	0f b6 c0             	movzbl %al,%eax
ffffffff80210bb4:	48 85 c0             	test   %rax,%rax
ffffffff80210bb7:	74 0c                	je     ffffffff80210bc5 <_RME_Pgt_Del+0x4c>
ffffffff80210bb9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210bc0:	e9 a5 03 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
ffffffff80210bc5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210bc9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210bcd:	48 89 c2             	mov    %rax,%rdx
ffffffff80210bd0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210bd4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210bd8:	48 01 d0             	add    %rdx,%rax
ffffffff80210bdb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210bdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210be3:	48 8b 00             	mov    (%rax),%rax
ffffffff80210be6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210bea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210bee:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210bf2:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210bf5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210bf9:	0f 94 c0             	sete   %al
ffffffff80210bfc:	0f b6 c0             	movzbl %al,%eax
ffffffff80210bff:	48 85 c0             	test   %rax,%rax
ffffffff80210c02:	74 0c                	je     ffffffff80210c10 <_RME_Pgt_Del+0x97>
ffffffff80210c04:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210c0b:	e9 5a 03 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
ffffffff80210c10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210c14:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210c18:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210c1c:	0f 95 c0             	setne  %al
ffffffff80210c1f:	0f b6 c0             	movzbl %al,%eax
ffffffff80210c22:	48 85 c0             	test   %rax,%rax
ffffffff80210c25:	0f 84 4c 01 00 00    	je     ffffffff80210d77 <_RME_Pgt_Del+0x1fe>
ffffffff80210c2b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210c32:	e9 33 03 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
ffffffff80210c37:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210c3b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210c3f:	48 89 c2             	mov    %rax,%rdx
ffffffff80210c42:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210c46:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210c4a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210c4d:	0f 93 c0             	setae  %al
ffffffff80210c50:	0f b6 c0             	movzbl %al,%eax
ffffffff80210c53:	48 85 c0             	test   %rax,%rax
ffffffff80210c56:	74 0c                	je     ffffffff80210c64 <_RME_Pgt_Del+0xeb>
ffffffff80210c58:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210c5f:	e9 06 03 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
ffffffff80210c64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210c68:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210c6c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210c70:	48 89 c2             	mov    %rax,%rdx
ffffffff80210c73:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210c77:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210c7b:	48 01 d0             	add    %rdx,%rax
ffffffff80210c7e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210c82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210c86:	48 8b 00             	mov    (%rax),%rax
ffffffff80210c89:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210c8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210c91:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210c95:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210c98:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210c9c:	0f 94 c0             	sete   %al
ffffffff80210c9f:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ca2:	48 85 c0             	test   %rax,%rax
ffffffff80210ca5:	74 0c                	je     ffffffff80210cb3 <_RME_Pgt_Del+0x13a>
ffffffff80210ca7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210cae:	e9 b7 02 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
ffffffff80210cb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210cb7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210cbb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210cbf:	0f 95 c0             	setne  %al
ffffffff80210cc2:	0f b6 c0             	movzbl %al,%eax
ffffffff80210cc5:	48 85 c0             	test   %rax,%rax
ffffffff80210cc8:	74 0c                	je     ffffffff80210cd6 <_RME_Pgt_Del+0x15d>
ffffffff80210cca:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210cd1:	e9 94 02 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
ffffffff80210cd6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210cda:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210cdf:	48 89 c2             	mov    %rax,%rdx
ffffffff80210ce2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210ce6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210cea:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210ced:	0f 93 c0             	setae  %al
ffffffff80210cf0:	0f b6 c0             	movzbl %al,%eax
ffffffff80210cf3:	48 85 c0             	test   %rax,%rax
ffffffff80210cf6:	74 0c                	je     ffffffff80210d04 <_RME_Pgt_Del+0x18b>
ffffffff80210cf8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210cff:	e9 66 02 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
ffffffff80210d04:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210d08:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210d0d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210d11:	48 89 c2             	mov    %rax,%rdx
ffffffff80210d14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210d18:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210d1c:	48 01 d0             	add    %rdx,%rax
ffffffff80210d1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210d23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210d27:	48 8b 00             	mov    (%rax),%rax
ffffffff80210d2a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210d2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210d32:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210d36:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210d39:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210d3d:	0f 94 c0             	sete   %al
ffffffff80210d40:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d43:	48 85 c0             	test   %rax,%rax
ffffffff80210d46:	74 0c                	je     ffffffff80210d54 <_RME_Pgt_Del+0x1db>
ffffffff80210d48:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210d4f:	e9 16 02 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
ffffffff80210d54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210d58:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210d5c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210d60:	0f 95 c0             	setne  %al
ffffffff80210d63:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d66:	48 85 c0             	test   %rax,%rax
ffffffff80210d69:	74 0c                	je     ffffffff80210d77 <_RME_Pgt_Del+0x1fe>
ffffffff80210d6b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210d72:	e9 f3 01 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80210d77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210d7b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210d7f:	83 e0 02             	and    $0x2,%eax
ffffffff80210d82:	48 85 c0             	test   %rax,%rax
ffffffff80210d85:	0f 94 c0             	sete   %al
ffffffff80210d88:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d8b:	48 85 c0             	test   %rax,%rax
ffffffff80210d8e:	74 0c                	je     ffffffff80210d9c <_RME_Pgt_Del+0x223>
ffffffff80210d90:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210d97:	e9 ce 01 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80210d9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210da0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210da4:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80210da8:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210dab:	0f 93 c0             	setae  %al
ffffffff80210dae:	0f b6 c0             	movzbl %al,%eax
ffffffff80210db1:	48 85 c0             	test   %rax,%rax
ffffffff80210db4:	74 0c                	je     ffffffff80210dc2 <_RME_Pgt_Del+0x249>
ffffffff80210db6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210dbd:	e9 a8 01 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
ffffffff80210dc2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210dc6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210dca:	48 89 c2             	mov    %rax,%rdx
ffffffff80210dcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210dd1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210dd5:	48 01 d0             	add    %rdx,%rax
ffffffff80210dd8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80210ddc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210de0:	48 8b 00             	mov    (%rax),%rax
ffffffff80210de3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210de7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210deb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210def:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210df2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210df6:	0f 95 c0             	setne  %al
ffffffff80210df9:	0f b6 c0             	movzbl %al,%eax
ffffffff80210dfc:	48 85 c0             	test   %rax,%rax
ffffffff80210dff:	74 0c                	je     ffffffff80210e0d <_RME_Pgt_Del+0x294>
ffffffff80210e01:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210e08:	e9 5d 01 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
ffffffff80210e0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210e11:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210e15:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210e19:	0f 95 c0             	setne  %al
ffffffff80210e1c:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e1f:	48 85 c0             	test   %rax,%rax
ffffffff80210e22:	74 0c                	je     ffffffff80210e30 <_RME_Pgt_Del+0x2b7>
ffffffff80210e24:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210e2b:	e9 3a 01 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
ffffffff80210e30:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80210e35:	e8 d7 b9 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80210e3a:	48 89 c2             	mov    %rax,%rdx
ffffffff80210e3d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210e41:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80210e45:	48 29 c2             	sub    %rax,%rdx
ffffffff80210e48:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80210e4c:	0f 96 c0             	setbe  %al
ffffffff80210e4f:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e52:	48 98                	cltq
ffffffff80210e54:	48 85 c0             	test   %rax,%rax
ffffffff80210e57:	74 0c                	je     ffffffff80210e65 <_RME_Pgt_Del+0x2ec>
ffffffff80210e59:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80210e60:	e9 05 01 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
ffffffff80210e65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210e69:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80210e6d:	48 85 c0             	test   %rax,%rax
ffffffff80210e70:	0f 95 c0             	setne  %al
ffffffff80210e73:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e76:	48 85 c0             	test   %rax,%rax
ffffffff80210e79:	74 44                	je     ffffffff80210ebf <_RME_Pgt_Del+0x346>
ffffffff80210e7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210e7f:	89 c0                	mov    %eax,%eax
ffffffff80210e81:	48 85 c0             	test   %rax,%rax
ffffffff80210e84:	0f 94 c0             	sete   %al
ffffffff80210e87:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e8a:	48 85 c0             	test   %rax,%rax
ffffffff80210e8d:	74 24                	je     ffffffff80210eb3 <_RME_Pgt_Del+0x33a>
ffffffff80210e8f:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80210e96:	00 ff ff 
ffffffff80210e99:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80210e9d:	48 89 c2             	mov    %rax,%rdx
ffffffff80210ea0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210ea4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80210ea8:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210eab:	48 89 c7             	mov    %rax,%rdi
ffffffff80210eae:	e8 ab b8 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210eb3:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80210eba:	e9 ab 00 00 00       	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>
    /* Hardware related deletion check passed down to the HAL. The driver should make
     * sure that it does not reference any lower level tables. If the driver layer does
     * not conform to this, the deletion of page table is not guaranteed to main kernel
     * consistency, and such consistency must be maintained by the user-level. It is 
     * recommended that the driver layer enforce such consistency. */
    if(__RME_Pgt_Del_Check(Pgt_Del)<0)
ffffffff80210ebf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210ec3:	48 89 c7             	mov    %rax,%rdi
ffffffff80210ec6:	e8 9e 58 01 00       	call   ffffffff80226769 <__RME_Pgt_Del_Check>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Pgt_Del,rme_ptr_t);
ffffffff80210ecb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210ecf:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210ed3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(((Pgt_Del->Base)&RME_PGT_TOP)!=0U)
ffffffff80210ed7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210edb:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80210edf:	83 e0 01             	and    $0x1,%eax
ffffffff80210ee2:	48 85 c0             	test   %rax,%rax
ffffffff80210ee5:	74 1f                	je     ffffffff80210f06 <_RME_Pgt_Del+0x38d>
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_TOP(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80210ee7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210eeb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210eef:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80210ef4:	89 c1                	mov    %eax,%ecx
ffffffff80210ef6:	d3 e2                	shl    %cl,%edx
ffffffff80210ef8:	89 d0                	mov    %edx,%eax
ffffffff80210efa:	48 98                	cltq
ffffffff80210efc:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80210f00:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210f04:	eb 1d                	jmp    ffffffff80210f23 <_RME_Pgt_Del+0x3aa>
    }
    else
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_NOM(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80210f06:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f0a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210f0e:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80210f13:	89 c1                	mov    %eax,%ecx
ffffffff80210f15:	d3 e2                	shl    %cl,%edx
ffffffff80210f17:	89 d0                	mov    %edx,%eax
ffffffff80210f19:	48 98                	cltq
ffffffff80210f1b:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80210f1f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Pgt_Del,Type_Stat);
ffffffff80210f23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f27:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80210f2b:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80210f30:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210f33:	48 89 c7             	mov    %rax,%rdi
ffffffff80210f36:	e8 23 b8 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210f3b:	48 85 c0             	test   %rax,%rax
ffffffff80210f3e:	0f 94 c0             	sete   %al
ffffffff80210f41:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f44:	48 85 c0             	test   %rax,%rax
ffffffff80210f47:	74 09                	je     ffffffff80210f52 <_RME_Pgt_Del+0x3d9>
ffffffff80210f49:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80210f50:	eb 18                	jmp    ffffffff80210f6a <_RME_Pgt_Del+0x3f1>

    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kot_Erase(Object,Table_Size)==0);
ffffffff80210f52:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80210f56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210f5a:	48 89 d6             	mov    %rdx,%rsi
ffffffff80210f5d:	48 89 c7             	mov    %rax,%rdi
ffffffff80210f60:	e8 82 16 00 00       	call   ffffffff802125e7 <_RME_Kot_Erase>

    return 0;
ffffffff80210f65:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210f6a:	c9                   	leave
ffffffff80210f6b:	c3                   	ret

ffffffff80210f6c <_RME_Pgt_Add>:
                              rme_ptr_t Pos_Dst,
                              rme_ptr_t Flag_Dst,
                              rme_cid_t Cap_Pgt_Src,
                              rme_ptr_t Pos_Src,
                              rme_ptr_t Index)
{
ffffffff80210f6c:	55                   	push   %rbp
ffffffff80210f6d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210f70:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff80210f74:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff80210f78:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff80210f7c:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff80210f80:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff80210f84:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
ffffffff80210f88:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Szord_Src;
    rme_ptr_t Szord_Dst;

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff80210f8c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210f90:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210f95:	48 85 c0             	test   %rax,%rax
ffffffff80210f98:	0f 85 98 00 00 00    	jne    ffffffff80211036 <_RME_Pgt_Add+0xca>
ffffffff80210f9e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210fa2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210fa6:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80210faa:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210fad:	0f 93 c0             	setae  %al
ffffffff80210fb0:	0f b6 c0             	movzbl %al,%eax
ffffffff80210fb3:	48 85 c0             	test   %rax,%rax
ffffffff80210fb6:	74 0c                	je     ffffffff80210fc4 <_RME_Pgt_Add+0x58>
ffffffff80210fb8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210fbf:	e9 65 05 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff80210fc4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210fc8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210fcc:	48 89 c2             	mov    %rax,%rdx
ffffffff80210fcf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210fd3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210fd7:	48 01 d0             	add    %rdx,%rax
ffffffff80210fda:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210fde:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210fe2:	48 8b 00             	mov    (%rax),%rax
ffffffff80210fe5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80210fe9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210fed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210ff1:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210ff4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210ff8:	0f 94 c0             	sete   %al
ffffffff80210ffb:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ffe:	48 85 c0             	test   %rax,%rax
ffffffff80211001:	74 0c                	je     ffffffff8021100f <_RME_Pgt_Add+0xa3>
ffffffff80211003:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021100a:	e9 1a 05 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff8021100f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211013:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211017:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021101b:	0f 95 c0             	setne  %al
ffffffff8021101e:	0f b6 c0             	movzbl %al,%eax
ffffffff80211021:	48 85 c0             	test   %rax,%rax
ffffffff80211024:	0f 84 4c 01 00 00    	je     ffffffff80211176 <_RME_Pgt_Add+0x20a>
ffffffff8021102a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211031:	e9 f3 04 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff80211036:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021103a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021103e:	48 89 c2             	mov    %rax,%rdx
ffffffff80211041:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211045:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211049:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021104c:	0f 93 c0             	setae  %al
ffffffff8021104f:	0f b6 c0             	movzbl %al,%eax
ffffffff80211052:	48 85 c0             	test   %rax,%rax
ffffffff80211055:	74 0c                	je     ffffffff80211063 <_RME_Pgt_Add+0xf7>
ffffffff80211057:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021105e:	e9 c6 04 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff80211063:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211067:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021106b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021106f:	48 89 c2             	mov    %rax,%rdx
ffffffff80211072:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211076:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021107a:	48 01 d0             	add    %rdx,%rax
ffffffff8021107d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211081:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211085:	48 8b 00             	mov    (%rax),%rax
ffffffff80211088:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021108c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211090:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211094:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211097:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021109b:	0f 94 c0             	sete   %al
ffffffff8021109e:	0f b6 c0             	movzbl %al,%eax
ffffffff802110a1:	48 85 c0             	test   %rax,%rax
ffffffff802110a4:	74 0c                	je     ffffffff802110b2 <_RME_Pgt_Add+0x146>
ffffffff802110a6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802110ad:	e9 77 04 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff802110b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802110b6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802110ba:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802110be:	0f 95 c0             	setne  %al
ffffffff802110c1:	0f b6 c0             	movzbl %al,%eax
ffffffff802110c4:	48 85 c0             	test   %rax,%rax
ffffffff802110c7:	74 0c                	je     ffffffff802110d5 <_RME_Pgt_Add+0x169>
ffffffff802110c9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802110d0:	e9 54 04 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff802110d5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802110d9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802110de:	48 89 c2             	mov    %rax,%rdx
ffffffff802110e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802110e5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802110e9:	48 39 c2             	cmp    %rax,%rdx
ffffffff802110ec:	0f 93 c0             	setae  %al
ffffffff802110ef:	0f b6 c0             	movzbl %al,%eax
ffffffff802110f2:	48 85 c0             	test   %rax,%rax
ffffffff802110f5:	74 0c                	je     ffffffff80211103 <_RME_Pgt_Add+0x197>
ffffffff802110f7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802110fe:	e9 26 04 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff80211103:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211107:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021110c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211110:	48 89 c2             	mov    %rax,%rdx
ffffffff80211113:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211117:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021111b:	48 01 d0             	add    %rdx,%rax
ffffffff8021111e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211122:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211126:	48 8b 00             	mov    (%rax),%rax
ffffffff80211129:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021112d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211131:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211135:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211138:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021113c:	0f 94 c0             	sete   %al
ffffffff8021113f:	0f b6 c0             	movzbl %al,%eax
ffffffff80211142:	48 85 c0             	test   %rax,%rax
ffffffff80211145:	74 0c                	je     ffffffff80211153 <_RME_Pgt_Add+0x1e7>
ffffffff80211147:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021114e:	e9 d6 03 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff80211153:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211157:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021115b:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021115f:	0f 95 c0             	setne  %al
ffffffff80211162:	0f b6 c0             	movzbl %al,%eax
ffffffff80211165:	48 85 c0             	test   %rax,%rax
ffffffff80211168:	74 0c                	je     ffffffff80211176 <_RME_Pgt_Add+0x20a>
ffffffff8021116a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211171:	e9 b3 03 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
                   struct RME_Cap_Pgt*,Pgt_Dst,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff80211176:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021117a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021117f:	48 85 c0             	test   %rax,%rax
ffffffff80211182:	0f 85 98 00 00 00    	jne    ffffffff80211220 <_RME_Pgt_Add+0x2b4>
ffffffff80211188:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021118c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211190:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80211194:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211197:	0f 93 c0             	setae  %al
ffffffff8021119a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021119d:	48 85 c0             	test   %rax,%rax
ffffffff802111a0:	74 0c                	je     ffffffff802111ae <_RME_Pgt_Add+0x242>
ffffffff802111a2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802111a9:	e9 7b 03 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff802111ae:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802111b2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802111b6:	48 89 c2             	mov    %rax,%rdx
ffffffff802111b9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802111bd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802111c1:	48 01 d0             	add    %rdx,%rax
ffffffff802111c4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802111c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802111cc:	48 8b 00             	mov    (%rax),%rax
ffffffff802111cf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802111d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802111d7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802111db:	0f b7 c0             	movzwl %ax,%eax
ffffffff802111de:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802111e2:	0f 94 c0             	sete   %al
ffffffff802111e5:	0f b6 c0             	movzbl %al,%eax
ffffffff802111e8:	48 85 c0             	test   %rax,%rax
ffffffff802111eb:	74 0c                	je     ffffffff802111f9 <_RME_Pgt_Add+0x28d>
ffffffff802111ed:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802111f4:	e9 30 03 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff802111f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802111fd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211201:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211205:	0f 95 c0             	setne  %al
ffffffff80211208:	0f b6 c0             	movzbl %al,%eax
ffffffff8021120b:	48 85 c0             	test   %rax,%rax
ffffffff8021120e:	0f 84 4c 01 00 00    	je     ffffffff80211360 <_RME_Pgt_Add+0x3f4>
ffffffff80211214:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021121b:	e9 09 03 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff80211220:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80211224:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211228:	48 89 c2             	mov    %rax,%rdx
ffffffff8021122b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021122f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211233:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211236:	0f 93 c0             	setae  %al
ffffffff80211239:	0f b6 c0             	movzbl %al,%eax
ffffffff8021123c:	48 85 c0             	test   %rax,%rax
ffffffff8021123f:	74 0c                	je     ffffffff8021124d <_RME_Pgt_Add+0x2e1>
ffffffff80211241:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211248:	e9 dc 02 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff8021124d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80211251:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211255:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211259:	48 89 c2             	mov    %rax,%rdx
ffffffff8021125c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211260:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211264:	48 01 d0             	add    %rdx,%rax
ffffffff80211267:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021126b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021126f:	48 8b 00             	mov    (%rax),%rax
ffffffff80211272:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80211276:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021127a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021127e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211281:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211285:	0f 94 c0             	sete   %al
ffffffff80211288:	0f b6 c0             	movzbl %al,%eax
ffffffff8021128b:	48 85 c0             	test   %rax,%rax
ffffffff8021128e:	74 0c                	je     ffffffff8021129c <_RME_Pgt_Add+0x330>
ffffffff80211290:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211297:	e9 8d 02 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff8021129c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802112a0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802112a4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802112a8:	0f 95 c0             	setne  %al
ffffffff802112ab:	0f b6 c0             	movzbl %al,%eax
ffffffff802112ae:	48 85 c0             	test   %rax,%rax
ffffffff802112b1:	74 0c                	je     ffffffff802112bf <_RME_Pgt_Add+0x353>
ffffffff802112b3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802112ba:	e9 6a 02 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff802112bf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802112c3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802112c8:	48 89 c2             	mov    %rax,%rdx
ffffffff802112cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802112cf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802112d3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802112d6:	0f 93 c0             	setae  %al
ffffffff802112d9:	0f b6 c0             	movzbl %al,%eax
ffffffff802112dc:	48 85 c0             	test   %rax,%rax
ffffffff802112df:	74 0c                	je     ffffffff802112ed <_RME_Pgt_Add+0x381>
ffffffff802112e1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802112e8:	e9 3c 02 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff802112ed:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802112f1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802112f6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802112fa:	48 89 c2             	mov    %rax,%rdx
ffffffff802112fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211301:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211305:	48 01 d0             	add    %rdx,%rax
ffffffff80211308:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021130c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211310:	48 8b 00             	mov    (%rax),%rax
ffffffff80211313:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80211317:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021131b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021131f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211322:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211326:	0f 94 c0             	sete   %al
ffffffff80211329:	0f b6 c0             	movzbl %al,%eax
ffffffff8021132c:	48 85 c0             	test   %rax,%rax
ffffffff8021132f:	74 0c                	je     ffffffff8021133d <_RME_Pgt_Add+0x3d1>
ffffffff80211331:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211338:	e9 ec 01 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
ffffffff8021133d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211341:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211345:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211349:	0f 95 c0             	setne  %al
ffffffff8021134c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021134f:	48 85 c0             	test   %rax,%rax
ffffffff80211352:	74 0c                	je     ffffffff80211360 <_RME_Pgt_Add+0x3f4>
ffffffff80211354:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021135b:	e9 c9 01 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
                   struct RME_Cap_Pgt*,Pgt_Src,Type_Stat);
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff80211360:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211364:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211368:	83 e0 02             	and    $0x2,%eax
ffffffff8021136b:	48 85 c0             	test   %rax,%rax
ffffffff8021136e:	0f 94 c0             	sete   %al
ffffffff80211371:	0f b6 c0             	movzbl %al,%eax
ffffffff80211374:	48 85 c0             	test   %rax,%rax
ffffffff80211377:	74 0c                	je     ffffffff80211385 <_RME_Pgt_Add+0x419>
ffffffff80211379:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211380:	e9 a4 01 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
    RME_CAP_CHECK(Pgt_Src,RME_PGT_FLAG_ADD_SRC);
ffffffff80211385:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211389:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021138d:	83 e0 01             	and    $0x1,%eax
ffffffff80211390:	48 85 c0             	test   %rax,%rax
ffffffff80211393:	0f 94 c0             	sete   %al
ffffffff80211396:	0f b6 c0             	movzbl %al,%eax
ffffffff80211399:	48 85 c0             	test   %rax,%rax
ffffffff8021139c:	74 0c                	je     ffffffff802113aa <_RME_Pgt_Add+0x43e>
ffffffff8021139e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802113a5:	e9 7f 01 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
    /* Check the operation range - This is page table specific */
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff802113aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802113ae:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802113b2:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff802113b6:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff802113ba:	72 40                	jb     ffffffff802113fc <_RME_Pgt_Add+0x490>
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff802113bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802113c0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802113c4:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802113c8:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff802113cd:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff802113d1:	72 29                	jb     ffffffff802113fc <_RME_Pgt_Add+0x490>
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff802113d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802113d7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802113db:	48 c1 e8 24          	shr    $0x24,%rax
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff802113df:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
ffffffff802113e3:	72 17                	jb     ffffffff802113fc <_RME_Pgt_Add+0x490>
       (Pos_Src<RME_PGT_FLAG_LOW(Pgt_Src->Head.Flag)))
ffffffff802113e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802113e9:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802113ed:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802113f1:	25 ff ff ff 0f       	and    $0xfffffff,%eax
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff802113f6:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
ffffffff802113fa:	73 0c                	jae    ffffffff80211408 <_RME_Pgt_Add+0x49c>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff802113fc:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211403:	e9 21 01 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the size order relationship is correct */
    Szord_Dst=RME_PGT_SIZEORD(Pgt_Dst->Order);
ffffffff80211408:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021140c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211410:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211414:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Szord_Src=RME_PGT_SIZEORD(Pgt_Src->Order);
ffffffff80211418:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021141c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211420:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211424:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Szord_Dst>Szord_Src)
ffffffff80211428:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021142c:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff80211430:	73 0c                	jae    ffffffff8021143e <_RME_Pgt_Add+0x4d2>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211432:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211439:	e9 eb 00 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the positions are out of range - NMORD is restricted, no UB */
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff8021143e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211442:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211446:	89 c2                	mov    %eax,%edx
ffffffff80211448:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021144c:	89 d1                	mov    %edx,%ecx
ffffffff8021144e:	48 d3 e8             	shr    %cl,%rax
ffffffff80211451:	48 85 c0             	test   %rax,%rax
ffffffff80211454:	75 18                	jne    ffffffff8021146e <_RME_Pgt_Add+0x502>
       ((Pos_Src>>RME_PGT_NUMORD(Pgt_Src->Order))!=0U))
ffffffff80211456:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021145a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021145e:	89 c2                	mov    %eax,%edx
ffffffff80211460:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80211464:	89 d1                	mov    %edx,%ecx
ffffffff80211466:	48 d3 e8             	shr    %cl,%rax
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff80211469:	48 85 c0             	test   %rax,%rax
ffffffff8021146c:	74 0c                	je     ffffffff8021147a <_RME_Pgt_Add+0x50e>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff8021146e:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211475:	e9 af 00 00 00       	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the source subposition is out of range - avoid UB */
    if(Szord_Src<RME_WORD_BIT)
ffffffff8021147a:	48 83 7d d0 3f       	cmpq   $0x3f,-0x30(%rbp)
ffffffff8021147f:	77 2c                	ja     ffffffff802114ad <_RME_Pgt_Add+0x541>
    {
        RME_COV_MARKER();
        
        /* No UB because Szord_Dst<=Szord_Src */
        if(RME_POW2(Szord_Src)<=(Index<<Szord_Dst))
ffffffff80211481:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211485:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021148a:	89 c1                	mov    %eax,%ecx
ffffffff8021148c:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021148f:	48 89 d0             	mov    %rdx,%rax
ffffffff80211492:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80211496:	89 d1                	mov    %edx,%ecx
ffffffff80211498:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8021149c:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021149f:	48 39 c2             	cmp    %rax,%rdx
ffffffff802114a2:	72 09                	jb     ffffffff802114ad <_RME_Pgt_Add+0x541>
        {
            RME_COV_MARKER();

            return RME_ERR_PGT_ADDR;
ffffffff802114a4:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802114ab:	eb 7c                	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the physical address and RME standard flags of that source page */
    if(__RME_Pgt_Lookup(Pgt_Src,Pos_Src,&Paddr_Src,&Flag_Src)<0)
ffffffff802114ad:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
ffffffff802114b1:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
ffffffff802114b5:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
ffffffff802114b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802114bd:	48 89 c7             	mov    %rax,%rdi
ffffffff802114c0:	e8 73 56 01 00       	call   ffffffff80226b38 <__RME_Pgt_Lookup>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Calculate the destination physical address - avoid UB */
    if(Szord_Dst<RME_WORD_BIT)
ffffffff802114c5:	48 83 7d d8 3f       	cmpq   $0x3f,-0x28(%rbp)
ffffffff802114ca:	77 1f                	ja     ffffffff802114eb <_RME_Pgt_Add+0x57f>
    {
        RME_COV_MARKER();
        
        Paddr_Dst=Paddr_Src+(Index<<Szord_Dst);
ffffffff802114cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802114d0:	89 c2                	mov    %eax,%edx
ffffffff802114d2:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802114d6:	89 d1                	mov    %edx,%ecx
ffffffff802114d8:	48 d3 e0             	shl    %cl,%rax
ffffffff802114db:	48 89 c2             	mov    %rax,%rdx
ffffffff802114de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802114e2:	48 01 d0             	add    %rdx,%rax
ffffffff802114e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802114e9:	eb 08                	jmp    ffffffff802114f3 <_RME_Pgt_Add+0x587>
    /* The destination is also full range */
    else
    {
        RME_COV_MARKER();
        
        Paddr_Dst=Paddr_Src;
ffffffff802114eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802114ef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        }
#endif
    }
    
    /* Analyze the flags - we do not allow expansion of access permissions */
    if(((Flag_Dst)&(~Flag_Src))!=0U)
ffffffff802114f3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802114f7:	48 f7 d0             	not    %rax
ffffffff802114fa:	48 23 45 a0          	and    -0x60(%rbp),%rax
ffffffff802114fe:	48 85 c0             	test   %rax,%rax
ffffffff80211501:	74 09                	je     ffffffff8021150c <_RME_Pgt_Add+0x5a0>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_PERM;
ffffffff80211503:	48 c7 c0 98 ff ff ff 	mov    $0xffffffffffffff98,%rax
ffffffff8021150a:	eb 1d                	jmp    ffffffff80211529 <_RME_Pgt_Add+0x5bd>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Map(Pgt_Dst,Paddr_Dst,Pos_Dst,Flag_Dst)<0)
ffffffff8021150c:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
ffffffff80211510:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80211514:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff80211518:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021151c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021151f:	e8 58 52 01 00       	call   ffffffff8022677c <__RME_Pgt_Page_Map>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff80211524:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80211529:	c9                   	leave
ffffffff8021152a:	c3                   	ret

ffffffff8021152b <_RME_Pgt_Rem>:
******************************************************************************/
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Rem(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Pgt,
                              rme_ptr_t Pos)
{
ffffffff8021152b:	55                   	push   %rbp
ffffffff8021152c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021152f:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80211533:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80211537:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021153b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    struct RME_Cap_Pgt* Pgt_Rem;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff8021153f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211543:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211548:	48 85 c0             	test   %rax,%rax
ffffffff8021154b:	0f 85 98 00 00 00    	jne    ffffffff802115e9 <_RME_Pgt_Rem+0xbe>
ffffffff80211551:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211555:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211559:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021155d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211560:	0f 93 c0             	setae  %al
ffffffff80211563:	0f b6 c0             	movzbl %al,%eax
ffffffff80211566:	48 85 c0             	test   %rax,%rax
ffffffff80211569:	74 0c                	je     ffffffff80211577 <_RME_Pgt_Rem+0x4c>
ffffffff8021156b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211572:	e9 3f 02 00 00       	jmp    ffffffff802117b6 <_RME_Pgt_Rem+0x28b>
ffffffff80211577:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021157b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021157f:	48 89 c2             	mov    %rax,%rdx
ffffffff80211582:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211586:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021158a:	48 01 d0             	add    %rdx,%rax
ffffffff8021158d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211591:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211595:	48 8b 00             	mov    (%rax),%rax
ffffffff80211598:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021159c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802115a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802115a4:	0f b7 c0             	movzwl %ax,%eax
ffffffff802115a7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802115ab:	0f 94 c0             	sete   %al
ffffffff802115ae:	0f b6 c0             	movzbl %al,%eax
ffffffff802115b1:	48 85 c0             	test   %rax,%rax
ffffffff802115b4:	74 0c                	je     ffffffff802115c2 <_RME_Pgt_Rem+0x97>
ffffffff802115b6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802115bd:	e9 f4 01 00 00       	jmp    ffffffff802117b6 <_RME_Pgt_Rem+0x28b>
ffffffff802115c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802115c6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802115ca:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802115ce:	0f 95 c0             	setne  %al
ffffffff802115d1:	0f b6 c0             	movzbl %al,%eax
ffffffff802115d4:	48 85 c0             	test   %rax,%rax
ffffffff802115d7:	0f 84 4c 01 00 00    	je     ffffffff80211729 <_RME_Pgt_Rem+0x1fe>
ffffffff802115dd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802115e4:	e9 cd 01 00 00       	jmp    ffffffff802117b6 <_RME_Pgt_Rem+0x28b>
ffffffff802115e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802115ed:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802115f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802115f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802115f8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802115fc:	48 39 c2             	cmp    %rax,%rdx
ffffffff802115ff:	0f 93 c0             	setae  %al
ffffffff80211602:	0f b6 c0             	movzbl %al,%eax
ffffffff80211605:	48 85 c0             	test   %rax,%rax
ffffffff80211608:	74 0c                	je     ffffffff80211616 <_RME_Pgt_Rem+0xeb>
ffffffff8021160a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211611:	e9 a0 01 00 00       	jmp    ffffffff802117b6 <_RME_Pgt_Rem+0x28b>
ffffffff80211616:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021161a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021161e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211622:	48 89 c2             	mov    %rax,%rdx
ffffffff80211625:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211629:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021162d:	48 01 d0             	add    %rdx,%rax
ffffffff80211630:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211634:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211638:	48 8b 00             	mov    (%rax),%rax
ffffffff8021163b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021163f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211643:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211647:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021164a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021164e:	0f 94 c0             	sete   %al
ffffffff80211651:	0f b6 c0             	movzbl %al,%eax
ffffffff80211654:	48 85 c0             	test   %rax,%rax
ffffffff80211657:	74 0c                	je     ffffffff80211665 <_RME_Pgt_Rem+0x13a>
ffffffff80211659:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211660:	e9 51 01 00 00       	jmp    ffffffff802117b6 <_RME_Pgt_Rem+0x28b>
ffffffff80211665:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211669:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021166d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211671:	0f 95 c0             	setne  %al
ffffffff80211674:	0f b6 c0             	movzbl %al,%eax
ffffffff80211677:	48 85 c0             	test   %rax,%rax
ffffffff8021167a:	74 0c                	je     ffffffff80211688 <_RME_Pgt_Rem+0x15d>
ffffffff8021167c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211683:	e9 2e 01 00 00       	jmp    ffffffff802117b6 <_RME_Pgt_Rem+0x28b>
ffffffff80211688:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021168c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211691:	48 89 c2             	mov    %rax,%rdx
ffffffff80211694:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211698:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021169c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021169f:	0f 93 c0             	setae  %al
ffffffff802116a2:	0f b6 c0             	movzbl %al,%eax
ffffffff802116a5:	48 85 c0             	test   %rax,%rax
ffffffff802116a8:	74 0c                	je     ffffffff802116b6 <_RME_Pgt_Rem+0x18b>
ffffffff802116aa:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802116b1:	e9 00 01 00 00       	jmp    ffffffff802117b6 <_RME_Pgt_Rem+0x28b>
ffffffff802116b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802116ba:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802116bf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802116c3:	48 89 c2             	mov    %rax,%rdx
ffffffff802116c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802116ca:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802116ce:	48 01 d0             	add    %rdx,%rax
ffffffff802116d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802116d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802116d9:	48 8b 00             	mov    (%rax),%rax
ffffffff802116dc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802116e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802116e4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802116e8:	0f b7 c0             	movzwl %ax,%eax
ffffffff802116eb:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802116ef:	0f 94 c0             	sete   %al
ffffffff802116f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802116f5:	48 85 c0             	test   %rax,%rax
ffffffff802116f8:	74 0c                	je     ffffffff80211706 <_RME_Pgt_Rem+0x1db>
ffffffff802116fa:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211701:	e9 b0 00 00 00       	jmp    ffffffff802117b6 <_RME_Pgt_Rem+0x28b>
ffffffff80211706:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021170a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021170e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211712:	0f 95 c0             	setne  %al
ffffffff80211715:	0f b6 c0             	movzbl %al,%eax
ffffffff80211718:	48 85 c0             	test   %rax,%rax
ffffffff8021171b:	74 0c                	je     ffffffff80211729 <_RME_Pgt_Rem+0x1fe>
ffffffff8021171d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211724:	e9 8d 00 00 00       	jmp    ffffffff802117b6 <_RME_Pgt_Rem+0x28b>
                   struct RME_Cap_Pgt*,Pgt_Rem,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80211729:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021172d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211731:	83 e0 04             	and    $0x4,%eax
ffffffff80211734:	48 85 c0             	test   %rax,%rax
ffffffff80211737:	0f 94 c0             	sete   %al
ffffffff8021173a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021173d:	48 85 c0             	test   %rax,%rax
ffffffff80211740:	74 09                	je     ffffffff8021174b <_RME_Pgt_Rem+0x220>
ffffffff80211742:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211749:	eb 6b                	jmp    ffffffff802117b6 <_RME_Pgt_Rem+0x28b>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff8021174b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021174f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211753:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff80211757:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8021175b:	72 17                	jb     ffffffff80211774 <_RME_Pgt_Rem+0x249>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Rem->Head.Flag)))
ffffffff8021175d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211761:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211765:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211769:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff8021176e:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80211772:	73 09                	jae    ffffffff8021177d <_RME_Pgt_Rem+0x252>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80211774:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021177b:	eb 39                	jmp    ffffffff802117b6 <_RME_Pgt_Rem+0x28b>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Rem->Order))!=0U)
ffffffff8021177d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211781:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211785:	89 c2                	mov    %eax,%edx
ffffffff80211787:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021178b:	89 d1                	mov    %edx,%ecx
ffffffff8021178d:	48 d3 e8             	shr    %cl,%rax
ffffffff80211790:	48 85 c0             	test   %rax,%rax
ffffffff80211793:	74 09                	je     ffffffff8021179e <_RME_Pgt_Rem+0x273>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211795:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8021179c:	eb 18                	jmp    ffffffff802117b6 <_RME_Pgt_Rem+0x28b>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Unmap(Pgt_Rem,Pos)<0)
ffffffff8021179e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802117a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117a6:	48 89 d6             	mov    %rdx,%rsi
ffffffff802117a9:	48 89 c7             	mov    %rax,%rdi
ffffffff802117ac:	e8 d2 50 01 00       	call   ffffffff80226883 <__RME_Pgt_Page_Unmap>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff802117b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802117b6:	c9                   	leave
ffffffff802117b7:	c3                   	ret

ffffffff802117b8 <_RME_Pgt_Con>:
static rme_ret_t _RME_Pgt_Con(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Pgt_Parent,
                              rme_ptr_t Pos,
                              rme_cid_t Cap_Pgt_Child,
                              rme_ptr_t Flag_Child)
{
ffffffff802117b8:	55                   	push   %rbp
ffffffff802117b9:	48 89 e5             	mov    %rsp,%rbp
ffffffff802117bc:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff802117c0:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff802117c4:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff802117c8:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff802117cc:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff802117d0:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
    rme_ptr_t End_Parent;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff802117d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802117d8:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802117dd:	48 85 c0             	test   %rax,%rax
ffffffff802117e0:	0f 85 98 00 00 00    	jne    ffffffff8021187e <_RME_Pgt_Con+0xc6>
ffffffff802117e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802117ea:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802117ee:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff802117f2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802117f5:	0f 93 c0             	setae  %al
ffffffff802117f8:	0f b6 c0             	movzbl %al,%eax
ffffffff802117fb:	48 85 c0             	test   %rax,%rax
ffffffff802117fe:	74 0c                	je     ffffffff8021180c <_RME_Pgt_Con+0x54>
ffffffff80211800:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211807:	e9 1f 05 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff8021180c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211810:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211814:	48 89 c2             	mov    %rax,%rdx
ffffffff80211817:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021181b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021181f:	48 01 d0             	add    %rdx,%rax
ffffffff80211822:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211826:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021182a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021182d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211831:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211835:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211839:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021183c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211840:	0f 94 c0             	sete   %al
ffffffff80211843:	0f b6 c0             	movzbl %al,%eax
ffffffff80211846:	48 85 c0             	test   %rax,%rax
ffffffff80211849:	74 0c                	je     ffffffff80211857 <_RME_Pgt_Con+0x9f>
ffffffff8021184b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211852:	e9 d4 04 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff80211857:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021185b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021185f:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211863:	0f 95 c0             	setne  %al
ffffffff80211866:	0f b6 c0             	movzbl %al,%eax
ffffffff80211869:	48 85 c0             	test   %rax,%rax
ffffffff8021186c:	0f 84 4c 01 00 00    	je     ffffffff802119be <_RME_Pgt_Con+0x206>
ffffffff80211872:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211879:	e9 ad 04 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff8021187e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211882:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211886:	48 89 c2             	mov    %rax,%rdx
ffffffff80211889:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021188d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211891:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211894:	0f 93 c0             	setae  %al
ffffffff80211897:	0f b6 c0             	movzbl %al,%eax
ffffffff8021189a:	48 85 c0             	test   %rax,%rax
ffffffff8021189d:	74 0c                	je     ffffffff802118ab <_RME_Pgt_Con+0xf3>
ffffffff8021189f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802118a6:	e9 80 04 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff802118ab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802118af:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802118b3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802118b7:	48 89 c2             	mov    %rax,%rdx
ffffffff802118ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802118be:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802118c2:	48 01 d0             	add    %rdx,%rax
ffffffff802118c5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802118c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802118cd:	48 8b 00             	mov    (%rax),%rax
ffffffff802118d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802118d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802118d8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802118dc:	0f b7 c0             	movzwl %ax,%eax
ffffffff802118df:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802118e3:	0f 94 c0             	sete   %al
ffffffff802118e6:	0f b6 c0             	movzbl %al,%eax
ffffffff802118e9:	48 85 c0             	test   %rax,%rax
ffffffff802118ec:	74 0c                	je     ffffffff802118fa <_RME_Pgt_Con+0x142>
ffffffff802118ee:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802118f5:	e9 31 04 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff802118fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802118fe:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211902:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211906:	0f 95 c0             	setne  %al
ffffffff80211909:	0f b6 c0             	movzbl %al,%eax
ffffffff8021190c:	48 85 c0             	test   %rax,%rax
ffffffff8021190f:	74 0c                	je     ffffffff8021191d <_RME_Pgt_Con+0x165>
ffffffff80211911:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211918:	e9 0e 04 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff8021191d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211921:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211926:	48 89 c2             	mov    %rax,%rdx
ffffffff80211929:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021192d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211931:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211934:	0f 93 c0             	setae  %al
ffffffff80211937:	0f b6 c0             	movzbl %al,%eax
ffffffff8021193a:	48 85 c0             	test   %rax,%rax
ffffffff8021193d:	74 0c                	je     ffffffff8021194b <_RME_Pgt_Con+0x193>
ffffffff8021193f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211946:	e9 e0 03 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff8021194b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021194f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211954:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211958:	48 89 c2             	mov    %rax,%rdx
ffffffff8021195b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021195f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211963:	48 01 d0             	add    %rdx,%rax
ffffffff80211966:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021196a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021196e:	48 8b 00             	mov    (%rax),%rax
ffffffff80211971:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211975:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211979:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021197d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211980:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211984:	0f 94 c0             	sete   %al
ffffffff80211987:	0f b6 c0             	movzbl %al,%eax
ffffffff8021198a:	48 85 c0             	test   %rax,%rax
ffffffff8021198d:	74 0c                	je     ffffffff8021199b <_RME_Pgt_Con+0x1e3>
ffffffff8021198f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211996:	e9 90 03 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff8021199b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021199f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802119a3:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802119a7:	0f 95 c0             	setne  %al
ffffffff802119aa:	0f b6 c0             	movzbl %al,%eax
ffffffff802119ad:	48 85 c0             	test   %rax,%rax
ffffffff802119b0:	74 0c                	je     ffffffff802119be <_RME_Pgt_Con+0x206>
ffffffff802119b2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802119b9:	e9 6d 03 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff802119be:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802119c2:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802119c7:	48 85 c0             	test   %rax,%rax
ffffffff802119ca:	0f 85 98 00 00 00    	jne    ffffffff80211a68 <_RME_Pgt_Con+0x2b0>
ffffffff802119d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802119d4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802119d8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff802119dc:	48 39 c2             	cmp    %rax,%rdx
ffffffff802119df:	0f 93 c0             	setae  %al
ffffffff802119e2:	0f b6 c0             	movzbl %al,%eax
ffffffff802119e5:	48 85 c0             	test   %rax,%rax
ffffffff802119e8:	74 0c                	je     ffffffff802119f6 <_RME_Pgt_Con+0x23e>
ffffffff802119ea:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802119f1:	e9 35 03 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff802119f6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802119fa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802119fe:	48 89 c2             	mov    %rax,%rdx
ffffffff80211a01:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211a05:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211a09:	48 01 d0             	add    %rdx,%rax
ffffffff80211a0c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211a10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211a14:	48 8b 00             	mov    (%rax),%rax
ffffffff80211a17:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211a1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211a1f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211a23:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211a26:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211a2a:	0f 94 c0             	sete   %al
ffffffff80211a2d:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a30:	48 85 c0             	test   %rax,%rax
ffffffff80211a33:	74 0c                	je     ffffffff80211a41 <_RME_Pgt_Con+0x289>
ffffffff80211a35:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211a3c:	e9 ea 02 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff80211a41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211a45:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211a49:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211a4d:	0f 95 c0             	setne  %al
ffffffff80211a50:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a53:	48 85 c0             	test   %rax,%rax
ffffffff80211a56:	0f 84 4c 01 00 00    	je     ffffffff80211ba8 <_RME_Pgt_Con+0x3f0>
ffffffff80211a5c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211a63:	e9 c3 02 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff80211a68:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211a6c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211a70:	48 89 c2             	mov    %rax,%rdx
ffffffff80211a73:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211a77:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211a7b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211a7e:	0f 93 c0             	setae  %al
ffffffff80211a81:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a84:	48 85 c0             	test   %rax,%rax
ffffffff80211a87:	74 0c                	je     ffffffff80211a95 <_RME_Pgt_Con+0x2dd>
ffffffff80211a89:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211a90:	e9 96 02 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff80211a95:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211a99:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211a9d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211aa1:	48 89 c2             	mov    %rax,%rdx
ffffffff80211aa4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211aa8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211aac:	48 01 d0             	add    %rdx,%rax
ffffffff80211aaf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211ab3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211ab7:	48 8b 00             	mov    (%rax),%rax
ffffffff80211aba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211abe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211ac2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211ac6:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211ac9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211acd:	0f 94 c0             	sete   %al
ffffffff80211ad0:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ad3:	48 85 c0             	test   %rax,%rax
ffffffff80211ad6:	74 0c                	je     ffffffff80211ae4 <_RME_Pgt_Con+0x32c>
ffffffff80211ad8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211adf:	e9 47 02 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff80211ae4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211ae8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211aec:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211af0:	0f 95 c0             	setne  %al
ffffffff80211af3:	0f b6 c0             	movzbl %al,%eax
ffffffff80211af6:	48 85 c0             	test   %rax,%rax
ffffffff80211af9:	74 0c                	je     ffffffff80211b07 <_RME_Pgt_Con+0x34f>
ffffffff80211afb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211b02:	e9 24 02 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff80211b07:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211b0b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211b10:	48 89 c2             	mov    %rax,%rdx
ffffffff80211b13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211b17:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211b1b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211b1e:	0f 93 c0             	setae  %al
ffffffff80211b21:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b24:	48 85 c0             	test   %rax,%rax
ffffffff80211b27:	74 0c                	je     ffffffff80211b35 <_RME_Pgt_Con+0x37d>
ffffffff80211b29:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211b30:	e9 f6 01 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff80211b35:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211b39:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211b3e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211b42:	48 89 c2             	mov    %rax,%rdx
ffffffff80211b45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211b49:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211b4d:	48 01 d0             	add    %rdx,%rax
ffffffff80211b50:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211b54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211b58:	48 8b 00             	mov    (%rax),%rax
ffffffff80211b5b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211b5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211b63:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211b67:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211b6a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211b6e:	0f 94 c0             	sete   %al
ffffffff80211b71:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b74:	48 85 c0             	test   %rax,%rax
ffffffff80211b77:	74 0c                	je     ffffffff80211b85 <_RME_Pgt_Con+0x3cd>
ffffffff80211b79:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211b80:	e9 a6 01 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
ffffffff80211b85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211b89:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211b8d:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211b91:	0f 95 c0             	setne  %al
ffffffff80211b94:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b97:	48 85 c0             	test   %rax,%rax
ffffffff80211b9a:	74 0c                	je     ffffffff80211ba8 <_RME_Pgt_Con+0x3f0>
ffffffff80211b9c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211ba3:	e9 83 01 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
                   struct RME_Cap_Pgt*,Pgt_Child,Type_Stat);
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff80211ba8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211bac:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211bb0:	83 e0 10             	and    $0x10,%eax
ffffffff80211bb3:	48 85 c0             	test   %rax,%rax
ffffffff80211bb6:	0f 94 c0             	sete   %al
ffffffff80211bb9:	0f b6 c0             	movzbl %al,%eax
ffffffff80211bbc:	48 85 c0             	test   %rax,%rax
ffffffff80211bbf:	74 0c                	je     ffffffff80211bcd <_RME_Pgt_Con+0x415>
ffffffff80211bc1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211bc8:	e9 5e 01 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff80211bcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211bd1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211bd5:	83 e0 08             	and    $0x8,%eax
ffffffff80211bd8:	48 85 c0             	test   %rax,%rax
ffffffff80211bdb:	0f 94 c0             	sete   %al
ffffffff80211bde:	0f b6 c0             	movzbl %al,%eax
ffffffff80211be1:	48 85 c0             	test   %rax,%rax
ffffffff80211be4:	74 0c                	je     ffffffff80211bf2 <_RME_Pgt_Con+0x43a>
ffffffff80211be6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211bed:	e9 39 01 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211bf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211bf6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211bfa:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff80211bfe:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff80211c02:	72 17                	jb     ffffffff80211c1b <_RME_Pgt_Con+0x463>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff80211c04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211c08:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211c0c:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211c10:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211c15:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
ffffffff80211c19:	73 0c                	jae    ffffffff80211c27 <_RME_Pgt_Con+0x46f>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80211c1b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211c22:	e9 04 01 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff80211c27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211c2b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211c2f:	89 c2                	mov    %eax,%edx
ffffffff80211c31:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211c35:	89 d1                	mov    %edx,%ecx
ffffffff80211c37:	48 d3 e8             	shr    %cl,%rax
ffffffff80211c3a:	48 85 c0             	test   %rax,%rax
ffffffff80211c3d:	74 0c                	je     ffffffff80211c4b <_RME_Pgt_Con+0x493>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211c3f:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211c46:	e9 e0 00 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the child table falls within one slot of the parent table */
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff80211c4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211c4f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211c53:	89 c2                	mov    %eax,%edx
ffffffff80211c55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211c59:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211c5d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211c61:	48 01 d0             	add    %rdx,%rax
ffffffff80211c64:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff80211c68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211c6c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211c70:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211c74:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Szord_Parent<Order_Child)
ffffffff80211c78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211c7c:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80211c80:	73 0c                	jae    ffffffff80211c8e <_RME_Pgt_Con+0x4d6>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff80211c82:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211c89:	e9 9d 00 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
        RME_COV_MARKER();
        /* No action required */
    }
#else
    /* Force no path compression when virtual mappings are enabled */
    if(Szord_Parent!=Order_Child)
ffffffff80211c8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211c92:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80211c96:	74 0c                	je     ffffffff80211ca4 <_RME_Pgt_Con+0x4ec>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211c98:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211c9f:	e9 87 00 00 00       	jmp    ffffffff80211d2b <_RME_Pgt_Con+0x573>
    }
#endif

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff80211ca4:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff80211ca8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80211cac:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff80211cb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211cb4:	48 89 c7             	mov    %rax,%rdi
ffffffff80211cb7:	e8 99 4c 01 00       	call   ffffffff80226955 <__RME_Pgt_Pgdir_Map>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff80211cbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211cc0:	48 8b 00             	mov    (%rax),%rax
ffffffff80211cc3:	89 c0                	mov    %eax,%eax
ffffffff80211cc5:	48 85 c0             	test   %rax,%rax
ffffffff80211cc8:	74 0a                	je     ffffffff80211cd4 <_RME_Pgt_Con+0x51c>
ffffffff80211cca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211cce:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80211cd2:	eb 04                	jmp    ffffffff80211cd8 <_RME_Pgt_Con+0x520>
ffffffff80211cd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211cd8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1);
ffffffff80211cdc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211ce0:	48 83 c0 08          	add    $0x8,%rax
ffffffff80211ce4:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80211ce9:	48 89 c7             	mov    %rax,%rdi
ffffffff80211cec:	e8 a2 aa ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff80211cf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211cf5:	48 8b 00             	mov    (%rax),%rax
ffffffff80211cf8:	89 c0                	mov    %eax,%eax
ffffffff80211cfa:	48 85 c0             	test   %rax,%rax
ffffffff80211cfd:	74 0a                	je     ffffffff80211d09 <_RME_Pgt_Con+0x551>
ffffffff80211cff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211d03:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80211d07:	eb 04                	jmp    ffffffff80211d0d <_RME_Pgt_Con+0x555>
ffffffff80211d09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211d0d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1);
ffffffff80211d11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211d15:	48 83 c0 08          	add    $0x8,%rax
ffffffff80211d19:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80211d1e:	48 89 c7             	mov    %rax,%rdi
ffffffff80211d21:	e8 6d aa ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80211d26:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80211d2b:	c9                   	leave
ffffffff80211d2c:	c3                   	ret

ffffffff80211d2d <_RME_Pgt_Des>:
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Des(struct RME_Cap_Cpt* Cpt, 
                              rme_cid_t Cap_Pgt_Parent,
                              rme_ptr_t Pos,
                              rme_cid_t Cap_Pgt_Child)
{
ffffffff80211d2d:	55                   	push   %rbp
ffffffff80211d2e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80211d31:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80211d35:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80211d39:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80211d3d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80211d41:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    struct RME_Cap_Pgt* Pgt_Child;
    struct RME_Cap_Pgt* Pgt_Root;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff80211d45:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211d49:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211d4e:	48 85 c0             	test   %rax,%rax
ffffffff80211d51:	0f 85 98 00 00 00    	jne    ffffffff80211def <_RME_Pgt_Des+0xc2>
ffffffff80211d57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211d5b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211d5f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80211d63:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211d66:	0f 93 c0             	setae  %al
ffffffff80211d69:	0f b6 c0             	movzbl %al,%eax
ffffffff80211d6c:	48 85 c0             	test   %rax,%rax
ffffffff80211d6f:	74 0c                	je     ffffffff80211d7d <_RME_Pgt_Des+0x50>
ffffffff80211d71:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211d78:	e9 c9 04 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80211d7d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211d81:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211d85:	48 89 c2             	mov    %rax,%rdx
ffffffff80211d88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211d8c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211d90:	48 01 d0             	add    %rdx,%rax
ffffffff80211d93:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211d97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d9b:	48 8b 00             	mov    (%rax),%rax
ffffffff80211d9e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211da2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211da6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211daa:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211dad:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211db1:	0f 94 c0             	sete   %al
ffffffff80211db4:	0f b6 c0             	movzbl %al,%eax
ffffffff80211db7:	48 85 c0             	test   %rax,%rax
ffffffff80211dba:	74 0c                	je     ffffffff80211dc8 <_RME_Pgt_Des+0x9b>
ffffffff80211dbc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211dc3:	e9 7e 04 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80211dc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211dcc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211dd0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211dd4:	0f 95 c0             	setne  %al
ffffffff80211dd7:	0f b6 c0             	movzbl %al,%eax
ffffffff80211dda:	48 85 c0             	test   %rax,%rax
ffffffff80211ddd:	0f 84 4c 01 00 00    	je     ffffffff80211f2f <_RME_Pgt_Des+0x202>
ffffffff80211de3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211dea:	e9 57 04 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80211def:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211df3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211df7:	48 89 c2             	mov    %rax,%rdx
ffffffff80211dfa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211dfe:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211e02:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211e05:	0f 93 c0             	setae  %al
ffffffff80211e08:	0f b6 c0             	movzbl %al,%eax
ffffffff80211e0b:	48 85 c0             	test   %rax,%rax
ffffffff80211e0e:	74 0c                	je     ffffffff80211e1c <_RME_Pgt_Des+0xef>
ffffffff80211e10:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211e17:	e9 2a 04 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80211e1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211e20:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211e24:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211e28:	48 89 c2             	mov    %rax,%rdx
ffffffff80211e2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211e2f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211e33:	48 01 d0             	add    %rdx,%rax
ffffffff80211e36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211e3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211e3e:	48 8b 00             	mov    (%rax),%rax
ffffffff80211e41:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211e45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211e49:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211e4d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211e50:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211e54:	0f 94 c0             	sete   %al
ffffffff80211e57:	0f b6 c0             	movzbl %al,%eax
ffffffff80211e5a:	48 85 c0             	test   %rax,%rax
ffffffff80211e5d:	74 0c                	je     ffffffff80211e6b <_RME_Pgt_Des+0x13e>
ffffffff80211e5f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211e66:	e9 db 03 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80211e6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211e6f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211e73:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211e77:	0f 95 c0             	setne  %al
ffffffff80211e7a:	0f b6 c0             	movzbl %al,%eax
ffffffff80211e7d:	48 85 c0             	test   %rax,%rax
ffffffff80211e80:	74 0c                	je     ffffffff80211e8e <_RME_Pgt_Des+0x161>
ffffffff80211e82:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211e89:	e9 b8 03 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80211e8e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211e92:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211e97:	48 89 c2             	mov    %rax,%rdx
ffffffff80211e9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211e9e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211ea2:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211ea5:	0f 93 c0             	setae  %al
ffffffff80211ea8:	0f b6 c0             	movzbl %al,%eax
ffffffff80211eab:	48 85 c0             	test   %rax,%rax
ffffffff80211eae:	74 0c                	je     ffffffff80211ebc <_RME_Pgt_Des+0x18f>
ffffffff80211eb0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211eb7:	e9 8a 03 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80211ebc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211ec0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211ec5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211ec9:	48 89 c2             	mov    %rax,%rdx
ffffffff80211ecc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211ed0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211ed4:	48 01 d0             	add    %rdx,%rax
ffffffff80211ed7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211edb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211edf:	48 8b 00             	mov    (%rax),%rax
ffffffff80211ee2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211ee6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211eea:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211eee:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211ef1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211ef5:	0f 94 c0             	sete   %al
ffffffff80211ef8:	0f b6 c0             	movzbl %al,%eax
ffffffff80211efb:	48 85 c0             	test   %rax,%rax
ffffffff80211efe:	74 0c                	je     ffffffff80211f0c <_RME_Pgt_Des+0x1df>
ffffffff80211f00:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211f07:	e9 3a 03 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80211f0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211f10:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211f14:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211f18:	0f 95 c0             	setne  %al
ffffffff80211f1b:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f1e:	48 85 c0             	test   %rax,%rax
ffffffff80211f21:	74 0c                	je     ffffffff80211f2f <_RME_Pgt_Des+0x202>
ffffffff80211f23:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211f2a:	e9 17 03 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff80211f2f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211f33:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211f38:	48 85 c0             	test   %rax,%rax
ffffffff80211f3b:	0f 85 98 00 00 00    	jne    ffffffff80211fd9 <_RME_Pgt_Des+0x2ac>
ffffffff80211f41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211f45:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211f49:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80211f4d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211f50:	0f 93 c0             	setae  %al
ffffffff80211f53:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f56:	48 85 c0             	test   %rax,%rax
ffffffff80211f59:	74 0c                	je     ffffffff80211f67 <_RME_Pgt_Des+0x23a>
ffffffff80211f5b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211f62:	e9 df 02 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80211f67:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211f6b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211f6f:	48 89 c2             	mov    %rax,%rdx
ffffffff80211f72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211f76:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211f7a:	48 01 d0             	add    %rdx,%rax
ffffffff80211f7d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211f81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211f85:	48 8b 00             	mov    (%rax),%rax
ffffffff80211f88:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211f8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211f90:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211f94:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211f97:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211f9b:	0f 94 c0             	sete   %al
ffffffff80211f9e:	0f b6 c0             	movzbl %al,%eax
ffffffff80211fa1:	48 85 c0             	test   %rax,%rax
ffffffff80211fa4:	74 0c                	je     ffffffff80211fb2 <_RME_Pgt_Des+0x285>
ffffffff80211fa6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211fad:	e9 94 02 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80211fb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211fb6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211fba:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211fbe:	0f 95 c0             	setne  %al
ffffffff80211fc1:	0f b6 c0             	movzbl %al,%eax
ffffffff80211fc4:	48 85 c0             	test   %rax,%rax
ffffffff80211fc7:	0f 84 4c 01 00 00    	je     ffffffff80212119 <_RME_Pgt_Des+0x3ec>
ffffffff80211fcd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211fd4:	e9 6d 02 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80211fd9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211fdd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211fe1:	48 89 c2             	mov    %rax,%rdx
ffffffff80211fe4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211fe8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211fec:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211fef:	0f 93 c0             	setae  %al
ffffffff80211ff2:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ff5:	48 85 c0             	test   %rax,%rax
ffffffff80211ff8:	74 0c                	je     ffffffff80212006 <_RME_Pgt_Des+0x2d9>
ffffffff80211ffa:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212001:	e9 40 02 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80212006:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021200a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021200e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212012:	48 89 c2             	mov    %rax,%rdx
ffffffff80212015:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212019:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021201d:	48 01 d0             	add    %rdx,%rax
ffffffff80212020:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212024:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212028:	48 8b 00             	mov    (%rax),%rax
ffffffff8021202b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021202f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212033:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212037:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021203a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021203e:	0f 94 c0             	sete   %al
ffffffff80212041:	0f b6 c0             	movzbl %al,%eax
ffffffff80212044:	48 85 c0             	test   %rax,%rax
ffffffff80212047:	74 0c                	je     ffffffff80212055 <_RME_Pgt_Des+0x328>
ffffffff80212049:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212050:	e9 f1 01 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80212055:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212059:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021205d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212061:	0f 95 c0             	setne  %al
ffffffff80212064:	0f b6 c0             	movzbl %al,%eax
ffffffff80212067:	48 85 c0             	test   %rax,%rax
ffffffff8021206a:	74 0c                	je     ffffffff80212078 <_RME_Pgt_Des+0x34b>
ffffffff8021206c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212073:	e9 ce 01 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff80212078:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021207c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212081:	48 89 c2             	mov    %rax,%rdx
ffffffff80212084:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212088:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021208c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021208f:	0f 93 c0             	setae  %al
ffffffff80212092:	0f b6 c0             	movzbl %al,%eax
ffffffff80212095:	48 85 c0             	test   %rax,%rax
ffffffff80212098:	74 0c                	je     ffffffff802120a6 <_RME_Pgt_Des+0x379>
ffffffff8021209a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802120a1:	e9 a0 01 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff802120a6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802120aa:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802120af:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802120b3:	48 89 c2             	mov    %rax,%rdx
ffffffff802120b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802120ba:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802120be:	48 01 d0             	add    %rdx,%rax
ffffffff802120c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802120c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802120c9:	48 8b 00             	mov    (%rax),%rax
ffffffff802120cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802120d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802120d4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802120d8:	0f b7 c0             	movzwl %ax,%eax
ffffffff802120db:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802120df:	0f 94 c0             	sete   %al
ffffffff802120e2:	0f b6 c0             	movzbl %al,%eax
ffffffff802120e5:	48 85 c0             	test   %rax,%rax
ffffffff802120e8:	74 0c                	je     ffffffff802120f6 <_RME_Pgt_Des+0x3c9>
ffffffff802120ea:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802120f1:	e9 50 01 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
ffffffff802120f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802120fa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802120fe:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212102:	0f 95 c0             	setne  %al
ffffffff80212105:	0f b6 c0             	movzbl %al,%eax
ffffffff80212108:	48 85 c0             	test   %rax,%rax
ffffffff8021210b:	74 0c                	je     ffffffff80212119 <_RME_Pgt_Des+0x3ec>
ffffffff8021210d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212114:	e9 2d 01 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
                   struct RME_Cap_Pgt*,Pgt_Child,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
ffffffff80212119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021211d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212121:	83 e0 20             	and    $0x20,%eax
ffffffff80212124:	48 85 c0             	test   %rax,%rax
ffffffff80212127:	0f 94 c0             	sete   %al
ffffffff8021212a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021212d:	48 85 c0             	test   %rax,%rax
ffffffff80212130:	74 0c                	je     ffffffff8021213e <_RME_Pgt_Des+0x411>
ffffffff80212132:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80212139:	e9 08 01 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff8021213e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212142:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212146:	83 e0 08             	and    $0x8,%eax
ffffffff80212149:	48 85 c0             	test   %rax,%rax
ffffffff8021214c:	0f 94 c0             	sete   %al
ffffffff8021214f:	0f b6 c0             	movzbl %al,%eax
ffffffff80212152:	48 85 c0             	test   %rax,%rax
ffffffff80212155:	74 0c                	je     ffffffff80212163 <_RME_Pgt_Des+0x436>
ffffffff80212157:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021215e:	e9 e3 00 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80212163:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212167:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021216b:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8021216f:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff80212173:	72 17                	jb     ffffffff8021218c <_RME_Pgt_Des+0x45f>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff80212175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212179:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021217d:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80212181:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80212186:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff8021218a:	73 0c                	jae    ffffffff80212198 <_RME_Pgt_Des+0x46b>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff8021218c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80212193:	e9 ae 00 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff80212198:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021219c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802121a0:	89 c2                	mov    %eax,%edx
ffffffff802121a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802121a6:	89 d1                	mov    %edx,%ecx
ffffffff802121a8:	48 d3 e8             	shr    %cl,%rax
ffffffff802121ab:	48 85 c0             	test   %rax,%rax
ffffffff802121ae:	74 0c                	je     ffffffff802121bc <_RME_Pgt_Des+0x48f>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff802121b0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802121b7:	e9 8a 00 00 00       	jmp    ffffffff80212246 <_RME_Pgt_Des+0x519>

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict. Also,
     * the HAL needs to guarantee that the Child is actually mapped there,
     * and use that as the old value in CAS */
    if(__RME_Pgt_Pgdir_Unmap(Pgt_Parent,Pos,Pgt_Child)<0)
ffffffff802121bc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802121c0:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff802121c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802121c8:	48 89 ce             	mov    %rcx,%rsi
ffffffff802121cb:	48 89 c7             	mov    %rax,%rdi
ffffffff802121ce:	e8 65 48 01 00       	call   ffffffff80226a38 <__RME_Pgt_Pgdir_Unmap>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Decrease refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff802121d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802121d7:	48 8b 00             	mov    (%rax),%rax
ffffffff802121da:	89 c0                	mov    %eax,%eax
ffffffff802121dc:	48 85 c0             	test   %rax,%rax
ffffffff802121df:	74 0a                	je     ffffffff802121eb <_RME_Pgt_Des+0x4be>
ffffffff802121e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802121e5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802121e9:	eb 04                	jmp    ffffffff802121ef <_RME_Pgt_Des+0x4c2>
ffffffff802121eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802121ef:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),-1);
ffffffff802121f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802121f7:	48 83 c0 08          	add    $0x8,%rax
ffffffff802121fb:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80212202:	48 89 c7             	mov    %rax,%rdi
ffffffff80212205:	e8 89 a5 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8021220a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021220e:	48 8b 00             	mov    (%rax),%rax
ffffffff80212211:	89 c0                	mov    %eax,%eax
ffffffff80212213:	48 85 c0             	test   %rax,%rax
ffffffff80212216:	74 0a                	je     ffffffff80212222 <_RME_Pgt_Des+0x4f5>
ffffffff80212218:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021221c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212220:	eb 04                	jmp    ffffffff80212226 <_RME_Pgt_Des+0x4f9>
ffffffff80212222:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212226:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),-1);
ffffffff8021222a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021222e:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212232:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80212239:	48 89 c7             	mov    %rax,%rdi
ffffffff8021223c:	e8 52 a5 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80212241:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212246:	c9                   	leave
ffffffff80212247:	c3                   	ret

ffffffff80212248 <_RME_Kot_Init>:
Output      : None.
Return      : rme_ret_t - If the number of words are is not sufficient to hold 
                          all kernel memory, -1; else 0.
******************************************************************************/
rme_ret_t _RME_Kot_Init(rme_ptr_t Word)
{
ffffffff80212248:	55                   	push   %rbp
ffffffff80212249:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021224c:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212250:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Count;
    
    if(Word<RME_KOT_WORD_NUM)
ffffffff80212254:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
ffffffff80212259:	77 09                	ja     ffffffff80212264 <_RME_Kot_Init+0x1c>
    {
        RME_COV_MARKER();

        return -1;
ffffffff8021225b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212262:	eb 3e                	jmp    ffffffff802122a2 <_RME_Kot_Init+0x5a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Zero out the whole table */
    for(Count=0U;Count<Word;Count++)
ffffffff80212264:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021226b:	00 
ffffffff8021226c:	eb 25                	jmp    ffffffff80212293 <_RME_Kot_Init+0x4b>
    {
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8021226e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212272:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212279:	00 
ffffffff8021227a:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212281:	80 ff ff 
ffffffff80212284:	48 01 d0             	add    %rdx,%rax
ffffffff80212287:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff8021228e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212293:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212297:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8021229b:	72 d1                	jb     ffffffff8021226e <_RME_Kot_Init+0x26>
    }

    return 0;
ffffffff8021229d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802122a2:	c9                   	leave
ffffffff802122a3:	c3                   	ret

ffffffff802122a4 <_RME_Kot_Mark>:
Output      : None.
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Kot_Mark(rme_ptr_t Kaddr,
                        rme_ptr_t Size)
{
ffffffff802122a4:	55                   	push   %rbp
ffffffff802122a5:	48 89 e5             	mov    %rsp,%rbp
ffffffff802122a8:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff802122ac:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802122b0:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    rme_ptr_t Mask_Begin;
    /* The mask at the end word */
    rme_ptr_t Mask_End;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff802122b4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802122b8:	83 e0 0f             	and    $0xf,%eax
ffffffff802122bb:	48 85 c0             	test   %rax,%rax
ffffffff802122be:	74 0c                	je     ffffffff802122cc <_RME_Kot_Mark+0x28>
    {
        RME_COV_MARKER();

        return RME_ERR_KOT_BMP;
ffffffff802122c0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802122c7:	e9 19 03 00 00       	jmp    ffffffff802125e5 <_RME_Kot_Mark+0x341>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Round the marking to RME_KOM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802122cc:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802122d3:	80 00 00 
ffffffff802122d6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802122da:	48 01 d0             	add    %rdx,%rax
ffffffff802122dd:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff802122e1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff802122e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802122e9:	83 e0 3f             	and    $0x3f,%eax
ffffffff802122ec:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802122f3:	89 c1                	mov    %eax,%ecx
ffffffff802122f5:	48 d3 e2             	shl    %cl,%rdx
ffffffff802122f8:	48 89 d0             	mov    %rdx,%rax
ffffffff802122fb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Start=Start>>RME_WORD_ORDER;
ffffffff802122ff:	48 c1 6d e8 06       	shrq   $0x6,-0x18(%rbp)
    
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff80212304:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80212308:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021230c:	48 01 c2             	add    %rax,%rdx
ffffffff8021230f:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff80212316:	7f 00 00 
ffffffff80212319:	48 01 d0             	add    %rdx,%rax
ffffffff8021231c:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80212320:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80212324:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212328:	f7 d0                	not    %eax
ffffffff8021232a:	83 e0 3f             	and    $0x3f,%eax
ffffffff8021232d:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212334:	89 c1                	mov    %eax,%ecx
ffffffff80212336:	48 d3 ea             	shr    %cl,%rdx
ffffffff80212339:	48 89 d0             	mov    %rdx,%rax
ffffffff8021233c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    End=End>>RME_WORD_ORDER;
ffffffff80212340:	48 c1 6d d8 06       	shrq   $0x6,-0x28(%rbp)
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff80212345:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212349:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8021234d:	0f 85 89 00 00 00    	jne    ffffffff802123dc <_RME_Kot_Mark+0x138>
    {
        RME_COV_MARKER();

        /* Someone already populated something here */
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff80212353:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212357:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021235e:	00 
ffffffff8021235f:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212366:	80 ff ff 
ffffffff80212369:	48 01 d0             	add    %rdx,%rax
ffffffff8021236c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021236f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        if((Old_Val&(Mask_Begin&Mask_End))!=0U)
ffffffff80212373:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212377:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff8021237b:	48 23 45 c8          	and    -0x38(%rbp),%rax
ffffffff8021237f:	48 85 c0             	test   %rax,%rax
ffffffff80212382:	74 0c                	je     ffffffff80212390 <_RME_Kot_Mark+0xec>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff80212384:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021238b:	e9 55 02 00 00       	jmp    ffffffff802125e5 <_RME_Kot_Mark+0x341>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check done, do the marking with CAS */
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff80212390:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212394:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80212398:	48 0b 45 c8          	or     -0x38(%rbp),%rax
ffffffff8021239c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021239f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802123a3:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff802123aa:	00 
ffffffff802123ab:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802123b2:	80 ff ff 
ffffffff802123b5:	48 01 c1             	add    %rax,%rcx
ffffffff802123b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802123bc:	48 89 c6             	mov    %rax,%rsi
ffffffff802123bf:	48 89 cf             	mov    %rcx,%rdi
ffffffff802123c2:	e8 97 a3 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802123c7:	48 85 c0             	test   %rax,%rax
ffffffff802123ca:	0f 85 10 02 00 00    	jne    ffffffff802125e0 <_RME_Kot_Mark+0x33c>
                         Old_Val,
                         Old_Val|(Mask_Begin&Mask_End))==RME_CASFAIL)
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802123d0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802123d7:	e9 09 02 00 00       	jmp    ffffffff802125e5 <_RME_Kot_Mark+0x341>
    }
    else
    {
        RME_COV_MARKER();
        
        Undo=0U;
ffffffff802123dc:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802123e3:	00 
        /* Check&Mark the start */
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff802123e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802123e8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802123ef:	00 
ffffffff802123f0:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802123f7:	80 ff ff 
ffffffff802123fa:	48 01 d0             	add    %rdx,%rax
ffffffff802123fd:	48 8b 00             	mov    (%rax),%rax
ffffffff80212400:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        if((Old_Val&Mask_Begin)!=0U)
ffffffff80212404:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212408:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff8021240c:	48 85 c0             	test   %rax,%rax
ffffffff8021240f:	74 0c                	je     ffffffff8021241d <_RME_Kot_Mark+0x179>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff80212411:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212418:	e9 c8 01 00 00       	jmp    ffffffff802125e5 <_RME_Kot_Mark+0x341>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8021241d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212421:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff80212425:	48 89 c2             	mov    %rax,%rdx
ffffffff80212428:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021242c:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff80212433:	00 
ffffffff80212434:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021243b:	80 ff ff 
ffffffff8021243e:	48 01 c1             	add    %rax,%rcx
ffffffff80212441:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212445:	48 89 c6             	mov    %rax,%rsi
ffffffff80212448:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021244b:	e8 0e a3 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212450:	48 85 c0             	test   %rax,%rax
ffffffff80212453:	75 0c                	jne    ffffffff80212461 <_RME_Kot_Mark+0x1bd>
                         Old_Val,
                         Old_Val|Mask_Begin)==RME_CASFAIL)
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff80212455:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021245c:	e9 84 01 00 00       	jmp    ffffffff802125e5 <_RME_Kot_Mark+0x341>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check&Mark the middle */
        for(Count=Start+1U;Count<End;Count++)
ffffffff80212461:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212465:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212469:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021246d:	eb 75                	jmp    ffffffff802124e4 <_RME_Kot_Mark+0x240>
        {
            Old_Val=RME_KOT_VA_BASE[Count];
ffffffff8021246f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212473:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021247a:	00 
ffffffff8021247b:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212482:	80 ff ff 
ffffffff80212485:	48 01 d0             	add    %rdx,%rax
ffffffff80212488:	48 8b 00             	mov    (%rax),%rax
ffffffff8021248b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            if(Old_Val!=0U)
ffffffff8021248f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff80212494:	74 0a                	je     ffffffff802124a0 <_RME_Kot_Mark+0x1fc>
            {
                RME_COV_MARKER();

                Undo=1U;
ffffffff80212496:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff8021249d:	00 
                break;
ffffffff8021249e:	eb 4e                	jmp    ffffffff802124ee <_RME_Kot_Mark+0x24a>
            }
            else
            {
                RME_COV_MARKER();
                
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Count],
ffffffff802124a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802124a4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802124ab:	00 
ffffffff802124ac:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802124b3:	80 ff ff 
ffffffff802124b6:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff802124ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802124be:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802124c5:	48 89 c6             	mov    %rax,%rsi
ffffffff802124c8:	48 89 cf             	mov    %rcx,%rdi
ffffffff802124cb:	e8 8e a2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802124d0:	48 85 c0             	test   %rax,%rax
ffffffff802124d3:	75 0a                	jne    ffffffff802124df <_RME_Kot_Mark+0x23b>
                                 Old_Val,
                                 RME_MASK_FULL)==RME_CASFAIL)
                {
                    RME_COV_MARKER();
                    
                    Undo=1U;
ffffffff802124d5:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff802124dc:	00 
                    break;
ffffffff802124dd:	eb 0f                	jmp    ffffffff802124ee <_RME_Kot_Mark+0x24a>
        for(Count=Start+1U;Count<End;Count++)
ffffffff802124df:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802124e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802124e8:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff802124ec:	72 81                	jb     ffffffff8021246f <_RME_Kot_Mark+0x1cb>
                }
            }
        }
        
        /* See if the middle part failed. If yes, we skip the end marking */
        if(Undo==0U)
ffffffff802124ee:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff802124f3:	75 77                	jne    ffffffff8021256c <_RME_Kot_Mark+0x2c8>
        {
            RME_COV_MARKER();

            /* Check&Mark the end */
            Old_Val=RME_KOT_VA_BASE[End];
ffffffff802124f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802124f9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212500:	00 
ffffffff80212501:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212508:	80 ff ff 
ffffffff8021250b:	48 01 d0             	add    %rdx,%rax
ffffffff8021250e:	48 8b 00             	mov    (%rax),%rax
ffffffff80212511:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            if((Old_Val&Mask_End)!=0U)
ffffffff80212515:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212519:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff8021251d:	48 85 c0             	test   %rax,%rax
ffffffff80212520:	74 0a                	je     ffffffff8021252c <_RME_Kot_Mark+0x288>
            {
                RME_COV_MARKER();

                Undo=1U;
ffffffff80212522:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff80212529:	00 
ffffffff8021252a:	eb 40                	jmp    ffffffff8021256c <_RME_Kot_Mark+0x2c8>
            }
            else
            {
                RME_COV_MARKER();

                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[End],
ffffffff8021252c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212530:	48 0b 45 d0          	or     -0x30(%rbp),%rax
ffffffff80212534:	48 89 c2             	mov    %rax,%rdx
ffffffff80212537:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021253b:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff80212542:	00 
ffffffff80212543:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021254a:	80 ff ff 
ffffffff8021254d:	48 01 c1             	add    %rax,%rcx
ffffffff80212550:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212554:	48 89 c6             	mov    %rax,%rsi
ffffffff80212557:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021255a:	e8 ff a1 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021255f:	48 85 c0             	test   %rax,%rax
ffffffff80212562:	75 08                	jne    ffffffff8021256c <_RME_Kot_Mark+0x2c8>
                                 Old_Val,
                                 Old_Val|Mask_End)==RME_CASFAIL)
                {
                    RME_COV_MARKER();

                    Undo=1U;
ffffffff80212564:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff8021256b:	00 
        {
            RME_COV_MARKER();
        }
        
        /* See if we need to undo. If yes, proceed to unroll and return error */
        if(Undo!=0U)
ffffffff8021256c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80212571:	74 6d                	je     ffffffff802125e0 <_RME_Kot_Mark+0x33c>
        {
            RME_COV_MARKER();

            /* Undo the middle part - no CAS neeeded, write back is always atomic */
            for(Count--;Count>Start;Count--)
ffffffff80212573:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff80212578:	eb 25                	jmp    ffffffff8021259f <_RME_Kot_Mark+0x2fb>
            {
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8021257a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021257e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212585:	00 
ffffffff80212586:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021258d:	80 ff ff 
ffffffff80212590:	48 01 d0             	add    %rdx,%rax
ffffffff80212593:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            for(Count--;Count>Start;Count--)
ffffffff8021259a:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff8021259f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802125a3:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff802125a7:	72 d1                	jb     ffffffff8021257a <_RME_Kot_Mark+0x2d6>
            }
            /* Undo the first word - need atomic instructions */
            RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff802125a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802125ad:	48 f7 d0             	not    %rax
ffffffff802125b0:	48 89 c1             	mov    %rax,%rcx
ffffffff802125b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802125b7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802125be:	00 
ffffffff802125bf:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802125c6:	80 ff ff 
ffffffff802125c9:	48 01 d0             	add    %rdx,%rax
ffffffff802125cc:	48 89 ce             	mov    %rcx,%rsi
ffffffff802125cf:	48 89 c7             	mov    %rax,%rdi
ffffffff802125d2:	e8 e7 a1 ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
            /* Return failure */
            return RME_ERR_KOT_BMP;
ffffffff802125d7:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802125de:	eb 05                	jmp    ffffffff802125e5 <_RME_Kot_Mark+0x341>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff802125e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802125e5:	c9                   	leave
ffffffff802125e6:	c3                   	ret

ffffffff802125e7 <_RME_Kot_Erase>:
Output      : None.
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Kot_Erase(rme_ptr_t Kaddr,
                         rme_ptr_t Size)
{
ffffffff802125e7:	55                   	push   %rbp
ffffffff802125e8:	48 89 e5             	mov    %rsp,%rbp
ffffffff802125eb:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff802125ef:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff802125f3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    /* The mask at the end word */
    rme_ptr_t Mask_End;
    rme_ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff802125f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802125fb:	83 e0 0f             	and    $0xf,%eax
ffffffff802125fe:	48 85 c0             	test   %rax,%rax
ffffffff80212601:	74 0c                	je     ffffffff8021260f <_RME_Kot_Erase+0x28>
    {
        RME_COV_MARKER();

        return RME_ERR_KOT_BMP;
ffffffff80212603:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021260a:	e9 4f 02 00 00       	jmp    ffffffff8021285e <_RME_Kot_Erase+0x277>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Round the marking to RME_KOM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8021260f:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80212616:	80 00 00 
ffffffff80212619:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021261d:	48 01 d0             	add    %rdx,%rax
ffffffff80212620:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80212624:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80212628:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021262c:	83 e0 3f             	and    $0x3f,%eax
ffffffff8021262f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212636:	89 c1                	mov    %eax,%ecx
ffffffff80212638:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021263b:	48 89 d0             	mov    %rdx,%rax
ffffffff8021263e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Start=Start>>RME_WORD_ORDER;
ffffffff80212642:	48 c1 6d f0 06       	shrq   $0x6,-0x10(%rbp)
    
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff80212647:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021264b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021264f:	48 01 c2             	add    %rax,%rdx
ffffffff80212652:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff80212659:	7f 00 00 
ffffffff8021265c:	48 01 d0             	add    %rdx,%rax
ffffffff8021265f:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80212663:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80212667:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021266b:	f7 d0                	not    %eax
ffffffff8021266d:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212670:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212677:	89 c1                	mov    %eax,%ecx
ffffffff80212679:	48 d3 ea             	shr    %cl,%rdx
ffffffff8021267c:	48 89 d0             	mov    %rdx,%rax
ffffffff8021267f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    End=End>>RME_WORD_ORDER;
ffffffff80212683:	48 c1 6d e0 06       	shrq   $0x6,-0x20(%rbp)
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff80212688:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021268c:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80212690:	75 77                	jne    ffffffff80212709 <_RME_Kot_Erase+0x122>
    {
        RME_COV_MARKER();

        /* This address range is not fully populated */
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff80212692:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212696:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021269d:	00 
ffffffff8021269e:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802126a5:	80 ff ff 
ffffffff802126a8:	48 01 d0             	add    %rdx,%rax
ffffffff802126ab:	48 8b 10             	mov    (%rax),%rdx
ffffffff802126ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802126b2:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff802126b6:	48 21 c2             	and    %rax,%rdx
ffffffff802126b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802126bd:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff802126c1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802126c4:	74 0c                	je     ffffffff802126d2 <_RME_Kot_Erase+0xeb>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802126c6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802126cd:	e9 8c 01 00 00       	jmp    ffffffff8021285e <_RME_Kot_Erase+0x277>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Check done, do the unmarking - need atomic operations */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~(Mask_Begin&Mask_End));
ffffffff802126d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802126d6:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff802126da:	48 f7 d0             	not    %rax
ffffffff802126dd:	48 89 c1             	mov    %rax,%rcx
ffffffff802126e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802126e4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802126eb:	00 
ffffffff802126ec:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802126f3:	80 ff ff 
ffffffff802126f6:	48 01 d0             	add    %rdx,%rax
ffffffff802126f9:	48 89 ce             	mov    %rcx,%rsi
ffffffff802126fc:	48 89 c7             	mov    %rax,%rdi
ffffffff802126ff:	e8 ba a0 ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
ffffffff80212704:	e9 50 01 00 00       	jmp    ffffffff80212859 <_RME_Kot_Erase+0x272>
    else
    {
        RME_COV_MARKER();

        /* Check the start */
        if((RME_KOT_VA_BASE[Start]&Mask_Begin)!=Mask_Begin)
ffffffff80212709:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021270d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212714:	00 
ffffffff80212715:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021271c:	80 ff ff 
ffffffff8021271f:	48 01 d0             	add    %rdx,%rax
ffffffff80212722:	48 8b 00             	mov    (%rax),%rax
ffffffff80212725:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80212729:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8021272d:	74 0c                	je     ffffffff8021273b <_RME_Kot_Erase+0x154>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff8021272f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212736:	e9 23 01 00 00       	jmp    ffffffff8021285e <_RME_Kot_Erase+0x277>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the middle */
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff8021273b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021273f:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212743:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212747:	eb 33                	jmp    ffffffff8021277c <_RME_Kot_Erase+0x195>
        {
            if(RME_KOT_VA_BASE[Count]!=RME_MASK_FULL)
ffffffff80212749:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021274d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212754:	00 
ffffffff80212755:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021275c:	80 ff ff 
ffffffff8021275f:	48 01 d0             	add    %rdx,%rax
ffffffff80212762:	48 8b 00             	mov    (%rax),%rax
ffffffff80212765:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff80212769:	74 0c                	je     ffffffff80212777 <_RME_Kot_Erase+0x190>
            {
                RME_COV_MARKER();

                return RME_ERR_KOT_BMP;
ffffffff8021276b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212772:	e9 e7 00 00 00       	jmp    ffffffff8021285e <_RME_Kot_Erase+0x277>
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80212777:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021277c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212780:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80212784:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff80212788:	72 bf                	jb     ffffffff80212749 <_RME_Kot_Erase+0x162>
                /* No action required */
            }
        }

        /* Check the end */
        if((RME_KOT_VA_BASE[End]&Mask_End)!=Mask_End)
ffffffff8021278a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021278e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212795:	00 
ffffffff80212796:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021279d:	80 ff ff 
ffffffff802127a0:	48 01 d0             	add    %rdx,%rax
ffffffff802127a3:	48 8b 00             	mov    (%rax),%rax
ffffffff802127a6:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff802127aa:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff802127ae:	74 0c                	je     ffffffff802127bc <_RME_Kot_Erase+0x1d5>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802127b0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802127b7:	e9 a2 00 00 00       	jmp    ffffffff8021285e <_RME_Kot_Erase+0x277>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Erase the start - make it atomic */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff802127bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802127c0:	48 f7 d0             	not    %rax
ffffffff802127c3:	48 89 c1             	mov    %rax,%rcx
ffffffff802127c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802127ca:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802127d1:	00 
ffffffff802127d2:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802127d9:	80 ff ff 
ffffffff802127dc:	48 01 d0             	add    %rdx,%rax
ffffffff802127df:	48 89 ce             	mov    %rcx,%rsi
ffffffff802127e2:	48 89 c7             	mov    %rax,%rdi
ffffffff802127e5:	e8 d4 9f ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
        /* Erase the middle - do not need atomics here */
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802127ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802127ee:	48 83 c0 01          	add    $0x1,%rax
ffffffff802127f2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802127f6:	eb 25                	jmp    ffffffff8021281d <_RME_Kot_Erase+0x236>
        {
            RME_KOT_VA_BASE[Count]=0U;
ffffffff802127f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802127fc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212803:	00 
ffffffff80212804:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021280b:	80 ff ff 
ffffffff8021280e:	48 01 d0             	add    %rdx,%rax
ffffffff80212811:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80212818:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021281d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212821:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80212825:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff80212829:	72 cd                	jb     ffffffff802127f8 <_RME_Kot_Erase+0x211>
        }
        /* Erase the end - make it atomic */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[End]),~Mask_End);
ffffffff8021282b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021282f:	48 f7 d0             	not    %rax
ffffffff80212832:	48 89 c1             	mov    %rax,%rcx
ffffffff80212835:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212839:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212840:	00 
ffffffff80212841:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212848:	80 ff ff 
ffffffff8021284b:	48 01 d0             	add    %rdx,%rax
ffffffff8021284e:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212851:	48 89 c7             	mov    %rax,%rdi
ffffffff80212854:	e8 65 9f ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
    }

    return 0;
ffffffff80212859:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021285e:	c9                   	leave
ffffffff8021285f:	c3                   	ret

ffffffff80212860 <_RME_Kom_Boot_Crt>:
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Kom,
                            rme_ptr_t Begin,
                            rme_ptr_t End,
                            rme_ptr_t Flag)
{
ffffffff80212860:	55                   	push   %rbp
ffffffff80212861:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212864:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80212868:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021286c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80212870:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80212874:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80212878:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff8021287c:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Kom_Begin;
    rme_ptr_t Kom_End;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212880:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212884:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80212889:	48 85 c0             	test   %rax,%rax
ffffffff8021288c:	0f 85 98 00 00 00    	jne    ffffffff8021292a <_RME_Kom_Boot_Crt+0xca>
ffffffff80212892:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212896:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021289a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8021289e:	48 39 c2             	cmp    %rax,%rdx
ffffffff802128a1:	0f 93 c0             	setae  %al
ffffffff802128a4:	0f b6 c0             	movzbl %al,%eax
ffffffff802128a7:	48 85 c0             	test   %rax,%rax
ffffffff802128aa:	74 0c                	je     ffffffff802128b8 <_RME_Kom_Boot_Crt+0x58>
ffffffff802128ac:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802128b3:	e9 d4 02 00 00       	jmp    ffffffff80212b8c <_RME_Kom_Boot_Crt+0x32c>
ffffffff802128b8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802128bc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802128c0:	48 89 c2             	mov    %rax,%rdx
ffffffff802128c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802128c7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802128cb:	48 01 d0             	add    %rdx,%rax
ffffffff802128ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802128d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802128d6:	48 8b 00             	mov    (%rax),%rax
ffffffff802128d9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802128dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802128e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802128e5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802128e8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802128ec:	0f 94 c0             	sete   %al
ffffffff802128ef:	0f b6 c0             	movzbl %al,%eax
ffffffff802128f2:	48 85 c0             	test   %rax,%rax
ffffffff802128f5:	74 0c                	je     ffffffff80212903 <_RME_Kom_Boot_Crt+0xa3>
ffffffff802128f7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802128fe:	e9 89 02 00 00       	jmp    ffffffff80212b8c <_RME_Kom_Boot_Crt+0x32c>
ffffffff80212903:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212907:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021290b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021290f:	0f 95 c0             	setne  %al
ffffffff80212912:	0f b6 c0             	movzbl %al,%eax
ffffffff80212915:	48 85 c0             	test   %rax,%rax
ffffffff80212918:	0f 84 4c 01 00 00    	je     ffffffff80212a6a <_RME_Kom_Boot_Crt+0x20a>
ffffffff8021291e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212925:	e9 62 02 00 00       	jmp    ffffffff80212b8c <_RME_Kom_Boot_Crt+0x32c>
ffffffff8021292a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021292e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80212932:	48 89 c2             	mov    %rax,%rdx
ffffffff80212935:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212939:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021293d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212940:	0f 93 c0             	setae  %al
ffffffff80212943:	0f b6 c0             	movzbl %al,%eax
ffffffff80212946:	48 85 c0             	test   %rax,%rax
ffffffff80212949:	74 0c                	je     ffffffff80212957 <_RME_Kom_Boot_Crt+0xf7>
ffffffff8021294b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212952:	e9 35 02 00 00       	jmp    ffffffff80212b8c <_RME_Kom_Boot_Crt+0x32c>
ffffffff80212957:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021295b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021295f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212963:	48 89 c2             	mov    %rax,%rdx
ffffffff80212966:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021296a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021296e:	48 01 d0             	add    %rdx,%rax
ffffffff80212971:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212975:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212979:	48 8b 00             	mov    (%rax),%rax
ffffffff8021297c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212980:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212984:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212988:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021298b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021298f:	0f 94 c0             	sete   %al
ffffffff80212992:	0f b6 c0             	movzbl %al,%eax
ffffffff80212995:	48 85 c0             	test   %rax,%rax
ffffffff80212998:	74 0c                	je     ffffffff802129a6 <_RME_Kom_Boot_Crt+0x146>
ffffffff8021299a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802129a1:	e9 e6 01 00 00       	jmp    ffffffff80212b8c <_RME_Kom_Boot_Crt+0x32c>
ffffffff802129a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802129aa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802129ae:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802129b2:	0f 95 c0             	setne  %al
ffffffff802129b5:	0f b6 c0             	movzbl %al,%eax
ffffffff802129b8:	48 85 c0             	test   %rax,%rax
ffffffff802129bb:	74 0c                	je     ffffffff802129c9 <_RME_Kom_Boot_Crt+0x169>
ffffffff802129bd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802129c4:	e9 c3 01 00 00       	jmp    ffffffff80212b8c <_RME_Kom_Boot_Crt+0x32c>
ffffffff802129c9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802129cd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802129d2:	48 89 c2             	mov    %rax,%rdx
ffffffff802129d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802129d9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802129dd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802129e0:	0f 93 c0             	setae  %al
ffffffff802129e3:	0f b6 c0             	movzbl %al,%eax
ffffffff802129e6:	48 85 c0             	test   %rax,%rax
ffffffff802129e9:	74 0c                	je     ffffffff802129f7 <_RME_Kom_Boot_Crt+0x197>
ffffffff802129eb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802129f2:	e9 95 01 00 00       	jmp    ffffffff80212b8c <_RME_Kom_Boot_Crt+0x32c>
ffffffff802129f7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802129fb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212a00:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212a04:	48 89 c2             	mov    %rax,%rdx
ffffffff80212a07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212a0b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212a0f:	48 01 d0             	add    %rdx,%rax
ffffffff80212a12:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212a16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212a1a:	48 8b 00             	mov    (%rax),%rax
ffffffff80212a1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212a21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212a25:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212a29:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212a2c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212a30:	0f 94 c0             	sete   %al
ffffffff80212a33:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a36:	48 85 c0             	test   %rax,%rax
ffffffff80212a39:	74 0c                	je     ffffffff80212a47 <_RME_Kom_Boot_Crt+0x1e7>
ffffffff80212a3b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212a42:	e9 45 01 00 00       	jmp    ffffffff80212b8c <_RME_Kom_Boot_Crt+0x32c>
ffffffff80212a47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212a4b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212a4f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212a53:	0f 95 c0             	setne  %al
ffffffff80212a56:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a59:	48 85 c0             	test   %rax,%rax
ffffffff80212a5c:	74 0c                	je     ffffffff80212a6a <_RME_Kom_Boot_Crt+0x20a>
ffffffff80212a5e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212a65:	e9 22 01 00 00       	jmp    ffffffff80212b8c <_RME_Kom_Boot_Crt+0x32c>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80212a6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212a6e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212a72:	83 e0 01             	and    $0x1,%eax
ffffffff80212a75:	48 85 c0             	test   %rax,%rax
ffffffff80212a78:	0f 94 c0             	sete   %al
ffffffff80212a7b:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a7e:	48 85 c0             	test   %rax,%rax
ffffffff80212a81:	74 0c                	je     ffffffff80212a8f <_RME_Kom_Boot_Crt+0x22f>
ffffffff80212a83:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80212a8a:	e9 fd 00 00 00       	jmp    ffffffff80212b8c <_RME_Kom_Boot_Crt+0x32c>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kom,struct RME_Cap_Kom*,Kom_Crt);
ffffffff80212a8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212a93:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212a97:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80212a9b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212a9e:	0f 93 c0             	setae  %al
ffffffff80212aa1:	0f b6 c0             	movzbl %al,%eax
ffffffff80212aa4:	48 85 c0             	test   %rax,%rax
ffffffff80212aa7:	74 0c                	je     ffffffff80212ab5 <_RME_Kom_Boot_Crt+0x255>
ffffffff80212aa9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212ab0:	e9 d7 00 00 00       	jmp    ffffffff80212b8c <_RME_Kom_Boot_Crt+0x32c>
ffffffff80212ab5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80212ab9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212abd:	48 89 c2             	mov    %rax,%rdx
ffffffff80212ac0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212ac4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212ac8:	48 01 d0             	add    %rdx,%rax
ffffffff80212acb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff80212acf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ad3:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80212ada:	00 00 00 
ffffffff80212add:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80212ae2:	48 89 c7             	mov    %rax,%rdi
ffffffff80212ae5:	e8 74 9c ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212aea:	48 85 c0             	test   %rax,%rax
ffffffff80212aed:	0f 94 c0             	sete   %al
ffffffff80212af0:	0f b6 c0             	movzbl %al,%eax
ffffffff80212af3:	48 85 c0             	test   %rax,%rax
ffffffff80212af6:	74 0c                	je     ffffffff80212b04 <_RME_Kom_Boot_Crt+0x2a4>
ffffffff80212af8:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80212aff:	e9 88 00 00 00       	jmp    ffffffff80212b8c <_RME_Kom_Boot_Crt+0x32c>
ffffffff80212b04:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80212b09:	e8 03 9d ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80212b0e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80212b12:	48 89 42 20          	mov    %rax,0x20(%rdx)
    /* Align addresses */
#if(RME_KOM_SLOT_ORDER>6U)
    Kom_End=RME_ROUND_DOWN(End+1U,RME_KOM_SLOT_ORDER);
    Kom_Begin=RME_ROUND_UP(Start,RME_KOM_SLOT_ORDER);
#else
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff80212b16:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80212b1a:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212b1e:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff80212b22:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff80212b26:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80212b2a:	48 83 c0 3f          	add    $0x3f,%rax
ffffffff80212b2e:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff80212b32:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    /* Must at least allow creation of something */
    RME_ASSERT(Flag!=0U);

    /* Header init */
    Kom_Crt->Head.Root_Ref=1U;
ffffffff80212b36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212b3a:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff80212b41:	00 
    Kom_Crt->Head.Object=0U;
ffffffff80212b42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212b46:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80212b4d:	00 
    Kom_Crt->Head.Flag=Flag;
ffffffff80212b4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212b52:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80212b56:	48 89 50 10          	mov    %rdx,0x10(%rax)
    
    /* Info init */
    Kom_Crt->Begin=Kom_Begin;
ffffffff80212b5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212b5e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80212b62:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Kom_Crt->End=Kom_End-1U;
ffffffff80212b66:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212b6a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80212b6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212b72:	48 89 50 30          	mov    %rdx,0x30(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff80212b76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212b7a:	48 b9 00 00 00 00 00 	movabs $0x2000000000000,%rcx
ffffffff80212b81:	00 02 00 
ffffffff80212b84:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_KOM,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80212b87:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212b8c:	c9                   	leave
ffffffff80212b8d:	c3                   	ret

ffffffff80212b8e <_RME_CPU_Local_Init>:
Output      : None.
Return      : None.
******************************************************************************/
void _RME_CPU_Local_Init(struct RME_CPU_Local* Local,
                         rme_ptr_t CPUID)
{
ffffffff80212b8e:	55                   	push   %rbp
ffffffff80212b8f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212b92:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212b96:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80212b9a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Prio_Cnt;
    
    Local->CPUID=CPUID;
ffffffff80212b9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ba2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80212ba6:	48 89 10             	mov    %rdx,(%rax)
    Local->Thd_Cur=RME_NULL;
ffffffff80212ba9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212bad:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80212bb4:	00 
    Local->Sig_Vct=RME_NULL;
ffffffff80212bb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212bb9:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80212bc0:	00 
    Local->Sig_Tim=RME_NULL;
ffffffff80212bc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212bc5:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80212bcc:	00 
    
    /* Initialize the run-queue and bitmap */
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80212bcd:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80212bd4:	00 
ffffffff80212bd5:	eb 42                	jmp    ffffffff80212c19 <_RME_CPU_Local_Init+0x8b>
    {
        Local->Run.Bitmap[Prio_Cnt>>RME_WORD_ORDER]=0U;
ffffffff80212bd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212bdb:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212bdf:	48 89 c2             	mov    %rax,%rdx
ffffffff80212be2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212be6:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212bea:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
ffffffff80212bf1:	00 
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
ffffffff80212bf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212bf6:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212bfa:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212bfe:	48 89 c2             	mov    %rax,%rdx
ffffffff80212c01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c05:	48 01 d0             	add    %rdx,%rax
ffffffff80212c08:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212c0c:	48 89 c7             	mov    %rax,%rdi
ffffffff80212c0f:	e8 44 a1 ff ff       	call   ffffffff8020cd58 <_RME_List_Crt>
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80212c14:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212c19:	48 83 7d f8 3f       	cmpq   $0x3f,-0x8(%rbp)
ffffffff80212c1e:	76 b7                	jbe    ffffffff80212bd7 <_RME_CPU_Local_Init+0x49>
    }
}
ffffffff80212c20:	90                   	nop
ffffffff80212c21:	90                   	nop
ffffffff80212c22:	c9                   	leave
ffffffff80212c23:	c3                   	ret

ffffffff80212c24 <_RME_Thd_Fatal>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Thd_Fatal(struct RME_Reg_Struct* Reg)
{
ffffffff80212c24:	55                   	push   %rbp
ffffffff80212c25:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212c28:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212c2c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    
    /* Attempt to return from the invocation, from fault */
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80212c30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c34:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212c39:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80212c3e:	48 89 c7             	mov    %rax,%rdi
ffffffff80212c41:	e8 2f 7c 00 00       	call   ffffffff8021a875 <_RME_Inv_Ret>
ffffffff80212c46:	48 85 c0             	test   %rax,%rax
ffffffff80212c49:	74 6f                	je     ffffffff80212cba <_RME_Thd_Fatal+0x96>
    {
        RME_COV_MARKER();

        /* Return failure - report the exception */
        Local=RME_CPU_LOCAL();
ffffffff80212c4b:	e8 ef 8b ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80212c50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        Thd_Cur=Local->Thd_Cur;
ffffffff80212c54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212c58:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212c5c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        
        /* Init thread shall never have exceptions */
        if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80212c60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212c64:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80212c68:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80212c6f:	ff ff 7f 
ffffffff80212c72:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212c75:	75 0c                	jne    ffffffff80212c83 <_RME_Thd_Fatal+0x5f>
        {
            RME_COV_MARKER();
            
            RME_DBG_S("Attempted to kill init thread.");
ffffffff80212c77:	48 c7 c7 e8 70 22 80 	mov    $0xffffffff802270e8,%rdi
ffffffff80212c7e:	e8 a2 9d ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
        
        /* We must be running at this point to trigger a synchronous exception */
        RME_ASSERT(Thd_Cur->Sched.State==RME_THD_READY);
        
        /* Remove from runqueue */
        _RME_Run_Del(Thd_Cur);
ffffffff80212c83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212c87:	48 89 c7             	mov    %rax,%rdi
ffffffff80212c8a:	e8 da 00 00 00       	call   ffffffff80212d69 <_RME_Run_Del>
        
        /* Exception pending and notify parent */
        Thd_Cur->Sched.State=RME_THD_EXCPEND;
ffffffff80212c8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212c93:	48 c7 40 38 03 00 00 	movq   $0x3,0x38(%rax)
ffffffff80212c9a:	00 
        _RME_Run_Notif(Thd_Cur);
ffffffff80212c9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212c9f:	48 89 c7             	mov    %rax,%rdi
ffffffff80212ca2:	e8 05 02 00 00       	call   ffffffff80212eac <_RME_Run_Notif>
        
        /* All kernel send complete, now pick the highest priority thread to run */
        _RME_Kern_High(Reg,Local);
ffffffff80212ca7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212cab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212caf:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212cb2:	48 89 c7             	mov    %rax,%rdi
ffffffff80212cb5:	e8 53 60 00 00       	call   ffffffff80218d0d <_RME_Kern_High>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212cba:	90                   	nop
ffffffff80212cbb:	c9                   	leave
ffffffff80212cbc:	c3                   	ret

ffffffff80212cbd <_RME_Run_Ins>:
              rme_ptr_t CPUID - The cpu to consult.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Ins(struct RME_Thd_Struct* Thd)
{
ffffffff80212cbd:	55                   	push   %rbp
ffffffff80212cbe:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212cc1:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212cc5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff80212cc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ccd:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80212cd1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Local=Thd->Sched.Local;
ffffffff80212cd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212cd9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212cdd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Insert this thread into the runqueue */
    _RME_List_Ins(&(Thd->Sched.Run),
                  Local->Run.List[Prio].Prev,
                  &(Local->Run.List[Prio]));
ffffffff80212ce1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212ce5:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212ce9:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212ced:	48 89 c2             	mov    %rax,%rdx
ffffffff80212cf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212cf4:	48 01 d0             	add    %rdx,%rax
ffffffff80212cf7:	48 8d 50 08          	lea    0x8(%rax),%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80212cfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212cff:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80212d03:	48 83 c1 02          	add    $0x2,%rcx
ffffffff80212d07:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff80212d0b:	48 01 c8             	add    %rcx,%rax
ffffffff80212d0e:	48 83 c0 10          	add    $0x10,%rax
ffffffff80212d12:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212d15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d19:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212d1c:	48 89 c7             	mov    %rax,%rdi
ffffffff80212d1f:	e8 84 a0 ff ff       	call   ffffffff8020cda8 <_RME_List_Ins>
    
    /* Set the bit in the bitmap */
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80212d24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212d28:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212d2c:	48 89 c2             	mov    %rax,%rdx
ffffffff80212d2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212d33:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212d37:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212d3b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212d3f:	83 e2 3f             	and    $0x3f,%edx
ffffffff80212d42:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80212d47:	89 d1                	mov    %edx,%ecx
ffffffff80212d49:	48 d3 e6             	shl    %cl,%rsi
ffffffff80212d4c:	48 89 f1             	mov    %rsi,%rcx
ffffffff80212d4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212d53:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff80212d57:	48 09 c1             	or     %rax,%rcx
ffffffff80212d5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212d5e:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212d62:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
}
ffffffff80212d66:	90                   	nop
ffffffff80212d67:	c9                   	leave
ffffffff80212d68:	c3                   	ret

ffffffff80212d69 <_RME_Run_Del>:
Input       : struct RME_Thd_Struct* Thd - The thread to delete.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
ffffffff80212d69:	55                   	push   %rbp
ffffffff80212d6a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212d6d:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212d71:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff80212d75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d79:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80212d7d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Local=Thd->Sched.Local;
ffffffff80212d81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d85:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212d89:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* It can't be free or there must be an error */
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Delete this thread from the runqueue */
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80212d8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d91:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212d94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d98:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212d9c:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212d9f:	48 89 c7             	mov    %rax,%rdi
ffffffff80212da2:	e8 d7 9f ff ff       	call   ffffffff8020cd7e <_RME_List_Del>
    
    /* See if there are any thread on this priority level */
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff80212da7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212dab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212daf:	48 83 c2 02          	add    $0x2,%rdx
ffffffff80212db3:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80212db7:	48 01 d0             	add    %rdx,%rax
ffffffff80212dba:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212dbe:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212dc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212dc5:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212dc9:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212dcd:	48 89 c1             	mov    %rax,%rcx
ffffffff80212dd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212dd4:	48 01 c8             	add    %rcx,%rax
ffffffff80212dd7:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212ddb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212dde:	75 4b                	jne    ffffffff80212e2b <_RME_Run_Del+0xc2>
    {
        RME_COV_MARKER();

        /* Nothing running, clear the bit in the bitmap */
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff80212de0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212de4:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212de8:	48 89 c2             	mov    %rax,%rdx
ffffffff80212deb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212def:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212df3:	48 8b 34 d0          	mov    (%rax,%rdx,8),%rsi
ffffffff80212df7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212dfb:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212dfe:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212e03:	89 c1                	mov    %eax,%ecx
ffffffff80212e05:	48 d3 e2             	shl    %cl,%rdx
ffffffff80212e08:	48 89 d0             	mov    %rdx,%rax
ffffffff80212e0b:	48 f7 d0             	not    %rax
ffffffff80212e0e:	48 89 c1             	mov    %rax,%rcx
ffffffff80212e11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e15:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212e19:	48 89 c2             	mov    %rax,%rdx
ffffffff80212e1c:	48 21 f1             	and    %rsi,%rcx
ffffffff80212e1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e23:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212e27:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212e2b:	90                   	nop
ffffffff80212e2c:	c9                   	leave
ffffffff80212e2d:	c3                   	ret

ffffffff80212e2e <_RME_Run_High>:
Input       : struct RME_CPU_Local* Local - The CPU-local data structure.
Output      : None.
Return      : struct RME_Thd_Struct* - The thread returned.
******************************************************************************/
static struct RME_Thd_Struct* _RME_Run_High(struct RME_CPU_Local* Local)
{
ffffffff80212e2e:	55                   	push   %rbp
ffffffff80212e2f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212e32:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212e36:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_cnt_t Count;
    rme_ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=(rme_cnt_t)(RME_PRIO_WORD_NUM-1U);Count>=0;Count--)
ffffffff80212e3a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80212e41:	00 
ffffffff80212e42:	eb 1a                	jmp    ffffffff80212e5e <_RME_Run_High+0x30>
    {
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80212e44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e48:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212e4c:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212e50:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212e54:	48 85 c0             	test   %rax,%rax
ffffffff80212e57:	75 0e                	jne    ffffffff80212e67 <_RME_Run_High+0x39>
    for(Count=(rme_cnt_t)(RME_PRIO_WORD_NUM-1U);Count>=0;Count--)
ffffffff80212e59:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff80212e5e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80212e63:	79 df                	jns    ffffffff80212e44 <_RME_Run_High+0x16>
ffffffff80212e65:	eb 01                	jmp    ffffffff80212e68 <_RME_Run_High+0x3a>
        {
            RME_COV_MARKER();
            
            break;
ffffffff80212e67:	90                   	nop
    
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);

    /* Get the first "1"'s position in the word */
    Prio=RME_MSB_GET(Local->Run.Bitmap[Count]);
ffffffff80212e68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e6c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212e70:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212e74:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212e78:	48 89 c7             	mov    %rax,%rdi
ffffffff80212e7b:	e8 6b 99 ff ff       	call   ffffffff8020c7eb <_RME_X64_MSB_Get>
ffffffff80212e80:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80212e84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e88:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212e8c:	48 01 45 f0          	add    %rax,-0x10(%rbp)

    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80212e90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e94:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80212e98:	48 83 c2 02          	add    $0x2,%rdx
ffffffff80212e9c:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80212ea0:	48 01 d0             	add    %rdx,%rax
ffffffff80212ea3:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212ea7:	48 8b 00             	mov    (%rax),%rax
}
ffffffff80212eaa:	c9                   	leave
ffffffff80212eab:	c3                   	ret

ffffffff80212eac <_RME_Run_Notif>:
Input       : struct RME_Thd_Struct* Thd - The thread to send notification for.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
ffffffff80212eac:	55                   	push   %rbp
ffffffff80212ead:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212eb0:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212eb4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Thd_Struct* Sched_Thd;
    
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80212eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ebc:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80212ec0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80212ec4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ec8:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80212ecc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ed0:	48 83 c0 10          	add    $0x10,%rax
ffffffff80212ed4:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212ed7:	75 26                	jne    ffffffff80212eff <_RME_Run_Notif+0x53>
    {
        RME_COV_MARKER();

        _RME_List_Ins(&(Thd->Sched.Notif), 
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff80212ed9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212edd:	48 8d 50 78          	lea    0x78(%rax),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80212ee1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212ee5:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80212eec:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80212ef0:	48 83 c1 10          	add    $0x10,%rcx
ffffffff80212ef4:	48 89 c6             	mov    %rax,%rsi
ffffffff80212ef7:	48 89 cf             	mov    %rcx,%rdi
ffffffff80212efa:	e8 a9 9e ff ff       	call   ffffffff8020cda8 <_RME_List_Ins>
        RME_COV_MARKER();
        /* No action required */
    }

    /* If this guy have an endpoint, send to it */
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80212eff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f03:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80212f07:	48 85 c0             	test   %rax,%rax
ffffffff80212f0a:	74 10                	je     ffffffff80212f1c <_RME_Run_Notif+0x70>
    {
        RME_COV_MARKER();
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80212f0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f10:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80212f14:	48 89 c7             	mov    %rax,%rdi
ffffffff80212f17:	e8 74 5e 00 00       	call   ffffffff80218d90 <_RME_Kern_Snd>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212f1c:	90                   	nop
ffffffff80212f1d:	c9                   	leave
ffffffff80212f1e:	c3                   	ret

ffffffff80212f1f <_RME_Thd_Pgt>:
#if(RME_PGT_RAW_ENABLE==0U)
struct RME_Cap_Pgt* _RME_Thd_Pgt(struct RME_Thd_Struct* Thd)
#else
rme_ptr_t _RME_Thd_Pgt(struct RME_Thd_Struct* Thd)
#endif
{
ffffffff80212f1f:	55                   	push   %rbp
ffffffff80212f20:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212f23:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212f27:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Inv_Struct* Inv_Top;
    
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80212f2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f2f:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff80212f36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f3a:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff80212f40:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212f43:	74 0d                	je     ffffffff80212f52 <_RME_Thd_Pgt+0x33>
ffffffff80212f45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f49:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff80212f50:	eb 05                	jmp    ffffffff80212f57 <_RME_Thd_Pgt+0x38>
ffffffff80212f52:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80212f57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    if(Inv_Top==(void*)RME_NULL)
ffffffff80212f5b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80212f60:	75 0e                	jne    ffffffff80212f70 <_RME_Thd_Pgt+0x51>
    {
        RME_COV_MARKER();

        return Thd->Sched.Prc->Pgt;
ffffffff80212f62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f66:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80212f6a:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80212f6e:	eb 0c                	jmp    ffffffff80212f7c <_RME_Thd_Pgt+0x5d>
    }
    else
    {
        RME_COV_MARKER();

        return Inv_Top->Prc->Pgt;
ffffffff80212f70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212f74:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212f78:	48 8b 40 30          	mov    0x30(%rax),%rax
    }
}
ffffffff80212f7c:	c9                   	leave
ffffffff80212f7d:	c3                   	ret

ffffffff80212f7e <_RME_Run_Swt>:
Return      : rme_ret_t - Always 0.
******************************************************************************/
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
                              struct RME_Thd_Struct* Thd_Cur, 
                              struct RME_Thd_Struct* Thd_New)
{
ffffffff80212f7e:	55                   	push   %rbp
ffffffff80212f7f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212f82:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80212f86:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80212f8a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80212f8e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Pgt_New;
#endif
    struct RME_Reg_Struct* Reg_Cur;
    struct RME_Reg_Struct* Reg_New;
    
    Reg_Cur=&(Thd_Cur->Ctx.Reg->Reg);
ffffffff80212f92:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80212f96:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80212f9d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff80212fa1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212fa5:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80212fac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Save register context */
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff80212fb0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80212fb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212fb8:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212fbb:	48 89 c7             	mov    %rax,%rdi
ffffffff80212fbe:	e8 ab 2c 01 00       	call   ffffffff80225c6e <__RME_Thd_Reg_Copy>
                       RME_THD_IS_HYP(Thd_Cur->Ctx.Hyp_Attr),
                       Reg_Cur,Thd_Cur->Ctx.Reg->Cop);
#endif

    /* Load register context */
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80212fc3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80212fc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212fcb:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212fce:	48 89 c7             	mov    %rax,%rdi
ffffffff80212fd1:	e8 98 2c 01 00       	call   ffffffff80225c6e <__RME_Thd_Reg_Copy>

    /* Are we going to switch page tables? If yes, we change it now */
    Pgt_Cur=_RME_Thd_Pgt(Thd_Cur);
ffffffff80212fd6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80212fda:	48 89 c7             	mov    %rax,%rdi
ffffffff80212fdd:	e8 3d ff ff ff       	call   ffffffff80212f1f <_RME_Thd_Pgt>
ffffffff80212fe2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Pgt_New=_RME_Thd_Pgt(Thd_New);
ffffffff80212fe6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212fea:	48 89 c7             	mov    %rax,%rdi
ffffffff80212fed:	e8 2d ff ff ff       	call   ffffffff80212f1f <_RME_Thd_Pgt>
ffffffff80212ff2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_Cur)!=0U);
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_New)!=0U);
#endif
    
#if(RME_PGT_RAW_ENABLE==0U)
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff80212ff6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ffa:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff80212ffe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213002:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213006:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213009:	74 0c                	je     ffffffff80213017 <_RME_Run_Swt+0x99>
    if(Pgt_Cur!=Pgt_New)
#endif
    {
        RME_COV_MARKER();
        
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff8021300b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021300f:	48 89 c7             	mov    %rax,%rdi
ffffffff80213012:	e8 ce 35 01 00       	call   ffffffff802265e5 <__RME_Pgt_Set>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff80213017:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021301c:	c9                   	leave
ffffffff8021301d:	c3                   	ret

ffffffff8021301e <_RME_Prc_Boot_Crt>:
                            rme_cid_t Cap_Cpt_Crt,
                            rme_cid_t Cap_Prc,
                            rme_cid_t Cap_Cpt,
                            rme_ptr_t Raw_Pgt)
#endif
{
ffffffff8021301e:	55                   	push   %rbp
ffffffff8021301f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80213022:	48 83 ec 68          	sub    $0x68,%rsp
ffffffff80213026:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8021302a:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff8021302e:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff80213032:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff80213036:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8021303a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021303e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213043:	48 85 c0             	test   %rax,%rax
ffffffff80213046:	0f 85 98 00 00 00    	jne    ffffffff802130e4 <_RME_Prc_Boot_Crt+0xc6>
ffffffff8021304c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213050:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213054:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80213058:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021305b:	0f 93 c0             	setae  %al
ffffffff8021305e:	0f b6 c0             	movzbl %al,%eax
ffffffff80213061:	48 85 c0             	test   %rax,%rax
ffffffff80213064:	74 0c                	je     ffffffff80213072 <_RME_Prc_Boot_Crt+0x54>
ffffffff80213066:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021306d:	e9 38 07 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff80213072:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213076:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021307a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021307d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213081:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213085:	48 01 d0             	add    %rdx,%rax
ffffffff80213088:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021308c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213090:	48 8b 00             	mov    (%rax),%rax
ffffffff80213093:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213097:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021309b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021309f:	0f b7 c0             	movzwl %ax,%eax
ffffffff802130a2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802130a6:	0f 94 c0             	sete   %al
ffffffff802130a9:	0f b6 c0             	movzbl %al,%eax
ffffffff802130ac:	48 85 c0             	test   %rax,%rax
ffffffff802130af:	74 0c                	je     ffffffff802130bd <_RME_Prc_Boot_Crt+0x9f>
ffffffff802130b1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802130b8:	e9 ed 06 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff802130bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802130c1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802130c5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802130c9:	0f 95 c0             	setne  %al
ffffffff802130cc:	0f b6 c0             	movzbl %al,%eax
ffffffff802130cf:	48 85 c0             	test   %rax,%rax
ffffffff802130d2:	0f 84 4c 01 00 00    	je     ffffffff80213224 <_RME_Prc_Boot_Crt+0x206>
ffffffff802130d8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802130df:	e9 c6 06 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff802130e4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802130e8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802130ec:	48 89 c2             	mov    %rax,%rdx
ffffffff802130ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802130f3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802130f7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802130fa:	0f 93 c0             	setae  %al
ffffffff802130fd:	0f b6 c0             	movzbl %al,%eax
ffffffff80213100:	48 85 c0             	test   %rax,%rax
ffffffff80213103:	74 0c                	je     ffffffff80213111 <_RME_Prc_Boot_Crt+0xf3>
ffffffff80213105:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021310c:	e9 99 06 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff80213111:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213115:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213119:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021311d:	48 89 c2             	mov    %rax,%rdx
ffffffff80213120:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213124:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213128:	48 01 d0             	add    %rdx,%rax
ffffffff8021312b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021312f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213133:	48 8b 00             	mov    (%rax),%rax
ffffffff80213136:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021313a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021313e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213142:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213145:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213149:	0f 94 c0             	sete   %al
ffffffff8021314c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021314f:	48 85 c0             	test   %rax,%rax
ffffffff80213152:	74 0c                	je     ffffffff80213160 <_RME_Prc_Boot_Crt+0x142>
ffffffff80213154:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021315b:	e9 4a 06 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff80213160:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213164:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213168:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021316c:	0f 95 c0             	setne  %al
ffffffff8021316f:	0f b6 c0             	movzbl %al,%eax
ffffffff80213172:	48 85 c0             	test   %rax,%rax
ffffffff80213175:	74 0c                	je     ffffffff80213183 <_RME_Prc_Boot_Crt+0x165>
ffffffff80213177:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021317e:	e9 27 06 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff80213183:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213187:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021318c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021318f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213193:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213197:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021319a:	0f 93 c0             	setae  %al
ffffffff8021319d:	0f b6 c0             	movzbl %al,%eax
ffffffff802131a0:	48 85 c0             	test   %rax,%rax
ffffffff802131a3:	74 0c                	je     ffffffff802131b1 <_RME_Prc_Boot_Crt+0x193>
ffffffff802131a5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802131ac:	e9 f9 05 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff802131b1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802131b5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802131ba:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802131be:	48 89 c2             	mov    %rax,%rdx
ffffffff802131c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802131c5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802131c9:	48 01 d0             	add    %rdx,%rax
ffffffff802131cc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802131d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802131d4:	48 8b 00             	mov    (%rax),%rax
ffffffff802131d7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802131db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802131df:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802131e3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802131e6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802131ea:	0f 94 c0             	sete   %al
ffffffff802131ed:	0f b6 c0             	movzbl %al,%eax
ffffffff802131f0:	48 85 c0             	test   %rax,%rax
ffffffff802131f3:	74 0c                	je     ffffffff80213201 <_RME_Prc_Boot_Crt+0x1e3>
ffffffff802131f5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802131fc:	e9 a9 05 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff80213201:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213205:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213209:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021320d:	0f 95 c0             	setne  %al
ffffffff80213210:	0f b6 c0             	movzbl %al,%eax
ffffffff80213213:	48 85 c0             	test   %rax,%rax
ffffffff80213216:	74 0c                	je     ffffffff80213224 <_RME_Prc_Boot_Crt+0x206>
ffffffff80213218:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021321f:	e9 86 05 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213224:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213228:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021322d:	48 85 c0             	test   %rax,%rax
ffffffff80213230:	0f 85 98 00 00 00    	jne    ffffffff802132ce <_RME_Prc_Boot_Crt+0x2b0>
ffffffff80213236:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021323a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021323e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80213242:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213245:	0f 93 c0             	setae  %al
ffffffff80213248:	0f b6 c0             	movzbl %al,%eax
ffffffff8021324b:	48 85 c0             	test   %rax,%rax
ffffffff8021324e:	74 0c                	je     ffffffff8021325c <_RME_Prc_Boot_Crt+0x23e>
ffffffff80213250:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213257:	e9 4e 05 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff8021325c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213260:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213264:	48 89 c2             	mov    %rax,%rdx
ffffffff80213267:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021326b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021326f:	48 01 d0             	add    %rdx,%rax
ffffffff80213272:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213276:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021327a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021327d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213281:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213285:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213289:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021328c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213290:	0f 94 c0             	sete   %al
ffffffff80213293:	0f b6 c0             	movzbl %al,%eax
ffffffff80213296:	48 85 c0             	test   %rax,%rax
ffffffff80213299:	74 0c                	je     ffffffff802132a7 <_RME_Prc_Boot_Crt+0x289>
ffffffff8021329b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802132a2:	e9 03 05 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff802132a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802132ab:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802132af:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802132b3:	0f 95 c0             	setne  %al
ffffffff802132b6:	0f b6 c0             	movzbl %al,%eax
ffffffff802132b9:	48 85 c0             	test   %rax,%rax
ffffffff802132bc:	0f 84 4c 01 00 00    	je     ffffffff8021340e <_RME_Prc_Boot_Crt+0x3f0>
ffffffff802132c2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802132c9:	e9 dc 04 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff802132ce:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802132d2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802132d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802132d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802132dd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802132e1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802132e4:	0f 93 c0             	setae  %al
ffffffff802132e7:	0f b6 c0             	movzbl %al,%eax
ffffffff802132ea:	48 85 c0             	test   %rax,%rax
ffffffff802132ed:	74 0c                	je     ffffffff802132fb <_RME_Prc_Boot_Crt+0x2dd>
ffffffff802132ef:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802132f6:	e9 af 04 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff802132fb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802132ff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213303:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213307:	48 89 c2             	mov    %rax,%rdx
ffffffff8021330a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021330e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213312:	48 01 d0             	add    %rdx,%rax
ffffffff80213315:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213319:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021331d:	48 8b 00             	mov    (%rax),%rax
ffffffff80213320:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213324:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213328:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021332c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021332f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213333:	0f 94 c0             	sete   %al
ffffffff80213336:	0f b6 c0             	movzbl %al,%eax
ffffffff80213339:	48 85 c0             	test   %rax,%rax
ffffffff8021333c:	74 0c                	je     ffffffff8021334a <_RME_Prc_Boot_Crt+0x32c>
ffffffff8021333e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213345:	e9 60 04 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff8021334a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021334e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213352:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213356:	0f 95 c0             	setne  %al
ffffffff80213359:	0f b6 c0             	movzbl %al,%eax
ffffffff8021335c:	48 85 c0             	test   %rax,%rax
ffffffff8021335f:	74 0c                	je     ffffffff8021336d <_RME_Prc_Boot_Crt+0x34f>
ffffffff80213361:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213368:	e9 3d 04 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff8021336d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213371:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213376:	48 89 c2             	mov    %rax,%rdx
ffffffff80213379:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021337d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213381:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213384:	0f 93 c0             	setae  %al
ffffffff80213387:	0f b6 c0             	movzbl %al,%eax
ffffffff8021338a:	48 85 c0             	test   %rax,%rax
ffffffff8021338d:	74 0c                	je     ffffffff8021339b <_RME_Prc_Boot_Crt+0x37d>
ffffffff8021338f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213396:	e9 0f 04 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff8021339b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021339f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802133a4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802133a8:	48 89 c2             	mov    %rax,%rdx
ffffffff802133ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802133af:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802133b3:	48 01 d0             	add    %rdx,%rax
ffffffff802133b6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802133ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802133be:	48 8b 00             	mov    (%rax),%rax
ffffffff802133c1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802133c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802133c9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802133cd:	0f b7 c0             	movzwl %ax,%eax
ffffffff802133d0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802133d4:	0f 94 c0             	sete   %al
ffffffff802133d7:	0f b6 c0             	movzbl %al,%eax
ffffffff802133da:	48 85 c0             	test   %rax,%rax
ffffffff802133dd:	74 0c                	je     ffffffff802133eb <_RME_Prc_Boot_Crt+0x3cd>
ffffffff802133df:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802133e6:	e9 bf 03 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff802133eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802133ef:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802133f3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802133f7:	0f 95 c0             	setne  %al
ffffffff802133fa:	0f b6 c0             	movzbl %al,%eax
ffffffff802133fd:	48 85 c0             	test   %rax,%rax
ffffffff80213400:	74 0c                	je     ffffffff8021340e <_RME_Prc_Boot_Crt+0x3f0>
ffffffff80213402:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213409:	e9 9c 03 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8021340e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213412:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213417:	48 85 c0             	test   %rax,%rax
ffffffff8021341a:	0f 85 98 00 00 00    	jne    ffffffff802134b8 <_RME_Prc_Boot_Crt+0x49a>
ffffffff80213420:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213424:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213428:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff8021342c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021342f:	0f 93 c0             	setae  %al
ffffffff80213432:	0f b6 c0             	movzbl %al,%eax
ffffffff80213435:	48 85 c0             	test   %rax,%rax
ffffffff80213438:	74 0c                	je     ffffffff80213446 <_RME_Prc_Boot_Crt+0x428>
ffffffff8021343a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213441:	e9 64 03 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff80213446:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021344a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021344e:	48 89 c2             	mov    %rax,%rdx
ffffffff80213451:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213455:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213459:	48 01 d0             	add    %rdx,%rax
ffffffff8021345c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213460:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213464:	48 8b 00             	mov    (%rax),%rax
ffffffff80213467:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021346b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021346f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213473:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213476:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021347a:	0f 94 c0             	sete   %al
ffffffff8021347d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213480:	48 85 c0             	test   %rax,%rax
ffffffff80213483:	74 0c                	je     ffffffff80213491 <_RME_Prc_Boot_Crt+0x473>
ffffffff80213485:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021348c:	e9 19 03 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff80213491:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213495:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213499:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021349d:	0f 95 c0             	setne  %al
ffffffff802134a0:	0f b6 c0             	movzbl %al,%eax
ffffffff802134a3:	48 85 c0             	test   %rax,%rax
ffffffff802134a6:	0f 84 4c 01 00 00    	je     ffffffff802135f8 <_RME_Prc_Boot_Crt+0x5da>
ffffffff802134ac:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802134b3:	e9 f2 02 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff802134b8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802134bc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802134c0:	48 89 c2             	mov    %rax,%rdx
ffffffff802134c3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802134c7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802134cb:	48 39 c2             	cmp    %rax,%rdx
ffffffff802134ce:	0f 93 c0             	setae  %al
ffffffff802134d1:	0f b6 c0             	movzbl %al,%eax
ffffffff802134d4:	48 85 c0             	test   %rax,%rax
ffffffff802134d7:	74 0c                	je     ffffffff802134e5 <_RME_Prc_Boot_Crt+0x4c7>
ffffffff802134d9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802134e0:	e9 c5 02 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff802134e5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802134e9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802134ed:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802134f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802134f4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802134f8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802134fc:	48 01 d0             	add    %rdx,%rax
ffffffff802134ff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213503:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213507:	48 8b 00             	mov    (%rax),%rax
ffffffff8021350a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021350e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213512:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213516:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213519:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021351d:	0f 94 c0             	sete   %al
ffffffff80213520:	0f b6 c0             	movzbl %al,%eax
ffffffff80213523:	48 85 c0             	test   %rax,%rax
ffffffff80213526:	74 0c                	je     ffffffff80213534 <_RME_Prc_Boot_Crt+0x516>
ffffffff80213528:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021352f:	e9 76 02 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff80213534:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213538:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021353c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213540:	0f 95 c0             	setne  %al
ffffffff80213543:	0f b6 c0             	movzbl %al,%eax
ffffffff80213546:	48 85 c0             	test   %rax,%rax
ffffffff80213549:	74 0c                	je     ffffffff80213557 <_RME_Prc_Boot_Crt+0x539>
ffffffff8021354b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213552:	e9 53 02 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff80213557:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021355b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213560:	48 89 c2             	mov    %rax,%rdx
ffffffff80213563:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213567:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021356b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021356e:	0f 93 c0             	setae  %al
ffffffff80213571:	0f b6 c0             	movzbl %al,%eax
ffffffff80213574:	48 85 c0             	test   %rax,%rax
ffffffff80213577:	74 0c                	je     ffffffff80213585 <_RME_Prc_Boot_Crt+0x567>
ffffffff80213579:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213580:	e9 25 02 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff80213585:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213589:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021358e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213592:	48 89 c2             	mov    %rax,%rdx
ffffffff80213595:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213599:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021359d:	48 01 d0             	add    %rdx,%rax
ffffffff802135a0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802135a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802135a8:	48 8b 00             	mov    (%rax),%rax
ffffffff802135ab:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802135af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802135b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802135b7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802135ba:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802135be:	0f 94 c0             	sete   %al
ffffffff802135c1:	0f b6 c0             	movzbl %al,%eax
ffffffff802135c4:	48 85 c0             	test   %rax,%rax
ffffffff802135c7:	74 0c                	je     ffffffff802135d5 <_RME_Prc_Boot_Crt+0x5b7>
ffffffff802135c9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802135d0:	e9 d5 01 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff802135d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802135d9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802135dd:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802135e1:	0f 95 c0             	setne  %al
ffffffff802135e4:	0f b6 c0             	movzbl %al,%eax
ffffffff802135e7:	48 85 c0             	test   %rax,%rax
ffffffff802135ea:	74 0c                	je     ffffffff802135f8 <_RME_Prc_Boot_Crt+0x5da>
ffffffff802135ec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802135f3:	e9 b2 01 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);
#endif
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff802135f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802135fc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213600:	83 e0 01             	and    $0x1,%eax
ffffffff80213603:	48 85 c0             	test   %rax,%rax
ffffffff80213606:	0f 94 c0             	sete   %al
ffffffff80213609:	0f b6 c0             	movzbl %al,%eax
ffffffff8021360c:	48 85 c0             	test   %rax,%rax
ffffffff8021360f:	74 0c                	je     ffffffff8021361d <_RME_Prc_Boot_Crt+0x5ff>
ffffffff80213611:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213618:	e9 8d 01 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff8021361d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213621:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213625:	83 e0 40             	and    $0x40,%eax
ffffffff80213628:	48 85 c0             	test   %rax,%rax
ffffffff8021362b:	0f 94 c0             	sete   %al
ffffffff8021362e:	0f b6 c0             	movzbl %al,%eax
ffffffff80213631:	48 85 c0             	test   %rax,%rax
ffffffff80213634:	74 0c                	je     ffffffff80213642 <_RME_Prc_Boot_Crt+0x624>
ffffffff80213636:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021363d:	e9 68 01 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff80213642:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213646:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021364a:	83 e0 40             	and    $0x40,%eax
ffffffff8021364d:	48 85 c0             	test   %rax,%rax
ffffffff80213650:	0f 94 c0             	sete   %al
ffffffff80213653:	0f b6 c0             	movzbl %al,%eax
ffffffff80213656:	48 85 c0             	test   %rax,%rax
ffffffff80213659:	74 0c                	je     ffffffff80213667 <_RME_Prc_Boot_Crt+0x649>
ffffffff8021365b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213662:	e9 43 01 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
#endif
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff80213667:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021366b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021366f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80213673:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213676:	0f 93 c0             	setae  %al
ffffffff80213679:	0f b6 c0             	movzbl %al,%eax
ffffffff8021367c:	48 85 c0             	test   %rax,%rax
ffffffff8021367f:	74 0c                	je     ffffffff8021368d <_RME_Prc_Boot_Crt+0x66f>
ffffffff80213681:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213688:	e9 1d 01 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff8021368d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80213691:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213695:	48 89 c2             	mov    %rax,%rdx
ffffffff80213698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021369c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802136a0:	48 01 d0             	add    %rdx,%rax
ffffffff802136a3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff802136a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802136ab:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802136b2:	00 00 00 
ffffffff802136b5:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802136ba:	48 89 c7             	mov    %rax,%rdi
ffffffff802136bd:	e8 9c 90 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802136c2:	48 85 c0             	test   %rax,%rax
ffffffff802136c5:	0f 94 c0             	sete   %al
ffffffff802136c8:	0f b6 c0             	movzbl %al,%eax
ffffffff802136cb:	48 85 c0             	test   %rax,%rax
ffffffff802136ce:	74 0c                	je     ffffffff802136dc <_RME_Prc_Boot_Crt+0x6be>
ffffffff802136d0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff802136d7:	e9 ce 00 00 00       	jmp    ffffffff802137aa <_RME_Prc_Boot_Crt+0x78c>
ffffffff802136dc:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802136e1:	e8 2b 91 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff802136e6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802136ea:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Header init */
    Prc_Crt->Head.Root_Ref=1U;
ffffffff802136ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802136f2:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff802136f9:	00 
    Prc_Crt->Head.Object=0U;
ffffffff802136fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802136fe:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80213705:	00 
    Prc_Crt->Head.Flag=RME_PRC_FLAG_INV|RME_PRC_FLAG_THD;
ffffffff80213706:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021370a:	48 c7 40 10 03 00 00 	movq   $0x3,0x10(%rax)
ffffffff80213711:	00 

    /* Info init */
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff80213712:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213716:	48 8b 00             	mov    (%rax),%rax
ffffffff80213719:	89 c0                	mov    %eax,%eax
ffffffff8021371b:	48 85 c0             	test   %rax,%rax
ffffffff8021371e:	74 0a                	je     ffffffff8021372a <_RME_Prc_Boot_Crt+0x70c>
ffffffff80213720:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213724:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213728:	eb 04                	jmp    ffffffff8021372e <_RME_Prc_Boot_Crt+0x710>
ffffffff8021372a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021372e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff80213732:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213736:	48 8b 00             	mov    (%rax),%rax
ffffffff80213739:	89 c0                	mov    %eax,%eax
ffffffff8021373b:	48 85 c0             	test   %rax,%rax
ffffffff8021373e:	74 0a                	je     ffffffff8021374a <_RME_Prc_Boot_Crt+0x72c>
ffffffff80213740:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213744:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213748:	eb 04                	jmp    ffffffff8021374e <_RME_Prc_Boot_Crt+0x730>
ffffffff8021374a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021374e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
#endif
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff80213752:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213756:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021375a:	48 89 50 28          	mov    %rdx,0x28(%rax)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff8021375e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213762:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80213766:	48 89 50 30          	mov    %rdx,0x30(%rax)
#else
    Prc_Crt->Pgt=Raw_Pgt;
#endif
    
    /* Reference objects */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),1U);
ffffffff8021376a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021376e:	48 83 c0 08          	add    $0x8,%rax
ffffffff80213772:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213777:	48 89 c7             	mov    %rax,%rdi
ffffffff8021377a:	e8 14 90 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),1U);
ffffffff8021377f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80213783:	48 83 c0 08          	add    $0x8,%rax
ffffffff80213787:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021378c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021378f:	e8 ff 8f ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif

    /* Establish cap */
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff80213794:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213798:	48 b9 00 00 00 00 00 	movabs $0x5000000000000,%rcx
ffffffff8021379f:	00 05 00 
ffffffff802137a2:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PRC,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff802137a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802137aa:	c9                   	leave
ffffffff802137ab:	c3                   	ret

ffffffff802137ac <_RME_Prc_Crt>:
                              rme_cid_t Cap_Cpt_Crt,
                              rme_cid_t Cap_Prc,
                              rme_cid_t Cap_Cpt,
                              rme_ptr_t Raw_Pgt)
#endif
{
ffffffff802137ac:	55                   	push   %rbp
ffffffff802137ad:	48 89 e5             	mov    %rsp,%rbp
ffffffff802137b0:	48 83 ec 68          	sub    $0x68,%rsp
ffffffff802137b4:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802137b8:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff802137bc:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff802137c0:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff802137c4:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff802137c8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802137cc:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802137d1:	48 85 c0             	test   %rax,%rax
ffffffff802137d4:	0f 85 98 00 00 00    	jne    ffffffff80213872 <_RME_Prc_Crt+0xc6>
ffffffff802137da:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802137de:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802137e2:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff802137e6:	48 39 c2             	cmp    %rax,%rdx
ffffffff802137e9:	0f 93 c0             	setae  %al
ffffffff802137ec:	0f b6 c0             	movzbl %al,%eax
ffffffff802137ef:	48 85 c0             	test   %rax,%rax
ffffffff802137f2:	74 0c                	je     ffffffff80213800 <_RME_Prc_Crt+0x54>
ffffffff802137f4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802137fb:	e9 38 07 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213800:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213804:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213808:	48 89 c2             	mov    %rax,%rdx
ffffffff8021380b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021380f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213813:	48 01 d0             	add    %rdx,%rax
ffffffff80213816:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021381a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021381e:	48 8b 00             	mov    (%rax),%rax
ffffffff80213821:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213825:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213829:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021382d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213830:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213834:	0f 94 c0             	sete   %al
ffffffff80213837:	0f b6 c0             	movzbl %al,%eax
ffffffff8021383a:	48 85 c0             	test   %rax,%rax
ffffffff8021383d:	74 0c                	je     ffffffff8021384b <_RME_Prc_Crt+0x9f>
ffffffff8021383f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213846:	e9 ed 06 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff8021384b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021384f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213853:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213857:	0f 95 c0             	setne  %al
ffffffff8021385a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021385d:	48 85 c0             	test   %rax,%rax
ffffffff80213860:	0f 84 4c 01 00 00    	je     ffffffff802139b2 <_RME_Prc_Crt+0x206>
ffffffff80213866:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021386d:	e9 c6 06 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213872:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213876:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021387a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021387d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213881:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213885:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213888:	0f 93 c0             	setae  %al
ffffffff8021388b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021388e:	48 85 c0             	test   %rax,%rax
ffffffff80213891:	74 0c                	je     ffffffff8021389f <_RME_Prc_Crt+0xf3>
ffffffff80213893:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021389a:	e9 99 06 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff8021389f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802138a3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802138a7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802138ab:	48 89 c2             	mov    %rax,%rdx
ffffffff802138ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802138b2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802138b6:	48 01 d0             	add    %rdx,%rax
ffffffff802138b9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802138bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802138c1:	48 8b 00             	mov    (%rax),%rax
ffffffff802138c4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802138c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802138cc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802138d0:	0f b7 c0             	movzwl %ax,%eax
ffffffff802138d3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802138d7:	0f 94 c0             	sete   %al
ffffffff802138da:	0f b6 c0             	movzbl %al,%eax
ffffffff802138dd:	48 85 c0             	test   %rax,%rax
ffffffff802138e0:	74 0c                	je     ffffffff802138ee <_RME_Prc_Crt+0x142>
ffffffff802138e2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802138e9:	e9 4a 06 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff802138ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802138f2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802138f6:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802138fa:	0f 95 c0             	setne  %al
ffffffff802138fd:	0f b6 c0             	movzbl %al,%eax
ffffffff80213900:	48 85 c0             	test   %rax,%rax
ffffffff80213903:	74 0c                	je     ffffffff80213911 <_RME_Prc_Crt+0x165>
ffffffff80213905:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021390c:	e9 27 06 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213911:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213915:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021391a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021391d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213921:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213925:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213928:	0f 93 c0             	setae  %al
ffffffff8021392b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021392e:	48 85 c0             	test   %rax,%rax
ffffffff80213931:	74 0c                	je     ffffffff8021393f <_RME_Prc_Crt+0x193>
ffffffff80213933:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021393a:	e9 f9 05 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff8021393f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213943:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213948:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021394c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021394f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213953:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213957:	48 01 d0             	add    %rdx,%rax
ffffffff8021395a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021395e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213962:	48 8b 00             	mov    (%rax),%rax
ffffffff80213965:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213969:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021396d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213971:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213974:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213978:	0f 94 c0             	sete   %al
ffffffff8021397b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021397e:	48 85 c0             	test   %rax,%rax
ffffffff80213981:	74 0c                	je     ffffffff8021398f <_RME_Prc_Crt+0x1e3>
ffffffff80213983:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021398a:	e9 a9 05 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff8021398f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213993:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213997:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021399b:	0f 95 c0             	setne  %al
ffffffff8021399e:	0f b6 c0             	movzbl %al,%eax
ffffffff802139a1:	48 85 c0             	test   %rax,%rax
ffffffff802139a4:	74 0c                	je     ffffffff802139b2 <_RME_Prc_Crt+0x206>
ffffffff802139a6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802139ad:	e9 86 05 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802139b2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802139b6:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802139bb:	48 85 c0             	test   %rax,%rax
ffffffff802139be:	0f 85 98 00 00 00    	jne    ffffffff80213a5c <_RME_Prc_Crt+0x2b0>
ffffffff802139c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802139c8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802139cc:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff802139d0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802139d3:	0f 93 c0             	setae  %al
ffffffff802139d6:	0f b6 c0             	movzbl %al,%eax
ffffffff802139d9:	48 85 c0             	test   %rax,%rax
ffffffff802139dc:	74 0c                	je     ffffffff802139ea <_RME_Prc_Crt+0x23e>
ffffffff802139de:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802139e5:	e9 4e 05 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff802139ea:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802139ee:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802139f2:	48 89 c2             	mov    %rax,%rdx
ffffffff802139f5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802139f9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802139fd:	48 01 d0             	add    %rdx,%rax
ffffffff80213a00:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213a04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213a08:	48 8b 00             	mov    (%rax),%rax
ffffffff80213a0b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213a0f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213a13:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213a17:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213a1a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213a1e:	0f 94 c0             	sete   %al
ffffffff80213a21:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a24:	48 85 c0             	test   %rax,%rax
ffffffff80213a27:	74 0c                	je     ffffffff80213a35 <_RME_Prc_Crt+0x289>
ffffffff80213a29:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213a30:	e9 03 05 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213a35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213a39:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213a3d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213a41:	0f 95 c0             	setne  %al
ffffffff80213a44:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a47:	48 85 c0             	test   %rax,%rax
ffffffff80213a4a:	0f 84 4c 01 00 00    	je     ffffffff80213b9c <_RME_Prc_Crt+0x3f0>
ffffffff80213a50:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213a57:	e9 dc 04 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213a5c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213a60:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213a64:	48 89 c2             	mov    %rax,%rdx
ffffffff80213a67:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213a6b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213a6f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213a72:	0f 93 c0             	setae  %al
ffffffff80213a75:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a78:	48 85 c0             	test   %rax,%rax
ffffffff80213a7b:	74 0c                	je     ffffffff80213a89 <_RME_Prc_Crt+0x2dd>
ffffffff80213a7d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213a84:	e9 af 04 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213a89:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213a8d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213a91:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213a95:	48 89 c2             	mov    %rax,%rdx
ffffffff80213a98:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213a9c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213aa0:	48 01 d0             	add    %rdx,%rax
ffffffff80213aa3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213aa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213aab:	48 8b 00             	mov    (%rax),%rax
ffffffff80213aae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213ab2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213ab6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213aba:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213abd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213ac1:	0f 94 c0             	sete   %al
ffffffff80213ac4:	0f b6 c0             	movzbl %al,%eax
ffffffff80213ac7:	48 85 c0             	test   %rax,%rax
ffffffff80213aca:	74 0c                	je     ffffffff80213ad8 <_RME_Prc_Crt+0x32c>
ffffffff80213acc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213ad3:	e9 60 04 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213ad8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213adc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213ae0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213ae4:	0f 95 c0             	setne  %al
ffffffff80213ae7:	0f b6 c0             	movzbl %al,%eax
ffffffff80213aea:	48 85 c0             	test   %rax,%rax
ffffffff80213aed:	74 0c                	je     ffffffff80213afb <_RME_Prc_Crt+0x34f>
ffffffff80213aef:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213af6:	e9 3d 04 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213afb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213aff:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213b04:	48 89 c2             	mov    %rax,%rdx
ffffffff80213b07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213b0b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213b0f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213b12:	0f 93 c0             	setae  %al
ffffffff80213b15:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b18:	48 85 c0             	test   %rax,%rax
ffffffff80213b1b:	74 0c                	je     ffffffff80213b29 <_RME_Prc_Crt+0x37d>
ffffffff80213b1d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213b24:	e9 0f 04 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213b29:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213b2d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213b32:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213b36:	48 89 c2             	mov    %rax,%rdx
ffffffff80213b39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213b3d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213b41:	48 01 d0             	add    %rdx,%rax
ffffffff80213b44:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213b48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213b4c:	48 8b 00             	mov    (%rax),%rax
ffffffff80213b4f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213b53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213b57:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213b5b:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213b5e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213b62:	0f 94 c0             	sete   %al
ffffffff80213b65:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b68:	48 85 c0             	test   %rax,%rax
ffffffff80213b6b:	74 0c                	je     ffffffff80213b79 <_RME_Prc_Crt+0x3cd>
ffffffff80213b6d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213b74:	e9 bf 03 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213b79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213b7d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213b81:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213b85:	0f 95 c0             	setne  %al
ffffffff80213b88:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b8b:	48 85 c0             	test   %rax,%rax
ffffffff80213b8e:	74 0c                	je     ffffffff80213b9c <_RME_Prc_Crt+0x3f0>
ffffffff80213b90:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213b97:	e9 9c 03 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80213b9c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213ba0:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213ba5:	48 85 c0             	test   %rax,%rax
ffffffff80213ba8:	0f 85 98 00 00 00    	jne    ffffffff80213c46 <_RME_Prc_Crt+0x49a>
ffffffff80213bae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213bb2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213bb6:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80213bba:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213bbd:	0f 93 c0             	setae  %al
ffffffff80213bc0:	0f b6 c0             	movzbl %al,%eax
ffffffff80213bc3:	48 85 c0             	test   %rax,%rax
ffffffff80213bc6:	74 0c                	je     ffffffff80213bd4 <_RME_Prc_Crt+0x428>
ffffffff80213bc8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213bcf:	e9 64 03 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213bd4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213bd8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213bdc:	48 89 c2             	mov    %rax,%rdx
ffffffff80213bdf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213be3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213be7:	48 01 d0             	add    %rdx,%rax
ffffffff80213bea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213bee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213bf2:	48 8b 00             	mov    (%rax),%rax
ffffffff80213bf5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213bf9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213bfd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213c01:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213c04:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213c08:	0f 94 c0             	sete   %al
ffffffff80213c0b:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c0e:	48 85 c0             	test   %rax,%rax
ffffffff80213c11:	74 0c                	je     ffffffff80213c1f <_RME_Prc_Crt+0x473>
ffffffff80213c13:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213c1a:	e9 19 03 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213c1f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213c23:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213c27:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213c2b:	0f 95 c0             	setne  %al
ffffffff80213c2e:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c31:	48 85 c0             	test   %rax,%rax
ffffffff80213c34:	0f 84 4c 01 00 00    	je     ffffffff80213d86 <_RME_Prc_Crt+0x5da>
ffffffff80213c3a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213c41:	e9 f2 02 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213c46:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213c4a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213c4e:	48 89 c2             	mov    %rax,%rdx
ffffffff80213c51:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213c55:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213c59:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213c5c:	0f 93 c0             	setae  %al
ffffffff80213c5f:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c62:	48 85 c0             	test   %rax,%rax
ffffffff80213c65:	74 0c                	je     ffffffff80213c73 <_RME_Prc_Crt+0x4c7>
ffffffff80213c67:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213c6e:	e9 c5 02 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213c73:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213c77:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213c7b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213c7f:	48 89 c2             	mov    %rax,%rdx
ffffffff80213c82:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213c86:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213c8a:	48 01 d0             	add    %rdx,%rax
ffffffff80213c8d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213c91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213c95:	48 8b 00             	mov    (%rax),%rax
ffffffff80213c98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213c9c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213ca0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213ca4:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213ca7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213cab:	0f 94 c0             	sete   %al
ffffffff80213cae:	0f b6 c0             	movzbl %al,%eax
ffffffff80213cb1:	48 85 c0             	test   %rax,%rax
ffffffff80213cb4:	74 0c                	je     ffffffff80213cc2 <_RME_Prc_Crt+0x516>
ffffffff80213cb6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213cbd:	e9 76 02 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213cc2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213cc6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213cca:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213cce:	0f 95 c0             	setne  %al
ffffffff80213cd1:	0f b6 c0             	movzbl %al,%eax
ffffffff80213cd4:	48 85 c0             	test   %rax,%rax
ffffffff80213cd7:	74 0c                	je     ffffffff80213ce5 <_RME_Prc_Crt+0x539>
ffffffff80213cd9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213ce0:	e9 53 02 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213ce5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213ce9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213cee:	48 89 c2             	mov    %rax,%rdx
ffffffff80213cf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213cf5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213cf9:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213cfc:	0f 93 c0             	setae  %al
ffffffff80213cff:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d02:	48 85 c0             	test   %rax,%rax
ffffffff80213d05:	74 0c                	je     ffffffff80213d13 <_RME_Prc_Crt+0x567>
ffffffff80213d07:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213d0e:	e9 25 02 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213d13:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213d17:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213d1c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213d20:	48 89 c2             	mov    %rax,%rdx
ffffffff80213d23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213d27:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213d2b:	48 01 d0             	add    %rdx,%rax
ffffffff80213d2e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213d32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213d36:	48 8b 00             	mov    (%rax),%rax
ffffffff80213d39:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213d3d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213d41:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213d45:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213d48:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213d4c:	0f 94 c0             	sete   %al
ffffffff80213d4f:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d52:	48 85 c0             	test   %rax,%rax
ffffffff80213d55:	74 0c                	je     ffffffff80213d63 <_RME_Prc_Crt+0x5b7>
ffffffff80213d57:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213d5e:	e9 d5 01 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213d63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213d67:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213d6b:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213d6f:	0f 95 c0             	setne  %al
ffffffff80213d72:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d75:	48 85 c0             	test   %rax,%rax
ffffffff80213d78:	74 0c                	je     ffffffff80213d86 <_RME_Prc_Crt+0x5da>
ffffffff80213d7a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213d81:	e9 b2 01 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);
#endif
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80213d86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213d8a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213d8e:	83 e0 01             	and    $0x1,%eax
ffffffff80213d91:	48 85 c0             	test   %rax,%rax
ffffffff80213d94:	0f 94 c0             	sete   %al
ffffffff80213d97:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d9a:	48 85 c0             	test   %rax,%rax
ffffffff80213d9d:	74 0c                	je     ffffffff80213dab <_RME_Prc_Crt+0x5ff>
ffffffff80213d9f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213da6:	e9 8d 01 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff80213dab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213daf:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213db3:	83 e0 40             	and    $0x40,%eax
ffffffff80213db6:	48 85 c0             	test   %rax,%rax
ffffffff80213db9:	0f 94 c0             	sete   %al
ffffffff80213dbc:	0f b6 c0             	movzbl %al,%eax
ffffffff80213dbf:	48 85 c0             	test   %rax,%rax
ffffffff80213dc2:	74 0c                	je     ffffffff80213dd0 <_RME_Prc_Crt+0x624>
ffffffff80213dc4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213dcb:	e9 68 01 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff80213dd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213dd4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213dd8:	83 e0 40             	and    $0x40,%eax
ffffffff80213ddb:	48 85 c0             	test   %rax,%rax
ffffffff80213dde:	0f 94 c0             	sete   %al
ffffffff80213de1:	0f b6 c0             	movzbl %al,%eax
ffffffff80213de4:	48 85 c0             	test   %rax,%rax
ffffffff80213de7:	74 0c                	je     ffffffff80213df5 <_RME_Prc_Crt+0x649>
ffffffff80213de9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213df0:	e9 43 01 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
#endif
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff80213df5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213df9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213dfd:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80213e01:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213e04:	0f 93 c0             	setae  %al
ffffffff80213e07:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e0a:	48 85 c0             	test   %rax,%rax
ffffffff80213e0d:	74 0c                	je     ffffffff80213e1b <_RME_Prc_Crt+0x66f>
ffffffff80213e0f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213e16:	e9 1d 01 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213e1b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80213e1f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213e23:	48 89 c2             	mov    %rax,%rdx
ffffffff80213e26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213e2a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213e2e:	48 01 d0             	add    %rdx,%rax
ffffffff80213e31:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff80213e35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213e39:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80213e40:	00 00 00 
ffffffff80213e43:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80213e48:	48 89 c7             	mov    %rax,%rdi
ffffffff80213e4b:	e8 0e 89 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80213e50:	48 85 c0             	test   %rax,%rax
ffffffff80213e53:	0f 94 c0             	sete   %al
ffffffff80213e56:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e59:	48 85 c0             	test   %rax,%rax
ffffffff80213e5c:	74 0c                	je     ffffffff80213e6a <_RME_Prc_Crt+0x6be>
ffffffff80213e5e:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80213e65:	e9 ce 00 00 00       	jmp    ffffffff80213f38 <_RME_Prc_Crt+0x78c>
ffffffff80213e6a:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80213e6f:	e8 9d 89 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80213e74:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80213e78:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* Header init */
    Prc_Crt->Head.Root_Ref=0U;
ffffffff80213e7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213e80:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80213e87:	00 
    Prc_Crt->Head.Object=0U;
ffffffff80213e88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213e8c:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80213e93:	00 
    Prc_Crt->Head.Flag=RME_PRC_FLAG_ALL;
ffffffff80213e94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213e98:	48 c7 40 10 0f 00 00 	movq   $0xf,0x10(%rax)
ffffffff80213e9f:	00 
    
    /* Info init */
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff80213ea0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213ea4:	48 8b 00             	mov    (%rax),%rax
ffffffff80213ea7:	89 c0                	mov    %eax,%eax
ffffffff80213ea9:	48 85 c0             	test   %rax,%rax
ffffffff80213eac:	74 0a                	je     ffffffff80213eb8 <_RME_Prc_Crt+0x70c>
ffffffff80213eae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213eb2:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213eb6:	eb 04                	jmp    ffffffff80213ebc <_RME_Prc_Crt+0x710>
ffffffff80213eb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213ebc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff80213ec0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213ec4:	48 8b 00             	mov    (%rax),%rax
ffffffff80213ec7:	89 c0                	mov    %eax,%eax
ffffffff80213ec9:	48 85 c0             	test   %rax,%rax
ffffffff80213ecc:	74 0a                	je     ffffffff80213ed8 <_RME_Prc_Crt+0x72c>
ffffffff80213ece:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213ed2:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213ed6:	eb 04                	jmp    ffffffff80213edc <_RME_Prc_Crt+0x730>
ffffffff80213ed8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213edc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
#endif
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff80213ee0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213ee4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80213ee8:	48 89 50 28          	mov    %rdx,0x28(%rax)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff80213eec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213ef0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80213ef4:	48 89 50 30          	mov    %rdx,0x30(%rax)
#else
    Prc_Crt->Pgt=Raw_Pgt;
#endif
    
    /* Reference objects */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),1U);
ffffffff80213ef8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80213efc:	48 83 c0 08          	add    $0x8,%rax
ffffffff80213f00:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213f05:	48 89 c7             	mov    %rax,%rdi
ffffffff80213f08:	e8 86 88 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),1U);
ffffffff80213f0d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80213f11:	48 83 c0 08          	add    $0x8,%rax
ffffffff80213f15:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213f1a:	48 89 c7             	mov    %rax,%rdi
ffffffff80213f1d:	e8 71 88 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif

    /* Establish cap */
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff80213f22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213f26:	48 b9 00 00 00 00 00 	movabs $0x5000000000000,%rcx
ffffffff80213f2d:	00 05 00 
ffffffff80213f30:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PRC,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80213f33:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80213f38:	c9                   	leave
ffffffff80213f39:	c3                   	ret

ffffffff80213f3a <_RME_Prc_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Prc_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Prc)
{
ffffffff80213f3a:	55                   	push   %rbp
ffffffff80213f3b:	48 89 e5             	mov    %rsp,%rbp
ffffffff80213f3e:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80213f42:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80213f46:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80213f4a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213f4e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80213f52:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213f57:	48 85 c0             	test   %rax,%rax
ffffffff80213f5a:	0f 85 98 00 00 00    	jne    ffffffff80213ff8 <_RME_Prc_Del+0xbe>
ffffffff80213f60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80213f64:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213f68:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80213f6c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213f6f:	0f 93 c0             	setae  %al
ffffffff80213f72:	0f b6 c0             	movzbl %al,%eax
ffffffff80213f75:	48 85 c0             	test   %rax,%rax
ffffffff80213f78:	74 0c                	je     ffffffff80213f86 <_RME_Prc_Del+0x4c>
ffffffff80213f7a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213f81:	e9 71 03 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
ffffffff80213f86:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80213f8a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213f8e:	48 89 c2             	mov    %rax,%rdx
ffffffff80213f91:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80213f95:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213f99:	48 01 d0             	add    %rdx,%rax
ffffffff80213f9c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80213fa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213fa4:	48 8b 00             	mov    (%rax),%rax
ffffffff80213fa7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213fab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213faf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213fb3:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213fb6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213fba:	0f 94 c0             	sete   %al
ffffffff80213fbd:	0f b6 c0             	movzbl %al,%eax
ffffffff80213fc0:	48 85 c0             	test   %rax,%rax
ffffffff80213fc3:	74 0c                	je     ffffffff80213fd1 <_RME_Prc_Del+0x97>
ffffffff80213fc5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213fcc:	e9 26 03 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
ffffffff80213fd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213fd5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213fd9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213fdd:	0f 95 c0             	setne  %al
ffffffff80213fe0:	0f b6 c0             	movzbl %al,%eax
ffffffff80213fe3:	48 85 c0             	test   %rax,%rax
ffffffff80213fe6:	0f 84 4c 01 00 00    	je     ffffffff80214138 <_RME_Prc_Del+0x1fe>
ffffffff80213fec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213ff3:	e9 ff 02 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
ffffffff80213ff8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80213ffc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214000:	48 89 c2             	mov    %rax,%rdx
ffffffff80214003:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214007:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021400b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021400e:	0f 93 c0             	setae  %al
ffffffff80214011:	0f b6 c0             	movzbl %al,%eax
ffffffff80214014:	48 85 c0             	test   %rax,%rax
ffffffff80214017:	74 0c                	je     ffffffff80214025 <_RME_Prc_Del+0xeb>
ffffffff80214019:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214020:	e9 d2 02 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
ffffffff80214025:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214029:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021402d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214031:	48 89 c2             	mov    %rax,%rdx
ffffffff80214034:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214038:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021403c:	48 01 d0             	add    %rdx,%rax
ffffffff8021403f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214043:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214047:	48 8b 00             	mov    (%rax),%rax
ffffffff8021404a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021404e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214052:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214056:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214059:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021405d:	0f 94 c0             	sete   %al
ffffffff80214060:	0f b6 c0             	movzbl %al,%eax
ffffffff80214063:	48 85 c0             	test   %rax,%rax
ffffffff80214066:	74 0c                	je     ffffffff80214074 <_RME_Prc_Del+0x13a>
ffffffff80214068:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021406f:	e9 83 02 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
ffffffff80214074:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214078:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021407c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214080:	0f 95 c0             	setne  %al
ffffffff80214083:	0f b6 c0             	movzbl %al,%eax
ffffffff80214086:	48 85 c0             	test   %rax,%rax
ffffffff80214089:	74 0c                	je     ffffffff80214097 <_RME_Prc_Del+0x15d>
ffffffff8021408b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214092:	e9 60 02 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
ffffffff80214097:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021409b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802140a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802140a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802140a7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802140ab:	48 39 c2             	cmp    %rax,%rdx
ffffffff802140ae:	0f 93 c0             	setae  %al
ffffffff802140b1:	0f b6 c0             	movzbl %al,%eax
ffffffff802140b4:	48 85 c0             	test   %rax,%rax
ffffffff802140b7:	74 0c                	je     ffffffff802140c5 <_RME_Prc_Del+0x18b>
ffffffff802140b9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802140c0:	e9 32 02 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
ffffffff802140c5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802140c9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802140ce:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802140d2:	48 89 c2             	mov    %rax,%rdx
ffffffff802140d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802140d9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802140dd:	48 01 d0             	add    %rdx,%rax
ffffffff802140e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802140e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802140e8:	48 8b 00             	mov    (%rax),%rax
ffffffff802140eb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802140ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802140f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802140f7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802140fa:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802140fe:	0f 94 c0             	sete   %al
ffffffff80214101:	0f b6 c0             	movzbl %al,%eax
ffffffff80214104:	48 85 c0             	test   %rax,%rax
ffffffff80214107:	74 0c                	je     ffffffff80214115 <_RME_Prc_Del+0x1db>
ffffffff80214109:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214110:	e9 e2 01 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
ffffffff80214115:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214119:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021411d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214121:	0f 95 c0             	setne  %al
ffffffff80214124:	0f b6 c0             	movzbl %al,%eax
ffffffff80214127:	48 85 c0             	test   %rax,%rax
ffffffff8021412a:	74 0c                	je     ffffffff80214138 <_RME_Prc_Del+0x1fe>
ffffffff8021412c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214133:	e9 bf 01 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80214138:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021413c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214140:	83 e0 02             	and    $0x2,%eax
ffffffff80214143:	48 85 c0             	test   %rax,%rax
ffffffff80214146:	0f 94 c0             	sete   %al
ffffffff80214149:	0f b6 c0             	movzbl %al,%eax
ffffffff8021414c:	48 85 c0             	test   %rax,%rax
ffffffff8021414f:	74 0c                	je     ffffffff8021415d <_RME_Prc_Del+0x223>
ffffffff80214151:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214158:	e9 9a 01 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff8021415d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214161:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214165:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80214169:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021416c:	0f 93 c0             	setae  %al
ffffffff8021416f:	0f b6 c0             	movzbl %al,%eax
ffffffff80214172:	48 85 c0             	test   %rax,%rax
ffffffff80214175:	74 0c                	je     ffffffff80214183 <_RME_Prc_Del+0x249>
ffffffff80214177:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021417e:	e9 74 01 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
ffffffff80214183:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80214187:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021418b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021418e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214192:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214196:	48 01 d0             	add    %rdx,%rax
ffffffff80214199:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff8021419d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802141a1:	48 8b 00             	mov    (%rax),%rax
ffffffff802141a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802141a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802141ac:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802141b0:	0f b7 c0             	movzwl %ax,%eax
ffffffff802141b3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802141b7:	0f 95 c0             	setne  %al
ffffffff802141ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802141bd:	48 85 c0             	test   %rax,%rax
ffffffff802141c0:	74 0c                	je     ffffffff802141ce <_RME_Prc_Del+0x294>
ffffffff802141c2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802141c9:	e9 29 01 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
ffffffff802141ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802141d2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802141d6:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802141da:	0f 95 c0             	setne  %al
ffffffff802141dd:	0f b6 c0             	movzbl %al,%eax
ffffffff802141e0:	48 85 c0             	test   %rax,%rax
ffffffff802141e3:	74 0c                	je     ffffffff802141f1 <_RME_Prc_Del+0x2b7>
ffffffff802141e5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802141ec:	e9 06 01 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
ffffffff802141f1:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802141f6:	e8 16 86 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff802141fb:	48 89 c2             	mov    %rax,%rdx
ffffffff802141fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214202:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80214206:	48 29 c2             	sub    %rax,%rdx
ffffffff80214209:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8021420d:	0f 96 c0             	setbe  %al
ffffffff80214210:	0f b6 c0             	movzbl %al,%eax
ffffffff80214213:	48 98                	cltq
ffffffff80214215:	48 85 c0             	test   %rax,%rax
ffffffff80214218:	74 0c                	je     ffffffff80214226 <_RME_Prc_Del+0x2ec>
ffffffff8021421a:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80214221:	e9 d1 00 00 00       	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>
ffffffff80214226:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021422a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021422e:	48 85 c0             	test   %rax,%rax
ffffffff80214231:	0f 95 c0             	setne  %al
ffffffff80214234:	0f b6 c0             	movzbl %al,%eax
ffffffff80214237:	48 85 c0             	test   %rax,%rax
ffffffff8021423a:	74 41                	je     ffffffff8021427d <_RME_Prc_Del+0x343>
ffffffff8021423c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214240:	89 c0                	mov    %eax,%eax
ffffffff80214242:	48 85 c0             	test   %rax,%rax
ffffffff80214245:	0f 94 c0             	sete   %al
ffffffff80214248:	0f b6 c0             	movzbl %al,%eax
ffffffff8021424b:	48 85 c0             	test   %rax,%rax
ffffffff8021424e:	74 24                	je     ffffffff80214274 <_RME_Prc_Del+0x33a>
ffffffff80214250:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80214257:	00 ff ff 
ffffffff8021425a:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021425e:	48 89 c2             	mov    %rax,%rdx
ffffffff80214261:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214265:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80214269:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021426c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021426f:	e8 ea 84 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80214274:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8021427b:	eb 7a                	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>

    /* Remember for deletion */
    Prc_Cpt=Prc_Del->Cpt;
ffffffff8021427d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214281:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214285:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=Prc_Del->Pgt;
ffffffff80214289:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021428d:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80214291:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
#endif

    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Prc_Del,Type_Stat);
ffffffff80214295:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214299:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021429d:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802142a2:	48 89 ce             	mov    %rcx,%rsi
ffffffff802142a5:	48 89 c7             	mov    %rax,%rdi
ffffffff802142a8:	e8 b1 84 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802142ad:	48 85 c0             	test   %rax,%rax
ffffffff802142b0:	0f 94 c0             	sete   %al
ffffffff802142b3:	0f b6 c0             	movzbl %al,%eax
ffffffff802142b6:	48 85 c0             	test   %rax,%rax
ffffffff802142b9:	74 09                	je     ffffffff802142c4 <_RME_Prc_Del+0x38a>
ffffffff802142bb:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802142c2:	eb 33                	jmp    ffffffff802142f7 <_RME_Prc_Del+0x3bd>

    /* Dereference caps */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),-1);
ffffffff802142c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802142c8:	48 83 c0 08          	add    $0x8,%rax
ffffffff802142cc:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802142d3:	48 89 c7             	mov    %rax,%rdi
ffffffff802142d6:	e8 b8 84 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),-1);
ffffffff802142db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802142df:	48 83 c0 08          	add    $0x8,%rax
ffffffff802142e3:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802142ea:	48 89 c7             	mov    %rax,%rdi
ffffffff802142ed:	e8 a1 84 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif
    
    return 0;
ffffffff802142f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802142f7:	c9                   	leave
ffffffff802142f8:	c3                   	ret

ffffffff802142f9 <_RME_Prc_Cpt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Prc_Cpt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Prc,
                              rme_cid_t Cap_Cpt)
{
ffffffff802142f9:	55                   	push   %rbp
ffffffff802142fa:	48 89 e5             	mov    %rsp,%rbp
ffffffff802142fd:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80214301:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80214305:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80214309:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_New;
    struct RME_Cap_Cpt* Cpt_Old;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8021430d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214311:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214316:	48 85 c0             	test   %rax,%rax
ffffffff80214319:	0f 85 98 00 00 00    	jne    ffffffff802143b7 <_RME_Prc_Cpt+0xbe>
ffffffff8021431f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214323:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214327:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021432b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021432e:	0f 93 c0             	setae  %al
ffffffff80214331:	0f b6 c0             	movzbl %al,%eax
ffffffff80214334:	48 85 c0             	test   %rax,%rax
ffffffff80214337:	74 0c                	je     ffffffff80214345 <_RME_Prc_Cpt+0x4c>
ffffffff80214339:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214340:	e9 6e 04 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff80214345:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214349:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021434d:	48 89 c2             	mov    %rax,%rdx
ffffffff80214350:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214354:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214358:	48 01 d0             	add    %rdx,%rax
ffffffff8021435b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021435f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214363:	48 8b 00             	mov    (%rax),%rax
ffffffff80214366:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021436a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021436e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214372:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214375:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214379:	0f 94 c0             	sete   %al
ffffffff8021437c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021437f:	48 85 c0             	test   %rax,%rax
ffffffff80214382:	74 0c                	je     ffffffff80214390 <_RME_Prc_Cpt+0x97>
ffffffff80214384:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021438b:	e9 23 04 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff80214390:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214394:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214398:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8021439c:	0f 95 c0             	setne  %al
ffffffff8021439f:	0f b6 c0             	movzbl %al,%eax
ffffffff802143a2:	48 85 c0             	test   %rax,%rax
ffffffff802143a5:	0f 84 4c 01 00 00    	je     ffffffff802144f7 <_RME_Prc_Cpt+0x1fe>
ffffffff802143ab:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802143b2:	e9 fc 03 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff802143b7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802143bb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802143bf:	48 89 c2             	mov    %rax,%rdx
ffffffff802143c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802143c6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802143ca:	48 39 c2             	cmp    %rax,%rdx
ffffffff802143cd:	0f 93 c0             	setae  %al
ffffffff802143d0:	0f b6 c0             	movzbl %al,%eax
ffffffff802143d3:	48 85 c0             	test   %rax,%rax
ffffffff802143d6:	74 0c                	je     ffffffff802143e4 <_RME_Prc_Cpt+0xeb>
ffffffff802143d8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802143df:	e9 cf 03 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff802143e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802143e8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802143ec:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802143f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802143f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802143f7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802143fb:	48 01 d0             	add    %rdx,%rax
ffffffff802143fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214402:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214406:	48 8b 00             	mov    (%rax),%rax
ffffffff80214409:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021440d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214411:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214415:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214418:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021441c:	0f 94 c0             	sete   %al
ffffffff8021441f:	0f b6 c0             	movzbl %al,%eax
ffffffff80214422:	48 85 c0             	test   %rax,%rax
ffffffff80214425:	74 0c                	je     ffffffff80214433 <_RME_Prc_Cpt+0x13a>
ffffffff80214427:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021442e:	e9 80 03 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff80214433:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214437:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021443b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021443f:	0f 95 c0             	setne  %al
ffffffff80214442:	0f b6 c0             	movzbl %al,%eax
ffffffff80214445:	48 85 c0             	test   %rax,%rax
ffffffff80214448:	74 0c                	je     ffffffff80214456 <_RME_Prc_Cpt+0x15d>
ffffffff8021444a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214451:	e9 5d 03 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff80214456:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021445a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021445f:	48 89 c2             	mov    %rax,%rdx
ffffffff80214462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214466:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021446a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021446d:	0f 93 c0             	setae  %al
ffffffff80214470:	0f b6 c0             	movzbl %al,%eax
ffffffff80214473:	48 85 c0             	test   %rax,%rax
ffffffff80214476:	74 0c                	je     ffffffff80214484 <_RME_Prc_Cpt+0x18b>
ffffffff80214478:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021447f:	e9 2f 03 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff80214484:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214488:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021448d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214491:	48 89 c2             	mov    %rax,%rdx
ffffffff80214494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214498:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021449c:	48 01 d0             	add    %rdx,%rax
ffffffff8021449f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802144a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802144a7:	48 8b 00             	mov    (%rax),%rax
ffffffff802144aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802144ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802144b2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802144b6:	0f b7 c0             	movzwl %ax,%eax
ffffffff802144b9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802144bd:	0f 94 c0             	sete   %al
ffffffff802144c0:	0f b6 c0             	movzbl %al,%eax
ffffffff802144c3:	48 85 c0             	test   %rax,%rax
ffffffff802144c6:	74 0c                	je     ffffffff802144d4 <_RME_Prc_Cpt+0x1db>
ffffffff802144c8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802144cf:	e9 df 02 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff802144d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802144d8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802144dc:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802144e0:	0f 95 c0             	setne  %al
ffffffff802144e3:	0f b6 c0             	movzbl %al,%eax
ffffffff802144e6:	48 85 c0             	test   %rax,%rax
ffffffff802144e9:	74 0c                	je     ffffffff802144f7 <_RME_Prc_Cpt+0x1fe>
ffffffff802144eb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802144f2:	e9 bc 02 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802144f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802144fb:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214500:	48 85 c0             	test   %rax,%rax
ffffffff80214503:	0f 85 98 00 00 00    	jne    ffffffff802145a1 <_RME_Prc_Cpt+0x2a8>
ffffffff80214509:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021450d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214511:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80214515:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214518:	0f 93 c0             	setae  %al
ffffffff8021451b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021451e:	48 85 c0             	test   %rax,%rax
ffffffff80214521:	74 0c                	je     ffffffff8021452f <_RME_Prc_Cpt+0x236>
ffffffff80214523:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021452a:	e9 84 02 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff8021452f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214533:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214537:	48 89 c2             	mov    %rax,%rdx
ffffffff8021453a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021453e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214542:	48 01 d0             	add    %rdx,%rax
ffffffff80214545:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214549:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021454d:	48 8b 00             	mov    (%rax),%rax
ffffffff80214550:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214554:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214558:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021455c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021455f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214563:	0f 94 c0             	sete   %al
ffffffff80214566:	0f b6 c0             	movzbl %al,%eax
ffffffff80214569:	48 85 c0             	test   %rax,%rax
ffffffff8021456c:	74 0c                	je     ffffffff8021457a <_RME_Prc_Cpt+0x281>
ffffffff8021456e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214575:	e9 39 02 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff8021457a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021457e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214582:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214586:	0f 95 c0             	setne  %al
ffffffff80214589:	0f b6 c0             	movzbl %al,%eax
ffffffff8021458c:	48 85 c0             	test   %rax,%rax
ffffffff8021458f:	0f 84 4c 01 00 00    	je     ffffffff802146e1 <_RME_Prc_Cpt+0x3e8>
ffffffff80214595:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021459c:	e9 12 02 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff802145a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802145a5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802145a9:	48 89 c2             	mov    %rax,%rdx
ffffffff802145ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802145b0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802145b4:	48 39 c2             	cmp    %rax,%rdx
ffffffff802145b7:	0f 93 c0             	setae  %al
ffffffff802145ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802145bd:	48 85 c0             	test   %rax,%rax
ffffffff802145c0:	74 0c                	je     ffffffff802145ce <_RME_Prc_Cpt+0x2d5>
ffffffff802145c2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802145c9:	e9 e5 01 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff802145ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802145d2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802145d6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802145da:	48 89 c2             	mov    %rax,%rdx
ffffffff802145dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802145e1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802145e5:	48 01 d0             	add    %rdx,%rax
ffffffff802145e8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802145ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802145f0:	48 8b 00             	mov    (%rax),%rax
ffffffff802145f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802145f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802145fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802145ff:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214602:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214606:	0f 94 c0             	sete   %al
ffffffff80214609:	0f b6 c0             	movzbl %al,%eax
ffffffff8021460c:	48 85 c0             	test   %rax,%rax
ffffffff8021460f:	74 0c                	je     ffffffff8021461d <_RME_Prc_Cpt+0x324>
ffffffff80214611:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214618:	e9 96 01 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff8021461d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214621:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214625:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214629:	0f 95 c0             	setne  %al
ffffffff8021462c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021462f:	48 85 c0             	test   %rax,%rax
ffffffff80214632:	74 0c                	je     ffffffff80214640 <_RME_Prc_Cpt+0x347>
ffffffff80214634:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021463b:	e9 73 01 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff80214640:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214644:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214649:	48 89 c2             	mov    %rax,%rdx
ffffffff8021464c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214650:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214654:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214657:	0f 93 c0             	setae  %al
ffffffff8021465a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021465d:	48 85 c0             	test   %rax,%rax
ffffffff80214660:	74 0c                	je     ffffffff8021466e <_RME_Prc_Cpt+0x375>
ffffffff80214662:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214669:	e9 45 01 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff8021466e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214672:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214677:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021467b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021467e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214682:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214686:	48 01 d0             	add    %rdx,%rax
ffffffff80214689:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021468d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214691:	48 8b 00             	mov    (%rax),%rax
ffffffff80214694:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214698:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021469c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802146a0:	0f b7 c0             	movzwl %ax,%eax
ffffffff802146a3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802146a7:	0f 94 c0             	sete   %al
ffffffff802146aa:	0f b6 c0             	movzbl %al,%eax
ffffffff802146ad:	48 85 c0             	test   %rax,%rax
ffffffff802146b0:	74 0c                	je     ffffffff802146be <_RME_Prc_Cpt+0x3c5>
ffffffff802146b2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802146b9:	e9 f5 00 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
ffffffff802146be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802146c2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802146c6:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802146ca:	0f 95 c0             	setne  %al
ffffffff802146cd:	0f b6 c0             	movzbl %al,%eax
ffffffff802146d0:	48 85 c0             	test   %rax,%rax
ffffffff802146d3:	74 0c                	je     ffffffff802146e1 <_RME_Prc_Cpt+0x3e8>
ffffffff802146d5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802146dc:	e9 d2 00 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
                   struct RME_Cap_Cpt*,Cpt_New,Type_Stat);     
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_CPT);
ffffffff802146e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802146e5:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802146e9:	83 e0 04             	and    $0x4,%eax
ffffffff802146ec:	48 85 c0             	test   %rax,%rax
ffffffff802146ef:	0f 94 c0             	sete   %al
ffffffff802146f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802146f5:	48 85 c0             	test   %rax,%rax
ffffffff802146f8:	74 0c                	je     ffffffff80214706 <_RME_Prc_Cpt+0x40d>
ffffffff802146fa:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214701:	e9 ad 00 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
    RME_CAP_CHECK(Cpt_New,RME_CPT_FLAG_PRC_CPT);
ffffffff80214706:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021470a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021470e:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80214713:	48 85 c0             	test   %rax,%rax
ffffffff80214716:	0f 94 c0             	sete   %al
ffffffff80214719:	0f b6 c0             	movzbl %al,%eax
ffffffff8021471c:	48 85 c0             	test   %rax,%rax
ffffffff8021471f:	74 0c                	je     ffffffff8021472d <_RME_Prc_Cpt+0x434>
ffffffff80214721:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214728:	e9 86 00 00 00       	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
    
    /* Convert to root */
    Cpt_New=RME_CAP_CONV_ROOT(Cpt_New,struct RME_Cap_Cpt*);
ffffffff8021472d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214731:	48 8b 00             	mov    (%rax),%rax
ffffffff80214734:	89 c0                	mov    %eax,%eax
ffffffff80214736:	48 85 c0             	test   %rax,%rax
ffffffff80214739:	74 0a                	je     ffffffff80214745 <_RME_Prc_Cpt+0x44c>
ffffffff8021473b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021473f:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214743:	eb 04                	jmp    ffffffff80214749 <_RME_Prc_Cpt+0x450>
ffffffff80214745:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214749:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Commit the change */
    Cpt_Old=Prc_Op->Cpt;
ffffffff8021474d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214751:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214755:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Cpt)),
ffffffff80214759:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8021475d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214761:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80214765:	48 83 c1 28          	add    $0x28,%rcx
ffffffff80214769:	48 89 c6             	mov    %rax,%rsi
ffffffff8021476c:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021476f:	e8 ea 7f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80214774:	48 85 c0             	test   %rax,%rax
ffffffff80214777:	75 09                	jne    ffffffff80214782 <_RME_Prc_Cpt+0x489>
                     (rme_ptr_t)Cpt_Old,(rme_ptr_t)Cpt_New)==RME_CASFAIL)
    {
        RME_COV_MARKER();
        
        return RME_ERR_PTH_CONFLICT;
ffffffff80214779:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff80214780:	eb 31                	jmp    ffffffff802147b3 <_RME_Prc_Cpt+0x4ba>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Reference new table and dereference the old table */
    RME_FETCH_ADD(&(Cpt_New->Head.Root_Ref),1);
ffffffff80214782:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214786:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021478a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021478f:	48 89 c7             	mov    %rax,%rdi
ffffffff80214792:	e8 fc 7f ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    RME_FETCH_ADD(&(Cpt_Old->Head.Root_Ref),-1);
ffffffff80214797:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021479b:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021479f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802147a6:	48 89 c7             	mov    %rax,%rdi
ffffffff802147a9:	e8 e5 7f ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff802147ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802147b3:	c9                   	leave
ffffffff802147b4:	c3                   	ret

ffffffff802147b5 <_RME_Prc_Pgt>:
#else
static rme_ret_t _RME_Prc_Pgt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Raw_Pgt)
#endif
{
ffffffff802147b5:	55                   	push   %rbp
ffffffff802147b6:	48 89 e5             	mov    %rsp,%rbp
ffffffff802147b9:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff802147bd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff802147c1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff802147c5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Pgt_Old;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802147c9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802147cd:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802147d2:	48 85 c0             	test   %rax,%rax
ffffffff802147d5:	0f 85 98 00 00 00    	jne    ffffffff80214873 <_RME_Prc_Pgt+0xbe>
ffffffff802147db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802147df:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802147e3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802147e7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802147ea:	0f 93 c0             	setae  %al
ffffffff802147ed:	0f b6 c0             	movzbl %al,%eax
ffffffff802147f0:	48 85 c0             	test   %rax,%rax
ffffffff802147f3:	74 0c                	je     ffffffff80214801 <_RME_Prc_Pgt+0x4c>
ffffffff802147f5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802147fc:	e9 6e 04 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff80214801:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214805:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214809:	48 89 c2             	mov    %rax,%rdx
ffffffff8021480c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214810:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214814:	48 01 d0             	add    %rdx,%rax
ffffffff80214817:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021481b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021481f:	48 8b 00             	mov    (%rax),%rax
ffffffff80214822:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214826:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021482a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021482e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214831:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214835:	0f 94 c0             	sete   %al
ffffffff80214838:	0f b6 c0             	movzbl %al,%eax
ffffffff8021483b:	48 85 c0             	test   %rax,%rax
ffffffff8021483e:	74 0c                	je     ffffffff8021484c <_RME_Prc_Pgt+0x97>
ffffffff80214840:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214847:	e9 23 04 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff8021484c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214850:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214854:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214858:	0f 95 c0             	setne  %al
ffffffff8021485b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021485e:	48 85 c0             	test   %rax,%rax
ffffffff80214861:	0f 84 4c 01 00 00    	je     ffffffff802149b3 <_RME_Prc_Pgt+0x1fe>
ffffffff80214867:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021486e:	e9 fc 03 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff80214873:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214877:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021487b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021487e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214882:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214886:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214889:	0f 93 c0             	setae  %al
ffffffff8021488c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021488f:	48 85 c0             	test   %rax,%rax
ffffffff80214892:	74 0c                	je     ffffffff802148a0 <_RME_Prc_Pgt+0xeb>
ffffffff80214894:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021489b:	e9 cf 03 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff802148a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802148a4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802148a8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802148ac:	48 89 c2             	mov    %rax,%rdx
ffffffff802148af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802148b3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802148b7:	48 01 d0             	add    %rdx,%rax
ffffffff802148ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802148be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802148c2:	48 8b 00             	mov    (%rax),%rax
ffffffff802148c5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802148c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802148cd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802148d1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802148d4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802148d8:	0f 94 c0             	sete   %al
ffffffff802148db:	0f b6 c0             	movzbl %al,%eax
ffffffff802148de:	48 85 c0             	test   %rax,%rax
ffffffff802148e1:	74 0c                	je     ffffffff802148ef <_RME_Prc_Pgt+0x13a>
ffffffff802148e3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802148ea:	e9 80 03 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff802148ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802148f3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802148f7:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802148fb:	0f 95 c0             	setne  %al
ffffffff802148fe:	0f b6 c0             	movzbl %al,%eax
ffffffff80214901:	48 85 c0             	test   %rax,%rax
ffffffff80214904:	74 0c                	je     ffffffff80214912 <_RME_Prc_Pgt+0x15d>
ffffffff80214906:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021490d:	e9 5d 03 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff80214912:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214916:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021491b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021491e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214922:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214926:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214929:	0f 93 c0             	setae  %al
ffffffff8021492c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021492f:	48 85 c0             	test   %rax,%rax
ffffffff80214932:	74 0c                	je     ffffffff80214940 <_RME_Prc_Pgt+0x18b>
ffffffff80214934:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021493b:	e9 2f 03 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff80214940:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214944:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214949:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021494d:	48 89 c2             	mov    %rax,%rdx
ffffffff80214950:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214954:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214958:	48 01 d0             	add    %rdx,%rax
ffffffff8021495b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021495f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214963:	48 8b 00             	mov    (%rax),%rax
ffffffff80214966:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021496a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021496e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214972:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214975:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214979:	0f 94 c0             	sete   %al
ffffffff8021497c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021497f:	48 85 c0             	test   %rax,%rax
ffffffff80214982:	74 0c                	je     ffffffff80214990 <_RME_Prc_Pgt+0x1db>
ffffffff80214984:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021498b:	e9 df 02 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff80214990:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214994:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214998:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8021499c:	0f 95 c0             	setne  %al
ffffffff8021499f:	0f b6 c0             	movzbl %al,%eax
ffffffff802149a2:	48 85 c0             	test   %rax,%rax
ffffffff802149a5:	74 0c                	je     ffffffff802149b3 <_RME_Prc_Pgt+0x1fe>
ffffffff802149a7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802149ae:	e9 bc 02 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat); 
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff802149b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802149b7:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802149bc:	48 85 c0             	test   %rax,%rax
ffffffff802149bf:	0f 85 98 00 00 00    	jne    ffffffff80214a5d <_RME_Prc_Pgt+0x2a8>
ffffffff802149c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802149c9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802149cd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff802149d1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802149d4:	0f 93 c0             	setae  %al
ffffffff802149d7:	0f b6 c0             	movzbl %al,%eax
ffffffff802149da:	48 85 c0             	test   %rax,%rax
ffffffff802149dd:	74 0c                	je     ffffffff802149eb <_RME_Prc_Pgt+0x236>
ffffffff802149df:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802149e6:	e9 84 02 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff802149eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802149ef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802149f3:	48 89 c2             	mov    %rax,%rdx
ffffffff802149f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802149fa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802149fe:	48 01 d0             	add    %rdx,%rax
ffffffff80214a01:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214a05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214a09:	48 8b 00             	mov    (%rax),%rax
ffffffff80214a0c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214a10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214a14:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214a18:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214a1b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214a1f:	0f 94 c0             	sete   %al
ffffffff80214a22:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a25:	48 85 c0             	test   %rax,%rax
ffffffff80214a28:	74 0c                	je     ffffffff80214a36 <_RME_Prc_Pgt+0x281>
ffffffff80214a2a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214a31:	e9 39 02 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff80214a36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214a3a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214a3e:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214a42:	0f 95 c0             	setne  %al
ffffffff80214a45:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a48:	48 85 c0             	test   %rax,%rax
ffffffff80214a4b:	0f 84 4c 01 00 00    	je     ffffffff80214b9d <_RME_Prc_Pgt+0x3e8>
ffffffff80214a51:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214a58:	e9 12 02 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff80214a5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214a61:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214a65:	48 89 c2             	mov    %rax,%rdx
ffffffff80214a68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214a6c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214a70:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214a73:	0f 93 c0             	setae  %al
ffffffff80214a76:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a79:	48 85 c0             	test   %rax,%rax
ffffffff80214a7c:	74 0c                	je     ffffffff80214a8a <_RME_Prc_Pgt+0x2d5>
ffffffff80214a7e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214a85:	e9 e5 01 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff80214a8a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214a8e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214a92:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214a96:	48 89 c2             	mov    %rax,%rdx
ffffffff80214a99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214a9d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214aa1:	48 01 d0             	add    %rdx,%rax
ffffffff80214aa4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214aa8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214aac:	48 8b 00             	mov    (%rax),%rax
ffffffff80214aaf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214ab3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214ab7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214abb:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214abe:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214ac2:	0f 94 c0             	sete   %al
ffffffff80214ac5:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ac8:	48 85 c0             	test   %rax,%rax
ffffffff80214acb:	74 0c                	je     ffffffff80214ad9 <_RME_Prc_Pgt+0x324>
ffffffff80214acd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214ad4:	e9 96 01 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff80214ad9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214add:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214ae1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214ae5:	0f 95 c0             	setne  %al
ffffffff80214ae8:	0f b6 c0             	movzbl %al,%eax
ffffffff80214aeb:	48 85 c0             	test   %rax,%rax
ffffffff80214aee:	74 0c                	je     ffffffff80214afc <_RME_Prc_Pgt+0x347>
ffffffff80214af0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214af7:	e9 73 01 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff80214afc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214b00:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214b05:	48 89 c2             	mov    %rax,%rdx
ffffffff80214b08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214b0c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214b10:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214b13:	0f 93 c0             	setae  %al
ffffffff80214b16:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b19:	48 85 c0             	test   %rax,%rax
ffffffff80214b1c:	74 0c                	je     ffffffff80214b2a <_RME_Prc_Pgt+0x375>
ffffffff80214b1e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214b25:	e9 45 01 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff80214b2a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214b2e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214b33:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214b37:	48 89 c2             	mov    %rax,%rdx
ffffffff80214b3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214b3e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214b42:	48 01 d0             	add    %rdx,%rax
ffffffff80214b45:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214b49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214b4d:	48 8b 00             	mov    (%rax),%rax
ffffffff80214b50:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214b54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214b58:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214b5c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214b5f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214b63:	0f 94 c0             	sete   %al
ffffffff80214b66:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b69:	48 85 c0             	test   %rax,%rax
ffffffff80214b6c:	74 0c                	je     ffffffff80214b7a <_RME_Prc_Pgt+0x3c5>
ffffffff80214b6e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214b75:	e9 f5 00 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
ffffffff80214b7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214b7e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214b82:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214b86:	0f 95 c0             	setne  %al
ffffffff80214b89:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b8c:	48 85 c0             	test   %rax,%rax
ffffffff80214b8f:	74 0c                	je     ffffffff80214b9d <_RME_Prc_Pgt+0x3e8>
ffffffff80214b91:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214b98:	e9 d2 00 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
                   struct RME_Cap_Pgt*,Pgt_New,Type_Stat);
#endif
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
ffffffff80214b9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214ba1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214ba5:	83 e0 08             	and    $0x8,%eax
ffffffff80214ba8:	48 85 c0             	test   %rax,%rax
ffffffff80214bab:	0f 94 c0             	sete   %al
ffffffff80214bae:	0f b6 c0             	movzbl %al,%eax
ffffffff80214bb1:	48 85 c0             	test   %rax,%rax
ffffffff80214bb4:	74 0c                	je     ffffffff80214bc2 <_RME_Prc_Pgt+0x40d>
ffffffff80214bb6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214bbd:	e9 ad 00 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_New,RME_PGT_FLAG_PRC_PGT);
ffffffff80214bc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214bc6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214bca:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80214bcf:	48 85 c0             	test   %rax,%rax
ffffffff80214bd2:	0f 94 c0             	sete   %al
ffffffff80214bd5:	0f b6 c0             	movzbl %al,%eax
ffffffff80214bd8:	48 85 c0             	test   %rax,%rax
ffffffff80214bdb:	74 0c                	je     ffffffff80214be9 <_RME_Prc_Pgt+0x434>
ffffffff80214bdd:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214be4:	e9 86 00 00 00       	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
#endif
    
    Pgt_Old=Prc_Op->Pgt;
ffffffff80214be9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214bed:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80214bf1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
#if(RME_PGT_RAW_ENABLE==0U)
    /* Convert to root */
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff80214bf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214bf9:	48 8b 00             	mov    (%rax),%rax
ffffffff80214bfc:	89 c0                	mov    %eax,%eax
ffffffff80214bfe:	48 85 c0             	test   %rax,%rax
ffffffff80214c01:	74 0a                	je     ffffffff80214c0d <_RME_Prc_Pgt+0x458>
ffffffff80214c03:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c07:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214c0b:	eb 04                	jmp    ffffffff80214c11 <_RME_Prc_Pgt+0x45c>
ffffffff80214c0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c11:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* Actually commit the change */
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Pgt)),
ffffffff80214c15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80214c19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214c1d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80214c21:	48 83 c1 30          	add    $0x30,%rcx
ffffffff80214c25:	48 89 c6             	mov    %rax,%rsi
ffffffff80214c28:	48 89 cf             	mov    %rcx,%rdi
ffffffff80214c2b:	e8 2e 7b ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80214c30:	48 85 c0             	test   %rax,%rax
ffffffff80214c33:	75 09                	jne    ffffffff80214c3e <_RME_Prc_Pgt+0x489>
                     Raw_Pgt)==RME_CASFAIL)
#endif
    {
        RME_COV_MARKER();
        
        return RME_ERR_PTH_CONFLICT;
ffffffff80214c35:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff80214c3c:	eb 31                	jmp    ffffffff80214c6f <_RME_Prc_Pgt+0x4ba>
        /* No action required */
    }
    
    /* Reference new table and dereference the old table */
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Pgt_New->Head.Root_Ref),1);
ffffffff80214c3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c42:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214c46:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214c4b:	48 89 c7             	mov    %rax,%rdi
ffffffff80214c4e:	e8 40 7b ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    RME_FETCH_ADD(&(Pgt_Old->Head.Root_Ref),-1);
ffffffff80214c53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214c57:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214c5b:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80214c62:	48 89 c7             	mov    %rax,%rdi
ffffffff80214c65:	e8 29 7b ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif
    
    return 0;
ffffffff80214c6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80214c6f:	c9                   	leave
ffffffff80214c70:	c3                   	ret

ffffffff80214c71 <_RME_Thd_Boot_Crt>:
                            rme_cid_t Cap_Thd,
                            rme_cid_t Cap_Prc,
                            rme_ptr_t Vaddr,
                            rme_ptr_t Prio,
                            struct RME_CPU_Local* Local)
{
ffffffff80214c71:	55                   	push   %rbp
ffffffff80214c72:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214c75:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80214c79:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80214c7d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80214c81:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80214c85:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80214c89:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80214c8d:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    struct RME_Cap_Prc* Prc_Root;
    struct RME_Thd_Struct* Thread;
    rme_ptr_t Type_Stat;
    
    /* Check whether the priority level is allowed */
    if(Prio>=RME_PREEMPT_PRIO_NUM)
ffffffff80214c91:	48 83 7d a0 3f       	cmpq   $0x3f,-0x60(%rbp)
ffffffff80214c96:	76 0c                	jbe    ffffffff80214ca4 <_RME_Thd_Boot_Crt+0x33>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80214c98:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80214c9f:	e9 47 06 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214ca4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214ca8:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214cad:	48 85 c0             	test   %rax,%rax
ffffffff80214cb0:	0f 85 98 00 00 00    	jne    ffffffff80214d4e <_RME_Thd_Boot_Crt+0xdd>
ffffffff80214cb6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214cba:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214cbe:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80214cc2:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214cc5:	0f 93 c0             	setae  %al
ffffffff80214cc8:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ccb:	48 85 c0             	test   %rax,%rax
ffffffff80214cce:	74 0c                	je     ffffffff80214cdc <_RME_Thd_Boot_Crt+0x6b>
ffffffff80214cd0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214cd7:	e9 0f 06 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214cdc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214ce0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214ce4:	48 89 c2             	mov    %rax,%rdx
ffffffff80214ce7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214ceb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214cef:	48 01 d0             	add    %rdx,%rax
ffffffff80214cf2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214cf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214cfa:	48 8b 00             	mov    (%rax),%rax
ffffffff80214cfd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214d01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214d05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214d09:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214d0c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214d10:	0f 94 c0             	sete   %al
ffffffff80214d13:	0f b6 c0             	movzbl %al,%eax
ffffffff80214d16:	48 85 c0             	test   %rax,%rax
ffffffff80214d19:	74 0c                	je     ffffffff80214d27 <_RME_Thd_Boot_Crt+0xb6>
ffffffff80214d1b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214d22:	e9 c4 05 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214d27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214d2b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214d2f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214d33:	0f 95 c0             	setne  %al
ffffffff80214d36:	0f b6 c0             	movzbl %al,%eax
ffffffff80214d39:	48 85 c0             	test   %rax,%rax
ffffffff80214d3c:	0f 84 4c 01 00 00    	je     ffffffff80214e8e <_RME_Thd_Boot_Crt+0x21d>
ffffffff80214d42:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214d49:	e9 9d 05 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214d4e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214d52:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214d56:	48 89 c2             	mov    %rax,%rdx
ffffffff80214d59:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214d5d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214d61:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214d64:	0f 93 c0             	setae  %al
ffffffff80214d67:	0f b6 c0             	movzbl %al,%eax
ffffffff80214d6a:	48 85 c0             	test   %rax,%rax
ffffffff80214d6d:	74 0c                	je     ffffffff80214d7b <_RME_Thd_Boot_Crt+0x10a>
ffffffff80214d6f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214d76:	e9 70 05 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214d7b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214d7f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214d83:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214d87:	48 89 c2             	mov    %rax,%rdx
ffffffff80214d8a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214d8e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214d92:	48 01 d0             	add    %rdx,%rax
ffffffff80214d95:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214d99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214d9d:	48 8b 00             	mov    (%rax),%rax
ffffffff80214da0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214da4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214da8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214dac:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214daf:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214db3:	0f 94 c0             	sete   %al
ffffffff80214db6:	0f b6 c0             	movzbl %al,%eax
ffffffff80214db9:	48 85 c0             	test   %rax,%rax
ffffffff80214dbc:	74 0c                	je     ffffffff80214dca <_RME_Thd_Boot_Crt+0x159>
ffffffff80214dbe:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214dc5:	e9 21 05 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214dca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214dce:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214dd2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214dd6:	0f 95 c0             	setne  %al
ffffffff80214dd9:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ddc:	48 85 c0             	test   %rax,%rax
ffffffff80214ddf:	74 0c                	je     ffffffff80214ded <_RME_Thd_Boot_Crt+0x17c>
ffffffff80214de1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214de8:	e9 fe 04 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214ded:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214df1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214df6:	48 89 c2             	mov    %rax,%rdx
ffffffff80214df9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214dfd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214e01:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214e04:	0f 93 c0             	setae  %al
ffffffff80214e07:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e0a:	48 85 c0             	test   %rax,%rax
ffffffff80214e0d:	74 0c                	je     ffffffff80214e1b <_RME_Thd_Boot_Crt+0x1aa>
ffffffff80214e0f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214e16:	e9 d0 04 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214e1b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214e1f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214e24:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214e28:	48 89 c2             	mov    %rax,%rdx
ffffffff80214e2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214e2f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214e33:	48 01 d0             	add    %rdx,%rax
ffffffff80214e36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214e3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214e3e:	48 8b 00             	mov    (%rax),%rax
ffffffff80214e41:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214e45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214e49:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214e4d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214e50:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214e54:	0f 94 c0             	sete   %al
ffffffff80214e57:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e5a:	48 85 c0             	test   %rax,%rax
ffffffff80214e5d:	74 0c                	je     ffffffff80214e6b <_RME_Thd_Boot_Crt+0x1fa>
ffffffff80214e5f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214e66:	e9 80 04 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214e6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214e6f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214e73:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214e77:	0f 95 c0             	setne  %al
ffffffff80214e7a:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e7d:	48 85 c0             	test   %rax,%rax
ffffffff80214e80:	74 0c                	je     ffffffff80214e8e <_RME_Thd_Boot_Crt+0x21d>
ffffffff80214e82:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214e89:	e9 5d 04 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80214e8e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80214e92:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214e97:	48 85 c0             	test   %rax,%rax
ffffffff80214e9a:	0f 85 98 00 00 00    	jne    ffffffff80214f38 <_RME_Thd_Boot_Crt+0x2c7>
ffffffff80214ea0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214ea4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214ea8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80214eac:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214eaf:	0f 93 c0             	setae  %al
ffffffff80214eb2:	0f b6 c0             	movzbl %al,%eax
ffffffff80214eb5:	48 85 c0             	test   %rax,%rax
ffffffff80214eb8:	74 0c                	je     ffffffff80214ec6 <_RME_Thd_Boot_Crt+0x255>
ffffffff80214eba:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214ec1:	e9 25 04 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214ec6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80214eca:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214ece:	48 89 c2             	mov    %rax,%rdx
ffffffff80214ed1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214ed5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214ed9:	48 01 d0             	add    %rdx,%rax
ffffffff80214edc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214ee0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214ee4:	48 8b 00             	mov    (%rax),%rax
ffffffff80214ee7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214eeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214eef:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214ef3:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214ef6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214efa:	0f 94 c0             	sete   %al
ffffffff80214efd:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f00:	48 85 c0             	test   %rax,%rax
ffffffff80214f03:	74 0c                	je     ffffffff80214f11 <_RME_Thd_Boot_Crt+0x2a0>
ffffffff80214f05:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214f0c:	e9 da 03 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214f11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214f15:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214f19:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214f1d:	0f 95 c0             	setne  %al
ffffffff80214f20:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f23:	48 85 c0             	test   %rax,%rax
ffffffff80214f26:	0f 84 4c 01 00 00    	je     ffffffff80215078 <_RME_Thd_Boot_Crt+0x407>
ffffffff80214f2c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214f33:	e9 b3 03 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214f38:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80214f3c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214f40:	48 89 c2             	mov    %rax,%rdx
ffffffff80214f43:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214f47:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214f4b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214f4e:	0f 93 c0             	setae  %al
ffffffff80214f51:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f54:	48 85 c0             	test   %rax,%rax
ffffffff80214f57:	74 0c                	je     ffffffff80214f65 <_RME_Thd_Boot_Crt+0x2f4>
ffffffff80214f59:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214f60:	e9 86 03 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214f65:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80214f69:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214f6d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214f71:	48 89 c2             	mov    %rax,%rdx
ffffffff80214f74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214f78:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214f7c:	48 01 d0             	add    %rdx,%rax
ffffffff80214f7f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214f83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214f87:	48 8b 00             	mov    (%rax),%rax
ffffffff80214f8a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214f8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214f92:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214f96:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214f99:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214f9d:	0f 94 c0             	sete   %al
ffffffff80214fa0:	0f b6 c0             	movzbl %al,%eax
ffffffff80214fa3:	48 85 c0             	test   %rax,%rax
ffffffff80214fa6:	74 0c                	je     ffffffff80214fb4 <_RME_Thd_Boot_Crt+0x343>
ffffffff80214fa8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214faf:	e9 37 03 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214fb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214fb8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214fbc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214fc0:	0f 95 c0             	setne  %al
ffffffff80214fc3:	0f b6 c0             	movzbl %al,%eax
ffffffff80214fc6:	48 85 c0             	test   %rax,%rax
ffffffff80214fc9:	74 0c                	je     ffffffff80214fd7 <_RME_Thd_Boot_Crt+0x366>
ffffffff80214fcb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214fd2:	e9 14 03 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80214fd7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80214fdb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214fe0:	48 89 c2             	mov    %rax,%rdx
ffffffff80214fe3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214fe7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214feb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214fee:	0f 93 c0             	setae  %al
ffffffff80214ff1:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ff4:	48 85 c0             	test   %rax,%rax
ffffffff80214ff7:	74 0c                	je     ffffffff80215005 <_RME_Thd_Boot_Crt+0x394>
ffffffff80214ff9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215000:	e9 e6 02 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80215005:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80215009:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021500e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215012:	48 89 c2             	mov    %rax,%rdx
ffffffff80215015:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215019:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021501d:	48 01 d0             	add    %rdx,%rax
ffffffff80215020:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215024:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215028:	48 8b 00             	mov    (%rax),%rax
ffffffff8021502b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021502f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215033:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215037:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021503a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021503e:	0f 94 c0             	sete   %al
ffffffff80215041:	0f b6 c0             	movzbl %al,%eax
ffffffff80215044:	48 85 c0             	test   %rax,%rax
ffffffff80215047:	74 0c                	je     ffffffff80215055 <_RME_Thd_Boot_Crt+0x3e4>
ffffffff80215049:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215050:	e9 96 02 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80215055:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215059:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021505d:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80215061:	0f 95 c0             	setne  %al
ffffffff80215064:	0f b6 c0             	movzbl %al,%eax
ffffffff80215067:	48 85 c0             	test   %rax,%rax
ffffffff8021506a:	74 0c                	je     ffffffff80215078 <_RME_Thd_Boot_Crt+0x407>
ffffffff8021506c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215073:	e9 73 02 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);   
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80215078:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021507c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215080:	83 e0 01             	and    $0x1,%eax
ffffffff80215083:	48 85 c0             	test   %rax,%rax
ffffffff80215086:	0f 94 c0             	sete   %al
ffffffff80215089:	0f b6 c0             	movzbl %al,%eax
ffffffff8021508c:	48 85 c0             	test   %rax,%rax
ffffffff8021508f:	74 0c                	je     ffffffff8021509d <_RME_Thd_Boot_Crt+0x42c>
ffffffff80215091:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215098:	e9 4e 02 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff8021509d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802150a1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802150a5:	83 e0 02             	and    $0x2,%eax
ffffffff802150a8:	48 85 c0             	test   %rax,%rax
ffffffff802150ab:	0f 94 c0             	sete   %al
ffffffff802150ae:	0f b6 c0             	movzbl %al,%eax
ffffffff802150b1:	48 85 c0             	test   %rax,%rax
ffffffff802150b4:	74 0c                	je     ffffffff802150c2 <_RME_Thd_Boot_Crt+0x451>
ffffffff802150b6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802150bd:	e9 29 02 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff802150c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802150c6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802150ca:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff802150ce:	48 39 c2             	cmp    %rax,%rdx
ffffffff802150d1:	0f 93 c0             	setae  %al
ffffffff802150d4:	0f b6 c0             	movzbl %al,%eax
ffffffff802150d7:	48 85 c0             	test   %rax,%rax
ffffffff802150da:	74 0c                	je     ffffffff802150e8 <_RME_Thd_Boot_Crt+0x477>
ffffffff802150dc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802150e3:	e9 03 02 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff802150e8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802150ec:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802150f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802150f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802150f7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802150fb:	48 01 d0             	add    %rdx,%rax
ffffffff802150fe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff80215102:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215106:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021510d:	00 00 00 
ffffffff80215110:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80215115:	48 89 c7             	mov    %rax,%rdi
ffffffff80215118:	e8 41 76 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021511d:	48 85 c0             	test   %rax,%rax
ffffffff80215120:	0f 94 c0             	sete   %al
ffffffff80215123:	0f b6 c0             	movzbl %al,%eax
ffffffff80215126:	48 85 c0             	test   %rax,%rax
ffffffff80215129:	74 0c                	je     ffffffff80215137 <_RME_Thd_Boot_Crt+0x4c6>
ffffffff8021512b:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80215132:	e9 b4 01 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
ffffffff80215137:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021513c:	e8 d0 76 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80215141:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80215145:	48 89 42 20          	mov    %rax,0x20(%rdx)
     
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_THD_SIZE(0U))!=0)
ffffffff80215149:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021514d:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff80215152:	48 89 c7             	mov    %rax,%rdi
ffffffff80215155:	e8 4a d1 ff ff       	call   ffffffff802122a4 <_RME_Kot_Mark>
ffffffff8021515a:	48 85 c0             	test   %rax,%rax
ffffffff8021515d:	74 17                	je     ffffffff80215176 <_RME_Thd_Boot_Crt+0x505>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff8021515f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215163:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8021516a:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80215171:	e9 75 01 00 00       	jmp    ffffffff802152eb <_RME_Thd_Boot_Crt+0x67a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    Thread=(struct RME_Thd_Struct*)Vaddr;
ffffffff80215176:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021517a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* The TID of these threads are by default taken care of by the kernel */
    Thread->Sched.TID=0U;
ffffffff8021517e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215182:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80215189:	00 
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff8021518a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021518e:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff80215195:	ff ff 7f 
ffffffff80215198:	48 89 48 30          	mov    %rcx,0x30(%rax)
    Thread->Sched.State=RME_THD_READY;
ffffffff8021519c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802151a0:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff802151a7:	00 
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff802151a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802151ac:	48 8b 00             	mov    (%rax),%rax
ffffffff802151af:	89 c0                	mov    %eax,%eax
ffffffff802151b1:	48 85 c0             	test   %rax,%rax
ffffffff802151b4:	74 0a                	je     ffffffff802151c0 <_RME_Thd_Boot_Crt+0x54f>
ffffffff802151b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802151ba:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802151be:	eb 04                	jmp    ffffffff802151c4 <_RME_Thd_Boot_Crt+0x553>
ffffffff802151c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802151c4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Thread->Sched.Prc=Prc_Root;
ffffffff802151c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802151cc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802151d0:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Thread->Sched.Signal=0U;
ffffffff802151d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802151d8:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff802151df:	00 
    Thread->Sched.Prio=Prio;
ffffffff802151e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802151e4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff802151e8:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Thread->Sched.Prio_Max=RME_PREEMPT_PRIO_NUM-1U;
ffffffff802151ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802151f0:	48 c7 40 48 3f 00 00 	movq   $0x3f,0x48(%rax)
ffffffff802151f7:	00 
    /* Set scheduler reference to 1 so cannot be free */
    Thread->Sched.Sched_Ref=1U;
ffffffff802151f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802151fc:	48 c7 40 60 01 00 00 	movq   $0x1,0x60(%rax)
ffffffff80215203:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff80215204:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215208:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff8021520f:	00 
    /* Bind the thread to the current CPU */
    Thread->Sched.Local=Local;
ffffffff80215210:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215214:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff80215218:	48 89 50 28          	mov    %rdx,0x28(%rax)
    /* This is a marking that this thread haven't sent any notifications */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8021521c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215220:	48 83 c0 10          	add    $0x10,%rax
ffffffff80215224:	48 89 c7             	mov    %rax,%rdi
ffffffff80215227:	e8 2c 7b ff ff       	call   ffffffff8020cd58 <_RME_List_Crt>
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff8021522c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215230:	48 83 c0 78          	add    $0x78,%rax
ffffffff80215234:	48 89 c7             	mov    %rax,%rdi
ffffffff80215237:	e8 1c 7b ff ff       	call   ffffffff8020cd58 <_RME_List_Crt>
    /* Point its pointer to itself - this will never be a hypervisor thread */
    Thread->Ctx.Hyp_Attr=0U;
ffffffff8021523c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215240:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
ffffffff80215247:	00 00 00 00 
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff8021524b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021524f:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff80215255:	48 89 c2             	mov    %rax,%rdx
ffffffff80215258:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021525c:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    /* Initialize the invocation stack */
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff80215263:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215267:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021526d:	48 89 c7             	mov    %rax,%rdi
ffffffff80215270:	e8 e3 7a ff ff       	call   ffffffff8020cd58 <_RME_List_Crt>
    Thread->Ctx.Invstk_Depth=0U;
ffffffff80215275:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215279:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
ffffffff80215280:	00 00 00 00 
    
    /* Info init */
    Thd_Crt->Head.Root_Ref=1U;
ffffffff80215284:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215288:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8021528f:	00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff80215290:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215294:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80215298:	48 89 50 18          	mov    %rdx,0x18(%rax)
    /* This can only be a parent, and not a child, and cannot be freed. Additionally,
     * this should not be blocked on any endpoint. Any attempt to block this thread will fail.
     * Setting execution information for this is also prohibited. */
    Thd_Crt->Head.Flag=RME_THD_FLAG_SCHED_PRIO|RME_THD_FLAG_SCHED_PARENT|
ffffffff8021529c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802152a0:	48 c7 40 10 ec 01 00 	movq   $0x1ec,0x10(%rax)
ffffffff802152a7:	00 
                       RME_THD_FLAG_XFER_DST|RME_THD_FLAG_XFER_SRC|
                       RME_THD_FLAG_SCHED_RCV|RME_THD_FLAG_SWT;

    /* Referece process */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref), 1U);
ffffffff802152a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802152ac:	48 83 c0 08          	add    $0x8,%rax
ffffffff802152b0:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802152b5:	48 89 c7             	mov    %rax,%rdi
ffffffff802152b8:	e8 d6 74 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Insert this into the runqueue, and set current thread to it */
    _RME_Run_Ins(Thread);
ffffffff802152bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152c1:	48 89 c7             	mov    %rax,%rdi
ffffffff802152c4:	e8 f4 d9 ff ff       	call   ffffffff80212cbd <_RME_Run_Ins>
    Local->Thd_Cur=Thread;
ffffffff802152c9:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802152cd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802152d1:	48 89 50 08          	mov    %rdx,0x8(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff802152d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802152d9:	48 b9 00 00 00 00 00 	movabs $0x6000000000000,%rcx
ffffffff802152e0:	00 06 00 
ffffffff802152e3:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_THD,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff802152e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802152eb:	c9                   	leave
ffffffff802152ec:	c3                   	ret

ffffffff802152ed <_RME_Thd_Crt>:
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Prio_Max,
                              rme_ptr_t Raddr,
                              rme_ptr_t Attr,
                              rme_ptr_t Is_Hyp)
{
ffffffff802152ed:	55                   	push   %rbp
ffffffff802152ee:	48 89 e5             	mov    %rsp,%rbp
ffffffff802152f1:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff802152f5:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff802152f9:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff802152fd:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff80215301:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff80215305:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff80215309:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Vaddr;
    rme_ptr_t Size;
    
    /* See if the maximum priority relationship is correct - a thread
     * can never create a thread with higher maximum priority */
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
ffffffff8021530d:	e8 2d 65 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80215312:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80215316:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff8021531a:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
ffffffff8021531e:	73 0c                	jae    ffffffff8021532c <_RME_Thd_Crt+0x3f>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80215320:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80215327:	e9 2b 09 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021532c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80215330:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215335:	48 85 c0             	test   %rax,%rax
ffffffff80215338:	0f 85 98 00 00 00    	jne    ffffffff802153d6 <_RME_Thd_Crt+0xe9>
ffffffff8021533e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215342:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215346:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8021534a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021534d:	0f 93 c0             	setae  %al
ffffffff80215350:	0f b6 c0             	movzbl %al,%eax
ffffffff80215353:	48 85 c0             	test   %rax,%rax
ffffffff80215356:	74 0c                	je     ffffffff80215364 <_RME_Thd_Crt+0x77>
ffffffff80215358:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021535f:	e9 f3 08 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215364:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80215368:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021536c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021536f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215373:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215377:	48 01 d0             	add    %rdx,%rax
ffffffff8021537a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021537e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215382:	48 8b 00             	mov    (%rax),%rax
ffffffff80215385:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215389:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021538d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215391:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215394:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215398:	0f 94 c0             	sete   %al
ffffffff8021539b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021539e:	48 85 c0             	test   %rax,%rax
ffffffff802153a1:	74 0c                	je     ffffffff802153af <_RME_Thd_Crt+0xc2>
ffffffff802153a3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802153aa:	e9 a8 08 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802153af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802153b3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802153b7:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802153bb:	0f 95 c0             	setne  %al
ffffffff802153be:	0f b6 c0             	movzbl %al,%eax
ffffffff802153c1:	48 85 c0             	test   %rax,%rax
ffffffff802153c4:	0f 84 4c 01 00 00    	je     ffffffff80215516 <_RME_Thd_Crt+0x229>
ffffffff802153ca:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802153d1:	e9 81 08 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802153d6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802153da:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802153de:	48 89 c2             	mov    %rax,%rdx
ffffffff802153e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802153e5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802153e9:	48 39 c2             	cmp    %rax,%rdx
ffffffff802153ec:	0f 93 c0             	setae  %al
ffffffff802153ef:	0f b6 c0             	movzbl %al,%eax
ffffffff802153f2:	48 85 c0             	test   %rax,%rax
ffffffff802153f5:	74 0c                	je     ffffffff80215403 <_RME_Thd_Crt+0x116>
ffffffff802153f7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802153fe:	e9 54 08 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215403:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80215407:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021540b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021540f:	48 89 c2             	mov    %rax,%rdx
ffffffff80215412:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215416:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021541a:	48 01 d0             	add    %rdx,%rax
ffffffff8021541d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215421:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215425:	48 8b 00             	mov    (%rax),%rax
ffffffff80215428:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021542c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215430:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215434:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215437:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021543b:	0f 94 c0             	sete   %al
ffffffff8021543e:	0f b6 c0             	movzbl %al,%eax
ffffffff80215441:	48 85 c0             	test   %rax,%rax
ffffffff80215444:	74 0c                	je     ffffffff80215452 <_RME_Thd_Crt+0x165>
ffffffff80215446:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021544d:	e9 05 08 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215452:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215456:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021545a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021545e:	0f 95 c0             	setne  %al
ffffffff80215461:	0f b6 c0             	movzbl %al,%eax
ffffffff80215464:	48 85 c0             	test   %rax,%rax
ffffffff80215467:	74 0c                	je     ffffffff80215475 <_RME_Thd_Crt+0x188>
ffffffff80215469:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215470:	e9 e2 07 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215475:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80215479:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021547e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215481:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215485:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215489:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021548c:	0f 93 c0             	setae  %al
ffffffff8021548f:	0f b6 c0             	movzbl %al,%eax
ffffffff80215492:	48 85 c0             	test   %rax,%rax
ffffffff80215495:	74 0c                	je     ffffffff802154a3 <_RME_Thd_Crt+0x1b6>
ffffffff80215497:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021549e:	e9 b4 07 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802154a3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802154a7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802154ac:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802154b0:	48 89 c2             	mov    %rax,%rdx
ffffffff802154b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802154b7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802154bb:	48 01 d0             	add    %rdx,%rax
ffffffff802154be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802154c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802154c6:	48 8b 00             	mov    (%rax),%rax
ffffffff802154c9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802154cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802154d1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802154d5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802154d8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802154dc:	0f 94 c0             	sete   %al
ffffffff802154df:	0f b6 c0             	movzbl %al,%eax
ffffffff802154e2:	48 85 c0             	test   %rax,%rax
ffffffff802154e5:	74 0c                	je     ffffffff802154f3 <_RME_Thd_Crt+0x206>
ffffffff802154e7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802154ee:	e9 64 07 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802154f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802154f7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802154fb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802154ff:	0f 95 c0             	setne  %al
ffffffff80215502:	0f b6 c0             	movzbl %al,%eax
ffffffff80215505:	48 85 c0             	test   %rax,%rax
ffffffff80215508:	74 0c                	je     ffffffff80215516 <_RME_Thd_Crt+0x229>
ffffffff8021550a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215511:	e9 41 07 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff80215516:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021551a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021551f:	48 85 c0             	test   %rax,%rax
ffffffff80215522:	0f 85 98 00 00 00    	jne    ffffffff802155c0 <_RME_Thd_Crt+0x2d3>
ffffffff80215528:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021552c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215530:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80215534:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215537:	0f 93 c0             	setae  %al
ffffffff8021553a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021553d:	48 85 c0             	test   %rax,%rax
ffffffff80215540:	74 0c                	je     ffffffff8021554e <_RME_Thd_Crt+0x261>
ffffffff80215542:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215549:	e9 09 07 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff8021554e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215552:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215556:	48 89 c2             	mov    %rax,%rdx
ffffffff80215559:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021555d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215561:	48 01 d0             	add    %rdx,%rax
ffffffff80215564:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80215568:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021556c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021556f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215573:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215577:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021557b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021557e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215582:	0f 94 c0             	sete   %al
ffffffff80215585:	0f b6 c0             	movzbl %al,%eax
ffffffff80215588:	48 85 c0             	test   %rax,%rax
ffffffff8021558b:	74 0c                	je     ffffffff80215599 <_RME_Thd_Crt+0x2ac>
ffffffff8021558d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215594:	e9 be 06 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215599:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021559d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802155a1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802155a5:	0f 95 c0             	setne  %al
ffffffff802155a8:	0f b6 c0             	movzbl %al,%eax
ffffffff802155ab:	48 85 c0             	test   %rax,%rax
ffffffff802155ae:	0f 84 4c 01 00 00    	je     ffffffff80215700 <_RME_Thd_Crt+0x413>
ffffffff802155b4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802155bb:	e9 97 06 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802155c0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802155c4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802155c8:	48 89 c2             	mov    %rax,%rdx
ffffffff802155cb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802155cf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802155d3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802155d6:	0f 93 c0             	setae  %al
ffffffff802155d9:	0f b6 c0             	movzbl %al,%eax
ffffffff802155dc:	48 85 c0             	test   %rax,%rax
ffffffff802155df:	74 0c                	je     ffffffff802155ed <_RME_Thd_Crt+0x300>
ffffffff802155e1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802155e8:	e9 6a 06 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802155ed:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802155f1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802155f5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802155f9:	48 89 c2             	mov    %rax,%rdx
ffffffff802155fc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215600:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215604:	48 01 d0             	add    %rdx,%rax
ffffffff80215607:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021560b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021560f:	48 8b 00             	mov    (%rax),%rax
ffffffff80215612:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215616:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021561a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021561e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215621:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215625:	0f 94 c0             	sete   %al
ffffffff80215628:	0f b6 c0             	movzbl %al,%eax
ffffffff8021562b:	48 85 c0             	test   %rax,%rax
ffffffff8021562e:	74 0c                	je     ffffffff8021563c <_RME_Thd_Crt+0x34f>
ffffffff80215630:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215637:	e9 1b 06 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff8021563c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215640:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215644:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215648:	0f 95 c0             	setne  %al
ffffffff8021564b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021564e:	48 85 c0             	test   %rax,%rax
ffffffff80215651:	74 0c                	je     ffffffff8021565f <_RME_Thd_Crt+0x372>
ffffffff80215653:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021565a:	e9 f8 05 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff8021565f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215663:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215668:	48 89 c2             	mov    %rax,%rdx
ffffffff8021566b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021566f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215673:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215676:	0f 93 c0             	setae  %al
ffffffff80215679:	0f b6 c0             	movzbl %al,%eax
ffffffff8021567c:	48 85 c0             	test   %rax,%rax
ffffffff8021567f:	74 0c                	je     ffffffff8021568d <_RME_Thd_Crt+0x3a0>
ffffffff80215681:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215688:	e9 ca 05 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff8021568d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215691:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215696:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021569a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021569d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802156a1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802156a5:	48 01 d0             	add    %rdx,%rax
ffffffff802156a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802156ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802156b0:	48 8b 00             	mov    (%rax),%rax
ffffffff802156b3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802156b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802156bb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802156bf:	0f b7 c0             	movzwl %ax,%eax
ffffffff802156c2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802156c6:	0f 94 c0             	sete   %al
ffffffff802156c9:	0f b6 c0             	movzbl %al,%eax
ffffffff802156cc:	48 85 c0             	test   %rax,%rax
ffffffff802156cf:	74 0c                	je     ffffffff802156dd <_RME_Thd_Crt+0x3f0>
ffffffff802156d1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802156d8:	e9 7a 05 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802156dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802156e1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802156e5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802156e9:	0f 95 c0             	setne  %al
ffffffff802156ec:	0f b6 c0             	movzbl %al,%eax
ffffffff802156ef:	48 85 c0             	test   %rax,%rax
ffffffff802156f2:	74 0c                	je     ffffffff80215700 <_RME_Thd_Crt+0x413>
ffffffff802156f4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802156fb:	e9 57 05 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80215700:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80215704:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215709:	48 85 c0             	test   %rax,%rax
ffffffff8021570c:	0f 85 98 00 00 00    	jne    ffffffff802157aa <_RME_Thd_Crt+0x4bd>
ffffffff80215712:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215716:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021571a:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff8021571e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215721:	0f 93 c0             	setae  %al
ffffffff80215724:	0f b6 c0             	movzbl %al,%eax
ffffffff80215727:	48 85 c0             	test   %rax,%rax
ffffffff8021572a:	74 0c                	je     ffffffff80215738 <_RME_Thd_Crt+0x44b>
ffffffff8021572c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215733:	e9 1f 05 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215738:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8021573c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215740:	48 89 c2             	mov    %rax,%rdx
ffffffff80215743:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215747:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021574b:	48 01 d0             	add    %rdx,%rax
ffffffff8021574e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215752:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215756:	48 8b 00             	mov    (%rax),%rax
ffffffff80215759:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021575d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215761:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215765:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215768:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021576c:	0f 94 c0             	sete   %al
ffffffff8021576f:	0f b6 c0             	movzbl %al,%eax
ffffffff80215772:	48 85 c0             	test   %rax,%rax
ffffffff80215775:	74 0c                	je     ffffffff80215783 <_RME_Thd_Crt+0x496>
ffffffff80215777:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021577e:	e9 d4 04 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215783:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215787:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021578b:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8021578f:	0f 95 c0             	setne  %al
ffffffff80215792:	0f b6 c0             	movzbl %al,%eax
ffffffff80215795:	48 85 c0             	test   %rax,%rax
ffffffff80215798:	0f 84 4c 01 00 00    	je     ffffffff802158ea <_RME_Thd_Crt+0x5fd>
ffffffff8021579e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802157a5:	e9 ad 04 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802157aa:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff802157ae:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802157b2:	48 89 c2             	mov    %rax,%rdx
ffffffff802157b5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802157b9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802157bd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802157c0:	0f 93 c0             	setae  %al
ffffffff802157c3:	0f b6 c0             	movzbl %al,%eax
ffffffff802157c6:	48 85 c0             	test   %rax,%rax
ffffffff802157c9:	74 0c                	je     ffffffff802157d7 <_RME_Thd_Crt+0x4ea>
ffffffff802157cb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802157d2:	e9 80 04 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802157d7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff802157db:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802157df:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802157e3:	48 89 c2             	mov    %rax,%rdx
ffffffff802157e6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802157ea:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802157ee:	48 01 d0             	add    %rdx,%rax
ffffffff802157f1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802157f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802157f9:	48 8b 00             	mov    (%rax),%rax
ffffffff802157fc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215800:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215804:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215808:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021580b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021580f:	0f 94 c0             	sete   %al
ffffffff80215812:	0f b6 c0             	movzbl %al,%eax
ffffffff80215815:	48 85 c0             	test   %rax,%rax
ffffffff80215818:	74 0c                	je     ffffffff80215826 <_RME_Thd_Crt+0x539>
ffffffff8021581a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215821:	e9 31 04 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215826:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021582a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021582e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215832:	0f 95 c0             	setne  %al
ffffffff80215835:	0f b6 c0             	movzbl %al,%eax
ffffffff80215838:	48 85 c0             	test   %rax,%rax
ffffffff8021583b:	74 0c                	je     ffffffff80215849 <_RME_Thd_Crt+0x55c>
ffffffff8021583d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215844:	e9 0e 04 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215849:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8021584d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215852:	48 89 c2             	mov    %rax,%rdx
ffffffff80215855:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215859:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021585d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215860:	0f 93 c0             	setae  %al
ffffffff80215863:	0f b6 c0             	movzbl %al,%eax
ffffffff80215866:	48 85 c0             	test   %rax,%rax
ffffffff80215869:	74 0c                	je     ffffffff80215877 <_RME_Thd_Crt+0x58a>
ffffffff8021586b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215872:	e9 e0 03 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215877:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8021587b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215880:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215884:	48 89 c2             	mov    %rax,%rdx
ffffffff80215887:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021588b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021588f:	48 01 d0             	add    %rdx,%rax
ffffffff80215892:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215896:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021589a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021589d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802158a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802158a5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802158a9:	0f b7 c0             	movzwl %ax,%eax
ffffffff802158ac:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802158b0:	0f 94 c0             	sete   %al
ffffffff802158b3:	0f b6 c0             	movzbl %al,%eax
ffffffff802158b6:	48 85 c0             	test   %rax,%rax
ffffffff802158b9:	74 0c                	je     ffffffff802158c7 <_RME_Thd_Crt+0x5da>
ffffffff802158bb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802158c2:	e9 90 03 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802158c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802158cb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802158cf:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802158d3:	0f 95 c0             	setne  %al
ffffffff802158d6:	0f b6 c0             	movzbl %al,%eax
ffffffff802158d9:	48 85 c0             	test   %rax,%rax
ffffffff802158dc:	74 0c                	je     ffffffff802158ea <_RME_Thd_Crt+0x5fd>
ffffffff802158de:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802158e5:	e9 6d 03 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802158ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802158ee:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802158f2:	83 e0 01             	and    $0x1,%eax
ffffffff802158f5:	48 85 c0             	test   %rax,%rax
ffffffff802158f8:	0f 94 c0             	sete   %al
ffffffff802158fb:	0f b6 c0             	movzbl %al,%eax
ffffffff802158fe:	48 85 c0             	test   %rax,%rax
ffffffff80215901:	74 0c                	je     ffffffff8021590f <_RME_Thd_Crt+0x622>
ffffffff80215903:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021590a:	e9 48 03 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff8021590f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215913:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215917:	83 e0 02             	and    $0x2,%eax
ffffffff8021591a:	48 85 c0             	test   %rax,%rax
ffffffff8021591d:	0f 94 c0             	sete   %al
ffffffff80215920:	0f b6 c0             	movzbl %al,%eax
ffffffff80215923:	48 85 c0             	test   %rax,%rax
ffffffff80215926:	74 0c                	je     ffffffff80215934 <_RME_Thd_Crt+0x647>
ffffffff80215928:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021592f:	e9 23 03 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
    /* See if the creation is valid for this kmem range */
    if(Is_Hyp==0U)
ffffffff80215934:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
ffffffff80215939:	75 23                	jne    ffffffff8021595e <_RME_Thd_Crt+0x671>
    {
        RME_COV_MARKER();
        
        Size=RME_THD_SIZE(Attr);
ffffffff8021593b:	48 c7 45 d8 60 01 00 	movq   $0x160,-0x28(%rbp)
ffffffff80215942:	00 
#else
        Size=RME_HYP_SIZE;
#endif
    }
    
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff80215943:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215947:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021594b:	83 e0 04             	and    $0x4,%eax
ffffffff8021594e:	48 85 c0             	test   %rax,%rax
ffffffff80215951:	0f 94 c0             	sete   %al
ffffffff80215954:	0f b6 c0             	movzbl %al,%eax
ffffffff80215957:	48 85 c0             	test   %rax,%rax
ffffffff8021595a:	74 1a                	je     ffffffff80215976 <_RME_Thd_Crt+0x689>
ffffffff8021595c:	eb 0c                	jmp    ffffffff8021596a <_RME_Thd_Crt+0x67d>
        return RME_ERR_PTH_HADDR;
ffffffff8021595e:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80215965:	e9 ed 02 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff8021596a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215971:	e9 e1 02 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215976:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021597a:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021597e:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80215982:	48 01 d0             	add    %rdx,%rax
ffffffff80215985:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80215989:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021598d:	48 3b 45 10          	cmp    0x10(%rbp),%rax
ffffffff80215991:	0f 92 c0             	setb   %al
ffffffff80215994:	0f b6 c0             	movzbl %al,%eax
ffffffff80215997:	48 85 c0             	test   %rax,%rax
ffffffff8021599a:	74 0c                	je     ffffffff802159a8 <_RME_Thd_Crt+0x6bb>
ffffffff8021599c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802159a3:	e9 af 02 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802159a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802159ac:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802159b0:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff802159b4:	0f 92 c0             	setb   %al
ffffffff802159b7:	0f b6 c0             	movzbl %al,%eax
ffffffff802159ba:	48 85 c0             	test   %rax,%rax
ffffffff802159bd:	74 0c                	je     ffffffff802159cb <_RME_Thd_Crt+0x6de>
ffffffff802159bf:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802159c6:	e9 8c 02 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802159cb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802159cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802159d3:	48 01 d0             	add    %rdx,%rax
ffffffff802159d6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff802159da:	0f 92 c0             	setb   %al
ffffffff802159dd:	0f b6 c0             	movzbl %al,%eax
ffffffff802159e0:	48 85 c0             	test   %rax,%rax
ffffffff802159e3:	74 0c                	je     ffffffff802159f1 <_RME_Thd_Crt+0x704>
ffffffff802159e5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802159ec:	e9 66 02 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff802159f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802159f5:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff802159f9:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff802159fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215a01:	48 01 c8             	add    %rcx,%rax
ffffffff80215a04:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80215a08:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215a0b:	0f 92 c0             	setb   %al
ffffffff80215a0e:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a11:	48 85 c0             	test   %rax,%rax
ffffffff80215a14:	74 0c                	je     ffffffff80215a22 <_RME_Thd_Crt+0x735>
ffffffff80215a16:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215a1d:	e9 35 02 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff80215a22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215a26:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215a2a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
ffffffff80215a2e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215a31:	0f 93 c0             	setae  %al
ffffffff80215a34:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a37:	48 85 c0             	test   %rax,%rax
ffffffff80215a3a:	74 0c                	je     ffffffff80215a48 <_RME_Thd_Crt+0x75b>
ffffffff80215a3c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215a43:	e9 0f 02 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215a48:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80215a4c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215a50:	48 89 c2             	mov    %rax,%rdx
ffffffff80215a53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215a57:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215a5b:	48 01 d0             	add    %rdx,%rax
ffffffff80215a5e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff80215a62:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215a66:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80215a6d:	00 00 00 
ffffffff80215a70:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80215a75:	48 89 c7             	mov    %rax,%rdi
ffffffff80215a78:	e8 e1 6c ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80215a7d:	48 85 c0             	test   %rax,%rax
ffffffff80215a80:	0f 94 c0             	sete   %al
ffffffff80215a83:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a86:	48 85 c0             	test   %rax,%rax
ffffffff80215a89:	74 0c                	je     ffffffff80215a97 <_RME_Thd_Crt+0x7aa>
ffffffff80215a8b:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80215a92:	e9 c0 01 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
ffffffff80215a97:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80215a9c:	e8 70 6d ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80215aa1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80215aa5:	48 89 42 20          	mov    %rax,0x20(%rdx)
     
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,Size)<0)
ffffffff80215aa9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80215aad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215ab1:	48 89 d6             	mov    %rdx,%rsi
ffffffff80215ab4:	48 89 c7             	mov    %rax,%rdi
ffffffff80215ab7:	e8 e8 c7 ff ff       	call   ffffffff802122a4 <_RME_Kot_Mark>
ffffffff80215abc:	48 85 c0             	test   %rax,%rax
ffffffff80215abf:	79 17                	jns    ffffffff80215ad8 <_RME_Thd_Crt+0x7eb>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff80215ac1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215ac5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80215acc:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80215ad3:	e9 7f 01 00 00       	jmp    ffffffff80215c57 <_RME_Thd_Crt+0x96a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Object init */
    Thread=(struct RME_Thd_Struct*)Vaddr;
ffffffff80215ad8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215adc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    /* These thread's TID default to 0, and have no timeslices assigned */
    Thread->Sched.TID=0U;
ffffffff80215ae0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ae4:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80215aeb:	00 
    Thread->Sched.Slice=0U;
ffffffff80215aec:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215af0:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80215af7:	00 
    Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80215af8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215afc:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80215b03:	00 
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80215b04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215b08:	48 8b 00             	mov    (%rax),%rax
ffffffff80215b0b:	89 c0                	mov    %eax,%eax
ffffffff80215b0d:	48 85 c0             	test   %rax,%rax
ffffffff80215b10:	74 0a                	je     ffffffff80215b1c <_RME_Thd_Crt+0x82f>
ffffffff80215b12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215b16:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80215b1a:	eb 04                	jmp    ffffffff80215b20 <_RME_Thd_Crt+0x833>
ffffffff80215b1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215b20:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Thread->Sched.Prc=Prc_Root;
ffffffff80215b24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215b28:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80215b2c:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Thread->Sched.Signal=0U;
ffffffff80215b30:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215b34:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff80215b3b:	00 
    Thread->Sched.Prio_Max=Prio_Max;
ffffffff80215b3c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215b40:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff80215b44:	48 89 50 48          	mov    %rdx,0x48(%rax)
    Thread->Sched.Sched_Ref=0U;
ffffffff80215b48:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215b4c:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
ffffffff80215b53:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff80215b54:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215b58:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff80215b5f:	00 
    /* Currently the thread is not bound to any particular CPU */
    Thread->Sched.Local=RME_THD_FREE;
ffffffff80215b60:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215b64:	48 c7 40 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%rax)
ffffffff80215b6b:	ff 
    /* This is a marking that this thread haven't sent any notifications */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80215b6c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215b70:	48 83 c0 10          	add    $0x10,%rax
ffffffff80215b74:	48 89 c7             	mov    %rax,%rdi
ffffffff80215b77:	e8 dc 71 ff ff       	call   ffffffff8020cd58 <_RME_List_Crt>
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff80215b7c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215b80:	48 83 c0 78          	add    $0x78,%rax
ffffffff80215b84:	48 89 c7             	mov    %rax,%rdi
ffffffff80215b87:	e8 cc 71 ff ff       	call   ffffffff8020cd58 <_RME_List_Crt>
    /* Point its pointer to itself - this is not a hypervisor thread yet */
    if(Is_Hyp==0U)
ffffffff80215b8c:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
ffffffff80215b91:	75 29                	jne    ffffffff80215bbc <_RME_Thd_Crt+0x8cf>
    {
        RME_COV_MARKER();
        
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff80215b93:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215b97:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80215b9b:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80215ba2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215ba6:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff80215bac:	48 89 c2             	mov    %rax,%rdx
ffffffff80215baf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215bb3:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
ffffffff80215bba:	eb 2b                	jmp    ffffffff80215be7 <_RME_Thd_Crt+0x8fa>
    /* Default to HYP_VA_BASE for all created hypervisor threads */
    else
    {
        RME_COV_MARKER();
        
        Thread->Ctx.Hyp_Attr=Attr|RME_THD_HYP_FLAG;
ffffffff80215bbc:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
ffffffff80215bc3:	00 00 80 
ffffffff80215bc6:	48 0b 45 18          	or     0x18(%rbp),%rax
ffffffff80215bca:	48 89 c2             	mov    %rax,%rdx
ffffffff80215bcd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215bd1:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
        Thread->Ctx.Reg=RME_HYP_VA_BASE;
ffffffff80215bd8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215bdc:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
ffffffff80215be3:	00 00 00 00 
    }
    /* Initialize the invocation stack */
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff80215be7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215beb:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff80215bf1:	48 89 c7             	mov    %rax,%rdi
ffffffff80215bf4:	e8 5f 71 ff ff       	call   ffffffff8020cd58 <_RME_List_Crt>
    Thread->Ctx.Invstk_Depth=0U;
ffffffff80215bf9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215bfd:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
ffffffff80215c04:	00 00 00 00 

    /* Header init */
    Thd_Crt->Head.Root_Ref=0U;
ffffffff80215c08:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215c0c:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80215c13:	00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff80215c14:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215c18:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80215c1c:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Thd_Crt->Head.Flag=RME_THD_FLAG_ALL;
ffffffff80215c20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215c24:	48 c7 40 10 ff 01 00 	movq   $0x1ff,0x10(%rax)
ffffffff80215c2b:	00 

    /* Reference process */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref), 1U);
ffffffff80215c2c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80215c30:	48 83 c0 08          	add    $0x8,%rax
ffffffff80215c34:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80215c39:	48 89 c7             	mov    %rax,%rdi
ffffffff80215c3c:	e8 52 6b ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff80215c41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215c45:	48 b9 00 00 00 00 00 	movabs $0x6000000000000,%rcx
ffffffff80215c4c:	00 06 00 
ffffffff80215c4f:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_THD,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80215c52:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80215c57:	c9                   	leave
ffffffff80215c58:	c3                   	ret

ffffffff80215c59 <_RME_Thd_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Thd)
{
ffffffff80215c59:	55                   	push   %rbp
ffffffff80215c5a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80215c5d:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80215c61:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80215c65:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80215c69:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    /* These are for deletion */
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80215c6d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c71:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215c76:	48 85 c0             	test   %rax,%rax
ffffffff80215c79:	0f 85 98 00 00 00    	jne    ffffffff80215d17 <_RME_Thd_Del+0xbe>
ffffffff80215c7f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215c83:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215c87:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80215c8b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215c8e:	0f 93 c0             	setae  %al
ffffffff80215c91:	0f b6 c0             	movzbl %al,%eax
ffffffff80215c94:	48 85 c0             	test   %rax,%rax
ffffffff80215c97:	74 0c                	je     ffffffff80215ca5 <_RME_Thd_Del+0x4c>
ffffffff80215c99:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215ca0:	e9 33 04 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
ffffffff80215ca5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ca9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215cad:	48 89 c2             	mov    %rax,%rdx
ffffffff80215cb0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215cb4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215cb8:	48 01 d0             	add    %rdx,%rax
ffffffff80215cbb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215cbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215cc3:	48 8b 00             	mov    (%rax),%rax
ffffffff80215cc6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215cca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215cce:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215cd2:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215cd5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215cd9:	0f 94 c0             	sete   %al
ffffffff80215cdc:	0f b6 c0             	movzbl %al,%eax
ffffffff80215cdf:	48 85 c0             	test   %rax,%rax
ffffffff80215ce2:	74 0c                	je     ffffffff80215cf0 <_RME_Thd_Del+0x97>
ffffffff80215ce4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215ceb:	e9 e8 03 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
ffffffff80215cf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215cf4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215cf8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215cfc:	0f 95 c0             	setne  %al
ffffffff80215cff:	0f b6 c0             	movzbl %al,%eax
ffffffff80215d02:	48 85 c0             	test   %rax,%rax
ffffffff80215d05:	0f 84 4c 01 00 00    	je     ffffffff80215e57 <_RME_Thd_Del+0x1fe>
ffffffff80215d0b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215d12:	e9 c1 03 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
ffffffff80215d17:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d1b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215d1f:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d22:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215d26:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215d2a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215d2d:	0f 93 c0             	setae  %al
ffffffff80215d30:	0f b6 c0             	movzbl %al,%eax
ffffffff80215d33:	48 85 c0             	test   %rax,%rax
ffffffff80215d36:	74 0c                	je     ffffffff80215d44 <_RME_Thd_Del+0xeb>
ffffffff80215d38:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215d3f:	e9 94 03 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
ffffffff80215d44:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d48:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215d4c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215d50:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d53:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215d57:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215d5b:	48 01 d0             	add    %rdx,%rax
ffffffff80215d5e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215d62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215d66:	48 8b 00             	mov    (%rax),%rax
ffffffff80215d69:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215d6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215d71:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215d75:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215d78:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215d7c:	0f 94 c0             	sete   %al
ffffffff80215d7f:	0f b6 c0             	movzbl %al,%eax
ffffffff80215d82:	48 85 c0             	test   %rax,%rax
ffffffff80215d85:	74 0c                	je     ffffffff80215d93 <_RME_Thd_Del+0x13a>
ffffffff80215d87:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215d8e:	e9 45 03 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
ffffffff80215d93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215d97:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215d9b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215d9f:	0f 95 c0             	setne  %al
ffffffff80215da2:	0f b6 c0             	movzbl %al,%eax
ffffffff80215da5:	48 85 c0             	test   %rax,%rax
ffffffff80215da8:	74 0c                	je     ffffffff80215db6 <_RME_Thd_Del+0x15d>
ffffffff80215daa:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215db1:	e9 22 03 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
ffffffff80215db6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215dba:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215dbf:	48 89 c2             	mov    %rax,%rdx
ffffffff80215dc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215dc6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215dca:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215dcd:	0f 93 c0             	setae  %al
ffffffff80215dd0:	0f b6 c0             	movzbl %al,%eax
ffffffff80215dd3:	48 85 c0             	test   %rax,%rax
ffffffff80215dd6:	74 0c                	je     ffffffff80215de4 <_RME_Thd_Del+0x18b>
ffffffff80215dd8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215ddf:	e9 f4 02 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
ffffffff80215de4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215de8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215ded:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215df1:	48 89 c2             	mov    %rax,%rdx
ffffffff80215df4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215df8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215dfc:	48 01 d0             	add    %rdx,%rax
ffffffff80215dff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215e03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215e07:	48 8b 00             	mov    (%rax),%rax
ffffffff80215e0a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215e0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215e12:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215e16:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215e19:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215e1d:	0f 94 c0             	sete   %al
ffffffff80215e20:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e23:	48 85 c0             	test   %rax,%rax
ffffffff80215e26:	74 0c                	je     ffffffff80215e34 <_RME_Thd_Del+0x1db>
ffffffff80215e28:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215e2f:	e9 a4 02 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
ffffffff80215e34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215e38:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215e3c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215e40:	0f 95 c0             	setne  %al
ffffffff80215e43:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e46:	48 85 c0             	test   %rax,%rax
ffffffff80215e49:	74 0c                	je     ffffffff80215e57 <_RME_Thd_Del+0x1fe>
ffffffff80215e4b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215e52:	e9 81 02 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80215e57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215e5b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215e5f:	83 e0 02             	and    $0x2,%eax
ffffffff80215e62:	48 85 c0             	test   %rax,%rax
ffffffff80215e65:	0f 94 c0             	sete   %al
ffffffff80215e68:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e6b:	48 85 c0             	test   %rax,%rax
ffffffff80215e6e:	74 0c                	je     ffffffff80215e7c <_RME_Thd_Del+0x223>
ffffffff80215e70:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215e77:	e9 5c 02 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff80215e7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215e80:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215e84:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80215e88:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215e8b:	0f 93 c0             	setae  %al
ffffffff80215e8e:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e91:	48 85 c0             	test   %rax,%rax
ffffffff80215e94:	74 0c                	je     ffffffff80215ea2 <_RME_Thd_Del+0x249>
ffffffff80215e96:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215e9d:	e9 36 02 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
ffffffff80215ea2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80215ea6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215eaa:	48 89 c2             	mov    %rax,%rdx
ffffffff80215ead:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215eb1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215eb5:	48 01 d0             	add    %rdx,%rax
ffffffff80215eb8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff80215ebc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215ec0:	48 8b 00             	mov    (%rax),%rax
ffffffff80215ec3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215ec7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215ecb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215ecf:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215ed2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215ed6:	0f 95 c0             	setne  %al
ffffffff80215ed9:	0f b6 c0             	movzbl %al,%eax
ffffffff80215edc:	48 85 c0             	test   %rax,%rax
ffffffff80215edf:	74 0c                	je     ffffffff80215eed <_RME_Thd_Del+0x294>
ffffffff80215ee1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215ee8:	e9 eb 01 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
ffffffff80215eed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215ef1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215ef5:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80215ef9:	0f 95 c0             	setne  %al
ffffffff80215efc:	0f b6 c0             	movzbl %al,%eax
ffffffff80215eff:	48 85 c0             	test   %rax,%rax
ffffffff80215f02:	74 0c                	je     ffffffff80215f10 <_RME_Thd_Del+0x2b7>
ffffffff80215f04:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215f0b:	e9 c8 01 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
ffffffff80215f10:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80215f15:	e8 f7 68 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80215f1a:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215f21:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80215f25:	48 29 c2             	sub    %rax,%rdx
ffffffff80215f28:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80215f2c:	0f 96 c0             	setbe  %al
ffffffff80215f2f:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f32:	48 98                	cltq
ffffffff80215f34:	48 85 c0             	test   %rax,%rax
ffffffff80215f37:	74 0c                	je     ffffffff80215f45 <_RME_Thd_Del+0x2ec>
ffffffff80215f39:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80215f40:	e9 93 01 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
ffffffff80215f45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215f49:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80215f4d:	48 85 c0             	test   %rax,%rax
ffffffff80215f50:	0f 95 c0             	setne  %al
ffffffff80215f53:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f56:	48 85 c0             	test   %rax,%rax
ffffffff80215f59:	74 44                	je     ffffffff80215f9f <_RME_Thd_Del+0x346>
ffffffff80215f5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215f5f:	89 c0                	mov    %eax,%eax
ffffffff80215f61:	48 85 c0             	test   %rax,%rax
ffffffff80215f64:	0f 94 c0             	sete   %al
ffffffff80215f67:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f6a:	48 85 c0             	test   %rax,%rax
ffffffff80215f6d:	74 24                	je     ffffffff80215f93 <_RME_Thd_Del+0x33a>
ffffffff80215f6f:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80215f76:	00 ff ff 
ffffffff80215f79:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80215f7d:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215f84:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80215f88:	48 89 ce             	mov    %rcx,%rsi
ffffffff80215f8b:	48 89 c7             	mov    %rax,%rdi
ffffffff80215f8e:	e8 cb 67 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80215f93:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80215f9a:	e9 39 01 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
    
    /* Get the thread */
    Thread=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
ffffffff80215f9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215fa3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215fa7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* See if the thread is free. If still bound, we cannot proceed to deletion */
    if(Thread->Sched.Local!=RME_THD_FREE)
ffffffff80215fab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215faf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215fb3:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff80215fb7:	74 30                	je     ffffffff80215fe9 <_RME_Thd_Del+0x390>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Thd_Del,Type_Stat);
ffffffff80215fb9:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80215fc0:	00 ff ff 
ffffffff80215fc3:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80215fc7:	48 89 c2             	mov    %rax,%rdx
ffffffff80215fca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215fce:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80215fd2:	48 89 ce             	mov    %rcx,%rsi
ffffffff80215fd5:	48 89 c7             	mov    %rax,%rdi
ffffffff80215fd8:	e8 81 67 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_PTH_INVSTATE;
ffffffff80215fdd:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80215fe4:	e9 ef 00 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Thd_Del,Type_Stat);
ffffffff80215fe9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215fed:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80215ff1:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80215ff6:	48 89 ce             	mov    %rcx,%rsi
ffffffff80215ff9:	48 89 c7             	mov    %rax,%rdi
ffffffff80215ffc:	e8 5d 67 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80216001:	48 85 c0             	test   %rax,%rax
ffffffff80216004:	0f 94 c0             	sete   %al
ffffffff80216007:	0f b6 c0             	movzbl %al,%eax
ffffffff8021600a:	48 85 c0             	test   %rax,%rax
ffffffff8021600d:	74 5b                	je     ffffffff8021606a <_RME_Thd_Del+0x411>
ffffffff8021600f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80216016:	e9 bd 00 00 00       	jmp    ffffffff802160d8 <_RME_Thd_Del+0x47f>
     * stack to empty, and free all the invocation stubs. This can be virtually
     * unbounded if the invocation stack is just too deep. This is left to the
     * user; if this is what he or she wants, be our guest. */
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
    {
        Invocation=(struct RME_Inv_Struct*)(Thread->Ctx.Invstk.Next);
ffffffff8021601b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021601f:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff80216026:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8021602a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021602e:	48 8b 10             	mov    (%rax),%rdx
ffffffff80216031:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216035:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216039:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021603c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021603f:	e8 3a 6d ff ff       	call   ffffffff8020cd7e <_RME_List_Del>
        Invocation->Thd_Act=0U;
ffffffff80216044:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216048:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021604f:	00 
        Thread->Ctx.Invstk_Depth--;
ffffffff80216050:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216054:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff8021605b:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8021605f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216063:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff8021606a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021606e:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff80216075:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216079:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021607f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216082:	75 97                	jne    ffffffff8021601b <_RME_Thd_Del+0x3c2>
    }
    RME_ASSERT(Thread->Ctx.Invstk_Depth==0U);
    
    /* Dereference the process */
    RME_FETCH_ADD(&(Thread->Sched.Prc->Head.Root_Ref), -1);
ffffffff80216084:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216088:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021608c:	48 83 c0 08          	add    $0x8,%rax
ffffffff80216090:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80216097:	48 89 c7             	mov    %rax,%rdi
ffffffff8021609a:	e8 f4 66 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Try to depopulate the area - this must be successful */
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)==0U)
ffffffff8021609f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802160a3:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff802160aa:	48 85 c0             	test   %rax,%rax
ffffffff802160ad:	78 13                	js     ffffffff802160c2 <_RME_Thd_Del+0x469>
    {
        RME_COV_MARKER();

        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff802160af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802160b3:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff802160b8:	48 89 c7             	mov    %rax,%rdi
ffffffff802160bb:	e8 27 c5 ff ff       	call   ffffffff802125e7 <_RME_Kot_Erase>
ffffffff802160c0:	eb 11                	jmp    ffffffff802160d3 <_RME_Thd_Del+0x47a>
    }
    else
    {
        RME_COV_MARKER();

        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff802160c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802160c6:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff802160cb:	48 89 c7             	mov    %rax,%rdi
ffffffff802160ce:	e8 14 c5 ff ff       	call   ffffffff802125e7 <_RME_Kot_Erase>
                   RME_HYP_SIZE)==0);
    }
    
    return 0;
ffffffff802160d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802160d8:	c9                   	leave
ffffffff802160d9:	c3                   	ret

ffffffff802160da <_RME_Thd_Sched_Bind>:
                                     rme_cid_t Cap_Thd_Sched,
                                     rme_cid_t Cap_Sig,
                                     rme_tid_t TID,
                                     rme_ptr_t Prio,
                                     rme_ptr_t Haddr)
{
ffffffff802160da:	55                   	push   %rbp
ffffffff802160db:	48 89 e5             	mov    %rsp,%rbp
ffffffff802160de:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff802160e2:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff802160e6:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff802160ea:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff802160ee:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff802160f2:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff802160f6:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Hyp_Attr;
    rme_ptr_t End;

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802160fa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802160fe:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80216103:	48 85 c0             	test   %rax,%rax
ffffffff80216106:	0f 85 98 00 00 00    	jne    ffffffff802161a4 <_RME_Thd_Sched_Bind+0xca>
ffffffff8021610c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216110:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216114:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80216118:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021611b:	0f 93 c0             	setae  %al
ffffffff8021611e:	0f b6 c0             	movzbl %al,%eax
ffffffff80216121:	48 85 c0             	test   %rax,%rax
ffffffff80216124:	74 0c                	je     ffffffff80216132 <_RME_Thd_Sched_Bind+0x58>
ffffffff80216126:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021612d:	e9 2e 08 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff80216132:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216136:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021613a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021613d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216141:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216145:	48 01 d0             	add    %rdx,%rax
ffffffff80216148:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021614c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216150:	48 8b 00             	mov    (%rax),%rax
ffffffff80216153:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216157:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021615b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021615f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216162:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216166:	0f 94 c0             	sete   %al
ffffffff80216169:	0f b6 c0             	movzbl %al,%eax
ffffffff8021616c:	48 85 c0             	test   %rax,%rax
ffffffff8021616f:	74 0c                	je     ffffffff8021617d <_RME_Thd_Sched_Bind+0xa3>
ffffffff80216171:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216178:	e9 e3 07 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff8021617d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216181:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216185:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216189:	0f 95 c0             	setne  %al
ffffffff8021618c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021618f:	48 85 c0             	test   %rax,%rax
ffffffff80216192:	0f 84 4c 01 00 00    	je     ffffffff802162e4 <_RME_Thd_Sched_Bind+0x20a>
ffffffff80216198:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021619f:	e9 bc 07 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff802161a4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802161a8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802161ac:	48 89 c2             	mov    %rax,%rdx
ffffffff802161af:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802161b3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802161b7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802161ba:	0f 93 c0             	setae  %al
ffffffff802161bd:	0f b6 c0             	movzbl %al,%eax
ffffffff802161c0:	48 85 c0             	test   %rax,%rax
ffffffff802161c3:	74 0c                	je     ffffffff802161d1 <_RME_Thd_Sched_Bind+0xf7>
ffffffff802161c5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802161cc:	e9 8f 07 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff802161d1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802161d5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802161d9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802161dd:	48 89 c2             	mov    %rax,%rdx
ffffffff802161e0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802161e4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802161e8:	48 01 d0             	add    %rdx,%rax
ffffffff802161eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802161ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802161f3:	48 8b 00             	mov    (%rax),%rax
ffffffff802161f6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802161fa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802161fe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216202:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216205:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216209:	0f 94 c0             	sete   %al
ffffffff8021620c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021620f:	48 85 c0             	test   %rax,%rax
ffffffff80216212:	74 0c                	je     ffffffff80216220 <_RME_Thd_Sched_Bind+0x146>
ffffffff80216214:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021621b:	e9 40 07 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff80216220:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216224:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216228:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021622c:	0f 95 c0             	setne  %al
ffffffff8021622f:	0f b6 c0             	movzbl %al,%eax
ffffffff80216232:	48 85 c0             	test   %rax,%rax
ffffffff80216235:	74 0c                	je     ffffffff80216243 <_RME_Thd_Sched_Bind+0x169>
ffffffff80216237:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021623e:	e9 1d 07 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff80216243:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216247:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021624c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021624f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216253:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216257:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021625a:	0f 93 c0             	setae  %al
ffffffff8021625d:	0f b6 c0             	movzbl %al,%eax
ffffffff80216260:	48 85 c0             	test   %rax,%rax
ffffffff80216263:	74 0c                	je     ffffffff80216271 <_RME_Thd_Sched_Bind+0x197>
ffffffff80216265:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021626c:	e9 ef 06 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff80216271:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216275:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021627a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021627e:	48 89 c2             	mov    %rax,%rdx
ffffffff80216281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216285:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216289:	48 01 d0             	add    %rdx,%rax
ffffffff8021628c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216290:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216294:	48 8b 00             	mov    (%rax),%rax
ffffffff80216297:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021629b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021629f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802162a3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802162a6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802162aa:	0f 94 c0             	sete   %al
ffffffff802162ad:	0f b6 c0             	movzbl %al,%eax
ffffffff802162b0:	48 85 c0             	test   %rax,%rax
ffffffff802162b3:	74 0c                	je     ffffffff802162c1 <_RME_Thd_Sched_Bind+0x1e7>
ffffffff802162b5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802162bc:	e9 9f 06 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff802162c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802162c5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802162c9:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802162cd:	0f 95 c0             	setne  %al
ffffffff802162d0:	0f b6 c0             	movzbl %al,%eax
ffffffff802162d3:	48 85 c0             	test   %rax,%rax
ffffffff802162d6:	74 0c                	je     ffffffff802162e4 <_RME_Thd_Sched_Bind+0x20a>
ffffffff802162d8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802162df:	e9 7c 06 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff802162e4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802162e8:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802162ed:	48 85 c0             	test   %rax,%rax
ffffffff802162f0:	0f 85 98 00 00 00    	jne    ffffffff8021638e <_RME_Thd_Sched_Bind+0x2b4>
ffffffff802162f6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802162fa:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802162fe:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80216302:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216305:	0f 93 c0             	setae  %al
ffffffff80216308:	0f b6 c0             	movzbl %al,%eax
ffffffff8021630b:	48 85 c0             	test   %rax,%rax
ffffffff8021630e:	74 0c                	je     ffffffff8021631c <_RME_Thd_Sched_Bind+0x242>
ffffffff80216310:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216317:	e9 44 06 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff8021631c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80216320:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216324:	48 89 c2             	mov    %rax,%rdx
ffffffff80216327:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021632b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021632f:	48 01 d0             	add    %rdx,%rax
ffffffff80216332:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216336:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021633a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021633d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216341:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216345:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216349:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021634c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216350:	0f 94 c0             	sete   %al
ffffffff80216353:	0f b6 c0             	movzbl %al,%eax
ffffffff80216356:	48 85 c0             	test   %rax,%rax
ffffffff80216359:	74 0c                	je     ffffffff80216367 <_RME_Thd_Sched_Bind+0x28d>
ffffffff8021635b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216362:	e9 f9 05 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff80216367:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021636b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021636f:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216373:	0f 95 c0             	setne  %al
ffffffff80216376:	0f b6 c0             	movzbl %al,%eax
ffffffff80216379:	48 85 c0             	test   %rax,%rax
ffffffff8021637c:	0f 84 4c 01 00 00    	je     ffffffff802164ce <_RME_Thd_Sched_Bind+0x3f4>
ffffffff80216382:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216389:	e9 d2 05 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff8021638e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80216392:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216396:	48 89 c2             	mov    %rax,%rdx
ffffffff80216399:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021639d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802163a1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802163a4:	0f 93 c0             	setae  %al
ffffffff802163a7:	0f b6 c0             	movzbl %al,%eax
ffffffff802163aa:	48 85 c0             	test   %rax,%rax
ffffffff802163ad:	74 0c                	je     ffffffff802163bb <_RME_Thd_Sched_Bind+0x2e1>
ffffffff802163af:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802163b6:	e9 a5 05 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff802163bb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802163bf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802163c3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802163c7:	48 89 c2             	mov    %rax,%rdx
ffffffff802163ca:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802163ce:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802163d2:	48 01 d0             	add    %rdx,%rax
ffffffff802163d5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802163d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802163dd:	48 8b 00             	mov    (%rax),%rax
ffffffff802163e0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802163e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802163e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802163ec:	0f b7 c0             	movzwl %ax,%eax
ffffffff802163ef:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802163f3:	0f 94 c0             	sete   %al
ffffffff802163f6:	0f b6 c0             	movzbl %al,%eax
ffffffff802163f9:	48 85 c0             	test   %rax,%rax
ffffffff802163fc:	74 0c                	je     ffffffff8021640a <_RME_Thd_Sched_Bind+0x330>
ffffffff802163fe:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216405:	e9 56 05 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff8021640a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021640e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216412:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216416:	0f 95 c0             	setne  %al
ffffffff80216419:	0f b6 c0             	movzbl %al,%eax
ffffffff8021641c:	48 85 c0             	test   %rax,%rax
ffffffff8021641f:	74 0c                	je     ffffffff8021642d <_RME_Thd_Sched_Bind+0x353>
ffffffff80216421:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216428:	e9 33 05 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff8021642d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80216431:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216436:	48 89 c2             	mov    %rax,%rdx
ffffffff80216439:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021643d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216441:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216444:	0f 93 c0             	setae  %al
ffffffff80216447:	0f b6 c0             	movzbl %al,%eax
ffffffff8021644a:	48 85 c0             	test   %rax,%rax
ffffffff8021644d:	74 0c                	je     ffffffff8021645b <_RME_Thd_Sched_Bind+0x381>
ffffffff8021644f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216456:	e9 05 05 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff8021645b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021645f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216464:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216468:	48 89 c2             	mov    %rax,%rdx
ffffffff8021646b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021646f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216473:	48 01 d0             	add    %rdx,%rax
ffffffff80216476:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021647a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021647e:	48 8b 00             	mov    (%rax),%rax
ffffffff80216481:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216485:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216489:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021648d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216490:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216494:	0f 94 c0             	sete   %al
ffffffff80216497:	0f b6 c0             	movzbl %al,%eax
ffffffff8021649a:	48 85 c0             	test   %rax,%rax
ffffffff8021649d:	74 0c                	je     ffffffff802164ab <_RME_Thd_Sched_Bind+0x3d1>
ffffffff8021649f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802164a6:	e9 b5 04 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff802164ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802164af:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802164b3:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802164b7:	0f 95 c0             	setne  %al
ffffffff802164ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802164bd:	48 85 c0             	test   %rax,%rax
ffffffff802164c0:	74 0c                	je     ffffffff802164ce <_RME_Thd_Sched_Bind+0x3f4>
ffffffff802164c2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802164c9:	e9 92 04 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
                   struct RME_Cap_Thd*,Thd_Sched,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff802164ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802164d2:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802164d6:	83 e0 02             	and    $0x2,%eax
ffffffff802164d9:	48 85 c0             	test   %rax,%rax
ffffffff802164dc:	0f 94 c0             	sete   %al
ffffffff802164df:	0f b6 c0             	movzbl %al,%eax
ffffffff802164e2:	48 85 c0             	test   %rax,%rax
ffffffff802164e5:	74 0c                	je     ffffffff802164f3 <_RME_Thd_Sched_Bind+0x419>
ffffffff802164e7:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802164ee:	e9 6d 04 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
ffffffff802164f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802164f7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802164fb:	83 e0 04             	and    $0x4,%eax
ffffffff802164fe:	48 85 c0             	test   %rax,%rax
ffffffff80216501:	0f 94 c0             	sete   %al
ffffffff80216504:	0f b6 c0             	movzbl %al,%eax
ffffffff80216507:	48 85 c0             	test   %rax,%rax
ffffffff8021650a:	74 0c                	je     ffffffff80216518 <_RME_Thd_Sched_Bind+0x43e>
ffffffff8021650c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80216513:	e9 48 04 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
    
    /* Check if we need the signal endpoint for this operation */
    if(Cap_Sig!=RME_CID_NULL)
ffffffff80216518:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff8021651d:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
ffffffff80216521:	0f 84 0f 02 00 00    	je     ffffffff80216736 <_RME_Thd_Sched_Bind+0x65c>
    {
        RME_COV_MARKER();

        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80216527:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8021652b:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80216530:	48 85 c0             	test   %rax,%rax
ffffffff80216533:	0f 85 98 00 00 00    	jne    ffffffff802165d1 <_RME_Thd_Sched_Bind+0x4f7>
ffffffff80216539:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021653d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216541:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
ffffffff80216545:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216548:	0f 93 c0             	setae  %al
ffffffff8021654b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021654e:	48 85 c0             	test   %rax,%rax
ffffffff80216551:	74 0c                	je     ffffffff8021655f <_RME_Thd_Sched_Bind+0x485>
ffffffff80216553:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021655a:	e9 01 04 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff8021655f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216563:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216567:	48 89 c2             	mov    %rax,%rdx
ffffffff8021656a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021656e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216572:	48 01 d0             	add    %rdx,%rax
ffffffff80216575:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80216579:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021657d:	48 8b 00             	mov    (%rax),%rax
ffffffff80216580:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216584:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216588:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021658c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021658f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216593:	0f 94 c0             	sete   %al
ffffffff80216596:	0f b6 c0             	movzbl %al,%eax
ffffffff80216599:	48 85 c0             	test   %rax,%rax
ffffffff8021659c:	74 0c                	je     ffffffff802165aa <_RME_Thd_Sched_Bind+0x4d0>
ffffffff8021659e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802165a5:	e9 b6 03 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff802165aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802165ae:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802165b2:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802165b6:	0f 95 c0             	setne  %al
ffffffff802165b9:	0f b6 c0             	movzbl %al,%eax
ffffffff802165bc:	48 85 c0             	test   %rax,%rax
ffffffff802165bf:	0f 84 4c 01 00 00    	je     ffffffff80216711 <_RME_Thd_Sched_Bind+0x637>
ffffffff802165c5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802165cc:	e9 8f 03 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff802165d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff802165d5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802165d9:	48 89 c2             	mov    %rax,%rdx
ffffffff802165dc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802165e0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802165e4:	48 39 c2             	cmp    %rax,%rdx
ffffffff802165e7:	0f 93 c0             	setae  %al
ffffffff802165ea:	0f b6 c0             	movzbl %al,%eax
ffffffff802165ed:	48 85 c0             	test   %rax,%rax
ffffffff802165f0:	74 0c                	je     ffffffff802165fe <_RME_Thd_Sched_Bind+0x524>
ffffffff802165f2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802165f9:	e9 62 03 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff802165fe:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216602:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216606:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021660a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021660d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216611:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216615:	48 01 d0             	add    %rdx,%rax
ffffffff80216618:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021661c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216620:	48 8b 00             	mov    (%rax),%rax
ffffffff80216623:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216627:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021662b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021662f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216632:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216636:	0f 94 c0             	sete   %al
ffffffff80216639:	0f b6 c0             	movzbl %al,%eax
ffffffff8021663c:	48 85 c0             	test   %rax,%rax
ffffffff8021663f:	74 0c                	je     ffffffff8021664d <_RME_Thd_Sched_Bind+0x573>
ffffffff80216641:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216648:	e9 13 03 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff8021664d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216651:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216655:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216659:	0f 95 c0             	setne  %al
ffffffff8021665c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021665f:	48 85 c0             	test   %rax,%rax
ffffffff80216662:	74 0c                	je     ffffffff80216670 <_RME_Thd_Sched_Bind+0x596>
ffffffff80216664:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021666b:	e9 f0 02 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff80216670:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216674:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216679:	48 89 c2             	mov    %rax,%rdx
ffffffff8021667c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216680:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216684:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216687:	0f 93 c0             	setae  %al
ffffffff8021668a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021668d:	48 85 c0             	test   %rax,%rax
ffffffff80216690:	74 0c                	je     ffffffff8021669e <_RME_Thd_Sched_Bind+0x5c4>
ffffffff80216692:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216699:	e9 c2 02 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff8021669e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff802166a2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802166a7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802166ab:	48 89 c2             	mov    %rax,%rdx
ffffffff802166ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802166b2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802166b6:	48 01 d0             	add    %rdx,%rax
ffffffff802166b9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802166bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802166c1:	48 8b 00             	mov    (%rax),%rax
ffffffff802166c4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802166c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802166cc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802166d0:	0f b7 c0             	movzwl %ax,%eax
ffffffff802166d3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802166d7:	0f 94 c0             	sete   %al
ffffffff802166da:	0f b6 c0             	movzbl %al,%eax
ffffffff802166dd:	48 85 c0             	test   %rax,%rax
ffffffff802166e0:	74 0c                	je     ffffffff802166ee <_RME_Thd_Sched_Bind+0x614>
ffffffff802166e2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802166e9:	e9 72 02 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
ffffffff802166ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802166f2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802166f6:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802166fa:	0f 95 c0             	setne  %al
ffffffff802166fd:	0f b6 c0             	movzbl %al,%eax
ffffffff80216700:	48 85 c0             	test   %rax,%rax
ffffffff80216703:	74 0c                	je     ffffffff80216711 <_RME_Thd_Sched_Bind+0x637>
ffffffff80216705:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021670c:	e9 4f 02 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
                       struct RME_Cap_Sig*,Sig_Op,Type_Stat);
        RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SCHED);
ffffffff80216711:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216715:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216719:	83 e0 20             	and    $0x20,%eax
ffffffff8021671c:	48 85 c0             	test   %rax,%rax
ffffffff8021671f:	0f 94 c0             	sete   %al
ffffffff80216722:	0f b6 c0             	movzbl %al,%eax
ffffffff80216725:	48 85 c0             	test   %rax,%rax
ffffffff80216728:	74 14                	je     ffffffff8021673e <_RME_Thd_Sched_Bind+0x664>
ffffffff8021672a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80216731:	e9 2a 02 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
    }
    else
    {
        RME_COV_MARKER();

        Sig_Op=RME_NULL;
ffffffff80216736:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021673d:	00 
    }

    /* Check if the target thread is already bound. If yes, we just quit */
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff8021673e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216742:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216746:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Local_Old=Thread->Sched.Local;
ffffffff8021674a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021674e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216752:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Local_Old!=RME_THD_FREE)
ffffffff80216756:	48 83 7d d0 ff       	cmpq   $0xffffffffffffffff,-0x30(%rbp)
ffffffff8021675b:	74 0c                	je     ffffffff80216769 <_RME_Thd_Sched_Bind+0x68f>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff8021675d:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216764:	e9 f7 01 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the parent thread is on the same core with the current processor */
    Local_New=RME_CPU_LOCAL();
ffffffff80216769:	e8 d1 50 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021676e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Scheduler=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
ffffffff80216772:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216776:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021677a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    if(Scheduler->Sched.Local!=Local_New)
ffffffff8021677e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80216782:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216786:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff8021678a:	74 0c                	je     ffffffff80216798 <_RME_Thd_Sched_Bind+0x6be>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff8021678c:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216793:	e9 c8 01 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if we are trying to bind to ourself - prohibited */
    if(Thread==Scheduler)
ffffffff80216798:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021679c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff802167a0:	75 0c                	jne    ffffffff802167ae <_RME_Thd_Sched_Bind+0x6d4>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_NOTIF;
ffffffff802167a2:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff802167a9:	e9 b2 01 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the priority relationship is correct */
    if(Scheduler->Sched.Prio_Max<Prio)
ffffffff802167ae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802167b2:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff802167b6:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
ffffffff802167ba:	73 0c                	jae    ffffffff802167c8 <_RME_Thd_Sched_Bind+0x6ee>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff802167bc:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff802167c3:	e9 98 01 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check whether the coprocessor context attribute is compatible with this core */
    Hyp_Attr=Thread->Ctx.Hyp_Attr;
ffffffff802167c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802167cc:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff802167d3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
    }
#else
    if(RME_THD_ATTR(Hyp_Attr)!=0U)
ffffffff802167d7:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff802167de:	ff ff 7f 
ffffffff802167e1:	48 23 45 b8          	and    -0x48(%rbp),%rax
ffffffff802167e5:	48 85 c0             	test   %rax,%rax
ffffffff802167e8:	74 0c                	je     ffffffff802167f6 <_RME_Thd_Sched_Bind+0x71c>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff802167ea:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802167f1:	e9 6a 01 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check the hypervisor context buffer passed in to see whether it is good */
    if((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)!=0U))
ffffffff802167f6:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff802167fb:	74 5c                	je     ffffffff80216859 <_RME_Thd_Sched_Bind+0x77f>
ffffffff802167fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80216801:	48 85 c0             	test   %rax,%rax
ffffffff80216804:	79 53                	jns    ffffffff80216859 <_RME_Thd_Sched_Bind+0x77f>
    {
        RME_COV_MARKER();
        
        /* Register save area must be aligned to word boundary */
        if(RME_IS_ALIGNED(Haddr)!=0U)
ffffffff80216806:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8021680a:	83 e0 07             	and    $0x7,%eax
ffffffff8021680d:	48 85 c0             	test   %rax,%rax
ffffffff80216810:	75 07                	jne    ffffffff80216819 <_RME_Thd_Sched_Bind+0x73f>
ffffffff80216812:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80216817:	eb 05                	jmp    ffffffff8021681e <_RME_Thd_Sched_Bind+0x744>
ffffffff80216819:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021681e:	84 c0                	test   %al,%al
ffffffff80216820:	74 2b                	je     ffffffff8021684d <_RME_Thd_Sched_Bind+0x773>
                return RME_ERR_PTH_HADDR;
            }
            else
            {
#endif
                End=Haddr+RME_REG_SIZE(RME_THD_ATTR(Thread->Ctx.Hyp_Attr));
ffffffff80216822:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80216826:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021682c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
                if((End<=Haddr)||(End>(RME_HYP_VA_BASE+RME_HYP_VA_SIZE)))
ffffffff80216830:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80216834:	48 39 45 10          	cmp    %rax,0x10(%rbp)
ffffffff80216838:	73 07                	jae    ffffffff80216841 <_RME_Thd_Sched_Bind+0x767>
ffffffff8021683a:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8021683f:	74 44                	je     ffffffff80216885 <_RME_Thd_Sched_Bind+0x7ab>
                {
                    RME_COV_MARKER();

                    return RME_ERR_PTH_HADDR;
ffffffff80216841:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80216848:	e9 13 01 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
        /* Not aligned, exiting */
        else
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_HADDR;
ffffffff8021684d:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80216854:	e9 07 01 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
        }
    }
    /* We don't allow setting HYP addr for normal threads, nor do we allow
     * setting HYP addr to NULL for hypervisor-managed threads. */
    else if(((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)==0U))||
ffffffff80216859:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff8021685e:	74 09                	je     ffffffff80216869 <_RME_Thd_Sched_Bind+0x78f>
ffffffff80216860:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80216864:	48 85 c0             	test   %rax,%rax
ffffffff80216867:	79 10                	jns    ffffffff80216879 <_RME_Thd_Sched_Bind+0x79f>
ffffffff80216869:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff8021686e:	75 16                	jne    ffffffff80216886 <_RME_Thd_Sched_Bind+0x7ac>
            ((Haddr==RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)!=0U)))
ffffffff80216870:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80216874:	48 85 c0             	test   %rax,%rax
ffffffff80216877:	79 0d                	jns    ffffffff80216886 <_RME_Thd_Sched_Bind+0x7ac>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_HADDR;
ffffffff80216879:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80216880:	e9 db 00 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
        if(RME_IS_ALIGNED(Haddr)!=0U)
ffffffff80216885:	90                   	nop
        RME_COV_MARKER();
        /* No action required */
    }

    /* Try to bind the thread */
    if(RME_COMP_SWAP((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff80216886:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021688a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021688e:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80216892:	48 83 c1 28          	add    $0x28,%rcx
ffffffff80216896:	48 89 c6             	mov    %rax,%rsi
ffffffff80216899:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021689c:	e8 bd 5e ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802168a1:	48 85 c0             	test   %rax,%rax
ffffffff802168a4:	75 0c                	jne    ffffffff802168b2 <_RME_Thd_Sched_Bind+0x7d8>
                     (rme_ptr_t)Local_Old,
                     (rme_ptr_t)Local_New)==RME_CASFAIL)
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_CONFLICT;
ffffffff802168a6:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff802168ad:	e9 ae 00 00 00       	jmp    ffffffff80216960 <_RME_Thd_Sched_Bind+0x886>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase the reference count of the scheduler thread struct - same core */
    Scheduler->Sched.Sched_Ref++;
ffffffff802168b2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802168b6:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff802168ba:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff802168be:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802168c2:	48 89 50 60          	mov    %rdx,0x60(%rax)
    
    /* Bind successful and finish the work off. No need to worry about other cores'
     * operations on this thread because this thread is already bound to this core.
     * TID is half-word parameter-wise, but is stored and returned as a full word. */
    Thread->Sched.Sched_Thd=Scheduler;
ffffffff802168c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802168ca:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff802168ce:	48 89 50 68          	mov    %rdx,0x68(%rax)
    Thread->Sched.Prio=Prio;
ffffffff802168d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802168d6:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff802168da:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Thread->Sched.TID=(rme_ptr_t)TID;
ffffffff802168de:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff802168e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802168e6:	48 89 50 20          	mov    %rdx,0x20(%rax)
    /* The state must be TIMEOUT or EXCPEND at this point */
    RME_ASSERT((Thread->Sched.State==RME_THD_TIMEOUT)||
               (Thread->Sched.State==RME_THD_EXCPEND));

    /* Tie the signal endpoint to it if not zero */
    if(Sig_Op==(void*)0U)
ffffffff802168ea:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff802168ef:	75 0e                	jne    ffffffff802168ff <_RME_Thd_Sched_Bind+0x825>
    {
        RME_COV_MARKER();

        Thread->Sched.Sched_Sig=0U;
ffffffff802168f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802168f5:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff802168fc:	00 
ffffffff802168fd:	eb 3d                	jmp    ffffffff8021693c <_RME_Thd_Sched_Bind+0x862>
    else
    {
        RME_COV_MARKER();

        /* Convert to root cap */
        Thread->Sched.Sched_Sig=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802168ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216903:	48 8b 00             	mov    (%rax),%rax
ffffffff80216906:	89 c0                	mov    %eax,%eax
ffffffff80216908:	48 85 c0             	test   %rax,%rax
ffffffff8021690b:	74 0a                	je     ffffffff80216917 <_RME_Thd_Sched_Bind+0x83d>
ffffffff8021690d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216911:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216915:	eb 04                	jmp    ffffffff8021691b <_RME_Thd_Sched_Bind+0x841>
ffffffff80216917:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021691b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021691f:	48 89 42 70          	mov    %rax,0x70(%rdx)
        
        /* Increase refcnt */
        RME_FETCH_ADD(&(Thread->Sched.Sched_Sig->Head.Root_Ref),1U);
ffffffff80216923:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216927:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff8021692b:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021692f:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80216934:	48 89 c7             	mov    %rax,%rdi
ffffffff80216937:	e8 57 5e ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    }
    
    /* Set hypervisor context address if we're hypervisor-managed */
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)!=0U)
ffffffff8021693c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216940:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80216947:	48 85 c0             	test   %rax,%rax
ffffffff8021694a:	79 0f                	jns    ffffffff8021695b <_RME_Thd_Sched_Bind+0x881>
    {
        RME_COV_MARKER();
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)Haddr;
ffffffff8021694c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff80216950:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216954:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    return 0;
ffffffff8021695b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80216960:	c9                   	leave
ffffffff80216961:	c3                   	ret

ffffffff80216962 <_RME_Thd_Sched_Free>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Sched_Free(struct RME_Cap_Cpt* Cpt, 
                                     struct RME_Reg_Struct* Reg,
                                     rme_cid_t Cap_Thd)
{
ffffffff80216962:	55                   	push   %rbp
ffffffff80216963:	48 89 e5             	mov    %rsp,%rbp
ffffffff80216966:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021696a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021696e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80216972:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    /* These are used to free the thread */
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80216976:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021697a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021697f:	48 85 c0             	test   %rax,%rax
ffffffff80216982:	0f 85 98 00 00 00    	jne    ffffffff80216a20 <_RME_Thd_Sched_Free+0xbe>
ffffffff80216988:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021698c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216990:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80216994:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216997:	0f 93 c0             	setae  %al
ffffffff8021699a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021699d:	48 85 c0             	test   %rax,%rax
ffffffff802169a0:	74 0c                	je     ffffffff802169ae <_RME_Thd_Sched_Free+0x4c>
ffffffff802169a2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802169a9:	e9 90 03 00 00       	jmp    ffffffff80216d3e <_RME_Thd_Sched_Free+0x3dc>
ffffffff802169ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802169b2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802169b6:	48 89 c2             	mov    %rax,%rdx
ffffffff802169b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802169bd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802169c1:	48 01 d0             	add    %rdx,%rax
ffffffff802169c4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802169c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802169cc:	48 8b 00             	mov    (%rax),%rax
ffffffff802169cf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802169d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802169d7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802169db:	0f b7 c0             	movzwl %ax,%eax
ffffffff802169de:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802169e2:	0f 94 c0             	sete   %al
ffffffff802169e5:	0f b6 c0             	movzbl %al,%eax
ffffffff802169e8:	48 85 c0             	test   %rax,%rax
ffffffff802169eb:	74 0c                	je     ffffffff802169f9 <_RME_Thd_Sched_Free+0x97>
ffffffff802169ed:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802169f4:	e9 45 03 00 00       	jmp    ffffffff80216d3e <_RME_Thd_Sched_Free+0x3dc>
ffffffff802169f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802169fd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216a01:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216a05:	0f 95 c0             	setne  %al
ffffffff80216a08:	0f b6 c0             	movzbl %al,%eax
ffffffff80216a0b:	48 85 c0             	test   %rax,%rax
ffffffff80216a0e:	0f 84 4c 01 00 00    	je     ffffffff80216b60 <_RME_Thd_Sched_Free+0x1fe>
ffffffff80216a14:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216a1b:	e9 1e 03 00 00       	jmp    ffffffff80216d3e <_RME_Thd_Sched_Free+0x3dc>
ffffffff80216a20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216a24:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216a28:	48 89 c2             	mov    %rax,%rdx
ffffffff80216a2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a2f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216a33:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216a36:	0f 93 c0             	setae  %al
ffffffff80216a39:	0f b6 c0             	movzbl %al,%eax
ffffffff80216a3c:	48 85 c0             	test   %rax,%rax
ffffffff80216a3f:	74 0c                	je     ffffffff80216a4d <_RME_Thd_Sched_Free+0xeb>
ffffffff80216a41:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216a48:	e9 f1 02 00 00       	jmp    ffffffff80216d3e <_RME_Thd_Sched_Free+0x3dc>
ffffffff80216a4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216a51:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216a55:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216a59:	48 89 c2             	mov    %rax,%rdx
ffffffff80216a5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a60:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216a64:	48 01 d0             	add    %rdx,%rax
ffffffff80216a67:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216a6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216a6f:	48 8b 00             	mov    (%rax),%rax
ffffffff80216a72:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216a76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216a7a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216a7e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216a81:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216a85:	0f 94 c0             	sete   %al
ffffffff80216a88:	0f b6 c0             	movzbl %al,%eax
ffffffff80216a8b:	48 85 c0             	test   %rax,%rax
ffffffff80216a8e:	74 0c                	je     ffffffff80216a9c <_RME_Thd_Sched_Free+0x13a>
ffffffff80216a90:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216a97:	e9 a2 02 00 00       	jmp    ffffffff80216d3e <_RME_Thd_Sched_Free+0x3dc>
ffffffff80216a9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216aa0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216aa4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216aa8:	0f 95 c0             	setne  %al
ffffffff80216aab:	0f b6 c0             	movzbl %al,%eax
ffffffff80216aae:	48 85 c0             	test   %rax,%rax
ffffffff80216ab1:	74 0c                	je     ffffffff80216abf <_RME_Thd_Sched_Free+0x15d>
ffffffff80216ab3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216aba:	e9 7f 02 00 00       	jmp    ffffffff80216d3e <_RME_Thd_Sched_Free+0x3dc>
ffffffff80216abf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216ac3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216ac8:	48 89 c2             	mov    %rax,%rdx
ffffffff80216acb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216acf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216ad3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216ad6:	0f 93 c0             	setae  %al
ffffffff80216ad9:	0f b6 c0             	movzbl %al,%eax
ffffffff80216adc:	48 85 c0             	test   %rax,%rax
ffffffff80216adf:	74 0c                	je     ffffffff80216aed <_RME_Thd_Sched_Free+0x18b>
ffffffff80216ae1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216ae8:	e9 51 02 00 00       	jmp    ffffffff80216d3e <_RME_Thd_Sched_Free+0x3dc>
ffffffff80216aed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216af1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216af6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216afa:	48 89 c2             	mov    %rax,%rdx
ffffffff80216afd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216b01:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216b05:	48 01 d0             	add    %rdx,%rax
ffffffff80216b08:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216b0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216b10:	48 8b 00             	mov    (%rax),%rax
ffffffff80216b13:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216b17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216b1b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216b1f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216b22:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216b26:	0f 94 c0             	sete   %al
ffffffff80216b29:	0f b6 c0             	movzbl %al,%eax
ffffffff80216b2c:	48 85 c0             	test   %rax,%rax
ffffffff80216b2f:	74 0c                	je     ffffffff80216b3d <_RME_Thd_Sched_Free+0x1db>
ffffffff80216b31:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216b38:	e9 01 02 00 00       	jmp    ffffffff80216d3e <_RME_Thd_Sched_Free+0x3dc>
ffffffff80216b3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216b41:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216b45:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216b49:	0f 95 c0             	setne  %al
ffffffff80216b4c:	0f b6 c0             	movzbl %al,%eax
ffffffff80216b4f:	48 85 c0             	test   %rax,%rax
ffffffff80216b52:	74 0c                	je     ffffffff80216b60 <_RME_Thd_Sched_Free+0x1fe>
ffffffff80216b54:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216b5b:	e9 de 01 00 00       	jmp    ffffffff80216d3e <_RME_Thd_Sched_Free+0x3dc>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff80216b60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216b64:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216b68:	83 e0 10             	and    $0x10,%eax
ffffffff80216b6b:	48 85 c0             	test   %rax,%rax
ffffffff80216b6e:	0f 94 c0             	sete   %al
ffffffff80216b71:	0f b6 c0             	movzbl %al,%eax
ffffffff80216b74:	48 85 c0             	test   %rax,%rax
ffffffff80216b77:	74 0c                	je     ffffffff80216b85 <_RME_Thd_Sched_Free+0x223>
ffffffff80216b79:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80216b80:	e9 b9 01 00 00       	jmp    ffffffff80216d3e <_RME_Thd_Sched_Free+0x3dc>
    
    /* Check if the target thread is already bound to this core */
    Local=RME_CPU_LOCAL();
ffffffff80216b85:	e8 b5 4c ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80216b8a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Thread=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff80216b8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216b92:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216b96:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(Thread->Sched.Local!=Local)
ffffffff80216b9a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216b9e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216ba2:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80216ba6:	74 0c                	je     ffffffff80216bb4 <_RME_Thd_Sched_Free+0x252>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80216ba8:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216baf:	e9 8a 01 00 00       	jmp    ffffffff80216d3e <_RME_Thd_Sched_Free+0x3dc>
        /* No action required */
    }
    
    /* Am I referenced by someone as a scheduler? If yes, we cannot unbind. Because
     * boot-time thread's refcnt will never be 0, thus they will never pass this checking */
    if(Thread->Sched.Sched_Ref!=0U)
ffffffff80216bb4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216bb8:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80216bbc:	48 85 c0             	test   %rax,%rax
ffffffff80216bbf:	74 0c                	je     ffffffff80216bcd <_RME_Thd_Sched_Free+0x26b>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_REFCNT;
ffffffff80216bc1:	48 c7 c0 32 ff ff ff 	mov    $0xffffffffffffff32,%rax
ffffffff80216bc8:	e9 71 01 00 00       	jmp    ffffffff80216d3e <_RME_Thd_Sched_Free+0x3dc>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Decrease the parent's reference count - on the same core */
    Thread->Sched.Sched_Thd->Sched.Sched_Ref--;
ffffffff80216bcd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216bd1:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80216bd5:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80216bd9:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff80216bdd:	48 89 50 60          	mov    %rdx,0x60(%rax)

    /* See if we have any events sent to the parent. If yes, remove that event */
    if(Thread->Sched.Notif.Next!=&(Thread->Sched.Notif))
ffffffff80216be1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216be5:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80216be9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216bed:	48 83 c0 10          	add    $0x10,%rax
ffffffff80216bf1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216bf4:	74 2b                	je     ffffffff80216c21 <_RME_Thd_Sched_Free+0x2bf>
    {
        RME_COV_MARKER();

        _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff80216bf6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216bfa:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80216bfe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216c02:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216c06:	48 89 d6             	mov    %rdx,%rsi
ffffffff80216c09:	48 89 c7             	mov    %rax,%rdi
ffffffff80216c0c:	e8 6d 61 ff ff       	call   ffffffff8020cd7e <_RME_List_Del>
        _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80216c11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216c15:	48 83 c0 10          	add    $0x10,%rax
ffffffff80216c19:	48 89 c7             	mov    %rax,%rdi
ffffffff80216c1c:	e8 37 61 ff ff       	call   ffffffff8020cd58 <_RME_List_Crt>
        RME_COV_MARKER();
        /* No action required */
    }

    /* If we have an scheduler event endpoint, release it */
    if(Thread->Sched.Sched_Sig!=(void*)RME_NULL)
ffffffff80216c21:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216c25:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216c29:	48 85 c0             	test   %rax,%rax
ffffffff80216c2c:	74 1b                	je     ffffffff80216c49 <_RME_Thd_Sched_Free+0x2e7>
    {
        RME_COV_MARKER();

        RME_FETCH_ADD(&(Thread->Sched.Sched_Sig->Head.Root_Ref),-1);
ffffffff80216c2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216c32:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216c36:	48 83 c0 08          	add    $0x8,%rax
ffffffff80216c3a:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80216c41:	48 89 c7             	mov    %rax,%rdi
ffffffff80216c44:	e8 4a 5b ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80216c49:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216c4d:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80216c52:	48 89 c7             	mov    %rax,%rdi
ffffffff80216c55:	e8 71 02 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
    /* If the thread is ready, kick it out of the run queue. If it is blocked on
     * some endpoint, end the blocking and set the return value to RME_ERR_SIV_FREE.
     * If the thread is killed due to a fault, we will not clear the fault here, and
     * we will wait for the Exec_Set to clear it. No scheduler notifications are sent
     * because the thread is being freed and notifications at this point are useless. */
    if(Thread->Sched.State==RME_THD_READY)
ffffffff80216c5a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216c5e:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80216c62:	48 85 c0             	test   %rax,%rax
ffffffff80216c65:	75 1a                	jne    ffffffff80216c81 <_RME_Thd_Sched_Free+0x31f>
    {
        RME_COV_MARKER();

        /* Remove from runqueue and timeout but don't notify parent */
        _RME_Run_Del(Thread);
ffffffff80216c67:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216c6b:	48 89 c7             	mov    %rax,%rdi
ffffffff80216c6e:	e8 f6 c0 ff ff       	call   ffffffff80212d69 <_RME_Run_Del>
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80216c73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216c77:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80216c7e:	00 
ffffffff80216c7f:	eb 50                	jmp    ffffffff80216cd1 <_RME_Thd_Sched_Free+0x36f>
    }
    /* BLOCKED */
    else if(Thread->Sched.State==RME_THD_BLOCKED)
ffffffff80216c81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216c85:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80216c89:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80216c8d:	75 42                	jne    ffffffff80216cd1 <_RME_Thd_Sched_Free+0x36f>
    {
        RME_COV_MARKER();
        
        /* If it got here, the thread that is operated on cannot be the current 
         * thread, so we are not overwriting the return value of the caller. */
        __RME_Svc_Retval_Set(&(Thread->Ctx.Reg->Reg),RME_ERR_SIV_FREE);
ffffffff80216c8f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216c93:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80216c9a:	48 c7 c6 ce fe ff ff 	mov    $0xfffffffffffffece,%rsi
ffffffff80216ca1:	48 89 c7             	mov    %rax,%rdi
ffffffff80216ca4:	e8 22 02 01 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
        /* Release signal and thread from each other */
        Thread->Sched.Signal->Thd=RME_NULL;
ffffffff80216ca9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cad:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff80216cb1:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80216cb8:	00 
        Thread->Sched.Signal=RME_NULL;
ffffffff80216cb9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cbd:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff80216cc4:	00 
        /* Timeout but don't notify parent */
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80216cc5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cc9:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80216cd0:	00 
        RME_COV_MARKER();
        /* No action required */
    }

    /* Cleanup all remaining timeslices on it */
    Thread->Sched.Slice=0U;
ffffffff80216cd1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cd5:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80216cdc:	00 
    
    /* Check if this thread is the current one and we may need to switch away */
    if(Local->Thd_Cur==Thread)
ffffffff80216cdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216ce1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216ce5:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80216ce9:	75 3f                	jne    ffffffff80216d2a <_RME_Thd_Sched_Free+0x3c8>
    {
        RME_COV_MARKER();

        Local->Thd_Cur=_RME_Run_High(Local);
ffffffff80216ceb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216cef:	48 89 c7             	mov    %rax,%rdi
ffffffff80216cf2:	e8 37 c1 ff ff       	call   ffffffff80212e2e <_RME_Run_High>
ffffffff80216cf7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80216cfb:	48 89 42 08          	mov    %rax,0x8(%rdx)
        _RME_Run_Ins(Local->Thd_Cur);
ffffffff80216cff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216d03:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216d07:	48 89 c7             	mov    %rax,%rdi
ffffffff80216d0a:	e8 ae bf ff ff       	call   ffffffff80212cbd <_RME_Run_Ins>
        RME_ASSERT(Local->Thd_Cur->Sched.State==RME_THD_READY);
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff80216d0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216d13:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80216d17:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80216d1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216d1f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80216d22:	48 89 c7             	mov    %rax,%rdi
ffffffff80216d25:	e8 54 c2 ff ff       	call   ffffffff80212f7e <_RME_Run_Swt>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Set the state to free so other cores can bind */
    RME_WRITE_RELEASE((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff80216d2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d2e:	48 83 c0 28          	add    $0x28,%rax
ffffffff80216d32:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
                      (rme_ptr_t)RME_THD_FREE);

    return 0;
ffffffff80216d39:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80216d3e:	c9                   	leave
ffffffff80216d3f:	c3                   	ret

ffffffff80216d40 <_RME_Thd_Exec_Set>:
                                   struct RME_Reg_Struct* Reg,
                                   rme_cid_t Cap_Thd,
                                   rme_ptr_t Entry,
                                   rme_ptr_t Stack,
                                   rme_ptr_t Param)
{
ffffffff80216d40:	55                   	push   %rbp
ffffffff80216d41:	48 89 e5             	mov    %rsp,%rbp
ffffffff80216d44:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80216d48:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80216d4c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80216d50:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80216d54:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff80216d58:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
ffffffff80216d5c:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    struct RME_Thd_Struct* Thread;
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80216d60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216d64:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80216d69:	48 85 c0             	test   %rax,%rax
ffffffff80216d6c:	0f 85 98 00 00 00    	jne    ffffffff80216e0a <_RME_Thd_Exec_Set+0xca>
ffffffff80216d72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216d76:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216d7a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80216d7e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216d81:	0f 93 c0             	setae  %al
ffffffff80216d84:	0f b6 c0             	movzbl %al,%eax
ffffffff80216d87:	48 85 c0             	test   %rax,%rax
ffffffff80216d8a:	74 0c                	je     ffffffff80216d98 <_RME_Thd_Exec_Set+0x58>
ffffffff80216d8c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216d93:	e9 ca 02 00 00       	jmp    ffffffff80217062 <_RME_Thd_Exec_Set+0x322>
ffffffff80216d98:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216d9c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216da0:	48 89 c2             	mov    %rax,%rdx
ffffffff80216da3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216da7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216dab:	48 01 d0             	add    %rdx,%rax
ffffffff80216dae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216db2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216db6:	48 8b 00             	mov    (%rax),%rax
ffffffff80216db9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216dbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216dc1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216dc5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216dc8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216dcc:	0f 94 c0             	sete   %al
ffffffff80216dcf:	0f b6 c0             	movzbl %al,%eax
ffffffff80216dd2:	48 85 c0             	test   %rax,%rax
ffffffff80216dd5:	74 0c                	je     ffffffff80216de3 <_RME_Thd_Exec_Set+0xa3>
ffffffff80216dd7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216dde:	e9 7f 02 00 00       	jmp    ffffffff80217062 <_RME_Thd_Exec_Set+0x322>
ffffffff80216de3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216de7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216deb:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216def:	0f 95 c0             	setne  %al
ffffffff80216df2:	0f b6 c0             	movzbl %al,%eax
ffffffff80216df5:	48 85 c0             	test   %rax,%rax
ffffffff80216df8:	0f 84 4c 01 00 00    	je     ffffffff80216f4a <_RME_Thd_Exec_Set+0x20a>
ffffffff80216dfe:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216e05:	e9 58 02 00 00       	jmp    ffffffff80217062 <_RME_Thd_Exec_Set+0x322>
ffffffff80216e0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216e0e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216e12:	48 89 c2             	mov    %rax,%rdx
ffffffff80216e15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216e19:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216e1d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216e20:	0f 93 c0             	setae  %al
ffffffff80216e23:	0f b6 c0             	movzbl %al,%eax
ffffffff80216e26:	48 85 c0             	test   %rax,%rax
ffffffff80216e29:	74 0c                	je     ffffffff80216e37 <_RME_Thd_Exec_Set+0xf7>
ffffffff80216e2b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216e32:	e9 2b 02 00 00       	jmp    ffffffff80217062 <_RME_Thd_Exec_Set+0x322>
ffffffff80216e37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216e3b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216e3f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216e43:	48 89 c2             	mov    %rax,%rdx
ffffffff80216e46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216e4a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216e4e:	48 01 d0             	add    %rdx,%rax
ffffffff80216e51:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216e55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216e59:	48 8b 00             	mov    (%rax),%rax
ffffffff80216e5c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216e60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216e64:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216e68:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216e6b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216e6f:	0f 94 c0             	sete   %al
ffffffff80216e72:	0f b6 c0             	movzbl %al,%eax
ffffffff80216e75:	48 85 c0             	test   %rax,%rax
ffffffff80216e78:	74 0c                	je     ffffffff80216e86 <_RME_Thd_Exec_Set+0x146>
ffffffff80216e7a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216e81:	e9 dc 01 00 00       	jmp    ffffffff80217062 <_RME_Thd_Exec_Set+0x322>
ffffffff80216e86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216e8a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216e8e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216e92:	0f 95 c0             	setne  %al
ffffffff80216e95:	0f b6 c0             	movzbl %al,%eax
ffffffff80216e98:	48 85 c0             	test   %rax,%rax
ffffffff80216e9b:	74 0c                	je     ffffffff80216ea9 <_RME_Thd_Exec_Set+0x169>
ffffffff80216e9d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216ea4:	e9 b9 01 00 00       	jmp    ffffffff80217062 <_RME_Thd_Exec_Set+0x322>
ffffffff80216ea9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216ead:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216eb2:	48 89 c2             	mov    %rax,%rdx
ffffffff80216eb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216eb9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216ebd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216ec0:	0f 93 c0             	setae  %al
ffffffff80216ec3:	0f b6 c0             	movzbl %al,%eax
ffffffff80216ec6:	48 85 c0             	test   %rax,%rax
ffffffff80216ec9:	74 0c                	je     ffffffff80216ed7 <_RME_Thd_Exec_Set+0x197>
ffffffff80216ecb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216ed2:	e9 8b 01 00 00       	jmp    ffffffff80217062 <_RME_Thd_Exec_Set+0x322>
ffffffff80216ed7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216edb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216ee0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216ee4:	48 89 c2             	mov    %rax,%rdx
ffffffff80216ee7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216eeb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216eef:	48 01 d0             	add    %rdx,%rax
ffffffff80216ef2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216ef6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216efa:	48 8b 00             	mov    (%rax),%rax
ffffffff80216efd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216f01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216f05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216f09:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216f0c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216f10:	0f 94 c0             	sete   %al
ffffffff80216f13:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f16:	48 85 c0             	test   %rax,%rax
ffffffff80216f19:	74 0c                	je     ffffffff80216f27 <_RME_Thd_Exec_Set+0x1e7>
ffffffff80216f1b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216f22:	e9 3b 01 00 00       	jmp    ffffffff80217062 <_RME_Thd_Exec_Set+0x322>
ffffffff80216f27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216f2b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216f2f:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216f33:	0f 95 c0             	setne  %al
ffffffff80216f36:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f39:	48 85 c0             	test   %rax,%rax
ffffffff80216f3c:	74 0c                	je     ffffffff80216f4a <_RME_Thd_Exec_Set+0x20a>
ffffffff80216f3e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216f45:	e9 18 01 00 00       	jmp    ffffffff80217062 <_RME_Thd_Exec_Set+0x322>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff80216f4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216f4e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216f52:	83 e0 01             	and    $0x1,%eax
ffffffff80216f55:	48 85 c0             	test   %rax,%rax
ffffffff80216f58:	0f 94 c0             	sete   %al
ffffffff80216f5b:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f5e:	48 85 c0             	test   %rax,%rax
ffffffff80216f61:	74 0c                	je     ffffffff80216f6f <_RME_Thd_Exec_Set+0x22f>
ffffffff80216f63:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80216f6a:	e9 f3 00 00 00       	jmp    ffffffff80217062 <_RME_Thd_Exec_Set+0x322>
    
    /* Check if the target thread is already bound, and quit if it is not on our core */
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff80216f6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216f73:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216f77:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Local=RME_CPU_LOCAL();
ffffffff80216f7b:	e8 bf 48 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80216f80:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(Thread->Sched.Local!=Local)
ffffffff80216f84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216f88:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216f8c:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80216f90:	74 0c                	je     ffffffff80216f9e <_RME_Thd_Exec_Set+0x25e>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80216f92:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216f99:	e9 c4 00 00 00       	jmp    ffffffff80217062 <_RME_Thd_Exec_Set+0x322>
        /* No action required */
    }
    
    /* Commit the change if both values are non-zero. If both are zero we are just
     * clearing the error flag and continue from where the exception happened. */
    if((Entry!=RME_NULL)&&(Stack!=RME_NULL))
ffffffff80216f9e:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
ffffffff80216fa3:	74 47                	je     ffffffff80216fec <_RME_Thd_Exec_Set+0x2ac>
ffffffff80216fa5:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff80216faa:	74 40                	je     ffffffff80216fec <_RME_Thd_Exec_Set+0x2ac>
    {
        RME_COV_MARKER();

        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
                           Entry,Stack,Param,&(Thread->Ctx.Reg->Reg));
ffffffff80216fac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216fb0:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
ffffffff80216fb7:	48 89 c6             	mov    %rax,%rsi
ffffffff80216fba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216fbe:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80216fc5:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff80216fcc:	ff ff 7f 
ffffffff80216fcf:	48 21 d0             	and    %rdx,%rax
ffffffff80216fd2:	48 89 c7             	mov    %rax,%rdi
ffffffff80216fd5:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80216fd9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80216fdd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80216fe1:	49 89 f0             	mov    %rsi,%r8
ffffffff80216fe4:	48 89 c6             	mov    %rax,%rsi
ffffffff80216fe7:	e8 f1 eb 00 00       	call   ffffffff80225bdd <__RME_Thd_Reg_Init>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80216fec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216ff0:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80216ff5:	48 89 c7             	mov    %rax,%rdi
ffffffff80216ff8:	e8 ce fe 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
    
    /* Check if there is a exception pending and clear it if there is */
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80216ffd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217001:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80217005:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217009:	75 52                	jne    ffffffff8021705d <_RME_Thd_Exec_Set+0x31d>
    {
        RME_COV_MARKER();
        
        /* Check if the thread still have timeslices. If yes, put it into the runqueue;
         * if no, mark it as TIMEOUT and send scheduler notification to its parent. */
        if(Thread->Sched.Slice!=0U)
ffffffff8021700b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021700f:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217013:	48 85 c0             	test   %rax,%rax
ffffffff80217016:	74 1a                	je     ffffffff80217032 <_RME_Thd_Exec_Set+0x2f2>
        {
            RME_COV_MARKER();
            
            /* Ready and add to runqueue */
            Thread->Sched.State=RME_THD_READY;
ffffffff80217018:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021701c:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80217023:	00 
            _RME_Run_Ins(Thread);
ffffffff80217024:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217028:	48 89 c7             	mov    %rax,%rdi
ffffffff8021702b:	e8 8d bc ff ff       	call   ffffffff80212cbd <_RME_Run_Ins>
ffffffff80217030:	eb 18                	jmp    ffffffff8021704a <_RME_Thd_Exec_Set+0x30a>
        else
        {
            RME_COV_MARKER();
            
            /* Timeout and notify parent */
            Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80217032:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217036:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8021703d:	00 
            _RME_Run_Notif(Thread);
ffffffff8021703e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217042:	48 89 c7             	mov    %rax,%rdi
ffffffff80217045:	e8 62 be ff ff       	call   ffffffff80212eac <_RME_Run_Notif>
        }
        
        /* Pick the highest priority thread because something unblocked */
        _RME_Kern_High(Reg,Local);
ffffffff8021704a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021704e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217052:	48 89 d6             	mov    %rdx,%rsi
ffffffff80217055:	48 89 c7             	mov    %rax,%rdi
ffffffff80217058:	e8 b0 1c 00 00       	call   ffffffff80218d0d <_RME_Kern_High>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    return 0;
ffffffff8021705d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80217062:	c9                   	leave
ffffffff80217063:	c3                   	ret

ffffffff80217064 <_RME_Thd_Sched_Prio>:
                                     rme_ptr_t Prio0,
                                     rme_cid_t Cap_Thd1,
                                     rme_ptr_t Prio1,
                                     rme_cid_t Cap_Thd2,
                                     rme_ptr_t Prio2)
{
ffffffff80217064:	55                   	push   %rbp
ffffffff80217065:	48 89 e5             	mov    %rsp,%rbp
ffffffff80217068:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
ffffffff8021706f:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
ffffffff80217076:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
ffffffff8021707d:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
ffffffff80217084:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
ffffffff8021708b:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
ffffffff80217092:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
    struct RME_Thd_Struct* Thread[3];
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Check parameter validity */
    if((Number==0U)||(Number>3U))
ffffffff80217099:	48 83 bd 58 ff ff ff 	cmpq   $0x0,-0xa8(%rbp)
ffffffff802170a0:	00 
ffffffff802170a1:	74 0a                	je     ffffffff802170ad <_RME_Thd_Sched_Prio+0x49>
ffffffff802170a3:	48 83 bd 58 ff ff ff 	cmpq   $0x3,-0xa8(%rbp)
ffffffff802170aa:	03 
ffffffff802170ab:	76 0c                	jbe    ffffffff802170b9 <_RME_Thd_Sched_Prio+0x55>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802170ad:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802170b4:	e9 04 04 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
    }
    
    /* We'll use arrays in the next */
    Cap_Thd[0]=Cap_Thd0;
ffffffff802170b9:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
ffffffff802170c0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Cap_Thd[1]=Cap_Thd1;
ffffffff802170c4:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
ffffffff802170cb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Cap_Thd[2]=Cap_Thd2;
ffffffff802170cf:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff802170d3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Prio[0]=Prio0;
ffffffff802170d7:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
ffffffff802170de:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    Prio[1]=Prio1;
ffffffff802170e2:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802170e6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Prio[2]=Prio2;
ffffffff802170ea:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff802170ee:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

    Local=RME_CPU_LOCAL();
ffffffff802170f2:	e8 48 47 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802170f7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0U;Count<Number;Count++)
ffffffff802170fb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80217102:	00 
ffffffff80217103:	e9 e4 02 00 00       	jmp    ffffffff802173ec <_RME_Thd_Sched_Prio+0x388>
    {
        /* Get the capability slot */
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80217108:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021710c:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217111:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80217116:	48 85 c0             	test   %rax,%rax
ffffffff80217119:	0f 85 b8 00 00 00    	jne    ffffffff802171d7 <_RME_Thd_Sched_Prio+0x173>
ffffffff8021711f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217123:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217128:	48 89 c2             	mov    %rax,%rdx
ffffffff8021712b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff80217132:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217136:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217139:	0f 93 c0             	setae  %al
ffffffff8021713c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021713f:	48 85 c0             	test   %rax,%rax
ffffffff80217142:	74 0c                	je     ffffffff80217150 <_RME_Thd_Sched_Prio+0xec>
ffffffff80217144:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021714b:	e9 6d 03 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
ffffffff80217150:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217154:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217159:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021715d:	48 89 c2             	mov    %rax,%rdx
ffffffff80217160:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff80217167:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021716b:	48 01 d0             	add    %rdx,%rax
ffffffff8021716e:	48 89 c2             	mov    %rax,%rdx
ffffffff80217171:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217175:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff8021717a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021717e:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217183:	48 8b 00             	mov    (%rax),%rax
ffffffff80217186:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021718a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021718e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217192:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217195:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217199:	0f 94 c0             	sete   %al
ffffffff8021719c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021719f:	48 85 c0             	test   %rax,%rax
ffffffff802171a2:	74 0c                	je     ffffffff802171b0 <_RME_Thd_Sched_Prio+0x14c>
ffffffff802171a4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802171ab:	e9 0d 03 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
ffffffff802171b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802171b4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802171b8:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802171bc:	0f 95 c0             	setne  %al
ffffffff802171bf:	0f b6 c0             	movzbl %al,%eax
ffffffff802171c2:	48 85 c0             	test   %rax,%rax
ffffffff802171c5:	0f 84 8a 01 00 00    	je     ffffffff80217355 <_RME_Thd_Sched_Prio+0x2f1>
ffffffff802171cb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802171d2:	e9 e6 02 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
ffffffff802171d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802171db:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802171e0:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802171e4:	48 89 c2             	mov    %rax,%rdx
ffffffff802171e7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff802171ee:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802171f2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802171f5:	0f 93 c0             	setae  %al
ffffffff802171f8:	0f b6 c0             	movzbl %al,%eax
ffffffff802171fb:	48 85 c0             	test   %rax,%rax
ffffffff802171fe:	74 0c                	je     ffffffff8021720c <_RME_Thd_Sched_Prio+0x1a8>
ffffffff80217200:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217207:	e9 b1 02 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
ffffffff8021720c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217210:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217215:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217219:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021721d:	48 89 c2             	mov    %rax,%rdx
ffffffff80217220:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff80217227:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021722b:	48 01 d0             	add    %rdx,%rax
ffffffff8021722e:	48 89 c2             	mov    %rax,%rdx
ffffffff80217231:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217235:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff8021723a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021723e:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217243:	48 8b 00             	mov    (%rax),%rax
ffffffff80217246:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021724a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021724e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217252:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217255:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217259:	0f 94 c0             	sete   %al
ffffffff8021725c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021725f:	48 85 c0             	test   %rax,%rax
ffffffff80217262:	74 0c                	je     ffffffff80217270 <_RME_Thd_Sched_Prio+0x20c>
ffffffff80217264:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021726b:	e9 4d 02 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
ffffffff80217270:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217274:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217278:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021727c:	0f 95 c0             	setne  %al
ffffffff8021727f:	0f b6 c0             	movzbl %al,%eax
ffffffff80217282:	48 85 c0             	test   %rax,%rax
ffffffff80217285:	74 0c                	je     ffffffff80217293 <_RME_Thd_Sched_Prio+0x22f>
ffffffff80217287:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021728e:	e9 2a 02 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
ffffffff80217293:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217297:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff8021729c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802172a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802172a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802172a8:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff802172ad:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802172b1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802172b4:	0f 93 c0             	setae  %al
ffffffff802172b7:	0f b6 c0             	movzbl %al,%eax
ffffffff802172ba:	48 85 c0             	test   %rax,%rax
ffffffff802172bd:	74 0c                	je     ffffffff802172cb <_RME_Thd_Sched_Prio+0x267>
ffffffff802172bf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802172c6:	e9 f2 01 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
ffffffff802172cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802172cf:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802172d4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802172d9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802172dd:	48 89 c2             	mov    %rax,%rdx
ffffffff802172e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802172e4:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff802172e9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802172ed:	48 01 d0             	add    %rdx,%rax
ffffffff802172f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802172f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802172f7:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff802172fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217300:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217305:	48 8b 00             	mov    (%rax),%rax
ffffffff80217308:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021730c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217310:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217314:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217317:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021731b:	0f 94 c0             	sete   %al
ffffffff8021731e:	0f b6 c0             	movzbl %al,%eax
ffffffff80217321:	48 85 c0             	test   %rax,%rax
ffffffff80217324:	74 0c                	je     ffffffff80217332 <_RME_Thd_Sched_Prio+0x2ce>
ffffffff80217326:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021732d:	e9 8b 01 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
ffffffff80217332:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217336:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021733a:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021733e:	0f 95 c0             	setne  %al
ffffffff80217341:	0f b6 c0             	movzbl %al,%eax
ffffffff80217344:	48 85 c0             	test   %rax,%rax
ffffffff80217347:	74 0c                	je     ffffffff80217355 <_RME_Thd_Sched_Prio+0x2f1>
ffffffff80217349:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217350:	e9 68 01 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
                       struct RME_Cap_Thd*,Thd_Op[Count],Type_Stat);
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80217355:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217359:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff8021735e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217362:	83 e0 08             	and    $0x8,%eax
ffffffff80217365:	48 85 c0             	test   %rax,%rax
ffffffff80217368:	0f 94 c0             	sete   %al
ffffffff8021736b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021736e:	48 85 c0             	test   %rax,%rax
ffffffff80217371:	74 0c                	je     ffffffff8021737f <_RME_Thd_Sched_Prio+0x31b>
ffffffff80217373:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021737a:	e9 3e 01 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
        
        /* See if the target thread is already bound to this core. If no, we just quit */
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff8021737f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217383:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217388:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021738c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021738f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217393:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
ffffffff8021739a:	ff 
        if(Thread[Count]->Sched.Local!=Local)
ffffffff8021739b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021739f:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff802173a6:	ff 
ffffffff802173a7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802173ab:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff802173af:	74 0c                	je     ffffffff802173bd <_RME_Thd_Sched_Prio+0x359>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff802173b1:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802173b8:	e9 00 01 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* See if the priority relationship is correct */
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff802173bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173c1:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff802173c8:	ff 
ffffffff802173c9:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff802173cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173d1:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
ffffffff802173d6:	48 39 c2             	cmp    %rax,%rdx
ffffffff802173d9:	73 0c                	jae    ffffffff802173e7 <_RME_Thd_Sched_Prio+0x383>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_PRIO;
ffffffff802173db:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff802173e2:	e9 d6 00 00 00       	jmp    ffffffff802174bd <_RME_Thd_Sched_Prio+0x459>
    for(Count=0U;Count<Number;Count++)
ffffffff802173e7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802173ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173f0:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
ffffffff802173f7:	0f 82 0b fd ff ff    	jb     ffffffff80217108 <_RME_Thd_Sched_Prio+0xa4>
            /* No action required */
        }
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);
ffffffff802173fd:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff80217404:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80217409:	48 89 c7             	mov    %rax,%rdi
ffffffff8021740c:	e8 ba fa 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
    
    /* Change priority for each thread, and we'll switch to the real highest priority
     * thread after all these changes. This can help remove the excessive overhead. */
    for(Count=0U;Count<Number;Count++)
ffffffff80217411:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80217418:	00 
ffffffff80217419:	eb 76                	jmp    ffffffff80217491 <_RME_Thd_Sched_Prio+0x42d>
    {
        /* See if this thread is currently in the runqueue */
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff8021741b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021741f:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217426:	ff 
ffffffff80217427:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff8021742b:	48 85 c0             	test   %rax,%rax
ffffffff8021742e:	75 43                	jne    ffffffff80217473 <_RME_Thd_Sched_Prio+0x40f>
        {
            RME_COV_MARKER();

            /* Remove from runqueue, change priority, and add it back */
            _RME_Run_Del(Thread[Count]);
ffffffff80217430:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217434:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff8021743b:	ff 
ffffffff8021743c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021743f:	e8 25 b9 ff ff       	call   ffffffff80212d69 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80217444:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217448:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff8021744f:	ff 
ffffffff80217450:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80217454:	48 8b 54 d5 b0       	mov    -0x50(%rbp,%rdx,8),%rdx
ffffffff80217459:	48 89 50 40          	mov    %rdx,0x40(%rax)
            _RME_Run_Ins(Thread[Count]);
ffffffff8021745d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217461:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217468:	ff 
ffffffff80217469:	48 89 c7             	mov    %rax,%rdi
ffffffff8021746c:	e8 4c b8 ff ff       	call   ffffffff80212cbd <_RME_Run_Ins>
ffffffff80217471:	eb 19                	jmp    ffffffff8021748c <_RME_Thd_Sched_Prio+0x428>
        /* If it is BLOCKED, TIMEOUT or EXCPEND, changing the number will suffice */
        else
        {
            RME_COV_MARKER();

            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80217473:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217477:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff8021747e:	ff 
ffffffff8021747f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80217483:	48 8b 54 d5 b0       	mov    -0x50(%rbp,%rdx,8),%rdx
ffffffff80217488:	48 89 50 40          	mov    %rdx,0x40(%rax)
    for(Count=0U;Count<Number;Count++)
ffffffff8021748c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80217491:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217495:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
ffffffff8021749c:	0f 82 79 ff ff ff    	jb     ffffffff8021741b <_RME_Thd_Sched_Prio+0x3b7>
        }
    }
    
    /* Pick the current highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff802174a2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802174a6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff802174ad:	48 89 d6             	mov    %rdx,%rsi
ffffffff802174b0:	48 89 c7             	mov    %rax,%rdi
ffffffff802174b3:	e8 55 18 00 00       	call   ffffffff80218d0d <_RME_Kern_High>

    return 0;
ffffffff802174b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802174bd:	c9                   	leave
ffffffff802174be:	c3                   	ret

ffffffff802174bf <_RME_Thd_Sched_Rcv>:
Output      : None.
Return      : rme_ret_t - If successful, the thread ID; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Sched_Rcv(struct RME_Cap_Cpt* Cpt,
                                    rme_cid_t Cap_Thd)
{
ffffffff802174bf:	55                   	push   %rbp
ffffffff802174c0:	48 89 e5             	mov    %rsp,%rbp
ffffffff802174c3:	53                   	push   %rbx
ffffffff802174c4:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff802174c8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802174cc:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    struct RME_Thd_Struct* Thread;
    rme_ptr_t Type_Stat;
    rme_ptr_t Flag;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802174d0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802174d4:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802174d9:	48 85 c0             	test   %rax,%rax
ffffffff802174dc:	0f 85 98 00 00 00    	jne    ffffffff8021757a <_RME_Thd_Sched_Rcv+0xbb>
ffffffff802174e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802174e6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802174ea:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff802174ee:	48 39 c2             	cmp    %rax,%rdx
ffffffff802174f1:	0f 93 c0             	setae  %al
ffffffff802174f4:	0f b6 c0             	movzbl %al,%eax
ffffffff802174f7:	48 85 c0             	test   %rax,%rax
ffffffff802174fa:	74 0c                	je     ffffffff80217508 <_RME_Thd_Sched_Rcv+0x49>
ffffffff802174fc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217503:	e9 c8 02 00 00       	jmp    ffffffff802177d0 <_RME_Thd_Sched_Rcv+0x311>
ffffffff80217508:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021750c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217510:	48 89 c2             	mov    %rax,%rdx
ffffffff80217513:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217517:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021751b:	48 01 d0             	add    %rdx,%rax
ffffffff8021751e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217522:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217526:	48 8b 00             	mov    (%rax),%rax
ffffffff80217529:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8021752d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217531:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217535:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217538:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021753c:	0f 94 c0             	sete   %al
ffffffff8021753f:	0f b6 c0             	movzbl %al,%eax
ffffffff80217542:	48 85 c0             	test   %rax,%rax
ffffffff80217545:	74 0c                	je     ffffffff80217553 <_RME_Thd_Sched_Rcv+0x94>
ffffffff80217547:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021754e:	e9 7d 02 00 00       	jmp    ffffffff802177d0 <_RME_Thd_Sched_Rcv+0x311>
ffffffff80217553:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217557:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021755b:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021755f:	0f 95 c0             	setne  %al
ffffffff80217562:	0f b6 c0             	movzbl %al,%eax
ffffffff80217565:	48 85 c0             	test   %rax,%rax
ffffffff80217568:	0f 84 4c 01 00 00    	je     ffffffff802176ba <_RME_Thd_Sched_Rcv+0x1fb>
ffffffff8021756e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217575:	e9 56 02 00 00       	jmp    ffffffff802177d0 <_RME_Thd_Sched_Rcv+0x311>
ffffffff8021757a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021757e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217582:	48 89 c2             	mov    %rax,%rdx
ffffffff80217585:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217589:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021758d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217590:	0f 93 c0             	setae  %al
ffffffff80217593:	0f b6 c0             	movzbl %al,%eax
ffffffff80217596:	48 85 c0             	test   %rax,%rax
ffffffff80217599:	74 0c                	je     ffffffff802175a7 <_RME_Thd_Sched_Rcv+0xe8>
ffffffff8021759b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802175a2:	e9 29 02 00 00       	jmp    ffffffff802177d0 <_RME_Thd_Sched_Rcv+0x311>
ffffffff802175a7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802175ab:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802175af:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802175b3:	48 89 c2             	mov    %rax,%rdx
ffffffff802175b6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802175ba:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802175be:	48 01 d0             	add    %rdx,%rax
ffffffff802175c1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802175c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802175c9:	48 8b 00             	mov    (%rax),%rax
ffffffff802175cc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff802175d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802175d4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802175d8:	0f b7 c0             	movzwl %ax,%eax
ffffffff802175db:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802175df:	0f 94 c0             	sete   %al
ffffffff802175e2:	0f b6 c0             	movzbl %al,%eax
ffffffff802175e5:	48 85 c0             	test   %rax,%rax
ffffffff802175e8:	74 0c                	je     ffffffff802175f6 <_RME_Thd_Sched_Rcv+0x137>
ffffffff802175ea:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802175f1:	e9 da 01 00 00       	jmp    ffffffff802177d0 <_RME_Thd_Sched_Rcv+0x311>
ffffffff802175f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802175fa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802175fe:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217602:	0f 95 c0             	setne  %al
ffffffff80217605:	0f b6 c0             	movzbl %al,%eax
ffffffff80217608:	48 85 c0             	test   %rax,%rax
ffffffff8021760b:	74 0c                	je     ffffffff80217619 <_RME_Thd_Sched_Rcv+0x15a>
ffffffff8021760d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217614:	e9 b7 01 00 00       	jmp    ffffffff802177d0 <_RME_Thd_Sched_Rcv+0x311>
ffffffff80217619:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021761d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217622:	48 89 c2             	mov    %rax,%rdx
ffffffff80217625:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217629:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021762d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217630:	0f 93 c0             	setae  %al
ffffffff80217633:	0f b6 c0             	movzbl %al,%eax
ffffffff80217636:	48 85 c0             	test   %rax,%rax
ffffffff80217639:	74 0c                	je     ffffffff80217647 <_RME_Thd_Sched_Rcv+0x188>
ffffffff8021763b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217642:	e9 89 01 00 00       	jmp    ffffffff802177d0 <_RME_Thd_Sched_Rcv+0x311>
ffffffff80217647:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021764b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217650:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217654:	48 89 c2             	mov    %rax,%rdx
ffffffff80217657:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021765b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021765f:	48 01 d0             	add    %rdx,%rax
ffffffff80217662:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217666:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021766a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021766d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80217671:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217675:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217679:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021767c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217680:	0f 94 c0             	sete   %al
ffffffff80217683:	0f b6 c0             	movzbl %al,%eax
ffffffff80217686:	48 85 c0             	test   %rax,%rax
ffffffff80217689:	74 0c                	je     ffffffff80217697 <_RME_Thd_Sched_Rcv+0x1d8>
ffffffff8021768b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217692:	e9 39 01 00 00       	jmp    ffffffff802177d0 <_RME_Thd_Sched_Rcv+0x311>
ffffffff80217697:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021769b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021769f:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802176a3:	0f 95 c0             	setne  %al
ffffffff802176a6:	0f b6 c0             	movzbl %al,%eax
ffffffff802176a9:	48 85 c0             	test   %rax,%rax
ffffffff802176ac:	74 0c                	je     ffffffff802176ba <_RME_Thd_Sched_Rcv+0x1fb>
ffffffff802176ae:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802176b5:	e9 16 01 00 00       	jmp    ffffffff802177d0 <_RME_Thd_Sched_Rcv+0x311>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
ffffffff802176ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802176be:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802176c2:	83 e0 20             	and    $0x20,%eax
ffffffff802176c5:	48 85 c0             	test   %rax,%rax
ffffffff802176c8:	0f 94 c0             	sete   %al
ffffffff802176cb:	0f b6 c0             	movzbl %al,%eax
ffffffff802176ce:	48 85 c0             	test   %rax,%rax
ffffffff802176d1:	74 0c                	je     ffffffff802176df <_RME_Thd_Sched_Rcv+0x220>
ffffffff802176d3:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802176da:	e9 f1 00 00 00       	jmp    ffffffff802177d0 <_RME_Thd_Sched_Rcv+0x311>
    
    /* Check if we are on the same core with the target thread */
    Scheduler=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff802176df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802176e3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802176e7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Scheduler->Sched.Local!=RME_CPU_LOCAL())
ffffffff802176eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802176ef:	48 8b 58 28          	mov    0x28(%rax),%rbx
ffffffff802176f3:	e8 47 41 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802176f8:	48 39 c3             	cmp    %rax,%rbx
ffffffff802176fb:	74 0c                	je     ffffffff80217709 <_RME_Thd_Sched_Rcv+0x24a>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802176fd:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217704:	e9 c7 00 00 00       	jmp    ffffffff802177d0 <_RME_Thd_Sched_Rcv+0x311>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if there are any notifications */
    if(Scheduler->Sched.Event.Next==&(Scheduler->Sched.Event))
ffffffff80217709:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021770d:	48 8b 50 78          	mov    0x78(%rax),%rdx
ffffffff80217711:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217715:	48 83 c0 78          	add    $0x78,%rax
ffffffff80217719:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021771c:	75 0c                	jne    ffffffff8021772a <_RME_Thd_Sched_Rcv+0x26b>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_NOTIF;
ffffffff8021771e:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff80217725:	e9 a6 00 00 00       	jmp    ffffffff802177d0 <_RME_Thd_Sched_Rcv+0x311>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Return one notification and delete it from the notification list */
    Thread=(struct RME_Thd_Struct*)(Scheduler->Sched.Event.Next-1U);
ffffffff8021772a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021772e:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff80217732:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80217736:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff8021773a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021773e:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80217742:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217746:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021774a:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021774d:	48 89 c7             	mov    %rax,%rdi
ffffffff80217750:	e8 29 56 ff ff       	call   ffffffff8020cd7e <_RME_List_Del>
    /* We need to do this because we are using this to detect whether the notification is sent */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80217755:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217759:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021775d:	48 89 c7             	mov    %rax,%rdi
ffffffff80217760:	e8 f3 55 ff ff       	call   ffffffff8020cd58 <_RME_List_Crt>
    
    /* Exception pending */
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80217765:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217769:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff8021776d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217771:	75 2b                	jne    ffffffff8021779e <_RME_Thd_Sched_Rcv+0x2df>
    {
        RME_COV_MARKER();
        
        Flag=RME_THD_EXCPEND_FLAG;
ffffffff80217773:	48 b8 00 00 00 00 00 	movabs $0x4000000000000000,%rax
ffffffff8021777a:	00 00 40 
ffffffff8021777d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        
        /* Is it also out of timeslice? */
        if(Thread->Sched.Slice==0U)
ffffffff80217781:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217785:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217789:	48 85 c0             	test   %rax,%rax
ffffffff8021778c:	75 36                	jne    ffffffff802177c4 <_RME_Thd_Sched_Rcv+0x305>
        {
            RME_COV_MARKER();
            
            Flag|=RME_THD_TIMEOUT_FLAG;
ffffffff8021778e:	48 b8 00 00 00 00 00 	movabs $0x2000000000000000,%rax
ffffffff80217795:	00 00 20 
ffffffff80217798:	48 09 45 e0          	or     %rax,-0x20(%rbp)
ffffffff8021779c:	eb 26                	jmp    ffffffff802177c4 <_RME_Thd_Sched_Rcv+0x305>
            RME_COV_MARKER();
            /* No action required */
        }
    }
    /* Timeout */
    else if(Thread->Sched.State==RME_THD_TIMEOUT)
ffffffff8021779e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802177a2:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802177a6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802177aa:	75 10                	jne    ffffffff802177bc <_RME_Thd_Sched_Rcv+0x2fd>
    {
        RME_COV_MARKER();
        
        Flag=RME_THD_TIMEOUT_FLAG;
ffffffff802177ac:	48 b8 00 00 00 00 00 	movabs $0x2000000000000000,%rax
ffffffff802177b3:	00 00 20 
ffffffff802177b6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802177ba:	eb 08                	jmp    ffffffff802177c4 <_RME_Thd_Sched_Rcv+0x305>
    /* Spurious notification, cause eliminated before this sched rcv */
    else
    {
        RME_COV_MARKER();
        
        Flag=0U;
ffffffff802177bc:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff802177c3:	00 
    }
    
    /* Return the notification TID with the flags */
    return (rme_ret_t)(Thread->Sched.TID|Flag);
ffffffff802177c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802177c8:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff802177cc:	48 0b 45 e0          	or     -0x20(%rbp),%rax
}
ffffffff802177d0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff802177d4:	c9                   	leave
ffffffff802177d5:	c3                   	ret

ffffffff802177d6 <_RME_Thd_Time_Xfer>:
static rme_ret_t _RME_Thd_Time_Xfer(struct RME_Cap_Cpt* Cpt,
                                    struct RME_Reg_Struct* Reg,
                                    rme_cid_t Cap_Thd_Dst,
                                    rme_cid_t Cap_Thd_Src,
                                    rme_ptr_t Time)
{
ffffffff802177d6:	55                   	push   %rbp
ffffffff802177d7:	48 89 e5             	mov    %rsp,%rbp
ffffffff802177da:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff802177de:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802177e2:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff802177e6:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff802177ea:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff802177ee:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_CPU_Local* Local;
    rme_ptr_t Time_Xfer;
    rme_ptr_t Type_Stat;
    
    /* We may allow transferring infinite time here */
    if(Time==0U)
ffffffff802177f2:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
ffffffff802177f7:	75 0c                	jne    ffffffff80217805 <_RME_Thd_Time_Xfer+0x2f>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802177f9:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217800:	e9 3c 07 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80217805:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217809:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021780e:	48 85 c0             	test   %rax,%rax
ffffffff80217811:	0f 85 98 00 00 00    	jne    ffffffff802178af <_RME_Thd_Time_Xfer+0xd9>
ffffffff80217817:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021781b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021781f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80217823:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217826:	0f 93 c0             	setae  %al
ffffffff80217829:	0f b6 c0             	movzbl %al,%eax
ffffffff8021782c:	48 85 c0             	test   %rax,%rax
ffffffff8021782f:	74 0c                	je     ffffffff8021783d <_RME_Thd_Time_Xfer+0x67>
ffffffff80217831:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217838:	e9 04 07 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff8021783d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217841:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217845:	48 89 c2             	mov    %rax,%rdx
ffffffff80217848:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021784c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217850:	48 01 d0             	add    %rdx,%rax
ffffffff80217853:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217857:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021785b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021785e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217862:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217866:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021786a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021786d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217871:	0f 94 c0             	sete   %al
ffffffff80217874:	0f b6 c0             	movzbl %al,%eax
ffffffff80217877:	48 85 c0             	test   %rax,%rax
ffffffff8021787a:	74 0c                	je     ffffffff80217888 <_RME_Thd_Time_Xfer+0xb2>
ffffffff8021787c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217883:	e9 b9 06 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff80217888:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021788c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217890:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217894:	0f 95 c0             	setne  %al
ffffffff80217897:	0f b6 c0             	movzbl %al,%eax
ffffffff8021789a:	48 85 c0             	test   %rax,%rax
ffffffff8021789d:	0f 84 4c 01 00 00    	je     ffffffff802179ef <_RME_Thd_Time_Xfer+0x219>
ffffffff802178a3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802178aa:	e9 92 06 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff802178af:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802178b3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802178b7:	48 89 c2             	mov    %rax,%rdx
ffffffff802178ba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802178be:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802178c2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802178c5:	0f 93 c0             	setae  %al
ffffffff802178c8:	0f b6 c0             	movzbl %al,%eax
ffffffff802178cb:	48 85 c0             	test   %rax,%rax
ffffffff802178ce:	74 0c                	je     ffffffff802178dc <_RME_Thd_Time_Xfer+0x106>
ffffffff802178d0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802178d7:	e9 65 06 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff802178dc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802178e0:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802178e4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802178e8:	48 89 c2             	mov    %rax,%rdx
ffffffff802178eb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802178ef:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802178f3:	48 01 d0             	add    %rdx,%rax
ffffffff802178f6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802178fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802178fe:	48 8b 00             	mov    (%rax),%rax
ffffffff80217901:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217905:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217909:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021790d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217910:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217914:	0f 94 c0             	sete   %al
ffffffff80217917:	0f b6 c0             	movzbl %al,%eax
ffffffff8021791a:	48 85 c0             	test   %rax,%rax
ffffffff8021791d:	74 0c                	je     ffffffff8021792b <_RME_Thd_Time_Xfer+0x155>
ffffffff8021791f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217926:	e9 16 06 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff8021792b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021792f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217933:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217937:	0f 95 c0             	setne  %al
ffffffff8021793a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021793d:	48 85 c0             	test   %rax,%rax
ffffffff80217940:	74 0c                	je     ffffffff8021794e <_RME_Thd_Time_Xfer+0x178>
ffffffff80217942:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217949:	e9 f3 05 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff8021794e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217952:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217957:	48 89 c2             	mov    %rax,%rdx
ffffffff8021795a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021795e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217962:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217965:	0f 93 c0             	setae  %al
ffffffff80217968:	0f b6 c0             	movzbl %al,%eax
ffffffff8021796b:	48 85 c0             	test   %rax,%rax
ffffffff8021796e:	74 0c                	je     ffffffff8021797c <_RME_Thd_Time_Xfer+0x1a6>
ffffffff80217970:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217977:	e9 c5 05 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff8021797c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217980:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217985:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217989:	48 89 c2             	mov    %rax,%rdx
ffffffff8021798c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217990:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217994:	48 01 d0             	add    %rdx,%rax
ffffffff80217997:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021799b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021799f:	48 8b 00             	mov    (%rax),%rax
ffffffff802179a2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802179a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802179aa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802179ae:	0f b7 c0             	movzwl %ax,%eax
ffffffff802179b1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802179b5:	0f 94 c0             	sete   %al
ffffffff802179b8:	0f b6 c0             	movzbl %al,%eax
ffffffff802179bb:	48 85 c0             	test   %rax,%rax
ffffffff802179be:	74 0c                	je     ffffffff802179cc <_RME_Thd_Time_Xfer+0x1f6>
ffffffff802179c0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802179c7:	e9 75 05 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff802179cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802179d0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802179d4:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802179d8:	0f 95 c0             	setne  %al
ffffffff802179db:	0f b6 c0             	movzbl %al,%eax
ffffffff802179de:	48 85 c0             	test   %rax,%rax
ffffffff802179e1:	74 0c                	je     ffffffff802179ef <_RME_Thd_Time_Xfer+0x219>
ffffffff802179e3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802179ea:	e9 52 05 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
                   struct RME_Cap_Thd*,Thd_Dst_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff802179ef:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802179f3:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802179f8:	48 85 c0             	test   %rax,%rax
ffffffff802179fb:	0f 85 98 00 00 00    	jne    ffffffff80217a99 <_RME_Thd_Time_Xfer+0x2c3>
ffffffff80217a01:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217a05:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217a09:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80217a0d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217a10:	0f 93 c0             	setae  %al
ffffffff80217a13:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a16:	48 85 c0             	test   %rax,%rax
ffffffff80217a19:	74 0c                	je     ffffffff80217a27 <_RME_Thd_Time_Xfer+0x251>
ffffffff80217a1b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217a22:	e9 1a 05 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff80217a27:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217a2b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217a2f:	48 89 c2             	mov    %rax,%rdx
ffffffff80217a32:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217a36:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217a3a:	48 01 d0             	add    %rdx,%rax
ffffffff80217a3d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217a41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217a45:	48 8b 00             	mov    (%rax),%rax
ffffffff80217a48:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217a4c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217a50:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217a54:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217a57:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217a5b:	0f 94 c0             	sete   %al
ffffffff80217a5e:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a61:	48 85 c0             	test   %rax,%rax
ffffffff80217a64:	74 0c                	je     ffffffff80217a72 <_RME_Thd_Time_Xfer+0x29c>
ffffffff80217a66:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217a6d:	e9 cf 04 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff80217a72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217a76:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217a7a:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217a7e:	0f 95 c0             	setne  %al
ffffffff80217a81:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a84:	48 85 c0             	test   %rax,%rax
ffffffff80217a87:	0f 84 4c 01 00 00    	je     ffffffff80217bd9 <_RME_Thd_Time_Xfer+0x403>
ffffffff80217a8d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217a94:	e9 a8 04 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff80217a99:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217a9d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217aa1:	48 89 c2             	mov    %rax,%rdx
ffffffff80217aa4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217aa8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217aac:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217aaf:	0f 93 c0             	setae  %al
ffffffff80217ab2:	0f b6 c0             	movzbl %al,%eax
ffffffff80217ab5:	48 85 c0             	test   %rax,%rax
ffffffff80217ab8:	74 0c                	je     ffffffff80217ac6 <_RME_Thd_Time_Xfer+0x2f0>
ffffffff80217aba:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217ac1:	e9 7b 04 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff80217ac6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217aca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217ace:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217ad2:	48 89 c2             	mov    %rax,%rdx
ffffffff80217ad5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217ad9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217add:	48 01 d0             	add    %rdx,%rax
ffffffff80217ae0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217ae4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217ae8:	48 8b 00             	mov    (%rax),%rax
ffffffff80217aeb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217aef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217af3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217af7:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217afa:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217afe:	0f 94 c0             	sete   %al
ffffffff80217b01:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b04:	48 85 c0             	test   %rax,%rax
ffffffff80217b07:	74 0c                	je     ffffffff80217b15 <_RME_Thd_Time_Xfer+0x33f>
ffffffff80217b09:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217b10:	e9 2c 04 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff80217b15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217b19:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217b1d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217b21:	0f 95 c0             	setne  %al
ffffffff80217b24:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b27:	48 85 c0             	test   %rax,%rax
ffffffff80217b2a:	74 0c                	je     ffffffff80217b38 <_RME_Thd_Time_Xfer+0x362>
ffffffff80217b2c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217b33:	e9 09 04 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff80217b38:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217b3c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217b41:	48 89 c2             	mov    %rax,%rdx
ffffffff80217b44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217b48:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217b4c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217b4f:	0f 93 c0             	setae  %al
ffffffff80217b52:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b55:	48 85 c0             	test   %rax,%rax
ffffffff80217b58:	74 0c                	je     ffffffff80217b66 <_RME_Thd_Time_Xfer+0x390>
ffffffff80217b5a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217b61:	e9 db 03 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff80217b66:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217b6a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217b6f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217b73:	48 89 c2             	mov    %rax,%rdx
ffffffff80217b76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217b7a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217b7e:	48 01 d0             	add    %rdx,%rax
ffffffff80217b81:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217b85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217b89:	48 8b 00             	mov    (%rax),%rax
ffffffff80217b8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217b90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217b94:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217b98:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217b9b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217b9f:	0f 94 c0             	sete   %al
ffffffff80217ba2:	0f b6 c0             	movzbl %al,%eax
ffffffff80217ba5:	48 85 c0             	test   %rax,%rax
ffffffff80217ba8:	74 0c                	je     ffffffff80217bb6 <_RME_Thd_Time_Xfer+0x3e0>
ffffffff80217baa:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217bb1:	e9 8b 03 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
ffffffff80217bb6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217bba:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217bbe:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217bc2:	0f 95 c0             	setne  %al
ffffffff80217bc5:	0f b6 c0             	movzbl %al,%eax
ffffffff80217bc8:	48 85 c0             	test   %rax,%rax
ffffffff80217bcb:	74 0c                	je     ffffffff80217bd9 <_RME_Thd_Time_Xfer+0x403>
ffffffff80217bcd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217bd4:	e9 68 03 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
                   struct RME_Cap_Thd*,Thd_Src_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff80217bd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217bdd:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217be1:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80217be6:	48 85 c0             	test   %rax,%rax
ffffffff80217be9:	0f 94 c0             	sete   %al
ffffffff80217bec:	0f b6 c0             	movzbl %al,%eax
ffffffff80217bef:	48 85 c0             	test   %rax,%rax
ffffffff80217bf2:	74 0c                	je     ffffffff80217c00 <_RME_Thd_Time_Xfer+0x42a>
ffffffff80217bf4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217bfb:	e9 41 03 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
    RME_CAP_CHECK(Thd_Src_Op,RME_THD_FLAG_XFER_SRC);
ffffffff80217c00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217c04:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217c08:	83 e0 40             	and    $0x40,%eax
ffffffff80217c0b:	48 85 c0             	test   %rax,%rax
ffffffff80217c0e:	0f 94 c0             	sete   %al
ffffffff80217c11:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c14:	48 85 c0             	test   %rax,%rax
ffffffff80217c17:	74 0c                	je     ffffffff80217c25 <_RME_Thd_Time_Xfer+0x44f>
ffffffff80217c19:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217c20:	e9 1c 03 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>

    /* Check if the two threads are on the core that is accordance with what we are on */
    Local=RME_CPU_LOCAL();
ffffffff80217c25:	e8 15 3c ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80217c2a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Thd_Src=RME_CAP_GETOBJ(Thd_Src_Op,struct RME_Thd_Struct*);
ffffffff80217c2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217c32:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217c36:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Thd_Src->Sched.Local!=Local)
ffffffff80217c3a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217c3e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217c42:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80217c46:	74 0c                	je     ffffffff80217c54 <_RME_Thd_Time_Xfer+0x47e>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217c48:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217c4f:	e9 ed 02 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if we have slices to transfer; 0 implies TIMEOUT, BLOCKED, or EXCPEND */
    if(Thd_Src->Sched.Slice==0U)
ffffffff80217c54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217c58:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217c5c:	48 85 c0             	test   %rax,%rax
ffffffff80217c5f:	75 0c                	jne    ffffffff80217c6d <_RME_Thd_Time_Xfer+0x497>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217c61:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217c68:	e9 d4 02 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    Thd_Dst=RME_CAP_GETOBJ(Thd_Dst_Op,struct RME_Thd_Struct*);
ffffffff80217c6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217c71:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217c75:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    
    if(Thd_Dst->Sched.Local!=Local)
ffffffff80217c79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217c7d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217c81:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80217c85:	74 0c                	je     ffffffff80217c93 <_RME_Thd_Time_Xfer+0x4bd>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217c87:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217c8e:	e9 ae 02 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
        /* No action required */
    }

    /* The destination must never have higher maximum priority than the source,
     * unless it is a init thread which could be used as a black hole */
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80217c93:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217c97:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff80217c9b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217c9f:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80217ca3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217ca6:	73 23                	jae    ffffffff80217ccb <_RME_Thd_Time_Xfer+0x4f5>
       (Thd_Dst->Sched.Slice!=RME_THD_INIT_TIME))
ffffffff80217ca8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217cac:	48 8b 50 30          	mov    0x30(%rax),%rdx
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80217cb0:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217cb7:	ff ff 7f 
ffffffff80217cba:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217cbd:	74 0c                	je     ffffffff80217ccb <_RME_Thd_Time_Xfer+0x4f5>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80217cbf:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80217cc6:	e9 76 02 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Delegating from a normal thread */
    if(Thd_Src->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217ccb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217ccf:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217cd3:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217cda:	ff ff 7f 
ffffffff80217cdd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217ce0:	0f 82 e4 00 00 00    	jb     ffffffff80217dca <_RME_Thd_Time_Xfer+0x5f4>
    {
        RME_COV_MARKER();

        /* Delegate all our time */
        if(Time>=RME_THD_INF_TIME)
ffffffff80217ce6:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80217ced:	ff ff 7f 
ffffffff80217cf0:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
ffffffff80217cf4:	73 0e                	jae    ffffffff80217d04 <_RME_Thd_Time_Xfer+0x52e>
        {
            RME_COV_MARKER();

            Time_Xfer=Thd_Src->Sched.Slice;
ffffffff80217cf6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217cfa:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217cfe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217d02:	eb 24                	jmp    ffffffff80217d28 <_RME_Thd_Time_Xfer+0x552>
        /* Delegate some time, if not sufficient, clean up the source time */
        else
        {
            RME_COV_MARKER();
            
            if(Thd_Src->Sched.Slice>Time)
ffffffff80217d04:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217d08:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217d0c:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff80217d10:	73 0a                	jae    ffffffff80217d1c <_RME_Thd_Time_Xfer+0x546>
            {
                RME_COV_MARKER();

                Time_Xfer=Time;
ffffffff80217d12:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217d16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217d1a:	eb 0c                	jmp    ffffffff80217d28 <_RME_Thd_Time_Xfer+0x552>
            }
            else
            {
                RME_COV_MARKER();

                Time_Xfer=Thd_Src->Sched.Slice;
ffffffff80217d1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217d20:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217d24:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            }
        }
        
        /* See if we are transferring to an infinite budget thread. If yes, we
         * are revoking timeslices; If not, this is a finite transfer */
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217d28:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217d2c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217d30:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217d37:	ff ff 7f 
ffffffff80217d3a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217d3d:	72 6f                	jb     ffffffff80217dae <_RME_Thd_Time_Xfer+0x5d8>
        {
            RME_COV_MARKER();
            
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80217d3f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217d43:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217d47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217d4b:	48 01 d0             	add    %rdx,%rax
ffffffff80217d4e:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217d55:	ff ff 7f 
ffffffff80217d58:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217d5b:	0f 92 c0             	setb   %al
ffffffff80217d5e:	0f b6 c0             	movzbl %al,%eax
ffffffff80217d61:	48 85 c0             	test   %rax,%rax
ffffffff80217d64:	75 25                	jne    ffffffff80217d8b <_RME_Thd_Time_Xfer+0x5b5>
ffffffff80217d66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217d6a:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217d6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217d72:	48 01 c2             	add    %rax,%rdx
ffffffff80217d75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217d79:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217d7d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217d80:	0f 92 c0             	setb   %al
ffffffff80217d83:	0f b6 c0             	movzbl %al,%eax
ffffffff80217d86:	48 85 c0             	test   %rax,%rax
ffffffff80217d89:	74 0c                	je     ffffffff80217d97 <_RME_Thd_Time_Xfer+0x5c1>
ffffffff80217d8b:	48 c7 c0 30 ff ff ff 	mov    $0xffffffffffffff30,%rax
ffffffff80217d92:	e9 aa 01 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
            Thd_Dst->Sched.Slice+=Time_Xfer;
ffffffff80217d97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217d9b:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217d9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217da3:	48 01 c2             	add    %rax,%rdx
ffffffff80217da6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217daa:	48 89 50 30          	mov    %rdx,0x30(%rax)
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff80217dae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217db2:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217db6:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff80217dba:	48 89 c2             	mov    %rax,%rdx
ffffffff80217dbd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217dc1:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff80217dc5:	e9 e1 00 00 00       	jmp    ffffffff80217eab <_RME_Thd_Time_Xfer+0x6d5>
    else
    {
        RME_COV_MARKER();

        /* Infinite transfer to the destination */
        if(Time>=RME_THD_INF_TIME)
ffffffff80217dca:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80217dd1:	ff ff 7f 
ffffffff80217dd4:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
ffffffff80217dd8:	73 62                	jae    ffffffff80217e3c <_RME_Thd_Time_Xfer+0x666>
        {
            RME_COV_MARKER();

            /* This transfer will revoke the infinite budget */
            if(Time==RME_THD_INIT_TIME)
ffffffff80217dda:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217de1:	ff ff 7f 
ffffffff80217de4:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff80217de8:	75 23                	jne    ffffffff80217e0d <_RME_Thd_Time_Xfer+0x637>
            {
                RME_COV_MARKER();
                
                /* Will not revoke, source is an init thread */
                if(Thd_Src->Sched.Slice!=RME_THD_INIT_TIME)
ffffffff80217dea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217dee:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217df2:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217df9:	ff ff 7f 
ffffffff80217dfc:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217dff:	74 0c                	je     ffffffff80217e0d <_RME_Thd_Time_Xfer+0x637>
                {
                    RME_COV_MARKER();
                    
                    Thd_Src->Sched.Slice=0U;
ffffffff80217e01:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217e05:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80217e0c:	00 
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* Set destination to infinite if it is not an init thread */
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217e0d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e11:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e15:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217e1c:	ff ff 7f 
ffffffff80217e1f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e22:	0f 82 83 00 00 00    	jb     ffffffff80217eab <_RME_Thd_Time_Xfer+0x6d5>
            {
                RME_COV_MARKER();
                
                Thd_Dst->Sched.Slice=RME_THD_INF_TIME;
ffffffff80217e28:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e2c:	48 b9 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rcx
ffffffff80217e33:	ff ff 7f 
ffffffff80217e36:	48 89 48 30          	mov    %rcx,0x30(%rax)
ffffffff80217e3a:	eb 6f                	jmp    ffffffff80217eab <_RME_Thd_Time_Xfer+0x6d5>
        else
        {
            RME_COV_MARKER();

            /* Just increase the budget of the other thread - check first */
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time);
ffffffff80217e3c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e40:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217e44:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217e48:	48 01 d0             	add    %rdx,%rax
ffffffff80217e4b:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217e52:	ff ff 7f 
ffffffff80217e55:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e58:	0f 92 c0             	setb   %al
ffffffff80217e5b:	0f b6 c0             	movzbl %al,%eax
ffffffff80217e5e:	48 85 c0             	test   %rax,%rax
ffffffff80217e61:	75 25                	jne    ffffffff80217e88 <_RME_Thd_Time_Xfer+0x6b2>
ffffffff80217e63:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e67:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217e6b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217e6f:	48 01 c2             	add    %rax,%rdx
ffffffff80217e72:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e76:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e7a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e7d:	0f 92 c0             	setb   %al
ffffffff80217e80:	0f b6 c0             	movzbl %al,%eax
ffffffff80217e83:	48 85 c0             	test   %rax,%rax
ffffffff80217e86:	74 0c                	je     ffffffff80217e94 <_RME_Thd_Time_Xfer+0x6be>
ffffffff80217e88:	48 c7 c0 30 ff ff ff 	mov    $0xffffffffffffff30,%rax
ffffffff80217e8f:	e9 ad 00 00 00       	jmp    ffffffff80217f41 <_RME_Thd_Time_Xfer+0x76b>
            Thd_Dst->Sched.Slice+=Time;
ffffffff80217e94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e98:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217e9c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217ea0:	48 01 c2             	add    %rax,%rdx
ffffffff80217ea3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217ea7:	48 89 50 30          	mov    %rdx,0x30(%rax)
        }
    }

    /* Is the source time used up? If yes, delete it from the run queue, and notify its 
     * parent. If it is not in the run queue, The state of the source must be BLOCKED. */
    if(Thd_Src->Sched.Slice==0U)
ffffffff80217eab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217eaf:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217eb3:	48 85 c0             	test   %rax,%rax
ffffffff80217eb6:	75 31                	jne    ffffffff80217ee9 <_RME_Thd_Time_Xfer+0x713>
        
        /* If it is blocked or have an exception, we neither change its state nor send
         * the scheduler notification. It will be sent when the thread unblocks, or gets
         * its exception handled. The rule of the thumb is, we only send scheduler 
         * notifications when the thread really enter TIMEOUT or EXCPEND state. */
        if(Thd_Src->Sched.State==RME_THD_READY)
ffffffff80217eb8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217ebc:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80217ec0:	48 85 c0             	test   %rax,%rax
ffffffff80217ec3:	75 24                	jne    ffffffff80217ee9 <_RME_Thd_Time_Xfer+0x713>
        {
            RME_COV_MARKER();
            
            /* Remove from runqueue */
            _RME_Run_Del(Thd_Src);
ffffffff80217ec5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217ec9:	48 89 c7             	mov    %rax,%rdi
ffffffff80217ecc:	e8 98 ae ff ff       	call   ffffffff80212d69 <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Src->Sched.State=RME_THD_TIMEOUT;
ffffffff80217ed1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217ed5:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80217edc:	00 
            _RME_Run_Notif(Thd_Src);
ffffffff80217edd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217ee1:	48 89 c7             	mov    %rax,%rdi
ffffffff80217ee4:	e8 c3 af ff ff       	call   ffffffff80212eac <_RME_Run_Notif>
        /* No action required */
    }

    /* Now save the system call return value to the caller 
     * stack - how much time the destination have now */
    __RME_Svc_Retval_Set(Reg,(rme_ret_t)(Thd_Dst->Sched.Slice));
ffffffff80217ee9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217eed:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217ef1:	48 89 c2             	mov    %rax,%rdx
ffffffff80217ef4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217ef8:	48 89 d6             	mov    %rdx,%rsi
ffffffff80217efb:	48 89 c7             	mov    %rax,%rdi
ffffffff80217efe:	e8 c8 ef 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>

    /* See what was the state of the destination thread. If it is timeout, then activate
     * it. If it is BLOCKED or EXCPEND, then leave it alone, and it will be activated
     * when it unblocks or when the exception is handled. */
    if(Thd_Dst->Sched.State==RME_THD_TIMEOUT)
ffffffff80217f03:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f07:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80217f0b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217f0f:	75 18                	jne    ffffffff80217f29 <_RME_Thd_Time_Xfer+0x753>
    {
        RME_COV_MARKER();

        /* Ready and add to runqueue */
        Thd_Dst->Sched.State=RME_THD_READY;
ffffffff80217f11:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f15:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80217f1c:	00 
        _RME_Run_Ins(Thd_Dst);
ffffffff80217f1d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f21:	48 89 c7             	mov    %rax,%rdi
ffffffff80217f24:	e8 94 ad ff ff       	call   ffffffff80212cbd <_RME_Run_Ins>
        RME_COV_MARKER();
    }
    
    /* All possible kernel send (scheduler notifications) done,
     * now pick the highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff80217f29:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80217f2d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217f31:	48 89 d6             	mov    %rdx,%rsi
ffffffff80217f34:	48 89 c7             	mov    %rax,%rdi
ffffffff80217f37:	e8 d1 0d 00 00       	call   ffffffff80218d0d <_RME_Kern_High>

    return 0;
ffffffff80217f3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80217f41:	c9                   	leave
ffffffff80217f42:	c3                   	ret

ffffffff80217f43 <_RME_Thd_Swt>:
******************************************************************************/
static rme_ret_t _RME_Thd_Swt(struct RME_Cap_Cpt* Cpt,
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Thd,
                              rme_ptr_t Is_Yield)
{
ffffffff80217f43:	55                   	push   %rbp
ffffffff80217f44:	48 89 e5             	mov    %rsp,%rbp
ffffffff80217f47:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80217f4b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80217f4f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80217f53:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80217f57:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    struct RME_Thd_Struct* Thd_High;
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    rme_ptr_t Type_Stat;

    Local=RME_CPU_LOCAL();
ffffffff80217f5b:	e8 df 38 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80217f60:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff80217f64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217f68:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80217f6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* The caller have picked a thread to switch to */
    if(Cap_Thd<RME_CID_NULL)
ffffffff80217f70:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff80217f75:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
ffffffff80217f79:	0f 8d 21 03 00 00    	jge    ffffffff802182a0 <_RME_Thd_Swt+0x35d>
    {
        RME_COV_MARKER();
        
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80217f7f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217f83:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80217f88:	48 85 c0             	test   %rax,%rax
ffffffff80217f8b:	0f 85 98 00 00 00    	jne    ffffffff80218029 <_RME_Thd_Swt+0xe6>
ffffffff80217f91:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f95:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217f99:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80217f9d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217fa0:	0f 93 c0             	setae  %al
ffffffff80217fa3:	0f b6 c0             	movzbl %al,%eax
ffffffff80217fa6:	48 85 c0             	test   %rax,%rax
ffffffff80217fa9:	74 0c                	je     ffffffff80217fb7 <_RME_Thd_Swt+0x74>
ffffffff80217fab:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217fb2:	e9 ab 03 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
ffffffff80217fb7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217fbb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217fbf:	48 89 c2             	mov    %rax,%rdx
ffffffff80217fc2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217fc6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217fca:	48 01 d0             	add    %rdx,%rax
ffffffff80217fcd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217fd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217fd5:	48 8b 00             	mov    (%rax),%rax
ffffffff80217fd8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80217fdc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217fe0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217fe4:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217fe7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217feb:	0f 94 c0             	sete   %al
ffffffff80217fee:	0f b6 c0             	movzbl %al,%eax
ffffffff80217ff1:	48 85 c0             	test   %rax,%rax
ffffffff80217ff4:	74 0c                	je     ffffffff80218002 <_RME_Thd_Swt+0xbf>
ffffffff80217ff6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217ffd:	e9 60 03 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
ffffffff80218002:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218006:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021800a:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021800e:	0f 95 c0             	setne  %al
ffffffff80218011:	0f b6 c0             	movzbl %al,%eax
ffffffff80218014:	48 85 c0             	test   %rax,%rax
ffffffff80218017:	0f 84 4c 01 00 00    	je     ffffffff80218169 <_RME_Thd_Swt+0x226>
ffffffff8021801d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218024:	e9 39 03 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
ffffffff80218029:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021802d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218031:	48 89 c2             	mov    %rax,%rdx
ffffffff80218034:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218038:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021803c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021803f:	0f 93 c0             	setae  %al
ffffffff80218042:	0f b6 c0             	movzbl %al,%eax
ffffffff80218045:	48 85 c0             	test   %rax,%rax
ffffffff80218048:	74 0c                	je     ffffffff80218056 <_RME_Thd_Swt+0x113>
ffffffff8021804a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218051:	e9 0c 03 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
ffffffff80218056:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021805a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021805e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218062:	48 89 c2             	mov    %rax,%rdx
ffffffff80218065:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218069:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021806d:	48 01 d0             	add    %rdx,%rax
ffffffff80218070:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218074:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218078:	48 8b 00             	mov    (%rax),%rax
ffffffff8021807b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8021807f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218083:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218087:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021808a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021808e:	0f 94 c0             	sete   %al
ffffffff80218091:	0f b6 c0             	movzbl %al,%eax
ffffffff80218094:	48 85 c0             	test   %rax,%rax
ffffffff80218097:	74 0c                	je     ffffffff802180a5 <_RME_Thd_Swt+0x162>
ffffffff80218099:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802180a0:	e9 bd 02 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
ffffffff802180a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802180a9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802180ad:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802180b1:	0f 95 c0             	setne  %al
ffffffff802180b4:	0f b6 c0             	movzbl %al,%eax
ffffffff802180b7:	48 85 c0             	test   %rax,%rax
ffffffff802180ba:	74 0c                	je     ffffffff802180c8 <_RME_Thd_Swt+0x185>
ffffffff802180bc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802180c3:	e9 9a 02 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
ffffffff802180c8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802180cc:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802180d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802180d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802180d8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802180dc:	48 39 c2             	cmp    %rax,%rdx
ffffffff802180df:	0f 93 c0             	setae  %al
ffffffff802180e2:	0f b6 c0             	movzbl %al,%eax
ffffffff802180e5:	48 85 c0             	test   %rax,%rax
ffffffff802180e8:	74 0c                	je     ffffffff802180f6 <_RME_Thd_Swt+0x1b3>
ffffffff802180ea:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802180f1:	e9 6c 02 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
ffffffff802180f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802180fa:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802180ff:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218103:	48 89 c2             	mov    %rax,%rdx
ffffffff80218106:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021810a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021810e:	48 01 d0             	add    %rdx,%rax
ffffffff80218111:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218115:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218119:	48 8b 00             	mov    (%rax),%rax
ffffffff8021811c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80218120:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218124:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218128:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021812b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021812f:	0f 94 c0             	sete   %al
ffffffff80218132:	0f b6 c0             	movzbl %al,%eax
ffffffff80218135:	48 85 c0             	test   %rax,%rax
ffffffff80218138:	74 0c                	je     ffffffff80218146 <_RME_Thd_Swt+0x203>
ffffffff8021813a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218141:	e9 1c 02 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
ffffffff80218146:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021814a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021814e:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80218152:	0f 95 c0             	setne  %al
ffffffff80218155:	0f b6 c0             	movzbl %al,%eax
ffffffff80218158:	48 85 c0             	test   %rax,%rax
ffffffff8021815b:	74 0c                	je     ffffffff80218169 <_RME_Thd_Swt+0x226>
ffffffff8021815d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218164:	e9 f9 01 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
                       struct RME_Cap_Thd*,Thd_Cap_New,Type_Stat);
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff80218169:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021816d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218171:	25 00 01 00 00       	and    $0x100,%eax
ffffffff80218176:	48 85 c0             	test   %rax,%rax
ffffffff80218179:	0f 94 c0             	sete   %al
ffffffff8021817c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021817f:	48 85 c0             	test   %rax,%rax
ffffffff80218182:	74 0c                	je     ffffffff80218190 <_RME_Thd_Swt+0x24d>
ffffffff80218184:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021818b:	e9 d2 01 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
        /* See if we can do operation on this core */
        Thd_New=RME_CAP_GETOBJ(Thd_Cap_New,struct RME_Thd_Struct*);
ffffffff80218190:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218194:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218198:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        if(Thd_New->Sched.Local!=Local)
ffffffff8021819c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802181a0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802181a4:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff802181a8:	74 0c                	je     ffffffff802181b6 <_RME_Thd_Swt+0x273>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff802181aa:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802181b1:	e9 ac 01 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
            RME_COV_MARKER();
            /* No action required */
        }
            
        /* See if we can yield to the thread */
        if(Thd_Cur->Sched.Prio!=Thd_New->Sched.Prio)
ffffffff802181b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802181ba:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff802181be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802181c2:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff802181c6:	48 39 c2             	cmp    %rax,%rdx
ffffffff802181c9:	74 0c                	je     ffffffff802181d7 <_RME_Thd_Swt+0x294>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_PRIO;
ffffffff802181cb:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff802181d2:	e9 8b 01 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
            RME_COV_MARKER();
            /* No action required */
        }
            
        /* Check if the target thread state is valid */
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff802181d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802181db:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802181df:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802181e3:	74 1c                	je     ffffffff80218201 <_RME_Thd_Swt+0x2be>
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff802181e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802181e9:	48 8b 40 38          	mov    0x38(%rax),%rax
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff802181ed:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802181f1:	74 0e                	je     ffffffff80218201 <_RME_Thd_Swt+0x2be>
           (Thd_New->Sched.State==RME_THD_EXCPEND))
ffffffff802181f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802181f7:	48 8b 40 38          	mov    0x38(%rax),%rax
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff802181fb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802181ff:	75 0c                	jne    ffffffff8021820d <_RME_Thd_Swt+0x2ca>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff80218201:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80218208:	e9 55 01 00 00       	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* See if we need to give up all our timeslices in this yield */
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff8021820d:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80218212:	0f 84 00 01 00 00    	je     ffffffff80218318 <_RME_Thd_Swt+0x3d5>
ffffffff80218218:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021821c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218220:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80218227:	ff ff 7f 
ffffffff8021822a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021822d:	0f 82 e5 00 00 00    	jb     ffffffff80218318 <_RME_Thd_Swt+0x3d5>
        {
            RME_COV_MARKER();
            
            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff80218233:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218237:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8021823e:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff8021823f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218243:	48 89 c7             	mov    %rax,%rdi
ffffffff80218246:	e8 1e ab ff ff       	call   ffffffff80212d69 <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff8021824b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021824f:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80218256:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff80218257:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021825b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021825e:	e8 49 ac ff ff       	call   ffffffff80212eac <_RME_Run_Notif>
            
            /* Because we have sent a notification, we could have unblocked a
             * thread at higher priority. Additionally, if the new thread is
             * the current thread, we are forced to switch to someone else,
             * because the current thread's timeslice must be exhausted. */
            Thd_High=_RME_Run_High(Local);
ffffffff80218263:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218267:	48 89 c7             	mov    %rax,%rdi
ffffffff8021826a:	e8 bf ab ff ff       	call   ffffffff80212e2e <_RME_Run_High>
ffffffff8021826f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
            if((Thd_High->Sched.Prio>Thd_New->Sched.Prio)||(Thd_Cur==Thd_New))
ffffffff80218273:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218277:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff8021827b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8021827f:	48 8b 52 40          	mov    0x40(%rdx),%rdx
ffffffff80218283:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218286:	72 0e                	jb     ffffffff80218296 <_RME_Thd_Swt+0x353>
ffffffff80218288:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021828c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218290:	0f 85 82 00 00 00    	jne    ffffffff80218318 <_RME_Thd_Swt+0x3d5>
            {
                RME_COV_MARKER();

                Thd_New=Thd_High;
ffffffff80218296:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021829a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021829e:	eb 78                	jmp    ffffffff80218318 <_RME_Thd_Swt+0x3d5>
    else
    {
        RME_COV_MARKER();
        
        /* See if we need to give up all our timeslices in this yield */
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff802182a0:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff802182a5:	74 49                	je     ffffffff802182f0 <_RME_Thd_Swt+0x3ad>
ffffffff802182a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802182ab:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802182af:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff802182b6:	ff ff 7f 
ffffffff802182b9:	48 39 c2             	cmp    %rax,%rdx
ffffffff802182bc:	72 32                	jb     ffffffff802182f0 <_RME_Thd_Swt+0x3ad>
        {
            RME_COV_MARKER();
            
            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff802182be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802182c2:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff802182c9:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff802182ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802182ce:	48 89 c7             	mov    %rax,%rdi
ffffffff802182d1:	e8 93 aa ff ff       	call   ffffffff80212d69 <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff802182d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802182da:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff802182e1:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff802182e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802182e6:	48 89 c7             	mov    %rax,%rdi
ffffffff802182e9:	e8 be ab ff ff       	call   ffffffff80212eac <_RME_Run_Notif>
ffffffff802182ee:	eb 18                	jmp    ffffffff80218308 <_RME_Thd_Swt+0x3c5>
            RME_COV_MARKER();
            
            /* This operation is just to make sure that if there are any other
             * thread at the same priority level, we're not switching to ourself */
            RME_ASSERT(Thd_Cur->Sched.State==RME_THD_READY);
            _RME_Run_Del(Thd_Cur);
ffffffff802182f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802182f4:	48 89 c7             	mov    %rax,%rdi
ffffffff802182f7:	e8 6d aa ff ff       	call   ffffffff80212d69 <_RME_Run_Del>
            _RME_Run_Ins(Thd_Cur);
ffffffff802182fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218300:	48 89 c7             	mov    %rax,%rdi
ffffffff80218303:	e8 b5 a9 ff ff       	call   ffffffff80212cbd <_RME_Run_Ins>
        }
        
        Thd_New=_RME_Run_High(Local);
ffffffff80218308:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021830c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021830f:	e8 1a ab ff ff       	call   ffffffff80212e2e <_RME_Run_High>
ffffffff80218314:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Now that we are successful, save the return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80218318:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021831c:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80218321:	48 89 c7             	mov    %rax,%rdi
ffffffff80218324:	e8 a2 eb 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>

    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
    /* We cannot call _RME_Kern_High because it picks some random thread. Instead,
     * we use a manual implementation that is faster than the _RME_Kern_High. */
    if(Thd_Cur==Thd_New)
ffffffff80218329:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021832d:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218331:	75 07                	jne    ffffffff8021833a <_RME_Thd_Swt+0x3f7>
    {
        RME_COV_MARKER();
        
        return 0;
ffffffff80218333:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80218338:	eb 28                	jmp    ffffffff80218362 <_RME_Thd_Swt+0x41f>
        RME_COV_MARKER();
        /* No action required */
    }
            
    /* We have a solid context switch at this point */
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff8021833a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8021833e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80218342:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80218346:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218349:	48 89 c7             	mov    %rax,%rdi
ffffffff8021834c:	e8 2d ac ff ff       	call   ffffffff80212f7e <_RME_Run_Swt>
    Local->Thd_Cur=Thd_New;
ffffffff80218351:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218355:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80218359:	48 89 50 08          	mov    %rdx,0x8(%rax)

    return 0;
ffffffff8021835d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218362:	c9                   	leave
ffffffff80218363:	c3                   	ret

ffffffff80218364 <_RME_Sig_Boot_Crt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Sig_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Sig)
{
ffffffff80218364:	55                   	push   %rbp
ffffffff80218365:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218368:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8021836c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80218370:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80218374:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Crt;
    struct RME_Cap_Sig* Sig_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80218378:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021837c:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218381:	48 85 c0             	test   %rax,%rax
ffffffff80218384:	0f 85 98 00 00 00    	jne    ffffffff80218422 <_RME_Sig_Boot_Crt+0xbe>
ffffffff8021838a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021838e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218392:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80218396:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218399:	0f 93 c0             	setae  %al
ffffffff8021839c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021839f:	48 85 c0             	test   %rax,%rax
ffffffff802183a2:	74 0c                	je     ffffffff802183b0 <_RME_Sig_Boot_Crt+0x4c>
ffffffff802183a4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802183ab:	e9 ad 02 00 00       	jmp    ffffffff8021865d <_RME_Sig_Boot_Crt+0x2f9>
ffffffff802183b0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802183b4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802183b8:	48 89 c2             	mov    %rax,%rdx
ffffffff802183bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802183bf:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802183c3:	48 01 d0             	add    %rdx,%rax
ffffffff802183c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802183ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802183ce:	48 8b 00             	mov    (%rax),%rax
ffffffff802183d1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802183d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802183d9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802183dd:	0f b7 c0             	movzwl %ax,%eax
ffffffff802183e0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802183e4:	0f 94 c0             	sete   %al
ffffffff802183e7:	0f b6 c0             	movzbl %al,%eax
ffffffff802183ea:	48 85 c0             	test   %rax,%rax
ffffffff802183ed:	74 0c                	je     ffffffff802183fb <_RME_Sig_Boot_Crt+0x97>
ffffffff802183ef:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802183f6:	e9 62 02 00 00       	jmp    ffffffff8021865d <_RME_Sig_Boot_Crt+0x2f9>
ffffffff802183fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802183ff:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218403:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218407:	0f 95 c0             	setne  %al
ffffffff8021840a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021840d:	48 85 c0             	test   %rax,%rax
ffffffff80218410:	0f 84 4c 01 00 00    	je     ffffffff80218562 <_RME_Sig_Boot_Crt+0x1fe>
ffffffff80218416:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021841d:	e9 3b 02 00 00       	jmp    ffffffff8021865d <_RME_Sig_Boot_Crt+0x2f9>
ffffffff80218422:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218426:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021842a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021842d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218431:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218435:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218438:	0f 93 c0             	setae  %al
ffffffff8021843b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021843e:	48 85 c0             	test   %rax,%rax
ffffffff80218441:	74 0c                	je     ffffffff8021844f <_RME_Sig_Boot_Crt+0xeb>
ffffffff80218443:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021844a:	e9 0e 02 00 00       	jmp    ffffffff8021865d <_RME_Sig_Boot_Crt+0x2f9>
ffffffff8021844f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218453:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218457:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021845b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021845e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218462:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218466:	48 01 d0             	add    %rdx,%rax
ffffffff80218469:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021846d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218471:	48 8b 00             	mov    (%rax),%rax
ffffffff80218474:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218478:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021847c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218480:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218483:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218487:	0f 94 c0             	sete   %al
ffffffff8021848a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021848d:	48 85 c0             	test   %rax,%rax
ffffffff80218490:	74 0c                	je     ffffffff8021849e <_RME_Sig_Boot_Crt+0x13a>
ffffffff80218492:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218499:	e9 bf 01 00 00       	jmp    ffffffff8021865d <_RME_Sig_Boot_Crt+0x2f9>
ffffffff8021849e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802184a2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802184a6:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802184aa:	0f 95 c0             	setne  %al
ffffffff802184ad:	0f b6 c0             	movzbl %al,%eax
ffffffff802184b0:	48 85 c0             	test   %rax,%rax
ffffffff802184b3:	74 0c                	je     ffffffff802184c1 <_RME_Sig_Boot_Crt+0x15d>
ffffffff802184b5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802184bc:	e9 9c 01 00 00       	jmp    ffffffff8021865d <_RME_Sig_Boot_Crt+0x2f9>
ffffffff802184c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802184c5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802184ca:	48 89 c2             	mov    %rax,%rdx
ffffffff802184cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802184d1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802184d5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802184d8:	0f 93 c0             	setae  %al
ffffffff802184db:	0f b6 c0             	movzbl %al,%eax
ffffffff802184de:	48 85 c0             	test   %rax,%rax
ffffffff802184e1:	74 0c                	je     ffffffff802184ef <_RME_Sig_Boot_Crt+0x18b>
ffffffff802184e3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802184ea:	e9 6e 01 00 00       	jmp    ffffffff8021865d <_RME_Sig_Boot_Crt+0x2f9>
ffffffff802184ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802184f3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802184f8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802184fc:	48 89 c2             	mov    %rax,%rdx
ffffffff802184ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218503:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218507:	48 01 d0             	add    %rdx,%rax
ffffffff8021850a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021850e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218512:	48 8b 00             	mov    (%rax),%rax
ffffffff80218515:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218519:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021851d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218521:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218524:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218528:	0f 94 c0             	sete   %al
ffffffff8021852b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021852e:	48 85 c0             	test   %rax,%rax
ffffffff80218531:	74 0c                	je     ffffffff8021853f <_RME_Sig_Boot_Crt+0x1db>
ffffffff80218533:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021853a:	e9 1e 01 00 00       	jmp    ffffffff8021865d <_RME_Sig_Boot_Crt+0x2f9>
ffffffff8021853f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218543:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218547:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021854b:	0f 95 c0             	setne  %al
ffffffff8021854e:	0f b6 c0             	movzbl %al,%eax
ffffffff80218551:	48 85 c0             	test   %rax,%rax
ffffffff80218554:	74 0c                	je     ffffffff80218562 <_RME_Sig_Boot_Crt+0x1fe>
ffffffff80218556:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021855d:	e9 fb 00 00 00       	jmp    ffffffff8021865d <_RME_Sig_Boot_Crt+0x2f9>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80218562:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218566:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021856a:	83 e0 01             	and    $0x1,%eax
ffffffff8021856d:	48 85 c0             	test   %rax,%rax
ffffffff80218570:	0f 94 c0             	sete   %al
ffffffff80218573:	0f b6 c0             	movzbl %al,%eax
ffffffff80218576:	48 85 c0             	test   %rax,%rax
ffffffff80218579:	74 0c                	je     ffffffff80218587 <_RME_Sig_Boot_Crt+0x223>
ffffffff8021857b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218582:	e9 d6 00 00 00       	jmp    ffffffff8021865d <_RME_Sig_Boot_Crt+0x2f9>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80218587:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021858b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021858f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80218593:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218596:	0f 93 c0             	setae  %al
ffffffff80218599:	0f b6 c0             	movzbl %al,%eax
ffffffff8021859c:	48 85 c0             	test   %rax,%rax
ffffffff8021859f:	74 0c                	je     ffffffff802185ad <_RME_Sig_Boot_Crt+0x249>
ffffffff802185a1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802185a8:	e9 b0 00 00 00       	jmp    ffffffff8021865d <_RME_Sig_Boot_Crt+0x2f9>
ffffffff802185ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802185b1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802185b5:	48 89 c2             	mov    %rax,%rdx
ffffffff802185b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802185bc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802185c0:	48 01 d0             	add    %rdx,%rax
ffffffff802185c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff802185c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802185cb:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802185d2:	00 00 00 
ffffffff802185d5:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802185da:	48 89 c7             	mov    %rax,%rdi
ffffffff802185dd:	e8 7c 41 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802185e2:	48 85 c0             	test   %rax,%rax
ffffffff802185e5:	0f 94 c0             	sete   %al
ffffffff802185e8:	0f b6 c0             	movzbl %al,%eax
ffffffff802185eb:	48 85 c0             	test   %rax,%rax
ffffffff802185ee:	74 09                	je     ffffffff802185f9 <_RME_Sig_Boot_Crt+0x295>
ffffffff802185f0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff802185f7:	eb 64                	jmp    ffffffff8021865d <_RME_Sig_Boot_Crt+0x2f9>
ffffffff802185f9:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802185fe:	e8 0e 42 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80218603:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80218607:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Header init */
    Sig_Crt->Head.Root_Ref=1U;
ffffffff8021860b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021860f:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff80218616:	00 
    Sig_Crt->Head.Object=0U;
ffffffff80218617:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021861b:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80218622:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff80218623:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218627:	48 c7 40 10 3f 00 00 	movq   $0x3f,0x10(%rax)
ffffffff8021862e:	00 
    
    /* Info init */
    Sig_Crt->Sig_Num=0U;
ffffffff8021862f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218633:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
ffffffff8021863a:	00 
    Sig_Crt->Thd=RME_NULL;
ffffffff8021863b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021863f:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218646:	00 

    /* Establish cap */
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80218647:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021864b:	48 b9 00 00 00 00 00 	movabs $0x8000000000000,%rcx
ffffffff80218652:	00 08 00 
ffffffff80218655:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_SIG,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80218658:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021865d:	c9                   	leave
ffffffff8021865e:	c3                   	ret

ffffffff8021865f <_RME_Sig_Crt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Crt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Sig)
{
ffffffff8021865f:	55                   	push   %rbp
ffffffff80218660:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218663:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218667:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021866b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021866f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Sig* Sig_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80218673:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218677:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021867c:	48 85 c0             	test   %rax,%rax
ffffffff8021867f:	0f 85 98 00 00 00    	jne    ffffffff8021871d <_RME_Sig_Crt+0xbe>
ffffffff80218685:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218689:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021868d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80218691:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218694:	0f 93 c0             	setae  %al
ffffffff80218697:	0f b6 c0             	movzbl %al,%eax
ffffffff8021869a:	48 85 c0             	test   %rax,%rax
ffffffff8021869d:	74 0c                	je     ffffffff802186ab <_RME_Sig_Crt+0x4c>
ffffffff8021869f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802186a6:	e9 ad 02 00 00       	jmp    ffffffff80218958 <_RME_Sig_Crt+0x2f9>
ffffffff802186ab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802186af:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802186b3:	48 89 c2             	mov    %rax,%rdx
ffffffff802186b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802186ba:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802186be:	48 01 d0             	add    %rdx,%rax
ffffffff802186c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802186c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802186c9:	48 8b 00             	mov    (%rax),%rax
ffffffff802186cc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802186d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802186d4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802186d8:	0f b7 c0             	movzwl %ax,%eax
ffffffff802186db:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802186df:	0f 94 c0             	sete   %al
ffffffff802186e2:	0f b6 c0             	movzbl %al,%eax
ffffffff802186e5:	48 85 c0             	test   %rax,%rax
ffffffff802186e8:	74 0c                	je     ffffffff802186f6 <_RME_Sig_Crt+0x97>
ffffffff802186ea:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802186f1:	e9 62 02 00 00       	jmp    ffffffff80218958 <_RME_Sig_Crt+0x2f9>
ffffffff802186f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802186fa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802186fe:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218702:	0f 95 c0             	setne  %al
ffffffff80218705:	0f b6 c0             	movzbl %al,%eax
ffffffff80218708:	48 85 c0             	test   %rax,%rax
ffffffff8021870b:	0f 84 4c 01 00 00    	je     ffffffff8021885d <_RME_Sig_Crt+0x1fe>
ffffffff80218711:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218718:	e9 3b 02 00 00       	jmp    ffffffff80218958 <_RME_Sig_Crt+0x2f9>
ffffffff8021871d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218721:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218725:	48 89 c2             	mov    %rax,%rdx
ffffffff80218728:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021872c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218730:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218733:	0f 93 c0             	setae  %al
ffffffff80218736:	0f b6 c0             	movzbl %al,%eax
ffffffff80218739:	48 85 c0             	test   %rax,%rax
ffffffff8021873c:	74 0c                	je     ffffffff8021874a <_RME_Sig_Crt+0xeb>
ffffffff8021873e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218745:	e9 0e 02 00 00       	jmp    ffffffff80218958 <_RME_Sig_Crt+0x2f9>
ffffffff8021874a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021874e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218752:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218756:	48 89 c2             	mov    %rax,%rdx
ffffffff80218759:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021875d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218761:	48 01 d0             	add    %rdx,%rax
ffffffff80218764:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218768:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021876c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021876f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218773:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218777:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021877b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021877e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218782:	0f 94 c0             	sete   %al
ffffffff80218785:	0f b6 c0             	movzbl %al,%eax
ffffffff80218788:	48 85 c0             	test   %rax,%rax
ffffffff8021878b:	74 0c                	je     ffffffff80218799 <_RME_Sig_Crt+0x13a>
ffffffff8021878d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218794:	e9 bf 01 00 00       	jmp    ffffffff80218958 <_RME_Sig_Crt+0x2f9>
ffffffff80218799:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021879d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802187a1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802187a5:	0f 95 c0             	setne  %al
ffffffff802187a8:	0f b6 c0             	movzbl %al,%eax
ffffffff802187ab:	48 85 c0             	test   %rax,%rax
ffffffff802187ae:	74 0c                	je     ffffffff802187bc <_RME_Sig_Crt+0x15d>
ffffffff802187b0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802187b7:	e9 9c 01 00 00       	jmp    ffffffff80218958 <_RME_Sig_Crt+0x2f9>
ffffffff802187bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802187c0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802187c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802187c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802187cc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802187d0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802187d3:	0f 93 c0             	setae  %al
ffffffff802187d6:	0f b6 c0             	movzbl %al,%eax
ffffffff802187d9:	48 85 c0             	test   %rax,%rax
ffffffff802187dc:	74 0c                	je     ffffffff802187ea <_RME_Sig_Crt+0x18b>
ffffffff802187de:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802187e5:	e9 6e 01 00 00       	jmp    ffffffff80218958 <_RME_Sig_Crt+0x2f9>
ffffffff802187ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802187ee:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802187f3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802187f7:	48 89 c2             	mov    %rax,%rdx
ffffffff802187fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802187fe:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218802:	48 01 d0             	add    %rdx,%rax
ffffffff80218805:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218809:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021880d:	48 8b 00             	mov    (%rax),%rax
ffffffff80218810:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218814:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218818:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021881c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021881f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218823:	0f 94 c0             	sete   %al
ffffffff80218826:	0f b6 c0             	movzbl %al,%eax
ffffffff80218829:	48 85 c0             	test   %rax,%rax
ffffffff8021882c:	74 0c                	je     ffffffff8021883a <_RME_Sig_Crt+0x1db>
ffffffff8021882e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218835:	e9 1e 01 00 00       	jmp    ffffffff80218958 <_RME_Sig_Crt+0x2f9>
ffffffff8021883a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021883e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218842:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218846:	0f 95 c0             	setne  %al
ffffffff80218849:	0f b6 c0             	movzbl %al,%eax
ffffffff8021884c:	48 85 c0             	test   %rax,%rax
ffffffff8021884f:	74 0c                	je     ffffffff8021885d <_RME_Sig_Crt+0x1fe>
ffffffff80218851:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218858:	e9 fb 00 00 00       	jmp    ffffffff80218958 <_RME_Sig_Crt+0x2f9>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8021885d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218861:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218865:	83 e0 01             	and    $0x1,%eax
ffffffff80218868:	48 85 c0             	test   %rax,%rax
ffffffff8021886b:	0f 94 c0             	sete   %al
ffffffff8021886e:	0f b6 c0             	movzbl %al,%eax
ffffffff80218871:	48 85 c0             	test   %rax,%rax
ffffffff80218874:	74 0c                	je     ffffffff80218882 <_RME_Sig_Crt+0x223>
ffffffff80218876:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021887d:	e9 d6 00 00 00       	jmp    ffffffff80218958 <_RME_Sig_Crt+0x2f9>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80218882:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218886:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021888a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021888e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218891:	0f 93 c0             	setae  %al
ffffffff80218894:	0f b6 c0             	movzbl %al,%eax
ffffffff80218897:	48 85 c0             	test   %rax,%rax
ffffffff8021889a:	74 0c                	je     ffffffff802188a8 <_RME_Sig_Crt+0x249>
ffffffff8021889c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802188a3:	e9 b0 00 00 00       	jmp    ffffffff80218958 <_RME_Sig_Crt+0x2f9>
ffffffff802188a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802188ac:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802188b0:	48 89 c2             	mov    %rax,%rdx
ffffffff802188b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802188b7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802188bb:	48 01 d0             	add    %rdx,%rax
ffffffff802188be:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff802188c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802188c6:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802188cd:	00 00 00 
ffffffff802188d0:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802188d5:	48 89 c7             	mov    %rax,%rdi
ffffffff802188d8:	e8 81 3e ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802188dd:	48 85 c0             	test   %rax,%rax
ffffffff802188e0:	0f 94 c0             	sete   %al
ffffffff802188e3:	0f b6 c0             	movzbl %al,%eax
ffffffff802188e6:	48 85 c0             	test   %rax,%rax
ffffffff802188e9:	74 09                	je     ffffffff802188f4 <_RME_Sig_Crt+0x295>
ffffffff802188eb:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff802188f2:	eb 64                	jmp    ffffffff80218958 <_RME_Sig_Crt+0x2f9>
ffffffff802188f4:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802188f9:	e8 13 3f ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff802188fe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80218902:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Header init */
    Sig_Crt->Head.Root_Ref=0U;
ffffffff80218906:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021890a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80218911:	00 
    Sig_Crt->Head.Object=0U;
ffffffff80218912:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218916:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021891d:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff8021891e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218922:	48 c7 40 10 3f 00 00 	movq   $0x3f,0x10(%rax)
ffffffff80218929:	00 
    
    /* Info init */
    Sig_Crt->Sig_Num=0U;
ffffffff8021892a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021892e:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
ffffffff80218935:	00 
    Sig_Crt->Thd=0U;
ffffffff80218936:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021893a:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218941:	00 
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80218942:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218946:	48 b9 00 00 00 00 00 	movabs $0x8000000000000,%rcx
ffffffff8021894d:	00 08 00 
ffffffff80218950:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_SIG,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80218953:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218958:	c9                   	leave
ffffffff80218959:	c3                   	ret

ffffffff8021895a <_RME_Sig_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Sig)
{
ffffffff8021895a:	55                   	push   %rbp
ffffffff8021895b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021895e:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218962:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80218966:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021896a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Sig* Sig_Del;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021896e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218972:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218977:	48 85 c0             	test   %rax,%rax
ffffffff8021897a:	0f 85 98 00 00 00    	jne    ffffffff80218a18 <_RME_Sig_Del+0xbe>
ffffffff80218980:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218984:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218988:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021898c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021898f:	0f 93 c0             	setae  %al
ffffffff80218992:	0f b6 c0             	movzbl %al,%eax
ffffffff80218995:	48 85 c0             	test   %rax,%rax
ffffffff80218998:	74 0c                	je     ffffffff802189a6 <_RME_Sig_Del+0x4c>
ffffffff8021899a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802189a1:	e9 65 03 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
ffffffff802189a6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802189aa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802189ae:	48 89 c2             	mov    %rax,%rdx
ffffffff802189b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802189b5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802189b9:	48 01 d0             	add    %rdx,%rax
ffffffff802189bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802189c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802189c4:	48 8b 00             	mov    (%rax),%rax
ffffffff802189c7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802189cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802189cf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802189d3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802189d6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802189da:	0f 94 c0             	sete   %al
ffffffff802189dd:	0f b6 c0             	movzbl %al,%eax
ffffffff802189e0:	48 85 c0             	test   %rax,%rax
ffffffff802189e3:	74 0c                	je     ffffffff802189f1 <_RME_Sig_Del+0x97>
ffffffff802189e5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802189ec:	e9 1a 03 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
ffffffff802189f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802189f5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802189f9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802189fd:	0f 95 c0             	setne  %al
ffffffff80218a00:	0f b6 c0             	movzbl %al,%eax
ffffffff80218a03:	48 85 c0             	test   %rax,%rax
ffffffff80218a06:	0f 84 4c 01 00 00    	je     ffffffff80218b58 <_RME_Sig_Del+0x1fe>
ffffffff80218a0c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218a13:	e9 f3 02 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
ffffffff80218a18:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218a1c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218a20:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a23:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218a27:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218a2b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218a2e:	0f 93 c0             	setae  %al
ffffffff80218a31:	0f b6 c0             	movzbl %al,%eax
ffffffff80218a34:	48 85 c0             	test   %rax,%rax
ffffffff80218a37:	74 0c                	je     ffffffff80218a45 <_RME_Sig_Del+0xeb>
ffffffff80218a39:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218a40:	e9 c6 02 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
ffffffff80218a45:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218a49:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218a4d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218a51:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218a58:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218a5c:	48 01 d0             	add    %rdx,%rax
ffffffff80218a5f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218a63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218a67:	48 8b 00             	mov    (%rax),%rax
ffffffff80218a6a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218a6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218a72:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218a76:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218a79:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218a7d:	0f 94 c0             	sete   %al
ffffffff80218a80:	0f b6 c0             	movzbl %al,%eax
ffffffff80218a83:	48 85 c0             	test   %rax,%rax
ffffffff80218a86:	74 0c                	je     ffffffff80218a94 <_RME_Sig_Del+0x13a>
ffffffff80218a88:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218a8f:	e9 77 02 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
ffffffff80218a94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218a98:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218a9c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218aa0:	0f 95 c0             	setne  %al
ffffffff80218aa3:	0f b6 c0             	movzbl %al,%eax
ffffffff80218aa6:	48 85 c0             	test   %rax,%rax
ffffffff80218aa9:	74 0c                	je     ffffffff80218ab7 <_RME_Sig_Del+0x15d>
ffffffff80218aab:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218ab2:	e9 54 02 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
ffffffff80218ab7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218abb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218ac0:	48 89 c2             	mov    %rax,%rdx
ffffffff80218ac3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218ac7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218acb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218ace:	0f 93 c0             	setae  %al
ffffffff80218ad1:	0f b6 c0             	movzbl %al,%eax
ffffffff80218ad4:	48 85 c0             	test   %rax,%rax
ffffffff80218ad7:	74 0c                	je     ffffffff80218ae5 <_RME_Sig_Del+0x18b>
ffffffff80218ad9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218ae0:	e9 26 02 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
ffffffff80218ae5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218ae9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218aee:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218af2:	48 89 c2             	mov    %rax,%rdx
ffffffff80218af5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218af9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218afd:	48 01 d0             	add    %rdx,%rax
ffffffff80218b00:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218b08:	48 8b 00             	mov    (%rax),%rax
ffffffff80218b0b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218b0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218b13:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218b17:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218b1a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218b1e:	0f 94 c0             	sete   %al
ffffffff80218b21:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b24:	48 85 c0             	test   %rax,%rax
ffffffff80218b27:	74 0c                	je     ffffffff80218b35 <_RME_Sig_Del+0x1db>
ffffffff80218b29:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218b30:	e9 d6 01 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
ffffffff80218b35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218b39:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218b3d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218b41:	0f 95 c0             	setne  %al
ffffffff80218b44:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b47:	48 85 c0             	test   %rax,%rax
ffffffff80218b4a:	74 0c                	je     ffffffff80218b58 <_RME_Sig_Del+0x1fe>
ffffffff80218b4c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218b53:	e9 b3 01 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80218b58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218b5c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218b60:	83 e0 02             	and    $0x2,%eax
ffffffff80218b63:	48 85 c0             	test   %rax,%rax
ffffffff80218b66:	0f 94 c0             	sete   %al
ffffffff80218b69:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b6c:	48 85 c0             	test   %rax,%rax
ffffffff80218b6f:	74 0c                	je     ffffffff80218b7d <_RME_Sig_Del+0x223>
ffffffff80218b71:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218b78:	e9 8e 01 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff80218b7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218b81:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218b85:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80218b89:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218b8c:	0f 93 c0             	setae  %al
ffffffff80218b8f:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b92:	48 85 c0             	test   %rax,%rax
ffffffff80218b95:	74 0c                	je     ffffffff80218ba3 <_RME_Sig_Del+0x249>
ffffffff80218b97:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218b9e:	e9 68 01 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
ffffffff80218ba3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218ba7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218bab:	48 89 c2             	mov    %rax,%rdx
ffffffff80218bae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218bb2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218bb6:	48 01 d0             	add    %rdx,%rax
ffffffff80218bb9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80218bbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218bc1:	48 8b 00             	mov    (%rax),%rax
ffffffff80218bc4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218bc8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218bcc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218bd0:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218bd3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218bd7:	0f 95 c0             	setne  %al
ffffffff80218bda:	0f b6 c0             	movzbl %al,%eax
ffffffff80218bdd:	48 85 c0             	test   %rax,%rax
ffffffff80218be0:	74 0c                	je     ffffffff80218bee <_RME_Sig_Del+0x294>
ffffffff80218be2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218be9:	e9 1d 01 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
ffffffff80218bee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218bf2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218bf6:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80218bfa:	0f 95 c0             	setne  %al
ffffffff80218bfd:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c00:	48 85 c0             	test   %rax,%rax
ffffffff80218c03:	74 0c                	je     ffffffff80218c11 <_RME_Sig_Del+0x2b7>
ffffffff80218c05:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218c0c:	e9 fa 00 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
ffffffff80218c11:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80218c16:	e8 f6 3b ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80218c1b:	48 89 c2             	mov    %rax,%rdx
ffffffff80218c1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218c22:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80218c26:	48 29 c2             	sub    %rax,%rdx
ffffffff80218c29:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80218c2d:	0f 96 c0             	setbe  %al
ffffffff80218c30:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c33:	48 98                	cltq
ffffffff80218c35:	48 85 c0             	test   %rax,%rax
ffffffff80218c38:	74 0c                	je     ffffffff80218c46 <_RME_Sig_Del+0x2ec>
ffffffff80218c3a:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80218c41:	e9 c5 00 00 00       	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
ffffffff80218c46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218c4a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218c4e:	48 85 c0             	test   %rax,%rax
ffffffff80218c51:	0f 95 c0             	setne  %al
ffffffff80218c54:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c57:	48 85 c0             	test   %rax,%rax
ffffffff80218c5a:	74 41                	je     ffffffff80218c9d <_RME_Sig_Del+0x343>
ffffffff80218c5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218c60:	89 c0                	mov    %eax,%eax
ffffffff80218c62:	48 85 c0             	test   %rax,%rax
ffffffff80218c65:	0f 94 c0             	sete   %al
ffffffff80218c68:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c6b:	48 85 c0             	test   %rax,%rax
ffffffff80218c6e:	74 24                	je     ffffffff80218c94 <_RME_Sig_Del+0x33a>
ffffffff80218c70:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80218c77:	00 ff ff 
ffffffff80218c7a:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80218c7e:	48 89 c2             	mov    %rax,%rdx
ffffffff80218c81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218c85:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218c89:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218c8c:	48 89 c7             	mov    %rax,%rdi
ffffffff80218c8f:	e8 ca 3a ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80218c94:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80218c9b:	eb 6e                	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>

    /* Check if the signal endpoint is currently used and cannot be deleted */
    if(Sig_Del->Thd!=(void*)0U)
ffffffff80218c9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218ca1:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218ca5:	48 85 c0             	test   %rax,%rax
ffffffff80218ca8:	74 2d                	je     ffffffff80218cd7 <_RME_Sig_Del+0x37d>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Sig_Del,Type_Stat);
ffffffff80218caa:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80218cb1:	00 ff ff 
ffffffff80218cb4:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80218cb8:	48 89 c2             	mov    %rax,%rdx
ffffffff80218cbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218cbf:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218cc3:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218cc6:	48 89 c7             	mov    %rax,%rdi
ffffffff80218cc9:	e8 90 3a ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_SIV_ACT;
ffffffff80218cce:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff80218cd5:	eb 34                	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Sig_Del,Type_Stat);
ffffffff80218cd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218cdb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218cdf:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80218ce4:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218ce7:	48 89 c7             	mov    %rax,%rdi
ffffffff80218cea:	e8 6f 3a ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80218cef:	48 85 c0             	test   %rax,%rax
ffffffff80218cf2:	0f 94 c0             	sete   %al
ffffffff80218cf5:	0f b6 c0             	movzbl %al,%eax
ffffffff80218cf8:	48 85 c0             	test   %rax,%rax
ffffffff80218cfb:	74 09                	je     ffffffff80218d06 <_RME_Sig_Del+0x3ac>
ffffffff80218cfd:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80218d04:	eb 05                	jmp    ffffffff80218d0b <_RME_Sig_Del+0x3b1>
    
    return 0;
ffffffff80218d06:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218d0b:	c9                   	leave
ffffffff80218d0c:	c3                   	ret

ffffffff80218d0d <_RME_Kern_High>:
Output      : volatile struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Kern_High(struct RME_Reg_Struct* Reg,
                    struct RME_CPU_Local* Local)
{
ffffffff80218d0d:	55                   	push   %rbp
ffffffff80218d0e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218d11:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80218d15:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80218d19:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct RME_Thd_Struct* Thd_New;
    struct RME_Thd_Struct* Thd_Cur;

    Thd_New=_RME_Run_High(Local);
ffffffff80218d1d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218d21:	48 89 c7             	mov    %rax,%rdi
ffffffff80218d24:	e8 05 a1 ff ff       	call   ffffffff80212e2e <_RME_Run_High>
ffffffff80218d29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_ASSERT(Thd_New!=(void*)RME_NULL);
    Thd_Cur=Local->Thd_Cur;
ffffffff80218d2d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218d31:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218d35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Are these two threads the same? */
    if(Thd_New==Thd_Cur)
ffffffff80218d39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218d3d:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218d41:	74 47                	je     ffffffff80218d8a <_RME_Kern_High+0x7d>
        /* No action required */
    }

    /* Check if we need to do the context switch regardless of priority
     * because the current thread is not ready yet. */
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff80218d43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218d47:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80218d4b:	48 85 c0             	test   %rax,%rax
ffffffff80218d4e:	75 15                	jne    ffffffff80218d65 <_RME_Kern_High+0x58>
    {
        RME_COV_MARKER();

        /* Check priority to see if the switch is necessary */
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff80218d50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218d54:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80218d58:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80218d5c:	48 8b 52 40          	mov    0x40(%rdx),%rdx
ffffffff80218d60:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218d63:	73 28                	jae    ffffffff80218d8d <_RME_Kern_High+0x80>
    }

    /* We will have a solid context switch on this point. The current 
     * thread is not necessarily READY, it could be EXCPEND as well. */
    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff80218d65:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80218d69:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218d6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218d71:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218d74:	48 89 c7             	mov    %rax,%rdi
ffffffff80218d77:	e8 02 a2 ff ff       	call   ffffffff80212f7e <_RME_Run_Swt>
    Local->Thd_Cur=Thd_New;
ffffffff80218d7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218d80:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80218d84:	48 89 50 08          	mov    %rdx,0x8(%rax)
ffffffff80218d88:	eb 04                	jmp    ffffffff80218d8e <_RME_Kern_High+0x81>
        return;
ffffffff80218d8a:	90                   	nop
ffffffff80218d8b:	eb 01                	jmp    ffffffff80218d8e <_RME_Kern_High+0x81>
            return;
ffffffff80218d8d:	90                   	nop
}
ffffffff80218d8e:	c9                   	leave
ffffffff80218d8f:	c3                   	ret

ffffffff80218d90 <_RME_Kern_Snd>:
Input       : struct RME_Cap_Sig* Cap_Sig - The signal root capability.
Output      : None.
Return      : rme_ret_t - If successful, 0, or an error code.
******************************************************************************/
rme_ret_t _RME_Kern_Snd(struct RME_Cap_Sig* Cap_Sig)
{
ffffffff80218d90:	55                   	push   %rbp
ffffffff80218d91:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218d94:	53                   	push   %rbx
ffffffff80218d95:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80218d99:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    rme_ptr_t Unblock;
    struct RME_Thd_Struct* Thd_Sig;
    
    Thd_Sig=Cap_Sig->Thd;
ffffffff80218d9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218da1:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218da5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* If and only if we are calling from the same core do we unblock */
    if(Thd_Sig!=(void*)RME_NULL)
ffffffff80218da9:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80218dae:	74 26                	je     ffffffff80218dd6 <_RME_Kern_Snd+0x46>
    {
        RME_COV_MARKER();

        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff80218db0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218db4:	48 8b 58 28          	mov    0x28(%rax),%rbx
ffffffff80218db8:	e8 82 2a ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80218dbd:	48 39 c3             	cmp    %rax,%rbx
ffffffff80218dc0:	75 0a                	jne    ffffffff80218dcc <_RME_Kern_Snd+0x3c>
        {
            RME_COV_MARKER();

            Unblock=1U;
ffffffff80218dc2:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
ffffffff80218dc9:	00 
ffffffff80218dca:	eb 12                	jmp    ffffffff80218dde <_RME_Kern_Snd+0x4e>
        }
        else
        {
            RME_COV_MARKER();

            Unblock=0U;
ffffffff80218dcc:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80218dd3:	00 
ffffffff80218dd4:	eb 08                	jmp    ffffffff80218dde <_RME_Kern_Snd+0x4e>
    }
    else
    {
        RME_COV_MARKER();

        Unblock=0U;
ffffffff80218dd6:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80218ddd:	00 
    }

    if(Unblock!=0U)
ffffffff80218dde:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80218de3:	74 65                	je     ffffffff80218e4a <_RME_Kern_Snd+0xba>

        /* The thread is blocked, and it is on our core. Unblock it, and
         * set the return value to one as always, Even if we were specifying
         * multi-receive. This is because other cores may reduce the count
         * to zero while we are doing this. */
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff80218de5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218de9:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80218df0:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80218df5:	48 89 c7             	mov    %rax,%rdi
ffffffff80218df8:	e8 ce e0 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
        
        /* See if the thread still have time left */
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff80218dfd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218e01:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218e05:	48 85 c0             	test   %rax,%rax
ffffffff80218e08:	74 1a                	je     ffffffff80218e24 <_RME_Kern_Snd+0x94>
        {
            RME_COV_MARKER();

            /* Ready and add to runqueue */
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff80218e0a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218e0e:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80218e15:	00 
            _RME_Run_Ins(Thd_Sig);
ffffffff80218e16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218e1a:	48 89 c7             	mov    %rax,%rdi
ffffffff80218e1d:	e8 9b 9e ff ff       	call   ffffffff80212cbd <_RME_Run_Ins>
ffffffff80218e22:	eb 18                	jmp    ffffffff80218e3c <_RME_Kern_Snd+0xac>
        else
        {
            RME_COV_MARKER();

            /* Timeout and notify parent */
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff80218e24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218e28:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80218e2f:	00 
            _RME_Run_Notif(Thd_Sig);
ffffffff80218e30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218e34:	48 89 c7             	mov    %rax,%rdi
ffffffff80218e37:	e8 70 a0 ff ff       	call   ffffffff80212eac <_RME_Run_Notif>
         * we hope to perform the context switch only once when exiting that
         * handler. Also note that the current thread could be EXCPEND as well;
         * this is different from the normal signal sending system call. */
        
        /* Clear endpoint blocking status - no write release required */
        Cap_Sig->Thd=RME_NULL;
ffffffff80218e3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218e40:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218e47:	00 
ffffffff80218e48:	eb 44                	jmp    ffffffff80218e8e <_RME_Kern_Snd+0xfe>
    {
        RME_COV_MARKER();

        /* The guy who blocked on it is not on our core, or nobody blocked.
         * We just faa the counter value and return. */
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80218e4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218e4e:	48 83 c0 28          	add    $0x28,%rax
ffffffff80218e52:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80218e57:	48 89 c7             	mov    %rax,%rdi
ffffffff80218e5a:	e8 34 39 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff80218e5f:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80218e66:	ff ff 7f 
ffffffff80218e69:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218e6c:	73 20                	jae    ffffffff80218e8e <_RME_Kern_Snd+0xfe>
        {
            RME_COV_MARKER();

            RME_FETCH_ADD(&(Cap_Sig->Sig_Num),-1);
ffffffff80218e6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218e72:	48 83 c0 28          	add    $0x28,%rax
ffffffff80218e76:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80218e7d:	48 89 c7             	mov    %rax,%rdi
ffffffff80218e80:	e8 0e 39 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
            return RME_ERR_SIV_FULL;
ffffffff80218e85:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff80218e8c:	eb 05                	jmp    ffffffff80218e93 <_RME_Kern_Snd+0x103>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff80218e8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218e93:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff80218e97:	c9                   	leave
ffffffff80218e98:	c3                   	ret

ffffffff80218e99 <_RME_Sig_Snd>:
Return      : rme_ret_t - If successful, 0, or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Snd(struct RME_Cap_Cpt* Cpt, 
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Sig)
{
ffffffff80218e99:	55                   	push   %rbp
ffffffff80218e9a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218e9d:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80218ea1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80218ea5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80218ea9:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    struct RME_CPU_Local* Local;
    rme_ptr_t Unblock;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80218ead:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218eb1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218eb6:	48 85 c0             	test   %rax,%rax
ffffffff80218eb9:	0f 85 98 00 00 00    	jne    ffffffff80218f57 <_RME_Sig_Snd+0xbe>
ffffffff80218ebf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218ec3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218ec7:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80218ecb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218ece:	0f 93 c0             	setae  %al
ffffffff80218ed1:	0f b6 c0             	movzbl %al,%eax
ffffffff80218ed4:	48 85 c0             	test   %rax,%rax
ffffffff80218ed7:	74 0c                	je     ffffffff80218ee5 <_RME_Sig_Snd+0x4c>
ffffffff80218ed9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218ee0:	e9 2b 03 00 00       	jmp    ffffffff80219210 <_RME_Sig_Snd+0x377>
ffffffff80218ee5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218ee9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218eed:	48 89 c2             	mov    %rax,%rdx
ffffffff80218ef0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218ef4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218ef8:	48 01 d0             	add    %rdx,%rax
ffffffff80218efb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218eff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218f03:	48 8b 00             	mov    (%rax),%rax
ffffffff80218f06:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80218f0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218f0e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218f12:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218f15:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218f19:	0f 94 c0             	sete   %al
ffffffff80218f1c:	0f b6 c0             	movzbl %al,%eax
ffffffff80218f1f:	48 85 c0             	test   %rax,%rax
ffffffff80218f22:	74 0c                	je     ffffffff80218f30 <_RME_Sig_Snd+0x97>
ffffffff80218f24:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218f2b:	e9 e0 02 00 00       	jmp    ffffffff80219210 <_RME_Sig_Snd+0x377>
ffffffff80218f30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218f34:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218f38:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80218f3c:	0f 95 c0             	setne  %al
ffffffff80218f3f:	0f b6 c0             	movzbl %al,%eax
ffffffff80218f42:	48 85 c0             	test   %rax,%rax
ffffffff80218f45:	0f 84 4c 01 00 00    	je     ffffffff80219097 <_RME_Sig_Snd+0x1fe>
ffffffff80218f4b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218f52:	e9 b9 02 00 00       	jmp    ffffffff80219210 <_RME_Sig_Snd+0x377>
ffffffff80218f57:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218f5b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218f5f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218f62:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218f66:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218f6a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218f6d:	0f 93 c0             	setae  %al
ffffffff80218f70:	0f b6 c0             	movzbl %al,%eax
ffffffff80218f73:	48 85 c0             	test   %rax,%rax
ffffffff80218f76:	74 0c                	je     ffffffff80218f84 <_RME_Sig_Snd+0xeb>
ffffffff80218f78:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218f7f:	e9 8c 02 00 00       	jmp    ffffffff80219210 <_RME_Sig_Snd+0x377>
ffffffff80218f84:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218f88:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218f8c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218f90:	48 89 c2             	mov    %rax,%rdx
ffffffff80218f93:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218f97:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218f9b:	48 01 d0             	add    %rdx,%rax
ffffffff80218f9e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218fa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218fa6:	48 8b 00             	mov    (%rax),%rax
ffffffff80218fa9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80218fad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218fb1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218fb5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218fb8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218fbc:	0f 94 c0             	sete   %al
ffffffff80218fbf:	0f b6 c0             	movzbl %al,%eax
ffffffff80218fc2:	48 85 c0             	test   %rax,%rax
ffffffff80218fc5:	74 0c                	je     ffffffff80218fd3 <_RME_Sig_Snd+0x13a>
ffffffff80218fc7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218fce:	e9 3d 02 00 00       	jmp    ffffffff80219210 <_RME_Sig_Snd+0x377>
ffffffff80218fd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218fd7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218fdb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218fdf:	0f 95 c0             	setne  %al
ffffffff80218fe2:	0f b6 c0             	movzbl %al,%eax
ffffffff80218fe5:	48 85 c0             	test   %rax,%rax
ffffffff80218fe8:	74 0c                	je     ffffffff80218ff6 <_RME_Sig_Snd+0x15d>
ffffffff80218fea:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218ff1:	e9 1a 02 00 00       	jmp    ffffffff80219210 <_RME_Sig_Snd+0x377>
ffffffff80218ff6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218ffa:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218fff:	48 89 c2             	mov    %rax,%rdx
ffffffff80219002:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219006:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021900a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021900d:	0f 93 c0             	setae  %al
ffffffff80219010:	0f b6 c0             	movzbl %al,%eax
ffffffff80219013:	48 85 c0             	test   %rax,%rax
ffffffff80219016:	74 0c                	je     ffffffff80219024 <_RME_Sig_Snd+0x18b>
ffffffff80219018:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021901f:	e9 ec 01 00 00       	jmp    ffffffff80219210 <_RME_Sig_Snd+0x377>
ffffffff80219024:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219028:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021902d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219031:	48 89 c2             	mov    %rax,%rdx
ffffffff80219034:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219038:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021903c:	48 01 d0             	add    %rdx,%rax
ffffffff8021903f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219043:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219047:	48 8b 00             	mov    (%rax),%rax
ffffffff8021904a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021904e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219052:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219056:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219059:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021905d:	0f 94 c0             	sete   %al
ffffffff80219060:	0f b6 c0             	movzbl %al,%eax
ffffffff80219063:	48 85 c0             	test   %rax,%rax
ffffffff80219066:	74 0c                	je     ffffffff80219074 <_RME_Sig_Snd+0x1db>
ffffffff80219068:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021906f:	e9 9c 01 00 00       	jmp    ffffffff80219210 <_RME_Sig_Snd+0x377>
ffffffff80219074:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219078:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021907c:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80219080:	0f 95 c0             	setne  %al
ffffffff80219083:	0f b6 c0             	movzbl %al,%eax
ffffffff80219086:	48 85 c0             	test   %rax,%rax
ffffffff80219089:	74 0c                	je     ffffffff80219097 <_RME_Sig_Snd+0x1fe>
ffffffff8021908b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219092:	e9 79 01 00 00       	jmp    ffffffff80219210 <_RME_Sig_Snd+0x377>
                   struct RME_Cap_Sig*,Sig_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff80219097:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021909b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021909f:	83 e0 01             	and    $0x1,%eax
ffffffff802190a2:	48 85 c0             	test   %rax,%rax
ffffffff802190a5:	0f 94 c0             	sete   %al
ffffffff802190a8:	0f b6 c0             	movzbl %al,%eax
ffffffff802190ab:	48 85 c0             	test   %rax,%rax
ffffffff802190ae:	74 0c                	je     ffffffff802190bc <_RME_Sig_Snd+0x223>
ffffffff802190b0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802190b7:	e9 54 01 00 00       	jmp    ffffffff80219210 <_RME_Sig_Snd+0x377>
    
    Local=RME_CPU_LOCAL();
ffffffff802190bc:	e8 7e 27 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802190c1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802190c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802190c9:	48 8b 00             	mov    (%rax),%rax
ffffffff802190cc:	89 c0                	mov    %eax,%eax
ffffffff802190ce:	48 85 c0             	test   %rax,%rax
ffffffff802190d1:	74 0a                	je     ffffffff802190dd <_RME_Sig_Snd+0x244>
ffffffff802190d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802190d7:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802190db:	eb 04                	jmp    ffffffff802190e1 <_RME_Sig_Snd+0x248>
ffffffff802190dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802190e1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Thd_Rcv=Sig_Root->Thd;
ffffffff802190e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802190e9:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802190ed:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    /* If and only if we are calling from the same core do we unblock */
    if(Thd_Rcv!=(void*)RME_NULL)
ffffffff802190f1:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff802190f6:	74 22                	je     ffffffff8021911a <_RME_Sig_Snd+0x281>
    {
        RME_COV_MARKER();

        if(Thd_Rcv->Sched.Local==Local)
ffffffff802190f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802190fc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219100:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80219104:	75 0a                	jne    ffffffff80219110 <_RME_Sig_Snd+0x277>
        {
            RME_COV_MARKER();

            Unblock=1U;
ffffffff80219106:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff8021910d:	00 
ffffffff8021910e:	eb 12                	jmp    ffffffff80219122 <_RME_Sig_Snd+0x289>
        }
        else
        {
            RME_COV_MARKER();

            Unblock=0U;
ffffffff80219110:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80219117:	00 
ffffffff80219118:	eb 08                	jmp    ffffffff80219122 <_RME_Sig_Snd+0x289>
    }
    else
    {
        RME_COV_MARKER();

        Unblock=0U;
ffffffff8021911a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80219121:	00 
    }
    
    if(Unblock!=0U)
ffffffff80219122:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80219127:	0f 84 89 00 00 00    	je     ffffffff802191b6 <_RME_Sig_Snd+0x31d>
    {
        RME_COV_MARKER();

        /* Now save the system call return value to the caller stack */
        __RME_Svc_Retval_Set(Reg,0);
ffffffff8021912d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80219131:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219136:	48 89 c7             	mov    %rax,%rdi
ffffffff80219139:	e8 8d dd 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
        
        /* The thread is blocked, and it is on our core. Unblock it, and
         * set the return value to one as always, Even if we were specifying
         * multi-receive. This is because other cores may reduce the count
         * to zero while we are doing this. */
        __RME_Svc_Retval_Set(&(Thd_Rcv->Ctx.Reg->Reg),1);
ffffffff8021913e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219142:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80219149:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021914e:	48 89 c7             	mov    %rax,%rdi
ffffffff80219151:	e8 75 dd 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
        
        /* See if the thread still have time left */
        if(Thd_Rcv->Sched.Slice!=0U)
ffffffff80219156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021915a:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021915e:	48 85 c0             	test   %rax,%rax
ffffffff80219161:	74 1a                	je     ffffffff8021917d <_RME_Sig_Snd+0x2e4>
        {
            RME_COV_MARKER();

            /* Ready and add to runqueue */
            Thd_Rcv->Sched.State=RME_THD_READY;
ffffffff80219163:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219167:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff8021916e:	00 
            _RME_Run_Ins(Thd_Rcv);
ffffffff8021916f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219173:	48 89 c7             	mov    %rax,%rdi
ffffffff80219176:	e8 42 9b ff ff       	call   ffffffff80212cbd <_RME_Run_Ins>
ffffffff8021917b:	eb 18                	jmp    ffffffff80219195 <_RME_Sig_Snd+0x2fc>
        else
        {
            RME_COV_MARKER();

            /* Timeout and notify parent */
            Thd_Rcv->Sched.State=RME_THD_TIMEOUT;
ffffffff8021917d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219181:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80219188:	00 
            _RME_Run_Notif(Thd_Rcv);
ffffffff80219189:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021918d:	48 89 c7             	mov    %rax,%rdi
ffffffff80219190:	e8 17 9d ff ff       	call   ffffffff80212eac <_RME_Run_Notif>
        }
        
        /* Pick the highest priority thread to run */
        _RME_Kern_High(Reg,Local);
ffffffff80219195:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80219199:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021919d:	48 89 d6             	mov    %rdx,%rsi
ffffffff802191a0:	48 89 c7             	mov    %rax,%rdi
ffffffff802191a3:	e8 65 fb ff ff       	call   ffffffff80218d0d <_RME_Kern_High>
        
        /* Clear endpoint blocking status - no write release required */
        Sig_Root->Thd=RME_NULL;
ffffffff802191a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802191ac:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff802191b3:	00 
ffffffff802191b4:	eb 55                	jmp    ffffffff8021920b <_RME_Sig_Snd+0x372>
    else
    {
        RME_COV_MARKER();

        /* The guy who blocked on it is not on our core, we just faa and return */
        if(RME_FETCH_ADD(&(Sig_Root->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff802191b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802191ba:	48 83 c0 28          	add    $0x28,%rax
ffffffff802191be:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802191c3:	48 89 c7             	mov    %rax,%rdi
ffffffff802191c6:	e8 c8 35 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff802191cb:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff802191d2:	ff ff 7f 
ffffffff802191d5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802191d8:	73 20                	jae    ffffffff802191fa <_RME_Sig_Snd+0x361>
        {
            RME_COV_MARKER();

            RME_FETCH_ADD(&(Sig_Root->Sig_Num),-1);
ffffffff802191da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802191de:	48 83 c0 28          	add    $0x28,%rax
ffffffff802191e2:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802191e9:	48 89 c7             	mov    %rax,%rdi
ffffffff802191ec:	e8 a2 35 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
            return RME_ERR_SIV_FULL;
ffffffff802191f1:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff802191f8:	eb 16                	jmp    ffffffff80219210 <_RME_Sig_Snd+0x377>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Now save the system call return value to the caller stack */
        __RME_Svc_Retval_Set(Reg,0);
ffffffff802191fa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802191fe:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219203:	48 89 c7             	mov    %rax,%rdi
ffffffff80219206:	e8 c0 dc 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
    }

    return 0;
ffffffff8021920b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80219210:	c9                   	leave
ffffffff80219211:	c3                   	ret

ffffffff80219212 <_RME_Sig_Rcv>:
******************************************************************************/
static rme_ret_t _RME_Sig_Rcv(struct RME_Cap_Cpt* Cpt,
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Sig,
                              rme_ptr_t Option)
{
ffffffff80219212:	55                   	push   %rbp
ffffffff80219213:	48 89 e5             	mov    %rsp,%rbp
ffffffff80219216:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8021921a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021921e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80219222:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80219226:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    rme_ptr_t Old_Value;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8021922a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021922e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219233:	48 85 c0             	test   %rax,%rax
ffffffff80219236:	0f 85 98 00 00 00    	jne    ffffffff802192d4 <_RME_Sig_Rcv+0xc2>
ffffffff8021923c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219240:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219244:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80219248:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021924b:	0f 93 c0             	setae  %al
ffffffff8021924e:	0f b6 c0             	movzbl %al,%eax
ffffffff80219251:	48 85 c0             	test   %rax,%rax
ffffffff80219254:	74 0c                	je     ffffffff80219262 <_RME_Sig_Rcv+0x50>
ffffffff80219256:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021925d:	e9 45 04 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
ffffffff80219262:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219266:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021926a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021926d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219271:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219275:	48 01 d0             	add    %rdx,%rax
ffffffff80219278:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021927c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219280:	48 8b 00             	mov    (%rax),%rax
ffffffff80219283:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219287:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021928b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021928f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219292:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219296:	0f 94 c0             	sete   %al
ffffffff80219299:	0f b6 c0             	movzbl %al,%eax
ffffffff8021929c:	48 85 c0             	test   %rax,%rax
ffffffff8021929f:	74 0c                	je     ffffffff802192ad <_RME_Sig_Rcv+0x9b>
ffffffff802192a1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802192a8:	e9 fa 03 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
ffffffff802192ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802192b1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802192b5:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802192b9:	0f 95 c0             	setne  %al
ffffffff802192bc:	0f b6 c0             	movzbl %al,%eax
ffffffff802192bf:	48 85 c0             	test   %rax,%rax
ffffffff802192c2:	0f 84 4c 01 00 00    	je     ffffffff80219414 <_RME_Sig_Rcv+0x202>
ffffffff802192c8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802192cf:	e9 d3 03 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
ffffffff802192d4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802192d8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802192dc:	48 89 c2             	mov    %rax,%rdx
ffffffff802192df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802192e3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802192e7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802192ea:	0f 93 c0             	setae  %al
ffffffff802192ed:	0f b6 c0             	movzbl %al,%eax
ffffffff802192f0:	48 85 c0             	test   %rax,%rax
ffffffff802192f3:	74 0c                	je     ffffffff80219301 <_RME_Sig_Rcv+0xef>
ffffffff802192f5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802192fc:	e9 a6 03 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
ffffffff80219301:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219305:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219309:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021930d:	48 89 c2             	mov    %rax,%rdx
ffffffff80219310:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219314:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219318:	48 01 d0             	add    %rdx,%rax
ffffffff8021931b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021931f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219323:	48 8b 00             	mov    (%rax),%rax
ffffffff80219326:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021932a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021932e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219332:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219335:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219339:	0f 94 c0             	sete   %al
ffffffff8021933c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021933f:	48 85 c0             	test   %rax,%rax
ffffffff80219342:	74 0c                	je     ffffffff80219350 <_RME_Sig_Rcv+0x13e>
ffffffff80219344:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021934b:	e9 57 03 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
ffffffff80219350:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219354:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219358:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021935c:	0f 95 c0             	setne  %al
ffffffff8021935f:	0f b6 c0             	movzbl %al,%eax
ffffffff80219362:	48 85 c0             	test   %rax,%rax
ffffffff80219365:	74 0c                	je     ffffffff80219373 <_RME_Sig_Rcv+0x161>
ffffffff80219367:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021936e:	e9 34 03 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
ffffffff80219373:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219377:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021937c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021937f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219383:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219387:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021938a:	0f 93 c0             	setae  %al
ffffffff8021938d:	0f b6 c0             	movzbl %al,%eax
ffffffff80219390:	48 85 c0             	test   %rax,%rax
ffffffff80219393:	74 0c                	je     ffffffff802193a1 <_RME_Sig_Rcv+0x18f>
ffffffff80219395:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021939c:	e9 06 03 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
ffffffff802193a1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802193a5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802193aa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802193ae:	48 89 c2             	mov    %rax,%rdx
ffffffff802193b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802193b5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802193b9:	48 01 d0             	add    %rdx,%rax
ffffffff802193bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802193c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802193c4:	48 8b 00             	mov    (%rax),%rax
ffffffff802193c7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802193cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802193cf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802193d3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802193d6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802193da:	0f 94 c0             	sete   %al
ffffffff802193dd:	0f b6 c0             	movzbl %al,%eax
ffffffff802193e0:	48 85 c0             	test   %rax,%rax
ffffffff802193e3:	74 0c                	je     ffffffff802193f1 <_RME_Sig_Rcv+0x1df>
ffffffff802193e5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802193ec:	e9 b6 02 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
ffffffff802193f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802193f5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802193f9:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802193fd:	0f 95 c0             	setne  %al
ffffffff80219400:	0f b6 c0             	movzbl %al,%eax
ffffffff80219403:	48 85 c0             	test   %rax,%rax
ffffffff80219406:	74 0c                	je     ffffffff80219414 <_RME_Sig_Rcv+0x202>
ffffffff80219408:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021940f:	e9 93 02 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
                   struct RME_Cap_Sig*,Sig_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    switch(Option)
ffffffff80219414:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
ffffffff80219419:	0f 84 a3 00 00 00    	je     ffffffff802194c2 <_RME_Sig_Rcv+0x2b0>
ffffffff8021941f:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
ffffffff80219424:	0f 87 bd 00 00 00    	ja     ffffffff802194e7 <_RME_Sig_Rcv+0x2d5>
ffffffff8021942a:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff8021942f:	74 6c                	je     ffffffff8021949d <_RME_Sig_Rcv+0x28b>
ffffffff80219431:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff80219436:	0f 87 ab 00 00 00    	ja     ffffffff802194e7 <_RME_Sig_Rcv+0x2d5>
ffffffff8021943c:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80219441:	74 0c                	je     ffffffff8021944f <_RME_Sig_Rcv+0x23d>
ffffffff80219443:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
ffffffff80219448:	74 2e                	je     ffffffff80219478 <_RME_Sig_Rcv+0x266>
ffffffff8021944a:	e9 98 00 00 00       	jmp    ffffffff802194e7 <_RME_Sig_Rcv+0x2d5>
    {
        case RME_RCV_BS:
        {
            RME_COV_MARKER();

            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff8021944f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219453:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219457:	83 e0 02             	and    $0x2,%eax
ffffffff8021945a:	48 85 c0             	test   %rax,%rax
ffffffff8021945d:	0f 94 c0             	sete   %al
ffffffff80219460:	0f b6 c0             	movzbl %al,%eax
ffffffff80219463:	48 85 c0             	test   %rax,%rax
ffffffff80219466:	0f 84 87 00 00 00    	je     ffffffff802194f3 <_RME_Sig_Rcv+0x2e1>
ffffffff8021946c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219473:	e9 2f 02 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
        }
        case RME_RCV_BM:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BM);
ffffffff80219478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021947c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219480:	83 e0 04             	and    $0x4,%eax
ffffffff80219483:	48 85 c0             	test   %rax,%rax
ffffffff80219486:	0f 94 c0             	sete   %al
ffffffff80219489:	0f b6 c0             	movzbl %al,%eax
ffffffff8021948c:	48 85 c0             	test   %rax,%rax
ffffffff8021948f:	74 65                	je     ffffffff802194f6 <_RME_Sig_Rcv+0x2e4>
ffffffff80219491:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219498:	e9 0a 02 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
        }
        case RME_RCV_NS:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NS);
ffffffff8021949d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802194a1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802194a5:	83 e0 08             	and    $0x8,%eax
ffffffff802194a8:	48 85 c0             	test   %rax,%rax
ffffffff802194ab:	0f 94 c0             	sete   %al
ffffffff802194ae:	0f b6 c0             	movzbl %al,%eax
ffffffff802194b1:	48 85 c0             	test   %rax,%rax
ffffffff802194b4:	74 43                	je     ffffffff802194f9 <_RME_Sig_Rcv+0x2e7>
ffffffff802194b6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802194bd:	e9 e5 01 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
        }
        case RME_RCV_NM:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NM);
ffffffff802194c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802194c6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802194ca:	83 e0 10             	and    $0x10,%eax
ffffffff802194cd:	48 85 c0             	test   %rax,%rax
ffffffff802194d0:	0f 94 c0             	sete   %al
ffffffff802194d3:	0f b6 c0             	movzbl %al,%eax
ffffffff802194d6:	48 85 c0             	test   %rax,%rax
ffffffff802194d9:	74 21                	je     ffffffff802194fc <_RME_Sig_Rcv+0x2ea>
ffffffff802194db:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802194e2:	e9 c0 01 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
        }
        default:
        {
            RME_COV_MARKER();
            
            return RME_ERR_SIV_ACT;
ffffffff802194e7:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff802194ee:	e9 b4 01 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
            break;
ffffffff802194f3:	90                   	nop
ffffffff802194f4:	eb 07                	jmp    ffffffff802194fd <_RME_Sig_Rcv+0x2eb>
            break;
ffffffff802194f6:	90                   	nop
ffffffff802194f7:	eb 04                	jmp    ffffffff802194fd <_RME_Sig_Rcv+0x2eb>
            break;
ffffffff802194f9:	90                   	nop
ffffffff802194fa:	eb 01                	jmp    ffffffff802194fd <_RME_Sig_Rcv+0x2eb>
            break;
ffffffff802194fc:	90                   	nop
        }
    }
    
    /* Convert to root cap */
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802194fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219501:	48 8b 00             	mov    (%rax),%rax
ffffffff80219504:	89 c0                	mov    %eax,%eax
ffffffff80219506:	48 85 c0             	test   %rax,%rax
ffffffff80219509:	74 0a                	je     ffffffff80219515 <_RME_Sig_Rcv+0x303>
ffffffff8021950b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021950f:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80219513:	eb 04                	jmp    ffffffff80219519 <_RME_Sig_Rcv+0x307>
ffffffff80219515:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219519:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* See if we can receive on that endpoint - if someone blocks on it, we 
     * must wait for it to unblock before we can proceed. */
    if(Sig_Root->Thd!=(void*)RME_NULL)
ffffffff8021951d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219521:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80219525:	48 85 c0             	test   %rax,%rax
ffffffff80219528:	74 0c                	je     ffffffff80219536 <_RME_Sig_Rcv+0x324>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff8021952a:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff80219531:	e9 71 01 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    Local=RME_CPU_LOCAL();
ffffffff80219536:	e8 04 23 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021953b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff8021953f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219543:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80219547:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    
    /* Check if we trying to let a boot-time thread block on a signal, which is
     * disallowed. Additionally, if the current thread have no timeslice left
     * (which shouldn't happen under any circumstances), we assert and die. */
    RME_ASSERT(Thd_Cur->Sched.Slice!=0U);
    if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff8021954b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021954f:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80219553:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff8021955a:	ff ff 7f 
ffffffff8021955d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219560:	75 0c                	jne    ffffffff8021956e <_RME_Sig_Rcv+0x35c>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_BOOT;
ffffffff80219562:	48 c7 c0 cd fe ff ff 	mov    $0xfffffffffffffecd,%rax
ffffffff80219569:	e9 39 01 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check if there are signals available */
    Old_Value=Sig_Root->Sig_Num;
ffffffff8021956e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219572:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219576:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Old_Value>0U)
ffffffff8021957a:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff8021957f:	0f 84 9b 00 00 00    	je     ffffffff80219620 <_RME_Sig_Rcv+0x40e>
    {
        RME_COV_MARKER();

        /* Can't use faa, other cores may reduce count to zero in the meantime */
        if((Option==RME_RCV_BS)||(Option==RME_RCV_NS))
ffffffff80219585:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8021958a:	74 07                	je     ffffffff80219593 <_RME_Sig_Rcv+0x381>
ffffffff8021958c:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff80219591:	75 43                	jne    ffffffff802195d6 <_RME_Sig_Rcv+0x3c4>
        {
            RME_COV_MARKER();

            /* Try to take one */
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff80219593:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219597:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8021959b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021959f:	48 8d 48 28          	lea    0x28(%rax),%rcx
ffffffff802195a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802195a7:	48 89 c6             	mov    %rax,%rsi
ffffffff802195aa:	48 89 cf             	mov    %rcx,%rdi
ffffffff802195ad:	e8 ac 31 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802195b2:	48 85 c0             	test   %rax,%rax
ffffffff802195b5:	75 0c                	jne    ffffffff802195c3 <_RME_Sig_Rcv+0x3b1>
                             Old_Value,
                             Old_Value-1U)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff802195b7:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff802195be:	e9 e4 00 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* We have taken it, now return what we have taken */
            __RME_Svc_Retval_Set(Reg,1);
ffffffff802195c3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802195c7:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802195cc:	48 89 c7             	mov    %rax,%rdi
ffffffff802195cf:	e8 f7 d8 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
ffffffff802195d4:	eb 40                	jmp    ffffffff80219616 <_RME_Sig_Rcv+0x404>
        else
        {
            RME_COV_MARKER();

            /* Try to take all */
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff802195d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802195da:	48 8d 48 28          	lea    0x28(%rax),%rcx
ffffffff802195de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802195e2:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802195e7:	48 89 c6             	mov    %rax,%rsi
ffffffff802195ea:	48 89 cf             	mov    %rcx,%rdi
ffffffff802195ed:	e8 6c 31 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802195f2:	48 85 c0             	test   %rax,%rax
ffffffff802195f5:	75 0c                	jne    ffffffff80219603 <_RME_Sig_Rcv+0x3f1>
                             Old_Value,
                             0U)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff802195f7:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff802195fe:	e9 a4 00 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* We have taken all, now return what we have taken */
            __RME_Svc_Retval_Set(Reg,(rme_ret_t)Old_Value);
ffffffff80219603:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80219607:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021960b:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021960e:	48 89 c7             	mov    %rax,%rdi
ffffffff80219611:	e8 b5 d8 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
        }
        
        return 0;
ffffffff80219616:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021961b:	e9 87 00 00 00       	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
    else
    {
        RME_COV_MARKER();

        /* There's no value, try to block */
        if((Option==RME_RCV_BS)||(Option==RME_RCV_BM))
ffffffff80219620:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80219625:	74 07                	je     ffffffff8021962e <_RME_Sig_Rcv+0x41c>
ffffffff80219627:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
ffffffff8021962c:	75 63                	jne    ffffffff80219691 <_RME_Sig_Rcv+0x47f>
        {
            RME_COV_MARKER();

            if(RME_COMP_SWAP((rme_ptr_t*)&(Sig_Root->Thd),
ffffffff8021962e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219632:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80219636:	48 8d 4a 30          	lea    0x30(%rdx),%rcx
ffffffff8021963a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021963d:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219642:	48 89 cf             	mov    %rcx,%rdi
ffffffff80219645:	e8 14 31 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021964a:	48 85 c0             	test   %rax,%rax
ffffffff8021964d:	75 09                	jne    ffffffff80219658 <_RME_Sig_Rcv+0x446>
                             RME_NULL,
                             (rme_ptr_t)Thd_Cur)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff8021964f:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff80219656:	eb 4f                	jmp    ffffffff802196a7 <_RME_Sig_Rcv+0x495>
            /* Now we block our current thread. No need to set any return value
             * to the register set here, because we do not yet know how many
             * signals will be there when the thread unblocks. The unblocking
             * does not need an option so we don't keep that; we always treat
             * it as single receive when we unblock anyway. */
            Thd_Cur->Sched.Signal=Sig_Root;
ffffffff80219658:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021965c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80219660:	48 89 50 50          	mov    %rdx,0x50(%rax)
            Thd_Cur->Sched.State=RME_THD_BLOCKED;
ffffffff80219664:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219668:	48 c7 40 38 01 00 00 	movq   $0x1,0x38(%rax)
ffffffff8021966f:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80219670:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219674:	48 89 c7             	mov    %rax,%rdi
ffffffff80219677:	e8 ed 96 ff ff       	call   ffffffff80212d69 <_RME_Run_Del>
            
            /* Pick the highest priority thread to run */
            _RME_Kern_High(Reg,Local);
ffffffff8021967c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80219680:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80219684:	48 89 d6             	mov    %rdx,%rsi
ffffffff80219687:	48 89 c7             	mov    %rax,%rdi
ffffffff8021968a:	e8 7e f6 ff ff       	call   ffffffff80218d0d <_RME_Kern_High>
ffffffff8021968f:	eb 11                	jmp    ffffffff802196a2 <_RME_Sig_Rcv+0x490>
        else
        {
            RME_COV_MARKER();

            /* We have taken nothing but the system call is successful anyway */
            __RME_Svc_Retval_Set(Reg,0);
ffffffff80219691:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80219695:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021969a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021969d:	e8 29 d8 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
        }
    }
    
    return 0;
ffffffff802196a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802196a7:	c9                   	leave
ffffffff802196a8:	c3                   	ret

ffffffff802196a9 <_RME_Inv_Crt>:
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Kom,
                              rme_cid_t Cap_Inv,
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Raddr)
{
ffffffff802196a9:	55                   	push   %rbp
ffffffff802196aa:	48 89 e5             	mov    %rsp,%rbp
ffffffff802196ad:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff802196b1:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802196b5:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff802196b9:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff802196bd:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff802196c1:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
ffffffff802196c5:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    struct RME_Inv_Struct* Invocation;
    rme_ptr_t Type_Stat;
    rme_ptr_t Vaddr;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802196c9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802196cd:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802196d2:	48 85 c0             	test   %rax,%rax
ffffffff802196d5:	0f 85 98 00 00 00    	jne    ffffffff80219773 <_RME_Inv_Crt+0xca>
ffffffff802196db:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802196df:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802196e3:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff802196e7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802196ea:	0f 93 c0             	setae  %al
ffffffff802196ed:	0f b6 c0             	movzbl %al,%eax
ffffffff802196f0:	48 85 c0             	test   %rax,%rax
ffffffff802196f3:	74 0c                	je     ffffffff80219701 <_RME_Inv_Crt+0x58>
ffffffff802196f5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802196fc:	e9 df 07 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219701:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219705:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219709:	48 89 c2             	mov    %rax,%rdx
ffffffff8021970c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219710:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219714:	48 01 d0             	add    %rdx,%rax
ffffffff80219717:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021971b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021971f:	48 8b 00             	mov    (%rax),%rax
ffffffff80219722:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219726:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021972a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021972e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219731:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219735:	0f 94 c0             	sete   %al
ffffffff80219738:	0f b6 c0             	movzbl %al,%eax
ffffffff8021973b:	48 85 c0             	test   %rax,%rax
ffffffff8021973e:	74 0c                	je     ffffffff8021974c <_RME_Inv_Crt+0xa3>
ffffffff80219740:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219747:	e9 94 07 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff8021974c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219750:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219754:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219758:	0f 95 c0             	setne  %al
ffffffff8021975b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021975e:	48 85 c0             	test   %rax,%rax
ffffffff80219761:	0f 84 4c 01 00 00    	je     ffffffff802198b3 <_RME_Inv_Crt+0x20a>
ffffffff80219767:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021976e:	e9 6d 07 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219773:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219777:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021977b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021977e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219782:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219786:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219789:	0f 93 c0             	setae  %al
ffffffff8021978c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021978f:	48 85 c0             	test   %rax,%rax
ffffffff80219792:	74 0c                	je     ffffffff802197a0 <_RME_Inv_Crt+0xf7>
ffffffff80219794:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021979b:	e9 40 07 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff802197a0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802197a4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802197a8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802197ac:	48 89 c2             	mov    %rax,%rdx
ffffffff802197af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802197b3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802197b7:	48 01 d0             	add    %rdx,%rax
ffffffff802197ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802197be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802197c2:	48 8b 00             	mov    (%rax),%rax
ffffffff802197c5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802197c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802197cd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802197d1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802197d4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802197d8:	0f 94 c0             	sete   %al
ffffffff802197db:	0f b6 c0             	movzbl %al,%eax
ffffffff802197de:	48 85 c0             	test   %rax,%rax
ffffffff802197e1:	74 0c                	je     ffffffff802197ef <_RME_Inv_Crt+0x146>
ffffffff802197e3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802197ea:	e9 f1 06 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff802197ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802197f3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802197f7:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802197fb:	0f 95 c0             	setne  %al
ffffffff802197fe:	0f b6 c0             	movzbl %al,%eax
ffffffff80219801:	48 85 c0             	test   %rax,%rax
ffffffff80219804:	74 0c                	je     ffffffff80219812 <_RME_Inv_Crt+0x169>
ffffffff80219806:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021980d:	e9 ce 06 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219812:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219816:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021981b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021981e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219822:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219826:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219829:	0f 93 c0             	setae  %al
ffffffff8021982c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021982f:	48 85 c0             	test   %rax,%rax
ffffffff80219832:	74 0c                	je     ffffffff80219840 <_RME_Inv_Crt+0x197>
ffffffff80219834:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021983b:	e9 a0 06 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219840:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219844:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219849:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021984d:	48 89 c2             	mov    %rax,%rdx
ffffffff80219850:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219854:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219858:	48 01 d0             	add    %rdx,%rax
ffffffff8021985b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021985f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219863:	48 8b 00             	mov    (%rax),%rax
ffffffff80219866:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021986a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021986e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219872:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219875:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219879:	0f 94 c0             	sete   %al
ffffffff8021987c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021987f:	48 85 c0             	test   %rax,%rax
ffffffff80219882:	74 0c                	je     ffffffff80219890 <_RME_Inv_Crt+0x1e7>
ffffffff80219884:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021988b:	e9 50 06 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219890:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219894:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219898:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021989c:	0f 95 c0             	setne  %al
ffffffff8021989f:	0f b6 c0             	movzbl %al,%eax
ffffffff802198a2:	48 85 c0             	test   %rax,%rax
ffffffff802198a5:	74 0c                	je     ffffffff802198b3 <_RME_Inv_Crt+0x20a>
ffffffff802198a7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802198ae:	e9 2d 06 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802198b3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802198b7:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802198bc:	48 85 c0             	test   %rax,%rax
ffffffff802198bf:	0f 85 98 00 00 00    	jne    ffffffff8021995d <_RME_Inv_Crt+0x2b4>
ffffffff802198c5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802198c9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802198cd:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff802198d1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802198d4:	0f 93 c0             	setae  %al
ffffffff802198d7:	0f b6 c0             	movzbl %al,%eax
ffffffff802198da:	48 85 c0             	test   %rax,%rax
ffffffff802198dd:	74 0c                	je     ffffffff802198eb <_RME_Inv_Crt+0x242>
ffffffff802198df:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802198e6:	e9 f5 05 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff802198eb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802198ef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802198f3:	48 89 c2             	mov    %rax,%rdx
ffffffff802198f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802198fa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802198fe:	48 01 d0             	add    %rdx,%rax
ffffffff80219901:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219905:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219909:	48 8b 00             	mov    (%rax),%rax
ffffffff8021990c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219910:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219914:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219918:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021991b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021991f:	0f 94 c0             	sete   %al
ffffffff80219922:	0f b6 c0             	movzbl %al,%eax
ffffffff80219925:	48 85 c0             	test   %rax,%rax
ffffffff80219928:	74 0c                	je     ffffffff80219936 <_RME_Inv_Crt+0x28d>
ffffffff8021992a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219931:	e9 aa 05 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219936:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021993a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021993e:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80219942:	0f 95 c0             	setne  %al
ffffffff80219945:	0f b6 c0             	movzbl %al,%eax
ffffffff80219948:	48 85 c0             	test   %rax,%rax
ffffffff8021994b:	0f 84 4c 01 00 00    	je     ffffffff80219a9d <_RME_Inv_Crt+0x3f4>
ffffffff80219951:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219958:	e9 83 05 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff8021995d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219961:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219965:	48 89 c2             	mov    %rax,%rdx
ffffffff80219968:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021996c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219970:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219973:	0f 93 c0             	setae  %al
ffffffff80219976:	0f b6 c0             	movzbl %al,%eax
ffffffff80219979:	48 85 c0             	test   %rax,%rax
ffffffff8021997c:	74 0c                	je     ffffffff8021998a <_RME_Inv_Crt+0x2e1>
ffffffff8021997e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219985:	e9 56 05 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff8021998a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021998e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219992:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219996:	48 89 c2             	mov    %rax,%rdx
ffffffff80219999:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021999d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802199a1:	48 01 d0             	add    %rdx,%rax
ffffffff802199a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802199a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802199ac:	48 8b 00             	mov    (%rax),%rax
ffffffff802199af:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802199b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802199b7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802199bb:	0f b7 c0             	movzwl %ax,%eax
ffffffff802199be:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802199c2:	0f 94 c0             	sete   %al
ffffffff802199c5:	0f b6 c0             	movzbl %al,%eax
ffffffff802199c8:	48 85 c0             	test   %rax,%rax
ffffffff802199cb:	74 0c                	je     ffffffff802199d9 <_RME_Inv_Crt+0x330>
ffffffff802199cd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802199d4:	e9 07 05 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff802199d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802199dd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802199e1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802199e5:	0f 95 c0             	setne  %al
ffffffff802199e8:	0f b6 c0             	movzbl %al,%eax
ffffffff802199eb:	48 85 c0             	test   %rax,%rax
ffffffff802199ee:	74 0c                	je     ffffffff802199fc <_RME_Inv_Crt+0x353>
ffffffff802199f0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802199f7:	e9 e4 04 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff802199fc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219a00:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219a05:	48 89 c2             	mov    %rax,%rdx
ffffffff80219a08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219a0c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219a10:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219a13:	0f 93 c0             	setae  %al
ffffffff80219a16:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a19:	48 85 c0             	test   %rax,%rax
ffffffff80219a1c:	74 0c                	je     ffffffff80219a2a <_RME_Inv_Crt+0x381>
ffffffff80219a1e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219a25:	e9 b6 04 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219a2a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219a2e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219a33:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219a37:	48 89 c2             	mov    %rax,%rdx
ffffffff80219a3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219a3e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219a42:	48 01 d0             	add    %rdx,%rax
ffffffff80219a45:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219a49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219a4d:	48 8b 00             	mov    (%rax),%rax
ffffffff80219a50:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219a54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219a58:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219a5c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219a5f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219a63:	0f 94 c0             	sete   %al
ffffffff80219a66:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a69:	48 85 c0             	test   %rax,%rax
ffffffff80219a6c:	74 0c                	je     ffffffff80219a7a <_RME_Inv_Crt+0x3d1>
ffffffff80219a6e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219a75:	e9 66 04 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219a7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219a7e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219a82:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80219a86:	0f 95 c0             	setne  %al
ffffffff80219a89:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a8c:	48 85 c0             	test   %rax,%rax
ffffffff80219a8f:	74 0c                	je     ffffffff80219a9d <_RME_Inv_Crt+0x3f4>
ffffffff80219a91:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219a98:	e9 43 04 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff80219a9d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219aa1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219aa6:	48 85 c0             	test   %rax,%rax
ffffffff80219aa9:	0f 85 98 00 00 00    	jne    ffffffff80219b47 <_RME_Inv_Crt+0x49e>
ffffffff80219aaf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219ab3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219ab7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80219abb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219abe:	0f 93 c0             	setae  %al
ffffffff80219ac1:	0f b6 c0             	movzbl %al,%eax
ffffffff80219ac4:	48 85 c0             	test   %rax,%rax
ffffffff80219ac7:	74 0c                	je     ffffffff80219ad5 <_RME_Inv_Crt+0x42c>
ffffffff80219ac9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219ad0:	e9 0b 04 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219ad5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219ad9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219add:	48 89 c2             	mov    %rax,%rdx
ffffffff80219ae0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219ae4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219ae8:	48 01 d0             	add    %rdx,%rax
ffffffff80219aeb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219aef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219af3:	48 8b 00             	mov    (%rax),%rax
ffffffff80219af6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219afa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219afe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219b02:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219b05:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219b09:	0f 94 c0             	sete   %al
ffffffff80219b0c:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b0f:	48 85 c0             	test   %rax,%rax
ffffffff80219b12:	74 0c                	je     ffffffff80219b20 <_RME_Inv_Crt+0x477>
ffffffff80219b14:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219b1b:	e9 c0 03 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219b20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219b24:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219b28:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219b2c:	0f 95 c0             	setne  %al
ffffffff80219b2f:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b32:	48 85 c0             	test   %rax,%rax
ffffffff80219b35:	0f 84 4c 01 00 00    	je     ffffffff80219c87 <_RME_Inv_Crt+0x5de>
ffffffff80219b3b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219b42:	e9 99 03 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219b47:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219b4b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219b4f:	48 89 c2             	mov    %rax,%rdx
ffffffff80219b52:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219b56:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219b5a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219b5d:	0f 93 c0             	setae  %al
ffffffff80219b60:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b63:	48 85 c0             	test   %rax,%rax
ffffffff80219b66:	74 0c                	je     ffffffff80219b74 <_RME_Inv_Crt+0x4cb>
ffffffff80219b68:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219b6f:	e9 6c 03 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219b74:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219b78:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219b7c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219b80:	48 89 c2             	mov    %rax,%rdx
ffffffff80219b83:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219b87:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219b8b:	48 01 d0             	add    %rdx,%rax
ffffffff80219b8e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219b92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219b96:	48 8b 00             	mov    (%rax),%rax
ffffffff80219b99:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219b9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219ba1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219ba5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219ba8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219bac:	0f 94 c0             	sete   %al
ffffffff80219baf:	0f b6 c0             	movzbl %al,%eax
ffffffff80219bb2:	48 85 c0             	test   %rax,%rax
ffffffff80219bb5:	74 0c                	je     ffffffff80219bc3 <_RME_Inv_Crt+0x51a>
ffffffff80219bb7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219bbe:	e9 1d 03 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219bc3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219bc7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219bcb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219bcf:	0f 95 c0             	setne  %al
ffffffff80219bd2:	0f b6 c0             	movzbl %al,%eax
ffffffff80219bd5:	48 85 c0             	test   %rax,%rax
ffffffff80219bd8:	74 0c                	je     ffffffff80219be6 <_RME_Inv_Crt+0x53d>
ffffffff80219bda:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219be1:	e9 fa 02 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219be6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219bea:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219bef:	48 89 c2             	mov    %rax,%rdx
ffffffff80219bf2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219bf6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219bfa:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219bfd:	0f 93 c0             	setae  %al
ffffffff80219c00:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c03:	48 85 c0             	test   %rax,%rax
ffffffff80219c06:	74 0c                	je     ffffffff80219c14 <_RME_Inv_Crt+0x56b>
ffffffff80219c08:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219c0f:	e9 cc 02 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219c14:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219c18:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219c1d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219c21:	48 89 c2             	mov    %rax,%rdx
ffffffff80219c24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219c28:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219c2c:	48 01 d0             	add    %rdx,%rax
ffffffff80219c2f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219c33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219c37:	48 8b 00             	mov    (%rax),%rax
ffffffff80219c3a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219c3e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219c42:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219c46:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219c49:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219c4d:	0f 94 c0             	sete   %al
ffffffff80219c50:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c53:	48 85 c0             	test   %rax,%rax
ffffffff80219c56:	74 0c                	je     ffffffff80219c64 <_RME_Inv_Crt+0x5bb>
ffffffff80219c58:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219c5f:	e9 7c 02 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219c64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219c68:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219c6c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219c70:	0f 95 c0             	setne  %al
ffffffff80219c73:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c76:	48 85 c0             	test   %rax,%rax
ffffffff80219c79:	74 0c                	je     ffffffff80219c87 <_RME_Inv_Crt+0x5de>
ffffffff80219c7b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219c82:	e9 59 02 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80219c87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219c8b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219c8f:	83 e0 01             	and    $0x1,%eax
ffffffff80219c92:	48 85 c0             	test   %rax,%rax
ffffffff80219c95:	0f 94 c0             	sete   %al
ffffffff80219c98:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c9b:	48 85 c0             	test   %rax,%rax
ffffffff80219c9e:	74 0c                	je     ffffffff80219cac <_RME_Inv_Crt+0x603>
ffffffff80219ca0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219ca7:	e9 34 02 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_INV);
ffffffff80219cac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219cb0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219cb4:	83 e0 01             	and    $0x1,%eax
ffffffff80219cb7:	48 85 c0             	test   %rax,%rax
ffffffff80219cba:	0f 94 c0             	sete   %al
ffffffff80219cbd:	0f b6 c0             	movzbl %al,%eax
ffffffff80219cc0:	48 85 c0             	test   %rax,%rax
ffffffff80219cc3:	74 0c                	je     ffffffff80219cd1 <_RME_Inv_Crt+0x628>
ffffffff80219cc5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219ccc:	e9 0f 02 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
ffffffff80219cd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219cd5:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219cd9:	83 e0 08             	and    $0x8,%eax
ffffffff80219cdc:	48 85 c0             	test   %rax,%rax
ffffffff80219cdf:	0f 94 c0             	sete   %al
ffffffff80219ce2:	0f b6 c0             	movzbl %al,%eax
ffffffff80219ce5:	48 85 c0             	test   %rax,%rax
ffffffff80219ce8:	74 0c                	je     ffffffff80219cf6 <_RME_Inv_Crt+0x64d>
ffffffff80219cea:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219cf1:	e9 ea 01 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219cf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219cfa:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80219cfe:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80219d02:	48 01 d0             	add    %rdx,%rax
ffffffff80219d05:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80219d09:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219d0d:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
ffffffff80219d11:	0f 92 c0             	setb   %al
ffffffff80219d14:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d17:	48 85 c0             	test   %rax,%rax
ffffffff80219d1a:	74 0c                	je     ffffffff80219d28 <_RME_Inv_Crt+0x67f>
ffffffff80219d1c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219d23:	e9 b8 01 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219d28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219d2c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219d30:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80219d34:	0f 92 c0             	setb   %al
ffffffff80219d37:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d3a:	48 85 c0             	test   %rax,%rax
ffffffff80219d3d:	74 0c                	je     ffffffff80219d4b <_RME_Inv_Crt+0x6a2>
ffffffff80219d3f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219d46:	e9 95 01 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219d4b:	48 83 7d d8 b7       	cmpq   $0xffffffffffffffb7,-0x28(%rbp)
ffffffff80219d50:	0f 97 c0             	seta   %al
ffffffff80219d53:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d56:	48 85 c0             	test   %rax,%rax
ffffffff80219d59:	74 0c                	je     ffffffff80219d67 <_RME_Inv_Crt+0x6be>
ffffffff80219d5b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219d62:	e9 79 01 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219d67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219d6b:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80219d6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219d73:	48 83 c0 47          	add    $0x47,%rax
ffffffff80219d77:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219d7a:	0f 92 c0             	setb   %al
ffffffff80219d7d:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d80:	48 85 c0             	test   %rax,%rax
ffffffff80219d83:	74 0c                	je     ffffffff80219d91 <_RME_Inv_Crt+0x6e8>
ffffffff80219d85:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219d8c:	e9 4f 01 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff80219d91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219d95:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219d99:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80219d9d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219da0:	0f 93 c0             	setae  %al
ffffffff80219da3:	0f b6 c0             	movzbl %al,%eax
ffffffff80219da6:	48 85 c0             	test   %rax,%rax
ffffffff80219da9:	74 0c                	je     ffffffff80219db7 <_RME_Inv_Crt+0x70e>
ffffffff80219dab:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219db2:	e9 29 01 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219db7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80219dbb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219dbf:	48 89 c2             	mov    %rax,%rdx
ffffffff80219dc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219dc6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219dca:	48 01 d0             	add    %rdx,%rax
ffffffff80219dcd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff80219dd1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219dd5:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80219ddc:	00 00 00 
ffffffff80219ddf:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219de4:	48 89 c7             	mov    %rax,%rdi
ffffffff80219de7:	e8 72 29 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80219dec:	48 85 c0             	test   %rax,%rax
ffffffff80219def:	0f 94 c0             	sete   %al
ffffffff80219df2:	0f b6 c0             	movzbl %al,%eax
ffffffff80219df5:	48 85 c0             	test   %rax,%rax
ffffffff80219df8:	74 0c                	je     ffffffff80219e06 <_RME_Inv_Crt+0x75d>
ffffffff80219dfa:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80219e01:	e9 da 00 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
ffffffff80219e06:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80219e0b:	e8 01 2a ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80219e10:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80219e14:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff80219e18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219e1c:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff80219e21:	48 89 c7             	mov    %rax,%rdi
ffffffff80219e24:	e8 7b 84 ff ff       	call   ffffffff802122a4 <_RME_Kot_Mark>
ffffffff80219e29:	48 85 c0             	test   %rax,%rax
ffffffff80219e2c:	74 17                	je     ffffffff80219e45 <_RME_Inv_Crt+0x79c>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),0U);
ffffffff80219e2e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219e32:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80219e39:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80219e40:	e9 9b 00 00 00       	jmp    ffffffff80219ee0 <_RME_Inv_Crt+0x837>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Object init */
    Invocation=(struct RME_Inv_Struct*)Vaddr;
ffffffff80219e45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219e49:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80219e4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219e51:	48 8b 00             	mov    (%rax),%rax
ffffffff80219e54:	89 c0                	mov    %eax,%eax
ffffffff80219e56:	48 85 c0             	test   %rax,%rax
ffffffff80219e59:	74 0a                	je     ffffffff80219e65 <_RME_Inv_Crt+0x7bc>
ffffffff80219e5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219e5f:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80219e63:	eb 04                	jmp    ffffffff80219e69 <_RME_Inv_Crt+0x7c0>
ffffffff80219e65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219e69:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    Invocation->Prc=Prc_Root;
ffffffff80219e6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219e71:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80219e75:	48 89 50 10          	mov    %rdx,0x10(%rax)
    Invocation->Thd_Act=RME_NULL;
ffffffff80219e79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219e7d:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80219e84:	00 
    /* By default we do not return on exception */
    Invocation->Is_Exc_Ret=0U;
ffffffff80219e85:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219e89:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80219e90:	00 
    
    /* Header init */
    Inv_Crt->Head.Root_Ref=0U;
ffffffff80219e91:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219e95:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80219e9c:	00 
    Inv_Crt->Head.Object=Vaddr;
ffffffff80219e9d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219ea1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80219ea5:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Inv_Crt->Head.Flag=RME_INV_FLAG_ALL;
ffffffff80219ea9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219ead:	48 c7 40 10 03 00 00 	movq   $0x3,0x10(%rax)
ffffffff80219eb4:	00 
    
    /* Reference object */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref),1U);
ffffffff80219eb5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80219eb9:	48 83 c0 08          	add    $0x8,%rax
ffffffff80219ebd:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219ec2:	48 89 c7             	mov    %rax,%rdi
ffffffff80219ec5:	e8 c9 28 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),
ffffffff80219eca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219ece:	48 b9 00 00 00 00 00 	movabs $0x7000000000000,%rcx
ffffffff80219ed5:	00 07 00 
ffffffff80219ed8:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_INV,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80219edb:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80219ee0:	c9                   	leave
ffffffff80219ee1:	c3                   	ret

ffffffff80219ee2 <_RME_Inv_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Inv)
{
ffffffff80219ee2:	55                   	push   %rbp
ffffffff80219ee3:	48 89 e5             	mov    %rsp,%rbp
ffffffff80219ee6:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80219eea:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80219eee:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80219ef2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Type_Stat;
    /* These are for deletion */
    struct RME_Inv_Struct* Invocation;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80219ef6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219efa:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219eff:	48 85 c0             	test   %rax,%rax
ffffffff80219f02:	0f 85 98 00 00 00    	jne    ffffffff80219fa0 <_RME_Inv_Del+0xbe>
ffffffff80219f08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219f0c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219f10:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80219f14:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219f17:	0f 93 c0             	setae  %al
ffffffff80219f1a:	0f b6 c0             	movzbl %al,%eax
ffffffff80219f1d:	48 85 c0             	test   %rax,%rax
ffffffff80219f20:	74 0c                	je     ffffffff80219f2e <_RME_Inv_Del+0x4c>
ffffffff80219f22:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219f29:	e9 a0 03 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
ffffffff80219f2e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219f32:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219f36:	48 89 c2             	mov    %rax,%rdx
ffffffff80219f39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219f3d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219f41:	48 01 d0             	add    %rdx,%rax
ffffffff80219f44:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219f48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219f4c:	48 8b 00             	mov    (%rax),%rax
ffffffff80219f4f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219f53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219f57:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219f5b:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219f5e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219f62:	0f 94 c0             	sete   %al
ffffffff80219f65:	0f b6 c0             	movzbl %al,%eax
ffffffff80219f68:	48 85 c0             	test   %rax,%rax
ffffffff80219f6b:	74 0c                	je     ffffffff80219f79 <_RME_Inv_Del+0x97>
ffffffff80219f6d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219f74:	e9 55 03 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
ffffffff80219f79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219f7d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219f81:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219f85:	0f 95 c0             	setne  %al
ffffffff80219f88:	0f b6 c0             	movzbl %al,%eax
ffffffff80219f8b:	48 85 c0             	test   %rax,%rax
ffffffff80219f8e:	0f 84 4c 01 00 00    	je     ffffffff8021a0e0 <_RME_Inv_Del+0x1fe>
ffffffff80219f94:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219f9b:	e9 2e 03 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
ffffffff80219fa0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219fa4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219fa8:	48 89 c2             	mov    %rax,%rdx
ffffffff80219fab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219faf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219fb3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219fb6:	0f 93 c0             	setae  %al
ffffffff80219fb9:	0f b6 c0             	movzbl %al,%eax
ffffffff80219fbc:	48 85 c0             	test   %rax,%rax
ffffffff80219fbf:	74 0c                	je     ffffffff80219fcd <_RME_Inv_Del+0xeb>
ffffffff80219fc1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219fc8:	e9 01 03 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
ffffffff80219fcd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219fd1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219fd5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219fd9:	48 89 c2             	mov    %rax,%rdx
ffffffff80219fdc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219fe0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219fe4:	48 01 d0             	add    %rdx,%rax
ffffffff80219fe7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219feb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219fef:	48 8b 00             	mov    (%rax),%rax
ffffffff80219ff2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219ff6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219ffa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219ffe:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a001:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a005:	0f 94 c0             	sete   %al
ffffffff8021a008:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a00b:	48 85 c0             	test   %rax,%rax
ffffffff8021a00e:	74 0c                	je     ffffffff8021a01c <_RME_Inv_Del+0x13a>
ffffffff8021a010:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a017:	e9 b2 02 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
ffffffff8021a01c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a020:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a024:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a028:	0f 95 c0             	setne  %al
ffffffff8021a02b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a02e:	48 85 c0             	test   %rax,%rax
ffffffff8021a031:	74 0c                	je     ffffffff8021a03f <_RME_Inv_Del+0x15d>
ffffffff8021a033:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a03a:	e9 8f 02 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
ffffffff8021a03f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a043:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a048:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a04b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a04f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a053:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a056:	0f 93 c0             	setae  %al
ffffffff8021a059:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a05c:	48 85 c0             	test   %rax,%rax
ffffffff8021a05f:	74 0c                	je     ffffffff8021a06d <_RME_Inv_Del+0x18b>
ffffffff8021a061:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a068:	e9 61 02 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
ffffffff8021a06d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a071:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a076:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a07a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a07d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a081:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a085:	48 01 d0             	add    %rdx,%rax
ffffffff8021a088:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a08c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a090:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a093:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a097:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a09b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a09f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a0a2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a0a6:	0f 94 c0             	sete   %al
ffffffff8021a0a9:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a0ac:	48 85 c0             	test   %rax,%rax
ffffffff8021a0af:	74 0c                	je     ffffffff8021a0bd <_RME_Inv_Del+0x1db>
ffffffff8021a0b1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a0b8:	e9 11 02 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
ffffffff8021a0bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a0c1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a0c5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a0c9:	0f 95 c0             	setne  %al
ffffffff8021a0cc:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a0cf:	48 85 c0             	test   %rax,%rax
ffffffff8021a0d2:	74 0c                	je     ffffffff8021a0e0 <_RME_Inv_Del+0x1fe>
ffffffff8021a0d4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a0db:	e9 ee 01 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021a0e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a0e4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a0e8:	83 e0 02             	and    $0x2,%eax
ffffffff8021a0eb:	48 85 c0             	test   %rax,%rax
ffffffff8021a0ee:	0f 94 c0             	sete   %al
ffffffff8021a0f1:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a0f4:	48 85 c0             	test   %rax,%rax
ffffffff8021a0f7:	74 0c                	je     ffffffff8021a105 <_RME_Inv_Del+0x223>
ffffffff8021a0f9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a100:	e9 c9 01 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff8021a105:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a109:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a10d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021a111:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a114:	0f 93 c0             	setae  %al
ffffffff8021a117:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a11a:	48 85 c0             	test   %rax,%rax
ffffffff8021a11d:	74 0c                	je     ffffffff8021a12b <_RME_Inv_Del+0x249>
ffffffff8021a11f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a126:	e9 a3 01 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
ffffffff8021a12b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a12f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a133:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a136:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a13a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a13e:	48 01 d0             	add    %rdx,%rax
ffffffff8021a141:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff8021a145:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a149:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a14c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a150:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a154:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a158:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a15b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a15f:	0f 95 c0             	setne  %al
ffffffff8021a162:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a165:	48 85 c0             	test   %rax,%rax
ffffffff8021a168:	74 0c                	je     ffffffff8021a176 <_RME_Inv_Del+0x294>
ffffffff8021a16a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a171:	e9 58 01 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
ffffffff8021a176:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a17a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a17e:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a182:	0f 95 c0             	setne  %al
ffffffff8021a185:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a188:	48 85 c0             	test   %rax,%rax
ffffffff8021a18b:	74 0c                	je     ffffffff8021a199 <_RME_Inv_Del+0x2b7>
ffffffff8021a18d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a194:	e9 35 01 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
ffffffff8021a199:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021a19e:	e8 6e 26 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8021a1a3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a1a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a1aa:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8021a1ae:	48 29 c2             	sub    %rax,%rdx
ffffffff8021a1b1:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8021a1b5:	0f 96 c0             	setbe  %al
ffffffff8021a1b8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a1bb:	48 98                	cltq
ffffffff8021a1bd:	48 85 c0             	test   %rax,%rax
ffffffff8021a1c0:	74 0c                	je     ffffffff8021a1ce <_RME_Inv_Del+0x2ec>
ffffffff8021a1c2:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8021a1c9:	e9 00 01 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
ffffffff8021a1ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a1d2:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a1d6:	48 85 c0             	test   %rax,%rax
ffffffff8021a1d9:	0f 95 c0             	setne  %al
ffffffff8021a1dc:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a1df:	48 85 c0             	test   %rax,%rax
ffffffff8021a1e2:	74 44                	je     ffffffff8021a228 <_RME_Inv_Del+0x346>
ffffffff8021a1e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a1e8:	89 c0                	mov    %eax,%eax
ffffffff8021a1ea:	48 85 c0             	test   %rax,%rax
ffffffff8021a1ed:	0f 94 c0             	sete   %al
ffffffff8021a1f0:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a1f3:	48 85 c0             	test   %rax,%rax
ffffffff8021a1f6:	74 24                	je     ffffffff8021a21c <_RME_Inv_Del+0x33a>
ffffffff8021a1f8:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021a1ff:	00 ff ff 
ffffffff8021a202:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021a206:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a209:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a20d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a211:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a214:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a217:	e8 42 25 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a21c:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8021a223:	e9 a6 00 00 00       	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
    
    /* Get the invocation */
    Invocation=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
ffffffff8021a228:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a22c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a230:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* See if the invocation is currently being used. If yes, we cannot delete it */
    if(Invocation->Thd_Act!=(void*)RME_NULL)
ffffffff8021a234:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a238:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a23c:	48 85 c0             	test   %rax,%rax
ffffffff8021a23f:	74 2d                	je     ffffffff8021a26e <_RME_Inv_Del+0x38c>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Inv_Del,Type_Stat);
ffffffff8021a241:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021a248:	00 ff ff 
ffffffff8021a24b:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021a24f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a252:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a256:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a25a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a25d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a260:	e8 f9 24 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_SIV_ACT;
ffffffff8021a265:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a26c:	eb 60                	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Inv_Del,Type_Stat);
ffffffff8021a26e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a272:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a276:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8021a27b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a27e:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a281:	e8 d8 24 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a286:	48 85 c0             	test   %rax,%rax
ffffffff8021a289:	0f 94 c0             	sete   %al
ffffffff8021a28c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a28f:	48 85 c0             	test   %rax,%rax
ffffffff8021a292:	74 09                	je     ffffffff8021a29d <_RME_Inv_Del+0x3bb>
ffffffff8021a294:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021a29b:	eb 31                	jmp    ffffffff8021a2ce <_RME_Inv_Del+0x3ec>
    
    /* Dereference the process */
    RME_FETCH_ADD(&(Invocation->Prc->Head.Root_Ref), -1);
ffffffff8021a29d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a2a1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a2a5:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021a2a9:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021a2b0:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a2b3:	e8 db 24 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Try to clear the area - this must be successful */
    RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Invocation,RME_INV_SIZE)==0);
ffffffff8021a2b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a2bc:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8021a2c1:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a2c4:	e8 1e 83 ff ff       	call   ffffffff802125e7 <_RME_Kot_Erase>
    
    return 0;
ffffffff8021a2c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a2ce:	c9                   	leave
ffffffff8021a2cf:	c3                   	ret

ffffffff8021a2d0 <_RME_Inv_Set>:
static rme_ret_t _RME_Inv_Set(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Inv,
                              rme_ptr_t Entry,
                              rme_ptr_t Stack,
                              rme_ptr_t Is_Exc_Ret)
{
ffffffff8021a2d0:	55                   	push   %rbp
ffffffff8021a2d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a2d4:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff8021a2d8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021a2dc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021a2e0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8021a2e4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8021a2e8:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Inv* Inv_Op;
    volatile struct RME_Inv_Struct* Invocation;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8021a2ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a2f0:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a2f5:	48 85 c0             	test   %rax,%rax
ffffffff8021a2f8:	0f 85 98 00 00 00    	jne    ffffffff8021a396 <_RME_Inv_Set+0xc6>
ffffffff8021a2fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a302:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a306:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021a30a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a30d:	0f 93 c0             	setae  %al
ffffffff8021a310:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a313:	48 85 c0             	test   %rax,%rax
ffffffff8021a316:	74 0c                	je     ffffffff8021a324 <_RME_Inv_Set+0x54>
ffffffff8021a318:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a31f:	e9 03 02 00 00       	jmp    ffffffff8021a527 <_RME_Inv_Set+0x257>
ffffffff8021a324:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a328:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a32c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a32f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a333:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a337:	48 01 d0             	add    %rdx,%rax
ffffffff8021a33a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a33e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a342:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a345:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a349:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a34d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a351:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a354:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a358:	0f 94 c0             	sete   %al
ffffffff8021a35b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a35e:	48 85 c0             	test   %rax,%rax
ffffffff8021a361:	74 0c                	je     ffffffff8021a36f <_RME_Inv_Set+0x9f>
ffffffff8021a363:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a36a:	e9 b8 01 00 00       	jmp    ffffffff8021a527 <_RME_Inv_Set+0x257>
ffffffff8021a36f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a373:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a377:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a37b:	0f 95 c0             	setne  %al
ffffffff8021a37e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a381:	48 85 c0             	test   %rax,%rax
ffffffff8021a384:	0f 84 46 01 00 00    	je     ffffffff8021a4d0 <_RME_Inv_Set+0x200>
ffffffff8021a38a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a391:	e9 91 01 00 00       	jmp    ffffffff8021a527 <_RME_Inv_Set+0x257>
ffffffff8021a396:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a39a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a39e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a3a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a3a5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a3a9:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a3ac:	0f 93 c0             	setae  %al
ffffffff8021a3af:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a3b2:	48 85 c0             	test   %rax,%rax
ffffffff8021a3b5:	74 0c                	je     ffffffff8021a3c3 <_RME_Inv_Set+0xf3>
ffffffff8021a3b7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a3be:	e9 64 01 00 00       	jmp    ffffffff8021a527 <_RME_Inv_Set+0x257>
ffffffff8021a3c3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a3c7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a3cb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a3cf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a3d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a3d6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a3da:	48 01 d0             	add    %rdx,%rax
ffffffff8021a3dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a3e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a3e5:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a3e8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a3ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a3f0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a3f4:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a3f7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a3fb:	0f 94 c0             	sete   %al
ffffffff8021a3fe:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a401:	48 85 c0             	test   %rax,%rax
ffffffff8021a404:	74 0c                	je     ffffffff8021a412 <_RME_Inv_Set+0x142>
ffffffff8021a406:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a40d:	e9 15 01 00 00       	jmp    ffffffff8021a527 <_RME_Inv_Set+0x257>
ffffffff8021a412:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a416:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a41a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a41e:	0f 95 c0             	setne  %al
ffffffff8021a421:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a424:	48 85 c0             	test   %rax,%rax
ffffffff8021a427:	74 0c                	je     ffffffff8021a435 <_RME_Inv_Set+0x165>
ffffffff8021a429:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a430:	e9 f2 00 00 00       	jmp    ffffffff8021a527 <_RME_Inv_Set+0x257>
ffffffff8021a435:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a439:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a43e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a441:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a445:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a449:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a44c:	0f 93 c0             	setae  %al
ffffffff8021a44f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a452:	48 85 c0             	test   %rax,%rax
ffffffff8021a455:	74 0c                	je     ffffffff8021a463 <_RME_Inv_Set+0x193>
ffffffff8021a457:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a45e:	e9 c4 00 00 00       	jmp    ffffffff8021a527 <_RME_Inv_Set+0x257>
ffffffff8021a463:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a467:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a46c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a470:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a473:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a477:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a47b:	48 01 d0             	add    %rdx,%rax
ffffffff8021a47e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a482:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a486:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a489:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a48d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a491:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a495:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a498:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a49c:	0f 94 c0             	sete   %al
ffffffff8021a49f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a4a2:	48 85 c0             	test   %rax,%rax
ffffffff8021a4a5:	74 09                	je     ffffffff8021a4b0 <_RME_Inv_Set+0x1e0>
ffffffff8021a4a7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a4ae:	eb 77                	jmp    ffffffff8021a527 <_RME_Inv_Set+0x257>
ffffffff8021a4b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a4b4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a4b8:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a4bc:	0f 95 c0             	setne  %al
ffffffff8021a4bf:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a4c2:	48 85 c0             	test   %rax,%rax
ffffffff8021a4c5:	74 09                	je     ffffffff8021a4d0 <_RME_Inv_Set+0x200>
ffffffff8021a4c7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a4ce:	eb 57                	jmp    ffffffff8021a527 <_RME_Inv_Set+0x257>
                   struct RME_Cap_Inv*,Inv_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff8021a4d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a4d4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a4d8:	83 e0 01             	and    $0x1,%eax
ffffffff8021a4db:	48 85 c0             	test   %rax,%rax
ffffffff8021a4de:	0f 94 c0             	sete   %al
ffffffff8021a4e1:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a4e4:	48 85 c0             	test   %rax,%rax
ffffffff8021a4e7:	74 09                	je     ffffffff8021a4f2 <_RME_Inv_Set+0x222>
ffffffff8021a4e9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a4f0:	eb 35                	jmp    ffffffff8021a527 <_RME_Inv_Set+0x257>
    
    /* Commit the change - we do not care if the invocation is in use, it is
     * the user's responsibility to guarantee the integrity of applications */
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8021a4f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a4f6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a4fa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Invocation->Entry=Entry;
ffffffff8021a4fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a502:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021a506:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Invocation->Stack=Stack;
ffffffff8021a50a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a50e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8021a512:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Invocation->Is_Exc_Ret=Is_Exc_Ret;
ffffffff8021a516:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a51a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021a51e:	48 89 50 30          	mov    %rdx,0x30(%rax)
    
    return 0;
ffffffff8021a522:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a527:	c9                   	leave
ffffffff8021a528:	c3                   	ret

ffffffff8021a529 <_RME_Inv_Act>:
******************************************************************************/
static rme_ret_t _RME_Inv_Act(struct RME_Cap_Cpt* Cpt, 
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Inv,
                              rme_ptr_t Param)
{
ffffffff8021a529:	55                   	push   %rbp
ffffffff8021a52a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a52d:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8021a531:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021a535:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021a539:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021a53d:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        /* No action required */
    }
#endif

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8021a541:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a545:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a54a:	48 85 c0             	test   %rax,%rax
ffffffff8021a54d:	0f 85 98 00 00 00    	jne    ffffffff8021a5eb <_RME_Inv_Act+0xc2>
ffffffff8021a553:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a557:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a55b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021a55f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a562:	0f 93 c0             	setae  %al
ffffffff8021a565:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a568:	48 85 c0             	test   %rax,%rax
ffffffff8021a56b:	74 0c                	je     ffffffff8021a579 <_RME_Inv_Act+0x50>
ffffffff8021a56d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a574:	e9 fa 02 00 00       	jmp    ffffffff8021a873 <_RME_Inv_Act+0x34a>
ffffffff8021a579:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a57d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a581:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a584:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a588:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a58c:	48 01 d0             	add    %rdx,%rax
ffffffff8021a58f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a593:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a597:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a59a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a59e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a5a2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a5a6:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a5a9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a5ad:	0f 94 c0             	sete   %al
ffffffff8021a5b0:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a5b3:	48 85 c0             	test   %rax,%rax
ffffffff8021a5b6:	74 0c                	je     ffffffff8021a5c4 <_RME_Inv_Act+0x9b>
ffffffff8021a5b8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a5bf:	e9 af 02 00 00       	jmp    ffffffff8021a873 <_RME_Inv_Act+0x34a>
ffffffff8021a5c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a5c8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a5cc:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a5d0:	0f 95 c0             	setne  %al
ffffffff8021a5d3:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a5d6:	48 85 c0             	test   %rax,%rax
ffffffff8021a5d9:	0f 84 4c 01 00 00    	je     ffffffff8021a72b <_RME_Inv_Act+0x202>
ffffffff8021a5df:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a5e6:	e9 88 02 00 00       	jmp    ffffffff8021a873 <_RME_Inv_Act+0x34a>
ffffffff8021a5eb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a5ef:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a5f3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a5f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a5fa:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a5fe:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a601:	0f 93 c0             	setae  %al
ffffffff8021a604:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a607:	48 85 c0             	test   %rax,%rax
ffffffff8021a60a:	74 0c                	je     ffffffff8021a618 <_RME_Inv_Act+0xef>
ffffffff8021a60c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a613:	e9 5b 02 00 00       	jmp    ffffffff8021a873 <_RME_Inv_Act+0x34a>
ffffffff8021a618:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a61c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a620:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a624:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a627:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a62b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a62f:	48 01 d0             	add    %rdx,%rax
ffffffff8021a632:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a636:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a63a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a63d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a641:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a645:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a649:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a64c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a650:	0f 94 c0             	sete   %al
ffffffff8021a653:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a656:	48 85 c0             	test   %rax,%rax
ffffffff8021a659:	74 0c                	je     ffffffff8021a667 <_RME_Inv_Act+0x13e>
ffffffff8021a65b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a662:	e9 0c 02 00 00       	jmp    ffffffff8021a873 <_RME_Inv_Act+0x34a>
ffffffff8021a667:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a66b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a66f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a673:	0f 95 c0             	setne  %al
ffffffff8021a676:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a679:	48 85 c0             	test   %rax,%rax
ffffffff8021a67c:	74 0c                	je     ffffffff8021a68a <_RME_Inv_Act+0x161>
ffffffff8021a67e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a685:	e9 e9 01 00 00       	jmp    ffffffff8021a873 <_RME_Inv_Act+0x34a>
ffffffff8021a68a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a68e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a693:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a696:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a69a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a69e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a6a1:	0f 93 c0             	setae  %al
ffffffff8021a6a4:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a6a7:	48 85 c0             	test   %rax,%rax
ffffffff8021a6aa:	74 0c                	je     ffffffff8021a6b8 <_RME_Inv_Act+0x18f>
ffffffff8021a6ac:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a6b3:	e9 bb 01 00 00       	jmp    ffffffff8021a873 <_RME_Inv_Act+0x34a>
ffffffff8021a6b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a6bc:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a6c1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a6c5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a6c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a6cc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a6d0:	48 01 d0             	add    %rdx,%rax
ffffffff8021a6d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a6d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a6db:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a6de:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a6e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a6e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a6ea:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a6ed:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a6f1:	0f 94 c0             	sete   %al
ffffffff8021a6f4:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a6f7:	48 85 c0             	test   %rax,%rax
ffffffff8021a6fa:	74 0c                	je     ffffffff8021a708 <_RME_Inv_Act+0x1df>
ffffffff8021a6fc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a703:	e9 6b 01 00 00       	jmp    ffffffff8021a873 <_RME_Inv_Act+0x34a>
ffffffff8021a708:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a70c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a710:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a714:	0f 95 c0             	setne  %al
ffffffff8021a717:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a71a:	48 85 c0             	test   %rax,%rax
ffffffff8021a71d:	74 0c                	je     ffffffff8021a72b <_RME_Inv_Act+0x202>
ffffffff8021a71f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a726:	e9 48 01 00 00       	jmp    ffffffff8021a873 <_RME_Inv_Act+0x34a>
                   struct RME_Cap_Inv*,Inv_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff8021a72b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a72f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a733:	83 e0 02             	and    $0x2,%eax
ffffffff8021a736:	48 85 c0             	test   %rax,%rax
ffffffff8021a739:	0f 94 c0             	sete   %al
ffffffff8021a73c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a73f:	48 85 c0             	test   %rax,%rax
ffffffff8021a742:	74 0c                	je     ffffffff8021a750 <_RME_Inv_Act+0x227>
ffffffff8021a744:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a74b:	e9 23 01 00 00       	jmp    ffffffff8021a873 <_RME_Inv_Act+0x34a>

    /* Get the invocation struct */
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8021a750:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a754:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a758:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Check if this invocation port is already active */
    Thd_Act=Invocation->Thd_Act;
ffffffff8021a75c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a760:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a764:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(RME_UNLIKELY(Thd_Act!=(void*)0U))
ffffffff8021a768:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8021a76d:	0f 95 c0             	setne  %al
ffffffff8021a770:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a773:	48 85 c0             	test   %rax,%rax
ffffffff8021a776:	74 0c                	je     ffffffff8021a784 <_RME_Inv_Act+0x25b>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff8021a778:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a77f:	e9 ef 00 00 00       	jmp    ffffffff8021a873 <_RME_Inv_Act+0x34a>
        RME_COV_MARKER();
        /* No action required */
    }

#if(RME_CPT_ENTRY_MAX==0U)
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8021a784:	e8 b6 10 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021a789:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a78d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
#endif
    
    /* Try to do CAS and activate this port */
    if(RME_UNLIKELY(RME_COMP_SWAP((volatile rme_ptr_t*)&(Invocation->Thd_Act),
ffffffff8021a791:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021a795:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a799:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8021a79d:	48 83 c1 18          	add    $0x18,%rcx
ffffffff8021a7a1:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a7a4:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021a7a7:	e8 b2 1f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a7ac:	48 85 c0             	test   %rax,%rax
ffffffff8021a7af:	0f 94 c0             	sete   %al
ffffffff8021a7b2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a7b5:	48 85 c0             	test   %rax,%rax
ffffffff8021a7b8:	74 0c                	je     ffffffff8021a7c6 <_RME_Inv_Act+0x29d>
                                  (rme_ptr_t)Thd_Act,
                                  (rme_ptr_t)Thd_Cur)==RME_CASFAIL))
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff8021a7ba:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a7c1:	e9 ad 00 00 00       	jmp    ffffffff8021a873 <_RME_Inv_Act+0x34a>

    /* Save whatever is needed to return to the point - normally only SP and IP needed
     * because all other registers, including the coprocessor registers, are saved at
     * user-level. We do not set the return value because it will be set by Inv_Ret.
     * The coprocessor state will be consistent across the call */
    __RME_Inv_Reg_Save(&(Invocation->Ret),Reg);
ffffffff8021a7c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a7ca:	48 8d 50 38          	lea    0x38(%rax),%rdx
ffffffff8021a7ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021a7d2:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a7d5:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021a7d8:	e8 5f b6 00 00       	call   ffffffff80225e3c <__RME_Inv_Reg_Save>
    /* Push this into the stack: insert after the thread list header */
    _RME_List_Ins(&(Invocation->Head),
ffffffff8021a7dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a7e1:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
                  &(Thd_Cur->Ctx.Invstk),
ffffffff8021a7e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a7ec:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    _RME_List_Ins(&(Invocation->Head),
ffffffff8021a7f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a7f7:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a7fa:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a7fd:	e8 a6 25 ff ff       	call   ffffffff8020cda8 <_RME_List_Ins>
                  Thd_Cur->Ctx.Invstk.Next);
    /* Increase invocation depth - no atomic operation needed */
    Thd_Cur->Ctx.Invstk_Depth++;
ffffffff8021a802:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a806:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff8021a80d:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff8021a811:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a815:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
    /* Setup the register contents, and do the invocation */
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff8021a81c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a820:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021a824:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a828:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8021a82c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8021a830:	48 8b 89 88 00 00 00 	mov    0x88(%rcx),%rcx
ffffffff8021a837:	48 be ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rsi
ffffffff8021a83e:	ff ff 7f 
ffffffff8021a841:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021a844:	48 21 f7             	and    %rsi,%rdi
ffffffff8021a847:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff8021a84b:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8021a84f:	49 89 f0             	mov    %rsi,%r8
ffffffff8021a852:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a855:	e8 83 b3 00 00       	call   ffffffff80225bdd <__RME_Thd_Reg_Init>
    /* We are assuming that we are always invoking into a new process (why use synchronous
     * invocation if you don't do so?). So we always switch page tables regardless. */
#if(RME_PGT_RAW_ENABLE==0U)
    RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
    __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8021a85a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a85e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a862:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021a866:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a869:	e8 77 bd 00 00       	call   ffffffff802265e5 <__RME_Pgt_Set>
    
    return 0;
ffffffff8021a86e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a873:	c9                   	leave
ffffffff8021a874:	c3                   	ret

ffffffff8021a875 <_RME_Inv_Ret>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Ret(struct RME_Reg_Struct* Reg,
                              rme_ptr_t Retval,
                              rme_ptr_t Is_Exc)
{
ffffffff8021a875:	55                   	push   %rbp
ffffffff8021a876:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a879:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021a87d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021a881:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021a885:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;

    /* See if we can return; If we can, get the structure */
    Thread=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8021a889:	e8 b1 0f ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021a88e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a892:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8021a896:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a89a:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8021a8a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a8a5:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021a8ab:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a8ae:	74 0d                	je     ffffffff8021a8bd <_RME_Inv_Ret+0x48>
ffffffff8021a8b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a8b4:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021a8bb:	eb 05                	jmp    ffffffff8021a8c2 <_RME_Inv_Ret+0x4d>
ffffffff8021a8bd:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021a8c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(RME_UNLIKELY(Invocation==(void*)RME_NULL))
ffffffff8021a8c6:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021a8cb:	0f 94 c0             	sete   %al
ffffffff8021a8ce:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a8d1:	48 85 c0             	test   %rax,%rax
ffffffff8021a8d4:	74 0c                	je     ffffffff8021a8e2 <_RME_Inv_Ret+0x6d>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_EMPTY;
ffffffff8021a8d6:	48 c7 c0 d0 fe ff ff 	mov    $0xfffffffffffffed0,%rax
ffffffff8021a8dd:	e9 38 01 00 00       	jmp    ffffffff8021aa1a <_RME_Inv_Ret+0x1a5>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if this port allows return-on-fault */
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8021a8e2:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8021a8e7:	0f 95 c0             	setne  %al
ffffffff8021a8ea:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a8ed:	48 85 c0             	test   %rax,%rax
ffffffff8021a8f0:	74 22                	je     ffffffff8021a914 <_RME_Inv_Ret+0x9f>
ffffffff8021a8f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a8f6:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021a8fa:	48 85 c0             	test   %rax,%rax
ffffffff8021a8fd:	0f 94 c0             	sete   %al
ffffffff8021a900:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a903:	48 85 c0             	test   %rax,%rax
ffffffff8021a906:	74 0c                	je     ffffffff8021a914 <_RME_Inv_Ret+0x9f>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_FAULT;
ffffffff8021a908:	48 c7 c0 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rax
ffffffff8021a90f:	e9 06 01 00 00       	jmp    ffffffff8021aa1a <_RME_Inv_Ret+0x1a5>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Pop it from the stack */
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8021a914:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a918:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021a91b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a91f:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a923:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021a926:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a929:	e8 50 24 ff ff       	call   ffffffff8020cd7e <_RME_List_Del>
    /* Decrease invocation depth - no atomic operation needed */
    Thread->Ctx.Invstk_Depth--;
ffffffff8021a92e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a932:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff8021a939:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8021a93d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a941:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well. */
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8021a948:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a94c:	48 8d 50 38          	lea    0x38(%rax),%rdx
ffffffff8021a950:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a954:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021a957:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a95a:	e8 15 b5 00 00       	call   ffffffff80225e74 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8021a95f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021a963:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a967:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021a96a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a96d:	e8 77 c5 00 00       	call   ffffffff80226ee9 <__RME_Inv_Retval_Set>

    /* We have successfully returned, set the invocation as inactive. We need
     * a barrier here to avoid potential destruction of the return value. */
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8021a972:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a976:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021a97d:	00 

    /* Decide the system call's return value */
    if(RME_UNLIKELY(Is_Exc!=0U))
ffffffff8021a97e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8021a983:	0f 95 c0             	setne  %al
ffffffff8021a986:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a989:	48 85 c0             	test   %rax,%rax
ffffffff8021a98c:	74 15                	je     ffffffff8021a9a3 <_RME_Inv_Ret+0x12e>
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg, RME_ERR_SIV_FAULT);
ffffffff8021a98e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a992:	48 c7 c6 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rsi
ffffffff8021a999:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a99c:	e8 2a c5 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
ffffffff8021a9a1:	eb 11                	jmp    ffffffff8021a9b4 <_RME_Inv_Ret+0x13f>
    }
    else
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg,0);
ffffffff8021a9a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a9a7:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021a9ac:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a9af:	e8 17 c5 00 00       	call   ffffffff80226ecb <__RME_Svc_Retval_Set>
    }

    /* Same assumptions as in invocation activation */
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8021a9b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a9b8:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8021a9bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a9c3:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021a9c9:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a9cc:	74 0d                	je     ffffffff8021a9db <_RME_Inv_Ret+0x166>
ffffffff8021a9ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a9d2:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021a9d9:	eb 05                	jmp    ffffffff8021a9e0 <_RME_Inv_Ret+0x16b>
ffffffff8021a9db:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021a9e0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Invocation!=(void*)RME_NULL)
ffffffff8021a9e4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021a9e9:	74 16                	je     ffffffff8021aa01 <_RME_Inv_Ret+0x18c>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8021a9eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a9ef:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a9f3:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021a9f7:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a9fa:	e8 e6 bb 00 00       	call   ffffffff802265e5 <__RME_Pgt_Set>
ffffffff8021a9ff:	eb 14                	jmp    ffffffff8021aa15 <_RME_Inv_Ret+0x1a0>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Thread->Sched.Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
ffffffff8021aa01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aa05:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021aa09:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021aa0d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aa10:	e8 d0 bb 00 00       	call   ffffffff802265e5 <__RME_Pgt_Set>
    }
    
    return 0;
ffffffff8021aa15:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021aa1a:	c9                   	leave
ffffffff8021aa1b:	c3                   	ret

ffffffff8021aa1c <_RME_Kfn_Boot_Crt>:
Return      : rme_ret_t - If successful, 0; or error code.
******************************************************************************/
rme_ret_t _RME_Kfn_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Kfn)
{
ffffffff8021aa1c:	55                   	push   %rbp
ffffffff8021aa1d:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021aa20:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8021aa24:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021aa28:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021aa2c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Kfn* Kfn_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021aa30:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021aa34:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021aa39:	48 85 c0             	test   %rax,%rax
ffffffff8021aa3c:	0f 85 98 00 00 00    	jne    ffffffff8021aada <_RME_Kfn_Boot_Crt+0xbe>
ffffffff8021aa42:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aa46:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021aa4a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021aa4e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021aa51:	0f 93 c0             	setae  %al
ffffffff8021aa54:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aa57:	48 85 c0             	test   %rax,%rax
ffffffff8021aa5a:	74 0c                	je     ffffffff8021aa68 <_RME_Kfn_Boot_Crt+0x4c>
ffffffff8021aa5c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021aa63:	e9 9b 02 00 00       	jmp    ffffffff8021ad03 <_RME_Kfn_Boot_Crt+0x2e7>
ffffffff8021aa68:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021aa6c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021aa70:	48 89 c2             	mov    %rax,%rdx
ffffffff8021aa73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aa77:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021aa7b:	48 01 d0             	add    %rdx,%rax
ffffffff8021aa7e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021aa82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aa86:	48 8b 00             	mov    (%rax),%rax
ffffffff8021aa89:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021aa8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aa91:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021aa95:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021aa98:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021aa9c:	0f 94 c0             	sete   %al
ffffffff8021aa9f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aaa2:	48 85 c0             	test   %rax,%rax
ffffffff8021aaa5:	74 0c                	je     ffffffff8021aab3 <_RME_Kfn_Boot_Crt+0x97>
ffffffff8021aaa7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021aaae:	e9 50 02 00 00       	jmp    ffffffff8021ad03 <_RME_Kfn_Boot_Crt+0x2e7>
ffffffff8021aab3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aab7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021aabb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021aabf:	0f 95 c0             	setne  %al
ffffffff8021aac2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aac5:	48 85 c0             	test   %rax,%rax
ffffffff8021aac8:	0f 84 4c 01 00 00    	je     ffffffff8021ac1a <_RME_Kfn_Boot_Crt+0x1fe>
ffffffff8021aace:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021aad5:	e9 29 02 00 00       	jmp    ffffffff8021ad03 <_RME_Kfn_Boot_Crt+0x2e7>
ffffffff8021aada:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021aade:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021aae2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021aae5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aae9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021aaed:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021aaf0:	0f 93 c0             	setae  %al
ffffffff8021aaf3:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aaf6:	48 85 c0             	test   %rax,%rax
ffffffff8021aaf9:	74 0c                	je     ffffffff8021ab07 <_RME_Kfn_Boot_Crt+0xeb>
ffffffff8021aafb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ab02:	e9 fc 01 00 00       	jmp    ffffffff8021ad03 <_RME_Kfn_Boot_Crt+0x2e7>
ffffffff8021ab07:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ab0b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ab0f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ab13:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ab16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ab1a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021ab1e:	48 01 d0             	add    %rdx,%rax
ffffffff8021ab21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021ab25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ab29:	48 8b 00             	mov    (%rax),%rax
ffffffff8021ab2c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021ab30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ab34:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ab38:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021ab3b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021ab3f:	0f 94 c0             	sete   %al
ffffffff8021ab42:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ab45:	48 85 c0             	test   %rax,%rax
ffffffff8021ab48:	74 0c                	je     ffffffff8021ab56 <_RME_Kfn_Boot_Crt+0x13a>
ffffffff8021ab4a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021ab51:	e9 ad 01 00 00       	jmp    ffffffff8021ad03 <_RME_Kfn_Boot_Crt+0x2e7>
ffffffff8021ab56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ab5a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021ab5e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ab62:	0f 95 c0             	setne  %al
ffffffff8021ab65:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ab68:	48 85 c0             	test   %rax,%rax
ffffffff8021ab6b:	74 0c                	je     ffffffff8021ab79 <_RME_Kfn_Boot_Crt+0x15d>
ffffffff8021ab6d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ab74:	e9 8a 01 00 00       	jmp    ffffffff8021ad03 <_RME_Kfn_Boot_Crt+0x2e7>
ffffffff8021ab79:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ab7d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021ab82:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ab85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ab89:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ab8d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ab90:	0f 93 c0             	setae  %al
ffffffff8021ab93:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ab96:	48 85 c0             	test   %rax,%rax
ffffffff8021ab99:	74 0c                	je     ffffffff8021aba7 <_RME_Kfn_Boot_Crt+0x18b>
ffffffff8021ab9b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021aba2:	e9 5c 01 00 00       	jmp    ffffffff8021ad03 <_RME_Kfn_Boot_Crt+0x2e7>
ffffffff8021aba7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021abab:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021abb0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021abb4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021abb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021abbb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021abbf:	48 01 d0             	add    %rdx,%rax
ffffffff8021abc2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021abc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021abca:	48 8b 00             	mov    (%rax),%rax
ffffffff8021abcd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021abd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021abd5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021abd9:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021abdc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021abe0:	0f 94 c0             	sete   %al
ffffffff8021abe3:	0f b6 c0             	movzbl %al,%eax
ffffffff8021abe6:	48 85 c0             	test   %rax,%rax
ffffffff8021abe9:	74 0c                	je     ffffffff8021abf7 <_RME_Kfn_Boot_Crt+0x1db>
ffffffff8021abeb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021abf2:	e9 0c 01 00 00       	jmp    ffffffff8021ad03 <_RME_Kfn_Boot_Crt+0x2e7>
ffffffff8021abf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021abfb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021abff:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ac03:	0f 95 c0             	setne  %al
ffffffff8021ac06:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ac09:	48 85 c0             	test   %rax,%rax
ffffffff8021ac0c:	74 0c                	je     ffffffff8021ac1a <_RME_Kfn_Boot_Crt+0x1fe>
ffffffff8021ac0e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ac15:	e9 e9 00 00 00       	jmp    ffffffff8021ad03 <_RME_Kfn_Boot_Crt+0x2e7>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8021ac1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ac1e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021ac22:	83 e0 01             	and    $0x1,%eax
ffffffff8021ac25:	48 85 c0             	test   %rax,%rax
ffffffff8021ac28:	0f 94 c0             	sete   %al
ffffffff8021ac2b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ac2e:	48 85 c0             	test   %rax,%rax
ffffffff8021ac31:	74 0c                	je     ffffffff8021ac3f <_RME_Kfn_Boot_Crt+0x223>
ffffffff8021ac33:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021ac3a:	e9 c4 00 00 00       	jmp    ffffffff8021ad03 <_RME_Kfn_Boot_Crt+0x2e7>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kfn,struct RME_Cap_Kfn*,Kfn_Crt);
ffffffff8021ac3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ac43:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ac47:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021ac4b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ac4e:	0f 93 c0             	setae  %al
ffffffff8021ac51:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ac54:	48 85 c0             	test   %rax,%rax
ffffffff8021ac57:	74 0c                	je     ffffffff8021ac65 <_RME_Kfn_Boot_Crt+0x249>
ffffffff8021ac59:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ac60:	e9 9e 00 00 00       	jmp    ffffffff8021ad03 <_RME_Kfn_Boot_Crt+0x2e7>
ffffffff8021ac65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021ac69:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ac6d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ac70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ac74:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021ac78:	48 01 d0             	add    %rdx,%rax
ffffffff8021ac7b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff8021ac7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ac83:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021ac8a:	00 00 00 
ffffffff8021ac8d:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021ac92:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ac95:	e8 c4 1a ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021ac9a:	48 85 c0             	test   %rax,%rax
ffffffff8021ac9d:	0f 94 c0             	sete   %al
ffffffff8021aca0:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aca3:	48 85 c0             	test   %rax,%rax
ffffffff8021aca6:	74 09                	je     ffffffff8021acb1 <_RME_Kfn_Boot_Crt+0x295>
ffffffff8021aca8:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021acaf:	eb 52                	jmp    ffffffff8021ad03 <_RME_Kfn_Boot_Crt+0x2e7>
ffffffff8021acb1:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021acb6:	e8 56 1b ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8021acbb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021acbf:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* Header init */
    Kfn_Crt->Head.Root_Ref=1U;
ffffffff8021acc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021acc7:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8021acce:	00 
    Kfn_Crt->Head.Object=0U;
ffffffff8021accf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021acd3:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021acda:	00 
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff8021acdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021acdf:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
ffffffff8021ace6:	ff ff ff 
ffffffff8021ace9:	48 89 48 10          	mov    %rcx,0x10(%rax)
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Kfn_Crt->Head.Type_Stat),
ffffffff8021aced:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021acf1:	48 b9 00 00 00 00 00 	movabs $0x1000000000000,%rcx
ffffffff8021acf8:	00 01 00 
ffffffff8021acfb:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_KFN,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8021acfe:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021ad03:	c9                   	leave
ffffffff8021ad04:	c3                   	ret

ffffffff8021ad05 <_RME_Kfn_Act>:
                              rme_cid_t Cap_Kfn,
                              rme_ptr_t Func_ID,
                              rme_ptr_t Sub_ID,
                              rme_ptr_t Param1,
                              rme_ptr_t Param2)
{
ffffffff8021ad05:	55                   	push   %rbp
ffffffff8021ad06:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021ad09:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021ad0d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021ad11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021ad15:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff8021ad19:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff8021ad1d:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff8021ad21:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
    struct RME_Cap_Kfn* Kfn_Op;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff8021ad25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ad29:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021ad2e:	48 85 c0             	test   %rax,%rax
ffffffff8021ad31:	0f 85 98 00 00 00    	jne    ffffffff8021adcf <_RME_Kfn_Act+0xca>
ffffffff8021ad37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ad3b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ad3f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021ad43:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ad46:	0f 93 c0             	setae  %al
ffffffff8021ad49:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad4c:	48 85 c0             	test   %rax,%rax
ffffffff8021ad4f:	74 0c                	je     ffffffff8021ad5d <_RME_Kfn_Act+0x58>
ffffffff8021ad51:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ad58:	e9 fd 01 00 00       	jmp    ffffffff8021af5a <_RME_Kfn_Act+0x255>
ffffffff8021ad5d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ad61:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ad65:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ad68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ad6c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021ad70:	48 01 d0             	add    %rdx,%rax
ffffffff8021ad73:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021ad77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ad7b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021ad7e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021ad82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ad86:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ad8a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021ad8d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021ad91:	0f 94 c0             	sete   %al
ffffffff8021ad94:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad97:	48 85 c0             	test   %rax,%rax
ffffffff8021ad9a:	74 0c                	je     ffffffff8021ada8 <_RME_Kfn_Act+0xa3>
ffffffff8021ad9c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021ada3:	e9 b2 01 00 00       	jmp    ffffffff8021af5a <_RME_Kfn_Act+0x255>
ffffffff8021ada8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021adac:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021adb0:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021adb4:	0f 95 c0             	setne  %al
ffffffff8021adb7:	0f b6 c0             	movzbl %al,%eax
ffffffff8021adba:	48 85 c0             	test   %rax,%rax
ffffffff8021adbd:	0f 84 46 01 00 00    	je     ffffffff8021af09 <_RME_Kfn_Act+0x204>
ffffffff8021adc3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021adca:	e9 8b 01 00 00       	jmp    ffffffff8021af5a <_RME_Kfn_Act+0x255>
ffffffff8021adcf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021add3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021add7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021adda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021adde:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ade2:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ade5:	0f 93 c0             	setae  %al
ffffffff8021ade8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021adeb:	48 85 c0             	test   %rax,%rax
ffffffff8021adee:	74 0c                	je     ffffffff8021adfc <_RME_Kfn_Act+0xf7>
ffffffff8021adf0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021adf7:	e9 5e 01 00 00       	jmp    ffffffff8021af5a <_RME_Kfn_Act+0x255>
ffffffff8021adfc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ae00:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ae04:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ae08:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ae0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ae0f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021ae13:	48 01 d0             	add    %rdx,%rax
ffffffff8021ae16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021ae1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ae1e:	48 8b 00             	mov    (%rax),%rax
ffffffff8021ae21:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021ae25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ae29:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ae2d:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021ae30:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021ae34:	0f 94 c0             	sete   %al
ffffffff8021ae37:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ae3a:	48 85 c0             	test   %rax,%rax
ffffffff8021ae3d:	74 0c                	je     ffffffff8021ae4b <_RME_Kfn_Act+0x146>
ffffffff8021ae3f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021ae46:	e9 0f 01 00 00       	jmp    ffffffff8021af5a <_RME_Kfn_Act+0x255>
ffffffff8021ae4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ae4f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021ae53:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ae57:	0f 95 c0             	setne  %al
ffffffff8021ae5a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ae5d:	48 85 c0             	test   %rax,%rax
ffffffff8021ae60:	74 0c                	je     ffffffff8021ae6e <_RME_Kfn_Act+0x169>
ffffffff8021ae62:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ae69:	e9 ec 00 00 00       	jmp    ffffffff8021af5a <_RME_Kfn_Act+0x255>
ffffffff8021ae6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ae72:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021ae77:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ae7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ae7e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ae82:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ae85:	0f 93 c0             	setae  %al
ffffffff8021ae88:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ae8b:	48 85 c0             	test   %rax,%rax
ffffffff8021ae8e:	74 0c                	je     ffffffff8021ae9c <_RME_Kfn_Act+0x197>
ffffffff8021ae90:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ae97:	e9 be 00 00 00       	jmp    ffffffff8021af5a <_RME_Kfn_Act+0x255>
ffffffff8021ae9c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aea0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021aea5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021aea9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021aeac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aeb0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021aeb4:	48 01 d0             	add    %rdx,%rax
ffffffff8021aeb7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021aebb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aebf:	48 8b 00             	mov    (%rax),%rax
ffffffff8021aec2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021aec6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aeca:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021aece:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021aed1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021aed5:	0f 94 c0             	sete   %al
ffffffff8021aed8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aedb:	48 85 c0             	test   %rax,%rax
ffffffff8021aede:	74 09                	je     ffffffff8021aee9 <_RME_Kfn_Act+0x1e4>
ffffffff8021aee0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021aee7:	eb 71                	jmp    ffffffff8021af5a <_RME_Kfn_Act+0x255>
ffffffff8021aee9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aeed:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021aef1:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021aef5:	0f 95 c0             	setne  %al
ffffffff8021aef8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aefb:	48 85 c0             	test   %rax,%rax
ffffffff8021aefe:	74 09                	je     ffffffff8021af09 <_RME_Kfn_Act+0x204>
ffffffff8021af00:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021af07:	eb 51                	jmp    ffffffff8021af5a <_RME_Kfn_Act+0x255>
                   struct RME_Cap_Kfn*,Kfn_Op,Type_Stat);    

    /* Check if the range of calling is allowed - kernel function specific */
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021af09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021af0d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021af11:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021af15:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021af19:	72 10                	jb     ffffffff8021af2b <_RME_Kfn_Act+0x226>
       (Func_ID<RME_KFN_FLAG_LOW(Kfn_Op->Head.Flag)))
ffffffff8021af1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021af1f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021af23:	89 c0                	mov    %eax,%eax
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021af25:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff8021af29:	73 09                	jae    ffffffff8021af34 <_RME_Kfn_Act+0x22f>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff8021af2b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021af32:	eb 26                	jmp    ffffffff8021af5a <_RME_Kfn_Act+0x255>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Return whatever the function returns */
    return __RME_Kfn_Handler(Cpt,Reg,Func_ID,Sub_ID,Param1,Param2);
ffffffff8021af34:	4c 8b 45 10          	mov    0x10(%rbp),%r8
ffffffff8021af38:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8021af3c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8021af40:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021af44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff8021af48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af4c:	4d 89 c1             	mov    %r8,%r9
ffffffff8021af4f:	49 89 f8             	mov    %rdi,%r8
ffffffff8021af52:	48 89 c7             	mov    %rax,%rdi
ffffffff8021af55:	e8 71 00 00 00       	call   ffffffff8021afcb <__RME_Kfn_Handler>
}
ffffffff8021af5a:	c9                   	leave
ffffffff8021af5b:	c3                   	ret

ffffffff8021af5c <_RME_X64_Comp_Swap>:
            if((Checksum&0xFF)==0)
            {
                return (struct RME_X64_ACPI_RDSP_Desc*)&(Pos[Count]);
            }
        }
    }
ffffffff8021af5c:	55                   	push   %rbp
ffffffff8021af5d:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021af60:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8021af64:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021af68:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021af6c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    return 0;
}
ffffffff8021af70:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021af74:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8021af78:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021af7c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8021af80:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021af85:	0f 94 c0             	sete   %al
ffffffff8021af88:	88 45 ff             	mov    %al,-0x1(%rbp)
/* End Function:__RME_X64_RDSP_Scan ******************************************/

/* Function:__RME_X64_RDSP_Find ***********************************************
Description : Find a valid RDSP structure and return it.
ffffffff8021af8b:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
Input       : None.
ffffffff8021af8f:	c9                   	leave
ffffffff8021af90:	c3                   	ret

ffffffff8021af91 <main>:
{
ffffffff8021af91:	55                   	push   %rbp
ffffffff8021af92:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021af95:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8021af99:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021af9d:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8021afa4:	80 ff ff 
ffffffff8021afa7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021afab:	48 01 d0             	add    %rdx,%rax
ffffffff8021afae:	48 89 05 73 40 02 00 	mov    %rax,0x24073(%rip)        # ffffffff8023f028 <RME_X64_MBInfo>
    _RME_Kmain(RME_KOM_STACK_ADDR);
ffffffff8021afb5:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
ffffffff8021afbc:	48 89 c7             	mov    %rax,%rdi
ffffffff8021afbf:	e8 ef 08 ff ff       	call   ffffffff8020b8b3 <_RME_Kmain>
    return 0;
ffffffff8021afc4:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021afc9:	c9                   	leave
ffffffff8021afca:	c3                   	ret

ffffffff8021afcb <__RME_Kfn_Handler>:
{
ffffffff8021afcb:	55                   	push   %rbp
ffffffff8021afcc:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021afcf:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021afd3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8021afd7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8021afdb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8021afdf:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff8021afe3:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
ffffffff8021afe7:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    RME_DBG_S("System call successfully processed! Hello World!");
ffffffff8021afeb:	48 c7 c7 08 75 22 80 	mov    $0xffffffff80227508,%rdi
ffffffff8021aff2:	e8 2e 1a ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    return 0;
ffffffff8021aff7:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021affc:	c9                   	leave
ffffffff8021affd:	c3                   	ret

ffffffff8021affe <__RME_Putchar>:
{
ffffffff8021affe:	55                   	push   %rbp
ffffffff8021afff:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b002:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8021b006:	89 f8                	mov    %edi,%eax
ffffffff8021b008:	88 45 fc             	mov    %al,-0x4(%rbp)
    while((__RME_X64_In(RME_X64_COM1+5)&0x20)==0);
ffffffff8021b00b:	90                   	nop
ffffffff8021b00c:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff8021b011:	e8 ea 07 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff8021b016:	83 e0 20             	and    $0x20,%eax
ffffffff8021b019:	48 85 c0             	test   %rax,%rax
ffffffff8021b01c:	74 ee                	je     ffffffff8021b00c <__RME_Putchar+0xe>
    __RME_X64_Out(RME_X64_COM1, Char);
ffffffff8021b01e:	48 0f be 45 fc       	movsbq -0x4(%rbp),%rax
ffffffff8021b023:	48 89 c6             	mov    %rax,%rsi
ffffffff8021b026:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8021b02b:	e8 da 07 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    return 0;
ffffffff8021b030:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b035:	c9                   	leave
ffffffff8021b036:	c3                   	ret

ffffffff8021b037 <__RME_X64_UART_Init>:
{
ffffffff8021b037:	55                   	push   %rbp
ffffffff8021b038:	48 89 e5             	mov    %rsp,%rbp
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021b03b:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b040:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff8021b045:	e8 c0 07 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x80);
ffffffff8021b04a:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff8021b04f:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff8021b054:	e8 b1 07 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+0, 115200/9600);
ffffffff8021b059:	be 0c 00 00 00       	mov    $0xc,%esi
ffffffff8021b05e:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8021b063:	e8 a2 07 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021b068:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b06d:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff8021b072:	e8 93 07 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x03);
ffffffff8021b077:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021b07c:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff8021b081:	e8 84 07 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+2, 0xC7);
ffffffff8021b086:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff8021b08b:	bf fa 03 00 00       	mov    $0x3fa,%edi
ffffffff8021b090:	e8 75 07 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+4, 0);
ffffffff8021b095:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b09a:	bf fc 03 00 00       	mov    $0x3fc,%edi
ffffffff8021b09f:	e8 66 07 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    if(__RME_X64_In(RME_X64_COM1+5)==0xFF)
ffffffff8021b0a4:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff8021b0a9:	e8 52 07 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff8021b0ae:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff8021b0b4:	75 0d                	jne    ffffffff8021b0c3 <__RME_X64_UART_Init+0x8c>
        RME_X64_UART_Exist=0;
ffffffff8021b0b6:	48 c7 05 5f 3f 02 00 	movq   $0x0,0x23f5f(%rip)        # ffffffff8023f020 <RME_X64_UART_Exist>
ffffffff8021b0bd:	00 00 00 00 
}
ffffffff8021b0c1:	eb 0b                	jmp    ffffffff8021b0ce <__RME_X64_UART_Init+0x97>
        RME_X64_UART_Exist=1;
ffffffff8021b0c3:	48 c7 05 52 3f 02 00 	movq   $0x1,0x23f52(%rip)        # ffffffff8023f020 <RME_X64_UART_Exist>
ffffffff8021b0ca:	01 00 00 00 
}
ffffffff8021b0ce:	90                   	nop
ffffffff8021b0cf:	5d                   	pop    %rbp
ffffffff8021b0d0:	c3                   	ret

ffffffff8021b0d1 <__RME_X64_RDSP_Scan>:
{
ffffffff8021b0d1:	55                   	push   %rbp
ffffffff8021b0d2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b0d5:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021b0d9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021b0dd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    Pos=(rme_u8_t*)RME_X64_PA2VA(Base);
ffffffff8021b0e1:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8021b0e8:	80 ff ff 
ffffffff8021b0eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b0ef:	48 01 d0             	add    %rdx,%rax
ffffffff8021b0f2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff8021b0f6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021b0fd:	00 
ffffffff8021b0fe:	eb 7f                	jmp    ffffffff8021b17f <__RME_X64_RDSP_Scan+0xae>
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff8021b100:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b104:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b108:	48 01 d0             	add    %rdx,%rax
ffffffff8021b10b:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8021b110:	48 c7 c6 39 75 22 80 	mov    $0xffffffff80227539,%rsi
ffffffff8021b117:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b11a:	e8 09 1d ff ff       	call   ffffffff8020ce28 <_RME_Memcmp>
ffffffff8021b11f:	48 85 c0             	test   %rax,%rax
ffffffff8021b122:	75 56                	jne    ffffffff8021b17a <__RME_X64_RDSP_Scan+0xa9>
            Checksum=0;
ffffffff8021b124:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021b12b:	00 
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff8021b12c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021b133:	00 
ffffffff8021b134:	eb 24                	jmp    ffffffff8021b15a <__RME_X64_RDSP_Scan+0x89>
                Checksum+=( rme_ptr_t)Pos[Count+Check_Cnt];
ffffffff8021b136:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b13a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b13e:	48 01 d0             	add    %rdx,%rax
ffffffff8021b141:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b144:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b148:	48 01 d0             	add    %rdx,%rax
ffffffff8021b14b:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b14e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b151:	48 01 45 f0          	add    %rax,-0x10(%rbp)
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff8021b155:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff8021b15a:	48 83 7d e8 13       	cmpq   $0x13,-0x18(%rbp)
ffffffff8021b15f:	7e d5                	jle    ffffffff8021b136 <__RME_X64_RDSP_Scan+0x65>
            if((Checksum&0xFF)==0)
ffffffff8021b161:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b165:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b168:	48 85 c0             	test   %rax,%rax
ffffffff8021b16b:	75 0d                	jne    ffffffff8021b17a <__RME_X64_RDSP_Scan+0xa9>
                return (struct RME_X64_ACPI_RDSP_Desc*)&(Pos[Count]);
ffffffff8021b16d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b171:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b175:	48 01 d0             	add    %rdx,%rax
ffffffff8021b178:	eb 1f                	jmp    ffffffff8021b199 <__RME_X64_RDSP_Scan+0xc8>
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff8021b17a:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
ffffffff8021b17f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b183:	48 8d 50 dc          	lea    -0x24(%rax),%rdx
ffffffff8021b187:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b18b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b18e:	0f 83 6c ff ff ff    	jae    ffffffff8021b100 <__RME_X64_RDSP_Scan+0x2f>
    return 0;
ffffffff8021b194:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b199:	c9                   	leave
ffffffff8021b19a:	c3                   	ret

ffffffff8021b19b <__RME_X64_RDSP_Find>:
Output      : None.
Return      : struct RME_X64_ACPI_RDSP_Desc* - The descriptor address.
******************************************************************************/
struct RME_X64_ACPI_RDSP_Desc*__RME_X64_RDSP_Find(void)
{
ffffffff8021b19b:	55                   	push   %rbp
ffffffff8021b19c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b19f:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_X64_ACPI_RDSP_Desc* RDSP;
    rme_ptr_t Paddr;
    /* 0x40E contains the address of Extended BIOS Data Area (EBDA). Let's try
     * to find the RDSP there first */
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff8021b1a3:	48 b8 0e 04 00 00 00 	movabs $0xffff80000000040e,%rax
ffffffff8021b1aa:	80 ff ff 
ffffffff8021b1ad:	0f b7 00             	movzwl (%rax),%eax
ffffffff8021b1b0:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b1b3:	c1 e0 04             	shl    $0x4,%eax
ffffffff8021b1b6:	48 98                	cltq
ffffffff8021b1b8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    if(Paddr!=0)
ffffffff8021b1bc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8021b1c1:	74 22                	je     ffffffff8021b1e5 <__RME_X64_RDSP_Find+0x4a>
    {
        RDSP=__RME_X64_RDSP_Scan(Paddr,1024);
ffffffff8021b1c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b1c7:	be 00 04 00 00       	mov    $0x400,%esi
ffffffff8021b1cc:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b1cf:	e8 fd fe ff ff       	call   ffffffff8021b0d1 <__RME_X64_RDSP_Scan>
ffffffff8021b1d4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        /* Found */
        if(RDSP!=0)
ffffffff8021b1d8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021b1dd:	74 06                	je     ffffffff8021b1e5 <__RME_X64_RDSP_Find+0x4a>
            return RDSP;
ffffffff8021b1df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b1e3:	eb 0f                	jmp    ffffffff8021b1f4 <__RME_X64_RDSP_Find+0x59>
    }

    /* If that fails, the RDSP must be here */
    return __RME_X64_RDSP_Scan(0xE0000, 0x20000);
ffffffff8021b1e5:	be 00 00 02 00       	mov    $0x20000,%esi
ffffffff8021b1ea:	bf 00 00 0e 00       	mov    $0xe0000,%edi
ffffffff8021b1ef:	e8 dd fe ff ff       	call   ffffffff8021b0d1 <__RME_X64_RDSP_Scan>
}
ffffffff8021b1f4:	c9                   	leave
ffffffff8021b1f5:	c3                   	ret

ffffffff8021b1f6 <__RME_X64_SMP_Detect>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
rme_ret_t __RME_X64_SMP_Detect(struct RME_X64_ACPI_MADT_Hdr* MADT)
{
ffffffff8021b1f6:	55                   	push   %rbp
ffffffff8021b1f7:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b1fa:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021b1fe:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    rme_ptr_t Length;
    rme_u8_t* Ptr;
    rme_u8_t* End;

    /* Is there a MADT? */
    if(MADT==0)
ffffffff8021b202:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8021b207:	75 0c                	jne    ffffffff8021b215 <__RME_X64_SMP_Detect+0x1f>
        return -1;
ffffffff8021b209:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b210:	e9 18 03 00 00       	jmp    ffffffff8021b52d <__RME_X64_SMP_Detect+0x337>
    /* Is the MADT valid? */
    if(MADT->Header.Length<sizeof(struct RME_X64_ACPI_MADT_Hdr))
ffffffff8021b215:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b219:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b21c:	83 f8 2b             	cmp    $0x2b,%eax
ffffffff8021b21f:	77 0c                	ja     ffffffff8021b22d <__RME_X64_SMP_Detect+0x37>
        return -1;
ffffffff8021b221:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b228:	e9 00 03 00 00       	jmp    ffffffff8021b52d <__RME_X64_SMP_Detect+0x337>

    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff8021b22d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b231:	8b 40 24             	mov    0x24(%rax),%eax
ffffffff8021b234:	89 c0                	mov    %eax,%eax
ffffffff8021b236:	48 89 05 e3 50 02 00 	mov    %rax,0x250e3(%rip)        # ffffffff80240320 <RME_X64_LAPIC_Addr>

    /* Where does the actual table contents start? */
    Ptr=MADT->Table;
ffffffff8021b23d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b241:	48 83 c0 2c          	add    $0x2c,%rax
ffffffff8021b245:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Where does it end? */
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);
ffffffff8021b249:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b24d:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b250:	89 c0                	mov    %eax,%eax
ffffffff8021b252:	48 8d 50 d4          	lea    -0x2c(%rax),%rdx
ffffffff8021b256:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b25a:	48 01 d0             	add    %rdx,%rax
ffffffff8021b25d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    RME_X64_Num_IOAPIC=0;
ffffffff8021b261:	48 c7 05 54 50 02 00 	movq   $0x0,0x25054(%rip)        # ffffffff802402c0 <RME_X64_Num_IOAPIC>
ffffffff8021b268:	00 00 00 00 
    RME_X64_Num_CPU=0;
ffffffff8021b26c:	48 c7 05 31 40 02 00 	movq   $0x0,0x24031(%rip)        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff8021b273:	00 00 00 00 
    while(Ptr<End)
ffffffff8021b277:	e9 98 02 00 00       	jmp    ffffffff8021b514 <__RME_X64_SMP_Detect+0x31e>
    {
        /* See if we have finished scanning the table */
        if((End-Ptr)<2)
ffffffff8021b27c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b280:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff8021b284:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021b288:	0f 8e 96 02 00 00    	jle    ffffffff8021b524 <__RME_X64_SMP_Detect+0x32e>
            break;
        Length=Ptr[1];
ffffffff8021b28e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b292:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b296:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b299:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b29c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        if((End-Ptr)<Length)
ffffffff8021b2a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b2a4:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff8021b2a8:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8021b2ac:	0f 82 75 02 00 00    	jb     ffffffff8021b527 <__RME_X64_SMP_Detect+0x331>
            break;

        /* See what is in the table */
        switch(Ptr[0])
ffffffff8021b2b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b2b6:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b2b9:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b2bc:	83 f8 02             	cmp    $0x2,%eax
ffffffff8021b2bf:	0f 84 a9 01 00 00    	je     ffffffff8021b46e <__RME_X64_SMP_Detect+0x278>
ffffffff8021b2c5:	83 f8 02             	cmp    $0x2,%eax
ffffffff8021b2c8:	0f 8f 31 02 00 00    	jg     ffffffff8021b4ff <__RME_X64_SMP_Detect+0x309>
ffffffff8021b2ce:	85 c0                	test   %eax,%eax
ffffffff8021b2d0:	74 0e                	je     ffffffff8021b2e0 <__RME_X64_SMP_Detect+0xea>
ffffffff8021b2d2:	83 f8 01             	cmp    $0x1,%eax
ffffffff8021b2d5:	0f 84 ba 00 00 00    	je     ffffffff8021b395 <__RME_X64_SMP_Detect+0x19f>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);

                break;
            }
            /* All other types are ignored */
            default:break;
ffffffff8021b2db:	e9 1f 02 00 00       	jmp    ffffffff8021b4ff <__RME_X64_SMP_Detect+0x309>
                LAPIC=(struct RME_X64_ACPI_MADT_LAPIC_Record*)Ptr;
ffffffff8021b2e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b2e4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_LAPIC_Record))
ffffffff8021b2e8:	48 83 7d e8 07       	cmpq   $0x7,-0x18(%rbp)
ffffffff8021b2ed:	0f 86 0f 02 00 00    	jbe    ffffffff8021b502 <__RME_X64_SMP_Detect+0x30c>
                if((LAPIC->Flags&RME_X64_APIC_LAPIC_ENABLED)==0)
ffffffff8021b2f3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b2f7:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b2fa:	83 e0 01             	and    $0x1,%eax
ffffffff8021b2fd:	85 c0                	test   %eax,%eax
ffffffff8021b2ff:	0f 84 00 02 00 00    	je     ffffffff8021b505 <__RME_X64_SMP_Detect+0x30f>
                RME_DBG_S("\n\rACPI: CPU ");
ffffffff8021b305:	48 c7 c7 42 75 22 80 	mov    $0xffffffff80227542,%rdi
ffffffff8021b30c:	e8 14 17 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
                RME_Int_Print((rme_cnt_t)RME_X64_Num_CPU);
ffffffff8021b311:	48 8b 05 90 3f 02 00 	mov    0x23f90(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff8021b318:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b31b:	e8 13 15 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(", LAPIC ID ");
ffffffff8021b320:	48 c7 c7 4f 75 22 80 	mov    $0xffffffff8022754f,%rdi
ffffffff8021b327:	e8 f9 16 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
                RME_Int_Print(LAPIC->APIC_ID);
ffffffff8021b32c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b330:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b334:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b337:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b33a:	e8 f4 14 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_X64_CPU_Info[RME_X64_Num_CPU].LAPIC_ID=LAPIC->APIC_ID;
ffffffff8021b33f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b343:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b347:	48 8b 15 5a 3f 02 00 	mov    0x23f5a(%rip),%rdx        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff8021b34e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b351:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff8021b355:	48 81 c2 c0 f2 23 80 	add    $0xffffffff8023f2c0,%rdx
ffffffff8021b35c:	48 89 02             	mov    %rax,(%rdx)
                RME_X64_CPU_Info[RME_X64_Num_CPU].Boot_Done=0;
ffffffff8021b35f:	48 8b 05 42 3f 02 00 	mov    0x23f42(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff8021b366:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021b36a:	48 05 c8 f2 23 80    	add    $0xffffffff8023f2c8,%rax
ffffffff8021b370:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
                RME_X64_Num_CPU++;
ffffffff8021b377:	48 8b 05 2a 3f 02 00 	mov    0x23f2a(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff8021b37e:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b382:	48 89 05 1f 3f 02 00 	mov    %rax,0x23f1f(%rip)        # ffffffff8023f2a8 <RME_X64_Num_CPU>
                RME_ASSERT(RME_X64_Num_CPU<=RME_X64_CPU_NUM);
ffffffff8021b389:	48 8b 05 18 3f 02 00 	mov    0x23f18(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
                break;
ffffffff8021b390:	e9 77 01 00 00       	jmp    ffffffff8021b50c <__RME_X64_SMP_Detect+0x316>
                IOAPIC=(struct RME_X64_ACPI_MADT_IOAPIC_Record*)Ptr;
ffffffff8021b395:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b399:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_IOAPIC_Record))
ffffffff8021b39d:	48 83 7d e8 0b       	cmpq   $0xb,-0x18(%rbp)
ffffffff8021b3a2:	0f 86 60 01 00 00    	jbe    ffffffff8021b508 <__RME_X64_SMP_Detect+0x312>
                RME_DBG_S("\n\rACPI: IOAPIC ");
ffffffff8021b3a8:	48 c7 c7 5b 75 22 80 	mov    $0xffffffff8022755b,%rdi
ffffffff8021b3af:	e8 71 16 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
                RME_Int_Print((rme_cnt_t)RME_X64_Num_IOAPIC);
ffffffff8021b3b4:	48 8b 05 05 4f 02 00 	mov    0x24f05(%rip),%rax        # ffffffff802402c0 <RME_X64_Num_IOAPIC>
ffffffff8021b3bb:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b3be:	e8 70 14 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(" @ ");
ffffffff8021b3c3:	48 c7 c7 6b 75 22 80 	mov    $0xffffffff8022756b,%rdi
ffffffff8021b3ca:	e8 56 16 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
                RME_Hex_Print(IOAPIC->Addr);
ffffffff8021b3cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b3d3:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b3d6:	89 c0                	mov    %eax,%eax
ffffffff8021b3d8:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b3db:	e8 87 15 ff ff       	call   ffffffff8020c967 <RME_Hex_Print>
                RME_DBG_S(", ID ");
ffffffff8021b3e0:	48 c7 c7 6f 75 22 80 	mov    $0xffffffff8022756f,%rdi
ffffffff8021b3e7:	e8 39 16 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
                RME_Int_Print(IOAPIC->ID);
ffffffff8021b3ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b3f0:	0f b6 40 02          	movzbl 0x2(%rax),%eax
ffffffff8021b3f4:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b3f7:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b3fa:	e8 34 14 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(", IBASE ");
ffffffff8021b3ff:	48 c7 c7 75 75 22 80 	mov    $0xffffffff80227575,%rdi
ffffffff8021b406:	e8 1a 16 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
                RME_Int_Print(IOAPIC->Interrupt_Base);
ffffffff8021b40b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b40f:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff8021b412:	89 c0                	mov    %eax,%eax
ffffffff8021b414:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b417:	e8 17 14 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                if(RME_X64_Num_IOAPIC!=0)
ffffffff8021b41c:	48 8b 05 9d 4e 02 00 	mov    0x24e9d(%rip),%rax        # ffffffff802402c0 <RME_X64_Num_IOAPIC>
ffffffff8021b423:	48 85 c0             	test   %rax,%rax
ffffffff8021b426:	74 0e                	je     ffffffff8021b436 <__RME_X64_SMP_Detect+0x240>
                    RME_DBG_S("Warning: multiple ioapics are not supported - currently we will not initialize IOAPIC > 1\n");
ffffffff8021b428:	48 c7 c7 80 75 22 80 	mov    $0xffffffff80227580,%rdi
ffffffff8021b42f:	e8 f1 15 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff8021b434:	eb 1a                	jmp    ffffffff8021b450 <__RME_X64_SMP_Detect+0x25a>
                    RME_X64_IOAPIC_Info[RME_X64_Num_IOAPIC].IOAPIC_ID=IOAPIC->ID;
ffffffff8021b436:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b43a:	0f b6 50 02          	movzbl 0x2(%rax),%edx
ffffffff8021b43e:	48 8b 05 7b 4e 02 00 	mov    0x24e7b(%rip),%rax        # ffffffff802402c0 <RME_X64_Num_IOAPIC>
ffffffff8021b445:	0f b6 d2             	movzbl %dl,%edx
ffffffff8021b448:	48 89 14 c5 e0 02 24 	mov    %rdx,-0x7fdbfd20(,%rax,8)
ffffffff8021b44f:	80 
                RME_X64_Num_IOAPIC++;
ffffffff8021b450:	48 8b 05 69 4e 02 00 	mov    0x24e69(%rip),%rax        # ffffffff802402c0 <RME_X64_Num_IOAPIC>
ffffffff8021b457:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b45b:	48 89 05 5e 4e 02 00 	mov    %rax,0x24e5e(%rip)        # ffffffff802402c0 <RME_X64_Num_IOAPIC>
                RME_ASSERT(RME_X64_Num_IOAPIC<=RME_X64_IOAPIC_NUM);
ffffffff8021b462:	48 8b 05 57 4e 02 00 	mov    0x24e57(%rip),%rax        # ffffffff802402c0 <RME_X64_Num_IOAPIC>
                break;
ffffffff8021b469:	e9 9e 00 00 00       	jmp    ffffffff8021b50c <__RME_X64_SMP_Detect+0x316>
                OVERRIDE=(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record*)Ptr;
ffffffff8021b46e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b472:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record))
ffffffff8021b476:	48 83 7d e8 06       	cmpq   $0x6,-0x18(%rbp)
ffffffff8021b47b:	0f 86 8a 00 00 00    	jbe    ffffffff8021b50b <__RME_X64_SMP_Detect+0x315>
                RME_DBG_S("\n\rACPI: OVERRIDE Bus ");
ffffffff8021b481:	48 c7 c7 db 75 22 80 	mov    $0xffffffff802275db,%rdi
ffffffff8021b488:	e8 98 15 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
                RME_Int_Print(OVERRIDE->Bus);
ffffffff8021b48d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b491:	0f b6 40 02          	movzbl 0x2(%rax),%eax
ffffffff8021b495:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b498:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b49b:	e8 93 13 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(", Source ");
ffffffff8021b4a0:	48 c7 c7 f1 75 22 80 	mov    $0xffffffff802275f1,%rdi
ffffffff8021b4a7:	e8 79 15 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
                RME_Hex_Print(OVERRIDE->Source);
ffffffff8021b4ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b4b0:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b4b4:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b4b7:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b4ba:	e8 a8 14 ff ff       	call   ffffffff8020c967 <RME_Hex_Print>
                RME_DBG_S(", GSI ");
ffffffff8021b4bf:	48 c7 c7 fb 75 22 80 	mov    $0xffffffff802275fb,%rdi
ffffffff8021b4c6:	e8 5a 15 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
                RME_Int_Print(OVERRIDE->GS_Interrupt);
ffffffff8021b4cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b4cf:	0f b6 40 04          	movzbl 0x4(%rax),%eax
ffffffff8021b4d3:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b4d6:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b4d9:	e8 55 13 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(", Flags ");
ffffffff8021b4de:	48 c7 c7 02 76 22 80 	mov    $0xffffffff80227602,%rdi
ffffffff8021b4e5:	e8 3b 15 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);
ffffffff8021b4ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b4ee:	0f b7 40 05          	movzwl 0x5(%rax),%eax
ffffffff8021b4f2:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b4f5:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b4f8:	e8 36 13 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                break;
ffffffff8021b4fd:	eb 0d                	jmp    ffffffff8021b50c <__RME_X64_SMP_Detect+0x316>
            default:break;
ffffffff8021b4ff:	90                   	nop
ffffffff8021b500:	eb 0a                	jmp    ffffffff8021b50c <__RME_X64_SMP_Detect+0x316>
                    break;
ffffffff8021b502:	90                   	nop
ffffffff8021b503:	eb 07                	jmp    ffffffff8021b50c <__RME_X64_SMP_Detect+0x316>
                    break;
ffffffff8021b505:	90                   	nop
ffffffff8021b506:	eb 04                	jmp    ffffffff8021b50c <__RME_X64_SMP_Detect+0x316>
                    break;
ffffffff8021b508:	90                   	nop
ffffffff8021b509:	eb 01                	jmp    ffffffff8021b50c <__RME_X64_SMP_Detect+0x316>
                    break;
ffffffff8021b50b:	90                   	nop
        }
        
        Ptr+=Length;
ffffffff8021b50c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b510:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    while(Ptr<End)
ffffffff8021b514:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b518:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8021b51c:	0f 82 5a fd ff ff    	jb     ffffffff8021b27c <__RME_X64_SMP_Detect+0x86>
ffffffff8021b522:	eb 04                	jmp    ffffffff8021b528 <__RME_X64_SMP_Detect+0x332>
            break;
ffffffff8021b524:	90                   	nop
ffffffff8021b525:	eb 01                	jmp    ffffffff8021b528 <__RME_X64_SMP_Detect+0x332>
            break;
ffffffff8021b527:	90                   	nop
    }

    return 0;
ffffffff8021b528:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b52d:	c9                   	leave
ffffffff8021b52e:	c3                   	ret

ffffffff8021b52f <__RME_X64_ACPI_Debug>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
void __RME_X64_ACPI_Debug(struct RME_X64_ACPI_Desc_Hdr *Header)
{
ffffffff8021b52f:	55                   	push   %rbp
ffffffff8021b530:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b533:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021b537:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    rme_u8_t Creator[5];
    rme_ptr_t OEM_Rev;
    rme_ptr_t Creator_Rev;

    /* Copy everything into our buffer */
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff8021b53b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8021b53f:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
ffffffff8021b543:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b548:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b54b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b54e:	e8 62 19 ff ff       	call   ffffffff8020ceb5 <_RME_Memcpy>
    Signature[4]='\0';
ffffffff8021b553:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff8021b557:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b55b:	48 8d 48 0a          	lea    0xa(%rax),%rcx
ffffffff8021b55f:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
ffffffff8021b563:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff8021b568:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b56b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b56e:	e8 42 19 ff ff       	call   ffffffff8020ceb5 <_RME_Memcpy>
    ID[6]='\0';
ffffffff8021b573:	c6 45 ea 00          	movb   $0x0,-0x16(%rbp)
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff8021b577:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b57b:	48 8d 48 10          	lea    0x10(%rax),%rcx
ffffffff8021b57f:	48 8d 45 db          	lea    -0x25(%rbp),%rax
ffffffff8021b583:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8021b588:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b58b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b58e:	e8 22 19 ff ff       	call   ffffffff8020ceb5 <_RME_Memcpy>
    Table_ID[8]='\0';
ffffffff8021b593:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff8021b597:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b59b:	48 8d 48 1c          	lea    0x1c(%rax),%rcx
ffffffff8021b59f:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
ffffffff8021b5a3:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b5a8:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b5ab:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b5ae:	e8 02 19 ff ff       	call   ffffffff8020ceb5 <_RME_Memcpy>
    Creator[4]='\0';
ffffffff8021b5b3:	c6 45 da 00          	movb   $0x0,-0x26(%rbp)

    OEM_Rev=Header->OEM_Revision;
ffffffff8021b5b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b5bb:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff8021b5be:	89 c0                	mov    %eax,%eax
ffffffff8021b5c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Creator_Rev=Header->Creator_Revision;
ffffffff8021b5c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b5c8:	8b 40 20             	mov    0x20(%rax),%eax
ffffffff8021b5cb:	89 c0                	mov    %eax,%eax
ffffffff8021b5cd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* And print these entries */
    RME_DBG_S("\n\rACPI:");
ffffffff8021b5d1:	48 c7 c7 0b 76 22 80 	mov    $0xffffffff8022760b,%rdi
ffffffff8021b5d8:	e8 48 14 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(Signature);
ffffffff8021b5dd:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
ffffffff8021b5e1:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b5e4:	e8 3c 14 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b5e9:	48 c7 c7 13 76 22 80 	mov    $0xffffffff80227613,%rdi
ffffffff8021b5f0:	e8 30 14 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(ID);
ffffffff8021b5f5:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
ffffffff8021b5f9:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b5fc:	e8 24 14 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b601:	48 c7 c7 13 76 22 80 	mov    $0xffffffff80227613,%rdi
ffffffff8021b608:	e8 18 14 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(Table_ID);
ffffffff8021b60d:	48 8d 45 db          	lea    -0x25(%rbp),%rax
ffffffff8021b611:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b614:	e8 0c 14 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b619:	48 c7 c7 13 76 22 80 	mov    $0xffffffff80227613,%rdi
ffffffff8021b620:	e8 00 14 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_I(OEM_Rev);
ffffffff8021b625:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b629:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b62c:	e8 02 12 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S(", ");
ffffffff8021b631:	48 c7 c7 13 76 22 80 	mov    $0xffffffff80227613,%rdi
ffffffff8021b638:	e8 e8 13 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(Creator);
ffffffff8021b63d:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
ffffffff8021b641:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b644:	e8 dc 13 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b649:	48 c7 c7 13 76 22 80 	mov    $0xffffffff80227613,%rdi
ffffffff8021b650:	e8 d0 13 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_I(Creator_Rev);
ffffffff8021b655:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b659:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b65c:	e8 d2 11 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S(".");
ffffffff8021b661:	48 c7 c7 16 76 22 80 	mov    $0xffffffff80227616,%rdi
ffffffff8021b668:	e8 b8 13 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
}
ffffffff8021b66d:	90                   	nop
ffffffff8021b66e:	c9                   	leave
ffffffff8021b66f:	c3                   	ret

ffffffff8021b670 <__RME_X64_ACPI_Init>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
rme_ret_t __RME_X64_ACPI_Init(void)
{
ffffffff8021b670:	55                   	push   %rbp
ffffffff8021b671:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b674:	48 83 ec 30          	sub    $0x30,%rsp
    rme_cnt_t Count;
    rme_cnt_t Table_Num;
    struct RME_X64_ACPI_RDSP_Desc* RDSP=RME_NULL;
ffffffff8021b678:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021b67f:	00 
    struct RME_X64_ACPI_RSDT_Hdr* RSDT=RME_NULL;
ffffffff8021b680:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8021b687:	00 
    struct RME_X64_ACPI_MADT_Hdr* MADT=RME_NULL;
ffffffff8021b688:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021b68f:	00 
    struct RME_X64_ACPI_Desc_Hdr* Header=RME_NULL;
ffffffff8021b690:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8021b697:	00 

    /* Try to find RDSP */
    RDSP=__RME_X64_RDSP_Find();
ffffffff8021b698:	e8 fe fa ff ff       	call   ffffffff8021b19b <__RME_X64_RDSP_Find>
ffffffff8021b69d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    RME_DBG_S("\r\nRDSP address: ");
ffffffff8021b6a1:	48 c7 c7 18 76 22 80 	mov    $0xffffffff80227618,%rdi
ffffffff8021b6a8:	e8 78 13 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H((rme_ptr_t)RDSP);
ffffffff8021b6ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b6b1:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b6b4:	e8 ae 12 ff ff       	call   ffffffff8020c967 <RME_Hex_Print>
    /* Find the RSDT */
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff8021b6b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b6bd:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff8021b6c0:	89 c2                	mov    %eax,%edx
ffffffff8021b6c2:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b6c9:	80 ff ff 
ffffffff8021b6cc:	48 01 d0             	add    %rdx,%rax
ffffffff8021b6cf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_DBG_S("\r\nRSDT address: ");
ffffffff8021b6d3:	48 c7 c7 29 76 22 80 	mov    $0xffffffff80227629,%rdi
ffffffff8021b6da:	e8 46 13 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H((rme_ptr_t)RSDT);
ffffffff8021b6df:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b6e3:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b6e6:	e8 7c 12 ff ff       	call   ffffffff8020c967 <RME_Hex_Print>
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;
ffffffff8021b6eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b6ef:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b6f2:	89 c0                	mov    %eax,%eax
ffffffff8021b6f4:	48 83 e8 24          	sub    $0x24,%rax
ffffffff8021b6f8:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff8021b6fc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    for(Count=0;Count<Table_Num;Count++)
ffffffff8021b700:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021b707:	00 
ffffffff8021b708:	eb 59                	jmp    ffffffff8021b763 <__RME_X64_ACPI_Init+0xf3>
    {
        /* See what did we find */
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff8021b70a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b70e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b712:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8021b716:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
ffffffff8021b71a:	89 c2                	mov    %eax,%edx
ffffffff8021b71c:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b723:	80 ff ff 
ffffffff8021b726:	48 01 d0             	add    %rdx,%rax
ffffffff8021b729:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        __RME_X64_ACPI_Debug(Header);
ffffffff8021b72d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b731:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b734:	e8 f6 fd ff ff       	call   ffffffff8021b52f <__RME_X64_ACPI_Debug>
        /* See if this is the MADT */
        if(_RME_Memcmp(Header->Signature, "APIC", 4)==0)
ffffffff8021b739:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b73d:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b742:	48 c7 c6 3a 76 22 80 	mov    $0xffffffff8022763a,%rsi
ffffffff8021b749:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b74c:	e8 d7 16 ff ff       	call   ffffffff8020ce28 <_RME_Memcmp>
ffffffff8021b751:	48 85 c0             	test   %rax,%rax
ffffffff8021b754:	75 08                	jne    ffffffff8021b75e <__RME_X64_ACPI_Init+0xee>
            MADT=(struct RME_X64_ACPI_MADT_Hdr*)Header;
ffffffff8021b756:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b75a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0;Count<Table_Num;Count++)
ffffffff8021b75e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021b763:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b767:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021b76b:	7c 9d                	jl     ffffffff8021b70a <__RME_X64_ACPI_Init+0x9a>
    }

    return __RME_X64_SMP_Detect(MADT);
ffffffff8021b76d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b771:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b774:	e8 7d fa ff ff       	call   ffffffff8021b1f6 <__RME_X64_SMP_Detect>
}
ffffffff8021b779:	c9                   	leave
ffffffff8021b77a:	c3                   	ret

ffffffff8021b77b <__RME_X64_Feature_Get>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_Feature_Get(void)
{
ffffffff8021b77b:	55                   	push   %rbp
ffffffff8021b77c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b77f:	48 83 ec 10          	sub    $0x10,%rsp
    rme_cnt_t Count;

    /* What's the maximum feature? */
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff8021b783:	48 c7 c1 68 03 24 80 	mov    $0xffffffff80240368,%rcx
ffffffff8021b78a:	48 c7 c2 60 03 24 80 	mov    $0xffffffff80240360,%rdx
ffffffff8021b791:	48 c7 c6 58 03 24 80 	mov    $0xffffffff80240358,%rsi
ffffffff8021b798:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff8021b79d:	e8 a7 00 ff ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021b7a2:	48 89 05 97 4b 02 00 	mov    %rax,0x24b97(%rip)        # ffffffff80240340 <RME_X64_Feature>
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][1]),
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][2]),
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][3]));
    RME_X64_Feature.Func[0][0]=RME_X64_Feature.Max_Func;
ffffffff8021b7a9:	48 8b 05 90 4b 02 00 	mov    0x24b90(%rip),%rax        # ffffffff80240340 <RME_X64_Feature>
ffffffff8021b7b0:	48 89 05 99 4b 02 00 	mov    %rax,0x24b99(%rip)        # ffffffff80240350 <RME_X64_Feature+0x10>

    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff8021b7b7:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8021b7be:	00 
ffffffff8021b7bf:	eb 5c                	jmp    ffffffff8021b81d <__RME_X64_Feature_Get+0xa2>
    {
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][1]),
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][2]),
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][3]));
ffffffff8021b7c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b7c5:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b7c9:	48 83 c0 28          	add    $0x28,%rax
ffffffff8021b7cd:	48 8d 88 40 03 24 80 	lea    -0x7fdbfcc0(%rax),%rcx
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][2]),
ffffffff8021b7d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b7d8:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b7dc:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b7e0:	48 8d 90 40 03 24 80 	lea    -0x7fdbfcc0(%rax),%rdx
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][1]),
ffffffff8021b7e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b7eb:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b7ef:	48 83 c0 18          	add    $0x18,%rax
ffffffff8021b7f3:	48 8d b0 40 03 24 80 	lea    -0x7fdbfcc0(%rax),%rsi
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff8021b7fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b7fe:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b801:	e8 43 00 ff ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021b806:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b80a:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021b80e:	48 81 c2 50 03 24 80 	add    $0xffffffff80240350,%rdx
ffffffff8021b815:	48 89 02             	mov    %rax,(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff8021b818:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021b81d:	48 8b 15 1c 4b 02 00 	mov    0x24b1c(%rip),%rdx        # ffffffff80240340 <RME_X64_Feature>
ffffffff8021b824:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b828:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b82b:	73 94                	jae    ffffffff8021b7c1 <__RME_X64_Feature_Get+0x46>
    }

    /* What's the maximum extended feature? */
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff8021b82d:	48 c7 c1 68 05 24 80 	mov    $0xffffffff80240568,%rcx
ffffffff8021b834:	48 c7 c2 60 05 24 80 	mov    $0xffffffff80240560,%rdx
ffffffff8021b83b:	48 c7 c6 58 05 24 80 	mov    $0xffffffff80240558,%rsi
ffffffff8021b842:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff8021b847:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b84a:	e8 fa ff fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021b84f:	48 89 05 f2 4a 02 00 	mov    %rax,0x24af2(%rip)        # ffffffff80240348 <RME_X64_Feature+0x8>
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][1]),
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][2]),
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][3]));
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;
ffffffff8021b856:	48 8b 05 eb 4a 02 00 	mov    0x24aeb(%rip),%rax        # ffffffff80240348 <RME_X64_Feature+0x8>
ffffffff8021b85d:	48 89 05 ec 4c 02 00 	mov    %rax,0x24cec(%rip)        # ffffffff80240550 <RME_X64_Feature+0x210>


    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff8021b864:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8021b86b:	00 
ffffffff8021b86c:	eb 67                	jmp    ffffffff8021b8d5 <__RME_X64_Feature_Get+0x15a>
    {
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][1]),
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][2]),
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][3]));
ffffffff8021b86e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b872:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b876:	48 05 28 02 00 00    	add    $0x228,%rax
ffffffff8021b87c:	48 8d 88 40 03 24 80 	lea    -0x7fdbfcc0(%rax),%rcx
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][2]),
ffffffff8021b883:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b887:	48 83 c0 11          	add    $0x11,%rax
ffffffff8021b88b:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b88f:	48 8d 90 40 03 24 80 	lea    -0x7fdbfcc0(%rax),%rdx
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][1]),
ffffffff8021b896:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b89a:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b89e:	48 05 18 02 00 00    	add    $0x218,%rax
ffffffff8021b8a4:	48 05 40 03 24 80    	add    $0xffffffff80240340,%rax
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff8021b8aa:	be 00 00 00 80       	mov    $0x80000000,%esi
ffffffff8021b8af:	48 0b 75 f8          	or     -0x8(%rbp),%rsi
ffffffff8021b8b3:	48 89 f7             	mov    %rsi,%rdi
ffffffff8021b8b6:	48 89 c6             	mov    %rax,%rsi
ffffffff8021b8b9:	e8 8b ff fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021b8be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b8c2:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021b8c6:	48 81 c2 50 05 24 80 	add    $0xffffffff80240550,%rdx
ffffffff8021b8cd:	48 89 02             	mov    %rax,(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff8021b8d0:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021b8d5:	48 8b 05 6c 4a 02 00 	mov    0x24a6c(%rip),%rax        # ffffffff80240348 <RME_X64_Feature+0x8>
ffffffff8021b8dc:	48 8d 90 00 00 00 80 	lea    -0x80000000(%rax),%rdx
ffffffff8021b8e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b8e7:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b8ea:	73 82                	jae    ffffffff8021b86e <__RME_X64_Feature_Get+0xf3>
    }

    /* TODO: Check these flags. If not satisfied, we hang immediately. */
}
ffffffff8021b8ec:	90                   	nop
ffffffff8021b8ed:	90                   	nop
ffffffff8021b8ee:	c9                   	leave
ffffffff8021b8ef:	c3                   	ret

ffffffff8021b8f0 <__RME_X64_Mem_Init>:
volatile struct RME_List RME_X64_Phys_Mem;
/* The BIOS wouldn't really report more than 1024 blocks of memory */
struct __RME_X64_Mem RME_X64_Mem[1024];

void __RME_X64_Mem_Init(rme_ptr_t MMap_Addr, rme_ptr_t MMap_Length)
{
ffffffff8021b8f0:	55                   	push   %rbp
ffffffff8021b8f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b8f4:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021b8f8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021b8fc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    struct multiboot_mmap_entry* MMap;
    volatile struct RME_List* Trav_Ptr;
    rme_ptr_t MMap_Cnt;
    rme_ptr_t Info_Cnt;
    MMap_Cnt=0;
ffffffff8021b900:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021b907:	00 
    Info_Cnt=0;
ffffffff8021b908:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021b90f:	00 

    __RME_List_Crt(&RME_X64_Phys_Mem);
ffffffff8021b910:	48 c7 c7 00 70 23 80 	mov    $0xffffffff80237000,%rdi
ffffffff8021b917:	e8 ec b5 00 00       	call   ffffffff80226f08 <__RME_List_Crt>

    while(MMap_Cnt<MMap_Length)
ffffffff8021b91c:	e9 72 01 00 00       	jmp    ffffffff8021ba93 <__RME_X64_Mem_Init+0x1a3>
    {
        MMap=(struct multiboot_mmap_entry*)(MMap_Addr+MMap_Cnt);
ffffffff8021b921:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021b925:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b929:	48 01 d0             	add    %rdx,%rax
ffffffff8021b92c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        MMap_Cnt+=MMap->size+4;
ffffffff8021b930:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b934:	8b 00                	mov    (%rax),%eax
ffffffff8021b936:	83 c0 04             	add    $0x4,%eax
ffffffff8021b939:	89 c0                	mov    %eax,%eax
ffffffff8021b93b:	48 01 45 f0          	add    %rax,-0x10(%rbp)

        if(MMap->type!=1)
ffffffff8021b93f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b943:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021b946:	83 f8 01             	cmp    $0x1,%eax
ffffffff8021b949:	74 5a                	je     ffffffff8021b9a5 <__RME_X64_Mem_Init+0xb5>
        {
            RME_DBG_S("\n\rPhysical memory: 0x");
ffffffff8021b94b:	48 c7 c7 3f 76 22 80 	mov    $0xffffffff8022763f,%rdi
ffffffff8021b952:	e8 ce 10 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
            RME_Hex_Print(MMap->addr);
ffffffff8021b957:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b95b:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021b95f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b962:	e8 00 10 ff ff       	call   ffffffff8020c967 <RME_Hex_Print>
            RME_DBG_S(", 0x");
ffffffff8021b967:	48 c7 c7 55 76 22 80 	mov    $0xffffffff80227655,%rdi
ffffffff8021b96e:	e8 b2 10 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
            RME_Hex_Print(MMap->len);
ffffffff8021b973:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b977:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021b97b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b97e:	e8 e4 0f ff ff       	call   ffffffff8020c967 <RME_Hex_Print>
            RME_DBG_S(", ");
ffffffff8021b983:	48 c7 c7 13 76 22 80 	mov    $0xffffffff80227613,%rdi
ffffffff8021b98a:	e8 96 10 ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
            RME_Hex_Print(MMap->type);
ffffffff8021b98f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b993:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021b996:	89 c0                	mov    %eax,%eax
ffffffff8021b998:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b99b:	e8 c7 0f ff ff       	call   ffffffff8020c967 <RME_Hex_Print>
            continue;
ffffffff8021b9a0:	e9 ee 00 00 00       	jmp    ffffffff8021ba93 <__RME_X64_Mem_Init+0x1a3>
        }

        Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021b9a5:	48 8b 05 54 b6 01 00 	mov    0x1b654(%rip),%rax        # ffffffff80237000 <RME_X64_Phys_Mem>
ffffffff8021b9ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021b9b0:	eb 20                	jmp    ffffffff8021b9d2 <__RME_X64_Mem_Init+0xe2>
        {
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
ffffffff8021b9b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b9b6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021b9ba:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021b9be:	48 8b 52 04          	mov    0x4(%rdx),%rdx
ffffffff8021b9c2:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b9c5:	72 17                	jb     ffffffff8021b9de <__RME_X64_Mem_Init+0xee>
                break;
            Trav_Ptr=Trav_Ptr->Next;
ffffffff8021b9c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b9cb:	48 8b 00             	mov    (%rax),%rax
ffffffff8021b9ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021b9d2:	48 81 7d f8 00 70 23 	cmpq   $0xffffffff80237000,-0x8(%rbp)
ffffffff8021b9d9:	80 
ffffffff8021b9da:	75 d6                	jne    ffffffff8021b9b2 <__RME_X64_Mem_Init+0xc2>
ffffffff8021b9dc:	eb 01                	jmp    ffffffff8021b9df <__RME_X64_Mem_Init+0xef>
                break;
ffffffff8021b9de:	90                   	nop
        }
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff8021b9df:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b9e3:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021b9e7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021b9eb:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021b9ef:	48 81 c2 30 70 23 80 	add    $0xffffffff80237030,%rdx
ffffffff8021b9f6:	48 89 02             	mov    %rax,(%rdx)
        RME_X64_Mem[Info_Cnt].Length=MMap->len;
ffffffff8021b9f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b9fd:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021ba01:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021ba05:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021ba09:	48 81 c2 38 70 23 80 	add    $0xffffffff80237038,%rdx
ffffffff8021ba10:	48 89 02             	mov    %rax,(%rdx)
        __RME_List_Ins(&(RME_X64_Mem[Info_Cnt].Head),Trav_Ptr->Prev,Trav_Ptr);
ffffffff8021ba13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba17:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021ba1b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021ba1f:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021ba23:	48 8d 8a 20 70 23 80 	lea    -0x7fdc8fe0(%rdx),%rcx
ffffffff8021ba2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021ba2e:	48 89 c6             	mov    %rax,%rsi
ffffffff8021ba31:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021ba34:	e8 f5 b4 00 00       	call   ffffffff80226f2e <__RME_List_Ins>

        /* Just print them then */
        RME_DBG_S("\n\rPhysical memory: 0x");
ffffffff8021ba39:	48 c7 c7 3f 76 22 80 	mov    $0xffffffff8022763f,%rdi
ffffffff8021ba40:	e8 e0 0f ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
        RME_Hex_Print(MMap->addr);
ffffffff8021ba45:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021ba49:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021ba4d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ba50:	e8 12 0f ff ff       	call   ffffffff8020c967 <RME_Hex_Print>
        RME_DBG_S(", 0x");
ffffffff8021ba55:	48 c7 c7 55 76 22 80 	mov    $0xffffffff80227655,%rdi
ffffffff8021ba5c:	e8 c4 0f ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
        RME_Hex_Print(MMap->len);
ffffffff8021ba61:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021ba65:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021ba69:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ba6c:	e8 f6 0e ff ff       	call   ffffffff8020c967 <RME_Hex_Print>
        RME_DBG_S(", ");
ffffffff8021ba71:	48 c7 c7 13 76 22 80 	mov    $0xffffffff80227613,%rdi
ffffffff8021ba78:	e8 a8 0f ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
        RME_Hex_Print(MMap->type);
ffffffff8021ba7d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021ba81:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021ba84:	89 c0                	mov    %eax,%eax
ffffffff8021ba86:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ba89:	e8 d9 0e ff ff       	call   ffffffff8020c967 <RME_Hex_Print>

        Info_Cnt++;
ffffffff8021ba8e:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    while(MMap_Cnt<MMap_Length)
ffffffff8021ba93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ba97:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021ba9b:	0f 82 80 fe ff ff    	jb     ffffffff8021b921 <__RME_X64_Mem_Init+0x31>
    }

    /* Check if any memory segment overlaps. If yes, merge them into one,
     * until there is no overlapping segments */
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021baa1:	48 8b 05 58 b5 01 00 	mov    0x1b558(%rip),%rax        # ffffffff80237000 <RME_X64_Phys_Mem>
ffffffff8021baa8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021baac:	eb 75                	jmp    ffffffff8021bb23 <__RME_X64_Mem_Init+0x233>
    {
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021baae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bab2:	48 8b 50 10          	mov    0x10(%rax),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length)>
ffffffff8021bab6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021baba:	48 8b 40 18          	mov    0x18(%rax),%rax
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021babe:	48 01 c2             	add    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr)
ffffffff8021bac1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bac5:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bac8:	48 8b 40 10          	mov    0x10(%rax),%rax
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bacc:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021bacf:	73 47                	jae    ffffffff8021bb18 <__RME_X64_Mem_Init+0x228>
        {
            /* Merge these two blocks */
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length=
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff8021bad1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bad5:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bad8:	48 8b 50 10          	mov    0x10(%rax),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021badc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bae0:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bae3:	48 8b 40 18          	mov    0x18(%rax),%rax
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff8021bae7:	48 01 c2             	add    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr;
ffffffff8021baea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021baee:	48 8b 40 10          	mov    0x10(%rax),%rax
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021baf2:	48 29 c2             	sub    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length=
ffffffff8021baf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021baf9:	48 89 50 18          	mov    %rdx,0x18(%rax)
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff8021bafd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb01:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bb04:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021bb07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb0b:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021bb0e:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bb11:	e8 5d b4 00 00       	call   ffffffff80226f73 <__RME_List_Del>
            continue;
ffffffff8021bb16:	eb 0b                	jmp    ffffffff8021bb23 <__RME_X64_Mem_Init+0x233>
        }
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bb18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb1c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bb1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021bb23:	48 81 7d f8 00 70 23 	cmpq   $0xffffffff80237000,-0x8(%rbp)
ffffffff8021bb2a:	80 
ffffffff8021bb2b:	74 13                	je     ffffffff8021bb40 <__RME_X64_Mem_Init+0x250>
ffffffff8021bb2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb31:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bb34:	48 3d 00 70 23 80    	cmp    $0xffffffff80237000,%rax
ffffffff8021bb3a:	0f 85 6e ff ff ff    	jne    ffffffff8021baae <__RME_X64_Mem_Init+0x1be>
    }

    /* Calculate total memory */
    MMap_Cnt=0;
ffffffff8021bb40:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021bb47:	00 
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021bb48:	48 8b 05 b1 b4 01 00 	mov    0x1b4b1(%rip),%rax        # ffffffff80237000 <RME_X64_Phys_Mem>
ffffffff8021bb4f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bb53:	eb 17                	jmp    ffffffff8021bb6c <__RME_X64_Mem_Init+0x27c>
    {
        MMap_Cnt+=((struct __RME_X64_Mem*)(Trav_Ptr))->Length;
ffffffff8021bb55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb59:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021bb5d:	48 01 45 f0          	add    %rax,-0x10(%rbp)
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bb61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb65:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bb68:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bb6c:	48 81 7d f8 00 70 23 	cmpq   $0xffffffff80237000,-0x8(%rbp)
ffffffff8021bb73:	80 
ffffffff8021bb74:	75 df                	jne    ffffffff8021bb55 <__RME_X64_Mem_Init+0x265>
    }
    RME_DBG_S("\n\rTotal physical memory: 0x");
ffffffff8021bb76:	48 c7 c7 5a 76 22 80 	mov    $0xffffffff8022765a,%rdi
ffffffff8021bb7d:	e8 a3 0e ff ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_Hex_Print(MMap_Cnt);
ffffffff8021bb82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bb86:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bb89:	e8 d9 0d ff ff       	call   ffffffff8020c967 <RME_Hex_Print>

    /* At least 256MB memory required on x64 architecture */
    RME_ASSERT(MMap_Cnt>=RME_POW2(RME_PGT_SIZE_256M));

    /* Kernel virtual memory layout */
    RME_X64_Layout.Kot_Start=(rme_ptr_t)RME_KOT_VA_BASE;
ffffffff8021bb8e:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021bb95:	80 ff ff 
ffffffff8021bb98:	48 89 05 a1 34 02 00 	mov    %rax,0x234a1(%rip)        # ffffffff8023f040 <RME_X64_Layout>
    /* +1G in cases where we have > 3GB memory for covering the memory hole */
    Info_Cnt=(MMap_Cnt>3*RME_POW2(RME_PGT_SIZE_1G))?(MMap_Cnt+RME_POW2(RME_PGT_SIZE_1G)):MMap_Cnt;
ffffffff8021bb9f:	b8 00 00 00 c0       	mov    $0xc0000000,%eax
ffffffff8021bba4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8021bba8:	73 0c                	jae    ffffffff8021bbb6 <__RME_X64_Mem_Init+0x2c6>
ffffffff8021bbaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bbae:	48 05 00 00 00 40    	add    $0x40000000,%rax
ffffffff8021bbb4:	eb 04                	jmp    ffffffff8021bbba <__RME_X64_Mem_Init+0x2ca>
ffffffff8021bbb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bbba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    RME_X64_Layout.Kot_Size=((Info_Cnt>>RME_KOM_SLOT_ORDER)>>RME_WORD_ORDER)+1;
ffffffff8021bbbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021bbc2:	48 c1 e8 0a          	shr    $0xa,%rax
ffffffff8021bbc6:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021bbca:	48 89 05 77 34 02 00 	mov    %rax,0x23477(%rip)        # ffffffff8023f048 <RME_X64_Layout+0x8>

    /* Calculate the per-CPU data structure size - each CPU have two 4k pages */
    RME_X64_Layout.PerCPU_Start=RME_ROUND_UP(RME_X64_Layout.Kot_Start+RME_X64_Layout.Kot_Size,RME_PGT_SIZE_4K);
ffffffff8021bbd1:	48 8b 15 68 34 02 00 	mov    0x23468(%rip),%rdx        # ffffffff8023f040 <RME_X64_Layout>
ffffffff8021bbd8:	48 8b 05 69 34 02 00 	mov    0x23469(%rip),%rax        # ffffffff8023f048 <RME_X64_Layout+0x8>
ffffffff8021bbdf:	48 01 d0             	add    %rdx,%rax
ffffffff8021bbe2:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff8021bbe8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff8021bbee:	48 89 05 5b 34 02 00 	mov    %rax,0x2345b(%rip)        # ffffffff8023f050 <RME_X64_Layout+0x10>
    RME_X64_Layout.PerCPU_Size=2*RME_POW2(RME_PGT_SIZE_4K)*RME_X64_Num_CPU;
ffffffff8021bbf5:	48 8b 05 ac 36 02 00 	mov    0x236ac(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff8021bbfc:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff8021bc00:	48 89 05 51 34 02 00 	mov    %rax,0x23451(%rip)        # ffffffff8023f058 <RME_X64_Layout+0x18>

    /* Now decide the size of the stack */
    RME_X64_Layout.Stack_Size=RME_X64_Num_CPU<<RME_X64_KSTACK_ORDER;
ffffffff8021bc07:	48 8b 05 9a 36 02 00 	mov    0x2369a(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff8021bc0e:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff8021bc12:	48 89 05 87 36 02 00 	mov    %rax,0x23687(%rip)        # ffffffff8023f2a0 <RME_X64_Layout+0x260>
}
ffffffff8021bc19:	90                   	nop
ffffffff8021bc1a:	c9                   	leave
ffffffff8021bc1b:	c3                   	ret

ffffffff8021bc1c <__RME_X64_CPU_Local_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_CPU_Local_Init(void)
{
ffffffff8021bc1c:	55                   	push   %rbp
ffffffff8021bc1d:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021bc20:	48 83 ec 40          	sub    $0x40,%rsp
    struct RME_CPU_Local* CPU_Local;
    rme_ptr_t* GDT_Table;
    rme_ptr_t TSS_Table;
    rme_cnt_t Count;

    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff8021bc24:	48 8b 05 25 34 02 00 	mov    0x23425(%rip),%rax        # ffffffff8023f050 <RME_X64_Layout+0x10>
ffffffff8021bc2b:	48 8b 15 7e 36 02 00 	mov    0x2367e(%rip),%rdx        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff8021bc32:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021bc36:	48 01 d0             	add    %rdx,%rax
ffffffff8021bc39:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
ffffffff8021bc3d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021bc44:	00 
ffffffff8021bc45:	eb 1b                	jmp    ffffffff8021bc62 <__RME_X64_CPU_Local_Init+0x46>
        IDT_Table[Count].Type_Attr=0;
ffffffff8021bc47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc4b:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021bc4f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bc52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bc56:	48 01 d0             	add    %rdx,%rax
ffffffff8021bc59:	c6 40 05 00          	movb   $0x0,0x5(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8021bc5d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021bc62:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff8021bc69:	00 
ffffffff8021bc6a:	7e db                	jle    ffffffff8021bc47 <__RME_X64_CPU_Local_Init+0x2b>

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8021bc6c:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021bc73:	89 c2                	mov    %eax,%edx
ffffffff8021bc75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bc79:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bc7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bc80:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bc86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bc8a:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bc8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bc92:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bc96:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021bc9d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bca1:	89 c2                	mov    %eax,%edx
ffffffff8021bca3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bca7:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bcab:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021bcb2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bcb6:	89 c2                	mov    %eax,%edx
ffffffff8021bcb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bcbc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bcbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bcc3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8021bcca:	48 c7 c2 df b8 20 80 	mov    $0xffffffff8020b8df,%rdx
ffffffff8021bcd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bcd5:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bcd9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bcdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bce0:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bce4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bcea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bcee:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bcf2:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bcf6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bcfa:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bcfe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bd02:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
ffffffff8021bd09:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bd0d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bd10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd14:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bd18:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bd1c:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
ffffffff8021bd23:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bd27:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bd2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd2e:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bd32:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bd35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd39:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bd3d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8021bd44:	48 c7 c2 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rdx
ffffffff8021bd4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd4f:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bd53:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bd56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd5a:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bd5e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bd64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd68:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bd6c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bd70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd74:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bd78:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bd7c:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
ffffffff8021bd83:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bd87:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bd8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd8e:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bd92:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bd96:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
ffffffff8021bd9d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bda1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bda4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bda8:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bdac:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bdaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bdb3:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bdb7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8021bdbe:	48 c7 c2 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rdx
ffffffff8021bdc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bdc9:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bdcd:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bdd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bdd4:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bdd8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bdde:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bde2:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bde6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bdea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bdee:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bdf2:	c6 40 05 ee          	movb   $0xee,0x5(%rax)
ffffffff8021bdf6:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
ffffffff8021bdfd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021be01:	48 89 c2             	mov    %rax,%rdx
ffffffff8021be04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be08:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021be0c:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021be10:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
ffffffff8021be17:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021be1b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021be1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be22:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021be26:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021be29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be2d:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021be31:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8021be38:	48 c7 c2 03 b9 20 80 	mov    $0xffffffff8020b903,%rdx
ffffffff8021be3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be43:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021be47:	66 89 10             	mov    %dx,(%rax)
ffffffff8021be4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be4e:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021be52:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021be58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be5c:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021be60:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021be64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be68:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021be6c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021be70:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
ffffffff8021be77:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021be7b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021be7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be82:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021be86:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021be8a:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
ffffffff8021be91:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021be95:	48 89 c2             	mov    %rax,%rdx
ffffffff8021be98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be9c:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bea0:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bea3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bea7:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021beab:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8021beb2:	48 c7 c2 0c b9 20 80 	mov    $0xffffffff8020b90c,%rdx
ffffffff8021beb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bebd:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021bec1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bec4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bec8:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021becc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bed2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bed6:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021beda:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bede:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bee2:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021bee6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021beea:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
ffffffff8021bef1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bef5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bef8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021befc:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021bf00:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bf04:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
ffffffff8021bf0b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bf0f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bf12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf16:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021bf1a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bf1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf21:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021bf25:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8021bf2c:	48 c7 c2 15 b9 20 80 	mov    $0xffffffff8020b915,%rdx
ffffffff8021bf33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf37:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021bf3b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bf3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf42:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021bf46:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bf4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf50:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021bf54:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bf58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf5c:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021bf60:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bf64:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
ffffffff8021bf6b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bf6f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bf72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf76:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021bf7a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bf7e:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
ffffffff8021bf85:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bf89:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bf8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf90:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021bf94:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bf97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf9b:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021bf9f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff8021bfa6:	48 c7 c2 1e b9 20 80 	mov    $0xffffffff8020b91e,%rdx
ffffffff8021bfad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfb1:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021bfb5:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bfb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfbc:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021bfc0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bfc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfca:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021bfce:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bfd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfd6:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021bfda:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bfde:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff8021bfe5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bfe9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bfec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bff0:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021bff4:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bff8:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff8021bfff:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c003:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c006:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c00a:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c00e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c011:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c015:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c019:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff8021c020:	48 c7 c2 27 b9 20 80 	mov    $0xffffffff8020b927,%rdx
ffffffff8021c027:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c02b:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c02f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c032:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c036:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c03a:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c040:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c044:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c048:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c04c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c050:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c054:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c058:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
ffffffff8021c05f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c063:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c066:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c06a:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c06e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c072:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
ffffffff8021c079:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c07d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c080:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c084:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c088:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c08b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c08f:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c093:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8021c09a:	48 c7 c2 2e b9 20 80 	mov    $0xffffffff8020b92e,%rdx
ffffffff8021c0a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0a5:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c0ab:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c0ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0b2:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c0b8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c0be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0c2:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c0c8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c0cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0d0:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c0d6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c0da:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
ffffffff8021c0e1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c0e5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c0e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0ec:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c0f2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c0f6:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
ffffffff8021c0fd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c101:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c104:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c108:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c10e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c111:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c115:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c11b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8021c122:	48 c7 c2 37 b9 20 80 	mov    $0xffffffff8020b937,%rdx
ffffffff8021c129:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c12d:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c133:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c136:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c13a:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c140:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c146:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c14a:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c150:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c154:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c158:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c15e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c162:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
ffffffff8021c169:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c16d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c170:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c174:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c17a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c17e:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
ffffffff8021c185:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c189:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c18c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c190:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c196:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c199:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c19d:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c1a3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021c1aa:	48 c7 c2 3e b9 20 80 	mov    $0xffffffff8020b93e,%rdx
ffffffff8021c1b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1b5:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c1bb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c1be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1c2:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c1c8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c1ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1d2:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c1d8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c1dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1e0:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c1e6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c1ea:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
ffffffff8021c1f1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c1f5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c1f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1fc:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c202:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c206:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
ffffffff8021c20d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c211:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c214:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c218:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c21e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c221:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c225:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c22b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8021c232:	48 c7 c2 45 b9 20 80 	mov    $0xffffffff8020b945,%rdx
ffffffff8021c239:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c23d:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c243:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c246:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c24a:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c250:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c256:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c25a:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c260:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c264:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c268:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c26e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c272:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
ffffffff8021c279:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c27d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c280:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c284:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c28a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c28e:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
ffffffff8021c295:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c299:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c29c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2a0:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c2a6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c2a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2ad:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c2b3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8021c2ba:	48 c7 c2 4c b9 20 80 	mov    $0xffffffff8020b94c,%rdx
ffffffff8021c2c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2c5:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c2cb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c2ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2d2:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c2d8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c2de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2e2:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c2e8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c2ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2f0:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c2f6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c2fa:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
ffffffff8021c301:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c305:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c308:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c30c:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c312:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c316:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
ffffffff8021c31d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c321:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c324:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c328:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c32e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c331:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c335:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c33b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8021c342:	48 c7 c2 53 b9 20 80 	mov    $0xffffffff8020b953,%rdx
ffffffff8021c349:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c34d:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c353:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c356:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c35a:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c360:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c366:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c36a:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c370:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c374:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c378:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c37e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c382:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
ffffffff8021c389:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c38d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c390:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c394:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c39a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c39e:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
ffffffff8021c3a5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c3a9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c3ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3b0:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c3b6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c3b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3bd:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c3c3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8021c3ca:	48 c7 c2 5a b9 20 80 	mov    $0xffffffff8020b95a,%rdx
ffffffff8021c3d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3d5:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c3db:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c3de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3e2:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c3e8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c3ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3f2:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c3f8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c3fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c400:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c406:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c40a:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
ffffffff8021c411:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c415:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c418:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c41c:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c422:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c426:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
ffffffff8021c42d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c431:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c434:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c438:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c43e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c441:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c445:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c44b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8021c452:	48 c7 c2 63 b9 20 80 	mov    $0xffffffff8020b963,%rdx
ffffffff8021c459:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c45d:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c463:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c466:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c46a:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c470:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c476:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c47a:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c480:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c484:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c488:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c48e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c492:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
ffffffff8021c499:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c49d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c4a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4a4:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c4aa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c4ae:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
ffffffff8021c4b5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c4b9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c4bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4c0:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c4c6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c4c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4cd:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c4d3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8021c4da:	48 c7 c2 6a b9 20 80 	mov    $0xffffffff8020b96a,%rdx
ffffffff8021c4e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4e5:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c4eb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c4ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4f2:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c4f8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c4fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c502:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c508:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c50c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c510:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c516:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c51a:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
ffffffff8021c521:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c525:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c528:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c52c:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c532:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c536:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
ffffffff8021c53d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c541:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c544:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c548:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c54e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c551:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c555:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c55b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8021c562:	48 c7 c2 73 b9 20 80 	mov    $0xffffffff8020b973,%rdx
ffffffff8021c569:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c56d:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c573:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c576:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c57a:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c580:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c586:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c58a:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c590:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c594:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c598:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c59e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c5a2:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
ffffffff8021c5a9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c5ad:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c5b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5b4:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c5ba:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c5be:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
ffffffff8021c5c5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c5c9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c5cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5d0:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c5d6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c5d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5dd:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c5e3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff8021c5ea:	48 c7 c2 7c b9 20 80 	mov    $0xffffffff8020b97c,%rdx
ffffffff8021c5f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5f5:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c5fb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c5fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c602:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c608:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c60e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c612:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c618:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c61c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c620:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c626:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c62a:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
ffffffff8021c631:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c635:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c638:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c63c:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c642:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c646:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
ffffffff8021c64d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c651:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c654:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c658:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c65e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c661:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c665:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c66b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8021c672:	48 c7 c2 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rdx
ffffffff8021c679:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c67d:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c683:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c686:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c68a:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c690:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c696:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c69a:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c6a0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c6a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6a8:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c6ae:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c6b2:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff8021c6b9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c6bd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c6c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6c4:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c6ca:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c6ce:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff8021c6d5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c6d9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c6dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6e0:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c6e6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c6e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6ed:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c6f3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021c6fa:	48 c7 c2 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rdx
ffffffff8021c701:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c705:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c70b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c70e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c712:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c718:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c71e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c722:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c728:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c72c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c730:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c736:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c73a:	48 c7 c0 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rax
ffffffff8021c741:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c745:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c748:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c74c:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c752:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c756:	48 c7 c0 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rax
ffffffff8021c75d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c761:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c764:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c768:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c76e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c771:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c775:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c77b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8021c782:	48 c7 c2 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rdx
ffffffff8021c789:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c78d:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c793:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c796:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c79a:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c7a0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c7a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7aa:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c7b0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c7b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7b8:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c7be:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c7c2:	48 c7 c0 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rax
ffffffff8021c7c9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c7cd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c7d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7d4:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c7da:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c7de:	48 c7 c0 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rax
ffffffff8021c7e5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c7e9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c7ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7f0:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c7f6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c7f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7fd:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c803:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021c80a:	48 c7 c2 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rdx
ffffffff8021c811:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c815:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c81b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c81e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c822:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c828:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c82e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c832:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c838:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c83c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c840:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c846:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c84a:	48 c7 c0 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rax
ffffffff8021c851:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c855:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c858:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c85c:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c862:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c866:	48 c7 c0 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rax
ffffffff8021c86d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c871:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c874:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c878:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c87e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c881:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c885:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c88b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8021c892:	48 c7 c2 05 ba 20 80 	mov    $0xffffffff8020ba05,%rdx
ffffffff8021c899:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c89d:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021c8a3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c8a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8aa:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021c8b0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c8b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8ba:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021c8c0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c8c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8c8:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021c8ce:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c8d2:	48 c7 c0 05 ba 20 80 	mov    $0xffffffff8020ba05,%rax
ffffffff8021c8d9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c8dd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c8e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8e4:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021c8ea:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c8ee:	48 c7 c0 05 ba 20 80 	mov    $0xffffffff8020ba05,%rax
ffffffff8021c8f5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c8f9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c8fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c900:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021c906:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c909:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c90d:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021c913:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021c91a:	48 c7 c2 11 ba 20 80 	mov    $0xffffffff8020ba11,%rdx
ffffffff8021c921:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c925:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021c92b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c92e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c932:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021c938:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c93e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c942:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021c948:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c94c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c950:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021c956:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c95a:	48 c7 c0 11 ba 20 80 	mov    $0xffffffff8020ba11,%rax
ffffffff8021c961:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c965:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c968:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c96c:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021c972:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c976:	48 c7 c0 11 ba 20 80 	mov    $0xffffffff8020ba11,%rax
ffffffff8021c97d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c981:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c984:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c988:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021c98e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c991:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c995:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021c99b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8021c9a2:	48 c7 c2 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rdx
ffffffff8021c9a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9ad:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021c9b3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c9b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9ba:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021c9c0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c9c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9ca:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021c9d0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c9d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9d8:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021c9de:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c9e2:	48 c7 c0 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rax
ffffffff8021c9e9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c9ed:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c9f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9f4:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021c9fa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c9fe:	48 c7 c0 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rax
ffffffff8021ca05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ca09:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ca0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca10:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021ca16:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ca19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca1d:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021ca23:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ca2a:	48 c7 c2 29 ba 20 80 	mov    $0xffffffff8020ba29,%rdx
ffffffff8021ca31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca35:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021ca3b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ca3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca42:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021ca48:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ca4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca52:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021ca58:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ca5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca60:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021ca66:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ca6a:	48 c7 c0 29 ba 20 80 	mov    $0xffffffff8020ba29,%rax
ffffffff8021ca71:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ca75:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ca78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca7c:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021ca82:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ca86:	48 c7 c0 29 ba 20 80 	mov    $0xffffffff8020ba29,%rax
ffffffff8021ca8d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ca91:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ca94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca98:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021ca9e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021caa1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021caa5:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021caab:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8021cab2:	48 c7 c2 35 ba 20 80 	mov    $0xffffffff8020ba35,%rdx
ffffffff8021cab9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cabd:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cac3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cac6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021caca:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cad0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cad6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cada:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cae0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cae4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cae8:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021caee:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021caf2:	48 c7 c0 35 ba 20 80 	mov    $0xffffffff8020ba35,%rax
ffffffff8021caf9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cafd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb04:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cb0a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cb0e:	48 c7 c0 35 ba 20 80 	mov    $0xffffffff8020ba35,%rax
ffffffff8021cb15:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cb19:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb20:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cb26:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cb29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb2d:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cb33:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cb3a:	48 c7 c2 41 ba 20 80 	mov    $0xffffffff8020ba41,%rdx
ffffffff8021cb41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb45:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cb4b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cb4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb52:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cb58:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cb5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb62:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cb68:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cb6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb70:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cb76:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cb7a:	48 c7 c0 41 ba 20 80 	mov    $0xffffffff8020ba41,%rax
ffffffff8021cb81:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cb85:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb8c:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cb92:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cb96:	48 c7 c0 41 ba 20 80 	mov    $0xffffffff8020ba41,%rax
ffffffff8021cb9d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cba1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cba4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cba8:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cbae:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cbb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbb5:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cbbb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8021cbc2:	48 c7 c2 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rdx
ffffffff8021cbc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbcd:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cbd3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cbd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbda:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cbe0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cbe6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbea:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cbf0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cbf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbf8:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cbfe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cc02:	48 c7 c0 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rax
ffffffff8021cc09:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cc0d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc14:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cc1a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cc1e:	48 c7 c0 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rax
ffffffff8021cc25:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cc29:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc30:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cc36:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cc39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc3d:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cc43:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cc4a:	48 c7 c2 59 ba 20 80 	mov    $0xffffffff8020ba59,%rdx
ffffffff8021cc51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc55:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cc5b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cc5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc62:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cc68:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cc6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc72:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cc78:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cc7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc80:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cc86:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cc8a:	48 c7 c0 59 ba 20 80 	mov    $0xffffffff8020ba59,%rax
ffffffff8021cc91:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cc95:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc9c:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cca2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cca6:	48 c7 c0 59 ba 20 80 	mov    $0xffffffff8020ba59,%rax
ffffffff8021ccad:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ccb1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ccb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccb8:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021ccbe:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ccc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccc5:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cccb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8021ccd2:	48 c7 c2 65 ba 20 80 	mov    $0xffffffff8020ba65,%rdx
ffffffff8021ccd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccdd:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cce3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cce6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccea:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021ccf0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ccf6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccfa:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cd00:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cd04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd08:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cd0e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cd12:	48 c7 c0 65 ba 20 80 	mov    $0xffffffff8020ba65,%rax
ffffffff8021cd19:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cd1d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cd20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd24:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cd2a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cd2e:	48 c7 c0 65 ba 20 80 	mov    $0xffffffff8020ba65,%rax
ffffffff8021cd35:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cd39:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cd3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd40:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cd46:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cd49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd4d:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cd53:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cd5a:	48 c7 c2 71 ba 20 80 	mov    $0xffffffff8020ba71,%rdx
ffffffff8021cd61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd65:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cd6b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cd6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd72:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cd78:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cd7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd82:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cd88:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cd8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd90:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cd96:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cd9a:	48 c7 c0 71 ba 20 80 	mov    $0xffffffff8020ba71,%rax
ffffffff8021cda1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cda5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cda8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdac:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cdb2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cdb6:	48 c7 c0 71 ba 20 80 	mov    $0xffffffff8020ba71,%rax
ffffffff8021cdbd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cdc1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cdc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdc8:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cdce:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cdd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdd5:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cddb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8021cde2:	48 c7 c2 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rdx
ffffffff8021cde9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cded:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cdf3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cdf6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdfa:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021ce00:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ce06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce0a:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021ce10:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ce14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce18:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021ce1e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ce22:	48 c7 c0 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rax
ffffffff8021ce29:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ce2d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce34:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021ce3a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ce3e:	48 c7 c0 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rax
ffffffff8021ce45:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ce49:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce50:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021ce56:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ce59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce5d:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021ce63:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ce6a:	48 c7 c2 89 ba 20 80 	mov    $0xffffffff8020ba89,%rdx
ffffffff8021ce71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce75:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021ce7b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ce7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce82:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021ce88:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ce8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce92:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021ce98:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ce9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cea0:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021cea6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ceaa:	48 c7 c0 89 ba 20 80 	mov    $0xffffffff8020ba89,%rax
ffffffff8021ceb1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ceb5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ceb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cebc:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021cec2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cec6:	48 c7 c0 89 ba 20 80 	mov    $0xffffffff8020ba89,%rax
ffffffff8021cecd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ced1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ced4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ced8:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021cede:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cee1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cee5:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021ceeb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff8021cef2:	48 c7 c2 95 ba 20 80 	mov    $0xffffffff8020ba95,%rdx
ffffffff8021cef9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cefd:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021cf03:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cf06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf0a:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021cf10:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cf16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf1a:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021cf20:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cf24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf28:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021cf2e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cf32:	48 c7 c0 95 ba 20 80 	mov    $0xffffffff8020ba95,%rax
ffffffff8021cf39:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cf3d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cf40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf44:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021cf4a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cf4e:	48 c7 c0 95 ba 20 80 	mov    $0xffffffff8020ba95,%rax
ffffffff8021cf55:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cf59:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cf5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf60:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021cf66:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cf69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf6d:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021cf73:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cf7a:	48 c7 c2 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rdx
ffffffff8021cf81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf85:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021cf8b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cf8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf92:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021cf98:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cf9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfa2:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021cfa8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cfac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfb0:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021cfb6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cfba:	48 c7 c0 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rax
ffffffff8021cfc1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cfc5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cfc8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfcc:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021cfd2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cfd6:	48 c7 c0 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rax
ffffffff8021cfdd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cfe1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cfe4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfe8:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021cfee:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cff1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cff5:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021cffb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8021d002:	48 c7 c2 ad ba 20 80 	mov    $0xffffffff8020baad,%rdx
ffffffff8021d009:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d00d:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d013:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d016:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d01a:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d020:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d026:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d02a:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d030:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d034:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d038:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d03e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d042:	48 c7 c0 ad ba 20 80 	mov    $0xffffffff8020baad,%rax
ffffffff8021d049:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d04d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d050:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d054:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d05a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d05e:	48 c7 c0 ad ba 20 80 	mov    $0xffffffff8020baad,%rax
ffffffff8021d065:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d069:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d06c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d070:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d076:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d079:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d07d:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d083:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d08a:	48 c7 c2 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rdx
ffffffff8021d091:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d095:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d09b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d09e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0a2:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d0a8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d0ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0b2:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d0b8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d0bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0c0:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d0c6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d0ca:	48 c7 c0 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rax
ffffffff8021d0d1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d0d5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d0d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0dc:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d0e2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d0e6:	48 c7 c0 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rax
ffffffff8021d0ed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d0f1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d0f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0f8:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d0fe:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d101:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d105:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d10b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8021d112:	48 c7 c2 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rdx
ffffffff8021d119:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d11d:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d123:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d126:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d12a:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d130:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d136:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d13a:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d140:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d144:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d148:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d14e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d152:	48 c7 c0 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rax
ffffffff8021d159:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d15d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d160:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d164:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d16a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d16e:	48 c7 c0 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rax
ffffffff8021d175:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d179:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d17c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d180:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d186:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d189:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d18d:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d193:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d19a:	48 c7 c2 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rdx
ffffffff8021d1a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1a5:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d1ab:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d1ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1b2:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d1b8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d1be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1c2:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d1c8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d1cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1d0:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d1d6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d1da:	48 c7 c0 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rax
ffffffff8021d1e1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d1e5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d1e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1ec:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d1f2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d1f6:	48 c7 c0 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rax
ffffffff8021d1fd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d201:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d204:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d208:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d20e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d211:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d215:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d21b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8021d222:	48 c7 c2 dd ba 20 80 	mov    $0xffffffff8020badd,%rdx
ffffffff8021d229:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d22d:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d233:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d236:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d23a:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d240:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d246:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d24a:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d250:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d254:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d258:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d25e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d262:	48 c7 c0 dd ba 20 80 	mov    $0xffffffff8020badd,%rax
ffffffff8021d269:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d26d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d270:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d274:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d27a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d27e:	48 c7 c0 dd ba 20 80 	mov    $0xffffffff8020badd,%rax
ffffffff8021d285:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d289:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d28c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d290:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d296:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d299:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d29d:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d2a3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d2aa:	48 c7 c2 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rdx
ffffffff8021d2b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2b5:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d2bb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d2be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2c2:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d2c8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d2ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2d2:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d2d8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d2dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2e0:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d2e6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d2ea:	48 c7 c0 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rax
ffffffff8021d2f1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d2f5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d2f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2fc:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d302:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d306:	48 c7 c0 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rax
ffffffff8021d30d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d311:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d314:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d318:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d31e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d321:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d325:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d32b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8021d332:	48 c7 c2 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rdx
ffffffff8021d339:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d33d:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d343:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d346:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d34a:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d350:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d356:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d35a:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d360:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d364:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d368:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d36e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d372:	48 c7 c0 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rax
ffffffff8021d379:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d37d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d380:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d384:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d38a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d38e:	48 c7 c0 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rax
ffffffff8021d395:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d399:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d39c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3a0:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d3a6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d3a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3ad:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d3b3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d3ba:	48 c7 c2 01 bb 20 80 	mov    $0xffffffff8020bb01,%rdx
ffffffff8021d3c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3c5:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d3cb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d3ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3d2:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d3d8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d3de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3e2:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d3e8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d3ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3f0:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d3f6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d3fa:	48 c7 c0 01 bb 20 80 	mov    $0xffffffff8020bb01,%rax
ffffffff8021d401:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d405:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d408:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d40c:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d412:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d416:	48 c7 c0 01 bb 20 80 	mov    $0xffffffff8020bb01,%rax
ffffffff8021d41d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d421:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d424:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d428:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d42e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d431:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d435:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d43b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8021d442:	48 c7 c2 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rdx
ffffffff8021d449:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d44d:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d453:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d456:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d45a:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d460:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d466:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d46a:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d470:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d474:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d478:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d47e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d482:	48 c7 c0 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rax
ffffffff8021d489:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d48d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d490:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d494:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d49a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d49e:	48 c7 c0 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rax
ffffffff8021d4a5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d4a9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d4ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4b0:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d4b6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d4b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4bd:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d4c3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d4ca:	48 c7 c2 19 bb 20 80 	mov    $0xffffffff8020bb19,%rdx
ffffffff8021d4d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4d5:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d4db:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d4de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4e2:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d4e8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d4ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4f2:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d4f8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d4fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d500:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d506:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d50a:	48 c7 c0 19 bb 20 80 	mov    $0xffffffff8020bb19,%rax
ffffffff8021d511:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d515:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d518:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d51c:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d522:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d526:	48 c7 c0 19 bb 20 80 	mov    $0xffffffff8020bb19,%rax
ffffffff8021d52d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d531:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d534:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d538:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d53e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d541:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d545:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d54b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8021d552:	48 c7 c2 25 bb 20 80 	mov    $0xffffffff8020bb25,%rdx
ffffffff8021d559:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d55d:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d563:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d566:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d56a:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d570:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d576:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d57a:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d580:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d584:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d588:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d58e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d592:	48 c7 c0 25 bb 20 80 	mov    $0xffffffff8020bb25,%rax
ffffffff8021d599:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d59d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d5a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5a4:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d5aa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d5ae:	48 c7 c0 25 bb 20 80 	mov    $0xffffffff8020bb25,%rax
ffffffff8021d5b5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d5b9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d5bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5c0:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d5c6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d5c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5cd:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d5d3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d5da:	48 c7 c2 31 bb 20 80 	mov    $0xffffffff8020bb31,%rdx
ffffffff8021d5e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5e5:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d5eb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d5ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5f2:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d5f8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d5fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d602:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d608:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d60c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d610:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d616:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d61a:	48 c7 c0 31 bb 20 80 	mov    $0xffffffff8020bb31,%rax
ffffffff8021d621:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d625:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d628:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d62c:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d632:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d636:	48 c7 c0 31 bb 20 80 	mov    $0xffffffff8020bb31,%rax
ffffffff8021d63d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d641:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d644:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d648:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d64e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d651:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d655:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d65b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8021d662:	48 c7 c2 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rdx
ffffffff8021d669:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d66d:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d673:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d676:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d67a:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d680:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d686:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d68a:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d690:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d694:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d698:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d69e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d6a2:	48 c7 c0 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rax
ffffffff8021d6a9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d6ad:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d6b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6b4:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d6ba:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d6be:	48 c7 c0 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rax
ffffffff8021d6c5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d6c9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d6cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6d0:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d6d6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d6d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6dd:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d6e3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d6ea:	48 c7 c2 49 bb 20 80 	mov    $0xffffffff8020bb49,%rdx
ffffffff8021d6f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6f5:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d6fb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d6fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d702:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d708:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d70e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d712:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d718:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d71c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d720:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d726:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d72a:	48 c7 c0 49 bb 20 80 	mov    $0xffffffff8020bb49,%rax
ffffffff8021d731:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d735:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d738:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d73c:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d742:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d746:	48 c7 c0 49 bb 20 80 	mov    $0xffffffff8020bb49,%rax
ffffffff8021d74d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d751:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d754:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d758:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d75e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d761:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d765:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d76b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8021d772:	48 c7 c2 55 bb 20 80 	mov    $0xffffffff8020bb55,%rdx
ffffffff8021d779:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d77d:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d783:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d786:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d78a:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d790:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d796:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d79a:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d7a0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d7a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7a8:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d7ae:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d7b2:	48 c7 c0 55 bb 20 80 	mov    $0xffffffff8020bb55,%rax
ffffffff8021d7b9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d7bd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d7c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7c4:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d7ca:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d7ce:	48 c7 c0 55 bb 20 80 	mov    $0xffffffff8020bb55,%rax
ffffffff8021d7d5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d7d9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d7dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7e0:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d7e6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d7e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7ed:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d7f3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d7fa:	48 c7 c2 61 bb 20 80 	mov    $0xffffffff8020bb61,%rdx
ffffffff8021d801:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d805:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d80b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d80e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d812:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d818:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d81e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d822:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d828:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d82c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d830:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d836:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d83a:	48 c7 c0 61 bb 20 80 	mov    $0xffffffff8020bb61,%rax
ffffffff8021d841:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d845:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d848:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d84c:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d852:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d856:	48 c7 c0 61 bb 20 80 	mov    $0xffffffff8020bb61,%rax
ffffffff8021d85d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d861:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d864:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d868:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d86e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d871:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d875:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d87b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8021d882:	48 c7 c2 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rdx
ffffffff8021d889:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d88d:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021d893:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d896:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d89a:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021d8a0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d8a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8aa:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021d8b0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d8b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8b8:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021d8be:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d8c2:	48 c7 c0 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rax
ffffffff8021d8c9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d8cd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d8d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8d4:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021d8da:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d8de:	48 c7 c0 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rax
ffffffff8021d8e5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d8e9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d8ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8f0:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021d8f6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d8f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8fd:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021d903:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d90a:	48 c7 c2 79 bb 20 80 	mov    $0xffffffff8020bb79,%rdx
ffffffff8021d911:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d915:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021d91b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d91e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d922:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021d928:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d92e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d932:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021d938:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d93c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d940:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021d946:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d94a:	48 c7 c0 79 bb 20 80 	mov    $0xffffffff8020bb79,%rax
ffffffff8021d951:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d955:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d958:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d95c:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021d962:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d966:	48 c7 c0 79 bb 20 80 	mov    $0xffffffff8020bb79,%rax
ffffffff8021d96d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d971:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d974:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d978:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021d97e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d981:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d985:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021d98b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8021d992:	48 c7 c2 85 bb 20 80 	mov    $0xffffffff8020bb85,%rdx
ffffffff8021d999:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d99d:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021d9a3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d9a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9aa:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021d9b0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d9b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9ba:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021d9c0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d9c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9c8:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021d9ce:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d9d2:	48 c7 c0 85 bb 20 80 	mov    $0xffffffff8020bb85,%rax
ffffffff8021d9d9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d9dd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d9e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9e4:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021d9ea:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d9ee:	48 c7 c0 85 bb 20 80 	mov    $0xffffffff8020bb85,%rax
ffffffff8021d9f5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d9f9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d9fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da00:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021da06:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021da09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da0d:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021da13:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021da1a:	48 c7 c2 91 bb 20 80 	mov    $0xffffffff8020bb91,%rdx
ffffffff8021da21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da25:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021da2b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021da2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da32:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021da38:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021da3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da42:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021da48:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021da4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da50:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021da56:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021da5a:	48 c7 c0 91 bb 20 80 	mov    $0xffffffff8020bb91,%rax
ffffffff8021da61:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021da65:	48 89 c2             	mov    %rax,%rdx
ffffffff8021da68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da6c:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021da72:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021da76:	48 c7 c0 91 bb 20 80 	mov    $0xffffffff8020bb91,%rax
ffffffff8021da7d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021da81:	48 89 c2             	mov    %rax,%rdx
ffffffff8021da84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da88:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021da8e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021da91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da95:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021da9b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8021daa2:	48 c7 c2 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rdx
ffffffff8021daa9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daad:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dab3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dab6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daba:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dac0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dac6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daca:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dad0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dad4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dad8:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dade:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dae2:	48 c7 c0 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rax
ffffffff8021dae9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021daed:	48 89 c2             	mov    %rax,%rdx
ffffffff8021daf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daf4:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dafa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dafe:	48 c7 c0 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rax
ffffffff8021db05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021db09:	48 89 c2             	mov    %rax,%rdx
ffffffff8021db0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db10:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021db16:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021db19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db1d:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021db23:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021db2a:	48 c7 c2 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rdx
ffffffff8021db31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db35:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021db3b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021db3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db42:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021db48:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021db4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db52:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021db58:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021db5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db60:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021db66:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021db6a:	48 c7 c0 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rax
ffffffff8021db71:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021db75:	48 89 c2             	mov    %rax,%rdx
ffffffff8021db78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db7c:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021db82:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021db86:	48 c7 c0 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rax
ffffffff8021db8d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021db91:	48 89 c2             	mov    %rax,%rdx
ffffffff8021db94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db98:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021db9e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dba1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dba5:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dbab:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8021dbb2:	48 c7 c2 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rdx
ffffffff8021dbb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbbd:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dbc3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dbc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbca:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dbd0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dbd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbda:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dbe0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dbe4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbe8:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dbee:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dbf2:	48 c7 c0 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rax
ffffffff8021dbf9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dbfd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc04:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dc0a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dc0e:	48 c7 c0 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rax
ffffffff8021dc15:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dc19:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc20:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dc26:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dc29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc2d:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dc33:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dc3a:	48 c7 c2 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rdx
ffffffff8021dc41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc45:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dc4b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dc4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc52:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dc58:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dc5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc62:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dc68:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dc6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc70:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dc76:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dc7a:	48 c7 c0 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rax
ffffffff8021dc81:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dc85:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc8c:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dc92:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dc96:	48 c7 c0 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rax
ffffffff8021dc9d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dca1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dca4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dca8:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dcae:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dcb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcb5:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dcbb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8021dcc2:	48 c7 c2 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rdx
ffffffff8021dcc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dccd:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dcd3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dcd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcda:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dce0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dce6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcea:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dcf0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dcf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcf8:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dcfe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dd02:	48 c7 c0 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rax
ffffffff8021dd09:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dd0d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd14:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dd1a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dd1e:	48 c7 c0 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rax
ffffffff8021dd25:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dd29:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd30:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dd36:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dd39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd3d:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dd43:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dd4a:	48 c7 c2 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rdx
ffffffff8021dd51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd55:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dd5b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dd5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd62:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dd68:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dd6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd72:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dd78:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dd7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd80:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dd86:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dd8a:	48 c7 c0 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rax
ffffffff8021dd91:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dd95:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd9c:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dda2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dda6:	48 c7 c0 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rax
ffffffff8021ddad:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ddb1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ddb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddb8:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021ddbe:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ddc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddc5:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021ddcb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8021ddd2:	48 c7 c2 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rdx
ffffffff8021ddd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dddd:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021dde3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dde6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddea:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021ddf0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ddf6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddfa:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021de00:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021de04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de08:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021de0e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021de12:	48 c7 c0 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rax
ffffffff8021de19:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021de1d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021de20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de24:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021de2a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021de2e:	48 c7 c0 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rax
ffffffff8021de35:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021de39:	48 89 c2             	mov    %rax,%rdx
ffffffff8021de3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de40:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021de46:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021de49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de4d:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021de53:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021de5a:	48 c7 c2 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rdx
ffffffff8021de61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de65:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021de6b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021de6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de72:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021de78:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021de7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de82:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021de88:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021de8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de90:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021de96:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021de9a:	48 c7 c0 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rax
ffffffff8021dea1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dea5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dea8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021deac:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021deb2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021deb6:	48 c7 c0 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rax
ffffffff8021debd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dec1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dec4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dec8:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021dece:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ded1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ded5:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021dedb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8021dee2:	48 c7 c2 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rdx
ffffffff8021dee9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021deed:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021def3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021def6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021defa:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021df00:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021df06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df0a:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021df10:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021df14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df18:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021df1e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021df22:	48 c7 c0 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rax
ffffffff8021df29:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021df2d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021df30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df34:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021df3a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021df3e:	48 c7 c0 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rax
ffffffff8021df45:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021df49:	48 89 c2             	mov    %rax,%rdx
ffffffff8021df4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df50:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021df56:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021df59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df5d:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021df63:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021df6a:	48 c7 c2 09 bc 20 80 	mov    $0xffffffff8020bc09,%rdx
ffffffff8021df71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df75:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021df7b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021df7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df82:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021df88:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021df8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df92:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021df98:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021df9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfa0:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021dfa6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dfaa:	48 c7 c0 09 bc 20 80 	mov    $0xffffffff8020bc09,%rax
ffffffff8021dfb1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dfb5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dfb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfbc:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021dfc2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dfc6:	48 c7 c0 09 bc 20 80 	mov    $0xffffffff8020bc09,%rax
ffffffff8021dfcd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dfd1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dfd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfd8:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021dfde:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dfe1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfe5:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021dfeb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8021dff2:	48 c7 c2 15 bc 20 80 	mov    $0xffffffff8020bc15,%rdx
ffffffff8021dff9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dffd:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e003:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e006:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e00a:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e010:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e016:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e01a:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e020:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e024:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e028:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e02e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e032:	48 c7 c0 15 bc 20 80 	mov    $0xffffffff8020bc15,%rax
ffffffff8021e039:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e03d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e040:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e044:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e04a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e04e:	48 c7 c0 15 bc 20 80 	mov    $0xffffffff8020bc15,%rax
ffffffff8021e055:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e059:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e05c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e060:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e066:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e069:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e06d:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e073:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e07a:	48 c7 c2 21 bc 20 80 	mov    $0xffffffff8020bc21,%rdx
ffffffff8021e081:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e085:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e08b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e08e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e092:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e098:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e09e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0a2:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e0a8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e0ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0b0:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e0b6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e0ba:	48 c7 c0 21 bc 20 80 	mov    $0xffffffff8020bc21,%rax
ffffffff8021e0c1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e0c5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e0c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0cc:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e0d2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e0d6:	48 c7 c0 21 bc 20 80 	mov    $0xffffffff8020bc21,%rax
ffffffff8021e0dd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e0e1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e0e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0e8:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e0ee:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e0f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0f5:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e0fb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8021e102:	48 c7 c2 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rdx
ffffffff8021e109:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e10d:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e113:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e116:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e11a:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e120:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e126:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e12a:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e130:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e134:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e138:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e13e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e142:	48 c7 c0 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rax
ffffffff8021e149:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e14d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e150:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e154:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e15a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e15e:	48 c7 c0 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rax
ffffffff8021e165:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e169:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e16c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e170:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e176:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e179:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e17d:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e183:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e18a:	48 c7 c2 39 bc 20 80 	mov    $0xffffffff8020bc39,%rdx
ffffffff8021e191:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e195:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e19b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e19e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1a2:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e1a8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e1ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1b2:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e1b8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e1bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1c0:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e1c6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e1ca:	48 c7 c0 39 bc 20 80 	mov    $0xffffffff8020bc39,%rax
ffffffff8021e1d1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e1d5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e1d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1dc:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e1e2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e1e6:	48 c7 c0 39 bc 20 80 	mov    $0xffffffff8020bc39,%rax
ffffffff8021e1ed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e1f1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e1f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1f8:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e1fe:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e201:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e205:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e20b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8021e212:	48 c7 c2 45 bc 20 80 	mov    $0xffffffff8020bc45,%rdx
ffffffff8021e219:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e21d:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e223:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e226:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e22a:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e230:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e236:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e23a:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e240:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e244:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e248:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e24e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e252:	48 c7 c0 45 bc 20 80 	mov    $0xffffffff8020bc45,%rax
ffffffff8021e259:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e25d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e260:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e264:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e26a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e26e:	48 c7 c0 45 bc 20 80 	mov    $0xffffffff8020bc45,%rax
ffffffff8021e275:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e279:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e27c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e280:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e286:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e289:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e28d:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e293:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e29a:	48 c7 c2 51 bc 20 80 	mov    $0xffffffff8020bc51,%rdx
ffffffff8021e2a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2a5:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e2ab:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e2ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2b2:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e2b8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e2be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2c2:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e2c8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e2cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2d0:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e2d6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e2da:	48 c7 c0 51 bc 20 80 	mov    $0xffffffff8020bc51,%rax
ffffffff8021e2e1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e2e5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e2e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2ec:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e2f2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e2f6:	48 c7 c0 51 bc 20 80 	mov    $0xffffffff8020bc51,%rax
ffffffff8021e2fd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e301:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e304:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e308:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e30e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e311:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e315:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e31b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8021e322:	48 c7 c2 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rdx
ffffffff8021e329:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e32d:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e333:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e336:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e33a:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e340:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e346:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e34a:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e350:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e354:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e358:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e35e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e362:	48 c7 c0 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rax
ffffffff8021e369:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e36d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e370:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e374:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e37a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e37e:	48 c7 c0 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rax
ffffffff8021e385:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e389:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e38c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e390:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e396:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e399:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e39d:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e3a3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e3aa:	48 c7 c2 69 bc 20 80 	mov    $0xffffffff8020bc69,%rdx
ffffffff8021e3b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3b5:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e3bb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e3be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3c2:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e3c8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e3ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3d2:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e3d8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e3dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3e0:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e3e6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e3ea:	48 c7 c0 69 bc 20 80 	mov    $0xffffffff8020bc69,%rax
ffffffff8021e3f1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e3f5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e3f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3fc:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e402:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e406:	48 c7 c0 69 bc 20 80 	mov    $0xffffffff8020bc69,%rax
ffffffff8021e40d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e411:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e414:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e418:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e41e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e421:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e425:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e42b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8021e432:	48 c7 c2 75 bc 20 80 	mov    $0xffffffff8020bc75,%rdx
ffffffff8021e439:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e43d:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e443:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e446:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e44a:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e450:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e456:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e45a:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e460:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e464:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e468:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e46e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e472:	48 c7 c0 75 bc 20 80 	mov    $0xffffffff8020bc75,%rax
ffffffff8021e479:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e47d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e480:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e484:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e48a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e48e:	48 c7 c0 75 bc 20 80 	mov    $0xffffffff8020bc75,%rax
ffffffff8021e495:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e499:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e49c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4a0:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e4a6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e4a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4ad:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e4b3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e4ba:	48 c7 c2 81 bc 20 80 	mov    $0xffffffff8020bc81,%rdx
ffffffff8021e4c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4c5:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e4cb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e4ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4d2:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e4d8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e4de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4e2:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e4e8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e4ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4f0:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e4f6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e4fa:	48 c7 c0 81 bc 20 80 	mov    $0xffffffff8020bc81,%rax
ffffffff8021e501:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e505:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e508:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e50c:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e512:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e516:	48 c7 c0 81 bc 20 80 	mov    $0xffffffff8020bc81,%rax
ffffffff8021e51d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e521:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e524:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e528:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e52e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e531:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e535:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e53b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8021e542:	48 c7 c2 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rdx
ffffffff8021e549:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e54d:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e553:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e556:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e55a:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e560:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e566:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e56a:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e570:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e574:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e578:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e57e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e582:	48 c7 c0 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rax
ffffffff8021e589:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e58d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e590:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e594:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e59a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e59e:	48 c7 c0 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rax
ffffffff8021e5a5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e5a9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e5ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5b0:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e5b6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e5b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5bd:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e5c3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e5ca:	48 c7 c2 99 bc 20 80 	mov    $0xffffffff8020bc99,%rdx
ffffffff8021e5d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5d5:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e5db:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e5de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5e2:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e5e8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e5ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5f2:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e5f8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e5fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e600:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e606:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e60a:	48 c7 c0 99 bc 20 80 	mov    $0xffffffff8020bc99,%rax
ffffffff8021e611:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e615:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e618:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e61c:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e622:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e626:	48 c7 c0 99 bc 20 80 	mov    $0xffffffff8020bc99,%rax
ffffffff8021e62d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e631:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e634:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e638:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e63e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e641:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e645:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e64b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8021e652:	48 c7 c2 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rdx
ffffffff8021e659:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e65d:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e663:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e666:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e66a:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e670:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e676:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e67a:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e680:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e684:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e688:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e68e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e692:	48 c7 c0 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rax
ffffffff8021e699:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e69d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e6a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6a4:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e6aa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e6ae:	48 c7 c0 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rax
ffffffff8021e6b5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e6b9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e6bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6c0:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e6c6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e6c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6cd:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e6d3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e6da:	48 c7 c2 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rdx
ffffffff8021e6e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6e5:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e6eb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e6ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6f2:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e6f8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e6fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e702:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e708:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e70c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e710:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e716:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e71a:	48 c7 c0 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rax
ffffffff8021e721:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e725:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e728:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e72c:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e732:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e736:	48 c7 c0 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rax
ffffffff8021e73d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e741:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e744:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e748:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e74e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e751:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e755:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e75b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021e762:	48 c7 c2 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rdx
ffffffff8021e769:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e76d:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e773:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e776:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e77a:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e780:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e786:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e78a:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e790:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e794:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e798:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e79e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e7a2:	48 c7 c0 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rax
ffffffff8021e7a9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e7ad:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e7b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7b4:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e7ba:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e7be:	48 c7 c0 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rax
ffffffff8021e7c5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e7c9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e7cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7d0:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e7d6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e7d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7dd:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e7e3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e7ea:	48 c7 c2 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rdx
ffffffff8021e7f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7f5:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e7fb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e7fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e802:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e808:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e80e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e812:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e818:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e81c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e820:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e826:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e82a:	48 c7 c0 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rax
ffffffff8021e831:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e835:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e838:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e83c:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e842:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e846:	48 c7 c0 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rax
ffffffff8021e84d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e851:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e854:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e858:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e85e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e861:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e865:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e86b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8021e872:	48 c7 c2 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rdx
ffffffff8021e879:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e87d:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e883:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e886:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e88a:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e890:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e896:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e89a:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e8a0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e8a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8a8:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e8ae:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e8b2:	48 c7 c0 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rax
ffffffff8021e8b9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e8bd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e8c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8c4:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e8ca:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e8ce:	48 c7 c0 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rax
ffffffff8021e8d5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e8d9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e8dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8e0:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e8e6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e8e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8ed:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e8f3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e8fa:	48 c7 c2 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rdx
ffffffff8021e901:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e905:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021e90b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e90e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e912:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021e918:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e91e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e922:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021e928:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e92c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e930:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021e936:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e93a:	48 c7 c0 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rax
ffffffff8021e941:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e945:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e948:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e94c:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021e952:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e956:	48 c7 c0 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rax
ffffffff8021e95d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e961:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e964:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e968:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021e96e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e971:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e975:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021e97b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8021e982:	48 c7 c2 ed bc 20 80 	mov    $0xffffffff8020bced,%rdx
ffffffff8021e989:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e98d:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021e993:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e996:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e99a:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021e9a0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e9a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9aa:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021e9b0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e9b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9b8:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021e9be:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e9c2:	48 c7 c0 ed bc 20 80 	mov    $0xffffffff8020bced,%rax
ffffffff8021e9c9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e9cd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e9d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9d4:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021e9da:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e9de:	48 c7 c0 ed bc 20 80 	mov    $0xffffffff8020bced,%rax
ffffffff8021e9e5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e9e9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e9ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9f0:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021e9f6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e9f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9fd:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ea03:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ea0a:	48 c7 c2 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rdx
ffffffff8021ea11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea15:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ea1b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ea1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea22:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ea28:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ea2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea32:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ea38:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ea3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea40:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ea46:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ea4a:	48 c7 c0 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rax
ffffffff8021ea51:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ea55:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ea58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea5c:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ea62:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ea66:	48 c7 c0 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rax
ffffffff8021ea6d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ea71:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ea74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea78:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ea7e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ea81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea85:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ea8b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8021ea92:	48 c7 c2 05 bd 20 80 	mov    $0xffffffff8020bd05,%rdx
ffffffff8021ea99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea9d:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021eaa3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eaa6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eaaa:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021eab0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eab6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eaba:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021eac0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021eac4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eac8:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021eace:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ead2:	48 c7 c0 05 bd 20 80 	mov    $0xffffffff8020bd05,%rax
ffffffff8021ead9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021eadd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eae0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eae4:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021eaea:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eaee:	48 c7 c0 05 bd 20 80 	mov    $0xffffffff8020bd05,%rax
ffffffff8021eaf5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eaf9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eafc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb00:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021eb06:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eb09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb0d:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021eb13:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021eb1a:	48 c7 c2 11 bd 20 80 	mov    $0xffffffff8020bd11,%rdx
ffffffff8021eb21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb25:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021eb2b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eb2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb32:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021eb38:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eb3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb42:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021eb48:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021eb4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb50:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021eb56:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eb5a:	48 c7 c0 11 bd 20 80 	mov    $0xffffffff8020bd11,%rax
ffffffff8021eb61:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021eb65:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eb68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb6c:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021eb72:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eb76:	48 c7 c0 11 bd 20 80 	mov    $0xffffffff8020bd11,%rax
ffffffff8021eb7d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eb81:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eb84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb88:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021eb8e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eb91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb95:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021eb9b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8021eba2:	48 c7 c2 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rdx
ffffffff8021eba9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebad:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ebb3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ebb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebba:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ebc0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ebc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebca:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ebd0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ebd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebd8:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ebde:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ebe2:	48 c7 c0 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rax
ffffffff8021ebe9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ebed:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ebf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebf4:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ebfa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ebfe:	48 c7 c0 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rax
ffffffff8021ec05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ec09:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ec0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec10:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ec16:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ec19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec1d:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ec23:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ec2a:	48 c7 c2 29 bd 20 80 	mov    $0xffffffff8020bd29,%rdx
ffffffff8021ec31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec35:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ec3b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ec3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec42:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ec48:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ec4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec52:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ec58:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ec5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec60:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ec66:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ec6a:	48 c7 c0 29 bd 20 80 	mov    $0xffffffff8020bd29,%rax
ffffffff8021ec71:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ec75:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ec78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec7c:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ec82:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ec86:	48 c7 c0 29 bd 20 80 	mov    $0xffffffff8020bd29,%rax
ffffffff8021ec8d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ec91:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ec94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec98:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ec9e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eca1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eca5:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ecab:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8021ecb2:	48 c7 c2 35 bd 20 80 	mov    $0xffffffff8020bd35,%rdx
ffffffff8021ecb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecbd:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ecc3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ecc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecca:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ecd0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ecd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecda:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ece0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ece4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ece8:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ecee:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ecf2:	48 c7 c0 35 bd 20 80 	mov    $0xffffffff8020bd35,%rax
ffffffff8021ecf9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ecfd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed04:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ed0a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ed0e:	48 c7 c0 35 bd 20 80 	mov    $0xffffffff8020bd35,%rax
ffffffff8021ed15:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ed19:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed20:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ed26:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ed29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed2d:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ed33:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ed3a:	48 c7 c2 41 bd 20 80 	mov    $0xffffffff8020bd41,%rdx
ffffffff8021ed41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed45:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ed4b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ed4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed52:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ed58:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ed5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed62:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ed68:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ed6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed70:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ed76:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ed7a:	48 c7 c0 41 bd 20 80 	mov    $0xffffffff8020bd41,%rax
ffffffff8021ed81:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ed85:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed8c:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ed92:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ed96:	48 c7 c0 41 bd 20 80 	mov    $0xffffffff8020bd41,%rax
ffffffff8021ed9d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eda1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eda4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eda8:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021edae:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021edb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edb5:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021edbb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8021edc2:	48 c7 c2 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rdx
ffffffff8021edc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edcd:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021edd3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021edd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edda:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ede0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ede6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edea:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021edf0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021edf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edf8:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021edfe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ee02:	48 c7 c0 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rax
ffffffff8021ee09:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ee0d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee14:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ee1a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ee1e:	48 c7 c0 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rax
ffffffff8021ee25:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ee29:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee30:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ee36:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ee39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee3d:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ee43:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ee4a:	48 c7 c2 59 bd 20 80 	mov    $0xffffffff8020bd59,%rdx
ffffffff8021ee51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee55:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021ee5b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ee5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee62:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021ee68:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ee6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee72:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021ee78:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ee7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee80:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021ee86:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ee8a:	48 c7 c0 59 bd 20 80 	mov    $0xffffffff8020bd59,%rax
ffffffff8021ee91:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ee95:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee9c:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021eea2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eea6:	48 c7 c0 59 bd 20 80 	mov    $0xffffffff8020bd59,%rax
ffffffff8021eead:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eeb1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eeb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eeb8:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021eebe:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eec1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eec5:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021eecb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8021eed2:	48 c7 c2 65 bd 20 80 	mov    $0xffffffff8020bd65,%rdx
ffffffff8021eed9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eedd:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021eee3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eee6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eeea:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021eef0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eef6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eefa:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021ef00:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ef04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef08:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021ef0e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ef12:	48 c7 c0 65 bd 20 80 	mov    $0xffffffff8020bd65,%rax
ffffffff8021ef19:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ef1d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ef20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef24:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021ef2a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ef2e:	48 c7 c0 65 bd 20 80 	mov    $0xffffffff8020bd65,%rax
ffffffff8021ef35:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ef39:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ef3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef40:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021ef46:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ef49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef4d:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021ef53:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ef5a:	48 c7 c2 71 bd 20 80 	mov    $0xffffffff8020bd71,%rdx
ffffffff8021ef61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef65:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021ef6b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ef6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef72:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021ef78:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ef7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef82:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021ef88:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ef8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef90:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021ef96:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ef9a:	48 c7 c0 71 bd 20 80 	mov    $0xffffffff8020bd71,%rax
ffffffff8021efa1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021efa5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021efa8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efac:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021efb2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021efb6:	48 c7 c0 71 bd 20 80 	mov    $0xffffffff8020bd71,%rax
ffffffff8021efbd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021efc1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021efc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efc8:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021efce:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021efd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efd5:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021efdb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8021efe2:	48 c7 c2 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rdx
ffffffff8021efe9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efed:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021eff3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eff6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021effa:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f000:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f006:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f00a:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f010:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f014:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f018:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f01e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f022:	48 c7 c0 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rax
ffffffff8021f029:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f02d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f030:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f034:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f03a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f03e:	48 c7 c0 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rax
ffffffff8021f045:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f049:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f04c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f050:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f056:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f059:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f05d:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f063:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f06a:	48 c7 c2 89 bd 20 80 	mov    $0xffffffff8020bd89,%rdx
ffffffff8021f071:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f075:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f07b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f07e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f082:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f088:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f08e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f092:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f098:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f09c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0a0:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f0a6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f0aa:	48 c7 c0 89 bd 20 80 	mov    $0xffffffff8020bd89,%rax
ffffffff8021f0b1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f0b5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f0b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0bc:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f0c2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f0c6:	48 c7 c0 89 bd 20 80 	mov    $0xffffffff8020bd89,%rax
ffffffff8021f0cd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f0d1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f0d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0d8:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f0de:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f0e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0e5:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f0eb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8021f0f2:	48 c7 c2 95 bd 20 80 	mov    $0xffffffff8020bd95,%rdx
ffffffff8021f0f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0fd:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f103:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f106:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f10a:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f110:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f116:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f11a:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f120:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f124:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f128:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f12e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f132:	48 c7 c0 95 bd 20 80 	mov    $0xffffffff8020bd95,%rax
ffffffff8021f139:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f13d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f140:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f144:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f14a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f14e:	48 c7 c0 95 bd 20 80 	mov    $0xffffffff8020bd95,%rax
ffffffff8021f155:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f159:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f15c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f160:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f166:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f169:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f16d:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f173:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f17a:	48 c7 c2 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rdx
ffffffff8021f181:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f185:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f18b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f18e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f192:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f198:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f19e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1a2:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f1a8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f1ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1b0:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f1b6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f1ba:	48 c7 c0 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rax
ffffffff8021f1c1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f1c5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f1c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1cc:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f1d2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f1d6:	48 c7 c0 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rax
ffffffff8021f1dd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f1e1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f1e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1e8:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f1ee:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f1f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1f5:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f1fb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8021f202:	48 c7 c2 ad bd 20 80 	mov    $0xffffffff8020bdad,%rdx
ffffffff8021f209:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f20d:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f213:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f216:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f21a:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f220:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f226:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f22a:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f230:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f234:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f238:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f23e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f242:	48 c7 c0 ad bd 20 80 	mov    $0xffffffff8020bdad,%rax
ffffffff8021f249:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f24d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f250:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f254:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f25a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f25e:	48 c7 c0 ad bd 20 80 	mov    $0xffffffff8020bdad,%rax
ffffffff8021f265:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f269:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f26c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f270:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f276:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f279:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f27d:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f283:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f28a:	48 c7 c2 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rdx
ffffffff8021f291:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f295:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f29b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f29e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2a2:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f2a8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f2ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2b2:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f2b8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f2bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2c0:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f2c6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f2ca:	48 c7 c0 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rax
ffffffff8021f2d1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f2d5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f2d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2dc:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f2e2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f2e6:	48 c7 c0 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rax
ffffffff8021f2ed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f2f1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f2f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2f8:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f2fe:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f301:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f305:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f30b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff8021f312:	48 c7 c2 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rdx
ffffffff8021f319:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f31d:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f323:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f326:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f32a:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f330:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f336:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f33a:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f340:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f344:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f348:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f34e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f352:	48 c7 c0 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rax
ffffffff8021f359:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f35d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f360:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f364:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f36a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f36e:	48 c7 c0 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rax
ffffffff8021f375:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f379:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f37c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f380:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f386:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f389:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f38d:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f393:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f39a:	48 c7 c2 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rdx
ffffffff8021f3a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3a5:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f3ab:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f3ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3b2:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f3b8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f3be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3c2:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f3c8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f3cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3d0:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f3d6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f3da:	48 c7 c0 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rax
ffffffff8021f3e1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f3e5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f3e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3ec:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f3f2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f3f6:	48 c7 c0 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rax
ffffffff8021f3fd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f401:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f404:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f408:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f40e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f411:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f415:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f41b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8021f422:	48 c7 c2 dd bd 20 80 	mov    $0xffffffff8020bddd,%rdx
ffffffff8021f429:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f42d:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f433:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f436:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f43a:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f440:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f446:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f44a:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f450:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f454:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f458:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f45e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f462:	48 c7 c0 dd bd 20 80 	mov    $0xffffffff8020bddd,%rax
ffffffff8021f469:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f46d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f470:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f474:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f47a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f47e:	48 c7 c0 dd bd 20 80 	mov    $0xffffffff8020bddd,%rax
ffffffff8021f485:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f489:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f48c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f490:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f496:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f499:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f49d:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f4a3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f4aa:	48 c7 c2 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rdx
ffffffff8021f4b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4b5:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f4bb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f4be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4c2:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f4c8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f4ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4d2:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f4d8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f4dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4e0:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f4e6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f4ea:	48 c7 c0 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rax
ffffffff8021f4f1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f4f5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f4f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4fc:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f502:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f506:	48 c7 c0 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rax
ffffffff8021f50d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f511:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f514:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f518:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f51e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f521:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f525:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f52b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8021f532:	48 c7 c2 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rdx
ffffffff8021f539:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f53d:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f543:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f546:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f54a:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f550:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f556:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f55a:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f560:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f564:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f568:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f56e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f572:	48 c7 c0 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rax
ffffffff8021f579:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f57d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f580:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f584:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f58a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f58e:	48 c7 c0 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rax
ffffffff8021f595:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f599:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f59c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5a0:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f5a6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f5a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5ad:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f5b3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f5ba:	48 c7 c2 01 be 20 80 	mov    $0xffffffff8020be01,%rdx
ffffffff8021f5c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5c5:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f5cb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f5ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5d2:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f5d8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f5de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5e2:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f5e8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f5ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5f0:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f5f6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f5fa:	48 c7 c0 01 be 20 80 	mov    $0xffffffff8020be01,%rax
ffffffff8021f601:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f605:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f608:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f60c:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f612:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f616:	48 c7 c0 01 be 20 80 	mov    $0xffffffff8020be01,%rax
ffffffff8021f61d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f621:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f624:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f628:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f62e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f631:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f635:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f63b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8021f642:	48 c7 c2 0d be 20 80 	mov    $0xffffffff8020be0d,%rdx
ffffffff8021f649:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f64d:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f653:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f656:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f65a:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f660:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f666:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f66a:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f670:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f674:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f678:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f67e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f682:	48 c7 c0 0d be 20 80 	mov    $0xffffffff8020be0d,%rax
ffffffff8021f689:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f68d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f690:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f694:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f69a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f69e:	48 c7 c0 0d be 20 80 	mov    $0xffffffff8020be0d,%rax
ffffffff8021f6a5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f6a9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f6ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6b0:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f6b6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f6b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6bd:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f6c3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f6ca:	48 c7 c2 19 be 20 80 	mov    $0xffffffff8020be19,%rdx
ffffffff8021f6d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6d5:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f6db:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f6de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6e2:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f6e8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f6ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6f2:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f6f8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f6fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f700:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f706:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f70a:	48 c7 c0 19 be 20 80 	mov    $0xffffffff8020be19,%rax
ffffffff8021f711:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f715:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f718:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f71c:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f722:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f726:	48 c7 c0 19 be 20 80 	mov    $0xffffffff8020be19,%rax
ffffffff8021f72d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f731:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f734:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f738:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f73e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f741:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f745:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f74b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8021f752:	48 c7 c2 25 be 20 80 	mov    $0xffffffff8020be25,%rdx
ffffffff8021f759:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f75d:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f763:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f766:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f76a:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f770:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f776:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f77a:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f780:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f784:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f788:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f78e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f792:	48 c7 c0 25 be 20 80 	mov    $0xffffffff8020be25,%rax
ffffffff8021f799:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f79d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f7a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7a4:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f7aa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f7ae:	48 c7 c0 25 be 20 80 	mov    $0xffffffff8020be25,%rax
ffffffff8021f7b5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f7b9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f7bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7c0:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f7c6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f7c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7cd:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f7d3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f7da:	48 c7 c2 31 be 20 80 	mov    $0xffffffff8020be31,%rdx
ffffffff8021f7e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7e5:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f7eb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f7ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7f2:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f7f8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f7fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f802:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f808:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f80c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f810:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f816:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f81a:	48 c7 c0 31 be 20 80 	mov    $0xffffffff8020be31,%rax
ffffffff8021f821:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f825:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f828:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f82c:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f832:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f836:	48 c7 c0 31 be 20 80 	mov    $0xffffffff8020be31,%rax
ffffffff8021f83d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f841:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f844:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f848:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f84e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f851:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f855:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f85b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8021f862:	48 c7 c2 3d be 20 80 	mov    $0xffffffff8020be3d,%rdx
ffffffff8021f869:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f86d:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f873:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f876:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f87a:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f880:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f886:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f88a:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f890:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f894:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f898:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f89e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f8a2:	48 c7 c0 3d be 20 80 	mov    $0xffffffff8020be3d,%rax
ffffffff8021f8a9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f8ad:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f8b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8b4:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f8ba:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f8be:	48 c7 c0 3d be 20 80 	mov    $0xffffffff8020be3d,%rax
ffffffff8021f8c5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f8c9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f8cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8d0:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f8d6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f8d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8dd:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f8e3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f8ea:	48 c7 c2 49 be 20 80 	mov    $0xffffffff8020be49,%rdx
ffffffff8021f8f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8f5:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021f8fb:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f8fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f902:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021f908:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f90e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f912:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021f918:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f91c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f920:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021f926:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f92a:	48 c7 c0 49 be 20 80 	mov    $0xffffffff8020be49,%rax
ffffffff8021f931:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f935:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f938:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f93c:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021f942:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f946:	48 c7 c0 49 be 20 80 	mov    $0xffffffff8020be49,%rax
ffffffff8021f94d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f951:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f954:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f958:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021f95e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f961:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f965:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021f96b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8021f972:	48 c7 c2 55 be 20 80 	mov    $0xffffffff8020be55,%rdx
ffffffff8021f979:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f97d:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021f983:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f986:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f98a:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021f990:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f996:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f99a:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021f9a0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f9a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9a8:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021f9ae:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f9b2:	48 c7 c0 55 be 20 80 	mov    $0xffffffff8020be55,%rax
ffffffff8021f9b9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f9bd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f9c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9c4:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021f9ca:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f9ce:	48 c7 c0 55 be 20 80 	mov    $0xffffffff8020be55,%rax
ffffffff8021f9d5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f9d9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f9dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9e0:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021f9e6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f9e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9ed:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021f9f3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f9fa:	48 c7 c2 64 be 20 80 	mov    $0xffffffff8020be64,%rdx
ffffffff8021fa01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa05:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fa0b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fa0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa12:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fa18:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fa1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa22:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fa28:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fa2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa30:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fa36:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fa3a:	48 c7 c0 64 be 20 80 	mov    $0xffffffff8020be64,%rax
ffffffff8021fa41:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fa45:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fa48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa4c:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fa52:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fa56:	48 c7 c0 64 be 20 80 	mov    $0xffffffff8020be64,%rax
ffffffff8021fa5d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fa61:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fa64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa68:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fa6e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fa71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa75:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fa7b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8021fa82:	48 c7 c2 73 be 20 80 	mov    $0xffffffff8020be73,%rdx
ffffffff8021fa89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa8d:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fa93:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fa96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa9a:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021faa0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021faa6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021faaa:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fab0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fab4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fab8:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fabe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fac2:	48 c7 c0 73 be 20 80 	mov    $0xffffffff8020be73,%rax
ffffffff8021fac9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021facd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fad0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fad4:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fada:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fade:	48 c7 c0 73 be 20 80 	mov    $0xffffffff8020be73,%rax
ffffffff8021fae5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fae9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021faec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021faf0:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021faf6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021faf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fafd:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fb03:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fb0a:	48 c7 c2 82 be 20 80 	mov    $0xffffffff8020be82,%rdx
ffffffff8021fb11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb15:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fb1b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fb1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb22:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fb28:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fb2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb32:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fb38:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fb3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb40:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fb46:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fb4a:	48 c7 c0 82 be 20 80 	mov    $0xffffffff8020be82,%rax
ffffffff8021fb51:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fb55:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fb58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb5c:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fb62:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fb66:	48 c7 c0 82 be 20 80 	mov    $0xffffffff8020be82,%rax
ffffffff8021fb6d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fb71:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fb74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb78:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fb7e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fb81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb85:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fb8b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8021fb92:	48 c7 c2 91 be 20 80 	mov    $0xffffffff8020be91,%rdx
ffffffff8021fb99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb9d:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fba3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fba6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbaa:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fbb0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fbb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbba:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fbc0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fbc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbc8:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fbce:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fbd2:	48 c7 c0 91 be 20 80 	mov    $0xffffffff8020be91,%rax
ffffffff8021fbd9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fbdd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fbe0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbe4:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fbea:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fbee:	48 c7 c0 91 be 20 80 	mov    $0xffffffff8020be91,%rax
ffffffff8021fbf5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fbf9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fbfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc00:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fc06:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fc09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc0d:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fc13:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fc1a:	48 c7 c2 a0 be 20 80 	mov    $0xffffffff8020bea0,%rdx
ffffffff8021fc21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc25:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fc2b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fc2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc32:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fc38:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fc3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc42:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fc48:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fc4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc50:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fc56:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fc5a:	48 c7 c0 a0 be 20 80 	mov    $0xffffffff8020bea0,%rax
ffffffff8021fc61:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fc65:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fc68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc6c:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fc72:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fc76:	48 c7 c0 a0 be 20 80 	mov    $0xffffffff8020bea0,%rax
ffffffff8021fc7d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fc81:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fc84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc88:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fc8e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fc91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc95:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fc9b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8021fca2:	48 c7 c2 af be 20 80 	mov    $0xffffffff8020beaf,%rdx
ffffffff8021fca9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcad:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fcb3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fcb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcba:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fcc0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fcc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcca:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fcd0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fcd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcd8:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fcde:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fce2:	48 c7 c0 af be 20 80 	mov    $0xffffffff8020beaf,%rax
ffffffff8021fce9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fced:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fcf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcf4:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fcfa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fcfe:	48 c7 c0 af be 20 80 	mov    $0xffffffff8020beaf,%rax
ffffffff8021fd05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fd09:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fd0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd10:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fd16:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fd19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd1d:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fd23:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fd2a:	48 c7 c2 be be 20 80 	mov    $0xffffffff8020bebe,%rdx
ffffffff8021fd31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd35:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fd3b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fd3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd42:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fd48:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fd4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd52:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fd58:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fd5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd60:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fd66:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fd6a:	48 c7 c0 be be 20 80 	mov    $0xffffffff8020bebe,%rax
ffffffff8021fd71:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fd75:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fd78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd7c:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fd82:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fd86:	48 c7 c0 be be 20 80 	mov    $0xffffffff8020bebe,%rax
ffffffff8021fd8d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fd91:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fd94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd98:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fd9e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fda1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fda5:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fdab:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8021fdb2:	48 c7 c2 cd be 20 80 	mov    $0xffffffff8020becd,%rdx
ffffffff8021fdb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdbd:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021fdc3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fdc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdca:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021fdd0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fdd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdda:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021fde0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fde4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fde8:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021fdee:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fdf2:	48 c7 c0 cd be 20 80 	mov    $0xffffffff8020becd,%rax
ffffffff8021fdf9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fdfd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe04:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021fe0a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fe0e:	48 c7 c0 cd be 20 80 	mov    $0xffffffff8020becd,%rax
ffffffff8021fe15:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fe19:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe20:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021fe26:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fe29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe2d:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021fe33:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fe3a:	48 c7 c2 dc be 20 80 	mov    $0xffffffff8020bedc,%rdx
ffffffff8021fe41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe45:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021fe4b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fe4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe52:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021fe58:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fe5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe62:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021fe68:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fe6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe70:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021fe76:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fe7a:	48 c7 c0 dc be 20 80 	mov    $0xffffffff8020bedc,%rax
ffffffff8021fe81:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fe85:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe8c:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021fe92:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fe96:	48 c7 c0 dc be 20 80 	mov    $0xffffffff8020bedc,%rax
ffffffff8021fe9d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fea1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fea4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fea8:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021feae:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021feb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021feb5:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021febb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff8021fec2:	48 c7 c2 eb be 20 80 	mov    $0xffffffff8020beeb,%rdx
ffffffff8021fec9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fecd:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8021fed3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fed6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021feda:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8021fee0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fee6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021feea:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8021fef0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fef4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fef8:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8021fefe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ff02:	48 c7 c0 eb be 20 80 	mov    $0xffffffff8020beeb,%rax
ffffffff8021ff09:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ff0d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff14:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8021ff1a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ff1e:	48 c7 c0 eb be 20 80 	mov    $0xffffffff8020beeb,%rax
ffffffff8021ff25:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ff29:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff30:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8021ff36:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ff39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff3d:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8021ff43:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ff4a:	48 c7 c2 fa be 20 80 	mov    $0xffffffff8020befa,%rdx
ffffffff8021ff51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff55:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8021ff5b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ff5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff62:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8021ff68:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ff6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff72:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8021ff78:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ff7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff80:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8021ff86:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ff8a:	48 c7 c0 fa be 20 80 	mov    $0xffffffff8020befa,%rax
ffffffff8021ff91:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ff95:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff9c:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8021ffa2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ffa6:	48 c7 c0 fa be 20 80 	mov    $0xffffffff8020befa,%rax
ffffffff8021ffad:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ffb1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ffb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffb8:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8021ffbe:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ffc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffc5:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8021ffcb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff8021ffd2:	48 c7 c2 09 bf 20 80 	mov    $0xffffffff8020bf09,%rdx
ffffffff8021ffd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffdd:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff8021ffe3:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ffe6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffea:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff8021fff0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fff6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fffa:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220000:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220004:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220008:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff8022000e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220012:	48 c7 c0 09 bf 20 80 	mov    $0xffffffff8020bf09,%rax
ffffffff80220019:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022001d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220020:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220024:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff8022002a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022002e:	48 c7 c0 09 bf 20 80 	mov    $0xffffffff8020bf09,%rax
ffffffff80220035:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220039:	48 89 c2             	mov    %rax,%rdx
ffffffff8022003c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220040:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220046:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220049:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022004d:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220053:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022005a:	48 c7 c2 18 bf 20 80 	mov    $0xffffffff8020bf18,%rdx
ffffffff80220061:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220065:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff8022006b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022006e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220072:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff80220078:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022007e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220082:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff80220088:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022008c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220090:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff80220096:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022009a:	48 c7 c0 18 bf 20 80 	mov    $0xffffffff8020bf18,%rax
ffffffff802200a1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802200a5:	48 89 c2             	mov    %rax,%rdx
ffffffff802200a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200ac:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802200b2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802200b6:	48 c7 c0 18 bf 20 80 	mov    $0xffffffff8020bf18,%rax
ffffffff802200bd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802200c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802200c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200c8:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802200ce:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802200d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200d5:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802200db:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff802200e2:	48 c7 c2 27 bf 20 80 	mov    $0xffffffff8020bf27,%rdx
ffffffff802200e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200ed:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff802200f3:	66 89 10             	mov    %dx,(%rax)
ffffffff802200f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200fa:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff80220100:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220106:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022010a:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff80220110:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220114:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220118:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff8022011e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220122:	48 c7 c0 27 bf 20 80 	mov    $0xffffffff8020bf27,%rax
ffffffff80220129:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022012d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220130:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220134:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff8022013a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022013e:	48 c7 c0 27 bf 20 80 	mov    $0xffffffff8020bf27,%rax
ffffffff80220145:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220149:	48 89 c2             	mov    %rax,%rdx
ffffffff8022014c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220150:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff80220156:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220159:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022015d:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff80220163:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022016a:	48 c7 c2 36 bf 20 80 	mov    $0xffffffff8020bf36,%rdx
ffffffff80220171:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220175:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff8022017b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022017e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220182:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff80220188:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022018e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220192:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff80220198:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022019c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201a0:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802201a6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802201aa:	48 c7 c0 36 bf 20 80 	mov    $0xffffffff8020bf36,%rax
ffffffff802201b1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802201b5:	48 89 c2             	mov    %rax,%rdx
ffffffff802201b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201bc:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802201c2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802201c6:	48 c7 c0 36 bf 20 80 	mov    $0xffffffff8020bf36,%rax
ffffffff802201cd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802201d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802201d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201d8:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802201de:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802201e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201e5:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802201eb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff802201f2:	48 c7 c2 45 bf 20 80 	mov    $0xffffffff8020bf45,%rdx
ffffffff802201f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201fd:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220203:	66 89 10             	mov    %dx,(%rax)
ffffffff80220206:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022020a:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220210:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220216:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022021a:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220220:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220224:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220228:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff8022022e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220232:	48 c7 c0 45 bf 20 80 	mov    $0xffffffff8020bf45,%rax
ffffffff80220239:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022023d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220240:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220244:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff8022024a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022024e:	48 c7 c0 45 bf 20 80 	mov    $0xffffffff8020bf45,%rax
ffffffff80220255:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220259:	48 89 c2             	mov    %rax,%rdx
ffffffff8022025c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220260:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220266:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220269:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022026d:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220273:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022027a:	48 c7 c2 54 bf 20 80 	mov    $0xffffffff8020bf54,%rdx
ffffffff80220281:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220285:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff8022028b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022028e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220292:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff80220298:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022029e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202a2:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802202a8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802202ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202b0:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802202b6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802202ba:	48 c7 c0 54 bf 20 80 	mov    $0xffffffff8020bf54,%rax
ffffffff802202c1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802202c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802202c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202cc:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802202d2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802202d6:	48 c7 c0 54 bf 20 80 	mov    $0xffffffff8020bf54,%rax
ffffffff802202dd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802202e1:	48 89 c2             	mov    %rax,%rdx
ffffffff802202e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202e8:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802202ee:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802202f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202f5:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802202fb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80220302:	48 c7 c2 63 bf 20 80 	mov    $0xffffffff8020bf63,%rdx
ffffffff80220309:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022030d:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220313:	66 89 10             	mov    %dx,(%rax)
ffffffff80220316:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022031a:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220320:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220326:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022032a:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220330:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220334:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220338:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff8022033e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220342:	48 c7 c0 63 bf 20 80 	mov    $0xffffffff8020bf63,%rax
ffffffff80220349:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022034d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220350:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220354:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff8022035a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022035e:	48 c7 c0 63 bf 20 80 	mov    $0xffffffff8020bf63,%rax
ffffffff80220365:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220369:	48 89 c2             	mov    %rax,%rdx
ffffffff8022036c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220370:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220376:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220379:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022037d:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220383:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022038a:	48 c7 c2 72 bf 20 80 	mov    $0xffffffff8020bf72,%rdx
ffffffff80220391:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220395:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff8022039b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022039e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203a2:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802203a8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802203ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203b2:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802203b8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802203bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203c0:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802203c6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802203ca:	48 c7 c0 72 bf 20 80 	mov    $0xffffffff8020bf72,%rax
ffffffff802203d1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802203d5:	48 89 c2             	mov    %rax,%rdx
ffffffff802203d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203dc:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802203e2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802203e6:	48 c7 c0 72 bf 20 80 	mov    $0xffffffff8020bf72,%rax
ffffffff802203ed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802203f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802203f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203f8:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802203fe:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220401:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220405:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff8022040b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80220412:	48 c7 c2 81 bf 20 80 	mov    $0xffffffff8020bf81,%rdx
ffffffff80220419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022041d:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220423:	66 89 10             	mov    %dx,(%rax)
ffffffff80220426:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022042a:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220430:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220436:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022043a:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220440:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220444:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220448:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff8022044e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220452:	48 c7 c0 81 bf 20 80 	mov    $0xffffffff8020bf81,%rax
ffffffff80220459:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022045d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220460:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220464:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff8022046a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022046e:	48 c7 c0 81 bf 20 80 	mov    $0xffffffff8020bf81,%rax
ffffffff80220475:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220479:	48 89 c2             	mov    %rax,%rdx
ffffffff8022047c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220480:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220486:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220489:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022048d:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220493:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022049a:	48 c7 c2 90 bf 20 80 	mov    $0xffffffff8020bf90,%rdx
ffffffff802204a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204a5:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802204ab:	66 89 10             	mov    %dx,(%rax)
ffffffff802204ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204b2:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802204b8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802204be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204c2:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802204c8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802204cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204d0:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802204d6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802204da:	48 c7 c0 90 bf 20 80 	mov    $0xffffffff8020bf90,%rax
ffffffff802204e1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802204e5:	48 89 c2             	mov    %rax,%rdx
ffffffff802204e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204ec:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802204f2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802204f6:	48 c7 c0 90 bf 20 80 	mov    $0xffffffff8020bf90,%rax
ffffffff802204fd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220501:	48 89 c2             	mov    %rax,%rdx
ffffffff80220504:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220508:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff8022050e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220511:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220515:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff8022051b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80220522:	48 c7 c2 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rdx
ffffffff80220529:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022052d:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220533:	66 89 10             	mov    %dx,(%rax)
ffffffff80220536:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022053a:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220540:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220546:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022054a:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220550:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220554:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220558:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff8022055e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220562:	48 c7 c0 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rax
ffffffff80220569:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022056d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220570:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220574:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff8022057a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022057e:	48 c7 c0 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rax
ffffffff80220585:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220589:	48 89 c2             	mov    %rax,%rdx
ffffffff8022058c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220590:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220596:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220599:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022059d:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802205a3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802205aa:	48 c7 c2 ae bf 20 80 	mov    $0xffffffff8020bfae,%rdx
ffffffff802205b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205b5:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff802205bb:	66 89 10             	mov    %dx,(%rax)
ffffffff802205be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205c2:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff802205c8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802205ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205d2:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff802205d8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802205dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205e0:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff802205e6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802205ea:	48 c7 c0 ae bf 20 80 	mov    $0xffffffff8020bfae,%rax
ffffffff802205f1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802205f5:	48 89 c2             	mov    %rax,%rdx
ffffffff802205f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205fc:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220602:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220606:	48 c7 c0 ae bf 20 80 	mov    $0xffffffff8020bfae,%rax
ffffffff8022060d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220611:	48 89 c2             	mov    %rax,%rdx
ffffffff80220614:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220618:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff8022061e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220621:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220625:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff8022062b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80220632:	48 c7 c2 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rdx
ffffffff80220639:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022063d:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220643:	66 89 10             	mov    %dx,(%rax)
ffffffff80220646:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022064a:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220650:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220656:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022065a:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220660:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220664:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220668:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff8022066e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220672:	48 c7 c0 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rax
ffffffff80220679:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022067d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220680:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220684:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff8022068a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022068e:	48 c7 c0 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rax
ffffffff80220695:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220699:	48 89 c2             	mov    %rax,%rdx
ffffffff8022069c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206a0:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802206a6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802206a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206ad:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802206b3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802206ba:	48 c7 c2 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rdx
ffffffff802206c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206c5:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff802206cb:	66 89 10             	mov    %dx,(%rax)
ffffffff802206ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206d2:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff802206d8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802206de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206e2:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff802206e8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802206ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206f0:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff802206f6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802206fa:	48 c7 c0 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rax
ffffffff80220701:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220705:	48 89 c2             	mov    %rax,%rdx
ffffffff80220708:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022070c:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220712:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220716:	48 c7 c0 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rax
ffffffff8022071d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220721:	48 89 c2             	mov    %rax,%rdx
ffffffff80220724:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220728:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff8022072e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220731:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220735:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff8022073b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80220742:	48 c7 c2 db bf 20 80 	mov    $0xffffffff8020bfdb,%rdx
ffffffff80220749:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022074d:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220753:	66 89 10             	mov    %dx,(%rax)
ffffffff80220756:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022075a:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220760:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220766:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022076a:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220770:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220774:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220778:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff8022077e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220782:	48 c7 c0 db bf 20 80 	mov    $0xffffffff8020bfdb,%rax
ffffffff80220789:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022078d:	48 89 c2             	mov    %rax,%rdx
ffffffff80220790:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220794:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff8022079a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022079e:	48 c7 c0 db bf 20 80 	mov    $0xffffffff8020bfdb,%rax
ffffffff802207a5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802207a9:	48 89 c2             	mov    %rax,%rdx
ffffffff802207ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207b0:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802207b6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802207b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207bd:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802207c3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802207ca:	48 c7 c2 ea bf 20 80 	mov    $0xffffffff8020bfea,%rdx
ffffffff802207d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207d5:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff802207db:	66 89 10             	mov    %dx,(%rax)
ffffffff802207de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207e2:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff802207e8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802207ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207f2:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff802207f8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802207fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220800:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220806:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022080a:	48 c7 c0 ea bf 20 80 	mov    $0xffffffff8020bfea,%rax
ffffffff80220811:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220815:	48 89 c2             	mov    %rax,%rdx
ffffffff80220818:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022081c:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220822:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220826:	48 c7 c0 ea bf 20 80 	mov    $0xffffffff8020bfea,%rax
ffffffff8022082d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220831:	48 89 c2             	mov    %rax,%rdx
ffffffff80220834:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220838:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff8022083e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220841:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220845:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff8022084b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80220852:	48 c7 c2 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rdx
ffffffff80220859:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022085d:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220863:	66 89 10             	mov    %dx,(%rax)
ffffffff80220866:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022086a:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220870:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220876:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022087a:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220880:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220884:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220888:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff8022088e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220892:	48 c7 c0 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rax
ffffffff80220899:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022089d:	48 89 c2             	mov    %rax,%rdx
ffffffff802208a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208a4:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff802208aa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802208ae:	48 c7 c0 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rax
ffffffff802208b5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802208b9:	48 89 c2             	mov    %rax,%rdx
ffffffff802208bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208c0:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff802208c6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802208c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208cd:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff802208d3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802208da:	48 c7 c2 08 c0 20 80 	mov    $0xffffffff8020c008,%rdx
ffffffff802208e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208e5:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff802208eb:	66 89 10             	mov    %dx,(%rax)
ffffffff802208ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208f2:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff802208f8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802208fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220902:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220908:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022090c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220910:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220916:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022091a:	48 c7 c0 08 c0 20 80 	mov    $0xffffffff8020c008,%rax
ffffffff80220921:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220925:	48 89 c2             	mov    %rax,%rdx
ffffffff80220928:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022092c:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220932:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220936:	48 c7 c0 08 c0 20 80 	mov    $0xffffffff8020c008,%rax
ffffffff8022093d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220941:	48 89 c2             	mov    %rax,%rdx
ffffffff80220944:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220948:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff8022094e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220951:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220955:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff8022095b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80220962:	48 c7 c2 17 c0 20 80 	mov    $0xffffffff8020c017,%rdx
ffffffff80220969:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022096d:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220973:	66 89 10             	mov    %dx,(%rax)
ffffffff80220976:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022097a:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220980:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220986:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022098a:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220990:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220994:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220998:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff8022099e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802209a2:	48 c7 c0 17 c0 20 80 	mov    $0xffffffff8020c017,%rax
ffffffff802209a9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802209ad:	48 89 c2             	mov    %rax,%rdx
ffffffff802209b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209b4:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff802209ba:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802209be:	48 c7 c0 17 c0 20 80 	mov    $0xffffffff8020c017,%rax
ffffffff802209c5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802209c9:	48 89 c2             	mov    %rax,%rdx
ffffffff802209cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209d0:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff802209d6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802209d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209dd:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff802209e3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802209ea:	48 c7 c2 26 c0 20 80 	mov    $0xffffffff8020c026,%rdx
ffffffff802209f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209f5:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff802209fb:	66 89 10             	mov    %dx,(%rax)
ffffffff802209fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a02:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220a08:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220a0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a12:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220a18:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220a1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a20:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220a26:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220a2a:	48 c7 c0 26 c0 20 80 	mov    $0xffffffff8020c026,%rax
ffffffff80220a31:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220a35:	48 89 c2             	mov    %rax,%rdx
ffffffff80220a38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a3c:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220a42:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220a46:	48 c7 c0 26 c0 20 80 	mov    $0xffffffff8020c026,%rax
ffffffff80220a4d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220a51:	48 89 c2             	mov    %rax,%rdx
ffffffff80220a54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a58:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220a5e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220a61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a65:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220a6b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80220a72:	48 c7 c2 35 c0 20 80 	mov    $0xffffffff8020c035,%rdx
ffffffff80220a79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a7d:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220a83:	66 89 10             	mov    %dx,(%rax)
ffffffff80220a86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a8a:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220a90:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220a96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a9a:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220aa0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220aa4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220aa8:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220aae:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220ab2:	48 c7 c0 35 c0 20 80 	mov    $0xffffffff8020c035,%rax
ffffffff80220ab9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220abd:	48 89 c2             	mov    %rax,%rdx
ffffffff80220ac0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ac4:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220aca:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220ace:	48 c7 c0 35 c0 20 80 	mov    $0xffffffff8020c035,%rax
ffffffff80220ad5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220ad9:	48 89 c2             	mov    %rax,%rdx
ffffffff80220adc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ae0:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220ae6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220ae9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220aed:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220af3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220afa:	48 c7 c2 44 c0 20 80 	mov    $0xffffffff8020c044,%rdx
ffffffff80220b01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b05:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220b0b:	66 89 10             	mov    %dx,(%rax)
ffffffff80220b0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b12:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220b18:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220b1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b22:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220b28:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220b2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b30:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220b36:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220b3a:	48 c7 c0 44 c0 20 80 	mov    $0xffffffff8020c044,%rax
ffffffff80220b41:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220b45:	48 89 c2             	mov    %rax,%rdx
ffffffff80220b48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b4c:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220b52:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220b56:	48 c7 c0 44 c0 20 80 	mov    $0xffffffff8020c044,%rax
ffffffff80220b5d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220b61:	48 89 c2             	mov    %rax,%rdx
ffffffff80220b64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b68:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220b6e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220b71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b75:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220b7b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80220b82:	48 c7 c2 53 c0 20 80 	mov    $0xffffffff8020c053,%rdx
ffffffff80220b89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b8d:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220b93:	66 89 10             	mov    %dx,(%rax)
ffffffff80220b96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b9a:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220ba0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220ba6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220baa:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220bb0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220bb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bb8:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220bbe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220bc2:	48 c7 c0 53 c0 20 80 	mov    $0xffffffff8020c053,%rax
ffffffff80220bc9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220bcd:	48 89 c2             	mov    %rax,%rdx
ffffffff80220bd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bd4:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220bda:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220bde:	48 c7 c0 53 c0 20 80 	mov    $0xffffffff8020c053,%rax
ffffffff80220be5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220be9:	48 89 c2             	mov    %rax,%rdx
ffffffff80220bec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bf0:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220bf6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220bf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bfd:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220c03:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220c0a:	48 c7 c2 62 c0 20 80 	mov    $0xffffffff8020c062,%rdx
ffffffff80220c11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c15:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220c1b:	66 89 10             	mov    %dx,(%rax)
ffffffff80220c1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c22:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220c28:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220c2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c32:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220c38:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220c3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c40:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220c46:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220c4a:	48 c7 c0 62 c0 20 80 	mov    $0xffffffff8020c062,%rax
ffffffff80220c51:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220c55:	48 89 c2             	mov    %rax,%rdx
ffffffff80220c58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c5c:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220c62:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220c66:	48 c7 c0 62 c0 20 80 	mov    $0xffffffff8020c062,%rax
ffffffff80220c6d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220c71:	48 89 c2             	mov    %rax,%rdx
ffffffff80220c74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c78:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220c7e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220c81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c85:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220c8b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80220c92:	48 c7 c2 71 c0 20 80 	mov    $0xffffffff8020c071,%rdx
ffffffff80220c99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c9d:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220ca3:	66 89 10             	mov    %dx,(%rax)
ffffffff80220ca6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220caa:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220cb0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220cb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cba:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220cc0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220cc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cc8:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220cce:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220cd2:	48 c7 c0 71 c0 20 80 	mov    $0xffffffff8020c071,%rax
ffffffff80220cd9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220cdd:	48 89 c2             	mov    %rax,%rdx
ffffffff80220ce0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ce4:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220cea:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220cee:	48 c7 c0 71 c0 20 80 	mov    $0xffffffff8020c071,%rax
ffffffff80220cf5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220cf9:	48 89 c2             	mov    %rax,%rdx
ffffffff80220cfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d00:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220d06:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220d09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d0d:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220d13:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220d1a:	48 c7 c2 80 c0 20 80 	mov    $0xffffffff8020c080,%rdx
ffffffff80220d21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d25:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220d2b:	66 89 10             	mov    %dx,(%rax)
ffffffff80220d2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d32:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220d38:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220d3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d42:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220d48:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220d4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d50:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220d56:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220d5a:	48 c7 c0 80 c0 20 80 	mov    $0xffffffff8020c080,%rax
ffffffff80220d61:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220d65:	48 89 c2             	mov    %rax,%rdx
ffffffff80220d68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d6c:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220d72:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220d76:	48 c7 c0 80 c0 20 80 	mov    $0xffffffff8020c080,%rax
ffffffff80220d7d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220d81:	48 89 c2             	mov    %rax,%rdx
ffffffff80220d84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d88:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220d8e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220d91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d95:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220d9b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80220da2:	48 c7 c2 8f c0 20 80 	mov    $0xffffffff8020c08f,%rdx
ffffffff80220da9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dad:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220db3:	66 89 10             	mov    %dx,(%rax)
ffffffff80220db6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dba:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220dc0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220dc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dca:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220dd0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220dd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dd8:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220dde:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220de2:	48 c7 c0 8f c0 20 80 	mov    $0xffffffff8020c08f,%rax
ffffffff80220de9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220ded:	48 89 c2             	mov    %rax,%rdx
ffffffff80220df0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220df4:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220dfa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220dfe:	48 c7 c0 8f c0 20 80 	mov    $0xffffffff8020c08f,%rax
ffffffff80220e05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220e09:	48 89 c2             	mov    %rax,%rdx
ffffffff80220e0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e10:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220e16:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220e19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e1d:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220e23:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220e2a:	48 c7 c2 9e c0 20 80 	mov    $0xffffffff8020c09e,%rdx
ffffffff80220e31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e35:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220e3b:	66 89 10             	mov    %dx,(%rax)
ffffffff80220e3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e42:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220e48:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220e4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e52:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220e58:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220e5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e60:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220e66:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220e6a:	48 c7 c0 9e c0 20 80 	mov    $0xffffffff8020c09e,%rax
ffffffff80220e71:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220e75:	48 89 c2             	mov    %rax,%rdx
ffffffff80220e78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e7c:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220e82:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220e86:	48 c7 c0 9e c0 20 80 	mov    $0xffffffff8020c09e,%rax
ffffffff80220e8d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220e91:	48 89 c2             	mov    %rax,%rdx
ffffffff80220e94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e98:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220e9e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220ea1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ea5:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220eab:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80220eb2:	48 c7 c2 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rdx
ffffffff80220eb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ebd:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80220ec3:	66 89 10             	mov    %dx,(%rax)
ffffffff80220ec6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220eca:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80220ed0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220ed6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220eda:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80220ee0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220ee4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ee8:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80220eee:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220ef2:	48 c7 c0 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rax
ffffffff80220ef9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220efd:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f04:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80220f0a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220f0e:	48 c7 c0 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rax
ffffffff80220f15:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220f19:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f20:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80220f26:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220f29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f2d:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80220f33:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220f3a:	48 c7 c2 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rdx
ffffffff80220f41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f45:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80220f4b:	66 89 10             	mov    %dx,(%rax)
ffffffff80220f4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f52:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80220f58:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220f5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f62:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80220f68:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220f6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f70:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80220f76:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220f7a:	48 c7 c0 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rax
ffffffff80220f81:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220f85:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f8c:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80220f92:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220f96:	48 c7 c0 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rax
ffffffff80220f9d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220fa1:	48 89 c2             	mov    %rax,%rdx
ffffffff80220fa4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fa8:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80220fae:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220fb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fb5:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80220fbb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80220fc2:	48 c7 c2 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rdx
ffffffff80220fc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fcd:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80220fd3:	66 89 10             	mov    %dx,(%rax)
ffffffff80220fd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fda:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80220fe0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220fe6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fea:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80220ff0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220ff4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ff8:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80220ffe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221002:	48 c7 c0 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rax
ffffffff80221009:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022100d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221010:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221014:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff8022101a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022101e:	48 c7 c0 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rax
ffffffff80221025:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221029:	48 89 c2             	mov    %rax,%rdx
ffffffff8022102c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221030:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221036:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221039:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022103d:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221043:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022104a:	48 c7 c2 da c0 20 80 	mov    $0xffffffff8020c0da,%rdx
ffffffff80221051:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221055:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff8022105b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022105e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221062:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff80221068:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022106e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221072:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff80221078:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022107c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221080:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff80221086:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022108a:	48 c7 c0 da c0 20 80 	mov    $0xffffffff8020c0da,%rax
ffffffff80221091:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221095:	48 89 c2             	mov    %rax,%rdx
ffffffff80221098:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022109c:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802210a2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802210a6:	48 c7 c0 da c0 20 80 	mov    $0xffffffff8020c0da,%rax
ffffffff802210ad:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802210b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802210b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210b8:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802210be:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802210c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210c5:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802210cb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff802210d2:	48 c7 c2 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rdx
ffffffff802210d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210dd:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802210e3:	66 89 10             	mov    %dx,(%rax)
ffffffff802210e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210ea:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802210f0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802210f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210fa:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221100:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221104:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221108:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff8022110e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221112:	48 c7 c0 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rax
ffffffff80221119:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022111d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221120:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221124:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff8022112a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022112e:	48 c7 c0 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rax
ffffffff80221135:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221139:	48 89 c2             	mov    %rax,%rdx
ffffffff8022113c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221140:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221146:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221149:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022114d:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221153:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022115a:	48 c7 c2 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rdx
ffffffff80221161:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221165:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff8022116b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022116e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221172:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff80221178:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022117e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221182:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff80221188:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022118c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221190:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff80221196:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022119a:	48 c7 c0 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rax
ffffffff802211a1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802211a5:	48 89 c2             	mov    %rax,%rdx
ffffffff802211a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211ac:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802211b2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802211b6:	48 c7 c0 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rax
ffffffff802211bd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802211c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802211c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211c8:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802211ce:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802211d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211d5:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802211db:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff802211e2:	48 c7 c2 07 c1 20 80 	mov    $0xffffffff8020c107,%rdx
ffffffff802211e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211ed:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff802211f3:	66 89 10             	mov    %dx,(%rax)
ffffffff802211f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211fa:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff80221200:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221206:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022120a:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff80221210:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221214:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221218:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff8022121e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221222:	48 c7 c0 07 c1 20 80 	mov    $0xffffffff8020c107,%rax
ffffffff80221229:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022122d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221230:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221234:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff8022123a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022123e:	48 c7 c0 07 c1 20 80 	mov    $0xffffffff8020c107,%rax
ffffffff80221245:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221249:	48 89 c2             	mov    %rax,%rdx
ffffffff8022124c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221250:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff80221256:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221259:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022125d:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff80221263:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022126a:	48 c7 c2 16 c1 20 80 	mov    $0xffffffff8020c116,%rdx
ffffffff80221271:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221275:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff8022127b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022127e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221282:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff80221288:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022128e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221292:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff80221298:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022129c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212a0:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802212a6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802212aa:	48 c7 c0 16 c1 20 80 	mov    $0xffffffff8020c116,%rax
ffffffff802212b1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802212b5:	48 89 c2             	mov    %rax,%rdx
ffffffff802212b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212bc:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802212c2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802212c6:	48 c7 c0 16 c1 20 80 	mov    $0xffffffff8020c116,%rax
ffffffff802212cd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802212d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802212d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212d8:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802212de:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802212e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212e5:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802212eb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff802212f2:	48 c7 c2 25 c1 20 80 	mov    $0xffffffff8020c125,%rdx
ffffffff802212f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212fd:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221303:	66 89 10             	mov    %dx,(%rax)
ffffffff80221306:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022130a:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221310:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221316:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022131a:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221320:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221324:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221328:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff8022132e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221332:	48 c7 c0 25 c1 20 80 	mov    $0xffffffff8020c125,%rax
ffffffff80221339:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022133d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221340:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221344:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff8022134a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022134e:	48 c7 c0 25 c1 20 80 	mov    $0xffffffff8020c125,%rax
ffffffff80221355:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221359:	48 89 c2             	mov    %rax,%rdx
ffffffff8022135c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221360:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221366:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221369:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022136d:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221373:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022137a:	48 c7 c2 34 c1 20 80 	mov    $0xffffffff8020c134,%rdx
ffffffff80221381:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221385:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff8022138b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022138e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221392:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff80221398:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022139e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213a2:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802213a8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802213ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213b0:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802213b6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802213ba:	48 c7 c0 34 c1 20 80 	mov    $0xffffffff8020c134,%rax
ffffffff802213c1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802213c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802213c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213cc:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802213d2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802213d6:	48 c7 c0 34 c1 20 80 	mov    $0xffffffff8020c134,%rax
ffffffff802213dd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802213e1:	48 89 c2             	mov    %rax,%rdx
ffffffff802213e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213e8:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802213ee:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802213f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213f5:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802213fb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff80221402:	48 c7 c2 43 c1 20 80 	mov    $0xffffffff8020c143,%rdx
ffffffff80221409:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022140d:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221413:	66 89 10             	mov    %dx,(%rax)
ffffffff80221416:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022141a:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221420:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221426:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022142a:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221430:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221434:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221438:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff8022143e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221442:	48 c7 c0 43 c1 20 80 	mov    $0xffffffff8020c143,%rax
ffffffff80221449:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022144d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221450:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221454:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff8022145a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022145e:	48 c7 c0 43 c1 20 80 	mov    $0xffffffff8020c143,%rax
ffffffff80221465:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221469:	48 89 c2             	mov    %rax,%rdx
ffffffff8022146c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221470:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221476:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221479:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022147d:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221483:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022148a:	48 c7 c2 52 c1 20 80 	mov    $0xffffffff8020c152,%rdx
ffffffff80221491:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221495:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff8022149b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022149e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214a2:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802214a8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802214ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214b2:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802214b8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802214bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214c0:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802214c6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802214ca:	48 c7 c0 52 c1 20 80 	mov    $0xffffffff8020c152,%rax
ffffffff802214d1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802214d5:	48 89 c2             	mov    %rax,%rdx
ffffffff802214d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214dc:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802214e2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802214e6:	48 c7 c0 52 c1 20 80 	mov    $0xffffffff8020c152,%rax
ffffffff802214ed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802214f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802214f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214f8:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802214fe:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221501:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221505:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff8022150b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80221512:	48 c7 c2 61 c1 20 80 	mov    $0xffffffff8020c161,%rdx
ffffffff80221519:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022151d:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221523:	66 89 10             	mov    %dx,(%rax)
ffffffff80221526:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022152a:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221530:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221536:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022153a:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221540:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221544:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221548:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff8022154e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221552:	48 c7 c0 61 c1 20 80 	mov    $0xffffffff8020c161,%rax
ffffffff80221559:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022155d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221560:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221564:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff8022156a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022156e:	48 c7 c0 61 c1 20 80 	mov    $0xffffffff8020c161,%rax
ffffffff80221575:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221579:	48 89 c2             	mov    %rax,%rdx
ffffffff8022157c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221580:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221586:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221589:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022158d:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221593:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022159a:	48 c7 c2 70 c1 20 80 	mov    $0xffffffff8020c170,%rdx
ffffffff802215a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215a5:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802215ab:	66 89 10             	mov    %dx,(%rax)
ffffffff802215ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215b2:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802215b8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802215be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215c2:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802215c8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802215cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215d0:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802215d6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802215da:	48 c7 c0 70 c1 20 80 	mov    $0xffffffff8020c170,%rax
ffffffff802215e1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802215e5:	48 89 c2             	mov    %rax,%rdx
ffffffff802215e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215ec:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802215f2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802215f6:	48 c7 c0 70 c1 20 80 	mov    $0xffffffff8020c170,%rax
ffffffff802215fd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221601:	48 89 c2             	mov    %rax,%rdx
ffffffff80221604:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221608:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff8022160e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221611:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221615:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff8022161b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80221622:	48 c7 c2 7f c1 20 80 	mov    $0xffffffff8020c17f,%rdx
ffffffff80221629:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022162d:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221633:	66 89 10             	mov    %dx,(%rax)
ffffffff80221636:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022163a:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221640:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221646:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022164a:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221650:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221654:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221658:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff8022165e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221662:	48 c7 c0 7f c1 20 80 	mov    $0xffffffff8020c17f,%rax
ffffffff80221669:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022166d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221670:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221674:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff8022167a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022167e:	48 c7 c0 7f c1 20 80 	mov    $0xffffffff8020c17f,%rax
ffffffff80221685:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221689:	48 89 c2             	mov    %rax,%rdx
ffffffff8022168c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221690:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221696:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221699:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022169d:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802216a3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802216aa:	48 c7 c2 8e c1 20 80 	mov    $0xffffffff8020c18e,%rdx
ffffffff802216b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216b5:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff802216bb:	66 89 10             	mov    %dx,(%rax)
ffffffff802216be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216c2:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff802216c8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802216ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216d2:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff802216d8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802216dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216e0:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff802216e6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802216ea:	48 c7 c0 8e c1 20 80 	mov    $0xffffffff8020c18e,%rax
ffffffff802216f1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802216f5:	48 89 c2             	mov    %rax,%rdx
ffffffff802216f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216fc:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221702:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221706:	48 c7 c0 8e c1 20 80 	mov    $0xffffffff8020c18e,%rax
ffffffff8022170d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221711:	48 89 c2             	mov    %rax,%rdx
ffffffff80221714:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221718:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff8022171e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221721:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221725:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff8022172b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80221732:	48 c7 c2 9d c1 20 80 	mov    $0xffffffff8020c19d,%rdx
ffffffff80221739:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022173d:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221743:	66 89 10             	mov    %dx,(%rax)
ffffffff80221746:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022174a:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221750:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221756:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022175a:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221760:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221764:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221768:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff8022176e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221772:	48 c7 c0 9d c1 20 80 	mov    $0xffffffff8020c19d,%rax
ffffffff80221779:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022177d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221780:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221784:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff8022178a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022178e:	48 c7 c0 9d c1 20 80 	mov    $0xffffffff8020c19d,%rax
ffffffff80221795:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221799:	48 89 c2             	mov    %rax,%rdx
ffffffff8022179c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217a0:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802217a6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802217a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217ad:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802217b3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802217ba:	48 c7 c2 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rdx
ffffffff802217c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217c5:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff802217cb:	66 89 10             	mov    %dx,(%rax)
ffffffff802217ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217d2:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff802217d8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802217de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217e2:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff802217e8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802217ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217f0:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff802217f6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802217fa:	48 c7 c0 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rax
ffffffff80221801:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221805:	48 89 c2             	mov    %rax,%rdx
ffffffff80221808:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022180c:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221812:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221816:	48 c7 c0 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rax
ffffffff8022181d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221821:	48 89 c2             	mov    %rax,%rdx
ffffffff80221824:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221828:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff8022182e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221831:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221835:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff8022183b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80221842:	48 c7 c2 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rdx
ffffffff80221849:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022184d:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221853:	66 89 10             	mov    %dx,(%rax)
ffffffff80221856:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022185a:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221860:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221866:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022186a:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221870:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221874:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221878:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff8022187e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221882:	48 c7 c0 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rax
ffffffff80221889:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022188d:	48 89 c2             	mov    %rax,%rdx
ffffffff80221890:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221894:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff8022189a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022189e:	48 c7 c0 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rax
ffffffff802218a5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802218a9:	48 89 c2             	mov    %rax,%rdx
ffffffff802218ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218b0:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff802218b6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802218b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218bd:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff802218c3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802218ca:	48 c7 c2 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rdx
ffffffff802218d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218d5:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff802218db:	66 89 10             	mov    %dx,(%rax)
ffffffff802218de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218e2:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff802218e8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802218ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218f2:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff802218f8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802218fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221900:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221906:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022190a:	48 c7 c0 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rax
ffffffff80221911:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221915:	48 89 c2             	mov    %rax,%rdx
ffffffff80221918:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022191c:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221922:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221926:	48 c7 c0 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rax
ffffffff8022192d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221931:	48 89 c2             	mov    %rax,%rdx
ffffffff80221934:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221938:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff8022193e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221941:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221945:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff8022194b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80221952:	48 c7 c2 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rdx
ffffffff80221959:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022195d:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221963:	66 89 10             	mov    %dx,(%rax)
ffffffff80221966:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022196a:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221970:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221976:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022197a:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221980:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221984:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221988:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff8022198e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221992:	48 c7 c0 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rax
ffffffff80221999:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022199d:	48 89 c2             	mov    %rax,%rdx
ffffffff802219a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219a4:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff802219aa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802219ae:	48 c7 c0 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rax
ffffffff802219b5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802219b9:	48 89 c2             	mov    %rax,%rdx
ffffffff802219bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219c0:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff802219c6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802219c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219cd:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff802219d3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802219da:	48 c7 c2 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rdx
ffffffff802219e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219e5:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff802219eb:	66 89 10             	mov    %dx,(%rax)
ffffffff802219ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219f2:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff802219f8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802219fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a02:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221a08:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a10:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221a16:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221a1a:	48 c7 c0 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rax
ffffffff80221a21:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221a25:	48 89 c2             	mov    %rax,%rdx
ffffffff80221a28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a2c:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221a32:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221a36:	48 c7 c0 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rax
ffffffff80221a3d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221a41:	48 89 c2             	mov    %rax,%rdx
ffffffff80221a44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a48:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221a4e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221a51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a55:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221a5b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80221a62:	48 c7 c2 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rdx
ffffffff80221a69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a6d:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221a73:	66 89 10             	mov    %dx,(%rax)
ffffffff80221a76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a7a:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221a80:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221a86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a8a:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221a90:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221a94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a98:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221a9e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221aa2:	48 c7 c0 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rax
ffffffff80221aa9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221aad:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ab0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ab4:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221aba:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221abe:	48 c7 c0 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rax
ffffffff80221ac5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221ac9:	48 89 c2             	mov    %rax,%rdx
ffffffff80221acc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ad0:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221ad6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221ad9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221add:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221ae3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221aea:	48 c7 c2 06 c2 20 80 	mov    $0xffffffff8020c206,%rdx
ffffffff80221af1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221af5:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221afb:	66 89 10             	mov    %dx,(%rax)
ffffffff80221afe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b02:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221b08:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221b0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b12:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221b18:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221b1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b20:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221b26:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221b2a:	48 c7 c0 06 c2 20 80 	mov    $0xffffffff8020c206,%rax
ffffffff80221b31:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221b35:	48 89 c2             	mov    %rax,%rdx
ffffffff80221b38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b3c:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221b42:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221b46:	48 c7 c0 06 c2 20 80 	mov    $0xffffffff8020c206,%rax
ffffffff80221b4d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221b51:	48 89 c2             	mov    %rax,%rdx
ffffffff80221b54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b58:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221b5e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221b61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b65:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221b6b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80221b72:	48 c7 c2 15 c2 20 80 	mov    $0xffffffff8020c215,%rdx
ffffffff80221b79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b7d:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221b83:	66 89 10             	mov    %dx,(%rax)
ffffffff80221b86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b8a:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221b90:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221b96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b9a:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221ba0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221ba4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ba8:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221bae:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221bb2:	48 c7 c0 15 c2 20 80 	mov    $0xffffffff8020c215,%rax
ffffffff80221bb9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221bbd:	48 89 c2             	mov    %rax,%rdx
ffffffff80221bc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bc4:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221bca:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221bce:	48 c7 c0 15 c2 20 80 	mov    $0xffffffff8020c215,%rax
ffffffff80221bd5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221bd9:	48 89 c2             	mov    %rax,%rdx
ffffffff80221bdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221be0:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221be6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221be9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bed:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221bf3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221bfa:	48 c7 c2 24 c2 20 80 	mov    $0xffffffff8020c224,%rdx
ffffffff80221c01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c05:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221c0b:	66 89 10             	mov    %dx,(%rax)
ffffffff80221c0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c12:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221c18:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221c1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c22:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221c28:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221c2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c30:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221c36:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221c3a:	48 c7 c0 24 c2 20 80 	mov    $0xffffffff8020c224,%rax
ffffffff80221c41:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221c45:	48 89 c2             	mov    %rax,%rdx
ffffffff80221c48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c4c:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221c52:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221c56:	48 c7 c0 24 c2 20 80 	mov    $0xffffffff8020c224,%rax
ffffffff80221c5d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221c61:	48 89 c2             	mov    %rax,%rdx
ffffffff80221c64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c68:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221c6e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221c71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c75:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221c7b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80221c82:	48 c7 c2 33 c2 20 80 	mov    $0xffffffff8020c233,%rdx
ffffffff80221c89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c8d:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221c93:	66 89 10             	mov    %dx,(%rax)
ffffffff80221c96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c9a:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221ca0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221ca6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221caa:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221cb0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221cb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cb8:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221cbe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221cc2:	48 c7 c0 33 c2 20 80 	mov    $0xffffffff8020c233,%rax
ffffffff80221cc9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221ccd:	48 89 c2             	mov    %rax,%rdx
ffffffff80221cd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cd4:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221cda:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221cde:	48 c7 c0 33 c2 20 80 	mov    $0xffffffff8020c233,%rax
ffffffff80221ce5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221ce9:	48 89 c2             	mov    %rax,%rdx
ffffffff80221cec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cf0:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221cf6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221cf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cfd:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221d03:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221d0a:	48 c7 c2 42 c2 20 80 	mov    $0xffffffff8020c242,%rdx
ffffffff80221d11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d15:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221d1b:	66 89 10             	mov    %dx,(%rax)
ffffffff80221d1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d22:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221d28:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221d2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d32:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221d38:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221d3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d40:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221d46:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221d4a:	48 c7 c0 42 c2 20 80 	mov    $0xffffffff8020c242,%rax
ffffffff80221d51:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221d55:	48 89 c2             	mov    %rax,%rdx
ffffffff80221d58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d5c:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221d62:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221d66:	48 c7 c0 42 c2 20 80 	mov    $0xffffffff8020c242,%rax
ffffffff80221d6d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221d71:	48 89 c2             	mov    %rax,%rdx
ffffffff80221d74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d78:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221d7e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221d81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d85:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221d8b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80221d92:	48 c7 c2 51 c2 20 80 	mov    $0xffffffff8020c251,%rdx
ffffffff80221d99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d9d:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221da3:	66 89 10             	mov    %dx,(%rax)
ffffffff80221da6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221daa:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221db0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221db6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221dba:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221dc0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221dc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221dc8:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221dce:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221dd2:	48 c7 c0 51 c2 20 80 	mov    $0xffffffff8020c251,%rax
ffffffff80221dd9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221ddd:	48 89 c2             	mov    %rax,%rdx
ffffffff80221de0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221de4:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221dea:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221dee:	48 c7 c0 51 c2 20 80 	mov    $0xffffffff8020c251,%rax
ffffffff80221df5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221df9:	48 89 c2             	mov    %rax,%rdx
ffffffff80221dfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e00:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221e06:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221e09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e0d:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221e13:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221e1a:	48 c7 c2 60 c2 20 80 	mov    $0xffffffff8020c260,%rdx
ffffffff80221e21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e25:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221e2b:	66 89 10             	mov    %dx,(%rax)
ffffffff80221e2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e32:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221e38:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221e3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e42:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221e48:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221e4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e50:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221e56:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221e5a:	48 c7 c0 60 c2 20 80 	mov    $0xffffffff8020c260,%rax
ffffffff80221e61:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221e65:	48 89 c2             	mov    %rax,%rdx
ffffffff80221e68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e6c:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221e72:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221e76:	48 c7 c0 60 c2 20 80 	mov    $0xffffffff8020c260,%rax
ffffffff80221e7d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221e81:	48 89 c2             	mov    %rax,%rdx
ffffffff80221e84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e88:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221e8e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221e91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e95:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221e9b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80221ea2:	48 c7 c2 6f c2 20 80 	mov    $0xffffffff8020c26f,%rdx
ffffffff80221ea9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ead:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80221eb3:	66 89 10             	mov    %dx,(%rax)
ffffffff80221eb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221eba:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80221ec0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221ec6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221eca:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80221ed0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221ed4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ed8:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80221ede:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221ee2:	48 c7 c0 6f c2 20 80 	mov    $0xffffffff8020c26f,%rax
ffffffff80221ee9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221eed:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ef0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ef4:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80221efa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221efe:	48 c7 c0 6f c2 20 80 	mov    $0xffffffff8020c26f,%rax
ffffffff80221f05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221f09:	48 89 c2             	mov    %rax,%rdx
ffffffff80221f0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f10:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80221f16:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221f19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f1d:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80221f23:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221f2a:	48 c7 c2 7e c2 20 80 	mov    $0xffffffff8020c27e,%rdx
ffffffff80221f31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f35:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80221f3b:	66 89 10             	mov    %dx,(%rax)
ffffffff80221f3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f42:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80221f48:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221f4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f52:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80221f58:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221f5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f60:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80221f66:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221f6a:	48 c7 c0 7e c2 20 80 	mov    $0xffffffff8020c27e,%rax
ffffffff80221f71:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221f75:	48 89 c2             	mov    %rax,%rdx
ffffffff80221f78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f7c:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80221f82:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221f86:	48 c7 c0 7e c2 20 80 	mov    $0xffffffff8020c27e,%rax
ffffffff80221f8d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221f91:	48 89 c2             	mov    %rax,%rdx
ffffffff80221f94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f98:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80221f9e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221fa1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fa5:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80221fab:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80221fb2:	48 c7 c2 8d c2 20 80 	mov    $0xffffffff8020c28d,%rdx
ffffffff80221fb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fbd:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80221fc3:	66 89 10             	mov    %dx,(%rax)
ffffffff80221fc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fca:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80221fd0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221fd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fda:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80221fe0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221fe4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fe8:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80221fee:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221ff2:	48 c7 c0 8d c2 20 80 	mov    $0xffffffff8020c28d,%rax
ffffffff80221ff9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221ffd:	48 89 c2             	mov    %rax,%rdx
ffffffff80222000:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222004:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff8022200a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022200e:	48 c7 c0 8d c2 20 80 	mov    $0xffffffff8020c28d,%rax
ffffffff80222015:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222019:	48 89 c2             	mov    %rax,%rdx
ffffffff8022201c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222020:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222026:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222029:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022202d:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222033:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022203a:	48 c7 c2 9c c2 20 80 	mov    $0xffffffff8020c29c,%rdx
ffffffff80222041:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222045:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff8022204b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022204e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222052:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff80222058:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022205e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222062:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff80222068:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022206c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222070:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff80222076:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022207a:	48 c7 c0 9c c2 20 80 	mov    $0xffffffff8020c29c,%rax
ffffffff80222081:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222085:	48 89 c2             	mov    %rax,%rdx
ffffffff80222088:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022208c:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff80222092:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222096:	48 c7 c0 9c c2 20 80 	mov    $0xffffffff8020c29c,%rax
ffffffff8022209d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802220a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802220a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220a8:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802220ae:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802220b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220b5:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802220bb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff802220c2:	48 c7 c2 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rdx
ffffffff802220c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220cd:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802220d3:	66 89 10             	mov    %dx,(%rax)
ffffffff802220d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220da:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802220e0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802220e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220ea:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802220f0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802220f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220f8:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802220fe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222102:	48 c7 c0 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rax
ffffffff80222109:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022210d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222110:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222114:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff8022211a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022211e:	48 c7 c0 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rax
ffffffff80222125:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222129:	48 89 c2             	mov    %rax,%rdx
ffffffff8022212c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222130:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222136:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222139:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022213d:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222143:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022214a:	48 c7 c2 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rdx
ffffffff80222151:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222155:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff8022215b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022215e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222162:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff80222168:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022216e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222172:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff80222178:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022217c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222180:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff80222186:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022218a:	48 c7 c0 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rax
ffffffff80222191:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222195:	48 89 c2             	mov    %rax,%rdx
ffffffff80222198:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022219c:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802221a2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802221a6:	48 c7 c0 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rax
ffffffff802221ad:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802221b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802221b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221b8:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802221be:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802221c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221c5:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802221cb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff802221d2:	48 c7 c2 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rdx
ffffffff802221d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221dd:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802221e3:	66 89 10             	mov    %dx,(%rax)
ffffffff802221e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221ea:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802221f0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802221f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221fa:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222200:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222204:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222208:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff8022220e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222212:	48 c7 c0 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rax
ffffffff80222219:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022221d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222220:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222224:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff8022222a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022222e:	48 c7 c0 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rax
ffffffff80222235:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222239:	48 89 c2             	mov    %rax,%rdx
ffffffff8022223c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222240:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222246:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222249:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022224d:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222253:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022225a:	48 c7 c2 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rdx
ffffffff80222261:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222265:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff8022226b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022226e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222272:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff80222278:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022227e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222282:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff80222288:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022228c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222290:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff80222296:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022229a:	48 c7 c0 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rax
ffffffff802222a1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802222a5:	48 89 c2             	mov    %rax,%rdx
ffffffff802222a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222ac:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802222b2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802222b6:	48 c7 c0 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rax
ffffffff802222bd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802222c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802222c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222c8:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802222ce:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802222d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222d5:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802222db:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802222e2:	48 c7 c2 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rdx
ffffffff802222e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222ed:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff802222f3:	66 89 10             	mov    %dx,(%rax)
ffffffff802222f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222fa:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff80222300:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222306:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022230a:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff80222310:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222314:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222318:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff8022231e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222322:	48 c7 c0 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rax
ffffffff80222329:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022232d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222330:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222334:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff8022233a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022233e:	48 c7 c0 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rax
ffffffff80222345:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222349:	48 89 c2             	mov    %rax,%rdx
ffffffff8022234c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222350:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff80222356:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222359:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022235d:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff80222363:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022236a:	48 c7 c2 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rdx
ffffffff80222371:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222375:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff8022237b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022237e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222382:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff80222388:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022238e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222392:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff80222398:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022239c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223a0:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802223a6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802223aa:	48 c7 c0 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rax
ffffffff802223b1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802223b5:	48 89 c2             	mov    %rax,%rdx
ffffffff802223b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223bc:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802223c2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802223c6:	48 c7 c0 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rax
ffffffff802223cd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802223d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802223d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223d8:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802223de:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802223e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223e5:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802223eb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802223f2:	48 c7 c2 05 c3 20 80 	mov    $0xffffffff8020c305,%rdx
ffffffff802223f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223fd:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222403:	66 89 10             	mov    %dx,(%rax)
ffffffff80222406:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022240a:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222410:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222416:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022241a:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222420:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222424:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222428:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff8022242e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222432:	48 c7 c0 05 c3 20 80 	mov    $0xffffffff8020c305,%rax
ffffffff80222439:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022243d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222440:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222444:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff8022244a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022244e:	48 c7 c0 05 c3 20 80 	mov    $0xffffffff8020c305,%rax
ffffffff80222455:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222459:	48 89 c2             	mov    %rax,%rdx
ffffffff8022245c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222460:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222466:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222469:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022246d:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222473:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022247a:	48 c7 c2 14 c3 20 80 	mov    $0xffffffff8020c314,%rdx
ffffffff80222481:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222485:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff8022248b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022248e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222492:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff80222498:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022249e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224a2:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802224a8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802224ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224b0:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802224b6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802224ba:	48 c7 c0 14 c3 20 80 	mov    $0xffffffff8020c314,%rax
ffffffff802224c1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802224c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802224c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224cc:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802224d2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802224d6:	48 c7 c0 14 c3 20 80 	mov    $0xffffffff8020c314,%rax
ffffffff802224dd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802224e1:	48 89 c2             	mov    %rax,%rdx
ffffffff802224e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224e8:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802224ee:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802224f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224f5:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802224fb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80222502:	48 c7 c2 23 c3 20 80 	mov    $0xffffffff8020c323,%rdx
ffffffff80222509:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022250d:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222513:	66 89 10             	mov    %dx,(%rax)
ffffffff80222516:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022251a:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222520:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222526:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022252a:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222530:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222534:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222538:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff8022253e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222542:	48 c7 c0 23 c3 20 80 	mov    $0xffffffff8020c323,%rax
ffffffff80222549:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022254d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222550:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222554:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff8022255a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022255e:	48 c7 c0 23 c3 20 80 	mov    $0xffffffff8020c323,%rax
ffffffff80222565:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222569:	48 89 c2             	mov    %rax,%rdx
ffffffff8022256c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222570:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222576:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222579:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022257d:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222583:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022258a:	48 c7 c2 32 c3 20 80 	mov    $0xffffffff8020c332,%rdx
ffffffff80222591:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222595:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff8022259b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022259e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225a2:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802225a8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802225ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225b2:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802225b8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802225bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225c0:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802225c6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802225ca:	48 c7 c0 32 c3 20 80 	mov    $0xffffffff8020c332,%rax
ffffffff802225d1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802225d5:	48 89 c2             	mov    %rax,%rdx
ffffffff802225d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225dc:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802225e2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802225e6:	48 c7 c0 32 c3 20 80 	mov    $0xffffffff8020c332,%rax
ffffffff802225ed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802225f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802225f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225f8:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802225fe:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222601:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222605:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff8022260b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80222612:	48 c7 c2 41 c3 20 80 	mov    $0xffffffff8020c341,%rdx
ffffffff80222619:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022261d:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222623:	66 89 10             	mov    %dx,(%rax)
ffffffff80222626:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022262a:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222630:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222636:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022263a:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222640:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222644:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222648:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff8022264e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222652:	48 c7 c0 41 c3 20 80 	mov    $0xffffffff8020c341,%rax
ffffffff80222659:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022265d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222660:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222664:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff8022266a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022266e:	48 c7 c0 41 c3 20 80 	mov    $0xffffffff8020c341,%rax
ffffffff80222675:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222679:	48 89 c2             	mov    %rax,%rdx
ffffffff8022267c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222680:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222686:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222689:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022268d:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222693:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022269a:	48 c7 c2 50 c3 20 80 	mov    $0xffffffff8020c350,%rdx
ffffffff802226a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226a5:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802226ab:	66 89 10             	mov    %dx,(%rax)
ffffffff802226ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226b2:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802226b8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802226be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226c2:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802226c8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802226cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226d0:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802226d6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802226da:	48 c7 c0 50 c3 20 80 	mov    $0xffffffff8020c350,%rax
ffffffff802226e1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802226e5:	48 89 c2             	mov    %rax,%rdx
ffffffff802226e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226ec:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802226f2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802226f6:	48 c7 c0 50 c3 20 80 	mov    $0xffffffff8020c350,%rax
ffffffff802226fd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222701:	48 89 c2             	mov    %rax,%rdx
ffffffff80222704:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222708:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff8022270e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222711:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222715:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff8022271b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80222722:	48 c7 c2 5f c3 20 80 	mov    $0xffffffff8020c35f,%rdx
ffffffff80222729:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022272d:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222733:	66 89 10             	mov    %dx,(%rax)
ffffffff80222736:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022273a:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222740:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222746:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022274a:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222750:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222754:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222758:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff8022275e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222762:	48 c7 c0 5f c3 20 80 	mov    $0xffffffff8020c35f,%rax
ffffffff80222769:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022276d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222770:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222774:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff8022277a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022277e:	48 c7 c0 5f c3 20 80 	mov    $0xffffffff8020c35f,%rax
ffffffff80222785:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222789:	48 89 c2             	mov    %rax,%rdx
ffffffff8022278c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222790:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222796:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222799:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022279d:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802227a3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802227aa:	48 c7 c2 6e c3 20 80 	mov    $0xffffffff8020c36e,%rdx
ffffffff802227b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227b5:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff802227bb:	66 89 10             	mov    %dx,(%rax)
ffffffff802227be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227c2:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff802227c8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802227ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227d2:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff802227d8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802227dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227e0:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff802227e6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802227ea:	48 c7 c0 6e c3 20 80 	mov    $0xffffffff8020c36e,%rax
ffffffff802227f1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802227f5:	48 89 c2             	mov    %rax,%rdx
ffffffff802227f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227fc:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222802:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222806:	48 c7 c0 6e c3 20 80 	mov    $0xffffffff8020c36e,%rax
ffffffff8022280d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222811:	48 89 c2             	mov    %rax,%rdx
ffffffff80222814:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222818:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff8022281e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222821:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222825:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff8022282b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80222832:	48 c7 c2 7d c3 20 80 	mov    $0xffffffff8020c37d,%rdx
ffffffff80222839:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022283d:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222843:	66 89 10             	mov    %dx,(%rax)
ffffffff80222846:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022284a:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222850:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222856:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022285a:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222860:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222864:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222868:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff8022286e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222872:	48 c7 c0 7d c3 20 80 	mov    $0xffffffff8020c37d,%rax
ffffffff80222879:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022287d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222880:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222884:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff8022288a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022288e:	48 c7 c0 7d c3 20 80 	mov    $0xffffffff8020c37d,%rax
ffffffff80222895:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222899:	48 89 c2             	mov    %rax,%rdx
ffffffff8022289c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228a0:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff802228a6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802228a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228ad:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff802228b3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802228ba:	48 c7 c2 8c c3 20 80 	mov    $0xffffffff8020c38c,%rdx
ffffffff802228c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228c5:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff802228cb:	66 89 10             	mov    %dx,(%rax)
ffffffff802228ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228d2:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff802228d8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802228de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228e2:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff802228e8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802228ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228f0:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff802228f6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802228fa:	48 c7 c0 8c c3 20 80 	mov    $0xffffffff8020c38c,%rax
ffffffff80222901:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222905:	48 89 c2             	mov    %rax,%rdx
ffffffff80222908:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022290c:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222912:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222916:	48 c7 c0 8c c3 20 80 	mov    $0xffffffff8020c38c,%rax
ffffffff8022291d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222921:	48 89 c2             	mov    %rax,%rdx
ffffffff80222924:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222928:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff8022292e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222931:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222935:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff8022293b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80222942:	48 c7 c2 9b c3 20 80 	mov    $0xffffffff8020c39b,%rdx
ffffffff80222949:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022294d:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222953:	66 89 10             	mov    %dx,(%rax)
ffffffff80222956:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022295a:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222960:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222966:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022296a:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222970:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222974:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222978:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff8022297e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222982:	48 c7 c0 9b c3 20 80 	mov    $0xffffffff8020c39b,%rax
ffffffff80222989:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022298d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222990:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222994:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff8022299a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022299e:	48 c7 c0 9b c3 20 80 	mov    $0xffffffff8020c39b,%rax
ffffffff802229a5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802229a9:	48 89 c2             	mov    %rax,%rdx
ffffffff802229ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229b0:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff802229b6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802229b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229bd:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff802229c3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802229ca:	48 c7 c2 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rdx
ffffffff802229d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229d5:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff802229db:	66 89 10             	mov    %dx,(%rax)
ffffffff802229de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229e2:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff802229e8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802229ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229f2:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff802229f8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802229fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a00:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222a06:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222a0a:	48 c7 c0 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rax
ffffffff80222a11:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222a15:	48 89 c2             	mov    %rax,%rdx
ffffffff80222a18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a1c:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222a22:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222a26:	48 c7 c0 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rax
ffffffff80222a2d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222a31:	48 89 c2             	mov    %rax,%rdx
ffffffff80222a34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a38:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222a3e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222a41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a45:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222a4b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80222a52:	48 c7 c2 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rdx
ffffffff80222a59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a5d:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222a63:	66 89 10             	mov    %dx,(%rax)
ffffffff80222a66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a6a:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222a70:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222a76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a7a:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222a80:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222a84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a88:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222a8e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222a92:	48 c7 c0 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rax
ffffffff80222a99:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222a9d:	48 89 c2             	mov    %rax,%rdx
ffffffff80222aa0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222aa4:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222aaa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222aae:	48 c7 c0 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rax
ffffffff80222ab5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222ab9:	48 89 c2             	mov    %rax,%rdx
ffffffff80222abc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ac0:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222ac6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222ac9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222acd:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222ad3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222ada:	48 c7 c2 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rdx
ffffffff80222ae1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ae5:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222aeb:	66 89 10             	mov    %dx,(%rax)
ffffffff80222aee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222af2:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222af8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222afe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b02:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222b08:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222b0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b10:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222b16:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222b1a:	48 c7 c0 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rax
ffffffff80222b21:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222b25:	48 89 c2             	mov    %rax,%rdx
ffffffff80222b28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b2c:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222b32:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222b36:	48 c7 c0 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rax
ffffffff80222b3d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222b41:	48 89 c2             	mov    %rax,%rdx
ffffffff80222b44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b48:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222b4e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222b51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b55:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222b5b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80222b62:	48 c7 c2 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rdx
ffffffff80222b69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b6d:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222b73:	66 89 10             	mov    %dx,(%rax)
ffffffff80222b76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b7a:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222b80:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222b86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b8a:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222b90:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222b94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b98:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222b9e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222ba2:	48 c7 c0 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rax
ffffffff80222ba9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222bad:	48 89 c2             	mov    %rax,%rdx
ffffffff80222bb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bb4:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222bba:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222bbe:	48 c7 c0 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rax
ffffffff80222bc5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222bc9:	48 89 c2             	mov    %rax,%rdx
ffffffff80222bcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bd0:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222bd6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222bd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bdd:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222be3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222bea:	48 c7 c2 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rdx
ffffffff80222bf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bf5:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222bfb:	66 89 10             	mov    %dx,(%rax)
ffffffff80222bfe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c02:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222c08:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222c0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c12:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222c18:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222c1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c20:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222c26:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222c2a:	48 c7 c0 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rax
ffffffff80222c31:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222c35:	48 89 c2             	mov    %rax,%rdx
ffffffff80222c38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c3c:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222c42:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222c46:	48 c7 c0 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rax
ffffffff80222c4d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222c51:	48 89 c2             	mov    %rax,%rdx
ffffffff80222c54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c58:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222c5e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222c61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c65:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222c6b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80222c72:	48 c7 c2 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rdx
ffffffff80222c79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c7d:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222c83:	66 89 10             	mov    %dx,(%rax)
ffffffff80222c86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c8a:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222c90:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222c96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c9a:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222ca0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222ca4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ca8:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222cae:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222cb2:	48 c7 c0 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rax
ffffffff80222cb9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222cbd:	48 89 c2             	mov    %rax,%rdx
ffffffff80222cc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cc4:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222cca:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222cce:	48 c7 c0 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rax
ffffffff80222cd5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222cd9:	48 89 c2             	mov    %rax,%rdx
ffffffff80222cdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ce0:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222ce6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222ce9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ced:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222cf3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222cfa:	48 c7 c2 04 c4 20 80 	mov    $0xffffffff8020c404,%rdx
ffffffff80222d01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d05:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222d0b:	66 89 10             	mov    %dx,(%rax)
ffffffff80222d0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d12:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222d18:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222d1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d22:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222d28:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222d2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d30:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222d36:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222d3a:	48 c7 c0 04 c4 20 80 	mov    $0xffffffff8020c404,%rax
ffffffff80222d41:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222d45:	48 89 c2             	mov    %rax,%rdx
ffffffff80222d48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d4c:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222d52:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222d56:	48 c7 c0 04 c4 20 80 	mov    $0xffffffff8020c404,%rax
ffffffff80222d5d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222d61:	48 89 c2             	mov    %rax,%rdx
ffffffff80222d64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d68:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222d6e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222d71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d75:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222d7b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80222d82:	48 c7 c2 13 c4 20 80 	mov    $0xffffffff8020c413,%rdx
ffffffff80222d89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d8d:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222d93:	66 89 10             	mov    %dx,(%rax)
ffffffff80222d96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d9a:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222da0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222da6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222daa:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222db0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222db4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222db8:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222dbe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222dc2:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
ffffffff80222dc9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222dcd:	48 89 c2             	mov    %rax,%rdx
ffffffff80222dd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222dd4:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222dda:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222dde:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
ffffffff80222de5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222de9:	48 89 c2             	mov    %rax,%rdx
ffffffff80222dec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222df0:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222df6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222df9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222dfd:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222e03:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222e0a:	48 c7 c2 22 c4 20 80 	mov    $0xffffffff8020c422,%rdx
ffffffff80222e11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e15:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222e1b:	66 89 10             	mov    %dx,(%rax)
ffffffff80222e1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e22:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222e28:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222e2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e32:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222e38:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222e3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e40:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222e46:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222e4a:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff80222e51:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222e55:	48 89 c2             	mov    %rax,%rdx
ffffffff80222e58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e5c:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222e62:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222e66:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff80222e6d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222e71:	48 89 c2             	mov    %rax,%rdx
ffffffff80222e74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e78:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222e7e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222e81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e85:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222e8b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80222e92:	48 c7 c2 31 c4 20 80 	mov    $0xffffffff8020c431,%rdx
ffffffff80222e99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e9d:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80222ea3:	66 89 10             	mov    %dx,(%rax)
ffffffff80222ea6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222eaa:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80222eb0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222eb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222eba:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80222ec0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222ec4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ec8:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80222ece:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222ed2:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
ffffffff80222ed9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222edd:	48 89 c2             	mov    %rax,%rdx
ffffffff80222ee0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ee4:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80222eea:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222eee:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
ffffffff80222ef5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222ef9:	48 89 c2             	mov    %rax,%rdx
ffffffff80222efc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f00:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80222f06:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222f09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f0d:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80222f13:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222f1a:	48 c7 c2 40 c4 20 80 	mov    $0xffffffff8020c440,%rdx
ffffffff80222f21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f25:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80222f2b:	66 89 10             	mov    %dx,(%rax)
ffffffff80222f2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f32:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80222f38:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222f3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f42:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80222f48:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222f4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f50:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80222f56:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222f5a:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff80222f61:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222f65:	48 89 c2             	mov    %rax,%rdx
ffffffff80222f68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f6c:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80222f72:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222f76:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff80222f7d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222f81:	48 89 c2             	mov    %rax,%rdx
ffffffff80222f84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f88:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80222f8e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222f91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f95:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80222f9b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80222fa2:	48 c7 c2 4f c4 20 80 	mov    $0xffffffff8020c44f,%rdx
ffffffff80222fa9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fad:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80222fb3:	66 89 10             	mov    %dx,(%rax)
ffffffff80222fb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fba:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80222fc0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222fc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fca:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80222fd0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222fd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fd8:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80222fde:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222fe2:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
ffffffff80222fe9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222fed:	48 89 c2             	mov    %rax,%rdx
ffffffff80222ff0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ff4:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80222ffa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222ffe:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
ffffffff80223005:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223009:	48 89 c2             	mov    %rax,%rdx
ffffffff8022300c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223010:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223016:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223019:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022301d:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223023:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022302a:	48 c7 c2 5e c4 20 80 	mov    $0xffffffff8020c45e,%rdx
ffffffff80223031:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223035:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff8022303b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022303e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223042:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff80223048:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022304e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223052:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff80223058:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022305c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223060:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff80223066:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022306a:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff80223071:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223075:	48 89 c2             	mov    %rax,%rdx
ffffffff80223078:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022307c:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff80223082:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223086:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff8022308d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223091:	48 89 c2             	mov    %rax,%rdx
ffffffff80223094:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223098:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff8022309e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802230a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230a5:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802230ab:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff802230b2:	48 c7 c2 6d c4 20 80 	mov    $0xffffffff8020c46d,%rdx
ffffffff802230b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230bd:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802230c3:	66 89 10             	mov    %dx,(%rax)
ffffffff802230c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230ca:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802230d0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802230d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230da:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802230e0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802230e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230e8:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802230ee:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802230f2:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
ffffffff802230f9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802230fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80223100:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223104:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff8022310a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022310e:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
ffffffff80223115:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223119:	48 89 c2             	mov    %rax,%rdx
ffffffff8022311c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223120:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223126:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223129:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022312d:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223133:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022313a:	48 c7 c2 7c c4 20 80 	mov    $0xffffffff8020c47c,%rdx
ffffffff80223141:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223145:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff8022314b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022314e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223152:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff80223158:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022315e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223162:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff80223168:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022316c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223170:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff80223176:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022317a:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff80223181:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223185:	48 89 c2             	mov    %rax,%rdx
ffffffff80223188:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022318c:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff80223192:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223196:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff8022319d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802231a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802231a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231a8:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802231ae:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802231b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231b5:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802231bb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff802231c2:	48 c7 c2 8b c4 20 80 	mov    $0xffffffff8020c48b,%rdx
ffffffff802231c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231cd:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802231d3:	66 89 10             	mov    %dx,(%rax)
ffffffff802231d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231da:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802231e0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802231e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231ea:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802231f0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802231f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231f8:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802231fe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223202:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
ffffffff80223209:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022320d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223210:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223214:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff8022321a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022321e:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
ffffffff80223225:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223229:	48 89 c2             	mov    %rax,%rdx
ffffffff8022322c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223230:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223236:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223239:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022323d:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223243:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022324a:	48 c7 c2 9a c4 20 80 	mov    $0xffffffff8020c49a,%rdx
ffffffff80223251:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223255:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff8022325b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022325e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223262:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff80223268:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022326e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223272:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff80223278:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022327c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223280:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff80223286:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022328a:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff80223291:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223295:	48 89 c2             	mov    %rax,%rdx
ffffffff80223298:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022329c:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802232a2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802232a6:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff802232ad:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802232b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802232b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232b8:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802232be:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802232c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232c5:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802232cb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff802232d2:	48 c7 c2 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rdx
ffffffff802232d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232dd:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802232e3:	66 89 10             	mov    %dx,(%rax)
ffffffff802232e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232ea:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802232f0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802232f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232fa:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223300:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223304:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223308:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff8022330e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223312:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
ffffffff80223319:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022331d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223320:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223324:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff8022332a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022332e:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
ffffffff80223335:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223339:	48 89 c2             	mov    %rax,%rdx
ffffffff8022333c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223340:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223346:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223349:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022334d:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223353:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022335a:	48 c7 c2 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rdx
ffffffff80223361:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223365:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff8022336b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022336e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223372:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff80223378:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022337e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223382:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff80223388:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022338c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223390:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff80223396:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022339a:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff802233a1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802233a5:	48 89 c2             	mov    %rax,%rdx
ffffffff802233a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233ac:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802233b2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802233b6:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff802233bd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802233c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802233c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233c8:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802233ce:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802233d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233d5:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802233db:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff802233e2:	48 c7 c2 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rdx
ffffffff802233e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233ed:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff802233f3:	66 89 10             	mov    %dx,(%rax)
ffffffff802233f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233fa:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff80223400:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223406:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022340a:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff80223410:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223414:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223418:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff8022341e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223422:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
ffffffff80223429:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022342d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223430:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223434:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff8022343a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022343e:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
ffffffff80223445:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223449:	48 89 c2             	mov    %rax,%rdx
ffffffff8022344c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223450:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff80223456:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223459:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022345d:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff80223463:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022346a:	48 c7 c2 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rdx
ffffffff80223471:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223475:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff8022347b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022347e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223482:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff80223488:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022348e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223492:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff80223498:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022349c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234a0:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802234a6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802234aa:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff802234b1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802234b5:	48 89 c2             	mov    %rax,%rdx
ffffffff802234b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234bc:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802234c2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802234c6:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff802234cd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802234d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802234d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234d8:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802234de:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802234e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234e5:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802234eb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff802234f2:	48 c7 c2 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rdx
ffffffff802234f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234fd:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223503:	66 89 10             	mov    %dx,(%rax)
ffffffff80223506:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022350a:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223510:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223516:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022351a:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223520:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223524:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223528:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff8022352e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223532:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
ffffffff80223539:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022353d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223540:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223544:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff8022354a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022354e:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
ffffffff80223555:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223559:	48 89 c2             	mov    %rax,%rdx
ffffffff8022355c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223560:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223566:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223569:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022356d:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223573:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022357a:	48 c7 c2 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rdx
ffffffff80223581:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223585:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff8022358b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022358e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223592:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff80223598:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022359e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235a2:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802235a8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802235ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235b0:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802235b6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802235ba:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff802235c1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802235c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802235c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235cc:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802235d2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802235d6:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff802235dd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802235e1:	48 89 c2             	mov    %rax,%rdx
ffffffff802235e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235e8:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802235ee:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802235f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235f5:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802235fb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80223602:	48 c7 c2 03 c5 20 80 	mov    $0xffffffff8020c503,%rdx
ffffffff80223609:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022360d:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223613:	66 89 10             	mov    %dx,(%rax)
ffffffff80223616:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022361a:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223620:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223626:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022362a:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223630:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223634:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223638:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff8022363e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223642:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
ffffffff80223649:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022364d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223650:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223654:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff8022365a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022365e:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
ffffffff80223665:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223669:	48 89 c2             	mov    %rax,%rdx
ffffffff8022366c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223670:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223676:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223679:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022367d:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223683:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022368a:	48 c7 c2 12 c5 20 80 	mov    $0xffffffff8020c512,%rdx
ffffffff80223691:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223695:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff8022369b:	66 89 10             	mov    %dx,(%rax)
ffffffff8022369e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236a2:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802236a8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802236ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236b2:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802236b8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802236bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236c0:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802236c6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802236ca:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff802236d1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802236d5:	48 89 c2             	mov    %rax,%rdx
ffffffff802236d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236dc:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802236e2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802236e6:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff802236ed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802236f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802236f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236f8:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802236fe:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223701:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223705:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff8022370b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80223712:	48 c7 c2 21 c5 20 80 	mov    $0xffffffff8020c521,%rdx
ffffffff80223719:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022371d:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223723:	66 89 10             	mov    %dx,(%rax)
ffffffff80223726:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022372a:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223730:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223736:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022373a:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223740:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223744:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223748:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff8022374e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223752:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
ffffffff80223759:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022375d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223760:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223764:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff8022376a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022376e:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
ffffffff80223775:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223779:	48 89 c2             	mov    %rax,%rdx
ffffffff8022377c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223780:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223786:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223789:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022378d:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223793:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022379a:	48 c7 c2 30 c5 20 80 	mov    $0xffffffff8020c530,%rdx
ffffffff802237a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237a5:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff802237ab:	66 89 10             	mov    %dx,(%rax)
ffffffff802237ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237b2:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff802237b8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802237be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237c2:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff802237c8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802237cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237d0:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff802237d6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802237da:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff802237e1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802237e5:	48 89 c2             	mov    %rax,%rdx
ffffffff802237e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237ec:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff802237f2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802237f6:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff802237fd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223801:	48 89 c2             	mov    %rax,%rdx
ffffffff80223804:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223808:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff8022380e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223811:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223815:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff8022381b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80223822:	48 c7 c2 3c c5 20 80 	mov    $0xffffffff8020c53c,%rdx
ffffffff80223829:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022382d:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223833:	66 89 10             	mov    %dx,(%rax)
ffffffff80223836:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022383a:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223840:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223846:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022384a:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223850:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223854:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223858:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff8022385e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223862:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
ffffffff80223869:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022386d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223870:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223874:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff8022387a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022387e:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
ffffffff80223885:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223889:	48 89 c2             	mov    %rax,%rdx
ffffffff8022388c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223890:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223896:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223899:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022389d:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff802238a3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802238aa:	48 c7 c2 48 c5 20 80 	mov    $0xffffffff8020c548,%rdx
ffffffff802238b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238b5:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff802238bb:	66 89 10             	mov    %dx,(%rax)
ffffffff802238be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238c2:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff802238c8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802238ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238d2:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff802238d8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802238dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238e0:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff802238e6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802238ea:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff802238f1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802238f5:	48 89 c2             	mov    %rax,%rdx
ffffffff802238f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238fc:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223902:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223906:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff8022390d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223911:	48 89 c2             	mov    %rax,%rdx
ffffffff80223914:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223918:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff8022391e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223921:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223925:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff8022392b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80223932:	48 c7 c2 54 c5 20 80 	mov    $0xffffffff8020c554,%rdx
ffffffff80223939:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022393d:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223943:	66 89 10             	mov    %dx,(%rax)
ffffffff80223946:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022394a:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223950:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223956:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022395a:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223960:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223964:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223968:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff8022396e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223972:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
ffffffff80223979:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022397d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223980:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223984:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff8022398a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022398e:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
ffffffff80223995:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223999:	48 89 c2             	mov    %rax,%rdx
ffffffff8022399c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239a0:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff802239a6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802239a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239ad:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff802239b3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802239ba:	48 c7 c2 60 c5 20 80 	mov    $0xffffffff8020c560,%rdx
ffffffff802239c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239c5:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff802239cb:	66 89 10             	mov    %dx,(%rax)
ffffffff802239ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239d2:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff802239d8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802239de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239e2:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff802239e8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802239ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239f0:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff802239f6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802239fa:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff80223a01:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223a05:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a0c:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223a12:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223a16:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff80223a1d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223a21:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a28:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223a2e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223a31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a35:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223a3b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80223a42:	48 c7 c2 6c c5 20 80 	mov    $0xffffffff8020c56c,%rdx
ffffffff80223a49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a4d:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223a53:	66 89 10             	mov    %dx,(%rax)
ffffffff80223a56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a5a:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223a60:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223a66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a6a:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223a70:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223a74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a78:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223a7e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223a82:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
ffffffff80223a89:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223a8d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a94:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223a9a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223a9e:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
ffffffff80223aa5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223aa9:	48 89 c2             	mov    %rax,%rdx
ffffffff80223aac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ab0:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223ab6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223ab9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223abd:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223ac3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223aca:	48 c7 c2 78 c5 20 80 	mov    $0xffffffff8020c578,%rdx
ffffffff80223ad1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ad5:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223adb:	66 89 10             	mov    %dx,(%rax)
ffffffff80223ade:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ae2:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223ae8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223aee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223af2:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223af8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223afc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b00:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223b06:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223b0a:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80223b11:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223b15:	48 89 c2             	mov    %rax,%rdx
ffffffff80223b18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b1c:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223b22:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223b26:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80223b2d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223b31:	48 89 c2             	mov    %rax,%rdx
ffffffff80223b34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b38:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223b3e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223b41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b45:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223b4b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80223b52:	48 c7 c2 84 c5 20 80 	mov    $0xffffffff8020c584,%rdx
ffffffff80223b59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b5d:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223b63:	66 89 10             	mov    %dx,(%rax)
ffffffff80223b66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b6a:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223b70:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223b76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b7a:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223b80:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223b84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b88:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223b8e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223b92:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
ffffffff80223b99:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223b9d:	48 89 c2             	mov    %rax,%rdx
ffffffff80223ba0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ba4:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223baa:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223bae:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
ffffffff80223bb5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223bb9:	48 89 c2             	mov    %rax,%rdx
ffffffff80223bbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bc0:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223bc6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223bc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bcd:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223bd3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223bda:	48 c7 c2 90 c5 20 80 	mov    $0xffffffff8020c590,%rdx
ffffffff80223be1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223be5:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223beb:	66 89 10             	mov    %dx,(%rax)
ffffffff80223bee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bf2:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223bf8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223bfe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c02:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223c08:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223c0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c10:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223c16:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223c1a:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff80223c21:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223c25:	48 89 c2             	mov    %rax,%rdx
ffffffff80223c28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c2c:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223c32:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223c36:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff80223c3d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223c41:	48 89 c2             	mov    %rax,%rdx
ffffffff80223c44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c48:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223c4e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223c51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c55:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223c5b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80223c62:	48 c7 c2 9c c5 20 80 	mov    $0xffffffff8020c59c,%rdx
ffffffff80223c69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c6d:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223c73:	66 89 10             	mov    %dx,(%rax)
ffffffff80223c76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c7a:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223c80:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223c86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c8a:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223c90:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223c94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c98:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223c9e:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223ca2:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
ffffffff80223ca9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223cad:	48 89 c2             	mov    %rax,%rdx
ffffffff80223cb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cb4:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223cba:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223cbe:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
ffffffff80223cc5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223cc9:	48 89 c2             	mov    %rax,%rdx
ffffffff80223ccc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cd0:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223cd6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223cd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cdd:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223ce3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223cea:	48 c7 c2 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rdx
ffffffff80223cf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cf5:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223cfb:	66 89 10             	mov    %dx,(%rax)
ffffffff80223cfe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d02:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223d08:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223d0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d12:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223d18:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223d1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d20:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223d26:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223d2a:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80223d31:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223d35:	48 89 c2             	mov    %rax,%rdx
ffffffff80223d38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d3c:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223d42:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223d46:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80223d4d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223d51:	48 89 c2             	mov    %rax,%rdx
ffffffff80223d54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d58:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223d5e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223d61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d65:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223d6b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Replace systick handler with customized ones - spurious interrupts
     * and IPIs are handled in the general interrupt path. SysTick handler
     * is only processed by the first processor, so we don't register it
     * for other auxiliary processors */
    if(RME_X64_CPU_Cnt==0)
ffffffff80223d72:	48 8b 05 37 b5 01 00 	mov    0x1b537(%rip),%rax        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff80223d79:	48 85 c0             	test   %rax,%rax
ffffffff80223d7c:	0f 85 88 00 00 00    	jne    ffffffff80223e0a <__RME_X64_CPU_Local_Init+0x81ee>
        RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
ffffffff80223d82:	48 c7 c2 63 c6 20 80 	mov    $0xffffffff8020c663,%rdx
ffffffff80223d89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d8d:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223d93:	66 89 10             	mov    %dx,(%rax)
ffffffff80223d96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d9a:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223da0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223da6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223daa:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223db0:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223db4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223db8:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223dbe:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223dc2:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff80223dc9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223dcd:	48 89 c2             	mov    %rax,%rdx
ffffffff80223dd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223dd4:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223dda:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223dde:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff80223de5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223de9:	48 89 c2             	mov    %rax,%rdx
ffffffff80223dec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223df0:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223df6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223df9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223dfd:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223e03:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    /* Register SMP handlers */
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80223e0a:	48 c7 c2 09 c6 20 80 	mov    $0xffffffff8020c609,%rdx
ffffffff80223e11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e15:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223e1b:	66 89 10             	mov    %dx,(%rax)
ffffffff80223e1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e22:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223e28:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223e2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e32:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223e38:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223e3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e40:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223e46:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223e4a:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
ffffffff80223e51:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223e55:	48 89 c2             	mov    %rax,%rdx
ffffffff80223e58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e5c:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223e62:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223e66:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
ffffffff80223e6d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223e71:	48 89 c2             	mov    %rax,%rdx
ffffffff80223e74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e78:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223e7e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223e81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e85:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223e8b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Load the IDT */
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff80223e92:	66 c7 45 c6 ff 0f    	movw   $0xfff,-0x3a(%rbp)
    Desc[1]=(rme_ptr_t)IDT_Table;
ffffffff80223e98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e9c:	66 89 45 c8          	mov    %ax,-0x38(%rbp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80223ea0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ea4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223ea8:	66 89 45 ca          	mov    %ax,-0x36(%rbp)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff80223eac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223eb0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223eb4:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
    Desc[4]=((rme_ptr_t)IDT_Table)>>48;
ffffffff80223eb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ebc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80223ec0:	66 89 45 ce          	mov    %ax,-0x32(%rbp)
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80223ec4:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
ffffffff80223ec8:	48 89 c7             	mov    %rax,%rdi
ffffffff80223ecb:	e8 a9 79 fe ff       	call   ffffffff8020b879 <__RME_X64_IDT_Load>

    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80223ed0:	48 8b 05 79 b1 01 00 	mov    0x1b179(%rip),%rax        # ffffffff8023f050 <RME_X64_Layout+0x10>
ffffffff80223ed7:	48 8b 15 d2 b3 01 00 	mov    0x1b3d2(%rip),%rdx        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff80223ede:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff80223ee2:	48 01 d0             	add    %rdx,%rax
ffffffff80223ee5:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80223eeb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80223eef:	48 8b 05 5a b1 01 00 	mov    0x1b15a(%rip),%rax        # ffffffff8023f050 <RME_X64_Layout+0x10>
ffffffff80223ef6:	48 8b 15 b3 b3 01 00 	mov    0x1b3b3(%rip),%rdx        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff80223efd:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff80223f01:	48 01 d0             	add    %rdx,%rax
ffffffff80223f04:	48 05 80 10 00 00    	add    $0x1080,%rax
ffffffff80223f0a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    /* Dummy entry */
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80223f0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80223f12:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    /* Kernel code, DPL=0, R/X */
    GDT_Table[1]=0x0020980000000000ULL;
ffffffff80223f19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80223f1d:	48 83 c0 08          	add    $0x8,%rax
ffffffff80223f21:	48 b9 00 00 00 00 00 	movabs $0x20980000000000,%rcx
ffffffff80223f28:	98 20 00 
ffffffff80223f2b:	48 89 08             	mov    %rcx,(%rax)
    /* Kernel data, DPL=0, W */
    GDT_Table[2]=0x0000920000000000ULL;
ffffffff80223f2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80223f32:	48 83 c0 10          	add    $0x10,%rax
ffffffff80223f36:	48 b9 00 00 00 00 00 	movabs $0x920000000000,%rcx
ffffffff80223f3d:	92 00 00 
ffffffff80223f40:	48 89 08             	mov    %rcx,(%rax)
    /* Unused entry - this is for sysret instruction's requirement */
    GDT_Table[3]=0x0000000000000000ULL;
ffffffff80223f43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80223f47:	48 83 c0 18          	add    $0x18,%rax
ffffffff80223f4b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
ffffffff80223f52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80223f56:	48 83 c0 20          	add    $0x20,%rax
ffffffff80223f5a:	48 be 00 00 00 00 00 	movabs $0xf20000000000,%rsi
ffffffff80223f61:	f2 00 00 
ffffffff80223f64:	48 89 30             	mov    %rsi,(%rax)
    /* User code, DPL=3, R/X */
    GDT_Table[5]=0x0020F80000000000ULL;
ffffffff80223f67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80223f6b:	48 83 c0 28          	add    $0x28,%rax
ffffffff80223f6f:	48 b9 00 00 00 00 00 	movabs $0x20f80000000000,%rcx
ffffffff80223f76:	f8 20 00 
ffffffff80223f79:	48 89 08             	mov    %rcx,(%rax)
    /* TSS */
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80223f7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80223f80:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff80223f84:	48 89 c2             	mov    %rax,%rdx
ffffffff80223f87:	48 b8 00 00 ff ff ff 	movabs $0xffffff0000,%rax
ffffffff80223f8e:	00 00 00 
ffffffff80223f91:	48 21 c2             	and    %rax,%rdx
ffffffff80223f94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80223f98:	48 c1 e8 18          	shr    $0x18,%rax
ffffffff80223f9c:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff80223fa0:	48 89 d1             	mov    %rdx,%rcx
ffffffff80223fa3:	48 09 c1             	or     %rax,%rcx
ffffffff80223fa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80223faa:	48 83 c0 30          	add    $0x30,%rax
ffffffff80223fae:	48 ba 67 00 00 00 00 	movabs $0x890000000067,%rdx
ffffffff80223fb5:	89 00 00 
ffffffff80223fb8:	48 09 ca             	or     %rcx,%rdx
ffffffff80223fbb:	48 89 10             	mov    %rdx,(%rax)
    GDT_Table[7]=(TSS_Table>>32);
ffffffff80223fbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80223fc2:	48 83 c0 38          	add    $0x38,%rax
ffffffff80223fc6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80223fca:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80223fce:	48 89 10             	mov    %rdx,(%rax)

    /* Load the GDT */
    Desc[0]=8*sizeof(rme_ptr_t)-1;
ffffffff80223fd1:	66 c7 45 c6 3f 00    	movw   $0x3f,-0x3a(%rbp)
    Desc[1]=(rme_ptr_t)GDT_Table;
ffffffff80223fd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80223fdb:	66 89 45 c8          	mov    %ax,-0x38(%rbp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff80223fdf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80223fe3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223fe7:	66 89 45 ca          	mov    %ax,-0x36(%rbp)
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff80223feb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80223fef:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223ff3:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff80223ff7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80223ffb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80223fff:	66 89 45 ce          	mov    %ax,-0x32(%rbp)
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff80224003:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
ffffffff80224007:	48 89 c7             	mov    %rax,%rdi
ffffffff8022400a:	e8 66 78 fe ff       	call   ffffffff8020b875 <__RME_X64_GDT_Load>
    /* Set the RSP to TSS */
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff8022400f:	48 8b 05 82 b2 01 00 	mov    0x1b282(%rip),%rax        # ffffffff8023f298 <RME_X64_Layout+0x258>
ffffffff80224016:	89 c6                	mov    %eax,%esi
ffffffff80224018:	48 8b 05 91 b2 01 00 	mov    0x1b291(%rip),%rax        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff8022401f:	83 c0 01             	add    $0x1,%eax
ffffffff80224022:	c1 e0 14             	shl    $0x14,%eax
ffffffff80224025:	89 c2                	mov    %eax,%edx
ffffffff80224027:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022402b:	48 83 c0 04          	add    $0x4,%rax
ffffffff8022402f:	48 89 c1             	mov    %rax,%rcx
ffffffff80224032:	8d 04 16             	lea    (%rsi,%rdx,1),%eax
ffffffff80224035:	89 01                	mov    %eax,(%rcx)
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80224037:	48 8b 05 5a b2 01 00 	mov    0x1b25a(%rip),%rax        # ffffffff8023f298 <RME_X64_Layout+0x258>
ffffffff8022403e:	48 8b 15 6b b2 01 00 	mov    0x1b26b(%rip),%rdx        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff80224045:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80224049:	48 c1 e2 14          	shl    $0x14,%rdx
ffffffff8022404d:	48 01 d0             	add    %rdx,%rax
ffffffff80224050:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80224054:	48 89 c2             	mov    %rax,%rdx
ffffffff80224057:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022405b:	48 83 c0 08          	add    $0x8,%rax
ffffffff8022405f:	89 10                	mov    %edx,(%rax)
    /* IO Map Base = End of TSS (What's this?) */
    ((rme_u32_t*)TSS_Table)[16]=0x00680000;
ffffffff80224061:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224065:	48 83 c0 40          	add    $0x40,%rax
ffffffff80224069:	c7 00 00 00 68 00    	movl   $0x680000,(%rax)
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff8022406f:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff80224074:	e8 04 78 fe ff       	call   ffffffff8020b87d <__RME_X64_TSS_Load>

    /* Initialize the RME per-cpu data here */
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80224079:	48 8b 05 d0 af 01 00 	mov    0x1afd0(%rip),%rax        # ffffffff8023f050 <RME_X64_Layout+0x10>
ffffffff80224080:	48 8b 15 29 b2 01 00 	mov    0x1b229(%rip),%rdx        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff80224087:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8022408b:	48 01 d0             	add    %rdx,%rax
    		                          RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8022408e:	48 05 00 14 00 00    	add    $0x1400,%rax
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80224094:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
									  RME_POW2(RME_PGT_SIZE_1K));
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff80224098:	48 8b 15 11 b2 01 00 	mov    0x1b211(%rip),%rdx        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff8022409f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802240a3:	48 89 d6             	mov    %rdx,%rsi
ffffffff802240a6:	48 89 c7             	mov    %rax,%rdi
ffffffff802240a9:	e8 e0 ea fe ff       	call   ffffffff80212b8e <_RME_CPU_Local_Init>

    /* Initialize x64 specific CPU-local data structure */
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff802240ae:	48 8b 05 9b af 01 00 	mov    0x1af9b(%rip),%rax        # ffffffff8023f050 <RME_X64_Layout+0x10>
ffffffff802240b5:	48 8b 15 f4 b1 01 00 	mov    0x1b1f4(%rip),%rdx        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff802240bc:	48 83 c2 01          	add    $0x1,%rdx
ffffffff802240c0:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff802240c4:	48 01 d0             	add    %rdx,%rax
ffffffff802240c7:	48 83 e8 18          	sub    $0x18,%rax
ffffffff802240cb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Temp->CPU_Local_Addr=(rme_ptr_t)CPU_Local;
ffffffff802240cf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802240d3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802240d7:	48 89 10             	mov    %rdx,(%rax)
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff802240da:	48 8b 05 b7 b1 01 00 	mov    0x1b1b7(%rip),%rax        # ffffffff8023f298 <RME_X64_Layout+0x258>
ffffffff802240e1:	48 8b 15 c8 b1 01 00 	mov    0x1b1c8(%rip),%rdx        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff802240e8:	48 83 c2 01          	add    $0x1,%rdx
ffffffff802240ec:	48 c1 e2 14          	shl    $0x14,%rdx
ffffffff802240f0:	48 01 c2             	add    %rax,%rdx
ffffffff802240f3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802240f7:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Temp->Temp_User_SP=0;
ffffffff802240fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802240ff:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80224106:	00 

    /* Set the base of GS to this memory */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80224107:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022410b:	48 89 c6             	mov    %rax,%rsi
ffffffff8022410e:	b8 02 01 00 c0       	mov    $0xc0000102,%eax
ffffffff80224113:	48 89 c7             	mov    %rax,%rdi
ffffffff80224116:	e8 0f 77 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff8022411b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022411f:	48 89 c6             	mov    %rax,%rsi
ffffffff80224122:	b8 01 01 00 c0       	mov    $0xc0000101,%eax
ffffffff80224127:	48 89 c7             	mov    %rax,%rdi
ffffffff8022412a:	e8 fb 76 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* Enable SYSCALL/SYSRET */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff8022412f:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
ffffffff80224134:	48 89 c7             	mov    %rax,%rdi
ffffffff80224137:	e8 da 76 fe ff       	call   ffffffff8020b816 <__RME_X64_Read_MSR>
ffffffff8022413c:	48 83 c8 01          	or     $0x1,%rax
ffffffff80224140:	48 89 c6             	mov    %rax,%rsi
ffffffff80224143:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
ffffffff80224148:	48 89 c7             	mov    %rax,%rdi
ffffffff8022414b:	e8 da 76 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* Set up SYSCALL/SYSRET parameters */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_LSTAR, (rme_ptr_t)SVC_Handler);
ffffffff80224150:	48 c7 c0 c2 c6 20 80 	mov    $0xffffffff8020c6c2,%rax
ffffffff80224157:	48 89 c6             	mov    %rax,%rsi
ffffffff8022415a:	b8 82 00 00 c0       	mov    $0xc0000082,%eax
ffffffff8022415f:	48 89 c7             	mov    %rax,%rdi
ffffffff80224162:	e8 c3 76 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_FMASK, ~RME_X64_RFLAGS_IF);
ffffffff80224167:	48 c7 c6 ff fd ff ff 	mov    $0xfffffffffffffdff,%rsi
ffffffff8022416e:	b8 84 00 00 c0       	mov    $0xc0000084,%eax
ffffffff80224173:	48 89 c7             	mov    %rax,%rdi
ffffffff80224176:	e8 af 76 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* The SYSRET, when returning to user mode in 64-bit, will load the SS from +8, and CS from +16.
     * The original place for CS is reserved for 32-bit usages and is thus not usable by 64-bit */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_STAR, (((rme_ptr_t)RME_X64_SEG_EMPTY)<<48)|(((rme_ptr_t)RME_X64_SEG_KERNEL_CODE)<<32));
ffffffff8022417b:	48 b8 00 00 00 00 08 	movabs $0x1b000800000000,%rax
ffffffff80224182:	00 1b 00 
ffffffff80224185:	48 89 c6             	mov    %rax,%rsi
ffffffff80224188:	b8 81 00 00 c0       	mov    $0xc0000081,%eax
ffffffff8022418d:	48 89 c7             	mov    %rax,%rdi
ffffffff80224190:	e8 95 76 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
}
ffffffff80224195:	90                   	nop
ffffffff80224196:	c9                   	leave
ffffffff80224197:	c3                   	ret

ffffffff80224198 <__RME_X64_CPU_Local_Get_By_CPUID>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
struct RME_CPU_Local* __RME_X64_CPU_Local_Get_By_CPUID(rme_ptr_t CPUID)
{
ffffffff80224198:	55                   	push   %rbp
ffffffff80224199:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022419c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff802241a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff802241a4:	48 8b 05 a5 ae 01 00 	mov    0x1aea5(%rip),%rax        # ffffffff8023f050 <RME_X64_Layout+0x10>
ffffffff802241ab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802241af:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff802241b3:	48 01 d0             	add    %rdx,%rax
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff802241b6:	48 05 00 14 00 00    	add    $0x1400,%rax
								   RME_POW2(RME_PGT_SIZE_1K));
}
ffffffff802241bc:	c9                   	leave
ffffffff802241bd:	c3                   	ret

ffffffff802241be <__RME_X64_LAPIC_Ack>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Ack(void)
{
ffffffff802241be:	55                   	push   %rbp
ffffffff802241bf:	48 89 e5             	mov    %rsp,%rbp
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff802241c2:	48 8b 05 57 c1 01 00 	mov    0x1c157(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff802241c9:	48 ba b0 00 00 00 00 	movabs $0xffff8000000000b0,%rdx
ffffffff802241d0:	80 ff ff 
ffffffff802241d3:	48 01 d0             	add    %rdx,%rax
ffffffff802241d6:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
ffffffff802241dc:	90                   	nop
ffffffff802241dd:	5d                   	pop    %rbp
ffffffff802241de:	c3                   	ret

ffffffff802241df <__RME_X64_LAPIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Init(void)
{
ffffffff802241df:	55                   	push   %rbp
ffffffff802241e0:	48 89 e5             	mov    %rsp,%rbp
    /* LAPIC initialization - Check if there is any LAPIC */
    RME_ASSERT(RME_X64_LAPIC_Addr!=0);
ffffffff802241e3:	48 8b 05 36 c1 01 00 	mov    0x1c136(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>

    /* Enable local APIC; set spurious interrupt vector to 32 */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_SVR, RME_X64_LAPIC_SVR_ENABLE|RME_X64_INT_SPUR);
ffffffff802241ea:	48 8b 05 2f c1 01 00 	mov    0x1c12f(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff802241f1:	48 ba f0 00 00 00 00 	movabs $0xffff8000000000f0,%rdx
ffffffff802241f8:	80 ff ff 
ffffffff802241fb:	48 01 d0             	add    %rdx,%rax
ffffffff802241fe:	c7 00 80 01 00 00    	movl   $0x180,(%rax)

    /* Disable local interrupt lines */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff80224204:	48 8b 05 15 c1 01 00 	mov    0x1c115(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff8022420b:	48 ba 50 03 00 00 00 	movabs $0xffff800000000350,%rdx
ffffffff80224212:	80 ff ff 
ffffffff80224215:	48 01 d0             	add    %rdx,%rax
ffffffff80224218:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);
ffffffff8022421e:	48 8b 05 fb c0 01 00 	mov    0x1c0fb(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff80224225:	48 ba 60 03 00 00 00 	movabs $0xffff800000000360,%rdx
ffffffff8022422c:	80 ff ff 
ffffffff8022422f:	48 01 d0             	add    %rdx,%rax
ffffffff80224232:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)

    /* Disable performance counter overflow interrupts when there is one */
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff80224238:	48 8b 05 e1 c0 01 00 	mov    0x1c0e1(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff8022423f:	48 ba 30 00 00 00 00 	movabs $0xffff800000000030,%rdx
ffffffff80224246:	80 ff ff 
ffffffff80224249:	48 01 d0             	add    %rdx,%rax
ffffffff8022424c:	8b 00                	mov    (%rax),%eax
ffffffff8022424e:	25 00 00 fc 00       	and    $0xfc0000,%eax
ffffffff80224253:	85 c0                	test   %eax,%eax
ffffffff80224255:	74 1a                	je     ffffffff80224271 <__RME_X64_LAPIC_Init+0x92>
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_PCINT, RME_X64_LAPIC_MASKED);
ffffffff80224257:	48 8b 05 c2 c0 01 00 	mov    0x1c0c2(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff8022425e:	48 ba 40 03 00 00 00 	movabs $0xffff800000000340,%rdx
ffffffff80224265:	80 ff ff 
ffffffff80224268:	48 01 d0             	add    %rdx,%rax
ffffffff8022426b:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)

    /* Map error interrupt to IRQ_ERROR */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ERROR, RME_X64_INT_ERROR);
ffffffff80224271:	48 8b 05 a8 c0 01 00 	mov    0x1c0a8(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff80224278:	48 ba 70 03 00 00 00 	movabs $0xffff800000000370,%rdx
ffffffff8022427f:	80 ff ff 
ffffffff80224282:	48 01 d0             	add    %rdx,%rax
ffffffff80224285:	c7 00 81 00 00 00    	movl   $0x81,(%rax)

    /* Clear error status register (requires back-to-back writes) */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff8022428b:	48 8b 05 8e c0 01 00 	mov    0x1c08e(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff80224292:	48 ba 80 02 00 00 00 	movabs $0xffff800000000280,%rdx
ffffffff80224299:	80 ff ff 
ffffffff8022429c:	48 01 d0             	add    %rdx,%rax
ffffffff8022429f:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff802242a5:	48 8b 05 74 c0 01 00 	mov    0x1c074(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff802242ac:	48 ba 80 02 00 00 00 	movabs $0xffff800000000280,%rdx
ffffffff802242b3:	80 ff ff 
ffffffff802242b6:	48 01 d0             	add    %rdx,%rax
ffffffff802242b9:	c7 00 00 00 00 00    	movl   $0x0,(%rax)

    /* Acknowledge any outstanding interrupts */
    __RME_X64_LAPIC_Ack();
ffffffff802242bf:	e8 fa fe ff ff       	call   ffffffff802241be <__RME_X64_LAPIC_Ack>

    /* Send an Init Level De-Assert to synchronise arbitration IDs */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0);
ffffffff802242c4:	48 8b 05 55 c0 01 00 	mov    0x1c055(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff802242cb:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff802242d2:	80 ff ff 
ffffffff802242d5:	48 01 d0             	add    %rdx,%rax
ffffffff802242d8:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_BCAST|
ffffffff802242de:	48 8b 05 3b c0 01 00 	mov    0x1c03b(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff802242e5:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff802242ec:	80 ff ff 
ffffffff802242ef:	48 01 d0             	add    %rdx,%rax
ffffffff802242f2:	c7 00 00 85 08 00    	movl   $0x88500,(%rax)
                                             RME_X64_LAPIC_ICRLO_INIT|
                                             RME_X64_LAPIC_ICRLO_LEVEL);
    while(RME_X64_LAPIC_READ(RME_X64_LAPIC_ICRLO)&RME_X64_LAPIC_ICRLO_DELIVS);
ffffffff802242f8:	90                   	nop
ffffffff802242f9:	48 8b 05 20 c0 01 00 	mov    0x1c020(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff80224300:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224307:	80 ff ff 
ffffffff8022430a:	48 01 d0             	add    %rdx,%rax
ffffffff8022430d:	8b 00                	mov    (%rax),%eax
ffffffff8022430f:	25 00 10 00 00       	and    $0x1000,%eax
ffffffff80224314:	85 c0                	test   %eax,%eax
ffffffff80224316:	75 e1                	jne    ffffffff802242f9 <__RME_X64_LAPIC_Init+0x11a>

    /* Enable interrupts on the APIC */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_TPR, 0);
ffffffff80224318:	48 8b 05 01 c0 01 00 	mov    0x1c001(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff8022431f:	48 ba 80 00 00 00 00 	movabs $0xffff800000000080,%rdx
ffffffff80224326:	80 ff ff 
ffffffff80224329:	48 01 d0             	add    %rdx,%rax
ffffffff8022432c:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
ffffffff80224332:	90                   	nop
ffffffff80224333:	5d                   	pop    %rbp
ffffffff80224334:	c3                   	ret

ffffffff80224335 <__RME_X64_PIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_PIC_Init(void)
{
ffffffff80224335:	55                   	push   %rbp
ffffffff80224336:	48 89 e5             	mov    %rsp,%rbp
    /* Mask all interrupts */
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80224339:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8022433e:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80224343:	e8 c2 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff80224348:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8022434d:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80224352:	e8 b3 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Set up master (8259A-1) */
    __RME_X64_Out(RME_X64_PIC1, 0x11);
ffffffff80224357:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff8022435c:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80224361:	e8 a4 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, RME_X64_INT_USER(0));
ffffffff80224366:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8022436b:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80224370:	e8 95 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 1<<2);
ffffffff80224375:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff8022437a:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8022437f:	e8 86 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0x3);
ffffffff80224384:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80224389:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8022438e:	e8 77 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Set up slave (8259A-2) */
    __RME_X64_Out(RME_X64_PIC2, 0x11);
ffffffff80224393:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80224398:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8022439d:	e8 68 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, RME_X64_INT_USER(8));
ffffffff802243a2:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff802243a7:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff802243ac:	e8 59 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 2);
ffffffff802243b1:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff802243b6:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff802243bb:	e8 4a 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0x3);
ffffffff802243c0:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff802243c5:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff802243ca:	e8 3b 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    __RME_X64_Out(RME_X64_PIC1, 0x68);
ffffffff802243cf:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff802243d4:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff802243d9:	e8 2c 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x0A);
ffffffff802243de:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff802243e3:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff802243e8:	e8 1d 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    __RME_X64_Out(RME_X64_PIC2, 0x68);
ffffffff802243ed:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff802243f2:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff802243f7:	e8 0e 74 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x0A);
ffffffff802243fc:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80224401:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80224406:	e8 ff 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Mask all interrupts - we do not use the PIC at all */
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff8022440b:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80224410:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80224415:	e8 f0 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff8022441a:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8022441f:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80224424:	e8 e1 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff80224429:	90                   	nop
ffffffff8022442a:	5d                   	pop    %rbp
ffffffff8022442b:	c3                   	ret

ffffffff8022442c <__RME_X64_IOAPIC_Int_Enable>:
              rme_ptr_t CPUID - The CPU to enable this IRQ on.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Int_Enable(rme_ptr_t IRQ, rme_ptr_t CPUID)
{
ffffffff8022442c:	55                   	push   %rbp
ffffffff8022442d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80224430:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80224434:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80224438:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Mark interrupt edge-triggered, active high, enabled, and routed to the
     * given cpunum, which happens to be that cpu's APIC ID. */
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1),RME_X64_INT_USER(IRQ));
ffffffff8022443c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224440:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff80224443:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022444a:	80 ff ff 
ffffffff8022444d:	83 c2 10             	add    $0x10,%edx
ffffffff80224450:	89 10                	mov    %edx,(%rax)
ffffffff80224452:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224456:	89 c2                	mov    %eax,%edx
ffffffff80224458:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022445f:	80 ff ff 
ffffffff80224462:	83 c2 20             	add    $0x20,%edx
ffffffff80224465:	89 50 10             	mov    %edx,0x10(%rax)
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,CPUID<<24);
ffffffff80224468:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022446c:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff8022446f:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224476:	80 ff ff 
ffffffff80224479:	83 c2 11             	add    $0x11,%edx
ffffffff8022447c:	89 10                	mov    %edx,(%rax)
ffffffff8022447e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224482:	89 c2                	mov    %eax,%edx
ffffffff80224484:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022448b:	80 ff ff 
ffffffff8022448e:	c1 e2 18             	shl    $0x18,%edx
ffffffff80224491:	89 50 10             	mov    %edx,0x10(%rax)
}
ffffffff80224494:	90                   	nop
ffffffff80224495:	c9                   	leave
ffffffff80224496:	c3                   	ret

ffffffff80224497 <__RME_X64_IOAPIC_Int_Disable>:
Input       : rme_ptr_t IRQ - The user vector to enable.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Int_Disable(rme_ptr_t IRQ)
{
ffffffff80224497:	55                   	push   %rbp
ffffffff80224498:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022449b:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8022449f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    /* Mark interrupt edge-triggered, active high, enabled, and routed to the
     * given cpunum, which happens to be that cpu's APIC ID. */
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1),RME_X64_IOAPIC_INT_DISABLED|RME_X64_INT_USER(IRQ));
ffffffff802244a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802244a7:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff802244aa:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802244b1:	80 ff ff 
ffffffff802244b4:	83 c2 10             	add    $0x10,%edx
ffffffff802244b7:	89 10                	mov    %edx,(%rax)
ffffffff802244b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802244bd:	8d 50 20             	lea    0x20(%rax),%edx
ffffffff802244c0:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802244c7:	80 ff ff 
ffffffff802244ca:	81 ca 00 00 01 00    	or     $0x10000,%edx
ffffffff802244d0:	89 50 10             	mov    %edx,0x10(%rax)
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,0);
ffffffff802244d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802244d7:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff802244da:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802244e1:	80 ff ff 
ffffffff802244e4:	83 c2 11             	add    $0x11,%edx
ffffffff802244e7:	89 10                	mov    %edx,(%rax)
ffffffff802244e9:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802244f0:	80 ff ff 
ffffffff802244f3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
}
ffffffff802244fa:	90                   	nop
ffffffff802244fb:	c9                   	leave
ffffffff802244fc:	c3                   	ret

ffffffff802244fd <__RME_X64_IOAPIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Init(void)
{
ffffffff802244fd:	55                   	push   %rbp
ffffffff802244fe:	48 89 e5             	mov    %rsp,%rbp
ffffffff80224501:	48 83 ec 20          	sub    $0x20,%rsp
    rme_ptr_t Max_Int;
    rme_ptr_t IOAPIC_ID;
    rme_cnt_t Count;
    /* IOAPIC initialization */
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff80224505:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022450c:	80 ff ff 
ffffffff8022450f:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
ffffffff80224515:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022451c:	80 ff ff 
ffffffff8022451f:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80224522:	89 c0                	mov    %eax,%eax
ffffffff80224524:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Max_Int=((Max_Int>>16)&0xFF);
ffffffff80224528:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022452c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80224530:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80224535:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    RME_DBG_S("\n\rMax interupt number is: ");
ffffffff80224539:	48 c7 c7 76 76 22 80 	mov    $0xffffffff80227676,%rdi
ffffffff80224540:	e8 e0 84 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_I(Max_Int);
ffffffff80224545:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224549:	48 89 c7             	mov    %rax,%rdi
ffffffff8022454c:	e8 e2 82 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_ID,IOAPIC_ID);
ffffffff80224551:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224558:	80 ff ff 
ffffffff8022455b:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
ffffffff80224561:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224568:	80 ff ff 
ffffffff8022456b:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff8022456e:	89 c0                	mov    %eax,%eax
ffffffff80224570:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    IOAPIC_ID>>=24;
ffffffff80224574:	48 c1 6d e8 18       	shrq   $0x18,-0x18(%rbp)
    /* This is not necessarily true when we have >1 IOAPICs */
    /* RME_ASSERT(IOAPIC_ID==RME_X64_IOAPIC_Info[0].IOAPIC_ID); */
    RME_DBG_S("\n\rIOAPIC ID is: ");
ffffffff80224579:	48 c7 c7 91 76 22 80 	mov    $0xffffffff80227691,%rdi
ffffffff80224580:	e8 a0 84 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_I(IOAPIC_ID);
ffffffff80224585:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224589:	48 89 c7             	mov    %rax,%rdi
ffffffff8022458c:	e8 a2 82 fe ff       	call   ffffffff8020c833 <RME_Int_Print>

    /* Disable all interrupts */
    for(Count=0;Count<=Max_Int;Count++)
ffffffff80224591:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224598:	00 
ffffffff80224599:	eb 11                	jmp    ffffffff802245ac <__RME_X64_IOAPIC_Init+0xaf>
        __RME_X64_IOAPIC_Int_Disable(Count);
ffffffff8022459b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022459f:	48 89 c7             	mov    %rax,%rdi
ffffffff802245a2:	e8 f0 fe ff ff       	call   ffffffff80224497 <__RME_X64_IOAPIC_Int_Disable>
    for(Count=0;Count<=Max_Int;Count++)
ffffffff802245a7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802245ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802245b0:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff802245b4:	73 e5                	jae    ffffffff8022459b <__RME_X64_IOAPIC_Init+0x9e>
}
ffffffff802245b6:	90                   	nop
ffffffff802245b7:	90                   	nop
ffffffff802245b8:	c9                   	leave
ffffffff802245b9:	c3                   	ret

ffffffff802245ba <__RME_X64_SMP_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff802245ba:	55                   	push   %rbp
ffffffff802245bb:	48 89 e5             	mov    %rsp,%rbp
ffffffff802245be:	48 83 ec 20          	sub    $0x20,%rsp
    rme_u8_t* Code;
    rme_cnt_t Count;
    rme_u16_t* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(rme_u8_t*)RME_X64_PA2VA(0x7000);
ffffffff802245c2:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax
ffffffff802245c9:	80 ff ff 
ffffffff802245cc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff802245d0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802245d7:	00 
ffffffff802245d8:	eb 1f                	jmp    ffffffff802245f9 <__RME_X64_SMP_Init+0x3f>
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff802245da:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802245de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802245e2:	48 01 c2             	add    %rax,%rdx
ffffffff802245e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802245e9:	48 05 a0 74 22 80    	add    $0xffffffff802274a0,%rax
ffffffff802245ef:	0f b6 00             	movzbl (%rax),%eax
ffffffff802245f2:	88 02                	mov    %al,(%rdx)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff802245f4:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802245f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802245fd:	48 83 f8 61          	cmp    $0x61,%rax
ffffffff80224601:	76 d7                	jbe    ffffffff802245da <__RME_X64_SMP_Init+0x20>

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
ffffffff80224603:	48 c7 05 a2 ac 01 00 	movq   $0x1,0x1aca2(%rip)        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff8022460a:	01 00 00 00 
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff8022460e:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff80224615:	00 
ffffffff80224616:	e9 d1 01 00 00       	jmp    ffffffff802247ec <__RME_X64_SMP_Init+0x232>
    {
        RME_DBG_S("\n\rBooting CPU ");
ffffffff8022461b:	48 c7 c7 a2 76 22 80 	mov    $0xffffffff802276a2,%rdi
ffffffff80224622:	e8 fe 83 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
        RME_DBG_I(Count);
ffffffff80224627:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022462b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022462e:	e8 00 82 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
        /* Temporary stack */
        *(rme_u32_t*)(Code-4)=0x8000;
ffffffff80224633:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224637:	48 83 e8 04          	sub    $0x4,%rax
ffffffff8022463b:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80224641:	48 c7 c0 89 80 10 80 	mov    $0xffffffff80108089,%rax
ffffffff80224648:	89 c2                	mov    %eax,%edx
ffffffff8022464a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022464e:	48 83 e8 08          	sub    $0x8,%rax
ffffffff80224652:	81 c2 00 00 00 80    	add    $0x80000000,%edx
ffffffff80224658:	89 10                	mov    %edx,(%rax)
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff8022465a:	48 8b 15 37 ac 01 00 	mov    0x1ac37(%rip),%rdx        # ffffffff8023f298 <RME_X64_Layout+0x258>
ffffffff80224661:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224665:	48 83 c0 01          	add    $0x1,%rax
ffffffff80224669:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff8022466d:	48 89 c1             	mov    %rax,%rcx
ffffffff80224670:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224674:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80224678:	48 01 ca             	add    %rcx,%rdx
ffffffff8022467b:	48 89 10             	mov    %rdx,(%rax)

        /* Initialize CMOS shutdown code to 0AH */
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff8022467e:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff80224683:	bf 70 00 00 00       	mov    $0x70,%edi
ffffffff80224688:	e8 7d 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
        __RME_X64_Out(RME_X64_RTC_DATA,0xA);
ffffffff8022468d:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80224692:	bf 71 00 00 00       	mov    $0x71,%edi
ffffffff80224697:	e8 6e 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
        /* Warm reset vector point to AP code */
        Warm_Reset=(rme_u16_t*)RME_X64_PA2VA((0x40<<4|0x67));
ffffffff8022469c:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax
ffffffff802246a3:	80 ff ff 
ffffffff802246a6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Warm_Reset[0]=0;
ffffffff802246aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802246ae:	66 c7 00 00 00       	movw   $0x0,(%rax)
        Warm_Reset[1]=0x7000>>4;
ffffffff802246b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802246b7:	48 83 c0 02          	add    $0x2,%rax
ffffffff802246bb:	66 c7 00 00 07       	movw   $0x700,(%rax)

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802246c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802246c4:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802246c8:	48 05 c0 f2 23 80    	add    $0xffffffff8023f2c0,%rax
ffffffff802246ce:	48 8b 00             	mov    (%rax),%rax
ffffffff802246d1:	89 c1                	mov    %eax,%ecx
ffffffff802246d3:	48 8b 05 46 bc 01 00 	mov    0x1bc46(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff802246da:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff802246e1:	80 ff ff 
ffffffff802246e4:	48 01 d0             	add    %rdx,%rax
ffffffff802246e7:	48 89 c2             	mov    %rax,%rdx
ffffffff802246ea:	89 c8                	mov    %ecx,%eax
ffffffff802246ec:	c1 e0 18             	shl    $0x18,%eax
ffffffff802246ef:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff802246f1:	48 8b 05 28 bc 01 00 	mov    0x1bc28(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff802246f8:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff802246ff:	80 ff ff 
ffffffff80224702:	48 01 d0             	add    %rdx,%rax
ffffffff80224705:	c7 00 00 c5 00 00    	movl   $0xc500,(%rax)
                                                 RME_X64_LAPIC_ICRLO_LEVEL|
                                                 RME_X64_LAPIC_ICRLO_ASSERT);
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff8022470b:	48 8b 05 0e bc 01 00 	mov    0x1bc0e(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff80224712:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224719:	80 ff ff 
ffffffff8022471c:	48 01 d0             	add    %rdx,%rax
ffffffff8022471f:	c7 00 00 85 00 00    	movl   $0x8500,(%rax)
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80224725:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224729:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8022472d:	48 05 c0 f2 23 80    	add    $0xffffffff8023f2c0,%rax
ffffffff80224733:	48 8b 00             	mov    (%rax),%rax
ffffffff80224736:	89 c1                	mov    %eax,%ecx
ffffffff80224738:	48 8b 05 e1 bb 01 00 	mov    0x1bbe1(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff8022473f:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff80224746:	80 ff ff 
ffffffff80224749:	48 01 d0             	add    %rdx,%rax
ffffffff8022474c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022474f:	89 c8                	mov    %ecx,%eax
ffffffff80224751:	c1 e0 18             	shl    $0x18,%eax
ffffffff80224754:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff80224756:	48 8b 05 c3 bb 01 00 	mov    0x1bbc3(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff8022475d:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224764:	80 ff ff 
ffffffff80224767:	48 01 d0             	add    %rdx,%rax
ffffffff8022476a:	c7 00 07 06 00 00    	movl   $0x607,(%rax)
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80224770:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224774:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80224778:	48 05 c0 f2 23 80    	add    $0xffffffff8023f2c0,%rax
ffffffff8022477e:	48 8b 00             	mov    (%rax),%rax
ffffffff80224781:	89 c1                	mov    %eax,%ecx
ffffffff80224783:	48 8b 05 96 bb 01 00 	mov    0x1bb96(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff8022478a:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff80224791:	80 ff ff 
ffffffff80224794:	48 01 d0             	add    %rdx,%rax
ffffffff80224797:	48 89 c2             	mov    %rax,%rdx
ffffffff8022479a:	89 c8                	mov    %ecx,%eax
ffffffff8022479c:	c1 e0 18             	shl    $0x18,%eax
ffffffff8022479f:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff802247a1:	48 8b 05 78 bb 01 00 	mov    0x1bb78(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff802247a8:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff802247af:	80 ff ff 
ffffffff802247b2:	48 01 d0             	add    %rdx,%rax
ffffffff802247b5:	c7 00 07 06 00 00    	movl   $0x607,(%rax)
        RME_X64_UDELAY(200);

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
ffffffff802247bb:	90                   	nop
ffffffff802247bc:	48 8b 05 ed aa 01 00 	mov    0x1aaed(%rip),%rax        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff802247c3:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802247c7:	48 05 c8 f2 23 80    	add    $0xffffffff8023f2c8,%rax
ffffffff802247cd:	48 8b 00             	mov    (%rax),%rax
ffffffff802247d0:	48 85 c0             	test   %rax,%rax
ffffffff802247d3:	74 e7                	je     ffffffff802247bc <__RME_X64_SMP_Init+0x202>
        RME_X64_CPU_Cnt++;
ffffffff802247d5:	48 8b 05 d4 aa 01 00 	mov    0x1aad4(%rip),%rax        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff802247dc:	48 83 c0 01          	add    $0x1,%rax
ffffffff802247e0:	48 89 05 c9 aa 01 00 	mov    %rax,0x1aac9(%rip)        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff802247e7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802247ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802247f0:	48 8b 05 b1 aa 01 00 	mov    0x1aab1(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff802247f7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802247fa:	0f 82 1b fe ff ff    	jb     ffffffff8022461b <__RME_X64_SMP_Init+0x61>
    }
}
ffffffff80224800:	90                   	nop
ffffffff80224801:	90                   	nop
ffffffff80224802:	c9                   	leave
ffffffff80224803:	c3                   	ret

ffffffff80224804 <__RME_X64_SMP_Tick>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Tick(void)
{
ffffffff80224804:	55                   	push   %rbp
ffffffff80224805:	48 89 e5             	mov    %rsp,%rbp
    /* Is this a SMP? */
    if(RME_X64_Num_CPU>1)
ffffffff80224808:	48 8b 05 99 aa 01 00 	mov    0x1aa99(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff8022480f:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80224813:	76 34                	jbe    ffffffff80224849 <__RME_X64_SMP_Tick+0x45>
    {
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0xFFULL<<24);
ffffffff80224815:	48 8b 05 04 bb 01 00 	mov    0x1bb04(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff8022481c:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff80224823:	80 ff ff 
ffffffff80224826:	48 01 d0             	add    %rdx,%rax
ffffffff80224829:	c7 00 00 00 00 ff    	movl   $0xff000000,(%rax)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_EXC_SELF|
ffffffff8022482f:	48 8b 05 ea ba 01 00 	mov    0x1baea(%rip),%rax        # ffffffff80240320 <RME_X64_LAPIC_Addr>
ffffffff80224836:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff8022483d:	80 ff ff 
ffffffff80224840:	48 01 d0             	add    %rdx,%rax
ffffffff80224843:	c7 00 83 00 0c 00    	movl   $0xc0083,(%rax)
                                                 RME_X64_LAPIC_ICRLO_FIXED|
                                                 RME_X64_INT_SMP_SYSTICK);
    }
}
ffffffff80224849:	90                   	nop
ffffffff8022484a:	5d                   	pop    %rbp
ffffffff8022484b:	c3                   	ret

ffffffff8022484c <__RME_X64_Timer_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_Timer_Init(void)
{
ffffffff8022484c:	55                   	push   %rbp
ffffffff8022484d:	48 89 e5             	mov    %rsp,%rbp
    /* For timer interrupts, they will always be handled by core 1, and all the other
     * cores should receive a IPI for that, so their scheduler can look after their
     * threads. We are using square wave mode. */
    __RME_X64_Out(RME_X64_PIT_CMD,0x34);
ffffffff80224850:	be 34 00 00 00       	mov    $0x34,%esi
ffffffff80224855:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff8022485a:	e8 ab 6f fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,(1193182/2/RME_X64_TIMER_FREQ)&0xFF);
ffffffff8022485f:	be 54 00 00 00       	mov    $0x54,%esi
ffffffff80224864:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80224869:	e8 9c 6f fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,((1193182/2/RME_X64_TIMER_FREQ)>>8)&0xFF);
ffffffff8022486e:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80224873:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80224878:	e8 8d 6f fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff8022487d:	90                   	nop
ffffffff8022487e:	5d                   	pop    %rbp
ffffffff8022487f:	c3                   	ret

ffffffff80224880 <__RME_Lowlvl_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Lowlvl_Init(void)
{
ffffffff80224880:	55                   	push   %rbp
ffffffff80224881:	48 89 e5             	mov    %rsp,%rbp
    /* We are here now ! */
    __RME_X64_UART_Init();
ffffffff80224884:	e8 ae 67 ff ff       	call   ffffffff8021b037 <__RME_X64_UART_Init>
    /* Read APIC tables and detect the configurations. Now we are not NUMA-aware */
    RME_ASSERT(__RME_X64_ACPI_Init()==0);
ffffffff80224889:	e8 e2 6d ff ff       	call   ffffffff8021b670 <__RME_X64_ACPI_Init>
    /* Detect CPU features */
    __RME_X64_Feature_Get();
ffffffff8022488e:	e8 e8 6e ff ff       	call   ffffffff8021b77b <__RME_X64_Feature_Get>
    /* Extract memory specifications */
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80224893:	48 8b 05 8e a7 01 00 	mov    0x1a78e(%rip),%rax        # ffffffff8023f028 <RME_X64_MBInfo>
ffffffff8022489a:	8b 40 2c             	mov    0x2c(%rax),%eax
ffffffff8022489d:	89 c2                	mov    %eax,%edx
ffffffff8022489f:	48 8b 05 82 a7 01 00 	mov    0x1a782(%rip),%rax        # ffffffff8023f028 <RME_X64_MBInfo>
ffffffff802248a6:	8b 40 30             	mov    0x30(%rax),%eax
ffffffff802248a9:	89 c0                	mov    %eax,%eax
ffffffff802248ab:	48 89 d6             	mov    %rdx,%rsi
ffffffff802248ae:	48 89 c7             	mov    %rax,%rdi
ffffffff802248b1:	e8 3a 70 ff ff       	call   ffffffff8021b8f0 <__RME_X64_Mem_Init>

    return 0;
ffffffff802248b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802248bb:	5d                   	pop    %rbp
ffffffff802248bc:	c3                   	ret

ffffffff802248bd <__RME_Pgt_Kom_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Kom_Init(void)
{
ffffffff802248bd:	55                   	push   %rbp
ffffffff802248be:	48 89 e5             	mov    %rsp,%rbp
ffffffff802248c1:	48 83 ec 30          	sub    $0x30,%rsp
    rme_cnt_t PDE_Cnt;
    rme_cnt_t Addr_Cnt;
    struct __RME_X64_Mem* Mem;

    /* Now initialize the kernel object allocation table */
    _RME_Kot_Init(RME_X64_Layout.Kot_Size/sizeof(rme_ptr_t));
ffffffff802248c5:	48 8b 05 7c a7 01 00 	mov    0x1a77c(%rip),%rax        # ffffffff8023f048 <RME_X64_Layout+0x8>
ffffffff802248cc:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff802248d0:	48 89 c7             	mov    %rax,%rdi
ffffffff802248d3:	e8 70 d9 fe ff       	call   ffffffff80212248 <_RME_Kot_Init>
    /* Reset PCID counter */
    RME_X64_PCID_Inc=0;
ffffffff802248d8:	48 c7 05 6d be 01 00 	movq   $0x0,0x1be6d(%rip)        # ffffffff80240750 <RME_X64_PCID_Inc>
ffffffff802248df:	00 00 00 00 

    /* Create the frame for kernel page tables */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff802248e3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802248ea:	00 
ffffffff802248eb:	e9 87 00 00 00       	jmp    ffffffff80224977 <__RME_Pgt_Kom_Init+0xba>
    {
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|
ffffffff802248f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802248f4:	48 83 c0 01          	add    $0x1,%rax
ffffffff802248f8:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff802248fc:	48 05 00 90 10 80    	add    $0xffffffff80109000,%rax
ffffffff80224902:	48 89 c2             	mov    %rax,%rdx
ffffffff80224905:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff8022490a:	48 01 c2             	add    %rax,%rdx
ffffffff8022490d:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80224914:	ff 0f 00 
ffffffff80224917:	48 21 d0             	and    %rdx,%rax
ffffffff8022491a:	48 0d 03 01 00 00    	or     $0x103,%rax
ffffffff80224920:	48 89 c2             	mov    %rax,%rdx
ffffffff80224923:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224927:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8022492d:	48 89 14 c5 00 90 10 	mov    %rdx,-0x7fef7000(,%rax,8)
ffffffff80224934:	80 
        		                    RME_X64_MMU_KERN_PML4;

        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80224935:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8022493c:	00 
ffffffff8022493d:	eb 29                	jmp    ffffffff80224968 <__RME_Pgt_Kom_Init+0xab>
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff8022493f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224943:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff80224947:	48 89 c2             	mov    %rax,%rdx
ffffffff8022494a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022494e:	48 01 d0             	add    %rdx,%rax
ffffffff80224951:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80224957:	48 c7 04 c5 00 90 10 	movq   $0x102,-0x7fef7000(,%rax,8)
ffffffff8022495e:	80 02 01 00 00 
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80224963:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80224968:	48 81 7d f0 ff 01 00 	cmpq   $0x1ff,-0x10(%rbp)
ffffffff8022496f:	00 
ffffffff80224970:	7e cd                	jle    ffffffff8022493f <__RME_Pgt_Kom_Init+0x82>
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80224972:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224977:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff8022497e:	00 
ffffffff8022497f:	0f 8e 6b ff ff ff    	jle    ffffffff802248f0 <__RME_Pgt_Kom_Init+0x33>
    }

    /* Map in the first 4GB as linear mappings as always, 4 super pages, including the device hole.
     * We need to detect whether the 1GB page is supported. If not, we just map the initial tables
     * in, and we know where they are hard-coded in the assembly file */
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff80224985:	48 8b 05 fc bb 01 00 	mov    0x1bbfc(%rip),%rax        # ffffffff80240588 <RME_X64_Feature+0x248>
ffffffff8022498c:	25 00 00 00 04       	and    $0x4000000,%eax
ffffffff80224991:	48 85 c0             	test   %rax,%rax
ffffffff80224994:	0f 84 97 00 00 00    	je     ffffffff80224a31 <__RME_Pgt_Kom_Init+0x174>
    {
        /* Can use 1GB pages */
        RME_DBG_S("\n\rThis CPU have 1GB superpage support");
ffffffff8022499a:	48 c7 c7 b8 76 22 80 	mov    $0xffffffff802276b8,%rdi
ffffffff802249a1:	e8 7f 80 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802249a6:	48 8b 05 53 56 ee ff 	mov    -0x11a9ad(%rip),%rax        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff802249ad:	0c 81                	or     $0x81,%al
ffffffff802249af:	48 89 05 4a 56 ee ff 	mov    %rax,-0x11a9b6(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802249b6:	48 8b 05 4b 56 ee ff 	mov    -0x11a9b5(%rip),%rax        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff802249bd:	48 0d 81 00 00 40    	or     $0x40000081,%rax
ffffffff802249c3:	48 89 05 3e 56 ee ff 	mov    %rax,-0x11a9c2(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802249ca:	48 8b 05 3f 56 ee ff 	mov    -0x11a9c1(%rip),%rax        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff802249d1:	ba 81 00 00 80       	mov    $0x80000081,%edx
ffffffff802249d6:	48 09 d0             	or     %rdx,%rax
ffffffff802249d9:	48 89 05 30 56 ee ff 	mov    %rax,-0x11a9d0(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        /* We need to mark the device hole as unbufferable */
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_ADDR(3*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802249e0:	48 8b 05 31 56 ee ff 	mov    -0x11a9cf(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff802249e7:	ba 81 00 00 c0       	mov    $0xc0000081,%edx
ffffffff802249ec:	48 09 d0             	or     %rdx,%rax
ffffffff802249ef:	48 89 05 22 56 ee ff 	mov    %rax,-0x11a9de(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff802249f6:	48 8b 05 1b 56 ee ff 	mov    -0x11a9e5(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff802249fd:	48 83 c8 18          	or     $0x18,%rax
ffffffff80224a01:	48 89 05 10 56 ee ff 	mov    %rax,-0x11a9f0(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224a08:	48 8b 05 e1 55 fe ff 	mov    -0x1aa1f(%rip),%rax        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff80224a0f:	0c 81                	or     $0x81,%al
ffffffff80224a11:	48 89 05 d8 55 fe ff 	mov    %rax,-0x1aa28(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224a18:	48 8b 05 d9 55 fe ff 	mov    -0x1aa27(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224a1f:	48 0d 81 00 00 40    	or     $0x40000081,%rax
ffffffff80224a25:	48 89 05 cc 55 fe ff 	mov    %rax,-0x1aa34(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224a2c:	e9 84 00 00 00       	jmp    ffffffff80224ab5 <__RME_Pgt_Kom_Init+0x1f8>
    }
    else
    {
        RME_DBG_S("\n\rThis CPU do not have 1GB superpage support");
ffffffff80224a31:	48 c7 c7 e0 76 22 80 	mov    $0xffffffff802276e0,%rdi
ffffffff80224a38:	e8 e8 7f fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
        /* Cannot use 1GB pages, we revert to 2MB pages used during kernel startup */
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff80224a3d:	48 8b 05 bc 55 ee ff 	mov    -0x11aa44(%rip),%rax        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80224a44:	48 0d 01 40 10 00    	or     $0x104001,%rax
ffffffff80224a4a:	48 89 05 af 55 ee ff 	mov    %rax,-0x11aa51(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[0][1]|=0x105000|RME_X64_MMU_P;
ffffffff80224a51:	48 8b 05 b0 55 ee ff 	mov    -0x11aa50(%rip),%rax        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80224a58:	48 0d 01 50 10 00    	or     $0x105001,%rax
ffffffff80224a5e:	48 89 05 a3 55 ee ff 	mov    %rax,-0x11aa5d(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
        RME_X64_Kpgt.PDP[0][2]|=0x106000|RME_X64_MMU_P;
ffffffff80224a65:	48 8b 05 a4 55 ee ff 	mov    -0x11aa5c(%rip),%rax        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80224a6c:	48 0d 01 60 10 00    	or     $0x106001,%rax
ffffffff80224a72:	48 89 05 97 55 ee ff 	mov    %rax,-0x11aa69(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        RME_X64_Kpgt.PDP[0][3]|=0x107000|RME_X64_MMU_PCD|RME_X64_MMU_PWT|RME_X64_MMU_P;
ffffffff80224a79:	48 8b 05 98 55 ee ff 	mov    -0x11aa68(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224a80:	48 0d 19 70 10 00    	or     $0x107019,%rax
ffffffff80224a86:	48 89 05 8b 55 ee ff 	mov    %rax,-0x11aa75(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
ffffffff80224a8d:	48 8b 05 5c 55 fe ff 	mov    -0x1aaa4(%rip),%rax        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff80224a94:	48 0d 01 40 10 00    	or     $0x104001,%rax
ffffffff80224a9a:	48 89 05 4f 55 fe ff 	mov    %rax,-0x1aab1(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff80224aa1:	48 8b 05 50 55 fe ff 	mov    -0x1aab0(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224aa8:	48 0d 01 50 10 00    	or     $0x105001,%rax
ffffffff80224aae:	48 89 05 43 55 fe ff 	mov    %rax,-0x1aabd(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
    }

    /* Ignore all memory below 4G, but we need to get the size of such memory above 16MB */
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
ffffffff80224ab5:	48 8b 05 44 25 01 00 	mov    0x12544(%rip),%rax        # ffffffff80237000 <RME_X64_Phys_Mem>
ffffffff80224abc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224ac0:	eb 26                	jmp    ffffffff80224ae8 <__RME_Pgt_Kom_Init+0x22b>
    {
        /* See if this memory segment passes 16MB limit */
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
ffffffff80224ac2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ac6:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224aca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ace:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224ad2:	48 01 d0             	add    %rdx,%rax
ffffffff80224ad5:	48 3d 00 00 00 01    	cmp    $0x1000000,%rax
ffffffff80224adb:	77 17                	ja     ffffffff80224af4 <__RME_Pgt_Kom_Init+0x237>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224add:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ae1:	48 8b 00             	mov    (%rax),%rax
ffffffff80224ae4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224ae8:	48 81 7d d8 00 70 23 	cmpq   $0xffffffff80237000,-0x28(%rbp)
ffffffff80224aef:	80 
ffffffff80224af0:	75 d0                	jne    ffffffff80224ac2 <__RME_Pgt_Kom_Init+0x205>
ffffffff80224af2:	eb 01                	jmp    ffffffff80224af5 <__RME_Pgt_Kom_Init+0x238>
        else
            break;
ffffffff80224af4:	90                   	nop
    }

    /* The first Kom1 trunk must start at smaller or equal to 16MB */
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGT_SIZE_16M));
    /* The raw sizes of kernel memory segment 1 - per CPU area is already aligned so no need to align again */
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80224af5:	48 8b 15 54 a5 01 00 	mov    0x1a554(%rip),%rdx        # ffffffff8023f050 <RME_X64_Layout+0x10>
ffffffff80224afc:	48 8b 05 55 a5 01 00 	mov    0x1a555(%rip),%rax        # ffffffff8023f058 <RME_X64_Layout+0x18>
ffffffff80224b03:	48 01 d0             	add    %rdx,%rax
ffffffff80224b06:	48 89 05 6b a5 01 00 	mov    %rax,0x1a56b(%rip)        # ffffffff8023f078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80224b0d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224b11:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224b15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224b19:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224b1d:	48 01 c2             	add    %rax,%rdx
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80224b20:	48 8b 05 51 a5 01 00 	mov    0x1a551(%rip),%rax        # ffffffff8023f078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80224b27:	48 29 c2             	sub    %rax,%rdx
ffffffff80224b2a:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff80224b31:	7f ff ff 
ffffffff80224b34:	48 01 d0             	add    %rdx,%rax
ffffffff80224b37:	48 89 05 3a a6 01 00 	mov    %rax,0x1a63a(%rip)        # ffffffff8023f178 <RME_X64_Layout+0x138>

    /* Add the rest of Kom1 into the array */
    Addr_Cnt=1;
ffffffff80224b3e:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
ffffffff80224b45:	00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224b46:	e9 d8 00 00 00       	jmp    ffffffff80224c23 <__RME_Pgt_Kom_Init+0x366>
    {
        /* Add all segments under 4GB to Kom1 */
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224b4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224b4f:	48 8b 00             	mov    (%rax),%rax
ffffffff80224b52:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        /* If detected anything above 4GB, then this is not Kom1, exiting */
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff80224b56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224b5a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224b5e:	ba ff ff ff ff       	mov    $0xffffffff,%edx
ffffffff80224b63:	48 39 c2             	cmp    %rax,%rdx
ffffffff80224b66:	0f 82 c7 00 00 00    	jb     ffffffff80224c33 <__RME_Pgt_Kom_Init+0x376>
            break;
        /* If this memory trunk have less than 4MB, drop it */
        if(Mem->Length<RME_POW2(RME_PGT_SIZE_4M))
ffffffff80224b6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224b70:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224b74:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80224b7a:	77 3a                	ja     ffffffff80224bb6 <__RME_Pgt_Kom_Init+0x2f9>
        {
            RME_DBG_S("\n\rAbandoning physical memory below 4G: addr 0x");
ffffffff80224b7c:	48 c7 c7 10 77 22 80 	mov    $0xffffffff80227710,%rdi
ffffffff80224b83:	e8 9d 7e fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
            RME_DBG_H(Mem->Start_Addr);
ffffffff80224b88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224b8c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224b90:	48 89 c7             	mov    %rax,%rdi
ffffffff80224b93:	e8 cf 7d fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
            RME_DBG_S(", length 0x");
ffffffff80224b98:	48 c7 c7 3f 77 22 80 	mov    $0xffffffff8022773f,%rdi
ffffffff80224b9f:	e8 81 7e fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
            RME_DBG_H(Mem->Length);
ffffffff80224ba4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ba8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224bac:	48 89 c7             	mov    %rax,%rdi
ffffffff80224baf:	e8 b3 7d fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
            continue;
ffffffff80224bb4:	eb 6d                	jmp    ffffffff80224c23 <__RME_Pgt_Kom_Init+0x366>
        }
        if(Addr_Cnt>=RME_X64_KOM1_MAXSEGS)
ffffffff80224bb6:	48 83 7d e0 1f       	cmpq   $0x1f,-0x20(%rbp)
ffffffff80224bbb:	7e 0c                	jle    ffffffff80224bc9 <__RME_Pgt_Kom_Init+0x30c>
        {
            RME_DBG_S("\r\nThe memory under 4G is too fragmented. Aborting.");
ffffffff80224bbd:	48 c7 c7 50 77 22 80 	mov    $0xffffffff80227750,%rdi
ffffffff80224bc4:	e8 5c 7e fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
            RME_ASSERT(0);
        }
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff80224bc9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224bcd:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224bd1:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80224bd7:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224bdd:	48 89 c2             	mov    %rax,%rdx
ffffffff80224be0:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80224be7:	80 ff ff 
ffffffff80224bea:	48 01 c2             	add    %rax,%rdx
ffffffff80224bed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224bf1:	48 83 c0 06          	add    $0x6,%rax
ffffffff80224bf5:	48 89 14 c5 48 f0 23 	mov    %rdx,-0x7fdc0fb8(,%rax,8)
ffffffff80224bfc:	80 
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff80224bfd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224c01:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224c05:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224c0b:	48 89 c2             	mov    %rax,%rdx
ffffffff80224c0e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224c12:	48 83 c0 26          	add    $0x26,%rax
ffffffff80224c16:	48 89 14 c5 48 f0 23 	mov    %rdx,-0x7fdc0fb8(,%rax,8)
ffffffff80224c1d:	80 
        Addr_Cnt++;
ffffffff80224c1e:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224c23:	48 81 7d d8 00 70 23 	cmpq   $0xffffffff80237000,-0x28(%rbp)
ffffffff80224c2a:	80 
ffffffff80224c2b:	0f 85 1a ff ff ff    	jne    ffffffff80224b4b <__RME_Pgt_Kom_Init+0x28e>
ffffffff80224c31:	eb 01                	jmp    ffffffff80224c34 <__RME_Pgt_Kom_Init+0x377>
            break;
ffffffff80224c33:	90                   	nop
    }
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff80224c34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224c38:	48 89 05 31 a4 01 00 	mov    %rax,0x1a431(%rip)        # ffffffff8023f070 <RME_X64_Layout+0x30>

    /* This is the hole */
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff80224c3f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224c43:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224c47:	48 83 c0 06          	add    $0x6,%rax
ffffffff80224c4b:	48 8b 14 c5 48 f0 23 	mov    -0x7fdc0fb8(,%rax,8),%rdx
ffffffff80224c52:	80 
ffffffff80224c53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224c57:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224c5b:	48 83 c0 26          	add    $0x26,%rax
ffffffff80224c5f:	48 8b 04 c5 48 f0 23 	mov    -0x7fdc0fb8(,%rax,8),%rax
ffffffff80224c66:	80 
ffffffff80224c67:	48 01 d0             	add    %rdx,%rax
ffffffff80224c6a:	48 89 05 07 a6 01 00 	mov    %rax,0x1a607(%rip)        # ffffffff8023f278 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff80224c71:	48 8b 05 00 a6 01 00 	mov    0x1a600(%rip),%rax        # ffffffff8023f278 <RME_X64_Layout+0x238>
ffffffff80224c78:	48 ba 00 00 00 00 01 	movabs $0xffff800100000000,%rdx
ffffffff80224c7f:	80 ff ff 
ffffffff80224c82:	48 29 c2             	sub    %rax,%rdx
ffffffff80224c85:	48 89 15 f4 a5 01 00 	mov    %rdx,0x1a5f4(%rip)        # ffffffff8023f280 <RME_X64_Layout+0x240>

    /* Create kernel page mappings for memory above 4GB - we assume only one segment below 4GB */
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff80224c8c:	48 8b 05 e5 a3 01 00 	mov    0x1a3e5(%rip),%rax        # ffffffff8023f078 <RME_X64_Layout+0x38>
ffffffff80224c93:	48 89 05 c6 a3 01 00 	mov    %rax,0x1a3c6(%rip)        # ffffffff8023f060 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff80224c9a:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff80224ca1:	80 ff ff 
ffffffff80224ca4:	48 89 05 dd a5 01 00 	mov    %rax,0x1a5dd(%rip)        # ffffffff8023f288 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff80224cab:	48 c7 05 da a5 01 00 	movq   $0x0,0x1a5da(%rip)        # ffffffff8023f290 <RME_X64_Layout+0x250>
ffffffff80224cb2:	00 00 00 00 

    /* We have filled the first 4 1GB superpages */
    PML4_Cnt=0;
ffffffff80224cb6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224cbd:	00 
    PDP_Cnt=3;
ffffffff80224cbe:	48 c7 45 f0 03 00 00 	movq   $0x3,-0x10(%rbp)
ffffffff80224cc5:	00 
    PDE_Cnt=511;
ffffffff80224cc6:	48 c7 45 e8 ff 01 00 	movq   $0x1ff,-0x18(%rbp)
ffffffff80224ccd:	00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224cce:	e9 d5 01 00 00       	jmp    ffffffff80224ea8 <__RME_Pgt_Kom_Init+0x5eb>
    {
        /* Throw away small segments */
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff80224cd3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224cd7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224cdb:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80224ce1:	77 48                	ja     ffffffff80224d2b <__RME_Pgt_Kom_Init+0x46e>
        {
            RME_DBG_S("\n\rAbandoning physical memory above 4G: addr 0x");
ffffffff80224ce3:	48 c7 c7 88 77 22 80 	mov    $0xffffffff80227788,%rdi
ffffffff80224cea:	e8 36 7d fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
            RME_DBG_H(Mem->Start_Addr);
ffffffff80224cef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224cf3:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224cf7:	48 89 c7             	mov    %rax,%rdi
ffffffff80224cfa:	e8 68 7c fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
            RME_DBG_S(", length 0x");
ffffffff80224cff:	48 c7 c7 3f 77 22 80 	mov    $0xffffffff8022773f,%rdi
ffffffff80224d06:	e8 1a 7d fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
            RME_DBG_H(Mem->Length);
ffffffff80224d0b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d0f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224d13:	48 89 c7             	mov    %rax,%rdi
ffffffff80224d16:	e8 4c 7c fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224d1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d1f:	48 8b 00             	mov    (%rax),%rax
ffffffff80224d22:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            continue;
ffffffff80224d26:	e9 7d 01 00 00       	jmp    ffffffff80224ea8 <__RME_Pgt_Kom_Init+0x5eb>
        }

        /* Align the memory segment to 2MB */
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80224d2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d2f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224d33:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80224d39:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224d3f:	48 89 c2             	mov    %rax,%rdx
ffffffff80224d42:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d46:	48 89 50 10          	mov    %rdx,0x10(%rax)
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff80224d4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d4e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224d52:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224d56:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224d5c:	48 89 c2             	mov    %rax,%rdx
ffffffff80224d5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d63:	48 89 50 18          	mov    %rdx,0x18(%rax)

        /* Add these pages into the kernel at addresses above 4GB offset as 2MB pages */
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80224d67:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80224d6e:	00 
ffffffff80224d6f:	e9 14 01 00 00       	jmp    ffffffff80224e88 <__RME_Pgt_Kom_Init+0x5cb>
        {
            PDE_Cnt++;
ffffffff80224d74:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
            if(PDE_Cnt==512)
ffffffff80224d79:	48 81 7d e8 00 02 00 	cmpq   $0x200,-0x18(%rbp)
ffffffff80224d80:	00 
ffffffff80224d81:	0f 85 8f 00 00 00    	jne    ffffffff80224e16 <__RME_Pgt_Kom_Init+0x559>
            {
                PDE_Cnt=0;
ffffffff80224d87:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80224d8e:	00 
                PDP_Cnt++;
ffffffff80224d8f:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
                if(PDP_Cnt==512)
ffffffff80224d94:	48 81 7d f0 00 02 00 	cmpq   $0x200,-0x10(%rbp)
ffffffff80224d9b:	00 
ffffffff80224d9c:	75 0d                	jne    ffffffff80224dab <__RME_Pgt_Kom_Init+0x4ee>
                {
                    PDP_Cnt=0;
ffffffff80224d9e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80224da5:	00 
                    PML4_Cnt++;
ffffffff80224da6:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
                }
                /* Map this PDE into the PDP */
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff80224dab:	48 8b 05 c6 a2 01 00 	mov    0x1a2c6(%rip),%rax        # ffffffff8023f078 <RME_X64_Layout+0x38>
ffffffff80224db2:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80224db9:	80 00 00 
ffffffff80224dbc:	48 01 c2             	add    %rax,%rdx
ffffffff80224dbf:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80224dc6:	ff 0f 00 
ffffffff80224dc9:	48 21 d0             	and    %rdx,%rax
ffffffff80224dcc:	48 83 c8 01          	or     $0x1,%rax
ffffffff80224dd0:	48 89 c2             	mov    %rax,%rdx
ffffffff80224dd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224dd7:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff80224ddb:	48 89 c1             	mov    %rax,%rcx
ffffffff80224dde:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224de2:	48 01 c8             	add    %rcx,%rax
ffffffff80224de5:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80224deb:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80224df2:	80 
ffffffff80224df3:	48 09 c2             	or     %rax,%rdx
ffffffff80224df6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224dfa:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff80224dfe:	48 89 c1             	mov    %rax,%rcx
ffffffff80224e01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224e05:	48 01 c8             	add    %rcx,%rax
ffffffff80224e08:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80224e0e:	48 89 14 c5 00 90 10 	mov    %rdx,-0x7fef7000(,%rax,8)
ffffffff80224e15:	80 
            }

            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff80224e16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e1a:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224e1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224e22:	48 01 c2             	add    %rax,%rdx
ffffffff80224e25:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80224e2c:	ff 0f 00 
ffffffff80224e2f:	48 21 d0             	and    %rdx,%rax
ffffffff80224e32:	48 8b 15 3f a2 01 00 	mov    0x1a23f(%rip),%rdx        # ffffffff8023f078 <RME_X64_Layout+0x38>
ffffffff80224e39:	48 0d 83 01 00 00    	or     $0x183,%rax
ffffffff80224e3f:	48 89 02             	mov    %rax,(%rdx)
            RME_X64_Layout.Kom1_Start[0]+=sizeof(rme_ptr_t);
ffffffff80224e42:	48 8b 05 2f a2 01 00 	mov    0x1a22f(%rip),%rax        # ffffffff8023f078 <RME_X64_Layout+0x38>
ffffffff80224e49:	48 83 c0 08          	add    $0x8,%rax
ffffffff80224e4d:	48 89 05 24 a2 01 00 	mov    %rax,0x1a224(%rip)        # ffffffff8023f078 <RME_X64_Layout+0x38>
            RME_X64_Layout.Kom1_Size[0]-=sizeof(rme_ptr_t);
ffffffff80224e54:	48 8b 05 1d a3 01 00 	mov    0x1a31d(%rip),%rax        # ffffffff8023f178 <RME_X64_Layout+0x138>
ffffffff80224e5b:	48 83 e8 08          	sub    $0x8,%rax
ffffffff80224e5f:	48 89 05 12 a3 01 00 	mov    %rax,0x1a312(%rip)        # ffffffff8023f178 <RME_X64_Layout+0x138>
            RME_X64_Layout.Kom2_Size+=RME_POW2(RME_PGT_SIZE_2M);
ffffffff80224e66:	48 8b 05 23 a4 01 00 	mov    0x1a423(%rip),%rax        # ffffffff8023f290 <RME_X64_Layout+0x250>
ffffffff80224e6d:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80224e73:	48 89 05 16 a4 01 00 	mov    %rax,0x1a416(%rip)        # ffffffff8023f290 <RME_X64_Layout+0x250>
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80224e7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224e7e:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80224e84:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80224e88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e8c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224e90:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80224e94:	48 39 c2             	cmp    %rax,%rdx
ffffffff80224e97:	0f 82 d7 fe ff ff    	jb     ffffffff80224d74 <__RME_Pgt_Kom_Init+0x4b7>
        }

        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224e9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ea1:	48 8b 00             	mov    (%rax),%rax
ffffffff80224ea4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224ea8:	48 81 7d d8 00 70 23 	cmpq   $0xffffffff80237000,-0x28(%rbp)
ffffffff80224eaf:	80 
ffffffff80224eb0:	0f 85 1d fe ff ff    	jne    ffffffff80224cd3 <__RME_Pgt_Kom_Init+0x416>
    }

    /* Copy the new page tables to the temporary entries, so that we can boot SMP */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80224eb6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224ebd:	00 
ffffffff80224ebe:	eb 33                	jmp    ffffffff80224ef3 <__RME_Pgt_Kom_Init+0x636>
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff80224ec0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224ec4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80224ecb:	00 
ffffffff80224ecc:	48 b8 00 18 10 00 00 	movabs $0xffff800000101800,%rax
ffffffff80224ed3:	80 ff ff 
ffffffff80224ed6:	48 01 c2             	add    %rax,%rdx
ffffffff80224ed9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224edd:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff80224ee3:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80224eea:	80 
ffffffff80224eeb:	48 89 02             	mov    %rax,(%rdx)
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80224eee:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224ef3:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff80224efa:	00 
ffffffff80224efb:	7e c3                	jle    ffffffff80224ec0 <__RME_Pgt_Kom_Init+0x603>

    /* Page table allocation finished. Now need to align Kom1 to 2MB page boundary */
    RME_X64_Layout.Kom1_Start[0]=RME_ROUND_UP(RME_X64_Layout.Kom1_Start[0],RME_PGT_SIZE_2M);
ffffffff80224efd:	48 8b 05 74 a1 01 00 	mov    0x1a174(%rip),%rax        # ffffffff8023f078 <RME_X64_Layout+0x38>
ffffffff80224f04:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80224f0a:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224f10:	48 89 05 61 a1 01 00 	mov    %rax,0x1a161(%rip)        # ffffffff8023f078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Size[0]-1,RME_PGT_SIZE_2M);
ffffffff80224f17:	48 8b 05 5a a2 01 00 	mov    0x1a25a(%rip),%rax        # ffffffff8023f178 <RME_X64_Layout+0x138>
ffffffff80224f1e:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224f22:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224f28:	48 89 05 49 a2 01 00 	mov    %rax,0x1a249(%rip)        # ffffffff8023f178 <RME_X64_Layout+0x138>

    /* All memory is mapped. Now figure out the size of kernel stacks */
    RME_X64_Layout.Kpgtbl_Size=RME_X64_Layout.Kom1_Start[0]-RME_X64_Layout.Kpgtbl_Start;
ffffffff80224f2f:	48 8b 15 42 a1 01 00 	mov    0x1a142(%rip),%rdx        # ffffffff8023f078 <RME_X64_Layout+0x38>
ffffffff80224f36:	48 8b 05 23 a1 01 00 	mov    0x1a123(%rip),%rax        # ffffffff8023f060 <RME_X64_Layout+0x20>
ffffffff80224f3d:	48 29 c2             	sub    %rax,%rdx
ffffffff80224f40:	48 89 15 21 a1 01 00 	mov    %rdx,0x1a121(%rip)        # ffffffff8023f068 <RME_X64_Layout+0x28>

    /* See if we are allocating the stack from Kom2 or Kom1 */
    if(RME_X64_Layout.Kom2_Size==0)
ffffffff80224f47:	48 8b 05 42 a3 01 00 	mov    0x1a342(%rip),%rax        # ffffffff8023f290 <RME_X64_Layout+0x250>
ffffffff80224f4e:	48 85 c0             	test   %rax,%rax
ffffffff80224f51:	75 54                	jne    ffffffff80224fa7 <__RME_Pgt_Kom_Init+0x6ea>
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Start[0]+RME_X64_Layout.Kom1_Size[0]-1,RME_X64_KSTACK_ORDER);
ffffffff80224f53:	48 8b 15 1e a1 01 00 	mov    0x1a11e(%rip),%rdx        # ffffffff8023f078 <RME_X64_Layout+0x38>
ffffffff80224f5a:	48 8b 05 17 a2 01 00 	mov    0x1a217(%rip),%rax        # ffffffff8023f178 <RME_X64_Layout+0x138>
ffffffff80224f61:	48 01 d0             	add    %rdx,%rax
ffffffff80224f64:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224f68:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff80224f6e:	48 89 05 23 a3 01 00 	mov    %rax,0x1a323(%rip)        # ffffffff8023f298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80224f75:	48 8b 05 24 a3 01 00 	mov    0x1a324(%rip),%rax        # ffffffff8023f2a0 <RME_X64_Layout+0x260>
ffffffff80224f7c:	48 8b 15 15 a3 01 00 	mov    0x1a315(%rip),%rdx        # ffffffff8023f298 <RME_X64_Layout+0x258>
ffffffff80224f83:	48 29 c2             	sub    %rax,%rdx
ffffffff80224f86:	48 89 15 0b a3 01 00 	mov    %rdx,0x1a30b(%rip)        # ffffffff8023f298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom1_Size[0]=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom1_Start[0];
ffffffff80224f8d:	48 8b 15 04 a3 01 00 	mov    0x1a304(%rip),%rdx        # ffffffff8023f298 <RME_X64_Layout+0x258>
ffffffff80224f94:	48 8b 05 dd a0 01 00 	mov    0x1a0dd(%rip),%rax        # ffffffff8023f078 <RME_X64_Layout+0x38>
ffffffff80224f9b:	48 29 c2             	sub    %rax,%rdx
ffffffff80224f9e:	48 89 15 d3 a1 01 00 	mov    %rdx,0x1a1d3(%rip)        # ffffffff8023f178 <RME_X64_Layout+0x138>
ffffffff80224fa5:	eb 52                	jmp    ffffffff80224ff9 <__RME_Pgt_Kom_Init+0x73c>
    }


    else
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size-1,RME_X64_KSTACK_ORDER);
ffffffff80224fa7:	48 8b 15 da a2 01 00 	mov    0x1a2da(%rip),%rdx        # ffffffff8023f288 <RME_X64_Layout+0x248>
ffffffff80224fae:	48 8b 05 db a2 01 00 	mov    0x1a2db(%rip),%rax        # ffffffff8023f290 <RME_X64_Layout+0x250>
ffffffff80224fb5:	48 01 d0             	add    %rdx,%rax
ffffffff80224fb8:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224fbc:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff80224fc2:	48 89 05 cf a2 01 00 	mov    %rax,0x1a2cf(%rip)        # ffffffff8023f298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80224fc9:	48 8b 05 d0 a2 01 00 	mov    0x1a2d0(%rip),%rax        # ffffffff8023f2a0 <RME_X64_Layout+0x260>
ffffffff80224fd0:	48 8b 15 c1 a2 01 00 	mov    0x1a2c1(%rip),%rdx        # ffffffff8023f298 <RME_X64_Layout+0x258>
ffffffff80224fd7:	48 29 c2             	sub    %rax,%rdx
ffffffff80224fda:	48 89 15 b7 a2 01 00 	mov    %rdx,0x1a2b7(%rip)        # ffffffff8023f298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom2_Start;
ffffffff80224fe1:	48 8b 15 b0 a2 01 00 	mov    0x1a2b0(%rip),%rdx        # ffffffff8023f298 <RME_X64_Layout+0x258>
ffffffff80224fe8:	48 8b 05 99 a2 01 00 	mov    0x1a299(%rip),%rax        # ffffffff8023f288 <RME_X64_Layout+0x248>
ffffffff80224fef:	48 29 c2             	sub    %rax,%rdx
ffffffff80224ff2:	48 89 15 97 a2 01 00 	mov    %rdx,0x1a297(%rip)        # ffffffff8023f290 <RME_X64_Layout+0x250>
    }

    /* Now report all mapping info */
    RME_DBG_S("\n\r\n\rKot_Start:     0x");
ffffffff80224ff9:	48 c7 c7 b7 77 22 80 	mov    $0xffffffff802277b7,%rdi
ffffffff80225000:	e8 20 7a fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kot_Start);
ffffffff80225005:	48 8b 05 34 a0 01 00 	mov    0x1a034(%rip),%rax        # ffffffff8023f040 <RME_X64_Layout>
ffffffff8022500c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022500f:	e8 53 79 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rKot_Size:      0x");
ffffffff80225014:	48 c7 c7 cd 77 22 80 	mov    $0xffffffff802277cd,%rdi
ffffffff8022501b:	e8 05 7a fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kot_Size);
ffffffff80225020:	48 8b 05 21 a0 01 00 	mov    0x1a021(%rip),%rax        # ffffffff8023f048 <RME_X64_Layout+0x8>
ffffffff80225027:	48 89 c7             	mov    %rax,%rdi
ffffffff8022502a:	e8 38 79 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rPerCPU_Start:    0x");
ffffffff8022502f:	48 c7 c7 e1 77 22 80 	mov    $0xffffffff802277e1,%rdi
ffffffff80225036:	e8 ea 79 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.PerCPU_Start);
ffffffff8022503b:	48 8b 05 0e a0 01 00 	mov    0x1a00e(%rip),%rax        # ffffffff8023f050 <RME_X64_Layout+0x10>
ffffffff80225042:	48 89 c7             	mov    %rax,%rdi
ffffffff80225045:	e8 1d 79 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rPerCPU_Size:     0x");
ffffffff8022504a:	48 c7 c7 f7 77 22 80 	mov    $0xffffffff802277f7,%rdi
ffffffff80225051:	e8 cf 79 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.PerCPU_Size);
ffffffff80225056:	48 8b 05 fb 9f 01 00 	mov    0x19ffb(%rip),%rax        # ffffffff8023f058 <RME_X64_Layout+0x18>
ffffffff8022505d:	48 89 c7             	mov    %rax,%rdi
ffffffff80225060:	e8 02 79 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rKpgtbl_Start:    0x");
ffffffff80225065:	48 c7 c7 0d 78 22 80 	mov    $0xffffffff8022780d,%rdi
ffffffff8022506c:	e8 b4 79 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kpgtbl_Start);
ffffffff80225071:	48 8b 05 e8 9f 01 00 	mov    0x19fe8(%rip),%rax        # ffffffff8023f060 <RME_X64_Layout+0x20>
ffffffff80225078:	48 89 c7             	mov    %rax,%rdi
ffffffff8022507b:	e8 e7 78 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rKpgtbl_Size:     0x");
ffffffff80225080:	48 c7 c7 23 78 22 80 	mov    $0xffffffff80227823,%rdi
ffffffff80225087:	e8 99 79 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kpgtbl_Size);
ffffffff8022508c:	48 8b 05 d5 9f 01 00 	mov    0x19fd5(%rip),%rax        # ffffffff8023f068 <RME_X64_Layout+0x28>
ffffffff80225093:	48 89 c7             	mov    %rax,%rdi
ffffffff80225096:	e8 cc 78 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff8022509b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff802250a2:	00 
ffffffff802250a3:	eb 7d                	jmp    ffffffff80225122 <__RME_Pgt_Kom_Init+0x865>
    {
        RME_DBG_S("\n\rKom1_Start[");
ffffffff802250a5:	48 c7 c7 39 78 22 80 	mov    $0xffffffff80227839,%rdi
ffffffff802250ac:	e8 74 79 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff802250b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802250b5:	48 89 c7             	mov    %rax,%rdi
ffffffff802250b8:	e8 76 77 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
        RME_DBG_S("]:  0x");
ffffffff802250bd:	48 c7 c7 47 78 22 80 	mov    $0xffffffff80227847,%rdi
ffffffff802250c4:	e8 5c 79 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
        RME_DBG_H(RME_X64_Layout.Kom1_Start[Addr_Cnt]);
ffffffff802250c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802250cd:	48 83 c0 06          	add    $0x6,%rax
ffffffff802250d1:	48 8b 04 c5 48 f0 23 	mov    -0x7fdc0fb8(,%rax,8),%rax
ffffffff802250d8:	80 
ffffffff802250d9:	48 89 c7             	mov    %rax,%rdi
ffffffff802250dc:	e8 86 78 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
        RME_DBG_S("\n\rKom1_Size[");
ffffffff802250e1:	48 c7 c7 4e 78 22 80 	mov    $0xffffffff8022784e,%rdi
ffffffff802250e8:	e8 38 79 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff802250ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802250f1:	48 89 c7             	mov    %rax,%rdi
ffffffff802250f4:	e8 3a 77 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
        RME_DBG_S("]:   0x");
ffffffff802250f9:	48 c7 c7 5b 78 22 80 	mov    $0xffffffff8022785b,%rdi
ffffffff80225100:	e8 20 79 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
        RME_DBG_H(RME_X64_Layout.Kom1_Size[Addr_Cnt]);
ffffffff80225105:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225109:	48 83 c0 26          	add    $0x26,%rax
ffffffff8022510d:	48 8b 04 c5 48 f0 23 	mov    -0x7fdc0fb8(,%rax,8),%rax
ffffffff80225114:	80 
ffffffff80225115:	48 89 c7             	mov    %rax,%rdi
ffffffff80225118:	e8 4a 78 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff8022511d:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
ffffffff80225122:	48 8b 05 47 9f 01 00 	mov    0x19f47(%rip),%rax        # ffffffff8023f070 <RME_X64_Layout+0x30>
ffffffff80225129:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8022512d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225130:	0f 82 6f ff ff ff    	jb     ffffffff802250a5 <__RME_Pgt_Kom_Init+0x7e8>
    }
    RME_DBG_S("\n\rHole_Start:      0x");
ffffffff80225136:	48 c7 c7 63 78 22 80 	mov    $0xffffffff80227863,%rdi
ffffffff8022513d:	e8 e3 78 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Hole_Start);
ffffffff80225142:	48 8b 05 2f a1 01 00 	mov    0x1a12f(%rip),%rax        # ffffffff8023f278 <RME_X64_Layout+0x238>
ffffffff80225149:	48 89 c7             	mov    %rax,%rdi
ffffffff8022514c:	e8 16 78 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rHole_Size:       0x");
ffffffff80225151:	48 c7 c7 79 78 22 80 	mov    $0xffffffff80227879,%rdi
ffffffff80225158:	e8 c8 78 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Hole_Size);
ffffffff8022515d:	48 8b 05 1c a1 01 00 	mov    0x1a11c(%rip),%rax        # ffffffff8023f280 <RME_X64_Layout+0x240>
ffffffff80225164:	48 89 c7             	mov    %rax,%rdi
ffffffff80225167:	e8 fb 77 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rKom2_Start:     0x");
ffffffff8022516c:	48 c7 c7 8f 78 22 80 	mov    $0xffffffff8022788f,%rdi
ffffffff80225173:	e8 ad 78 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Start);
ffffffff80225178:	48 8b 05 09 a1 01 00 	mov    0x1a109(%rip),%rax        # ffffffff8023f288 <RME_X64_Layout+0x248>
ffffffff8022517f:	48 89 c7             	mov    %rax,%rdi
ffffffff80225182:	e8 e0 77 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rKom2_Size:      0x");
ffffffff80225187:	48 c7 c7 a4 78 22 80 	mov    $0xffffffff802278a4,%rdi
ffffffff8022518e:	e8 92 78 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Size);
ffffffff80225193:	48 8b 05 f6 a0 01 00 	mov    0x1a0f6(%rip),%rax        # ffffffff8023f290 <RME_X64_Layout+0x250>
ffffffff8022519a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022519d:	e8 c5 77 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rStack_Start:     0x");
ffffffff802251a2:	48 c7 c7 b9 78 22 80 	mov    $0xffffffff802278b9,%rdi
ffffffff802251a9:	e8 77 78 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Stack_Start);
ffffffff802251ae:	48 8b 05 e3 a0 01 00 	mov    0x1a0e3(%rip),%rax        # ffffffff8023f298 <RME_X64_Layout+0x258>
ffffffff802251b5:	48 89 c7             	mov    %rax,%rdi
ffffffff802251b8:	e8 aa 77 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rStack_Size:      0x");
ffffffff802251bd:	48 c7 c7 cf 78 22 80 	mov    $0xffffffff802278cf,%rdi
ffffffff802251c4:	e8 5c 78 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Stack_Size);
ffffffff802251c9:	48 8b 05 d0 a0 01 00 	mov    0x1a0d0(%rip),%rax        # ffffffff8023f2a0 <RME_X64_Layout+0x260>
ffffffff802251d0:	48 89 c7             	mov    %rax,%rdi
ffffffff802251d3:	e8 8f 77 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>

    return 0;
ffffffff802251d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802251dd:	c9                   	leave
ffffffff802251de:	c3                   	ret

ffffffff802251df <__RME_SMP_Low_Level_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
rme_ptr_t __RME_SMP_Low_Level_Init(void)
{
ffffffff802251df:	55                   	push   %rbp
ffffffff802251e0:	48 89 e5             	mov    %rsp,%rbp
ffffffff802251e3:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_CPU_Local* CPU_Local;

    /* Initialize all vector tables */
    __RME_X64_CPU_Local_Init();
ffffffff802251e7:	e8 30 6a ff ff       	call   ffffffff8021bc1c <__RME_X64_CPU_Local_Init>
    /* Initialize LAPIC */
    __RME_X64_LAPIC_Init();
ffffffff802251ec:	e8 ee ef ff ff       	call   ffffffff802241df <__RME_X64_LAPIC_Init>

    /* Check to see if we are booting this correctly */
    CPU_Local=RME_CPU_LOCAL();
ffffffff802251f1:	e8 49 66 fe ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802251f6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_ASSERT(CPU_Local->CPUID==RME_X64_CPU_Cnt);
ffffffff802251fa:	48 8b 05 af a0 01 00 	mov    0x1a0af(%rip),%rax        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>

    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
ffffffff80225201:	48 8b 05 a8 a0 01 00 	mov    0x1a0a8(%rip),%rax        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff80225208:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8022520c:	48 05 c8 f2 23 80    	add    $0xffffffff8023f2c8,%rax
ffffffff80225212:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    /* Spin until the global CPU counter is zero again, which means the booting
     * processor has done booting and we can proceed now */
    while(RME_X64_CPU_Cnt!=0);
ffffffff80225219:	90                   	nop
ffffffff8022521a:	48 8b 05 8f a0 01 00 	mov    0x1a08f(%rip),%rax        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff80225221:	48 85 c0             	test   %rax,%rax
ffffffff80225224:	75 f4                	jne    ffffffff8022521a <__RME_SMP_Low_Level_Init+0x3b>
    RME_ASSERT(CPU_Local->Thd_Cur!=0);
    RME_ASSERT(CPU_Local->Sig_Tim!=0);
    RME_ASSERT(CPU_Local->Sig_Vct!=0);

    /* Change page tables */
    __RME_Pgt_Set(RME_CAP_GETOBJ((CPU_Local->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff80225226:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022522a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8022522e:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80225232:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80225236:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8022523a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022523d:	e8 a3 13 00 00       	call   ffffffff802265e5 <__RME_Pgt_Set>
    /* Boot into the init thread - never returns */
    __RME_Enter_User_Mode(0, RME_X64_USTACK(CPU_Local->CPUID), CPU_Local->CPUID);
ffffffff80225242:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225246:	48 8b 00             	mov    (%rax),%rax
ffffffff80225249:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022524d:	48 8b 12             	mov    (%rdx),%rdx
ffffffff80225250:	48 81 c2 01 04 00 00 	add    $0x401,%rdx
ffffffff80225257:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022525a:	48 c1 e1 0b          	shl    $0xb,%rcx
ffffffff8022525e:	48 89 c2             	mov    %rax,%rdx
ffffffff80225261:	48 89 ce             	mov    %rcx,%rsi
ffffffff80225264:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80225269:	e8 52 66 fe ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>

    return 0;
ffffffff8022526e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80225273:	c9                   	leave
ffffffff80225274:	c3                   	ret

ffffffff80225275 <__RME_Boot>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Boot(void)
{
ffffffff80225275:	55                   	push   %rbp
ffffffff80225276:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225279:	48 83 ec 40          	sub    $0x40,%rsp
    rme_ptr_t Phys_Addr;
    rme_ptr_t Page_Ptr;
    struct RME_Cap_Cpt* Cpt;
    struct RME_CPU_Local* CPU_Local;
    /* Initialize our own CPU-local data structures */
    RME_X64_CPU_Cnt = 0;
ffffffff8022527d:	48 c7 05 28 a0 01 00 	movq   $0x0,0x1a028(%rip)        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff80225284:	00 00 00 00 
    RME_DBG_S("\r\nCPU 0 local IDT/GDT init");
ffffffff80225288:	48 c7 c7 e5 78 22 80 	mov    $0xffffffff802278e5,%rdi
ffffffff8022528f:	e8 91 77 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    __RME_X64_CPU_Local_Init();
ffffffff80225294:	e8 83 69 ff ff       	call   ffffffff8021bc1c <__RME_X64_CPU_Local_Init>
    /* Initialize interrupt controllers (PIC, LAPIC, IOAPIC) */
    RME_DBG_S("\r\nCPU 0 LAPIC init");
ffffffff80225299:	48 c7 c7 00 79 22 80 	mov    $0xffffffff80227900,%rdi
ffffffff802252a0:	e8 80 77 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    __RME_X64_LAPIC_Init();
ffffffff802252a5:	e8 35 ef ff ff       	call   ffffffff802241df <__RME_X64_LAPIC_Init>
    RME_DBG_S("\r\nPIC init");
ffffffff802252aa:	48 c7 c7 13 79 22 80 	mov    $0xffffffff80227913,%rdi
ffffffff802252b1:	e8 6f 77 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    __RME_X64_PIC_Init();
ffffffff802252b6:	e8 7a f0 ff ff       	call   ffffffff80224335 <__RME_X64_PIC_Init>
    RME_DBG_S("\r\nIOAPIC init");
ffffffff802252bb:	48 c7 c7 1e 79 22 80 	mov    $0xffffffff8022791e,%rdi
ffffffff802252c2:	e8 5e 77 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    __RME_X64_IOAPIC_Init();
ffffffff802252c7:	e8 31 f2 ff ff       	call   ffffffff802244fd <__RME_X64_IOAPIC_Init>
    /* Start other processors, if there are any. They will keep spinning until
     * the booting processor finish all its work. */
    __RME_X64_SMP_Init();
ffffffff802252cc:	e8 e9 f2 ff ff       	call   ffffffff802245ba <__RME_X64_SMP_Init>

    /* Create all initial tables in Kom1, which is sure to be present. We reserve 16
     * pages at the start to load the init process */
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff802252d1:	48 8b 05 a0 9d 01 00 	mov    0x19da0(%rip),%rax        # ffffffff8023f078 <RME_X64_Layout+0x38>
ffffffff802252d8:	48 05 00 00 00 02    	add    $0x2000000,%rax
ffffffff802252de:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_DBG_S("\r\nKot registration start offset: 0x");
ffffffff802252e2:	48 c7 c7 30 79 22 80 	mov    $0xffffffff80227930,%rdi
ffffffff802252e9:	e8 37 77 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff802252ee:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802252f5:	80 00 00 
ffffffff802252f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802252fc:	48 01 d0             	add    %rdx,%rax
ffffffff802252ff:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80225303:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80225307:	48 89 c7             	mov    %rax,%rdi
ffffffff8022530a:	e8 58 76 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>

    /* Create the capability table for the init process - always 16 */
    Cpt=(struct RME_Cap_Cpt*)Cur_Addr;
ffffffff8022530f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225313:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    RME_ASSERT(_RME_Cpt_Boot_Init(RME_BOOT_INIT_CPT,Cur_Addr,16)==RME_BOOT_INIT_CPT);
ffffffff80225317:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022531b:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff80225320:	48 89 c6             	mov    %rax,%rsi
ffffffff80225323:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80225328:	e8 00 87 fe ff       	call   ffffffff8020da2d <_RME_Cpt_Boot_Init>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(16));
ffffffff8022532d:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225334:	00 
    /* Create the capability table for initial page tables - now we are only
     * adding 2MB pages. There will be 1 PML4, 16 PDP, and 16*512=8192 PGD.
     * This should provide support for up to 4TB of memory, which will be sufficient
     * for at least a decade. These data structures will eat 32MB of memory, which
     * is fine */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff80225335:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225339:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022533d:	41 b8 11 20 00 00    	mov    $0x2011,%r8d
ffffffff80225343:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225346:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8022534b:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225350:	48 89 c7             	mov    %rax,%rdi
ffffffff80225353:	e8 c0 87 fe ff       	call   ffffffff8020db18 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(1+16+8192));
ffffffff80225358:	48 81 45 f8 00 10 08 	addq   $0x81000,-0x8(%rbp)
ffffffff8022535f:	00 

    /* Align the address to 4096 to prepare for page table creation */
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff80225360:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225364:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff8022536a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225370:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Create PML4 */
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff80225374:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225378:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022537c:	6a 09                	push   $0x9
ffffffff8022537e:	6a 27                	push   $0x27
ffffffff80225380:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff80225386:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff8022538c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022538f:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80225394:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80225399:	48 89 c7             	mov    %rax,%rdi
ffffffff8022539c:	e8 5f a5 fe ff       	call   ffffffff8020f900 <_RME_Pgt_Boot_Crt>
ffffffff802253a1:	48 83 c4 10          	add    $0x10,%rsp
                                   Cur_Addr, 0, RME_PGT_TOP, RME_PGT_SIZE_512G, RME_PGT_NUM_512)==0);
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff802253a5:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff802253ac:	00 
    /* Create all our 16 PDPs, and cons them into the PML4 */
    for(Count=0;Count<16;Count++)
ffffffff802253ad:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802253b4:	00 
ffffffff802253b5:	eb 73                	jmp    ffffffff8022542a <__RME_Boot+0x1b5>
    {
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff802253b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802253bb:	48 8d 70 01          	lea    0x1(%rax),%rsi
ffffffff802253bf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802253c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802253c7:	6a 09                	push   $0x9
ffffffff802253c9:	6a 1e                	push   $0x1e
ffffffff802253cb:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff802253d1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff802253d7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802253da:	48 89 f2             	mov    %rsi,%rdx
ffffffff802253dd:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802253e2:	48 89 c7             	mov    %rax,%rdi
ffffffff802253e5:	e8 16 a5 fe ff       	call   ffffffff8020f900 <_RME_Pgt_Boot_Crt>
ffffffff802253ea:	48 83 c4 10          	add    $0x10,%rsp
                                       Cur_Addr, 0, RME_PGT_NOM, RME_PGT_SIZE_1G, RME_PGT_NUM_512)==0);
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff802253ee:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff802253f5:	00 
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4), Count,
ffffffff802253f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802253fa:	48 83 c0 01          	add    $0x1,%rax
ffffffff802253fe:	0f b7 c0             	movzwl %ax,%eax
ffffffff80225401:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff80225407:	48 89 c1             	mov    %rax,%rcx
ffffffff8022540a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8022540e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225412:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80225418:	be 00 80 01 00       	mov    $0x18000,%esi
ffffffff8022541d:	48 89 c7             	mov    %rax,%rdi
ffffffff80225420:	e8 8c ab fe ff       	call   ffffffff8020ffb1 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<16;Count++)
ffffffff80225425:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff8022542a:	48 83 7d f0 0f       	cmpq   $0xf,-0x10(%rbp)
ffffffff8022542f:	7e 86                	jle    ffffffff802253b7 <__RME_Boot+0x142>
                                       RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count)), RME_PGT_ALL_PERM)==0);
    }

    /* Create 8192 PDEs, and cons them into their respective PDPs */
    for(Count=0;Count<8192;Count++)
ffffffff80225431:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225438:	00 
ffffffff80225439:	e9 8e 00 00 00       	jmp    ffffffff802254cc <__RME_Boot+0x257>
    {
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff8022543e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225442:	48 8d 70 11          	lea    0x11(%rax),%rsi
ffffffff80225446:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022544a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022544e:	6a 09                	push   $0x9
ffffffff80225450:	6a 15                	push   $0x15
ffffffff80225452:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff80225458:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff8022545e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225461:	48 89 f2             	mov    %rsi,%rdx
ffffffff80225464:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80225469:	48 89 c7             	mov    %rax,%rdi
ffffffff8022546c:	e8 8f a4 fe ff       	call   ffffffff8020f900 <_RME_Pgt_Boot_Crt>
ffffffff80225471:	48 83 c4 10          	add    $0x10,%rsp
                                       Cur_Addr, 0, RME_PGT_NOM, RME_PGT_SIZE_2M, RME_PGT_NUM_512)==0);
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff80225475:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff8022547c:	00 
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff8022547d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225481:	48 83 c0 11          	add    $0x11,%rax
ffffffff80225485:	0f b7 c0             	movzwl %ax,%eax
ffffffff80225488:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff8022548e:	48 89 c1             	mov    %rax,%rcx
ffffffff80225491:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225495:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff8022549a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022549d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802254a1:	48 c1 f8 09          	sar    $0x9,%rax
ffffffff802254a5:	48 83 c0 01          	add    $0x1,%rax
ffffffff802254a9:	0f b7 c0             	movzwl %ax,%eax
ffffffff802254ac:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff802254b2:	48 89 c6             	mov    %rax,%rsi
ffffffff802254b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802254b9:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff802254bf:	48 89 c7             	mov    %rax,%rdi
ffffffff802254c2:	e8 ea aa fe ff       	call   ffffffff8020ffb1 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<8192;Count++)
ffffffff802254c7:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff802254cc:	48 81 7d f0 ff 1f 00 	cmpq   $0x1fff,-0x10(%rbp)
ffffffff802254d3:	00 
ffffffff802254d4:	0f 8e 64 ff ff ff    	jle    ffffffff8022543e <__RME_Boot+0x1c9>
                                       RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Count)), RME_PGT_ALL_PERM)==0);
    }

    /* Map all the Kom1 that we have into it */
    Page_Ptr=0;
ffffffff802254da:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff802254e1:	00 
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff802254e2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff802254e9:	00 
ffffffff802254ea:	e9 a1 00 00 00       	jmp    ffffffff80225590 <__RME_Boot+0x31b>
    {
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff802254ef:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802254f6:	00 
ffffffff802254f7:	eb 75                	jmp    ffffffff8022556e <__RME_Boot+0x2f9>
        {
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff802254f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802254fd:	48 83 c0 06          	add    $0x6,%rax
ffffffff80225501:	48 8b 14 c5 48 f0 23 	mov    -0x7fdc0fb8(,%rax,8),%rdx
ffffffff80225508:	80 
ffffffff80225509:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022550d:	48 01 c2             	add    %rax,%rdx
ffffffff80225510:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff80225517:	80 00 00 
ffffffff8022551a:	48 01 d0             	add    %rdx,%rax
ffffffff8022551d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff80225521:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225525:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff8022552a:	48 89 c1             	mov    %rax,%rcx
ffffffff8022552d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225531:	48 c1 e8 09          	shr    $0x9,%rax
ffffffff80225535:	48 83 c0 11          	add    $0x11,%rax
ffffffff80225539:	0f b7 c0             	movzwl %ax,%eax
ffffffff8022553c:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff80225542:	48 89 c6             	mov    %rax,%rsi
ffffffff80225545:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80225549:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022554d:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80225553:	48 89 c7             	mov    %rax,%rdi
ffffffff80225556:	e8 cd a7 fe ff       	call   ffffffff8020fd28 <_RME_Pgt_Boot_Add>
                                           Phys_Addr, Page_Ptr&0x1FF, RME_PGT_ALL_PERM)==0);
            Page_Ptr++;
ffffffff8022555b:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80225560:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225564:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff8022556a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8022556e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80225572:	48 83 c0 26          	add    $0x26,%rax
ffffffff80225576:	48 8b 04 c5 48 f0 23 	mov    -0x7fdc0fb8(,%rax,8),%rax
ffffffff8022557d:	80 
ffffffff8022557e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225582:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225585:	0f 82 6e ff ff ff    	jb     ffffffff802254f9 <__RME_Boot+0x284>
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff8022558b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff80225590:	48 8b 05 d9 9a 01 00 	mov    0x19ad9(%rip),%rax        # ffffffff8023f070 <RME_X64_Layout+0x30>
ffffffff80225597:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8022559b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8022559e:	0f 82 4b ff ff ff    	jb     ffffffff802254ef <__RME_Boot+0x27a>
        }
    }
    RME_DBG_S("\r\nKom1 pages: 0x");
ffffffff802255a4:	48 c7 c7 54 79 22 80 	mov    $0xffffffff80227954,%rdi
ffffffff802255ab:	e8 75 74 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(Page_Ptr);
ffffffff802255b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802255b4:	48 89 c7             	mov    %rax,%rdi
ffffffff802255b7:	e8 ab 73 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S(", [0x0, 0x");
ffffffff802255bc:	48 c7 c7 65 79 22 80 	mov    $0xffffffff80227965,%rdi
ffffffff802255c3:	e8 5d 74 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff802255c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802255cc:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff802255d0:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff802255d6:	48 89 c7             	mov    %rax,%rdi
ffffffff802255d9:	e8 89 73 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("]");
ffffffff802255de:	48 c7 c7 70 79 22 80 	mov    $0xffffffff80227970,%rdi
ffffffff802255e5:	e8 3b 74 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>

    /* Map the Kom2 in - don't want lookups, we know where they are. Offset by 2048 because they are mapped above 4G */
    RME_DBG_S("\r\nKom2 pages: 0x");
ffffffff802255ea:	48 c7 c7 72 79 22 80 	mov    $0xffffffff80227972,%rdi
ffffffff802255f1:	e8 2f 74 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M));
ffffffff802255f6:	48 8b 05 93 9c 01 00 	mov    0x19c93(%rip),%rax        # ffffffff8023f290 <RME_X64_Layout+0x250>
ffffffff802255fd:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff80225601:	48 89 c7             	mov    %rax,%rdi
ffffffff80225604:	e8 5e 73 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S(", [0x");
ffffffff80225609:	48 c7 c7 83 79 22 80 	mov    $0xffffffff80227983,%rdi
ffffffff80225610:	e8 10 74 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M));
ffffffff80225615:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225619:	48 83 c0 01          	add    $0x1,%rax
ffffffff8022561d:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff80225621:	48 89 c7             	mov    %rax,%rdi
ffffffff80225624:	e8 3e 73 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S(", 0x");
ffffffff80225629:	48 c7 c7 55 76 22 80 	mov    $0xffffffff80227655,%rdi
ffffffff80225630:	e8 f0 73 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff80225635:	48 c7 45 f0 00 08 00 	movq   $0x800,-0x10(%rbp)
ffffffff8022563c:	00 
ffffffff8022563d:	e9 bb 00 00 00       	jmp    ffffffff802256fd <__RME_Boot+0x488>
    {
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff80225642:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225646:	48 c1 f8 12          	sar    $0x12,%rax
ffffffff8022564a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022564d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225651:	48 c1 f8 09          	sar    $0x9,%rax
ffffffff80225655:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff8022565a:	48 c1 e2 09          	shl    $0x9,%rdx
ffffffff8022565e:	48 01 d0             	add    %rdx,%rax
ffffffff80225661:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80225667:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff8022566e:	80 
ffffffff8022566f:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff80225676:	ff 0f 00 
ffffffff80225679:	48 21 c2             	and    %rax,%rdx
ffffffff8022567c:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80225683:	80 ff ff 
ffffffff80225686:	48 01 d0             	add    %rdx,%rax
ffffffff80225689:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8022568d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225691:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80225696:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8022569d:	00 
ffffffff8022569e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802256a2:	48 01 d0             	add    %rdx,%rax
ffffffff802256a5:	48 8b 00             	mov    (%rax),%rax
ffffffff802256a8:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff802256af:	ff 0f 00 
ffffffff802256b2:	48 21 d0             	and    %rdx,%rax
ffffffff802256b5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff802256b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802256bd:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff802256c2:	48 89 c1             	mov    %rax,%rcx
ffffffff802256c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802256c9:	48 c1 e8 09          	shr    $0x9,%rax
ffffffff802256cd:	48 83 c0 11          	add    $0x11,%rax
ffffffff802256d1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802256d4:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff802256da:	48 89 c6             	mov    %rax,%rsi
ffffffff802256dd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff802256e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802256e5:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff802256eb:	48 89 c7             	mov    %rax,%rdi
ffffffff802256ee:	e8 35 a6 fe ff       	call   ffffffff8020fd28 <_RME_Pgt_Boot_Add>
                                       Phys_Addr, Page_Ptr&0x1FF, RME_PGT_ALL_PERM)==0);
        Page_Ptr++;
ffffffff802256f3:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff802256f8:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff802256fd:	48 8b 05 8c 9b 01 00 	mov    0x19b8c(%rip),%rax        # ffffffff8023f290 <RME_X64_Layout+0x250>
ffffffff80225704:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff80225708:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8022570e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225712:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225715:	0f 82 27 ff ff ff    	jb     ffffffff80225642 <__RME_Boot+0x3cd>
    }
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8022571b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022571f:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff80225723:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80225729:	48 89 c7             	mov    %rax,%rdi
ffffffff8022572c:	e8 36 72 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("]");
ffffffff80225731:	48 c7 c7 70 79 22 80 	mov    $0xffffffff80227970,%rdi
ffffffff80225738:	e8 e8 72 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>

    /* Activate the first process - This process cannot be deleted */
    RME_ASSERT(_RME_Prc_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_PRC,
ffffffff8022573d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225741:	41 b8 00 80 01 00    	mov    $0x18000,%r8d
ffffffff80225747:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff8022574c:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff80225751:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225756:	48 89 c7             	mov    %rax,%rdi
ffffffff80225759:	e8 c0 d8 fe ff       	call   ffffffff8021301e <_RME_Prc_Boot_Crt>
                                  RME_BOOT_INIT_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4))==0);

    /* Create the initial kernel function capability */
    RME_ASSERT(_RME_Kfn_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_KERN)==0);
ffffffff8022575e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225762:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80225767:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8022576c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022576f:	e8 a8 52 ff ff       	call   ffffffff8021aa1c <_RME_Kfn_Boot_Crt>

    /* Create a capability table for initial kernel memory capabilities. We need a few for Kom1, and another one for Kom2 */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_KOM, Cur_Addr, RME_X64_KOM1_MAXSEGS+1)==0);
ffffffff80225774:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225778:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022577c:	41 b8 21 00 00 00    	mov    $0x21,%r8d
ffffffff80225782:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225785:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff8022578a:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8022578f:	48 89 c7             	mov    %rax,%rdi
ffffffff80225792:	e8 81 83 fe ff       	call   ffffffff8020db18 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff80225797:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff8022579e:	00 
    /* Create Kom1 capabilities - can create page tables here */
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8022579f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802257a6:	00 
ffffffff802257a7:	eb 57                	jmp    ffffffff80225800 <__RME_Boot+0x58b>
    {
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff802257a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802257ad:	48 83 c0 06          	add    $0x6,%rax
ffffffff802257b1:	48 8b 14 c5 48 f0 23 	mov    -0x7fdc0fb8(,%rax,8),%rdx
ffffffff802257b8:	80 
ffffffff802257b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802257bd:	48 83 c0 26          	add    $0x26,%rax
ffffffff802257c1:	48 8b 04 c5 48 f0 23 	mov    -0x7fdc0fb8(,%rax,8),%rax
ffffffff802257c8:	80 
ffffffff802257c9:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
ffffffff802257cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802257d1:	48 83 c0 06          	add    $0x6,%rax
ffffffff802257d5:	48 8b 0c c5 48 f0 23 	mov    -0x7fdc0fb8(,%rax,8),%rcx
ffffffff802257dc:	80 
ffffffff802257dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802257e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802257e5:	41 b9 0f 00 00 00    	mov    $0xf,%r9d
ffffffff802257eb:	49 89 f0             	mov    %rsi,%r8
ffffffff802257ee:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff802257f3:	48 89 c7             	mov    %rax,%rdi
ffffffff802257f6:	e8 65 d0 fe ff       	call   ffffffff80212860 <_RME_Kom_Boot_Crt>
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff802257fb:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225800:	48 8b 05 69 98 01 00 	mov    0x19869(%rip),%rax        # ffffffff8023f070 <RME_X64_Layout+0x30>
ffffffff80225807:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8022580b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8022580e:	72 99                	jb     ffffffff802257a9 <__RME_Boot+0x534>
                                      RME_X64_Layout.Kom1_Start[Count],
                                      RME_X64_Layout.Kom1_Start[Count]+RME_X64_Layout.Kom1_Size[Count],
                                      RME_KOM_FLAG_ALL)==0);
    }
    /* Create Kom2 capability - cannot create page tables here */
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff80225810:	48 8b 15 71 9a 01 00 	mov    0x19a71(%rip),%rdx        # ffffffff8023f288 <RME_X64_Layout+0x248>
ffffffff80225817:	48 8b 05 72 9a 01 00 	mov    0x19a72(%rip),%rax        # ffffffff8023f290 <RME_X64_Layout+0x250>
ffffffff8022581e:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80225822:	48 8b 15 5f 9a 01 00 	mov    0x19a5f(%rip),%rdx        # ffffffff8023f288 <RME_X64_Layout+0x248>
ffffffff80225829:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022582d:	41 b9 0d 00 00 00    	mov    $0xd,%r9d
ffffffff80225833:	49 89 c8             	mov    %rcx,%r8
ffffffff80225836:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225839:	ba 20 00 00 00       	mov    $0x20,%edx
ffffffff8022583e:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff80225843:	48 89 c7             	mov    %rax,%rdi
ffffffff80225846:	e8 15 d0 fe ff       	call   ffffffff80212860 <_RME_Kom_Boot_Crt>
                                  RME_X64_Layout.Kom2_Start,
                                  RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size,
                                  RME_KOM_FLAG_CPT|RME_KOM_FLAG_THD|RME_KOM_FLAG_INV)==0);

    /* Create the initial kernel endpoints for timer ticks */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8022584b:	48 8b 0d 56 9a 01 00 	mov    0x19a56(%rip),%rcx        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff80225852:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225856:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022585a:	49 89 c8             	mov    %rcx,%r8
ffffffff8022585d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225860:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff80225865:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8022586a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022586d:	e8 a6 82 fe ff       	call   ffffffff8020db18 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff80225872:	48 8b 05 2f 9a 01 00 	mov    0x19a2f(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff80225879:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8022587d:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225883:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225889:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8022588d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225894:	00 
ffffffff80225895:	eb 51                	jmp    ffffffff802258e8 <__RME_Boot+0x673>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225897:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022589b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022589e:	e8 f5 e8 ff ff       	call   ffffffff80224198 <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff802258a3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff802258a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802258ab:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802258af:	48 89 c2             	mov    %rax,%rdx
ffffffff802258b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802258b6:	48 05 80 01 00 00    	add    $0x180,%rax
ffffffff802258bc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802258c0:	48 01 d0             	add    %rdx,%rax
ffffffff802258c3:	48 89 c2             	mov    %rax,%rdx
ffffffff802258c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802258ca:	48 89 50 10          	mov    %rdx,0x10(%rax)
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff802258ce:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802258d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802258d6:	be 06 00 00 00       	mov    $0x6,%esi
ffffffff802258db:	48 89 c7             	mov    %rax,%rdi
ffffffff802258de:	e8 81 2a ff ff       	call   ffffffff80218364 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff802258e3:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff802258e8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802258ec:	48 8b 05 b5 99 01 00 	mov    0x199b5(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff802258f3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802258f6:	72 9f                	jb     ffffffff80225897 <__RME_Boot+0x622>
    }

    /* Create the initial kernel endpoints for all other interrupts */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff802258f8:	48 8b 0d a9 99 01 00 	mov    0x199a9(%rip),%rcx        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff802258ff:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225903:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225907:	49 89 c8             	mov    %rcx,%r8
ffffffff8022590a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022590d:	ba 07 00 00 00       	mov    $0x7,%edx
ffffffff80225912:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225917:	48 89 c7             	mov    %rax,%rdi
ffffffff8022591a:	e8 f9 81 fe ff       	call   ffffffff8020db18 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8022591f:	48 8b 05 82 99 01 00 	mov    0x19982(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff80225926:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8022592a:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225930:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225936:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8022593a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225941:	00 
ffffffff80225942:	eb 51                	jmp    ffffffff80225995 <__RME_Boot+0x720>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225944:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225948:	48 89 c7             	mov    %rax,%rdi
ffffffff8022594b:	e8 48 e8 ff ff       	call   ffffffff80224198 <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff80225950:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff80225954:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225958:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8022595c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022595f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225963:	48 05 c0 01 00 00    	add    $0x1c0,%rax
ffffffff80225969:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8022596d:	48 01 d0             	add    %rdx,%rax
ffffffff80225970:	48 89 c2             	mov    %rax,%rdx
ffffffff80225973:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80225977:	48 89 50 18          	mov    %rdx,0x18(%rax)
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8022597b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8022597f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225983:	be 07 00 00 00       	mov    $0x7,%esi
ffffffff80225988:	48 89 c7             	mov    %rax,%rdi
ffffffff8022598b:	e8 d4 29 ff ff       	call   ffffffff80218364 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225990:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225995:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225999:	48 8b 05 08 99 01 00 	mov    0x19908(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff802259a0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802259a3:	72 9f                	jb     ffffffff80225944 <__RME_Boot+0x6cf>
    }

    /* Activate the first thread, and set its priority */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff802259a5:	48 8b 0d fc 98 01 00 	mov    0x198fc(%rip),%rcx        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff802259ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802259b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802259b4:	49 89 c8             	mov    %rcx,%r8
ffffffff802259b7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802259ba:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff802259bf:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802259c4:	48 89 c7             	mov    %rax,%rdi
ffffffff802259c7:	e8 4c 81 fe ff       	call   ffffffff8020db18 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff802259cc:	48 8b 05 d5 98 01 00 	mov    0x198d5(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff802259d3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802259d7:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff802259dd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff802259e3:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff802259e7:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802259ee:	00 
ffffffff802259ef:	eb 4f                	jmp    ffffffff80225a40 <__RME_Boot+0x7cb>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff802259f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802259f5:	48 89 c7             	mov    %rax,%rdi
ffffffff802259f8:	e8 9b e7 ff ff       	call   ffffffff80224198 <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff802259fd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff80225a01:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80225a05:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225a09:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225a0d:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80225a11:	ff 75 d0             	push   -0x30(%rbp)
ffffffff80225a14:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff80225a1a:	49 89 c8             	mov    %rcx,%r8
ffffffff80225a1d:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff80225a22:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80225a27:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a2a:	e8 42 f2 fe ff       	call   ffffffff80214c71 <_RME_Thd_Boot_Crt>
ffffffff80225a2f:	48 83 c4 10          	add    $0x10,%rsp
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_THD_SIZE(Count));
ffffffff80225a33:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225a3a:	00 
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225a3b:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225a40:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225a44:	48 8b 05 5d 98 01 00 	mov    0x1985d(%rip),%rax        # ffffffff8023f2a8 <RME_X64_Num_CPU>
ffffffff80225a4b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225a4e:	72 a1                	jb     ffffffff802259f1 <__RME_Boot+0x77c>
    }

    RME_DBG_S("\r\nKot registration end offset: 0x");
ffffffff80225a50:	48 c7 c7 90 79 22 80 	mov    $0xffffffff80227990,%rdi
ffffffff80225a57:	e8 c9 6f fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff80225a5c:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80225a63:	80 00 00 
ffffffff80225a66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225a6a:	48 01 d0             	add    %rdx,%rax
ffffffff80225a6d:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80225a71:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80225a75:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a78:	e8 ea 6e fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\r\nKom1 frontier: 0x");
ffffffff80225a7d:	48 c7 c7 b2 79 22 80 	mov    $0xffffffff802279b2,%rdi
ffffffff80225a84:	e8 9c 6f fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_H(Cur_Addr);
ffffffff80225a89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225a8d:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a90:	e8 d2 6e fe ff       	call   ffffffff8020c967 <RME_Hex_Print>

    /* Print sizes and halt */
    RME_DBG_S("\r\nThread object size: ");
ffffffff80225a95:	48 c7 c7 c6 79 22 80 	mov    $0xffffffff802279c6,%rdi
ffffffff80225a9c:	e8 84 6f fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Thd_Struct)/sizeof(rme_ptr_t));
ffffffff80225aa1:	bf 16 00 00 00       	mov    $0x16,%edi
ffffffff80225aa6:	e8 88 6d fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\r\nInvocation object size: ");
ffffffff80225aab:	48 c7 c7 dd 79 22 80 	mov    $0xffffffff802279dd,%rdi
ffffffff80225ab2:	e8 6e 6f fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Inv_Struct)/sizeof(rme_ptr_t));
ffffffff80225ab7:	bf 09 00 00 00       	mov    $0x9,%edi
ffffffff80225abc:	e8 72 6d fe ff       	call   ffffffff8020c833 <RME_Int_Print>

    /* Initialize the timer and start its interrupt routing */
    RME_DBG_S("\r\nTimer init\r\n");
ffffffff80225ac1:	48 c7 c7 f8 79 22 80 	mov    $0xffffffff802279f8,%rdi
ffffffff80225ac8:	e8 58 6f fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    __RME_X64_Timer_Init();
ffffffff80225acd:	e8 7a ed ff ff       	call   ffffffff8022484c <__RME_X64_Timer_Init>
    __RME_X64_IOAPIC_Int_Enable(2,0);
ffffffff80225ad2:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225ad7:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff80225adc:	e8 4b e9 ff ff       	call   ffffffff8022442c <__RME_X64_IOAPIC_Int_Enable>
    /* Change page tables */
    __RME_Pgt_Set(RME_CAP_GETOBJ((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff80225ae1:	e8 59 5d fe ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80225ae6:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80225aea:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80225aee:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80225af2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225af6:	48 89 c7             	mov    %rax,%rdi
ffffffff80225af9:	e8 e7 0a 00 00       	call   ffffffff802265e5 <__RME_Pgt_Set>

    /* Load the init process to address 0x00 - It should be smaller than 2MB */
    extern const unsigned char UVM_Init[];
    _RME_Memcpy(0,(void*)UVM_Init,RME_POW2(RME_PGT_SIZE_2M));
ffffffff80225afe:	ba 00 00 20 00       	mov    $0x200000,%edx
ffffffff80225b03:	48 c7 c6 00 80 22 80 	mov    $0xffffffff80228000,%rsi
ffffffff80225b0a:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80225b0f:	e8 a1 73 fe ff       	call   ffffffff8020ceb5 <_RME_Memcpy>

    /* Now other non-booting processors may proceed and go into their threads */
    RME_X64_CPU_Cnt=0;
ffffffff80225b14:	48 c7 05 91 97 01 00 	movq   $0x0,0x19791(%rip)        # ffffffff8023f2b0 <RME_X64_CPU_Cnt>
ffffffff80225b1b:	00 00 00 00 
    /* Boot into the init thread */
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff80225b1f:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80225b24:	be 00 08 20 00       	mov    $0x200800,%esi
ffffffff80225b29:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80225b2e:	e8 8d 5d fe ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
    return 0;
ffffffff80225b33:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80225b38:	c9                   	leave
ffffffff80225b39:	c3                   	ret

ffffffff80225b3a <__RME_Reboot>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Reboot(void)
{
ffffffff80225b3a:	55                   	push   %rbp
ffffffff80225b3b:	48 89 e5             	mov    %rsp,%rbp
    /* Currently we cannot parse th FADT yet. We need these info to shutdown the machine */
    /* outportb(FADT->ResetReg.Address, FADT->ResetValue); */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
}
ffffffff80225b3e:	90                   	nop
ffffffff80225b3f:	5d                   	pop    %rbp
ffffffff80225b40:	c3                   	ret

ffffffff80225b41 <__RME_Shutdown>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Shutdown(void)
{
ffffffff80225b41:	55                   	push   %rbp
ffffffff80225b42:	48 89 e5             	mov    %rsp,%rbp
    /* Currently we cannot parse th DSDT yet. We need these info to shutdown the machine */
    /* outw(PM1a_CNT,SLP_TYPa|SLP_EN) */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
}
ffffffff80225b45:	90                   	nop
ffffffff80225b46:	5d                   	pop    %rbp
ffffffff80225b47:	c3                   	ret

ffffffff80225b48 <__RME_Get_Syscall_Param>:
              rme_ptr_t* Capid - The capability ID number.
              rme_ptr_t* Param - The parameters.
Return      : None.
******************************************************************************/
void __RME_Get_Syscall_Param(struct RME_Reg_Struct* Reg, rme_ptr_t* Svc, rme_ptr_t* Capid, rme_ptr_t* Param)
{
ffffffff80225b48:	55                   	push   %rbp
ffffffff80225b49:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225b4c:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80225b50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225b54:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80225b58:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80225b5c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    *Svc=(Reg->RDI)>>32;
ffffffff80225b60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225b64:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80225b68:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80225b6c:	48 89 c2             	mov    %rax,%rdx
ffffffff80225b6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225b73:	48 89 10             	mov    %rdx,(%rax)
    *Capid=(Reg->RDI)&0xFFFFFFFF;
ffffffff80225b76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225b7a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80225b7e:	89 c2                	mov    %eax,%edx
ffffffff80225b80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80225b84:	48 89 10             	mov    %rdx,(%rax)
    Param[0]=Reg->RSI;
ffffffff80225b87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225b8b:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff80225b8f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225b93:	48 89 10             	mov    %rdx,(%rax)
    Param[1]=Reg->RDX;
ffffffff80225b96:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225b9a:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80225b9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ba2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225ba6:	48 89 02             	mov    %rax,(%rdx)
    Param[2]=Reg->R8;
ffffffff80225ba9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225bad:	48 8d 50 10          	lea    0x10(%rax),%rdx
ffffffff80225bb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225bb5:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80225bb9:	48 89 02             	mov    %rax,(%rdx)
}
ffffffff80225bbc:	90                   	nop
ffffffff80225bbd:	c9                   	leave
ffffffff80225bbe:	c3                   	ret

ffffffff80225bbf <__RME_Set_Syscall_Retval>:
Input       : rme_ret_t Retval - The return value.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Syscall_Retval(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
{
ffffffff80225bbf:	55                   	push   %rbp
ffffffff80225bc0:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225bc3:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225bc7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225bcb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff80225bcf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225bd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225bd7:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff80225bda:	90                   	nop
ffffffff80225bdb:	c9                   	leave
ffffffff80225bdc:	c3                   	ret

ffffffff80225bdd <__RME_Thd_Reg_Init>:
              rme_ptr_t Param - The parameter to pass to it.
Output      : struct RME_Reg_Struct* Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Init(rme_ptr_t Attr,rme_ptr_t Entry, rme_ptr_t Stack, rme_ptr_t Param, struct RME_Reg_Struct* Reg)
{
ffffffff80225bdd:	55                   	push   %rbp
ffffffff80225bde:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225be1:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80225be5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225be9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80225bed:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80225bf1:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff80225bf5:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    /* We use the SYSRET path on creation if possible */
    Reg->INT_NUM=0x10000;
ffffffff80225bf9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225bfd:	48 c7 40 78 00 00 01 	movq   $0x10000,0x78(%rax)
ffffffff80225c04:	00 
    Reg->ERROR_CODE=0;
ffffffff80225c05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225c09:	48 c7 80 80 00 00 00 	movq   $0x0,0x80(%rax)
ffffffff80225c10:	00 00 00 00 
    Reg->RIP=Entry;
ffffffff80225c14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225c18:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225c1c:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Reg->CS=RME_X64_SEG_USER_CODE;
ffffffff80225c23:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225c27:	48 c7 80 90 00 00 00 	movq   $0x2b,0x90(%rax)
ffffffff80225c2e:	2b 00 00 00 
    /* IOPL 3, IF */
    Reg->RFLAGS=0x3200;
ffffffff80225c32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225c36:	48 c7 80 98 00 00 00 	movq   $0x3200,0x98(%rax)
ffffffff80225c3d:	00 32 00 00 
    Reg->RSP=Stack;
ffffffff80225c41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225c45:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80225c49:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
    Reg->SS=RME_X64_SEG_USER_DATA;
ffffffff80225c50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225c54:	48 c7 80 a8 00 00 00 	movq   $0x23,0xa8(%rax)
ffffffff80225c5b:	23 00 00 00 
    /* Pass the parameter */
    Reg->RDI=Param;
ffffffff80225c5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225c63:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80225c67:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff80225c6b:	90                   	nop
ffffffff80225c6c:	c9                   	leave
ffffffff80225c6d:	c3                   	ret

ffffffff80225c6e <__RME_Thd_Reg_Copy>:
Input       : struct RME_Reg_Struct* Src - The source register set.
Output      : struct RME_Reg_Struct* Dst - The destination register set.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Copy(struct RME_Reg_Struct* Dst, struct RME_Reg_Struct* Src)
{
ffffffff80225c6e:	55                   	push   %rbp
ffffffff80225c6f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225c72:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225c76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225c7a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Make sure that the ordering is the same so the compiler can optimize */
    Dst->RAX=Src->RAX;
ffffffff80225c7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225c82:	48 8b 10             	mov    (%rax),%rdx
ffffffff80225c85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225c89:	48 89 10             	mov    %rdx,(%rax)
    Dst->RBX=Src->RBX;
ffffffff80225c8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225c90:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80225c94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225c98:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Dst->RCX=Src->RCX;
ffffffff80225c9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ca0:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80225ca4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ca8:	48 89 50 10          	mov    %rdx,0x10(%rax)
    Dst->RDX=Src->RDX;
ffffffff80225cac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225cb0:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff80225cb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225cb8:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Dst->RSI=Src->RSI;
ffffffff80225cbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225cc0:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff80225cc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225cc8:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Dst->RDI=Src->RDI;
ffffffff80225ccc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225cd0:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80225cd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225cd8:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Dst->RBP=Src->RBP;
ffffffff80225cdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ce0:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80225ce4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ce8:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Dst->R8=Src->R8;
ffffffff80225cec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225cf0:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff80225cf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225cf8:	48 89 50 38          	mov    %rdx,0x38(%rax)
    Dst->R9=Src->R9;
ffffffff80225cfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225d00:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80225d04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d08:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Dst->R10=Src->R10;
ffffffff80225d0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225d10:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff80225d14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d18:	48 89 50 48          	mov    %rdx,0x48(%rax)
    Dst->R11=Src->R11;
ffffffff80225d1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225d20:	48 8b 50 50          	mov    0x50(%rax),%rdx
ffffffff80225d24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d28:	48 89 50 50          	mov    %rdx,0x50(%rax)
    Dst->R12=Src->R12;
ffffffff80225d2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225d30:	48 8b 50 58          	mov    0x58(%rax),%rdx
ffffffff80225d34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d38:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Dst->R13=Src->R13;
ffffffff80225d3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225d40:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80225d44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d48:	48 89 50 60          	mov    %rdx,0x60(%rax)
    Dst->R14=Src->R14;
ffffffff80225d4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225d50:	48 8b 50 68          	mov    0x68(%rax),%rdx
ffffffff80225d54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d58:	48 89 50 68          	mov    %rdx,0x68(%rax)
    Dst->R15=Src->R15;
ffffffff80225d5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225d60:	48 8b 50 70          	mov    0x70(%rax),%rdx
ffffffff80225d64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d68:	48 89 50 70          	mov    %rdx,0x70(%rax)
    /* Don't worry about user modifying INTNUM. If he or she did that it will corrupt userspace */
    Dst->INT_NUM=Src->INT_NUM;
ffffffff80225d6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225d70:	48 8b 50 78          	mov    0x78(%rax),%rdx
ffffffff80225d74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d78:	48 89 50 78          	mov    %rdx,0x78(%rax)
    Dst->ERROR_CODE=Src->ERROR_CODE;
ffffffff80225d7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225d80:	48 8b 90 80 00 00 00 	mov    0x80(%rax),%rdx
ffffffff80225d87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d8b:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
    /* This will always be canonical upon SYSRET, because we will truncate in on return */
    Dst->RIP=Src->RIP;
ffffffff80225d92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225d96:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
ffffffff80225d9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225da1:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Dst->CS=Src->CS;
ffffffff80225da8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225dac:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
ffffffff80225db3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225db7:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    Dst->RFLAGS=Src->RFLAGS;
ffffffff80225dbe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225dc2:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff80225dc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225dcd:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
    Dst->RSP=Src->RSP;
ffffffff80225dd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225dd8:	48 8b 90 a0 00 00 00 	mov    0xa0(%rax),%rdx
ffffffff80225ddf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225de3:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
    Dst->SS=Src->SS;
ffffffff80225dea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225dee:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
ffffffff80225df5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225df9:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
ffffffff80225e00:	90                   	nop
ffffffff80225e01:	c9                   	leave
ffffffff80225e02:	c3                   	ret

ffffffff80225e03 <__RME_Thd_Cop_Init>:
Input       : struct RME_Reg_Struct* Reg - The register struct to help initialize the coprocessor.
Output      : struct RME_Reg_Cop_Struct* Cop_Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Init(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80225e03:	55                   	push   %rbp
ffffffff80225e04:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225e07:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225e0b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225e0f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Empty function, return immediately. The FPU contents is not predictable */
}
ffffffff80225e13:	90                   	nop
ffffffff80225e14:	c9                   	leave
ffffffff80225e15:	c3                   	ret

ffffffff80225e16 <__RME_Thd_Cop_Save>:
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Save(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80225e16:	55                   	push   %rbp
ffffffff80225e17:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225e1a:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225e1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225e22:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not used for now */
}
ffffffff80225e26:	90                   	nop
ffffffff80225e27:	c9                   	leave
ffffffff80225e28:	c3                   	ret

ffffffff80225e29 <__RME_Thd_Cop_Restore>:
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Restore(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80225e29:	55                   	push   %rbp
ffffffff80225e2a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225e2d:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225e31:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225e35:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not used for now */
}
ffffffff80225e39:	90                   	nop
ffffffff80225e3a:	c9                   	leave
ffffffff80225e3b:	c3                   	ret

ffffffff80225e3c <__RME_Inv_Reg_Save>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Iret_Struct* Ret - The invocation return register context.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Save(struct RME_Iret_Struct* Ret, struct RME_Reg_Struct* Reg)
{
ffffffff80225e3c:	55                   	push   %rbp
ffffffff80225e3d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225e40:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225e44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225e48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Ret->RIP=Reg->RIP;
ffffffff80225e4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e50:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
ffffffff80225e57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e5b:	48 89 10             	mov    %rdx,(%rax)
    Ret->RSP=Reg->RSP;
ffffffff80225e5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e62:	48 8b 90 a0 00 00 00 	mov    0xa0(%rax),%rdx
ffffffff80225e69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e6d:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff80225e71:	90                   	nop
ffffffff80225e72:	c9                   	leave
ffffffff80225e73:	c3                   	ret

ffffffff80225e74 <__RME_Inv_Reg_Restore>:
Input       : struct RME_Iret_Struct* Ret - The invocation return register context.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Restore(struct RME_Reg_Struct* Reg, struct RME_Iret_Struct* Ret)
{
ffffffff80225e74:	55                   	push   %rbp
ffffffff80225e75:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225e78:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225e7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225e80:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RIP=Ret->RIP;
ffffffff80225e84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e88:	48 8b 10             	mov    (%rax),%rdx
ffffffff80225e8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e8f:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Reg->RSP=Ret->RSP;
ffffffff80225e96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e9a:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80225e9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ea2:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
}
ffffffff80225ea9:	90                   	nop
ffffffff80225eaa:	c9                   	leave
ffffffff80225eab:	c3                   	ret

ffffffff80225eac <__RME_Set_Inv_Retval>:
Input       : rme_ret_t Retval - The return value.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Inv_Retval(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
{
ffffffff80225eac:	55                   	push   %rbp
ffffffff80225ead:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225eb0:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225eb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225eb8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff80225ebc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225ec0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ec4:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff80225ec8:	90                   	nop
ffffffff80225ec9:	c9                   	leave
ffffffff80225eca:	c3                   	ret

ffffffff80225ecb <write_string>:
/* End Function:__RME_Set_Inv_Retval *****************************************/

/* Crap for test */
void write_string( int colour, const char *string, rme_ptr_t pos)
{
ffffffff80225ecb:	55                   	push   %rbp
ffffffff80225ecc:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225ecf:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80225ed3:	89 7d ec             	mov    %edi,-0x14(%rbp)
ffffffff80225ed6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80225eda:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff80225ede:	48 ba 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rdx
ffffffff80225ee5:	80 ff ff 
ffffffff80225ee8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225eec:	48 01 d0             	add    %rdx,%rax
ffffffff80225eef:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while( *string != 0 )
ffffffff80225ef3:	eb 2e                	jmp    ffffffff80225f23 <write_string+0x58>
    {
        *video++ = *string++;
ffffffff80225ef5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80225ef9:	48 8d 42 01          	lea    0x1(%rdx),%rax
ffffffff80225efd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80225f01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f05:	48 8d 48 01          	lea    0x1(%rax),%rcx
ffffffff80225f09:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff80225f0d:	0f b6 12             	movzbl (%rdx),%edx
ffffffff80225f10:	88 10                	mov    %dl,(%rax)
        *video++ = colour;
ffffffff80225f12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f16:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80225f1a:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80225f1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
ffffffff80225f21:	88 10                	mov    %dl,(%rax)
    while( *string != 0 )
ffffffff80225f23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225f27:	0f b6 00             	movzbl (%rax),%eax
ffffffff80225f2a:	84 c0                	test   %al,%al
ffffffff80225f2c:	75 c7                	jne    ffffffff80225ef5 <write_string+0x2a>
    }
}
ffffffff80225f2e:	90                   	nop
ffffffff80225f2f:	90                   	nop
ffffffff80225f30:	c9                   	leave
ffffffff80225f31:	c3                   	ret

ffffffff80225f32 <NDBG>:

void NDBG(void)
{
ffffffff80225f32:	55                   	push   %rbp
ffffffff80225f33:	48 89 e5             	mov    %rsp,%rbp
    write_string( 0x07, "Here", 0);
ffffffff80225f36:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80225f3b:	48 c7 c6 07 7a 22 80 	mov    $0xffffffff80227a07,%rsi
ffffffff80225f42:	bf 07 00 00 00       	mov    $0x7,%edi
ffffffff80225f47:	e8 7f ff ff ff       	call   ffffffff80225ecb <write_string>
}
ffffffff80225f4c:	90                   	nop
ffffffff80225f4d:	5d                   	pop    %rbp
ffffffff80225f4e:	c3                   	ret

ffffffff80225f4f <__RME_Kern_Func_Handler>:
Output      : None.
Return      : rme_ret_t - The value that the function returned.
******************************************************************************/
rme_ret_t __RME_Kern_Func_Handler(struct RME_Cap_Cpt* Cpt, struct RME_Reg_Struct* Reg,
                                  rme_ptr_t Func_ID, rme_ptr_t Sub_ID, rme_ptr_t Param1, rme_ptr_t Param2)
{
ffffffff80225f4f:	55                   	push   %rbp
ffffffff80225f50:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225f53:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80225f57:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80225f5b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80225f5f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80225f63:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff80225f67:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff80225f6b:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
    /* Now always call the HALT */
    char String[16];

    String[0]=Param1/10000000+'0';
ffffffff80225f6f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80225f73:	48 ba bd 42 7a e5 d5 	movabs $0xd6bf94d5e57a42bd,%rdx
ffffffff80225f7a:	94 bf d6 
ffffffff80225f7d:	48 f7 e2             	mul    %rdx
ffffffff80225f80:	48 89 d0             	mov    %rdx,%rax
ffffffff80225f83:	48 c1 e8 17          	shr    $0x17,%rax
ffffffff80225f87:	83 c0 30             	add    $0x30,%eax
ffffffff80225f8a:	88 45 f0             	mov    %al,-0x10(%rbp)
    String[1]=(Param1/1000000)%10+'0';
ffffffff80225f8d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80225f91:	48 ba db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rdx
ffffffff80225f98:	de 1b 43 
ffffffff80225f9b:	48 f7 e2             	mul    %rdx
ffffffff80225f9e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225fa1:	48 c1 e9 12          	shr    $0x12,%rcx
ffffffff80225fa5:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80225fac:	cc cc cc 
ffffffff80225faf:	48 89 c8             	mov    %rcx,%rax
ffffffff80225fb2:	48 f7 e2             	mul    %rdx
ffffffff80225fb5:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80225fb9:	48 89 d0             	mov    %rdx,%rax
ffffffff80225fbc:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80225fc0:	48 01 d0             	add    %rdx,%rax
ffffffff80225fc3:	48 01 c0             	add    %rax,%rax
ffffffff80225fc6:	48 29 c1             	sub    %rax,%rcx
ffffffff80225fc9:	48 89 ca             	mov    %rcx,%rdx
ffffffff80225fcc:	89 d0                	mov    %edx,%eax
ffffffff80225fce:	83 c0 30             	add    $0x30,%eax
ffffffff80225fd1:	88 45 f1             	mov    %al,-0xf(%rbp)
    String[2]=(Param1/100000)%10+'0';
ffffffff80225fd4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80225fd8:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff80225fdc:	48 ba 43 78 b4 71 c4 	movabs $0xa7c5ac471b47843,%rdx
ffffffff80225fe3:	5a 7c 0a 
ffffffff80225fe6:	48 f7 e2             	mul    %rdx
ffffffff80225fe9:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225fec:	48 c1 e9 07          	shr    $0x7,%rcx
ffffffff80225ff0:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80225ff7:	cc cc cc 
ffffffff80225ffa:	48 89 c8             	mov    %rcx,%rax
ffffffff80225ffd:	48 f7 e2             	mul    %rdx
ffffffff80226000:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226004:	48 89 d0             	mov    %rdx,%rax
ffffffff80226007:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8022600b:	48 01 d0             	add    %rdx,%rax
ffffffff8022600e:	48 01 c0             	add    %rax,%rax
ffffffff80226011:	48 29 c1             	sub    %rax,%rcx
ffffffff80226014:	48 89 ca             	mov    %rcx,%rdx
ffffffff80226017:	89 d0                	mov    %edx,%eax
ffffffff80226019:	83 c0 30             	add    $0x30,%eax
ffffffff8022601c:	88 45 f2             	mov    %al,-0xe(%rbp)
    String[3]=(Param1/10000)%10+'0';
ffffffff8022601f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226023:	48 ba 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rdx
ffffffff8022602a:	c5 6d 34 
ffffffff8022602d:	48 f7 e2             	mul    %rdx
ffffffff80226030:	48 89 d1             	mov    %rdx,%rcx
ffffffff80226033:	48 c1 e9 0b          	shr    $0xb,%rcx
ffffffff80226037:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff8022603e:	cc cc cc 
ffffffff80226041:	48 89 c8             	mov    %rcx,%rax
ffffffff80226044:	48 f7 e2             	mul    %rdx
ffffffff80226047:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8022604b:	48 89 d0             	mov    %rdx,%rax
ffffffff8022604e:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80226052:	48 01 d0             	add    %rdx,%rax
ffffffff80226055:	48 01 c0             	add    %rax,%rax
ffffffff80226058:	48 29 c1             	sub    %rax,%rcx
ffffffff8022605b:	48 89 ca             	mov    %rcx,%rdx
ffffffff8022605e:	89 d0                	mov    %edx,%eax
ffffffff80226060:	83 c0 30             	add    $0x30,%eax
ffffffff80226063:	88 45 f3             	mov    %al,-0xd(%rbp)
    String[4]=(Param1/1000)%10+'0';
ffffffff80226066:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8022606a:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff8022606e:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
ffffffff80226075:	9b c4 20 
ffffffff80226078:	48 f7 e2             	mul    %rdx
ffffffff8022607b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022607e:	48 c1 e9 04          	shr    $0x4,%rcx
ffffffff80226082:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226089:	cc cc cc 
ffffffff8022608c:	48 89 c8             	mov    %rcx,%rax
ffffffff8022608f:	48 f7 e2             	mul    %rdx
ffffffff80226092:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226096:	48 89 d0             	mov    %rdx,%rax
ffffffff80226099:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8022609d:	48 01 d0             	add    %rdx,%rax
ffffffff802260a0:	48 01 c0             	add    %rax,%rax
ffffffff802260a3:	48 29 c1             	sub    %rax,%rcx
ffffffff802260a6:	48 89 ca             	mov    %rcx,%rdx
ffffffff802260a9:	89 d0                	mov    %edx,%eax
ffffffff802260ab:	83 c0 30             	add    $0x30,%eax
ffffffff802260ae:	88 45 f4             	mov    %al,-0xc(%rbp)
    String[5]=(Param1/100)%10+'0';
ffffffff802260b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802260b5:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff802260b9:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
ffffffff802260c0:	c2 f5 28 
ffffffff802260c3:	48 f7 e2             	mul    %rdx
ffffffff802260c6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802260c9:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff802260cd:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802260d4:	cc cc cc 
ffffffff802260d7:	48 89 c8             	mov    %rcx,%rax
ffffffff802260da:	48 f7 e2             	mul    %rdx
ffffffff802260dd:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff802260e1:	48 89 d0             	mov    %rdx,%rax
ffffffff802260e4:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff802260e8:	48 01 d0             	add    %rdx,%rax
ffffffff802260eb:	48 01 c0             	add    %rax,%rax
ffffffff802260ee:	48 29 c1             	sub    %rax,%rcx
ffffffff802260f1:	48 89 ca             	mov    %rcx,%rdx
ffffffff802260f4:	89 d0                	mov    %edx,%eax
ffffffff802260f6:	83 c0 30             	add    $0x30,%eax
ffffffff802260f9:	88 45 f5             	mov    %al,-0xb(%rbp)
    String[6]=(Param1/10)%10+'0';
ffffffff802260fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226100:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226107:	cc cc cc 
ffffffff8022610a:	48 f7 e2             	mul    %rdx
ffffffff8022610d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80226110:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff80226114:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff8022611b:	cc cc cc 
ffffffff8022611e:	48 89 c8             	mov    %rcx,%rax
ffffffff80226121:	48 f7 e2             	mul    %rdx
ffffffff80226124:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226128:	48 89 d0             	mov    %rdx,%rax
ffffffff8022612b:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8022612f:	48 01 d0             	add    %rdx,%rax
ffffffff80226132:	48 01 c0             	add    %rax,%rax
ffffffff80226135:	48 29 c1             	sub    %rax,%rcx
ffffffff80226138:	48 89 ca             	mov    %rcx,%rdx
ffffffff8022613b:	89 d0                	mov    %edx,%eax
ffffffff8022613d:	83 c0 30             	add    $0x30,%eax
ffffffff80226140:	88 45 f6             	mov    %al,-0xa(%rbp)
    String[7]=(Param1)%10+'0';
ffffffff80226143:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80226147:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff8022614e:	cc cc cc 
ffffffff80226151:	48 89 c8             	mov    %rcx,%rax
ffffffff80226154:	48 f7 e2             	mul    %rdx
ffffffff80226157:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8022615b:	48 89 d0             	mov    %rdx,%rax
ffffffff8022615e:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80226162:	48 01 d0             	add    %rdx,%rax
ffffffff80226165:	48 01 c0             	add    %rax,%rax
ffffffff80226168:	48 29 c1             	sub    %rax,%rcx
ffffffff8022616b:	48 89 ca             	mov    %rcx,%rdx
ffffffff8022616e:	89 d0                	mov    %edx,%eax
ffffffff80226170:	83 c0 30             	add    $0x30,%eax
ffffffff80226173:	88 45 f7             	mov    %al,-0x9(%rbp)
    String[8]='\0';
ffffffff80226176:	c6 45 f8 00          	movb   $0x0,-0x8(%rbp)
    write_string(Func_ID, (const char *)String, Sub_ID);
ffffffff8022617a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022617e:	89 c1                	mov    %eax,%ecx
ffffffff80226180:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80226184:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
ffffffff80226188:	48 89 c6             	mov    %rax,%rsi
ffffffff8022618b:	89 cf                	mov    %ecx,%edi
ffffffff8022618d:	e8 39 fd ff ff       	call   ffffffff80225ecb <write_string>

    //__RME_X64_Halt();
    return 0;
ffffffff80226192:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226197:	c9                   	leave
ffffffff80226198:	c3                   	ret

ffffffff80226199 <__RME_X64_Fault_Handler>:
              rme_ptr_t Reason - The fault source.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Fault_Handler(struct RME_Reg_Struct* Reg, rme_ptr_t Reason)
{
ffffffff80226199:	55                   	push   %rbp
ffffffff8022619a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022619d:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802261a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802261a5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not handling faults */
    RME_DBG_S("\n\r\n\r*** Fault: ");RME_DBG_I(Reason);RME_DBG_S(" - ");
ffffffff802261a9:	48 c7 c7 0c 7a 22 80 	mov    $0xffffffff80227a0c,%rdi
ffffffff802261b0:	e8 70 68 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802261b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802261b9:	48 89 c7             	mov    %rax,%rdi
ffffffff802261bc:	e8 72 66 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
ffffffff802261c1:	48 c7 c7 1c 7a 22 80 	mov    $0xffffffff80227a1c,%rdi
ffffffff802261c8:	e8 58 68 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    /* When handling debug exceptions, note CVE 2018-8897, we may get something at
     * kernel level - If this is what we have, the user must have touched SS + INT */
    /* Print reason */
    switch(Reason)
ffffffff802261cd:	48 83 7d f0 14       	cmpq   $0x14,-0x10(%rbp)
ffffffff802261d2:	0f 87 4c 01 00 00    	ja     ffffffff80226324 <__RME_X64_Fault_Handler+0x18b>
ffffffff802261d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802261dc:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff802261e0:	48 05 80 7d 22 80    	add    $0xffffffff80227d80,%rax
ffffffff802261e6:	48 8b 00             	mov    (%rax),%rax
ffffffff802261e9:	ff e0                	jmp    *%rax
    {
        case RME_X64_FAULT_DE:RME_DBG_S("Divide error");break;
ffffffff802261eb:	48 c7 c7 20 7a 22 80 	mov    $0xffffffff80227a20,%rdi
ffffffff802261f2:	e8 2e 68 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802261f7:	e9 35 01 00 00       	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_TRAP_DB:RME_DBG_S("Debug exception");break;
ffffffff802261fc:	48 c7 c7 2d 7a 22 80 	mov    $0xffffffff80227a2d,%rdi
ffffffff80226203:	e8 1d 68 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226208:	e9 24 01 00 00       	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_INT_NMI:RME_DBG_S("NMI error");break;
ffffffff8022620d:	48 c7 c7 3d 7a 22 80 	mov    $0xffffffff80227a3d,%rdi
ffffffff80226214:	e8 0c 68 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226219:	e9 13 01 00 00       	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_TRAP_BP:RME_DBG_S("Debug breakpoint");break;
ffffffff8022621e:	48 c7 c7 47 7a 22 80 	mov    $0xffffffff80227a47,%rdi
ffffffff80226225:	e8 fb 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff8022622a:	e9 02 01 00 00       	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_TRAP_OF:RME_DBG_S("Overflow exception");break;
ffffffff8022622f:	48 c7 c7 58 7a 22 80 	mov    $0xffffffff80227a58,%rdi
ffffffff80226236:	e8 ea 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff8022623b:	e9 f1 00 00 00       	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_FAULT_BR:RME_DBG_S("Bound range exception");break;
ffffffff80226240:	48 c7 c7 6b 7a 22 80 	mov    $0xffffffff80227a6b,%rdi
ffffffff80226247:	e8 d9 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff8022624c:	e9 e0 00 00 00       	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_FAULT_UD:RME_DBG_S("Undefined instruction");break;
ffffffff80226251:	48 c7 c7 81 7a 22 80 	mov    $0xffffffff80227a81,%rdi
ffffffff80226258:	e8 c8 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff8022625d:	e9 cf 00 00 00       	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_FAULT_NM:RME_DBG_S("Device not available");break;
ffffffff80226262:	48 c7 c7 97 7a 22 80 	mov    $0xffffffff80227a97,%rdi
ffffffff80226269:	e8 b7 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff8022626e:	e9 be 00 00 00       	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_ABORT_DF:RME_DBG_S("Double(nested) fault exception");break;
ffffffff80226273:	48 c7 c7 b0 7a 22 80 	mov    $0xffffffff80227ab0,%rdi
ffffffff8022627a:	e8 a6 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff8022627f:	e9 ad 00 00 00       	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_ABORT_OLD_MF:RME_DBG_S("Coprocessor overrun - not used later on");break;
ffffffff80226284:	48 c7 c7 d0 7a 22 80 	mov    $0xffffffff80227ad0,%rdi
ffffffff8022628b:	e8 95 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226290:	e9 9c 00 00 00       	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_FAULT_TS:RME_DBG_S("Invalid TSS exception");break;
ffffffff80226295:	48 c7 c7 f8 7a 22 80 	mov    $0xffffffff80227af8,%rdi
ffffffff8022629c:	e8 84 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802262a1:	e9 8b 00 00 00       	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_FAULT_NP:RME_DBG_S("Segment not present");break;
ffffffff802262a6:	48 c7 c7 0e 7b 22 80 	mov    $0xffffffff80227b0e,%rdi
ffffffff802262ad:	e8 73 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802262b2:	eb 7d                	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_FAULT_SS:RME_DBG_S("Stack fault exception");break;
ffffffff802262b4:	48 c7 c7 22 7b 22 80 	mov    $0xffffffff80227b22,%rdi
ffffffff802262bb:	e8 65 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802262c0:	eb 6f                	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_FAULT_GP:RME_DBG_S("General protection exception");break;
ffffffff802262c2:	48 c7 c7 38 7b 22 80 	mov    $0xffffffff80227b38,%rdi
ffffffff802262c9:	e8 57 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802262ce:	eb 61                	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_FAULT_PF:RME_DBG_S("Page fault exception");break;
ffffffff802262d0:	48 c7 c7 55 7b 22 80 	mov    $0xffffffff80227b55,%rdi
ffffffff802262d7:	e8 49 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802262dc:	eb 53                	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_FAULT_MF:RME_DBG_S("X87 FPU floating-point error:");break;
ffffffff802262de:	48 c7 c7 6a 7b 22 80 	mov    $0xffffffff80227b6a,%rdi
ffffffff802262e5:	e8 3b 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802262ea:	eb 45                	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_FAULT_AC:RME_DBG_S("Alignment check exception");break;
ffffffff802262ec:	48 c7 c7 88 7b 22 80 	mov    $0xffffffff80227b88,%rdi
ffffffff802262f3:	e8 2d 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802262f8:	eb 37                	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_ABORT_MC:RME_DBG_S("Machine check exception");break;
ffffffff802262fa:	48 c7 c7 a2 7b 22 80 	mov    $0xffffffff80227ba2,%rdi
ffffffff80226301:	e8 1f 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226306:	eb 29                	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_FAULT_XM:RME_DBG_S("SIMD floating-point exception");break;
ffffffff80226308:	48 c7 c7 ba 7b 22 80 	mov    $0xffffffff80227bba,%rdi
ffffffff8022630f:	e8 11 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226314:	eb 1b                	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        case RME_X64_FAULT_VE:RME_DBG_S("Virtualization exception");break;
ffffffff80226316:	48 c7 c7 d8 7b 22 80 	mov    $0xffffffff80227bd8,%rdi
ffffffff8022631d:	e8 03 67 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226322:	eb 0d                	jmp    ffffffff80226331 <__RME_X64_Fault_Handler+0x198>
        default:RME_DBG_S("Unknown exception");break;
ffffffff80226324:	48 c7 c7 f1 7b 22 80 	mov    $0xffffffff80227bf1,%rdi
ffffffff8022632b:	e8 f5 66 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226330:	90                   	nop
    }
    /* Print all registers */
    RME_DBG_S("\n\rRAX:        0x");RME_DBG_H(Reg->RAX);
ffffffff80226331:	48 c7 c7 03 7c 22 80 	mov    $0xffffffff80227c03,%rdi
ffffffff80226338:	e8 e8 66 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff8022633d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226341:	48 8b 00             	mov    (%rax),%rax
ffffffff80226344:	48 89 c7             	mov    %rax,%rdi
ffffffff80226347:	e8 1b 66 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rRBX:        0x");RME_DBG_H(Reg->RBX);
ffffffff8022634c:	48 c7 c7 14 7c 22 80 	mov    $0xffffffff80227c14,%rdi
ffffffff80226353:	e8 cd 66 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226358:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022635c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80226360:	48 89 c7             	mov    %rax,%rdi
ffffffff80226363:	e8 ff 65 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rRCX:        0x");RME_DBG_H(Reg->RCX);
ffffffff80226368:	48 c7 c7 25 7c 22 80 	mov    $0xffffffff80227c25,%rdi
ffffffff8022636f:	e8 b1 66 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226374:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226378:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8022637c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022637f:	e8 e3 65 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rRDX:        0x");RME_DBG_H(Reg->RDX);
ffffffff80226384:	48 c7 c7 36 7c 22 80 	mov    $0xffffffff80227c36,%rdi
ffffffff8022638b:	e8 95 66 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226390:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226394:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226398:	48 89 c7             	mov    %rax,%rdi
ffffffff8022639b:	e8 c7 65 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rRSI:        0x");RME_DBG_H(Reg->RSI);
ffffffff802263a0:	48 c7 c7 47 7c 22 80 	mov    $0xffffffff80227c47,%rdi
ffffffff802263a7:	e8 79 66 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802263ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802263b0:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff802263b4:	48 89 c7             	mov    %rax,%rdi
ffffffff802263b7:	e8 ab 65 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rRDI:        0x");RME_DBG_H(Reg->RDI);
ffffffff802263bc:	48 c7 c7 58 7c 22 80 	mov    $0xffffffff80227c58,%rdi
ffffffff802263c3:	e8 5d 66 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802263c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802263cc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802263d0:	48 89 c7             	mov    %rax,%rdi
ffffffff802263d3:	e8 8f 65 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rRBP:        0x");RME_DBG_H(Reg->RBP);
ffffffff802263d8:	48 c7 c7 69 7c 22 80 	mov    $0xffffffff80227c69,%rdi
ffffffff802263df:	e8 41 66 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802263e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802263e8:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802263ec:	48 89 c7             	mov    %rax,%rdi
ffffffff802263ef:	e8 73 65 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rR8:         0x");RME_DBG_H(Reg->R8);
ffffffff802263f4:	48 c7 c7 7a 7c 22 80 	mov    $0xffffffff80227c7a,%rdi
ffffffff802263fb:	e8 25 66 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226400:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226404:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80226408:	48 89 c7             	mov    %rax,%rdi
ffffffff8022640b:	e8 57 65 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rR9:         0x");RME_DBG_H(Reg->R9);
ffffffff80226410:	48 c7 c7 8b 7c 22 80 	mov    $0xffffffff80227c8b,%rdi
ffffffff80226417:	e8 09 66 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff8022641c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226420:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80226424:	48 89 c7             	mov    %rax,%rdi
ffffffff80226427:	e8 3b 65 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rR10:        0x");RME_DBG_H(Reg->R10);
ffffffff8022642c:	48 c7 c7 9c 7c 22 80 	mov    $0xffffffff80227c9c,%rdi
ffffffff80226433:	e8 ed 65 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226438:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022643c:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80226440:	48 89 c7             	mov    %rax,%rdi
ffffffff80226443:	e8 1f 65 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rR11:        0x");RME_DBG_H(Reg->R11);
ffffffff80226448:	48 c7 c7 ad 7c 22 80 	mov    $0xffffffff80227cad,%rdi
ffffffff8022644f:	e8 d1 65 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226454:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226458:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff8022645c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022645f:	e8 03 65 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rR12:        0x");RME_DBG_H(Reg->R12);
ffffffff80226464:	48 c7 c7 be 7c 22 80 	mov    $0xffffffff80227cbe,%rdi
ffffffff8022646b:	e8 b5 65 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226470:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226474:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80226478:	48 89 c7             	mov    %rax,%rdi
ffffffff8022647b:	e8 e7 64 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rR13:        0x");RME_DBG_H(Reg->R13);
ffffffff80226480:	48 c7 c7 cf 7c 22 80 	mov    $0xffffffff80227ccf,%rdi
ffffffff80226487:	e8 99 65 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff8022648c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226490:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80226494:	48 89 c7             	mov    %rax,%rdi
ffffffff80226497:	e8 cb 64 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rR14:        0x");RME_DBG_H(Reg->R14);
ffffffff8022649c:	48 c7 c7 e0 7c 22 80 	mov    $0xffffffff80227ce0,%rdi
ffffffff802264a3:	e8 7d 65 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802264a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802264ac:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff802264b0:	48 89 c7             	mov    %rax,%rdi
ffffffff802264b3:	e8 af 64 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rR15:        0x");RME_DBG_H(Reg->R15);
ffffffff802264b8:	48 c7 c7 f1 7c 22 80 	mov    $0xffffffff80227cf1,%rdi
ffffffff802264bf:	e8 61 65 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802264c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802264c8:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff802264cc:	48 89 c7             	mov    %rax,%rdi
ffffffff802264cf:	e8 93 64 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rINT_NUM:    0x");RME_DBG_H(Reg->INT_NUM);
ffffffff802264d4:	48 c7 c7 02 7d 22 80 	mov    $0xffffffff80227d02,%rdi
ffffffff802264db:	e8 45 65 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802264e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802264e4:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff802264e8:	48 89 c7             	mov    %rax,%rdi
ffffffff802264eb:	e8 77 64 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rERROR_CODE: 0x");RME_DBG_H(Reg->ERROR_CODE);
ffffffff802264f0:	48 c7 c7 13 7d 22 80 	mov    $0xffffffff80227d13,%rdi
ffffffff802264f7:	e8 29 65 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff802264fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226500:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80226507:	48 89 c7             	mov    %rax,%rdi
ffffffff8022650a:	e8 58 64 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rRIP:        0x");RME_DBG_H(Reg->RIP);
ffffffff8022650f:	48 c7 c7 24 7d 22 80 	mov    $0xffffffff80227d24,%rdi
ffffffff80226516:	e8 0a 65 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff8022651b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022651f:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80226526:	48 89 c7             	mov    %rax,%rdi
ffffffff80226529:	e8 39 64 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rCS:         0x");RME_DBG_H(Reg->CS);
ffffffff8022652e:	48 c7 c7 35 7d 22 80 	mov    $0xffffffff80227d35,%rdi
ffffffff80226535:	e8 eb 64 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff8022653a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022653e:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80226545:	48 89 c7             	mov    %rax,%rdi
ffffffff80226548:	e8 1a 64 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rRFLAGS:     0x");RME_DBG_H(Reg->RFLAGS);
ffffffff8022654d:	48 c7 c7 46 7d 22 80 	mov    $0xffffffff80227d46,%rdi
ffffffff80226554:	e8 cc 64 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226559:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022655d:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff80226564:	48 89 c7             	mov    %rax,%rdi
ffffffff80226567:	e8 fb 63 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rRSP:        0x");RME_DBG_H(Reg->RSP);
ffffffff8022656c:	48 c7 c7 57 7d 22 80 	mov    $0xffffffff80227d57,%rdi
ffffffff80226573:	e8 ad 64 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226578:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022657c:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax
ffffffff80226583:	48 89 c7             	mov    %rax,%rdi
ffffffff80226586:	e8 dc 63 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rSS:         0x");RME_DBG_H(Reg->SS);
ffffffff8022658b:	48 c7 c7 68 7d 22 80 	mov    $0xffffffff80227d68,%rdi
ffffffff80226592:	e8 8e 64 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
ffffffff80226597:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022659b:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff802265a2:	48 89 c7             	mov    %rax,%rdi
ffffffff802265a5:	e8 bd 63 fe ff       	call   ffffffff8020c967 <RME_Hex_Print>
    RME_DBG_S("\n\rHang");
ffffffff802265aa:	48 c7 c7 79 7d 22 80 	mov    $0xffffffff80227d79,%rdi
ffffffff802265b1:	e8 6f 64 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>

    while(1);
ffffffff802265b6:	90                   	nop
ffffffff802265b7:	eb fd                	jmp    ffffffff802265b6 <__RME_X64_Fault_Handler+0x41d>

ffffffff802265b9 <__RME_X64_Generic_Handler>:
              rme_ptr_t Int_Num - The interrupt number.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Generic_Handler(struct RME_Reg_Struct* Reg, rme_ptr_t Int_Num)
{
ffffffff802265b9:	55                   	push   %rbp
ffffffff802265ba:	48 89 e5             	mov    %rsp,%rbp
ffffffff802265bd:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802265c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802265c5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not handling interrupts */
    RME_DBG_S("\r\nGeneral int:");
ffffffff802265c9:	48 c7 c7 28 7e 22 80 	mov    $0xffffffff80227e28,%rdi
ffffffff802265d0:	e8 50 64 fe ff       	call   ffffffff8020ca25 <RME_Str_Print>
    RME_DBG_I(Int_Num);
ffffffff802265d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802265d9:	48 89 c7             	mov    %rax,%rdi
ffffffff802265dc:	e8 52 62 fe ff       	call   ffffffff8020c833 <RME_Int_Print>

    switch(Int_Num)
    {
        /* Is this a generic IPI from other processors? */

        default:break;
ffffffff802265e1:	90                   	nop
    }
    /* Remember to perform context switch after any kernel sends */
}
ffffffff802265e2:	90                   	nop
ffffffff802265e3:	c9                   	leave
ffffffff802265e4:	c3                   	ret

ffffffff802265e5 <__RME_Pgt_Set>:
Input       : rme_ptr_t Pgt - The virtual address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgt_Set(rme_ptr_t Pgt)
{
ffffffff802265e5:	55                   	push   %rbp
ffffffff802265e6:	48 89 e5             	mov    %rsp,%rbp
ffffffff802265e9:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802265ed:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff802265f1:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802265f8:	80 00 00 
ffffffff802265fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802265ff:	48 01 d0             	add    %rdx,%rax
ffffffff80226602:	48 89 c7             	mov    %rax,%rdi
ffffffff80226605:	e8 9f 52 fe ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
}
ffffffff8022660a:	90                   	nop
ffffffff8022660b:	c9                   	leave
ffffffff8022660c:	c3                   	ret

ffffffff8022660d <__RME_Pgt_Check>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Check(rme_ptr_t Base_Addr, rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order, rme_ptr_t Num_Order, rme_ptr_t Vaddr)
{
ffffffff8022660d:	55                   	push   %rbp
ffffffff8022660e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226611:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80226615:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226619:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8022661d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80226621:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff80226625:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    /* Is the table address aligned to 4kB? */
    if((Vaddr&0xFFF)!=0)
ffffffff80226629:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022662d:	25 ff 0f 00 00       	and    $0xfff,%eax
ffffffff80226632:	48 85 c0             	test   %rax,%rax
ffffffff80226635:	74 09                	je     ffffffff80226640 <__RME_Pgt_Check+0x33>
        return RME_ERR_HAL_FAIL;
ffffffff80226637:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8022663e:	eb 59                	jmp    ffffffff80226699 <__RME_Pgt_Check+0x8c>

    /* Is the size order allowed? */
    if((Size_Order!=RME_PGT_SIZE_512G)&&(Size_Order!=RME_PGT_SIZE_1G)&&
ffffffff80226640:	48 83 7d e8 27       	cmpq   $0x27,-0x18(%rbp)
ffffffff80226645:	74 1e                	je     ffffffff80226665 <__RME_Pgt_Check+0x58>
ffffffff80226647:	48 83 7d e8 1e       	cmpq   $0x1e,-0x18(%rbp)
ffffffff8022664c:	74 17                	je     ffffffff80226665 <__RME_Pgt_Check+0x58>
ffffffff8022664e:	48 83 7d e8 15       	cmpq   $0x15,-0x18(%rbp)
ffffffff80226653:	74 10                	je     ffffffff80226665 <__RME_Pgt_Check+0x58>
       (Size_Order!=RME_PGT_SIZE_2M)&&(Size_Order!=RME_PGT_SIZE_4K))
ffffffff80226655:	48 83 7d e8 0c       	cmpq   $0xc,-0x18(%rbp)
ffffffff8022665a:	74 09                	je     ffffffff80226665 <__RME_Pgt_Check+0x58>
        return RME_ERR_HAL_FAIL;
ffffffff8022665c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226663:	eb 34                	jmp    ffffffff80226699 <__RME_Pgt_Check+0x8c>

    /* Is the top-level relationship correct? */
    if(((Size_Order==RME_PGT_SIZE_512G)^(Is_Top!=0))!=0)
ffffffff80226665:	48 83 7d e8 27       	cmpq   $0x27,-0x18(%rbp)
ffffffff8022666a:	0f 94 c2             	sete   %dl
ffffffff8022666d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226672:	0f 95 c0             	setne  %al
ffffffff80226675:	31 d0                	xor    %edx,%eax
ffffffff80226677:	84 c0                	test   %al,%al
ffffffff80226679:	74 09                	je     ffffffff80226684 <__RME_Pgt_Check+0x77>
        return RME_ERR_HAL_FAIL;
ffffffff8022667b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226682:	eb 15                	jmp    ffffffff80226699 <__RME_Pgt_Check+0x8c>

    /* Is the number order allowed? */
    if(Num_Order!=RME_PGT_NUM_512)
ffffffff80226684:	48 83 7d e0 09       	cmpq   $0x9,-0x20(%rbp)
ffffffff80226689:	74 09                	je     ffffffff80226694 <__RME_Pgt_Check+0x87>
        return RME_ERR_HAL_FAIL;
ffffffff8022668b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226692:	eb 05                	jmp    ffffffff80226699 <__RME_Pgt_Check+0x8c>

    return 0;
ffffffff80226694:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226699:	c9                   	leave
ffffffff8022669a:	c3                   	ret

ffffffff8022669b <__RME_Pgt_Init>:
Input       : struct RME_Cap_Pgt* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Init(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff8022669b:	55                   	push   %rbp
ffffffff8022669c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022669f:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff802266a3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_cnt_t Count;
    rme_ptr_t* Ptr;
    
    /* Get the actual table */
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff802266a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802266ab:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802266af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Hopefully the compiler optimize this to rep stos */
    for(Count=0;Count<256;Count++)
ffffffff802266b3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802266ba:	00 
ffffffff802266bb:	eb 1f                	jmp    ffffffff802266dc <__RME_Pgt_Init+0x41>
        Ptr[Count]=0;
ffffffff802266bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266c1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802266c8:	00 
ffffffff802266c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802266cd:	48 01 d0             	add    %rdx,%rax
ffffffff802266d0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0;Count<256;Count++)
ffffffff802266d7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802266dc:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff802266e3:	00 
ffffffff802266e4:	7e d7                	jle    ffffffff802266bd <__RME_Pgt_Init+0x22>

    /* Hopefully the compiler optimize this to rep movs */
    if((Pgt_Op->Base&RME_PGT_TOP)!=0)
ffffffff802266e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802266ea:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802266ee:	83 e0 01             	and    $0x1,%eax
ffffffff802266f1:	48 85 c0             	test   %rax,%rax
ffffffff802266f4:	74 62                	je     ffffffff80226758 <__RME_Pgt_Init+0xbd>
    {
        for(;Count<512;Count++)
ffffffff802266f6:	eb 35                	jmp    ffffffff8022672d <__RME_Pgt_Init+0x92>
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff802266f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266fc:	48 8d 88 00 ff ff ff 	lea    -0x100(%rax),%rcx
ffffffff80226703:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226707:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8022670e:	00 
ffffffff8022670f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226713:	48 01 c2             	add    %rax,%rdx
ffffffff80226716:	48 8d 81 00 01 00 00 	lea    0x100(%rcx),%rax
ffffffff8022671d:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80226724:	80 
ffffffff80226725:	48 89 02             	mov    %rax,(%rdx)
        for(;Count<512;Count++)
ffffffff80226728:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8022672d:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
ffffffff80226734:	00 
ffffffff80226735:	7e c1                	jle    ffffffff802266f8 <__RME_Pgt_Init+0x5d>
ffffffff80226737:	eb 29                	jmp    ffffffff80226762 <__RME_Pgt_Init+0xc7>
    }
    else
    {
        for(;Count<512;Count++)
            Ptr[Count]=0;
ffffffff80226739:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022673d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226744:	00 
ffffffff80226745:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226749:	48 01 d0             	add    %rdx,%rax
ffffffff8022674c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        for(;Count<512;Count++)
ffffffff80226753:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80226758:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
ffffffff8022675f:	00 
ffffffff80226760:	7e d7                	jle    ffffffff80226739 <__RME_Pgt_Init+0x9e>
    }

    return 0;
ffffffff80226762:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226767:	c9                   	leave
ffffffff80226768:	c3                   	ret

ffffffff80226769 <__RME_Pgt_Del_Check>:
Input       : struct RME_Cap_Pgt Pgt_Op* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If can be deleted, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Del_Check(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff80226769:	55                   	push   %rbp
ffffffff8022676a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022676d:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80226771:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

    return 0;
ffffffff80226775:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8022677a:	c9                   	leave
ffffffff8022677b:	c3                   	ret

ffffffff8022677c <__RME_Pgt_Page_Map>:
                                architecture specific page table's settings.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Map(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Paddr, rme_ptr_t Pos, rme_ptr_t Flags)
{
ffffffff8022677c:	55                   	push   %rbp
ffffffff8022677d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226780:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80226784:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226788:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8022678c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80226790:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff80226794:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226798:	83 e0 01             	and    $0x1,%eax
ffffffff8022679b:	48 85 c0             	test   %rax,%rax
ffffffff8022679e:	75 0c                	jne    ffffffff802267ac <__RME_Pgt_Page_Map+0x30>
        return RME_ERR_HAL_FAIL;
ffffffff802267a0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802267a7:	e9 d5 00 00 00       	jmp    ffffffff80226881 <__RME_Pgt_Page_Map+0x105>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff802267ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802267b0:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802267b4:	83 e0 01             	and    $0x1,%eax
ffffffff802267b7:	48 85 c0             	test   %rax,%rax
ffffffff802267ba:	74 16                	je     ffffffff802267d2 <__RME_Pgt_Page_Map+0x56>
ffffffff802267bc:	48 81 7d d8 ff 00 00 	cmpq   $0xff,-0x28(%rbp)
ffffffff802267c3:	00 
ffffffff802267c4:	76 0c                	jbe    ffffffff802267d2 <__RME_Pgt_Page_Map+0x56>
        return RME_ERR_HAL_FAIL;
ffffffff802267c6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802267cd:	e9 af 00 00 00       	jmp    ffffffff80226881 <__RME_Pgt_Page_Map+0x105>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff802267d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802267d6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802267da:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Generate flags */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff802267de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802267e2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802267e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802267ea:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff802267ee:	75 2d                	jne    ffffffff8022681d <__RME_Pgt_Page_Map+0xa1>
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff802267f0:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff802267f7:	ff 0f 00 
ffffffff802267fa:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff802267fe:	48 89 c2             	mov    %rax,%rdx
ffffffff80226801:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226805:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff80226808:	48 8b 04 c5 20 73 22 	mov    -0x7fdd8ce0(,%rax,8),%rax
ffffffff8022680f:	80 
ffffffff80226810:	48 09 d0             	or     %rdx,%rax
ffffffff80226813:	48 83 c8 04          	or     $0x4,%rax
ffffffff80226817:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8022681b:	eb 29                	jmp    ffffffff80226846 <__RME_Pgt_Page_Map+0xca>
    else
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;
ffffffff8022681d:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226824:	ff 0f 00 
ffffffff80226827:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff8022682b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022682e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226832:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff80226835:	48 8b 04 c5 20 73 22 	mov    -0x7fdd8ce0(,%rax,8),%rax
ffffffff8022683c:	80 
ffffffff8022683d:	48 09 d0             	or     %rdx,%rax
ffffffff80226840:	0c 84                	or     $0x84,%al
ffffffff80226842:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Try to map it in */
    if(RME_COMP_SWAP(&(Table[Pos]),0,X64_Flags)==0)
ffffffff80226846:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022684a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226851:	00 
ffffffff80226852:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226856:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff8022685a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022685e:	48 89 c2             	mov    %rax,%rdx
ffffffff80226861:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80226866:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226869:	e8 ee 46 ff ff       	call   ffffffff8021af5c <_RME_X64_Comp_Swap>
ffffffff8022686e:	48 85 c0             	test   %rax,%rax
ffffffff80226871:	75 09                	jne    ffffffff8022687c <__RME_Pgt_Page_Map+0x100>
        return RME_ERR_HAL_FAIL;
ffffffff80226873:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8022687a:	eb 05                	jmp    ffffffff80226881 <__RME_Pgt_Page_Map+0x105>

    return 0;
ffffffff8022687c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226881:	c9                   	leave
ffffffff80226882:	c3                   	ret

ffffffff80226883 <__RME_Pgt_Page_Unmap>:
              rme_ptr_t Pos - The position in the page table.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Unmap(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos)
{
ffffffff80226883:	55                   	push   %rbp
ffffffff80226884:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226887:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8022688b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8022688f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226893:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226897:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8022689b:	83 e0 01             	and    $0x1,%eax
ffffffff8022689e:	48 85 c0             	test   %rax,%rax
ffffffff802268a1:	74 16                	je     ffffffff802268b9 <__RME_Pgt_Page_Unmap+0x36>
ffffffff802268a3:	48 81 7d e0 ff 00 00 	cmpq   $0xff,-0x20(%rbp)
ffffffff802268aa:	00 
ffffffff802268ab:	76 0c                	jbe    ffffffff802268b9 <__RME_Pgt_Page_Unmap+0x36>
        return RME_ERR_HAL_FAIL;
ffffffff802268ad:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802268b4:	e9 9a 00 00 00       	jmp    ffffffff80226953 <__RME_Pgt_Page_Unmap+0xd0>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff802268b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802268bd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802268c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Make sure that there is something */
    Temp=Table[Pos];
ffffffff802268c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802268c9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802268d0:	00 
ffffffff802268d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802268d5:	48 01 d0             	add    %rdx,%rax
ffffffff802268d8:	48 8b 00             	mov    (%rax),%rax
ffffffff802268db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Temp==0)
ffffffff802268df:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff802268e4:	75 09                	jne    ffffffff802268ef <__RME_Pgt_Page_Unmap+0x6c>
        return RME_ERR_HAL_FAIL;
ffffffff802268e6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802268ed:	eb 64                	jmp    ffffffff80226953 <__RME_Pgt_Page_Unmap+0xd0>

    /* Is this a page directory? We cannot unmap page directories like this */
    if((RME_PGT_SIZEORD(Pgt_Op->Order)!=RME_PGT_SIZE_4K)&&((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff802268ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802268f3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802268f7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802268fb:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff802268ff:	74 17                	je     ffffffff80226918 <__RME_Pgt_Page_Unmap+0x95>
ffffffff80226901:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226905:	25 80 00 00 00       	and    $0x80,%eax
ffffffff8022690a:	48 85 c0             	test   %rax,%rax
ffffffff8022690d:	75 09                	jne    ffffffff80226918 <__RME_Pgt_Page_Unmap+0x95>
        return RME_ERR_HAL_FAIL;
ffffffff8022690f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226916:	eb 3b                	jmp    ffffffff80226953 <__RME_Pgt_Page_Unmap+0xd0>

    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Table[Pos]),Temp,0)==0)
ffffffff80226918:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022691c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226923:	00 
ffffffff80226924:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226928:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff8022692c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226930:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80226935:	48 89 c6             	mov    %rax,%rsi
ffffffff80226938:	48 89 cf             	mov    %rcx,%rdi
ffffffff8022693b:	e8 1c 46 ff ff       	call   ffffffff8021af5c <_RME_X64_Comp_Swap>
ffffffff80226940:	48 85 c0             	test   %rax,%rax
ffffffff80226943:	75 09                	jne    ffffffff8022694e <__RME_Pgt_Page_Unmap+0xcb>
        return RME_ERR_HAL_FAIL;
ffffffff80226945:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8022694c:	eb 05                	jmp    ffffffff80226953 <__RME_Pgt_Page_Unmap+0xd0>

    return 0;
ffffffff8022694e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226953:	c9                   	leave
ffffffff80226954:	c3                   	ret

ffffffff80226955 <__RME_Pgt_Pgdir_Map>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Map(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                struct RME_Cap_Pgt* Pgt_Child, rme_ptr_t Flags)
{
ffffffff80226955:	55                   	push   %rbp
ffffffff80226956:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226959:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8022695d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80226961:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80226965:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80226969:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff8022696d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226971:	83 e0 01             	and    $0x1,%eax
ffffffff80226974:	48 85 c0             	test   %rax,%rax
ffffffff80226977:	75 0c                	jne    ffffffff80226985 <__RME_Pgt_Pgdir_Map+0x30>
        return RME_ERR_HAL_FAIL;
ffffffff80226979:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226980:	e9 b1 00 00 00       	jmp    ffffffff80226a36 <__RME_Pgt_Pgdir_Map+0xe1>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226985:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226989:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8022698d:	83 e0 01             	and    $0x1,%eax
ffffffff80226990:	48 85 c0             	test   %rax,%rax
ffffffff80226993:	74 16                	je     ffffffff802269ab <__RME_Pgt_Pgdir_Map+0x56>
ffffffff80226995:	48 81 7d d0 ff 00 00 	cmpq   $0xff,-0x30(%rbp)
ffffffff8022699c:	00 
ffffffff8022699d:	76 0c                	jbe    ffffffff802269ab <__RME_Pgt_Pgdir_Map+0x56>
        return RME_ERR_HAL_FAIL;
ffffffff8022699f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802269a6:	e9 8b 00 00 00       	jmp    ffffffff80226a36 <__RME_Pgt_Pgdir_Map+0xe1>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
ffffffff802269ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802269af:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802269b3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Child_Table=RME_CAP_GETOBJ(Pgt_Child,rme_ptr_t*);
ffffffff802269b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802269bb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802269bf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff802269c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802269c7:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802269ce:	80 00 00 
ffffffff802269d1:	48 01 c2             	add    %rax,%rdx
ffffffff802269d4:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff802269db:	ff 0f 00 
ffffffff802269de:	48 21 c2             	and    %rax,%rdx
ffffffff802269e1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802269e5:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff802269e8:	48 8b 04 c5 20 73 22 	mov    -0x7fdd8ce0(,%rax,8),%rax
ffffffff802269ef:	80 
ffffffff802269f0:	48 09 d0             	or     %rdx,%rax
ffffffff802269f3:	48 83 c8 04          	or     $0x4,%rax
ffffffff802269f7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    /* Try to map it in - may need to increase some count */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff802269fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802269ff:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226a06:	00 
ffffffff80226a07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226a0b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226a0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226a13:	48 89 c2             	mov    %rax,%rdx
ffffffff80226a16:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80226a1b:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226a1e:	e8 39 45 ff ff       	call   ffffffff8021af5c <_RME_X64_Comp_Swap>
ffffffff80226a23:	48 85 c0             	test   %rax,%rax
ffffffff80226a26:	75 09                	jne    ffffffff80226a31 <__RME_Pgt_Pgdir_Map+0xdc>
        return RME_ERR_HAL_FAIL;
ffffffff80226a28:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226a2f:	eb 05                	jmp    ffffffff80226a36 <__RME_Pgt_Pgdir_Map+0xe1>

    return 0;
ffffffff80226a31:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226a36:	c9                   	leave
ffffffff80226a37:	c3                   	ret

ffffffff80226a38 <__RME_Pgt_Pgdir_Unmap>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Unmap(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                  struct RME_Cap_Pgt* Pgt_Child)
{
ffffffff80226a38:	55                   	push   %rbp
ffffffff80226a39:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226a3c:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80226a40:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80226a44:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80226a48:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226a4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226a50:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226a54:	83 e0 01             	and    $0x1,%eax
ffffffff80226a57:	48 85 c0             	test   %rax,%rax
ffffffff80226a5a:	74 16                	je     ffffffff80226a72 <__RME_Pgt_Pgdir_Unmap+0x3a>
ffffffff80226a5c:	48 81 7d d0 ff 00 00 	cmpq   $0xff,-0x30(%rbp)
ffffffff80226a63:	00 
ffffffff80226a64:	76 0c                	jbe    ffffffff80226a72 <__RME_Pgt_Pgdir_Unmap+0x3a>
        return RME_ERR_HAL_FAIL;
ffffffff80226a66:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226a6d:	e9 c4 00 00 00       	jmp    ffffffff80226b36 <__RME_Pgt_Pgdir_Unmap+0xfe>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
ffffffff80226a72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226a76:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226a7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Make sure that there is something */
    Temp=Parent_Table[Pos];
ffffffff80226a7e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226a82:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226a89:	00 
ffffffff80226a8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226a8e:	48 01 d0             	add    %rdx,%rax
ffffffff80226a91:	48 8b 00             	mov    (%rax),%rax
ffffffff80226a94:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Temp==0)
ffffffff80226a98:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226a9d:	75 0c                	jne    ffffffff80226aab <__RME_Pgt_Pgdir_Unmap+0x73>
        return RME_ERR_HAL_FAIL;
ffffffff80226a9f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226aa6:	e9 8b 00 00 00       	jmp    ffffffff80226b36 <__RME_Pgt_Pgdir_Unmap+0xfe>

    /* Is this a page? We cannot unmap pages like this */
    if((RME_PGT_SIZEORD(Pgt_Parent->Order)==RME_PGT_SIZE_4K)||((Temp&RME_X64_MMU_PDE_SUP)!=0))
ffffffff80226aab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226aaf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226ab3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226ab7:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226abb:	74 0e                	je     ffffffff80226acb <__RME_Pgt_Pgdir_Unmap+0x93>
ffffffff80226abd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226ac1:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226ac6:	48 85 c0             	test   %rax,%rax
ffffffff80226ac9:	74 09                	je     ffffffff80226ad4 <__RME_Pgt_Pgdir_Unmap+0x9c>
        return RME_ERR_HAL_FAIL;
ffffffff80226acb:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226ad2:	eb 62                	jmp    ffffffff80226b36 <__RME_Pgt_Pgdir_Unmap+0xfe>

    /* Is this child table mapped here? - check that in the future */

    Child_Table=(rme_ptr_t*)Temp;
ffffffff80226ad4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226ad8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    rme_ptr_t* Expected_Child_Table = RME_CAP_GETOBJ(Pgt_Child, rme_ptr_t*);
ffffffff80226adc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226ae0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226ae4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (Child_Table != Expected_Child_Table)
ffffffff80226ae8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226aec:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80226af0:	74 09                	je     ffffffff80226afb <__RME_Pgt_Pgdir_Unmap+0xc3>
        return RME_ERR_HAL_FAIL;
ffffffff80226af2:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226af9:	eb 3b                	jmp    ffffffff80226b36 <__RME_Pgt_Pgdir_Unmap+0xfe>
    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),Temp,0)==0)
ffffffff80226afb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226aff:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226b06:	00 
ffffffff80226b07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226b0b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226b0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226b13:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80226b18:	48 89 c6             	mov    %rax,%rsi
ffffffff80226b1b:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226b1e:	e8 39 44 ff ff       	call   ffffffff8021af5c <_RME_X64_Comp_Swap>
ffffffff80226b23:	48 85 c0             	test   %rax,%rax
ffffffff80226b26:	75 09                	jne    ffffffff80226b31 <__RME_Pgt_Pgdir_Unmap+0xf9>
        return RME_ERR_HAL_FAIL;
ffffffff80226b28:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226b2f:	eb 05                	jmp    ffffffff80226b36 <__RME_Pgt_Pgdir_Unmap+0xfe>

    return 0;
ffffffff80226b31:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226b36:	c9                   	leave
ffffffff80226b37:	c3                   	ret

ffffffff80226b38 <__RME_Pgt_Lookup>:
Output      : rme_ptr_t* Paddr - The physical address of the page.
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Lookup(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos, rme_ptr_t* Paddr, rme_ptr_t* Flags)
{
ffffffff80226b38:	55                   	push   %rbp
ffffffff80226b39:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226b3c:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80226b40:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226b44:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80226b48:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80226b4c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Check if the position is within the range of this page table */
    if((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0)
ffffffff80226b50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226b54:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226b58:	89 c2                	mov    %eax,%edx
ffffffff80226b5a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226b5e:	89 d1                	mov    %edx,%ecx
ffffffff80226b60:	48 d3 e8             	shr    %cl,%rax
ffffffff80226b63:	48 85 c0             	test   %rax,%rax
ffffffff80226b66:	74 0c                	je     ffffffff80226b74 <__RME_Pgt_Lookup+0x3c>
        return RME_ERR_HAL_FAIL;
ffffffff80226b68:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226b6f:	e9 d8 00 00 00       	jmp    ffffffff80226c4c <__RME_Pgt_Lookup+0x114>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226b74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226b78:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226b7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Get the position requested - atomic read */
    Temp=Table[Pos];
ffffffff80226b80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226b84:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226b8b:	00 
ffffffff80226b8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226b90:	48 01 d0             	add    %rdx,%rax
ffffffff80226b93:	48 8b 00             	mov    (%rax),%rax
ffffffff80226b96:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Start lookup - is this a terminal page, or? */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff80226b9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226b9e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226ba2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226ba6:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226baa:	75 18                	jne    ffffffff80226bc4 <__RME_Pgt_Lookup+0x8c>
    {
        if((Temp&RME_X64_MMU_P)==0)
ffffffff80226bac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226bb0:	83 e0 01             	and    $0x1,%eax
ffffffff80226bb3:	48 85 c0             	test   %rax,%rax
ffffffff80226bb6:	75 2f                	jne    ffffffff80226be7 <__RME_Pgt_Lookup+0xaf>
            return RME_ERR_HAL_FAIL;
ffffffff80226bb8:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226bbf:	e9 88 00 00 00       	jmp    ffffffff80226c4c <__RME_Pgt_Lookup+0x114>
    }
    else
    {
        if(((Temp&RME_X64_MMU_P)==0)||((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff80226bc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226bc8:	83 e0 01             	and    $0x1,%eax
ffffffff80226bcb:	48 85 c0             	test   %rax,%rax
ffffffff80226bce:	74 0e                	je     ffffffff80226bde <__RME_Pgt_Lookup+0xa6>
ffffffff80226bd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226bd4:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226bd9:	48 85 c0             	test   %rax,%rax
ffffffff80226bdc:	75 09                	jne    ffffffff80226be7 <__RME_Pgt_Lookup+0xaf>
            return RME_ERR_HAL_FAIL;
ffffffff80226bde:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226be5:	eb 65                	jmp    ffffffff80226c4c <__RME_Pgt_Lookup+0x114>
    }

    /* This is a page. Return the physical address and flags */
    if(Paddr!=0)
ffffffff80226be7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80226bec:	74 18                	je     ffffffff80226c06 <__RME_Pgt_Lookup+0xce>
        *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff80226bee:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226bf5:	ff 0f 00 
ffffffff80226bf8:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80226bfc:	48 89 c2             	mov    %rax,%rdx
ffffffff80226bff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226c03:	48 89 10             	mov    %rdx,(%rax)

    if(Flags!=0)
ffffffff80226c06:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80226c0b:	74 3a                	je     ffffffff80226c47 <__RME_Pgt_Lookup+0x10f>
        *Flags=RME_X64_PGFLG_NAT2RME(Temp);
ffffffff80226c0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226c11:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff80226c15:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226c1c:	00 
ffffffff80226c1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226c21:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80226c25:	83 e0 06             	and    $0x6,%eax
ffffffff80226c28:	48 09 c2             	or     %rax,%rdx
ffffffff80226c2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226c2f:	48 d1 e8             	shr    %rax
ffffffff80226c32:	83 e0 01             	and    $0x1,%eax
ffffffff80226c35:	48 09 d0             	or     %rdx,%rax
ffffffff80226c38:	48 8b 14 c5 20 74 22 	mov    -0x7fdd8be0(,%rax,8),%rdx
ffffffff80226c3f:	80 
ffffffff80226c40:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226c44:	48 89 10             	mov    %rdx,(%rax)

    return 0;
ffffffff80226c47:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226c4c:	c9                   	leave
ffffffff80226c4d:	c3                   	ret

ffffffff80226c4e <__RME_Pgt_Walk>:
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Walk(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Vaddr, rme_ptr_t* Pgt,
                           rme_ptr_t* Map_Vaddr, rme_ptr_t* Paddr, rme_ptr_t* Size_Order, rme_ptr_t* Num_Order, rme_ptr_t* Flags)
{
ffffffff80226c4e:	55                   	push   %rbp
ffffffff80226c4f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226c52:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80226c56:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80226c5a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80226c5e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80226c62:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80226c66:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80226c6a:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Flags_Accum;
    /* No execute bit - this bit is ORed */
    rme_ptr_t No_Execute;

    /* Check if this is the top-level page table */
    if(((Pgt_Op->Base)&RME_PGT_TOP)==0)
ffffffff80226c6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226c72:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226c76:	83 e0 01             	and    $0x1,%eax
ffffffff80226c79:	48 85 c0             	test   %rax,%rax
ffffffff80226c7c:	75 0c                	jne    ffffffff80226c8a <__RME_Pgt_Walk+0x3c>
        return RME_ERR_HAL_FAIL;
ffffffff80226c7e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226c85:	e9 c8 01 00 00       	jmp    ffffffff80226e52 <__RME_Pgt_Walk+0x204>

    /* Are we attempting a kernel or non-canonical lookup? If yes, stop immediately */
    if(Vaddr>=0x7FFFFFFFFFFFULL)
ffffffff80226c8a:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffe,%rax
ffffffff80226c91:	7f 00 00 
ffffffff80226c94:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff80226c98:	73 0c                	jae    ffffffff80226ca6 <__RME_Pgt_Walk+0x58>
        return RME_ERR_HAL_FAIL;
ffffffff80226c9a:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226ca1:	e9 ac 01 00 00       	jmp    ffffffff80226e52 <__RME_Pgt_Walk+0x204>

    /* Get the table and start lookup */
    Table=RME_CAP_GETOBJ(Pgt_Op, rme_ptr_t*);
ffffffff80226ca6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226caa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226cae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Do lookup recursively */
    Size_Cnt=RME_PGT_SIZE_512G;
ffffffff80226cb2:	48 c7 45 f0 27 00 00 	movq   $0x27,-0x10(%rbp)
ffffffff80226cb9:	00 
    Flags_Accum=0xFFF;
ffffffff80226cba:	48 c7 45 e8 ff 0f 00 	movq   $0xfff,-0x18(%rbp)
ffffffff80226cc1:	00 
    No_Execute=0;
ffffffff80226cc2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80226cc9:	00 
    while(1)
    {
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff80226cca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226cce:	89 c2                	mov    %eax,%edx
ffffffff80226cd0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226cd4:	89 d1                	mov    %edx,%ecx
ffffffff80226cd6:	48 d3 e8             	shr    %cl,%rax
ffffffff80226cd9:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80226cde:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        /* Atomic read */
        Temp=Table[Pos];
ffffffff80226ce2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226ce6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226ced:	00 
ffffffff80226cee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226cf2:	48 01 d0             	add    %rdx,%rax
ffffffff80226cf5:	48 8b 00             	mov    (%rax),%rax
ffffffff80226cf8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Temp&RME_X64_MMU_P)==0)
ffffffff80226cfc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226d00:	83 e0 01             	and    $0x1,%eax
ffffffff80226d03:	48 85 c0             	test   %rax,%rax
ffffffff80226d06:	75 0c                	jne    ffffffff80226d14 <__RME_Pgt_Walk+0xc6>
            return RME_ERR_HAL_FAIL;
ffffffff80226d08:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226d0f:	e9 3e 01 00 00       	jmp    ffffffff80226e52 <__RME_Pgt_Walk+0x204>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff80226d14:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226d18:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226d1d:	48 85 c0             	test   %rax,%rax
ffffffff80226d20:	75 0b                	jne    ffffffff80226d2d <__RME_Pgt_Walk+0xdf>
ffffffff80226d22:	48 83 7d f0 0c       	cmpq   $0xc,-0x10(%rbp)
ffffffff80226d27:	0f 85 dc 00 00 00    	jne    ffffffff80226e09 <__RME_Pgt_Walk+0x1bb>
        {
            /* This is a page - we found it */
            if(Pgt!=0)
ffffffff80226d2d:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff80226d32:	74 0b                	je     ffffffff80226d3f <__RME_Pgt_Walk+0xf1>
                *Pgt=(rme_ptr_t)Table;
ffffffff80226d34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80226d38:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80226d3c:	48 89 10             	mov    %rdx,(%rax)
            if(Map_Vaddr!=0)
ffffffff80226d3f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80226d44:	74 21                	je     ffffffff80226d67 <__RME_Pgt_Walk+0x119>
                *Map_Vaddr=RME_ROUND_DOWN(Vaddr,Size_Cnt);
ffffffff80226d46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226d4a:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80226d51:	89 c1                	mov    %eax,%ecx
ffffffff80226d53:	48 d3 e2             	shl    %cl,%rdx
ffffffff80226d56:	48 89 d0             	mov    %rdx,%rax
ffffffff80226d59:	48 23 45 c0          	and    -0x40(%rbp),%rax
ffffffff80226d5d:	48 89 c2             	mov    %rax,%rdx
ffffffff80226d60:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80226d64:	48 89 10             	mov    %rdx,(%rax)
            if(Paddr!=0)
ffffffff80226d67:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
ffffffff80226d6c:	74 18                	je     ffffffff80226d86 <__RME_Pgt_Walk+0x138>
                *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff80226d6e:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226d75:	ff 0f 00 
ffffffff80226d78:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80226d7c:	48 89 c2             	mov    %rax,%rdx
ffffffff80226d7f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80226d83:	48 89 10             	mov    %rdx,(%rax)
            if(Size_Order!=0)
ffffffff80226d86:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
ffffffff80226d8b:	74 0b                	je     ffffffff80226d98 <__RME_Pgt_Walk+0x14a>
                *Size_Order=Size_Cnt;
ffffffff80226d8d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80226d91:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80226d95:	48 89 10             	mov    %rdx,(%rax)
            if(Num_Order!=0)
ffffffff80226d98:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff80226d9d:	74 0b                	je     ffffffff80226daa <__RME_Pgt_Walk+0x15c>
                *Num_Order=RME_PGT_NUM_512;
ffffffff80226d9f:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80226da3:	48 c7 00 09 00 00 00 	movq   $0x9,(%rax)
            if(Flags!=0)
ffffffff80226daa:	48 83 7d 18 00       	cmpq   $0x0,0x18(%rbp)
ffffffff80226daf:	0f 84 97 00 00 00    	je     ffffffff80226e4c <__RME_Pgt_Walk+0x1fe>
                *Flags=RME_X64_PGFLG_NAT2RME(No_Execute|(Temp&Flags_Accum));
ffffffff80226db5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226db9:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80226dbd:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff80226dc1:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff80226dc5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226dcc:	00 
ffffffff80226dcd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226dd1:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80226dd5:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff80226dd9:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80226ddd:	83 e0 06             	and    $0x6,%eax
ffffffff80226de0:	48 09 c2             	or     %rax,%rdx
ffffffff80226de3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226de7:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80226deb:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff80226def:	48 d1 e8             	shr    %rax
ffffffff80226df2:	83 e0 01             	and    $0x1,%eax
ffffffff80226df5:	48 09 d0             	or     %rdx,%rax
ffffffff80226df8:	48 8b 14 c5 20 74 22 	mov    -0x7fdd8be0(,%rax,8),%rdx
ffffffff80226dff:	80 
ffffffff80226e00:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80226e04:	48 89 10             	mov    %rdx,(%rax)

            break;
ffffffff80226e07:	eb 43                	jmp    ffffffff80226e4c <__RME_Pgt_Walk+0x1fe>
        }
        else
        {
            /* This is a directory, we goto that directory to continue walking */
            Flags_Accum&=Temp;
ffffffff80226e09:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226e0d:	48 21 45 e8          	and    %rax,-0x18(%rbp)
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff80226e11:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
ffffffff80226e18:	00 00 80 
ffffffff80226e1b:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80226e1f:	48 09 45 e0          	or     %rax,-0x20(%rbp)
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff80226e23:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226e2a:	ff 0f 00 
ffffffff80226e2d:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80226e31:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80226e38:	80 ff ff 
ffffffff80226e3b:	48 01 d0             	add    %rdx,%rax
ffffffff80226e3e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        }

        /* The size order always decreases by 512 */
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff80226e42:	48 83 6d f0 09       	subq   $0x9,-0x10(%rbp)
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff80226e47:	e9 7e fe ff ff       	jmp    ffffffff80226cca <__RME_Pgt_Walk+0x7c>
            break;
ffffffff80226e4c:	90                   	nop
    }

    return 0;
ffffffff80226e4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226e52:	c9                   	leave
ffffffff80226e53:	c3                   	ret

ffffffff80226e54 <__RME_Svc_Param_Get>:

/*Function:__RME_Svc_Param_Get*/

void __RME_Svc_Param_Get(struct RME_Reg_Struct* Reg,rme_ptr_t* Svc,rme_ptr_t* Cid,rme_ptr_t* Param)
{
ffffffff80226e54:	55                   	push   %rbp
ffffffff80226e55:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226e58:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80226e5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226e60:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80226e64:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80226e68:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    *Svc=(Reg->RDI)>>32;
ffffffff80226e6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226e70:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226e74:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226e78:	48 89 c2             	mov    %rax,%rdx
ffffffff80226e7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226e7f:	48 89 10             	mov    %rdx,(%rax)
    *Cid=(Reg->RDI)&0xFFFFFFFF;
ffffffff80226e82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226e86:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226e8a:	89 c2                	mov    %eax,%edx
ffffffff80226e8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226e90:	48 89 10             	mov    %rdx,(%rax)
    Param[0]=Reg->RSI;
ffffffff80226e93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226e97:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff80226e9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226e9f:	48 89 10             	mov    %rdx,(%rax)
    Param[1]=Reg->RDX;
ffffffff80226ea2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226ea6:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80226eaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226eae:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226eb2:	48 89 02             	mov    %rax,(%rdx)
    Param[2]=Reg->R8;
ffffffff80226eb5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226eb9:	48 8d 50 10          	lea    0x10(%rax),%rdx
ffffffff80226ebd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226ec1:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80226ec5:	48 89 02             	mov    %rax,(%rdx)
}
ffffffff80226ec8:	90                   	nop
ffffffff80226ec9:	c9                   	leave
ffffffff80226eca:	c3                   	ret

ffffffff80226ecb <__RME_Svc_Retval_Set>:
/*End Function:__RME_Svc_Param_Get*/

/*Function:__RME_Svc_Retval_Set*/

void __RME_Svc_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff80226ecb:	55                   	push   %rbp
ffffffff80226ecc:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226ecf:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226ed3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226ed7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff80226edb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80226edf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226ee3:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff80226ee6:	90                   	nop
ffffffff80226ee7:	c9                   	leave
ffffffff80226ee8:	c3                   	ret

ffffffff80226ee9 <__RME_Inv_Retval_Set>:

/*End Function:__RME_Svc_Retval_Set*/

void __RME_Inv_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff80226ee9:	55                   	push   %rbp
ffffffff80226eea:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226eed:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226ef1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226ef5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff80226ef9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80226efd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226f01:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff80226f05:	90                   	nop
ffffffff80226f06:	c9                   	leave
ffffffff80226f07:	c3                   	ret

ffffffff80226f08 <__RME_List_Crt>:

void __RME_List_Crt(volatile struct RME_List* Head)
{
ffffffff80226f08:	55                   	push   %rbp
ffffffff80226f09:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226f0c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80226f10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    Head->Next=Head;
ffffffff80226f14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226f18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80226f1c:	48 89 10             	mov    %rdx,(%rax)
    Head->Prev=Head;
ffffffff80226f1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226f23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80226f27:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff80226f2b:	90                   	nop
ffffffff80226f2c:	c9                   	leave
ffffffff80226f2d:	c3                   	ret

ffffffff80226f2e <__RME_List_Ins>:

void __RME_List_Ins(volatile struct RME_List* New,volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
ffffffff80226f2e:	55                   	push   %rbp
ffffffff80226f2f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226f32:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80226f36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226f3a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80226f3e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    New->Prev=Prev;
ffffffff80226f42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226f46:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80226f4a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=New;
ffffffff80226f4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226f52:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80226f56:	48 89 10             	mov    %rdx,(%rax)
    New->Next=Next;
ffffffff80226f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226f5d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80226f61:	48 89 10             	mov    %rdx,(%rax)
    Next->Prev=New;
ffffffff80226f64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226f68:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80226f6c:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff80226f70:	90                   	nop
ffffffff80226f71:	c9                   	leave
ffffffff80226f72:	c3                   	ret

ffffffff80226f73 <__RME_List_Del>:

void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
ffffffff80226f73:	55                   	push   %rbp
ffffffff80226f74:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226f77:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226f7b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226f7f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Prev->Next = Next;
ffffffff80226f83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226f87:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80226f8b:	48 89 10             	mov    %rdx,(%rax)
    Next->Prev = Prev;
ffffffff80226f8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226f92:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80226f96:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff80226f9a:	90                   	nop
ffffffff80226f9b:	c9                   	leave
ffffffff80226f9c:	c3                   	ret
