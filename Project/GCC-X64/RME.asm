
./Object/RME：     文件格式 elf64-x86-64


Disassembly of section .text:

ffffffff80100000 <__RME_X64_Mboot_Header>:
ffffffff80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
ffffffff80100006:	01 00                	add    %eax,(%rax)
ffffffff80100008:	fe 4f 51             	decb   0x51(%rdi)
ffffffff8010000b:	e4 00                	in     $0x0,%al
ffffffff8010000d:	00 10                	add    %dl,(%rax)
ffffffff8010000f:	00 00                	add    %al,(%rax)
ffffffff80100011:	00 10                	add    %dl,(%rax)
ffffffff80100013:	00 00                	add    %al,(%rax)
ffffffff80100015:	e0 21                	loopne ffffffff80100038 <__RME_X64_Mboot_Header+0x38>
ffffffff80100017:	00 30                	add    %dh,(%rax)
ffffffff80100019:	77 22                	ja     ffffffff8010003d <__RME_X64_Mboot_Header+0x3d>
ffffffff8010001b:	00 00                	add    %al,(%rax)
ffffffff8010001d:	80 10 00             	adcb   $0x0,(%rax)
ffffffff80100020:	90                   	nop
ffffffff80100021:	e9 da 0f 00 00       	jmp    ffffffff80101000 <__RME_X64_Mboot_Header+0x1000>
ffffffff80100026:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010002d:	00 00 00 00 
ffffffff80100031:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100038:	00 00 00 00 
ffffffff8010003c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100043:	00 00 00 00 
ffffffff80100047:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010004e:	00 00 00 00 
ffffffff80100052:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100059:	00 00 00 00 
ffffffff8010005d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100064:	00 00 00 00 
ffffffff80100068:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010006f:	00 00 00 00 
ffffffff80100073:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010007a:	00 00 00 00 
ffffffff8010007e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100085:	00 00 00 00 
ffffffff80100089:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100090:	00 00 00 00 
ffffffff80100094:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010009b:	00 00 00 00 
ffffffff8010009f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000a6:	00 00 00 00 
ffffffff801000aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000b1:	00 00 00 00 
ffffffff801000b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000bc:	00 00 00 00 
ffffffff801000c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000c7:	00 00 00 00 
ffffffff801000cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000d2:	00 00 00 00 
ffffffff801000d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000dd:	00 00 00 00 
ffffffff801000e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000e8:	00 00 00 00 
ffffffff801000ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000f3:	00 00 00 00 
ffffffff801000f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000fe:	00 00 00 00 
ffffffff80100102:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100109:	00 00 00 00 
ffffffff8010010d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100114:	00 00 00 00 
ffffffff80100118:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010011f:	00 00 00 00 
ffffffff80100123:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010012a:	00 00 00 00 
ffffffff8010012e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100135:	00 00 00 00 
ffffffff80100139:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100140:	00 00 00 00 
ffffffff80100144:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010014b:	00 00 00 00 
ffffffff8010014f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100156:	00 00 00 00 
ffffffff8010015a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100161:	00 00 00 00 
ffffffff80100165:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010016c:	00 00 00 00 
ffffffff80100170:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100177:	00 00 00 00 
ffffffff8010017b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100182:	00 00 00 00 
ffffffff80100186:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010018d:	00 00 00 00 
ffffffff80100191:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100198:	00 00 00 00 
ffffffff8010019c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001a3:	00 00 00 00 
ffffffff801001a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ae:	00 00 00 00 
ffffffff801001b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001b9:	00 00 00 00 
ffffffff801001bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001c4:	00 00 00 00 
ffffffff801001c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001cf:	00 00 00 00 
ffffffff801001d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001da:	00 00 00 00 
ffffffff801001de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001e5:	00 00 00 00 
ffffffff801001e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001f0:	00 00 00 00 
ffffffff801001f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001fb:	00 00 00 00 
ffffffff801001ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100206:	00 00 00 00 
ffffffff8010020a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100211:	00 00 00 00 
ffffffff80100215:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010021c:	00 00 00 00 
ffffffff80100220:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100227:	00 00 00 00 
ffffffff8010022b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100232:	00 00 00 00 
ffffffff80100236:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010023d:	00 00 00 00 
ffffffff80100241:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100248:	00 00 00 00 
ffffffff8010024c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100253:	00 00 00 00 
ffffffff80100257:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010025e:	00 00 00 00 
ffffffff80100262:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100269:	00 00 00 00 
ffffffff8010026d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100274:	00 00 00 00 
ffffffff80100278:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010027f:	00 00 00 00 
ffffffff80100283:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010028a:	00 00 00 00 
ffffffff8010028e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100295:	00 00 00 00 
ffffffff80100299:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002a0:	00 00 00 00 
ffffffff801002a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ab:	00 00 00 00 
ffffffff801002af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002b6:	00 00 00 00 
ffffffff801002ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002c1:	00 00 00 00 
ffffffff801002c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002cc:	00 00 00 00 
ffffffff801002d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002d7:	00 00 00 00 
ffffffff801002db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002e2:	00 00 00 00 
ffffffff801002e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ed:	00 00 00 00 
ffffffff801002f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002f8:	00 00 00 00 
ffffffff801002fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100303:	00 00 00 00 
ffffffff80100307:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010030e:	00 00 00 00 
ffffffff80100312:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100319:	00 00 00 00 
ffffffff8010031d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100324:	00 00 00 00 
ffffffff80100328:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010032f:	00 00 00 00 
ffffffff80100333:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010033a:	00 00 00 00 
ffffffff8010033e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100345:	00 00 00 00 
ffffffff80100349:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100350:	00 00 00 00 
ffffffff80100354:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010035b:	00 00 00 00 
ffffffff8010035f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100366:	00 00 00 00 
ffffffff8010036a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100371:	00 00 00 00 
ffffffff80100375:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010037c:	00 00 00 00 
ffffffff80100380:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100387:	00 00 00 00 
ffffffff8010038b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100392:	00 00 00 00 
ffffffff80100396:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010039d:	00 00 00 00 
ffffffff801003a1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003a8:	00 00 00 00 
ffffffff801003ac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003b3:	00 00 00 00 
ffffffff801003b7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003be:	00 00 00 00 
ffffffff801003c2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003c9:	00 00 00 00 
ffffffff801003cd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003d4:	00 00 00 00 
ffffffff801003d8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003df:	00 00 00 00 
ffffffff801003e3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003ea:	00 00 00 00 
ffffffff801003ee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003f5:	00 00 00 00 
ffffffff801003f9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100400:	00 00 00 00 
ffffffff80100404:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010040b:	00 00 00 00 
ffffffff8010040f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100416:	00 00 00 00 
ffffffff8010041a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100421:	00 00 00 00 
ffffffff80100425:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010042c:	00 00 00 00 
ffffffff80100430:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100437:	00 00 00 00 
ffffffff8010043b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100442:	00 00 00 00 
ffffffff80100446:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010044d:	00 00 00 00 
ffffffff80100451:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100458:	00 00 00 00 
ffffffff8010045c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100463:	00 00 00 00 
ffffffff80100467:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010046e:	00 00 00 00 
ffffffff80100472:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100479:	00 00 00 00 
ffffffff8010047d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100484:	00 00 00 00 
ffffffff80100488:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010048f:	00 00 00 00 
ffffffff80100493:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010049a:	00 00 00 00 
ffffffff8010049e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004a5:	00 00 00 00 
ffffffff801004a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004b0:	00 00 00 00 
ffffffff801004b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004bb:	00 00 00 00 
ffffffff801004bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004c6:	00 00 00 00 
ffffffff801004ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004d1:	00 00 00 00 
ffffffff801004d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004dc:	00 00 00 00 
ffffffff801004e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004e7:	00 00 00 00 
ffffffff801004eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004f2:	00 00 00 00 
ffffffff801004f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004fd:	00 00 00 00 
ffffffff80100501:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100508:	00 00 00 00 
ffffffff8010050c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100513:	00 00 00 00 
ffffffff80100517:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010051e:	00 00 00 00 
ffffffff80100522:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100529:	00 00 00 00 
ffffffff8010052d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100534:	00 00 00 00 
ffffffff80100538:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010053f:	00 00 00 00 
ffffffff80100543:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010054a:	00 00 00 00 
ffffffff8010054e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100555:	00 00 00 00 
ffffffff80100559:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100560:	00 00 00 00 
ffffffff80100564:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010056b:	00 00 00 00 
ffffffff8010056f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100576:	00 00 00 00 
ffffffff8010057a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100581:	00 00 00 00 
ffffffff80100585:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010058c:	00 00 00 00 
ffffffff80100590:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100597:	00 00 00 00 
ffffffff8010059b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005a2:	00 00 00 00 
ffffffff801005a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ad:	00 00 00 00 
ffffffff801005b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005b8:	00 00 00 00 
ffffffff801005bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005c3:	00 00 00 00 
ffffffff801005c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ce:	00 00 00 00 
ffffffff801005d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005d9:	00 00 00 00 
ffffffff801005dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005e4:	00 00 00 00 
ffffffff801005e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ef:	00 00 00 00 
ffffffff801005f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005fa:	00 00 00 00 
ffffffff801005fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100605:	00 00 00 00 
ffffffff80100609:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100610:	00 00 00 00 
ffffffff80100614:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010061b:	00 00 00 00 
ffffffff8010061f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100626:	00 00 00 00 
ffffffff8010062a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100631:	00 00 00 00 
ffffffff80100635:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010063c:	00 00 00 00 
ffffffff80100640:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100647:	00 00 00 00 
ffffffff8010064b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100652:	00 00 00 00 
ffffffff80100656:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010065d:	00 00 00 00 
ffffffff80100661:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100668:	00 00 00 00 
ffffffff8010066c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100673:	00 00 00 00 
ffffffff80100677:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010067e:	00 00 00 00 
ffffffff80100682:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100689:	00 00 00 00 
ffffffff8010068d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100694:	00 00 00 00 
ffffffff80100698:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010069f:	00 00 00 00 
ffffffff801006a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006aa:	00 00 00 00 
ffffffff801006ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006b5:	00 00 00 00 
ffffffff801006b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006c0:	00 00 00 00 
ffffffff801006c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006cb:	00 00 00 00 
ffffffff801006cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006d6:	00 00 00 00 
ffffffff801006da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006e1:	00 00 00 00 
ffffffff801006e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006ec:	00 00 00 00 
ffffffff801006f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006f7:	00 00 00 00 
ffffffff801006fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100702:	00 00 00 00 
ffffffff80100706:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010070d:	00 00 00 00 
ffffffff80100711:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100718:	00 00 00 00 
ffffffff8010071c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100723:	00 00 00 00 
ffffffff80100727:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010072e:	00 00 00 00 
ffffffff80100732:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100739:	00 00 00 00 
ffffffff8010073d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100744:	00 00 00 00 
ffffffff80100748:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010074f:	00 00 00 00 
ffffffff80100753:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010075a:	00 00 00 00 
ffffffff8010075e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100765:	00 00 00 00 
ffffffff80100769:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100770:	00 00 00 00 
ffffffff80100774:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010077b:	00 00 00 00 
ffffffff8010077f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100786:	00 00 00 00 
ffffffff8010078a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100791:	00 00 00 00 
ffffffff80100795:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010079c:	00 00 00 00 
ffffffff801007a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007a7:	00 00 00 00 
ffffffff801007ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007b2:	00 00 00 00 
ffffffff801007b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007bd:	00 00 00 00 
ffffffff801007c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007c8:	00 00 00 00 
ffffffff801007cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007d3:	00 00 00 00 
ffffffff801007d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007de:	00 00 00 00 
ffffffff801007e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007e9:	00 00 00 00 
ffffffff801007ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007f4:	00 00 00 00 
ffffffff801007f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007ff:	00 00 00 00 
ffffffff80100803:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010080a:	00 00 00 00 
ffffffff8010080e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100815:	00 00 00 00 
ffffffff80100819:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100820:	00 00 00 00 
ffffffff80100824:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010082b:	00 00 00 00 
ffffffff8010082f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100836:	00 00 00 00 
ffffffff8010083a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100841:	00 00 00 00 
ffffffff80100845:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010084c:	00 00 00 00 
ffffffff80100850:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100857:	00 00 00 00 
ffffffff8010085b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100862:	00 00 00 00 
ffffffff80100866:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010086d:	00 00 00 00 
ffffffff80100871:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100878:	00 00 00 00 
ffffffff8010087c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100883:	00 00 00 00 
ffffffff80100887:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010088e:	00 00 00 00 
ffffffff80100892:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100899:	00 00 00 00 
ffffffff8010089d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008a4:	00 00 00 00 
ffffffff801008a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008af:	00 00 00 00 
ffffffff801008b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008ba:	00 00 00 00 
ffffffff801008be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008c5:	00 00 00 00 
ffffffff801008c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008d0:	00 00 00 00 
ffffffff801008d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008db:	00 00 00 00 
ffffffff801008df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008e6:	00 00 00 00 
ffffffff801008ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008f1:	00 00 00 00 
ffffffff801008f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008fc:	00 00 00 00 
ffffffff80100900:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100907:	00 00 00 00 
ffffffff8010090b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100912:	00 00 00 00 
ffffffff80100916:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010091d:	00 00 00 00 
ffffffff80100921:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100928:	00 00 00 00 
ffffffff8010092c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100933:	00 00 00 00 
ffffffff80100937:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010093e:	00 00 00 00 
ffffffff80100942:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100949:	00 00 00 00 
ffffffff8010094d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100954:	00 00 00 00 
ffffffff80100958:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010095f:	00 00 00 00 
ffffffff80100963:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010096a:	00 00 00 00 
ffffffff8010096e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100975:	00 00 00 00 
ffffffff80100979:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100980:	00 00 00 00 
ffffffff80100984:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010098b:	00 00 00 00 
ffffffff8010098f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100996:	00 00 00 00 
ffffffff8010099a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009a1:	00 00 00 00 
ffffffff801009a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ac:	00 00 00 00 
ffffffff801009b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009b7:	00 00 00 00 
ffffffff801009bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009c2:	00 00 00 00 
ffffffff801009c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009cd:	00 00 00 00 
ffffffff801009d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009d8:	00 00 00 00 
ffffffff801009dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009e3:	00 00 00 00 
ffffffff801009e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ee:	00 00 00 00 
ffffffff801009f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009f9:	00 00 00 00 
ffffffff801009fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a04:	00 00 00 00 
ffffffff80100a08:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a0f:	00 00 00 00 
ffffffff80100a13:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a1a:	00 00 00 00 
ffffffff80100a1e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a25:	00 00 00 00 
ffffffff80100a29:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a30:	00 00 00 00 
ffffffff80100a34:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a3b:	00 00 00 00 
ffffffff80100a3f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a46:	00 00 00 00 
ffffffff80100a4a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a51:	00 00 00 00 
ffffffff80100a55:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a5c:	00 00 00 00 
ffffffff80100a60:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a67:	00 00 00 00 
ffffffff80100a6b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a72:	00 00 00 00 
ffffffff80100a76:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a7d:	00 00 00 00 
ffffffff80100a81:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a88:	00 00 00 00 
ffffffff80100a8c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a93:	00 00 00 00 
ffffffff80100a97:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a9e:	00 00 00 00 
ffffffff80100aa2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aa9:	00 00 00 00 
ffffffff80100aad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ab4:	00 00 00 00 
ffffffff80100ab8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100abf:	00 00 00 00 
ffffffff80100ac3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aca:	00 00 00 00 
ffffffff80100ace:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ad5:	00 00 00 00 
ffffffff80100ad9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ae0:	00 00 00 00 
ffffffff80100ae4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aeb:	00 00 00 00 
ffffffff80100aef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100af6:	00 00 00 00 
ffffffff80100afa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b01:	00 00 00 00 
ffffffff80100b05:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b0c:	00 00 00 00 
ffffffff80100b10:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b17:	00 00 00 00 
ffffffff80100b1b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b22:	00 00 00 00 
ffffffff80100b26:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b2d:	00 00 00 00 
ffffffff80100b31:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b38:	00 00 00 00 
ffffffff80100b3c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b43:	00 00 00 00 
ffffffff80100b47:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b4e:	00 00 00 00 
ffffffff80100b52:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b59:	00 00 00 00 
ffffffff80100b5d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b64:	00 00 00 00 
ffffffff80100b68:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b6f:	00 00 00 00 
ffffffff80100b73:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b7a:	00 00 00 00 
ffffffff80100b7e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b85:	00 00 00 00 
ffffffff80100b89:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b90:	00 00 00 00 
ffffffff80100b94:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b9b:	00 00 00 00 
ffffffff80100b9f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ba6:	00 00 00 00 
ffffffff80100baa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bb1:	00 00 00 00 
ffffffff80100bb5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bbc:	00 00 00 00 
ffffffff80100bc0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bc7:	00 00 00 00 
ffffffff80100bcb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bd2:	00 00 00 00 
ffffffff80100bd6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bdd:	00 00 00 00 
ffffffff80100be1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100be8:	00 00 00 00 
ffffffff80100bec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bf3:	00 00 00 00 
ffffffff80100bf7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bfe:	00 00 00 00 
ffffffff80100c02:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c09:	00 00 00 00 
ffffffff80100c0d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c14:	00 00 00 00 
ffffffff80100c18:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c1f:	00 00 00 00 
ffffffff80100c23:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c2a:	00 00 00 00 
ffffffff80100c2e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c35:	00 00 00 00 
ffffffff80100c39:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c40:	00 00 00 00 
ffffffff80100c44:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c4b:	00 00 00 00 
ffffffff80100c4f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c56:	00 00 00 00 
ffffffff80100c5a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c61:	00 00 00 00 
ffffffff80100c65:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c6c:	00 00 00 00 
ffffffff80100c70:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c77:	00 00 00 00 
ffffffff80100c7b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c82:	00 00 00 00 
ffffffff80100c86:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c8d:	00 00 00 00 
ffffffff80100c91:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c98:	00 00 00 00 
ffffffff80100c9c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ca3:	00 00 00 00 
ffffffff80100ca7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cae:	00 00 00 00 
ffffffff80100cb2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cb9:	00 00 00 00 
ffffffff80100cbd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cc4:	00 00 00 00 
ffffffff80100cc8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ccf:	00 00 00 00 
ffffffff80100cd3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cda:	00 00 00 00 
ffffffff80100cde:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ce5:	00 00 00 00 
ffffffff80100ce9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cf0:	00 00 00 00 
ffffffff80100cf4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cfb:	00 00 00 00 
ffffffff80100cff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d06:	00 00 00 00 
ffffffff80100d0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d11:	00 00 00 00 
ffffffff80100d15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d1c:	00 00 00 00 
ffffffff80100d20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d27:	00 00 00 00 
ffffffff80100d2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d32:	00 00 00 00 
ffffffff80100d36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d3d:	00 00 00 00 
ffffffff80100d41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d48:	00 00 00 00 
ffffffff80100d4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d53:	00 00 00 00 
ffffffff80100d57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d5e:	00 00 00 00 
ffffffff80100d62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d69:	00 00 00 00 
ffffffff80100d6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d74:	00 00 00 00 
ffffffff80100d78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d7f:	00 00 00 00 
ffffffff80100d83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d8a:	00 00 00 00 
ffffffff80100d8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d95:	00 00 00 00 
ffffffff80100d99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100da0:	00 00 00 00 
ffffffff80100da4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dab:	00 00 00 00 
ffffffff80100daf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100db6:	00 00 00 00 
ffffffff80100dba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dc1:	00 00 00 00 
ffffffff80100dc5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dcc:	00 00 00 00 
ffffffff80100dd0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dd7:	00 00 00 00 
ffffffff80100ddb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100de2:	00 00 00 00 
ffffffff80100de6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ded:	00 00 00 00 
ffffffff80100df1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100df8:	00 00 00 00 
ffffffff80100dfc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e03:	00 00 00 00 
ffffffff80100e07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e0e:	00 00 00 00 
ffffffff80100e12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e19:	00 00 00 00 
ffffffff80100e1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e24:	00 00 00 00 
ffffffff80100e28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e2f:	00 00 00 00 
ffffffff80100e33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e3a:	00 00 00 00 
ffffffff80100e3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e45:	00 00 00 00 
ffffffff80100e49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e50:	00 00 00 00 
ffffffff80100e54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e5b:	00 00 00 00 
ffffffff80100e5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e66:	00 00 00 00 
ffffffff80100e6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e71:	00 00 00 00 
ffffffff80100e75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e7c:	00 00 00 00 
ffffffff80100e80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e87:	00 00 00 00 
ffffffff80100e8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e92:	00 00 00 00 
ffffffff80100e96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e9d:	00 00 00 00 
ffffffff80100ea1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ea8:	00 00 00 00 
ffffffff80100eac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eb3:	00 00 00 00 
ffffffff80100eb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ebe:	00 00 00 00 
ffffffff80100ec2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ec9:	00 00 00 00 
ffffffff80100ecd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ed4:	00 00 00 00 
ffffffff80100ed8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100edf:	00 00 00 00 
ffffffff80100ee3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eea:	00 00 00 00 
ffffffff80100eee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ef5:	00 00 00 00 
ffffffff80100ef9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f00:	00 00 00 00 
ffffffff80100f04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f0b:	00 00 00 00 
ffffffff80100f0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f16:	00 00 00 00 
ffffffff80100f1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f21:	00 00 00 00 
ffffffff80100f25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f2c:	00 00 00 00 
ffffffff80100f30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f37:	00 00 00 00 
ffffffff80100f3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f42:	00 00 00 00 
ffffffff80100f46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f4d:	00 00 00 00 
ffffffff80100f51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f58:	00 00 00 00 
ffffffff80100f5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f63:	00 00 00 00 
ffffffff80100f67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f6e:	00 00 00 00 
ffffffff80100f72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f79:	00 00 00 00 
ffffffff80100f7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f84:	00 00 00 00 
ffffffff80100f88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f8f:	00 00 00 00 
ffffffff80100f93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f9a:	00 00 00 00 
ffffffff80100f9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fa5:	00 00 00 00 
ffffffff80100fa9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fb0:	00 00 00 00 
ffffffff80100fb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fbb:	00 00 00 00 
ffffffff80100fbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fc6:	00 00 00 00 
ffffffff80100fca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fd1:	00 00 00 00 
ffffffff80100fd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fdc:	00 00 00 00 
ffffffff80100fe0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fe7:	00 00 00 00 
ffffffff80100feb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ff2:	00 00 00 00 
ffffffff80100ff6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80100ffd:	00 00 00 
	...

ffffffff80108000 <__RME_X64_Mboot_Entry>:
/* The entry point after the bootloader finishes *****************************/
    .code32
    .align              16
__RME_X64_Mboot_Entry:
     /* EBX contains Multiboot data structure, let's relocate it to some other places */
     MOV                %EBX,%ESI
ffffffff80108000:	89 de                	mov    %ebx,%esi
     /* Zero 7 pages for our bootstrap page tables, PML4 @ 0x101000 */
     CLD
ffffffff80108002:	fc                   	cld
     XOR                %EAX,%EAX
ffffffff80108003:	31 c0                	xor    %eax,%eax
     MOV                $0x101000,%EDI
ffffffff80108005:	bf 00 10 10 00       	mov    $0x101000,%edi
     MOV                $0x7000,%ECX
ffffffff8010800a:	b9 00 70 00 00       	mov    $0x7000,%ecx
     REP STOSB
ffffffff8010800f:	f3 aa                	rep stos %al,%es:(%rdi)
     /* PML4[0] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff80108011:	b8 03 20 10 00       	mov    $0x102003,%eax
     MOV                %EAX,0x101000
ffffffff80108016:	a3 00 10 10 00 b8 03 	movabs %eax,0x102003b800101000
ffffffff8010801d:	20 10 
     /* PML4[256] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff8010801f:	00 a3 00 18 10 00    	add    %ah,0x101800(%rbx)
     MOV                %EAX,0x101800
     /* PML4[511] -> PDP-B @ 0x103000 */
     MOV                $(0x103000|3),%EAX
ffffffff80108025:	b8 03 30 10 00       	mov    $0x103003,%eax
     MOV                %EAX,0x101FF8
ffffffff8010802a:	a3 f8 1f 10 00 b8 03 	movabs %eax,0x104003b800101ff8
ffffffff80108031:	40 10 
     /* PDP-A[0] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff80108033:	00 a3 00 20 10 00    	add    %ah,0x102000(%rbx)
     MOV                %EAX,0x102000
     /* PDP-A[1] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108039:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x102008
ffffffff8010803e:	a3 08 20 10 00 b8 03 	movabs %eax,0x106003b800102008
ffffffff80108045:	60 10 
     /* PDP-A[2] -> PDE-C @ 0x106000 */
     MOV                $(0x106000|3),%EAX
ffffffff80108047:	00 a3 10 20 10 00    	add    %ah,0x102010(%rbx)
     MOV                %EAX,0x102010
     /* PDP-A[3] -> PDE-D @ 0x107000 unbufferable uncacheable */
     MOV                $(0x107000|3|0x18),%EAX
ffffffff8010804d:	b8 1b 70 10 00       	mov    $0x10701b,%eax
     MOV                %EAX,0x102018
ffffffff80108052:	a3 18 20 10 00 b8 03 	movabs %eax,0x104003b800102018
ffffffff80108059:	40 10 
     /* PDP-B[510] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff8010805b:	00 a3 f0 3f 10 00    	add    %ah,0x103ff0(%rbx)
     MOV                %EAX,0x103FF0
     /* PDP-B[511] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108061:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x103FF8
ffffffff80108066:	a3 f8 3f 10 00 b8 83 	movabs %eax,0x83b800103ff8
ffffffff8010806d:	00 00 
     /* PDE-A/B/C/D [0..511/0...511/0..511/0..511] -> 0..4094MB */
     MOV                $(0x83),%EAX
ffffffff8010806f:	00 bb 00 40 10 00    	add    %bh,0x104000(%rbx)
     MOV                $0x104000,%EBX
     MOV                $(512*4),%ECX
ffffffff80108075:	b9 00 08 00 00       	mov    $0x800,%ecx

ffffffff8010807a <PDE_Loop>:
PDE_Loop:
     MOV                %EAX,(%EBX)
ffffffff8010807a:	89 03                	mov    %eax,(%rbx)
     ADD                $0x200000,%EAX
ffffffff8010807c:	05 00 00 20 00       	add    $0x200000,%eax
     ADD                $0x8,%EBX
ffffffff80108081:	83 c3 08             	add    $0x8,%ebx
     DEC                %ECX
ffffffff80108084:	49 75 f3             	rex.WB jne ffffffff8010807a <PDE_Loop>
     JNZ                PDE_Loop
	 /* Clear ebx for initial processor boot.
      * When secondary processors boot, they'll call through
      * __RME_X64_SMP_Boot, but with a nonzero ebx.
      * We'll reuse these bootstrap pagetables and GDT. */
     XOR                %EBX,%EBX
ffffffff80108087:	31 db                	xor    %ebx,%ebx

ffffffff80108089 <__RME_X64_SMP_Boot_32>:
     /* SMP boot will run directly from here */
__RME_X64_SMP_Boot_32:
     /* CR3 -> PML4 @ 0x101000 */
     MOV                $0x101000,%EAX
ffffffff80108089:	b8 00 10 10 00       	mov    $0x101000,%eax
     MOV                %EAX,%CR3
ffffffff8010808e:	0f 22 d8             	mov    %rax,%cr3
     /* Load GDT */
     LGDT               (Boot_GDT_Desc-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff80108091:	0f 01 15 28 81 10 00 	lgdt   0x108128(%rip)        # ffffffff802101c0 <_RME_Kot_Erase+0x170>
     /* Enable PAE - CR4.PAE=1 */
     MOV                %CR4,%EAX
ffffffff80108098:	0f 20 e0             	mov    %cr4,%rax
     BTS                $5,%EAX
ffffffff8010809b:	0f ba e8 05          	bts    $0x5,%eax
     MOV                %EAX,%CR4
ffffffff8010809f:	0f 22 e0             	mov    %rax,%cr4
     /* Enable long mode and no execute bit - EFER.LME=1, EFER.NXE=1 */
     MOV                $0xC0000080,%ECX
ffffffff801080a2:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
     RDMSR
ffffffff801080a7:	0f 32                	rdmsr
     BTS                $8,%EAX
ffffffff801080a9:	0f ba e8 08          	bts    $0x8,%eax
     BTS                $11,%EAX
ffffffff801080ad:	0f ba e8 0b          	bts    $0xb,%eax
     WRMSR
ffffffff801080b1:	0f 30                	wrmsr
     /* Enable paging */
     MOV                %CR0,%EAX
ffffffff801080b3:	0f 20 c0             	mov    %cr0,%rax
     BTS                $31,%EAX
ffffffff801080b6:	0f ba e8 1f          	bts    $0x1f,%eax
     MOV                %EAX,%CR0
ffffffff801080ba:	0f 22 c0             	mov    %rax,%cr0
     /* Enable PCID - CR4.PCIDE=1 FIXME: this made things slower - due to extra logic for PCID processing *//*
     MOV                %CR4,%EAX
     BTS                $17,%EAX
     MOV                %EAX,%CR4 */
     /* shift to 64bit segment */
     LJMP               $8,$(Boot_Low_64-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff801080bd:	ea                   	(bad)
ffffffff801080be:	d0 80 10 00 08 00    	rolb   $1,0x80010(%rax)
ffffffff801080c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801080cb:	00 00 00 00 
ffffffff801080cf:	90                   	nop

ffffffff801080d0 <Boot_Low_64>:

/* Now we are in 64-bit mode *************************************************/
    .align              16
    .code64
Boot_Low_64:
    movq                $Boot_High_64,%RAX
ffffffff801080d0:	48 c7 c0 d9 80 10 80 	mov    $0xffffffff801080d9,%rax
    jmp                 *%RAX
ffffffff801080d7:	ff e0                	jmp    *%rax

ffffffff801080d9 <_start>:
_start:
Boot_High_64:
    /* ensure data segment registers are sane - zero out all of them */
    XOR                 %RAX,%RAX
ffffffff801080d9:	48 31 c0             	xor    %rax,%rax
    /* Below are all 16-bit moves */
    MOV                 %AX,%SS
ffffffff801080dc:	8e d0                	mov    %eax,%ss
    MOV                 %AX,%DS
ffffffff801080de:	8e d8                	mov    %eax,%ds
    MOV                 %AX,%ES
ffffffff801080e0:	8e c0                	mov    %eax,%es
    MOV                 %AX,%FS
ffffffff801080e2:	8e e0                	mov    %eax,%fs
    MOV                 %AX,%GS
ffffffff801080e4:	8e e8                	mov    %eax,%gs
    /* Check to see if we're booting a secondary core */
    TEST                %EBX,%EBX
ffffffff801080e6:	85 db                	test   %ebx,%ebx
    JNZ                 Boot_SMP_64
ffffffff801080e8:	75 14                	jne    ffffffff801080fe <Boot_SMP_64>
    /* Setup initial stack - this is hard-coded at low memory */
    MOV                 $__RME_X64_Kern_Boot_Stack,%RAX
ffffffff801080ea:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
    MOV                 %RAX,%RSP
ffffffff801080f1:	48 89 c4             	mov    %rax,%rsp
    /* Pass the physical address of RSI to it */
    MOV                 %RSI,%RDI
ffffffff801080f4:	48 89 f7             	mov    %rsi,%rdi
    JMP                 main
ffffffff801080f7:	e9 74 36 11 00       	jmp    ffffffff8021b770 <main>
    JMP                 .
ffffffff801080fc:	eb fe                	jmp    ffffffff801080fc <_start+0x23>

ffffffff801080fe <Boot_SMP_64>:
Boot_SMP_64:
    MOV                 $0x7000,%RAX
ffffffff801080fe:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax
    MOV                 -16(%RAX),%RSP
ffffffff80108105:	48 8b 60 f0          	mov    -0x10(%rax),%rsp
    JMP                 __RME_SMP_Low_Level_Init
ffffffff80108109:	e9 a2 1e 11 00       	jmp    ffffffff80219fb0 <__RME_SMP_Low_Level_Init>
    JMP                 .
ffffffff8010810e:	eb fe                	jmp    ffffffff8010810e <Boot_SMP_64+0x10>

ffffffff80108110 <Boot_GDT>:
	...
ffffffff8010811c:	00 98 20 00 00 00    	add    %bl,0x20(%rax)
ffffffff80108122:	00 00                	add    %al,(%rax)
ffffffff80108124:	00                   	.byte 0
ffffffff80108125:	90                   	nop
	...

ffffffff80108128 <Boot_GDT_Desc>:
ffffffff80108128:	17                   	(bad)
ffffffff80108129:	00 10                	add    %dl,(%rax)
ffffffff8010812b:	81 10 00 00 00 00    	adcl   $0x0,(%rax)
ffffffff80108131:	00 90 66 66 2e 0f    	add    %dl,0xf2e6666(%rax)
ffffffff80108137:	1f                   	(bad)
ffffffff80108138:	84 00                	test   %al,(%rax)
ffffffff8010813a:	00 00                	add    %al,(%rax)
ffffffff8010813c:	00 00                	add    %al,(%rax)
ffffffff8010813e:	66 90                	xchg   %ax,%ax
ffffffff80108140:	90                   	nop
ffffffff80108141:	e9 ba 0e 00 00       	jmp    ffffffff80109000 <RME_X64_Kpgt>
ffffffff80108146:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010814d:	00 00 00 00 
ffffffff80108151:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108158:	00 00 00 00 
ffffffff8010815c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108163:	00 00 00 00 
ffffffff80108167:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010816e:	00 00 00 00 
ffffffff80108172:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108179:	00 00 00 00 
ffffffff8010817d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108184:	00 00 00 00 
ffffffff80108188:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010818f:	00 00 00 00 
ffffffff80108193:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010819a:	00 00 00 00 
ffffffff8010819e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081a5:	00 00 00 00 
ffffffff801081a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081b0:	00 00 00 00 
ffffffff801081b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081bb:	00 00 00 00 
ffffffff801081bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081c6:	00 00 00 00 
ffffffff801081ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081d1:	00 00 00 00 
ffffffff801081d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081dc:	00 00 00 00 
ffffffff801081e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081e7:	00 00 00 00 
ffffffff801081eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081f2:	00 00 00 00 
ffffffff801081f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081fd:	00 00 00 00 
ffffffff80108201:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108208:	00 00 00 00 
ffffffff8010820c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108213:	00 00 00 00 
ffffffff80108217:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010821e:	00 00 00 00 
ffffffff80108222:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108229:	00 00 00 00 
ffffffff8010822d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108234:	00 00 00 00 
ffffffff80108238:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010823f:	00 00 00 00 
ffffffff80108243:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010824a:	00 00 00 00 
ffffffff8010824e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108255:	00 00 00 00 
ffffffff80108259:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108260:	00 00 00 00 
ffffffff80108264:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010826b:	00 00 00 00 
ffffffff8010826f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108276:	00 00 00 00 
ffffffff8010827a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108281:	00 00 00 00 
ffffffff80108285:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010828c:	00 00 00 00 
ffffffff80108290:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108297:	00 00 00 00 
ffffffff8010829b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082a2:	00 00 00 00 
ffffffff801082a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ad:	00 00 00 00 
ffffffff801082b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082b8:	00 00 00 00 
ffffffff801082bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082c3:	00 00 00 00 
ffffffff801082c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ce:	00 00 00 00 
ffffffff801082d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082d9:	00 00 00 00 
ffffffff801082dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082e4:	00 00 00 00 
ffffffff801082e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ef:	00 00 00 00 
ffffffff801082f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082fa:	00 00 00 00 
ffffffff801082fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108305:	00 00 00 00 
ffffffff80108309:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108310:	00 00 00 00 
ffffffff80108314:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010831b:	00 00 00 00 
ffffffff8010831f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108326:	00 00 00 00 
ffffffff8010832a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108331:	00 00 00 00 
ffffffff80108335:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010833c:	00 00 00 00 
ffffffff80108340:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108347:	00 00 00 00 
ffffffff8010834b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108352:	00 00 00 00 
ffffffff80108356:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010835d:	00 00 00 00 
ffffffff80108361:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108368:	00 00 00 00 
ffffffff8010836c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108373:	00 00 00 00 
ffffffff80108377:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010837e:	00 00 00 00 
ffffffff80108382:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108389:	00 00 00 00 
ffffffff8010838d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108394:	00 00 00 00 
ffffffff80108398:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010839f:	00 00 00 00 
ffffffff801083a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083aa:	00 00 00 00 
ffffffff801083ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083b5:	00 00 00 00 
ffffffff801083b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083c0:	00 00 00 00 
ffffffff801083c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083cb:	00 00 00 00 
ffffffff801083cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083d6:	00 00 00 00 
ffffffff801083da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083e1:	00 00 00 00 
ffffffff801083e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083ec:	00 00 00 00 
ffffffff801083f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083f7:	00 00 00 00 
ffffffff801083fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108402:	00 00 00 00 
ffffffff80108406:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010840d:	00 00 00 00 
ffffffff80108411:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108418:	00 00 00 00 
ffffffff8010841c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108423:	00 00 00 00 
ffffffff80108427:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010842e:	00 00 00 00 
ffffffff80108432:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108439:	00 00 00 00 
ffffffff8010843d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108444:	00 00 00 00 
ffffffff80108448:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010844f:	00 00 00 00 
ffffffff80108453:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010845a:	00 00 00 00 
ffffffff8010845e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108465:	00 00 00 00 
ffffffff80108469:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108470:	00 00 00 00 
ffffffff80108474:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010847b:	00 00 00 00 
ffffffff8010847f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108486:	00 00 00 00 
ffffffff8010848a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108491:	00 00 00 00 
ffffffff80108495:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010849c:	00 00 00 00 
ffffffff801084a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084a7:	00 00 00 00 
ffffffff801084ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084b2:	00 00 00 00 
ffffffff801084b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084bd:	00 00 00 00 
ffffffff801084c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084c8:	00 00 00 00 
ffffffff801084cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084d3:	00 00 00 00 
ffffffff801084d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084de:	00 00 00 00 
ffffffff801084e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084e9:	00 00 00 00 
ffffffff801084ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084f4:	00 00 00 00 
ffffffff801084f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084ff:	00 00 00 00 
ffffffff80108503:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010850a:	00 00 00 00 
ffffffff8010850e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108515:	00 00 00 00 
ffffffff80108519:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108520:	00 00 00 00 
ffffffff80108524:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010852b:	00 00 00 00 
ffffffff8010852f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108536:	00 00 00 00 
ffffffff8010853a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108541:	00 00 00 00 
ffffffff80108545:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010854c:	00 00 00 00 
ffffffff80108550:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108557:	00 00 00 00 
ffffffff8010855b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108562:	00 00 00 00 
ffffffff80108566:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010856d:	00 00 00 00 
ffffffff80108571:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108578:	00 00 00 00 
ffffffff8010857c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108583:	00 00 00 00 
ffffffff80108587:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010858e:	00 00 00 00 
ffffffff80108592:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108599:	00 00 00 00 
ffffffff8010859d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085a4:	00 00 00 00 
ffffffff801085a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085af:	00 00 00 00 
ffffffff801085b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085ba:	00 00 00 00 
ffffffff801085be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085c5:	00 00 00 00 
ffffffff801085c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085d0:	00 00 00 00 
ffffffff801085d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085db:	00 00 00 00 
ffffffff801085df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085e6:	00 00 00 00 
ffffffff801085ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085f1:	00 00 00 00 
ffffffff801085f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085fc:	00 00 00 00 
ffffffff80108600:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108607:	00 00 00 00 
ffffffff8010860b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108612:	00 00 00 00 
ffffffff80108616:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010861d:	00 00 00 00 
ffffffff80108621:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108628:	00 00 00 00 
ffffffff8010862c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108633:	00 00 00 00 
ffffffff80108637:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010863e:	00 00 00 00 
ffffffff80108642:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108649:	00 00 00 00 
ffffffff8010864d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108654:	00 00 00 00 
ffffffff80108658:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010865f:	00 00 00 00 
ffffffff80108663:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010866a:	00 00 00 00 
ffffffff8010866e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108675:	00 00 00 00 
ffffffff80108679:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108680:	00 00 00 00 
ffffffff80108684:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010868b:	00 00 00 00 
ffffffff8010868f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108696:	00 00 00 00 
ffffffff8010869a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086a1:	00 00 00 00 
ffffffff801086a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ac:	00 00 00 00 
ffffffff801086b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086b7:	00 00 00 00 
ffffffff801086bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086c2:	00 00 00 00 
ffffffff801086c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086cd:	00 00 00 00 
ffffffff801086d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086d8:	00 00 00 00 
ffffffff801086dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086e3:	00 00 00 00 
ffffffff801086e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ee:	00 00 00 00 
ffffffff801086f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086f9:	00 00 00 00 
ffffffff801086fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108704:	00 00 00 00 
ffffffff80108708:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010870f:	00 00 00 00 
ffffffff80108713:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010871a:	00 00 00 00 
ffffffff8010871e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108725:	00 00 00 00 
ffffffff80108729:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108730:	00 00 00 00 
ffffffff80108734:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010873b:	00 00 00 00 
ffffffff8010873f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108746:	00 00 00 00 
ffffffff8010874a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108751:	00 00 00 00 
ffffffff80108755:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010875c:	00 00 00 00 
ffffffff80108760:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108767:	00 00 00 00 
ffffffff8010876b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108772:	00 00 00 00 
ffffffff80108776:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010877d:	00 00 00 00 
ffffffff80108781:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108788:	00 00 00 00 
ffffffff8010878c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108793:	00 00 00 00 
ffffffff80108797:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010879e:	00 00 00 00 
ffffffff801087a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087a9:	00 00 00 00 
ffffffff801087ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087b4:	00 00 00 00 
ffffffff801087b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087bf:	00 00 00 00 
ffffffff801087c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087ca:	00 00 00 00 
ffffffff801087ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087d5:	00 00 00 00 
ffffffff801087d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087e0:	00 00 00 00 
ffffffff801087e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087eb:	00 00 00 00 
ffffffff801087ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087f6:	00 00 00 00 
ffffffff801087fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108801:	00 00 00 00 
ffffffff80108805:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010880c:	00 00 00 00 
ffffffff80108810:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108817:	00 00 00 00 
ffffffff8010881b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108822:	00 00 00 00 
ffffffff80108826:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010882d:	00 00 00 00 
ffffffff80108831:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108838:	00 00 00 00 
ffffffff8010883c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108843:	00 00 00 00 
ffffffff80108847:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010884e:	00 00 00 00 
ffffffff80108852:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108859:	00 00 00 00 
ffffffff8010885d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108864:	00 00 00 00 
ffffffff80108868:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010886f:	00 00 00 00 
ffffffff80108873:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010887a:	00 00 00 00 
ffffffff8010887e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108885:	00 00 00 00 
ffffffff80108889:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108890:	00 00 00 00 
ffffffff80108894:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010889b:	00 00 00 00 
ffffffff8010889f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088a6:	00 00 00 00 
ffffffff801088aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088b1:	00 00 00 00 
ffffffff801088b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088bc:	00 00 00 00 
ffffffff801088c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088c7:	00 00 00 00 
ffffffff801088cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088d2:	00 00 00 00 
ffffffff801088d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088dd:	00 00 00 00 
ffffffff801088e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088e8:	00 00 00 00 
ffffffff801088ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088f3:	00 00 00 00 
ffffffff801088f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088fe:	00 00 00 00 
ffffffff80108902:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108909:	00 00 00 00 
ffffffff8010890d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108914:	00 00 00 00 
ffffffff80108918:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010891f:	00 00 00 00 
ffffffff80108923:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010892a:	00 00 00 00 
ffffffff8010892e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108935:	00 00 00 00 
ffffffff80108939:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108940:	00 00 00 00 
ffffffff80108944:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010894b:	00 00 00 00 
ffffffff8010894f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108956:	00 00 00 00 
ffffffff8010895a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108961:	00 00 00 00 
ffffffff80108965:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010896c:	00 00 00 00 
ffffffff80108970:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108977:	00 00 00 00 
ffffffff8010897b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108982:	00 00 00 00 
ffffffff80108986:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010898d:	00 00 00 00 
ffffffff80108991:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108998:	00 00 00 00 
ffffffff8010899c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089a3:	00 00 00 00 
ffffffff801089a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ae:	00 00 00 00 
ffffffff801089b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089b9:	00 00 00 00 
ffffffff801089bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089c4:	00 00 00 00 
ffffffff801089c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089cf:	00 00 00 00 
ffffffff801089d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089da:	00 00 00 00 
ffffffff801089de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089e5:	00 00 00 00 
ffffffff801089e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089f0:	00 00 00 00 
ffffffff801089f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089fb:	00 00 00 00 
ffffffff801089ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a06:	00 00 00 00 
ffffffff80108a0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a11:	00 00 00 00 
ffffffff80108a15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a1c:	00 00 00 00 
ffffffff80108a20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a27:	00 00 00 00 
ffffffff80108a2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a32:	00 00 00 00 
ffffffff80108a36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a3d:	00 00 00 00 
ffffffff80108a41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a48:	00 00 00 00 
ffffffff80108a4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a53:	00 00 00 00 
ffffffff80108a57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a5e:	00 00 00 00 
ffffffff80108a62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a69:	00 00 00 00 
ffffffff80108a6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a74:	00 00 00 00 
ffffffff80108a78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a7f:	00 00 00 00 
ffffffff80108a83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a8a:	00 00 00 00 
ffffffff80108a8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a95:	00 00 00 00 
ffffffff80108a99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aa0:	00 00 00 00 
ffffffff80108aa4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aab:	00 00 00 00 
ffffffff80108aaf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ab6:	00 00 00 00 
ffffffff80108aba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ac1:	00 00 00 00 
ffffffff80108ac5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108acc:	00 00 00 00 
ffffffff80108ad0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ad7:	00 00 00 00 
ffffffff80108adb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ae2:	00 00 00 00 
ffffffff80108ae6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aed:	00 00 00 00 
ffffffff80108af1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108af8:	00 00 00 00 
ffffffff80108afc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b03:	00 00 00 00 
ffffffff80108b07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b0e:	00 00 00 00 
ffffffff80108b12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b19:	00 00 00 00 
ffffffff80108b1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b24:	00 00 00 00 
ffffffff80108b28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b2f:	00 00 00 00 
ffffffff80108b33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b3a:	00 00 00 00 
ffffffff80108b3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b45:	00 00 00 00 
ffffffff80108b49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b50:	00 00 00 00 
ffffffff80108b54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b5b:	00 00 00 00 
ffffffff80108b5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b66:	00 00 00 00 
ffffffff80108b6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b71:	00 00 00 00 
ffffffff80108b75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b7c:	00 00 00 00 
ffffffff80108b80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b87:	00 00 00 00 
ffffffff80108b8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b92:	00 00 00 00 
ffffffff80108b96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b9d:	00 00 00 00 
ffffffff80108ba1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ba8:	00 00 00 00 
ffffffff80108bac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bb3:	00 00 00 00 
ffffffff80108bb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bbe:	00 00 00 00 
ffffffff80108bc2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bc9:	00 00 00 00 
ffffffff80108bcd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bd4:	00 00 00 00 
ffffffff80108bd8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bdf:	00 00 00 00 
ffffffff80108be3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bea:	00 00 00 00 
ffffffff80108bee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bf5:	00 00 00 00 
ffffffff80108bf9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c00:	00 00 00 00 
ffffffff80108c04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c0b:	00 00 00 00 
ffffffff80108c0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c16:	00 00 00 00 
ffffffff80108c1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c21:	00 00 00 00 
ffffffff80108c25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c2c:	00 00 00 00 
ffffffff80108c30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c37:	00 00 00 00 
ffffffff80108c3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c42:	00 00 00 00 
ffffffff80108c46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c4d:	00 00 00 00 
ffffffff80108c51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c58:	00 00 00 00 
ffffffff80108c5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c63:	00 00 00 00 
ffffffff80108c67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c6e:	00 00 00 00 
ffffffff80108c72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c79:	00 00 00 00 
ffffffff80108c7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c84:	00 00 00 00 
ffffffff80108c88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c8f:	00 00 00 00 
ffffffff80108c93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c9a:	00 00 00 00 
ffffffff80108c9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ca5:	00 00 00 00 
ffffffff80108ca9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cb0:	00 00 00 00 
ffffffff80108cb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cbb:	00 00 00 00 
ffffffff80108cbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cc6:	00 00 00 00 
ffffffff80108cca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cd1:	00 00 00 00 
ffffffff80108cd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cdc:	00 00 00 00 
ffffffff80108ce0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ce7:	00 00 00 00 
ffffffff80108ceb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cf2:	00 00 00 00 
ffffffff80108cf6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cfd:	00 00 00 00 
ffffffff80108d01:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d08:	00 00 00 00 
ffffffff80108d0c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d13:	00 00 00 00 
ffffffff80108d17:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d1e:	00 00 00 00 
ffffffff80108d22:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d29:	00 00 00 00 
ffffffff80108d2d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d34:	00 00 00 00 
ffffffff80108d38:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d3f:	00 00 00 00 
ffffffff80108d43:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d4a:	00 00 00 00 
ffffffff80108d4e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d55:	00 00 00 00 
ffffffff80108d59:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d60:	00 00 00 00 
ffffffff80108d64:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d6b:	00 00 00 00 
ffffffff80108d6f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d76:	00 00 00 00 
ffffffff80108d7a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d81:	00 00 00 00 
ffffffff80108d85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d8c:	00 00 00 00 
ffffffff80108d90:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d97:	00 00 00 00 
ffffffff80108d9b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108da2:	00 00 00 00 
ffffffff80108da6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dad:	00 00 00 00 
ffffffff80108db1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108db8:	00 00 00 00 
ffffffff80108dbc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dc3:	00 00 00 00 
ffffffff80108dc7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dce:	00 00 00 00 
ffffffff80108dd2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dd9:	00 00 00 00 
ffffffff80108ddd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108de4:	00 00 00 00 
ffffffff80108de8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108def:	00 00 00 00 
ffffffff80108df3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dfa:	00 00 00 00 
ffffffff80108dfe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e05:	00 00 00 00 
ffffffff80108e09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e10:	00 00 00 00 
ffffffff80108e14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e1b:	00 00 00 00 
ffffffff80108e1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e26:	00 00 00 00 
ffffffff80108e2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e31:	00 00 00 00 
ffffffff80108e35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e3c:	00 00 00 00 
ffffffff80108e40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e47:	00 00 00 00 
ffffffff80108e4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e52:	00 00 00 00 
ffffffff80108e56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e5d:	00 00 00 00 
ffffffff80108e61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e68:	00 00 00 00 
ffffffff80108e6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e73:	00 00 00 00 
ffffffff80108e77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e7e:	00 00 00 00 
ffffffff80108e82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e89:	00 00 00 00 
ffffffff80108e8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e94:	00 00 00 00 
ffffffff80108e98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e9f:	00 00 00 00 
ffffffff80108ea3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eaa:	00 00 00 00 
ffffffff80108eae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eb5:	00 00 00 00 
ffffffff80108eb9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ec0:	00 00 00 00 
ffffffff80108ec4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ecb:	00 00 00 00 
ffffffff80108ecf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ed6:	00 00 00 00 
ffffffff80108eda:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ee1:	00 00 00 00 
ffffffff80108ee5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eec:	00 00 00 00 
ffffffff80108ef0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ef7:	00 00 00 00 
ffffffff80108efb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f02:	00 00 00 00 
ffffffff80108f06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f0d:	00 00 00 00 
ffffffff80108f11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f18:	00 00 00 00 
ffffffff80108f1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f23:	00 00 00 00 
ffffffff80108f27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f2e:	00 00 00 00 
ffffffff80108f32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f39:	00 00 00 00 
ffffffff80108f3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f44:	00 00 00 00 
ffffffff80108f48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f4f:	00 00 00 00 
ffffffff80108f53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f5a:	00 00 00 00 
ffffffff80108f5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f65:	00 00 00 00 
ffffffff80108f69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f70:	00 00 00 00 
ffffffff80108f74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f7b:	00 00 00 00 
ffffffff80108f7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f86:	00 00 00 00 
ffffffff80108f8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f91:	00 00 00 00 
ffffffff80108f95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f9c:	00 00 00 00 
ffffffff80108fa0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fa7:	00 00 00 00 
ffffffff80108fab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fb2:	00 00 00 00 
ffffffff80108fb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fbd:	00 00 00 00 
ffffffff80108fc1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fc8:	00 00 00 00 
ffffffff80108fcc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fd3:	00 00 00 00 
ffffffff80108fd7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fde:	00 00 00 00 
ffffffff80108fe2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fe9:	00 00 00 00 
ffffffff80108fed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ff4:	00 00 00 00 
ffffffff80108ff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80108fff:	00 

ffffffff80109000 <RME_X64_Kpgt>:
	...

ffffffff8020b800 <__RME_X64_In>:
Input       : ptr_t Port - The port to output to.
Output      : None.
Return      : ptr_t - The data received from that port.
******************************************************************************/
__RME_X64_In:
    PUSHQ               %RDX
ffffffff8020b800:	52                   	push   %rdx
    MOVQ                %RDI,%RDX
ffffffff8020b801:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RAX,%RAX
ffffffff8020b804:	48 89 c0             	mov    %rax,%rax
    INB                 (%DX),%AL
ffffffff8020b807:	ec                   	in     (%dx),%al
    POPQ                %RDX
ffffffff8020b808:	5a                   	pop    %rdx
    RETQ
ffffffff8020b809:	c3                   	ret

ffffffff8020b80a <__RME_X64_Out>:
                 ptr_t Data - The data to send to that port.
Output         : None.
Return         : None.
******************************************************************************/
__RME_X64_Out:
    PUSHQ               %RDX
ffffffff8020b80a:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b80b:	50                   	push   %rax
    MOVQ                %RDI,%RDX
ffffffff8020b80c:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RSI,%RAX
ffffffff8020b80f:	48 89 f0             	mov    %rsi,%rax
    OUTB                %AL,(%DX)
ffffffff8020b812:	ee                   	out    %al,(%dx)
    POPQ                %RAX
ffffffff8020b813:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b814:	5a                   	pop    %rdx
    RETQ
ffffffff8020b815:	c3                   	ret

ffffffff8020b816 <__RME_X64_Read_MSR>:
Input       : ptr_t MSR - The MSR to read.
Output      : None.
Return      : ptr_t - The content of the MSR.
******************************************************************************/
__RME_X64_Read_MSR:
    PUSHQ               %RCX
ffffffff8020b816:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b817:	52                   	push   %rdx
    MOVQ                %RDI,%RCX
ffffffff8020b818:	48 89 f9             	mov    %rdi,%rcx
    XORQ                %RAX,%RAX
ffffffff8020b81b:	48 31 c0             	xor    %rax,%rax
    RDMSR
ffffffff8020b81e:	0f 32                	rdmsr
    SHLQ                $32,%RDX
ffffffff8020b820:	48 c1 e2 20          	shl    $0x20,%rdx
    ADDQ                %RDX,%RAX
ffffffff8020b824:	48 01 d0             	add    %rdx,%rax
    POPQ                %RDX
ffffffff8020b827:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b828:	59                   	pop    %rcx
    RETQ
ffffffff8020b829:	c3                   	ret

ffffffff8020b82a <__RME_X64_Write_MSR>:
              ptr_t Value - The value to write to it.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_MSR:
    PUSHQ               %RCX
ffffffff8020b82a:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b82b:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b82c:	50                   	push   %rax
    MOVQ                %RDI,%RCX
ffffffff8020b82d:	48 89 f9             	mov    %rdi,%rcx
    MOVL                %ESI,%EAX
ffffffff8020b830:	89 f0                	mov    %esi,%eax
    MOVQ                %RSI,%RDX
ffffffff8020b832:	48 89 f2             	mov    %rsi,%rdx
    SHR                 $32,%RDX
ffffffff8020b835:	48 c1 ea 20          	shr    $0x20,%rdx
    WRMSR
ffffffff8020b839:	0f 30                	wrmsr
    POPQ                %RAX
ffffffff8020b83b:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b83c:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b83d:	59                   	pop    %rcx
    RETQ
ffffffff8020b83e:	c3                   	ret

ffffffff8020b83f <__RME_X64_CPU_Local_Get>:
Input       : None.
Output      : None.
Return      : struct RME_CPU_Local* - The CPU-local data structures.
******************************************************************************/
__RME_X64_CPU_Local_Get:
    MOVQ                %GS:(8192-8*3),%RAX
ffffffff8020b83f:	65 48 8b 04 25 e8 1f 	mov    %gs:0x1fe8,%rax
ffffffff8020b846:	00 00 
    RETQ
ffffffff8020b848:	c3                   	ret

ffffffff8020b849 <__RME_X64_CPUID_Get>:
              ptr_t* ECX - The ECX info.
              ptr_t* EDX - The EDX info.
Return      : ptr_t - The maximum number for CPUID instruction.
******************************************************************************/
__RME_X64_CPUID_Get:
    PUSHQ               %R8
ffffffff8020b849:	41 50                	push   %r8
    PUSHQ               %R9
ffffffff8020b84b:	41 51                	push   %r9
    PUSHQ               %RBX
ffffffff8020b84d:	53                   	push   %rbx
    PUSHQ               %RCX
ffffffff8020b84e:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b84f:	52                   	push   %rdx

    MOVQ                %RDI,%RAX
ffffffff8020b850:	48 89 f8             	mov    %rdi,%rax
    MOVQ                %RDX,%R8
ffffffff8020b853:	49 89 d0             	mov    %rdx,%r8
    MOVQ                %RCX,%R9
ffffffff8020b856:	49 89 c9             	mov    %rcx,%r9

    MOVQ                (%RSI),%RBX
ffffffff8020b859:	48 8b 1e             	mov    (%rsi),%rbx
    MOVQ                (%R8),%RCX
ffffffff8020b85c:	49 8b 08             	mov    (%r8),%rcx
    MOVQ                (%R9),%RDX
ffffffff8020b85f:	49 8b 11             	mov    (%r9),%rdx
    CPUID
ffffffff8020b862:	0f a2                	cpuid
    MOVQ                %RBX,(%RSI)
ffffffff8020b864:	48 89 1e             	mov    %rbx,(%rsi)
    MOVQ                %RCX,(%R8)
ffffffff8020b867:	49 89 08             	mov    %rcx,(%r8)
    MOVQ                %RDX,(%R9)
ffffffff8020b86a:	49 89 11             	mov    %rdx,(%r9)

    POPQ                %RDX
ffffffff8020b86d:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b86e:	59                   	pop    %rcx
    POPQ                %RBX
ffffffff8020b86f:	5b                   	pop    %rbx
    POPQ                %R9
ffffffff8020b870:	41 59                	pop    %r9
    POPQ                %R8
ffffffff8020b872:	41 58                	pop    %r8
    RETQ
ffffffff8020b874:	c3                   	ret

ffffffff8020b875 <__RME_X64_GDT_Load>:
Input       : ptr_t* GDTR - The pointer to the GDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_GDT_Load:
    LGDT                (%RDI)
ffffffff8020b875:	0f 01 17             	lgdt   (%rdi)
    RETQ
ffffffff8020b878:	c3                   	ret

ffffffff8020b879 <__RME_X64_IDT_Load>:
Input       : ptr_t* IDTR - The pointer to the IDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_IDT_Load:
    LIDT                (%RDI)
ffffffff8020b879:	0f 01 1f             	lidt   (%rdi)
    RETQ
ffffffff8020b87c:	c3                   	ret

ffffffff8020b87d <__RME_X64_TSS_Load>:
Input       : ptr_t TSS - The TSS's position in GDT.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_TSS_Load:
    LTR                 %DI
ffffffff8020b87d:	0f 00 df             	ltr    %edi
    RETQ
ffffffff8020b880:	c3                   	ret

ffffffff8020b881 <__RME_X64_Comp_Swap>:
              ptr_t New - The new value.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - If successful, 1; else 0.
******************************************************************************/
__RME_X64_Comp_Swap:
    MOVQ                %RSI,%RAX
ffffffff8020b881:	48 89 f0             	mov    %rsi,%rax
    XOR                 %RSI,%RSI
ffffffff8020b884:	48 31 f6             	xor    %rsi,%rsi
    /* In x86, locked instructions act as a fence */
    LOCK CMPXCHGQ       %RDX,(%RDI)
ffffffff8020b887:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
    /* Set the bit if ZF is set */
    SETZ                %SIL
ffffffff8020b88c:	40 0f 94 c6          	sete   %sil
    MOVQ                %RSI,%RAX
ffffffff8020b890:	48 89 f0             	mov    %rsi,%rax
    RETQ
ffffffff8020b893:	c3                   	ret

ffffffff8020b894 <__RME_X64_Fetch_Add>:
              cnt_t Addend - The number to add.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the addition.
******************************************************************************/
__RME_X64_Fetch_Add:
    MOVQ                %RSI,%RAX
ffffffff8020b894:	48 89 f0             	mov    %rsi,%rax
    /* In x86, locked instructions act as a fence */
    LOCK XADDQ          %RAX,(%RDI)
ffffffff8020b897:	f0 48 0f c1 07       	lock xadd %rax,(%rdi)
    RETQ
ffffffff8020b89c:	c3                   	ret

ffffffff8020b89d <__RME_X64_Fetch_And>:
              cnt_t Operand - The number to logic AND with the destination.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the AND operation.
******************************************************************************/
__RME_X64_Fetch_And:
    MOVQ                (%RDI),%RAX
ffffffff8020b89d:	48 8b 07             	mov    (%rdi),%rax
    /* In x86, locked instructions act as a fence */
    LOCK ANDQ           %RSI,(%RDI)
ffffffff8020b8a0:	f0 48 21 37          	lock and %rsi,(%rdi)
    RETQ
ffffffff8020b8a4:	c3                   	ret

ffffffff8020b8a5 <__RME_X64_Write_Release>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_Release:
    MFENCE
ffffffff8020b8a5:	0f ae f0             	mfence
    RETQ
ffffffff8020b8a8:	c3                   	ret

ffffffff8020b8a9 <__RME_X64_Pgt_Set>:
Input       : ptr_t Pgt - The physical address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Pgt_Set:
    MOV                 %RDI,%CR3
ffffffff8020b8a9:	0f 22 df             	mov    %rdi,%cr3
    RETQ
ffffffff8020b8ac:	c3                   	ret

ffffffff8020b8ad <__RME_Disable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Disable_Int:
    /* Disable all interrupts */
    CLI
ffffffff8020b8ad:	fa                   	cli
    RETQ
ffffffff8020b8ae:	c3                   	ret

ffffffff8020b8af <__RME_Enable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enable_Int:
    /* Enable all interrupts */
    STI
ffffffff8020b8af:	fb                   	sti
    RETQ
ffffffff8020b8b0:	c3                   	ret

ffffffff8020b8b1 <__RME_X64_Halt>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Halt:
    /* Wait for interrupt */
    HLT
ffffffff8020b8b1:	f4                   	hlt
    RETQ
ffffffff8020b8b2:	c3                   	ret

ffffffff8020b8b3 <_RME_Kmain>:
Input       : ptr_t Stack - The stack address to set SP to.
Output      : None.
Return      : None.
******************************************************************************/
_RME_Kmain:
    MOVQ                %RDI,%RSP
ffffffff8020b8b3:	48 89 fc             	mov    %rdi,%rsp
    JMP                 RME_Kmain
ffffffff8020b8b6:	e9 25 2c 00 00       	jmp    ffffffff8020e4e0 <RME_Kmain>

ffffffff8020b8bb <__RME_X64_MSB_Get>:
Input       : ptr_t Val - The value.
Output      : None.
Return      : ptr_t - The MSB position.
******************************************************************************/
__RME_X64_MSB_Get:
    BSRQ                %RDI,%RAX
ffffffff8020b8bb:	48 0f bd c7          	bsr    %rdi,%rax
    RETQ
ffffffff8020b8bf:	c3                   	ret

ffffffff8020b8c0 <__RME_Enter_User_Mode>:
              ptr_t CPUID - The CPUID.
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enter_User_Mode:
    MOVQ                %RDI,%RCX           /* Entry */
ffffffff8020b8c0:	48 89 f9             	mov    %rdi,%rcx
    MOVQ                %RSI,%RSP           /* Stack */
ffffffff8020b8c3:	48 89 f4             	mov    %rsi,%rsp
    MOVQ                $0x3200,%R11        /* Flags - IOPL 3, IF */
ffffffff8020b8c6:	49 c7 c3 00 32 00 00 	mov    $0x3200,%r11
    MOVQ                %RDX,%RDI           /* CPUID */
ffffffff8020b8cd:	48 89 d7             	mov    %rdx,%rdi
    SYSRETQ
ffffffff8020b8d0:	48 0f 07             	sysretq

ffffffff8020b8d3 <__RME_X64_FAULT_DE_Handler>:
    PUSHQ               $\REASON
    JMP                 Fault_Handler
.endm

/* Fault handlers */
FAULT_HANDLER NAME=__RME_X64_FAULT_DE_Handler ERRCODE=0 REASON=0
ffffffff8020b8d3:	0f 01 f8             	swapgs
ffffffff8020b8d6:	6a 00                	push   $0x0
ffffffff8020b8d8:	6a 00                	push   $0x0
ffffffff8020b8da:	e9 a6 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8df <__RME_X64_TRAP_DB_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_DB_Handler ERRCODE=0 REASON=1
ffffffff8020b8df:	0f 01 f8             	swapgs
ffffffff8020b8e2:	6a 00                	push   $0x0
ffffffff8020b8e4:	6a 01                	push   $0x1
ffffffff8020b8e6:	e9 9a 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8eb <__RME_X64_INT_NMI_Handler>:
FAULT_HANDLER NAME=__RME_X64_INT_NMI_Handler ERRCODE=0 REASON=2
ffffffff8020b8eb:	0f 01 f8             	swapgs
ffffffff8020b8ee:	6a 00                	push   $0x0
ffffffff8020b8f0:	6a 02                	push   $0x2
ffffffff8020b8f2:	e9 8e 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8f7 <__RME_X64_TRAP_BP_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_BP_Handler ERRCODE=0 REASON=3
ffffffff8020b8f7:	0f 01 f8             	swapgs
ffffffff8020b8fa:	6a 00                	push   $0x0
ffffffff8020b8fc:	6a 03                	push   $0x3
ffffffff8020b8fe:	e9 82 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b903 <__RME_X64_TRAP_OF_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_OF_Handler ERRCODE=0 REASON=4
ffffffff8020b903:	0f 01 f8             	swapgs
ffffffff8020b906:	6a 00                	push   $0x0
ffffffff8020b908:	6a 04                	push   $0x4
ffffffff8020b90a:	eb 79                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b90c <__RME_X64_FAULT_BR_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_BR_Handler ERRCODE=0 REASON=5
ffffffff8020b90c:	0f 01 f8             	swapgs
ffffffff8020b90f:	6a 00                	push   $0x0
ffffffff8020b911:	6a 05                	push   $0x5
ffffffff8020b913:	eb 70                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b915 <__RME_X64_FAULT_UD_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_UD_Handler ERRCODE=0 REASON=6
ffffffff8020b915:	0f 01 f8             	swapgs
ffffffff8020b918:	6a 00                	push   $0x0
ffffffff8020b91a:	6a 06                	push   $0x6
ffffffff8020b91c:	eb 67                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b91e <__RME_X64_FAULT_NM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NM_Handler ERRCODE=0 REASON=7
ffffffff8020b91e:	0f 01 f8             	swapgs
ffffffff8020b921:	6a 00                	push   $0x0
ffffffff8020b923:	6a 07                	push   $0x7
ffffffff8020b925:	eb 5e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b927 <__RME_X64_ABORT_DF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_DF_Handler ERRCODE=1 REASON=8
ffffffff8020b927:	0f 01 f8             	swapgs
ffffffff8020b92a:	6a 08                	push   $0x8
ffffffff8020b92c:	eb 57                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b92e <__RME_X64_ABORT_OLD_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_OLD_MF_Handler ERRCODE=0 REASON=9
ffffffff8020b92e:	0f 01 f8             	swapgs
ffffffff8020b931:	6a 00                	push   $0x0
ffffffff8020b933:	6a 09                	push   $0x9
ffffffff8020b935:	eb 4e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b937 <__RME_X64_FAULT_TS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_TS_Handler ERRCODE=1 REASON=10
ffffffff8020b937:	0f 01 f8             	swapgs
ffffffff8020b93a:	6a 0a                	push   $0xa
ffffffff8020b93c:	eb 47                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b93e <__RME_X64_FAULT_NP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NP_Handler ERRCODE=1 REASON=11
ffffffff8020b93e:	0f 01 f8             	swapgs
ffffffff8020b941:	6a 0b                	push   $0xb
ffffffff8020b943:	eb 40                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b945 <__RME_X64_FAULT_SS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_SS_Handler ERRCODE=1 REASON=12
ffffffff8020b945:	0f 01 f8             	swapgs
ffffffff8020b948:	6a 0c                	push   $0xc
ffffffff8020b94a:	eb 39                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b94c <__RME_X64_FAULT_GP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_GP_Handler ERRCODE=1 REASON=13
ffffffff8020b94c:	0f 01 f8             	swapgs
ffffffff8020b94f:	6a 0d                	push   $0xd
ffffffff8020b951:	eb 32                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b953 <__RME_X64_FAULT_PF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_PF_Handler ERRCODE=1 REASON=14
ffffffff8020b953:	0f 01 f8             	swapgs
ffffffff8020b956:	6a 0e                	push   $0xe
ffffffff8020b958:	eb 2b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b95a <__RME_X64_FAULT_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_MF_Handler ERRCODE=0 REASON=16
ffffffff8020b95a:	0f 01 f8             	swapgs
ffffffff8020b95d:	6a 00                	push   $0x0
ffffffff8020b95f:	6a 10                	push   $0x10
ffffffff8020b961:	eb 22                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b963 <__RME_X64_FAULT_AC_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_AC_Handler ERRCODE=1 REASON=17
ffffffff8020b963:	0f 01 f8             	swapgs
ffffffff8020b966:	6a 11                	push   $0x11
ffffffff8020b968:	eb 1b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b96a <__RME_X64_ABORT_MC_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_MC_Handler ERRCODE=0 REASON=18
ffffffff8020b96a:	0f 01 f8             	swapgs
ffffffff8020b96d:	6a 00                	push   $0x0
ffffffff8020b96f:	6a 12                	push   $0x12
ffffffff8020b971:	eb 12                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b973 <__RME_X64_FAULT_XM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_XM_Handler ERRCODE=0 REASON=19
ffffffff8020b973:	0f 01 f8             	swapgs
ffffffff8020b976:	6a 00                	push   $0x0
ffffffff8020b978:	6a 13                	push   $0x13
ffffffff8020b97a:	eb 09                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b97c <__RME_X64_FAULT_VE_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_VE_Handler ERRCODE=0 REASON=20
ffffffff8020b97c:	0f 01 f8             	swapgs
ffffffff8020b97f:	6a 00                	push   $0x0
ffffffff8020b981:	6a 14                	push   $0x14
ffffffff8020b983:	eb 00                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b985 <Fault_Handler>:
/* Common function body for fault handlers - reduce I-Cache usage */
Fault_Handler:
    SAVE_GP_REGS
ffffffff8020b985:	41 57                	push   %r15
ffffffff8020b987:	41 56                	push   %r14
ffffffff8020b989:	41 55                	push   %r13
ffffffff8020b98b:	41 54                	push   %r12
ffffffff8020b98d:	41 53                	push   %r11
ffffffff8020b98f:	41 52                	push   %r10
ffffffff8020b991:	41 51                	push   %r9
ffffffff8020b993:	41 50                	push   %r8
ffffffff8020b995:	55                   	push   %rbp
ffffffff8020b996:	57                   	push   %rdi
ffffffff8020b997:	56                   	push   %rsi
ffffffff8020b998:	52                   	push   %rdx
ffffffff8020b999:	51                   	push   %rcx
ffffffff8020b99a:	53                   	push   %rbx
ffffffff8020b99b:	50                   	push   %rax
ffffffff8020b99c:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020b9a0:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020b9a2:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020b9a5:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Fault_Handler
ffffffff8020b9aa:	e8 01 f4 00 00       	call   ffffffff8021adb0 <__RME_X64_Fault_Handler>

    RESTORE_GP_REGS
ffffffff8020b9af:	0f 01 f8             	swapgs
ffffffff8020b9b2:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020b9b6:	8e d8                	mov    %eax,%ds
ffffffff8020b9b8:	58                   	pop    %rax
ffffffff8020b9b9:	5b                   	pop    %rbx
ffffffff8020b9ba:	59                   	pop    %rcx
ffffffff8020b9bb:	5a                   	pop    %rdx
ffffffff8020b9bc:	5e                   	pop    %rsi
ffffffff8020b9bd:	5f                   	pop    %rdi
ffffffff8020b9be:	5d                   	pop    %rbp
ffffffff8020b9bf:	41 58                	pop    %r8
ffffffff8020b9c1:	41 59                	pop    %r9
ffffffff8020b9c3:	41 5a                	pop    %r10
ffffffff8020b9c5:	41 5b                	pop    %r11
ffffffff8020b9c7:	41 5c                	pop    %r12
ffffffff8020b9c9:	41 5d                	pop    %r13
ffffffff8020b9cb:	41 5e                	pop    %r14
ffffffff8020b9cd:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020b9cf:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020b9d3:	48 cf                	iretq

ffffffff8020b9d5 <__RME_X64_USER32_Handler>:
    PUSHQ               $0                  /* Make a dummy error code */
    PUSHQ               $\VECTNUM           /* Interrupt number */
    JMP                 User_Handler
.endm
/* User handlers */
USER_HANDLER NAME=__RME_X64_USER32_Handler VECTNUM=32
ffffffff8020b9d5:	0f 01 f8             	swapgs
ffffffff8020b9d8:	6a 00                	push   $0x0
ffffffff8020b9da:	6a 20                	push   $0x20
ffffffff8020b9dc:	e9 d3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9e1 <__RME_X64_USER33_Handler>:
USER_HANDLER NAME=__RME_X64_USER33_Handler VECTNUM=33
ffffffff8020b9e1:	0f 01 f8             	swapgs
ffffffff8020b9e4:	6a 00                	push   $0x0
ffffffff8020b9e6:	6a 21                	push   $0x21
ffffffff8020b9e8:	e9 c7 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9ed <__RME_X64_USER34_Handler>:
USER_HANDLER NAME=__RME_X64_USER34_Handler VECTNUM=34
ffffffff8020b9ed:	0f 01 f8             	swapgs
ffffffff8020b9f0:	6a 00                	push   $0x0
ffffffff8020b9f2:	6a 22                	push   $0x22
ffffffff8020b9f4:	e9 bb 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9f9 <__RME_X64_USER35_Handler>:
USER_HANDLER NAME=__RME_X64_USER35_Handler VECTNUM=35
ffffffff8020b9f9:	0f 01 f8             	swapgs
ffffffff8020b9fc:	6a 00                	push   $0x0
ffffffff8020b9fe:	6a 23                	push   $0x23
ffffffff8020ba00:	e9 af 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba05 <__RME_X64_USER36_Handler>:
USER_HANDLER NAME=__RME_X64_USER36_Handler VECTNUM=36
ffffffff8020ba05:	0f 01 f8             	swapgs
ffffffff8020ba08:	6a 00                	push   $0x0
ffffffff8020ba0a:	6a 24                	push   $0x24
ffffffff8020ba0c:	e9 a3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba11 <__RME_X64_USER37_Handler>:
USER_HANDLER NAME=__RME_X64_USER37_Handler VECTNUM=37
ffffffff8020ba11:	0f 01 f8             	swapgs
ffffffff8020ba14:	6a 00                	push   $0x0
ffffffff8020ba16:	6a 25                	push   $0x25
ffffffff8020ba18:	e9 97 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba1d <__RME_X64_USER38_Handler>:
USER_HANDLER NAME=__RME_X64_USER38_Handler VECTNUM=38
ffffffff8020ba1d:	0f 01 f8             	swapgs
ffffffff8020ba20:	6a 00                	push   $0x0
ffffffff8020ba22:	6a 26                	push   $0x26
ffffffff8020ba24:	e9 8b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba29 <__RME_X64_USER39_Handler>:
USER_HANDLER NAME=__RME_X64_USER39_Handler VECTNUM=39
ffffffff8020ba29:	0f 01 f8             	swapgs
ffffffff8020ba2c:	6a 00                	push   $0x0
ffffffff8020ba2e:	6a 27                	push   $0x27
ffffffff8020ba30:	e9 7f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba35 <__RME_X64_USER40_Handler>:

USER_HANDLER NAME=__RME_X64_USER40_Handler VECTNUM=40
ffffffff8020ba35:	0f 01 f8             	swapgs
ffffffff8020ba38:	6a 00                	push   $0x0
ffffffff8020ba3a:	6a 28                	push   $0x28
ffffffff8020ba3c:	e9 73 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba41 <__RME_X64_USER41_Handler>:
USER_HANDLER NAME=__RME_X64_USER41_Handler VECTNUM=41
ffffffff8020ba41:	0f 01 f8             	swapgs
ffffffff8020ba44:	6a 00                	push   $0x0
ffffffff8020ba46:	6a 29                	push   $0x29
ffffffff8020ba48:	e9 67 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba4d <__RME_X64_USER42_Handler>:
USER_HANDLER NAME=__RME_X64_USER42_Handler VECTNUM=42
ffffffff8020ba4d:	0f 01 f8             	swapgs
ffffffff8020ba50:	6a 00                	push   $0x0
ffffffff8020ba52:	6a 2a                	push   $0x2a
ffffffff8020ba54:	e9 5b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba59 <__RME_X64_USER43_Handler>:
USER_HANDLER NAME=__RME_X64_USER43_Handler VECTNUM=43
ffffffff8020ba59:	0f 01 f8             	swapgs
ffffffff8020ba5c:	6a 00                	push   $0x0
ffffffff8020ba5e:	6a 2b                	push   $0x2b
ffffffff8020ba60:	e9 4f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba65 <__RME_X64_USER44_Handler>:
USER_HANDLER NAME=__RME_X64_USER44_Handler VECTNUM=44
ffffffff8020ba65:	0f 01 f8             	swapgs
ffffffff8020ba68:	6a 00                	push   $0x0
ffffffff8020ba6a:	6a 2c                	push   $0x2c
ffffffff8020ba6c:	e9 43 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba71 <__RME_X64_USER45_Handler>:
USER_HANDLER NAME=__RME_X64_USER45_Handler VECTNUM=45
ffffffff8020ba71:	0f 01 f8             	swapgs
ffffffff8020ba74:	6a 00                	push   $0x0
ffffffff8020ba76:	6a 2d                	push   $0x2d
ffffffff8020ba78:	e9 37 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba7d <__RME_X64_USER46_Handler>:
USER_HANDLER NAME=__RME_X64_USER46_Handler VECTNUM=46
ffffffff8020ba7d:	0f 01 f8             	swapgs
ffffffff8020ba80:	6a 00                	push   $0x0
ffffffff8020ba82:	6a 2e                	push   $0x2e
ffffffff8020ba84:	e9 2b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba89 <__RME_X64_USER47_Handler>:
USER_HANDLER NAME=__RME_X64_USER47_Handler VECTNUM=47
ffffffff8020ba89:	0f 01 f8             	swapgs
ffffffff8020ba8c:	6a 00                	push   $0x0
ffffffff8020ba8e:	6a 2f                	push   $0x2f
ffffffff8020ba90:	e9 1f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba95 <__RME_X64_USER48_Handler>:
USER_HANDLER NAME=__RME_X64_USER48_Handler VECTNUM=48
ffffffff8020ba95:	0f 01 f8             	swapgs
ffffffff8020ba98:	6a 00                	push   $0x0
ffffffff8020ba9a:	6a 30                	push   $0x30
ffffffff8020ba9c:	e9 13 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baa1 <__RME_X64_USER49_Handler>:
USER_HANDLER NAME=__RME_X64_USER49_Handler VECTNUM=49
ffffffff8020baa1:	0f 01 f8             	swapgs
ffffffff8020baa4:	6a 00                	push   $0x0
ffffffff8020baa6:	6a 31                	push   $0x31
ffffffff8020baa8:	e9 07 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baad <__RME_X64_USER50_Handler>:

USER_HANDLER NAME=__RME_X64_USER50_Handler VECTNUM=50
ffffffff8020baad:	0f 01 f8             	swapgs
ffffffff8020bab0:	6a 00                	push   $0x0
ffffffff8020bab2:	6a 32                	push   $0x32
ffffffff8020bab4:	e9 fb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bab9 <__RME_X64_USER51_Handler>:
USER_HANDLER NAME=__RME_X64_USER51_Handler VECTNUM=51
ffffffff8020bab9:	0f 01 f8             	swapgs
ffffffff8020babc:	6a 00                	push   $0x0
ffffffff8020babe:	6a 33                	push   $0x33
ffffffff8020bac0:	e9 ef 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bac5 <__RME_X64_USER52_Handler>:
USER_HANDLER NAME=__RME_X64_USER52_Handler VECTNUM=52
ffffffff8020bac5:	0f 01 f8             	swapgs
ffffffff8020bac8:	6a 00                	push   $0x0
ffffffff8020baca:	6a 34                	push   $0x34
ffffffff8020bacc:	e9 e3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bad1 <__RME_X64_USER53_Handler>:
USER_HANDLER NAME=__RME_X64_USER53_Handler VECTNUM=53
ffffffff8020bad1:	0f 01 f8             	swapgs
ffffffff8020bad4:	6a 00                	push   $0x0
ffffffff8020bad6:	6a 35                	push   $0x35
ffffffff8020bad8:	e9 d7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020badd <__RME_X64_USER54_Handler>:
USER_HANDLER NAME=__RME_X64_USER54_Handler VECTNUM=54
ffffffff8020badd:	0f 01 f8             	swapgs
ffffffff8020bae0:	6a 00                	push   $0x0
ffffffff8020bae2:	6a 36                	push   $0x36
ffffffff8020bae4:	e9 cb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bae9 <__RME_X64_USER55_Handler>:
USER_HANDLER NAME=__RME_X64_USER55_Handler VECTNUM=55
ffffffff8020bae9:	0f 01 f8             	swapgs
ffffffff8020baec:	6a 00                	push   $0x0
ffffffff8020baee:	6a 37                	push   $0x37
ffffffff8020baf0:	e9 bf 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baf5 <__RME_X64_USER56_Handler>:
USER_HANDLER NAME=__RME_X64_USER56_Handler VECTNUM=56
ffffffff8020baf5:	0f 01 f8             	swapgs
ffffffff8020baf8:	6a 00                	push   $0x0
ffffffff8020bafa:	6a 38                	push   $0x38
ffffffff8020bafc:	e9 b3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb01 <__RME_X64_USER57_Handler>:
USER_HANDLER NAME=__RME_X64_USER57_Handler VECTNUM=57
ffffffff8020bb01:	0f 01 f8             	swapgs
ffffffff8020bb04:	6a 00                	push   $0x0
ffffffff8020bb06:	6a 39                	push   $0x39
ffffffff8020bb08:	e9 a7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb0d <__RME_X64_USER58_Handler>:
USER_HANDLER NAME=__RME_X64_USER58_Handler VECTNUM=58
ffffffff8020bb0d:	0f 01 f8             	swapgs
ffffffff8020bb10:	6a 00                	push   $0x0
ffffffff8020bb12:	6a 3a                	push   $0x3a
ffffffff8020bb14:	e9 9b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb19 <__RME_X64_USER59_Handler>:
USER_HANDLER NAME=__RME_X64_USER59_Handler VECTNUM=59
ffffffff8020bb19:	0f 01 f8             	swapgs
ffffffff8020bb1c:	6a 00                	push   $0x0
ffffffff8020bb1e:	6a 3b                	push   $0x3b
ffffffff8020bb20:	e9 8f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb25 <__RME_X64_USER60_Handler>:

USER_HANDLER NAME=__RME_X64_USER60_Handler VECTNUM=60
ffffffff8020bb25:	0f 01 f8             	swapgs
ffffffff8020bb28:	6a 00                	push   $0x0
ffffffff8020bb2a:	6a 3c                	push   $0x3c
ffffffff8020bb2c:	e9 83 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb31 <__RME_X64_USER61_Handler>:
USER_HANDLER NAME=__RME_X64_USER61_Handler VECTNUM=61
ffffffff8020bb31:	0f 01 f8             	swapgs
ffffffff8020bb34:	6a 00                	push   $0x0
ffffffff8020bb36:	6a 3d                	push   $0x3d
ffffffff8020bb38:	e9 77 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb3d <__RME_X64_USER62_Handler>:
USER_HANDLER NAME=__RME_X64_USER62_Handler VECTNUM=62
ffffffff8020bb3d:	0f 01 f8             	swapgs
ffffffff8020bb40:	6a 00                	push   $0x0
ffffffff8020bb42:	6a 3e                	push   $0x3e
ffffffff8020bb44:	e9 6b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb49 <__RME_X64_USER63_Handler>:
USER_HANDLER NAME=__RME_X64_USER63_Handler VECTNUM=63
ffffffff8020bb49:	0f 01 f8             	swapgs
ffffffff8020bb4c:	6a 00                	push   $0x0
ffffffff8020bb4e:	6a 3f                	push   $0x3f
ffffffff8020bb50:	e9 5f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb55 <__RME_X64_USER64_Handler>:
USER_HANDLER NAME=__RME_X64_USER64_Handler VECTNUM=64
ffffffff8020bb55:	0f 01 f8             	swapgs
ffffffff8020bb58:	6a 00                	push   $0x0
ffffffff8020bb5a:	6a 40                	push   $0x40
ffffffff8020bb5c:	e9 53 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb61 <__RME_X64_USER65_Handler>:
USER_HANDLER NAME=__RME_X64_USER65_Handler VECTNUM=65
ffffffff8020bb61:	0f 01 f8             	swapgs
ffffffff8020bb64:	6a 00                	push   $0x0
ffffffff8020bb66:	6a 41                	push   $0x41
ffffffff8020bb68:	e9 47 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb6d <__RME_X64_USER66_Handler>:
USER_HANDLER NAME=__RME_X64_USER66_Handler VECTNUM=66
ffffffff8020bb6d:	0f 01 f8             	swapgs
ffffffff8020bb70:	6a 00                	push   $0x0
ffffffff8020bb72:	6a 42                	push   $0x42
ffffffff8020bb74:	e9 3b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb79 <__RME_X64_USER67_Handler>:
USER_HANDLER NAME=__RME_X64_USER67_Handler VECTNUM=67
ffffffff8020bb79:	0f 01 f8             	swapgs
ffffffff8020bb7c:	6a 00                	push   $0x0
ffffffff8020bb7e:	6a 43                	push   $0x43
ffffffff8020bb80:	e9 2f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb85 <__RME_X64_USER68_Handler>:
USER_HANDLER NAME=__RME_X64_USER68_Handler VECTNUM=68
ffffffff8020bb85:	0f 01 f8             	swapgs
ffffffff8020bb88:	6a 00                	push   $0x0
ffffffff8020bb8a:	6a 44                	push   $0x44
ffffffff8020bb8c:	e9 23 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb91 <__RME_X64_USER69_Handler>:
USER_HANDLER NAME=__RME_X64_USER69_Handler VECTNUM=69
ffffffff8020bb91:	0f 01 f8             	swapgs
ffffffff8020bb94:	6a 00                	push   $0x0
ffffffff8020bb96:	6a 45                	push   $0x45
ffffffff8020bb98:	e9 17 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb9d <__RME_X64_USER70_Handler>:

USER_HANDLER NAME=__RME_X64_USER70_Handler VECTNUM=70
ffffffff8020bb9d:	0f 01 f8             	swapgs
ffffffff8020bba0:	6a 00                	push   $0x0
ffffffff8020bba2:	6a 46                	push   $0x46
ffffffff8020bba4:	e9 0b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bba9 <__RME_X64_USER71_Handler>:
USER_HANDLER NAME=__RME_X64_USER71_Handler VECTNUM=71
ffffffff8020bba9:	0f 01 f8             	swapgs
ffffffff8020bbac:	6a 00                	push   $0x0
ffffffff8020bbae:	6a 47                	push   $0x47
ffffffff8020bbb0:	e9 ff 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbb5 <__RME_X64_USER72_Handler>:
USER_HANDLER NAME=__RME_X64_USER72_Handler VECTNUM=72
ffffffff8020bbb5:	0f 01 f8             	swapgs
ffffffff8020bbb8:	6a 00                	push   $0x0
ffffffff8020bbba:	6a 48                	push   $0x48
ffffffff8020bbbc:	e9 f3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbc1 <__RME_X64_USER73_Handler>:
USER_HANDLER NAME=__RME_X64_USER73_Handler VECTNUM=73
ffffffff8020bbc1:	0f 01 f8             	swapgs
ffffffff8020bbc4:	6a 00                	push   $0x0
ffffffff8020bbc6:	6a 49                	push   $0x49
ffffffff8020bbc8:	e9 e7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbcd <__RME_X64_USER74_Handler>:
USER_HANDLER NAME=__RME_X64_USER74_Handler VECTNUM=74
ffffffff8020bbcd:	0f 01 f8             	swapgs
ffffffff8020bbd0:	6a 00                	push   $0x0
ffffffff8020bbd2:	6a 4a                	push   $0x4a
ffffffff8020bbd4:	e9 db 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbd9 <__RME_X64_USER75_Handler>:
USER_HANDLER NAME=__RME_X64_USER75_Handler VECTNUM=75
ffffffff8020bbd9:	0f 01 f8             	swapgs
ffffffff8020bbdc:	6a 00                	push   $0x0
ffffffff8020bbde:	6a 4b                	push   $0x4b
ffffffff8020bbe0:	e9 cf 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbe5 <__RME_X64_USER76_Handler>:
USER_HANDLER NAME=__RME_X64_USER76_Handler VECTNUM=76
ffffffff8020bbe5:	0f 01 f8             	swapgs
ffffffff8020bbe8:	6a 00                	push   $0x0
ffffffff8020bbea:	6a 4c                	push   $0x4c
ffffffff8020bbec:	e9 c3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbf1 <__RME_X64_USER77_Handler>:
USER_HANDLER NAME=__RME_X64_USER77_Handler VECTNUM=77
ffffffff8020bbf1:	0f 01 f8             	swapgs
ffffffff8020bbf4:	6a 00                	push   $0x0
ffffffff8020bbf6:	6a 4d                	push   $0x4d
ffffffff8020bbf8:	e9 b7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbfd <__RME_X64_USER78_Handler>:
USER_HANDLER NAME=__RME_X64_USER78_Handler VECTNUM=78
ffffffff8020bbfd:	0f 01 f8             	swapgs
ffffffff8020bc00:	6a 00                	push   $0x0
ffffffff8020bc02:	6a 4e                	push   $0x4e
ffffffff8020bc04:	e9 ab 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc09 <__RME_X64_USER79_Handler>:
USER_HANDLER NAME=__RME_X64_USER79_Handler VECTNUM=79
ffffffff8020bc09:	0f 01 f8             	swapgs
ffffffff8020bc0c:	6a 00                	push   $0x0
ffffffff8020bc0e:	6a 4f                	push   $0x4f
ffffffff8020bc10:	e9 9f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc15 <__RME_X64_USER80_Handler>:

USER_HANDLER NAME=__RME_X64_USER80_Handler VECTNUM=80
ffffffff8020bc15:	0f 01 f8             	swapgs
ffffffff8020bc18:	6a 00                	push   $0x0
ffffffff8020bc1a:	6a 50                	push   $0x50
ffffffff8020bc1c:	e9 93 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc21 <__RME_X64_USER81_Handler>:
USER_HANDLER NAME=__RME_X64_USER81_Handler VECTNUM=81
ffffffff8020bc21:	0f 01 f8             	swapgs
ffffffff8020bc24:	6a 00                	push   $0x0
ffffffff8020bc26:	6a 51                	push   $0x51
ffffffff8020bc28:	e9 87 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc2d <__RME_X64_USER82_Handler>:
USER_HANDLER NAME=__RME_X64_USER82_Handler VECTNUM=82
ffffffff8020bc2d:	0f 01 f8             	swapgs
ffffffff8020bc30:	6a 00                	push   $0x0
ffffffff8020bc32:	6a 52                	push   $0x52
ffffffff8020bc34:	e9 7b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc39 <__RME_X64_USER83_Handler>:
USER_HANDLER NAME=__RME_X64_USER83_Handler VECTNUM=83
ffffffff8020bc39:	0f 01 f8             	swapgs
ffffffff8020bc3c:	6a 00                	push   $0x0
ffffffff8020bc3e:	6a 53                	push   $0x53
ffffffff8020bc40:	e9 6f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc45 <__RME_X64_USER84_Handler>:
USER_HANDLER NAME=__RME_X64_USER84_Handler VECTNUM=84
ffffffff8020bc45:	0f 01 f8             	swapgs
ffffffff8020bc48:	6a 00                	push   $0x0
ffffffff8020bc4a:	6a 54                	push   $0x54
ffffffff8020bc4c:	e9 63 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc51 <__RME_X64_USER85_Handler>:
USER_HANDLER NAME=__RME_X64_USER85_Handler VECTNUM=85
ffffffff8020bc51:	0f 01 f8             	swapgs
ffffffff8020bc54:	6a 00                	push   $0x0
ffffffff8020bc56:	6a 55                	push   $0x55
ffffffff8020bc58:	e9 57 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc5d <__RME_X64_USER86_Handler>:
USER_HANDLER NAME=__RME_X64_USER86_Handler VECTNUM=86
ffffffff8020bc5d:	0f 01 f8             	swapgs
ffffffff8020bc60:	6a 00                	push   $0x0
ffffffff8020bc62:	6a 56                	push   $0x56
ffffffff8020bc64:	e9 4b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc69 <__RME_X64_USER87_Handler>:
USER_HANDLER NAME=__RME_X64_USER87_Handler VECTNUM=87
ffffffff8020bc69:	0f 01 f8             	swapgs
ffffffff8020bc6c:	6a 00                	push   $0x0
ffffffff8020bc6e:	6a 57                	push   $0x57
ffffffff8020bc70:	e9 3f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc75 <__RME_X64_USER88_Handler>:
USER_HANDLER NAME=__RME_X64_USER88_Handler VECTNUM=88
ffffffff8020bc75:	0f 01 f8             	swapgs
ffffffff8020bc78:	6a 00                	push   $0x0
ffffffff8020bc7a:	6a 58                	push   $0x58
ffffffff8020bc7c:	e9 33 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc81 <__RME_X64_USER89_Handler>:
USER_HANDLER NAME=__RME_X64_USER89_Handler VECTNUM=89
ffffffff8020bc81:	0f 01 f8             	swapgs
ffffffff8020bc84:	6a 00                	push   $0x0
ffffffff8020bc86:	6a 59                	push   $0x59
ffffffff8020bc88:	e9 27 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc8d <__RME_X64_USER90_Handler>:

USER_HANDLER NAME=__RME_X64_USER90_Handler VECTNUM=90
ffffffff8020bc8d:	0f 01 f8             	swapgs
ffffffff8020bc90:	6a 00                	push   $0x0
ffffffff8020bc92:	6a 5a                	push   $0x5a
ffffffff8020bc94:	e9 1b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc99 <__RME_X64_USER91_Handler>:
USER_HANDLER NAME=__RME_X64_USER91_Handler VECTNUM=91
ffffffff8020bc99:	0f 01 f8             	swapgs
ffffffff8020bc9c:	6a 00                	push   $0x0
ffffffff8020bc9e:	6a 5b                	push   $0x5b
ffffffff8020bca0:	e9 0f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bca5 <__RME_X64_USER92_Handler>:
USER_HANDLER NAME=__RME_X64_USER92_Handler VECTNUM=92
ffffffff8020bca5:	0f 01 f8             	swapgs
ffffffff8020bca8:	6a 00                	push   $0x0
ffffffff8020bcaa:	6a 5c                	push   $0x5c
ffffffff8020bcac:	e9 03 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcb1 <__RME_X64_USER93_Handler>:
USER_HANDLER NAME=__RME_X64_USER93_Handler VECTNUM=93
ffffffff8020bcb1:	0f 01 f8             	swapgs
ffffffff8020bcb4:	6a 00                	push   $0x0
ffffffff8020bcb6:	6a 5d                	push   $0x5d
ffffffff8020bcb8:	e9 f7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcbd <__RME_X64_USER94_Handler>:
USER_HANDLER NAME=__RME_X64_USER94_Handler VECTNUM=94
ffffffff8020bcbd:	0f 01 f8             	swapgs
ffffffff8020bcc0:	6a 00                	push   $0x0
ffffffff8020bcc2:	6a 5e                	push   $0x5e
ffffffff8020bcc4:	e9 eb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcc9 <__RME_X64_USER95_Handler>:
USER_HANDLER NAME=__RME_X64_USER95_Handler VECTNUM=95
ffffffff8020bcc9:	0f 01 f8             	swapgs
ffffffff8020bccc:	6a 00                	push   $0x0
ffffffff8020bcce:	6a 5f                	push   $0x5f
ffffffff8020bcd0:	e9 df 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcd5 <__RME_X64_USER96_Handler>:
USER_HANDLER NAME=__RME_X64_USER96_Handler VECTNUM=96
ffffffff8020bcd5:	0f 01 f8             	swapgs
ffffffff8020bcd8:	6a 00                	push   $0x0
ffffffff8020bcda:	6a 60                	push   $0x60
ffffffff8020bcdc:	e9 d3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bce1 <__RME_X64_USER97_Handler>:
USER_HANDLER NAME=__RME_X64_USER97_Handler VECTNUM=97
ffffffff8020bce1:	0f 01 f8             	swapgs
ffffffff8020bce4:	6a 00                	push   $0x0
ffffffff8020bce6:	6a 61                	push   $0x61
ffffffff8020bce8:	e9 c7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bced <__RME_X64_USER98_Handler>:
USER_HANDLER NAME=__RME_X64_USER98_Handler VECTNUM=98
ffffffff8020bced:	0f 01 f8             	swapgs
ffffffff8020bcf0:	6a 00                	push   $0x0
ffffffff8020bcf2:	6a 62                	push   $0x62
ffffffff8020bcf4:	e9 bb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcf9 <__RME_X64_USER99_Handler>:
USER_HANDLER NAME=__RME_X64_USER99_Handler VECTNUM=99
ffffffff8020bcf9:	0f 01 f8             	swapgs
ffffffff8020bcfc:	6a 00                	push   $0x0
ffffffff8020bcfe:	6a 63                	push   $0x63
ffffffff8020bd00:	e9 af 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd05 <__RME_X64_USER100_Handler>:

USER_HANDLER NAME=__RME_X64_USER100_Handler VECTNUM=100
ffffffff8020bd05:	0f 01 f8             	swapgs
ffffffff8020bd08:	6a 00                	push   $0x0
ffffffff8020bd0a:	6a 64                	push   $0x64
ffffffff8020bd0c:	e9 a3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd11 <__RME_X64_USER101_Handler>:
USER_HANDLER NAME=__RME_X64_USER101_Handler VECTNUM=101
ffffffff8020bd11:	0f 01 f8             	swapgs
ffffffff8020bd14:	6a 00                	push   $0x0
ffffffff8020bd16:	6a 65                	push   $0x65
ffffffff8020bd18:	e9 97 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd1d <__RME_X64_USER102_Handler>:
USER_HANDLER NAME=__RME_X64_USER102_Handler VECTNUM=102
ffffffff8020bd1d:	0f 01 f8             	swapgs
ffffffff8020bd20:	6a 00                	push   $0x0
ffffffff8020bd22:	6a 66                	push   $0x66
ffffffff8020bd24:	e9 8b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd29 <__RME_X64_USER103_Handler>:
USER_HANDLER NAME=__RME_X64_USER103_Handler VECTNUM=103
ffffffff8020bd29:	0f 01 f8             	swapgs
ffffffff8020bd2c:	6a 00                	push   $0x0
ffffffff8020bd2e:	6a 67                	push   $0x67
ffffffff8020bd30:	e9 7f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd35 <__RME_X64_USER104_Handler>:
USER_HANDLER NAME=__RME_X64_USER104_Handler VECTNUM=104
ffffffff8020bd35:	0f 01 f8             	swapgs
ffffffff8020bd38:	6a 00                	push   $0x0
ffffffff8020bd3a:	6a 68                	push   $0x68
ffffffff8020bd3c:	e9 73 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd41 <__RME_X64_USER105_Handler>:
USER_HANDLER NAME=__RME_X64_USER105_Handler VECTNUM=105
ffffffff8020bd41:	0f 01 f8             	swapgs
ffffffff8020bd44:	6a 00                	push   $0x0
ffffffff8020bd46:	6a 69                	push   $0x69
ffffffff8020bd48:	e9 67 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd4d <__RME_X64_USER106_Handler>:
USER_HANDLER NAME=__RME_X64_USER106_Handler VECTNUM=106
ffffffff8020bd4d:	0f 01 f8             	swapgs
ffffffff8020bd50:	6a 00                	push   $0x0
ffffffff8020bd52:	6a 6a                	push   $0x6a
ffffffff8020bd54:	e9 5b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd59 <__RME_X64_USER107_Handler>:
USER_HANDLER NAME=__RME_X64_USER107_Handler VECTNUM=107
ffffffff8020bd59:	0f 01 f8             	swapgs
ffffffff8020bd5c:	6a 00                	push   $0x0
ffffffff8020bd5e:	6a 6b                	push   $0x6b
ffffffff8020bd60:	e9 4f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd65 <__RME_X64_USER108_Handler>:
USER_HANDLER NAME=__RME_X64_USER108_Handler VECTNUM=108
ffffffff8020bd65:	0f 01 f8             	swapgs
ffffffff8020bd68:	6a 00                	push   $0x0
ffffffff8020bd6a:	6a 6c                	push   $0x6c
ffffffff8020bd6c:	e9 43 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd71 <__RME_X64_USER109_Handler>:
USER_HANDLER NAME=__RME_X64_USER109_Handler VECTNUM=109
ffffffff8020bd71:	0f 01 f8             	swapgs
ffffffff8020bd74:	6a 00                	push   $0x0
ffffffff8020bd76:	6a 6d                	push   $0x6d
ffffffff8020bd78:	e9 37 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd7d <__RME_X64_USER110_Handler>:

USER_HANDLER NAME=__RME_X64_USER110_Handler VECTNUM=110
ffffffff8020bd7d:	0f 01 f8             	swapgs
ffffffff8020bd80:	6a 00                	push   $0x0
ffffffff8020bd82:	6a 6e                	push   $0x6e
ffffffff8020bd84:	e9 2b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd89 <__RME_X64_USER111_Handler>:
USER_HANDLER NAME=__RME_X64_USER111_Handler VECTNUM=111
ffffffff8020bd89:	0f 01 f8             	swapgs
ffffffff8020bd8c:	6a 00                	push   $0x0
ffffffff8020bd8e:	6a 6f                	push   $0x6f
ffffffff8020bd90:	e9 1f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd95 <__RME_X64_USER112_Handler>:
USER_HANDLER NAME=__RME_X64_USER112_Handler VECTNUM=112
ffffffff8020bd95:	0f 01 f8             	swapgs
ffffffff8020bd98:	6a 00                	push   $0x0
ffffffff8020bd9a:	6a 70                	push   $0x70
ffffffff8020bd9c:	e9 13 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bda1 <__RME_X64_USER113_Handler>:
USER_HANDLER NAME=__RME_X64_USER113_Handler VECTNUM=113
ffffffff8020bda1:	0f 01 f8             	swapgs
ffffffff8020bda4:	6a 00                	push   $0x0
ffffffff8020bda6:	6a 71                	push   $0x71
ffffffff8020bda8:	e9 07 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdad <__RME_X64_USER114_Handler>:
USER_HANDLER NAME=__RME_X64_USER114_Handler VECTNUM=114
ffffffff8020bdad:	0f 01 f8             	swapgs
ffffffff8020bdb0:	6a 00                	push   $0x0
ffffffff8020bdb2:	6a 72                	push   $0x72
ffffffff8020bdb4:	e9 fb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdb9 <__RME_X64_USER115_Handler>:
USER_HANDLER NAME=__RME_X64_USER115_Handler VECTNUM=115
ffffffff8020bdb9:	0f 01 f8             	swapgs
ffffffff8020bdbc:	6a 00                	push   $0x0
ffffffff8020bdbe:	6a 73                	push   $0x73
ffffffff8020bdc0:	e9 ef 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdc5 <__RME_X64_USER116_Handler>:
USER_HANDLER NAME=__RME_X64_USER116_Handler VECTNUM=116
ffffffff8020bdc5:	0f 01 f8             	swapgs
ffffffff8020bdc8:	6a 00                	push   $0x0
ffffffff8020bdca:	6a 74                	push   $0x74
ffffffff8020bdcc:	e9 e3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdd1 <__RME_X64_USER117_Handler>:
USER_HANDLER NAME=__RME_X64_USER117_Handler VECTNUM=117
ffffffff8020bdd1:	0f 01 f8             	swapgs
ffffffff8020bdd4:	6a 00                	push   $0x0
ffffffff8020bdd6:	6a 75                	push   $0x75
ffffffff8020bdd8:	e9 d7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bddd <__RME_X64_USER118_Handler>:
USER_HANDLER NAME=__RME_X64_USER118_Handler VECTNUM=118
ffffffff8020bddd:	0f 01 f8             	swapgs
ffffffff8020bde0:	6a 00                	push   $0x0
ffffffff8020bde2:	6a 76                	push   $0x76
ffffffff8020bde4:	e9 cb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bde9 <__RME_X64_USER119_Handler>:
USER_HANDLER NAME=__RME_X64_USER119_Handler VECTNUM=119
ffffffff8020bde9:	0f 01 f8             	swapgs
ffffffff8020bdec:	6a 00                	push   $0x0
ffffffff8020bdee:	6a 77                	push   $0x77
ffffffff8020bdf0:	e9 bf 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdf5 <__RME_X64_USER120_Handler>:

USER_HANDLER NAME=__RME_X64_USER120_Handler VECTNUM=120
ffffffff8020bdf5:	0f 01 f8             	swapgs
ffffffff8020bdf8:	6a 00                	push   $0x0
ffffffff8020bdfa:	6a 78                	push   $0x78
ffffffff8020bdfc:	e9 b3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be01 <__RME_X64_USER121_Handler>:
USER_HANDLER NAME=__RME_X64_USER121_Handler VECTNUM=121
ffffffff8020be01:	0f 01 f8             	swapgs
ffffffff8020be04:	6a 00                	push   $0x0
ffffffff8020be06:	6a 79                	push   $0x79
ffffffff8020be08:	e9 a7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be0d <__RME_X64_USER122_Handler>:
USER_HANDLER NAME=__RME_X64_USER122_Handler VECTNUM=122
ffffffff8020be0d:	0f 01 f8             	swapgs
ffffffff8020be10:	6a 00                	push   $0x0
ffffffff8020be12:	6a 7a                	push   $0x7a
ffffffff8020be14:	e9 9b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be19 <__RME_X64_USER123_Handler>:
USER_HANDLER NAME=__RME_X64_USER123_Handler VECTNUM=123
ffffffff8020be19:	0f 01 f8             	swapgs
ffffffff8020be1c:	6a 00                	push   $0x0
ffffffff8020be1e:	6a 7b                	push   $0x7b
ffffffff8020be20:	e9 8f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be25 <__RME_X64_USER124_Handler>:
USER_HANDLER NAME=__RME_X64_USER124_Handler VECTNUM=124
ffffffff8020be25:	0f 01 f8             	swapgs
ffffffff8020be28:	6a 00                	push   $0x0
ffffffff8020be2a:	6a 7c                	push   $0x7c
ffffffff8020be2c:	e9 83 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be31 <__RME_X64_USER125_Handler>:
USER_HANDLER NAME=__RME_X64_USER125_Handler VECTNUM=125
ffffffff8020be31:	0f 01 f8             	swapgs
ffffffff8020be34:	6a 00                	push   $0x0
ffffffff8020be36:	6a 7d                	push   $0x7d
ffffffff8020be38:	e9 77 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be3d <__RME_X64_USER126_Handler>:
USER_HANDLER NAME=__RME_X64_USER126_Handler VECTNUM=126
ffffffff8020be3d:	0f 01 f8             	swapgs
ffffffff8020be40:	6a 00                	push   $0x0
ffffffff8020be42:	6a 7e                	push   $0x7e
ffffffff8020be44:	e9 6b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be49 <__RME_X64_USER127_Handler>:
USER_HANDLER NAME=__RME_X64_USER127_Handler VECTNUM=127
ffffffff8020be49:	0f 01 f8             	swapgs
ffffffff8020be4c:	6a 00                	push   $0x0
ffffffff8020be4e:	6a 7f                	push   $0x7f
ffffffff8020be50:	e9 5f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be55 <__RME_X64_USER128_Handler>:
USER_HANDLER NAME=__RME_X64_USER128_Handler VECTNUM=128
ffffffff8020be55:	0f 01 f8             	swapgs
ffffffff8020be58:	6a 00                	push   $0x0
ffffffff8020be5a:	68 80 00 00 00       	push   $0x80
ffffffff8020be5f:	e9 50 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be64 <__RME_X64_USER129_Handler>:
USER_HANDLER NAME=__RME_X64_USER129_Handler VECTNUM=129
ffffffff8020be64:	0f 01 f8             	swapgs
ffffffff8020be67:	6a 00                	push   $0x0
ffffffff8020be69:	68 81 00 00 00       	push   $0x81
ffffffff8020be6e:	e9 41 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be73 <__RME_X64_USER130_Handler>:

USER_HANDLER NAME=__RME_X64_USER130_Handler VECTNUM=130
ffffffff8020be73:	0f 01 f8             	swapgs
ffffffff8020be76:	6a 00                	push   $0x0
ffffffff8020be78:	68 82 00 00 00       	push   $0x82
ffffffff8020be7d:	e9 32 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be82 <__RME_X64_USER131_Handler>:
USER_HANDLER NAME=__RME_X64_USER131_Handler VECTNUM=131
ffffffff8020be82:	0f 01 f8             	swapgs
ffffffff8020be85:	6a 00                	push   $0x0
ffffffff8020be87:	68 83 00 00 00       	push   $0x83
ffffffff8020be8c:	e9 23 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be91 <__RME_X64_USER132_Handler>:
USER_HANDLER NAME=__RME_X64_USER132_Handler VECTNUM=132
ffffffff8020be91:	0f 01 f8             	swapgs
ffffffff8020be94:	6a 00                	push   $0x0
ffffffff8020be96:	68 84 00 00 00       	push   $0x84
ffffffff8020be9b:	e9 14 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bea0 <__RME_X64_USER133_Handler>:
USER_HANDLER NAME=__RME_X64_USER133_Handler VECTNUM=133
ffffffff8020bea0:	0f 01 f8             	swapgs
ffffffff8020bea3:	6a 00                	push   $0x0
ffffffff8020bea5:	68 85 00 00 00       	push   $0x85
ffffffff8020beaa:	e9 05 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beaf <__RME_X64_USER134_Handler>:
USER_HANDLER NAME=__RME_X64_USER134_Handler VECTNUM=134
ffffffff8020beaf:	0f 01 f8             	swapgs
ffffffff8020beb2:	6a 00                	push   $0x0
ffffffff8020beb4:	68 86 00 00 00       	push   $0x86
ffffffff8020beb9:	e9 f6 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bebe <__RME_X64_USER135_Handler>:
USER_HANDLER NAME=__RME_X64_USER135_Handler VECTNUM=135
ffffffff8020bebe:	0f 01 f8             	swapgs
ffffffff8020bec1:	6a 00                	push   $0x0
ffffffff8020bec3:	68 87 00 00 00       	push   $0x87
ffffffff8020bec8:	e9 e7 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020becd <__RME_X64_USER136_Handler>:
USER_HANDLER NAME=__RME_X64_USER136_Handler VECTNUM=136
ffffffff8020becd:	0f 01 f8             	swapgs
ffffffff8020bed0:	6a 00                	push   $0x0
ffffffff8020bed2:	68 88 00 00 00       	push   $0x88
ffffffff8020bed7:	e9 d8 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bedc <__RME_X64_USER137_Handler>:
USER_HANDLER NAME=__RME_X64_USER137_Handler VECTNUM=137
ffffffff8020bedc:	0f 01 f8             	swapgs
ffffffff8020bedf:	6a 00                	push   $0x0
ffffffff8020bee1:	68 89 00 00 00       	push   $0x89
ffffffff8020bee6:	e9 c9 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beeb <__RME_X64_USER138_Handler>:
USER_HANDLER NAME=__RME_X64_USER138_Handler VECTNUM=138
ffffffff8020beeb:	0f 01 f8             	swapgs
ffffffff8020beee:	6a 00                	push   $0x0
ffffffff8020bef0:	68 8a 00 00 00       	push   $0x8a
ffffffff8020bef5:	e9 ba 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020befa <__RME_X64_USER139_Handler>:
USER_HANDLER NAME=__RME_X64_USER139_Handler VECTNUM=139
ffffffff8020befa:	0f 01 f8             	swapgs
ffffffff8020befd:	6a 00                	push   $0x0
ffffffff8020beff:	68 8b 00 00 00       	push   $0x8b
ffffffff8020bf04:	e9 ab 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf09 <__RME_X64_USER140_Handler>:

USER_HANDLER NAME=__RME_X64_USER140_Handler VECTNUM=140
ffffffff8020bf09:	0f 01 f8             	swapgs
ffffffff8020bf0c:	6a 00                	push   $0x0
ffffffff8020bf0e:	68 8c 00 00 00       	push   $0x8c
ffffffff8020bf13:	e9 9c 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf18 <__RME_X64_USER141_Handler>:
USER_HANDLER NAME=__RME_X64_USER141_Handler VECTNUM=141
ffffffff8020bf18:	0f 01 f8             	swapgs
ffffffff8020bf1b:	6a 00                	push   $0x0
ffffffff8020bf1d:	68 8d 00 00 00       	push   $0x8d
ffffffff8020bf22:	e9 8d 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf27 <__RME_X64_USER142_Handler>:
USER_HANDLER NAME=__RME_X64_USER142_Handler VECTNUM=142
ffffffff8020bf27:	0f 01 f8             	swapgs
ffffffff8020bf2a:	6a 00                	push   $0x0
ffffffff8020bf2c:	68 8e 00 00 00       	push   $0x8e
ffffffff8020bf31:	e9 7e 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf36 <__RME_X64_USER143_Handler>:
USER_HANDLER NAME=__RME_X64_USER143_Handler VECTNUM=143
ffffffff8020bf36:	0f 01 f8             	swapgs
ffffffff8020bf39:	6a 00                	push   $0x0
ffffffff8020bf3b:	68 8f 00 00 00       	push   $0x8f
ffffffff8020bf40:	e9 6f 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf45 <__RME_X64_USER144_Handler>:
USER_HANDLER NAME=__RME_X64_USER144_Handler VECTNUM=144
ffffffff8020bf45:	0f 01 f8             	swapgs
ffffffff8020bf48:	6a 00                	push   $0x0
ffffffff8020bf4a:	68 90 00 00 00       	push   $0x90
ffffffff8020bf4f:	e9 60 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf54 <__RME_X64_USER145_Handler>:
USER_HANDLER NAME=__RME_X64_USER145_Handler VECTNUM=145
ffffffff8020bf54:	0f 01 f8             	swapgs
ffffffff8020bf57:	6a 00                	push   $0x0
ffffffff8020bf59:	68 91 00 00 00       	push   $0x91
ffffffff8020bf5e:	e9 51 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf63 <__RME_X64_USER146_Handler>:
USER_HANDLER NAME=__RME_X64_USER146_Handler VECTNUM=146
ffffffff8020bf63:	0f 01 f8             	swapgs
ffffffff8020bf66:	6a 00                	push   $0x0
ffffffff8020bf68:	68 92 00 00 00       	push   $0x92
ffffffff8020bf6d:	e9 42 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf72 <__RME_X64_USER147_Handler>:
USER_HANDLER NAME=__RME_X64_USER147_Handler VECTNUM=147
ffffffff8020bf72:	0f 01 f8             	swapgs
ffffffff8020bf75:	6a 00                	push   $0x0
ffffffff8020bf77:	68 93 00 00 00       	push   $0x93
ffffffff8020bf7c:	e9 33 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf81 <__RME_X64_USER148_Handler>:
USER_HANDLER NAME=__RME_X64_USER148_Handler VECTNUM=148
ffffffff8020bf81:	0f 01 f8             	swapgs
ffffffff8020bf84:	6a 00                	push   $0x0
ffffffff8020bf86:	68 94 00 00 00       	push   $0x94
ffffffff8020bf8b:	e9 24 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf90 <__RME_X64_USER149_Handler>:
USER_HANDLER NAME=__RME_X64_USER149_Handler VECTNUM=149
ffffffff8020bf90:	0f 01 f8             	swapgs
ffffffff8020bf93:	6a 00                	push   $0x0
ffffffff8020bf95:	68 95 00 00 00       	push   $0x95
ffffffff8020bf9a:	e9 15 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf9f <__RME_X64_USER150_Handler>:

USER_HANDLER NAME=__RME_X64_USER150_Handler VECTNUM=150
ffffffff8020bf9f:	0f 01 f8             	swapgs
ffffffff8020bfa2:	6a 00                	push   $0x0
ffffffff8020bfa4:	68 96 00 00 00       	push   $0x96
ffffffff8020bfa9:	e9 06 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfae <__RME_X64_USER151_Handler>:
USER_HANDLER NAME=__RME_X64_USER151_Handler VECTNUM=151
ffffffff8020bfae:	0f 01 f8             	swapgs
ffffffff8020bfb1:	6a 00                	push   $0x0
ffffffff8020bfb3:	68 97 00 00 00       	push   $0x97
ffffffff8020bfb8:	e9 f7 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfbd <__RME_X64_USER152_Handler>:
USER_HANDLER NAME=__RME_X64_USER152_Handler VECTNUM=152
ffffffff8020bfbd:	0f 01 f8             	swapgs
ffffffff8020bfc0:	6a 00                	push   $0x0
ffffffff8020bfc2:	68 98 00 00 00       	push   $0x98
ffffffff8020bfc7:	e9 e8 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfcc <__RME_X64_USER153_Handler>:
USER_HANDLER NAME=__RME_X64_USER153_Handler VECTNUM=153
ffffffff8020bfcc:	0f 01 f8             	swapgs
ffffffff8020bfcf:	6a 00                	push   $0x0
ffffffff8020bfd1:	68 99 00 00 00       	push   $0x99
ffffffff8020bfd6:	e9 d9 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfdb <__RME_X64_USER154_Handler>:
USER_HANDLER NAME=__RME_X64_USER154_Handler VECTNUM=154
ffffffff8020bfdb:	0f 01 f8             	swapgs
ffffffff8020bfde:	6a 00                	push   $0x0
ffffffff8020bfe0:	68 9a 00 00 00       	push   $0x9a
ffffffff8020bfe5:	e9 ca 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfea <__RME_X64_USER155_Handler>:
USER_HANDLER NAME=__RME_X64_USER155_Handler VECTNUM=155
ffffffff8020bfea:	0f 01 f8             	swapgs
ffffffff8020bfed:	6a 00                	push   $0x0
ffffffff8020bfef:	68 9b 00 00 00       	push   $0x9b
ffffffff8020bff4:	e9 bb 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bff9 <__RME_X64_USER156_Handler>:
USER_HANDLER NAME=__RME_X64_USER156_Handler VECTNUM=156
ffffffff8020bff9:	0f 01 f8             	swapgs
ffffffff8020bffc:	6a 00                	push   $0x0
ffffffff8020bffe:	68 9c 00 00 00       	push   $0x9c
ffffffff8020c003:	e9 ac 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c008 <__RME_X64_USER157_Handler>:
USER_HANDLER NAME=__RME_X64_USER157_Handler VECTNUM=157
ffffffff8020c008:	0f 01 f8             	swapgs
ffffffff8020c00b:	6a 00                	push   $0x0
ffffffff8020c00d:	68 9d 00 00 00       	push   $0x9d
ffffffff8020c012:	e9 9d 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c017 <__RME_X64_USER158_Handler>:
USER_HANDLER NAME=__RME_X64_USER158_Handler VECTNUM=158
ffffffff8020c017:	0f 01 f8             	swapgs
ffffffff8020c01a:	6a 00                	push   $0x0
ffffffff8020c01c:	68 9e 00 00 00       	push   $0x9e
ffffffff8020c021:	e9 8e 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c026 <__RME_X64_USER159_Handler>:
USER_HANDLER NAME=__RME_X64_USER159_Handler VECTNUM=159
ffffffff8020c026:	0f 01 f8             	swapgs
ffffffff8020c029:	6a 00                	push   $0x0
ffffffff8020c02b:	68 9f 00 00 00       	push   $0x9f
ffffffff8020c030:	e9 7f 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c035 <__RME_X64_USER160_Handler>:

USER_HANDLER NAME=__RME_X64_USER160_Handler VECTNUM=160
ffffffff8020c035:	0f 01 f8             	swapgs
ffffffff8020c038:	6a 00                	push   $0x0
ffffffff8020c03a:	68 a0 00 00 00       	push   $0xa0
ffffffff8020c03f:	e9 70 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c044 <__RME_X64_USER161_Handler>:
USER_HANDLER NAME=__RME_X64_USER161_Handler VECTNUM=161
ffffffff8020c044:	0f 01 f8             	swapgs
ffffffff8020c047:	6a 00                	push   $0x0
ffffffff8020c049:	68 a1 00 00 00       	push   $0xa1
ffffffff8020c04e:	e9 61 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c053 <__RME_X64_USER162_Handler>:
USER_HANDLER NAME=__RME_X64_USER162_Handler VECTNUM=162
ffffffff8020c053:	0f 01 f8             	swapgs
ffffffff8020c056:	6a 00                	push   $0x0
ffffffff8020c058:	68 a2 00 00 00       	push   $0xa2
ffffffff8020c05d:	e9 52 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c062 <__RME_X64_USER163_Handler>:
USER_HANDLER NAME=__RME_X64_USER163_Handler VECTNUM=163
ffffffff8020c062:	0f 01 f8             	swapgs
ffffffff8020c065:	6a 00                	push   $0x0
ffffffff8020c067:	68 a3 00 00 00       	push   $0xa3
ffffffff8020c06c:	e9 43 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c071 <__RME_X64_USER164_Handler>:
USER_HANDLER NAME=__RME_X64_USER164_Handler VECTNUM=164
ffffffff8020c071:	0f 01 f8             	swapgs
ffffffff8020c074:	6a 00                	push   $0x0
ffffffff8020c076:	68 a4 00 00 00       	push   $0xa4
ffffffff8020c07b:	e9 34 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c080 <__RME_X64_USER165_Handler>:
USER_HANDLER NAME=__RME_X64_USER165_Handler VECTNUM=165
ffffffff8020c080:	0f 01 f8             	swapgs
ffffffff8020c083:	6a 00                	push   $0x0
ffffffff8020c085:	68 a5 00 00 00       	push   $0xa5
ffffffff8020c08a:	e9 25 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c08f <__RME_X64_USER166_Handler>:
USER_HANDLER NAME=__RME_X64_USER166_Handler VECTNUM=166
ffffffff8020c08f:	0f 01 f8             	swapgs
ffffffff8020c092:	6a 00                	push   $0x0
ffffffff8020c094:	68 a6 00 00 00       	push   $0xa6
ffffffff8020c099:	e9 16 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c09e <__RME_X64_USER167_Handler>:
USER_HANDLER NAME=__RME_X64_USER167_Handler VECTNUM=167
ffffffff8020c09e:	0f 01 f8             	swapgs
ffffffff8020c0a1:	6a 00                	push   $0x0
ffffffff8020c0a3:	68 a7 00 00 00       	push   $0xa7
ffffffff8020c0a8:	e9 07 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0ad <__RME_X64_USER168_Handler>:
USER_HANDLER NAME=__RME_X64_USER168_Handler VECTNUM=168
ffffffff8020c0ad:	0f 01 f8             	swapgs
ffffffff8020c0b0:	6a 00                	push   $0x0
ffffffff8020c0b2:	68 a8 00 00 00       	push   $0xa8
ffffffff8020c0b7:	e9 f8 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0bc <__RME_X64_USER169_Handler>:
USER_HANDLER NAME=__RME_X64_USER169_Handler VECTNUM=169
ffffffff8020c0bc:	0f 01 f8             	swapgs
ffffffff8020c0bf:	6a 00                	push   $0x0
ffffffff8020c0c1:	68 a9 00 00 00       	push   $0xa9
ffffffff8020c0c6:	e9 e9 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0cb <__RME_X64_USER170_Handler>:

USER_HANDLER NAME=__RME_X64_USER170_Handler VECTNUM=170
ffffffff8020c0cb:	0f 01 f8             	swapgs
ffffffff8020c0ce:	6a 00                	push   $0x0
ffffffff8020c0d0:	68 aa 00 00 00       	push   $0xaa
ffffffff8020c0d5:	e9 da 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0da <__RME_X64_USER171_Handler>:
USER_HANDLER NAME=__RME_X64_USER171_Handler VECTNUM=171
ffffffff8020c0da:	0f 01 f8             	swapgs
ffffffff8020c0dd:	6a 00                	push   $0x0
ffffffff8020c0df:	68 ab 00 00 00       	push   $0xab
ffffffff8020c0e4:	e9 cb 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0e9 <__RME_X64_USER172_Handler>:
USER_HANDLER NAME=__RME_X64_USER172_Handler VECTNUM=172
ffffffff8020c0e9:	0f 01 f8             	swapgs
ffffffff8020c0ec:	6a 00                	push   $0x0
ffffffff8020c0ee:	68 ac 00 00 00       	push   $0xac
ffffffff8020c0f3:	e9 bc 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0f8 <__RME_X64_USER173_Handler>:
USER_HANDLER NAME=__RME_X64_USER173_Handler VECTNUM=173
ffffffff8020c0f8:	0f 01 f8             	swapgs
ffffffff8020c0fb:	6a 00                	push   $0x0
ffffffff8020c0fd:	68 ad 00 00 00       	push   $0xad
ffffffff8020c102:	e9 ad 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c107 <__RME_X64_USER174_Handler>:
USER_HANDLER NAME=__RME_X64_USER174_Handler VECTNUM=174
ffffffff8020c107:	0f 01 f8             	swapgs
ffffffff8020c10a:	6a 00                	push   $0x0
ffffffff8020c10c:	68 ae 00 00 00       	push   $0xae
ffffffff8020c111:	e9 9e 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c116 <__RME_X64_USER175_Handler>:
USER_HANDLER NAME=__RME_X64_USER175_Handler VECTNUM=175
ffffffff8020c116:	0f 01 f8             	swapgs
ffffffff8020c119:	6a 00                	push   $0x0
ffffffff8020c11b:	68 af 00 00 00       	push   $0xaf
ffffffff8020c120:	e9 8f 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c125 <__RME_X64_USER176_Handler>:
USER_HANDLER NAME=__RME_X64_USER176_Handler VECTNUM=176
ffffffff8020c125:	0f 01 f8             	swapgs
ffffffff8020c128:	6a 00                	push   $0x0
ffffffff8020c12a:	68 b0 00 00 00       	push   $0xb0
ffffffff8020c12f:	e9 80 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c134 <__RME_X64_USER177_Handler>:
USER_HANDLER NAME=__RME_X64_USER177_Handler VECTNUM=177
ffffffff8020c134:	0f 01 f8             	swapgs
ffffffff8020c137:	6a 00                	push   $0x0
ffffffff8020c139:	68 b1 00 00 00       	push   $0xb1
ffffffff8020c13e:	e9 71 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c143 <__RME_X64_USER178_Handler>:
USER_HANDLER NAME=__RME_X64_USER178_Handler VECTNUM=178
ffffffff8020c143:	0f 01 f8             	swapgs
ffffffff8020c146:	6a 00                	push   $0x0
ffffffff8020c148:	68 b2 00 00 00       	push   $0xb2
ffffffff8020c14d:	e9 62 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c152 <__RME_X64_USER179_Handler>:
USER_HANDLER NAME=__RME_X64_USER179_Handler VECTNUM=179
ffffffff8020c152:	0f 01 f8             	swapgs
ffffffff8020c155:	6a 00                	push   $0x0
ffffffff8020c157:	68 b3 00 00 00       	push   $0xb3
ffffffff8020c15c:	e9 53 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c161 <__RME_X64_USER180_Handler>:

USER_HANDLER NAME=__RME_X64_USER180_Handler VECTNUM=180
ffffffff8020c161:	0f 01 f8             	swapgs
ffffffff8020c164:	6a 00                	push   $0x0
ffffffff8020c166:	68 b4 00 00 00       	push   $0xb4
ffffffff8020c16b:	e9 44 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c170 <__RME_X64_USER181_Handler>:
USER_HANDLER NAME=__RME_X64_USER181_Handler VECTNUM=181
ffffffff8020c170:	0f 01 f8             	swapgs
ffffffff8020c173:	6a 00                	push   $0x0
ffffffff8020c175:	68 b5 00 00 00       	push   $0xb5
ffffffff8020c17a:	e9 35 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c17f <__RME_X64_USER182_Handler>:
USER_HANDLER NAME=__RME_X64_USER182_Handler VECTNUM=182
ffffffff8020c17f:	0f 01 f8             	swapgs
ffffffff8020c182:	6a 00                	push   $0x0
ffffffff8020c184:	68 b6 00 00 00       	push   $0xb6
ffffffff8020c189:	e9 26 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c18e <__RME_X64_USER183_Handler>:
USER_HANDLER NAME=__RME_X64_USER183_Handler VECTNUM=183
ffffffff8020c18e:	0f 01 f8             	swapgs
ffffffff8020c191:	6a 00                	push   $0x0
ffffffff8020c193:	68 b7 00 00 00       	push   $0xb7
ffffffff8020c198:	e9 17 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c19d <__RME_X64_USER184_Handler>:
USER_HANDLER NAME=__RME_X64_USER184_Handler VECTNUM=184
ffffffff8020c19d:	0f 01 f8             	swapgs
ffffffff8020c1a0:	6a 00                	push   $0x0
ffffffff8020c1a2:	68 b8 00 00 00       	push   $0xb8
ffffffff8020c1a7:	e9 08 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ac <__RME_X64_USER185_Handler>:
USER_HANDLER NAME=__RME_X64_USER185_Handler VECTNUM=185
ffffffff8020c1ac:	0f 01 f8             	swapgs
ffffffff8020c1af:	6a 00                	push   $0x0
ffffffff8020c1b1:	68 b9 00 00 00       	push   $0xb9
ffffffff8020c1b6:	e9 f9 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1bb <__RME_X64_USER186_Handler>:
USER_HANDLER NAME=__RME_X64_USER186_Handler VECTNUM=186
ffffffff8020c1bb:	0f 01 f8             	swapgs
ffffffff8020c1be:	6a 00                	push   $0x0
ffffffff8020c1c0:	68 ba 00 00 00       	push   $0xba
ffffffff8020c1c5:	e9 ea 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ca <__RME_X64_USER187_Handler>:
USER_HANDLER NAME=__RME_X64_USER187_Handler VECTNUM=187
ffffffff8020c1ca:	0f 01 f8             	swapgs
ffffffff8020c1cd:	6a 00                	push   $0x0
ffffffff8020c1cf:	68 bb 00 00 00       	push   $0xbb
ffffffff8020c1d4:	e9 db 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1d9 <__RME_X64_USER188_Handler>:
USER_HANDLER NAME=__RME_X64_USER188_Handler VECTNUM=188
ffffffff8020c1d9:	0f 01 f8             	swapgs
ffffffff8020c1dc:	6a 00                	push   $0x0
ffffffff8020c1de:	68 bc 00 00 00       	push   $0xbc
ffffffff8020c1e3:	e9 cc 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1e8 <__RME_X64_USER189_Handler>:
USER_HANDLER NAME=__RME_X64_USER189_Handler VECTNUM=189
ffffffff8020c1e8:	0f 01 f8             	swapgs
ffffffff8020c1eb:	6a 00                	push   $0x0
ffffffff8020c1ed:	68 bd 00 00 00       	push   $0xbd
ffffffff8020c1f2:	e9 bd 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1f7 <__RME_X64_USER190_Handler>:

USER_HANDLER NAME=__RME_X64_USER190_Handler VECTNUM=190
ffffffff8020c1f7:	0f 01 f8             	swapgs
ffffffff8020c1fa:	6a 00                	push   $0x0
ffffffff8020c1fc:	68 be 00 00 00       	push   $0xbe
ffffffff8020c201:	e9 ae 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c206 <__RME_X64_USER191_Handler>:
USER_HANDLER NAME=__RME_X64_USER191_Handler VECTNUM=191
ffffffff8020c206:	0f 01 f8             	swapgs
ffffffff8020c209:	6a 00                	push   $0x0
ffffffff8020c20b:	68 bf 00 00 00       	push   $0xbf
ffffffff8020c210:	e9 9f 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c215 <__RME_X64_USER192_Handler>:
USER_HANDLER NAME=__RME_X64_USER192_Handler VECTNUM=192
ffffffff8020c215:	0f 01 f8             	swapgs
ffffffff8020c218:	6a 00                	push   $0x0
ffffffff8020c21a:	68 c0 00 00 00       	push   $0xc0
ffffffff8020c21f:	e9 90 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c224 <__RME_X64_USER193_Handler>:
USER_HANDLER NAME=__RME_X64_USER193_Handler VECTNUM=193
ffffffff8020c224:	0f 01 f8             	swapgs
ffffffff8020c227:	6a 00                	push   $0x0
ffffffff8020c229:	68 c1 00 00 00       	push   $0xc1
ffffffff8020c22e:	e9 81 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c233 <__RME_X64_USER194_Handler>:
USER_HANDLER NAME=__RME_X64_USER194_Handler VECTNUM=194
ffffffff8020c233:	0f 01 f8             	swapgs
ffffffff8020c236:	6a 00                	push   $0x0
ffffffff8020c238:	68 c2 00 00 00       	push   $0xc2
ffffffff8020c23d:	e9 72 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c242 <__RME_X64_USER195_Handler>:
USER_HANDLER NAME=__RME_X64_USER195_Handler VECTNUM=195
ffffffff8020c242:	0f 01 f8             	swapgs
ffffffff8020c245:	6a 00                	push   $0x0
ffffffff8020c247:	68 c3 00 00 00       	push   $0xc3
ffffffff8020c24c:	e9 63 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c251 <__RME_X64_USER196_Handler>:
USER_HANDLER NAME=__RME_X64_USER196_Handler VECTNUM=196
ffffffff8020c251:	0f 01 f8             	swapgs
ffffffff8020c254:	6a 00                	push   $0x0
ffffffff8020c256:	68 c4 00 00 00       	push   $0xc4
ffffffff8020c25b:	e9 54 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c260 <__RME_X64_USER197_Handler>:
USER_HANDLER NAME=__RME_X64_USER197_Handler VECTNUM=197
ffffffff8020c260:	0f 01 f8             	swapgs
ffffffff8020c263:	6a 00                	push   $0x0
ffffffff8020c265:	68 c5 00 00 00       	push   $0xc5
ffffffff8020c26a:	e9 45 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c26f <__RME_X64_USER198_Handler>:
USER_HANDLER NAME=__RME_X64_USER198_Handler VECTNUM=198
ffffffff8020c26f:	0f 01 f8             	swapgs
ffffffff8020c272:	6a 00                	push   $0x0
ffffffff8020c274:	68 c6 00 00 00       	push   $0xc6
ffffffff8020c279:	e9 36 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c27e <__RME_X64_USER199_Handler>:
USER_HANDLER NAME=__RME_X64_USER199_Handler VECTNUM=199
ffffffff8020c27e:	0f 01 f8             	swapgs
ffffffff8020c281:	6a 00                	push   $0x0
ffffffff8020c283:	68 c7 00 00 00       	push   $0xc7
ffffffff8020c288:	e9 27 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c28d <__RME_X64_USER200_Handler>:

USER_HANDLER NAME=__RME_X64_USER200_Handler VECTNUM=200
ffffffff8020c28d:	0f 01 f8             	swapgs
ffffffff8020c290:	6a 00                	push   $0x0
ffffffff8020c292:	68 c8 00 00 00       	push   $0xc8
ffffffff8020c297:	e9 18 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c29c <__RME_X64_USER201_Handler>:
USER_HANDLER NAME=__RME_X64_USER201_Handler VECTNUM=201
ffffffff8020c29c:	0f 01 f8             	swapgs
ffffffff8020c29f:	6a 00                	push   $0x0
ffffffff8020c2a1:	68 c9 00 00 00       	push   $0xc9
ffffffff8020c2a6:	e9 09 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ab <__RME_X64_USER202_Handler>:
USER_HANDLER NAME=__RME_X64_USER202_Handler VECTNUM=202
ffffffff8020c2ab:	0f 01 f8             	swapgs
ffffffff8020c2ae:	6a 00                	push   $0x0
ffffffff8020c2b0:	68 ca 00 00 00       	push   $0xca
ffffffff8020c2b5:	e9 fa 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ba <__RME_X64_USER203_Handler>:
USER_HANDLER NAME=__RME_X64_USER203_Handler VECTNUM=203
ffffffff8020c2ba:	0f 01 f8             	swapgs
ffffffff8020c2bd:	6a 00                	push   $0x0
ffffffff8020c2bf:	68 cb 00 00 00       	push   $0xcb
ffffffff8020c2c4:	e9 eb 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2c9 <__RME_X64_USER204_Handler>:
USER_HANDLER NAME=__RME_X64_USER204_Handler VECTNUM=204
ffffffff8020c2c9:	0f 01 f8             	swapgs
ffffffff8020c2cc:	6a 00                	push   $0x0
ffffffff8020c2ce:	68 cc 00 00 00       	push   $0xcc
ffffffff8020c2d3:	e9 dc 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2d8 <__RME_X64_USER205_Handler>:
USER_HANDLER NAME=__RME_X64_USER205_Handler VECTNUM=205
ffffffff8020c2d8:	0f 01 f8             	swapgs
ffffffff8020c2db:	6a 00                	push   $0x0
ffffffff8020c2dd:	68 cd 00 00 00       	push   $0xcd
ffffffff8020c2e2:	e9 cd 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2e7 <__RME_X64_USER206_Handler>:
USER_HANDLER NAME=__RME_X64_USER206_Handler VECTNUM=206
ffffffff8020c2e7:	0f 01 f8             	swapgs
ffffffff8020c2ea:	6a 00                	push   $0x0
ffffffff8020c2ec:	68 ce 00 00 00       	push   $0xce
ffffffff8020c2f1:	e9 be 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2f6 <__RME_X64_USER207_Handler>:
USER_HANDLER NAME=__RME_X64_USER207_Handler VECTNUM=207
ffffffff8020c2f6:	0f 01 f8             	swapgs
ffffffff8020c2f9:	6a 00                	push   $0x0
ffffffff8020c2fb:	68 cf 00 00 00       	push   $0xcf
ffffffff8020c300:	e9 af 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c305 <__RME_X64_USER208_Handler>:
USER_HANDLER NAME=__RME_X64_USER208_Handler VECTNUM=208
ffffffff8020c305:	0f 01 f8             	swapgs
ffffffff8020c308:	6a 00                	push   $0x0
ffffffff8020c30a:	68 d0 00 00 00       	push   $0xd0
ffffffff8020c30f:	e9 a0 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c314 <__RME_X64_USER209_Handler>:
USER_HANDLER NAME=__RME_X64_USER209_Handler VECTNUM=209
ffffffff8020c314:	0f 01 f8             	swapgs
ffffffff8020c317:	6a 00                	push   $0x0
ffffffff8020c319:	68 d1 00 00 00       	push   $0xd1
ffffffff8020c31e:	e9 91 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c323 <__RME_X64_USER210_Handler>:

USER_HANDLER NAME=__RME_X64_USER210_Handler VECTNUM=210
ffffffff8020c323:	0f 01 f8             	swapgs
ffffffff8020c326:	6a 00                	push   $0x0
ffffffff8020c328:	68 d2 00 00 00       	push   $0xd2
ffffffff8020c32d:	e9 82 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c332 <__RME_X64_USER211_Handler>:
USER_HANDLER NAME=__RME_X64_USER211_Handler VECTNUM=211
ffffffff8020c332:	0f 01 f8             	swapgs
ffffffff8020c335:	6a 00                	push   $0x0
ffffffff8020c337:	68 d3 00 00 00       	push   $0xd3
ffffffff8020c33c:	e9 73 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c341 <__RME_X64_USER212_Handler>:
USER_HANDLER NAME=__RME_X64_USER212_Handler VECTNUM=212
ffffffff8020c341:	0f 01 f8             	swapgs
ffffffff8020c344:	6a 00                	push   $0x0
ffffffff8020c346:	68 d4 00 00 00       	push   $0xd4
ffffffff8020c34b:	e9 64 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c350 <__RME_X64_USER213_Handler>:
USER_HANDLER NAME=__RME_X64_USER213_Handler VECTNUM=213
ffffffff8020c350:	0f 01 f8             	swapgs
ffffffff8020c353:	6a 00                	push   $0x0
ffffffff8020c355:	68 d5 00 00 00       	push   $0xd5
ffffffff8020c35a:	e9 55 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c35f <__RME_X64_USER214_Handler>:
USER_HANDLER NAME=__RME_X64_USER214_Handler VECTNUM=214
ffffffff8020c35f:	0f 01 f8             	swapgs
ffffffff8020c362:	6a 00                	push   $0x0
ffffffff8020c364:	68 d6 00 00 00       	push   $0xd6
ffffffff8020c369:	e9 46 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c36e <__RME_X64_USER215_Handler>:
USER_HANDLER NAME=__RME_X64_USER215_Handler VECTNUM=215
ffffffff8020c36e:	0f 01 f8             	swapgs
ffffffff8020c371:	6a 00                	push   $0x0
ffffffff8020c373:	68 d7 00 00 00       	push   $0xd7
ffffffff8020c378:	e9 37 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c37d <__RME_X64_USER216_Handler>:
USER_HANDLER NAME=__RME_X64_USER216_Handler VECTNUM=216
ffffffff8020c37d:	0f 01 f8             	swapgs
ffffffff8020c380:	6a 00                	push   $0x0
ffffffff8020c382:	68 d8 00 00 00       	push   $0xd8
ffffffff8020c387:	e9 28 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c38c <__RME_X64_USER217_Handler>:
USER_HANDLER NAME=__RME_X64_USER217_Handler VECTNUM=217
ffffffff8020c38c:	0f 01 f8             	swapgs
ffffffff8020c38f:	6a 00                	push   $0x0
ffffffff8020c391:	68 d9 00 00 00       	push   $0xd9
ffffffff8020c396:	e9 19 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c39b <__RME_X64_USER218_Handler>:
USER_HANDLER NAME=__RME_X64_USER218_Handler VECTNUM=218
ffffffff8020c39b:	0f 01 f8             	swapgs
ffffffff8020c39e:	6a 00                	push   $0x0
ffffffff8020c3a0:	68 da 00 00 00       	push   $0xda
ffffffff8020c3a5:	e9 0a 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3aa <__RME_X64_USER219_Handler>:
USER_HANDLER NAME=__RME_X64_USER219_Handler VECTNUM=219
ffffffff8020c3aa:	0f 01 f8             	swapgs
ffffffff8020c3ad:	6a 00                	push   $0x0
ffffffff8020c3af:	68 db 00 00 00       	push   $0xdb
ffffffff8020c3b4:	e9 fb 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3b9 <__RME_X64_USER220_Handler>:

USER_HANDLER NAME=__RME_X64_USER220_Handler VECTNUM=220
ffffffff8020c3b9:	0f 01 f8             	swapgs
ffffffff8020c3bc:	6a 00                	push   $0x0
ffffffff8020c3be:	68 dc 00 00 00       	push   $0xdc
ffffffff8020c3c3:	e9 ec 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3c8 <__RME_X64_USER221_Handler>:
USER_HANDLER NAME=__RME_X64_USER221_Handler VECTNUM=221
ffffffff8020c3c8:	0f 01 f8             	swapgs
ffffffff8020c3cb:	6a 00                	push   $0x0
ffffffff8020c3cd:	68 dd 00 00 00       	push   $0xdd
ffffffff8020c3d2:	e9 dd 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3d7 <__RME_X64_USER222_Handler>:
USER_HANDLER NAME=__RME_X64_USER222_Handler VECTNUM=222
ffffffff8020c3d7:	0f 01 f8             	swapgs
ffffffff8020c3da:	6a 00                	push   $0x0
ffffffff8020c3dc:	68 de 00 00 00       	push   $0xde
ffffffff8020c3e1:	e9 ce 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3e6 <__RME_X64_USER223_Handler>:
USER_HANDLER NAME=__RME_X64_USER223_Handler VECTNUM=223
ffffffff8020c3e6:	0f 01 f8             	swapgs
ffffffff8020c3e9:	6a 00                	push   $0x0
ffffffff8020c3eb:	68 df 00 00 00       	push   $0xdf
ffffffff8020c3f0:	e9 bf 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3f5 <__RME_X64_USER224_Handler>:
USER_HANDLER NAME=__RME_X64_USER224_Handler VECTNUM=224
ffffffff8020c3f5:	0f 01 f8             	swapgs
ffffffff8020c3f8:	6a 00                	push   $0x0
ffffffff8020c3fa:	68 e0 00 00 00       	push   $0xe0
ffffffff8020c3ff:	e9 b0 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c404 <__RME_X64_USER225_Handler>:
USER_HANDLER NAME=__RME_X64_USER225_Handler VECTNUM=225
ffffffff8020c404:	0f 01 f8             	swapgs
ffffffff8020c407:	6a 00                	push   $0x0
ffffffff8020c409:	68 e1 00 00 00       	push   $0xe1
ffffffff8020c40e:	e9 a1 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c413 <__RME_X64_USER226_Handler>:
USER_HANDLER NAME=__RME_X64_USER226_Handler VECTNUM=226
ffffffff8020c413:	0f 01 f8             	swapgs
ffffffff8020c416:	6a 00                	push   $0x0
ffffffff8020c418:	68 e2 00 00 00       	push   $0xe2
ffffffff8020c41d:	e9 92 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c422 <__RME_X64_USER227_Handler>:
USER_HANDLER NAME=__RME_X64_USER227_Handler VECTNUM=227
ffffffff8020c422:	0f 01 f8             	swapgs
ffffffff8020c425:	6a 00                	push   $0x0
ffffffff8020c427:	68 e3 00 00 00       	push   $0xe3
ffffffff8020c42c:	e9 83 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c431 <__RME_X64_USER228_Handler>:
USER_HANDLER NAME=__RME_X64_USER228_Handler VECTNUM=228
ffffffff8020c431:	0f 01 f8             	swapgs
ffffffff8020c434:	6a 00                	push   $0x0
ffffffff8020c436:	68 e4 00 00 00       	push   $0xe4
ffffffff8020c43b:	e9 74 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c440 <__RME_X64_USER229_Handler>:
USER_HANDLER NAME=__RME_X64_USER229_Handler VECTNUM=229
ffffffff8020c440:	0f 01 f8             	swapgs
ffffffff8020c443:	6a 00                	push   $0x0
ffffffff8020c445:	68 e5 00 00 00       	push   $0xe5
ffffffff8020c44a:	e9 65 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c44f <__RME_X64_USER230_Handler>:

USER_HANDLER NAME=__RME_X64_USER230_Handler VECTNUM=230
ffffffff8020c44f:	0f 01 f8             	swapgs
ffffffff8020c452:	6a 00                	push   $0x0
ffffffff8020c454:	68 e6 00 00 00       	push   $0xe6
ffffffff8020c459:	e9 56 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c45e <__RME_X64_USER231_Handler>:
USER_HANDLER NAME=__RME_X64_USER231_Handler VECTNUM=231
ffffffff8020c45e:	0f 01 f8             	swapgs
ffffffff8020c461:	6a 00                	push   $0x0
ffffffff8020c463:	68 e7 00 00 00       	push   $0xe7
ffffffff8020c468:	e9 47 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c46d <__RME_X64_USER232_Handler>:
USER_HANDLER NAME=__RME_X64_USER232_Handler VECTNUM=232
ffffffff8020c46d:	0f 01 f8             	swapgs
ffffffff8020c470:	6a 00                	push   $0x0
ffffffff8020c472:	68 e8 00 00 00       	push   $0xe8
ffffffff8020c477:	e9 38 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c47c <__RME_X64_USER233_Handler>:
USER_HANDLER NAME=__RME_X64_USER233_Handler VECTNUM=233
ffffffff8020c47c:	0f 01 f8             	swapgs
ffffffff8020c47f:	6a 00                	push   $0x0
ffffffff8020c481:	68 e9 00 00 00       	push   $0xe9
ffffffff8020c486:	e9 29 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c48b <__RME_X64_USER234_Handler>:
USER_HANDLER NAME=__RME_X64_USER234_Handler VECTNUM=234
ffffffff8020c48b:	0f 01 f8             	swapgs
ffffffff8020c48e:	6a 00                	push   $0x0
ffffffff8020c490:	68 ea 00 00 00       	push   $0xea
ffffffff8020c495:	e9 1a 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c49a <__RME_X64_USER235_Handler>:
USER_HANDLER NAME=__RME_X64_USER235_Handler VECTNUM=235
ffffffff8020c49a:	0f 01 f8             	swapgs
ffffffff8020c49d:	6a 00                	push   $0x0
ffffffff8020c49f:	68 eb 00 00 00       	push   $0xeb
ffffffff8020c4a4:	e9 0b 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4a9 <__RME_X64_USER236_Handler>:
USER_HANDLER NAME=__RME_X64_USER236_Handler VECTNUM=236
ffffffff8020c4a9:	0f 01 f8             	swapgs
ffffffff8020c4ac:	6a 00                	push   $0x0
ffffffff8020c4ae:	68 ec 00 00 00       	push   $0xec
ffffffff8020c4b3:	e9 fc 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4b8 <__RME_X64_USER237_Handler>:
USER_HANDLER NAME=__RME_X64_USER237_Handler VECTNUM=237
ffffffff8020c4b8:	0f 01 f8             	swapgs
ffffffff8020c4bb:	6a 00                	push   $0x0
ffffffff8020c4bd:	68 ed 00 00 00       	push   $0xed
ffffffff8020c4c2:	e9 ed 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4c7 <__RME_X64_USER238_Handler>:
USER_HANDLER NAME=__RME_X64_USER238_Handler VECTNUM=238
ffffffff8020c4c7:	0f 01 f8             	swapgs
ffffffff8020c4ca:	6a 00                	push   $0x0
ffffffff8020c4cc:	68 ee 00 00 00       	push   $0xee
ffffffff8020c4d1:	e9 de 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4d6 <__RME_X64_USER239_Handler>:
USER_HANDLER NAME=__RME_X64_USER239_Handler VECTNUM=239
ffffffff8020c4d6:	0f 01 f8             	swapgs
ffffffff8020c4d9:	6a 00                	push   $0x0
ffffffff8020c4db:	68 ef 00 00 00       	push   $0xef
ffffffff8020c4e0:	e9 cf 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4e5 <__RME_X64_USER240_Handler>:

USER_HANDLER NAME=__RME_X64_USER240_Handler VECTNUM=240
ffffffff8020c4e5:	0f 01 f8             	swapgs
ffffffff8020c4e8:	6a 00                	push   $0x0
ffffffff8020c4ea:	68 f0 00 00 00       	push   $0xf0
ffffffff8020c4ef:	e9 c0 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4f4 <__RME_X64_USER241_Handler>:
USER_HANDLER NAME=__RME_X64_USER241_Handler VECTNUM=241
ffffffff8020c4f4:	0f 01 f8             	swapgs
ffffffff8020c4f7:	6a 00                	push   $0x0
ffffffff8020c4f9:	68 f1 00 00 00       	push   $0xf1
ffffffff8020c4fe:	e9 b1 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c503 <__RME_X64_USER242_Handler>:
USER_HANDLER NAME=__RME_X64_USER242_Handler VECTNUM=242
ffffffff8020c503:	0f 01 f8             	swapgs
ffffffff8020c506:	6a 00                	push   $0x0
ffffffff8020c508:	68 f2 00 00 00       	push   $0xf2
ffffffff8020c50d:	e9 a2 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c512 <__RME_X64_USER243_Handler>:
USER_HANDLER NAME=__RME_X64_USER243_Handler VECTNUM=243
ffffffff8020c512:	0f 01 f8             	swapgs
ffffffff8020c515:	6a 00                	push   $0x0
ffffffff8020c517:	68 f3 00 00 00       	push   $0xf3
ffffffff8020c51c:	e9 93 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c521 <__RME_X64_USER244_Handler>:
USER_HANDLER NAME=__RME_X64_USER244_Handler VECTNUM=244
ffffffff8020c521:	0f 01 f8             	swapgs
ffffffff8020c524:	6a 00                	push   $0x0
ffffffff8020c526:	68 f4 00 00 00       	push   $0xf4
ffffffff8020c52b:	e9 84 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c530 <__RME_X64_USER245_Handler>:
USER_HANDLER NAME=__RME_X64_USER245_Handler VECTNUM=245
ffffffff8020c530:	0f 01 f8             	swapgs
ffffffff8020c533:	6a 00                	push   $0x0
ffffffff8020c535:	68 f5 00 00 00       	push   $0xf5
ffffffff8020c53a:	eb 78                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c53c <__RME_X64_USER246_Handler>:
USER_HANDLER NAME=__RME_X64_USER246_Handler VECTNUM=246
ffffffff8020c53c:	0f 01 f8             	swapgs
ffffffff8020c53f:	6a 00                	push   $0x0
ffffffff8020c541:	68 f6 00 00 00       	push   $0xf6
ffffffff8020c546:	eb 6c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c548 <__RME_X64_USER247_Handler>:
USER_HANDLER NAME=__RME_X64_USER247_Handler VECTNUM=247
ffffffff8020c548:	0f 01 f8             	swapgs
ffffffff8020c54b:	6a 00                	push   $0x0
ffffffff8020c54d:	68 f7 00 00 00       	push   $0xf7
ffffffff8020c552:	eb 60                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c554 <__RME_X64_USER248_Handler>:
USER_HANDLER NAME=__RME_X64_USER248_Handler VECTNUM=248
ffffffff8020c554:	0f 01 f8             	swapgs
ffffffff8020c557:	6a 00                	push   $0x0
ffffffff8020c559:	68 f8 00 00 00       	push   $0xf8
ffffffff8020c55e:	eb 54                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c560 <__RME_X64_USER249_Handler>:
USER_HANDLER NAME=__RME_X64_USER249_Handler VECTNUM=249
ffffffff8020c560:	0f 01 f8             	swapgs
ffffffff8020c563:	6a 00                	push   $0x0
ffffffff8020c565:	68 f9 00 00 00       	push   $0xf9
ffffffff8020c56a:	eb 48                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c56c <__RME_X64_USER250_Handler>:

USER_HANDLER NAME=__RME_X64_USER250_Handler VECTNUM=250
ffffffff8020c56c:	0f 01 f8             	swapgs
ffffffff8020c56f:	6a 00                	push   $0x0
ffffffff8020c571:	68 fa 00 00 00       	push   $0xfa
ffffffff8020c576:	eb 3c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c578 <__RME_X64_USER251_Handler>:
USER_HANDLER NAME=__RME_X64_USER251_Handler VECTNUM=251
ffffffff8020c578:	0f 01 f8             	swapgs
ffffffff8020c57b:	6a 00                	push   $0x0
ffffffff8020c57d:	68 fb 00 00 00       	push   $0xfb
ffffffff8020c582:	eb 30                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c584 <__RME_X64_USER252_Handler>:
USER_HANDLER NAME=__RME_X64_USER252_Handler VECTNUM=252
ffffffff8020c584:	0f 01 f8             	swapgs
ffffffff8020c587:	6a 00                	push   $0x0
ffffffff8020c589:	68 fc 00 00 00       	push   $0xfc
ffffffff8020c58e:	eb 24                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c590 <__RME_X64_USER253_Handler>:
USER_HANDLER NAME=__RME_X64_USER253_Handler VECTNUM=253
ffffffff8020c590:	0f 01 f8             	swapgs
ffffffff8020c593:	6a 00                	push   $0x0
ffffffff8020c595:	68 fd 00 00 00       	push   $0xfd
ffffffff8020c59a:	eb 18                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c59c <__RME_X64_USER254_Handler>:
USER_HANDLER NAME=__RME_X64_USER254_Handler VECTNUM=254
ffffffff8020c59c:	0f 01 f8             	swapgs
ffffffff8020c59f:	6a 00                	push   $0x0
ffffffff8020c5a1:	68 fe 00 00 00       	push   $0xfe
ffffffff8020c5a6:	eb 0c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5a8 <__RME_X64_USER255_Handler>:
USER_HANDLER NAME=__RME_X64_USER255_Handler VECTNUM=255
ffffffff8020c5a8:	0f 01 f8             	swapgs
ffffffff8020c5ab:	6a 00                	push   $0x0
ffffffff8020c5ad:	68 ff 00 00 00       	push   $0xff
ffffffff8020c5b2:	eb 00                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5b4 <User_Handler>:
/* Common function body for generic interrupt handlers - reduce I-Cache usage */
User_Handler:
    SAVE_GP_REGS
ffffffff8020c5b4:	41 57                	push   %r15
ffffffff8020c5b6:	41 56                	push   %r14
ffffffff8020c5b8:	41 55                	push   %r13
ffffffff8020c5ba:	41 54                	push   %r12
ffffffff8020c5bc:	41 53                	push   %r11
ffffffff8020c5be:	41 52                	push   %r10
ffffffff8020c5c0:	41 51                	push   %r9
ffffffff8020c5c2:	41 50                	push   %r8
ffffffff8020c5c4:	55                   	push   %rbp
ffffffff8020c5c5:	57                   	push   %rdi
ffffffff8020c5c6:	56                   	push   %rsi
ffffffff8020c5c7:	52                   	push   %rdx
ffffffff8020c5c8:	51                   	push   %rcx
ffffffff8020c5c9:	53                   	push   %rbx
ffffffff8020c5ca:	50                   	push   %rax
ffffffff8020c5cb:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c5cf:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c5d1:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020c5d4:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Generic_Handler
ffffffff8020c5d9:	e8 62 eb 00 00       	call   ffffffff8021b140 <__RME_X64_Generic_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c5de:	e8 2d ca 00 00       	call   ffffffff80219010 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c5e3:	0f 01 f8             	swapgs
ffffffff8020c5e6:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c5ea:	8e d8                	mov    %eax,%ds
ffffffff8020c5ec:	58                   	pop    %rax
ffffffff8020c5ed:	5b                   	pop    %rbx
ffffffff8020c5ee:	59                   	pop    %rcx
ffffffff8020c5ef:	5a                   	pop    %rdx
ffffffff8020c5f0:	5e                   	pop    %rsi
ffffffff8020c5f1:	5f                   	pop    %rdi
ffffffff8020c5f2:	5d                   	pop    %rbp
ffffffff8020c5f3:	41 58                	pop    %r8
ffffffff8020c5f5:	41 59                	pop    %r9
ffffffff8020c5f7:	41 5a                	pop    %r10
ffffffff8020c5f9:	41 5b                	pop    %r11
ffffffff8020c5fb:	41 5c                	pop    %r12
ffffffff8020c5fd:	41 5d                	pop    %r13
ffffffff8020c5ff:	41 5e                	pop    %r14
ffffffff8020c601:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c603:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c607:	48 cf                	iretq

ffffffff8020c609 <SysTick_SMP_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_SMP_Handler:
    .global             SysTick_SMP_Handler
    SWAPGS
ffffffff8020c609:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c60c:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c60e:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c613:	41 57                	push   %r15
ffffffff8020c615:	41 56                	push   %r14
ffffffff8020c617:	41 55                	push   %r13
ffffffff8020c619:	41 54                	push   %r12
ffffffff8020c61b:	41 53                	push   %r11
ffffffff8020c61d:	41 52                	push   %r10
ffffffff8020c61f:	41 51                	push   %r9
ffffffff8020c621:	41 50                	push   %r8
ffffffff8020c623:	55                   	push   %rbp
ffffffff8020c624:	57                   	push   %rdi
ffffffff8020c625:	56                   	push   %rsi
ffffffff8020c626:	52                   	push   %rdx
ffffffff8020c627:	51                   	push   %rcx
ffffffff8020c628:	53                   	push   %rbx
ffffffff8020c629:	50                   	push   %rax
ffffffff8020c62a:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c62e:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c630:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_SMP_Handler
ffffffff8020c633:	e8 26 01 00 00       	call   ffffffff8020c75e <_RME_Tick_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c638:	e8 d3 c9 00 00       	call   ffffffff80219010 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c63d:	0f 01 f8             	swapgs
ffffffff8020c640:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c644:	8e d8                	mov    %eax,%ds
ffffffff8020c646:	58                   	pop    %rax
ffffffff8020c647:	5b                   	pop    %rbx
ffffffff8020c648:	59                   	pop    %rcx
ffffffff8020c649:	5a                   	pop    %rdx
ffffffff8020c64a:	5e                   	pop    %rsi
ffffffff8020c64b:	5f                   	pop    %rdi
ffffffff8020c64c:	5d                   	pop    %rbp
ffffffff8020c64d:	41 58                	pop    %r8
ffffffff8020c64f:	41 59                	pop    %r9
ffffffff8020c651:	41 5a                	pop    %r10
ffffffff8020c653:	41 5b                	pop    %r11
ffffffff8020c655:	41 5c                	pop    %r12
ffffffff8020c657:	41 5d                	pop    %r13
ffffffff8020c659:	41 5e                	pop    %r14
ffffffff8020c65b:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c65d:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c661:	48 cf                	iretq

ffffffff8020c663 <SysTick_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_Handler:
    .global             SysTick_Handler
    SWAPGS
ffffffff8020c663:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c666:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c668:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c66d:	41 57                	push   %r15
ffffffff8020c66f:	41 56                	push   %r14
ffffffff8020c671:	41 55                	push   %r13
ffffffff8020c673:	41 54                	push   %r12
ffffffff8020c675:	41 53                	push   %r11
ffffffff8020c677:	41 52                	push   %r10
ffffffff8020c679:	41 51                	push   %r9
ffffffff8020c67b:	41 50                	push   %r8
ffffffff8020c67d:	55                   	push   %rbp
ffffffff8020c67e:	57                   	push   %rdi
ffffffff8020c67f:	56                   	push   %rsi
ffffffff8020c680:	52                   	push   %rdx
ffffffff8020c681:	51                   	push   %rcx
ffffffff8020c682:	53                   	push   %rbx
ffffffff8020c683:	50                   	push   %rax
ffffffff8020c684:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c688:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c68a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_Handler
ffffffff8020c68d:	e8 cc 00 00 00       	call   ffffffff8020c75e <_RME_Tick_Handler>
    CALLQ               __RME_X64_SMP_Tick
ffffffff8020c692:	e8 89 cb 00 00       	call   ffffffff80219220 <__RME_X64_SMP_Tick>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c697:	e8 74 c9 00 00       	call   ffffffff80219010 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c69c:	0f 01 f8             	swapgs
ffffffff8020c69f:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c6a3:	8e d8                	mov    %eax,%ds
ffffffff8020c6a5:	58                   	pop    %rax
ffffffff8020c6a6:	5b                   	pop    %rbx
ffffffff8020c6a7:	59                   	pop    %rcx
ffffffff8020c6a8:	5a                   	pop    %rdx
ffffffff8020c6a9:	5e                   	pop    %rsi
ffffffff8020c6aa:	5f                   	pop    %rdi
ffffffff8020c6ab:	5d                   	pop    %rbp
ffffffff8020c6ac:	41 58                	pop    %r8
ffffffff8020c6ae:	41 59                	pop    %r9
ffffffff8020c6b0:	41 5a                	pop    %r10
ffffffff8020c6b2:	41 5b                	pop    %r11
ffffffff8020c6b4:	41 5c                	pop    %r12
ffffffff8020c6b6:	41 5d                	pop    %r13
ffffffff8020c6b8:	41 5e                	pop    %r14
ffffffff8020c6ba:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c6bc:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c6c0:	48 cf                	iretq

ffffffff8020c6c2 <SVC_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SVC_Handler:
    .global             SVC_Handler
    SWAPGS
ffffffff8020c6c2:	0f 01 f8             	swapgs
    /* Swap the pointers with the per-core kernel RSP */
    MOVQ                %RSP,%GS:(8192-8)
ffffffff8020c6c5:	65 48 89 24 25 f8 1f 	mov    %rsp,%gs:0x1ff8
ffffffff8020c6cc:	00 00 
    MOVQ                %GS:(8192-16),%RSP
ffffffff8020c6ce:	65 48 8b 24 25 f0 1f 	mov    %gs:0x1ff0,%rsp
ffffffff8020c6d5:	00 00 
    /* Simulate INT stack: High - [SS, RSP, RFLAGS, CS, RIP, ERRCODE] - Low */
    PUSHQ               $(USER_DATA)
ffffffff8020c6d7:	6a 23                	push   $0x23
    PUSHQ               %GS:(8192-8)
ffffffff8020c6d9:	65 ff 34 25 f8 1f 00 	push   %gs:0x1ff8
ffffffff8020c6e0:	00 
    PUSHQ               %R11
ffffffff8020c6e1:	41 53                	push   %r11
    PUSHQ               $(USER_CODE)
ffffffff8020c6e3:	6a 2b                	push   $0x2b
    PUSHQ               %RCX
ffffffff8020c6e5:	51                   	push   %rcx
    PUSHQ               $0
ffffffff8020c6e6:	6a 00                	push   $0x0
    /* We went into this from a SYSCALL - interrupt number 0x10000 */
    PUSHQ               $0x10000
ffffffff8020c6e8:	68 00 00 01 00       	push   $0x10000
    SAVE_GP_REGS
ffffffff8020c6ed:	41 57                	push   %r15
ffffffff8020c6ef:	41 56                	push   %r14
ffffffff8020c6f1:	41 55                	push   %r13
ffffffff8020c6f3:	41 54                	push   %r12
ffffffff8020c6f5:	41 53                	push   %r11
ffffffff8020c6f7:	41 52                	push   %r10
ffffffff8020c6f9:	41 51                	push   %r9
ffffffff8020c6fb:	41 50                	push   %r8
ffffffff8020c6fd:	55                   	push   %rbp
ffffffff8020c6fe:	57                   	push   %rdi
ffffffff8020c6ff:	56                   	push   %rsi
ffffffff8020c700:	52                   	push   %rdx
ffffffff8020c701:	51                   	push   %rcx
ffffffff8020c702:	53                   	push   %rbx
ffffffff8020c703:	50                   	push   %rax
ffffffff8020c704:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c708:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c70a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Svc_Handler
ffffffff8020c70d:	e8 fe 46 00 00       	call   ffffffff80210e10 <_RME_Svc_Handler>
    RESTORE_GP_REGS
ffffffff8020c712:	0f 01 f8             	swapgs
ffffffff8020c715:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c719:	8e d8                	mov    %eax,%ds
ffffffff8020c71b:	58                   	pop    %rax
ffffffff8020c71c:	5b                   	pop    %rbx
ffffffff8020c71d:	59                   	pop    %rcx
ffffffff8020c71e:	5a                   	pop    %rdx
ffffffff8020c71f:	5e                   	pop    %rsi
ffffffff8020c720:	5f                   	pop    %rdi
ffffffff8020c721:	5d                   	pop    %rbp
ffffffff8020c722:	41 58                	pop    %r8
ffffffff8020c724:	41 59                	pop    %r9
ffffffff8020c726:	41 5a                	pop    %r10
ffffffff8020c728:	41 5b                	pop    %r11
ffffffff8020c72a:	41 5c                	pop    %r12
ffffffff8020c72c:	41 5d                	pop    %r13
ffffffff8020c72e:	41 5e                	pop    %r14
ffffffff8020c730:	41 5f                	pop    %r15
    /* See if we are forced to use IRET */
    TESTQ               $0x10000,(%RSP)
ffffffff8020c732:	48 f7 04 24 00 00 01 	testq  $0x10000,(%rsp)
ffffffff8020c739:	00 
    JZ                  Use_IRET
ffffffff8020c73a:	74 1c                	je     ffffffff8020c758 <Use_IRET>
    /* Just move these into the registers desired */
    /* CVE-2012-0217, CVE-2014-4699: Force canonical address on RIP */
    MOVQ                $0x7FFFFFFFFFFF,%RCX
ffffffff8020c73c:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffff,%rcx
ffffffff8020c743:	7f 00 00 
    ANDQ                16(%RSP),%RCX
ffffffff8020c746:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
    MOVQ                32(%RSP),%R11
ffffffff8020c74b:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    MOVQ                40(%RSP),%RSP
ffffffff8020c750:	48 8b 64 24 28       	mov    0x28(%rsp),%rsp
    /* Return to user-level */
    SYSRETQ
ffffffff8020c755:	48 0f 07             	sysretq

ffffffff8020c758 <Use_IRET>:
Use_IRET:
    /* Flag is zero, We are forced to use IRET, because this is from INT */
    ADDQ                $16,%RSP
ffffffff8020c758:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c75c:	48 cf                	iretq

ffffffff8020c75e <_RME_Tick_Handler>:
ffffffff8020c75e:	66 90                	xchg   %ax,%ax

ffffffff8020c760 <_RME_Run_Del>:
static void _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff8020c760:	48 8b 4f 40          	mov    0x40(%rdi),%rcx
    Local=Thd->Sched.Local;
    /* It can't be free or there must be an error */
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Delete this thread from the runqueue */
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8020c764:	48 8b 37             	mov    (%rdi),%rsi
ffffffff8020c767:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    Local=Thd->Sched.Local;
ffffffff8020c76b:	48 8b 47 28          	mov    0x28(%rdi),%rax
    Next->Prev=Prev;
ffffffff8020c76f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
    Prev->Next=Next;
ffffffff8020c773:	48 89 32             	mov    %rsi,(%rdx)
    
    /* See if there are any thread on this priority level */
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff8020c776:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020c779:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8020c77d:	48 8d 54 30 28       	lea    0x28(%rax,%rsi,1),%rdx
ffffffff8020c782:	48 39 54 06 28       	cmp    %rdx,0x28(%rsi,%rax,1)
ffffffff8020c787:	74 07                	je     ffffffff8020c790 <_RME_Run_Del+0x30>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff8020c789:	c3                   	ret
ffffffff8020c78a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff8020c790:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020c793:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020c798:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff8020c79c:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020c79f:	48 f7 d2             	not    %rdx
ffffffff8020c7a2:	48 21 54 f0 20       	and    %rdx,0x20(%rax,%rsi,8)
}
ffffffff8020c7a7:	c3                   	ret
ffffffff8020c7a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020c7af:	00 

ffffffff8020c7b0 <_RME_Inv_Ret>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Ret(struct RME_Reg_Struct* Reg,
                              rme_ptr_t Retval,
                              rme_ptr_t Is_Exc)
{
ffffffff8020c7b0:	41 57                	push   %r15
ffffffff8020c7b2:	41 56                	push   %r14
ffffffff8020c7b4:	49 89 f6             	mov    %rsi,%r14
ffffffff8020c7b7:	41 55                	push   %r13
ffffffff8020c7b9:	49 89 d5             	mov    %rdx,%r13
ffffffff8020c7bc:	41 54                	push   %r12
ffffffff8020c7be:	49 89 fc             	mov    %rdi,%r12
ffffffff8020c7c1:	55                   	push   %rbp
ffffffff8020c7c2:	53                   	push   %rbx
ffffffff8020c7c3:	48 83 ec 08          	sub    $0x8,%rsp
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;

    /* See if we can return; If we can, get the structure */
    Thread=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020c7c7:	e8 73 f0 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020c7cc:	48 8b 68 08          	mov    0x8(%rax),%rbp
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8020c7d0:	48 8b 9d 98 00 00 00 	mov    0x98(%rbp),%rbx
ffffffff8020c7d7:	4c 8d bd 98 00 00 00 	lea    0x98(%rbp),%r15
    if(RME_UNLIKELY(Invocation==(void*)RME_NULL))
ffffffff8020c7de:	4c 39 fb             	cmp    %r15,%rbx
ffffffff8020c7e1:	0f 84 99 00 00 00    	je     ffffffff8020c880 <_RME_Inv_Ret+0xd0>
ffffffff8020c7e7:	48 85 db             	test   %rbx,%rbx
ffffffff8020c7ea:	0f 84 90 00 00 00    	je     ffffffff8020c880 <_RME_Inv_Ret+0xd0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if this port allows return-on-fault */
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8020c7f0:	4d 85 ed             	test   %r13,%r13
ffffffff8020c7f3:	0f 85 a7 00 00 00    	jne    ffffffff8020c8a0 <_RME_Inv_Ret+0xf0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Pop it from the stack */
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8020c7f9:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020c7fc:	48 8b 43 08          	mov    0x8(%rbx),%rax
    /* Decrease invocation depth - no atomic operation needed */
    Thread->Ctx.Invstk_Depth--;

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well. */
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c800:	48 8d 73 38          	lea    0x38(%rbx),%rsi
ffffffff8020c804:	4c 89 e7             	mov    %r12,%rdi
    Next->Prev=Prev;
ffffffff8020c807:	48 89 42 08          	mov    %rax,0x8(%rdx)
    Prev->Next=Next;
ffffffff8020c80b:	48 89 10             	mov    %rdx,(%rax)
    Thread->Ctx.Invstk_Depth--;
ffffffff8020c80e:	48 83 ad a8 00 00 00 	subq   $0x1,0xa8(%rbp)
ffffffff8020c815:	01 
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c816:	e8 f5 e2 00 00       	call   ffffffff8021ab10 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8020c81b:	4c 89 f6             	mov    %r14,%rsi
ffffffff8020c81e:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c821:	e8 0a ef 00 00       	call   ffffffff8021b730 <__RME_Inv_Retval_Set>

    /* We have successfully returned, set the invocation as inactive. We need
     * a barrier here to avoid potential destruction of the return value. */
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8020c826:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff8020c82d:	00 
    }
    else
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg,0);
ffffffff8020c82e:	31 f6                	xor    %esi,%esi
ffffffff8020c830:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c833:	e8 e8 ee 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
    }

    /* Same assumptions as in invocation activation */
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8020c838:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Invocation!=(void*)RME_NULL)
ffffffff8020c83f:	48 85 c0             	test   %rax,%rax
ffffffff8020c842:	74 2c                	je     ffffffff8020c870 <_RME_Inv_Ret+0xc0>
ffffffff8020c844:	49 39 c7             	cmp    %rax,%r15
ffffffff8020c847:	74 27                	je     ffffffff8020c870 <_RME_Inv_Ret+0xc0>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8020c849:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020c84d:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020c851:	e8 0a e9 00 00       	call   ffffffff8021b160 <__RME_Pgt_Set>
        RME_ASSERT(RME_CAP_IS_ROOT(Thread->Sched.Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
    }
    
    return 0;
ffffffff8020c856:	31 c0                	xor    %eax,%eax
}
ffffffff8020c858:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020c85c:	5b                   	pop    %rbx
ffffffff8020c85d:	5d                   	pop    %rbp
ffffffff8020c85e:	41 5c                	pop    %r12
ffffffff8020c860:	41 5d                	pop    %r13
ffffffff8020c862:	41 5e                	pop    %r14
ffffffff8020c864:	41 5f                	pop    %r15
ffffffff8020c866:	c3                   	ret
ffffffff8020c867:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020c86e:	00 00 
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
ffffffff8020c870:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff8020c874:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020c878:	e8 e3 e8 00 00       	call   ffffffff8021b160 <__RME_Pgt_Set>
ffffffff8020c87d:	eb d7                	jmp    ffffffff8020c856 <_RME_Inv_Ret+0xa6>
ffffffff8020c87f:	90                   	nop
}
ffffffff8020c880:	48 83 c4 08          	add    $0x8,%rsp
        return RME_ERR_SIV_EMPTY;
ffffffff8020c884:	48 c7 c0 d0 fe ff ff 	mov    $0xfffffffffffffed0,%rax
}
ffffffff8020c88b:	5b                   	pop    %rbx
ffffffff8020c88c:	5d                   	pop    %rbp
ffffffff8020c88d:	41 5c                	pop    %r12
ffffffff8020c88f:	41 5d                	pop    %r13
ffffffff8020c891:	41 5e                	pop    %r14
ffffffff8020c893:	41 5f                	pop    %r15
ffffffff8020c895:	c3                   	ret
ffffffff8020c896:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020c89d:	00 00 00 
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8020c8a0:	48 83 7b 30 00       	cmpq   $0x0,0x30(%rbx)
ffffffff8020c8a5:	74 49                	je     ffffffff8020c8f0 <_RME_Inv_Ret+0x140>
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8020c8a7:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020c8aa:	48 8b 43 08          	mov    0x8(%rbx),%rax
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c8ae:	48 8d 73 38          	lea    0x38(%rbx),%rsi
ffffffff8020c8b2:	4c 89 e7             	mov    %r12,%rdi
    Next->Prev=Prev;
ffffffff8020c8b5:	48 89 42 08          	mov    %rax,0x8(%rdx)
    Prev->Next=Next;
ffffffff8020c8b9:	48 89 10             	mov    %rdx,(%rax)
    Thread->Ctx.Invstk_Depth--;
ffffffff8020c8bc:	48 83 ad a8 00 00 00 	subq   $0x1,0xa8(%rbp)
ffffffff8020c8c3:	01 
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c8c4:	e8 47 e2 00 00       	call   ffffffff8021ab10 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8020c8c9:	4c 89 f6             	mov    %r14,%rsi
ffffffff8020c8cc:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c8cf:	e8 5c ee 00 00       	call   ffffffff8021b730 <__RME_Inv_Retval_Set>
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8020c8d4:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff8020c8db:	00 
        __RME_Svc_Retval_Set(Reg, RME_ERR_SIV_FAULT);
ffffffff8020c8dc:	48 c7 c6 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rsi
ffffffff8020c8e3:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c8e6:	e8 35 ee 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
ffffffff8020c8eb:	e9 48 ff ff ff       	jmp    ffffffff8020c838 <_RME_Inv_Ret+0x88>
        return RME_ERR_SIV_FAULT;
ffffffff8020c8f0:	48 c7 c0 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rax
ffffffff8020c8f7:	e9 5c ff ff ff       	jmp    ffffffff8020c858 <_RME_Inv_Ret+0xa8>
ffffffff8020c8fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020c900 <_RME_Thd_Sched_Bind.isra.0>:
static rme_ret_t _RME_Thd_Sched_Bind(struct RME_Cap_Cpt* Cpt,
ffffffff8020c900:	41 55                	push   %r13
ffffffff8020c902:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c905:	41 54                	push   %r12
ffffffff8020c907:	55                   	push   %rbp
ffffffff8020c908:	4c 89 cd             	mov    %r9,%rbp
ffffffff8020c90b:	53                   	push   %rbx
ffffffff8020c90c:	48 89 cb             	mov    %rcx,%rbx
ffffffff8020c90f:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020c913:	80 e6 80             	and    $0x80,%dh
ffffffff8020c916:	0f 85 44 02 00 00    	jne    ffffffff8020cb60 <_RME_Thd_Sched_Bind.isra.0+0x260>
ffffffff8020c91c:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020c91f:	0f 83 23 02 00 00    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020c925:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020c92c:	ff 00 00 
ffffffff8020c92f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020c933:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020c93a:	00 00 00 
ffffffff8020c93d:	48 01 f8             	add    %rdi,%rax
ffffffff8020c940:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020c943:	48 21 d1             	and    %rdx,%rcx
ffffffff8020c946:	4c 39 c9             	cmp    %r9,%rcx
ffffffff8020c949:	0f 84 79 02 00 00    	je     ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020c94f:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020c953:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8020c957:	0f 85 fb 02 00 00    	jne    ffffffff8020cc58 <_RME_Thd_Sched_Bind.isra.0+0x358>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff8020c95d:	f6 c7 80             	test   $0x80,%bh
ffffffff8020c960:	0f 85 7a 02 00 00    	jne    ffffffff8020cbe0 <_RME_Thd_Sched_Bind.isra.0+0x2e0>
ffffffff8020c966:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8020c969:	0f 83 d9 01 00 00    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020c96f:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020c976:	ff 00 00 
ffffffff8020c979:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020c97d:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020c984:	00 00 00 
ffffffff8020c987:	48 01 fb             	add    %rdi,%rbx
ffffffff8020c98a:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020c98d:	48 21 d1             	and    %rdx,%rcx
ffffffff8020c990:	4c 39 c9             	cmp    %r9,%rcx
ffffffff8020c993:	0f 84 2f 02 00 00    	je     ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020c999:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020c99d:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8020c9a1:	0f 85 b1 02 00 00    	jne    ffffffff8020cc58 <_RME_Thd_Sched_Bind.isra.0+0x358>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff8020c9a7:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8020c9ab:	0f 84 1f 03 00 00    	je     ffffffff8020ccd0 <_RME_Thd_Sched_Bind.isra.0+0x3d0>
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
ffffffff8020c9b1:	f6 43 10 04          	testb  $0x4,0x10(%rbx)
ffffffff8020c9b5:	0f 84 15 03 00 00    	je     ffffffff8020ccd0 <_RME_Thd_Sched_Bind.isra.0+0x3d0>
    if(Cap_Sig!=RME_CID_NULL)
ffffffff8020c9bb:	ba 00 00 00 80       	mov    $0x80000000,%edx
ffffffff8020c9c0:	49 39 d0             	cmp    %rdx,%r8
ffffffff8020c9c3:	0f 84 ff 02 00 00    	je     ffffffff8020ccc8 <_RME_Thd_Sched_Bind.isra.0+0x3c8>
        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8020c9c9:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020c9d0:	0f 84 9a 02 00 00    	je     ffffffff8020cc70 <_RME_Thd_Sched_Bind.isra.0+0x370>
ffffffff8020c9d6:	4c 89 c2             	mov    %r8,%rdx
ffffffff8020c9d9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020c9dd:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020c9e0:	0f 83 62 01 00 00    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020c9e6:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020c9ed:	ff 00 00 
ffffffff8020c9f0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020c9f4:	48 01 fa             	add    %rdi,%rdx
ffffffff8020c9f7:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020c9fe:	00 00 00 
ffffffff8020ca01:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020ca04:	49 89 c9             	mov    %rcx,%r9
ffffffff8020ca07:	49 21 f1             	and    %rsi,%r9
ffffffff8020ca0a:	49 39 f9             	cmp    %rdi,%r9
ffffffff8020ca0d:	0f 84 b5 01 00 00    	je     ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020ca13:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020ca17:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020ca1b:	0f 85 37 02 00 00    	jne    ffffffff8020cc58 <_RME_Thd_Sched_Bind.isra.0+0x358>
ffffffff8020ca21:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020ca25:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020ca2c:	49 39 c8             	cmp    %rcx,%r8
ffffffff8020ca2f:	0f 83 13 01 00 00    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020ca35:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020ca39:	4c 03 42 18          	add    0x18(%rdx),%r8
ffffffff8020ca3d:	49 8b 10             	mov    (%r8),%rdx
ffffffff8020ca40:	4d 89 c4             	mov    %r8,%r12
ffffffff8020ca43:	48 21 d6             	and    %rdx,%rsi
ffffffff8020ca46:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020ca49:	0f 84 79 01 00 00    	je     ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020ca4f:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020ca53:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8020ca57:	0f 85 fb 01 00 00    	jne    ffffffff8020cc58 <_RME_Thd_Sched_Bind.isra.0+0x358>
        RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SCHED);
ffffffff8020ca5d:	41 f6 44 24 10 20    	testb  $0x20,0x10(%r12)
ffffffff8020ca63:	0f 84 67 02 00 00    	je     ffffffff8020ccd0 <_RME_Thd_Sched_Bind.isra.0+0x3d0>
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff8020ca69:	4c 8b 68 18          	mov    0x18(%rax),%r13
    if(Local_Old!=RME_THD_FREE)
ffffffff8020ca6d:	49 83 7d 28 ff       	cmpq   $0xffffffffffffffff,0x28(%r13)
ffffffff8020ca72:	0f 85 78 02 00 00    	jne    ffffffff8020ccf0 <_RME_Thd_Sched_Bind.isra.0+0x3f0>
    Local_New=RME_CPU_LOCAL();
ffffffff8020ca78:	e8 c2 ed ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Scheduler=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
ffffffff8020ca7d:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
    Local_New=RME_CPU_LOCAL();
ffffffff8020ca81:	48 89 c2             	mov    %rax,%rdx
    if(Scheduler->Sched.Local!=Local_New)
ffffffff8020ca84:	48 3b 41 28          	cmp    0x28(%rcx),%rax
ffffffff8020ca88:	0f 85 62 02 00 00    	jne    ffffffff8020ccf0 <_RME_Thd_Sched_Bind.isra.0+0x3f0>
    if(Thread==Scheduler)
ffffffff8020ca8e:	49 39 cd             	cmp    %rcx,%r13
ffffffff8020ca91:	0f 84 89 02 00 00    	je     ffffffff8020cd20 <_RME_Thd_Sched_Bind.isra.0+0x420>
    if(Scheduler->Sched.Prio_Max<Prio)
ffffffff8020ca97:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff8020ca9c:	48 39 41 48          	cmp    %rax,0x48(%rcx)
ffffffff8020caa0:	0f 82 62 02 00 00    	jb     ffffffff8020cd08 <_RME_Thd_Sched_Bind.isra.0+0x408>
    Hyp_Attr=Thread->Ctx.Hyp_Attr;
ffffffff8020caa6:	49 8b 85 88 00 00 00 	mov    0x88(%r13),%rax
    if(RME_THD_ATTR(Hyp_Attr)!=0U)
ffffffff8020caad:	48 89 c6             	mov    %rax,%rsi
ffffffff8020cab0:	48 0f ba f6 3f       	btr    $0x3f,%rsi
ffffffff8020cab5:	48 85 f6             	test   %rsi,%rsi
ffffffff8020cab8:	0f 85 12 02 00 00    	jne    ffffffff8020ccd0 <_RME_Thd_Sched_Bind.isra.0+0x3d0>
    else if(((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)==0U))||
ffffffff8020cabe:	48 83 7c 24 38 00    	cmpq   $0x0,0x38(%rsp)
ffffffff8020cac4:	0f 85 32 02 00 00    	jne    ffffffff8020ccfc <_RME_Thd_Sched_Bind.isra.0+0x3fc>
ffffffff8020caca:	48 85 c0             	test   %rax,%rax
ffffffff8020cacd:	0f 88 29 02 00 00    	js     ffffffff8020ccfc <_RME_Thd_Sched_Bind.isra.0+0x3fc>
/* Inline assembly implementation */
#else
static INLINE rme_ptr_t _RME_X64_Comp_Swap(volatile rme_ptr_t* Ptr, rme_ptr_t Old, rme_ptr_t New)
{
	rme_u8_t Zero;
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020cad3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020cada:	f0 49 0f b1 55 28    	lock cmpxchg %rdx,0x28(%r13)
ffffffff8020cae0:	0f 94 c2             	sete   %dl
    if(RME_COMP_SWAP((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff8020cae3:	84 d2                	test   %dl,%dl
ffffffff8020cae5:	0f 84 29 02 00 00    	je     ffffffff8020cd14 <_RME_Thd_Sched_Bind.isra.0+0x414>
    Thread->Sched.Prio=Prio;
ffffffff8020caeb:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    Scheduler->Sched.Sched_Ref++;
ffffffff8020caf0:	48 83 41 60 01       	addq   $0x1,0x60(%rcx)
    Thread->Sched.Sched_Thd=Scheduler;
ffffffff8020caf5:	49 89 4d 68          	mov    %rcx,0x68(%r13)
    Thread->Sched.Prio=Prio;
ffffffff8020caf9:	49 89 45 40          	mov    %rax,0x40(%r13)
    Thread->Sched.TID=(rme_ptr_t)TID;
ffffffff8020cafd:	49 89 6d 20          	mov    %rbp,0x20(%r13)
    if(Sig_Op==(void*)0U)
ffffffff8020cb01:	4d 85 e4             	test   %r12,%r12
ffffffff8020cb04:	0f 84 d6 01 00 00    	je     ffffffff8020cce0 <_RME_Thd_Sched_Bind.isra.0+0x3e0>
        Thread->Sched.Sched_Sig=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff8020cb0a:	41 8b 04 24          	mov    (%r12),%eax
ffffffff8020cb0e:	85 c0                	test   %eax,%eax
ffffffff8020cb10:	74 05                	je     ffffffff8020cb17 <_RME_Thd_Sched_Bind.isra.0+0x217>
ffffffff8020cb12:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
ffffffff8020cb17:	4d 89 65 70          	mov    %r12,0x70(%r13)
	                     :"memory", "cc");
	return (rme_ptr_t)Zero;
}
static INLINE rme_ptr_t _RME_X64_Fetch_Add(volatile rme_ptr_t* Ptr, rme_cnt_t Addend)
{
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020cb1b:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020cb20:	f0 49 0f c1 44 24 08 	lock xadd %rax,0x8(%r12)
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)!=0U)
ffffffff8020cb27:	49 83 bd 88 00 00 00 	cmpq   $0x0,0x88(%r13)
ffffffff8020cb2e:	00 
ffffffff8020cb2f:	0f 88 7b 01 00 00    	js     ffffffff8020ccb0 <_RME_Thd_Sched_Bind.isra.0+0x3b0>
    return 0;
ffffffff8020cb35:	31 c0                	xor    %eax,%eax
}
ffffffff8020cb37:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020cb3b:	5b                   	pop    %rbx
ffffffff8020cb3c:	5d                   	pop    %rbp
ffffffff8020cb3d:	41 5c                	pop    %r12
ffffffff8020cb3f:	41 5d                	pop    %r13
ffffffff8020cb41:	c3                   	ret
ffffffff8020cb42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cb48:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020cb4f:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020cb53:	5b                   	pop    %rbx
ffffffff8020cb54:	5d                   	pop    %rbp
ffffffff8020cb55:	41 5c                	pop    %r12
ffffffff8020cb57:	41 5d                	pop    %r13
ffffffff8020cb59:	c3                   	ret
ffffffff8020cb5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cb60:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cb63:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cb67:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020cb6a:	73 dc                	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020cb6c:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020cb73:	ff 00 00 
ffffffff8020cb76:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020cb7a:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020cb81:	00 00 00 
ffffffff8020cb84:	48 01 fa             	add    %rdi,%rdx
ffffffff8020cb87:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020cb8a:	49 89 cb             	mov    %rcx,%r11
ffffffff8020cb8d:	4d 21 cb             	and    %r9,%r11
ffffffff8020cb90:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020cb93:	74 33                	je     ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020cb95:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020cb99:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020cb9d:	0f 85 b5 00 00 00    	jne    ffffffff8020cc58 <_RME_Thd_Sched_Bind.isra.0+0x358>
ffffffff8020cba3:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020cba7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020cbac:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020cbaf:	73 97                	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020cbb1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cbb5:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020cbb9:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020cbbc:	49 21 d1             	and    %rdx,%r9
ffffffff8020cbbf:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020cbc2:	0f 85 87 fd ff ff    	jne    ffffffff8020c94f <_RME_Thd_Sched_Bind.isra.0+0x4f>
}
ffffffff8020cbc8:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cbcc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020cbd3:	5b                   	pop    %rbx
ffffffff8020cbd4:	5d                   	pop    %rbp
ffffffff8020cbd5:	41 5c                	pop    %r12
ffffffff8020cbd7:	41 5d                	pop    %r13
ffffffff8020cbd9:	c3                   	ret
ffffffff8020cbda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff8020cbe0:	48 89 da             	mov    %rbx,%rdx
ffffffff8020cbe3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cbe7:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020cbea:	0f 83 58 ff ff ff    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020cbf0:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020cbf7:	ff 00 00 
ffffffff8020cbfa:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020cbfe:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020cc05:	00 00 00 
ffffffff8020cc08:	48 01 fa             	add    %rdi,%rdx
ffffffff8020cc0b:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020cc0e:	49 89 cb             	mov    %rcx,%r11
ffffffff8020cc11:	4d 21 cb             	and    %r9,%r11
ffffffff8020cc14:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020cc17:	74 af                	je     ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020cc19:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020cc1d:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020cc21:	75 35                	jne    ffffffff8020cc58 <_RME_Thd_Sched_Bind.isra.0+0x358>
ffffffff8020cc23:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020cc27:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020cc2d:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020cc30:	0f 83 12 ff ff ff    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020cc36:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020cc3a:	48 03 5a 18          	add    0x18(%rdx),%rbx
ffffffff8020cc3e:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020cc41:	49 21 d1             	and    %rdx,%r9
ffffffff8020cc44:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020cc47:	0f 85 4c fd ff ff    	jne    ffffffff8020c999 <_RME_Thd_Sched_Bind.isra.0+0x99>
ffffffff8020cc4d:	e9 76 ff ff ff       	jmp    ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020cc52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
}
ffffffff8020cc58:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cc5c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020cc63:	5b                   	pop    %rbx
ffffffff8020cc64:	5d                   	pop    %rbp
ffffffff8020cc65:	41 5c                	pop    %r12
ffffffff8020cc67:	41 5d                	pop    %r13
ffffffff8020cc69:	c3                   	ret
ffffffff8020cc6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8020cc70:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020cc73:	0f 83 cf fe ff ff    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020cc79:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020cc80:	ff 00 00 
ffffffff8020cc83:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020cc87:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8020cc8e:	00 00 00 
ffffffff8020cc91:	4d 8d 24 38          	lea    (%r8,%rdi,1),%r12
ffffffff8020cc95:	49 8b 14 24          	mov    (%r12),%rdx
ffffffff8020cc99:	48 21 d1             	and    %rdx,%rcx
ffffffff8020cc9c:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020cc9f:	0f 85 aa fd ff ff    	jne    ffffffff8020ca4f <_RME_Thd_Sched_Bind.isra.0+0x14f>
ffffffff8020cca5:	e9 1e ff ff ff       	jmp    ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020ccaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)Haddr;
ffffffff8020ccb0:	49 c7 85 90 00 00 00 	movq   $0x0,0x90(%r13)
ffffffff8020ccb7:	00 00 00 00 
    return 0;
ffffffff8020ccbb:	31 c0                	xor    %eax,%eax
ffffffff8020ccbd:	e9 75 fe ff ff       	jmp    ffffffff8020cb37 <_RME_Thd_Sched_Bind.isra.0+0x237>
ffffffff8020ccc2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Sig_Op=RME_NULL;
ffffffff8020ccc8:	45 31 e4             	xor    %r12d,%r12d
ffffffff8020cccb:	e9 99 fd ff ff       	jmp    ffffffff8020ca69 <_RME_Thd_Sched_Bind.isra.0+0x169>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff8020ccd0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020ccd7:	e9 73 fe ff ff       	jmp    ffffffff8020cb4f <_RME_Thd_Sched_Bind.isra.0+0x24f>
ffffffff8020ccdc:	0f 1f 40 00          	nopl   0x0(%rax)
        Thread->Sched.Sched_Sig=0U;
ffffffff8020cce0:	49 c7 45 70 00 00 00 	movq   $0x0,0x70(%r13)
ffffffff8020cce7:	00 
ffffffff8020cce8:	e9 3a fe ff ff       	jmp    ffffffff8020cb27 <_RME_Thd_Sched_Bind.isra.0+0x227>
ffffffff8020cced:	0f 1f 00             	nopl   (%rax)
        return RME_ERR_PTH_INVSTATE;
ffffffff8020ccf0:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8020ccf7:	e9 53 fe ff ff       	jmp    ffffffff8020cb4f <_RME_Thd_Sched_Bind.isra.0+0x24f>
                    return RME_ERR_PTH_HADDR;
ffffffff8020ccfc:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff8020cd03:	e9 47 fe ff ff       	jmp    ffffffff8020cb4f <_RME_Thd_Sched_Bind.isra.0+0x24f>
        return RME_ERR_PTH_PRIO;
ffffffff8020cd08:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8020cd0f:	e9 3b fe ff ff       	jmp    ffffffff8020cb4f <_RME_Thd_Sched_Bind.isra.0+0x24f>
        return RME_ERR_PTH_CONFLICT;
ffffffff8020cd14:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff8020cd1b:	e9 2f fe ff ff       	jmp    ffffffff8020cb4f <_RME_Thd_Sched_Bind.isra.0+0x24f>
        return RME_ERR_PTH_NOTIF;
ffffffff8020cd20:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff8020cd27:	e9 23 fe ff ff       	jmp    ffffffff8020cb4f <_RME_Thd_Sched_Bind.isra.0+0x24f>
ffffffff8020cd2c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020cd30 <_RME_Prc_Crt.isra.0>:
static rme_ret_t _RME_Prc_Crt(struct RME_Cap_Cpt* Cpt,
ffffffff8020cd30:	55                   	push   %rbp
ffffffff8020cd31:	48 89 d0             	mov    %rdx,%rax
ffffffff8020cd34:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020cd35:	80 e6 80             	and    $0x80,%dh
ffffffff8020cd38:	0f 85 f2 01 00 00    	jne    ffffffff8020cf30 <_RME_Prc_Crt.isra.0+0x200>
ffffffff8020cd3e:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020cd41:	0f 83 d9 01 00 00    	jae    ffffffff8020cf20 <_RME_Prc_Crt.isra.0+0x1f0>
ffffffff8020cd47:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020cd4e:	ff 00 00 
ffffffff8020cd51:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cd55:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020cd5c:	00 00 00 
ffffffff8020cd5f:	48 8d 14 38          	lea    (%rax,%rdi,1),%rdx
ffffffff8020cd63:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020cd66:	49 21 c2             	and    %rax,%r10
ffffffff8020cd69:	4d 39 da             	cmp    %r11,%r10
ffffffff8020cd6c:	0f 84 bc 02 00 00    	je     ffffffff8020d02e <_RME_Prc_Crt.isra.0+0x2fe>
ffffffff8020cd72:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020cd76:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020cd7a:	0f 85 2c 02 00 00    	jne    ffffffff8020cfac <_RME_Prc_Crt.isra.0+0x27c>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020cd80:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020cd87:	0f 85 33 02 00 00    	jne    ffffffff8020cfc0 <_RME_Prc_Crt.isra.0+0x290>
ffffffff8020cd8d:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020cd90:	0f 83 8a 01 00 00    	jae    ffffffff8020cf20 <_RME_Prc_Crt.isra.0+0x1f0>
ffffffff8020cd96:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020cd9d:	ff 00 00 
ffffffff8020cda0:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020cda4:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020cdab:	00 00 00 
ffffffff8020cdae:	49 01 f8             	add    %rdi,%r8
ffffffff8020cdb1:	49 8b 00             	mov    (%r8),%rax
ffffffff8020cdb4:	49 21 c2             	and    %rax,%r10
ffffffff8020cdb7:	4d 39 da             	cmp    %r11,%r10
ffffffff8020cdba:	0f 84 6e 02 00 00    	je     ffffffff8020d02e <_RME_Prc_Crt.isra.0+0x2fe>
ffffffff8020cdc0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020cdc4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020cdc8:	0f 85 de 01 00 00    	jne    ffffffff8020cfac <_RME_Prc_Crt.isra.0+0x27c>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020cdce:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff8020cdd5:	0f 84 65 02 00 00    	je     ffffffff8020d040 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020cddb:	4c 89 c8             	mov    %r9,%rax
ffffffff8020cdde:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020cde2:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020cde5:	0f 83 35 01 00 00    	jae    ffffffff8020cf20 <_RME_Prc_Crt.isra.0+0x1f0>
ffffffff8020cdeb:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020cdf2:	00 00 00 
ffffffff8020cdf5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cdf9:	48 01 f8             	add    %rdi,%rax
ffffffff8020cdfc:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020ce03:	ff 00 00 
ffffffff8020ce06:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020ce09:	49 89 f3             	mov    %rsi,%r11
ffffffff8020ce0c:	49 21 fb             	and    %rdi,%r11
ffffffff8020ce0f:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020ce12:	0f 84 16 02 00 00    	je     ffffffff8020d02e <_RME_Prc_Crt.isra.0+0x2fe>
ffffffff8020ce18:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020ce1c:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020ce20:	0f 85 86 01 00 00    	jne    ffffffff8020cfac <_RME_Prc_Crt.isra.0+0x27c>
ffffffff8020ce26:	48 8b 70 28          	mov    0x28(%rax),%rsi
ffffffff8020ce2a:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff8020ce31:	49 39 f1             	cmp    %rsi,%r9
ffffffff8020ce34:	0f 83 e6 00 00 00    	jae    ffffffff8020cf20 <_RME_Prc_Crt.isra.0+0x1f0>
ffffffff8020ce3a:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020ce3e:	4c 03 48 18          	add    0x18(%rax),%r9
ffffffff8020ce42:	49 8b 01             	mov    (%r9),%rax
ffffffff8020ce45:	48 21 c7             	and    %rax,%rdi
ffffffff8020ce48:	4c 39 d7             	cmp    %r10,%rdi
ffffffff8020ce4b:	0f 84 dd 01 00 00    	je     ffffffff8020d02e <_RME_Prc_Crt.isra.0+0x2fe>
ffffffff8020ce51:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ce55:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020ce59:	0f 85 4d 01 00 00    	jne    ffffffff8020cfac <_RME_Prc_Crt.isra.0+0x27c>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8020ce5f:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff8020ce63:	48 f7 d0             	not    %rax
ffffffff8020ce66:	83 e0 01             	and    $0x1,%eax
ffffffff8020ce69:	0f 85 09 02 00 00    	jne    ffffffff8020d078 <_RME_Prc_Crt.isra.0+0x348>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff8020ce6f:	41 f6 40 10 40       	testb  $0x40,0x10(%r8)
ffffffff8020ce74:	0f 84 fe 01 00 00    	je     ffffffff8020d078 <_RME_Prc_Crt.isra.0+0x348>
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff8020ce7a:	41 f6 41 10 40       	testb  $0x40,0x10(%r9)
ffffffff8020ce7f:	0f 84 f3 01 00 00    	je     ffffffff8020d078 <_RME_Prc_Crt.isra.0+0x348>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff8020ce85:	48 3b 4a 28          	cmp    0x28(%rdx),%rcx
ffffffff8020ce89:	0f 83 91 00 00 00    	jae    ffffffff8020cf20 <_RME_Prc_Crt.isra.0+0x1f0>
ffffffff8020ce8f:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020ce93:	48 03 4a 18          	add    0x18(%rdx),%rcx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020ce97:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020ce9e:	00 00 00 
ffffffff8020cea1:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8020cea6:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8020cea9:	84 d2                	test   %dl,%dl
ffffffff8020ceab:	0f 84 d7 01 00 00    	je     ffffffff8020d088 <_RME_Prc_Crt.isra.0+0x358>
};

static inline unsigned long long RME_X64_RDTSC()
{
	unsigned int lo, hi;
	__asm__ __volatile__ (
ffffffff8020ceb1:	0f 31                	rdtsc
    Prc_Crt->Head.Root_Ref=0U;
ffffffff8020ceb3:	66 0f 6f 05 c5 0a 01 	movdqa 0x10ac5(%rip),%xmm0        # ffffffff8021d980 <Table.1+0x100>
ffffffff8020ceba:	00 
		"rdtsc"
		: "=a" (lo), "=d" (hi)
	);
	return ((unsigned long long)hi << 32) | lo;
ffffffff8020cebb:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8020cebf:	89 c0                	mov    %eax,%eax
    Prc_Crt->Head.Object=0U;
ffffffff8020cec1:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
ffffffff8020cec8:	00 
ffffffff8020cec9:	48 09 c2             	or     %rax,%rdx
ffffffff8020cecc:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    Prc_Crt->Head.Root_Ref=0U;
ffffffff8020ced0:	0f 11 41 08          	movups %xmm0,0x8(%rcx)
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff8020ced4:	41 8b 10             	mov    (%r8),%edx
ffffffff8020ced7:	85 d2                	test   %edx,%edx
ffffffff8020ced9:	74 04                	je     ffffffff8020cedf <_RME_Prc_Crt.isra.0+0x1af>
ffffffff8020cedb:	4d 8b 40 08          	mov    0x8(%r8),%r8
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff8020cedf:	41 8b 01             	mov    (%r9),%eax
ffffffff8020cee2:	85 c0                	test   %eax,%eax
ffffffff8020cee4:	74 04                	je     ffffffff8020ceea <_RME_Prc_Crt.isra.0+0x1ba>
ffffffff8020cee6:	4d 8b 49 08          	mov    0x8(%r9),%r9
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020ceea:	b8 01 00 00 00       	mov    $0x1,%eax
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff8020ceef:	4c 89 41 28          	mov    %r8,0x28(%rcx)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff8020cef3:	4c 89 49 30          	mov    %r9,0x30(%rcx)
ffffffff8020cef7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cefa:	f0 49 0f c1 50 08    	lock xadd %rdx,0x8(%r8)
ffffffff8020cf00:	f0 49 0f c1 41 08    	lock xadd %rax,0x8(%r9)
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff8020cf06:	48 b8 00 00 00 00 00 	movabs $0x5000000000000,%rax
ffffffff8020cf0d:	00 05 00 
ffffffff8020cf10:	48 89 01             	mov    %rax,(%rcx)
    return 0;
ffffffff8020cf13:	31 c0                	xor    %eax,%eax
}
ffffffff8020cf15:	5b                   	pop    %rbx
ffffffff8020cf16:	5d                   	pop    %rbp
ffffffff8020cf17:	c3                   	ret
ffffffff8020cf18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020cf1f:	00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020cf20:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020cf27:	5b                   	pop    %rbx
ffffffff8020cf28:	5d                   	pop    %rbp
ffffffff8020cf29:	c3                   	ret
ffffffff8020cf2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020cf30:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cf33:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cf37:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020cf3a:	73 e4                	jae    ffffffff8020cf20 <_RME_Prc_Crt.isra.0+0x1f0>
ffffffff8020cf3c:	48 bb 00 00 00 00 ff 	movabs $0xffff00000000,%rbx
ffffffff8020cf43:	ff 00 00 
ffffffff8020cf46:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020cf4a:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020cf51:	00 00 00 
ffffffff8020cf54:	48 01 fa             	add    %rdi,%rdx
ffffffff8020cf57:	4c 8b 12             	mov    (%rdx),%r10
ffffffff8020cf5a:	4c 89 d5             	mov    %r10,%rbp
ffffffff8020cf5d:	48 21 dd             	and    %rbx,%rbp
ffffffff8020cf60:	4c 39 dd             	cmp    %r11,%rbp
ffffffff8020cf63:	0f 84 c5 00 00 00    	je     ffffffff8020d02e <_RME_Prc_Crt.isra.0+0x2fe>
ffffffff8020cf69:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020cf6d:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020cf71:	75 39                	jne    ffffffff8020cfac <_RME_Prc_Crt.isra.0+0x27c>
ffffffff8020cf73:	4c 8b 52 28          	mov    0x28(%rdx),%r10
ffffffff8020cf77:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020cf7c:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020cf7f:	73 9f                	jae    ffffffff8020cf20 <_RME_Prc_Crt.isra.0+0x1f0>
ffffffff8020cf81:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cf85:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020cf89:	4c 8b 10             	mov    (%rax),%r10
ffffffff8020cf8c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cf8f:	48 89 d8             	mov    %rbx,%rax
ffffffff8020cf92:	4c 21 d0             	and    %r10,%rax
ffffffff8020cf95:	4c 39 d8             	cmp    %r11,%rax
ffffffff8020cf98:	0f 84 90 00 00 00    	je     ffffffff8020d02e <_RME_Prc_Crt.isra.0+0x2fe>
ffffffff8020cf9e:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020cfa2:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020cfa6:	0f 84 d4 fd ff ff    	je     ffffffff8020cd80 <_RME_Prc_Crt.isra.0+0x50>
ffffffff8020cfac:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020cfb3:	5b                   	pop    %rbx
ffffffff8020cfb4:	5d                   	pop    %rbp
ffffffff8020cfb5:	c3                   	ret
ffffffff8020cfb6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020cfbd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020cfc0:	4c 89 c0             	mov    %r8,%rax
ffffffff8020cfc3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020cfc7:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020cfca:	0f 83 50 ff ff ff    	jae    ffffffff8020cf20 <_RME_Prc_Crt.isra.0+0x1f0>
ffffffff8020cfd0:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020cfd7:	ff 00 00 
ffffffff8020cfda:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cfde:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020cfe5:	00 00 00 
ffffffff8020cfe8:	48 01 f8             	add    %rdi,%rax
ffffffff8020cfeb:	4c 8b 10             	mov    (%rax),%r10
ffffffff8020cfee:	4c 89 d5             	mov    %r10,%rbp
ffffffff8020cff1:	4c 21 dd             	and    %r11,%rbp
ffffffff8020cff4:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020cff7:	74 35                	je     ffffffff8020d02e <_RME_Prc_Crt.isra.0+0x2fe>
ffffffff8020cff9:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020cffd:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020d001:	75 a9                	jne    ffffffff8020cfac <_RME_Prc_Crt.isra.0+0x27c>
ffffffff8020d003:	4c 8b 50 28          	mov    0x28(%rax),%r10
ffffffff8020d007:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020d00e:	4d 39 d0             	cmp    %r10,%r8
ffffffff8020d011:	0f 83 09 ff ff ff    	jae    ffffffff8020cf20 <_RME_Prc_Crt.isra.0+0x1f0>
ffffffff8020d017:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020d01b:	4c 03 40 18          	add    0x18(%rax),%r8
ffffffff8020d01f:	49 8b 00             	mov    (%r8),%rax
ffffffff8020d022:	49 21 c3             	and    %rax,%r11
ffffffff8020d025:	49 39 db             	cmp    %rbx,%r11
ffffffff8020d028:	0f 85 92 fd ff ff    	jne    ffffffff8020cdc0 <_RME_Prc_Crt.isra.0+0x90>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020d02e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020d035:	5b                   	pop    %rbx
ffffffff8020d036:	5d                   	pop    %rbp
ffffffff8020d037:	c3                   	ret
ffffffff8020d038:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020d03f:	00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020d040:	49 39 f1             	cmp    %rsi,%r9
ffffffff8020d043:	0f 83 d7 fe ff ff    	jae    ffffffff8020cf20 <_RME_Prc_Crt.isra.0+0x1f0>
ffffffff8020d049:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020d050:	ff 00 00 
ffffffff8020d053:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020d057:	49 01 f9             	add    %rdi,%r9
ffffffff8020d05a:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020d061:	00 00 00 
ffffffff8020d064:	49 8b 01             	mov    (%r9),%rax
ffffffff8020d067:	48 21 c6             	and    %rax,%rsi
ffffffff8020d06a:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020d06d:	0f 85 de fd ff ff    	jne    ffffffff8020ce51 <_RME_Prc_Crt.isra.0+0x121>
ffffffff8020d073:	eb b9                	jmp    ffffffff8020d02e <_RME_Prc_Crt.isra.0+0x2fe>
ffffffff8020d075:	0f 1f 00             	nopl   (%rax)
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8020d078:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020d07f:	e9 a3 fe ff ff       	jmp    ffffffff8020cf27 <_RME_Prc_Crt.isra.0+0x1f7>
ffffffff8020d084:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8020d088:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020d08f:	e9 93 fe ff ff       	jmp    ffffffff8020cf27 <_RME_Prc_Crt.isra.0+0x1f7>
ffffffff8020d094:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020d09b:	00 00 00 00 
ffffffff8020d09f:	90                   	nop

ffffffff8020d0a0 <_RME_Run_Swt.isra.0>:
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
ffffffff8020d0a0:	41 55                	push   %r13
ffffffff8020d0a2:	41 54                	push   %r12
ffffffff8020d0a4:	49 89 fc             	mov    %rdi,%r12
ffffffff8020d0a7:	55                   	push   %rbp
ffffffff8020d0a8:	48 89 f5             	mov    %rsi,%rbp
ffffffff8020d0ab:	53                   	push   %rbx
ffffffff8020d0ac:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020d0af:	48 83 ec 08          	sub    $0x8,%rsp
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff8020d0b3:	4c 8b aa 90 00 00 00 	mov    0x90(%rdx),%r13
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff8020d0ba:	48 8b be 90 00 00 00 	mov    0x90(%rsi),%rdi
ffffffff8020d0c1:	4c 89 e6             	mov    %r12,%rsi
ffffffff8020d0c4:	e8 17 d9 00 00       	call   ffffffff8021a9e0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff8020d0c9:	4c 89 ee             	mov    %r13,%rsi
ffffffff8020d0cc:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020d0cf:	e8 0c d9 00 00       	call   ffffffff8021a9e0 <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020d0d4:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d0db:	48 85 c0             	test   %rax,%rax
ffffffff8020d0de:	74 70                	je     ffffffff8020d150 <_RME_Run_Swt.isra.0+0xb0>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020d0e0:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d0e7:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020d0ea:	74 64                	je     ffffffff8020d150 <_RME_Run_Swt.isra.0+0xb0>
        return Inv_Top->Prc->Pgt;
ffffffff8020d0ec:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d0f0:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020d0f4:	48 8b 83 98 00 00 00 	mov    0x98(%rbx),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d0fb:	48 85 c0             	test   %rax,%rax
ffffffff8020d0fe:	74 40                	je     ffffffff8020d140 <_RME_Run_Swt.isra.0+0xa0>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020d100:	48 8d 8b 98 00 00 00 	lea    0x98(%rbx),%rcx
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d107:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020d10a:	74 34                	je     ffffffff8020d140 <_RME_Run_Swt.isra.0+0xa0>
        return Inv_Top->Prc->Pgt;
ffffffff8020d10c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d110:	48 8b 78 30          	mov    0x30(%rax),%rdi
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff8020d114:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8020d118:	48 39 42 18          	cmp    %rax,0x18(%rdx)
ffffffff8020d11c:	75 12                	jne    ffffffff8020d130 <_RME_Run_Swt.isra.0+0x90>
}
ffffffff8020d11e:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d122:	5b                   	pop    %rbx
ffffffff8020d123:	5d                   	pop    %rbp
ffffffff8020d124:	41 5c                	pop    %r12
ffffffff8020d126:	41 5d                	pop    %r13
ffffffff8020d128:	c3                   	ret
ffffffff8020d129:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020d130:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d134:	5b                   	pop    %rbx
ffffffff8020d135:	5d                   	pop    %rbp
ffffffff8020d136:	41 5c                	pop    %r12
ffffffff8020d138:	41 5d                	pop    %r13
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff8020d13a:	e9 21 e0 00 00       	jmp    ffffffff8021b160 <__RME_Pgt_Set>
ffffffff8020d13f:	90                   	nop
        return Thd->Sched.Prc->Pgt;
ffffffff8020d140:	48 8b 43 58          	mov    0x58(%rbx),%rax
ffffffff8020d144:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020d148:	eb ca                	jmp    ffffffff8020d114 <_RME_Run_Swt.isra.0+0x74>
ffffffff8020d14a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020d150:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff8020d154:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020d158:	eb 9a                	jmp    ffffffff8020d0f4 <_RME_Run_Swt.isra.0+0x54>
ffffffff8020d15a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020d160 <_RME_Pgt_Con.isra.0>:
static rme_ret_t _RME_Pgt_Con(struct RME_Cap_Cpt* Cpt,
ffffffff8020d160:	55                   	push   %rbp
ffffffff8020d161:	48 89 f0             	mov    %rsi,%rax
ffffffff8020d164:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d167:	53                   	push   %rbx
ffffffff8020d168:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020d16b:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d16f:	80 e6 80             	and    $0x80,%dh
ffffffff8020d172:	0f 85 48 01 00 00    	jne    ffffffff8020d2c0 <_RME_Pgt_Con.isra.0+0x160>
ffffffff8020d178:	48 39 c3             	cmp    %rax,%rbx
ffffffff8020d17b:	0f 83 2f 01 00 00    	jae    ffffffff8020d2b0 <_RME_Pgt_Con.isra.0+0x150>
ffffffff8020d181:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d188:	ff 00 00 
ffffffff8020d18b:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020d18f:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020d196:	00 00 00 
ffffffff8020d199:	48 01 fb             	add    %rdi,%rbx
ffffffff8020d19c:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020d19f:	48 21 d1             	and    %rdx,%rcx
ffffffff8020d1a2:	4c 39 d1             	cmp    %r10,%rcx
ffffffff8020d1a5:	0f 84 7e 01 00 00    	je     ffffffff8020d329 <_RME_Pgt_Con.isra.0+0x1c9>
ffffffff8020d1ab:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d1af:	48 83 fa 04          	cmp    $0x4,%rdx
ffffffff8020d1b3:	0f 85 17 02 00 00    	jne    ffffffff8020d3d0 <_RME_Pgt_Con.isra.0+0x270>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020d1b9:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020d1c0:	0f 85 7a 01 00 00    	jne    ffffffff8020d340 <_RME_Pgt_Con.isra.0+0x1e0>
ffffffff8020d1c6:	49 39 c0             	cmp    %rax,%r8
ffffffff8020d1c9:	0f 83 e1 00 00 00    	jae    ffffffff8020d2b0 <_RME_Pgt_Con.isra.0+0x150>
ffffffff8020d1cf:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020d1d6:	ff 00 00 
ffffffff8020d1d9:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020d1dd:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020d1e4:	00 00 00 
ffffffff8020d1e7:	49 8d 2c 38          	lea    (%r8,%rdi,1),%rbp
ffffffff8020d1eb:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020d1ef:	48 21 c2             	and    %rax,%rdx
ffffffff8020d1f2:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020d1f5:	0f 84 2e 01 00 00    	je     ffffffff8020d329 <_RME_Pgt_Con.isra.0+0x1c9>
ffffffff8020d1fb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020d1ff:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020d203:	0f 85 c7 01 00 00    	jne    ffffffff8020d3d0 <_RME_Pgt_Con.isra.0+0x270>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff8020d209:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8020d20d:	a8 10                	test   $0x10,%al
ffffffff8020d20f:	0f 84 cb 01 00 00    	je     ffffffff8020d3e0 <_RME_Pgt_Con.isra.0+0x280>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff8020d215:	f6 45 10 08          	testb  $0x8,0x10(%rbp)
ffffffff8020d219:	0f 84 c1 01 00 00    	je     ffffffff8020d3e0 <_RME_Pgt_Con.isra.0+0x280>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff8020d21f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d222:	48 c1 ea 24          	shr    $0x24,%rdx
ffffffff8020d226:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020d229:	0f 82 b1 01 00 00    	jb     ffffffff8020d3e0 <_RME_Pgt_Con.isra.0+0x280>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff8020d22f:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020d233:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff8020d238:	48 39 c6             	cmp    %rax,%rsi
ffffffff8020d23b:	0f 82 9f 01 00 00    	jb     ffffffff8020d3e0 <_RME_Pgt_Con.isra.0+0x280>
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff8020d241:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff8020d245:	48 89 f0             	mov    %rsi,%rax
ffffffff8020d248:	48 d3 e8             	shr    %cl,%rax
ffffffff8020d24b:	48 85 c0             	test   %rax,%rax
ffffffff8020d24e:	0f 85 9c 01 00 00    	jne    ffffffff8020d3f0 <_RME_Pgt_Con.isra.0+0x290>
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff8020d254:	48 8b 45 28          	mov    0x28(%rbp),%rax
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff8020d258:	48 c1 e9 20          	shr    $0x20,%rcx
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff8020d25c:	89 c2                	mov    %eax,%edx
ffffffff8020d25e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d262:	48 01 d0             	add    %rdx,%rax
    if(Szord_Parent!=Order_Child)
ffffffff8020d265:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020d268:	0f 85 82 01 00 00    	jne    ffffffff8020d3f0 <_RME_Pgt_Con.isra.0+0x290>
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff8020d26e:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020d271:	4c 89 c9             	mov    %r9,%rcx
ffffffff8020d274:	48 89 df             	mov    %rbx,%rdi
ffffffff8020d277:	e8 24 e1 00 00       	call   ffffffff8021b3a0 <__RME_Pgt_Pgdir_Map>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff8020d27c:	8b 13                	mov    (%rbx),%edx
ffffffff8020d27e:	85 d2                	test   %edx,%edx
ffffffff8020d280:	74 04                	je     ffffffff8020d286 <_RME_Pgt_Con.isra.0+0x126>
ffffffff8020d282:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff8020d286:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020d28b:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020d291:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff8020d294:	85 c0                	test   %eax,%eax
ffffffff8020d296:	0f 85 24 01 00 00    	jne    ffffffff8020d3c0 <_RME_Pgt_Con.isra.0+0x260>
ffffffff8020d29c:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020d2a1:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    return 0;
ffffffff8020d2a7:	31 c0                	xor    %eax,%eax
}
ffffffff8020d2a9:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d2ad:	5b                   	pop    %rbx
ffffffff8020d2ae:	5d                   	pop    %rbp
ffffffff8020d2af:	c3                   	ret
ffffffff8020d2b0:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d2b4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020d2bb:	5b                   	pop    %rbx
ffffffff8020d2bc:	5d                   	pop    %rbp
ffffffff8020d2bd:	c3                   	ret
ffffffff8020d2be:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d2c0:	48 89 da             	mov    %rbx,%rdx
ffffffff8020d2c3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d2c7:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d2ca:	73 e4                	jae    ffffffff8020d2b0 <_RME_Pgt_Con.isra.0+0x150>
ffffffff8020d2cc:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020d2d3:	ff 00 00 
ffffffff8020d2d6:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d2da:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020d2e1:	00 00 00 
ffffffff8020d2e4:	48 01 fa             	add    %rdi,%rdx
ffffffff8020d2e7:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020d2ea:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020d2ed:	4c 21 d5             	and    %r10,%rbp
ffffffff8020d2f0:	4c 39 dd             	cmp    %r11,%rbp
ffffffff8020d2f3:	74 34                	je     ffffffff8020d329 <_RME_Pgt_Con.isra.0+0x1c9>
ffffffff8020d2f5:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d2f9:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020d2fd:	0f 85 cd 00 00 00    	jne    ffffffff8020d3d0 <_RME_Pgt_Con.isra.0+0x270>
ffffffff8020d303:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020d307:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020d30d:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020d310:	73 9e                	jae    ffffffff8020d2b0 <_RME_Pgt_Con.isra.0+0x150>
ffffffff8020d312:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020d316:	48 03 5a 18          	add    0x18(%rdx),%rbx
ffffffff8020d31a:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020d31d:	49 21 d2             	and    %rdx,%r10
ffffffff8020d320:	4d 39 da             	cmp    %r11,%r10
ffffffff8020d323:	0f 85 82 fe ff ff    	jne    ffffffff8020d1ab <_RME_Pgt_Con.isra.0+0x4b>
}
ffffffff8020d329:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d32d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020d334:	5b                   	pop    %rbx
ffffffff8020d335:	5d                   	pop    %rbp
ffffffff8020d336:	c3                   	ret
ffffffff8020d337:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020d33e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020d340:	4c 89 c2             	mov    %r8,%rdx
ffffffff8020d343:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d347:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d34a:	0f 83 60 ff ff ff    	jae    ffffffff8020d2b0 <_RME_Pgt_Con.isra.0+0x150>
ffffffff8020d350:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d357:	ff 00 00 
ffffffff8020d35a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d35e:	48 8d 04 3a          	lea    (%rdx,%rdi,1),%rax
ffffffff8020d362:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020d369:	00 00 00 
ffffffff8020d36c:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020d36f:	49 89 d2             	mov    %rdx,%r10
ffffffff8020d372:	49 21 ca             	and    %rcx,%r10
ffffffff8020d375:	49 39 fa             	cmp    %rdi,%r10
ffffffff8020d378:	74 af                	je     ffffffff8020d329 <_RME_Pgt_Con.isra.0+0x1c9>
ffffffff8020d37a:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d37e:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020d382:	75 4c                	jne    ffffffff8020d3d0 <_RME_Pgt_Con.isra.0+0x270>
ffffffff8020d384:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020d388:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020d38f:	49 39 d0             	cmp    %rdx,%r8
ffffffff8020d392:	0f 83 18 ff ff ff    	jae    ffffffff8020d2b0 <_RME_Pgt_Con.isra.0+0x150>
ffffffff8020d398:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020d39c:	4c 03 40 18          	add    0x18(%rax),%r8
ffffffff8020d3a0:	49 8b 00             	mov    (%r8),%rax
ffffffff8020d3a3:	4c 89 c5             	mov    %r8,%rbp
ffffffff8020d3a6:	48 21 c1             	and    %rax,%rcx
ffffffff8020d3a9:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020d3ac:	0f 85 49 fe ff ff    	jne    ffffffff8020d1fb <_RME_Pgt_Con.isra.0+0x9b>
ffffffff8020d3b2:	e9 72 ff ff ff       	jmp    ffffffff8020d329 <_RME_Pgt_Con.isra.0+0x1c9>
ffffffff8020d3b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020d3be:	00 00 
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020d3c0:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
ffffffff8020d3c4:	e9 d3 fe ff ff       	jmp    ffffffff8020d29c <_RME_Pgt_Con.isra.0+0x13c>
ffffffff8020d3c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
}
ffffffff8020d3d0:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d3d4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020d3db:	5b                   	pop    %rbx
ffffffff8020d3dc:	5d                   	pop    %rbp
ffffffff8020d3dd:	c3                   	ret
ffffffff8020d3de:	66 90                	xchg   %ax,%ax
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff8020d3e0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020d3e7:	e9 bd fe ff ff       	jmp    ffffffff8020d2a9 <_RME_Pgt_Con.isra.0+0x149>
ffffffff8020d3ec:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PGT_ADDR;
ffffffff8020d3f0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020d3f7:	e9 ad fe ff ff       	jmp    ffffffff8020d2a9 <_RME_Pgt_Con.isra.0+0x149>
ffffffff8020d3fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020d400 <_RME_Pgt_Add.isra.0>:
static rme_ret_t _RME_Pgt_Add(struct RME_Cap_Cpt* Cpt, 
ffffffff8020d400:	41 55                	push   %r13
ffffffff8020d402:	49 89 f3             	mov    %rsi,%r11
ffffffff8020d405:	49 89 fa             	mov    %rdi,%r10
ffffffff8020d408:	48 89 d0             	mov    %rdx,%rax
ffffffff8020d40b:	41 54                	push   %r12
ffffffff8020d40d:	4d 89 c4             	mov    %r8,%r12
ffffffff8020d410:	55                   	push   %rbp
ffffffff8020d411:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020d414:	53                   	push   %rbx
ffffffff8020d415:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020d419:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d41e:	80 e6 80             	and    $0x80,%dh
ffffffff8020d421:	0f 85 b1 01 00 00    	jne    ffffffff8020d5d8 <_RME_Pgt_Add.isra.0+0x1d8>
ffffffff8020d427:	4c 39 d8             	cmp    %r11,%rax
ffffffff8020d42a:	0f 83 90 01 00 00    	jae    ffffffff8020d5c0 <_RME_Pgt_Add.isra.0+0x1c0>
ffffffff8020d430:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020d437:	ff 00 00 
ffffffff8020d43a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d43e:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020d445:	00 00 00 
ffffffff8020d448:	48 8d 1c 38          	lea    (%rax,%rdi,1),%rbx
ffffffff8020d44c:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020d44f:	48 21 c2             	and    %rax,%rdx
ffffffff8020d452:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020d455:	0f 84 e8 01 00 00    	je     ffffffff8020d643 <_RME_Pgt_Add.isra.0+0x243>
ffffffff8020d45b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020d45f:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020d463:	0f 85 7f 02 00 00    	jne    ffffffff8020d6e8 <_RME_Pgt_Add.isra.0+0x2e8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff8020d469:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff8020d470:	0f 85 e2 01 00 00    	jne    ffffffff8020d658 <_RME_Pgt_Add.isra.0+0x258>
ffffffff8020d476:	4d 39 d9             	cmp    %r11,%r9
ffffffff8020d479:	0f 83 41 01 00 00    	jae    ffffffff8020d5c0 <_RME_Pgt_Add.isra.0+0x1c0>
ffffffff8020d47f:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020d486:	ff 00 00 
ffffffff8020d489:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020d48d:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020d494:	00 00 00 
ffffffff8020d497:	4b 8d 3c 11          	lea    (%r9,%r10,1),%rdi
ffffffff8020d49b:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020d49e:	48 21 c2             	and    %rax,%rdx
ffffffff8020d4a1:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020d4a4:	0f 84 99 01 00 00    	je     ffffffff8020d643 <_RME_Pgt_Add.isra.0+0x243>
ffffffff8020d4aa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020d4ae:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020d4b2:	0f 85 30 02 00 00    	jne    ffffffff8020d6e8 <_RME_Pgt_Add.isra.0+0x2e8>
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff8020d4b8:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8020d4bc:	a8 02                	test   $0x2,%al
ffffffff8020d4be:	0f 84 3c 02 00 00    	je     ffffffff8020d700 <_RME_Pgt_Add.isra.0+0x300>
    RME_CAP_CHECK(Pgt_Src,RME_PGT_FLAG_ADD_SRC);
ffffffff8020d4c4:	48 8b 57 10          	mov    0x10(%rdi),%rdx
ffffffff8020d4c8:	f6 c2 01             	test   $0x1,%dl
ffffffff8020d4cb:	0f 84 2f 02 00 00    	je     ffffffff8020d700 <_RME_Pgt_Add.isra.0+0x300>
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff8020d4d1:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d4d4:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff8020d4d8:	48 39 e9             	cmp    %rbp,%rcx
ffffffff8020d4db:	0f 82 1f 02 00 00    	jb     ffffffff8020d700 <_RME_Pgt_Add.isra.0+0x300>
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff8020d4e1:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020d4e5:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff8020d4ea:	48 39 c5             	cmp    %rax,%rbp
ffffffff8020d4ed:	0f 82 0d 02 00 00    	jb     ffffffff8020d700 <_RME_Pgt_Add.isra.0+0x300>
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff8020d4f3:	48 89 d0             	mov    %rdx,%rax
ffffffff8020d4f6:	48 c1 e8 24          	shr    $0x24,%rax
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff8020d4fa:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020d4fd:	0f 82 fd 01 00 00    	jb     ffffffff8020d700 <_RME_Pgt_Add.isra.0+0x300>
       (Pos_Src<RME_PGT_FLAG_LOW(Pgt_Src->Head.Flag)))
ffffffff8020d503:	48 c1 ea 08          	shr    $0x8,%rdx
ffffffff8020d507:	81 e2 ff ff ff 0f    	and    $0xfffffff,%edx
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff8020d50d:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8020d510:	0f 82 ea 01 00 00    	jb     ffffffff8020d700 <_RME_Pgt_Add.isra.0+0x300>
    Szord_Dst=RME_PGT_SIZEORD(Pgt_Dst->Order);
ffffffff8020d516:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
    Szord_Src=RME_PGT_SIZEORD(Pgt_Src->Order);
ffffffff8020d51a:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    Szord_Dst=RME_PGT_SIZEORD(Pgt_Dst->Order);
ffffffff8020d51e:	49 89 cd             	mov    %rcx,%r13
    Szord_Src=RME_PGT_SIZEORD(Pgt_Src->Order);
ffffffff8020d521:	48 89 d0             	mov    %rdx,%rax
    Szord_Dst=RME_PGT_SIZEORD(Pgt_Dst->Order);
ffffffff8020d524:	49 c1 ed 20          	shr    $0x20,%r13
    Szord_Src=RME_PGT_SIZEORD(Pgt_Src->Order);
ffffffff8020d528:	48 c1 e8 20          	shr    $0x20,%rax
    if(Szord_Dst>Szord_Src)
ffffffff8020d52c:	4c 39 e8             	cmp    %r13,%rax
ffffffff8020d52f:	0f 82 d7 01 00 00    	jb     ffffffff8020d70c <_RME_Pgt_Add.isra.0+0x30c>
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff8020d535:	49 89 e8             	mov    %rbp,%r8
       ((Pos_Src>>RME_PGT_NUMORD(Pgt_Src->Order))!=0U))
ffffffff8020d538:	49 89 f2             	mov    %rsi,%r10
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff8020d53b:	49 d3 e8             	shr    %cl,%r8
       ((Pos_Src>>RME_PGT_NUMORD(Pgt_Src->Order))!=0U))
ffffffff8020d53e:	89 d1                	mov    %edx,%ecx
ffffffff8020d540:	49 d3 ea             	shr    %cl,%r10
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff8020d543:	4d 09 d0             	or     %r10,%r8
ffffffff8020d546:	0f 85 c0 01 00 00    	jne    ffffffff8020d70c <_RME_Pgt_Add.isra.0+0x30c>
    if(Szord_Src<RME_WORD_BIT)
ffffffff8020d54c:	48 83 f8 3f          	cmp    $0x3f,%rax
ffffffff8020d550:	77 21                	ja     ffffffff8020d573 <_RME_Pgt_Add.isra.0+0x173>
        if(RME_POW2(Szord_Src)<=(Index<<Szord_Dst))
ffffffff8020d552:	89 c1                	mov    %eax,%ecx
ffffffff8020d554:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020d559:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020d55c:	44 89 e9             	mov    %r13d,%ecx
ffffffff8020d55f:	48 89 d0             	mov    %rdx,%rax
ffffffff8020d562:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
ffffffff8020d567:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020d56a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d56d:	0f 83 99 01 00 00    	jae    ffffffff8020d70c <_RME_Pgt_Add.isra.0+0x30c>
    if(__RME_Pgt_Lookup(Pgt_Src,Pos_Src,&Paddr_Src,&Flag_Src)<0)
ffffffff8020d573:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
ffffffff8020d578:	48 89 e2             	mov    %rsp,%rdx
ffffffff8020d57b:	e8 00 df 00 00       	call   ffffffff8021b480 <__RME_Pgt_Lookup>
        Paddr_Dst=Paddr_Src;
ffffffff8020d580:	48 8b 34 24          	mov    (%rsp),%rsi
    if(Szord_Dst<RME_WORD_BIT)
ffffffff8020d584:	49 83 fd 3f          	cmp    $0x3f,%r13
ffffffff8020d588:	0f 86 42 01 00 00    	jbe    ffffffff8020d6d0 <_RME_Pgt_Add.isra.0+0x2d0>
    if(((Flag_Dst)&(~Flag_Src))!=0U)
ffffffff8020d58e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff8020d593:	48 f7 d0             	not    %rax
ffffffff8020d596:	4c 85 e0             	test   %r12,%rax
ffffffff8020d599:	0f 85 79 01 00 00    	jne    ffffffff8020d718 <_RME_Pgt_Add.isra.0+0x318>
    if(__RME_Pgt_Page_Map(Pgt_Dst,Paddr_Dst,Pos_Dst,Flag_Dst)<0)
ffffffff8020d59f:	4c 89 e1             	mov    %r12,%rcx
ffffffff8020d5a2:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020d5a5:	48 89 df             	mov    %rbx,%rdi
ffffffff8020d5a8:	e8 23 dd 00 00       	call   ffffffff8021b2d0 <__RME_Pgt_Page_Map>
    return 0;
ffffffff8020d5ad:	31 c0                	xor    %eax,%eax
}
ffffffff8020d5af:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8020d5b3:	5b                   	pop    %rbx
ffffffff8020d5b4:	5d                   	pop    %rbp
ffffffff8020d5b5:	41 5c                	pop    %r12
ffffffff8020d5b7:	41 5d                	pop    %r13
ffffffff8020d5b9:	c3                   	ret
ffffffff8020d5ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020d5c0:	48 83 c4 18          	add    $0x18,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d5c4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020d5cb:	5b                   	pop    %rbx
ffffffff8020d5cc:	5d                   	pop    %rbp
ffffffff8020d5cd:	41 5c                	pop    %r12
ffffffff8020d5cf:	41 5d                	pop    %r13
ffffffff8020d5d1:	c3                   	ret
ffffffff8020d5d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d5d8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d5db:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d5df:	4c 39 da             	cmp    %r11,%rdx
ffffffff8020d5e2:	73 dc                	jae    ffffffff8020d5c0 <_RME_Pgt_Add.isra.0+0x1c0>
ffffffff8020d5e4:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020d5eb:	00 00 00 
ffffffff8020d5ee:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d5f2:	48 01 fa             	add    %rdi,%rdx
ffffffff8020d5f5:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020d5fc:	ff 00 00 
ffffffff8020d5ff:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020d602:	48 89 cb             	mov    %rcx,%rbx
ffffffff8020d605:	48 21 fb             	and    %rdi,%rbx
ffffffff8020d608:	4c 39 c3             	cmp    %r8,%rbx
ffffffff8020d60b:	74 36                	je     ffffffff8020d643 <_RME_Pgt_Add.isra.0+0x243>
ffffffff8020d60d:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d611:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020d615:	0f 85 cd 00 00 00    	jne    ffffffff8020d6e8 <_RME_Pgt_Add.isra.0+0x2e8>
ffffffff8020d61b:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020d61f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020d624:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020d627:	73 97                	jae    ffffffff8020d5c0 <_RME_Pgt_Add.isra.0+0x1c0>
ffffffff8020d629:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d62d:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020d631:	48 89 c3             	mov    %rax,%rbx
ffffffff8020d634:	48 8b 00             	mov    (%rax),%rax
ffffffff8020d637:	48 21 c7             	and    %rax,%rdi
ffffffff8020d63a:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020d63d:	0f 85 18 fe ff ff    	jne    ffffffff8020d45b <_RME_Pgt_Add.isra.0+0x5b>
}
ffffffff8020d643:	48 83 c4 18          	add    $0x18,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d647:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020d64e:	5b                   	pop    %rbx
ffffffff8020d64f:	5d                   	pop    %rbp
ffffffff8020d650:	41 5c                	pop    %r12
ffffffff8020d652:	41 5d                	pop    %r13
ffffffff8020d654:	c3                   	ret
ffffffff8020d655:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff8020d658:	4c 89 c8             	mov    %r9,%rax
ffffffff8020d65b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020d65f:	4c 39 d8             	cmp    %r11,%rax
ffffffff8020d662:	0f 83 58 ff ff ff    	jae    ffffffff8020d5c0 <_RME_Pgt_Add.isra.0+0x1c0>
ffffffff8020d668:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d66f:	ff 00 00 
ffffffff8020d672:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d676:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020d67d:	00 00 00 
ffffffff8020d680:	4c 01 d0             	add    %r10,%rax
ffffffff8020d683:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020d686:	48 89 d7             	mov    %rdx,%rdi
ffffffff8020d689:	48 21 cf             	and    %rcx,%rdi
ffffffff8020d68c:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020d68f:	74 b2                	je     ffffffff8020d643 <_RME_Pgt_Add.isra.0+0x243>
ffffffff8020d691:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d695:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020d699:	75 4d                	jne    ffffffff8020d6e8 <_RME_Pgt_Add.isra.0+0x2e8>
ffffffff8020d69b:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020d69f:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff8020d6a6:	49 39 d1             	cmp    %rdx,%r9
ffffffff8020d6a9:	0f 83 11 ff ff ff    	jae    ffffffff8020d5c0 <_RME_Pgt_Add.isra.0+0x1c0>
ffffffff8020d6af:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8020d6b3:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020d6b7:	4c 01 cf             	add    %r9,%rdi
ffffffff8020d6ba:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020d6bd:	48 21 c1             	and    %rax,%rcx
ffffffff8020d6c0:	4c 39 c1             	cmp    %r8,%rcx
ffffffff8020d6c3:	0f 85 e1 fd ff ff    	jne    ffffffff8020d4aa <_RME_Pgt_Add.isra.0+0xaa>
ffffffff8020d6c9:	e9 75 ff ff ff       	jmp    ffffffff8020d643 <_RME_Pgt_Add.isra.0+0x243>
ffffffff8020d6ce:	66 90                	xchg   %ax,%ax
        Paddr_Dst=Paddr_Src+(Index<<Szord_Dst);
ffffffff8020d6d0:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
ffffffff8020d6d5:	44 89 e9             	mov    %r13d,%ecx
ffffffff8020d6d8:	48 d3 e6             	shl    %cl,%rsi
ffffffff8020d6db:	48 03 34 24          	add    (%rsp),%rsi
ffffffff8020d6df:	e9 aa fe ff ff       	jmp    ffffffff8020d58e <_RME_Pgt_Add.isra.0+0x18e>
ffffffff8020d6e4:	0f 1f 40 00          	nopl   0x0(%rax)
}
ffffffff8020d6e8:	48 83 c4 18          	add    $0x18,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d6ec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020d6f3:	5b                   	pop    %rbx
ffffffff8020d6f4:	5d                   	pop    %rbp
ffffffff8020d6f5:	41 5c                	pop    %r12
ffffffff8020d6f7:	41 5d                	pop    %r13
ffffffff8020d6f9:	c3                   	ret
ffffffff8020d6fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff8020d700:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020d707:	e9 a3 fe ff ff       	jmp    ffffffff8020d5af <_RME_Pgt_Add.isra.0+0x1af>
        return RME_ERR_PGT_ADDR;
ffffffff8020d70c:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020d713:	e9 97 fe ff ff       	jmp    ffffffff8020d5af <_RME_Pgt_Add.isra.0+0x1af>
        return RME_ERR_PGT_PERM;
ffffffff8020d718:	48 c7 c0 98 ff ff ff 	mov    $0xffffffffffffff98,%rax
ffffffff8020d71f:	e9 8b fe ff ff       	jmp    ffffffff8020d5af <_RME_Pgt_Add.isra.0+0x1af>
ffffffff8020d724:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020d72b:	00 00 00 00 
ffffffff8020d72f:	90                   	nop

ffffffff8020d730 <_RME_Cpt_Add.isra.0>:
static rme_ret_t _RME_Cpt_Add(struct RME_Cap_Cpt* Cpt,
ffffffff8020d730:	48 89 d0             	mov    %rdx,%rax
ffffffff8020d733:	55                   	push   %rbp
ffffffff8020d734:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020d737:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020d738:	f6 c4 80             	test   $0x80,%ah
ffffffff8020d73b:	0f 85 ef 01 00 00    	jne    ffffffff8020d930 <_RME_Cpt_Add.isra.0+0x200>
ffffffff8020d741:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020d744:	0f 83 d6 01 00 00    	jae    ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020d74a:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020d751:	ff 00 00 
ffffffff8020d754:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d758:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020d75f:	00 00 00 
ffffffff8020d762:	48 01 f8             	add    %rdi,%rax
ffffffff8020d765:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020d768:	49 21 ca             	and    %rcx,%r10
ffffffff8020d76b:	4d 39 da             	cmp    %r11,%r10
ffffffff8020d76e:	0f 84 24 02 00 00    	je     ffffffff8020d998 <_RME_Cpt_Add.isra.0+0x268>
ffffffff8020d774:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d778:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020d77c:	0f 85 0e 03 00 00    	jne    ffffffff8020da90 <_RME_Cpt_Add.isra.0+0x360>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020d782:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020d789:	0f 85 19 02 00 00    	jne    ffffffff8020d9a8 <_RME_Cpt_Add.isra.0+0x278>
ffffffff8020d78f:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020d792:	0f 83 88 01 00 00    	jae    ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020d798:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020d79f:	ff 00 00 
ffffffff8020d7a2:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020d7a6:	49 01 f8             	add    %rdi,%r8
ffffffff8020d7a9:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020d7b0:	00 00 00 
ffffffff8020d7b3:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020d7b6:	48 21 ce             	and    %rcx,%rsi
ffffffff8020d7b9:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020d7bc:	0f 84 d6 01 00 00    	je     ffffffff8020d998 <_RME_Cpt_Add.isra.0+0x268>
ffffffff8020d7c2:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d7c6:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020d7ca:	0f 85 c0 02 00 00    	jne    ffffffff8020da90 <_RME_Cpt_Add.isra.0+0x360>
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020d7d0:	f6 40 10 10          	testb  $0x10,0x10(%rax)
ffffffff8020d7d4:	0f 84 a6 02 00 00    	je     ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
    RME_CAP_CHECK(Cpt_Src,RME_CPT_FLAG_ADD_SRC);
ffffffff8020d7da:	41 f6 40 10 08       	testb  $0x8,0x10(%r8)
ffffffff8020d7df:	0f 84 9b 02 00 00    	je     ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff8020d7e5:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8020d7e9:	0f 83 31 01 00 00    	jae    ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x1f0>
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020d7ef:	4d 3b 48 28          	cmp    0x28(%r8),%r9
ffffffff8020d7f3:	0f 83 27 01 00 00    	jae    ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x1f0>
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020d7f9:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d800:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020d803:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020d807:	4d 03 48 18          	add    0x18(%r8),%r9
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020d80b:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020d812:	00 00 00 
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Src->Head.Type_Stat));
ffffffff8020d815:	49 8b 31             	mov    (%r9),%rsi
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020d818:	48 21 f1             	and    %rsi,%rcx
ffffffff8020d81b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020d81e:	0f 84 74 01 00 00    	je     ffffffff8020d998 <_RME_Cpt_Add.isra.0+0x268>
    if(Type_Stat==0U)
ffffffff8020d824:	48 85 f6             	test   %rsi,%rsi
ffffffff8020d827:	0f 84 3f 03 00 00    	je     ffffffff8020db6c <_RME_Cpt_Add.isra.0+0x43c>
    Src_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020d82d:	48 89 f7             	mov    %rsi,%rdi
ffffffff8020d830:	48 c1 ef 30          	shr    $0x30,%rdi
    if(Src_Type==RME_CAP_TYPE_PGT)
ffffffff8020d834:	48 83 ff 04          	cmp    $0x4,%rdi
ffffffff8020d838:	0f 84 e2 01 00 00    	je     ffffffff8020da20 <_RME_Cpt_Add.isra.0+0x2f0>
    else if(Src_Type==RME_CAP_TYPE_KFN)
ffffffff8020d83e:	48 83 ff 01          	cmp    $0x1,%rdi
ffffffff8020d842:	0f 84 68 02 00 00    	je     ffffffff8020dab0 <_RME_Cpt_Add.isra.0+0x380>
    else if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020d848:	48 83 ff 02          	cmp    $0x2,%rdi
ffffffff8020d84c:	0f 84 8e 02 00 00    	je     ffffffff8020dae0 <_RME_Cpt_Add.isra.0+0x3b0>
        if(Flag==0U)
ffffffff8020d852:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
ffffffff8020d858:	0f 84 22 02 00 00    	je     ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
        if((Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020d85e:	49 8b 49 10          	mov    0x10(%r9),%rcx
ffffffff8020d862:	48 f7 d1             	not    %rcx
ffffffff8020d865:	48 85 4c 24 18       	test   %rcx,0x18(%rsp)
ffffffff8020d86a:	0f 85 10 02 00 00    	jne    ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff8020d870:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d874:	48 03 50 18          	add    0x18(%rax),%rdx
    if(Capobj_Dst->Head.Type_Stat!=0U)
ffffffff8020d878:	48 8b 02             	mov    (%rdx),%rax
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff8020d87b:	48 89 d1             	mov    %rdx,%rcx
    if(Capobj_Dst->Head.Type_Stat!=0U)
ffffffff8020d87e:	48 85 c0             	test   %rax,%rax
ffffffff8020d881:	0f 85 d9 02 00 00    	jne    ffffffff8020db60 <_RME_Cpt_Add.isra.0+0x430>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020d887:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020d88e:	00 00 00 
ffffffff8020d891:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8020d896:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff8020d899:	84 d2                	test   %dl,%dl
ffffffff8020d89b:	0f 84 bf 02 00 00    	je     ffffffff8020db60 <_RME_Cpt_Add.isra.0+0x430>
	__asm__ __volatile__ (
ffffffff8020d8a1:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff8020d8a3:	89 c0                	mov    %eax,%eax
ffffffff8020d8a5:	48 c1 e2 20          	shl    $0x20,%rdx
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020d8a9:	48 83 ef 01          	sub    $0x1,%rdi
ffffffff8020d8ad:	48 09 c2             	or     %rax,%rdx
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
ffffffff8020d8b0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff8020d8b5:	48 89 51 20          	mov    %rdx,0x20(%rcx)
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
ffffffff8020d8b9:	48 89 41 10          	mov    %rax,0x10(%rcx)
ffffffff8020d8bd:	49 8b 41 18          	mov    0x18(%r9),%rax
ffffffff8020d8c1:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff8020d8c5:	49 8b 41 28          	mov    0x28(%r9),%rax
ffffffff8020d8c9:	48 89 41 28          	mov    %rax,0x28(%rcx)
ffffffff8020d8cd:	49 8b 41 30          	mov    0x30(%r9),%rax
ffffffff8020d8d1:	48 89 41 30          	mov    %rax,0x30(%rcx)
ffffffff8020d8d5:	49 8b 41 38          	mov    0x38(%r9),%rax
ffffffff8020d8d9:	48 89 41 38          	mov    %rax,0x38(%rcx)
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020d8dd:	48 83 ff 01          	cmp    $0x1,%rdi
ffffffff8020d8e1:	0f 86 b9 01 00 00    	jbe    ffffffff8020daa0 <_RME_Cpt_Add.isra.0+0x370>
        Capobj_Dst->Head.Root_Ref=RME_CAP_CONV_ROOT(Capobj_Src,rme_ptr_t);
ffffffff8020d8e7:	49 8b 01             	mov    (%r9),%rax
ffffffff8020d8ea:	85 c0                	test   %eax,%eax
ffffffff8020d8ec:	74 04                	je     ffffffff8020d8f2 <_RME_Cpt_Add.isra.0+0x1c2>
ffffffff8020d8ee:	4d 8b 49 08          	mov    0x8(%r9),%r9
ffffffff8020d8f2:	4c 89 49 08          	mov    %r9,0x8(%rcx)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020d8f6:	ba 01 00 00 00       	mov    $0x1,%edx
        RME_FETCH_ADD(&(((volatile struct RME_Cap_Struct*)
ffffffff8020d8fb:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff8020d8ff:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff8020d905:	48 b8 00 00 00 00 00 	movabs $0xffff000000000000,%rax
ffffffff8020d90c:	00 ff ff 
ffffffff8020d90f:	48 21 f0             	and    %rsi,%rax
ffffffff8020d912:	48 83 c8 01          	or     $0x1,%rax
ffffffff8020d916:	48 89 01             	mov    %rax,(%rcx)
    return 0;
ffffffff8020d919:	31 c0                	xor    %eax,%eax
}
ffffffff8020d91b:	5b                   	pop    %rbx
ffffffff8020d91c:	5d                   	pop    %rbp
ffffffff8020d91d:	c3                   	ret
ffffffff8020d91e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020d920:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020d927:	5b                   	pop    %rbx
ffffffff8020d928:	5d                   	pop    %rbp
ffffffff8020d929:	c3                   	ret
ffffffff8020d92a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020d930:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d933:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020d937:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020d93a:	73 e4                	jae    ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020d93c:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020d943:	ff 00 00 
ffffffff8020d946:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020d94a:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020d951:	00 00 00 
ffffffff8020d954:	48 01 f9             	add    %rdi,%rcx
ffffffff8020d957:	4c 8b 11             	mov    (%rcx),%r10
ffffffff8020d95a:	4c 89 d5             	mov    %r10,%rbp
ffffffff8020d95d:	4c 21 dd             	and    %r11,%rbp
ffffffff8020d960:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020d963:	74 33                	je     ffffffff8020d998 <_RME_Cpt_Add.isra.0+0x268>
ffffffff8020d965:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020d969:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020d96d:	0f 85 1d 01 00 00    	jne    ffffffff8020da90 <_RME_Cpt_Add.isra.0+0x360>
ffffffff8020d973:	4c 8b 51 28          	mov    0x28(%rcx),%r10
ffffffff8020d977:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020d97c:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020d97f:	73 9f                	jae    ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020d981:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d985:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020d989:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020d98c:	49 21 cb             	and    %rcx,%r11
ffffffff8020d98f:	49 39 db             	cmp    %rbx,%r11
ffffffff8020d992:	0f 85 dc fd ff ff    	jne    ffffffff8020d774 <_RME_Cpt_Add.isra.0+0x44>
ffffffff8020d998:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020d99f:	5b                   	pop    %rbx
ffffffff8020d9a0:	5d                   	pop    %rbp
ffffffff8020d9a1:	c3                   	ret
ffffffff8020d9a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020d9a8:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020d9ab:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020d9af:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020d9b2:	0f 83 68 ff ff ff    	jae    ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020d9b8:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020d9bf:	00 00 00 
ffffffff8020d9c2:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020d9c6:	48 01 f9             	add    %rdi,%rcx
ffffffff8020d9c9:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020d9d0:	ff 00 00 
ffffffff8020d9d3:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8020d9d6:	49 89 f3             	mov    %rsi,%r11
ffffffff8020d9d9:	49 21 fb             	and    %rdi,%r11
ffffffff8020d9dc:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020d9df:	74 b7                	je     ffffffff8020d998 <_RME_Cpt_Add.isra.0+0x268>
ffffffff8020d9e1:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020d9e5:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020d9e9:	0f 85 a1 00 00 00    	jne    ffffffff8020da90 <_RME_Cpt_Add.isra.0+0x360>
ffffffff8020d9ef:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020d9f3:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020d9fa:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020d9fd:	0f 83 1d ff ff ff    	jae    ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020da03:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020da07:	4c 03 41 18          	add    0x18(%rcx),%r8
ffffffff8020da0b:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020da0e:	48 21 cf             	and    %rcx,%rdi
ffffffff8020da11:	4c 39 d7             	cmp    %r10,%rdi
ffffffff8020da14:	0f 85 a8 fd ff ff    	jne    ffffffff8020d7c2 <_RME_Cpt_Add.isra.0+0x92>
ffffffff8020da1a:	e9 79 ff ff ff       	jmp    ffffffff8020d998 <_RME_Cpt_Add.isra.0+0x268>
ffffffff8020da1f:	90                   	nop
        if(RME_PGT_FLAG_HIGH(Flag)>RME_PGT_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020da20:	4c 8b 54 24 18       	mov    0x18(%rsp),%r10
ffffffff8020da25:	49 8b 49 10          	mov    0x10(%r9),%rcx
ffffffff8020da29:	49 c1 ea 24          	shr    $0x24,%r10
ffffffff8020da2d:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff8020da31:	4c 39 d1             	cmp    %r10,%rcx
ffffffff8020da34:	72 4a                	jb     ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
        if(RME_PGT_FLAG_LOW(Flag)<RME_PGT_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020da36:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
ffffffff8020da3b:	49 8b 49 10          	mov    0x10(%r9),%rcx
ffffffff8020da3f:	49 c1 e8 08          	shr    $0x8,%r8
ffffffff8020da43:	48 c1 e9 08          	shr    $0x8,%rcx
ffffffff8020da47:	41 81 e0 ff ff ff 0f 	and    $0xfffffff,%r8d
ffffffff8020da4e:	81 e1 ff ff ff 0f    	and    $0xfffffff,%ecx
        if(RME_PGT_FLAG_HIGH(Flag)<RME_PGT_FLAG_LOW(Flag))
ffffffff8020da54:	49 39 c8             	cmp    %rcx,%r8
ffffffff8020da57:	72 27                	jb     ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
ffffffff8020da59:	4d 39 c2             	cmp    %r8,%r10
ffffffff8020da5c:	72 22                	jb     ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
        if(RME_PGT_FLAG_FLAG(Flag)==0U)
ffffffff8020da5e:	80 7c 24 18 00       	cmpb   $0x0,0x18(%rsp)
ffffffff8020da63:	74 1b                	je     ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
        if((RME_PGT_FLAG_FLAG(Flag)&(~RME_PGT_FLAG_FLAG(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020da65:	49 8b 49 10          	mov    0x10(%r9),%rcx
ffffffff8020da69:	0f b6 c9             	movzbl %cl,%ecx
ffffffff8020da6c:	48 f7 d1             	not    %rcx
ffffffff8020da6f:	48 23 4c 24 18       	and    0x18(%rsp),%rcx
ffffffff8020da74:	84 c9                	test   %cl,%cl
ffffffff8020da76:	0f 84 f4 fd ff ff    	je     ffffffff8020d870 <_RME_Cpt_Add.isra.0+0x140>
ffffffff8020da7c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020da80:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020da87:	e9 9b fe ff ff       	jmp    ffffffff8020d927 <_RME_Cpt_Add.isra.0+0x1f7>
ffffffff8020da8c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020da90:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020da97:	5b                   	pop    %rbx
ffffffff8020da98:	5d                   	pop    %rbp
ffffffff8020da99:	c3                   	ret
ffffffff8020da9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Capobj_Dst->Head.Root_Ref=0U;
ffffffff8020daa0:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
ffffffff8020daa7:	00 
ffffffff8020daa8:	e9 58 fe ff ff       	jmp    ffffffff8020d905 <_RME_Cpt_Add.isra.0+0x1d5>
ffffffff8020daad:	0f 1f 00             	nopl   (%rax)
        if(RME_KFN_FLAG_HIGH(Flag)>RME_KFN_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020dab0:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
ffffffff8020dab5:	49 8b 49 10          	mov    0x10(%r9),%rcx
ffffffff8020dab9:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff8020dabd:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020dac1:	4c 39 c1             	cmp    %r8,%rcx
ffffffff8020dac4:	72 ba                	jb     ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
        if(RME_KFN_FLAG_LOW(Flag)<RME_KFN_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020dac6:	49 8b 49 10          	mov    0x10(%r9),%rcx
ffffffff8020daca:	44 8b 54 24 18       	mov    0x18(%rsp),%r10d
        if(RME_KFN_FLAG_HIGH(Flag)<RME_KFN_FLAG_LOW(Flag))
ffffffff8020dacf:	3b 4c 24 18          	cmp    0x18(%rsp),%ecx
ffffffff8020dad3:	77 ab                	ja     ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
ffffffff8020dad5:	4d 39 d0             	cmp    %r10,%r8
ffffffff8020dad8:	0f 83 92 fd ff ff    	jae    ffffffff8020d870 <_RME_Cpt_Add.isra.0+0x140>
ffffffff8020dade:	eb a0                	jmp    ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020dae0:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020dae5:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020daea:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
ffffffff8020daf1:	ff ff ff 
ffffffff8020daf4:	48 23 4c 24 18       	and    0x18(%rsp),%rcx
ffffffff8020daf9:	48 c1 e8 20          	shr    $0x20,%rax
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020dafd:	48 c1 e2 20          	shl    $0x20,%rdx
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020db01:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff8020db05:	48 09 c8             	or     %rcx,%rax
        if(Kom_End<=Kom_Begin)
ffffffff8020db08:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020db0b:	0f 83 6f ff ff ff    	jae    ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
        Kom_Begin+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020db11:	49 8b 49 28          	mov    0x28(%r9),%rcx
ffffffff8020db15:	48 01 ca             	add    %rcx,%rdx
        if(Kom_Begin<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020db18:	49 8b 49 28          	mov    0x28(%r9),%rcx
ffffffff8020db1c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020db1f:	0f 82 5b ff ff ff    	jb     ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020db25:	49 8b 71 28          	mov    0x28(%r9),%rsi
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020db29:	49 8b 49 28          	mov    0x28(%r9),%rcx
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020db2d:	48 01 f0             	add    %rsi,%rax
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020db30:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020db33:	0f 82 47 ff ff ff    	jb     ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x350>
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020db39:	49 8b 49 28          	mov    0x28(%r9),%rcx
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020db3d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020db44:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020db47:	0f 82 da fd ff ff    	jb     ffffffff8020d927 <_RME_Cpt_Add.isra.0+0x1f7>
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->End<(Kom_End-1U))
ffffffff8020db4d:	49 8b 51 30          	mov    0x30(%r9),%rdx
            return RME_ERR_CPT_FLAG;
ffffffff8020db51:	e9 d1 fd ff ff       	jmp    ffffffff8020d927 <_RME_Cpt_Add.isra.0+0x1f7>
ffffffff8020db56:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020db5d:	00 00 00 
        return RME_ERR_CPT_EXIST;
ffffffff8020db60:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020db67:	e9 bb fd ff ff       	jmp    ffffffff8020d927 <_RME_Cpt_Add.isra.0+0x1f7>
        return RME_ERR_CPT_NULL;
ffffffff8020db6c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020db73:	e9 af fd ff ff       	jmp    ffffffff8020d927 <_RME_Cpt_Add.isra.0+0x1f7>
ffffffff8020db78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020db7f:	00 

ffffffff8020db80 <_RME_Run_Notif>:
{
ffffffff8020db80:	41 54                	push   %r12
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8020db82:	48 8d 47 10          	lea    0x10(%rdi),%rax
{
ffffffff8020db86:	55                   	push   %rbp
ffffffff8020db87:	53                   	push   %rbx
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8020db88:	48 39 47 10          	cmp    %rax,0x10(%rdi)
ffffffff8020db8c:	74 42                	je     ffffffff8020dbd0 <_RME_Run_Notif+0x50>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff8020db8e:	48 8b 5f 70          	mov    0x70(%rdi),%rbx
ffffffff8020db92:	48 85 db             	test   %rbx,%rbx
ffffffff8020db95:	74 31                	je     ffffffff8020dbc8 <_RME_Run_Notif+0x48>
    Thd_Sig=Cap_Sig->Thd;
ffffffff8020db97:	48 8b 6b 30          	mov    0x30(%rbx),%rbp
    if(Thd_Sig!=(void*)RME_NULL)
ffffffff8020db9b:	48 85 ed             	test   %rbp,%rbp
ffffffff8020db9e:	74 0e                	je     ffffffff8020dbae <_RME_Run_Notif+0x2e>
        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff8020dba0:	4c 8b 65 28          	mov    0x28(%rbp),%r12
ffffffff8020dba4:	e8 96 dc ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020dba9:	49 39 c4             	cmp    %rax,%r12
ffffffff8020dbac:	74 62                	je     ffffffff8020dc10 <_RME_Run_Notif+0x90>
ffffffff8020dbae:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020dbb3:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff8020dbb9:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff8020dbc0:	ff ff 7f 
ffffffff8020dbc3:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dbc6:	72 35                	jb     ffffffff8020dbfd <_RME_Run_Notif+0x7d>
}
ffffffff8020dbc8:	5b                   	pop    %rbx
ffffffff8020dbc9:	5d                   	pop    %rbp
ffffffff8020dbca:	41 5c                	pop    %r12
ffffffff8020dbcc:	c3                   	ret
ffffffff8020dbcd:	0f 1f 00             	nopl   (%rax)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff8020dbd0:	48 8b 57 68          	mov    0x68(%rdi),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff8020dbd4:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
ffffffff8020dbdb:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff8020dbdf:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff8020dbe6:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    New->Next=Next;
ffffffff8020dbeb:	66 48 0f 6e c9       	movq   %rcx,%xmm1
ffffffff8020dbf0:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff8020dbf4:	0f 11 47 10          	movups %xmm0,0x10(%rdi)
    Prev->Next=New;
ffffffff8020dbf8:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff8020dbfb:	eb 91                	jmp    ffffffff8020db8e <_RME_Run_Notif+0xe>
ffffffff8020dbfd:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020dc04:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
}
ffffffff8020dc0a:	eb bc                	jmp    ffffffff8020dbc8 <_RME_Run_Notif+0x48>
ffffffff8020dc0c:	0f 1f 40 00          	nopl   0x0(%rax)
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff8020dc10:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff8020dc17:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8020dc1c:	e8 ff da 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff8020dc21:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff8020dc26:	74 68                	je     ffffffff8020dc90 <_RME_Run_Notif+0x110>
    Prio=Thd->Sched.Prio;
ffffffff8020dc28:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff8020dc2c:	48 8b 45 28          	mov    0x28(%rbp),%rax
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff8020dc30:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff8020dc37:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8020dc38:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020dc3b:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8020dc3f:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff8020dc43:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff8020dc48:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff8020dc4c:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020dc51:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff8020dc54:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020dc58:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff8020dc5c:	66 48 0f 6e d2       	movq   %rdx,%xmm2
ffffffff8020dc61:	66 0f 6c c2          	punpcklqdq %xmm2,%xmm0
ffffffff8020dc65:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff8020dc69:	48 89 2a             	mov    %rbp,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020dc6c:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020dc71:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020dc74:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        Cap_Sig->Thd=RME_NULL;
ffffffff8020dc79:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff8020dc80:	00 
ffffffff8020dc81:	e9 42 ff ff ff       	jmp    ffffffff8020dbc8 <_RME_Run_Notif+0x48>
ffffffff8020dc86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020dc8d:	00 00 00 
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff8020dc90:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff8020dc97:	00 
            _RME_Run_Notif(Thd_Sig);
ffffffff8020dc98:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020dc9b:	e8 e0 fe ff ff       	call   ffffffff8020db80 <_RME_Run_Notif>
ffffffff8020dca0:	eb d7                	jmp    ffffffff8020dc79 <_RME_Run_Notif+0xf9>
ffffffff8020dca2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020dca9:	00 00 00 00 
ffffffff8020dcad:	0f 1f 00             	nopl   (%rax)

ffffffff8020dcb0 <RME_Int_Print>:
{
ffffffff8020dcb0:	f3 0f 1e fa          	endbr64
ffffffff8020dcb4:	41 57                	push   %r15
ffffffff8020dcb6:	41 56                	push   %r14
ffffffff8020dcb8:	41 55                	push   %r13
ffffffff8020dcba:	41 54                	push   %r12
ffffffff8020dcbc:	53                   	push   %rbx
    if(Int==0)
ffffffff8020dcbd:	48 85 ff             	test   %rdi,%rdi
ffffffff8020dcc0:	0f 84 ea 00 00 00    	je     ffffffff8020ddb0 <RME_Int_Print+0x100>
ffffffff8020dcc6:	49 89 fe             	mov    %rdi,%r14
    if(Int<0)
ffffffff8020dcc9:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        Num=0;
ffffffff8020dccf:	bf 00 00 00 00       	mov    $0x0,%edi
    if(Int<0)
ffffffff8020dcd4:	0f 88 b6 00 00 00    	js     ffffffff8020dd90 <RME_Int_Print+0xe0>
        Iter/=10;
ffffffff8020dcda:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
ffffffff8020dce1:	cc cc cc 
ffffffff8020dce4:	49 f7 e6             	mul    %r14
        if(Iter!=0)
ffffffff8020dce7:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020dcea:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff8020dcee:	0f 84 dc 00 00 00    	je     ffffffff8020ddd0 <RME_Int_Print+0x120>
        Count++;
ffffffff8020dcf4:	41 bf 01 00 00 00    	mov    $0x1,%r15d
    Div=1;
ffffffff8020dcfa:	bb 01 00 00 00       	mov    $0x1,%ebx
        Iter/=10;
ffffffff8020dcff:	48 be 67 66 66 66 66 	movabs $0x6666666666666667,%rsi
ffffffff8020dd06:	66 66 66 
ffffffff8020dd09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020dd10:	48 89 c8             	mov    %rcx,%rax
            Div*=10;
ffffffff8020dd13:	48 8d 1c 9b          	lea    (%rbx,%rbx,4),%rbx
        Count++;
ffffffff8020dd17:	49 83 c7 01          	add    $0x1,%r15
        Iter/=10;
ffffffff8020dd1b:	48 f7 ee             	imul   %rsi
ffffffff8020dd1e:	48 89 c8             	mov    %rcx,%rax
            Div*=10;
ffffffff8020dd21:	48 01 db             	add    %rbx,%rbx
        Iter/=10;
ffffffff8020dd24:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020dd28:	48 c1 fa 02          	sar    $0x2,%rdx
        if(Iter!=0)
ffffffff8020dd2c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020dd2f:	48 29 c1             	sub    %rax,%rcx
ffffffff8020dd32:	75 dc                	jne    ffffffff8020dd10 <RME_Int_Print+0x60>
        Div/=10;
ffffffff8020dd34:	49 bc 67 66 66 66 66 	movabs $0x6666666666666667,%r12
ffffffff8020dd3b:	66 66 66 
    Num+=Count;
ffffffff8020dd3e:	4e 8d 2c 3f          	lea    (%rdi,%r15,1),%r13
    while(Count>0)
ffffffff8020dd42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Count--;
ffffffff8020dd48:	4c 89 f0             	mov    %r14,%rax
ffffffff8020dd4b:	49 83 ef 01          	sub    $0x1,%r15
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020dd4f:	48 99                	cqto
ffffffff8020dd51:	48 f7 fb             	idiv   %rbx
ffffffff8020dd54:	83 c0 30             	add    $0x30,%eax
ffffffff8020dd57:	49 89 d6             	mov    %rdx,%r14
ffffffff8020dd5a:	0f be f8             	movsbl %al,%edi
ffffffff8020dd5d:	e8 7e b2 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
        Div/=10;
ffffffff8020dd62:	48 89 d8             	mov    %rbx,%rax
ffffffff8020dd65:	49 f7 ec             	imul   %r12
ffffffff8020dd68:	48 89 d8             	mov    %rbx,%rax
ffffffff8020dd6b:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020dd6f:	48 c1 fa 02          	sar    $0x2,%rdx
ffffffff8020dd73:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020dd76:	48 29 c3             	sub    %rax,%rbx
    while(Count>0)
ffffffff8020dd79:	4d 85 ff             	test   %r15,%r15
ffffffff8020dd7c:	75 ca                	jne    ffffffff8020dd48 <RME_Int_Print+0x98>
}
ffffffff8020dd7e:	5b                   	pop    %rbx
ffffffff8020dd7f:	4c 89 e8             	mov    %r13,%rax
ffffffff8020dd82:	41 5c                	pop    %r12
ffffffff8020dd84:	41 5d                	pop    %r13
ffffffff8020dd86:	41 5e                	pop    %r14
ffffffff8020dd88:	41 5f                	pop    %r15
ffffffff8020dd8a:	c3                   	ret
ffffffff8020dd8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar('-');
ffffffff8020dd90:	bf 2d 00 00 00       	mov    $0x2d,%edi
        Abs=-Int;
ffffffff8020dd95:	49 f7 de             	neg    %r14
ffffffff8020dd98:	41 bd 02 00 00 00    	mov    $0x2,%r13d
        __RME_Putchar('-');
ffffffff8020dd9e:	e8 3d b2 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
        Num=1;
ffffffff8020dda3:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff8020dda8:	e9 2d ff ff ff       	jmp    ffffffff8020dcda <RME_Int_Print+0x2a>
ffffffff8020ddad:	0f 1f 00             	nopl   (%rax)
        return 1;
ffffffff8020ddb0:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        __RME_Putchar('0');
ffffffff8020ddb6:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020ddbb:	e8 20 b2 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
}
ffffffff8020ddc0:	5b                   	pop    %rbx
ffffffff8020ddc1:	4c 89 e8             	mov    %r13,%rax
ffffffff8020ddc4:	41 5c                	pop    %r12
ffffffff8020ddc6:	41 5d                	pop    %r13
ffffffff8020ddc8:	41 5e                	pop    %r14
ffffffff8020ddca:	41 5f                	pop    %r15
ffffffff8020ddcc:	c3                   	ret
ffffffff8020ddcd:	0f 1f 00             	nopl   (%rax)
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020ddd0:	41 8d 7e 30          	lea    0x30(%r14),%edi
ffffffff8020ddd4:	40 0f be ff          	movsbl %dil,%edi
ffffffff8020ddd8:	e8 03 b2 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    while(Count>0)
ffffffff8020dddd:	eb 9f                	jmp    ffffffff8020dd7e <RME_Int_Print+0xce>
ffffffff8020dddf:	90                   	nop

ffffffff8020dde0 <RME_Hex_Print>:
{
ffffffff8020dde0:	f3 0f 1e fa          	endbr64
ffffffff8020dde4:	41 54                	push   %r12
ffffffff8020dde6:	55                   	push   %rbp
ffffffff8020dde7:	53                   	push   %rbx
    if(Uint==0U)
ffffffff8020dde8:	48 85 ff             	test   %rdi,%rdi
ffffffff8020ddeb:	0f 84 7f 00 00 00    	je     ffffffff8020de70 <RME_Hex_Print+0x90>
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020ddf1:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020ddf4:	48 89 fd             	mov    %rdi,%rbp
    Iter=Uint;
ffffffff8020ddf7:	48 89 f8             	mov    %rdi,%rax
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020ddfa:	41 bc 10 00 00 00    	mov    $0x10,%r12d
ffffffff8020de00:	48 c1 ea 3c          	shr    $0x3c,%rdx
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020de04:	bb 10 00 00 00       	mov    $0x10,%ebx
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020de09:	75 32                	jne    ffffffff8020de3d <RME_Hex_Print+0x5d>
ffffffff8020de0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        Iter<<=4;
ffffffff8020de10:	48 c1 e0 04          	shl    $0x4,%rax
        Count++;
ffffffff8020de14:	48 83 c2 01          	add    $0x1,%rdx
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020de18:	48 89 c6             	mov    %rax,%rsi
ffffffff8020de1b:	48 c1 ee 3c          	shr    $0x3c,%rsi
ffffffff8020de1f:	74 ef                	je     ffffffff8020de10 <RME_Hex_Print+0x30>
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020de21:	bb 10 00 00 00       	mov    $0x10,%ebx
    while(Count>0U)
ffffffff8020de26:	48 29 d3             	sub    %rdx,%rbx
ffffffff8020de29:	74 65                	je     ffffffff8020de90 <RME_Hex_Print+0xb0>
    return (rme_cnt_t)Num;
ffffffff8020de2b:	49 89 dc             	mov    %rbx,%r12
ffffffff8020de2e:	eb 0d                	jmp    ffffffff8020de3d <RME_Hex_Print+0x5d>
            __RME_Putchar((rme_s8_t)Iter+'0');
ffffffff8020de30:	8d 78 30             	lea    0x30(%rax),%edi
ffffffff8020de33:	e8 a8 b1 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    while(Count>0U)
ffffffff8020de38:	48 85 db             	test   %rbx,%rbx
ffffffff8020de3b:	74 27                	je     ffffffff8020de64 <RME_Hex_Print+0x84>
        Count--;
ffffffff8020de3d:	48 83 eb 01          	sub    $0x1,%rbx
        Iter=(Uint>>(Count<<2U))&0x0FU;
ffffffff8020de41:	48 89 e8             	mov    %rbp,%rax
ffffffff8020de44:	8d 0c 9d 00 00 00 00 	lea    0x0(,%rbx,4),%ecx
ffffffff8020de4b:	48 d3 e8             	shr    %cl,%rax
ffffffff8020de4e:	83 e0 0f             	and    $0xf,%eax
        if(Iter<10U)
ffffffff8020de51:	48 83 f8 09          	cmp    $0x9,%rax
ffffffff8020de55:	76 d9                	jbe    ffffffff8020de30 <RME_Hex_Print+0x50>
            __RME_Putchar((rme_s8_t)Iter+'A'-10);
ffffffff8020de57:	8d 78 37             	lea    0x37(%rax),%edi
ffffffff8020de5a:	e8 81 b1 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    while(Count>0U)
ffffffff8020de5f:	48 85 db             	test   %rbx,%rbx
ffffffff8020de62:	75 d9                	jne    ffffffff8020de3d <RME_Hex_Print+0x5d>
}
ffffffff8020de64:	4c 89 e0             	mov    %r12,%rax
ffffffff8020de67:	5b                   	pop    %rbx
ffffffff8020de68:	5d                   	pop    %rbp
ffffffff8020de69:	41 5c                	pop    %r12
ffffffff8020de6b:	c3                   	ret
ffffffff8020de6c:	0f 1f 40 00          	nopl   0x0(%rax)
        return 1;
ffffffff8020de70:	41 bc 01 00 00 00    	mov    $0x1,%r12d
        __RME_Putchar('0');
ffffffff8020de76:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020de7b:	e8 60 b1 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
}
ffffffff8020de80:	4c 89 e0             	mov    %r12,%rax
ffffffff8020de83:	5b                   	pop    %rbx
ffffffff8020de84:	5d                   	pop    %rbp
ffffffff8020de85:	41 5c                	pop    %r12
ffffffff8020de87:	c3                   	ret
ffffffff8020de88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020de8f:	00 
    while(Count>0U)
ffffffff8020de90:	45 31 e4             	xor    %r12d,%r12d
    return (rme_cnt_t)Num;
ffffffff8020de93:	eb cf                	jmp    ffffffff8020de64 <RME_Hex_Print+0x84>
ffffffff8020de95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020de9c:	00 00 00 00 

ffffffff8020dea0 <RME_Str_Print>:
{
ffffffff8020dea0:	f3 0f 1e fa          	endbr64
ffffffff8020dea4:	55                   	push   %rbp
ffffffff8020dea5:	48 89 fd             	mov    %rdi,%rbp
ffffffff8020dea8:	53                   	push   %rbx
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020dea9:	31 db                	xor    %ebx,%ebx
{
ffffffff8020deab:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020deaf:	eb 19                	jmp    ffffffff8020deca <RME_Str_Print+0x2a>
ffffffff8020deb1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count++]);
ffffffff8020deb8:	e8 23 b1 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020debd:	48 83 c3 02          	add    $0x2,%rbx
ffffffff8020dec1:	48 81 fb 00 01 00 00 	cmp    $0x100,%rbx
ffffffff8020dec8:	74 0a                	je     ffffffff8020ded4 <RME_Str_Print+0x34>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020deca:	0f be 7c 1d 00       	movsbl 0x0(%rbp,%rbx,1),%edi
ffffffff8020decf:	40 84 ff             	test   %dil,%dil
ffffffff8020ded2:	75 e4                	jne    ffffffff8020deb8 <RME_Str_Print+0x18>
}
ffffffff8020ded4:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020ded8:	48 89 d8             	mov    %rbx,%rax
ffffffff8020dedb:	5b                   	pop    %rbx
ffffffff8020dedc:	5d                   	pop    %rbp
ffffffff8020dedd:	c3                   	ret
ffffffff8020dede:	66 90                	xchg   %ax,%ax

ffffffff8020dee0 <RME_Log>:
{
ffffffff8020dee0:	f3 0f 1e fa          	endbr64
ffffffff8020dee4:	41 57                	push   %r15
ffffffff8020dee6:	49 c7 c7 f0 cd 21 80 	mov    $0xffffffff8021cdf0,%r15
ffffffff8020deed:	41 56                	push   %r14
ffffffff8020deef:	49 c7 c6 f0 ce 21 80 	mov    $0xffffffff8021cef0,%r14
ffffffff8020def6:	41 55                	push   %r13
ffffffff8020def8:	49 89 d5             	mov    %rdx,%r13
ffffffff8020defb:	41 54                	push   %r12
ffffffff8020defd:	55                   	push   %rbp
ffffffff8020defe:	48 89 fd             	mov    %rdi,%rbp
ffffffff8020df01:	53                   	push   %rbx
ffffffff8020df02:	48 89 f3             	mov    %rsi,%rbx
ffffffff8020df05:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020df09:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff8020df0e:	eb 0e                	jmp    ffffffff8020df1e <RME_Log+0x3e>
        __RME_Putchar(String[Count++]);
ffffffff8020df10:	e8 cb b0 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020df15:	49 83 c7 02          	add    $0x2,%r15
ffffffff8020df19:	4d 39 fe             	cmp    %r15,%r14
ffffffff8020df1c:	74 09                	je     ffffffff8020df27 <RME_Log+0x47>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020df1e:	41 0f be 3f          	movsbl (%r15),%edi
ffffffff8020df22:	40 84 ff             	test   %dil,%dil
ffffffff8020df25:	75 e9                	jne    ffffffff8020df10 <RME_Log+0x30>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020df27:	4c 8d b5 00 01 00 00 	lea    0x100(%rbp),%r14
ffffffff8020df2e:	eb 0e                	jmp    ffffffff8020df3e <RME_Log+0x5e>
        __RME_Putchar(String[Count++]);
ffffffff8020df30:	e8 ab b0 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020df35:	48 83 c5 02          	add    $0x2,%rbp
ffffffff8020df39:	49 39 ee             	cmp    %rbp,%r14
ffffffff8020df3c:	74 09                	je     ffffffff8020df47 <RME_Log+0x67>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020df3e:	0f be 7d 00          	movsbl 0x0(%rbp),%edi
ffffffff8020df42:	40 84 ff             	test   %dil,%dil
ffffffff8020df45:	75 e9                	jne    ffffffff8020df30 <RME_Log+0x50>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020df47:	49 c7 c6 28 d0 21 80 	mov    $0xffffffff8021d028,%r14
ffffffff8020df4e:	48 c7 c5 28 d1 21 80 	mov    $0xffffffff8021d128,%rbp
ffffffff8020df55:	eb 17                	jmp    ffffffff8020df6e <RME_Log+0x8e>
ffffffff8020df57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020df5e:	00 00 
        __RME_Putchar(String[Count++]);
ffffffff8020df60:	e8 7b b0 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020df65:	49 83 c6 02          	add    $0x2,%r14
ffffffff8020df69:	4c 39 f5             	cmp    %r14,%rbp
ffffffff8020df6c:	74 09                	je     ffffffff8020df77 <RME_Log+0x97>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020df6e:	41 0f be 3e          	movsbl (%r14),%edi
ffffffff8020df72:	40 84 ff             	test   %dil,%dil
ffffffff8020df75:	75 e9                	jne    ffffffff8020df60 <RME_Log+0x80>
    if(Int==0)
ffffffff8020df77:	48 85 db             	test   %rbx,%rbx
ffffffff8020df7a:	0f 84 a0 01 00 00    	je     ffffffff8020e120 <RME_Log+0x240>
    if(Int<0)
ffffffff8020df80:	0f 88 82 01 00 00    	js     ffffffff8020e108 <RME_Log+0x228>
        Iter/=10;
ffffffff8020df86:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
ffffffff8020df8d:	cc cc cc 
ffffffff8020df90:	48 f7 e3             	mul    %rbx
        if(Iter!=0)
ffffffff8020df93:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020df96:	48 c1 ee 03          	shr    $0x3,%rsi
ffffffff8020df9a:	0f 84 8f 01 00 00    	je     ffffffff8020e12f <RME_Log+0x24f>
    Div=1;
ffffffff8020dfa0:	bd 01 00 00 00       	mov    $0x1,%ebp
        Count++;
ffffffff8020dfa5:	41 bc 01 00 00 00    	mov    $0x1,%r12d
        Iter/=10;
ffffffff8020dfab:	48 bf 67 66 66 66 66 	movabs $0x6666666666666667,%rdi
ffffffff8020dfb2:	66 66 66 
ffffffff8020dfb5:	0f 1f 00             	nopl   (%rax)
ffffffff8020dfb8:	48 89 f0             	mov    %rsi,%rax
            Div*=10;
ffffffff8020dfbb:	48 8d 6c ad 00       	lea    0x0(%rbp,%rbp,4),%rbp
        Count++;
ffffffff8020dfc0:	49 83 c4 01          	add    $0x1,%r12
        Iter/=10;
ffffffff8020dfc4:	48 f7 ef             	imul   %rdi
ffffffff8020dfc7:	48 89 f0             	mov    %rsi,%rax
            Div*=10;
ffffffff8020dfca:	48 01 ed             	add    %rbp,%rbp
        Iter/=10;
ffffffff8020dfcd:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020dfd1:	48 c1 fa 02          	sar    $0x2,%rdx
        if(Iter!=0)
ffffffff8020dfd5:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020dfd8:	48 29 c6             	sub    %rax,%rsi
ffffffff8020dfdb:	75 db                	jne    ffffffff8020dfb8 <RME_Log+0xd8>
        Div/=10;
ffffffff8020dfdd:	49 be 67 66 66 66 66 	movabs $0x6666666666666667,%r14
ffffffff8020dfe4:	66 66 66 
ffffffff8020dfe7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020dfee:	00 00 
        Count--;
ffffffff8020dff0:	48 89 d8             	mov    %rbx,%rax
ffffffff8020dff3:	49 83 ec 01          	sub    $0x1,%r12
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020dff7:	48 99                	cqto
ffffffff8020dff9:	48 f7 fd             	idiv   %rbp
ffffffff8020dffc:	83 c0 30             	add    $0x30,%eax
ffffffff8020dfff:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020e002:	0f be f8             	movsbl %al,%edi
ffffffff8020e005:	e8 d6 af 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
        Div/=10;
ffffffff8020e00a:	48 89 e8             	mov    %rbp,%rax
ffffffff8020e00d:	49 f7 ee             	imul   %r14
ffffffff8020e010:	48 89 e8             	mov    %rbp,%rax
ffffffff8020e013:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020e017:	48 c1 fa 02          	sar    $0x2,%rdx
ffffffff8020e01b:	48 29 c2             	sub    %rax,%rdx
ffffffff8020e01e:	48 89 d5             	mov    %rdx,%rbp
    while(Count>0)
ffffffff8020e021:	4d 85 e4             	test   %r12,%r12
ffffffff8020e024:	75 ca                	jne    ffffffff8020dff0 <RME_Log+0x110>
ffffffff8020e026:	48 c7 c3 12 d3 21 80 	mov    $0xffffffff8021d312,%rbx
ffffffff8020e02d:	48 c7 c5 12 d4 21 80 	mov    $0xffffffff8021d412,%rbp
        Count++;
ffffffff8020e034:	49 89 de             	mov    %rbx,%r14
ffffffff8020e037:	eb 15                	jmp    ffffffff8020e04e <RME_Log+0x16e>
ffffffff8020e039:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count++]);
ffffffff8020e040:	e8 9b af 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e045:	49 83 c6 02          	add    $0x2,%r14
ffffffff8020e049:	4c 39 f5             	cmp    %r14,%rbp
ffffffff8020e04c:	74 09                	je     ffffffff8020e057 <RME_Log+0x177>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e04e:	41 0f be 3e          	movsbl (%r14),%edi
ffffffff8020e052:	40 84 ff             	test   %dil,%dil
ffffffff8020e055:	75 e9                	jne    ffffffff8020e040 <RME_Log+0x160>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e057:	4d 8d b5 00 01 00 00 	lea    0x100(%r13),%r14
ffffffff8020e05e:	eb 0e                	jmp    ffffffff8020e06e <RME_Log+0x18e>
        __RME_Putchar(String[Count++]);
ffffffff8020e060:	e8 7b af 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e065:	49 83 c5 02          	add    $0x2,%r13
ffffffff8020e069:	4d 39 ee             	cmp    %r13,%r14
ffffffff8020e06c:	74 0a                	je     ffffffff8020e078 <RME_Log+0x198>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e06e:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
ffffffff8020e073:	40 84 ff             	test   %dil,%dil
ffffffff8020e076:	75 e8                	jne    ffffffff8020e060 <RME_Log+0x180>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e078:	49 c7 c6 31 d0 21 80 	mov    $0xffffffff8021d031,%r14
ffffffff8020e07f:	49 c7 c5 31 d1 21 80 	mov    $0xffffffff8021d131,%r13
ffffffff8020e086:	eb 16                	jmp    ffffffff8020e09e <RME_Log+0x1be>
ffffffff8020e088:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e08f:	00 
        __RME_Putchar(String[Count++]);
ffffffff8020e090:	e8 4b af 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e095:	49 83 c6 02          	add    $0x2,%r14
ffffffff8020e099:	4d 39 f5             	cmp    %r14,%r13
ffffffff8020e09c:	74 09                	je     ffffffff8020e0a7 <RME_Log+0x1c7>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e09e:	41 0f be 3e          	movsbl (%r14),%edi
ffffffff8020e0a2:	40 84 ff             	test   %dil,%dil
ffffffff8020e0a5:	75 e9                	jne    ffffffff8020e090 <RME_Log+0x1b0>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e0a7:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
ffffffff8020e0ac:	4d 8d ac 24 00 01 00 	lea    0x100(%r12),%r13
ffffffff8020e0b3:	00 
ffffffff8020e0b4:	eb 18                	jmp    ffffffff8020e0ce <RME_Log+0x1ee>
ffffffff8020e0b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e0bd:	00 00 00 
        __RME_Putchar(String[Count++]);
ffffffff8020e0c0:	e8 1b af 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e0c5:	49 83 c4 02          	add    $0x2,%r12
ffffffff8020e0c9:	4d 39 e5             	cmp    %r12,%r13
ffffffff8020e0cc:	74 20                	je     ffffffff8020e0ee <RME_Log+0x20e>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e0ce:	41 0f be 3c 24       	movsbl (%r12),%edi
ffffffff8020e0d3:	40 84 ff             	test   %dil,%dil
ffffffff8020e0d6:	75 e8                	jne    ffffffff8020e0c0 <RME_Log+0x1e0>
ffffffff8020e0d8:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e0db:	40 84 ff             	test   %dil,%dil
ffffffff8020e0de:	74 16                	je     ffffffff8020e0f6 <RME_Log+0x216>
        __RME_Putchar(String[Count++]);
ffffffff8020e0e0:	e8 fb ae 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e0e5:	48 83 c3 02          	add    $0x2,%rbx
ffffffff8020e0e9:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020e0ec:	74 08                	je     ffffffff8020e0f6 <RME_Log+0x216>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e0ee:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e0f1:	40 84 ff             	test   %dil,%dil
ffffffff8020e0f4:	75 ea                	jne    ffffffff8020e0e0 <RME_Log+0x200>
}
ffffffff8020e0f6:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8020e0fa:	5b                   	pop    %rbx
ffffffff8020e0fb:	5d                   	pop    %rbp
ffffffff8020e0fc:	41 5c                	pop    %r12
ffffffff8020e0fe:	41 5d                	pop    %r13
ffffffff8020e100:	41 5e                	pop    %r14
ffffffff8020e102:	41 5f                	pop    %r15
ffffffff8020e104:	c3                   	ret
ffffffff8020e105:	0f 1f 00             	nopl   (%rax)
        __RME_Putchar('-');
ffffffff8020e108:	bf 2d 00 00 00       	mov    $0x2d,%edi
        Abs=-Int;
ffffffff8020e10d:	48 f7 db             	neg    %rbx
        __RME_Putchar('-');
ffffffff8020e110:	e8 cb ae 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
        Num=1;
ffffffff8020e115:	e9 6c fe ff ff       	jmp    ffffffff8020df86 <RME_Log+0xa6>
ffffffff8020e11a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        __RME_Putchar('0');
ffffffff8020e120:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020e125:	e8 b6 ae 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e12a:	e9 f7 fe ff ff       	jmp    ffffffff8020e026 <RME_Log+0x146>
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020e12f:	8d 7b 30             	lea    0x30(%rbx),%edi
ffffffff8020e132:	40 0f be ff          	movsbl %dil,%edi
ffffffff8020e136:	e8 a5 ae 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    while(Count>0)
ffffffff8020e13b:	e9 e6 fe ff ff       	jmp    ffffffff8020e026 <RME_Log+0x146>

ffffffff8020e140 <_RME_MSB_Generic>:
{
ffffffff8020e140:	f3 0f 1e fa          	endbr64
    if(Value>=RME_POW2(32U))
ffffffff8020e144:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e147:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e14b:	74 43                	je     ffffffff8020e190 <_RME_MSB_Generic+0x50>
        if(Value>=RME_POW2(48U))
ffffffff8020e14d:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e150:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e154:	0f 84 96 00 00 00    	je     ffffffff8020e1f0 <_RME_MSB_Generic+0xb0>
            if(Value>=RME_POW2(56U))
ffffffff8020e15a:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffffff,%rax
ffffffff8020e161:	ff ff 00 
ffffffff8020e164:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e167:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e169:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e16c:	83 c1 30             	add    $0x30,%ecx
ffffffff8020e16f:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e172:	48 19 d2             	sbb    %rdx,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e175:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e178:	0f b6 87 80 d8 21 80 	movzbl -0x7fde2780(%rdi),%eax
            if(Value>=RME_POW2(56U))
ffffffff8020e17f:	83 e2 08             	and    $0x8,%edx
ffffffff8020e182:	48 83 c2 30          	add    $0x30,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e186:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e189:	c3                   	ret
ffffffff8020e18a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if(Value>=RME_POW2(16U))
ffffffff8020e190:	48 81 ff ff ff 00 00 	cmp    $0xffff,%rdi
ffffffff8020e197:	77 27                	ja     ffffffff8020e1c0 <_RME_MSB_Generic+0x80>
            if(Value>=RME_POW2(8U))
ffffffff8020e199:	31 d2                	xor    %edx,%edx
ffffffff8020e19b:	48 81 ff ff 00 00 00 	cmp    $0xff,%rdi
ffffffff8020e1a2:	0f 97 c2             	seta   %dl
ffffffff8020e1a5:	48 c1 e2 03          	shl    $0x3,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e1a9:	89 d1                	mov    %edx,%ecx
ffffffff8020e1ab:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e1ae:	0f b6 87 80 d8 21 80 	movzbl -0x7fde2780(%rdi),%eax
ffffffff8020e1b5:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e1b8:	c3                   	ret
ffffffff8020e1b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            if(Value>=RME_POW2(24U))
ffffffff8020e1c0:	48 81 ff 00 00 00 01 	cmp    $0x1000000,%rdi
ffffffff8020e1c7:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e1c9:	83 e1 f8             	and    $0xfffffff8,%ecx
ffffffff8020e1cc:	83 c1 18             	add    $0x18,%ecx
ffffffff8020e1cf:	48 81 ff 00 00 00 01 	cmp    $0x1000000,%rdi
ffffffff8020e1d6:	48 19 d2             	sbb    %rdx,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e1d9:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e1dc:	0f b6 87 80 d8 21 80 	movzbl -0x7fde2780(%rdi),%eax
            if(Value>=RME_POW2(24U))
ffffffff8020e1e3:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
ffffffff8020e1e7:	48 83 c2 18          	add    $0x18,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e1eb:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e1ee:	c3                   	ret
ffffffff8020e1ef:	90                   	nop
            if(Value>=RME_POW2(40U))
ffffffff8020e1f0:	48 b8 ff ff ff ff ff 	movabs $0xffffffffff,%rax
ffffffff8020e1f7:	00 00 00 
ffffffff8020e1fa:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e1fd:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e1ff:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e202:	83 c1 20             	add    $0x20,%ecx
ffffffff8020e205:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e208:	48 19 d2             	sbb    %rdx,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e20b:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e20e:	0f b6 87 80 d8 21 80 	movzbl -0x7fde2780(%rdi),%eax
            if(Value>=RME_POW2(40U))
ffffffff8020e215:	83 e2 08             	and    $0x8,%edx
ffffffff8020e218:	48 83 c2 20          	add    $0x20,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e21c:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e21f:	c3                   	ret

ffffffff8020e220 <_RME_LSB_Generic>:
{
ffffffff8020e220:	f3 0f 1e fa          	endbr64
    if((Value<<32U)==0U)
ffffffff8020e224:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e227:	48 c1 e0 20          	shl    $0x20,%rax
        if((Value<<16U)==0U)
ffffffff8020e22b:	48 89 f8             	mov    %rdi,%rax
    if((Value<<32U)==0U)
ffffffff8020e22e:	75 30                	jne    ffffffff8020e260 <_RME_LSB_Generic+0x40>
        if((Value<<16U)==0U)
ffffffff8020e230:	48 c1 e0 10          	shl    $0x10,%rax
            if((Value<<8U)==0U)
ffffffff8020e234:	48 89 f8             	mov    %rdi,%rax
        if((Value<<16U)==0U)
ffffffff8020e237:	75 77                	jne    ffffffff8020e2b0 <_RME_LSB_Generic+0x90>
            if((Value<<8U)==0U)
ffffffff8020e239:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8020e23d:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e241:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e243:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e246:	83 c1 30             	add    $0x30,%ecx
ffffffff8020e249:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e24d:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e250:	83 e2 08             	and    $0x8,%edx
ffffffff8020e253:	48 83 c2 30          	add    $0x30,%rdx
ffffffff8020e257:	eb 1f                	jmp    ffffffff8020e278 <_RME_LSB_Generic+0x58>
ffffffff8020e259:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if((Value<<48U)==0U)
ffffffff8020e260:	48 c1 e0 30          	shl    $0x30,%rax
            if((Value<<40U)==0U)
ffffffff8020e264:	48 89 f8             	mov    %rdi,%rax
        if((Value<<48U)==0U)
ffffffff8020e267:	74 27                	je     ffffffff8020e290 <_RME_LSB_Generic+0x70>
            if((Value<<56U)==0U)
ffffffff8020e269:	31 d2                	xor    %edx,%edx
ffffffff8020e26b:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff8020e26f:	0f 94 c2             	sete   %dl
ffffffff8020e272:	48 c1 e2 03          	shl    $0x3,%rdx
    return Table[(rme_u8_t)(Value>>Bit)]+Bit;
ffffffff8020e276:	89 d1                	mov    %edx,%ecx
ffffffff8020e278:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e27b:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff8020e27f:	0f b6 87 80 d7 21 80 	movzbl -0x7fde2880(%rdi),%eax
ffffffff8020e286:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e289:	c3                   	ret
ffffffff8020e28a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            if((Value<<40U)==0U)
ffffffff8020e290:	48 c1 e0 28          	shl    $0x28,%rax
ffffffff8020e294:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e298:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e29a:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e29d:	83 c1 10             	add    $0x10,%ecx
ffffffff8020e2a0:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e2a4:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e2a7:	83 e2 08             	and    $0x8,%edx
ffffffff8020e2aa:	48 83 c2 10          	add    $0x10,%rdx
ffffffff8020e2ae:	eb c8                	jmp    ffffffff8020e278 <_RME_LSB_Generic+0x58>
            if((Value<<24U)==0U)
ffffffff8020e2b0:	48 c1 e0 18          	shl    $0x18,%rax
ffffffff8020e2b4:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e2b8:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e2ba:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e2bd:	83 c1 20             	add    $0x20,%ecx
ffffffff8020e2c0:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e2c4:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e2c7:	83 e2 08             	and    $0x8,%edx
ffffffff8020e2ca:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8020e2ce:	eb a8                	jmp    ffffffff8020e278 <_RME_LSB_Generic+0x58>

ffffffff8020e2d0 <_RME_Comp_Swap_Single>:
{
ffffffff8020e2d0:	f3 0f 1e fa          	endbr64
    if(*Ptr==Old)
ffffffff8020e2d4:	48 8b 0f             	mov    (%rdi),%rcx
    return 0U;
ffffffff8020e2d7:	31 c0                	xor    %eax,%eax
    if(*Ptr==Old)
ffffffff8020e2d9:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020e2dc:	74 02                	je     ffffffff8020e2e0 <_RME_Comp_Swap_Single+0x10>
}
ffffffff8020e2de:	c3                   	ret
ffffffff8020e2df:	90                   	nop
        *Ptr=New;
ffffffff8020e2e0:	48 89 17             	mov    %rdx,(%rdi)
        return 1U;
ffffffff8020e2e3:	b8 01 00 00 00       	mov    $0x1,%eax
}
ffffffff8020e2e8:	c3                   	ret
ffffffff8020e2e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8020e2f0 <_RME_Fetch_Add_Single>:
{
ffffffff8020e2f0:	f3 0f 1e fa          	endbr64
    Old=(rme_cnt_t)(*Ptr);
ffffffff8020e2f4:	48 8b 07             	mov    (%rdi),%rax
    *Ptr=(rme_ptr_t)(Old+Addend);
ffffffff8020e2f7:	48 01 c6             	add    %rax,%rsi
ffffffff8020e2fa:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020e2fd:	c3                   	ret
ffffffff8020e2fe:	66 90                	xchg   %ax,%ax

ffffffff8020e300 <_RME_Fetch_And_Single>:
{
ffffffff8020e300:	f3 0f 1e fa          	endbr64
    Old=*Ptr;
ffffffff8020e304:	48 8b 07             	mov    (%rdi),%rax
    *Ptr=Old&Operand;
ffffffff8020e307:	48 21 c6             	and    %rax,%rsi
ffffffff8020e30a:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020e30d:	c3                   	ret
ffffffff8020e30e:	66 90                	xchg   %ax,%ax

ffffffff8020e310 <_RME_List_Crt>:
{
ffffffff8020e310:	f3 0f 1e fa          	endbr64
    Head->Next=Head;
ffffffff8020e314:	66 48 0f 6e c7       	movq   %rdi,%xmm0
ffffffff8020e319:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
ffffffff8020e31d:	0f 11 07             	movups %xmm0,(%rdi)
}
ffffffff8020e320:	c3                   	ret
ffffffff8020e321:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e328:	00 00 00 00 
ffffffff8020e32c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e330 <_RME_List_Del>:
{
ffffffff8020e330:	f3 0f 1e fa          	endbr64
    Next->Prev=Prev;
ffffffff8020e334:	48 89 7e 08          	mov    %rdi,0x8(%rsi)
    Prev->Next=Next;
ffffffff8020e338:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020e33b:	c3                   	ret
ffffffff8020e33c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e340 <_RME_List_Ins>:
{
ffffffff8020e340:	f3 0f 1e fa          	endbr64
    Next->Prev=New;
ffffffff8020e344:	48 89 7a 08          	mov    %rdi,0x8(%rdx)
    New->Next=Next;
ffffffff8020e348:	48 89 17             	mov    %rdx,(%rdi)
    New->Prev=Prev;
ffffffff8020e34b:	48 89 77 08          	mov    %rsi,0x8(%rdi)
    Prev->Next=New;
ffffffff8020e34f:	48 89 3e             	mov    %rdi,(%rsi)
}
ffffffff8020e352:	c3                   	ret
ffffffff8020e353:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e35a:	00 00 00 00 
ffffffff8020e35e:	66 90                	xchg   %ax,%ax

ffffffff8020e360 <_RME_Clear>:
{
ffffffff8020e360:	f3 0f 1e fa          	endbr64
ffffffff8020e364:	48 89 f9             	mov    %rdi,%rcx
    for(Count=0U;Count<Size;Count++)
ffffffff8020e367:	48 85 f6             	test   %rsi,%rsi
ffffffff8020e36a:	0f 84 c8 00 00 00    	je     ffffffff8020e438 <_RME_Clear+0xd8>
ffffffff8020e370:	48 8d 46 ff          	lea    -0x1(%rsi),%rax
ffffffff8020e374:	48 83 f8 0e          	cmp    $0xe,%rax
ffffffff8020e378:	0f 86 bb 00 00 00    	jbe    ffffffff8020e439 <_RME_Clear+0xd9>
ffffffff8020e37e:	48 89 f0             	mov    %rsi,%rax
ffffffff8020e381:	48 89 fa             	mov    %rdi,%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e384:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8020e388:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
ffffffff8020e38c:	48 8d 3c 38          	lea    (%rax,%rdi,1),%rdi
ffffffff8020e390:	a8 10                	test   $0x10,%al
ffffffff8020e392:	74 0c                	je     ffffffff8020e3a0 <_RME_Clear+0x40>
ffffffff8020e394:	48 8d 51 10          	lea    0x10(%rcx),%rdx
ffffffff8020e398:	0f 11 01             	movups %xmm0,(%rcx)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e39b:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020e39e:	74 10                	je     ffffffff8020e3b0 <_RME_Clear+0x50>
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3a0:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff8020e3a3:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8020e3a7:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3ab:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020e3ae:	75 f0                	jne    ffffffff8020e3a0 <_RME_Clear+0x40>
ffffffff8020e3b0:	48 39 c6             	cmp    %rax,%rsi
ffffffff8020e3b3:	0f 84 87 00 00 00    	je     ffffffff8020e440 <_RME_Clear+0xe0>
ffffffff8020e3b9:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020e3bc:	48 29 c2             	sub    %rax,%rdx
ffffffff8020e3bf:	48 8d 7a ff          	lea    -0x1(%rdx),%rdi
ffffffff8020e3c3:	48 83 ff 06          	cmp    $0x6,%rdi
ffffffff8020e3c7:	76 17                	jbe    ffffffff8020e3e0 <_RME_Clear+0x80>
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3c9:	48 89 d7             	mov    %rdx,%rdi
ffffffff8020e3cc:	48 c7 04 01 00 00 00 	movq   $0x0,(%rcx,%rax,1)
ffffffff8020e3d3:	00 
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3d4:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
ffffffff8020e3d8:	48 01 f8             	add    %rdi,%rax
ffffffff8020e3db:	83 e2 07             	and    $0x7,%edx
ffffffff8020e3de:	74 58                	je     ffffffff8020e438 <_RME_Clear+0xd8>
ffffffff8020e3e0:	48 8d 50 01          	lea    0x1(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3e4:	c6 04 01 00          	movb   $0x0,(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3e8:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e3eb:	73 4b                	jae    ffffffff8020e438 <_RME_Clear+0xd8>
ffffffff8020e3ed:	48 8d 50 02          	lea    0x2(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3f1:	c6 44 01 01 00       	movb   $0x0,0x1(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3f6:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e3f9:	73 3d                	jae    ffffffff8020e438 <_RME_Clear+0xd8>
ffffffff8020e3fb:	48 8d 50 03          	lea    0x3(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3ff:	c6 44 01 02 00       	movb   $0x0,0x2(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e404:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e407:	73 2f                	jae    ffffffff8020e438 <_RME_Clear+0xd8>
ffffffff8020e409:	48 8d 50 04          	lea    0x4(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e40d:	c6 44 01 03 00       	movb   $0x0,0x3(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e412:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e415:	73 21                	jae    ffffffff8020e438 <_RME_Clear+0xd8>
ffffffff8020e417:	48 8d 50 05          	lea    0x5(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e41b:	c6 44 01 04 00       	movb   $0x0,0x4(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e420:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e423:	73 13                	jae    ffffffff8020e438 <_RME_Clear+0xd8>
ffffffff8020e425:	48 8d 50 06          	lea    0x6(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e429:	c6 44 01 05 00       	movb   $0x0,0x5(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e42e:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e431:	73 05                	jae    ffffffff8020e438 <_RME_Clear+0xd8>
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e433:	c6 44 01 06 00       	movb   $0x0,0x6(%rcx,%rax,1)
}
ffffffff8020e438:	c3                   	ret
    for(Count=0U;Count<Size;Count++)
ffffffff8020e439:	31 c0                	xor    %eax,%eax
ffffffff8020e43b:	e9 79 ff ff ff       	jmp    ffffffff8020e3b9 <_RME_Clear+0x59>
ffffffff8020e440:	c3                   	ret
ffffffff8020e441:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e448:	00 00 00 00 
ffffffff8020e44c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e450 <_RME_Memcmp>:
{
ffffffff8020e450:	f3 0f 1e fa          	endbr64
    for(Count=0U;Count<Num;Count++)
ffffffff8020e454:	31 c0                	xor    %eax,%eax
ffffffff8020e456:	48 85 d2             	test   %rdx,%rdx
ffffffff8020e459:	75 0e                	jne    ffffffff8020e469 <_RME_Memcmp+0x19>
ffffffff8020e45b:	c3                   	ret
ffffffff8020e45c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020e460:	48 83 c0 01          	add    $0x1,%rax
ffffffff8020e464:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e467:	74 17                	je     ffffffff8020e480 <_RME_Memcmp+0x30>
        if(Dst[Count]!=Src[Count])
ffffffff8020e469:	0f b6 0c 07          	movzbl (%rdi,%rax,1),%ecx
ffffffff8020e46d:	44 0f be 04 06       	movsbl (%rsi,%rax,1),%r8d
ffffffff8020e472:	44 38 c1             	cmp    %r8b,%cl
ffffffff8020e475:	74 e9                	je     ffffffff8020e460 <_RME_Memcmp+0x10>
            return Dst[Count]-Src[Count];
ffffffff8020e477:	0f be c1             	movsbl %cl,%eax
ffffffff8020e47a:	44 29 c0             	sub    %r8d,%eax
ffffffff8020e47d:	48 98                	cltq
ffffffff8020e47f:	c3                   	ret
    return 0;
ffffffff8020e480:	31 c0                	xor    %eax,%eax
ffffffff8020e482:	c3                   	ret
ffffffff8020e483:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e48a:	00 00 00 00 
ffffffff8020e48e:	66 90                	xchg   %ax,%ax

ffffffff8020e490 <_RME_Memcpy>:
{
ffffffff8020e490:	f3 0f 1e fa          	endbr64
    for(Count=0U;Count<Num;Count++)
ffffffff8020e494:	48 85 d2             	test   %rdx,%rdx
ffffffff8020e497:	74 1a                	je     ffffffff8020e4b3 <_RME_Memcpy+0x23>
ffffffff8020e499:	48 01 f2             	add    %rsi,%rdx
ffffffff8020e49c:	0f 1f 40 00          	nopl   0x0(%rax)
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020e4a0:	0f b6 06             	movzbl (%rsi),%eax
    for(Count=0U;Count<Num;Count++)
ffffffff8020e4a3:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8020e4a7:	48 83 c7 01          	add    $0x1,%rdi
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020e4ab:	88 47 ff             	mov    %al,-0x1(%rdi)
    for(Count=0U;Count<Num;Count++)
ffffffff8020e4ae:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8020e4b1:	75 ed                	jne    ffffffff8020e4a0 <_RME_Memcpy+0x10>
}
ffffffff8020e4b3:	c3                   	ret
ffffffff8020e4b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e4bb:	00 00 00 00 
ffffffff8020e4bf:	90                   	nop

ffffffff8020e4c0 <_RME_Diff>:
{
ffffffff8020e4c0:	f3 0f 1e fa          	endbr64
    Diff1=Num1-Num2;
ffffffff8020e4c4:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e4c7:	48 29 f0             	sub    %rsi,%rax
    Diff2=Num2-Num1;
ffffffff8020e4ca:	48 29 fe             	sub    %rdi,%rsi
    if(Diff1>Diff2)
ffffffff8020e4cd:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020e4d0:	48 0f 47 c6          	cmova  %rsi,%rax
}
ffffffff8020e4d4:	c3                   	ret
ffffffff8020e4d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e4dc:	00 00 00 00 

ffffffff8020e4e0 <RME_Kmain>:
{
ffffffff8020e4e0:	f3 0f 1e fa          	endbr64
ffffffff8020e4e4:	41 55                	push   %r13
        Count++;
ffffffff8020e4e6:	41 bd 04 00 00 00    	mov    $0x4,%r13d
{
ffffffff8020e4ec:	41 54                	push   %r12
    Iter=Abs;
ffffffff8020e4ee:	41 bc 57 04 00 00    	mov    $0x457,%r12d
{
ffffffff8020e4f4:	55                   	push   %rbp
        Div/=10;
ffffffff8020e4f5:	48 bd 67 66 66 66 66 	movabs $0x6666666666666667,%rbp
ffffffff8020e4fc:	66 66 66 
{
ffffffff8020e4ff:	53                   	push   %rbx
ffffffff8020e500:	bb e8 03 00 00       	mov    $0x3e8,%ebx
ffffffff8020e505:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020e509:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        Count--;
ffffffff8020e510:	4c 89 e0             	mov    %r12,%rax
ffffffff8020e513:	49 83 ed 01          	sub    $0x1,%r13
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020e517:	48 99                	cqto
ffffffff8020e519:	48 f7 fb             	idiv   %rbx
ffffffff8020e51c:	8d 78 30             	lea    0x30(%rax),%edi
ffffffff8020e51f:	49 89 d4             	mov    %rdx,%r12
ffffffff8020e522:	40 0f be ff          	movsbl %dil,%edi
ffffffff8020e526:	e8 b5 aa 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
        Div/=10;
ffffffff8020e52b:	48 89 d8             	mov    %rbx,%rax
ffffffff8020e52e:	48 f7 ed             	imul   %rbp
ffffffff8020e531:	48 89 d8             	mov    %rbx,%rax
ffffffff8020e534:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020e538:	48 c1 fa 02          	sar    $0x2,%rdx
ffffffff8020e53c:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020e53f:	48 29 c3             	sub    %rax,%rbx
    while(Count>0)
ffffffff8020e542:	4d 85 ed             	test   %r13,%r13
ffffffff8020e545:	75 c9                	jne    ffffffff8020e510 <RME_Kmain+0x30>
	__asm__ __volatile__ (
ffffffff8020e547:	fa                   	cli
    __RME_Lowlvl_Init();
ffffffff8020e548:	e8 13 ad 00 00       	call   ffffffff80219260 <__RME_Lowlvl_Init>
    __RME_Pgt_Kom_Init();
ffffffff8020e54d:	e8 ce b1 00 00       	call   ffffffff80219720 <__RME_Pgt_Kom_Init>
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020e552:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020e559:	80 ff ff 
ffffffff8020e55c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff8020e563:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020e56a:	00 
ffffffff8020e56b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff8020e572:	00 
ffffffff8020e573:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8020e57a:	00 
    __RME_Boot();
ffffffff8020e57b:	e8 b0 ba 00 00       	call   ffffffff8021a030 <__RME_Boot>
}
ffffffff8020e580:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020e584:	31 c0                	xor    %eax,%eax
ffffffff8020e586:	5b                   	pop    %rbx
ffffffff8020e587:	5d                   	pop    %rbp
ffffffff8020e588:	41 5c                	pop    %r12
ffffffff8020e58a:	41 5d                	pop    %r13
ffffffff8020e58c:	c3                   	ret
ffffffff8020e58d:	0f 1f 00             	nopl   (%rax)

ffffffff8020e590 <_RME_Tim_Elapse>:
{
ffffffff8020e590:	f3 0f 1e fa          	endbr64
ffffffff8020e594:	53                   	push   %rbx
ffffffff8020e595:	48 89 fb             	mov    %rdi,%rbx
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020e598:	e8 a2 d2 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020e59d:	48 b9 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rcx
ffffffff8020e5a4:	ff ff 7f 
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020e5a7:	48 8b 50 08          	mov    0x8(%rax),%rdx
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020e5ab:	48 8b 42 30          	mov    0x30(%rdx),%rax
ffffffff8020e5af:	48 39 c1             	cmp    %rax,%rcx
ffffffff8020e5b2:	72 16                	jb     ffffffff8020e5ca <_RME_Tim_Elapse+0x3a>
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020e5b4:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e5b7:	48 29 d9             	sub    %rbx,%rcx
ffffffff8020e5ba:	48 39 c3             	cmp    %rax,%rbx
ffffffff8020e5bd:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020e5c2:	48 0f 42 c1          	cmovb  %rcx,%rax
ffffffff8020e5c6:	48 89 42 30          	mov    %rax,0x30(%rdx)
}
ffffffff8020e5ca:	5b                   	pop    %rbx
ffffffff8020e5cb:	c3                   	ret
ffffffff8020e5cc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e5d0 <_RME_Tim_Future>:
{
ffffffff8020e5d0:	f3 0f 1e fa          	endbr64
ffffffff8020e5d4:	48 83 ec 08          	sub    $0x8,%rsp
    return RME_CPU_LOCAL()->Thd_Cur->Sched.Slice;
ffffffff8020e5d8:	e8 62 d2 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020e5dd:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020e5e1:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff8020e5e5:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020e5e9:	c3                   	ret
ffffffff8020e5ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020e5f0 <_RME_Pgt_Boot_Add>:
{
ffffffff8020e5f0:	f3 0f 1e fa          	endbr64
ffffffff8020e5f4:	48 89 f0             	mov    %rsi,%rax
ffffffff8020e5f7:	49 89 f9             	mov    %rdi,%r9
ffffffff8020e5fa:	48 89 d6             	mov    %rdx,%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020e5fd:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
{
ffffffff8020e601:	48 89 ca             	mov    %rcx,%rdx
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020e604:	f6 c4 80             	test   $0x80,%ah
ffffffff8020e607:	0f 85 93 00 00 00    	jne    ffffffff8020e6a0 <_RME_Pgt_Boot_Add+0xb0>
ffffffff8020e60d:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e610:	0f 83 fa 00 00 00    	jae    ffffffff8020e710 <_RME_Pgt_Boot_Add+0x120>
ffffffff8020e616:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020e61d:	ff 00 00 
ffffffff8020e620:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e624:	49 03 41 18          	add    0x18(%r9),%rax
ffffffff8020e628:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020e62f:	00 00 00 
ffffffff8020e632:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e635:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e638:	48 21 c1             	and    %rax,%rcx
ffffffff8020e63b:	4c 39 c9             	cmp    %r9,%rcx
ffffffff8020e63e:	0f 84 c4 00 00 00    	je     ffffffff8020e708 <_RME_Pgt_Boot_Add+0x118>
ffffffff8020e644:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e648:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020e64c:	0f 85 ce 00 00 00    	jne    ffffffff8020e720 <_RME_Pgt_Boot_Add+0x130>
    Szord=RME_PGT_SIZEORD(Pgt_Op->Order);
ffffffff8020e652:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020e656:	b9 40 00 00 00       	mov    $0x40,%ecx
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020e65b:	49 89 d3             	mov    %rdx,%r11
    Szord=RME_PGT_SIZEORD(Pgt_Op->Order);
ffffffff8020e65e:	4c 89 c8             	mov    %r9,%rax
ffffffff8020e661:	48 c1 e8 20          	shr    $0x20,%rax
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020e665:	29 c1                	sub    %eax,%ecx
ffffffff8020e667:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020e66e:	48 d3 e8             	shr    %cl,%rax
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020e671:	44 89 c9             	mov    %r9d,%ecx
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020e674:	48 21 f0             	and    %rsi,%rax
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020e677:	49 d3 eb             	shr    %cl,%r11
ffffffff8020e67a:	4c 09 d8             	or     %r11,%rax
ffffffff8020e67d:	0f 85 ad 00 00 00    	jne    ffffffff8020e730 <_RME_Pgt_Boot_Add+0x140>
{
ffffffff8020e683:	48 83 ec 08          	sub    $0x8,%rsp
    if(__RME_Pgt_Page_Map(Pgt_Op,Paddr,Pos,Flag)!=0)
ffffffff8020e687:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020e68a:	e8 41 cc 00 00       	call   ffffffff8021b2d0 <__RME_Pgt_Page_Map>
    return 0;
ffffffff8020e68f:	48 f7 d8             	neg    %rax
ffffffff8020e692:	48 19 c0             	sbb    %rax,%rax
}
ffffffff8020e695:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
ffffffff8020e699:	48 83 e0 9a          	and    $0xffffffffffffff9a,%rax
}
ffffffff8020e69d:	c3                   	ret
ffffffff8020e69e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020e6a0:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e6a3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020e6a7:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020e6aa:	73 64                	jae    ffffffff8020e710 <_RME_Pgt_Boot_Add+0x120>
ffffffff8020e6ac:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020e6b3:	00 00 00 
ffffffff8020e6b6:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020e6ba:	49 03 49 18          	add    0x18(%r9),%rcx
ffffffff8020e6be:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020e6c5:	ff 00 00 
ffffffff8020e6c8:	48 8b 39             	mov    (%rcx),%rdi
ffffffff8020e6cb:	49 89 fb             	mov    %rdi,%r11
ffffffff8020e6ce:	4d 21 cb             	and    %r9,%r11
ffffffff8020e6d1:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020e6d4:	74 32                	je     ffffffff8020e708 <_RME_Pgt_Boot_Add+0x118>
ffffffff8020e6d6:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020e6da:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020e6de:	75 40                	jne    ffffffff8020e720 <_RME_Pgt_Boot_Add+0x130>
ffffffff8020e6e0:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff8020e6e4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e6e9:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e6ec:	73 22                	jae    ffffffff8020e710 <_RME_Pgt_Boot_Add+0x120>
ffffffff8020e6ee:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e6f2:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020e6f6:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e6f9:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e6fc:	49 21 c1             	and    %rax,%r9
ffffffff8020e6ff:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020e702:	0f 85 3c ff ff ff    	jne    ffffffff8020e644 <_RME_Pgt_Boot_Add+0x54>
ffffffff8020e708:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e70f:	c3                   	ret
ffffffff8020e710:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e717:	c3                   	ret
ffffffff8020e718:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e71f:	00 
ffffffff8020e720:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e727:	c3                   	ret
ffffffff8020e728:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e72f:	00 
        return RME_ERR_PGT_ADDR;
ffffffff8020e730:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
}
ffffffff8020e737:	c3                   	ret
ffffffff8020e738:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e73f:	00 

ffffffff8020e740 <_RME_Pgt_Boot_Con>:
{
ffffffff8020e740:	f3 0f 1e fa          	endbr64
ffffffff8020e744:	55                   	push   %rbp
ffffffff8020e745:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020e748:	53                   	push   %rbx
ffffffff8020e749:	48 89 f3             	mov    %rsi,%rbx
ffffffff8020e74c:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e74f:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e753:	48 8b 57 28          	mov    0x28(%rdi),%rdx
ffffffff8020e757:	f6 c7 80             	test   $0x80,%bh
ffffffff8020e75a:	0f 85 20 01 00 00    	jne    ffffffff8020e880 <_RME_Pgt_Boot_Con+0x140>
ffffffff8020e760:	48 39 d3             	cmp    %rdx,%rbx
ffffffff8020e763:	0f 83 ff 00 00 00    	jae    ffffffff8020e868 <_RME_Pgt_Boot_Con+0x128>
ffffffff8020e769:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff8020e76d:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020e771:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020e778:	ff 00 00 
ffffffff8020e77b:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020e782:	00 00 00 
ffffffff8020e785:	48 01 cb             	add    %rcx,%rbx
ffffffff8020e788:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020e78b:	48 21 c7             	and    %rax,%rdi
ffffffff8020e78e:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020e791:	0f 84 56 01 00 00    	je     ffffffff8020e8ed <_RME_Pgt_Boot_Con+0x1ad>
ffffffff8020e797:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e79b:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020e79f:	0f 85 e3 01 00 00    	jne    ffffffff8020e988 <_RME_Pgt_Boot_Con+0x248>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020e7a5:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020e7ab:	0f 85 4f 01 00 00    	jne    ffffffff8020e900 <_RME_Pgt_Boot_Con+0x1c0>
ffffffff8020e7b1:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020e7b4:	0f 83 ae 00 00 00    	jae    ffffffff8020e868 <_RME_Pgt_Boot_Con+0x128>
ffffffff8020e7ba:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020e7c1:	ff 00 00 
ffffffff8020e7c4:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020e7c8:	48 01 cd             	add    %rcx,%rbp
ffffffff8020e7cb:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020e7d2:	00 00 00 
ffffffff8020e7d5:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020e7d9:	48 21 c2             	and    %rax,%rdx
ffffffff8020e7dc:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020e7df:	0f 84 08 01 00 00    	je     ffffffff8020e8ed <_RME_Pgt_Boot_Con+0x1ad>
ffffffff8020e7e5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e7e9:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020e7ed:	0f 85 95 01 00 00    	jne    ffffffff8020e988 <_RME_Pgt_Boot_Con+0x248>
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff8020e7f3:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff8020e7f7:	48 89 f0             	mov    %rsi,%rax
ffffffff8020e7fa:	48 d3 e8             	shr    %cl,%rax
ffffffff8020e7fd:	48 85 c0             	test   %rax,%rax
ffffffff8020e800:	0f 85 9a 01 00 00    	jne    ffffffff8020e9a0 <_RME_Pgt_Boot_Con+0x260>
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff8020e806:	48 8b 45 28          	mov    0x28(%rbp),%rax
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff8020e80a:	48 c1 e9 20          	shr    $0x20,%rcx
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff8020e80e:	89 c2                	mov    %eax,%edx
ffffffff8020e810:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e814:	48 01 d0             	add    %rdx,%rax
    if(Szord_Parent!=Order_Child)
ffffffff8020e817:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020e81a:	0f 85 80 01 00 00    	jne    ffffffff8020e9a0 <_RME_Pgt_Boot_Con+0x260>
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff8020e820:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020e823:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020e826:	48 89 df             	mov    %rbx,%rdi
ffffffff8020e829:	e8 72 cb 00 00       	call   ffffffff8021b3a0 <__RME_Pgt_Pgdir_Map>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff8020e82e:	8b 13                	mov    (%rbx),%edx
ffffffff8020e830:	85 d2                	test   %edx,%edx
ffffffff8020e832:	74 04                	je     ffffffff8020e838 <_RME_Pgt_Boot_Con+0xf8>
ffffffff8020e834:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020e838:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020e83d:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020e843:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff8020e846:	85 c0                	test   %eax,%eax
ffffffff8020e848:	0f 85 2a 01 00 00    	jne    ffffffff8020e978 <_RME_Pgt_Boot_Con+0x238>
ffffffff8020e84e:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020e853:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    return 0;
ffffffff8020e859:	31 c0                	xor    %eax,%eax
}
ffffffff8020e85b:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020e85f:	5b                   	pop    %rbx
ffffffff8020e860:	5d                   	pop    %rbp
ffffffff8020e861:	c3                   	ret
ffffffff8020e862:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020e868:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e86c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020e873:	5b                   	pop    %rbx
ffffffff8020e874:	5d                   	pop    %rbp
ffffffff8020e875:	c3                   	ret
ffffffff8020e876:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e87d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e880:	48 89 d8             	mov    %rbx,%rax
ffffffff8020e883:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e887:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e88a:	73 dc                	jae    ffffffff8020e868 <_RME_Pgt_Boot_Con+0x128>
ffffffff8020e88c:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff8020e890:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e894:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020e89b:	ff 00 00 
ffffffff8020e89e:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020e8a5:	00 00 00 
ffffffff8020e8a8:	48 01 c8             	add    %rcx,%rax
ffffffff8020e8ab:	48 8b 38             	mov    (%rax),%rdi
ffffffff8020e8ae:	49 89 fb             	mov    %rdi,%r11
ffffffff8020e8b1:	4d 21 cb             	and    %r9,%r11
ffffffff8020e8b4:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020e8b7:	74 34                	je     ffffffff8020e8ed <_RME_Pgt_Boot_Con+0x1ad>
ffffffff8020e8b9:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020e8bd:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020e8c1:	0f 85 c1 00 00 00    	jne    ffffffff8020e988 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020e8c7:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff8020e8cb:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020e8d1:	48 39 fb             	cmp    %rdi,%rbx
ffffffff8020e8d4:	73 92                	jae    ffffffff8020e868 <_RME_Pgt_Boot_Con+0x128>
ffffffff8020e8d6:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020e8da:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8020e8de:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020e8e1:	49 21 c1             	and    %rax,%r9
ffffffff8020e8e4:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020e8e7:	0f 85 aa fe ff ff    	jne    ffffffff8020e797 <_RME_Pgt_Boot_Con+0x57>
}
ffffffff8020e8ed:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e8f1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020e8f8:	5b                   	pop    %rbx
ffffffff8020e8f9:	5d                   	pop    %rbp
ffffffff8020e8fa:	c3                   	ret
ffffffff8020e8fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020e900:	48 89 e8             	mov    %rbp,%rax
ffffffff8020e903:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e907:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e90a:	0f 83 58 ff ff ff    	jae    ffffffff8020e868 <_RME_Pgt_Boot_Con+0x128>
ffffffff8020e910:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020e917:	00 00 00 
ffffffff8020e91a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e91e:	48 01 c8             	add    %rcx,%rax
ffffffff8020e921:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020e928:	ff 00 00 
ffffffff8020e92b:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020e92e:	49 89 d1             	mov    %rdx,%r9
ffffffff8020e931:	49 21 c9             	and    %rcx,%r9
ffffffff8020e934:	49 39 f9             	cmp    %rdi,%r9
ffffffff8020e937:	74 b4                	je     ffffffff8020e8ed <_RME_Pgt_Boot_Con+0x1ad>
ffffffff8020e939:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020e93d:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020e941:	75 45                	jne    ffffffff8020e988 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020e943:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e947:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff8020e94d:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020e950:	0f 83 12 ff ff ff    	jae    ffffffff8020e868 <_RME_Pgt_Boot_Con+0x128>
ffffffff8020e956:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020e95a:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff8020e95e:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020e962:	48 21 c1             	and    %rax,%rcx
ffffffff8020e965:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020e968:	0f 85 77 fe ff ff    	jne    ffffffff8020e7e5 <_RME_Pgt_Boot_Con+0xa5>
ffffffff8020e96e:	e9 7a ff ff ff       	jmp    ffffffff8020e8ed <_RME_Pgt_Boot_Con+0x1ad>
ffffffff8020e973:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020e978:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
ffffffff8020e97c:	e9 cd fe ff ff       	jmp    ffffffff8020e84e <_RME_Pgt_Boot_Con+0x10e>
ffffffff8020e981:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
}
ffffffff8020e988:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e98c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020e993:	5b                   	pop    %rbx
ffffffff8020e994:	5d                   	pop    %rbp
ffffffff8020e995:	c3                   	ret
ffffffff8020e996:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e99d:	00 00 00 
        return RME_ERR_PGT_ADDR;
ffffffff8020e9a0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020e9a7:	e9 af fe ff ff       	jmp    ffffffff8020e85b <_RME_Pgt_Boot_Con+0x11b>
ffffffff8020e9ac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e9b0 <_RME_Kot_Init>:
{
ffffffff8020e9b0:	f3 0f 1e fa          	endbr64
    if(Word<RME_KOT_WORD_NUM)
ffffffff8020e9b4:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020e9b8:	76 51                	jbe    ffffffff8020ea0b <_RME_Kot_Init+0x5b>
ffffffff8020e9ba:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020e9c1:	80 ff ff 
ffffffff8020e9c4:	48 8d 14 f8          	lea    (%rax,%rdi,8),%rdx
ffffffff8020e9c8:	83 e7 01             	and    $0x1,%edi
ffffffff8020e9cb:	74 23                	je     ffffffff8020e9f0 <_RME_Kot_Init+0x40>
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020e9cd:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020e9d4:	80 ff ff 
ffffffff8020e9d7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff8020e9de:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020e9e2:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e9e5:	74 21                	je     ffffffff8020ea08 <_RME_Kot_Init+0x58>
ffffffff8020e9e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020e9ee:	00 00 
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020e9f0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff8020e9f7:	48 83 c0 10          	add    $0x10,%rax
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020e9fb:	48 c7 40 f8 00 00 00 	movq   $0x0,-0x8(%rax)
ffffffff8020ea02:	00 
    for(Count=0U;Count<Word;Count++)
ffffffff8020ea03:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020ea06:	75 e8                	jne    ffffffff8020e9f0 <_RME_Kot_Init+0x40>
ffffffff8020ea08:	31 c0                	xor    %eax,%eax
ffffffff8020ea0a:	c3                   	ret
        return -1;
ffffffff8020ea0b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8020ea12:	c3                   	ret
ffffffff8020ea13:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020ea1a:	00 00 00 00 
ffffffff8020ea1e:	66 90                	xchg   %ax,%ax

ffffffff8020ea20 <_RME_Kot_Mark>:
{
ffffffff8020ea20:	f3 0f 1e fa          	endbr64
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff8020ea24:	40 f6 c7 0f          	test   $0xf,%dil
ffffffff8020ea28:	0f 85 b7 01 00 00    	jne    ffffffff8020ebe5 <_RME_Kot_Mark+0x1c5>
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ea2e:	49 ba 00 00 00 00 00 	movabs $0x800000000000,%r10
ffffffff8020ea35:	80 00 00 
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020ea38:	49 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%r9
{
ffffffff8020ea3f:	53                   	push   %rbx
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ea40:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff8020ea47:	7f 00 00 
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ea4a:	49 01 fa             	add    %rdi,%r10
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ea4d:	48 01 c6             	add    %rax,%rsi
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020ea50:	4d 89 cb             	mov    %r9,%r11
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ea53:	4c 89 d1             	mov    %r10,%rcx
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ea56:	48 01 fe             	add    %rdi,%rsi
    Start=Start>>RME_WORD_ORDER;
ffffffff8020ea59:	49 c1 ea 0a          	shr    $0xa,%r10
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020ea5d:	48 bf 00 00 00 01 00 	movabs $0xffff800001000000,%rdi
ffffffff8020ea64:	80 ff ff 
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ea67:	48 c1 e9 04          	shr    $0x4,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020ea6b:	4e 8d 04 d5 00 00 00 	lea    0x0(,%r10,8),%r8
ffffffff8020ea72:	00 
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020ea73:	49 d3 e3             	shl    %cl,%r11
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ea76:	48 89 f1             	mov    %rsi,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020ea79:	49 8d 1c 38          	lea    (%r8,%rdi,1),%rbx
    End=End>>RME_WORD_ORDER;
ffffffff8020ea7d:	48 c1 ee 0a          	shr    $0xa,%rsi
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ea81:	48 c1 e9 04          	shr    $0x4,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020ea85:	48 8b 03             	mov    (%rbx),%rax
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020ea88:	f7 d1                	not    %ecx
ffffffff8020ea8a:	49 d3 e9             	shr    %cl,%r9
    if(Start==End)
ffffffff8020ea8d:	49 39 f2             	cmp    %rsi,%r10
ffffffff8020ea90:	0f 84 32 01 00 00    	je     ffffffff8020ebc8 <_RME_Kot_Mark+0x1a8>
        if((Old_Val&Mask_Begin)!=0U)
ffffffff8020ea96:	49 85 c3             	test   %rax,%r11
ffffffff8020ea99:	0f 85 e3 00 00 00    	jne    ffffffff8020eb82 <_RME_Kot_Mark+0x162>
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020ea9f:	4c 89 da             	mov    %r11,%rdx
ffffffff8020eaa2:	48 09 c2             	or     %rax,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020eaa5:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff8020eaaa:	0f 94 c2             	sete   %dl
ffffffff8020eaad:	84 d2                	test   %dl,%dl
ffffffff8020eaaf:	0f 84 cd 00 00 00    	je     ffffffff8020eb82 <_RME_Kot_Mark+0x162>
        for(Count=Start+1U;Count<End;Count++)
ffffffff8020eab5:	49 8d 4a 01          	lea    0x1(%r10),%rcx
ffffffff8020eab9:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020eabc:	0f 83 ce 00 00 00    	jae    ffffffff8020eb90 <_RME_Kot_Mark+0x170>
ffffffff8020eac2:	49 8d 54 38 08       	lea    0x8(%r8,%rdi,1),%rdx
ffffffff8020eac7:	31 c0                	xor    %eax,%eax
ffffffff8020eac9:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
ffffffff8020ead0:	eb 25                	jmp    ffffffff8020eaf7 <_RME_Kot_Mark+0xd7>
ffffffff8020ead2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020ead8:	f0 48 0f b1 3a       	lock cmpxchg %rdi,(%rdx)
ffffffff8020eadd:	41 0f 94 c0          	sete   %r8b
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Count],
ffffffff8020eae1:	45 84 c0             	test   %r8b,%r8b
ffffffff8020eae4:	74 17                	je     ffffffff8020eafd <_RME_Kot_Mark+0xdd>
        for(Count=Start+1U;Count<End;Count++)
ffffffff8020eae6:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8020eaea:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8020eaee:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020eaf1:	0f 84 99 00 00 00    	je     ffffffff8020eb90 <_RME_Kot_Mark+0x170>
            if(Old_Val!=0U)
ffffffff8020eaf7:	48 83 3a 00          	cmpq   $0x0,(%rdx)
ffffffff8020eafb:	74 db                	je     ffffffff8020ead8 <_RME_Kot_Mark+0xb8>
            for(Count--;Count>Start;Count--)
ffffffff8020eafd:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
ffffffff8020eb01:	49 39 d2             	cmp    %rdx,%r10
ffffffff8020eb04:	73 72                	jae    ffffffff8020eb78 <_RME_Kot_Mark+0x158>
ffffffff8020eb06:	48 89 c8             	mov    %rcx,%rax
ffffffff8020eb09:	4c 29 d0             	sub    %r10,%rax
ffffffff8020eb0c:	48 8d 78 ff          	lea    -0x1(%rax),%rdi
ffffffff8020eb10:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eb14:	74 50                	je     ffffffff8020eb66 <_RME_Kot_Mark+0x146>
ffffffff8020eb16:	48 89 fe             	mov    %rdi,%rsi
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020eb19:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8020eb1d:	49 b8 f0 ff ff 00 00 	movabs $0xffff800000fffff0,%r8
ffffffff8020eb24:	80 ff ff 
ffffffff8020eb27:	48 83 e6 fe          	and    $0xfffffffffffffffe,%rsi
ffffffff8020eb2b:	49 8d 04 c8          	lea    (%r8,%rcx,8),%rax
ffffffff8020eb2f:	48 29 f1             	sub    %rsi,%rcx
ffffffff8020eb32:	49 8d 0c c8          	lea    (%r8,%rcx,8),%rcx
ffffffff8020eb36:	49 89 c0             	mov    %rax,%r8
ffffffff8020eb39:	49 29 c8             	sub    %rcx,%r8
ffffffff8020eb3c:	41 83 e0 10          	and    $0x10,%r8d
ffffffff8020eb40:	74 0c                	je     ffffffff8020eb4e <_RME_Kot_Mark+0x12e>
ffffffff8020eb42:	0f 11 00             	movups %xmm0,(%rax)
            for(Count--;Count>Start;Count--)
ffffffff8020eb45:	48 83 e8 10          	sub    $0x10,%rax
ffffffff8020eb49:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020eb4c:	74 10                	je     ffffffff8020eb5e <_RME_Kot_Mark+0x13e>
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020eb4e:	0f 11 00             	movups %xmm0,(%rax)
ffffffff8020eb51:	48 83 e8 20          	sub    $0x20,%rax
ffffffff8020eb55:	0f 11 40 10          	movups %xmm0,0x10(%rax)
            for(Count--;Count>Start;Count--)
ffffffff8020eb59:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020eb5c:	75 f0                	jne    ffffffff8020eb4e <_RME_Kot_Mark+0x12e>
ffffffff8020eb5e:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020eb61:	74 15                	je     ffffffff8020eb78 <_RME_Kot_Mark+0x158>
ffffffff8020eb63:	48 29 f2             	sub    %rsi,%rdx
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020eb66:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020eb6d:	80 ff ff 
ffffffff8020eb70:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
ffffffff8020eb77:	00 
            RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff8020eb78:	49 f7 d3             	not    %r11
	__asm__ __volatile__("MOVQ %[Ptr],%[Old]; LOCK ANDQ %[Operand], %[Ptr]"
ffffffff8020eb7b:	4c 8b 1b             	mov    (%rbx),%r11
ffffffff8020eb7e:	f0 4c 21 1b          	lock and %r11,(%rbx)
        return RME_ERR_KOT_BMP;
ffffffff8020eb82:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8020eb89:	5b                   	pop    %rbx
ffffffff8020eb8a:	c3                   	ret
ffffffff8020eb8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Old_Val=RME_KOT_VA_BASE[End];
ffffffff8020eb90:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020eb97:	80 ff ff 
ffffffff8020eb9a:	48 8d 14 f0          	lea    (%rax,%rsi,8),%rdx
ffffffff8020eb9e:	48 8b 02             	mov    (%rdx),%rax
            if((Old_Val&Mask_End)!=0U)
ffffffff8020eba1:	49 85 c1             	test   %rax,%r9
ffffffff8020eba4:	0f 85 53 ff ff ff    	jne    ffffffff8020eafd <_RME_Kot_Mark+0xdd>
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[End],
ffffffff8020ebaa:	49 09 c1             	or     %rax,%r9
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020ebad:	f0 4c 0f b1 0a       	lock cmpxchg %r9,(%rdx)
ffffffff8020ebb2:	41 0f 94 c1          	sete   %r9b
ffffffff8020ebb6:	45 84 c9             	test   %r9b,%r9b
ffffffff8020ebb9:	0f 84 3e ff ff ff    	je     ffffffff8020eafd <_RME_Kot_Mark+0xdd>
    return 0;
ffffffff8020ebbf:	31 c0                	xor    %eax,%eax
}
ffffffff8020ebc1:	5b                   	pop    %rbx
ffffffff8020ebc2:	c3                   	ret
ffffffff8020ebc3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        if((Old_Val&(Mask_Begin&Mask_End))!=0U)
ffffffff8020ebc8:	4d 21 d9             	and    %r11,%r9
ffffffff8020ebcb:	49 85 c1             	test   %rax,%r9
ffffffff8020ebce:	75 b2                	jne    ffffffff8020eb82 <_RME_Kot_Mark+0x162>
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020ebd0:	49 09 c1             	or     %rax,%r9
ffffffff8020ebd3:	f0 4c 0f b1 0b       	lock cmpxchg %r9,(%rbx)
ffffffff8020ebd8:	41 0f 94 c1          	sete   %r9b
ffffffff8020ebdc:	41 80 f9 01          	cmp    $0x1,%r9b
}
ffffffff8020ebe0:	5b                   	pop    %rbx
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020ebe1:	48 19 c0             	sbb    %rax,%rax
}
ffffffff8020ebe4:	c3                   	ret
        return RME_ERR_KOT_BMP;
ffffffff8020ebe5:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
}
ffffffff8020ebe9:	c3                   	ret
ffffffff8020ebea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020ebf0 <_RME_Cpt_Crt>:
{
ffffffff8020ebf0:	48 89 f0             	mov    %rsi,%rax
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020ebf3:	49 8d 71 ff          	lea    -0x1(%r9),%rsi
ffffffff8020ebf7:	48 81 fe ff 7f 00 00 	cmp    $0x7fff,%rsi
ffffffff8020ebfe:	0f 87 d8 02 00 00    	ja     ffffffff8020eedc <_RME_Cpt_Crt+0x2ec>
{
ffffffff8020ec04:	41 55                	push   %r13
ffffffff8020ec06:	41 54                	push   %r12
ffffffff8020ec08:	55                   	push   %rbp
ffffffff8020ec09:	4c 89 cd             	mov    %r9,%rbp
ffffffff8020ec0c:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020ec0d:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
ffffffff8020ec11:	f6 c4 80             	test   $0x80,%ah
ffffffff8020ec14:	0f 84 c6 01 00 00    	je     ffffffff8020ede0 <_RME_Cpt_Crt+0x1f0>
ffffffff8020ec1a:	48 89 c6             	mov    %rax,%rsi
ffffffff8020ec1d:	48 c1 ee 10          	shr    $0x10,%rsi
ffffffff8020ec21:	4c 39 ce             	cmp    %r9,%rsi
ffffffff8020ec24:	0f 83 fe 01 00 00    	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x238>
ffffffff8020ec2a:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020ec2e:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020ec32:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020ec39:	ff 00 00 
ffffffff8020ec3c:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020ec43:	00 00 00 
ffffffff8020ec46:	48 01 fe             	add    %rdi,%rsi
ffffffff8020ec49:	4c 8b 16             	mov    (%rsi),%r10
ffffffff8020ec4c:	4d 89 d4             	mov    %r10,%r12
ffffffff8020ec4f:	4d 21 dc             	and    %r11,%r12
ffffffff8020ec52:	49 39 dc             	cmp    %rbx,%r12
ffffffff8020ec55:	0f 84 b8 01 00 00    	je     ffffffff8020ee13 <_RME_Cpt_Crt+0x223>
ffffffff8020ec5b:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020ec5f:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020ec63:	0f 85 57 02 00 00    	jne    ffffffff8020eec0 <_RME_Cpt_Crt+0x2d0>
ffffffff8020ec69:	4c 8b 56 28          	mov    0x28(%rsi),%r10
ffffffff8020ec6d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ec72:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020ec75:	0f 83 ad 01 00 00    	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x238>
ffffffff8020ec7b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ec7f:	48 03 46 18          	add    0x18(%rsi),%rax
ffffffff8020ec83:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020ec86:	49 21 f3             	and    %rsi,%r11
ffffffff8020ec89:	49 39 db             	cmp    %rbx,%r11
ffffffff8020ec8c:	0f 84 81 01 00 00    	je     ffffffff8020ee13 <_RME_Cpt_Crt+0x223>
ffffffff8020ec92:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020ec96:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020ec9a:	0f 85 20 02 00 00    	jne    ffffffff8020eec0 <_RME_Cpt_Crt+0x2d0>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020eca0:	f6 c6 80             	test   $0x80,%dh
ffffffff8020eca3:	0f 85 97 01 00 00    	jne    ffffffff8020ee40 <_RME_Cpt_Crt+0x250>
ffffffff8020eca9:	4c 39 ca             	cmp    %r9,%rdx
ffffffff8020ecac:	0f 83 76 01 00 00    	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x238>
ffffffff8020ecb2:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020ecb9:	00 00 00 
ffffffff8020ecbc:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020ecc0:	48 01 fa             	add    %rdi,%rdx
ffffffff8020ecc3:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020ecca:	ff 00 00 
ffffffff8020eccd:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8020ecd0:	48 21 f7             	and    %rsi,%rdi
ffffffff8020ecd3:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020ecd6:	0f 84 37 01 00 00    	je     ffffffff8020ee13 <_RME_Cpt_Crt+0x223>
ffffffff8020ecdc:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020ece0:	48 83 fe 02          	cmp    $0x2,%rsi
ffffffff8020ece4:	0f 85 d6 01 00 00    	jne    ffffffff8020eec0 <_RME_Cpt_Crt+0x2d0>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020ecea:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8020ecee:	0f 84 bc 01 00 00    	je     ffffffff8020eeb0 <_RME_Cpt_Crt+0x2c0>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
ffffffff8020ecf4:	f6 42 10 01          	testb  $0x1,0x10(%rdx)
ffffffff8020ecf8:	0f 84 b2 01 00 00    	je     ffffffff8020eeb0 <_RME_Cpt_Crt+0x2c0>
ffffffff8020ecfe:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff8020ed02:	4c 39 c6             	cmp    %r8,%rsi
ffffffff8020ed05:	4e 8d 2c 06          	lea    (%rsi,%r8,1),%r13
ffffffff8020ed09:	49 0f 42 f0          	cmovb  %r8,%rsi
ffffffff8020ed0d:	49 39 f5             	cmp    %rsi,%r13
ffffffff8020ed10:	0f 82 9a 01 00 00    	jb     ffffffff8020eeb0 <_RME_Cpt_Crt+0x2c0>
ffffffff8020ed16:	48 89 ee             	mov    %rbp,%rsi
ffffffff8020ed19:	31 db                	xor    %ebx,%ebx
ffffffff8020ed1b:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020ed1f:	48 89 f7             	mov    %rsi,%rdi
ffffffff8020ed22:	4c 01 ef             	add    %r13,%rdi
ffffffff8020ed25:	0f 92 c3             	setb   %bl
ffffffff8020ed28:	0f 82 82 01 00 00    	jb     ffffffff8020eeb0 <_RME_Cpt_Crt+0x2c0>
ffffffff8020ed2e:	48 83 ef 01          	sub    $0x1,%rdi
ffffffff8020ed32:	48 39 7a 30          	cmp    %rdi,0x30(%rdx)
ffffffff8020ed36:	0f 82 74 01 00 00    	jb     ffffffff8020eeb0 <_RME_Cpt_Crt+0x2c0>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020ed3c:	48 3b 48 28          	cmp    0x28(%rax),%rcx
ffffffff8020ed40:	0f 83 e2 00 00 00    	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x238>
ffffffff8020ed46:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020ed4d:	00 00 00 
ffffffff8020ed50:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020ed54:	48 03 48 18          	add    0x18(%rax),%rcx
ffffffff8020ed58:	48 89 d8             	mov    %rbx,%rax
ffffffff8020ed5b:	49 89 cc             	mov    %rcx,%r12
ffffffff8020ed5e:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8020ed63:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020ed66:	84 d2                	test   %dl,%dl
ffffffff8020ed68:	0f 84 62 01 00 00    	je     ffffffff8020eed0 <_RME_Cpt_Crt+0x2e0>
	__asm__ __volatile__ (
ffffffff8020ed6e:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff8020ed70:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8020ed74:	89 c0                	mov    %eax,%eax
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020ed76:	4c 89 ef             	mov    %r13,%rdi
ffffffff8020ed79:	48 09 c2             	or     %rax,%rdx
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020ed7c:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020ed80:	e8 9b fc ff ff       	call   ffffffff8020ea20 <_RME_Kot_Mark>
ffffffff8020ed85:	48 85 c0             	test   %rax,%rax
ffffffff8020ed88:	0f 88 56 01 00 00    	js     ffffffff8020eee4 <_RME_Cpt_Crt+0x2f4>
ffffffff8020ed8e:	4c 89 e8             	mov    %r13,%rax
ffffffff8020ed91:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020ed98:	48 83 c3 01          	add    $0x1,%rbx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020ed9c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020eda3:	48 83 c0 40          	add    $0x40,%rax
ffffffff8020eda7:	48 39 eb             	cmp    %rbp,%rbx
ffffffff8020edaa:	72 ec                	jb     ffffffff8020ed98 <_RME_Cpt_Crt+0x1a8>
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020edac:	48 b8 00 00 00 00 00 	movabs $0x3000000000000,%rax
ffffffff8020edb3:	00 03 00 
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020edb6:	49 c7 44 24 08 00 00 	movq   $0x0,0x8(%r12)
ffffffff8020edbd:	00 00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020edbf:	4d 89 6c 24 18       	mov    %r13,0x18(%r12)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020edc4:	49 c7 44 24 10 ff 00 	movq   $0xff,0x10(%r12)
ffffffff8020edcb:	00 00 
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020edcd:	49 89 6c 24 28       	mov    %rbp,0x28(%r12)
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020edd2:	49 89 04 24          	mov    %rax,(%r12)
    return 0;
ffffffff8020edd6:	31 c0                	xor    %eax,%eax
}
ffffffff8020edd8:	5b                   	pop    %rbx
ffffffff8020edd9:	5d                   	pop    %rbp
ffffffff8020edda:	41 5c                	pop    %r12
ffffffff8020eddc:	41 5d                	pop    %r13
ffffffff8020edde:	c3                   	ret
ffffffff8020eddf:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020ede0:	4c 39 c8             	cmp    %r9,%rax
ffffffff8020ede3:	73 43                	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x238>
ffffffff8020ede5:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020ede9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eded:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020edf4:	ff 00 00 
ffffffff8020edf7:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020edfe:	00 00 00 
ffffffff8020ee01:	48 01 f8             	add    %rdi,%rax
ffffffff8020ee04:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020ee07:	49 21 f2             	and    %rsi,%r10
ffffffff8020ee0a:	4d 39 da             	cmp    %r11,%r10
ffffffff8020ee0d:	0f 85 7f fe ff ff    	jne    ffffffff8020ec92 <_RME_Cpt_Crt+0xa2>
}
ffffffff8020ee13:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020ee14:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020ee1b:	5d                   	pop    %rbp
ffffffff8020ee1c:	41 5c                	pop    %r12
ffffffff8020ee1e:	41 5d                	pop    %r13
ffffffff8020ee20:	c3                   	ret
ffffffff8020ee21:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        return RME_ERR_CPT_RANGE;
ffffffff8020ee28:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020ee2f:	5b                   	pop    %rbx
ffffffff8020ee30:	5d                   	pop    %rbp
ffffffff8020ee31:	41 5c                	pop    %r12
ffffffff8020ee33:	41 5d                	pop    %r13
ffffffff8020ee35:	c3                   	ret
ffffffff8020ee36:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020ee3d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020ee40:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020ee43:	48 c1 ee 10          	shr    $0x10,%rsi
ffffffff8020ee47:	4c 39 ce             	cmp    %r9,%rsi
ffffffff8020ee4a:	73 dc                	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x238>
ffffffff8020ee4c:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020ee53:	ff 00 00 
ffffffff8020ee56:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020ee5a:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020ee61:	00 00 00 
ffffffff8020ee64:	48 01 fe             	add    %rdi,%rsi
ffffffff8020ee67:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8020ee6a:	49 89 fb             	mov    %rdi,%r11
ffffffff8020ee6d:	4d 21 cb             	and    %r9,%r11
ffffffff8020ee70:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020ee73:	74 9e                	je     ffffffff8020ee13 <_RME_Cpt_Crt+0x223>
ffffffff8020ee75:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020ee79:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020ee7d:	75 41                	jne    ffffffff8020eec0 <_RME_Cpt_Crt+0x2d0>
ffffffff8020ee7f:	48 8b 7e 28          	mov    0x28(%rsi),%rdi
ffffffff8020ee83:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020ee89:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020ee8c:	73 9a                	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x238>
ffffffff8020ee8e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020ee92:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff8020ee96:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8020ee99:	49 21 f1             	and    %rsi,%r9
ffffffff8020ee9c:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020ee9f:	0f 85 37 fe ff ff    	jne    ffffffff8020ecdc <_RME_Cpt_Crt+0xec>
ffffffff8020eea5:	e9 69 ff ff ff       	jmp    ffffffff8020ee13 <_RME_Cpt_Crt+0x223>
ffffffff8020eeaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
}
ffffffff8020eeb0:	5b                   	pop    %rbx
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020eeb1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff8020eeb8:	5d                   	pop    %rbp
ffffffff8020eeb9:	41 5c                	pop    %r12
ffffffff8020eebb:	41 5d                	pop    %r13
ffffffff8020eebd:	c3                   	ret
ffffffff8020eebe:	66 90                	xchg   %ax,%ax
ffffffff8020eec0:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020eec1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020eec8:	5d                   	pop    %rbp
ffffffff8020eec9:	41 5c                	pop    %r12
ffffffff8020eecb:	41 5d                	pop    %r13
ffffffff8020eecd:	c3                   	ret
ffffffff8020eece:	66 90                	xchg   %ax,%ax
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020eed0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020eed7:	e9 53 ff ff ff       	jmp    ffffffff8020ee2f <_RME_Cpt_Crt+0x23f>
        return RME_ERR_CPT_RANGE;
ffffffff8020eedc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020eee3:	c3                   	ret
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020eee4:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
ffffffff8020eeeb:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020eeec:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020eef3:	e9 37 ff ff ff       	jmp    ffffffff8020ee2f <_RME_Cpt_Crt+0x23f>
ffffffff8020eef8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020eeff:	00 

ffffffff8020ef00 <_RME_Pgt_Crt>:
{
ffffffff8020ef00:	41 57                	push   %r15
ffffffff8020ef02:	41 56                	push   %r14
ffffffff8020ef04:	41 55                	push   %r13
ffffffff8020ef06:	49 89 cd             	mov    %rcx,%r13
ffffffff8020ef09:	41 54                	push   %r12
ffffffff8020ef0b:	55                   	push   %rbp
ffffffff8020ef0c:	53                   	push   %rbx
ffffffff8020ef0d:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020ef11:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020ef16:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
ffffffff8020ef1b:	4c 01 e1             	add    %r12,%rcx
ffffffff8020ef1e:	48 83 f9 40          	cmp    $0x40,%rcx
ffffffff8020ef22:	0f 87 28 03 00 00    	ja     ffffffff8020f250 <_RME_Pgt_Crt+0x350>
ffffffff8020ef28:	48 89 f0             	mov    %rsi,%rax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ef2b:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020ef2f:	4d 89 ce             	mov    %r9,%r14
ffffffff8020ef32:	f6 c4 80             	test   $0x80,%ah
ffffffff8020ef35:	0f 84 05 02 00 00    	je     ffffffff8020f140 <_RME_Pgt_Crt+0x240>
ffffffff8020ef3b:	49 89 f2             	mov    %rsi,%r10
ffffffff8020ef3e:	49 c1 ea 10          	shr    $0x10,%r10
ffffffff8020ef42:	49 39 ca             	cmp    %rcx,%r10
ffffffff8020ef45:	0f 83 35 02 00 00    	jae    ffffffff8020f180 <_RME_Pgt_Crt+0x280>
ffffffff8020ef4b:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff8020ef4f:	49 c1 e2 06          	shl    $0x6,%r10
ffffffff8020ef53:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020ef5a:	ff 00 00 
ffffffff8020ef5d:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020ef64:	00 00 00 
ffffffff8020ef67:	49 01 f2             	add    %rsi,%r10
ffffffff8020ef6a:	4d 8b 1a             	mov    (%r10),%r11
ffffffff8020ef6d:	4c 89 db             	mov    %r11,%rbx
ffffffff8020ef70:	48 21 fb             	and    %rdi,%rbx
ffffffff8020ef73:	4c 39 cb             	cmp    %r9,%rbx
ffffffff8020ef76:	0f 84 f8 01 00 00    	je     ffffffff8020f174 <_RME_Pgt_Crt+0x274>
ffffffff8020ef7c:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff8020ef80:	49 83 fb 03          	cmp    $0x3,%r11
ffffffff8020ef84:	0f 85 86 02 00 00    	jne    ffffffff8020f210 <_RME_Pgt_Crt+0x310>
ffffffff8020ef8a:	4d 8b 5a 28          	mov    0x28(%r10),%r11
ffffffff8020ef8e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ef93:	4c 39 d8             	cmp    %r11,%rax
ffffffff8020ef96:	0f 83 e4 01 00 00    	jae    ffffffff8020f180 <_RME_Pgt_Crt+0x280>
ffffffff8020ef9c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020efa0:	49 03 42 18          	add    0x18(%r10),%rax
ffffffff8020efa4:	48 89 c3             	mov    %rax,%rbx
ffffffff8020efa7:	48 8b 00             	mov    (%rax),%rax
ffffffff8020efaa:	48 21 c7             	and    %rax,%rdi
ffffffff8020efad:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020efb0:	0f 84 be 01 00 00    	je     ffffffff8020f174 <_RME_Pgt_Crt+0x274>
ffffffff8020efb6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020efba:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020efbe:	0f 85 4c 02 00 00    	jne    ffffffff8020f210 <_RME_Pgt_Crt+0x310>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020efc4:	f6 c6 80             	test   $0x80,%dh
ffffffff8020efc7:	0f 85 d3 01 00 00    	jne    ffffffff8020f1a0 <_RME_Pgt_Crt+0x2a0>
ffffffff8020efcd:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020efd0:	0f 83 aa 01 00 00    	jae    ffffffff8020f180 <_RME_Pgt_Crt+0x280>
ffffffff8020efd6:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020efdd:	ff 00 00 
ffffffff8020efe0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020efe4:	48 8d 04 32          	lea    (%rdx,%rsi,1),%rax
ffffffff8020efe8:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8020efef:	00 00 00 
ffffffff8020eff2:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020eff5:	48 21 d1             	and    %rdx,%rcx
ffffffff8020eff8:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020effb:	0f 84 73 01 00 00    	je     ffffffff8020f174 <_RME_Pgt_Crt+0x274>
ffffffff8020f001:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020f005:	48 83 fa 02          	cmp    $0x2,%rdx
ffffffff8020f009:	0f 85 01 02 00 00    	jne    ffffffff8020f210 <_RME_Pgt_Crt+0x310>
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff8020f00f:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020f013:	0f 84 07 02 00 00    	je     ffffffff8020f220 <_RME_Pgt_Crt+0x320>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff8020f019:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8020f01d:	0f 84 fd 01 00 00    	je     ffffffff8020f220 <_RME_Pgt_Crt+0x320>
ffffffff8020f023:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f027:	4c 39 c2             	cmp    %r8,%rdx
ffffffff8020f02a:	4a 8d 2c 02          	lea    (%rdx,%r8,1),%rbp
ffffffff8020f02e:	49 0f 42 d0          	cmovb  %r8,%rdx
ffffffff8020f032:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020f035:	0f 82 e5 01 00 00    	jb     ffffffff8020f220 <_RME_Pgt_Crt+0x320>
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020f03b:	41 bf 01 00 00 00    	mov    $0x1,%r15d
ffffffff8020f041:	44 89 e1             	mov    %r12d,%ecx
ffffffff8020f044:	41 d3 e7             	shl    %cl,%r15d
ffffffff8020f047:	4d 63 ff             	movslq %r15d,%r15
ffffffff8020f04a:	49 c1 e7 03          	shl    $0x3,%r15
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff8020f04e:	4c 89 fa             	mov    %r15,%rdx
ffffffff8020f051:	48 01 ea             	add    %rbp,%rdx
ffffffff8020f054:	0f 82 c6 01 00 00    	jb     ffffffff8020f220 <_RME_Pgt_Crt+0x320>
ffffffff8020f05a:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8020f05e:	48 39 50 30          	cmp    %rdx,0x30(%rax)
ffffffff8020f062:	0f 82 b8 01 00 00    	jb     ffffffff8020f220 <_RME_Pgt_Crt+0x320>
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)<0)
ffffffff8020f068:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
ffffffff8020f06d:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
ffffffff8020f072:	4c 89 e1             	mov    %r12,%rcx
ffffffff8020f075:	49 89 e8             	mov    %rbp,%r8
ffffffff8020f078:	4c 89 f7             	mov    %r14,%rdi
ffffffff8020f07b:	e8 00 c1 00 00       	call   ffffffff8021b180 <__RME_Pgt_Check>
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020f080:	b9 40 00 00 00       	mov    $0x40,%ecx
ffffffff8020f085:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f08c:	44 29 e1             	sub    %r12d,%ecx
ffffffff8020f08f:	2b 4c 24 48          	sub    0x48(%rsp),%ecx
ffffffff8020f093:	48 d3 e8             	shr    %cl,%rax
ffffffff8020f096:	4c 21 f0             	and    %r14,%rax
ffffffff8020f099:	0f 85 b1 01 00 00    	jne    ffffffff8020f250 <_RME_Pgt_Crt+0x350>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020f09f:	4c 3b 6b 28          	cmp    0x28(%rbx),%r13
ffffffff8020f0a3:	0f 83 d7 00 00 00    	jae    ffffffff8020f180 <_RME_Pgt_Crt+0x280>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020f0a9:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f0b0:	00 00 00 
ffffffff8020f0b3:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8020f0b7:	4c 03 6b 18          	add    0x18(%rbx),%r13
ffffffff8020f0bb:	f0 49 0f b1 55 00    	lock cmpxchg %rdx,0x0(%r13)
ffffffff8020f0c1:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020f0c4:	84 d2                	test   %dl,%dl
ffffffff8020f0c6:	0f 84 64 01 00 00    	je     ffffffff8020f230 <_RME_Pgt_Crt+0x330>
	__asm__ __volatile__ (
ffffffff8020f0cc:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff8020f0ce:	89 c0                	mov    %eax,%eax
ffffffff8020f0d0:	48 c1 e2 20          	shl    $0x20,%rdx
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
ffffffff8020f0d4:	4c 89 fe             	mov    %r15,%rsi
ffffffff8020f0d7:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020f0da:	48 09 c2             	or     %rax,%rdx
ffffffff8020f0dd:	49 89 55 20          	mov    %rdx,0x20(%r13)
ffffffff8020f0e1:	e8 3a f9 ff ff       	call   ffffffff8020ea20 <_RME_Kot_Mark>
ffffffff8020f0e6:	48 89 c3             	mov    %rax,%rbx
ffffffff8020f0e9:	48 85 c0             	test   %rax,%rax
ffffffff8020f0ec:	0f 85 4a 01 00 00    	jne    ffffffff8020f23c <_RME_Pgt_Crt+0x33c>
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020f0f2:	49 89 6d 18          	mov    %rbp,0x18(%r13)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f0f6:	48 8b 6c 24 48       	mov    0x48(%rsp),%rbp
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020f0fb:	4c 89 ef             	mov    %r13,%rdi
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020f0fe:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020f103:	66 0f 6f 05 85 e8 00 	movdqa 0xe885(%rip),%xmm0        # ffffffff8021d990 <Table.1+0x110>
ffffffff8020f10a:	00 
    Pgt_Crt->ASID=0U;
ffffffff8020f10b:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
ffffffff8020f112:	00 
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f113:	48 c1 e5 20          	shl    $0x20,%rbp
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020f117:	4c 09 f0             	or     %r14,%rax
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f11a:	4c 09 e5             	or     %r12,%rbp
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020f11d:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020f122:	49 89 45 30          	mov    %rax,0x30(%r13)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f126:	49 89 6d 28          	mov    %rbp,0x28(%r13)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020f12a:	e8 a1 c0 00 00       	call   ffffffff8021b1d0 <__RME_Pgt_Init>
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020f12f:	48 b8 00 00 00 00 00 	movabs $0x4000000000000,%rax
ffffffff8020f136:	00 04 00 
ffffffff8020f139:	49 89 45 00          	mov    %rax,0x0(%r13)
    return 0;
ffffffff8020f13d:	eb 48                	jmp    ffffffff8020f187 <_RME_Pgt_Crt+0x287>
ffffffff8020f13f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f140:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020f143:	73 3b                	jae    ffffffff8020f180 <_RME_Pgt_Crt+0x280>
ffffffff8020f145:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff8020f149:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f14d:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f154:	ff 00 00 
ffffffff8020f157:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020f15e:	00 00 00 
ffffffff8020f161:	48 8d 1c 30          	lea    (%rax,%rsi,1),%rbx
ffffffff8020f165:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020f168:	48 21 c7             	and    %rax,%rdi
ffffffff8020f16b:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020f16e:	0f 85 42 fe ff ff    	jne    ffffffff8020efb6 <_RME_Pgt_Crt+0xb6>
ffffffff8020f174:	48 c7 c3 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rbx
ffffffff8020f17b:	eb 0a                	jmp    ffffffff8020f187 <_RME_Pgt_Crt+0x287>
ffffffff8020f17d:	0f 1f 00             	nopl   (%rax)
ffffffff8020f180:	48 c7 c3 fd ff ff ff 	mov    $0xfffffffffffffffd,%rbx
}
ffffffff8020f187:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020f18b:	48 89 d8             	mov    %rbx,%rax
ffffffff8020f18e:	5b                   	pop    %rbx
ffffffff8020f18f:	5d                   	pop    %rbp
ffffffff8020f190:	41 5c                	pop    %r12
ffffffff8020f192:	41 5d                	pop    %r13
ffffffff8020f194:	41 5e                	pop    %r14
ffffffff8020f196:	41 5f                	pop    %r15
ffffffff8020f198:	c3                   	ret
ffffffff8020f199:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020f1a0:	48 89 d0             	mov    %rdx,%rax
ffffffff8020f1a3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f1a7:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020f1aa:	73 d4                	jae    ffffffff8020f180 <_RME_Pgt_Crt+0x280>
ffffffff8020f1ac:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f1b3:	00 00 00 
ffffffff8020f1b6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f1ba:	48 01 f0             	add    %rsi,%rax
ffffffff8020f1bd:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f1c4:	ff 00 00 
ffffffff8020f1c7:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020f1ca:	49 89 c9             	mov    %rcx,%r9
ffffffff8020f1cd:	49 21 f1             	and    %rsi,%r9
ffffffff8020f1d0:	49 39 f9             	cmp    %rdi,%r9
ffffffff8020f1d3:	74 9f                	je     ffffffff8020f174 <_RME_Pgt_Crt+0x274>
ffffffff8020f1d5:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f1d9:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020f1dd:	75 31                	jne    ffffffff8020f210 <_RME_Pgt_Crt+0x310>
ffffffff8020f1df:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8020f1e3:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020f1e9:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020f1ec:	73 92                	jae    ffffffff8020f180 <_RME_Pgt_Crt+0x280>
ffffffff8020f1ee:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f1f2:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff8020f1f6:	48 89 d0             	mov    %rdx,%rax
ffffffff8020f1f9:	48 8b 12             	mov    (%rdx),%rdx
ffffffff8020f1fc:	48 21 d6             	and    %rdx,%rsi
ffffffff8020f1ff:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f202:	0f 85 f9 fd ff ff    	jne    ffffffff8020f001 <_RME_Pgt_Crt+0x101>
ffffffff8020f208:	e9 67 ff ff ff       	jmp    ffffffff8020f174 <_RME_Pgt_Crt+0x274>
ffffffff8020f20d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f210:	48 c7 c3 fe ff ff ff 	mov    $0xfffffffffffffffe,%rbx
ffffffff8020f217:	e9 6b ff ff ff       	jmp    ffffffff8020f187 <_RME_Pgt_Crt+0x287>
ffffffff8020f21c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff8020f220:	48 c7 c3 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rbx
ffffffff8020f227:	e9 5b ff ff ff       	jmp    ffffffff8020f187 <_RME_Pgt_Crt+0x287>
ffffffff8020f22c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020f230:	48 c7 c3 fb ff ff ff 	mov    $0xfffffffffffffffb,%rbx
ffffffff8020f237:	e9 4b ff ff ff       	jmp    ffffffff8020f187 <_RME_Pgt_Crt+0x287>
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020f23c:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
ffffffff8020f243:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020f244:	48 c7 c3 fc ff ff ff 	mov    $0xfffffffffffffffc,%rbx
ffffffff8020f24b:	e9 37 ff ff ff       	jmp    ffffffff8020f187 <_RME_Pgt_Crt+0x287>
        return RME_ERR_PGT_HW;
ffffffff8020f250:	48 c7 c3 99 ff ff ff 	mov    $0xffffffffffffff99,%rbx
ffffffff8020f257:	e9 2b ff ff ff       	jmp    ffffffff8020f187 <_RME_Pgt_Crt+0x287>
ffffffff8020f25c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020f260 <_RME_Thd_Crt>:
{
ffffffff8020f260:	41 57                	push   %r15
ffffffff8020f262:	49 89 ff             	mov    %rdi,%r15
ffffffff8020f265:	41 56                	push   %r14
ffffffff8020f267:	49 89 d6             	mov    %rdx,%r14
ffffffff8020f26a:	41 55                	push   %r13
ffffffff8020f26c:	4d 89 cd             	mov    %r9,%r13
ffffffff8020f26f:	41 54                	push   %r12
ffffffff8020f271:	49 89 cc             	mov    %rcx,%r12
ffffffff8020f274:	55                   	push   %rbp
ffffffff8020f275:	4c 89 c5             	mov    %r8,%rbp
ffffffff8020f278:	53                   	push   %rbx
ffffffff8020f279:	48 89 f3             	mov    %rsi,%rbx
ffffffff8020f27c:	48 83 ec 08          	sub    $0x8,%rsp
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
ffffffff8020f280:	e8 ba c5 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020f285:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f289:	4c 39 68 48          	cmp    %r13,0x48(%rax)
ffffffff8020f28d:	0f 82 7d 04 00 00    	jb     ffffffff8020f710 <_RME_Thd_Crt+0x4b0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f293:	49 8b 57 28          	mov    0x28(%r15),%rdx
ffffffff8020f297:	f6 c7 80             	test   $0x80,%bh
ffffffff8020f29a:	0f 84 00 03 00 00    	je     ffffffff8020f5a0 <_RME_Thd_Crt+0x340>
ffffffff8020f2a0:	48 89 d8             	mov    %rbx,%rax
ffffffff8020f2a3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f2a7:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f2aa:	0f 83 c0 03 00 00    	jae    ffffffff8020f670 <_RME_Thd_Crt+0x410>
ffffffff8020f2b0:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff8020f2b4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f2b8:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f2bf:	ff 00 00 
ffffffff8020f2c2:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020f2c9:	00 00 00 
ffffffff8020f2cc:	48 01 c8             	add    %rcx,%rax
ffffffff8020f2cf:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020f2d2:	49 89 f1             	mov    %rsi,%r9
ffffffff8020f2d5:	49 21 f9             	and    %rdi,%r9
ffffffff8020f2d8:	4d 39 c1             	cmp    %r8,%r9
ffffffff8020f2db:	0f 84 ff 02 00 00    	je     ffffffff8020f5e0 <_RME_Thd_Crt+0x380>
ffffffff8020f2e1:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020f2e5:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020f2e9:	0f 85 a1 03 00 00    	jne    ffffffff8020f690 <_RME_Thd_Crt+0x430>
ffffffff8020f2ef:	48 8b 70 28          	mov    0x28(%rax),%rsi
ffffffff8020f2f3:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020f2f9:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8020f2fc:	0f 83 6e 03 00 00    	jae    ffffffff8020f670 <_RME_Thd_Crt+0x410>
ffffffff8020f302:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020f306:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8020f30a:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020f30d:	48 21 c7             	and    %rax,%rdi
ffffffff8020f310:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020f313:	0f 84 c7 02 00 00    	je     ffffffff8020f5e0 <_RME_Thd_Crt+0x380>
ffffffff8020f319:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f31d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f321:	0f 85 69 03 00 00    	jne    ffffffff8020f690 <_RME_Thd_Crt+0x430>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020f327:	41 f7 c6 00 80 00 00 	test   $0x8000,%r14d
ffffffff8020f32e:	0f 85 cc 02 00 00    	jne    ffffffff8020f600 <_RME_Thd_Crt+0x3a0>
ffffffff8020f334:	49 39 d6             	cmp    %rdx,%r14
ffffffff8020f337:	0f 83 33 03 00 00    	jae    ffffffff8020f670 <_RME_Thd_Crt+0x410>
ffffffff8020f33d:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f344:	ff 00 00 
ffffffff8020f347:	49 c1 e6 06          	shl    $0x6,%r14
ffffffff8020f34b:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020f352:	00 00 00 
ffffffff8020f355:	49 8d 04 0e          	lea    (%r14,%rcx,1),%rax
ffffffff8020f359:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020f35c:	48 21 f7             	and    %rsi,%rdi
ffffffff8020f35f:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020f362:	0f 84 78 02 00 00    	je     ffffffff8020f5e0 <_RME_Thd_Crt+0x380>
ffffffff8020f368:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020f36c:	48 83 fe 02          	cmp    $0x2,%rsi
ffffffff8020f370:	0f 85 1a 03 00 00    	jne    ffffffff8020f690 <_RME_Thd_Crt+0x430>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020f376:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020f37c:	0f 84 2e 03 00 00    	je     ffffffff8020f6b0 <_RME_Thd_Crt+0x450>
ffffffff8020f382:	48 89 ee             	mov    %rbp,%rsi
ffffffff8020f385:	48 c1 ee 10          	shr    $0x10,%rsi
ffffffff8020f389:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8020f38c:	0f 83 de 02 00 00    	jae    ffffffff8020f670 <_RME_Thd_Crt+0x410>
ffffffff8020f392:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f399:	00 00 00 
ffffffff8020f39c:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020f3a0:	48 8d 14 0e          	lea    (%rsi,%rcx,1),%rdx
ffffffff8020f3a4:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f3ab:	ff 00 00 
ffffffff8020f3ae:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020f3b1:	49 89 c8             	mov    %rcx,%r8
ffffffff8020f3b4:	49 21 f0             	and    %rsi,%r8
ffffffff8020f3b7:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020f3ba:	0f 84 20 02 00 00    	je     ffffffff8020f5e0 <_RME_Thd_Crt+0x380>
ffffffff8020f3c0:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f3c4:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020f3c8:	0f 85 c2 02 00 00    	jne    ffffffff8020f690 <_RME_Thd_Crt+0x430>
ffffffff8020f3ce:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020f3d2:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff8020f3d8:	48 39 cd             	cmp    %rcx,%rbp
ffffffff8020f3db:	0f 83 8f 02 00 00    	jae    ffffffff8020f670 <_RME_Thd_Crt+0x410>
ffffffff8020f3e1:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020f3e5:	48 03 6a 18          	add    0x18(%rdx),%rbp
ffffffff8020f3e9:	48 8b 55 00          	mov    0x0(%rbp),%rdx
ffffffff8020f3ed:	48 21 d6             	and    %rdx,%rsi
ffffffff8020f3f0:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f3f3:	0f 84 e7 01 00 00    	je     ffffffff8020f5e0 <_RME_Thd_Crt+0x380>
ffffffff8020f3f9:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020f3fd:	48 83 fa 05          	cmp    $0x5,%rdx
ffffffff8020f401:	0f 85 89 02 00 00    	jne    ffffffff8020f690 <_RME_Thd_Crt+0x430>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f407:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020f40b:	0f 84 d7 02 00 00    	je     ffffffff8020f6e8 <_RME_Thd_Crt+0x488>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff8020f411:	f6 45 10 02          	testb  $0x2,0x10(%rbp)
ffffffff8020f415:	0f 84 cd 02 00 00    	je     ffffffff8020f6e8 <_RME_Thd_Crt+0x488>
    if(Is_Hyp==0U)
ffffffff8020f41b:	48 83 7c 24 50 00    	cmpq   $0x0,0x50(%rsp)
ffffffff8020f421:	0f 85 f5 02 00 00    	jne    ffffffff8020f71c <_RME_Thd_Crt+0x4bc>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff8020f427:	f6 40 10 04          	testb  $0x4,0x10(%rax)
ffffffff8020f42b:	0f 84 b7 02 00 00    	je     ffffffff8020f6e8 <_RME_Thd_Crt+0x488>
ffffffff8020f431:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f435:	4c 8b 74 24 40       	mov    0x40(%rsp),%r14
ffffffff8020f43a:	49 01 d6             	add    %rdx,%r14
ffffffff8020f43d:	48 3b 54 24 40       	cmp    0x40(%rsp),%rdx
ffffffff8020f442:	48 0f 42 54 24 40    	cmovb  0x40(%rsp),%rdx
ffffffff8020f448:	49 39 d6             	cmp    %rdx,%r14
ffffffff8020f44b:	0f 82 97 02 00 00    	jb     ffffffff8020f6e8 <_RME_Thd_Crt+0x488>
ffffffff8020f451:	49 81 fe 9f fe ff ff 	cmp    $0xfffffffffffffe9f,%r14
ffffffff8020f458:	0f 87 8a 02 00 00    	ja     ffffffff8020f6e8 <_RME_Thd_Crt+0x488>
ffffffff8020f45e:	49 8d 96 5f 01 00 00 	lea    0x15f(%r14),%rdx
ffffffff8020f465:	48 39 50 30          	cmp    %rdx,0x30(%rax)
ffffffff8020f469:	0f 82 79 02 00 00    	jb     ffffffff8020f6e8 <_RME_Thd_Crt+0x488>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8020f46f:	4c 3b 63 28          	cmp    0x28(%rbx),%r12
ffffffff8020f473:	0f 83 f7 01 00 00    	jae    ffffffff8020f670 <_RME_Thd_Crt+0x410>
ffffffff8020f479:	49 c1 e4 06          	shl    $0x6,%r12
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020f47d:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
ffffffff8020f482:	4c 03 63 18          	add    0x18(%rbx),%r12
ffffffff8020f486:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f48d:	00 00 00 
ffffffff8020f490:	f0 49 0f b1 14 24    	lock cmpxchg %rdx,(%r12)
ffffffff8020f496:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020f499:	84 d2                	test   %dl,%dl
ffffffff8020f49b:	0f 84 5f 02 00 00    	je     ffffffff8020f700 <_RME_Thd_Crt+0x4a0>
	__asm__ __volatile__ (
ffffffff8020f4a1:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff8020f4a3:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8020f4a7:	89 c0                	mov    %eax,%eax
    if(_RME_Kot_Mark(Vaddr,Size)<0)
ffffffff8020f4a9:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff8020f4ae:	4c 89 f7             	mov    %r14,%rdi
ffffffff8020f4b1:	48 09 c2             	or     %rax,%rdx
ffffffff8020f4b4:	49 89 54 24 20       	mov    %rdx,0x20(%r12)
ffffffff8020f4b9:	e8 62 f5 ff ff       	call   ffffffff8020ea20 <_RME_Kot_Mark>
ffffffff8020f4be:	48 85 c0             	test   %rax,%rax
ffffffff8020f4c1:	0f 88 61 02 00 00    	js     ffffffff8020f728 <_RME_Thd_Crt+0x4c8>
    Thread->Sched.Slice=0U;
ffffffff8020f4c7:	66 0f 6f 05 d1 e4 00 	movdqa 0xe4d1(%rip),%xmm0        # ffffffff8021d9a0 <Table.1+0x120>
ffffffff8020f4ce:	00 
    Thread->Sched.TID=0U;
ffffffff8020f4cf:	49 c7 46 20 00 00 00 	movq   $0x0,0x20(%r14)
ffffffff8020f4d6:	00 
    Thread->Sched.Slice=0U;
ffffffff8020f4d7:	41 0f 11 46 30       	movups %xmm0,0x30(%r14)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8020f4dc:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff8020f4df:	85 c0                	test   %eax,%eax
ffffffff8020f4e1:	74 04                	je     ffffffff8020f4e7 <_RME_Thd_Crt+0x287>
ffffffff8020f4e3:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8020f4e7:	49 8d 46 10          	lea    0x10(%r14),%rax
    Thread->Sched.Prc=Prc_Root;
ffffffff8020f4eb:	49 89 6e 58          	mov    %rbp,0x58(%r14)
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8020f4ef:	66 48 0f 6e c0       	movq   %rax,%xmm0
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff8020f4f4:	49 8d 46 78          	lea    0x78(%r14),%rax
    Thread->Sched.Signal=0U;
ffffffff8020f4f8:	49 c7 46 50 00 00 00 	movq   $0x0,0x50(%r14)
ffffffff8020f4ff:	00 
    Head->Prev=Head;
ffffffff8020f500:	49 89 86 80 00 00 00 	mov    %rax,0x80(%r14)
    Head->Next=Head;
ffffffff8020f507:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
ffffffff8020f50b:	49 89 46 78          	mov    %rax,0x78(%r14)
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff8020f50f:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    Head->Next=Head;
ffffffff8020f514:	41 0f 11 46 10       	movups %xmm0,0x10(%r14)
    Thd_Crt->Head.Root_Ref=0U;
ffffffff8020f519:	66 0f 6f 05 8f e4 00 	movdqa 0xe48f(%rip),%xmm0        # ffffffff8021d9b0 <Table.1+0x130>
ffffffff8020f520:	00 
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff8020f521:	49 89 86 88 00 00 00 	mov    %rax,0x88(%r14)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff8020f528:	49 8d 86 b0 00 00 00 	lea    0xb0(%r14),%rax
ffffffff8020f52f:	49 89 86 90 00 00 00 	mov    %rax,0x90(%r14)
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff8020f536:	49 8d 86 98 00 00 00 	lea    0x98(%r14),%rax
    Head->Prev=Head;
ffffffff8020f53d:	49 89 86 a0 00 00 00 	mov    %rax,0xa0(%r14)
    Head->Next=Head;
ffffffff8020f544:	49 89 86 98 00 00 00 	mov    %rax,0x98(%r14)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020f54b:	b8 01 00 00 00       	mov    $0x1,%eax
    Thread->Sched.Prio_Max=Prio_Max;
ffffffff8020f550:	4d 89 6e 48          	mov    %r13,0x48(%r14)
    Thread->Sched.Sched_Ref=0U;
ffffffff8020f554:	49 c7 46 60 00 00 00 	movq   $0x0,0x60(%r14)
ffffffff8020f55b:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff8020f55c:	49 c7 46 70 00 00 00 	movq   $0x0,0x70(%r14)
ffffffff8020f563:	00 
    Thread->Sched.Local=RME_THD_FREE;
ffffffff8020f564:	49 c7 46 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%r14)
ffffffff8020f56b:	ff 
    Thread->Ctx.Invstk_Depth=0U;
ffffffff8020f56c:	49 c7 86 a8 00 00 00 	movq   $0x0,0xa8(%r14)
ffffffff8020f573:	00 00 00 00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff8020f577:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
    Thd_Crt->Head.Root_Ref=0U;
ffffffff8020f57c:	41 0f 11 44 24 08    	movups %xmm0,0x8(%r12)
ffffffff8020f582:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff8020f588:	48 b8 00 00 00 00 00 	movabs $0x6000000000000,%rax
ffffffff8020f58f:	00 06 00 
ffffffff8020f592:	49 89 04 24          	mov    %rax,(%r12)
    return 0;
ffffffff8020f596:	31 c0                	xor    %eax,%eax
ffffffff8020f598:	eb 4d                	jmp    ffffffff8020f5e7 <_RME_Thd_Crt+0x387>
ffffffff8020f59a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f5a0:	48 39 d3             	cmp    %rdx,%rbx
ffffffff8020f5a3:	0f 83 c7 00 00 00    	jae    ffffffff8020f670 <_RME_Thd_Crt+0x410>
ffffffff8020f5a9:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff8020f5ad:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020f5b1:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f5b8:	ff 00 00 
ffffffff8020f5bb:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f5c2:	00 00 00 
ffffffff8020f5c5:	48 01 cb             	add    %rcx,%rbx
ffffffff8020f5c8:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020f5cb:	48 21 c6             	and    %rax,%rsi
ffffffff8020f5ce:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f5d1:	0f 85 42 fd ff ff    	jne    ffffffff8020f319 <_RME_Thd_Crt+0xb9>
ffffffff8020f5d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020f5de:	00 00 
ffffffff8020f5e0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020f5e7:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020f5eb:	5b                   	pop    %rbx
ffffffff8020f5ec:	5d                   	pop    %rbp
ffffffff8020f5ed:	41 5c                	pop    %r12
ffffffff8020f5ef:	41 5d                	pop    %r13
ffffffff8020f5f1:	41 5e                	pop    %r14
ffffffff8020f5f3:	41 5f                	pop    %r15
ffffffff8020f5f5:	c3                   	ret
ffffffff8020f5f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020f5fd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020f600:	4c 89 f0             	mov    %r14,%rax
ffffffff8020f603:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f607:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f60a:	73 64                	jae    ffffffff8020f670 <_RME_Thd_Crt+0x410>
ffffffff8020f60c:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f613:	ff 00 00 
ffffffff8020f616:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f61a:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020f621:	00 00 00 
ffffffff8020f624:	48 01 c8             	add    %rcx,%rax
ffffffff8020f627:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020f62a:	49 89 f1             	mov    %rsi,%r9
ffffffff8020f62d:	49 21 f9             	and    %rdi,%r9
ffffffff8020f630:	4d 39 c1             	cmp    %r8,%r9
ffffffff8020f633:	74 ab                	je     ffffffff8020f5e0 <_RME_Thd_Crt+0x380>
ffffffff8020f635:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020f639:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020f63d:	75 51                	jne    ffffffff8020f690 <_RME_Thd_Crt+0x430>
ffffffff8020f63f:	48 8b 70 28          	mov    0x28(%rax),%rsi
ffffffff8020f643:	41 81 e6 ff 7f 00 00 	and    $0x7fff,%r14d
ffffffff8020f64a:	49 39 f6             	cmp    %rsi,%r14
ffffffff8020f64d:	73 21                	jae    ffffffff8020f670 <_RME_Thd_Crt+0x410>
ffffffff8020f64f:	49 c1 e6 06          	shl    $0x6,%r14
ffffffff8020f653:	4c 03 70 18          	add    0x18(%rax),%r14
ffffffff8020f657:	49 8b 36             	mov    (%r14),%rsi
ffffffff8020f65a:	4c 89 f0             	mov    %r14,%rax
ffffffff8020f65d:	48 21 f7             	and    %rsi,%rdi
ffffffff8020f660:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020f663:	0f 85 ff fc ff ff    	jne    ffffffff8020f368 <_RME_Thd_Crt+0x108>
ffffffff8020f669:	e9 72 ff ff ff       	jmp    ffffffff8020f5e0 <_RME_Thd_Crt+0x380>
ffffffff8020f66e:	66 90                	xchg   %ax,%ax
}
ffffffff8020f670:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f674:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020f67b:	5b                   	pop    %rbx
ffffffff8020f67c:	5d                   	pop    %rbp
ffffffff8020f67d:	41 5c                	pop    %r12
ffffffff8020f67f:	41 5d                	pop    %r13
ffffffff8020f681:	41 5e                	pop    %r14
ffffffff8020f683:	41 5f                	pop    %r15
ffffffff8020f685:	c3                   	ret
ffffffff8020f686:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020f68d:	00 00 00 
ffffffff8020f690:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f694:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020f69b:	5b                   	pop    %rbx
ffffffff8020f69c:	5d                   	pop    %rbp
ffffffff8020f69d:	41 5c                	pop    %r12
ffffffff8020f69f:	41 5d                	pop    %r13
ffffffff8020f6a1:	41 5e                	pop    %r14
ffffffff8020f6a3:	41 5f                	pop    %r15
ffffffff8020f6a5:	c3                   	ret
ffffffff8020f6a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020f6ad:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020f6b0:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020f6b3:	73 bb                	jae    ffffffff8020f670 <_RME_Thd_Crt+0x410>
ffffffff8020f6b5:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8020f6bc:	00 00 00 
ffffffff8020f6bf:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020f6c3:	48 01 cd             	add    %rcx,%rbp
ffffffff8020f6c6:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020f6cd:	ff 00 00 
ffffffff8020f6d0:	48 8b 55 00          	mov    0x0(%rbp),%rdx
ffffffff8020f6d4:	48 21 d1             	and    %rdx,%rcx
ffffffff8020f6d7:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020f6da:	0f 85 19 fd ff ff    	jne    ffffffff8020f3f9 <_RME_Thd_Crt+0x199>
ffffffff8020f6e0:	e9 fb fe ff ff       	jmp    ffffffff8020f5e0 <_RME_Thd_Crt+0x380>
ffffffff8020f6e5:	0f 1f 00             	nopl   (%rax)
}
ffffffff8020f6e8:	48 83 c4 08          	add    $0x8,%rsp
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f6ec:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff8020f6f3:	5b                   	pop    %rbx
ffffffff8020f6f4:	5d                   	pop    %rbp
ffffffff8020f6f5:	41 5c                	pop    %r12
ffffffff8020f6f7:	41 5d                	pop    %r13
ffffffff8020f6f9:	41 5e                	pop    %r14
ffffffff8020f6fb:	41 5f                	pop    %r15
ffffffff8020f6fd:	c3                   	ret
ffffffff8020f6fe:	66 90                	xchg   %ax,%ax
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020f700:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f707:	e9 db fe ff ff       	jmp    ffffffff8020f5e7 <_RME_Thd_Crt+0x387>
ffffffff8020f70c:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_PRIO;
ffffffff8020f710:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8020f717:	e9 cb fe ff ff       	jmp    ffffffff8020f5e7 <_RME_Thd_Crt+0x387>
        return RME_ERR_PTH_HADDR;
ffffffff8020f71c:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff8020f723:	e9 bf fe ff ff       	jmp    ffffffff8020f5e7 <_RME_Thd_Crt+0x387>
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff8020f728:	31 d2                	xor    %edx,%edx
        return RME_ERR_CPT_KOT;
ffffffff8020f72a:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff8020f731:	49 89 14 24          	mov    %rdx,(%r12)
        return RME_ERR_CPT_KOT;
ffffffff8020f735:	e9 ad fe ff ff       	jmp    ffffffff8020f5e7 <_RME_Thd_Crt+0x387>
ffffffff8020f73a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020f740 <_RME_Cpt_Boot_Init>:
{
ffffffff8020f740:	f3 0f 1e fa          	endbr64
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020f744:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
ffffffff8020f748:	48 3d ff 7f 00 00    	cmp    $0x7fff,%rax
ffffffff8020f74e:	0f 87 93 00 00 00    	ja     ffffffff8020f7e7 <_RME_Cpt_Boot_Init+0xa7>
{
ffffffff8020f754:	41 55                	push   %r13
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f756:	49 89 d5             	mov    %rdx,%r13
{
ffffffff8020f759:	41 54                	push   %r12
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f75b:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8020f75f:	49 89 d4             	mov    %rdx,%r12
{
ffffffff8020f762:	55                   	push   %rbp
ffffffff8020f763:	48 89 fd             	mov    %rdi,%rbp
ffffffff8020f766:	53                   	push   %rbx
ffffffff8020f767:	48 89 f3             	mov    %rsi,%rbx
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f76a:	4c 89 ee             	mov    %r13,%rsi
ffffffff8020f76d:	48 89 df             	mov    %rbx,%rdi
ffffffff8020f770:	e8 ab f2 ff ff       	call   ffffffff8020ea20 <_RME_Kot_Mark>
ffffffff8020f775:	48 85 c0             	test   %rax,%rax
ffffffff8020f778:	75 75                	jne    ffffffff8020f7ef <_RME_Cpt_Boot_Init+0xaf>
ffffffff8020f77a:	49 8d 54 1d 00       	lea    0x0(%r13,%rbx,1),%rdx
ffffffff8020f77f:	41 83 e5 40          	and    $0x40,%r13d
ffffffff8020f783:	48 89 d8             	mov    %rbx,%rax
ffffffff8020f786:	74 18                	je     ffffffff8020f7a0 <_RME_Cpt_Boot_Init+0x60>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f788:	48 8d 43 40          	lea    0x40(%rbx),%rax
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f78c:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f793:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f796:	74 20                	je     ffffffff8020f7b8 <_RME_Cpt_Boot_Init+0x78>
ffffffff8020f798:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f79f:	00 
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f7a0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f7a7:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f7ab:	48 c7 40 c0 00 00 00 	movq   $0x0,-0x40(%rax)
ffffffff8020f7b2:	00 
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f7b3:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f7b6:	75 e8                	jne    ffffffff8020f7a0 <_RME_Cpt_Boot_Init+0x60>
    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff8020f7b8:	48 89 e8             	mov    %rbp,%rax
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020f7bb:	66 0f 6f 05 fd e1 00 	movdqa 0xe1fd(%rip),%xmm0        # ffffffff8021d9c0 <Table.1+0x140>
ffffffff8020f7c2:	00 
    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff8020f7c3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f7c7:	48 01 d8             	add    %rbx,%rax
    Cpt->Head.Object=Vaddr;
ffffffff8020f7ca:	48 89 58 18          	mov    %rbx,0x18(%rax)
    Cpt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020f7ce:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020f7d5:	00 
    Cpt->Entry_Num=Entry_Num;
ffffffff8020f7d6:	4c 89 60 28          	mov    %r12,0x28(%rax)
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020f7da:	0f 11 00             	movups %xmm0,(%rax)
    return Cap_Cpt;
ffffffff8020f7dd:	48 89 e8             	mov    %rbp,%rax
}
ffffffff8020f7e0:	5b                   	pop    %rbx
ffffffff8020f7e1:	5d                   	pop    %rbp
ffffffff8020f7e2:	41 5c                	pop    %r12
ffffffff8020f7e4:	41 5d                	pop    %r13
ffffffff8020f7e6:	c3                   	ret
        return RME_ERR_CPT_RANGE;
ffffffff8020f7e7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020f7ee:	c3                   	ret
        return RME_ERR_CPT_KOT;
ffffffff8020f7ef:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020f7f6:	eb e8                	jmp    ffffffff8020f7e0 <_RME_Cpt_Boot_Init+0xa0>
ffffffff8020f7f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f7ff:	00 

ffffffff8020f800 <_RME_Cpt_Boot_Crt>:
{
ffffffff8020f800:	f3 0f 1e fa          	endbr64
ffffffff8020f804:	41 55                	push   %r13
ffffffff8020f806:	41 54                	push   %r12
ffffffff8020f808:	55                   	push   %rbp
ffffffff8020f809:	53                   	push   %rbx
ffffffff8020f80a:	48 89 d3             	mov    %rdx,%rbx
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020f80d:	49 8d 50 ff          	lea    -0x1(%r8),%rdx
ffffffff8020f811:	48 81 fa ff 7f 00 00 	cmp    $0x7fff,%rdx
ffffffff8020f818:	0f 87 b2 01 00 00    	ja     ffffffff8020f9d0 <_RME_Cpt_Boot_Crt+0x1d0>
ffffffff8020f81e:	48 89 f0             	mov    %rsi,%rax
ffffffff8020f821:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020f824:	4d 89 c4             	mov    %r8,%r12
    RME_CPT_GETCAP(Cpt,
ffffffff8020f827:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020f82b:	f6 c4 80             	test   $0x80,%ah
ffffffff8020f82e:	0f 84 54 01 00 00    	je     ffffffff8020f988 <_RME_Cpt_Boot_Crt+0x188>
ffffffff8020f834:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020f837:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f83b:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020f83e:	0f 83 8c 01 00 00    	jae    ffffffff8020f9d0 <_RME_Cpt_Boot_Crt+0x1d0>
ffffffff8020f844:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f84b:	ff 00 00 
ffffffff8020f84e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f852:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8020f856:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f85d:	00 00 00 
ffffffff8020f860:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020f863:	49 89 c8             	mov    %rcx,%r8
ffffffff8020f866:	49 21 f0             	and    %rsi,%r8
ffffffff8020f869:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020f86c:	0f 84 49 01 00 00    	je     ffffffff8020f9bb <_RME_Cpt_Boot_Crt+0x1bb>
ffffffff8020f872:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f876:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020f87a:	0f 85 60 01 00 00    	jne    ffffffff8020f9e0 <_RME_Cpt_Boot_Crt+0x1e0>
ffffffff8020f880:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020f884:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f889:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020f88c:	0f 83 3e 01 00 00    	jae    ffffffff8020f9d0 <_RME_Cpt_Boot_Crt+0x1d0>
ffffffff8020f892:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f896:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020f89a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f89d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f8a0:	48 21 c6             	and    %rax,%rsi
ffffffff8020f8a3:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f8a6:	0f 84 0f 01 00 00    	je     ffffffff8020f9bb <_RME_Cpt_Boot_Crt+0x1bb>
ffffffff8020f8ac:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f8b0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f8b4:	0f 85 26 01 00 00    	jne    ffffffff8020f9e0 <_RME_Cpt_Boot_Crt+0x1e0>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f8ba:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff8020f8be:	48 f7 d0             	not    %rax
ffffffff8020f8c1:	83 e0 01             	and    $0x1,%eax
ffffffff8020f8c4:	0f 85 26 01 00 00    	jne    ffffffff8020f9f0 <_RME_Cpt_Boot_Crt+0x1f0>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020f8ca:	48 3b 5a 28          	cmp    0x28(%rdx),%rbx
ffffffff8020f8ce:	0f 83 fc 00 00 00    	jae    ffffffff8020f9d0 <_RME_Cpt_Boot_Crt+0x1d0>
ffffffff8020f8d4:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020f8d8:	48 03 5a 18          	add    0x18(%rdx),%rbx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020f8dc:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f8e3:	00 00 00 
ffffffff8020f8e6:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff8020f8eb:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020f8ee:	84 d2                	test   %dl,%dl
ffffffff8020f8f0:	0f 84 0a 01 00 00    	je     ffffffff8020fa00 <_RME_Cpt_Boot_Crt+0x200>
	__asm__ __volatile__ (
ffffffff8020f8f6:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff8020f8f8:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8020f8fc:	89 c0                	mov    %eax,%eax
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f8fe:	4d 89 e5             	mov    %r12,%r13
ffffffff8020f901:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020f904:	48 09 c2             	or     %rax,%rdx
ffffffff8020f907:	49 c1 e5 06          	shl    $0x6,%r13
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020f90b:	48 89 53 20          	mov    %rdx,0x20(%rbx)
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f90f:	4c 89 ee             	mov    %r13,%rsi
ffffffff8020f912:	e8 09 f1 ff ff       	call   ffffffff8020ea20 <_RME_Kot_Mark>
ffffffff8020f917:	48 85 c0             	test   %rax,%rax
ffffffff8020f91a:	0f 85 ec 00 00 00    	jne    ffffffff8020fa0c <_RME_Cpt_Boot_Crt+0x20c>
ffffffff8020f920:	49 8d 4c 2d 00       	lea    0x0(%r13,%rbp,1),%rcx
ffffffff8020f925:	41 83 e5 40          	and    $0x40,%r13d
ffffffff8020f929:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020f92c:	74 12                	je     ffffffff8020f940 <_RME_Cpt_Boot_Crt+0x140>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f92e:	48 8d 55 40          	lea    0x40(%rbp),%rdx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f932:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8020f939:	00 
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f93a:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8020f93d:	74 19                	je     ffffffff8020f958 <_RME_Cpt_Boot_Crt+0x158>
ffffffff8020f93f:	90                   	nop
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f940:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f947:	48 83 ea 80          	sub    $0xffffffffffffff80,%rdx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f94b:	48 c7 42 c0 00 00 00 	movq   $0x0,-0x40(%rdx)
ffffffff8020f952:	00 
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f953:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8020f956:	75 e8                	jne    ffffffff8020f940 <_RME_Cpt_Boot_Crt+0x140>
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020f958:	48 be 00 00 00 00 00 	movabs $0x3000000000000,%rsi
ffffffff8020f95f:	00 03 00 
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020f962:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
ffffffff8020f969:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020f96a:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020f96e:	48 c7 43 10 ff 00 00 	movq   $0xff,0x10(%rbx)
ffffffff8020f975:	00 
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020f976:	4c 89 63 28          	mov    %r12,0x28(%rbx)
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020f97a:	48 89 33             	mov    %rsi,(%rbx)
}
ffffffff8020f97d:	5b                   	pop    %rbx
ffffffff8020f97e:	5d                   	pop    %rbp
ffffffff8020f97f:	41 5c                	pop    %r12
ffffffff8020f981:	41 5d                	pop    %r13
ffffffff8020f983:	c3                   	ret
ffffffff8020f984:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,
ffffffff8020f988:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020f98b:	73 43                	jae    ffffffff8020f9d0 <_RME_Cpt_Boot_Crt+0x1d0>
ffffffff8020f98d:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020f994:	ff 00 00 
ffffffff8020f997:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f99b:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8020f99f:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8020f9a6:	00 00 00 
ffffffff8020f9a9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f9ac:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f9af:	48 21 c1             	and    %rax,%rcx
ffffffff8020f9b2:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020f9b5:	0f 85 f1 fe ff ff    	jne    ffffffff8020f8ac <_RME_Cpt_Boot_Crt+0xac>
}
ffffffff8020f9bb:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,
ffffffff8020f9bc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020f9c3:	5d                   	pop    %rbp
ffffffff8020f9c4:	41 5c                	pop    %r12
ffffffff8020f9c6:	41 5d                	pop    %r13
ffffffff8020f9c8:	c3                   	ret
ffffffff8020f9c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020f9d0:	5b                   	pop    %rbx
        return RME_ERR_CPT_RANGE;
ffffffff8020f9d1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020f9d8:	5d                   	pop    %rbp
ffffffff8020f9d9:	41 5c                	pop    %r12
ffffffff8020f9db:	41 5d                	pop    %r13
ffffffff8020f9dd:	c3                   	ret
ffffffff8020f9de:	66 90                	xchg   %ax,%ax
ffffffff8020f9e0:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,
ffffffff8020f9e1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020f9e8:	5d                   	pop    %rbp
ffffffff8020f9e9:	41 5c                	pop    %r12
ffffffff8020f9eb:	41 5d                	pop    %r13
ffffffff8020f9ed:	c3                   	ret
ffffffff8020f9ee:	66 90                	xchg   %ax,%ax
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f9f0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f9f7:	eb 84                	jmp    ffffffff8020f97d <_RME_Cpt_Boot_Crt+0x17d>
ffffffff8020f9f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020fa00:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020fa07:	e9 71 ff ff ff       	jmp    ffffffff8020f97d <_RME_Cpt_Boot_Crt+0x17d>
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020fa0c:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        return RME_ERR_CPT_KOT;
ffffffff8020fa13:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020fa1a:	e9 5e ff ff ff       	jmp    ffffffff8020f97d <_RME_Cpt_Boot_Crt+0x17d>
ffffffff8020fa1f:	90                   	nop

ffffffff8020fa20 <_RME_Pgt_Boot_Crt>:
{
ffffffff8020fa20:	f3 0f 1e fa          	endbr64
ffffffff8020fa24:	41 57                	push   %r15
ffffffff8020fa26:	41 56                	push   %r14
ffffffff8020fa28:	41 55                	push   %r13
ffffffff8020fa2a:	41 54                	push   %r12
ffffffff8020fa2c:	55                   	push   %rbp
ffffffff8020fa2d:	48 89 d5             	mov    %rdx,%rbp
ffffffff8020fa30:	53                   	push   %rbx
ffffffff8020fa31:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020fa35:	4c 8b 6c 24 48       	mov    0x48(%rsp),%r13
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020fa3a:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff8020fa3f:	4c 01 ea             	add    %r13,%rdx
ffffffff8020fa42:	48 83 fa 40          	cmp    $0x40,%rdx
ffffffff8020fa46:	0f 87 34 02 00 00    	ja     ffffffff8020fc80 <_RME_Pgt_Boot_Crt+0x260>
ffffffff8020fa4c:	48 89 f0             	mov    %rsi,%rax
ffffffff8020fa4f:	49 89 cc             	mov    %rcx,%r12
ffffffff8020fa52:	4d 89 c7             	mov    %r8,%r15
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fa55:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020fa59:	4d 89 ce             	mov    %r9,%r14
ffffffff8020fa5c:	f6 c4 80             	test   $0x80,%ah
ffffffff8020fa5f:	0f 84 8b 01 00 00    	je     ffffffff8020fbf0 <_RME_Pgt_Boot_Crt+0x1d0>
ffffffff8020fa65:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020fa68:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020fa6c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020fa6f:	0f 83 bb 01 00 00    	jae    ffffffff8020fc30 <_RME_Pgt_Boot_Crt+0x210>
ffffffff8020fa75:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020fa7c:	ff 00 00 
ffffffff8020fa7f:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020fa83:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8020fa87:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020fa8e:	00 00 00 
ffffffff8020fa91:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020fa94:	49 89 c8             	mov    %rcx,%r8
ffffffff8020fa97:	49 21 f0             	and    %rsi,%r8
ffffffff8020fa9a:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020fa9d:	0f 84 80 01 00 00    	je     ffffffff8020fc23 <_RME_Pgt_Boot_Crt+0x203>
ffffffff8020faa3:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020faa7:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020faab:	0f 85 8f 01 00 00    	jne    ffffffff8020fc40 <_RME_Pgt_Boot_Crt+0x220>
ffffffff8020fab1:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020fab5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020faba:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020fabd:	0f 83 6d 01 00 00    	jae    ffffffff8020fc30 <_RME_Pgt_Boot_Crt+0x210>
ffffffff8020fac3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fac7:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020facb:	48 89 c3             	mov    %rax,%rbx
ffffffff8020face:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fad1:	48 21 c6             	and    %rax,%rsi
ffffffff8020fad4:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020fad7:	0f 84 46 01 00 00    	je     ffffffff8020fc23 <_RME_Pgt_Boot_Crt+0x203>
ffffffff8020fadd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fae1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fae5:	0f 85 55 01 00 00    	jne    ffffffff8020fc40 <_RME_Pgt_Boot_Crt+0x220>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020faeb:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020faef:	0f 84 5b 01 00 00    	je     ffffffff8020fc50 <_RME_Pgt_Boot_Crt+0x230>
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)!=0)
ffffffff8020faf5:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff8020fafa:	4d 89 e0             	mov    %r12,%r8
ffffffff8020fafd:	4c 89 e9             	mov    %r13,%rcx
ffffffff8020fb00:	4c 89 f6             	mov    %r14,%rsi
ffffffff8020fb03:	4c 89 ff             	mov    %r15,%rdi
ffffffff8020fb06:	e8 75 b6 00 00       	call   ffffffff8021b180 <__RME_Pgt_Check>
ffffffff8020fb0b:	48 85 c0             	test   %rax,%rax
ffffffff8020fb0e:	0f 85 6c 01 00 00    	jne    ffffffff8020fc80 <_RME_Pgt_Boot_Crt+0x260>
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020fb14:	b9 40 00 00 00       	mov    $0x40,%ecx
ffffffff8020fb19:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020fb20:	44 29 e9             	sub    %r13d,%ecx
ffffffff8020fb23:	2b 4c 24 40          	sub    0x40(%rsp),%ecx
ffffffff8020fb27:	48 d3 e8             	shr    %cl,%rax
ffffffff8020fb2a:	4c 21 f8             	and    %r15,%rax
ffffffff8020fb2d:	0f 85 4d 01 00 00    	jne    ffffffff8020fc80 <_RME_Pgt_Boot_Crt+0x260>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020fb33:	48 3b 6b 28          	cmp    0x28(%rbx),%rbp
ffffffff8020fb37:	0f 83 f3 00 00 00    	jae    ffffffff8020fc30 <_RME_Pgt_Boot_Crt+0x210>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020fb3d:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020fb44:	00 00 00 
ffffffff8020fb47:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020fb4b:	48 03 6b 18          	add    0x18(%rbx),%rbp
ffffffff8020fb4f:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff8020fb55:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020fb58:	84 d2                	test   %dl,%dl
ffffffff8020fb5a:	0f 84 00 01 00 00    	je     ffffffff8020fc60 <_RME_Pgt_Boot_Crt+0x240>
	__asm__ __volatile__ (
ffffffff8020fb60:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff8020fb62:	89 c0                	mov    %eax,%eax
ffffffff8020fb64:	48 c1 e2 20          	shl    $0x20,%rdx
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020fb68:	44 89 e9             	mov    %r13d,%ecx
ffffffff8020fb6b:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8020fb70:	48 09 c2             	or     %rax,%rdx
ffffffff8020fb73:	d3 e6                	shl    %cl,%esi
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020fb75:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020fb78:	48 89 55 20          	mov    %rdx,0x20(%rbp)
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020fb7c:	48 63 f6             	movslq %esi,%rsi
ffffffff8020fb7f:	48 c1 e6 03          	shl    $0x3,%rsi
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020fb83:	e8 98 ee ff ff       	call   ffffffff8020ea20 <_RME_Kot_Mark>
ffffffff8020fb88:	48 89 c3             	mov    %rax,%rbx
ffffffff8020fb8b:	48 85 c0             	test   %rax,%rax
ffffffff8020fb8e:	0f 85 d8 00 00 00    	jne    ffffffff8020fc6c <_RME_Pgt_Boot_Crt+0x24c>
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020fb94:	4c 89 65 18          	mov    %r12,0x18(%rbp)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fb98:	4c 8b 64 24 40       	mov    0x40(%rsp),%r12
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020fb9d:	4d 09 f7             	or     %r14,%r15
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020fba0:	48 89 ef             	mov    %rbp,%rdi
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020fba3:	66 0f 6f 05 25 de 00 	movdqa 0xde25(%rip),%xmm0        # ffffffff8021d9d0 <Table.1+0x150>
ffffffff8020fbaa:	00 
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020fbab:	4c 89 7d 30          	mov    %r15,0x30(%rbp)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fbaf:	49 c1 e4 20          	shl    $0x20,%r12
    Pgt_Crt->ASID=0U;
ffffffff8020fbb3:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff8020fbba:	00 
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fbbb:	4d 09 ec             	or     %r13,%r12
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020fbbe:	0f 11 45 08          	movups %xmm0,0x8(%rbp)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fbc2:	4c 89 65 28          	mov    %r12,0x28(%rbp)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020fbc6:	e8 05 b6 00 00       	call   ffffffff8021b1d0 <__RME_Pgt_Init>
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020fbcb:	48 b8 00 00 00 00 00 	movabs $0x4000000000000,%rax
ffffffff8020fbd2:	00 04 00 
ffffffff8020fbd5:	48 89 45 00          	mov    %rax,0x0(%rbp)
}
ffffffff8020fbd9:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020fbdd:	48 89 d8             	mov    %rbx,%rax
ffffffff8020fbe0:	5b                   	pop    %rbx
ffffffff8020fbe1:	5d                   	pop    %rbp
ffffffff8020fbe2:	41 5c                	pop    %r12
ffffffff8020fbe4:	41 5d                	pop    %r13
ffffffff8020fbe6:	41 5e                	pop    %r14
ffffffff8020fbe8:	41 5f                	pop    %r15
ffffffff8020fbea:	c3                   	ret
ffffffff8020fbeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fbf0:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020fbf3:	73 3b                	jae    ffffffff8020fc30 <_RME_Pgt_Boot_Crt+0x210>
ffffffff8020fbf5:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020fbfc:	ff 00 00 
ffffffff8020fbff:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fc03:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8020fc07:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020fc0e:	00 00 00 
ffffffff8020fc11:	48 89 c3             	mov    %rax,%rbx
ffffffff8020fc14:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fc17:	48 21 c2             	and    %rax,%rdx
ffffffff8020fc1a:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020fc1d:	0f 85 ba fe ff ff    	jne    ffffffff8020fadd <_RME_Pgt_Boot_Crt+0xbd>
ffffffff8020fc23:	48 c7 c3 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rbx
ffffffff8020fc2a:	eb ad                	jmp    ffffffff8020fbd9 <_RME_Pgt_Boot_Crt+0x1b9>
ffffffff8020fc2c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020fc30:	48 c7 c3 fd ff ff ff 	mov    $0xfffffffffffffffd,%rbx
ffffffff8020fc37:	eb a0                	jmp    ffffffff8020fbd9 <_RME_Pgt_Boot_Crt+0x1b9>
ffffffff8020fc39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020fc40:	48 c7 c3 fe ff ff ff 	mov    $0xfffffffffffffffe,%rbx
ffffffff8020fc47:	eb 90                	jmp    ffffffff8020fbd9 <_RME_Pgt_Boot_Crt+0x1b9>
ffffffff8020fc49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fc50:	48 c7 c3 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rbx
ffffffff8020fc57:	e9 7d ff ff ff       	jmp    ffffffff8020fbd9 <_RME_Pgt_Boot_Crt+0x1b9>
ffffffff8020fc5c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020fc60:	48 c7 c3 fb ff ff ff 	mov    $0xfffffffffffffffb,%rbx
ffffffff8020fc67:	e9 6d ff ff ff       	jmp    ffffffff8020fbd9 <_RME_Pgt_Boot_Crt+0x1b9>
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020fc6c:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8020fc73:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020fc74:	48 c7 c3 fc ff ff ff 	mov    $0xfffffffffffffffc,%rbx
ffffffff8020fc7b:	e9 59 ff ff ff       	jmp    ffffffff8020fbd9 <_RME_Pgt_Boot_Crt+0x1b9>
        return RME_ERR_PGT_HW;
ffffffff8020fc80:	48 c7 c3 99 ff ff ff 	mov    $0xffffffffffffff99,%rbx
ffffffff8020fc87:	e9 4d ff ff ff       	jmp    ffffffff8020fbd9 <_RME_Pgt_Boot_Crt+0x1b9>
ffffffff8020fc8c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020fc90 <_RME_Inv_Crt.isra.0>:
static rme_ret_t _RME_Inv_Crt(struct RME_Cap_Cpt* Cpt,
ffffffff8020fc90:	41 54                	push   %r12
ffffffff8020fc92:	48 89 d0             	mov    %rdx,%rax
ffffffff8020fc95:	55                   	push   %rbp
ffffffff8020fc96:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fc97:	80 e6 80             	and    $0x80,%dh
ffffffff8020fc9a:	0f 85 30 02 00 00    	jne    ffffffff8020fed0 <_RME_Inv_Crt.isra.0+0x240>
ffffffff8020fca0:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020fca3:	0f 83 17 02 00 00    	jae    ffffffff8020fec0 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fca9:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020fcb0:	ff 00 00 
ffffffff8020fcb3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fcb7:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020fcbe:	00 00 00 
ffffffff8020fcc1:	48 8d 14 38          	lea    (%rax,%rdi,1),%rdx
ffffffff8020fcc5:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020fcc8:	49 21 c2             	and    %rax,%r10
ffffffff8020fccb:	4d 39 da             	cmp    %r11,%r10
ffffffff8020fcce:	0f 84 67 02 00 00    	je     ffffffff8020ff3b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020fcd4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fcd8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fcdc:	0f 85 ee 02 00 00    	jne    ffffffff8020ffd0 <_RME_Inv_Crt.isra.0+0x340>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020fce2:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff8020fce9:	0f 85 61 02 00 00    	jne    ffffffff8020ff50 <_RME_Inv_Crt.isra.0+0x2c0>
ffffffff8020fcef:	49 39 f1             	cmp    %rsi,%r9
ffffffff8020fcf2:	0f 83 c8 01 00 00    	jae    ffffffff8020fec0 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fcf8:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020fcff:	00 00 00 
ffffffff8020fd02:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020fd06:	49 8d 1c 39          	lea    (%r9,%rdi,1),%rbx
ffffffff8020fd0a:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020fd11:	ff 00 00 
ffffffff8020fd14:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020fd17:	49 21 c1             	and    %rax,%r9
ffffffff8020fd1a:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020fd1d:	0f 84 18 02 00 00    	je     ffffffff8020ff3b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020fd23:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fd27:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8020fd2b:	0f 85 9f 02 00 00    	jne    ffffffff8020ffd0 <_RME_Inv_Crt.isra.0+0x340>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020fd31:	f6 c5 80             	test   $0x80,%ch
ffffffff8020fd34:	0f 84 a6 02 00 00    	je     ffffffff8020ffe0 <_RME_Inv_Crt.isra.0+0x350>
ffffffff8020fd3a:	48 89 c8             	mov    %rcx,%rax
ffffffff8020fd3d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fd41:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020fd44:	0f 83 76 01 00 00    	jae    ffffffff8020fec0 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fd4a:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020fd51:	00 00 00 
ffffffff8020fd54:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fd58:	48 01 f8             	add    %rdi,%rax
ffffffff8020fd5b:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020fd62:	ff 00 00 
ffffffff8020fd65:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020fd68:	49 89 f2             	mov    %rsi,%r10
ffffffff8020fd6b:	49 21 fa             	and    %rdi,%r10
ffffffff8020fd6e:	4d 39 ca             	cmp    %r9,%r10
ffffffff8020fd71:	0f 84 c4 01 00 00    	je     ffffffff8020ff3b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020fd77:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020fd7b:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020fd7f:	0f 85 4b 02 00 00    	jne    ffffffff8020ffd0 <_RME_Inv_Crt.isra.0+0x340>
ffffffff8020fd85:	48 8b 70 28          	mov    0x28(%rax),%rsi
ffffffff8020fd89:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff8020fd8f:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020fd92:	0f 83 28 01 00 00    	jae    ffffffff8020fec0 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fd98:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020fd9c:	48 03 48 18          	add    0x18(%rax),%rcx
ffffffff8020fda0:	48 8b 01             	mov    (%rcx),%rax
ffffffff8020fda3:	48 21 c7             	and    %rax,%rdi
ffffffff8020fda6:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020fda9:	0f 84 8c 01 00 00    	je     ffffffff8020ff3b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020fdaf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fdb3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fdb7:	0f 85 13 02 00 00    	jne    ffffffff8020ffd0 <_RME_Inv_Crt.isra.0+0x340>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fdbd:	f6 42 10 01          	testb  $0x1,0x10(%rdx)
ffffffff8020fdc1:	0f 84 59 02 00 00    	je     ffffffff80210020 <_RME_Inv_Crt.isra.0+0x390>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_INV);
ffffffff8020fdc7:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8020fdcb:	48 f7 d0             	not    %rax
ffffffff8020fdce:	83 e0 01             	and    $0x1,%eax
ffffffff8020fdd1:	0f 85 49 02 00 00    	jne    ffffffff80210020 <_RME_Inv_Crt.isra.0+0x390>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
ffffffff8020fdd7:	f6 41 10 08          	testb  $0x8,0x10(%rcx)
ffffffff8020fddb:	0f 84 3f 02 00 00    	je     ffffffff80210020 <_RME_Inv_Crt.isra.0+0x390>
ffffffff8020fde1:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020fde5:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
ffffffff8020fdea:	49 01 f4             	add    %rsi,%r12
ffffffff8020fded:	48 3b 74 24 20       	cmp    0x20(%rsp),%rsi
ffffffff8020fdf2:	48 0f 42 74 24 20    	cmovb  0x20(%rsp),%rsi
ffffffff8020fdf8:	49 39 f4             	cmp    %rsi,%r12
ffffffff8020fdfb:	0f 82 1f 02 00 00    	jb     ffffffff80210020 <_RME_Inv_Crt.isra.0+0x390>
ffffffff8020fe01:	49 83 fc b7          	cmp    $0xffffffffffffffb7,%r12
ffffffff8020fe05:	0f 87 15 02 00 00    	ja     ffffffff80210020 <_RME_Inv_Crt.isra.0+0x390>
ffffffff8020fe0b:	49 8d 74 24 47       	lea    0x47(%r12),%rsi
ffffffff8020fe10:	48 39 71 30          	cmp    %rsi,0x30(%rcx)
ffffffff8020fe14:	0f 82 06 02 00 00    	jb     ffffffff80210020 <_RME_Inv_Crt.isra.0+0x390>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff8020fe1a:	4c 3b 42 28          	cmp    0x28(%rdx),%r8
ffffffff8020fe1e:	0f 83 9c 00 00 00    	jae    ffffffff8020fec0 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fe24:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020fe28:	4c 03 42 18          	add    0x18(%rdx),%r8
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020fe2c:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020fe33:	00 00 00 
ffffffff8020fe36:	4c 89 c5             	mov    %r8,%rbp
ffffffff8020fe39:	f0 49 0f b1 10       	lock cmpxchg %rdx,(%r8)
ffffffff8020fe3e:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff8020fe41:	84 d2                	test   %dl,%dl
ffffffff8020fe43:	0f 84 e7 01 00 00    	je     ffffffff80210030 <_RME_Inv_Crt.isra.0+0x3a0>
	__asm__ __volatile__ (
ffffffff8020fe49:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff8020fe4b:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8020fe4f:	89 c0                	mov    %eax,%eax
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff8020fe51:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8020fe56:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020fe59:	48 09 c2             	or     %rax,%rdx
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff8020fe5c:	49 89 50 20          	mov    %rdx,0x20(%r8)
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff8020fe60:	e8 bb eb ff ff       	call   ffffffff8020ea20 <_RME_Kot_Mark>
ffffffff8020fe65:	48 85 c0             	test   %rax,%rax
ffffffff8020fe68:	0f 85 ce 01 00 00    	jne    ffffffff8021003c <_RME_Inv_Crt.isra.0+0x3ac>
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8020fe6e:	8b 13                	mov    (%rbx),%edx
ffffffff8020fe70:	85 d2                	test   %edx,%edx
ffffffff8020fe72:	74 04                	je     ffffffff8020fe78 <_RME_Inv_Crt.isra.0+0x1e8>
ffffffff8020fe74:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    Invocation->Prc=Prc_Root;
ffffffff8020fe78:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020fe7d:	ba 01 00 00 00       	mov    $0x1,%edx
    Invocation->Thd_Act=RME_NULL;
ffffffff8020fe82:	49 c7 44 24 18 00 00 	movq   $0x0,0x18(%r12)
ffffffff8020fe89:	00 00 
    Invocation->Is_Exc_Ret=0U;
ffffffff8020fe8b:	49 c7 44 24 30 00 00 	movq   $0x0,0x30(%r12)
ffffffff8020fe92:	00 00 
    Inv_Crt->Head.Root_Ref=0U;
ffffffff8020fe94:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
ffffffff8020fe9b:	00 
    Inv_Crt->Head.Object=Vaddr;
ffffffff8020fe9c:	4c 89 65 18          	mov    %r12,0x18(%rbp)
    Inv_Crt->Head.Flag=RME_INV_FLAG_ALL;
ffffffff8020fea0:	48 c7 45 10 03 00 00 	movq   $0x3,0x10(%rbp)
ffffffff8020fea7:	00 
ffffffff8020fea8:	f0 48 0f c1 53 08    	lock xadd %rdx,0x8(%rbx)
    RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),
ffffffff8020feae:	48 bb 00 00 00 00 00 	movabs $0x7000000000000,%rbx
ffffffff8020feb5:	00 07 00 
ffffffff8020feb8:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
    return 0;
ffffffff8020febc:	eb 09                	jmp    ffffffff8020fec7 <_RME_Inv_Crt.isra.0+0x237>
ffffffff8020febe:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fec0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020fec7:	5b                   	pop    %rbx
ffffffff8020fec8:	5d                   	pop    %rbp
ffffffff8020fec9:	41 5c                	pop    %r12
ffffffff8020fecb:	c3                   	ret
ffffffff8020fecc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fed0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fed3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020fed7:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020feda:	73 e4                	jae    ffffffff8020fec0 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fedc:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020fee3:	ff 00 00 
ffffffff8020fee6:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020feea:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020fef1:	00 00 00 
ffffffff8020fef4:	48 01 fa             	add    %rdi,%rdx
ffffffff8020fef7:	4c 8b 12             	mov    (%rdx),%r10
ffffffff8020fefa:	4c 89 d5             	mov    %r10,%rbp
ffffffff8020fefd:	4c 21 dd             	and    %r11,%rbp
ffffffff8020ff00:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020ff03:	74 36                	je     ffffffff8020ff3b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020ff05:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020ff09:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020ff0d:	0f 85 bd 00 00 00    	jne    ffffffff8020ffd0 <_RME_Inv_Crt.isra.0+0x340>
ffffffff8020ff13:	4c 8b 52 28          	mov    0x28(%rdx),%r10
ffffffff8020ff17:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ff1c:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020ff1f:	73 9f                	jae    ffffffff8020fec0 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020ff21:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ff25:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020ff29:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff2c:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ff2f:	49 21 c3             	and    %rax,%r11
ffffffff8020ff32:	49 39 db             	cmp    %rbx,%r11
ffffffff8020ff35:	0f 85 99 fd ff ff    	jne    ffffffff8020fcd4 <_RME_Inv_Crt.isra.0+0x44>
}
ffffffff8020ff3b:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ff3c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020ff43:	5d                   	pop    %rbp
ffffffff8020ff44:	41 5c                	pop    %r12
ffffffff8020ff46:	c3                   	ret
ffffffff8020ff47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020ff4e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020ff50:	4c 89 c8             	mov    %r9,%rax
ffffffff8020ff53:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ff57:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020ff5a:	0f 83 60 ff ff ff    	jae    ffffffff8020fec0 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020ff60:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020ff67:	ff 00 00 
ffffffff8020ff6a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ff6e:	48 bd 00 00 00 00 02 	movabs $0x200000000,%rbp
ffffffff8020ff75:	00 00 00 
ffffffff8020ff78:	48 01 f8             	add    %rdi,%rax
ffffffff8020ff7b:	4c 8b 10             	mov    (%rax),%r10
ffffffff8020ff7e:	4c 89 d3             	mov    %r10,%rbx
ffffffff8020ff81:	4c 21 db             	and    %r11,%rbx
ffffffff8020ff84:	48 39 eb             	cmp    %rbp,%rbx
ffffffff8020ff87:	74 b2                	je     ffffffff8020ff3b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020ff89:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020ff8d:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020ff91:	75 3d                	jne    ffffffff8020ffd0 <_RME_Inv_Crt.isra.0+0x340>
ffffffff8020ff93:	4c 8b 50 28          	mov    0x28(%rax),%r10
ffffffff8020ff97:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff8020ff9e:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020ffa1:	0f 83 19 ff ff ff    	jae    ffffffff8020fec0 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020ffa7:	48 8b 58 18          	mov    0x18(%rax),%rbx
ffffffff8020ffab:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020ffaf:	4c 01 cb             	add    %r9,%rbx
ffffffff8020ffb2:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020ffb5:	49 21 c3             	and    %rax,%r11
ffffffff8020ffb8:	49 39 eb             	cmp    %rbp,%r11
ffffffff8020ffbb:	0f 85 62 fd ff ff    	jne    ffffffff8020fd23 <_RME_Inv_Crt.isra.0+0x93>
ffffffff8020ffc1:	e9 75 ff ff ff       	jmp    ffffffff8020ff3b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020ffc6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020ffcd:	00 00 00 
}
ffffffff8020ffd0:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ffd1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020ffd8:	5d                   	pop    %rbp
ffffffff8020ffd9:	41 5c                	pop    %r12
ffffffff8020ffdb:	c3                   	ret
ffffffff8020ffdc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020ffe0:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020ffe3:	0f 83 d7 fe ff ff    	jae    ffffffff8020fec0 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020ffe9:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020fff0:	ff 00 00 
ffffffff8020fff3:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020fff7:	48 01 f9             	add    %rdi,%rcx
ffffffff8020fffa:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80210001:	00 00 00 
ffffffff80210004:	48 8b 01             	mov    (%rcx),%rax
ffffffff80210007:	48 21 c6             	and    %rax,%rsi
ffffffff8021000a:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8021000d:	0f 85 9c fd ff ff    	jne    ffffffff8020fdaf <_RME_Inv_Crt.isra.0+0x11f>
ffffffff80210013:	e9 23 ff ff ff       	jmp    ffffffff8020ff3b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff80210018:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021001f:	00 
}
ffffffff80210020:	5b                   	pop    %rbx
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80210021:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff80210028:	5d                   	pop    %rbp
ffffffff80210029:	41 5c                	pop    %r12
ffffffff8021002b:	c3                   	ret
ffffffff8021002c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff80210030:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80210037:	e9 8b fe ff ff       	jmp    ffffffff8020fec7 <_RME_Inv_Crt.isra.0+0x237>
        RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),0U);
ffffffff8021003c:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff80210043:	00 
        return RME_ERR_CPT_KOT;
ffffffff80210044:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8021004b:	e9 77 fe ff ff       	jmp    ffffffff8020fec7 <_RME_Inv_Crt.isra.0+0x237>

ffffffff80210050 <_RME_Kot_Erase>:
{
ffffffff80210050:	f3 0f 1e fa          	endbr64
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff80210054:	40 f6 c7 0f          	test   $0xf,%dil
ffffffff80210058:	0f 85 7f 01 00 00    	jne    ffffffff802101dd <_RME_Kot_Erase+0x18d>
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8021005e:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff80210065:	80 00 00 
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80210068:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
{
ffffffff8021006f:	55                   	push   %rbp
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff80210070:	48 01 f8             	add    %rdi,%rax
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80210073:	49 89 d3             	mov    %rdx,%r11
{
ffffffff80210076:	53                   	push   %rbx
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff80210077:	48 89 c1             	mov    %rax,%rcx
    Start=Start>>RME_WORD_ORDER;
ffffffff8021007a:	48 c1 e8 0a          	shr    $0xa,%rax
ffffffff8021007e:	49 89 c0             	mov    %rax,%r8
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff80210081:	48 c1 e9 04          	shr    $0x4,%rcx
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff80210085:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff8021008c:	7f 00 00 
ffffffff8021008f:	48 01 c6             	add    %rax,%rsi
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80210092:	49 d3 e3             	shl    %cl,%r11
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff80210095:	4e 8d 0c c5 00 00 00 	lea    0x0(,%r8,8),%r9
ffffffff8021009c:	00 
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8021009d:	48 8d 04 3e          	lea    (%rsi,%rdi,1),%rax
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff802100a1:	48 89 d7             	mov    %rdx,%rdi
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff802100a4:	48 ba 00 00 00 01 00 	movabs $0xffff800001000000,%rdx
ffffffff802100ab:	80 ff ff 
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802100ae:	48 89 c1             	mov    %rax,%rcx
    End=End>>RME_WORD_ORDER;
ffffffff802100b1:	48 c1 e8 0a          	shr    $0xa,%rax
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff802100b5:	49 8d 1c 11          	lea    (%r9,%rdx,1),%rbx
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802100b9:	48 c1 e9 04          	shr    $0x4,%rcx
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff802100bd:	f7 d1                	not    %ecx
ffffffff802100bf:	48 d3 ef             	shr    %cl,%rdi
    End=End>>RME_WORD_ORDER;
ffffffff802100c2:	48 89 c1             	mov    %rax,%rcx
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff802100c5:	48 8b 03             	mov    (%rbx),%rax
    if(Start==End)
ffffffff802100c8:	49 39 c8             	cmp    %rcx,%r8
ffffffff802100cb:	74 43                	je     ffffffff80210110 <_RME_Kot_Erase+0xc0>
        if((RME_KOT_VA_BASE[Start]&Mask_Begin)!=Mask_Begin)
ffffffff802100cd:	48 f7 d0             	not    %rax
ffffffff802100d0:	4c 85 d8             	test   %r11,%rax
ffffffff802100d3:	75 2e                	jne    ffffffff80210103 <_RME_Kot_Erase+0xb3>
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802100d5:	4d 8d 50 01          	lea    0x1(%r8),%r10
ffffffff802100d9:	48 8d 71 ff          	lea    -0x1(%rcx),%rsi
ffffffff802100dd:	49 39 f2             	cmp    %rsi,%r10
ffffffff802100e0:	73 4e                	jae    ffffffff80210130 <_RME_Kot_Erase+0xe0>
ffffffff802100e2:	49 8d 44 11 08       	lea    0x8(%r9,%rdx,1),%rax
ffffffff802100e7:	4c 89 d2             	mov    %r10,%rdx
ffffffff802100ea:	eb 11                	jmp    ffffffff802100fd <_RME_Kot_Erase+0xad>
ffffffff802100ec:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff802100f0:	48 83 c2 01          	add    $0x1,%rdx
ffffffff802100f4:	48 83 c0 08          	add    $0x8,%rax
ffffffff802100f8:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802100fb:	74 33                	je     ffffffff80210130 <_RME_Kot_Erase+0xe0>
            if(RME_KOT_VA_BASE[Count]!=RME_MASK_FULL)
ffffffff802100fd:	48 83 38 ff          	cmpq   $0xffffffffffffffff,(%rax)
ffffffff80210101:	74 ed                	je     ffffffff802100f0 <_RME_Kot_Erase+0xa0>
        return RME_ERR_KOT_BMP;
ffffffff80210103:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8021010a:	5b                   	pop    %rbx
ffffffff8021010b:	5d                   	pop    %rbp
ffffffff8021010c:	c3                   	ret
ffffffff8021010d:	0f 1f 00             	nopl   (%rax)
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff80210110:	4c 21 df             	and    %r11,%rdi
ffffffff80210113:	48 f7 d0             	not    %rax
ffffffff80210116:	48 85 f8             	test   %rdi,%rax
ffffffff80210119:	75 e8                	jne    ffffffff80210103 <_RME_Kot_Erase+0xb3>
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~(Mask_Begin&Mask_End));
ffffffff8021011b:	48 f7 d7             	not    %rdi
	__asm__ __volatile__("MOVQ %[Ptr],%[Old]; LOCK ANDQ %[Operand], %[Ptr]"
ffffffff8021011e:	48 8b 3b             	mov    (%rbx),%rdi
ffffffff80210121:	f0 48 21 3b          	lock and %rdi,(%rbx)
    return 0;
ffffffff80210125:	31 c0                	xor    %eax,%eax
}
ffffffff80210127:	5b                   	pop    %rbx
ffffffff80210128:	5d                   	pop    %rbp
ffffffff80210129:	c3                   	ret
ffffffff8021012a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if((RME_KOT_VA_BASE[End]&Mask_End)!=Mask_End)
ffffffff80210130:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80210137:	80 ff ff 
ffffffff8021013a:	48 8d 2c c8          	lea    (%rax,%rcx,8),%rbp
ffffffff8021013e:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80210142:	48 21 f8             	and    %rdi,%rax
ffffffff80210145:	48 39 f8             	cmp    %rdi,%rax
ffffffff80210148:	75 b9                	jne    ffffffff80210103 <_RME_Kot_Erase+0xb3>
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff8021014a:	49 f7 d3             	not    %r11
ffffffff8021014d:	4c 8b 1b             	mov    (%rbx),%r11
ffffffff80210150:	f0 4c 21 1b          	lock and %r11,(%rbx)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80210154:	49 39 f2             	cmp    %rsi,%r10
ffffffff80210157:	73 71                	jae    ffffffff802101ca <_RME_Kot_Erase+0x17a>
ffffffff80210159:	4c 29 c1             	sub    %r8,%rcx
ffffffff8021015c:	48 8d 71 fe          	lea    -0x2(%rcx),%rsi
ffffffff80210160:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80210164:	74 52                	je     ffffffff802101b8 <_RME_Kot_Erase+0x168>
ffffffff80210166:	48 89 f1             	mov    %rsi,%rcx
            RME_KOT_VA_BASE[Count]=0U;
ffffffff80210169:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8021016d:	49 bb 08 00 00 01 00 	movabs $0xffff800001000008,%r11
ffffffff80210174:	80 ff ff 
ffffffff80210177:	48 83 e1 fe          	and    $0xfffffffffffffffe,%rcx
ffffffff8021017b:	4b 8d 04 19          	lea    (%r9,%r11,1),%rax
ffffffff8021017f:	4a 8d 14 01          	lea    (%rcx,%r8,1),%rdx
ffffffff80210183:	49 8d 14 d3          	lea    (%r11,%rdx,8),%rdx
ffffffff80210187:	49 89 d0             	mov    %rdx,%r8
ffffffff8021018a:	49 29 c0             	sub    %rax,%r8
ffffffff8021018d:	41 83 e0 10          	and    $0x10,%r8d
ffffffff80210191:	74 0d                	je     ffffffff802101a0 <_RME_Kot_Erase+0x150>
ffffffff80210193:	0f 11 00             	movups %xmm0,(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80210196:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021019a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021019d:	74 11                	je     ffffffff802101b0 <_RME_Kot_Erase+0x160>
ffffffff8021019f:	90                   	nop
            RME_KOT_VA_BASE[Count]=0U;
ffffffff802101a0:	0f 11 00             	movups %xmm0,(%rax)
ffffffff802101a3:	48 83 c0 20          	add    $0x20,%rax
ffffffff802101a7:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802101ab:	48 39 c2             	cmp    %rax,%rdx
ffffffff802101ae:	75 f0                	jne    ffffffff802101a0 <_RME_Kot_Erase+0x150>
ffffffff802101b0:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802101b3:	74 15                	je     ffffffff802101ca <_RME_Kot_Erase+0x17a>
ffffffff802101b5:	49 01 ca             	add    %rcx,%r10
            RME_KOT_VA_BASE[Count]=0U;
ffffffff802101b8:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802101bf:	80 ff ff 
ffffffff802101c2:	4a c7 04 d0 00 00 00 	movq   $0x0,(%rax,%r10,8)
ffffffff802101c9:	00 
        RME_FETCH_AND(&(RME_KOT_VA_BASE[End]),~Mask_End);
ffffffff802101ca:	48 f7 d7             	not    %rdi
ffffffff802101cd:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
ffffffff802101d1:	f0 48 21 7d 00       	lock and %rdi,0x0(%rbp)
    return 0;
ffffffff802101d6:	31 c0                	xor    %eax,%eax
ffffffff802101d8:	e9 4a ff ff ff       	jmp    ffffffff80210127 <_RME_Kot_Erase+0xd7>
        return RME_ERR_KOT_BMP;
ffffffff802101dd:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff802101e4:	c3                   	ret
ffffffff802101e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff802101ec:	00 00 00 00 

ffffffff802101f0 <_RME_Kom_Boot_Crt>:
{
ffffffff802101f0:	f3 0f 1e fa          	endbr64
ffffffff802101f4:	49 89 fa             	mov    %rdi,%r10
ffffffff802101f7:	48 89 f0             	mov    %rsi,%rax
ffffffff802101fa:	53                   	push   %rbx
ffffffff802101fb:	48 89 cf             	mov    %rcx,%rdi
ffffffff802101fe:	48 89 d6             	mov    %rdx,%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210201:	49 8b 4a 28          	mov    0x28(%r10),%rcx
ffffffff80210205:	f6 c4 80             	test   $0x80,%ah
ffffffff80210208:	0f 85 da 00 00 00    	jne    ffffffff802102e8 <_RME_Kom_Boot_Crt+0xf8>
ffffffff8021020e:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210211:	0f 83 49 01 00 00    	jae    ffffffff80210360 <_RME_Kom_Boot_Crt+0x170>
ffffffff80210217:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8021021e:	ff 00 00 
ffffffff80210221:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210225:	49 03 42 18          	add    0x18(%r10),%rax
ffffffff80210229:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80210230:	00 00 00 
ffffffff80210233:	48 89 c2             	mov    %rax,%rdx
ffffffff80210236:	48 8b 00             	mov    (%rax),%rax
ffffffff80210239:	48 21 c1             	and    %rax,%rcx
ffffffff8021023c:	4c 39 d1             	cmp    %r10,%rcx
ffffffff8021023f:	0f 84 0b 01 00 00    	je     ffffffff80210350 <_RME_Kom_Boot_Crt+0x160>
ffffffff80210245:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210249:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021024d:	0f 85 1d 01 00 00    	jne    ffffffff80210370 <_RME_Kom_Boot_Crt+0x180>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80210253:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff80210257:	48 f7 d0             	not    %rax
ffffffff8021025a:	83 e0 01             	and    $0x1,%eax
ffffffff8021025d:	0f 85 1d 01 00 00    	jne    ffffffff80210380 <_RME_Kom_Boot_Crt+0x190>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kom,struct RME_Cap_Kom*,Kom_Crt);
ffffffff80210263:	48 3b 72 28          	cmp    0x28(%rdx),%rsi
ffffffff80210267:	0f 83 f3 00 00 00    	jae    ffffffff80210360 <_RME_Kom_Boot_Crt+0x170>
ffffffff8021026d:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
ffffffff80210271:	48 c1 e6 06          	shl    $0x6,%rsi
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80210275:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021027c:	00 00 00 
ffffffff8021027f:	48 01 f1             	add    %rsi,%rcx
ffffffff80210282:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80210287:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff8021028a:	84 d2                	test   %dl,%dl
ffffffff8021028c:	0f 84 fe 00 00 00    	je     ffffffff80210390 <_RME_Kom_Boot_Crt+0x1a0>
	__asm__ __volatile__ (
ffffffff80210292:	0f 31                	rdtsc
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff80210294:	49 83 c0 01          	add    $0x1,%r8
	return ((unsigned long long)hi << 32) | lo;
ffffffff80210298:	89 c0                	mov    %eax,%eax
ffffffff8021029a:	48 c1 e2 20          	shl    $0x20,%rdx
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff8021029e:	48 83 c7 3f          	add    $0x3f,%rdi
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff802102a2:	49 83 e0 c0          	and    $0xffffffffffffffc0,%r8
ffffffff802102a6:	48 09 c2             	or     %rax,%rdx
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff802102a9:	48 83 e7 c0          	and    $0xffffffffffffffc0,%rdi
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff802102ad:	48 b8 00 00 00 00 00 	movabs $0x2000000000000,%rax
ffffffff802102b4:	00 02 00 
    Kom_Crt->End=Kom_End-1U;
ffffffff802102b7:	49 83 e8 01          	sub    $0x1,%r8
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff802102bb:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    Kom_Crt->Head.Root_Ref=1U;
ffffffff802102bf:	48 c7 41 08 01 00 00 	movq   $0x1,0x8(%rcx)
ffffffff802102c6:	00 
    Kom_Crt->Head.Object=0U;
ffffffff802102c7:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
ffffffff802102ce:	00 
    Kom_Crt->Head.Flag=Flag;
ffffffff802102cf:	4c 89 49 10          	mov    %r9,0x10(%rcx)
    Kom_Crt->Begin=Kom_Begin;
ffffffff802102d3:	48 89 79 28          	mov    %rdi,0x28(%rcx)
    Kom_Crt->End=Kom_End-1U;
ffffffff802102d7:	4c 89 41 30          	mov    %r8,0x30(%rcx)
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff802102db:	48 89 01             	mov    %rax,(%rcx)
    return 0;
ffffffff802102de:	31 c0                	xor    %eax,%eax
}
ffffffff802102e0:	5b                   	pop    %rbx
ffffffff802102e1:	c3                   	ret
ffffffff802102e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802102e8:	48 89 c2             	mov    %rax,%rdx
ffffffff802102eb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802102ef:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802102f2:	73 6c                	jae    ffffffff80210360 <_RME_Kom_Boot_Crt+0x170>
ffffffff802102f4:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff802102fb:	00 00 00 
ffffffff802102fe:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210302:	49 03 52 18          	add    0x18(%r10),%rdx
ffffffff80210306:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8021030d:	ff 00 00 
ffffffff80210310:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80210313:	48 89 cb             	mov    %rcx,%rbx
ffffffff80210316:	4c 21 d3             	and    %r10,%rbx
ffffffff80210319:	4c 39 db             	cmp    %r11,%rbx
ffffffff8021031c:	74 32                	je     ffffffff80210350 <_RME_Kom_Boot_Crt+0x160>
ffffffff8021031e:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80210322:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80210326:	75 48                	jne    ffffffff80210370 <_RME_Kom_Boot_Crt+0x180>
ffffffff80210328:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8021032c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210331:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210334:	73 2a                	jae    ffffffff80210360 <_RME_Kom_Boot_Crt+0x170>
ffffffff80210336:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021033a:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021033e:	48 89 c2             	mov    %rax,%rdx
ffffffff80210341:	48 8b 00             	mov    (%rax),%rax
ffffffff80210344:	49 21 c2             	and    %rax,%r10
ffffffff80210347:	4d 39 da             	cmp    %r11,%r10
ffffffff8021034a:	0f 85 f5 fe ff ff    	jne    ffffffff80210245 <_RME_Kom_Boot_Crt+0x55>
ffffffff80210350:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff80210357:	5b                   	pop    %rbx
ffffffff80210358:	c3                   	ret
ffffffff80210359:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210360:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff80210367:	5b                   	pop    %rbx
ffffffff80210368:	c3                   	ret
ffffffff80210369:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210370:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff80210377:	5b                   	pop    %rbx
ffffffff80210378:	c3                   	ret
ffffffff80210379:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80210380:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff80210387:	5b                   	pop    %rbx
ffffffff80210388:	c3                   	ret
ffffffff80210389:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff80210390:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff80210397:	5b                   	pop    %rbx
ffffffff80210398:	c3                   	ret
ffffffff80210399:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff802103a0 <_RME_CPU_Local_Init>:
{
ffffffff802103a0:	f3 0f 1e fa          	endbr64
    Local->CPUID=CPUID;
ffffffff802103a4:	48 89 37             	mov    %rsi,(%rdi)
    Local->Thd_Cur=RME_NULL;
ffffffff802103a7:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff802103ab:	48 8d 47 28          	lea    0x28(%rdi),%rax
ffffffff802103af:	48 8d 97 28 04 00 00 	lea    0x428(%rdi),%rdx
    Local->Sig_Vct=RME_NULL;
ffffffff802103b6:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
ffffffff802103bd:	00 
    Local->Thd_Cur=RME_NULL;
ffffffff802103be:	0f 11 47 08          	movups %xmm0,0x8(%rdi)
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff802103c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    Head->Next=Head;
ffffffff802103c8:	66 48 0f 6e c0       	movq   %rax,%xmm0
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff802103cd:	48 83 c0 10          	add    $0x10,%rax
    Head->Next=Head;
ffffffff802103d1:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
ffffffff802103d5:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff802103d9:	48 39 d0             	cmp    %rdx,%rax
ffffffff802103dc:	75 ea                	jne    ffffffff802103c8 <_RME_CPU_Local_Init+0x28>
ffffffff802103de:	48 c7 47 20 00 00 00 	movq   $0x0,0x20(%rdi)
ffffffff802103e5:	00 
}
ffffffff802103e6:	c3                   	ret
ffffffff802103e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff802103ee:	00 00 

ffffffff802103f0 <_RME_Thd_Pgt>:
{
ffffffff802103f0:	f3 0f 1e fa          	endbr64
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff802103f4:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff802103fb:	48 85 c0             	test   %rax,%rax
ffffffff802103fe:	74 18                	je     ffffffff80210418 <_RME_Thd_Pgt+0x28>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210400:	48 8d 97 98 00 00 00 	lea    0x98(%rdi),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210407:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021040a:	74 0c                	je     ffffffff80210418 <_RME_Thd_Pgt+0x28>
        return Inv_Top->Prc->Pgt;
ffffffff8021040c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210410:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff80210414:	c3                   	ret
ffffffff80210415:	0f 1f 00             	nopl   (%rax)
        return Thd->Sched.Prc->Pgt;
ffffffff80210418:	48 8b 47 58          	mov    0x58(%rdi),%rax
ffffffff8021041c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80210420:	c3                   	ret
ffffffff80210421:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80210428:	00 00 00 00 
ffffffff8021042c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80210430 <_RME_Prc_Boot_Crt>:
{
ffffffff80210430:	f3 0f 1e fa          	endbr64
ffffffff80210434:	48 89 f0             	mov    %rsi,%rax
ffffffff80210437:	55                   	push   %rbp
ffffffff80210438:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021043b:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8021043c:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
ffffffff80210440:	f6 c4 80             	test   $0x80,%ah
ffffffff80210443:	0f 85 ef 01 00 00    	jne    ffffffff80210638 <_RME_Prc_Boot_Crt+0x208>
ffffffff80210449:	4c 39 c8             	cmp    %r9,%rax
ffffffff8021044c:	0f 83 d6 01 00 00    	jae    ffffffff80210628 <_RME_Prc_Boot_Crt+0x1f8>
ffffffff80210452:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80210456:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021045a:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff80210461:	ff 00 00 
ffffffff80210464:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8021046b:	00 00 00 
ffffffff8021046e:	48 8d 14 38          	lea    (%rax,%rdi,1),%rdx
ffffffff80210472:	48 8b 02             	mov    (%rdx),%rax
ffffffff80210475:	49 21 c2             	and    %rax,%r10
ffffffff80210478:	4d 39 da             	cmp    %r11,%r10
ffffffff8021047b:	0f 84 b4 02 00 00    	je     ffffffff80210735 <_RME_Prc_Boot_Crt+0x305>
ffffffff80210481:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210485:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210489:	0f 85 29 02 00 00    	jne    ffffffff802106b8 <_RME_Prc_Boot_Crt+0x288>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021048f:	f6 c5 80             	test   $0x80,%ch
ffffffff80210492:	0f 85 30 02 00 00    	jne    ffffffff802106c8 <_RME_Prc_Boot_Crt+0x298>
ffffffff80210498:	4c 39 c9             	cmp    %r9,%rcx
ffffffff8021049b:	0f 83 87 01 00 00    	jae    ffffffff80210628 <_RME_Prc_Boot_Crt+0x1f8>
ffffffff802104a1:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff802104a8:	ff 00 00 
ffffffff802104ab:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802104af:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff802104b6:	00 00 00 
ffffffff802104b9:	48 01 f9             	add    %rdi,%rcx
ffffffff802104bc:	48 8b 01             	mov    (%rcx),%rax
ffffffff802104bf:	49 21 c2             	and    %rax,%r10
ffffffff802104c2:	4d 39 da             	cmp    %r11,%r10
ffffffff802104c5:	0f 84 6a 02 00 00    	je     ffffffff80210735 <_RME_Prc_Boot_Crt+0x305>
ffffffff802104cb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802104cf:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802104d3:	0f 85 df 01 00 00    	jne    ffffffff802106b8 <_RME_Prc_Boot_Crt+0x288>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff802104d9:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff802104e0:	0f 84 5a 02 00 00    	je     ffffffff80210740 <_RME_Prc_Boot_Crt+0x310>
ffffffff802104e6:	4c 89 c0             	mov    %r8,%rax
ffffffff802104e9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802104ed:	4c 39 c8             	cmp    %r9,%rax
ffffffff802104f0:	0f 83 32 01 00 00    	jae    ffffffff80210628 <_RME_Prc_Boot_Crt+0x1f8>
ffffffff802104f6:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff802104fd:	ff 00 00 
ffffffff80210500:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210504:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8021050b:	00 00 00 
ffffffff8021050e:	48 01 f8             	add    %rdi,%rax
ffffffff80210511:	48 8b 38             	mov    (%rax),%rdi
ffffffff80210514:	49 89 fb             	mov    %rdi,%r11
ffffffff80210517:	4d 21 cb             	and    %r9,%r11
ffffffff8021051a:	4d 39 d3             	cmp    %r10,%r11
ffffffff8021051d:	0f 84 12 02 00 00    	je     ffffffff80210735 <_RME_Prc_Boot_Crt+0x305>
ffffffff80210523:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80210527:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021052b:	0f 85 87 01 00 00    	jne    ffffffff802106b8 <_RME_Prc_Boot_Crt+0x288>
ffffffff80210531:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff80210535:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8021053c:	49 39 f8             	cmp    %rdi,%r8
ffffffff8021053f:	0f 83 e3 00 00 00    	jae    ffffffff80210628 <_RME_Prc_Boot_Crt+0x1f8>
ffffffff80210545:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff80210549:	4c 03 40 18          	add    0x18(%rax),%r8
ffffffff8021054d:	49 8b 00             	mov    (%r8),%rax
ffffffff80210550:	49 21 c1             	and    %rax,%r9
ffffffff80210553:	4d 39 d1             	cmp    %r10,%r9
ffffffff80210556:	0f 84 d9 01 00 00    	je     ffffffff80210735 <_RME_Prc_Boot_Crt+0x305>
ffffffff8021055c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210560:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210564:	0f 85 4e 01 00 00    	jne    ffffffff802106b8 <_RME_Prc_Boot_Crt+0x288>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8021056a:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff8021056e:	48 f7 d0             	not    %rax
ffffffff80210571:	83 e0 01             	and    $0x1,%eax
ffffffff80210574:	0f 85 fe 01 00 00    	jne    ffffffff80210778 <_RME_Prc_Boot_Crt+0x348>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff8021057a:	f6 41 10 40          	testb  $0x40,0x10(%rcx)
ffffffff8021057e:	0f 84 f4 01 00 00    	je     ffffffff80210778 <_RME_Prc_Boot_Crt+0x348>
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff80210584:	41 f6 40 10 40       	testb  $0x40,0x10(%r8)
ffffffff80210589:	0f 84 e9 01 00 00    	je     ffffffff80210778 <_RME_Prc_Boot_Crt+0x348>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff8021058f:	48 3b 72 28          	cmp    0x28(%rdx),%rsi
ffffffff80210593:	0f 83 8f 00 00 00    	jae    ffffffff80210628 <_RME_Prc_Boot_Crt+0x1f8>
ffffffff80210599:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021059d:	48 03 72 18          	add    0x18(%rdx),%rsi
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802105a1:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802105a8:	00 00 00 
ffffffff802105ab:	f0 48 0f b1 16       	lock cmpxchg %rdx,(%rsi)
ffffffff802105b0:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff802105b3:	84 d2                	test   %dl,%dl
ffffffff802105b5:	0f 84 cd 01 00 00    	je     ffffffff80210788 <_RME_Prc_Boot_Crt+0x358>
	__asm__ __volatile__ (
ffffffff802105bb:	0f 31                	rdtsc
    Prc_Crt->Head.Root_Ref=1U;
ffffffff802105bd:	66 0f 6f 05 1b d4 00 	movdqa 0xd41b(%rip),%xmm0        # ffffffff8021d9e0 <Table.1+0x160>
ffffffff802105c4:	00 
	return ((unsigned long long)hi << 32) | lo;
ffffffff802105c5:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff802105c9:	89 c0                	mov    %eax,%eax
    Prc_Crt->Head.Object=0U;
ffffffff802105cb:	48 c7 46 18 00 00 00 	movq   $0x0,0x18(%rsi)
ffffffff802105d2:	00 
ffffffff802105d3:	48 09 c2             	or     %rax,%rdx
ffffffff802105d6:	48 89 56 20          	mov    %rdx,0x20(%rsi)
    Prc_Crt->Head.Root_Ref=1U;
ffffffff802105da:	0f 11 46 08          	movups %xmm0,0x8(%rsi)
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff802105de:	8b 11                	mov    (%rcx),%edx
ffffffff802105e0:	85 d2                	test   %edx,%edx
ffffffff802105e2:	74 04                	je     ffffffff802105e8 <_RME_Prc_Boot_Crt+0x1b8>
ffffffff802105e4:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff802105e8:	41 8b 00             	mov    (%r8),%eax
ffffffff802105eb:	85 c0                	test   %eax,%eax
ffffffff802105ed:	74 04                	je     ffffffff802105f3 <_RME_Prc_Boot_Crt+0x1c3>
ffffffff802105ef:	4d 8b 40 08          	mov    0x8(%r8),%r8
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802105f3:	b8 01 00 00 00       	mov    $0x1,%eax
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff802105f8:	48 89 4e 28          	mov    %rcx,0x28(%rsi)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff802105fc:	4c 89 46 30          	mov    %r8,0x30(%rsi)
ffffffff80210600:	48 89 c2             	mov    %rax,%rdx
ffffffff80210603:	f0 48 0f c1 51 08    	lock xadd %rdx,0x8(%rcx)
ffffffff80210609:	f0 49 0f c1 40 08    	lock xadd %rax,0x8(%r8)
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff8021060f:	48 b8 00 00 00 00 00 	movabs $0x5000000000000,%rax
ffffffff80210616:	00 05 00 
ffffffff80210619:	48 89 06             	mov    %rax,(%rsi)
    return 0;
ffffffff8021061c:	31 c0                	xor    %eax,%eax
}
ffffffff8021061e:	5b                   	pop    %rbx
ffffffff8021061f:	5d                   	pop    %rbp
ffffffff80210620:	c3                   	ret
ffffffff80210621:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80210628:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8021062f:	5b                   	pop    %rbx
ffffffff80210630:	5d                   	pop    %rbp
ffffffff80210631:	c3                   	ret
ffffffff80210632:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80210638:	48 89 c2             	mov    %rax,%rdx
ffffffff8021063b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021063f:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80210642:	73 e4                	jae    ffffffff80210628 <_RME_Prc_Boot_Crt+0x1f8>
ffffffff80210644:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80210648:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021064c:	48 bb 00 00 00 00 ff 	movabs $0xffff00000000,%rbx
ffffffff80210653:	ff 00 00 
ffffffff80210656:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8021065d:	00 00 00 
ffffffff80210660:	48 01 fa             	add    %rdi,%rdx
ffffffff80210663:	4c 8b 12             	mov    (%rdx),%r10
ffffffff80210666:	4c 89 d5             	mov    %r10,%rbp
ffffffff80210669:	48 21 dd             	and    %rbx,%rbp
ffffffff8021066c:	4c 39 dd             	cmp    %r11,%rbp
ffffffff8021066f:	0f 84 c0 00 00 00    	je     ffffffff80210735 <_RME_Prc_Boot_Crt+0x305>
ffffffff80210675:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80210679:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8021067d:	75 39                	jne    ffffffff802106b8 <_RME_Prc_Boot_Crt+0x288>
ffffffff8021067f:	4c 8b 52 28          	mov    0x28(%rdx),%r10
ffffffff80210683:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210688:	4c 39 d0             	cmp    %r10,%rax
ffffffff8021068b:	73 9b                	jae    ffffffff80210628 <_RME_Prc_Boot_Crt+0x1f8>
ffffffff8021068d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210691:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80210695:	4c 8b 10             	mov    (%rax),%r10
ffffffff80210698:	48 89 c2             	mov    %rax,%rdx
ffffffff8021069b:	48 89 d8             	mov    %rbx,%rax
ffffffff8021069e:	4c 21 d0             	and    %r10,%rax
ffffffff802106a1:	4c 39 d8             	cmp    %r11,%rax
ffffffff802106a4:	0f 84 8b 00 00 00    	je     ffffffff80210735 <_RME_Prc_Boot_Crt+0x305>
ffffffff802106aa:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff802106ae:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff802106b2:	0f 84 d7 fd ff ff    	je     ffffffff8021048f <_RME_Prc_Boot_Crt+0x5f>
ffffffff802106b8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff802106bf:	5b                   	pop    %rbx
ffffffff802106c0:	5d                   	pop    %rbp
ffffffff802106c1:	c3                   	ret
ffffffff802106c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802106c8:	48 89 c8             	mov    %rcx,%rax
ffffffff802106cb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802106cf:	4c 39 c8             	cmp    %r9,%rax
ffffffff802106d2:	0f 83 50 ff ff ff    	jae    ffffffff80210628 <_RME_Prc_Boot_Crt+0x1f8>
ffffffff802106d8:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff802106df:	ff 00 00 
ffffffff802106e2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802106e6:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff802106ed:	00 00 00 
ffffffff802106f0:	48 01 f8             	add    %rdi,%rax
ffffffff802106f3:	4c 8b 10             	mov    (%rax),%r10
ffffffff802106f6:	4c 89 d5             	mov    %r10,%rbp
ffffffff802106f9:	4c 21 dd             	and    %r11,%rbp
ffffffff802106fc:	48 39 dd             	cmp    %rbx,%rbp
ffffffff802106ff:	74 34                	je     ffffffff80210735 <_RME_Prc_Boot_Crt+0x305>
ffffffff80210701:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80210705:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff80210709:	75 ad                	jne    ffffffff802106b8 <_RME_Prc_Boot_Crt+0x288>
ffffffff8021070b:	4c 8b 50 28          	mov    0x28(%rax),%r10
ffffffff8021070f:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff80210715:	4c 39 d1             	cmp    %r10,%rcx
ffffffff80210718:	0f 83 0a ff ff ff    	jae    ffffffff80210628 <_RME_Prc_Boot_Crt+0x1f8>
ffffffff8021071e:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80210722:	48 03 48 18          	add    0x18(%rax),%rcx
ffffffff80210726:	48 8b 01             	mov    (%rcx),%rax
ffffffff80210729:	49 21 c3             	and    %rax,%r11
ffffffff8021072c:	49 39 db             	cmp    %rbx,%r11
ffffffff8021072f:	0f 85 96 fd ff ff    	jne    ffffffff802104cb <_RME_Prc_Boot_Crt+0x9b>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80210735:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8021073c:	5b                   	pop    %rbx
ffffffff8021073d:	5d                   	pop    %rbp
ffffffff8021073e:	c3                   	ret
ffffffff8021073f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80210740:	4d 39 c8             	cmp    %r9,%r8
ffffffff80210743:	0f 83 df fe ff ff    	jae    ffffffff80210628 <_RME_Prc_Boot_Crt+0x1f8>
ffffffff80210749:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80210750:	00 00 00 
ffffffff80210753:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff80210757:	49 01 f8             	add    %rdi,%r8
ffffffff8021075a:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80210761:	ff 00 00 
ffffffff80210764:	49 8b 00             	mov    (%r8),%rax
ffffffff80210767:	48 21 c7             	and    %rax,%rdi
ffffffff8021076a:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8021076d:	0f 85 e9 fd ff ff    	jne    ffffffff8021055c <_RME_Prc_Boot_Crt+0x12c>
ffffffff80210773:	eb c0                	jmp    ffffffff80210735 <_RME_Prc_Boot_Crt+0x305>
ffffffff80210775:	0f 1f 00             	nopl   (%rax)
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80210778:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021077f:	e9 ab fe ff ff       	jmp    ffffffff8021062f <_RME_Prc_Boot_Crt+0x1ff>
ffffffff80210784:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff80210788:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021078f:	e9 9b fe ff ff       	jmp    ffffffff8021062f <_RME_Prc_Boot_Crt+0x1ff>
ffffffff80210794:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021079b:	00 00 00 00 
ffffffff8021079f:	90                   	nop

ffffffff802107a0 <_RME_Thd_Boot_Crt>:
{
ffffffff802107a0:	f3 0f 1e fa          	endbr64
    if(Prio>=RME_PREEMPT_PRIO_NUM)
ffffffff802107a4:	49 83 f9 3f          	cmp    $0x3f,%r9
ffffffff802107a8:	0f 87 ba 03 00 00    	ja     ffffffff80210b68 <_RME_Thd_Boot_Crt+0x3c8>
{
ffffffff802107ae:	41 55                	push   %r13
ffffffff802107b0:	48 89 f0             	mov    %rsi,%rax
ffffffff802107b3:	4d 89 cd             	mov    %r9,%r13
ffffffff802107b6:	41 54                	push   %r12
ffffffff802107b8:	49 89 d4             	mov    %rdx,%r12
ffffffff802107bb:	55                   	push   %rbp
ffffffff802107bc:	4c 89 c5             	mov    %r8,%rbp
ffffffff802107bf:	53                   	push   %rbx
ffffffff802107c0:	48 89 cb             	mov    %rcx,%rbx
ffffffff802107c3:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802107c7:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff802107cb:	f6 c4 80             	test   $0x80,%ah
ffffffff802107ce:	0f 84 74 02 00 00    	je     ffffffff80210a48 <_RME_Thd_Boot_Crt+0x2a8>
ffffffff802107d4:	48 89 f2             	mov    %rsi,%rdx
ffffffff802107d7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802107db:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802107de:	0f 83 24 03 00 00    	jae    ffffffff80210b08 <_RME_Thd_Boot_Crt+0x368>
ffffffff802107e4:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff802107e8:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802107ec:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff802107f3:	ff 00 00 
ffffffff802107f6:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff802107fd:	00 00 00 
ffffffff80210800:	48 01 f2             	add    %rsi,%rdx
ffffffff80210803:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff80210806:	49 89 fa             	mov    %rdi,%r10
ffffffff80210809:	4d 21 c2             	and    %r8,%r10
ffffffff8021080c:	4d 39 ca             	cmp    %r9,%r10
ffffffff8021080f:	0f 84 6b 02 00 00    	je     ffffffff80210a80 <_RME_Thd_Boot_Crt+0x2e0>
ffffffff80210815:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80210819:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021081d:	0f 85 0d 03 00 00    	jne    ffffffff80210b30 <_RME_Thd_Boot_Crt+0x390>
ffffffff80210823:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff80210827:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021082c:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021082f:	0f 83 d3 02 00 00    	jae    ffffffff80210b08 <_RME_Thd_Boot_Crt+0x368>
ffffffff80210835:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210839:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021083d:	48 89 c2             	mov    %rax,%rdx
ffffffff80210840:	48 8b 00             	mov    (%rax),%rax
ffffffff80210843:	49 21 c0             	and    %rax,%r8
ffffffff80210846:	4d 39 c8             	cmp    %r9,%r8
ffffffff80210849:	0f 84 31 02 00 00    	je     ffffffff80210a80 <_RME_Thd_Boot_Crt+0x2e0>
ffffffff8021084f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210853:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210857:	0f 85 d3 02 00 00    	jne    ffffffff80210b30 <_RME_Thd_Boot_Crt+0x390>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8021085d:	f6 c7 80             	test   $0x80,%bh
ffffffff80210860:	0f 85 32 02 00 00    	jne    ffffffff80210a98 <_RME_Thd_Boot_Crt+0x2f8>
ffffffff80210866:	48 39 cb             	cmp    %rcx,%rbx
ffffffff80210869:	0f 83 99 02 00 00    	jae    ffffffff80210b08 <_RME_Thd_Boot_Crt+0x368>
ffffffff8021086f:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80210876:	ff 00 00 
ffffffff80210879:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8021087d:	48 01 f3             	add    %rsi,%rbx
ffffffff80210880:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80210887:	00 00 00 
ffffffff8021088a:	48 8b 03             	mov    (%rbx),%rax
ffffffff8021088d:	48 21 c1             	and    %rax,%rcx
ffffffff80210890:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80210893:	0f 84 e7 01 00 00    	je     ffffffff80210a80 <_RME_Thd_Boot_Crt+0x2e0>
ffffffff80210899:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021089d:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802108a1:	0f 85 89 02 00 00    	jne    ffffffff80210b30 <_RME_Thd_Boot_Crt+0x390>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802108a7:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff802108ab:	48 f7 d0             	not    %rax
ffffffff802108ae:	83 e0 01             	and    $0x1,%eax
ffffffff802108b1:	0f 85 91 02 00 00    	jne    ffffffff80210b48 <_RME_Thd_Boot_Crt+0x3a8>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff802108b7:	f6 43 10 02          	testb  $0x2,0x10(%rbx)
ffffffff802108bb:	0f 84 87 02 00 00    	je     ffffffff80210b48 <_RME_Thd_Boot_Crt+0x3a8>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff802108c1:	4c 3b 62 28          	cmp    0x28(%rdx),%r12
ffffffff802108c5:	0f 83 3d 02 00 00    	jae    ffffffff80210b08 <_RME_Thd_Boot_Crt+0x368>
ffffffff802108cb:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff802108cf:	4c 03 62 18          	add    0x18(%rdx),%r12
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802108d3:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802108da:	00 00 00 
ffffffff802108dd:	f0 49 0f b1 14 24    	lock cmpxchg %rdx,(%r12)
ffffffff802108e3:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff802108e6:	84 d2                	test   %dl,%dl
ffffffff802108e8:	0f 84 6a 02 00 00    	je     ffffffff80210b58 <_RME_Thd_Boot_Crt+0x3b8>
	__asm__ __volatile__ (
ffffffff802108ee:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff802108f0:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff802108f4:	89 c0                	mov    %eax,%eax
    if(_RME_Kot_Mark(Vaddr,RME_THD_SIZE(0U))!=0)
ffffffff802108f6:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff802108fb:	48 89 ef             	mov    %rbp,%rdi
ffffffff802108fe:	48 09 c2             	or     %rax,%rdx
ffffffff80210901:	49 89 54 24 20       	mov    %rdx,0x20(%r12)
ffffffff80210906:	e8 15 e1 ff ff       	call   ffffffff8020ea20 <_RME_Kot_Mark>
ffffffff8021090b:	48 85 c0             	test   %rax,%rax
ffffffff8021090e:	0f 85 5c 02 00 00    	jne    ffffffff80210b70 <_RME_Thd_Boot_Crt+0x3d0>
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff80210914:	66 0f 6f 05 d4 d0 00 	movdqa 0xd0d4(%rip),%xmm0        # ffffffff8021d9f0 <Table.1+0x170>
ffffffff8021091b:	00 
    Thread->Sched.TID=0U;
ffffffff8021091c:	48 c7 45 20 00 00 00 	movq   $0x0,0x20(%rbp)
ffffffff80210923:	00 
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff80210924:	0f 11 45 30          	movups %xmm0,0x30(%rbp)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80210928:	8b 13                	mov    (%rbx),%edx
ffffffff8021092a:	85 d2                	test   %edx,%edx
ffffffff8021092c:	0f 85 ee 01 00 00    	jne    ffffffff80210b20 <_RME_Thd_Boot_Crt+0x380>
    Thread->Sched.Local=Local;
ffffffff80210932:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff80210937:	48 8d 55 78          	lea    0x78(%rbp),%rdx
    Thread->Sched.Prc=Prc_Root;
ffffffff8021093b:	48 89 5d 58          	mov    %rbx,0x58(%rbp)
    Head->Prev=Head;
ffffffff8021093f:	48 89 95 80 00 00 00 	mov    %rdx,0x80(%rbp)
    Thread->Sched.Local=Local;
ffffffff80210946:	48 89 75 28          	mov    %rsi,0x28(%rbp)
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8021094a:	48 8d 75 10          	lea    0x10(%rbp),%rsi
ffffffff8021094e:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    Head->Next=Head;
ffffffff80210953:	48 89 55 78          	mov    %rdx,0x78(%rbp)
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80210957:	48 8d 95 b0 00 00 00 	lea    0xb0(%rbp),%rdx
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8021095e:	be 01 00 00 00       	mov    $0x1,%esi
    Head->Next=Head;
ffffffff80210963:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80210967:	48 89 95 90 00 00 00 	mov    %rdx,0x90(%rbp)
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff8021096e:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    Head->Next=Head;
ffffffff80210975:	0f 11 45 10          	movups %xmm0,0x10(%rbp)
    Thd_Crt->Head.Root_Ref=1U;
ffffffff80210979:	66 0f 6f 05 7f d0 00 	movdqa 0xd07f(%rip),%xmm0        # ffffffff8021da00 <Table.1+0x180>
ffffffff80210980:	00 
    Head->Prev=Head;
ffffffff80210981:	48 89 95 a0 00 00 00 	mov    %rdx,0xa0(%rbp)
    Head->Next=Head;
ffffffff80210988:	48 89 95 98 00 00 00 	mov    %rdx,0x98(%rbp)
ffffffff8021098f:	48 89 f2             	mov    %rsi,%rdx
    Thread->Sched.Signal=0U;
ffffffff80210992:	48 c7 45 50 00 00 00 	movq   $0x0,0x50(%rbp)
ffffffff80210999:	00 
    Thread->Sched.Prio=Prio;
ffffffff8021099a:	4c 89 6d 40          	mov    %r13,0x40(%rbp)
    Thread->Sched.Prio_Max=RME_PREEMPT_PRIO_NUM-1U;
ffffffff8021099e:	48 c7 45 48 3f 00 00 	movq   $0x3f,0x48(%rbp)
ffffffff802109a5:	00 
    Thread->Sched.Sched_Ref=1U;
ffffffff802109a6:	48 c7 45 60 01 00 00 	movq   $0x1,0x60(%rbp)
ffffffff802109ad:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff802109ae:	48 c7 45 70 00 00 00 	movq   $0x0,0x70(%rbp)
ffffffff802109b5:	00 
    Thread->Ctx.Hyp_Attr=0U;
ffffffff802109b6:	48 c7 85 88 00 00 00 	movq   $0x0,0x88(%rbp)
ffffffff802109bd:	00 00 00 00 
    Thread->Ctx.Invstk_Depth=0U;
ffffffff802109c1:	48 c7 85 a8 00 00 00 	movq   $0x0,0xa8(%rbp)
ffffffff802109c8:	00 00 00 00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff802109cc:	49 89 6c 24 18       	mov    %rbp,0x18(%r12)
    Thd_Crt->Head.Root_Ref=1U;
ffffffff802109d1:	41 0f 11 44 24 08    	movups %xmm0,0x8(%r12)
ffffffff802109d7:	f0 48 0f c1 53 08    	lock xadd %rdx,0x8(%rbx)
    Prio=Thd->Sched.Prio;
ffffffff802109dd:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff802109e1:	48 8b 55 28          	mov    0x28(%rbp),%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802109e5:	49 89 c8             	mov    %rcx,%r8
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802109e8:	48 d3 e6             	shl    %cl,%rsi
ffffffff802109eb:	49 c1 e0 04          	shl    $0x4,%r8
ffffffff802109ef:	4e 8d 0c 02          	lea    (%rdx,%r8,1),%r9
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802109f3:	4a 8d 5c 02 28       	lea    0x28(%rdx,%r8,1),%rbx
ffffffff802109f8:	49 8b 79 30          	mov    0x30(%r9),%rdi
ffffffff802109fc:	66 48 0f 6e c3       	movq   %rbx,%xmm0
    Next->Prev=New;
ffffffff80210a01:	49 89 69 30          	mov    %rbp,0x30(%r9)
    Local->Thd_Cur=Thread;
ffffffff80210a05:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
    New->Next=Next;
ffffffff80210a0a:	66 48 0f 6e cf       	movq   %rdi,%xmm1
ffffffff80210a0f:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff80210a13:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff80210a17:	48 89 2f             	mov    %rbp,(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210a1a:	48 89 cf             	mov    %rcx,%rdi
ffffffff80210a1d:	48 c1 ef 06          	shr    $0x6,%rdi
ffffffff80210a21:	48 09 74 fa 20       	or     %rsi,0x20(%rdx,%rdi,8)
    Local->Thd_Cur=Thread;
ffffffff80210a26:	48 89 6b 08          	mov    %rbp,0x8(%rbx)
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff80210a2a:	48 bb 00 00 00 00 00 	movabs $0x6000000000000,%rbx
ffffffff80210a31:	00 06 00 
ffffffff80210a34:	49 89 1c 24          	mov    %rbx,(%r12)
}
ffffffff80210a38:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80210a3c:	5b                   	pop    %rbx
ffffffff80210a3d:	5d                   	pop    %rbp
ffffffff80210a3e:	41 5c                	pop    %r12
ffffffff80210a40:	41 5d                	pop    %r13
ffffffff80210a42:	c3                   	ret
ffffffff80210a43:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210a48:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80210a4b:	0f 83 b7 00 00 00    	jae    ffffffff80210b08 <_RME_Thd_Boot_Crt+0x368>
ffffffff80210a51:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff80210a55:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210a59:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80210a60:	ff 00 00 
ffffffff80210a63:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80210a6a:	00 00 00 
ffffffff80210a6d:	48 8d 14 30          	lea    (%rax,%rsi,1),%rdx
ffffffff80210a71:	48 8b 02             	mov    (%rdx),%rax
ffffffff80210a74:	48 21 c7             	and    %rax,%rdi
ffffffff80210a77:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80210a7a:	0f 85 cf fd ff ff    	jne    ffffffff8021084f <_RME_Thd_Boot_Crt+0xaf>
}
ffffffff80210a80:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210a84:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff80210a8b:	5b                   	pop    %rbx
ffffffff80210a8c:	5d                   	pop    %rbp
ffffffff80210a8d:	41 5c                	pop    %r12
ffffffff80210a8f:	41 5d                	pop    %r13
ffffffff80210a91:	c3                   	ret
ffffffff80210a92:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80210a98:	48 89 d8             	mov    %rbx,%rax
ffffffff80210a9b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210a9f:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210aa2:	73 64                	jae    ffffffff80210b08 <_RME_Thd_Boot_Crt+0x368>
ffffffff80210aa4:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80210aab:	00 00 00 
ffffffff80210aae:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210ab2:	48 01 f0             	add    %rsi,%rax
ffffffff80210ab5:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80210abc:	ff 00 00 
ffffffff80210abf:	48 8b 08             	mov    (%rax),%rcx
ffffffff80210ac2:	49 89 c8             	mov    %rcx,%r8
ffffffff80210ac5:	49 21 f0             	and    %rsi,%r8
ffffffff80210ac8:	49 39 f8             	cmp    %rdi,%r8
ffffffff80210acb:	74 b3                	je     ffffffff80210a80 <_RME_Thd_Boot_Crt+0x2e0>
ffffffff80210acd:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80210ad1:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80210ad5:	75 59                	jne    ffffffff80210b30 <_RME_Thd_Boot_Crt+0x390>
ffffffff80210ad7:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff80210adb:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff80210ae1:	48 39 cb             	cmp    %rcx,%rbx
ffffffff80210ae4:	73 22                	jae    ffffffff80210b08 <_RME_Thd_Boot_Crt+0x368>
ffffffff80210ae6:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff80210aea:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff80210aee:	48 8b 03             	mov    (%rbx),%rax
ffffffff80210af1:	48 21 c6             	and    %rax,%rsi
ffffffff80210af4:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80210af7:	0f 85 9c fd ff ff    	jne    ffffffff80210899 <_RME_Thd_Boot_Crt+0xf9>
ffffffff80210afd:	e9 7e ff ff ff       	jmp    ffffffff80210a80 <_RME_Thd_Boot_Crt+0x2e0>
ffffffff80210b02:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
}
ffffffff80210b08:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210b0c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff80210b13:	5b                   	pop    %rbx
ffffffff80210b14:	5d                   	pop    %rbp
ffffffff80210b15:	41 5c                	pop    %r12
ffffffff80210b17:	41 5d                	pop    %r13
ffffffff80210b19:	c3                   	ret
ffffffff80210b1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80210b20:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff80210b24:	e9 09 fe ff ff       	jmp    ffffffff80210932 <_RME_Thd_Boot_Crt+0x192>
ffffffff80210b29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
}
ffffffff80210b30:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210b34:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff80210b3b:	5b                   	pop    %rbx
ffffffff80210b3c:	5d                   	pop    %rbp
ffffffff80210b3d:	41 5c                	pop    %r12
ffffffff80210b3f:	41 5d                	pop    %r13
ffffffff80210b41:	c3                   	ret
ffffffff80210b42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80210b48:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210b4f:	e9 e4 fe ff ff       	jmp    ffffffff80210a38 <_RME_Thd_Boot_Crt+0x298>
ffffffff80210b54:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff80210b58:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80210b5f:	e9 d4 fe ff ff       	jmp    ffffffff80210a38 <_RME_Thd_Boot_Crt+0x298>
ffffffff80210b64:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_PRIO;
ffffffff80210b68:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
}
ffffffff80210b6f:	c3                   	ret
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff80210b70:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
ffffffff80210b77:	00 
        return RME_ERR_CPT_KOT;
ffffffff80210b78:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80210b7f:	e9 b4 fe ff ff       	jmp    ffffffff80210a38 <_RME_Thd_Boot_Crt+0x298>
ffffffff80210b84:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80210b8b:	00 00 00 00 
ffffffff80210b8f:	90                   	nop

ffffffff80210b90 <_RME_Sig_Boot_Crt>:
{
ffffffff80210b90:	f3 0f 1e fa          	endbr64
ffffffff80210b94:	48 89 d1             	mov    %rdx,%rcx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210b97:	48 8b 57 28          	mov    0x28(%rdi),%rdx
ffffffff80210b9b:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80210ba1:	0f 85 b9 00 00 00    	jne    ffffffff80210c60 <_RME_Sig_Boot_Crt+0xd0>
ffffffff80210ba7:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80210baa:	0f 83 20 01 00 00    	jae    ffffffff80210cd0 <_RME_Sig_Boot_Crt+0x140>
ffffffff80210bb0:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80210bb7:	ff 00 00 
ffffffff80210bba:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80210bbe:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff80210bc2:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80210bc9:	00 00 00 
ffffffff80210bcc:	48 8b 06             	mov    (%rsi),%rax
ffffffff80210bcf:	48 21 c2             	and    %rax,%rdx
ffffffff80210bd2:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80210bd5:	0f 84 eb 00 00 00    	je     ffffffff80210cc6 <_RME_Sig_Boot_Crt+0x136>
ffffffff80210bdb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210bdf:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210be3:	0f 85 f7 00 00 00    	jne    ffffffff80210ce0 <_RME_Sig_Boot_Crt+0x150>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80210be9:	48 8b 46 10          	mov    0x10(%rsi),%rax
ffffffff80210bed:	48 f7 d0             	not    %rax
ffffffff80210bf0:	83 e0 01             	and    $0x1,%eax
ffffffff80210bf3:	0f 85 f7 00 00 00    	jne    ffffffff80210cf0 <_RME_Sig_Boot_Crt+0x160>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80210bf9:	48 3b 4e 28          	cmp    0x28(%rsi),%rcx
ffffffff80210bfd:	0f 83 cd 00 00 00    	jae    ffffffff80210cd0 <_RME_Sig_Boot_Crt+0x140>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80210c03:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80210c0a:	00 00 00 
ffffffff80210c0d:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80210c11:	48 03 4e 18          	add    0x18(%rsi),%rcx
ffffffff80210c15:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80210c1a:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80210c1d:	84 d2                	test   %dl,%dl
ffffffff80210c1f:	0f 84 db 00 00 00    	je     ffffffff80210d00 <_RME_Sig_Boot_Crt+0x170>
	__asm__ __volatile__ (
ffffffff80210c25:	0f 31                	rdtsc
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80210c27:	66 0f 6f 05 e1 cd 00 	movdqa 0xcde1(%rip),%xmm0        # ffffffff8021da10 <Table.1+0x190>
ffffffff80210c2e:	00 
	return ((unsigned long long)hi << 32) | lo;
ffffffff80210c2f:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff80210c33:	89 c0                	mov    %eax,%eax
    Sig_Crt->Sig_Num=0U;
ffffffff80210c35:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
ffffffff80210c3c:	00 
ffffffff80210c3d:	48 09 c2             	or     %rax,%rdx
    Sig_Crt->Thd=RME_NULL;
ffffffff80210c40:	48 c7 41 30 00 00 00 	movq   $0x0,0x30(%rcx)
ffffffff80210c47:	00 
    return 0;
ffffffff80210c48:	31 c0                	xor    %eax,%eax
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80210c4a:	0f 11 01             	movups %xmm0,(%rcx)
ffffffff80210c4d:	66 0f 6f 05 cb cd 00 	movdqa 0xcdcb(%rip),%xmm0        # ffffffff8021da20 <Table.1+0x1a0>
ffffffff80210c54:	00 
ffffffff80210c55:	48 89 51 20          	mov    %rdx,0x20(%rcx)
ffffffff80210c59:	0f 11 41 10          	movups %xmm0,0x10(%rcx)
    return 0;
ffffffff80210c5d:	c3                   	ret
ffffffff80210c5e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210c60:	48 89 f0             	mov    %rsi,%rax
ffffffff80210c63:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210c67:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210c6a:	73 64                	jae    ffffffff80210cd0 <_RME_Sig_Boot_Crt+0x140>
ffffffff80210c6c:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80210c73:	00 00 00 
ffffffff80210c76:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210c7a:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80210c7e:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80210c85:	ff 00 00 
ffffffff80210c88:	48 8b 10             	mov    (%rax),%rdx
ffffffff80210c8b:	49 89 d1             	mov    %rdx,%r9
ffffffff80210c8e:	49 21 f9             	and    %rdi,%r9
ffffffff80210c91:	4d 39 c1             	cmp    %r8,%r9
ffffffff80210c94:	74 30                	je     ffffffff80210cc6 <_RME_Sig_Boot_Crt+0x136>
ffffffff80210c96:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80210c9a:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80210c9e:	75 40                	jne    ffffffff80210ce0 <_RME_Sig_Boot_Crt+0x150>
ffffffff80210ca0:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80210ca4:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80210caa:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80210cad:	73 21                	jae    ffffffff80210cd0 <_RME_Sig_Boot_Crt+0x140>
ffffffff80210caf:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80210cb3:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff80210cb7:	48 8b 06             	mov    (%rsi),%rax
ffffffff80210cba:	48 21 c7             	and    %rax,%rdi
ffffffff80210cbd:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80210cc0:	0f 85 15 ff ff ff    	jne    ffffffff80210bdb <_RME_Sig_Boot_Crt+0x4b>
ffffffff80210cc6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210ccd:	c3                   	ret
ffffffff80210cce:	66 90                	xchg   %ax,%ax
ffffffff80210cd0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210cd7:	c3                   	ret
ffffffff80210cd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210cdf:	00 
ffffffff80210ce0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210ce7:	c3                   	ret
ffffffff80210ce8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210cef:	00 
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80210cf0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210cf7:	c3                   	ret
ffffffff80210cf8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210cff:	00 
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80210d00:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff80210d07:	c3                   	ret
ffffffff80210d08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210d0f:	00 

ffffffff80210d10 <_RME_Kern_High>:
{
ffffffff80210d10:	f3 0f 1e fa          	endbr64
ffffffff80210d14:	41 56                	push   %r14
ffffffff80210d16:	41 55                	push   %r13
ffffffff80210d18:	41 54                	push   %r12
ffffffff80210d1a:	55                   	push   %rbp
ffffffff80210d1b:	53                   	push   %rbx
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80210d1c:	48 8b 46 20          	mov    0x20(%rsi),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff80210d20:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80210d24:	48 83 f8 01          	cmp    $0x1,%rax
    Thd_Cur=Local->Thd_Cur;
ffffffff80210d28:	48 8b 6e 08          	mov    0x8(%rsi),%rbp
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80210d2c:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80210d2f:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80210d33:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80210d38:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80210d3c:	4c 8b 64 06 08       	mov    0x8(%rsi,%rax,1),%r12
    if(Thd_New==Thd_Cur)
ffffffff80210d41:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80210d44:	0f 84 8f 00 00 00    	je     ffffffff80210dd9 <_RME_Kern_High+0xc9>
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff80210d4a:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
ffffffff80210d4f:	49 89 fd             	mov    %rdi,%r13
ffffffff80210d52:	48 89 f3             	mov    %rsi,%rbx
ffffffff80210d55:	75 0b                	jne    ffffffff80210d62 <_RME_Kern_High+0x52>
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff80210d57:	49 8b 44 24 40       	mov    0x40(%r12),%rax
ffffffff80210d5c:	48 39 45 40          	cmp    %rax,0x40(%rbp)
ffffffff80210d60:	73 77                	jae    ffffffff80210dd9 <_RME_Kern_High+0xc9>
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff80210d62:	4d 8b b4 24 90 00 00 	mov    0x90(%r12),%r14
ffffffff80210d69:	00 
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff80210d6a:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff80210d71:	4c 89 ee             	mov    %r13,%rsi
ffffffff80210d74:	e8 67 9c 00 00       	call   ffffffff8021a9e0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80210d79:	4c 89 f6             	mov    %r14,%rsi
ffffffff80210d7c:	4c 89 ef             	mov    %r13,%rdi
ffffffff80210d7f:	e8 5c 9c 00 00       	call   ffffffff8021a9e0 <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210d84:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210d8b:	48 85 c0             	test   %rax,%rax
ffffffff80210d8e:	74 58                	je     ffffffff80210de8 <_RME_Kern_High+0xd8>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210d90:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210d97:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210d9a:	74 4c                	je     ffffffff80210de8 <_RME_Kern_High+0xd8>
        return Inv_Top->Prc->Pgt;
ffffffff80210d9c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210da0:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210da4:	49 8b 84 24 98 00 00 	mov    0x98(%r12),%rax
ffffffff80210dab:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210dac:	48 85 c0             	test   %rax,%rax
ffffffff80210daf:	74 4c                	je     ffffffff80210dfd <_RME_Kern_High+0xed>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210db1:	49 8d 8c 24 98 00 00 	lea    0x98(%r12),%rcx
ffffffff80210db8:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210db9:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210dbc:	74 3f                	je     ffffffff80210dfd <_RME_Kern_High+0xed>
        return Inv_Top->Prc->Pgt;
ffffffff80210dbe:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210dc2:	48 8b 78 30          	mov    0x30(%rax),%rdi
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff80210dc6:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff80210dca:	48 39 42 18          	cmp    %rax,0x18(%rdx)
ffffffff80210dce:	74 05                	je     ffffffff80210dd5 <_RME_Kern_High+0xc5>
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff80210dd0:	e8 8b a3 00 00       	call   ffffffff8021b160 <__RME_Pgt_Set>
    Local->Thd_Cur=Thd_New;
ffffffff80210dd5:	4c 89 63 08          	mov    %r12,0x8(%rbx)
}
ffffffff80210dd9:	5b                   	pop    %rbx
ffffffff80210dda:	5d                   	pop    %rbp
ffffffff80210ddb:	41 5c                	pop    %r12
ffffffff80210ddd:	41 5d                	pop    %r13
ffffffff80210ddf:	41 5e                	pop    %r14
ffffffff80210de1:	c3                   	ret
ffffffff80210de2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return Thd->Sched.Prc->Pgt;
ffffffff80210de8:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff80210dec:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210df0:	49 8b 84 24 98 00 00 	mov    0x98(%r12),%rax
ffffffff80210df7:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210df8:	48 85 c0             	test   %rax,%rax
ffffffff80210dfb:	75 b4                	jne    ffffffff80210db1 <_RME_Kern_High+0xa1>
        return Thd->Sched.Prc->Pgt;
ffffffff80210dfd:	49 8b 44 24 58       	mov    0x58(%r12),%rax
ffffffff80210e02:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff80210e06:	eb be                	jmp    ffffffff80210dc6 <_RME_Kern_High+0xb6>
ffffffff80210e08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210e0f:	00 

ffffffff80210e10 <_RME_Svc_Handler>:
{
ffffffff80210e10:	f3 0f 1e fa          	endbr64
ffffffff80210e14:	41 57                	push   %r15
ffffffff80210e16:	41 56                	push   %r14
ffffffff80210e18:	41 55                	push   %r13
ffffffff80210e1a:	41 54                	push   %r12
ffffffff80210e1c:	55                   	push   %rbp
ffffffff80210e1d:	53                   	push   %rbx
ffffffff80210e1e:	48 89 fb             	mov    %rdi,%rbx
ffffffff80210e21:	48 83 ec 78          	sub    $0x78,%rsp
    __RME_Svc_Param_Get(Reg, &Svc, &Cid, Param);
ffffffff80210e25:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
ffffffff80210e2a:	48 8d 54 24 28       	lea    0x28(%rsp),%rdx
ffffffff80210e2f:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
ffffffff80210e34:	e8 d7 a8 00 00       	call   ffffffff8021b710 <__RME_Svc_Param_Get>
    if(Svc_Num==RME_SVC_INV_RET)
ffffffff80210e39:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
ffffffff80210e3e:	83 e5 3f             	and    $0x3f,%ebp
ffffffff80210e41:	74 5d                	je     ffffffff80210ea0 <_RME_Svc_Handler+0x90>
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff80210e43:	e8 f7 a9 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80210e48:	48 8b 40 08          	mov    0x8(%rax),%rax
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff80210e4c:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff80210e53:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210e5a:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80210e5d:	74 31                	je     ffffffff80210e90 <_RME_Svc_Handler+0x80>
ffffffff80210e5f:	48 85 d2             	test   %rdx,%rdx
ffffffff80210e62:	74 2c                	je     ffffffff80210e90 <_RME_Svc_Handler+0x80>
        Cpt=Inv_Top->Prc->Cpt;
ffffffff80210e64:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff80210e68:	4c 8b 78 28          	mov    0x28(%rax),%r15
    if(Svc_Num==RME_SVC_INV_ACT)
ffffffff80210e6c:	48 83 fd 01          	cmp    $0x1,%rbp
ffffffff80210e70:	0f 84 8a 0c 00 00    	je     ffffffff80211b00 <_RME_Svc_Handler+0xcf0>
    switch(Svc_Num)
ffffffff80210e76:	48 83 fd 09          	cmp    $0x9,%rbp
ffffffff80210e7a:	0f 87 ce 0d 00 00    	ja     ffffffff80211c4e <_RME_Svc_Handler+0xe3e>
ffffffff80210e80:	3e ff 24 ed 60 d6 21 	notrack jmp *-0x7fde29a0(,%rbp,8)
ffffffff80210e87:	80 
ffffffff80210e88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210e8f:	00 
        Cpt=Thd_Cur->Sched.Prc->Cpt;
ffffffff80210e90:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80210e94:	4c 8b 78 28          	mov    0x28(%rax),%r15
ffffffff80210e98:	eb d2                	jmp    ffffffff80210e6c <_RME_Svc_Handler+0x5c>
ffffffff80210e9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Retval=_RME_Inv_Ret(Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
ffffffff80210ea0:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
ffffffff80210ea5:	31 d2                	xor    %edx,%edx
ffffffff80210ea7:	48 89 df             	mov    %rbx,%rdi
ffffffff80210eaa:	e8 01 b9 ff ff       	call   ffffffff8020c7b0 <_RME_Inv_Ret>
        RME_SWITCH_RETURN(Reg, Retval);
ffffffff80210eaf:	48 85 c0             	test   %rax,%rax
ffffffff80210eb2:	0f 88 f8 09 00 00    	js     ffffffff802118b0 <_RME_Svc_Handler+0xaa0>
}
ffffffff80210eb8:	48 83 c4 78          	add    $0x78,%rsp
ffffffff80210ebc:	5b                   	pop    %rbx
ffffffff80210ebd:	5d                   	pop    %rbp
ffffffff80210ebe:	41 5c                	pop    %r12
ffffffff80210ec0:	41 5d                	pop    %r13
ffffffff80210ec2:	41 5e                	pop    %r14
ffffffff80210ec4:	41 5f                	pop    %r15
ffffffff80210ec6:	c3                   	ret
ffffffff80210ec7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80210ece:	00 00 
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Thd */
ffffffff80210ed0:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
            Retval=_RME_Thd_Swt(Cpt,
ffffffff80210ed5:	48 8b 6c 24 38       	mov    0x38(%rsp),%rbp
    Local=RME_CPU_LOCAL();
ffffffff80210eda:	e8 60 a9 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thd_Cur=Local->Thd_Cur;
ffffffff80210edf:	4c 8b 68 08          	mov    0x8(%rax),%r13
    Local=RME_CPU_LOCAL();
ffffffff80210ee3:	49 89 c6             	mov    %rax,%r14
    if(Cap_Thd<RME_CID_NULL)
ffffffff80210ee6:	49 81 fc ff ff ff 7f 	cmp    $0x7fffffff,%r12
ffffffff80210eed:	0f 8f 3d 0f 00 00    	jg     ffffffff80211e30 <_RME_Svc_Handler+0x1020>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80210ef3:	49 8b 47 28          	mov    0x28(%r15),%rax
ffffffff80210ef7:	41 f7 c4 00 80 00 00 	test   $0x8000,%r12d
ffffffff80210efe:	0f 85 6c 22 00 00    	jne    ffffffff80213170 <_RME_Svc_Handler+0x2360>
ffffffff80210f04:	49 39 c4             	cmp    %rax,%r12
ffffffff80210f07:	0f 83 39 27 00 00    	jae    ffffffff80213646 <_RME_Svc_Handler+0x2836>
ffffffff80210f0d:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80210f14:	ff 00 00 
ffffffff80210f17:	4c 89 e0             	mov    %r12,%rax
ffffffff80210f1a:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80210f21:	00 00 00 
ffffffff80210f24:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210f28:	49 03 47 18          	add    0x18(%r15),%rax
ffffffff80210f2c:	48 8b 10             	mov    (%rax),%rdx
ffffffff80210f2f:	48 21 d1             	and    %rdx,%rcx
ffffffff80210f32:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80210f35:	0f 84 a9 22 00 00    	je     ffffffff802131e4 <_RME_Svc_Handler+0x23d4>
ffffffff80210f3b:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80210f3f:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80210f43:	0f 85 42 27 00 00    	jne    ffffffff8021368b <_RME_Svc_Handler+0x287b>
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff80210f49:	f6 40 11 01          	testb  $0x1,0x11(%rax)
ffffffff80210f4d:	0f 84 6f 27 00 00    	je     ffffffff802136c2 <_RME_Svc_Handler+0x28b2>
        Thd_New=RME_CAP_GETOBJ(Thd_Cap_New,struct RME_Thd_Struct*);
ffffffff80210f53:	4c 8b 60 18          	mov    0x18(%rax),%r12
        if(Thd_New->Sched.Local!=Local)
ffffffff80210f57:	4d 3b 74 24 28       	cmp    0x28(%r12),%r14
ffffffff80210f5c:	0f 85 80 32 00 00    	jne    ffffffff802141e2 <_RME_Svc_Handler+0x33d2>
        if(Thd_Cur->Sched.Prio!=Thd_New->Sched.Prio)
ffffffff80210f62:	49 8b 44 24 40       	mov    0x40(%r12),%rax
ffffffff80210f67:	49 39 45 40          	cmp    %rax,0x40(%r13)
ffffffff80210f6b:	0f 85 ff 32 00 00    	jne    ffffffff80214270 <_RME_Svc_Handler+0x3460>
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff80210f71:	49 8b 44 24 38       	mov    0x38(%r12),%rax
ffffffff80210f76:	48 83 e8 01          	sub    $0x1,%rax
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff80210f7a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210f7e:	0f 86 5e 32 00 00    	jbe    ffffffff802141e2 <_RME_Svc_Handler+0x33d2>
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80210f84:	48 85 ed             	test   %rbp,%rbp
ffffffff80210f87:	0f 84 2f 0f 00 00    	je     ffffffff80211ebc <_RME_Svc_Handler+0x10ac>
ffffffff80210f8d:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80210f94:	ff ff 7f 
ffffffff80210f97:	49 3b 45 30          	cmp    0x30(%r13),%rax
ffffffff80210f9b:	0f 82 1b 0f 00 00    	jb     ffffffff80211ebc <_RME_Svc_Handler+0x10ac>
            Thd_Cur->Sched.Slice=0U;
ffffffff80210fa1:	49 c7 45 30 00 00 00 	movq   $0x0,0x30(%r13)
ffffffff80210fa8:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80210fa9:	4c 89 ef             	mov    %r13,%rdi
ffffffff80210fac:	e8 af b7 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff80210fb1:	49 c7 45 38 02 00 00 	movq   $0x2,0x38(%r13)
ffffffff80210fb8:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff80210fb9:	e8 c2 cb ff ff       	call   ffffffff8020db80 <_RME_Run_Notif>
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80210fbe:	49 8b 46 20          	mov    0x20(%r14),%rax
ffffffff80210fc2:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80210fc6:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80210fca:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80210fcd:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80210fd1:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80210fd6:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80210fda:	49 8b 44 06 08       	mov    0x8(%r14,%rax,1),%rax
            if((Thd_High->Sched.Prio>Thd_New->Sched.Prio)||(Thd_Cur==Thd_New))
ffffffff80210fdf:	48 8b 70 40          	mov    0x40(%rax),%rsi
ffffffff80210fe3:	49 39 74 24 40       	cmp    %rsi,0x40(%r12)
ffffffff80210fe8:	0f 82 e0 26 00 00    	jb     ffffffff802136ce <_RME_Svc_Handler+0x28be>
ffffffff80210fee:	4d 39 e5             	cmp    %r12,%r13
ffffffff80210ff1:	0f 84 d7 26 00 00    	je     ffffffff802136ce <_RME_Svc_Handler+0x28be>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80210ff7:	31 f6                	xor    %esi,%esi
ffffffff80210ff9:	48 89 df             	mov    %rbx,%rdi
ffffffff80210ffc:	e8 1f a7 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
    if(Thd_Cur==Thd_New)
ffffffff80211001:	e9 c9 0e 00 00       	jmp    ffffffff80211ecf <_RME_Svc_Handler+0x10bf>
ffffffff80211006:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021100d:	00 00 00 
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff80211010:	4c 8b 6c 24 40       	mov    0x40(%rsp),%r13
                                      (rme_cid_t)Param[1],                  /* rme_cid_t Cap_Thd_Src */
ffffffff80211015:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
ffffffff8021101a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    if(Time==0U)
ffffffff8021101f:	4d 85 ed             	test   %r13,%r13
ffffffff80211022:	0f 84 38 34 00 00    	je     ffffffff80214460 <_RME_Svc_Handler+0x3650>
{
    struct RME_Cap_Kfn* Kfn_Op;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80211028:	49 8b 4f 28          	mov    0x28(%r15),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff8021102c:	f6 c4 80             	test   $0x80,%ah
ffffffff8021102f:	0f 84 bb 0e 00 00    	je     ffffffff80211ef0 <_RME_Svc_Handler+0x10e0>
ffffffff80211035:	48 89 c2             	mov    %rax,%rdx
ffffffff80211038:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021103c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8021103f:	0f 83 ab 21 00 00    	jae    ffffffff802131f0 <_RME_Svc_Handler+0x23e0>
ffffffff80211045:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff80211049:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021104d:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff80211054:	ff 00 00 
ffffffff80211057:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8021105e:	00 00 00 
ffffffff80211061:	48 01 f2             	add    %rsi,%rdx
ffffffff80211064:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff80211067:	49 89 fa             	mov    %rdi,%r10
ffffffff8021106a:	4d 21 ca             	and    %r9,%r10
ffffffff8021106d:	4d 39 c2             	cmp    %r8,%r10
ffffffff80211070:	0f 84 ca 21 00 00    	je     ffffffff80213240 <_RME_Svc_Handler+0x2430>
ffffffff80211076:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021107a:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021107e:	0f 85 b3 0e 00 00    	jne    ffffffff80211f37 <_RME_Svc_Handler+0x1127>
ffffffff80211084:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff80211088:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021108d:	48 39 f8             	cmp    %rdi,%rax
ffffffff80211090:	0f 83 5a 21 00 00    	jae    ffffffff802131f0 <_RME_Svc_Handler+0x23e0>
ffffffff80211096:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021109a:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021109e:	48 8b 10             	mov    (%rax),%rdx
ffffffff802110a1:	48 89 c5             	mov    %rax,%rbp
ffffffff802110a4:	4c 89 c8             	mov    %r9,%rax
ffffffff802110a7:	48 21 d0             	and    %rdx,%rax
ffffffff802110aa:	4c 39 c0             	cmp    %r8,%rax
ffffffff802110ad:	0f 84 8d 21 00 00    	je     ffffffff80213240 <_RME_Svc_Handler+0x2430>
ffffffff802110b3:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802110b7:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff802110bb:	0f 85 76 0e 00 00    	jne    ffffffff80211f37 <_RME_Svc_Handler+0x1127>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff802110c1:	41 f7 c4 00 80 00 00 	test   $0x8000,%r12d
ffffffff802110c8:	0f 85 c2 1f 00 00    	jne    ffffffff80213090 <_RME_Svc_Handler+0x2280>
ffffffff802110ce:	49 39 cc             	cmp    %rcx,%r12
ffffffff802110d1:	0f 83 19 21 00 00    	jae    ffffffff802131f0 <_RME_Svc_Handler+0x23e0>
ffffffff802110d7:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff802110de:	ff 00 00 
ffffffff802110e1:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff802110e5:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff802110ec:	00 00 00 
ffffffff802110ef:	49 01 f4             	add    %rsi,%r12
ffffffff802110f2:	49 8b 04 24          	mov    (%r12),%rax
ffffffff802110f6:	48 21 c2             	and    %rax,%rdx
ffffffff802110f9:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802110fc:	0f 84 3e 21 00 00    	je     ffffffff80213240 <_RME_Svc_Handler+0x2430>
ffffffff80211102:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211106:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021110a:	0f 85 27 0e 00 00    	jne    ffffffff80211f37 <_RME_Svc_Handler+0x1127>
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff80211110:	f6 45 10 80          	testb  $0x80,0x10(%rbp)
ffffffff80211114:	0f 84 21 24 00 00    	je     ffffffff8021353b <_RME_Svc_Handler+0x272b>
    RME_CAP_CHECK(Thd_Src_Op,RME_THD_FLAG_XFER_SRC);
ffffffff8021111a:	41 f6 44 24 10 40    	testb  $0x40,0x10(%r12)
ffffffff80211120:	0f 84 15 24 00 00    	je     ffffffff8021353b <_RME_Svc_Handler+0x272b>
    Local=RME_CPU_LOCAL();
ffffffff80211126:	e8 14 a7 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thd_Src=RME_CAP_GETOBJ(Thd_Src_Op,struct RME_Thd_Struct*);
ffffffff8021112b:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
    Local=RME_CPU_LOCAL();
ffffffff80211130:	49 89 c6             	mov    %rax,%r14
    if(Thd_Src->Sched.Local!=Local)
ffffffff80211133:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff80211137:	0f 85 23 33 00 00    	jne    ffffffff80214460 <_RME_Svc_Handler+0x3650>
    if(Thd_Src->Sched.Slice==0U)
ffffffff8021113d:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff80211141:	48 85 c0             	test   %rax,%rax
ffffffff80211144:	0f 84 16 33 00 00    	je     ffffffff80214460 <_RME_Svc_Handler+0x3650>
    Thd_Dst=RME_CAP_GETOBJ(Thd_Dst_Op,struct RME_Thd_Struct*);
ffffffff8021114a:	48 8b 6d 18          	mov    0x18(%rbp),%rbp
    if(Thd_Dst->Sched.Local!=Local)
ffffffff8021114e:	4c 3b 75 28          	cmp    0x28(%rbp),%r14
ffffffff80211152:	0f 85 08 33 00 00    	jne    ffffffff80214460 <_RME_Svc_Handler+0x3650>
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80211158:	48 8b 75 48          	mov    0x48(%rbp),%rsi
ffffffff8021115c:	48 39 77 48          	cmp    %rsi,0x48(%rdi)
ffffffff80211160:	73 14                	jae    ffffffff80211176 <_RME_Svc_Handler+0x366>
ffffffff80211162:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff80211169:	ff ff 7f 
ffffffff8021116c:	48 39 55 30          	cmp    %rdx,0x30(%rbp)
ffffffff80211170:	0f 85 7e 32 00 00    	jne    ffffffff802143f4 <_RME_Svc_Handler+0x35e4>
    if(Thd_Src->Sched.Slice<RME_THD_INF_TIME)
ffffffff80211176:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8021117d:	ff ff 7f 
ffffffff80211180:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211183:	0f 82 93 21 00 00    	jb     ffffffff8021331c <_RME_Svc_Handler+0x250c>
        if(Time>=RME_THD_INF_TIME)
ffffffff80211189:	4c 39 ea             	cmp    %r13,%rdx
ffffffff8021118c:	0f 83 b5 23 00 00    	jae    ffffffff80213547 <_RME_Svc_Handler+0x2737>
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80211192:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
ffffffff80211196:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211199:	0f 83 1b 25 00 00    	jae    ffffffff802136ba <_RME_Svc_Handler+0x28aa>
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff8021119f:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
ffffffff802111a6:	00 
        if(Thd_Src->Sched.State==RME_THD_READY)
ffffffff802111a7:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
ffffffff802111ac:	0f 84 e5 24 00 00    	je     ffffffff80213697 <_RME_Svc_Handler+0x2887>
    __RME_Svc_Retval_Set(Reg,(rme_ret_t)(Thd_Dst->Sched.Slice));
ffffffff802111b2:	48 8b 75 30          	mov    0x30(%rbp),%rsi
ffffffff802111b6:	48 89 df             	mov    %rbx,%rdi
ffffffff802111b9:	e8 62 a5 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
    if(Thd_Dst->Sched.State==RME_THD_TIMEOUT)
ffffffff802111be:	48 83 7d 38 02       	cmpq   $0x2,0x38(%rbp)
ffffffff802111c3:	75 51                	jne    ffffffff80211216 <_RME_Svc_Handler+0x406>
    Prio=Thd->Sched.Prio;
ffffffff802111c5:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff802111c9:	48 8b 45 28          	mov    0x28(%rbp),%rax
        Thd_Dst->Sched.State=RME_THD_READY;
ffffffff802111cd:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff802111d4:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802111d5:	48 89 ce             	mov    %rcx,%rsi
ffffffff802111d8:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff802111dc:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff802111e0:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff802111e5:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff802111e9:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802111ee:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff802111f1:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802111f5:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff802111f9:	66 48 0f 6e ea       	movq   %rdx,%xmm5
ffffffff802111fe:	66 0f 6c c5          	punpcklqdq %xmm5,%xmm0
ffffffff80211202:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff80211206:	48 89 2a             	mov    %rbp,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211209:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021120e:	48 d3 e2             	shl    %cl,%rdx
ffffffff80211211:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
    _RME_Kern_High(Reg,Local);
ffffffff80211216:	4c 89 f6             	mov    %r14,%rsi
ffffffff80211219:	48 89 df             	mov    %rbx,%rdi
ffffffff8021121c:	e8 ef fa ff ff       	call   ffffffff80210d10 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211221:	e9 92 fc ff ff       	jmp    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
ffffffff80211226:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021122d:	00 00 00 
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff80211230:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
ffffffff80211235:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8021123a:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
ffffffff8021123f:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff80211244:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    if((Number==0U)||(Number>3U))
ffffffff80211249:	44 89 e2             	mov    %r12d,%edx
ffffffff8021124c:	49 8d 46 ff          	lea    -0x1(%r14),%rax
ffffffff80211250:	48 89 14 24          	mov    %rdx,(%rsp)
ffffffff80211254:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211258:	0f 87 78 24 00 00    	ja     ffffffff802136d6 <_RME_Svc_Handler+0x28c6>
    Local=RME_CPU_LOCAL();
ffffffff8021125e:	e8 dc a5 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80211263:	41 f7 c4 00 80 00 00 	test   $0x8000,%r12d
ffffffff8021126a:	49 8b 4f 28          	mov    0x28(%r15),%rcx
ffffffff8021126e:	48 8b 14 24          	mov    (%rsp),%rdx
    Local=RME_CPU_LOCAL();
ffffffff80211272:	48 89 c5             	mov    %rax,%rbp
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80211275:	0f 84 cd 0c 00 00    	je     ffffffff80211f48 <_RME_Svc_Handler+0x1138>
ffffffff8021127b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021127f:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211282:	0f 83 53 2d 00 00    	jae    ffffffff80213fdb <_RME_Svc_Handler+0x31cb>
ffffffff80211288:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8021128f:	ff 00 00 
ffffffff80211292:	48 89 d0             	mov    %rdx,%rax
ffffffff80211295:	49 8b 57 18          	mov    0x18(%r15),%rdx
ffffffff80211299:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff802112a0:	00 00 00 
ffffffff802112a3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802112a7:	48 01 d0             	add    %rdx,%rax
ffffffff802112aa:	48 8b 30             	mov    (%rax),%rsi
ffffffff802112ad:	49 89 f1             	mov    %rsi,%r9
ffffffff802112b0:	49 21 f9             	and    %rdi,%r9
ffffffff802112b3:	4d 39 c1             	cmp    %r8,%r9
ffffffff802112b6:	0f 84 c6 0c 00 00    	je     ffffffff80211f82 <_RME_Svc_Handler+0x1172>
ffffffff802112bc:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802112c0:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802112c4:	0f 85 97 1e 00 00    	jne    ffffffff80213161 <_RME_Svc_Handler+0x2351>
ffffffff802112ca:	4c 89 e6             	mov    %r12,%rsi
ffffffff802112cd:	4c 8b 48 28          	mov    0x28(%rax),%r9
ffffffff802112d1:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff802112d7:	4c 39 ce             	cmp    %r9,%rsi
ffffffff802112da:	0f 83 fb 2c 00 00    	jae    ffffffff80213fdb <_RME_Svc_Handler+0x31cb>
ffffffff802112e0:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802112e4:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff802112e8:	48 89 f0             	mov    %rsi,%rax
ffffffff802112eb:	48 8b 36             	mov    (%rsi),%rsi
ffffffff802112ee:	48 21 f7             	and    %rsi,%rdi
ffffffff802112f1:	4c 39 c7             	cmp    %r8,%rdi
ffffffff802112f4:	0f 84 88 0c 00 00    	je     ffffffff80211f82 <_RME_Svc_Handler+0x1172>
ffffffff802112fa:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802112fe:	48 83 fe 06          	cmp    $0x6,%rsi
ffffffff80211302:	0f 85 59 1e 00 00    	jne    ffffffff80213161 <_RME_Svc_Handler+0x2351>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80211308:	f6 40 10 08          	testb  $0x8,0x10(%rax)
ffffffff8021130c:	0f 84 a5 2c 00 00    	je     ffffffff80213fb7 <_RME_Svc_Handler+0x31a7>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff80211312:	4c 8b 40 18          	mov    0x18(%rax),%r8
        if(Thread[Count]->Sched.Local!=Local)
ffffffff80211316:	49 3b 68 28          	cmp    0x28(%r8),%rbp
ffffffff8021131a:	0f 85 b6 23 00 00    	jne    ffffffff802136d6 <_RME_Svc_Handler+0x28c6>
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff80211320:	4d 89 e2             	mov    %r12,%r10
ffffffff80211323:	49 c1 ea 20          	shr    $0x20,%r10
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff80211327:	4d 39 50 48          	cmp    %r10,0x48(%r8)
ffffffff8021132b:	0f 82 3b 31 00 00    	jb     ffffffff8021446c <_RME_Svc_Handler+0x365c>
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff80211331:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff80211336:	4d 89 e9             	mov    %r13,%r9
ffffffff80211339:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff8021133d:	49 c1 ef 20          	shr    $0x20,%r15
    for(Count=0U;Count<Number;Count++)
ffffffff80211341:	49 83 fe 01          	cmp    $0x1,%r14
ffffffff80211345:	0f 84 61 2e 00 00    	je     ffffffff802141ac <_RME_Svc_Handler+0x339c>
ffffffff8021134b:	44 89 e8             	mov    %r13d,%eax
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff8021134e:	41 f7 c5 00 80 00 00 	test   $0x8000,%r13d
ffffffff80211355:	0f 84 c5 1d 00 00    	je     ffffffff80213120 <_RME_Svc_Handler+0x2310>
ffffffff8021135b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021135f:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211362:	0f 83 73 2c 00 00    	jae    ffffffff80213fdb <_RME_Svc_Handler+0x31cb>
ffffffff80211368:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8021136f:	ff 00 00 
ffffffff80211372:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211376:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021137d:	00 00 00 
ffffffff80211380:	48 01 d0             	add    %rdx,%rax
ffffffff80211383:	48 8b 30             	mov    (%rax),%rsi
ffffffff80211386:	49 21 f3             	and    %rsi,%r11
ffffffff80211389:	49 39 fb             	cmp    %rdi,%r11
ffffffff8021138c:	0f 84 f0 0b 00 00    	je     ffffffff80211f82 <_RME_Svc_Handler+0x1172>
ffffffff80211392:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80211396:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021139a:	0f 85 c1 1d 00 00    	jne    ffffffff80213161 <_RME_Svc_Handler+0x2351>
ffffffff802113a0:	4c 89 ee             	mov    %r13,%rsi
ffffffff802113a3:	4c 8b 58 28          	mov    0x28(%rax),%r11
ffffffff802113a7:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff802113ad:	4c 39 de             	cmp    %r11,%rsi
ffffffff802113b0:	0f 83 25 2c 00 00    	jae    ffffffff80213fdb <_RME_Svc_Handler+0x31cb>
ffffffff802113b6:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802113ba:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff802113be:	4c 8b 1e             	mov    (%rsi),%r11
ffffffff802113c1:	48 89 f0             	mov    %rsi,%rax
ffffffff802113c4:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802113cb:	ff 00 00 
ffffffff802113ce:	4c 21 de             	and    %r11,%rsi
ffffffff802113d1:	48 39 fe             	cmp    %rdi,%rsi
ffffffff802113d4:	0f 84 a8 0b 00 00    	je     ffffffff80211f82 <_RME_Svc_Handler+0x1172>
ffffffff802113da:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff802113de:	49 83 fb 06          	cmp    $0x6,%r11
ffffffff802113e2:	0f 85 79 1d 00 00    	jne    ffffffff80213161 <_RME_Svc_Handler+0x2351>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff802113e8:	f6 40 10 08          	testb  $0x8,0x10(%rax)
ffffffff802113ec:	0f 84 c5 2b 00 00    	je     ffffffff80213fb7 <_RME_Svc_Handler+0x31a7>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff802113f2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802113f6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        if(Thread[Count]->Sched.Local!=Local)
ffffffff802113fb:	48 39 68 28          	cmp    %rbp,0x28(%rax)
ffffffff802113ff:	0f 85 d1 22 00 00    	jne    ffffffff802136d6 <_RME_Svc_Handler+0x28c6>
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff80211405:	4c 39 48 48          	cmp    %r9,0x48(%rax)
ffffffff80211409:	0f 82 5d 30 00 00    	jb     ffffffff8021446c <_RME_Svc_Handler+0x365c>
    for(Count=0U;Count<Number;Count++)
ffffffff8021140f:	49 83 fe 03          	cmp    $0x3,%r14
ffffffff80211413:	75 7b                	jne    ffffffff80211490 <_RME_Svc_Handler+0x680>
ffffffff80211415:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
ffffffff8021141a:	89 f0                	mov    %esi,%eax
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff8021141c:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80211422:	0f 85 56 1f 00 00    	jne    ffffffff8021337e <_RME_Svc_Handler+0x256e>
ffffffff80211428:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021142b:	0f 83 aa 2b 00 00    	jae    ffffffff80213fdb <_RME_Svc_Handler+0x31cb>
ffffffff80211431:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211438:	ff 00 00 
ffffffff8021143b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021143f:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211446:	00 00 00 
ffffffff80211449:	48 01 c2             	add    %rax,%rdx
ffffffff8021144c:	48 8b 02             	mov    (%rdx),%rax
ffffffff8021144f:	48 21 c1             	and    %rax,%rcx
ffffffff80211452:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211455:	0f 84 27 0b 00 00    	je     ffffffff80211f82 <_RME_Svc_Handler+0x1172>
ffffffff8021145b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021145f:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80211463:	0f 85 f8 1c 00 00    	jne    ffffffff80213161 <_RME_Svc_Handler+0x2351>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80211469:	f6 42 10 08          	testb  $0x8,0x10(%rdx)
ffffffff8021146d:	0f 84 44 2b 00 00    	je     ffffffff80213fb7 <_RME_Svc_Handler+0x31a7>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff80211473:	48 8b 42 18          	mov    0x18(%rdx),%rax
ffffffff80211477:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
        if(Thread[Count]->Sched.Local!=Local)
ffffffff8021147c:	48 3b 68 28          	cmp    0x28(%rax),%rbp
ffffffff80211480:	0f 85 50 22 00 00    	jne    ffffffff802136d6 <_RME_Svc_Handler+0x28c6>
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff80211486:	4c 39 78 48          	cmp    %r15,0x48(%rax)
ffffffff8021148a:	0f 82 dc 2f 00 00    	jb     ffffffff8021446c <_RME_Svc_Handler+0x365c>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80211490:	31 f6                	xor    %esi,%esi
ffffffff80211492:	48 89 df             	mov    %rbx,%rdi
ffffffff80211495:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
ffffffff8021149a:	4c 89 54 24 10       	mov    %r10,0x10(%rsp)
ffffffff8021149f:	4c 89 0c 24          	mov    %r9,(%rsp)
ffffffff802114a3:	e8 78 a2 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff802114a8:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
ffffffff802114ad:	4c 8b 0c 24          	mov    (%rsp),%r9
ffffffff802114b1:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
ffffffff802114b6:	49 83 78 38 00       	cmpq   $0x0,0x38(%r8)
ffffffff802114bb:	0f 84 4f 2d 00 00    	je     ffffffff80214210 <_RME_Svc_Handler+0x3400>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff802114c1:	4d 89 50 40          	mov    %r10,0x40(%r8)
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff802114c5:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
ffffffff802114ca:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
ffffffff802114cf:	0f 84 26 2e 00 00    	je     ffffffff802142fb <_RME_Svc_Handler+0x34eb>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff802114d5:	4c 89 4f 40          	mov    %r9,0x40(%rdi)
    for(Count=0U;Count<Number;Count++)
ffffffff802114d9:	49 83 fe 03          	cmp    $0x3,%r14
ffffffff802114dd:	75 14                	jne    ffffffff802114f3 <_RME_Svc_Handler+0x6e3>
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff802114df:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
ffffffff802114e4:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
ffffffff802114e9:	0f 84 61 2e 00 00    	je     ffffffff80214350 <_RME_Svc_Handler+0x3540>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff802114ef:	4c 89 7f 40          	mov    %r15,0x40(%rdi)
    _RME_Kern_High(Reg,Local);
ffffffff802114f3:	48 89 ee             	mov    %rbp,%rsi
ffffffff802114f6:	48 89 df             	mov    %rbx,%rdi
ffffffff802114f9:	e8 12 f8 ff ff       	call   ffffffff80210d10 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802114fe:	e9 b5 f9 ff ff       	jmp    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
ffffffff80211503:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Retval=_RME_Thd_Exec_Set(Cpt,
ffffffff80211508:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff8021150d:	48 8b 6c 24 40       	mov    0x40(%rsp),%rbp
ffffffff80211512:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
ffffffff80211517:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
ffffffff8021151c:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff80211520:	49 8b 4f 28          	mov    0x28(%r15),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211524:	f6 c4 80             	test   $0x80,%ah
ffffffff80211527:	0f 84 6b 08 00 00    	je     ffffffff80211d98 <_RME_Svc_Handler+0xf88>
ffffffff8021152d:	48 89 c2             	mov    %rax,%rdx
ffffffff80211530:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211534:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211537:	0f 83 e7 1e 00 00    	jae    ffffffff80213424 <_RME_Svc_Handler+0x2614>
ffffffff8021153d:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80211544:	ff 00 00 
ffffffff80211547:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021154b:	48 01 f2             	add    %rsi,%rdx
ffffffff8021154e:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211555:	00 00 00 
ffffffff80211558:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8021155b:	49 89 c8             	mov    %rcx,%r8
ffffffff8021155e:	49 21 f8             	and    %rdi,%r8
ffffffff80211561:	49 39 f0             	cmp    %rsi,%r8
ffffffff80211564:	0f 84 08 1f 00 00    	je     ffffffff80213472 <_RME_Svc_Handler+0x2662>
ffffffff8021156a:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021156e:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80211572:	0f 85 61 08 00 00    	jne    ffffffff80211dd9 <_RME_Svc_Handler+0xfc9>
ffffffff80211578:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8021157c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211581:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211584:	0f 83 9a 1e 00 00    	jae    ffffffff80213424 <_RME_Svc_Handler+0x2614>
ffffffff8021158a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021158e:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80211592:	48 8b 08             	mov    (%rax),%rcx
ffffffff80211595:	48 21 cf             	and    %rcx,%rdi
ffffffff80211598:	48 39 f7             	cmp    %rsi,%rdi
ffffffff8021159b:	0f 84 d1 1e 00 00    	je     ffffffff80213472 <_RME_Svc_Handler+0x2662>
ffffffff802115a1:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802115a5:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff802115a9:	0f 85 2a 08 00 00    	jne    ffffffff80211dd9 <_RME_Svc_Handler+0xfc9>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff802115af:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff802115b3:	0f 84 b1 20 00 00    	je     ffffffff8021366a <_RME_Svc_Handler+0x285a>
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff802115b9:	4c 8b 70 18          	mov    0x18(%rax),%r14
    Local=RME_CPU_LOCAL();
ffffffff802115bd:	e8 7d a2 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802115c2:	49 89 c7             	mov    %rax,%r15
    if(Thread->Sched.Local!=Local)
ffffffff802115c5:	49 3b 46 28          	cmp    0x28(%r14),%rax
ffffffff802115c9:	0f 85 00 2a 00 00    	jne    ffffffff80213fcf <_RME_Svc_Handler+0x31bf>
    if((Entry!=RME_NULL)&&(Stack!=RME_NULL))
ffffffff802115cf:	4d 85 e4             	test   %r12,%r12
ffffffff802115d2:	74 2b                	je     ffffffff802115ff <_RME_Svc_Handler+0x7ef>
ffffffff802115d4:	4d 85 ed             	test   %r13,%r13
ffffffff802115d7:	74 26                	je     ffffffff802115ff <_RME_Svc_Handler+0x7ef>
        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
ffffffff802115d9:	4d 8b 86 90 00 00 00 	mov    0x90(%r14),%r8
ffffffff802115e0:	48 89 e9             	mov    %rbp,%rcx
ffffffff802115e3:	4c 89 ea             	mov    %r13,%rdx
ffffffff802115e6:	4c 89 e6             	mov    %r12,%rsi
ffffffff802115e9:	48 bf ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdi
ffffffff802115f0:	ff ff 7f 
ffffffff802115f3:	49 23 be 88 00 00 00 	and    0x88(%r14),%rdi
ffffffff802115fa:	e8 91 93 00 00       	call   ffffffff8021a990 <__RME_Thd_Reg_Init>
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff802115ff:	31 f6                	xor    %esi,%esi
ffffffff80211601:	48 89 df             	mov    %rbx,%rdi
ffffffff80211604:	e8 17 a1 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80211609:	49 83 7e 38 03       	cmpq   $0x3,0x38(%r14)
ffffffff8021160e:	0f 85 a4 f8 ff ff    	jne    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
        if(Thread->Sched.Slice!=0U)
ffffffff80211614:	49 83 7e 30 00       	cmpq   $0x0,0x30(%r14)
ffffffff80211619:	0f 84 57 20 00 00    	je     ffffffff80213676 <_RME_Svc_Handler+0x2866>
    Prio=Thd->Sched.Prio;
ffffffff8021161f:	49 8b 4e 40          	mov    0x40(%r14),%rcx
    Local=Thd->Sched.Local;
ffffffff80211623:	49 8b 46 28          	mov    0x28(%r14),%rax
            Thread->Sched.State=RME_THD_READY;
ffffffff80211627:	49 c7 46 38 00 00 00 	movq   $0x0,0x38(%r14)
ffffffff8021162e:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8021162f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80211632:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80211636:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff8021163a:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff8021163f:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff80211643:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211648:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff8021164b:	4c 89 77 30          	mov    %r14,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021164f:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff80211653:	66 48 0f 6e e2       	movq   %rdx,%xmm4
ffffffff80211658:	66 0f 6c c4          	punpcklqdq %xmm4,%xmm0
ffffffff8021165c:	41 0f 11 06          	movups %xmm0,(%r14)
    Prev->Next=New;
ffffffff80211660:	4c 89 32             	mov    %r14,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211663:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80211668:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021166b:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        _RME_Kern_High(Reg,Local);
ffffffff80211670:	4c 89 fe             	mov    %r15,%rsi
ffffffff80211673:	48 89 df             	mov    %rbx,%rdi
ffffffff80211676:	e8 95 f6 ff ff       	call   ffffffff80210d10 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021167b:	e9 38 f8 ff ff       	jmp    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
                                       (rme_cid_t)Param[0]);                /* rme_cid_t Cap_Thd */
ffffffff80211680:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff80211685:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff80211689:	49 8b 4f 28          	mov    0x28(%r15),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8021168d:	f6 c4 80             	test   $0x80,%ah
ffffffff80211690:	0f 84 ba 06 00 00    	je     ffffffff80211d50 <_RME_Svc_Handler+0xf40>
ffffffff80211696:	48 89 c2             	mov    %rax,%rdx
ffffffff80211699:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021169d:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802116a0:	0f 83 5a 1d 00 00    	jae    ffffffff80213400 <_RME_Svc_Handler+0x25f0>
ffffffff802116a6:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802116ad:	00 00 00 
ffffffff802116b0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802116b4:	48 01 f2             	add    %rsi,%rdx
ffffffff802116b7:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802116be:	ff 00 00 
ffffffff802116c1:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff802116c4:	49 89 c8             	mov    %rcx,%r8
ffffffff802116c7:	49 21 f0             	and    %rsi,%r8
ffffffff802116ca:	49 39 f8             	cmp    %rdi,%r8
ffffffff802116cd:	0f 84 b2 06 00 00    	je     ffffffff80211d85 <_RME_Svc_Handler+0xf75>
ffffffff802116d3:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802116d7:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802116db:	0f 85 b5 1d 00 00    	jne    ffffffff80213496 <_RME_Svc_Handler+0x2686>
ffffffff802116e1:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff802116e5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802116ea:	48 39 c8             	cmp    %rcx,%rax
ffffffff802116ed:	0f 83 0d 1d 00 00    	jae    ffffffff80213400 <_RME_Svc_Handler+0x25f0>
ffffffff802116f3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802116f7:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802116fb:	48 89 c5             	mov    %rax,%rbp
ffffffff802116fe:	48 8b 00             	mov    (%rax),%rax
ffffffff80211701:	48 21 c6             	and    %rax,%rsi
ffffffff80211704:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80211707:	0f 84 78 06 00 00    	je     ffffffff80211d85 <_RME_Svc_Handler+0xf75>
ffffffff8021170d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211711:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80211715:	0f 85 7b 1d 00 00    	jne    ffffffff80213496 <_RME_Svc_Handler+0x2686>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff8021171b:	f6 45 10 10          	testb  $0x10,0x10(%rbp)
ffffffff8021171f:	0f 84 39 1f 00 00    	je     ffffffff8021365e <_RME_Svc_Handler+0x284e>
    Local=RME_CPU_LOCAL();
ffffffff80211725:	e8 15 a1 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thread=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff8021172a:	48 8b 6d 18          	mov    0x18(%rbp),%rbp
    Local=RME_CPU_LOCAL();
ffffffff8021172e:	49 89 c4             	mov    %rax,%r12
    if(Thread->Sched.Local!=Local)
ffffffff80211731:	48 3b 45 28          	cmp    0x28(%rbp),%rax
ffffffff80211735:	0f 85 88 28 00 00    	jne    ffffffff80213fc3 <_RME_Svc_Handler+0x31b3>
    if(Thread->Sched.Sched_Ref!=0U)
ffffffff8021173b:	48 83 7d 60 00       	cmpq   $0x0,0x60(%rbp)
ffffffff80211740:	0f 85 36 2b 00 00    	jne    ffffffff8021427c <_RME_Svc_Handler+0x346c>
    Thread->Sched.Sched_Thd->Sched.Sched_Ref--;
ffffffff80211746:	48 8b 45 68          	mov    0x68(%rbp),%rax
ffffffff8021174a:	48 83 68 60 01       	subq   $0x1,0x60(%rax)
    if(Thread->Sched.Notif.Next!=&(Thread->Sched.Notif))
ffffffff8021174f:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff80211753:	48 8d 45 10          	lea    0x10(%rbp),%rax
ffffffff80211757:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021175a:	74 18                	je     ffffffff80211774 <_RME_Svc_Handler+0x964>
        _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff8021175c:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    Head->Next=Head;
ffffffff80211760:	66 48 0f 6e c0       	movq   %rax,%xmm0
ffffffff80211765:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
    Next->Prev=Prev;
ffffffff80211769:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
    Prev->Next=Next;
ffffffff8021176d:	48 89 11             	mov    %rdx,(%rcx)
    Head->Next=Head;
ffffffff80211770:	0f 11 45 10          	movups %xmm0,0x10(%rbp)
    if(Thread->Sched.Sched_Sig!=(void*)RME_NULL)
ffffffff80211774:	48 8b 45 70          	mov    0x70(%rbp),%rax
ffffffff80211778:	48 85 c0             	test   %rax,%rax
ffffffff8021177b:	74 0d                	je     ffffffff8021178a <_RME_Svc_Handler+0x97a>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8021177d:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80211784:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff8021178a:	31 f6                	xor    %esi,%esi
ffffffff8021178c:	48 89 df             	mov    %rbx,%rdi
ffffffff8021178f:	e8 8c 9f 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
    if(Thread->Sched.State==RME_THD_READY)
ffffffff80211794:	48 8b 45 38          	mov    0x38(%rbp),%rax
ffffffff80211798:	48 85 c0             	test   %rax,%rax
ffffffff8021179b:	0f 84 cf 1a 00 00    	je     ffffffff80213270 <_RME_Svc_Handler+0x2460>
    else if(Thread->Sched.State==RME_THD_BLOCKED)
ffffffff802117a1:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802117a5:	0f 84 50 1d 00 00    	je     ffffffff802134fb <_RME_Svc_Handler+0x26eb>
    Thread->Sched.Slice=0U;
ffffffff802117ab:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff802117b2:	00 
    if(Local->Thd_Cur==Thread)
ffffffff802117b3:	49 3b 6c 24 08       	cmp    0x8(%r12),%rbp
ffffffff802117b8:	0f 84 ca 1a 00 00    	je     ffffffff80213288 <_RME_Svc_Handler+0x2478>
    RME_WRITE_RELEASE((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff802117be:	48 c7 45 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%rbp)
ffffffff802117c5:	ff 
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802117c6:	e9 ed f6 ff ff       	jmp    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
ffffffff802117cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Retval=_RME_Kfn_Act(Cpt,
ffffffff802117d0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff802117d5:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
ffffffff802117da:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
                                RME_PARAM_D1(Param[0]),                     /* rme_ptr_t Sub_ID */
ffffffff802117df:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff802117e4:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff802117e8:	f6 c4 80             	test   $0x80,%ah
ffffffff802117eb:	0f 84 0f 05 00 00    	je     ffffffff80211d00 <_RME_Svc_Handler+0xef0>
ffffffff802117f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802117f4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802117f8:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802117fb:	0f 83 17 1c 00 00    	jae    ffffffff80213418 <_RME_Svc_Handler+0x2608>
ffffffff80211801:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff80211808:	ff 00 00 
ffffffff8021180b:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021180f:	49 03 57 18          	add    0x18(%r15),%rdx
ffffffff80211813:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8021181a:	00 00 00 
ffffffff8021181d:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80211820:	48 89 f5             	mov    %rsi,%rbp
ffffffff80211823:	4c 21 dd             	and    %r11,%rbp
ffffffff80211826:	4c 39 d5             	cmp    %r10,%rbp
ffffffff80211829:	0f 84 4f 1c 00 00    	je     ffffffff8021347e <_RME_Svc_Handler+0x266e>
ffffffff8021182f:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80211833:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80211837:	0f 85 05 05 00 00    	jne    ffffffff80211d42 <_RME_Svc_Handler+0xf32>
ffffffff8021183d:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80211841:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211846:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211849:	0f 83 c9 1b 00 00    	jae    ffffffff80213418 <_RME_Svc_Handler+0x2608>
ffffffff8021184f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211853:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80211857:	4c 89 da             	mov    %r11,%rdx
ffffffff8021185a:	48 8b 30             	mov    (%rax),%rsi
ffffffff8021185d:	48 21 f2             	and    %rsi,%rdx
ffffffff80211860:	4c 39 d2             	cmp    %r10,%rdx
ffffffff80211863:	0f 84 15 1c 00 00    	je     ffffffff8021347e <_RME_Svc_Handler+0x266e>
ffffffff80211869:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021186d:	48 83 fe 01          	cmp    $0x1,%rsi
ffffffff80211871:	0f 85 cb 04 00 00    	jne    ffffffff80211d42 <_RME_Svc_Handler+0xf32>
                   struct RME_Cap_Kfn*,Kfn_Op,Type_Stat);    

    /* Check if the range of calling is allowed - kernel function specific */
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff80211877:	48 8b 40 10          	mov    0x10(%rax),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8021187b:	89 ca                	mov    %ecx,%edx
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021187d:	48 89 c6             	mov    %rax,%rsi
ffffffff80211880:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff80211884:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80211887:	0f 82 53 21 00 00    	jb     ffffffff802139e0 <_RME_Svc_Handler+0x2bd0>
       (Func_ID<RME_KFN_FLAG_LOW(Kfn_Op->Head.Flag)))
ffffffff8021188d:	89 c0                	mov    %eax,%eax
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021188f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211892:	0f 82 48 21 00 00    	jb     ffffffff802139e0 <_RME_Svc_Handler+0x2bd0>
            Retval=_RME_Kfn_Act(Cpt,
ffffffff80211898:	48 c1 e9 20          	shr    $0x20,%rcx
        RME_COV_MARKER();
        /* No action required */
    }

    /* Return whatever the function returns */
    return __RME_Kfn_Handler(Cpt,Reg,Func_ID,Sub_ID,Param1,Param2);
ffffffff8021189c:	48 89 de             	mov    %rbx,%rsi
ffffffff8021189f:	4c 89 ff             	mov    %r15,%rdi
ffffffff802118a2:	e8 29 77 00 00       	call   ffffffff80218fd0 <__RME_Kfn_Handler>
            RME_SWITCH_RETURN(Reg, Retval);
ffffffff802118a7:	48 85 c0             	test   %rax,%rax
ffffffff802118aa:	0f 89 08 f6 ff ff    	jns    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
ffffffff802118b0:	48 89 c6             	mov    %rax,%rsi
ffffffff802118b3:	48 89 df             	mov    %rbx,%rdi
ffffffff802118b6:	e8 65 9e 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
ffffffff802118bb:	e9 f8 f5 ff ff       	jmp    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Sig */
ffffffff802118c0:	48 8b 6c 24 30       	mov    0x30(%rsp),%rbp
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff802118c5:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
ffffffff802118ca:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff802118ce:	49 8b 57 28          	mov    0x28(%r15),%rdx
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802118d2:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff802118d8:	0f 84 0a 05 00 00    	je     ffffffff80211de8 <_RME_Svc_Handler+0xfd8>
ffffffff802118de:	48 89 e8             	mov    %rbp,%rax
ffffffff802118e1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802118e5:	48 39 d0             	cmp    %rdx,%rax
ffffffff802118e8:	0f 83 1e 1b 00 00    	jae    ffffffff8021340c <_RME_Svc_Handler+0x25fc>
ffffffff802118ee:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802118f5:	00 00 00 
ffffffff802118f8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802118fc:	48 01 c8             	add    %rcx,%rax
ffffffff802118ff:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211906:	ff 00 00 
ffffffff80211909:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021190c:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021190f:	48 21 cf             	and    %rcx,%rdi
ffffffff80211912:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80211915:	0f 84 01 05 00 00    	je     ffffffff80211e1c <_RME_Svc_Handler+0x100c>
ffffffff8021191b:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021191f:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80211923:	0f 85 79 1b 00 00    	jne    ffffffff802134a2 <_RME_Svc_Handler+0x2692>
ffffffff80211929:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021192d:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff80211933:	48 39 d5             	cmp    %rdx,%rbp
ffffffff80211936:	0f 83 d0 1a 00 00    	jae    ffffffff8021340c <_RME_Svc_Handler+0x25fc>
ffffffff8021193c:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff80211940:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff80211944:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80211948:	48 21 c1             	and    %rax,%rcx
ffffffff8021194b:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021194e:	0f 84 c8 04 00 00    	je     ffffffff80211e1c <_RME_Svc_Handler+0x100c>
ffffffff80211954:	48 89 c2             	mov    %rax,%rdx
ffffffff80211957:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021195b:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8021195f:	0f 85 3d 1b 00 00    	jne    ffffffff802134a2 <_RME_Svc_Handler+0x2692>
    switch(Option)
ffffffff80211965:	49 83 fc 02          	cmp    $0x2,%r12
ffffffff80211969:	0f 84 e5 1a 00 00    	je     ffffffff80213454 <_RME_Svc_Handler+0x2644>
ffffffff8021196f:	0f 87 db 18 00 00    	ja     ffffffff80213250 <_RME_Svc_Handler+0x2440>
ffffffff80211975:	4d 85 e4             	test   %r12,%r12
ffffffff80211978:	0f 84 e5 1a 00 00    	je     ffffffff80213463 <_RME_Svc_Handler+0x2653>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BM);
ffffffff8021197e:	f6 45 10 04          	testb  $0x4,0x10(%rbp)
ffffffff80211982:	0f 84 dc 18 00 00    	je     ffffffff80213264 <_RME_Svc_Handler+0x2454>
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff80211988:	85 c0                	test   %eax,%eax
ffffffff8021198a:	74 04                	je     ffffffff80211990 <_RME_Svc_Handler+0xb80>
ffffffff8021198c:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
    if(Sig_Root->Thd!=(void*)RME_NULL)
ffffffff80211990:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff80211995:	0f 85 54 1b 00 00    	jne    ffffffff802134ef <_RME_Svc_Handler+0x26df>
    Local=RME_CPU_LOCAL();
ffffffff8021199b:	e8 9f 9e ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thd_Cur=Local->Thd_Cur;
ffffffff802119a0:	48 8b 78 08          	mov    0x8(%rax),%rdi
    Local=RME_CPU_LOCAL();
ffffffff802119a4:	49 89 c0             	mov    %rax,%r8
    if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff802119a7:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff802119ae:	ff ff 7f 
ffffffff802119b1:	48 39 47 30          	cmp    %rax,0x30(%rdi)
ffffffff802119b5:	0f 84 45 2a 00 00    	je     ffffffff80214400 <_RME_Svc_Handler+0x35f0>
    Old_Value=Sig_Root->Sig_Num;
ffffffff802119bb:	48 8b 45 28          	mov    0x28(%rbp),%rax
    if(Old_Value>0U)
ffffffff802119bf:	48 85 c0             	test   %rax,%rax
ffffffff802119c2:	0f 84 38 18 00 00    	je     ffffffff80213200 <_RME_Svc_Handler+0x23f0>
        if((Option==RME_RCV_BS)||(Option==RME_RCV_NS))
ffffffff802119c8:	49 f7 c4 fd ff ff ff 	test   $0xfffffffffffffffd,%r12
ffffffff802119cf:	0f 85 fb 1a 00 00    	jne    ffffffff802134d0 <_RME_Svc_Handler+0x26c0>
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff802119d5:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802119d9:	f0 48 0f b1 55 28    	lock cmpxchg %rdx,0x28(%rbp)
ffffffff802119df:	0f 94 c2             	sete   %dl
ffffffff802119e2:	84 d2                	test   %dl,%dl
ffffffff802119e4:	0f 84 f9 1a 00 00    	je     ffffffff802134e3 <_RME_Svc_Handler+0x26d3>
            __RME_Svc_Retval_Set(Reg,1);
ffffffff802119ea:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802119ef:	48 89 df             	mov    %rbx,%rdi
ffffffff802119f2:	e8 29 9d 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802119f7:	e9 bc f4 ff ff       	jmp    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
ffffffff802119fc:	0f 1f 40 00          	nopl   0x0(%rax)
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff80211a00:	48 8b 6c 24 30       	mov    0x30(%rsp),%rbp
ffffffff80211a05:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80211a09:	49 8b 57 28          	mov    0x28(%r15),%rdx
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80211a0d:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff80211a13:	0f 84 a7 02 00 00    	je     ffffffff80211cc0 <_RME_Svc_Handler+0xeb0>
ffffffff80211a19:	48 89 e8             	mov    %rbp,%rax
ffffffff80211a1c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211a20:	48 39 d0             	cmp    %rdx,%rax
ffffffff80211a23:	0f 83 07 1a 00 00    	jae    ffffffff80213430 <_RME_Svc_Handler+0x2620>
ffffffff80211a29:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211a30:	00 00 00 
ffffffff80211a33:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211a37:	48 01 c8             	add    %rcx,%rax
ffffffff80211a3a:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211a41:	ff 00 00 
ffffffff80211a44:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211a47:	48 89 d7             	mov    %rdx,%rdi
ffffffff80211a4a:	48 21 cf             	and    %rcx,%rdi
ffffffff80211a4d:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80211a50:	0f 84 9e 02 00 00    	je     ffffffff80211cf4 <_RME_Svc_Handler+0xee4>
ffffffff80211a56:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211a5a:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80211a5e:	0f 85 26 1a 00 00    	jne    ffffffff8021348a <_RME_Svc_Handler+0x267a>
ffffffff80211a64:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80211a68:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff80211a6e:	48 39 d5             	cmp    %rdx,%rbp
ffffffff80211a71:	0f 83 b9 19 00 00    	jae    ffffffff80213430 <_RME_Svc_Handler+0x2620>
ffffffff80211a77:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff80211a7b:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff80211a7f:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80211a83:	48 21 c1             	and    %rax,%rcx
ffffffff80211a86:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211a89:	0f 84 65 02 00 00    	je     ffffffff80211cf4 <_RME_Svc_Handler+0xee4>
ffffffff80211a8f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211a93:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80211a97:	0f 85 ed 19 00 00    	jne    ffffffff8021348a <_RME_Svc_Handler+0x267a>
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff80211a9d:	f6 45 10 01          	testb  $0x1,0x10(%rbp)
ffffffff80211aa1:	0f 84 ab 1b 00 00    	je     ffffffff80213652 <_RME_Svc_Handler+0x2842>
    Local=RME_CPU_LOCAL();
ffffffff80211aa7:	e8 93 9d ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff80211aac:	44 8b 65 00          	mov    0x0(%rbp),%r12d
ffffffff80211ab0:	45 85 e4             	test   %r12d,%r12d
ffffffff80211ab3:	74 04                	je     ffffffff80211ab9 <_RME_Svc_Handler+0xca9>
ffffffff80211ab5:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
    Thd_Rcv=Sig_Root->Thd;
ffffffff80211ab9:	4c 8b 65 30          	mov    0x30(%rbp),%r12
    if(Thd_Rcv!=(void*)RME_NULL)
ffffffff80211abd:	4d 85 e4             	test   %r12,%r12
ffffffff80211ac0:	74 0b                	je     ffffffff80211acd <_RME_Svc_Handler+0xcbd>
        if(Thd_Rcv->Sched.Local==Local)
ffffffff80211ac2:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
ffffffff80211ac7:	0f 84 dc 1a 00 00    	je     ffffffff802135a9 <_RME_Svc_Handler+0x2799>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80211acd:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80211ad2:	f0 48 0f c1 45 28    	lock xadd %rax,0x28(%rbp)
        if(RME_FETCH_ADD(&(Sig_Root->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80211ad8:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80211adf:	ff ff 7f 
ffffffff80211ae2:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211ae5:	0f 82 ab 26 00 00    	jb     ffffffff80214196 <_RME_Svc_Handler+0x3386>
        __RME_Svc_Retval_Set(Reg,0);
ffffffff80211aeb:	31 f6                	xor    %esi,%esi
ffffffff80211aed:	48 89 df             	mov    %rbx,%rdi
ffffffff80211af0:	e8 2b 9c 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211af5:	e9 be f3 ff ff       	jmp    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
ffffffff80211afa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                            (rme_cid_t)Param[0],                            /* rme_cid_t Cap_Inv */
ffffffff80211b00:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
        Retval=_RME_Inv_Act(Cpt,
ffffffff80211b05:	48 8b 6c 24 38       	mov    0x38(%rsp),%rbp
ffffffff80211b0a:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff80211b0e:	49 8b 4f 28          	mov    0x28(%r15),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80211b12:	f6 c4 80             	test   $0x80,%ah
ffffffff80211b15:	0f 84 4d 01 00 00    	je     ffffffff80211c68 <_RME_Svc_Handler+0xe58>
ffffffff80211b1b:	48 89 c2             	mov    %rax,%rdx
ffffffff80211b1e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211b22:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211b25:	0f 83 e5 17 00 00    	jae    ffffffff80213310 <_RME_Svc_Handler+0x2500>
ffffffff80211b2b:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80211b32:	00 00 00 
ffffffff80211b35:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80211b39:	48 01 f2             	add    %rsi,%rdx
ffffffff80211b3c:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80211b43:	ff 00 00 
ffffffff80211b46:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80211b49:	49 89 c8             	mov    %rcx,%r8
ffffffff80211b4c:	49 21 f0             	and    %rsi,%r8
ffffffff80211b4f:	49 39 f8             	cmp    %rdi,%r8
ffffffff80211b52:	0f 84 43 01 00 00    	je     ffffffff80211c9b <_RME_Svc_Handler+0xe8b>
ffffffff80211b58:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80211b5c:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80211b60:	0f 85 d6 18 00 00    	jne    ffffffff8021343c <_RME_Svc_Handler+0x262c>
ffffffff80211b66:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80211b6a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211b6f:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211b72:	0f 83 98 17 00 00    	jae    ffffffff80213310 <_RME_Svc_Handler+0x2500>
ffffffff80211b78:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211b7c:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80211b80:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211b83:	48 21 d6             	and    %rdx,%rsi
ffffffff80211b86:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80211b89:	0f 84 0c 01 00 00    	je     ffffffff80211c9b <_RME_Svc_Handler+0xe8b>
ffffffff80211b8f:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211b93:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff80211b97:	0f 85 9f 18 00 00    	jne    ffffffff8021343c <_RME_Svc_Handler+0x262c>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff80211b9d:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80211ba1:	0f 84 88 19 00 00    	je     ffffffff8021352f <_RME_Svc_Handler+0x271f>
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff80211ba7:	4c 8b 60 18          	mov    0x18(%rax),%r12
    if(RME_UNLIKELY(Thd_Act!=(void*)0U))
ffffffff80211bab:	49 83 7c 24 18 00    	cmpq   $0x0,0x18(%r12)
ffffffff80211bb1:	0f 85 91 18 00 00    	jne    ffffffff80213448 <_RME_Svc_Handler+0x2638>
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff80211bb7:	e8 83 9c ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80211bbc:	4c 8b 68 08          	mov    0x8(%rax),%r13
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80211bc0:	31 c0                	xor    %eax,%eax
ffffffff80211bc2:	f0 4d 0f b1 6c 24 18 	lock cmpxchg %r13,0x18(%r12)
ffffffff80211bc9:	0f 94 c0             	sete   %al
    if(RME_UNLIKELY(RME_COMP_SWAP((volatile rme_ptr_t*)&(Invocation->Thd_Act),
ffffffff80211bcc:	84 c0                	test   %al,%al
ffffffff80211bce:	0f 84 74 18 00 00    	je     ffffffff80213448 <_RME_Svc_Handler+0x2638>
    __RME_Inv_Reg_Save(&(Invocation->Ret),Reg);
ffffffff80211bd4:	49 8d 7c 24 38       	lea    0x38(%r12),%rdi
ffffffff80211bd9:	48 89 de             	mov    %rbx,%rsi
ffffffff80211bdc:	e8 0f 8f 00 00       	call   ffffffff8021aaf0 <__RME_Inv_Reg_Save>
    _RME_List_Ins(&(Invocation->Head),
ffffffff80211be1:	49 8b 85 98 00 00 00 	mov    0x98(%r13),%rax
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff80211be8:	49 89 d8             	mov    %rbx,%r8
ffffffff80211beb:	48 89 e9             	mov    %rbp,%rcx
    _RME_List_Ins(&(Invocation->Head),
ffffffff80211bee:	49 8d 95 98 00 00 00 	lea    0x98(%r13),%rdx
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff80211bf5:	48 bf ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdi
ffffffff80211bfc:	ff ff 7f 
    New->Next=Next;
ffffffff80211bff:	66 48 0f 6e ca       	movq   %rdx,%xmm1
ffffffff80211c04:	66 48 0f 6e c0       	movq   %rax,%xmm0
    Next->Prev=New;
ffffffff80211c09:	4c 89 60 08          	mov    %r12,0x8(%rax)
    New->Next=Next;
ffffffff80211c0d:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff80211c11:	41 0f 11 04 24       	movups %xmm0,(%r12)
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff80211c16:	49 23 bd 88 00 00 00 	and    0x88(%r13),%rdi
    Thd_Cur->Ctx.Invstk_Depth++;
ffffffff80211c1d:	49 83 85 a8 00 00 00 	addq   $0x1,0xa8(%r13)
ffffffff80211c24:	01 
    Prev->Next=New;
ffffffff80211c25:	4d 89 a5 98 00 00 00 	mov    %r12,0x98(%r13)
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff80211c2c:	49 8b 54 24 28       	mov    0x28(%r12),%rdx
ffffffff80211c31:	49 8b 74 24 20       	mov    0x20(%r12),%rsi
ffffffff80211c36:	e8 55 8d 00 00       	call   ffffffff8021a990 <__RME_Thd_Reg_Init>
    __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff80211c3b:	49 8b 44 24 10       	mov    0x10(%r12),%rax
ffffffff80211c40:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff80211c44:	e8 17 95 00 00       	call   ffffffff8021b160 <__RME_Pgt_Set>
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211c49:	e9 6a f2 ff ff       	jmp    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
    switch(Svc_Num)
ffffffff80211c4e:	48 83 ed 0a          	sub    $0xa,%rbp
ffffffff80211c52:	48 83 fd 17          	cmp    $0x17,%rbp
ffffffff80211c56:	0f 87 52 1a 00 00    	ja     ffffffff802136ae <_RME_Svc_Handler+0x289e>
ffffffff80211c5c:	3e ff 24 ed b0 d6 21 	notrack jmp *-0x7fde2950(,%rbp,8)
ffffffff80211c63:	80 
ffffffff80211c64:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80211c68:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211c6b:	0f 83 9f 16 00 00    	jae    ffffffff80213310 <_RME_Svc_Handler+0x2500>
ffffffff80211c71:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211c78:	ff 00 00 
ffffffff80211c7b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211c7f:	48 01 f0             	add    %rsi,%rax
ffffffff80211c82:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211c89:	00 00 00 
ffffffff80211c8c:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211c8f:	48 21 d1             	and    %rdx,%rcx
ffffffff80211c92:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211c95:	0f 85 f4 fe ff ff    	jne    ffffffff80211b8f <_RME_Svc_Handler+0xd7f>
ffffffff80211c9b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
    __RME_Svc_Retval_Set(Reg,Retval);
ffffffff80211ca2:	48 89 df             	mov    %rbx,%rdi
ffffffff80211ca5:	e8 76 9a 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
}
ffffffff80211caa:	48 83 c4 78          	add    $0x78,%rsp
ffffffff80211cae:	5b                   	pop    %rbx
ffffffff80211caf:	5d                   	pop    %rbp
ffffffff80211cb0:	41 5c                	pop    %r12
ffffffff80211cb2:	41 5d                	pop    %r13
ffffffff80211cb4:	41 5e                	pop    %r14
ffffffff80211cb6:	41 5f                	pop    %r15
ffffffff80211cb8:	c3                   	ret
ffffffff80211cb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80211cc0:	48 39 d5             	cmp    %rdx,%rbp
ffffffff80211cc3:	0f 83 67 17 00 00    	jae    ffffffff80213430 <_RME_Svc_Handler+0x2620>
ffffffff80211cc9:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211cd0:	ff 00 00 
ffffffff80211cd3:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff80211cd7:	48 01 cd             	add    %rcx,%rbp
ffffffff80211cda:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80211ce1:	00 00 00 
ffffffff80211ce4:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80211ce8:	48 21 c2             	and    %rax,%rdx
ffffffff80211ceb:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211cee:	0f 85 9b fd ff ff    	jne    ffffffff80211a8f <_RME_Svc_Handler+0xc7f>
ffffffff80211cf4:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211cfb:	eb a5                	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80211cfd:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80211d00:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211d03:	0f 83 0f 17 00 00    	jae    ffffffff80213418 <_RME_Svc_Handler+0x2608>
ffffffff80211d09:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80211d10:	ff 00 00 
ffffffff80211d13:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211d17:	49 03 47 18          	add    0x18(%r15),%rax
ffffffff80211d1b:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80211d22:	00 00 00 
ffffffff80211d25:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211d28:	48 21 d6             	and    %rdx,%rsi
ffffffff80211d2b:	4c 39 d6             	cmp    %r10,%rsi
ffffffff80211d2e:	0f 84 4a 17 00 00    	je     ffffffff8021347e <_RME_Svc_Handler+0x266e>
ffffffff80211d34:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211d38:	48 83 fa 01          	cmp    $0x1,%rdx
ffffffff80211d3c:	0f 84 35 fb ff ff    	je     ffffffff80211877 <_RME_Svc_Handler+0xa67>
ffffffff80211d42:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211d49:	e9 62 fb ff ff       	jmp    ffffffff802118b0 <_RME_Svc_Handler+0xaa0>
ffffffff80211d4e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211d50:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211d53:	0f 83 a7 16 00 00    	jae    ffffffff80213400 <_RME_Svc_Handler+0x25f0>
ffffffff80211d59:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211d60:	ff 00 00 
ffffffff80211d63:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211d67:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80211d6e:	00 00 00 
ffffffff80211d71:	48 8d 2c 30          	lea    (%rax,%rsi,1),%rbp
ffffffff80211d75:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80211d79:	48 21 c2             	and    %rax,%rdx
ffffffff80211d7c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211d7f:	0f 85 88 f9 ff ff    	jne    ffffffff8021170d <_RME_Svc_Handler+0x8fd>
ffffffff80211d85:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211d8c:	e9 11 ff ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80211d91:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211d98:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211d9b:	0f 83 83 16 00 00    	jae    ffffffff80213424 <_RME_Svc_Handler+0x2614>
ffffffff80211da1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211da8:	ff 00 00 
ffffffff80211dab:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211daf:	48 01 f0             	add    %rsi,%rax
ffffffff80211db2:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211db9:	00 00 00 
ffffffff80211dbc:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211dbf:	48 21 d1             	and    %rdx,%rcx
ffffffff80211dc2:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211dc5:	0f 84 a7 16 00 00    	je     ffffffff80213472 <_RME_Svc_Handler+0x2662>
ffffffff80211dcb:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211dcf:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80211dd3:	0f 84 d6 f7 ff ff    	je     ffffffff802115af <_RME_Svc_Handler+0x79f>
ffffffff80211dd9:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80211de0:	e9 bd fe ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80211de5:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80211de8:	48 39 d5             	cmp    %rdx,%rbp
ffffffff80211deb:	0f 83 1b 16 00 00    	jae    ffffffff8021340c <_RME_Svc_Handler+0x25fc>
ffffffff80211df1:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211df8:	ff 00 00 
ffffffff80211dfb:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff80211dff:	48 01 cd             	add    %rcx,%rbp
ffffffff80211e02:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80211e09:	00 00 00 
ffffffff80211e0c:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80211e10:	48 21 c2             	and    %rax,%rdx
ffffffff80211e13:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211e16:	0f 85 38 fb ff ff    	jne    ffffffff80211954 <_RME_Svc_Handler+0xb44>
ffffffff80211e1c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211e23:	e9 7a fe ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80211e28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80211e2f:	00 
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80211e30:	48 85 ed             	test   %rbp,%rbp
ffffffff80211e33:	74 14                	je     ffffffff80211e49 <_RME_Svc_Handler+0x1039>
ffffffff80211e35:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80211e3c:	ff ff 7f 
ffffffff80211e3f:	49 3b 45 30          	cmp    0x30(%r13),%rax
ffffffff80211e43:	0f 83 65 16 00 00    	jae    ffffffff802134ae <_RME_Svc_Handler+0x269e>
            _RME_Run_Del(Thd_Cur);
ffffffff80211e49:	4c 89 ef             	mov    %r13,%rdi
ffffffff80211e4c:	e8 0f a9 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
    Prio=Thd->Sched.Prio;
ffffffff80211e51:	49 8b 4d 40          	mov    0x40(%r13),%rcx
    Local=Thd->Sched.Local;
ffffffff80211e55:	49 8b 45 28          	mov    0x28(%r13),%rax
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80211e59:	48 89 ce             	mov    %rcx,%rsi
ffffffff80211e5c:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80211e60:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff80211e64:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff80211e69:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff80211e6d:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211e72:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff80211e75:	4c 89 6f 30          	mov    %r13,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211e79:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff80211e7d:	66 48 0f 6e d2       	movq   %rdx,%xmm2
ffffffff80211e82:	66 0f 6c c2          	punpcklqdq %xmm2,%xmm0
ffffffff80211e86:	41 0f 11 45 00       	movups %xmm0,0x0(%r13)
    Prev->Next=New;
ffffffff80211e8b:	4c 89 2a             	mov    %r13,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211e8e:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80211e93:	48 d3 e2             	shl    %cl,%rdx
ffffffff80211e96:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80211e9b:	49 8b 46 20          	mov    0x20(%r14),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff80211e9f:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80211ea3:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80211ea7:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80211eaa:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80211eae:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80211eb3:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80211eb7:	4d 8b 64 06 08       	mov    0x8(%r14,%rax,1),%r12
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80211ebc:	31 f6                	xor    %esi,%esi
ffffffff80211ebe:	48 89 df             	mov    %rbx,%rdi
ffffffff80211ec1:	e8 5a 98 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
    if(Thd_Cur==Thd_New)
ffffffff80211ec6:	4d 39 e5             	cmp    %r12,%r13
ffffffff80211ec9:	0f 84 e9 ef ff ff    	je     ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff80211ecf:	4c 89 e2             	mov    %r12,%rdx
ffffffff80211ed2:	4c 89 ee             	mov    %r13,%rsi
ffffffff80211ed5:	48 89 df             	mov    %rbx,%rdi
ffffffff80211ed8:	e8 c3 b1 ff ff       	call   ffffffff8020d0a0 <_RME_Run_Swt.isra.0>
    Local->Thd_Cur=Thd_New;
ffffffff80211edd:	4d 89 66 08          	mov    %r12,0x8(%r14)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211ee1:	e9 d2 ef ff ff       	jmp    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
ffffffff80211ee6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80211eed:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80211ef0:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211ef3:	0f 83 f7 12 00 00    	jae    ffffffff802131f0 <_RME_Svc_Handler+0x23e0>
ffffffff80211ef9:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff80211efd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211f01:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211f08:	ff 00 00 
ffffffff80211f0b:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80211f12:	00 00 00 
ffffffff80211f15:	48 8d 2c 30          	lea    (%rax,%rsi,1),%rbp
ffffffff80211f19:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80211f1d:	48 21 c2             	and    %rax,%rdx
ffffffff80211f20:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80211f23:	0f 84 17 13 00 00    	je     ffffffff80213240 <_RME_Svc_Handler+0x2430>
ffffffff80211f29:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211f2d:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80211f31:	0f 84 8a f1 ff ff    	je     ffffffff802110c1 <_RME_Svc_Handler+0x2b1>
ffffffff80211f37:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80211f3e:	e9 5f fd ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80211f43:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80211f48:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211f4b:	0f 83 8a 20 00 00    	jae    ffffffff80213fdb <_RME_Svc_Handler+0x31cb>
ffffffff80211f51:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80211f58:	ff 00 00 
ffffffff80211f5b:	48 89 d0             	mov    %rdx,%rax
ffffffff80211f5e:	49 8b 57 18          	mov    0x18(%r15),%rdx
ffffffff80211f62:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80211f69:	00 00 00 
ffffffff80211f6c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211f70:	48 01 d0             	add    %rdx,%rax
ffffffff80211f73:	48 8b 30             	mov    (%rax),%rsi
ffffffff80211f76:	48 21 f7             	and    %rsi,%rdi
ffffffff80211f79:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80211f7c:	0f 85 78 f3 ff ff    	jne    ffffffff802112fa <_RME_Svc_Handler+0x4ea>
ffffffff80211f82:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211f89:	e9 14 fd ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Retval=_RME_Inv_Del(Cpt,
ffffffff80211f8e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80211f93:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80211f97:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80211f9b:	f6 c4 80             	test   $0x80,%ah
ffffffff80211f9e:	0f 85 fc 1b 00 00    	jne    ffffffff80213ba0 <_RME_Svc_Handler+0x2d90>
ffffffff80211fa4:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211fa7:	0f 83 63 2b 00 00    	jae    ffffffff80214b10 <_RME_Svc_Handler+0x3d00>
ffffffff80211fad:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211fb4:	00 00 00 
ffffffff80211fb7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211fbb:	48 01 c8             	add    %rcx,%rax
ffffffff80211fbe:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211fc5:	ff 00 00 
ffffffff80211fc8:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211fcb:	48 21 d1             	and    %rdx,%rcx
ffffffff80211fce:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211fd1:	0f 84 2d 2b 00 00    	je     ffffffff80214b04 <_RME_Svc_Handler+0x3cf4>
ffffffff80211fd7:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211fdb:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80211fdf:	0f 85 13 2b 00 00    	jne    ffffffff80214af8 <_RME_Svc_Handler+0x3ce8>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80211fe5:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80211fe9:	0f 84 4d 24 00 00    	je     ffffffff8021443c <_RME_Svc_Handler+0x362c>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Inv */
ffffffff80211fef:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff80211ff4:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80211ff8:	0f 83 46 2a 00 00    	jae    ffffffff80214a44 <_RME_Svc_Handler+0x3c34>
ffffffff80211ffe:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80212002:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff80212006:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff8021200d:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff80212010:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff80212013:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff8021201a:	00 00 00 
ffffffff8021201d:	48 8b 31             	mov    (%rcx),%rsi
ffffffff80212020:	48 21 f0             	and    %rsi,%rax
ffffffff80212023:	48 39 d0             	cmp    %rdx,%rax
ffffffff80212026:	0f 85 30 2a 00 00    	jne    ffffffff80214a5c <_RME_Svc_Handler+0x3c4c>
ffffffff8021202c:	48 89 f0             	mov    %rsi,%rax
ffffffff8021202f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212033:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff80212037:	0f 85 13 2a 00 00    	jne    ffffffff80214a50 <_RME_Svc_Handler+0x3c40>
	__asm__ __volatile__ (
ffffffff8021203d:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff8021203f:	89 c0                	mov    %eax,%eax
ffffffff80212041:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff80212045:	48 8b 79 20          	mov    0x20(%rcx),%rdi
ffffffff80212049:	48 09 c2             	or     %rax,%rdx
ffffffff8021204c:	48 89 d0             	mov    %rdx,%rax
ffffffff8021204f:	48 29 f8             	sub    %rdi,%rax
ffffffff80212052:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80212056:	0f 86 3c 27 00 00    	jbe    ffffffff80214798 <_RME_Svc_Handler+0x3988>
ffffffff8021205c:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff80212060:	48 85 d2             	test   %rdx,%rdx
ffffffff80212063:	0f 85 52 22 00 00    	jne    ffffffff802142bb <_RME_Svc_Handler+0x34ab>
    Invocation=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
ffffffff80212069:	48 8b 79 18          	mov    0x18(%rcx),%rdi
    if(Invocation->Thd_Act!=(void*)RME_NULL)
ffffffff8021206d:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
ffffffff80212072:	0f 85 2c 2d 00 00    	jne    ffffffff80214da4 <_RME_Svc_Handler+0x3f94>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212078:	48 89 f0             	mov    %rsi,%rax
ffffffff8021207b:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80212080:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Inv_Del,Type_Stat);
ffffffff80212083:	84 d2                	test   %dl,%dl
ffffffff80212085:	0f 84 23 16 00 00    	je     ffffffff802136ae <_RME_Svc_Handler+0x289e>
    RME_FETCH_ADD(&(Invocation->Prc->Head.Root_Ref), -1);
ffffffff8021208b:	48 8b 47 10          	mov    0x10(%rdi),%rax
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8021208f:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
ffffffff80212093:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Invocation,RME_INV_SIZE)==0);
ffffffff80212099:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8021209e:	e8 ad df ff ff       	call   ffffffff80210050 <_RME_Kot_Erase>
    return 0;
ffffffff802120a3:	31 f6                	xor    %esi,%esi
ffffffff802120a5:	e9 f8 fb ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff802120aa:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff802120af:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff802120b3:	49 8b 7f 28          	mov    0x28(%r15),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802120b7:	f6 c4 80             	test   $0x80,%ah
ffffffff802120ba:	0f 85 2c 19 00 00    	jne    ffffffff802139ec <_RME_Svc_Handler+0x2bdc>
ffffffff802120c0:	48 39 f8             	cmp    %rdi,%rax
ffffffff802120c3:	0f 83 6b 27 00 00    	jae    ffffffff80214834 <_RME_Svc_Handler+0x3a24>
ffffffff802120c9:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff802120d0:	ff 00 00 
ffffffff802120d3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802120d7:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff802120de:	00 00 00 
ffffffff802120e1:	48 8d 0c 30          	lea    (%rax,%rsi,1),%rcx
ffffffff802120e5:	48 8b 01             	mov    (%rcx),%rax
ffffffff802120e8:	48 21 c2             	and    %rax,%rdx
ffffffff802120eb:	4c 39 c2             	cmp    %r8,%rdx
ffffffff802120ee:	0f 84 34 27 00 00    	je     ffffffff80214828 <_RME_Svc_Handler+0x3a18>
ffffffff802120f4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802120f8:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802120fc:	0f 85 6e 27 00 00    	jne    ffffffff80214870 <_RME_Svc_Handler+0x3a60>
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Cpt */
ffffffff80212102:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212107:	f6 c4 80             	test   $0x80,%ah
ffffffff8021210a:	0f 85 d7 1e 00 00    	jne    ffffffff80213fe7 <_RME_Svc_Handler+0x31d7>
ffffffff80212110:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212113:	0f 83 83 25 00 00    	jae    ffffffff8021469c <_RME_Svc_Handler+0x388c>
ffffffff80212119:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021211d:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80212122:	48 8d 14 30          	lea    (%rax,%rsi,1),%rdx
ffffffff80212126:	be ff ff 00 00       	mov    $0xffff,%esi
ffffffff8021212b:	48 c1 e7 21          	shl    $0x21,%rdi
ffffffff8021212f:	48 8b 02             	mov    (%rdx),%rax
ffffffff80212132:	48 c1 e6 20          	shl    $0x20,%rsi
ffffffff80212136:	48 21 c6             	and    %rax,%rsi
ffffffff80212139:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8021213c:	0f 84 4e 25 00 00    	je     ffffffff80214690 <_RME_Svc_Handler+0x3880>
ffffffff80212142:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212146:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021214a:	0f 85 34 2b 00 00    	jne    ffffffff80214c84 <_RME_Svc_Handler+0x3e74>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_CPT);
ffffffff80212150:	f6 41 10 04          	testb  $0x4,0x10(%rcx)
ffffffff80212154:	0f 84 1e 2b 00 00    	je     ffffffff80214c78 <_RME_Svc_Handler+0x3e68>
    RME_CAP_CHECK(Cpt_New,RME_CPT_FLAG_PRC_CPT);
ffffffff8021215a:	f6 42 10 80          	testb  $0x80,0x10(%rdx)
ffffffff8021215e:	0f 84 ac 26 00 00    	je     ffffffff80214810 <_RME_Svc_Handler+0x3a00>
    Cpt_New=RME_CAP_CONV_ROOT(Cpt_New,struct RME_Cap_Cpt*);
ffffffff80212164:	83 3a 00             	cmpl   $0x0,(%rdx)
ffffffff80212167:	74 04                	je     ffffffff8021216d <_RME_Svc_Handler+0x135d>
ffffffff80212169:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    Cpt_Old=Prc_Op->Cpt;
ffffffff8021216d:	48 8b 41 28          	mov    0x28(%rcx),%rax
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212171:	f0 48 0f b1 51 28    	lock cmpxchg %rdx,0x28(%rcx)
ffffffff80212177:	40 0f 94 c6          	sete   %sil
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Cpt)),
ffffffff8021217b:	40 84 f6             	test   %sil,%sil
ffffffff8021217e:	0f 84 89 0d 00 00    	je     ffffffff80212f0d <_RME_Svc_Handler+0x20fd>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80212184:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80212189:	f0 48 0f c1 4a 08    	lock xadd %rcx,0x8(%rdx)
ffffffff8021218f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212196:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    return 0;
ffffffff8021219c:	31 f6                	xor    %esi,%esi
ffffffff8021219e:	e9 ff fa ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Retval=_RME_Prc_Del(Cpt,
ffffffff802121a3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff802121a8:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff802121ac:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802121b0:	f6 c4 80             	test   $0x80,%ah
ffffffff802121b3:	0f 85 c7 1c 00 00    	jne    ffffffff80213e80 <_RME_Svc_Handler+0x3070>
ffffffff802121b9:	48 39 f0             	cmp    %rsi,%rax
ffffffff802121bc:	0f 83 6e 2a 00 00    	jae    ffffffff80214c30 <_RME_Svc_Handler+0x3e20>
ffffffff802121c2:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802121c9:	00 00 00 
ffffffff802121cc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802121d0:	48 01 c8             	add    %rcx,%rax
ffffffff802121d3:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802121da:	ff 00 00 
ffffffff802121dd:	48 8b 10             	mov    (%rax),%rdx
ffffffff802121e0:	48 21 d1             	and    %rdx,%rcx
ffffffff802121e3:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802121e6:	0f 84 38 2a 00 00    	je     ffffffff80214c24 <_RME_Svc_Handler+0x3e14>
ffffffff802121ec:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802121f0:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802121f4:	0f 85 1e 2a 00 00    	jne    ffffffff80214c18 <_RME_Svc_Handler+0x3e08>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff802121fa:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff802121fe:	0f 84 c0 21 00 00    	je     ffffffff802143c4 <_RME_Svc_Handler+0x35b4>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Prc */
ffffffff80212204:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff80212209:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021220d:	0f 83 d9 25 00 00    	jae    ffffffff802147ec <_RME_Svc_Handler+0x39dc>
ffffffff80212213:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80212217:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff8021221b:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff80212222:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff80212225:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff80212228:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff8021222f:	00 00 00 
ffffffff80212232:	48 8b 31             	mov    (%rcx),%rsi
ffffffff80212235:	48 21 f0             	and    %rsi,%rax
ffffffff80212238:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021223b:	0f 85 c3 25 00 00    	jne    ffffffff80214804 <_RME_Svc_Handler+0x39f4>
ffffffff80212241:	48 89 f0             	mov    %rsi,%rax
ffffffff80212244:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212248:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8021224c:	0f 85 a6 25 00 00    	jne    ffffffff802147f8 <_RME_Svc_Handler+0x39e8>
	__asm__ __volatile__ (
ffffffff80212252:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff80212254:	89 c0                	mov    %eax,%eax
ffffffff80212256:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8021225a:	48 09 c2             	or     %rax,%rdx
ffffffff8021225d:	48 89 d0             	mov    %rdx,%rax
ffffffff80212260:	48 2b 41 20          	sub    0x20(%rcx),%rax
ffffffff80212264:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80212268:	0f 86 ae 25 00 00    	jbe    ffffffff8021481c <_RME_Svc_Handler+0x3a0c>
ffffffff8021226e:	48 83 79 08 00       	cmpq   $0x0,0x8(%rcx)
ffffffff80212273:	0f 85 42 20 00 00    	jne    ffffffff802142bb <_RME_Svc_Handler+0x34ab>
    Prc_Cpt=Prc_Del->Cpt;
ffffffff80212279:	4c 8b 41 28          	mov    0x28(%rcx),%r8
    Prc_Pgt=Prc_Del->Pgt;
ffffffff8021227d:	48 8b 79 30          	mov    0x30(%rcx),%rdi
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212281:	31 d2                	xor    %edx,%edx
ffffffff80212283:	48 89 f0             	mov    %rsi,%rax
ffffffff80212286:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021228b:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Prc_Del,Type_Stat);
ffffffff8021228e:	84 d2                	test   %dl,%dl
ffffffff80212290:	0f 84 18 14 00 00    	je     ffffffff802136ae <_RME_Svc_Handler+0x289e>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80212296:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff8021229a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021229d:	f0 49 0f c1 50 08    	lock xadd %rdx,0x8(%r8)
ffffffff802122a3:	f0 48 0f c1 47 08    	lock xadd %rax,0x8(%rdi)
    return 0;
ffffffff802122a9:	31 f6                	xor    %esi,%esi
ffffffff802122ab:	e9 f2 f9 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Retval=_RME_Prc_Crt(Cpt,
ffffffff802122b0:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff802122b4:	49 8b 7f 18          	mov    0x18(%r15),%rdi
ffffffff802122b8:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
ffffffff802122bd:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
ffffffff802122c2:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
ffffffff802122c7:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff802122cc:	e8 5f aa ff ff       	call   ffffffff8020cd30 <_RME_Prc_Crt.isra.0>
ffffffff802122d1:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff802122d4:	e9 c9 f9 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
ffffffff802122d9:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff802122de:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff802122e2:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff802122e6:	f6 c4 80             	test   $0x80,%ah
ffffffff802122e9:	0f 85 41 19 00 00    	jne    ffffffff80213c30 <_RME_Svc_Handler+0x2e20>
ffffffff802122ef:	48 39 f0             	cmp    %rsi,%rax
ffffffff802122f2:	0f 83 98 29 00 00    	jae    ffffffff80214c90 <_RME_Svc_Handler+0x3e80>
ffffffff802122f8:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff802122ff:	ff 00 00 
ffffffff80212302:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212306:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021230d:	00 00 00 
ffffffff80212310:	48 8d 2c 08          	lea    (%rax,%rcx,1),%rbp
ffffffff80212314:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80212318:	48 21 c2             	and    %rax,%rdx
ffffffff8021231b:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8021231e:	0f 84 c0 29 00 00    	je     ffffffff80214ce4 <_RME_Svc_Handler+0x3ed4>
ffffffff80212324:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212328:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021232c:	0f 85 a6 29 00 00    	jne    ffffffff80214cd8 <_RME_Svc_Handler+0x3ec8>
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt_Child */
ffffffff80212332:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff80212337:	f6 c4 80             	test   $0x80,%ah
ffffffff8021233a:	0f 85 c7 1d 00 00    	jne    ffffffff80214107 <_RME_Svc_Handler+0x32f7>
ffffffff80212340:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212343:	0f 83 a7 29 00 00    	jae    ffffffff80214cf0 <_RME_Svc_Handler+0x3ee0>
ffffffff80212349:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021234d:	ba ff ff 00 00       	mov    $0xffff,%edx
ffffffff80212352:	4c 8d 24 08          	lea    (%rax,%rcx,1),%r12
ffffffff80212356:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8021235a:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff8021235f:	49 8b 04 24          	mov    (%r12),%rax
ffffffff80212363:	48 c1 e1 21          	shl    $0x21,%rcx
ffffffff80212367:	48 21 c2             	and    %rax,%rdx
ffffffff8021236a:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8021236d:	0f 84 99 28 00 00    	je     ffffffff80214c0c <_RME_Svc_Handler+0x3dfc>
ffffffff80212373:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212377:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021237b:	0f 85 7f 28 00 00    	jne    ffffffff80214c00 <_RME_Svc_Handler+0x3df0>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
ffffffff80212381:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80212385:	a8 20                	test   $0x20,%al
ffffffff80212387:	0f 84 67 28 00 00    	je     ffffffff80214bf4 <_RME_Svc_Handler+0x3de4>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff8021238d:	41 f6 44 24 10 08    	testb  $0x8,0x10(%r12)
ffffffff80212393:	0f 84 4f 28 00 00    	je     ffffffff80214be8 <_RME_Svc_Handler+0x3dd8>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80212399:	48 89 c2             	mov    %rax,%rdx
            Retval=_RME_Pgt_Des(Cpt,
ffffffff8021239c:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff802123a1:	48 c1 ea 24          	shr    $0x24,%rdx
ffffffff802123a5:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802123a8:	0f 82 ba 29 00 00    	jb     ffffffff80214d68 <_RME_Svc_Handler+0x3f58>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff802123ae:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802123b2:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff802123b7:	48 39 c6             	cmp    %rax,%rsi
ffffffff802123ba:	0f 82 9c 29 00 00    	jb     ffffffff80214d5c <_RME_Svc_Handler+0x3f4c>
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff802123c0:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
ffffffff802123c4:	48 89 f0             	mov    %rsi,%rax
ffffffff802123c7:	48 d3 e8             	shr    %cl,%rax
ffffffff802123ca:	48 85 c0             	test   %rax,%rax
ffffffff802123cd:	0f 85 c5 29 00 00    	jne    ffffffff80214d98 <_RME_Svc_Handler+0x3f88>
    if(__RME_Pgt_Pgdir_Unmap(Pgt_Parent,Pos,Pgt_Child)<0)
ffffffff802123d3:	4c 89 e2             	mov    %r12,%rdx
ffffffff802123d6:	48 89 ef             	mov    %rbp,%rdi
ffffffff802123d9:	e8 32 90 00 00       	call   ffffffff8021b410 <__RME_Pgt_Pgdir_Unmap>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff802123de:	83 7d 00 00          	cmpl   $0x0,0x0(%rbp)
ffffffff802123e2:	74 04                	je     ffffffff802123e8 <_RME_Svc_Handler+0x15d8>
ffffffff802123e4:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
ffffffff802123e8:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff802123ec:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff802123f2:	41 83 3c 24 00       	cmpl   $0x0,(%r12)
ffffffff802123f7:	74 05                	je     ffffffff802123fe <_RME_Svc_Handler+0x15ee>
ffffffff802123f9:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
ffffffff802123fe:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff80212402:	f0 49 0f c1 44 24 08 	lock xadd %rax,0x8(%r12)
    return 0;
ffffffff80212409:	31 f6                	xor    %esi,%esi
ffffffff8021240b:	e9 92 f8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                                RME_PARAM_Q0(Param[0]),                     /* rme_ptr_t Size_Order */
ffffffff80212410:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
ffffffff80212415:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8021241a:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8021241e:	4c 89 ff             	mov    %r15,%rdi
ffffffff80212421:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff80212426:	48 89 c1             	mov    %rax,%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80212429:	48 89 c6             	mov    %rax,%rsi
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8021242c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021242f:	48 c1 ea 10          	shr    $0x10,%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80212433:	48 c1 ee 20          	shr    $0x20,%rsi
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff80212437:	52                   	push   %rdx
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff80212438:	48 c1 e9 10          	shr    $0x10,%rcx
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8021243c:	48 89 f2             	mov    %rsi,%rdx
ffffffff8021243f:	50                   	push   %rax
ffffffff80212440:	4c 89 c8             	mov    %r9,%rax
ffffffff80212443:	0f b7 c9             	movzwl %cx,%ecx
ffffffff80212446:	49 83 e1 fe          	and    $0xfffffffffffffffe,%r9
ffffffff8021244a:	83 e0 01             	and    $0x1,%eax
ffffffff8021244d:	50                   	push   %rax
ffffffff8021244e:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
ffffffff80212453:	4c 8b 44 24 58       	mov    0x58(%rsp),%r8
ffffffff80212458:	e8 a3 ca ff ff       	call   ffffffff8020ef00 <_RME_Pgt_Crt>
            break;
ffffffff8021245d:	48 83 c4 20          	add    $0x20,%rsp
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff80212461:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212464:	e9 39 f8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Retval=_RME_Cpt_Rem(Cpt,
ffffffff80212469:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff8021246e:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212472:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80212476:	f6 c4 80             	test   $0x80,%ah
ffffffff80212479:	0f 85 e1 18 00 00    	jne    ffffffff80213d60 <_RME_Svc_Handler+0x2f50>
ffffffff8021247f:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212482:	0f 83 c8 22 00 00    	jae    ffffffff80214750 <_RME_Svc_Handler+0x3940>
ffffffff80212488:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021248f:	00 00 00 
ffffffff80212492:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212496:	48 01 c8             	add    %rcx,%rax
ffffffff80212499:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802124a0:	ff 00 00 
ffffffff802124a3:	48 8b 10             	mov    (%rax),%rdx
ffffffff802124a6:	48 21 d1             	and    %rdx,%rcx
ffffffff802124a9:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802124ac:	0f 84 92 22 00 00    	je     ffffffff80214744 <_RME_Svc_Handler+0x3934>
ffffffff802124b2:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802124b6:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802124ba:	0f 85 78 22 00 00    	jne    ffffffff80214738 <_RME_Svc_Handler+0x3928>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_REM);
ffffffff802124c0:	f6 40 10 20          	testb  $0x20,0x10(%rax)
ffffffff802124c4:	0f 84 12 1f 00 00    	je     ffffffff802143dc <_RME_Svc_Handler+0x35cc>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Rem */
ffffffff802124ca:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff802124cf:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff802124d3:	0f 83 d3 23 00 00    	jae    ffffffff802148ac <_RME_Svc_Handler+0x3a9c>
ffffffff802124d9:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff802124dd:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff802124e1:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff802124e8:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff802124eb:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff802124ee:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff802124f5:	00 00 00 
ffffffff802124f8:	48 8b 31             	mov    (%rcx),%rsi
ffffffff802124fb:	48 21 f0             	and    %rsi,%rax
ffffffff802124fe:	48 39 d0             	cmp    %rdx,%rax
ffffffff80212501:	0f 85 bd 23 00 00    	jne    ffffffff802148c4 <_RME_Svc_Handler+0x3ab4>
	__asm__ __volatile__ (
ffffffff80212507:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff80212509:	89 c0                	mov    %eax,%eax
ffffffff8021250b:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8021250f:	48 8b 79 20          	mov    0x20(%rcx),%rdi
ffffffff80212513:	48 09 c2             	or     %rax,%rdx
ffffffff80212516:	48 89 d0             	mov    %rdx,%rax
ffffffff80212519:	48 29 f8             	sub    %rdi,%rax
ffffffff8021251c:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80212520:	0f 86 92 23 00 00    	jbe    ffffffff802148b8 <_RME_Svc_Handler+0x3aa8>
ffffffff80212526:	85 f6                	test   %esi,%esi
ffffffff80212528:	0f 84 4a 21 00 00    	je     ffffffff80214678 <_RME_Svc_Handler+0x3868>
    Rem_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8021252e:	48 89 f0             	mov    %rsi,%rax
ffffffff80212531:	48 c1 e8 30          	shr    $0x30,%rax
    if((Rem_Type!=RME_CAP_TYPE_KOM)&&(Rem_Type!=RME_CAP_TYPE_KFN))
ffffffff80212535:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80212539:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021253d:	0f 86 a0 1d 00 00    	jbe    ffffffff802142e3 <_RME_Svc_Handler+0x34d3>
        Capobj_Root=(struct RME_Cap_Struct*)(Capobj_Rem->Head.Root_Ref);
ffffffff80212543:	48 8b 79 08          	mov    0x8(%rcx),%rdi
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212547:	31 d2                	xor    %edx,%edx
ffffffff80212549:	48 89 f0             	mov    %rsi,%rax
ffffffff8021254c:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80212551:	0f 94 c2             	sete   %dl
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff80212554:	84 d2                	test   %dl,%dl
ffffffff80212556:	0f 84 52 11 00 00    	je     ffffffff802136ae <_RME_Svc_Handler+0x289e>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8021255c:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff80212560:	f0 48 0f c1 47 08    	lock xadd %rax,0x8(%rdi)
    return 0;
ffffffff80212566:	31 f6                	xor    %esi,%esi
ffffffff80212568:	e9 35 f7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff8021256d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
ffffffff80212572:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
ffffffff80212577:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8021257c:	49 8b 77 28          	mov    0x28(%r15),%rsi
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff80212580:	48 c1 e0 20          	shl    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff80212584:	48 0b 44 24 28       	or     0x28(%rsp),%rax
ffffffff80212589:	49 8b 7f 18          	mov    0x18(%r15),%rdi
ffffffff8021258d:	45 89 c1             	mov    %r8d,%r9d
ffffffff80212590:	50                   	push   %rax
ffffffff80212591:	89 d1                	mov    %edx,%ecx
ffffffff80212593:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80212597:	ff 74 24 48          	push   0x48(%rsp)
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
ffffffff8021259b:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8021259f:	e8 8c b1 ff ff       	call   ffffffff8020d730 <_RME_Cpt_Add.isra.0>
            break;
ffffffff802125a4:	41 5a                	pop    %r10
ffffffff802125a6:	41 5b                	pop    %r11
            Retval=_RME_Cpt_Add(Cpt,
ffffffff802125a8:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff802125ab:	e9 f2 f6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Retval=_RME_Cpt_Frz(Cpt,
ffffffff802125b0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff802125b5:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff802125b9:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff802125bd:	f6 c4 80             	test   $0x80,%ah
ffffffff802125c0:	0f 85 8a 13 00 00    	jne    ffffffff80213950 <_RME_Svc_Handler+0x2b40>
ffffffff802125c6:	48 39 f0             	cmp    %rsi,%rax
ffffffff802125c9:	0f 83 d5 21 00 00    	jae    ffffffff802147a4 <_RME_Svc_Handler+0x3994>
ffffffff802125cf:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802125d6:	00 00 00 
ffffffff802125d9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802125dd:	48 01 c8             	add    %rcx,%rax
ffffffff802125e0:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802125e7:	ff 00 00 
ffffffff802125ea:	48 8b 10             	mov    (%rax),%rdx
ffffffff802125ed:	48 21 d1             	and    %rdx,%rcx
ffffffff802125f0:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802125f3:	0f 84 5b 20 00 00    	je     ffffffff80214654 <_RME_Svc_Handler+0x3844>
ffffffff802125f9:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802125fd:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212601:	0f 85 41 20 00 00    	jne    ffffffff80214648 <_RME_Svc_Handler+0x3838>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_FRZ);
ffffffff80212607:	f6 40 10 04          	testb  $0x4,0x10(%rax)
ffffffff8021260b:	0f 84 1f 1e 00 00    	je     ffffffff80214430 <_RME_Svc_Handler+0x3620>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Frz */
ffffffff80212611:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Frz,struct RME_Cap_Struct*,Capobj_Frz);
ffffffff80212616:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021261a:	0f 83 18 24 00 00    	jae    ffffffff80214a38 <_RME_Svc_Handler+0x3c28>
ffffffff80212620:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80212624:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212628:	48 01 d1             	add    %rdx,%rcx
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Frz->Head.Type_Stat));
ffffffff8021262b:	48 8b 31             	mov    (%rcx),%rsi
    if(RME_CAP_TYPE(Type_Stat)==RME_CAP_TYPE_NOP)
ffffffff8021262e:	48 89 f0             	mov    %rsi,%rax
ffffffff80212631:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212635:	0f 84 73 10 00 00    	je     ffffffff802136ae <_RME_Svc_Handler+0x289e>
    if(RME_CAP_ATTR(Type_Stat)==RME_CAP_ATTR_ROOT)
ffffffff8021263b:	85 f6                	test   %esi,%esi
ffffffff8021263d:	75 0d                	jne    ffffffff8021264c <_RME_Svc_Handler+0x183c>
        if(Capobj_Frz->Head.Root_Ref!=0U)
ffffffff8021263f:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80212643:	48 85 c0             	test   %rax,%rax
ffffffff80212646:	0f 85 8b 1c 00 00    	jne    ffffffff802142d7 <_RME_Svc_Handler+0x34c7>
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8021264c:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff80212653:	ff 00 00 
ffffffff80212656:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021265d:	00 00 00 
ffffffff80212660:	48 21 f0             	and    %rsi,%rax
ffffffff80212663:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212666:	0f 84 cc 26 00 00    	je     ffffffff80214d38 <_RME_Svc_Handler+0x3f28>
	__asm__ __volatile__ (
ffffffff8021266c:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff8021266e:	89 c0                	mov    %eax,%eax
ffffffff80212670:	48 c1 e2 20          	shl    $0x20,%rdx
    if(RME_UNLIKELY(RME_CAP_QUIE(Capobj_Frz->Head.Timestamp)==0U))
ffffffff80212674:	4c 8b 41 20          	mov    0x20(%rcx),%r8
ffffffff80212678:	48 09 c2             	or     %rax,%rdx
ffffffff8021267b:	48 89 d0             	mov    %rdx,%rax
ffffffff8021267e:	4c 29 c0             	sub    %r8,%rax
ffffffff80212681:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80212685:	0f 86 59 23 00 00    	jbe    ffffffff802149e4 <_RME_Svc_Handler+0x3bd4>
	__asm__ __volatile__ (
ffffffff8021268b:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff8021268d:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff80212691:	89 c0                	mov    %eax,%eax
ffffffff80212693:	48 09 c2             	or     %rax,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212696:	48 89 f0             	mov    %rsi,%rax
    Capobj_Frz->Head.Timestamp=RME_TIMESTAMP();
ffffffff80212699:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
ffffffff8021269d:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff802126a4:	00 ff ff 
ffffffff802126a7:	48 21 f2             	and    %rsi,%rdx
ffffffff802126aa:	48 09 fa             	or     %rdi,%rdx
ffffffff802126ad:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff802126b2:	0f 94 c2             	sete   %dl
    return 0;
ffffffff802126b5:	31 f6                	xor    %esi,%esi
ffffffff802126b7:	e9 e6 f5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff802126bc:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
            Retval=_RME_Inv_Crt(Cpt,
ffffffff802126c1:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff802126c5:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff802126c9:	49 8b 7f 18          	mov    0x18(%r15),%rdi
ffffffff802126cd:	ff 74 24 48          	push   0x48(%rsp)
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff802126d1:	4c 89 c1             	mov    %r8,%rcx
            Retval=_RME_Inv_Crt(Cpt,
ffffffff802126d4:	4c 8b 4c 24 48       	mov    0x48(%rsp),%r9
ffffffff802126d9:	45 89 c0             	mov    %r8d,%r8d
ffffffff802126dc:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff802126e1:	48 c1 e9 20          	shr    $0x20,%rcx
            Retval=_RME_Inv_Crt(Cpt,
ffffffff802126e5:	e8 a6 d5 ff ff       	call   ffffffff8020fc90 <_RME_Inv_Crt.isra.0>
ffffffff802126ea:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff802126ed:	58                   	pop    %rax
ffffffff802126ee:	5a                   	pop    %rdx
ffffffff802126ef:	e9 ae f5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Retval=_RME_Sig_Del(Cpt,
ffffffff802126f4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff802126f9:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff802126fd:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212701:	f6 c4 80             	test   $0x80,%ah
ffffffff80212704:	0f 85 76 13 00 00    	jne    ffffffff80213a80 <_RME_Svc_Handler+0x2c70>
ffffffff8021270a:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021270d:	0f 83 5d 1e 00 00    	jae    ffffffff80214570 <_RME_Svc_Handler+0x3760>
ffffffff80212713:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021271a:	00 00 00 
ffffffff8021271d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212721:	48 01 c8             	add    %rcx,%rax
ffffffff80212724:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8021272b:	ff 00 00 
ffffffff8021272e:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212731:	48 21 d1             	and    %rdx,%rcx
ffffffff80212734:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212737:	0f 84 27 1e 00 00    	je     ffffffff80214564 <_RME_Svc_Handler+0x3754>
ffffffff8021273d:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212741:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212745:	0f 85 0d 1e 00 00    	jne    ffffffff80214558 <_RME_Svc_Handler+0x3748>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021274b:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8021274f:	0f 84 f3 1c 00 00    	je     ffffffff80214448 <_RME_Svc_Handler+0x3638>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff80212755:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff8021275a:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021275e:	0f 83 b4 1e 00 00    	jae    ffffffff80214618 <_RME_Svc_Handler+0x3808>
ffffffff80212764:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80212768:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff8021276c:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff80212773:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff80212776:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80212779:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff80212780:	00 00 00 
ffffffff80212783:	48 8b 31             	mov    (%rcx),%rsi
ffffffff80212786:	48 21 f0             	and    %rsi,%rax
ffffffff80212789:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021278c:	0f 85 da 1e 00 00    	jne    ffffffff8021466c <_RME_Svc_Handler+0x385c>
ffffffff80212792:	48 89 f0             	mov    %rsi,%rax
ffffffff80212795:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212799:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff8021279d:	0f 85 bd 1e 00 00    	jne    ffffffff80214660 <_RME_Svc_Handler+0x3850>
	__asm__ __volatile__ (
ffffffff802127a3:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff802127a5:	89 c0                	mov    %eax,%eax
ffffffff802127a7:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff802127ab:	48 8b 79 20          	mov    0x20(%rcx),%rdi
ffffffff802127af:	48 09 c2             	or     %rax,%rdx
ffffffff802127b2:	48 89 d0             	mov    %rdx,%rax
ffffffff802127b5:	48 29 f8             	sub    %rdi,%rax
ffffffff802127b8:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff802127bc:	0f 86 fb 1c 00 00    	jbe    ffffffff802144bd <_RME_Svc_Handler+0x36ad>
ffffffff802127c2:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff802127c6:	48 85 c0             	test   %rax,%rax
ffffffff802127c9:	0f 85 cd 1c 00 00    	jne    ffffffff8021449c <_RME_Svc_Handler+0x368c>
    if(Sig_Del->Thd!=(void*)0U)
ffffffff802127cf:	48 8b 51 30          	mov    0x30(%rcx),%rdx
ffffffff802127d3:	48 85 d2             	test   %rdx,%rdx
ffffffff802127d6:	0f 85 c8 25 00 00    	jne    ffffffff80214da4 <_RME_Svc_Handler+0x3f94>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802127dc:	48 89 f0             	mov    %rsi,%rax
ffffffff802127df:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff802127e4:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Sig_Del,Type_Stat);
ffffffff802127e7:	80 fa 01             	cmp    $0x1,%dl
ffffffff802127ea:	48 19 f6             	sbb    %rsi,%rsi
ffffffff802127ed:	e9 b0 f4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Retval=_RME_Cpt_Del(Cpt,
ffffffff802127f2:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff802127f7:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff802127fb:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802127ff:	f6 c4 80             	test   $0x80,%ah
ffffffff80212802:	0f 85 08 13 00 00    	jne    ffffffff80213b10 <_RME_Svc_Handler+0x2d00>
ffffffff80212808:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021280b:	0f 83 df 1e 00 00    	jae    ffffffff802146f0 <_RME_Svc_Handler+0x38e0>
ffffffff80212811:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212818:	00 00 00 
ffffffff8021281b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021281f:	48 01 c8             	add    %rcx,%rax
ffffffff80212822:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212829:	ff 00 00 
ffffffff8021282c:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021282f:	48 21 d1             	and    %rdx,%rcx
ffffffff80212832:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212835:	0f 84 a9 1e 00 00    	je     ffffffff802146e4 <_RME_Svc_Handler+0x38d4>
ffffffff8021283b:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021283f:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212843:	0f 85 8f 1e 00 00    	jne    ffffffff802146d8 <_RME_Svc_Handler+0x38c8>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212849:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8021284d:	0f 84 01 1c 00 00    	je     ffffffff80214454 <_RME_Svc_Handler+0x3644>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Cpt */
ffffffff80212853:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff80212858:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021285c:	0f 83 c2 1d 00 00    	jae    ffffffff80214624 <_RME_Svc_Handler+0x3814>
ffffffff80212862:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80212866:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff8021286a:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff80212871:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff80212874:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff80212877:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff8021287e:	00 00 00 
ffffffff80212881:	48 8b 31             	mov    (%rcx),%rsi
ffffffff80212884:	48 21 f0             	and    %rsi,%rax
ffffffff80212887:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021288a:	0f 85 ac 1d 00 00    	jne    ffffffff8021463c <_RME_Svc_Handler+0x382c>
ffffffff80212890:	48 89 f0             	mov    %rsi,%rax
ffffffff80212893:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212897:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021289b:	0f 85 8f 1d 00 00    	jne    ffffffff80214630 <_RME_Svc_Handler+0x3820>
	__asm__ __volatile__ (
ffffffff802128a1:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff802128a3:	89 c0                	mov    %eax,%eax
ffffffff802128a5:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff802128a9:	48 8b 79 20          	mov    0x20(%rcx),%rdi
ffffffff802128ad:	48 09 c2             	or     %rax,%rdx
ffffffff802128b0:	48 89 d0             	mov    %rdx,%rax
ffffffff802128b3:	48 29 f8             	sub    %rdi,%rax
ffffffff802128b6:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff802128ba:	0f 86 c4 1d 00 00    	jbe    ffffffff80214684 <_RME_Svc_Handler+0x3874>
ffffffff802128c0:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff802128c4:	48 85 c0             	test   %rax,%rax
ffffffff802128c7:	0f 85 ee 19 00 00    	jne    ffffffff802142bb <_RME_Svc_Handler+0x34ab>
    Table=RME_CAP_GETOBJ(Cpt_Del,struct RME_Cap_Struct*);
ffffffff802128cd:	48 8b 51 18          	mov    0x18(%rcx),%rdx
    Entry_Num=Cpt_Del->Entry_Num;
ffffffff802128d1:	48 8b 79 28          	mov    0x28(%rcx),%rdi
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff802128d5:	48 85 ff             	test   %rdi,%rdi
ffffffff802128d8:	75 17                	jne    ffffffff802128f1 <_RME_Svc_Handler+0x1ae1>
ffffffff802128da:	e9 a9 19 00 00       	jmp    ffffffff80214288 <_RME_Svc_Handler+0x3478>
ffffffff802128df:	90                   	nop
ffffffff802128e0:	48 83 c0 01          	add    $0x1,%rax
ffffffff802128e4:	48 83 c2 40          	add    $0x40,%rdx
ffffffff802128e8:	48 39 c7             	cmp    %rax,%rdi
ffffffff802128eb:	0f 84 97 19 00 00    	je     ffffffff80214288 <_RME_Svc_Handler+0x3478>
        if(Table[Count].Head.Type_Stat!=0U)
ffffffff802128f1:	48 83 3a 00          	cmpq   $0x0,(%rdx)
ffffffff802128f5:	74 e9                	je     ffffffff802128e0 <_RME_Svc_Handler+0x1ad0>
            RME_CAP_DEFROST(Cpt_Del,Type_Stat);
ffffffff802128f7:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff802128fe:	00 ff ff 
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212901:	48 89 f0             	mov    %rsi,%rax
ffffffff80212904:	48 21 f2             	and    %rsi,%rdx
ffffffff80212907:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021290c:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff8021290f:	48 c7 c6 fb ff ff ff 	mov    $0xfffffffffffffffb,%rsi
ffffffff80212916:	e9 87 f3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021291b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Crt */
ffffffff80212920:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff80212925:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
ffffffff8021292a:	4c 89 ff             	mov    %r15,%rdi
ffffffff8021292d:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
ffffffff80212932:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
ffffffff80212937:	89 d1                	mov    %edx,%ecx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80212939:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8021293d:	e8 ae c2 ff ff       	call   ffffffff8020ebf0 <_RME_Cpt_Crt>
ffffffff80212942:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212945:	e9 58 f3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Pgt_Child */
ffffffff8021294a:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8021294f:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff80212953:	49 8b 7f 18          	mov    0x18(%r15),%rdi
ffffffff80212957:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff8021295c:	4c 89 c2             	mov    %r8,%rdx
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8021295f:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
ffffffff80212964:	45 89 c0             	mov    %r8d,%r8d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff80212967:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8021296b:	e8 f0 a7 ff ff       	call   ffffffff8020d160 <_RME_Pgt_Con.isra.0>
ffffffff80212970:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212973:	e9 2a f3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt */
ffffffff80212978:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff8021297d:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212981:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff80212985:	f6 c4 80             	test   $0x80,%ah
ffffffff80212988:	0f 85 82 15 00 00    	jne    ffffffff80213f10 <_RME_Svc_Handler+0x3100>
ffffffff8021298e:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212991:	0f 83 d9 21 00 00    	jae    ffffffff80214b70 <_RME_Svc_Handler+0x3d60>
ffffffff80212997:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021299e:	00 00 00 
ffffffff802129a1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802129a5:	48 01 c8             	add    %rcx,%rax
ffffffff802129a8:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802129af:	ff 00 00 
ffffffff802129b2:	48 8b 10             	mov    (%rax),%rdx
ffffffff802129b5:	48 21 d1             	and    %rdx,%rcx
ffffffff802129b8:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802129bb:	0f 84 a3 21 00 00    	je     ffffffff80214b64 <_RME_Svc_Handler+0x3d54>
ffffffff802129c1:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802129c5:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802129c9:	0f 85 89 21 00 00    	jne    ffffffff80214b58 <_RME_Svc_Handler+0x3d48>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802129cf:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff802129d3:	f6 c2 04             	test   $0x4,%dl
ffffffff802129d6:	0f 84 30 1a 00 00    	je     ffffffff8021440c <_RME_Svc_Handler+0x35fc>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff802129dc:	48 89 d1             	mov    %rdx,%rcx
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff802129df:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff802129e4:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff802129e8:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802129eb:	0f 82 53 23 00 00    	jb     ffffffff80214d44 <_RME_Svc_Handler+0x3f34>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Rem->Head.Flag)))
ffffffff802129f1:	48 c1 ea 08          	shr    $0x8,%rdx
ffffffff802129f5:	81 e2 ff ff ff 0f    	and    $0xfffffff,%edx
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff802129fb:	48 39 d6             	cmp    %rdx,%rsi
ffffffff802129fe:	0f 82 d0 23 00 00    	jb     ffffffff80214dd4 <_RME_Svc_Handler+0x3fc4>
    if((Pos>>RME_PGT_NUMORD(Pgt_Rem->Order))!=0U)
ffffffff80212a04:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff80212a08:	48 89 f2             	mov    %rsi,%rdx
ffffffff80212a0b:	48 d3 ea             	shr    %cl,%rdx
ffffffff80212a0e:	48 85 d2             	test   %rdx,%rdx
ffffffff80212a11:	0f 85 b1 23 00 00    	jne    ffffffff80214dc8 <_RME_Svc_Handler+0x3fb8>
    if(__RME_Pgt_Page_Unmap(Pgt_Rem,Pos)<0)
ffffffff80212a17:	48 89 c7             	mov    %rax,%rdi
ffffffff80212a1a:	e8 21 89 00 00       	call   ffffffff8021b340 <__RME_Pgt_Page_Unmap>
    return 0;
ffffffff80212a1f:	31 f6                	xor    %esi,%esi
ffffffff80212a21:	e9 7c f2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Pos_Src */
ffffffff80212a26:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
ffffffff80212a2b:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80212a30:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff80212a34:	49 8b 7f 18          	mov    0x18(%r15),%rdi
ffffffff80212a38:	ff 74 24 40          	push   0x40(%rsp)
ffffffff80212a3c:	44 89 c8             	mov    %r9d,%eax
ffffffff80212a3f:	89 d1                	mov    %edx,%ecx
ffffffff80212a41:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff80212a45:	50                   	push   %rax
ffffffff80212a46:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
ffffffff80212a4b:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80212a4f:	e8 ac a9 ff ff       	call   ffffffff8020d400 <_RME_Pgt_Add.isra.0>
            break;
ffffffff80212a54:	41 58                	pop    %r8
ffffffff80212a56:	41 59                	pop    %r9
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80212a58:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212a5b:	e9 42 f2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Retval=_RME_Pgt_Del(Cpt,
ffffffff80212a60:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80212a65:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212a69:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212a6d:	f6 c4 80             	test   $0x80,%ah
ffffffff80212a70:	0f 85 52 12 00 00    	jne    ffffffff80213cc8 <_RME_Svc_Handler+0x2eb8>
ffffffff80212a76:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212a79:	0f 83 91 1a 00 00    	jae    ffffffff80214510 <_RME_Svc_Handler+0x3700>
ffffffff80212a7f:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212a86:	00 00 00 
ffffffff80212a89:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212a8d:	48 01 c8             	add    %rcx,%rax
ffffffff80212a90:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212a97:	ff 00 00 
ffffffff80212a9a:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212a9d:	48 21 d1             	and    %rdx,%rcx
ffffffff80212aa0:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212aa3:	0f 84 5b 1a 00 00    	je     ffffffff80214504 <_RME_Svc_Handler+0x36f4>
ffffffff80212aa9:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212aad:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212ab1:	0f 85 41 1a 00 00    	jne    ffffffff802144f8 <_RME_Svc_Handler+0x36e8>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212ab7:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212abb:	0f 84 0f 19 00 00    	je     ffffffff802143d0 <_RME_Svc_Handler+0x35c0>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Pgt */
ffffffff80212ac1:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80212ac6:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212aca:	0f 83 d0 1d 00 00    	jae    ffffffff802148a0 <_RME_Svc_Handler+0x3a90>
ffffffff80212ad0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212ad4:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80212ad8:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff80212adf:	ff 00 00 
ffffffff80212ae2:	4c 8b 22             	mov    (%rdx),%r12
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80212ae5:	48 89 d5             	mov    %rdx,%rbp
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80212ae8:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff80212aef:	00 00 00 
ffffffff80212af2:	4c 21 e0             	and    %r12,%rax
ffffffff80212af5:	48 39 d0             	cmp    %rdx,%rax
ffffffff80212af8:	0f 85 de 1d 00 00    	jne    ffffffff802148dc <_RME_Svc_Handler+0x3acc>
ffffffff80212afe:	4c 89 e0             	mov    %r12,%rax
ffffffff80212b01:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212b05:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80212b09:	0f 85 c1 1d 00 00    	jne    ffffffff802148d0 <_RME_Svc_Handler+0x3ac0>
	__asm__ __volatile__ (
ffffffff80212b0f:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff80212b11:	89 c0                	mov    %eax,%eax
ffffffff80212b13:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff80212b17:	48 09 c2             	or     %rax,%rdx
ffffffff80212b1a:	48 89 d0             	mov    %rdx,%rax
ffffffff80212b1d:	48 2b 45 20          	sub    0x20(%rbp),%rax
ffffffff80212b21:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80212b25:	0f 86 c1 19 00 00    	jbe    ffffffff802144ec <_RME_Svc_Handler+0x36dc>
ffffffff80212b2b:	48 83 7d 08 00       	cmpq   $0x0,0x8(%rbp)
ffffffff80212b30:	0f 85 93 19 00 00    	jne    ffffffff802144c9 <_RME_Svc_Handler+0x36b9>
    if(__RME_Pgt_Del_Check(Pgt_Del)<0)
ffffffff80212b36:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212b39:	e8 82 87 00 00       	call   ffffffff8021b2c0 <__RME_Pgt_Del_Check>
        Table_Size=RME_PGT_SIZE_TOP(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80212b3e:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
ffffffff80212b42:	b8 01 00 00 00       	mov    $0x1,%eax
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212b47:	31 d2                	xor    %edx,%edx
    Object=RME_CAP_GETOBJ(Pgt_Del,rme_ptr_t);
ffffffff80212b49:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
        Table_Size=RME_PGT_SIZE_NOM(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80212b4d:	d3 e0                	shl    %cl,%eax
ffffffff80212b4f:	48 63 f0             	movslq %eax,%rsi
ffffffff80212b52:	4c 89 e0             	mov    %r12,%rax
ffffffff80212b55:	48 c1 e6 03          	shl    $0x3,%rsi
ffffffff80212b59:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff80212b5f:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Pgt_Del,Type_Stat);
ffffffff80212b62:	84 d2                	test   %dl,%dl
ffffffff80212b64:	0f 84 44 0b 00 00    	je     ffffffff802136ae <_RME_Svc_Handler+0x289e>
    RME_ASSERT(_RME_Kot_Erase(Object,Table_Size)==0);
ffffffff80212b6a:	e8 e1 d4 ff ff       	call   ffffffff80210050 <_RME_Kot_Erase>
    return 0;
ffffffff80212b6f:	31 f6                	xor    %esi,%esi
ffffffff80212b71:	e9 2c f1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                                RME_PARAM_D1(Param[0]));                    /* rme_ptr_t Is_Exc_Ret */
ffffffff80212b76:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
ffffffff80212b7b:	49 8b 47 18          	mov    0x18(%r15),%rax
ffffffff80212b7f:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff80212b83:	89 ca                	mov    %ecx,%edx
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80212b85:	f6 c5 80             	test   $0x80,%ch
ffffffff80212b88:	0f 85 12 0c 00 00    	jne    ffffffff802137a0 <_RME_Svc_Handler+0x2990>
ffffffff80212b8e:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80212b91:	0f 83 a5 1d 00 00    	jae    ffffffff8021493c <_RME_Svc_Handler+0x3b2c>
ffffffff80212b97:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80212b9e:	ff 00 00 
ffffffff80212ba1:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212ba5:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212bac:	00 00 00 
ffffffff80212baf:	48 01 d0             	add    %rdx,%rax
ffffffff80212bb2:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212bb5:	48 21 d6             	and    %rdx,%rsi
ffffffff80212bb8:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80212bbb:	0f 84 6f 1d 00 00    	je     ffffffff80214930 <_RME_Svc_Handler+0x3b20>
ffffffff80212bc1:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212bc5:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff80212bc9:	0f 85 55 1d 00 00    	jne    ffffffff80214924 <_RME_Svc_Handler+0x3b14>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff80212bcf:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff80212bd3:	0f 84 0f 18 00 00    	je     ffffffff802143e8 <_RME_Svc_Handler+0x35d8>
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff80212bd9:	48 8b 40 18          	mov    0x18(%rax),%rax
    Invocation->Entry=Entry;
ffffffff80212bdd:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
            Retval=_RME_Inv_Set(Cpt,
ffffffff80212be2:	48 c1 e9 20          	shr    $0x20,%rcx
    return 0;
ffffffff80212be6:	31 f6                	xor    %esi,%esi
    Invocation->Entry=Entry;
ffffffff80212be8:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Invocation->Stack=Stack;
ffffffff80212bec:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff80212bf1:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Invocation->Is_Exc_Ret=Is_Exc_Ret;
ffffffff80212bf5:	48 89 48 30          	mov    %rcx,0x30(%rax)
    return 0;
ffffffff80212bf9:	e9 a4 f0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                                       RME_PARAM_D0(Param[1]),              /* rme_ptr_t Prio */
ffffffff80212bfe:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
ffffffff80212c03:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80212c08:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff80212c0c:	49 8b 7f 18          	mov    0x18(%r15),%rdi
ffffffff80212c10:	ff 74 24 40          	push   0x40(%rsp)
ffffffff80212c14:	44 89 c8             	mov    %r9d,%eax
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff80212c17:	4c 89 c1             	mov    %r8,%rcx
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80212c1a:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff80212c1e:	45 89 c0             	mov    %r8d,%r8d
ffffffff80212c21:	50                   	push   %rax
ffffffff80212c22:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff80212c27:	48 c1 e9 20          	shr    $0x20,%rcx
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80212c2b:	e8 d0 9c ff ff       	call   ffffffff8020c900 <_RME_Thd_Sched_Bind.isra.0>
            break;
ffffffff80212c30:	59                   	pop    %rcx
ffffffff80212c31:	5f                   	pop    %rdi
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80212c32:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212c35:	e9 68 f0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Retval=_RME_Sig_Crt(Cpt,
ffffffff80212c3a:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80212c3f:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212c43:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212c47:	f6 c4 80             	test   $0x80,%ah
ffffffff80212c4a:	0f 85 70 0c 00 00    	jne    ffffffff802138c0 <_RME_Svc_Handler+0x2ab0>
ffffffff80212c50:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212c53:	0f 83 97 1d 00 00    	jae    ffffffff802149f0 <_RME_Svc_Handler+0x3be0>
ffffffff80212c59:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212c60:	00 00 00 
ffffffff80212c63:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212c67:	48 01 c8             	add    %rcx,%rax
ffffffff80212c6a:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212c71:	ff 00 00 
ffffffff80212c74:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212c77:	48 21 d1             	and    %rdx,%rcx
ffffffff80212c7a:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212c7d:	0f 84 e1 1b 00 00    	je     ffffffff80214864 <_RME_Svc_Handler+0x3a54>
ffffffff80212c83:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212c87:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212c8b:	0f 85 c7 1b 00 00    	jne    ffffffff80214858 <_RME_Svc_Handler+0x3a48>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80212c91:	48 8b 70 10          	mov    0x10(%rax),%rsi
ffffffff80212c95:	48 f7 d6             	not    %rsi
ffffffff80212c98:	83 e6 01             	and    $0x1,%esi
ffffffff80212c9b:	0f 85 83 17 00 00    	jne    ffffffff80214424 <_RME_Svc_Handler+0x3614>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff80212ca1:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80212ca6:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212caa:	0f 83 9c 1b 00 00    	jae    ffffffff8021484c <_RME_Svc_Handler+0x3a3c>
ffffffff80212cb0:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80212cb4:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212cb8:	48 89 f0             	mov    %rsi,%rax
ffffffff80212cbb:	48 01 d1             	add    %rdx,%rcx
ffffffff80212cbe:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80212cc5:	00 00 00 
ffffffff80212cc8:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80212ccd:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80212cd0:	84 d2                	test   %dl,%dl
ffffffff80212cd2:	0f 84 37 fc ff ff    	je     ffffffff8021290f <_RME_Svc_Handler+0x1aff>
	__asm__ __volatile__ (
ffffffff80212cd8:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff80212cda:	89 c0                	mov    %eax,%eax
ffffffff80212cdc:	48 c1 e2 20          	shl    $0x20,%rdx
    return 0;
ffffffff80212ce0:	31 f6                	xor    %esi,%esi
ffffffff80212ce2:	48 09 c2             	or     %rax,%rdx
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80212ce5:	48 b8 00 00 00 00 00 	movabs $0x8000000000000,%rax
ffffffff80212cec:	00 08 00 
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80212cef:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    Sig_Crt->Head.Root_Ref=0U;
ffffffff80212cf3:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
ffffffff80212cfa:	00 
    Sig_Crt->Head.Object=0U;
ffffffff80212cfb:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
ffffffff80212d02:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff80212d03:	48 c7 41 10 3f 00 00 	movq   $0x3f,0x10(%rcx)
ffffffff80212d0a:	00 
    Sig_Crt->Sig_Num=0U;
ffffffff80212d0b:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
ffffffff80212d12:	00 
    Sig_Crt->Thd=0U;
ffffffff80212d13:	48 c7 41 30 00 00 00 	movq   $0x0,0x30(%rcx)
ffffffff80212d1a:	00 
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80212d1b:	48 89 01             	mov    %rax,(%rcx)
    return 0;
ffffffff80212d1e:	e9 7f ef ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                                      (rme_cid_t)Param[0]);                 /* rme_cid_t Cap_Thd */
ffffffff80212d23:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff80212d28:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212d2c:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80212d30:	f6 c4 80             	test   $0x80,%ah
ffffffff80212d33:	0f 85 b7 10 00 00    	jne    ffffffff80213df0 <_RME_Svc_Handler+0x2fe0>
ffffffff80212d39:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212d3c:	0f 83 6e 1d 00 00    	jae    ffffffff80214ab0 <_RME_Svc_Handler+0x3ca0>
ffffffff80212d42:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212d49:	00 00 00 
ffffffff80212d4c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212d50:	48 01 c8             	add    %rcx,%rax
ffffffff80212d53:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212d5a:	ff 00 00 
ffffffff80212d5d:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212d60:	48 21 d1             	and    %rdx,%rcx
ffffffff80212d63:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212d66:	0f 84 38 1d 00 00    	je     ffffffff80214aa4 <_RME_Svc_Handler+0x3c94>
ffffffff80212d6c:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212d70:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80212d74:	0f 85 1e 1d 00 00    	jne    ffffffff80214a98 <_RME_Svc_Handler+0x3c88>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
ffffffff80212d7a:	f6 40 10 20          	testb  $0x20,0x10(%rax)
ffffffff80212d7e:	0f 84 34 16 00 00    	je     ffffffff802143b8 <_RME_Svc_Handler+0x35a8>
    Scheduler=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff80212d84:	48 8b 68 18          	mov    0x18(%rax),%rbp
    if(Scheduler->Sched.Local!=RME_CPU_LOCAL())
ffffffff80212d88:	4c 8b 65 28          	mov    0x28(%rbp),%r12
ffffffff80212d8c:	e8 ae 8a ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80212d91:	49 39 c4             	cmp    %rax,%r12
ffffffff80212d94:	0f 85 f2 1f 00 00    	jne    ffffffff80214d8c <_RME_Svc_Handler+0x3f7c>
    if(Scheduler->Sched.Event.Next==&(Scheduler->Sched.Event))
ffffffff80212d9a:	48 8b 45 78          	mov    0x78(%rbp),%rax
ffffffff80212d9e:	48 83 c5 78          	add    $0x78,%rbp
ffffffff80212da2:	48 39 e8             	cmp    %rbp,%rax
ffffffff80212da5:	0f 84 a5 1f 00 00    	je     ffffffff80214d50 <_RME_Svc_Handler+0x3f40>
    _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff80212dab:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80212daf:	48 8b 08             	mov    (%rax),%rcx
    Head->Next=Head;
ffffffff80212db2:	66 48 0f 6e c0       	movq   %rax,%xmm0
ffffffff80212db7:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
    Next->Prev=Prev;
ffffffff80212dbb:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    Prev->Next=Next;
ffffffff80212dbf:	48 89 0a             	mov    %rcx,(%rdx)
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80212dc2:	48 8b 50 28          	mov    0x28(%rax),%rdx
    Head->Next=Head;
ffffffff80212dc6:	0f 11 00             	movups %xmm0,(%rax)
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80212dc9:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212dcd:	0f 84 1b 14 00 00    	je     ffffffff802141ee <_RME_Svc_Handler+0x33de>
    else if(Thread->Sched.State==RME_THD_TIMEOUT)
ffffffff80212dd3:	31 f6                	xor    %esi,%esi
ffffffff80212dd5:	48 83 fa 02          	cmp    $0x2,%rdx
ffffffff80212dd9:	40 0f 94 c6          	sete   %sil
ffffffff80212ddd:	48 c1 e6 3d          	shl    $0x3d,%rsi
    return (rme_ret_t)(Thread->Sched.TID|Flag);
ffffffff80212de1:	48 0b 70 10          	or     0x10(%rax),%rsi
ffffffff80212de5:	e9 b8 ee ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212dea:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Prio_Max */
ffffffff80212def:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212df4:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80212df8:	4c 89 ff             	mov    %r15,%rdi
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
ffffffff80212dfb:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212e00:	48 89 c6             	mov    %rax,%rsi
ffffffff80212e03:	48 c1 e8 07          	shr    $0x7,%rax
ffffffff80212e07:	45 89 c1             	mov    %r8d,%r9d
ffffffff80212e0a:	83 e6 40             	and    $0x40,%esi
ffffffff80212e0d:	89 d1                	mov    %edx,%ecx
ffffffff80212e0f:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80212e13:	56                   	push   %rsi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80212e14:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212e18:	50                   	push   %rax
ffffffff80212e19:	ff 74 24 58          	push   0x58(%rsp)
ffffffff80212e1d:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
ffffffff80212e22:	e8 39 c4 ff ff       	call   ffffffff8020f260 <_RME_Thd_Crt>
            break;
ffffffff80212e27:	48 83 c4 20          	add    $0x20,%rsp
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212e2b:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212e2e:	e9 6f ee ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff80212e33:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff80212e38:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff80212e3c:	49 8b 7f 28          	mov    0x28(%r15),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80212e40:	f6 c4 80             	test   $0x80,%ah
ffffffff80212e43:	0f 85 c3 08 00 00    	jne    ffffffff8021370c <_RME_Svc_Handler+0x28fc>
ffffffff80212e49:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212e4c:	0f 83 72 17 00 00    	jae    ffffffff802145c4 <_RME_Svc_Handler+0x37b4>
ffffffff80212e52:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80212e59:	ff 00 00 
ffffffff80212e5c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212e60:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80212e67:	00 00 00 
ffffffff80212e6a:	48 8d 0c 30          	lea    (%rax,%rsi,1),%rcx
ffffffff80212e6e:	48 8b 01             	mov    (%rcx),%rax
ffffffff80212e71:	48 21 c2             	and    %rax,%rdx
ffffffff80212e74:	4c 39 c2             	cmp    %r8,%rdx
ffffffff80212e77:	0f 84 3b 17 00 00    	je     ffffffff802145b8 <_RME_Svc_Handler+0x37a8>
ffffffff80212e7d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212e81:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80212e85:	0f 85 45 17 00 00    	jne    ffffffff802145d0 <_RME_Svc_Handler+0x37c0>
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Pgt */
ffffffff80212e8b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80212e90:	f6 c4 80             	test   $0x80,%ah
ffffffff80212e93:	0f 85 de 11 00 00    	jne    ffffffff80214077 <_RME_Svc_Handler+0x3267>
ffffffff80212e99:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212e9c:	0f 83 3a 1d 00 00    	jae    ffffffff80214bdc <_RME_Svc_Handler+0x3dcc>
ffffffff80212ea2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212ea6:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80212eab:	48 8d 14 30          	lea    (%rax,%rsi,1),%rdx
ffffffff80212eaf:	be ff ff 00 00       	mov    $0xffff,%esi
ffffffff80212eb4:	48 c1 e7 21          	shl    $0x21,%rdi
ffffffff80212eb8:	48 8b 02             	mov    (%rdx),%rax
ffffffff80212ebb:	48 c1 e6 20          	shl    $0x20,%rsi
ffffffff80212ebf:	48 21 c6             	and    %rax,%rsi
ffffffff80212ec2:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80212ec5:	0f 84 05 1d 00 00    	je     ffffffff80214bd0 <_RME_Svc_Handler+0x3dc0>
ffffffff80212ecb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212ecf:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80212ed3:	0f 85 eb 1c 00 00    	jne    ffffffff80214bc4 <_RME_Svc_Handler+0x3db4>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
ffffffff80212ed9:	f6 41 10 08          	testb  $0x8,0x10(%rcx)
ffffffff80212edd:	0f 84 d5 1c 00 00    	je     ffffffff80214bb8 <_RME_Svc_Handler+0x3da8>
    RME_CAP_CHECK(Pgt_New,RME_PGT_FLAG_PRC_PGT);
ffffffff80212ee3:	f6 42 10 80          	testb  $0x80,0x10(%rdx)
ffffffff80212ee7:	0f 84 a7 19 00 00    	je     ffffffff80214894 <_RME_Svc_Handler+0x3a84>
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff80212eed:	83 3a 00             	cmpl   $0x0,(%rdx)
    Pgt_Old=Prc_Op->Pgt;
ffffffff80212ef0:	48 8b 41 30          	mov    0x30(%rcx),%rax
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff80212ef4:	74 04                	je     ffffffff80212efa <_RME_Svc_Handler+0x20ea>
ffffffff80212ef6:	48 8b 52 08          	mov    0x8(%rdx),%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212efa:	f0 48 0f b1 51 30    	lock cmpxchg %rdx,0x30(%rcx)
ffffffff80212f00:	40 0f 94 c6          	sete   %sil
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Pgt)),
ffffffff80212f04:	40 84 f6             	test   %sil,%sil
ffffffff80212f07:	0f 85 77 f2 ff ff    	jne    ffffffff80212184 <_RME_Svc_Handler+0x1374>
        return RME_ERR_PTH_CONFLICT;
ffffffff80212f0d:	48 c7 c6 36 ff ff ff 	mov    $0xffffffffffffff36,%rsi
ffffffff80212f14:	e9 89 ed ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80212f19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            Retval=_RME_Thd_Del(Cpt,
ffffffff80212f20:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80212f25:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212f29:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212f2d:	f6 c4 80             	test   $0x80,%ah
ffffffff80212f30:	0f 85 fa 08 00 00    	jne    ffffffff80213830 <_RME_Svc_Handler+0x2a20>
ffffffff80212f36:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212f39:	0f 83 5d 1a 00 00    	jae    ffffffff8021499c <_RME_Svc_Handler+0x3b8c>
ffffffff80212f3f:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212f46:	00 00 00 
ffffffff80212f49:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212f4d:	48 01 c8             	add    %rcx,%rax
ffffffff80212f50:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212f57:	ff 00 00 
ffffffff80212f5a:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212f5d:	48 21 d1             	and    %rdx,%rcx
ffffffff80212f60:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212f63:	0f 84 27 1a 00 00    	je     ffffffff80214990 <_RME_Svc_Handler+0x3b80>
ffffffff80212f69:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212f6d:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212f71:	0f 85 0d 1a 00 00    	jne    ffffffff80214984 <_RME_Svc_Handler+0x3b74>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212f77:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212f7b:	0f 84 97 14 00 00    	je     ffffffff80214418 <_RME_Svc_Handler+0x3608>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Thd */
ffffffff80212f81:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff80212f86:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212f8a:	0f 83 b0 18 00 00    	jae    ffffffff80214840 <_RME_Svc_Handler+0x3a30>
ffffffff80212f90:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80212f94:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff80212f98:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff80212f9f:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff80212fa2:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff80212fa5:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff80212fac:	00 00 00 
ffffffff80212faf:	48 8b 31             	mov    (%rcx),%rsi
ffffffff80212fb2:	48 21 f0             	and    %rsi,%rax
ffffffff80212fb5:	48 39 d0             	cmp    %rdx,%rax
ffffffff80212fb8:	0f 85 ca 18 00 00    	jne    ffffffff80214888 <_RME_Svc_Handler+0x3a78>
ffffffff80212fbe:	48 89 f0             	mov    %rsi,%rax
ffffffff80212fc1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212fc5:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80212fc9:	0f 85 ad 18 00 00    	jne    ffffffff8021487c <_RME_Svc_Handler+0x3a6c>
	__asm__ __volatile__ (
ffffffff80212fcf:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff80212fd1:	89 c0                	mov    %eax,%eax
ffffffff80212fd3:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff80212fd7:	48 09 c2             	or     %rax,%rdx
ffffffff80212fda:	48 89 d0             	mov    %rdx,%rax
ffffffff80212fdd:	48 2b 41 20          	sub    0x20(%rcx),%rax
ffffffff80212fe1:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80212fe5:	0f 86 a5 14 00 00    	jbe    ffffffff80214490 <_RME_Svc_Handler+0x3680>
ffffffff80212feb:	48 83 79 08 00       	cmpq   $0x0,0x8(%rcx)
ffffffff80212ff0:	0f 85 c5 12 00 00    	jne    ffffffff802142bb <_RME_Svc_Handler+0x34ab>
    Thread=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
ffffffff80212ff6:	48 8b 79 18          	mov    0x18(%rcx),%rdi
    if(Thread->Sched.Local!=RME_THD_FREE)
ffffffff80212ffa:	48 83 7f 28 ff       	cmpq   $0xffffffffffffffff,0x28(%rdi)
ffffffff80212fff:	0f 85 6f 1d 00 00    	jne    ffffffff80214d74 <_RME_Svc_Handler+0x3f64>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80213005:	31 d2                	xor    %edx,%edx
ffffffff80213007:	48 89 f0             	mov    %rsi,%rax
ffffffff8021300a:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021300f:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Thd_Del,Type_Stat);
ffffffff80213012:	84 d2                	test   %dl,%dl
ffffffff80213014:	0f 84 94 06 00 00    	je     ffffffff802136ae <_RME_Svc_Handler+0x289e>
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff8021301a:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
ffffffff80213021:	48 8d b7 98 00 00 00 	lea    0x98(%rdi),%rsi
ffffffff80213028:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021302b:	74 2a                	je     ffffffff80213057 <_RME_Svc_Handler+0x2247>
        _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8021302d:	48 8b 08             	mov    (%rax),%rcx
ffffffff80213030:	48 8b 50 08          	mov    0x8(%rax),%rdx
    Next->Prev=Prev;
ffffffff80213034:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    Prev->Next=Next;
ffffffff80213038:	48 89 0a             	mov    %rcx,(%rdx)
        Invocation->Thd_Act=0U;
ffffffff8021303b:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80213042:	00 
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff80213043:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
        Thread->Ctx.Invstk_Depth--;
ffffffff8021304a:	48 83 af a8 00 00 00 	subq   $0x1,0xa8(%rdi)
ffffffff80213051:	01 
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff80213052:	48 39 c6             	cmp    %rax,%rsi
ffffffff80213055:	75 d6                	jne    ffffffff8021302d <_RME_Svc_Handler+0x221d>
    RME_FETCH_ADD(&(Thread->Sched.Prc->Head.Root_Ref), -1);
ffffffff80213057:	48 8b 47 58          	mov    0x58(%rdi),%rax
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8021305b:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
ffffffff8021305f:	48 83 c0 08          	add    $0x8,%rax
ffffffff80213063:	f0 48 0f c1 10       	lock xadd %rdx,(%rax)
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)==0U)
ffffffff80213068:	48 83 bf 88 00 00 00 	cmpq   $0x0,0x88(%rdi)
ffffffff8021306f:	00 
ffffffff80213070:	0f 88 31 13 00 00    	js     ffffffff802143a7 <_RME_Svc_Handler+0x3597>
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff80213076:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff8021307b:	e8 d0 cf ff ff       	call   ffffffff80210050 <_RME_Kot_Erase>
    return 0;
ffffffff80213080:	31 f6                	xor    %esi,%esi
ffffffff80213082:	e9 1b ec ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80213087:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021308e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff80213090:	4c 89 e0             	mov    %r12,%rax
ffffffff80213093:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213097:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021309a:	0f 83 50 01 00 00    	jae    ffffffff802131f0 <_RME_Svc_Handler+0x23e0>
ffffffff802130a0:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802130a7:	ff 00 00 
ffffffff802130aa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802130ae:	48 01 f0             	add    %rsi,%rax
ffffffff802130b1:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802130b8:	00 00 00 
ffffffff802130bb:	48 8b 10             	mov    (%rax),%rdx
ffffffff802130be:	48 89 d7             	mov    %rdx,%rdi
ffffffff802130c1:	48 21 cf             	and    %rcx,%rdi
ffffffff802130c4:	48 39 f7             	cmp    %rsi,%rdi
ffffffff802130c7:	0f 84 73 01 00 00    	je     ffffffff80213240 <_RME_Svc_Handler+0x2430>
ffffffff802130cd:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802130d1:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802130d5:	0f 85 5c ee ff ff    	jne    ffffffff80211f37 <_RME_Svc_Handler+0x1127>
ffffffff802130db:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802130df:	41 81 e4 ff 7f 00 00 	and    $0x7fff,%r12d
ffffffff802130e6:	49 39 d4             	cmp    %rdx,%r12
ffffffff802130e9:	0f 83 01 01 00 00    	jae    ffffffff802131f0 <_RME_Svc_Handler+0x23e0>
ffffffff802130ef:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff802130f3:	4c 03 60 18          	add    0x18(%rax),%r12
ffffffff802130f7:	48 89 c8             	mov    %rcx,%rax
ffffffff802130fa:	49 8b 14 24          	mov    (%r12),%rdx
ffffffff802130fe:	48 21 d0             	and    %rdx,%rax
ffffffff80213101:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213104:	0f 84 36 01 00 00    	je     ffffffff80213240 <_RME_Svc_Handler+0x2430>
ffffffff8021310a:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021310e:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80213112:	0f 84 f8 df ff ff    	je     ffffffff80211110 <_RME_Svc_Handler+0x300>
ffffffff80213118:	e9 1a ee ff ff       	jmp    ffffffff80211f37 <_RME_Svc_Handler+0x1127>
ffffffff8021311d:	0f 1f 00             	nopl   (%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80213120:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213123:	0f 83 b2 0e 00 00    	jae    ffffffff80213fdb <_RME_Svc_Handler+0x31cb>
ffffffff80213129:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80213130:	ff 00 00 
ffffffff80213133:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213137:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8021313e:	00 00 00 
ffffffff80213141:	48 01 d0             	add    %rdx,%rax
ffffffff80213144:	48 8b 30             	mov    (%rax),%rsi
ffffffff80213147:	48 21 f7             	and    %rsi,%rdi
ffffffff8021314a:	4c 39 df             	cmp    %r11,%rdi
ffffffff8021314d:	0f 84 2f ee ff ff    	je     ffffffff80211f82 <_RME_Svc_Handler+0x1172>
ffffffff80213153:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213157:	48 83 fe 06          	cmp    $0x6,%rsi
ffffffff8021315b:	0f 84 87 e2 ff ff    	je     ffffffff802113e8 <_RME_Svc_Handler+0x5d8>
ffffffff80213161:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213168:	e9 35 eb ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021316d:	0f 1f 00             	nopl   (%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213170:	4c 89 e2             	mov    %r12,%rdx
ffffffff80213173:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213177:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021317a:	0f 83 c6 04 00 00    	jae    ffffffff80213646 <_RME_Svc_Handler+0x2836>
ffffffff80213180:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213187:	ff 00 00 
ffffffff8021318a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021318e:	49 03 57 18          	add    0x18(%r15),%rdx
ffffffff80213192:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80213199:	00 00 00 
ffffffff8021319c:	48 8b 02             	mov    (%rdx),%rax
ffffffff8021319f:	48 89 c7             	mov    %rax,%rdi
ffffffff802131a2:	48 21 cf             	and    %rcx,%rdi
ffffffff802131a5:	48 39 f7             	cmp    %rsi,%rdi
ffffffff802131a8:	74 3a                	je     ffffffff802131e4 <_RME_Svc_Handler+0x23d4>
ffffffff802131aa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802131ae:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802131b2:	0f 85 d3 04 00 00    	jne    ffffffff8021368b <_RME_Svc_Handler+0x287b>
ffffffff802131b8:	4c 89 e0             	mov    %r12,%rax
ffffffff802131bb:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff802131bf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802131c4:	48 39 f8             	cmp    %rdi,%rax
ffffffff802131c7:	0f 83 79 04 00 00    	jae    ffffffff80213646 <_RME_Svc_Handler+0x2836>
ffffffff802131cd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802131d1:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802131d5:	48 8b 10             	mov    (%rax),%rdx
ffffffff802131d8:	48 21 d1             	and    %rdx,%rcx
ffffffff802131db:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802131de:	0f 85 57 dd ff ff    	jne    ffffffff80210f3b <_RME_Svc_Handler+0x12b>
ffffffff802131e4:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802131eb:	e9 b2 ea ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff802131f0:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802131f7:	e9 a6 ea ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802131fc:	0f 1f 40 00          	nopl   0x0(%rax)
        if((Option==RME_RCV_BS)||(Option==RME_RCV_BM))
ffffffff80213200:	49 83 fc 01          	cmp    $0x1,%r12
ffffffff80213204:	0f 87 e1 e8 ff ff    	ja     ffffffff80211aeb <_RME_Svc_Handler+0xcdb>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021320a:	f0 48 0f b1 7d 30    	lock cmpxchg %rdi,0x30(%rbp)
ffffffff80213210:	0f 94 c0             	sete   %al
            if(RME_COMP_SWAP((rme_ptr_t*)&(Sig_Root->Thd),
ffffffff80213213:	84 c0                	test   %al,%al
ffffffff80213215:	0f 84 c8 02 00 00    	je     ffffffff802134e3 <_RME_Svc_Handler+0x26d3>
            Thd_Cur->Sched.Signal=Sig_Root;
ffffffff8021321b:	48 89 6f 50          	mov    %rbp,0x50(%rdi)
            Thd_Cur->Sched.State=RME_THD_BLOCKED;
ffffffff8021321f:	48 c7 47 38 01 00 00 	movq   $0x1,0x38(%rdi)
ffffffff80213226:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80213227:	e8 34 95 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            _RME_Kern_High(Reg,Local);
ffffffff8021322c:	4c 89 c6             	mov    %r8,%rsi
ffffffff8021322f:	48 89 df             	mov    %rbx,%rdi
ffffffff80213232:	e8 d9 da ff ff       	call   ffffffff80210d10 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213237:	e9 7c dc ff ff       	jmp    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
ffffffff8021323c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80213240:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213247:	e9 56 ea ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021324c:	0f 1f 40 00          	nopl   0x0(%rax)
    switch(Option)
ffffffff80213250:	49 83 fc 03          	cmp    $0x3,%r12
ffffffff80213254:	0f 85 95 02 00 00    	jne    ffffffff802134ef <_RME_Svc_Handler+0x26df>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NM);
ffffffff8021325a:	f6 45 10 10          	testb  $0x10,0x10(%rbp)
ffffffff8021325e:	0f 85 24 e7 ff ff    	jne    ffffffff80211988 <_RME_Svc_Handler+0xb78>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff80213264:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021326b:	e9 32 ea ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        _RME_Run_Del(Thread);
ffffffff80213270:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213273:	e8 e8 94 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80213278:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff8021327f:	00 
ffffffff80213280:	e9 26 e5 ff ff       	jmp    ffffffff802117ab <_RME_Svc_Handler+0x99b>
ffffffff80213285:	0f 1f 00             	nopl   (%rax)
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80213288:	49 8b 44 24 20       	mov    0x20(%r12),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff8021328d:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80213291:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80213295:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80213298:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff8021329c:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff802132a1:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802132a5:	49 8b 44 04 08       	mov    0x8(%r12,%rax,1),%rax
        Local->Thd_Cur=_RME_Run_High(Local);
ffffffff802132aa:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    Prio=Thd->Sched.Prio;
ffffffff802132af:	48 8b 48 40          	mov    0x40(%rax),%rcx
    Local=Thd->Sched.Local;
ffffffff802132b3:	48 8b 50 28          	mov    0x28(%rax),%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802132b7:	48 89 cf             	mov    %rcx,%rdi
ffffffff802132ba:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff802132be:	4c 8d 04 3a          	lea    (%rdx,%rdi,1),%r8
ffffffff802132c2:	48 8d 7c 3a 28       	lea    0x28(%rdx,%rdi,1),%rdi
ffffffff802132c7:	49 8b 70 30          	mov    0x30(%r8),%rsi
ffffffff802132cb:	66 48 0f 6e c7       	movq   %rdi,%xmm0
    Next->Prev=New;
ffffffff802132d0:	49 89 40 30          	mov    %rax,0x30(%r8)
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff802132d4:	48 89 df             	mov    %rbx,%rdi
    New->Next=Next;
ffffffff802132d7:	66 48 0f 6e de       	movq   %rsi,%xmm3
ffffffff802132dc:	66 0f 6c c3          	punpcklqdq %xmm3,%xmm0
ffffffff802132e0:	0f 11 00             	movups %xmm0,(%rax)
    Prev->Next=New;
ffffffff802132e3:	48 89 06             	mov    %rax,(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802132e6:	48 89 ce             	mov    %rcx,%rsi
ffffffff802132e9:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff802132ee:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff802132f2:	48 d3 e0             	shl    %cl,%rax
ffffffff802132f5:	48 09 44 f2 20       	or     %rax,0x20(%rdx,%rsi,8)
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff802132fa:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
ffffffff802132ff:	48 89 ee             	mov    %rbp,%rsi
ffffffff80213302:	e8 99 9d ff ff       	call   ffffffff8020d0a0 <_RME_Run_Swt.isra.0>
ffffffff80213307:	e9 b2 e4 ff ff       	jmp    ffffffff802117be <_RME_Svc_Handler+0x9ae>
ffffffff8021330c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80213310:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213317:	e9 86 e9 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        if(Time>=RME_THD_INF_TIME)
ffffffff8021331c:	4c 39 ea             	cmp    %r13,%rdx
ffffffff8021331f:	0f 83 5c 02 00 00    	jae    ffffffff80213581 <_RME_Svc_Handler+0x2771>
            if(Time==RME_THD_INIT_TIME)
ffffffff80213325:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff8021332c:	ff ff 7f 
                if(Thd_Src->Sched.Slice!=RME_THD_INIT_TIME)
ffffffff8021332f:	49 39 cd             	cmp    %rcx,%r13
ffffffff80213332:	75 09                	jne    ffffffff8021333d <_RME_Svc_Handler+0x252d>
ffffffff80213334:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213337:	0f 85 63 0c 00 00    	jne    ffffffff80213fa0 <_RME_Svc_Handler+0x3190>
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff8021333d:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80213344:	ff ff 7f 
ffffffff80213347:	48 8b 75 30          	mov    0x30(%rbp),%rsi
ffffffff8021334b:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021334e:	0f 82 62 de ff ff    	jb     ffffffff802111b6 <_RME_Svc_Handler+0x3a6>
                Thd_Dst->Sched.Slice=RME_THD_INF_TIME;
ffffffff80213354:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
ffffffff8021335b:	ff ff 7f 
ffffffff8021335e:	48 89 45 30          	mov    %rax,0x30(%rbp)
    if(Thd_Src->Sched.Slice==0U)
ffffffff80213362:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff80213366:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021336d:	00 00 00 
ffffffff80213370:	48 85 c0             	test   %rax,%rax
ffffffff80213373:	0f 85 39 de ff ff    	jne    ffffffff802111b2 <_RME_Svc_Handler+0x3a2>
ffffffff80213379:	e9 29 de ff ff       	jmp    ffffffff802111a7 <_RME_Svc_Handler+0x397>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff8021337e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213382:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213385:	0f 83 50 0c 00 00    	jae    ffffffff80213fdb <_RME_Svc_Handler+0x31cb>
ffffffff8021338b:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213392:	ff 00 00 
ffffffff80213395:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213399:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802133a0:	00 00 00 
ffffffff802133a3:	48 01 d0             	add    %rdx,%rax
ffffffff802133a6:	48 8b 10             	mov    (%rax),%rdx
ffffffff802133a9:	48 89 d7             	mov    %rdx,%rdi
ffffffff802133ac:	48 21 cf             	and    %rcx,%rdi
ffffffff802133af:	48 39 f7             	cmp    %rsi,%rdi
ffffffff802133b2:	0f 84 ca eb ff ff    	je     ffffffff80211f82 <_RME_Svc_Handler+0x1172>
ffffffff802133b8:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802133bc:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802133c0:	0f 85 9b fd ff ff    	jne    ffffffff80213161 <_RME_Svc_Handler+0x2351>
ffffffff802133c6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff802133cb:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff802133cf:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff802133d5:	48 39 fa             	cmp    %rdi,%rdx
ffffffff802133d8:	0f 83 fd 0b 00 00    	jae    ffffffff80213fdb <_RME_Svc_Handler+0x31cb>
ffffffff802133de:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802133e2:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff802133e6:	48 8b 02             	mov    (%rdx),%rax
ffffffff802133e9:	48 21 c1             	and    %rax,%rcx
ffffffff802133ec:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802133ef:	0f 85 66 e0 ff ff    	jne    ffffffff8021145b <_RME_Svc_Handler+0x64b>
ffffffff802133f5:	e9 88 eb ff ff       	jmp    ffffffff80211f82 <_RME_Svc_Handler+0x1172>
ffffffff802133fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213400:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213407:	e9 96 e8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8021340c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213413:	e9 8a e8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80213418:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021341f:	e9 8c e4 ff ff       	jmp    ffffffff802118b0 <_RME_Svc_Handler+0xaa0>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213424:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021342b:	e9 72 e8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80213430:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213437:	e9 66 e8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8021343c:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213443:	e9 5a e8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        return RME_ERR_SIV_ACT;
ffffffff80213448:	48 c7 c6 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rsi
ffffffff8021344f:	e9 4e e8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NS);
ffffffff80213454:	f6 45 10 08          	testb  $0x8,0x10(%rbp)
ffffffff80213458:	0f 85 2a e5 ff ff    	jne    ffffffff80211988 <_RME_Svc_Handler+0xb78>
ffffffff8021345e:	e9 01 fe ff ff       	jmp    ffffffff80213264 <_RME_Svc_Handler+0x2454>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff80213463:	f6 45 10 02          	testb  $0x2,0x10(%rbp)
ffffffff80213467:	0f 85 1b e5 ff ff    	jne    ffffffff80211988 <_RME_Svc_Handler+0xb78>
ffffffff8021346d:	e9 f2 fd ff ff       	jmp    ffffffff80213264 <_RME_Svc_Handler+0x2454>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213472:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213479:	e9 24 e8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff8021347e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213485:	e9 26 e4 ff ff       	jmp    ffffffff802118b0 <_RME_Svc_Handler+0xaa0>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8021348a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213491:	e9 0c e8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213496:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021349d:	e9 00 e8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802134a2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802134a9:	e9 f4 e7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Thd_Cur->Sched.Slice=0U;
ffffffff802134ae:	49 c7 45 30 00 00 00 	movq   $0x0,0x30(%r13)
ffffffff802134b5:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff802134b6:	4c 89 ef             	mov    %r13,%rdi
ffffffff802134b9:	e8 a2 92 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff802134be:	49 c7 45 38 02 00 00 	movq   $0x2,0x38(%r13)
ffffffff802134c5:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff802134c6:	e8 b5 a6 ff ff       	call   ffffffff8020db80 <_RME_Run_Notif>
ffffffff802134cb:	e9 cb e9 ff ff       	jmp    ffffffff80211e9b <_RME_Svc_Handler+0x108b>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802134d0:	31 d2                	xor    %edx,%edx
ffffffff802134d2:	f0 48 0f b1 55 28    	lock cmpxchg %rdx,0x28(%rbp)
ffffffff802134d8:	0f 94 c2             	sete   %dl
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff802134db:	84 d2                	test   %dl,%dl
ffffffff802134dd:	0f 85 cd e3 ff ff    	jne    ffffffff802118b0 <_RME_Svc_Handler+0xaa0>
                return RME_ERR_SIV_CONFLICT;
ffffffff802134e3:	48 c7 c6 cf fe ff ff 	mov    $0xfffffffffffffecf,%rsi
ffffffff802134ea:	e9 b3 e7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            return RME_ERR_SIV_ACT;
ffffffff802134ef:	48 c7 c6 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rsi
ffffffff802134f6:	e9 a7 e7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        __RME_Svc_Retval_Set(&(Thread->Ctx.Reg->Reg),RME_ERR_SIV_FREE);
ffffffff802134fb:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff80213502:	48 c7 c6 ce fe ff ff 	mov    $0xfffffffffffffece,%rsi
ffffffff80213509:	e8 12 82 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
        Thread->Sched.Signal->Thd=RME_NULL;
ffffffff8021350e:	48 8b 45 50          	mov    0x50(%rbp),%rax
ffffffff80213512:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80213519:	00 
        Thread->Sched.Signal=RME_NULL;
ffffffff8021351a:	48 c7 45 50 00 00 00 	movq   $0x0,0x50(%rbp)
ffffffff80213521:	00 
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80213522:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff80213529:	00 
ffffffff8021352a:	e9 7c e2 ff ff       	jmp    ffffffff802117ab <_RME_Svc_Handler+0x99b>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff8021352f:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213536:	e9 67 e7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff8021353b:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213542:	e9 5b e7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80213547:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
            if(Thd_Src->Sched.Slice>Time)
ffffffff8021354b:	49 39 c5             	cmp    %rax,%r13
ffffffff8021354e:	4c 0f 47 e8          	cmova  %rax,%r13
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80213552:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80213555:	72 1e                	jb     ffffffff80213575 <_RME_Svc_Handler+0x2765>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80213557:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff8021355e:	ff ff 7f 
ffffffff80213561:	4c 01 e9             	add    %r13,%rcx
ffffffff80213564:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213567:	0f 82 93 01 00 00    	jb     ffffffff80213700 <_RME_Svc_Handler+0x28f0>
            Thd_Dst->Sched.Slice+=Time_Xfer;
ffffffff8021356d:	48 89 4d 30          	mov    %rcx,0x30(%rbp)
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff80213571:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff80213575:	4c 29 e8             	sub    %r13,%rax
ffffffff80213578:	48 89 47 30          	mov    %rax,0x30(%rdi)
ffffffff8021357c:	e9 ef fd ff ff       	jmp    ffffffff80213370 <_RME_Svc_Handler+0x2560>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time);
ffffffff80213581:	31 c0                	xor    %eax,%eax
ffffffff80213583:	4c 03 6d 30          	add    0x30(%rbp),%r13
ffffffff80213587:	0f 92 c0             	setb   %al
ffffffff8021358a:	4c 39 ea             	cmp    %r13,%rdx
ffffffff8021358d:	0f 82 6d 01 00 00    	jb     ffffffff80213700 <_RME_Svc_Handler+0x28f0>
ffffffff80213593:	48 85 c0             	test   %rax,%rax
ffffffff80213596:	0f 85 64 01 00 00    	jne    ffffffff80213700 <_RME_Svc_Handler+0x28f0>
            Thd_Dst->Sched.Slice+=Time;
ffffffff8021359c:	4c 89 6d 30          	mov    %r13,0x30(%rbp)
    if(Thd_Src->Sched.Slice==0U)
ffffffff802135a0:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff802135a4:	e9 c7 fd ff ff       	jmp    ffffffff80213370 <_RME_Svc_Handler+0x2560>
        __RME_Svc_Retval_Set(Reg,0);
ffffffff802135a9:	31 f6                	xor    %esi,%esi
ffffffff802135ab:	48 89 df             	mov    %rbx,%rdi
ffffffff802135ae:	48 89 04 24          	mov    %rax,(%rsp)
ffffffff802135b2:	e8 69 81 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
        __RME_Svc_Retval_Set(&(Thd_Rcv->Ctx.Reg->Reg),1);
ffffffff802135b7:	49 8b bc 24 90 00 00 	mov    0x90(%r12),%rdi
ffffffff802135be:	00 
ffffffff802135bf:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802135c4:	e8 57 81 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
        if(Thd_Rcv->Sched.Slice!=0U)
ffffffff802135c9:	49 83 7c 24 30 00    	cmpq   $0x0,0x30(%r12)
ffffffff802135cf:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff802135d3:	0f 84 09 01 00 00    	je     ffffffff802136e2 <_RME_Svc_Handler+0x28d2>
    Prio=Thd->Sched.Prio;
ffffffff802135d9:	49 8b 4c 24 40       	mov    0x40(%r12),%rcx
    Local=Thd->Sched.Local;
ffffffff802135de:	49 8b 54 24 28       	mov    0x28(%r12),%rdx
            Thd_Rcv->Sched.State=RME_THD_READY;
ffffffff802135e3:	49 c7 44 24 38 00 00 	movq   $0x0,0x38(%r12)
ffffffff802135ea:	00 00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802135ec:	48 89 cf             	mov    %rcx,%rdi
ffffffff802135ef:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff802135f3:	4c 8d 04 3a          	lea    (%rdx,%rdi,1),%r8
ffffffff802135f7:	48 8d 7c 3a 28       	lea    0x28(%rdx,%rdi,1),%rdi
ffffffff802135fc:	49 8b 70 30          	mov    0x30(%r8),%rsi
ffffffff80213600:	66 48 0f 6e c7       	movq   %rdi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80213605:	48 89 cf             	mov    %rcx,%rdi
    Next->Prev=New;
ffffffff80213608:	4d 89 60 30          	mov    %r12,0x30(%r8)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021360c:	48 c1 ef 06          	shr    $0x6,%rdi
    New->Next=Next;
ffffffff80213610:	66 48 0f 6e f6       	movq   %rsi,%xmm6
ffffffff80213615:	66 0f 6c c6          	punpcklqdq %xmm6,%xmm0
ffffffff80213619:	41 0f 11 04 24       	movups %xmm0,(%r12)
    Prev->Next=New;
ffffffff8021361e:	4c 89 26             	mov    %r12,(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80213621:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213626:	48 d3 e6             	shl    %cl,%rsi
ffffffff80213629:	48 09 74 fa 20       	or     %rsi,0x20(%rdx,%rdi,8)
        _RME_Kern_High(Reg,Local);
ffffffff8021362e:	48 89 c6             	mov    %rax,%rsi
ffffffff80213631:	48 89 df             	mov    %rbx,%rdi
ffffffff80213634:	e8 d7 d6 ff ff       	call   ffffffff80210d10 <_RME_Kern_High>
        Sig_Root->Thd=RME_NULL;
ffffffff80213639:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff80213640:	00 
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213641:	e9 72 d8 ff ff       	jmp    ffffffff80210eb8 <_RME_Svc_Handler+0xa8>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213646:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021364d:	e9 50 e6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff80213652:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213659:	e9 44 e6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff8021365e:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213665:	e9 38 e6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff8021366a:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213671:	e9 2c e6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80213676:	49 c7 46 38 02 00 00 	movq   $0x2,0x38(%r14)
ffffffff8021367d:	00 
            _RME_Run_Notif(Thread);
ffffffff8021367e:	4c 89 f7             	mov    %r14,%rdi
ffffffff80213681:	e8 fa a4 ff ff       	call   ffffffff8020db80 <_RME_Run_Notif>
ffffffff80213686:	e9 e5 df ff ff       	jmp    ffffffff80211670 <_RME_Svc_Handler+0x860>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8021368b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213692:	e9 0b e6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            _RME_Run_Del(Thd_Src);
ffffffff80213697:	e8 c4 90 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Src->Sched.State=RME_THD_TIMEOUT;
ffffffff8021369c:	48 c7 47 38 02 00 00 	movq   $0x2,0x38(%rdi)
ffffffff802136a3:	00 
            _RME_Run_Notif(Thd_Src);
ffffffff802136a4:	e8 d7 a4 ff ff       	call   ffffffff8020db80 <_RME_Run_Notif>
ffffffff802136a9:	e9 04 db ff ff       	jmp    ffffffff802111b2 <_RME_Svc_Handler+0x3a2>
            Retval=RME_ERR_CPT_NULL;
ffffffff802136ae:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802136b5:	e9 e8 e5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Time_Xfer=Thd_Src->Sched.Slice;
ffffffff802136ba:	49 89 c5             	mov    %rax,%r13
ffffffff802136bd:	e9 95 fe ff ff       	jmp    ffffffff80213557 <_RME_Svc_Handler+0x2747>
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff802136c2:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802136c9:	e9 d4 e5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
                Thd_New=Thd_High;
ffffffff802136ce:	49 89 c4             	mov    %rax,%r12
ffffffff802136d1:	e9 e6 e7 ff ff       	jmp    ffffffff80211ebc <_RME_Svc_Handler+0x10ac>
        return RME_ERR_PTH_INVSTATE;
ffffffff802136d6:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802136dd:	e9 c0 e5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            Thd_Rcv->Sched.State=RME_THD_TIMEOUT;
ffffffff802136e2:	49 c7 44 24 38 02 00 	movq   $0x2,0x38(%r12)
ffffffff802136e9:	00 00 
            _RME_Run_Notif(Thd_Rcv);
ffffffff802136eb:	4c 89 e7             	mov    %r12,%rdi
ffffffff802136ee:	48 89 04 24          	mov    %rax,(%rsp)
ffffffff802136f2:	e8 89 a4 ff ff       	call   ffffffff8020db80 <_RME_Run_Notif>
ffffffff802136f7:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff802136fb:	e9 2e ff ff ff       	jmp    ffffffff8021362e <_RME_Svc_Handler+0x281e>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80213700:	48 c7 c6 30 ff ff ff 	mov    $0xffffffffffffff30,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213707:	e9 96 e5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8021370c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021370f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213713:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80213716:	0f 83 5c 12 00 00    	jae    ffffffff80214978 <_RME_Svc_Handler+0x3b68>
ffffffff8021371c:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80213723:	ff 00 00 
ffffffff80213726:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021372a:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80213731:	00 00 00 
ffffffff80213734:	48 01 f2             	add    %rsi,%rdx
ffffffff80213737:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8021373a:	49 89 ca             	mov    %rcx,%r10
ffffffff8021373d:	4d 21 c2             	and    %r8,%r10
ffffffff80213740:	4d 39 ca             	cmp    %r9,%r10
ffffffff80213743:	0f 84 23 12 00 00    	je     ffffffff8021496c <_RME_Svc_Handler+0x3b5c>
ffffffff80213749:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021374d:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213751:	0f 85 09 12 00 00    	jne    ffffffff80214960 <_RME_Svc_Handler+0x3b50>
ffffffff80213757:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8021375b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213760:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213763:	0f 83 eb 11 00 00    	jae    ffffffff80214954 <_RME_Svc_Handler+0x3b44>
ffffffff80213769:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021376d:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213771:	48 89 c1             	mov    %rax,%rcx
ffffffff80213774:	48 8b 00             	mov    (%rax),%rax
ffffffff80213777:	49 21 c0             	and    %rax,%r8
ffffffff8021377a:	4d 39 c8             	cmp    %r9,%r8
ffffffff8021377d:	0f 84 c5 11 00 00    	je     ffffffff80214948 <_RME_Svc_Handler+0x3b38>
ffffffff80213783:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213787:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8021378b:	0f 84 fa f6 ff ff    	je     ffffffff80212e8b <_RME_Svc_Handler+0x207b>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213791:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213798:	e9 05 e5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021379d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff802137a0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802137a4:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802137a7:	0f 83 2b 12 00 00    	jae    ffffffff802149d8 <_RME_Svc_Handler+0x3bc8>
ffffffff802137ad:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802137b4:	ff 00 00 
ffffffff802137b7:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802137bb:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802137c2:	00 00 00 
ffffffff802137c5:	48 01 c2             	add    %rax,%rdx
ffffffff802137c8:	48 8b 02             	mov    (%rdx),%rax
ffffffff802137cb:	49 89 c0             	mov    %rax,%r8
ffffffff802137ce:	49 21 f0             	and    %rsi,%r8
ffffffff802137d1:	49 39 f8             	cmp    %rdi,%r8
ffffffff802137d4:	0f 84 f2 11 00 00    	je     ffffffff802149cc <_RME_Svc_Handler+0x3bbc>
ffffffff802137da:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802137de:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802137e2:	0f 85 d8 11 00 00    	jne    ffffffff802149c0 <_RME_Svc_Handler+0x3bb0>
ffffffff802137e8:	48 89 c8             	mov    %rcx,%rax
ffffffff802137eb:	4c 8b 42 28          	mov    0x28(%rdx),%r8
ffffffff802137ef:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802137f4:	4c 39 c0             	cmp    %r8,%rax
ffffffff802137f7:	0f 83 b7 11 00 00    	jae    ffffffff802149b4 <_RME_Svc_Handler+0x3ba4>
ffffffff802137fd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213801:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213805:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213808:	48 21 d6             	and    %rdx,%rsi
ffffffff8021380b:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8021380e:	0f 84 94 11 00 00    	je     ffffffff802149a8 <_RME_Svc_Handler+0x3b98>
ffffffff80213814:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213818:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff8021381c:	0f 84 ad f3 ff ff    	je     ffffffff80212bcf <_RME_Svc_Handler+0x1dbf>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213822:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213829:	e9 74 e4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021382e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213830:	48 89 c2             	mov    %rax,%rdx
ffffffff80213833:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213837:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021383a:	0f 83 ec 11 00 00    	jae    ffffffff80214a2c <_RME_Svc_Handler+0x3c1c>
ffffffff80213840:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213847:	00 00 00 
ffffffff8021384a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021384e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213851:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213858:	ff 00 00 
ffffffff8021385b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8021385e:	49 89 f0             	mov    %rsi,%r8
ffffffff80213861:	49 21 c8             	and    %rcx,%r8
ffffffff80213864:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213867:	0f 84 b3 11 00 00    	je     ffffffff80214a20 <_RME_Svc_Handler+0x3c10>
ffffffff8021386d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213871:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213875:	0f 85 99 11 00 00    	jne    ffffffff80214a14 <_RME_Svc_Handler+0x3c04>
ffffffff8021387b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff8021387f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213884:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213887:	0f 83 7b 11 00 00    	jae    ffffffff80214a08 <_RME_Svc_Handler+0x3bf8>
ffffffff8021388d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213891:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213895:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213898:	48 21 d1             	and    %rdx,%rcx
ffffffff8021389b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8021389e:	0f 84 58 11 00 00    	je     ffffffff802149fc <_RME_Svc_Handler+0x3bec>
ffffffff802138a4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802138a8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802138ac:	0f 84 c5 f6 ff ff    	je     ffffffff80212f77 <_RME_Svc_Handler+0x2167>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802138b2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802138b9:	e9 e4 e3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802138be:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802138c0:	48 89 c2             	mov    %rax,%rdx
ffffffff802138c3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802138c7:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802138ca:	0f 83 10 0f 00 00    	jae    ffffffff802147e0 <_RME_Svc_Handler+0x39d0>
ffffffff802138d0:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802138d7:	00 00 00 
ffffffff802138da:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802138de:	48 01 ca             	add    %rcx,%rdx
ffffffff802138e1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802138e8:	ff 00 00 
ffffffff802138eb:	48 8b 32             	mov    (%rdx),%rsi
ffffffff802138ee:	49 89 f0             	mov    %rsi,%r8
ffffffff802138f1:	49 21 c8             	and    %rcx,%r8
ffffffff802138f4:	49 39 f8             	cmp    %rdi,%r8
ffffffff802138f7:	0f 84 d7 0e 00 00    	je     ffffffff802147d4 <_RME_Svc_Handler+0x39c4>
ffffffff802138fd:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213901:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213905:	0f 85 bd 0e 00 00    	jne    ffffffff802147c8 <_RME_Svc_Handler+0x39b8>
ffffffff8021390b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff8021390f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213914:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213917:	0f 83 9f 0e 00 00    	jae    ffffffff802147bc <_RME_Svc_Handler+0x39ac>
ffffffff8021391d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213921:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213925:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213928:	48 21 d1             	and    %rdx,%rcx
ffffffff8021392b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8021392e:	0f 84 7c 0e 00 00    	je     ffffffff802147b0 <_RME_Svc_Handler+0x39a0>
ffffffff80213934:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213938:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021393c:	0f 84 4f f3 ff ff    	je     ffffffff80212c91 <_RME_Svc_Handler+0x1e81>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213942:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213949:	e9 54 e3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021394e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff80213950:	48 89 c2             	mov    %rax,%rdx
ffffffff80213953:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213957:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021395a:	0f 83 6c 0d 00 00    	jae    ffffffff802146cc <_RME_Svc_Handler+0x38bc>
ffffffff80213960:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213967:	00 00 00 
ffffffff8021396a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021396e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213971:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213978:	ff 00 00 
ffffffff8021397b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8021397e:	49 89 f0             	mov    %rsi,%r8
ffffffff80213981:	49 21 c8             	and    %rcx,%r8
ffffffff80213984:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213987:	0f 84 33 0d 00 00    	je     ffffffff802146c0 <_RME_Svc_Handler+0x38b0>
ffffffff8021398d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213991:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213995:	0f 85 19 0d 00 00    	jne    ffffffff802146b4 <_RME_Svc_Handler+0x38a4>
ffffffff8021399b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff8021399f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802139a4:	48 39 f0             	cmp    %rsi,%rax
ffffffff802139a7:	0f 83 fb 0c 00 00    	jae    ffffffff802146a8 <_RME_Svc_Handler+0x3898>
ffffffff802139ad:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802139b1:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802139b5:	48 8b 10             	mov    (%rax),%rdx
ffffffff802139b8:	48 21 d1             	and    %rdx,%rcx
ffffffff802139bb:	48 39 f9             	cmp    %rdi,%rcx
ffffffff802139be:	0f 84 b4 0a 00 00    	je     ffffffff80214478 <_RME_Svc_Handler+0x3668>
ffffffff802139c4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802139c8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802139cc:	0f 84 35 ec ff ff    	je     ffffffff80212607 <_RME_Svc_Handler+0x17f7>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802139d2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802139d9:	e9 c4 e2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802139de:	66 90                	xchg   %ax,%ax
        return RME_ERR_CPT_FLAG;
ffffffff802139e0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802139e7:	e9 c4 de ff ff       	jmp    ffffffff802118b0 <_RME_Svc_Handler+0xaa0>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802139ec:	48 89 c2             	mov    %rax,%rdx
ffffffff802139ef:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802139f3:	48 39 fa             	cmp    %rdi,%rdx
ffffffff802139f6:	0f 83 b0 0b 00 00    	jae    ffffffff802145ac <_RME_Svc_Handler+0x379c>
ffffffff802139fc:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80213a03:	ff 00 00 
ffffffff80213a06:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213a0a:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80213a11:	00 00 00 
ffffffff80213a14:	48 01 f2             	add    %rsi,%rdx
ffffffff80213a17:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80213a1a:	49 89 ca             	mov    %rcx,%r10
ffffffff80213a1d:	4d 21 c2             	and    %r8,%r10
ffffffff80213a20:	4d 39 ca             	cmp    %r9,%r10
ffffffff80213a23:	0f 84 77 0b 00 00    	je     ffffffff802145a0 <_RME_Svc_Handler+0x3790>
ffffffff80213a29:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213a2d:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213a31:	0f 85 5d 0b 00 00    	jne    ffffffff80214594 <_RME_Svc_Handler+0x3784>
ffffffff80213a37:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80213a3b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213a40:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213a43:	0f 83 3f 0b 00 00    	jae    ffffffff80214588 <_RME_Svc_Handler+0x3778>
ffffffff80213a49:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213a4d:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213a51:	48 89 c1             	mov    %rax,%rcx
ffffffff80213a54:	48 8b 00             	mov    (%rax),%rax
ffffffff80213a57:	49 21 c0             	and    %rax,%r8
ffffffff80213a5a:	4d 39 c8             	cmp    %r9,%r8
ffffffff80213a5d:	0f 84 19 0b 00 00    	je     ffffffff8021457c <_RME_Svc_Handler+0x376c>
ffffffff80213a63:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213a67:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80213a6b:	0f 84 91 e6 ff ff    	je     ffffffff80212102 <_RME_Svc_Handler+0x12f2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213a71:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213a78:	e9 25 e2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80213a7d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213a80:	48 89 c2             	mov    %rax,%rdx
ffffffff80213a83:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213a87:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213a8a:	0f 83 9c 0c 00 00    	jae    ffffffff8021472c <_RME_Svc_Handler+0x391c>
ffffffff80213a90:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213a97:	00 00 00 
ffffffff80213a9a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213a9e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213aa1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213aa8:	ff 00 00 
ffffffff80213aab:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213aae:	49 89 f0             	mov    %rsi,%r8
ffffffff80213ab1:	49 21 c8             	and    %rcx,%r8
ffffffff80213ab4:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213ab7:	0f 84 63 0c 00 00    	je     ffffffff80214720 <_RME_Svc_Handler+0x3910>
ffffffff80213abd:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213ac1:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213ac5:	0f 85 49 0c 00 00    	jne    ffffffff80214714 <_RME_Svc_Handler+0x3904>
ffffffff80213acb:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213acf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213ad4:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213ad7:	0f 83 2b 0c 00 00    	jae    ffffffff80214708 <_RME_Svc_Handler+0x38f8>
ffffffff80213add:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213ae1:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213ae5:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213ae8:	48 21 d1             	and    %rdx,%rcx
ffffffff80213aeb:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213aee:	0f 84 08 0c 00 00    	je     ffffffff802146fc <_RME_Svc_Handler+0x38ec>
ffffffff80213af4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213af8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213afc:	0f 84 49 ec ff ff    	je     ffffffff8021274b <_RME_Svc_Handler+0x193b>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213b02:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213b09:	e9 94 e1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80213b0e:	66 90                	xchg   %ax,%ax
ffffffff80213b10:	48 89 c2             	mov    %rax,%rdx
ffffffff80213b13:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213b17:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213b1a:	0f 83 2c 10 00 00    	jae    ffffffff80214b4c <_RME_Svc_Handler+0x3d3c>
ffffffff80213b20:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213b27:	00 00 00 
ffffffff80213b2a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213b2e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213b31:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213b38:	ff 00 00 
ffffffff80213b3b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213b3e:	49 89 f0             	mov    %rsi,%r8
ffffffff80213b41:	49 21 c8             	and    %rcx,%r8
ffffffff80213b44:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213b47:	0f 84 f3 0f 00 00    	je     ffffffff80214b40 <_RME_Svc_Handler+0x3d30>
ffffffff80213b4d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213b51:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213b55:	0f 85 d9 0f 00 00    	jne    ffffffff80214b34 <_RME_Svc_Handler+0x3d24>
ffffffff80213b5b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213b5f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213b64:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213b67:	0f 83 bb 0f 00 00    	jae    ffffffff80214b28 <_RME_Svc_Handler+0x3d18>
ffffffff80213b6d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213b71:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213b75:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213b78:	48 21 d1             	and    %rdx,%rcx
ffffffff80213b7b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213b7e:	0f 84 98 0f 00 00    	je     ffffffff80214b1c <_RME_Svc_Handler+0x3d0c>
ffffffff80213b84:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213b88:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213b8c:	0f 84 b7 ec ff ff    	je     ffffffff80212849 <_RME_Svc_Handler+0x1a39>
ffffffff80213b92:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213b99:	e9 04 e1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80213b9e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213ba0:	48 89 c2             	mov    %rax,%rdx
ffffffff80213ba3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213ba7:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213baa:	0f 83 1c 11 00 00    	jae    ffffffff80214ccc <_RME_Svc_Handler+0x3ebc>
ffffffff80213bb0:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213bb7:	00 00 00 
ffffffff80213bba:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213bbe:	48 01 ca             	add    %rcx,%rdx
ffffffff80213bc1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213bc8:	ff 00 00 
ffffffff80213bcb:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213bce:	49 89 f0             	mov    %rsi,%r8
ffffffff80213bd1:	49 21 c8             	and    %rcx,%r8
ffffffff80213bd4:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213bd7:	0f 84 e3 10 00 00    	je     ffffffff80214cc0 <_RME_Svc_Handler+0x3eb0>
ffffffff80213bdd:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213be1:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213be5:	0f 85 c9 10 00 00    	jne    ffffffff80214cb4 <_RME_Svc_Handler+0x3ea4>
ffffffff80213beb:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213bef:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213bf4:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213bf7:	0f 83 ab 10 00 00    	jae    ffffffff80214ca8 <_RME_Svc_Handler+0x3e98>
ffffffff80213bfd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213c01:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213c05:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213c08:	48 21 d1             	and    %rdx,%rcx
ffffffff80213c0b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213c0e:	0f 84 88 10 00 00    	je     ffffffff80214c9c <_RME_Svc_Handler+0x3e8c>
ffffffff80213c14:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213c18:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213c1c:	0f 84 c3 e3 ff ff    	je     ffffffff80211fe5 <_RME_Svc_Handler+0x11d5>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213c22:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213c29:	e9 74 e0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80213c2e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff80213c30:	48 89 c2             	mov    %rax,%rdx
ffffffff80213c33:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213c37:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213c3a:	0f 83 0c 09 00 00    	jae    ffffffff8021454c <_RME_Svc_Handler+0x373c>
ffffffff80213c40:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80213c47:	ff 00 00 
ffffffff80213c4a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213c4e:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80213c55:	00 00 00 
ffffffff80213c58:	48 01 ca             	add    %rcx,%rdx
ffffffff80213c5b:	4c 8b 02             	mov    (%rdx),%r8
ffffffff80213c5e:	4d 89 c2             	mov    %r8,%r10
ffffffff80213c61:	49 21 fa             	and    %rdi,%r10
ffffffff80213c64:	4d 39 ca             	cmp    %r9,%r10
ffffffff80213c67:	0f 84 d3 08 00 00    	je     ffffffff80214540 <_RME_Svc_Handler+0x3730>
ffffffff80213c6d:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff80213c71:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff80213c75:	0f 85 b9 08 00 00    	jne    ffffffff80214534 <_RME_Svc_Handler+0x3724>
ffffffff80213c7b:	4c 8b 42 28          	mov    0x28(%rdx),%r8
ffffffff80213c7f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213c84:	4c 39 c0             	cmp    %r8,%rax
ffffffff80213c87:	0f 83 9b 08 00 00    	jae    ffffffff80214528 <_RME_Svc_Handler+0x3718>
ffffffff80213c8d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213c91:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213c95:	48 89 c5             	mov    %rax,%rbp
ffffffff80213c98:	48 8b 00             	mov    (%rax),%rax
ffffffff80213c9b:	48 21 c7             	and    %rax,%rdi
ffffffff80213c9e:	4c 39 cf             	cmp    %r9,%rdi
ffffffff80213ca1:	0f 84 75 08 00 00    	je     ffffffff8021451c <_RME_Svc_Handler+0x370c>
ffffffff80213ca7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213cab:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213caf:	0f 84 7d e6 ff ff    	je     ffffffff80212332 <_RME_Svc_Handler+0x1522>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213cb5:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213cbc:	e9 e1 df ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80213cc1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213cc8:	48 89 c2             	mov    %rax,%rdx
ffffffff80213ccb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213ccf:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213cd2:	0f 83 b4 0a 00 00    	jae    ffffffff8021478c <_RME_Svc_Handler+0x397c>
ffffffff80213cd8:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213cdf:	00 00 00 
ffffffff80213ce2:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213ce6:	48 01 ca             	add    %rcx,%rdx
ffffffff80213ce9:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213cf0:	ff 00 00 
ffffffff80213cf3:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213cf6:	49 89 f0             	mov    %rsi,%r8
ffffffff80213cf9:	49 21 c8             	and    %rcx,%r8
ffffffff80213cfc:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213cff:	0f 84 7b 0a 00 00    	je     ffffffff80214780 <_RME_Svc_Handler+0x3970>
ffffffff80213d05:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213d09:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213d0d:	0f 85 61 0a 00 00    	jne    ffffffff80214774 <_RME_Svc_Handler+0x3964>
ffffffff80213d13:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213d17:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213d1c:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213d1f:	0f 83 43 0a 00 00    	jae    ffffffff80214768 <_RME_Svc_Handler+0x3958>
ffffffff80213d25:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213d29:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213d2d:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213d30:	48 21 d1             	and    %rdx,%rcx
ffffffff80213d33:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213d36:	0f 84 20 0a 00 00    	je     ffffffff8021475c <_RME_Svc_Handler+0x394c>
ffffffff80213d3c:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213d40:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213d44:	0f 84 6d ed ff ff    	je     ffffffff80212ab7 <_RME_Svc_Handler+0x1ca7>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213d4a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213d51:	e9 4c df ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80213d56:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80213d5d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213d60:	48 89 c2             	mov    %rax,%rdx
ffffffff80213d63:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213d67:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213d6a:	0f 83 7c 0d 00 00    	jae    ffffffff80214aec <_RME_Svc_Handler+0x3cdc>
ffffffff80213d70:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213d77:	00 00 00 
ffffffff80213d7a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213d7e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213d81:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213d88:	ff 00 00 
ffffffff80213d8b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213d8e:	49 89 f0             	mov    %rsi,%r8
ffffffff80213d91:	49 21 c8             	and    %rcx,%r8
ffffffff80213d94:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213d97:	0f 84 43 0d 00 00    	je     ffffffff80214ae0 <_RME_Svc_Handler+0x3cd0>
ffffffff80213d9d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213da1:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213da5:	0f 85 29 0d 00 00    	jne    ffffffff80214ad4 <_RME_Svc_Handler+0x3cc4>
ffffffff80213dab:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213daf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213db4:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213db7:	0f 83 0b 0d 00 00    	jae    ffffffff80214ac8 <_RME_Svc_Handler+0x3cb8>
ffffffff80213dbd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213dc1:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213dc5:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213dc8:	48 21 d1             	and    %rdx,%rcx
ffffffff80213dcb:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213dce:	0f 84 e8 0c 00 00    	je     ffffffff80214abc <_RME_Svc_Handler+0x3cac>
ffffffff80213dd4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213dd8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213ddc:	0f 84 de e6 ff ff    	je     ffffffff802124c0 <_RME_Svc_Handler+0x16b0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213de2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213de9:	e9 b4 de ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80213dee:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213df0:	48 89 c2             	mov    %rax,%rdx
ffffffff80213df3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213df7:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213dfa:	0f 83 6c 0e 00 00    	jae    ffffffff80214c6c <_RME_Svc_Handler+0x3e5c>
ffffffff80213e00:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213e07:	00 00 00 
ffffffff80213e0a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213e0e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213e11:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213e18:	ff 00 00 
ffffffff80213e1b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213e1e:	49 89 f0             	mov    %rsi,%r8
ffffffff80213e21:	49 21 c8             	and    %rcx,%r8
ffffffff80213e24:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213e27:	0f 84 33 0e 00 00    	je     ffffffff80214c60 <_RME_Svc_Handler+0x3e50>
ffffffff80213e2d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213e31:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213e35:	0f 85 19 0e 00 00    	jne    ffffffff80214c54 <_RME_Svc_Handler+0x3e44>
ffffffff80213e3b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213e3f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213e44:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213e47:	0f 83 fb 0d 00 00    	jae    ffffffff80214c48 <_RME_Svc_Handler+0x3e38>
ffffffff80213e4d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213e51:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213e55:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213e58:	48 21 d1             	and    %rdx,%rcx
ffffffff80213e5b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213e5e:	0f 84 d8 0d 00 00    	je     ffffffff80214c3c <_RME_Svc_Handler+0x3e2c>
ffffffff80213e64:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213e68:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80213e6c:	0f 84 08 ef ff ff    	je     ffffffff80212d7a <_RME_Svc_Handler+0x1f6a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213e72:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213e79:	e9 24 de ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80213e7e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213e80:	48 89 c2             	mov    %rax,%rdx
ffffffff80213e83:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213e87:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213e8a:	0f 83 1c 0d 00 00    	jae    ffffffff80214bac <_RME_Svc_Handler+0x3d9c>
ffffffff80213e90:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213e97:	00 00 00 
ffffffff80213e9a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213e9e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213ea1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213ea8:	ff 00 00 
ffffffff80213eab:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213eae:	49 89 f0             	mov    %rsi,%r8
ffffffff80213eb1:	49 21 c8             	and    %rcx,%r8
ffffffff80213eb4:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213eb7:	0f 84 e3 0c 00 00    	je     ffffffff80214ba0 <_RME_Svc_Handler+0x3d90>
ffffffff80213ebd:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213ec1:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213ec5:	0f 85 c9 0c 00 00    	jne    ffffffff80214b94 <_RME_Svc_Handler+0x3d84>
ffffffff80213ecb:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213ecf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213ed4:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213ed7:	0f 83 ab 0c 00 00    	jae    ffffffff80214b88 <_RME_Svc_Handler+0x3d78>
ffffffff80213edd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213ee1:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213ee5:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213ee8:	48 21 d1             	and    %rdx,%rcx
ffffffff80213eeb:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213eee:	0f 84 88 0c 00 00    	je     ffffffff80214b7c <_RME_Svc_Handler+0x3d6c>
ffffffff80213ef4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213ef8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213efc:	0f 84 f8 e2 ff ff    	je     ffffffff802121fa <_RME_Svc_Handler+0x13ea>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213f02:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213f09:	e9 94 dd ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80213f0e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff80213f10:	48 89 c2             	mov    %rax,%rdx
ffffffff80213f13:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213f17:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213f1a:	0f 83 f8 09 00 00    	jae    ffffffff80214918 <_RME_Svc_Handler+0x3b08>
ffffffff80213f20:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213f27:	00 00 00 
ffffffff80213f2a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213f2e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213f31:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213f38:	ff 00 00 
ffffffff80213f3b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213f3e:	49 89 f0             	mov    %rsi,%r8
ffffffff80213f41:	49 21 c8             	and    %rcx,%r8
ffffffff80213f44:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213f47:	0f 84 bf 09 00 00    	je     ffffffff8021490c <_RME_Svc_Handler+0x3afc>
ffffffff80213f4d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213f51:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213f55:	0f 85 a5 09 00 00    	jne    ffffffff80214900 <_RME_Svc_Handler+0x3af0>
ffffffff80213f5b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213f5f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213f64:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213f67:	0f 83 87 09 00 00    	jae    ffffffff802148f4 <_RME_Svc_Handler+0x3ae4>
ffffffff80213f6d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213f71:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213f75:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213f78:	48 21 d1             	and    %rdx,%rcx
ffffffff80213f7b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213f7e:	0f 84 64 09 00 00    	je     ffffffff802148e8 <_RME_Svc_Handler+0x3ad8>
ffffffff80213f84:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213f88:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213f8c:	0f 84 3d ea ff ff    	je     ffffffff802129cf <_RME_Svc_Handler+0x1bbf>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213f92:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213f99:	e9 04 dd ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80213f9e:	66 90                	xchg   %ax,%ax
                    Thd_Src->Sched.Slice=0U;
ffffffff80213fa0:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
ffffffff80213fa7:	00 
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80213fa8:	48 3b 55 30          	cmp    0x30(%rbp),%rdx
ffffffff80213fac:	0f 82 f5 d1 ff ff    	jb     ffffffff802111a7 <_RME_Svc_Handler+0x397>
ffffffff80213fb2:	e9 9d f3 ff ff       	jmp    ffffffff80213354 <_RME_Svc_Handler+0x2544>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80213fb7:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213fbe:	e9 df dc ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        return RME_ERR_PTH_INVSTATE;
ffffffff80213fc3:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff80213fca:	e9 d3 dc ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        return RME_ERR_PTH_INVSTATE;
ffffffff80213fcf:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213fd6:	e9 c7 dc ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80213fdb:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213fe2:	e9 bb dc ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213fe7:	48 89 c2             	mov    %rax,%rdx
ffffffff80213fea:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213fee:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80213ff1:	0f 83 15 06 00 00    	jae    ffffffff8021460c <_RME_Svc_Handler+0x37fc>
ffffffff80213ff7:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80213ffe:	00 00 00 
ffffffff80214001:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80214005:	48 01 f2             	add    %rsi,%rdx
ffffffff80214008:	be ff ff 00 00       	mov    $0xffff,%esi
ffffffff8021400d:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff80214010:	48 c1 e6 20          	shl    $0x20,%rsi
ffffffff80214014:	49 89 f9             	mov    %rdi,%r9
ffffffff80214017:	49 21 f1             	and    %rsi,%r9
ffffffff8021401a:	4d 39 c1             	cmp    %r8,%r9
ffffffff8021401d:	0f 84 dd 05 00 00    	je     ffffffff80214600 <_RME_Svc_Handler+0x37f0>
ffffffff80214023:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80214027:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021402b:	0f 85 c3 05 00 00    	jne    ffffffff802145f4 <_RME_Svc_Handler+0x37e4>
ffffffff80214031:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff80214035:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021403a:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021403d:	0f 83 a5 05 00 00    	jae    ffffffff802145e8 <_RME_Svc_Handler+0x37d8>
ffffffff80214043:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214047:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021404b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021404e:	48 8b 00             	mov    (%rax),%rax
ffffffff80214051:	48 21 c6             	and    %rax,%rsi
ffffffff80214054:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80214057:	0f 84 7f 05 00 00    	je     ffffffff802145dc <_RME_Svc_Handler+0x37cc>
ffffffff8021405d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214061:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214065:	0f 84 e5 e0 ff ff    	je     ffffffff80212150 <_RME_Svc_Handler+0x1340>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021406b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214072:	e9 2b dc ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80214077:	48 89 c2             	mov    %rax,%rdx
ffffffff8021407a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021407e:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80214081:	0f 83 a5 0c 00 00    	jae    ffffffff80214d2c <_RME_Svc_Handler+0x3f1c>
ffffffff80214087:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8021408e:	00 00 00 
ffffffff80214091:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80214095:	48 01 f2             	add    %rsi,%rdx
ffffffff80214098:	be ff ff 00 00       	mov    $0xffff,%esi
ffffffff8021409d:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff802140a0:	48 c1 e6 20          	shl    $0x20,%rsi
ffffffff802140a4:	49 89 f9             	mov    %rdi,%r9
ffffffff802140a7:	49 21 f1             	and    %rsi,%r9
ffffffff802140aa:	4d 39 c1             	cmp    %r8,%r9
ffffffff802140ad:	0f 84 6d 0c 00 00    	je     ffffffff80214d20 <_RME_Svc_Handler+0x3f10>
ffffffff802140b3:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff802140b7:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff802140bb:	0f 85 53 0c 00 00    	jne    ffffffff80214d14 <_RME_Svc_Handler+0x3f04>
ffffffff802140c1:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff802140c5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802140ca:	48 39 f8             	cmp    %rdi,%rax
ffffffff802140cd:	0f 83 35 0c 00 00    	jae    ffffffff80214d08 <_RME_Svc_Handler+0x3ef8>
ffffffff802140d3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802140d7:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802140db:	48 89 c2             	mov    %rax,%rdx
ffffffff802140de:	48 8b 00             	mov    (%rax),%rax
ffffffff802140e1:	48 21 c6             	and    %rax,%rsi
ffffffff802140e4:	4c 39 c6             	cmp    %r8,%rsi
ffffffff802140e7:	0f 84 0f 0c 00 00    	je     ffffffff80214cfc <_RME_Svc_Handler+0x3eec>
ffffffff802140ed:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802140f1:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802140f5:	0f 84 de ed ff ff    	je     ffffffff80212ed9 <_RME_Svc_Handler+0x20c9>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802140fb:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214102:	e9 9b db ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff80214107:	48 89 c2             	mov    %rax,%rdx
ffffffff8021410a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021410e:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80214111:	0f 83 75 09 00 00    	jae    ffffffff80214a8c <_RME_Svc_Handler+0x3c7c>
ffffffff80214117:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021411b:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80214120:	48 01 ca             	add    %rcx,%rdx
ffffffff80214123:	b9 ff ff 00 00       	mov    $0xffff,%ecx
ffffffff80214128:	48 c1 e7 21          	shl    $0x21,%rdi
ffffffff8021412c:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8021412f:	48 c1 e1 20          	shl    $0x20,%rcx
ffffffff80214133:	49 89 f0             	mov    %rsi,%r8
ffffffff80214136:	49 21 c8             	and    %rcx,%r8
ffffffff80214139:	49 39 f8             	cmp    %rdi,%r8
ffffffff8021413c:	0f 84 3e 09 00 00    	je     ffffffff80214a80 <_RME_Svc_Handler+0x3c70>
ffffffff80214142:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80214146:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021414a:	0f 85 24 09 00 00    	jne    ffffffff80214a74 <_RME_Svc_Handler+0x3c64>
ffffffff80214150:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80214154:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214159:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021415c:	0f 83 06 09 00 00    	jae    ffffffff80214a68 <_RME_Svc_Handler+0x3c58>
ffffffff80214162:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214166:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021416a:	49 89 c4             	mov    %rax,%r12
ffffffff8021416d:	48 8b 00             	mov    (%rax),%rax
ffffffff80214170:	48 21 c1             	and    %rax,%rcx
ffffffff80214173:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80214176:	0f 84 08 03 00 00    	je     ffffffff80214484 <_RME_Svc_Handler+0x3674>
ffffffff8021417c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214180:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214184:	0f 84 f7 e1 ff ff    	je     ffffffff80212381 <_RME_Svc_Handler+0x1571>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021418a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214191:	e9 0c db ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80214196:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff8021419a:	f0 48 0f c1 45 28    	lock xadd %rax,0x28(%rbp)
            return RME_ERR_SIV_FULL;
ffffffff802141a0:	48 c7 c6 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rsi
ffffffff802141a7:	e9 f6 da ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff802141ac:	31 f6                	xor    %esi,%esi
ffffffff802141ae:	48 89 df             	mov    %rbx,%rdi
ffffffff802141b1:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
ffffffff802141b6:	4c 89 54 24 10       	mov    %r10,0x10(%rsp)
ffffffff802141bb:	4c 89 0c 24          	mov    %r9,(%rsp)
ffffffff802141bf:	e8 5c 75 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff802141c4:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
ffffffff802141c9:	4c 8b 0c 24          	mov    (%rsp),%r9
ffffffff802141cd:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
ffffffff802141d2:	49 83 78 38 00       	cmpq   $0x0,0x38(%r8)
ffffffff802141d7:	74 37                	je     ffffffff80214210 <_RME_Svc_Handler+0x3400>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff802141d9:	4d 89 50 40          	mov    %r10,0x40(%r8)
    for(Count=0U;Count<Number;Count++)
ffffffff802141dd:	e9 11 d3 ff ff       	jmp    ffffffff802114f3 <_RME_Svc_Handler+0x6e3>
            return RME_ERR_PTH_INVSTATE;
ffffffff802141e2:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802141e9:	e9 b4 da ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        Flag=RME_THD_EXCPEND_FLAG;
ffffffff802141ee:	48 be 00 00 00 00 00 	movabs $0x6000000000000000,%rsi
ffffffff802141f5:	00 00 60 
ffffffff802141f8:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
ffffffff802141fd:	48 ba 00 00 00 00 00 	movabs $0x4000000000000000,%rdx
ffffffff80214204:	00 00 40 
ffffffff80214207:	48 0f 45 f2          	cmovne %rdx,%rsi
ffffffff8021420b:	e9 d1 eb ff ff       	jmp    ffffffff80212de1 <_RME_Svc_Handler+0x1fd1>
            _RME_Run_Del(Thread[Count]);
ffffffff80214210:	4c 89 c7             	mov    %r8,%rdi
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214213:	49 c1 ec 26          	shr    $0x26,%r12
            _RME_Run_Del(Thread[Count]);
ffffffff80214217:	e8 44 85 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
    Local=Thd->Sched.Local;
ffffffff8021421c:	49 8b 40 28          	mov    0x28(%r8),%rax
ffffffff80214220:	4c 89 d1             	mov    %r10,%rcx
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80214223:	4d 89 50 40          	mov    %r10,0x40(%r8)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80214227:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff8021422b:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
ffffffff8021422f:	48 8b 56 30          	mov    0x30(%rsi),%rdx
    Next->Prev=New;
ffffffff80214233:	4c 89 46 30          	mov    %r8,0x30(%rsi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80214237:	48 8d 74 08 28       	lea    0x28(%rax,%rcx,1),%rsi
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021423c:	44 89 d1             	mov    %r10d,%ecx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8021423f:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    New->Next=Next;
ffffffff80214244:	66 48 0f 6e fa       	movq   %rdx,%xmm7
ffffffff80214249:	66 0f 6c c7          	punpcklqdq %xmm7,%xmm0
ffffffff8021424d:	41 0f 11 00          	movups %xmm0,(%r8)
    Prev->Next=New;
ffffffff80214251:	4c 89 02             	mov    %r8,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214254:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80214259:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021425c:	4a 09 54 e0 20       	or     %rdx,0x20(%rax,%r12,8)
    for(Count=0U;Count<Number;Count++)
ffffffff80214261:	49 83 fe 01          	cmp    $0x1,%r14
ffffffff80214265:	0f 85 5a d2 ff ff    	jne    ffffffff802114c5 <_RME_Svc_Handler+0x6b5>
ffffffff8021426b:	e9 83 d2 ff ff       	jmp    ffffffff802114f3 <_RME_Svc_Handler+0x6e3>
            return RME_ERR_PTH_PRIO;
ffffffff80214270:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff80214277:	e9 26 da ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        return RME_ERR_PTH_REFCNT;
ffffffff8021427c:	48 c7 c6 32 ff ff ff 	mov    $0xffffffffffffff32,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80214283:	e9 1a da ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    Object=RME_CAP_GETOBJ(Cpt_Del,rme_ptr_t);
ffffffff80214288:	4c 8b 41 18          	mov    0x18(%rcx),%r8
    Size=RME_CPT_SIZE(Cpt_Del->Entry_Num);
ffffffff8021428c:	48 8b 79 28          	mov    0x28(%rcx),%rdi
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80214290:	31 d2                	xor    %edx,%edx
ffffffff80214292:	48 89 f0             	mov    %rsi,%rax
ffffffff80214295:	48 c1 e7 06          	shl    $0x6,%rdi
ffffffff80214299:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021429e:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Cpt_Del,Type_Stat);
ffffffff802142a1:	84 d2                	test   %dl,%dl
ffffffff802142a3:	0f 84 05 f4 ff ff    	je     ffffffff802136ae <_RME_Svc_Handler+0x289e>
    RME_ASSERT(_RME_Kot_Erase(Object,Size)==0);
ffffffff802142a9:	48 89 fe             	mov    %rdi,%rsi
ffffffff802142ac:	4c 89 c7             	mov    %r8,%rdi
ffffffff802142af:	e8 9c bd ff ff       	call   ffffffff80210050 <_RME_Kot_Erase>
    return 0;
ffffffff802142b4:	31 f6                	xor    %esi,%esi
ffffffff802142b6:	e9 e7 d9 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff802142bb:	85 f6                	test   %esi,%esi
ffffffff802142bd:	75 18                	jne    ffffffff802142d7 <_RME_Svc_Handler+0x34c7>
ffffffff802142bf:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff802142c6:	00 ff ff 
ffffffff802142c9:	48 89 f0             	mov    %rsi,%rax
ffffffff802142cc:	48 21 f2             	and    %rsi,%rdx
ffffffff802142cf:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff802142d4:	0f 94 c2             	sete   %dl
ffffffff802142d7:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
ffffffff802142de:	e9 bf d9 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802142e3:	31 d2                	xor    %edx,%edx
ffffffff802142e5:	48 89 f0             	mov    %rsi,%rax
ffffffff802142e8:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff802142ed:	0f 94 c2             	sete   %dl
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff802142f0:	80 fa 01             	cmp    $0x1,%dl
ffffffff802142f3:	48 19 f6             	sbb    %rsi,%rsi
ffffffff802142f6:	e9 a7 d9 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            _RME_Run_Del(Thread[Count]);
ffffffff802142fb:	e8 60 84 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
    Local=Thd->Sched.Local;
ffffffff80214300:	48 8b 47 28          	mov    0x28(%rdi),%rax
ffffffff80214304:	4c 89 c9             	mov    %r9,%rcx
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80214307:	4c 89 4f 40          	mov    %r9,0x40(%rdi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8021430b:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff8021430f:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
ffffffff80214313:	48 8b 56 30          	mov    0x30(%rsi),%rdx
    Next->Prev=New;
ffffffff80214317:	48 89 7e 30          	mov    %rdi,0x30(%rsi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8021431b:	48 8d 74 08 28       	lea    0x28(%rax,%rcx,1),%rsi
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214320:	44 89 c9             	mov    %r9d,%ecx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80214323:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214328:	4c 89 ee             	mov    %r13,%rsi
    New->Next=Next;
ffffffff8021432b:	66 48 0f 6e fa       	movq   %rdx,%xmm7
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214330:	48 c1 ee 26          	shr    $0x26,%rsi
    New->Next=Next;
ffffffff80214334:	66 0f 6c c7          	punpcklqdq %xmm7,%xmm0
ffffffff80214338:	0f 11 07             	movups %xmm0,(%rdi)
    Prev->Next=New;
ffffffff8021433b:	48 89 3a             	mov    %rdi,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021433e:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80214343:	48 d3 e2             	shl    %cl,%rdx
ffffffff80214346:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
ffffffff8021434b:	e9 89 d1 ff ff       	jmp    ffffffff802114d9 <_RME_Svc_Handler+0x6c9>
            _RME_Run_Del(Thread[Count]);
ffffffff80214350:	e8 0b 84 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
    Local=Thd->Sched.Local;
ffffffff80214355:	48 8b 47 28          	mov    0x28(%rdi),%rax
ffffffff80214359:	4c 89 f9             	mov    %r15,%rcx
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff8021435c:	4c 89 7f 40          	mov    %r15,0x40(%rdi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80214360:	48 c1 e1 04          	shl    $0x4,%rcx
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214364:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
ffffffff80214369:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8021436d:	48 8b 56 30          	mov    0x30(%rsi),%rdx
    Next->Prev=New;
ffffffff80214371:	48 89 7e 30          	mov    %rdi,0x30(%rsi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80214375:	48 8d 74 08 28       	lea    0x28(%rax,%rcx,1),%rsi
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021437a:	49 c1 ed 26          	shr    $0x26,%r13
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8021437e:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214383:	44 89 f9             	mov    %r15d,%ecx
    New->Next=Next;
ffffffff80214386:	66 48 0f 6e fa       	movq   %rdx,%xmm7
ffffffff8021438b:	66 0f 6c c7          	punpcklqdq %xmm7,%xmm0
ffffffff8021438f:	0f 11 07             	movups %xmm0,(%rdi)
    Prev->Next=New;
ffffffff80214392:	48 89 3a             	mov    %rdi,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214395:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021439a:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021439d:	4a 09 54 e8 20       	or     %rdx,0x20(%rax,%r13,8)
}
ffffffff802143a2:	e9 4c d1 ff ff       	jmp    ffffffff802114f3 <_RME_Svc_Handler+0x6e3>
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff802143a7:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff802143ac:	e8 9f bc ff ff       	call   ffffffff80210050 <_RME_Kot_Erase>
    return 0;
ffffffff802143b1:	31 f6                	xor    %esi,%esi
ffffffff802143b3:	e9 ea d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802143b8:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802143bf:	e9 de d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802143c4:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802143cb:	e9 d2 d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802143d0:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802143d7:	e9 c6 d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802143dc:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802143e3:	e9 ba d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802143e8:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802143ef:	e9 ae d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        return RME_ERR_PTH_PRIO;
ffffffff802143f4:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff802143fb:	e9 a2 d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        return RME_ERR_SIV_BOOT;
ffffffff80214400:	48 c7 c6 cd fe ff ff 	mov    $0xfffffffffffffecd,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80214407:	e9 96 d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff8021440c:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214413:	e9 8a d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214418:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021441f:	e9 7e d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214424:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021442b:	e9 72 d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214430:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214437:	e9 66 d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021443c:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214443:	e9 5a d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214448:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021444f:	e9 4e d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214454:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021445b:	e9 42 d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        return RME_ERR_PTH_INVSTATE;
ffffffff80214460:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff80214467:	e9 36 d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
            return RME_ERR_PTH_PRIO;
ffffffff8021446c:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff80214473:	e9 2a d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214478:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021447f:	e9 1e d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214484:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021448b:	e9 12 d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80214490:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff80214497:	e9 06 d8 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff8021449c:	85 f6                	test   %esi,%esi
ffffffff8021449e:	0f 85 33 fe ff ff    	jne    ffffffff802142d7 <_RME_Svc_Handler+0x34c7>
ffffffff802144a4:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802144a9:	48 89 f0             	mov    %rsi,%rax
ffffffff802144ac:	48 c1 e2 33          	shl    $0x33,%rdx
ffffffff802144b0:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff802144b5:	0f 94 c2             	sete   %dl
	return (rme_ptr_t)Zero;
ffffffff802144b8:	e9 1a fe ff ff       	jmp    ffffffff802142d7 <_RME_Svc_Handler+0x34c7>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff802144bd:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802144c4:	e9 d9 d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802144c9:	45 85 e4             	test   %r12d,%r12d
ffffffff802144cc:	0f 85 05 fe ff ff    	jne    ffffffff802142d7 <_RME_Svc_Handler+0x34c7>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802144d2:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802144d7:	4c 89 e0             	mov    %r12,%rax
ffffffff802144da:	48 c1 e2 32          	shl    $0x32,%rdx
ffffffff802144de:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff802144e4:	0f 94 c2             	sete   %dl
	return (rme_ptr_t)Zero;
ffffffff802144e7:	e9 eb fd ff ff       	jmp    ffffffff802142d7 <_RME_Svc_Handler+0x34c7>
ffffffff802144ec:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802144f3:	e9 aa d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802144f8:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802144ff:	e9 9e d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214504:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021450b:	e9 92 d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214510:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214517:	e9 86 d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021451c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214523:	e9 7a d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214528:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021452f:	e9 6e d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214534:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021453b:	e9 62 d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214540:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214547:	e9 56 d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021454c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214553:	e9 4a d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214558:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021455f:	e9 3e d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214564:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021456b:	e9 32 d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214570:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214577:	e9 26 d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021457c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214583:	e9 1a d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214588:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021458f:	e9 0e d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214594:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021459b:	e9 02 d7 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802145a0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802145a7:	e9 f6 d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802145ac:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802145b3:	e9 ea d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802145b8:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802145bf:	e9 de d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802145c4:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802145cb:	e9 d2 d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802145d0:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802145d7:	e9 c6 d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802145dc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802145e3:	e9 ba d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802145e8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802145ef:	e9 ae d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802145f4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802145fb:	e9 a2 d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214600:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214607:	e9 96 d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021460c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214613:	e9 8a d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214618:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021461f:	e9 7e d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214624:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021462b:	e9 72 d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214630:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214637:	e9 66 d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021463c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214643:	e9 5a d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214648:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021464f:	e9 4e d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214654:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021465b:	e9 42 d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214660:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214667:	e9 36 d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021466c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214673:	e9 2a d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff80214678:	48 c7 c6 f6 ff ff ff 	mov    $0xfffffffffffffff6,%rsi
ffffffff8021467f:	e9 1e d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80214684:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff8021468b:	e9 12 d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214690:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214697:	e9 06 d6 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021469c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802146a3:	e9 fa d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802146a8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802146af:	e9 ee d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802146b4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802146bb:	e9 e2 d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802146c0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802146c7:	e9 d6 d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802146cc:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802146d3:	e9 ca d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802146d8:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802146df:	e9 be d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802146e4:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802146eb:	e9 b2 d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802146f0:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802146f7:	e9 a6 d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802146fc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214703:	e9 9a d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214708:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021470f:	e9 8e d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214714:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021471b:	e9 82 d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214720:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214727:	e9 76 d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021472c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214733:	e9 6a d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214738:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021473f:	e9 5e d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214744:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021474b:	e9 52 d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214750:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214757:	e9 46 d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021475c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214763:	e9 3a d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214768:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021476f:	e9 2e d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214774:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021477b:	e9 22 d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214780:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214787:	e9 16 d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021478c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214793:	e9 0a d5 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80214798:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff8021479f:	e9 fe d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802147a4:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802147ab:	e9 f2 d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802147b0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802147b7:	e9 e6 d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802147bc:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802147c3:	e9 da d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802147c8:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802147cf:	e9 ce d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802147d4:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802147db:	e9 c2 d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802147e0:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802147e7:	e9 b6 d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802147ec:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802147f3:	e9 aa d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802147f8:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802147ff:	e9 9e d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214804:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021480b:	e9 92 d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214810:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214817:	e9 86 d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff8021481c:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff80214823:	e9 7a d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214828:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021482f:	e9 6e d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214834:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021483b:	e9 62 d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214840:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214847:	e9 56 d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021484c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214853:	e9 4a d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214858:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021485f:	e9 3e d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214864:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021486b:	e9 32 d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214870:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214877:	e9 26 d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021487c:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214883:	e9 1a d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214888:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021488f:	e9 0e d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214894:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021489b:	e9 02 d4 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802148a0:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802148a7:	e9 f6 d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802148ac:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802148b3:	e9 ea d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff802148b8:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802148bf:	e9 de d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802148c4:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802148cb:	e9 d2 d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802148d0:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802148d7:	e9 c6 d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802148dc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802148e3:	e9 ba d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802148e8:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802148ef:	e9 ae d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802148f4:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802148fb:	e9 a2 d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214900:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214907:	e9 96 d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021490c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214913:	e9 8a d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214918:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021491f:	e9 7e d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214924:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021492b:	e9 72 d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214930:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214937:	e9 66 d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021493c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214943:	e9 5a d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214948:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021494f:	e9 4e d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214954:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021495b:	e9 42 d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214960:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214967:	e9 36 d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021496c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214973:	e9 2a d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214978:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021497f:	e9 1e d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214984:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021498b:	e9 12 d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214990:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214997:	e9 06 d3 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff8021499c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802149a3:	e9 fa d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802149a8:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802149af:	e9 ee d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802149b4:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802149bb:	e9 e2 d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802149c0:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802149c7:	e9 d6 d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802149cc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802149d3:	e9 ca d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802149d8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802149df:	e9 be d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff802149e4:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802149eb:	e9 b2 d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802149f0:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802149f7:	e9 a6 d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff802149fc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a03:	e9 9a d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a08:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a0f:	e9 8e d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a14:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214a1b:	e9 82 d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a20:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a27:	e9 76 d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a2c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a33:	e9 6a d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a38:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a3f:	e9 5e d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a44:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a4b:	e9 52 d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a50:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214a57:	e9 46 d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a5c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a63:	e9 3a d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a68:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a6f:	e9 2e d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a74:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214a7b:	e9 22 d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a80:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a87:	e9 16 d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a8c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a93:	e9 0a d2 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214a98:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214a9f:	e9 fe d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214aa4:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214aab:	e9 f2 d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214ab0:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214ab7:	e9 e6 d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214abc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214ac3:	e9 da d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214ac8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214acf:	e9 ce d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214ad4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214adb:	e9 c2 d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214ae0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214ae7:	e9 b6 d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214aec:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214af3:	e9 aa d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214af8:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214aff:	e9 9e d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b04:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b0b:	e9 92 d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b10:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b17:	e9 86 d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b1c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b23:	e9 7a d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b28:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b2f:	e9 6e d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b34:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214b3b:	e9 62 d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b40:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b47:	e9 56 d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b4c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b53:	e9 4a d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b58:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214b5f:	e9 3e d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b64:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b6b:	e9 32 d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b70:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b77:	e9 26 d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b7c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b83:	e9 1a d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b88:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b8f:	e9 0e d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214b94:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214b9b:	e9 02 d1 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214ba0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214ba7:	e9 f6 d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214bac:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214bb3:	e9 ea d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214bb8:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214bbf:	e9 de d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214bc4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214bcb:	e9 d2 d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214bd0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214bd7:	e9 c6 d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214bdc:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214be3:	e9 ba d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214be8:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214bef:	e9 ae d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214bf4:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214bfb:	e9 a2 d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214c00:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214c07:	e9 96 d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214c0c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c13:	e9 8a d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214c18:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214c1f:	e9 7e d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214c24:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c2b:	e9 72 d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214c30:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c37:	e9 66 d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214c3c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c43:	e9 5a d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214c48:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c4f:	e9 4e d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214c54:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214c5b:	e9 42 d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214c60:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c67:	e9 36 d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214c6c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c73:	e9 2a d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214c78:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214c7f:	e9 1e d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214c84:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214c8b:	e9 12 d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214c90:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c97:	e9 06 d0 ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214c9c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214ca3:	e9 fa cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214ca8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214caf:	e9 ee cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214cb4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214cbb:	e9 e2 cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214cc0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214cc7:	e9 d6 cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214ccc:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214cd3:	e9 ca cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214cd8:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214cdf:	e9 be cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214ce4:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214ceb:	e9 b2 cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214cf0:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214cf7:	e9 a6 cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214cfc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214d03:	e9 9a cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214d08:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214d0f:	e9 8e cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214d14:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214d1b:	e9 82 cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214d20:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214d27:	e9 76 cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214d2c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214d33:	e9 6a cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214d38:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214d3f:	e9 5e cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214d44:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214d4b:	e9 52 cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        return RME_ERR_PTH_NOTIF;
ffffffff80214d50:	48 c7 c6 31 ff ff ff 	mov    $0xffffffffffffff31,%rsi
ffffffff80214d57:	e9 46 cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214d5c:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214d63:	e9 3a cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
ffffffff80214d68:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214d6f:	e9 2e cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        RME_CAP_DEFROST(Thd_Del,Type_Stat);
ffffffff80214d74:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff80214d7b:	00 ff ff 
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80214d7e:	48 89 f0             	mov    %rsi,%rax
ffffffff80214d81:	48 21 f2             	and    %rsi,%rdx
ffffffff80214d84:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80214d89:	0f 94 c2             	sete   %dl
        return RME_ERR_PTH_INVSTATE;
ffffffff80214d8c:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff80214d93:	e9 0a cf ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        return RME_ERR_PGT_ADDR;
ffffffff80214d98:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff80214d9f:	e9 fe ce ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        RME_CAP_DEFROST(Inv_Del,Type_Stat);
ffffffff80214da4:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff80214dab:	00 ff ff 
ffffffff80214dae:	48 89 f0             	mov    %rsi,%rax
ffffffff80214db1:	48 21 f2             	and    %rsi,%rdx
ffffffff80214db4:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80214db9:	0f 94 c2             	sete   %dl
        return RME_ERR_SIV_ACT;
ffffffff80214dbc:	48 c7 c6 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rsi
ffffffff80214dc3:	e9 da ce ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
        return RME_ERR_PGT_ADDR;
ffffffff80214dc8:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff80214dcf:	e9 ce ce ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214dd4:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214ddb:	e9 c2 ce ff ff       	jmp    ffffffff80211ca2 <_RME_Svc_Handler+0xe92>

ffffffff80214de0 <_RME_Kern_Snd>:
{
ffffffff80214de0:	f3 0f 1e fa          	endbr64
ffffffff80214de4:	41 54                	push   %r12
ffffffff80214de6:	55                   	push   %rbp
ffffffff80214de7:	53                   	push   %rbx
    Thd_Sig=Cap_Sig->Thd;
ffffffff80214de8:	48 8b 6f 30          	mov    0x30(%rdi),%rbp
{
ffffffff80214dec:	48 89 fb             	mov    %rdi,%rbx
    if(Thd_Sig!=(void*)RME_NULL)
ffffffff80214def:	48 85 ed             	test   %rbp,%rbp
ffffffff80214df2:	74 0e                	je     ffffffff80214e02 <_RME_Kern_Snd+0x22>
        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff80214df4:	4c 8b 65 28          	mov    0x28(%rbp),%r12
ffffffff80214df8:	e8 42 6a ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80214dfd:	49 39 c4             	cmp    %rax,%r12
ffffffff80214e00:	74 26                	je     ffffffff80214e28 <_RME_Kern_Snd+0x48>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80214e02:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80214e07:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80214e0d:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80214e14:	ff ff 7f 
ffffffff80214e17:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214e1a:	72 7f                	jb     ffffffff80214e9b <_RME_Kern_Snd+0xbb>
    return 0;
ffffffff80214e1c:	31 c0                	xor    %eax,%eax
}
ffffffff80214e1e:	5b                   	pop    %rbx
ffffffff80214e1f:	5d                   	pop    %rbp
ffffffff80214e20:	41 5c                	pop    %r12
ffffffff80214e22:	c3                   	ret
ffffffff80214e23:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff80214e28:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff80214e2f:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214e34:	e8 e7 68 00 00       	call   ffffffff8021b720 <__RME_Svc_Retval_Set>
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff80214e39:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff80214e3e:	74 78                	je     ffffffff80214eb8 <_RME_Kern_Snd+0xd8>
    Prio=Thd->Sched.Prio;
ffffffff80214e40:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff80214e44:	48 8b 45 28          	mov    0x28(%rbp),%rax
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff80214e48:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff80214e4f:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80214e50:	48 89 ce             	mov    %rcx,%rsi
ffffffff80214e53:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80214e57:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff80214e5b:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff80214e60:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff80214e64:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214e69:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff80214e6c:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214e70:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff80214e74:	66 48 0f 6e ca       	movq   %rdx,%xmm1
ffffffff80214e79:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff80214e7d:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff80214e81:	48 89 2a             	mov    %rbp,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214e84:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80214e89:	48 d3 e2             	shl    %cl,%rdx
ffffffff80214e8c:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        Cap_Sig->Thd=RME_NULL;
ffffffff80214e91:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff80214e98:	00 
ffffffff80214e99:	eb 81                	jmp    ffffffff80214e1c <_RME_Kern_Snd+0x3c>
ffffffff80214e9b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80214ea2:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
            return RME_ERR_SIV_FULL;
ffffffff80214ea8:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff80214eaf:	e9 6a ff ff ff       	jmp    ffffffff80214e1e <_RME_Kern_Snd+0x3e>
ffffffff80214eb4:	0f 1f 40 00          	nopl   0x0(%rax)
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff80214eb8:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff80214ebf:	00 
            _RME_Run_Notif(Thd_Sig);
ffffffff80214ec0:	48 89 ef             	mov    %rbp,%rdi
ffffffff80214ec3:	e8 b8 8c ff ff       	call   ffffffff8020db80 <_RME_Run_Notif>
ffffffff80214ec8:	eb c7                	jmp    ffffffff80214e91 <_RME_Kern_Snd+0xb1>
ffffffff80214eca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80214ed0 <_RME_Thd_Fatal>:
{
ffffffff80214ed0:	f3 0f 1e fa          	endbr64
ffffffff80214ed4:	41 55                	push   %r13
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80214ed6:	31 f6                	xor    %esi,%esi
ffffffff80214ed8:	ba 01 00 00 00       	mov    $0x1,%edx
{
ffffffff80214edd:	41 54                	push   %r12
ffffffff80214edf:	55                   	push   %rbp
ffffffff80214ee0:	48 89 fd             	mov    %rdi,%rbp
ffffffff80214ee3:	53                   	push   %rbx
ffffffff80214ee4:	48 83 ec 08          	sub    $0x8,%rsp
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80214ee8:	e8 c3 78 ff ff       	call   ffffffff8020c7b0 <_RME_Inv_Ret>
ffffffff80214eed:	48 85 c0             	test   %rax,%rax
ffffffff80214ef0:	75 0e                	jne    ffffffff80214f00 <_RME_Thd_Fatal+0x30>
}
ffffffff80214ef2:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80214ef6:	5b                   	pop    %rbx
ffffffff80214ef7:	5d                   	pop    %rbp
ffffffff80214ef8:	41 5c                	pop    %r12
ffffffff80214efa:	41 5d                	pop    %r13
ffffffff80214efc:	c3                   	ret
ffffffff80214efd:	0f 1f 00             	nopl   (%rax)
        Local=RME_CPU_LOCAL();
ffffffff80214f00:	e8 3a 69 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
        Thd_Cur=Local->Thd_Cur;
ffffffff80214f05:	4c 8b 60 08          	mov    0x8(%rax),%r12
        Local=RME_CPU_LOCAL();
ffffffff80214f09:	49 89 c5             	mov    %rax,%r13
        if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80214f0c:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80214f13:	ff ff 7f 
ffffffff80214f16:	49 39 44 24 30       	cmp    %rax,0x30(%r12)
ffffffff80214f1b:	74 73                	je     ffffffff80214f90 <_RME_Thd_Fatal+0xc0>
    Prio=Thd->Sched.Prio;
ffffffff80214f1d:	49 8b 4c 24 40       	mov    0x40(%r12),%rcx
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80214f22:	49 8b 34 24          	mov    (%r12),%rsi
ffffffff80214f26:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
    Local=Thd->Sched.Local;
ffffffff80214f2b:	49 8b 44 24 28       	mov    0x28(%r12),%rax
    Next->Prev=Prev;
ffffffff80214f30:	48 89 56 08          	mov    %rdx,0x8(%rsi)
    Prev->Next=Next;
ffffffff80214f34:	48 89 32             	mov    %rsi,(%rdx)
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff80214f37:	48 89 ce             	mov    %rcx,%rsi
ffffffff80214f3a:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80214f3e:	48 8d 54 30 28       	lea    0x28(%rax,%rsi,1),%rdx
ffffffff80214f43:	48 39 54 06 28       	cmp    %rdx,0x28(%rsi,%rax,1)
ffffffff80214f48:	0f 84 b2 00 00 00    	je     ffffffff80215000 <_RME_Thd_Fatal+0x130>
        Thd_Cur->Sched.State=RME_THD_EXCPEND;
ffffffff80214f4e:	49 c7 44 24 38 03 00 	movq   $0x3,0x38(%r12)
ffffffff80214f55:	00 00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80214f57:	49 8d 44 24 10       	lea    0x10(%r12),%rax
ffffffff80214f5c:	49 39 44 24 10       	cmp    %rax,0x10(%r12)
ffffffff80214f61:	74 65                	je     ffffffff80214fc8 <_RME_Thd_Fatal+0xf8>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80214f63:	49 8b 7c 24 70       	mov    0x70(%r12),%rdi
ffffffff80214f68:	48 85 ff             	test   %rdi,%rdi
ffffffff80214f6b:	74 05                	je     ffffffff80214f72 <_RME_Thd_Fatal+0xa2>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80214f6d:	e8 6e fe ff ff       	call   ffffffff80214de0 <_RME_Kern_Snd>
}
ffffffff80214f72:	48 83 c4 08          	add    $0x8,%rsp
        _RME_Kern_High(Reg,Local);
ffffffff80214f76:	4c 89 ee             	mov    %r13,%rsi
ffffffff80214f79:	48 89 ef             	mov    %rbp,%rdi
}
ffffffff80214f7c:	5b                   	pop    %rbx
ffffffff80214f7d:	5d                   	pop    %rbp
ffffffff80214f7e:	41 5c                	pop    %r12
ffffffff80214f80:	41 5d                	pop    %r13
        _RME_Kern_High(Reg,Local);
ffffffff80214f82:	e9 89 bd ff ff       	jmp    ffffffff80210d10 <_RME_Kern_High>
ffffffff80214f87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80214f8e:	00 00 
ffffffff80214f90:	48 c7 c3 20 ce 21 80 	mov    $0xffffffff8021ce20,%rbx
ffffffff80214f97:	eb 1d                	jmp    ffffffff80214fb6 <_RME_Thd_Fatal+0xe6>
ffffffff80214f99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count++]);
ffffffff80214fa0:	e8 3b 40 00 00       	call   ffffffff80218fe0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff80214fa5:	48 83 c3 02          	add    $0x2,%rbx
ffffffff80214fa9:	48 81 fb 20 cf 21 80 	cmp    $0xffffffff8021cf20,%rbx
ffffffff80214fb0:	0f 84 67 ff ff ff    	je     ffffffff80214f1d <_RME_Thd_Fatal+0x4d>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff80214fb6:	0f be 3b             	movsbl (%rbx),%edi
ffffffff80214fb9:	40 84 ff             	test   %dil,%dil
ffffffff80214fbc:	75 e2                	jne    ffffffff80214fa0 <_RME_Thd_Fatal+0xd0>
ffffffff80214fbe:	e9 5a ff ff ff       	jmp    ffffffff80214f1d <_RME_Thd_Fatal+0x4d>
ffffffff80214fc3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80214fc8:	49 8b 54 24 68       	mov    0x68(%r12),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80214fcd:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
ffffffff80214fd4:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff80214fd8:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80214fdf:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    New->Next=Next;
ffffffff80214fe4:	66 48 0f 6e c9       	movq   %rcx,%xmm1
ffffffff80214fe9:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff80214fed:	41 0f 11 44 24 10    	movups %xmm0,0x10(%r12)
    Prev->Next=New;
ffffffff80214ff3:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff80214ff6:	e9 68 ff ff ff       	jmp    ffffffff80214f63 <_RME_Thd_Fatal+0x93>
ffffffff80214ffb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff80215000:	48 89 ce             	mov    %rcx,%rsi
ffffffff80215003:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80215008:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff8021500c:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021500f:	48 f7 d2             	not    %rdx
ffffffff80215012:	48 21 54 f0 20       	and    %rdx,0x20(%rax,%rsi,8)
ffffffff80215017:	e9 32 ff ff ff       	jmp    ffffffff80214f4e <_RME_Thd_Fatal+0x7e>
ffffffff8021501c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80215020 <_RME_Tim_Handler>:
{
ffffffff80215020:	f3 0f 1e fa          	endbr64
ffffffff80215024:	41 56                	push   %r14
ffffffff80215026:	41 55                	push   %r13
ffffffff80215028:	49 89 fd             	mov    %rdi,%r13
ffffffff8021502b:	41 54                	push   %r12
ffffffff8021502d:	55                   	push   %rbp
ffffffff8021502e:	48 89 f5             	mov    %rsi,%rbp
ffffffff80215031:	53                   	push   %rbx
    Local=RME_CPU_LOCAL();
ffffffff80215032:	e8 08 68 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff80215037:	48 b9 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rcx
ffffffff8021503e:	ff ff 7f 
    Local=RME_CPU_LOCAL();
ffffffff80215041:	48 89 c3             	mov    %rax,%rbx
    Thd_Cur=Local->Thd_Cur;
ffffffff80215044:	48 8b 40 08          	mov    0x8(%rax),%rax
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff80215048:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8021504c:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8021504f:	72 10                	jb     ffffffff80215061 <_RME_Tim_Handler+0x41>
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff80215051:	48 39 d5             	cmp    %rdx,%rbp
ffffffff80215054:	0f 83 f6 00 00 00    	jae    ffffffff80215150 <_RME_Tim_Handler+0x130>
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8021505a:	48 29 ea             	sub    %rbp,%rdx
ffffffff8021505d:	48 89 50 30          	mov    %rdx,0x30(%rax)
    _RME_Kern_Snd(Local->Sig_Tim);
ffffffff80215061:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff80215065:	e8 76 fd ff ff       	call   ffffffff80214de0 <_RME_Kern_Snd>
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff8021506a:	48 8b 43 20          	mov    0x20(%rbx),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff8021506e:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80215072:	48 83 f8 01          	cmp    $0x1,%rax
    Thd_Cur=Local->Thd_Cur;
ffffffff80215076:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff8021507a:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff8021507d:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80215081:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80215086:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021508a:	4c 8b 64 03 08       	mov    0x8(%rbx,%rax,1),%r12
    if(Thd_New==Thd_Cur)
ffffffff8021508f:	49 39 ec             	cmp    %rbp,%r12
ffffffff80215092:	0f 84 89 00 00 00    	je     ffffffff80215121 <_RME_Tim_Handler+0x101>
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff80215098:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
ffffffff8021509d:	75 0b                	jne    ffffffff802150aa <_RME_Tim_Handler+0x8a>
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff8021509f:	49 8b 44 24 40       	mov    0x40(%r12),%rax
ffffffff802150a4:	48 39 45 40          	cmp    %rax,0x40(%rbp)
ffffffff802150a8:	73 77                	jae    ffffffff80215121 <_RME_Tim_Handler+0x101>
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff802150aa:	4d 8b b4 24 90 00 00 	mov    0x90(%r12),%r14
ffffffff802150b1:	00 
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff802150b2:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff802150b9:	4c 89 ee             	mov    %r13,%rsi
ffffffff802150bc:	e8 1f 59 00 00       	call   ffffffff8021a9e0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff802150c1:	4c 89 f6             	mov    %r14,%rsi
ffffffff802150c4:	4c 89 ef             	mov    %r13,%rdi
ffffffff802150c7:	e8 14 59 00 00       	call   ffffffff8021a9e0 <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff802150cc:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
ffffffff802150d3:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff802150da:	48 39 d0             	cmp    %rdx,%rax
ffffffff802150dd:	74 51                	je     ffffffff80215130 <_RME_Tim_Handler+0x110>
ffffffff802150df:	48 85 c0             	test   %rax,%rax
ffffffff802150e2:	74 4c                	je     ffffffff80215130 <_RME_Tim_Handler+0x110>
        return Inv_Top->Prc->Pgt;
ffffffff802150e4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802150e8:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff802150ec:	49 8b 84 24 98 00 00 	mov    0x98(%r12),%rax
ffffffff802150f3:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff802150f4:	48 85 c0             	test   %rax,%rax
ffffffff802150f7:	74 4c                	je     ffffffff80215145 <_RME_Tim_Handler+0x125>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff802150f9:	49 8d 8c 24 98 00 00 	lea    0x98(%r12),%rcx
ffffffff80215100:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80215101:	48 39 c8             	cmp    %rcx,%rax
ffffffff80215104:	74 3f                	je     ffffffff80215145 <_RME_Tim_Handler+0x125>
        return Inv_Top->Prc->Pgt;
ffffffff80215106:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021510a:	48 8b 78 30          	mov    0x30(%rax),%rdi
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff8021510e:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff80215112:	48 39 42 18          	cmp    %rax,0x18(%rdx)
ffffffff80215116:	74 05                	je     ffffffff8021511d <_RME_Tim_Handler+0xfd>
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff80215118:	e8 43 60 00 00       	call   ffffffff8021b160 <__RME_Pgt_Set>
    Local->Thd_Cur=Thd_New;
ffffffff8021511d:	4c 89 63 08          	mov    %r12,0x8(%rbx)
}
ffffffff80215121:	5b                   	pop    %rbx
ffffffff80215122:	5d                   	pop    %rbp
ffffffff80215123:	41 5c                	pop    %r12
ffffffff80215125:	41 5d                	pop    %r13
ffffffff80215127:	41 5e                	pop    %r14
ffffffff80215129:	c3                   	ret
ffffffff8021512a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return Thd->Sched.Prc->Pgt;
ffffffff80215130:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff80215134:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80215138:	49 8b 84 24 98 00 00 	mov    0x98(%r12),%rax
ffffffff8021513f:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80215140:	48 85 c0             	test   %rax,%rax
ffffffff80215143:	75 b4                	jne    ffffffff802150f9 <_RME_Tim_Handler+0xd9>
        return Thd->Sched.Prc->Pgt;
ffffffff80215145:	49 8b 44 24 58       	mov    0x58(%r12),%rax
ffffffff8021514a:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8021514e:	eb be                	jmp    ffffffff8021510e <_RME_Tim_Handler+0xee>
    Prio=Thd->Sched.Prio;
ffffffff80215150:	48 8b 48 40          	mov    0x40(%rax),%rcx
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80215154:	48 8b 38             	mov    (%rax),%rdi
            Thd_Cur->Sched.Slice=0U;
ffffffff80215157:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8021515e:	00 
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021515f:	48 8b 70 08          	mov    0x8(%rax),%rsi
    Local=Thd->Sched.Local;
ffffffff80215163:	48 8b 50 28          	mov    0x28(%rax),%rdx
    Next->Prev=Prev;
ffffffff80215167:	48 89 77 08          	mov    %rsi,0x8(%rdi)
    Prev->Next=Next;
ffffffff8021516b:	48 89 3e             	mov    %rdi,(%rsi)
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff8021516e:	48 89 cf             	mov    %rcx,%rdi
ffffffff80215171:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff80215175:	48 8d 74 3a 28       	lea    0x28(%rdx,%rdi,1),%rsi
ffffffff8021517a:	48 39 74 17 28       	cmp    %rsi,0x28(%rdi,%rdx,1)
ffffffff8021517f:	74 2f                	je     ffffffff802151b0 <_RME_Tim_Handler+0x190>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff80215181:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80215188:	00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80215189:	48 8d 50 10          	lea    0x10(%rax),%rdx
ffffffff8021518d:	48 39 50 10          	cmp    %rdx,0x10(%rax)
ffffffff80215191:	74 3d                	je     ffffffff802151d0 <_RME_Tim_Handler+0x1b0>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80215193:	48 8b 78 70          	mov    0x70(%rax),%rdi
ffffffff80215197:	48 85 ff             	test   %rdi,%rdi
ffffffff8021519a:	0f 84 c1 fe ff ff    	je     ffffffff80215061 <_RME_Tim_Handler+0x41>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff802151a0:	e8 3b fc ff ff       	call   ffffffff80214de0 <_RME_Kern_Snd>
ffffffff802151a5:	e9 b7 fe ff ff       	jmp    ffffffff80215061 <_RME_Tim_Handler+0x41>
ffffffff802151aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff802151b0:	48 89 cf             	mov    %rcx,%rdi
ffffffff802151b3:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802151b8:	48 c1 ef 06          	shr    $0x6,%rdi
ffffffff802151bc:	48 d3 e6             	shl    %cl,%rsi
ffffffff802151bf:	48 f7 d6             	not    %rsi
ffffffff802151c2:	48 21 74 fa 20       	and    %rsi,0x20(%rdx,%rdi,8)
ffffffff802151c7:	eb b8                	jmp    ffffffff80215181 <_RME_Tim_Handler+0x161>
ffffffff802151c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff802151d0:	48 8b 48 68          	mov    0x68(%rax),%rcx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff802151d4:	48 8b b1 80 00 00 00 	mov    0x80(%rcx),%rsi
    Next->Prev=New;
ffffffff802151db:	48 89 91 80 00 00 00 	mov    %rdx,0x80(%rcx)
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff802151e2:	48 83 c1 78          	add    $0x78,%rcx
ffffffff802151e6:	66 48 0f 6e c1       	movq   %rcx,%xmm0
    New->Next=Next;
ffffffff802151eb:	66 48 0f 6e ce       	movq   %rsi,%xmm1
ffffffff802151f0:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff802151f4:	0f 11 40 10          	movups %xmm0,0x10(%rax)
    Prev->Next=New;
ffffffff802151f8:	48 89 16             	mov    %rdx,(%rsi)
}
ffffffff802151fb:	eb 96                	jmp    ffffffff80215193 <_RME_Tim_Handler+0x173>
ffffffff802151fd:	0f 1f 00             	nopl   (%rax)

ffffffff80215200 <_RME_Kfn_Boot_Crt>:
{
ffffffff80215200:	f3 0f 1e fa          	endbr64
ffffffff80215204:	48 89 d1             	mov    %rdx,%rcx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80215207:	48 8b 57 28          	mov    0x28(%rdi),%rdx
ffffffff8021520b:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80215211:	0f 85 c1 00 00 00    	jne    ffffffff802152d8 <_RME_Kfn_Boot_Crt+0xd8>
ffffffff80215217:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8021521a:	0f 83 30 01 00 00    	jae    ffffffff80215350 <_RME_Kfn_Boot_Crt+0x150>
ffffffff80215220:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80215227:	ff 00 00 
ffffffff8021522a:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021522e:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff80215232:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80215239:	00 00 00 
ffffffff8021523c:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021523f:	48 21 c2             	and    %rax,%rdx
ffffffff80215242:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80215245:	0f 84 f3 00 00 00    	je     ffffffff8021533e <_RME_Kfn_Boot_Crt+0x13e>
ffffffff8021524b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021524f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215253:	0f 85 07 01 00 00    	jne    ffffffff80215360 <_RME_Kfn_Boot_Crt+0x160>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80215259:	48 8b 46 10          	mov    0x10(%rsi),%rax
ffffffff8021525d:	48 f7 d0             	not    %rax
ffffffff80215260:	83 e0 01             	and    $0x1,%eax
ffffffff80215263:	0f 85 07 01 00 00    	jne    ffffffff80215370 <_RME_Kfn_Boot_Crt+0x170>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kfn,struct RME_Cap_Kfn*,Kfn_Crt);
ffffffff80215269:	48 3b 4e 28          	cmp    0x28(%rsi),%rcx
ffffffff8021526d:	0f 83 dd 00 00 00    	jae    ffffffff80215350 <_RME_Kfn_Boot_Crt+0x150>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80215273:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021527a:	00 00 00 
ffffffff8021527d:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80215281:	48 03 4e 18          	add    0x18(%rsi),%rcx
ffffffff80215285:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021528a:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff8021528d:	84 d2                	test   %dl,%dl
ffffffff8021528f:	0f 84 eb 00 00 00    	je     ffffffff80215380 <_RME_Kfn_Boot_Crt+0x180>
	__asm__ __volatile__ (
ffffffff80215295:	0f 31                	rdtsc
	return ((unsigned long long)hi << 32) | lo;
ffffffff80215297:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8021529b:	89 c0                	mov    %eax,%eax
ffffffff8021529d:	48 09 c2             	or     %rax,%rdx
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff802152a0:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
ffffffff802152a7:	ff ff ff 
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff802152aa:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    Kfn_Crt->Head.Root_Ref=1U;
ffffffff802152ae:	48 c7 41 08 01 00 00 	movq   $0x1,0x8(%rcx)
ffffffff802152b5:	00 
    Kfn_Crt->Head.Object=0U;
ffffffff802152b6:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
ffffffff802152bd:	00 
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff802152be:	48 89 41 10          	mov    %rax,0x10(%rcx)
    RME_WRITE_RELEASE(&(Kfn_Crt->Head.Type_Stat),
ffffffff802152c2:	48 b8 00 00 00 00 00 	movabs $0x1000000000000,%rax
ffffffff802152c9:	00 01 00 
ffffffff802152cc:	48 89 01             	mov    %rax,(%rcx)
    return 0;
ffffffff802152cf:	31 c0                	xor    %eax,%eax
ffffffff802152d1:	c3                   	ret
ffffffff802152d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802152d8:	48 89 f0             	mov    %rsi,%rax
ffffffff802152db:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802152df:	48 39 d0             	cmp    %rdx,%rax
ffffffff802152e2:	73 6c                	jae    ffffffff80215350 <_RME_Kfn_Boot_Crt+0x150>
ffffffff802152e4:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff802152eb:	00 00 00 
ffffffff802152ee:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802152f2:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff802152f6:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff802152fd:	ff 00 00 
ffffffff80215300:	48 8b 10             	mov    (%rax),%rdx
ffffffff80215303:	49 89 d1             	mov    %rdx,%r9
ffffffff80215306:	49 21 f9             	and    %rdi,%r9
ffffffff80215309:	4d 39 c1             	cmp    %r8,%r9
ffffffff8021530c:	74 30                	je     ffffffff8021533e <_RME_Kfn_Boot_Crt+0x13e>
ffffffff8021530e:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80215312:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80215316:	75 48                	jne    ffffffff80215360 <_RME_Kfn_Boot_Crt+0x160>
ffffffff80215318:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021531c:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80215322:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80215325:	73 29                	jae    ffffffff80215350 <_RME_Kfn_Boot_Crt+0x150>
ffffffff80215327:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021532b:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff8021532f:	48 8b 06             	mov    (%rsi),%rax
ffffffff80215332:	48 21 c7             	and    %rax,%rdi
ffffffff80215335:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80215338:	0f 85 0d ff ff ff    	jne    ffffffff8021524b <_RME_Kfn_Boot_Crt+0x4b>
ffffffff8021533e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215345:	c3                   	ret
ffffffff80215346:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021534d:	00 00 00 
ffffffff80215350:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215357:	c3                   	ret
ffffffff80215358:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021535f:	00 
ffffffff80215360:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215367:	c3                   	ret
ffffffff80215368:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021536f:	00 
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80215370:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215377:	c3                   	ret
ffffffff80215378:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021537f:	00 
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff80215380:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff80215387:	c3                   	ret
ffffffff80215388:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021538f:	00 

ffffffff80215390 <__RME_X64_LAPIC_Init>:
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Init(void)
{
    /* LAPIC initialization - Check if there is any LAPIC */
    RME_ASSERT(RME_X64_LAPIC_Addr!=0);
ffffffff80215390:	48 8b 05 99 10 01 00 	mov    0x11099(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>

    /* Enable local APIC; set spurious interrupt vector to 32 */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_SVR, RME_X64_LAPIC_SVR_ENABLE|RME_X64_INT_SPUR);
ffffffff80215397:	48 8b 15 92 10 01 00 	mov    0x11092(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021539e:	48 b8 f0 00 00 00 00 	movabs $0xffff8000000000f0,%rax
ffffffff802153a5:	80 ff ff 
ffffffff802153a8:	c7 04 02 80 01 00 00 	movl   $0x180,(%rdx,%rax,1)

    /* Disable local interrupt lines */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff802153af:	48 8b 15 7a 10 01 00 	mov    0x1107a(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);

    /* Disable performance counter overflow interrupts when there is one */
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff802153b6:	48 8d 80 40 ff ff ff 	lea    -0xc0(%rax),%rax
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff802153bd:	c7 84 10 20 03 00 00 	movl   $0x10000,0x320(%rax,%rdx,1)
ffffffff802153c4:	00 00 01 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);
ffffffff802153c8:	48 8b 15 61 10 01 00 	mov    0x11061(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff802153cf:	c7 84 10 30 03 00 00 	movl   $0x10000,0x330(%rax,%rdx,1)
ffffffff802153d6:	00 00 01 00 
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff802153da:	48 8b 15 4f 10 01 00 	mov    0x1104f(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff802153e1:	f7 04 10 00 00 fc 00 	testl  $0xfc0000,(%rax,%rdx,1)
ffffffff802153e8:	74 12                	je     ffffffff802153fc <__RME_X64_LAPIC_Init+0x6c>
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_PCINT, RME_X64_LAPIC_MASKED);
ffffffff802153ea:	48 8b 15 3f 10 01 00 	mov    0x1103f(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff802153f1:	c7 84 10 10 03 00 00 	movl   $0x10000,0x310(%rax,%rdx,1)
ffffffff802153f8:	00 00 01 00 

    /* Map error interrupt to IRQ_ERROR */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ERROR, RME_X64_INT_ERROR);
ffffffff802153fc:	48 8b 15 2d 10 01 00 	mov    0x1102d(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80215403:	48 b8 70 03 00 00 00 	movabs $0xffff800000000370,%rax
ffffffff8021540a:	80 ff ff 
ffffffff8021540d:	c7 04 02 81 00 00 00 	movl   $0x81,(%rdx,%rax,1)

    /* Clear error status register (requires back-to-back writes) */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff80215414:	48 8b 15 15 10 01 00 	mov    0x11015(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021541b:	c7 84 10 10 ff ff ff 	movl   $0x0,-0xf0(%rax,%rdx,1)
ffffffff80215422:	00 00 00 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff80215426:	48 8b 15 03 10 01 00 	mov    0x11003(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021542d:	c7 84 10 10 ff ff ff 	movl   $0x0,-0xf0(%rax,%rdx,1)
ffffffff80215434:	00 00 00 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff80215438:	48 8b 15 f1 0f 01 00 	mov    0x10ff1(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021543f:	c7 84 10 40 fd ff ff 	movl   $0x0,-0x2c0(%rax,%rdx,1)
ffffffff80215446:	00 00 00 00 

    /* Acknowledge any outstanding interrupts */
    __RME_X64_LAPIC_Ack();

    /* Send an Init Level De-Assert to synchronise arbitration IDs */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0);
ffffffff8021544a:	48 8b 15 df 0f 01 00 	mov    0x10fdf(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80215451:	c7 44 10 a0 00 00 00 	movl   $0x0,-0x60(%rax,%rdx,1)
ffffffff80215458:	00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_BCAST|
ffffffff80215459:	48 8b 05 d0 0f 01 00 	mov    0x10fd0(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80215460:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80215467:	80 ff ff 
ffffffff8021546a:	c7 04 10 00 85 08 00 	movl   $0x88500,(%rax,%rdx,1)
                                             RME_X64_LAPIC_ICRLO_INIT|
                                             RME_X64_LAPIC_ICRLO_LEVEL);
    while(RME_X64_LAPIC_READ(RME_X64_LAPIC_ICRLO)&RME_X64_LAPIC_ICRLO_DELIVS);
ffffffff80215471:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80215478:	48 8b 05 b1 0f 01 00 	mov    0x10fb1(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021547f:	8b 04 10             	mov    (%rax,%rdx,1),%eax
ffffffff80215482:	f6 c4 10             	test   $0x10,%ah
ffffffff80215485:	75 f1                	jne    ffffffff80215478 <__RME_X64_LAPIC_Init+0xe8>

    /* Enable interrupts on the APIC */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_TPR, 0);
ffffffff80215487:	48 8b 15 a2 0f 01 00 	mov    0x10fa2(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021548e:	48 b8 80 00 00 00 00 	movabs $0xffff800000000080,%rax
ffffffff80215495:	80 ff ff 
ffffffff80215498:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
}
ffffffff8021549f:	c3                   	ret

ffffffff802154a0 <__RME_X64_RDSP_Scan>:
    Pos=(rme_u8_t*)RME_X64_PA2VA(Base);
ffffffff802154a0:	48 b8 04 00 00 00 00 	movabs $0xffff800000000004,%rax
ffffffff802154a7:	80 ff ff 
{
ffffffff802154aa:	41 54                	push   %r12
ffffffff802154ac:	55                   	push   %rbp
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff802154ad:	48 8d 6e dc          	lea    -0x24(%rsi),%rbp
{
ffffffff802154b1:	53                   	push   %rbx
ffffffff802154b2:	48 83 e5 fc          	and    $0xfffffffffffffffc,%rbp
    Pos=(rme_u8_t*)RME_X64_PA2VA(Base);
ffffffff802154b6:	48 bb 00 00 00 00 00 	movabs $0xffff800000000000,%rbx
ffffffff802154bd:	80 ff ff 
ffffffff802154c0:	48 01 fb             	add    %rdi,%rbx
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff802154c3:	48 01 c7             	add    %rax,%rdi
ffffffff802154c6:	48 01 fd             	add    %rdi,%rbp
ffffffff802154c9:	eb 12                	jmp    ffffffff802154dd <__RME_X64_RDSP_Scan+0x3d>
ffffffff802154cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff802154d0:	48 83 c3 04          	add    $0x4,%rbx
ffffffff802154d4:	48 39 dd             	cmp    %rbx,%rbp
ffffffff802154d7:	0f 84 db 00 00 00    	je     ffffffff802155b8 <__RME_X64_RDSP_Scan+0x118>
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff802154dd:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff802154e2:	48 c7 c6 35 d0 21 80 	mov    $0xffffffff8021d035,%rsi
ffffffff802154e9:	48 89 df             	mov    %rbx,%rdi
ffffffff802154ec:	49 89 dc             	mov    %rbx,%r12
ffffffff802154ef:	e8 5c 8f ff ff       	call   ffffffff8020e450 <_RME_Memcmp>
ffffffff802154f4:	48 85 c0             	test   %rax,%rax
ffffffff802154f7:	75 d7                	jne    ffffffff802154d0 <__RME_X64_RDSP_Scan+0x30>
                Checksum+=Pos[Count+Check_Cnt];
ffffffff802154f9:	f3 0f 6f 13          	movdqu (%rbx),%xmm2
ffffffff802154fd:	66 0f ef ff          	pxor   %xmm7,%xmm7
ffffffff80215501:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff80215505:	66 0f ef db          	pxor   %xmm3,%xmm3
ffffffff80215509:	0f b6 43 11          	movzbl 0x11(%rbx),%eax
ffffffff8021550d:	0f b6 53 10          	movzbl 0x10(%rbx),%edx
ffffffff80215511:	66 0f 6f ca          	movdqa %xmm2,%xmm1
ffffffff80215515:	66 0f 68 d7          	punpckhbw %xmm7,%xmm2
ffffffff80215519:	66 0f 60 cf          	punpcklbw %xmm7,%xmm1
ffffffff8021551d:	66 0f 6f e2          	movdqa %xmm2,%xmm4
ffffffff80215521:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
ffffffff80215525:	48 01 c2             	add    %rax,%rdx
ffffffff80215528:	66 0f 6f e9          	movdqa %xmm1,%xmm5
ffffffff8021552c:	66 0f 69 c8          	punpckhwd %xmm0,%xmm1
ffffffff80215530:	66 0f 61 e0          	punpcklwd %xmm0,%xmm4
ffffffff80215534:	0f b6 43 12          	movzbl 0x12(%rbx),%eax
ffffffff80215538:	66 0f 61 e8          	punpcklwd %xmm0,%xmm5
ffffffff8021553c:	66 0f 6f f1          	movdqa %xmm1,%xmm6
ffffffff80215540:	66 0f 6f c1          	movdqa %xmm1,%xmm0
ffffffff80215544:	66 0f 6f cd          	movdqa %xmm5,%xmm1
ffffffff80215548:	66 0f 6a eb          	punpckhdq %xmm3,%xmm5
ffffffff8021554c:	66 0f 62 f3          	punpckldq %xmm3,%xmm6
ffffffff80215550:	48 01 c2             	add    %rax,%rdx
ffffffff80215553:	66 0f 62 cb          	punpckldq %xmm3,%xmm1
ffffffff80215557:	66 0f 6a c3          	punpckhdq %xmm3,%xmm0
ffffffff8021555b:	0f b6 43 13          	movzbl 0x13(%rbx),%eax
ffffffff8021555f:	66 0f d4 e9          	paddq  %xmm1,%xmm5
ffffffff80215563:	66 0f 6f cc          	movdqa %xmm4,%xmm1
ffffffff80215567:	66 0f 6a e3          	punpckhdq %xmm3,%xmm4
ffffffff8021556b:	66 0f 62 cb          	punpckldq %xmm3,%xmm1
ffffffff8021556f:	66 0f d4 c6          	paddq  %xmm6,%xmm0
ffffffff80215573:	48 01 c2             	add    %rax,%rdx
ffffffff80215576:	66 0f d4 e1          	paddq  %xmm1,%xmm4
ffffffff8021557a:	66 0f 6f ca          	movdqa %xmm2,%xmm1
ffffffff8021557e:	66 0f d4 c5          	paddq  %xmm5,%xmm0
ffffffff80215582:	66 0f 62 cb          	punpckldq %xmm3,%xmm1
ffffffff80215586:	66 0f 6a d3          	punpckhdq %xmm3,%xmm2
ffffffff8021558a:	66 0f d4 c4          	paddq  %xmm4,%xmm0
ffffffff8021558e:	66 0f d4 d1          	paddq  %xmm1,%xmm2
ffffffff80215592:	66 0f d4 c2          	paddq  %xmm2,%xmm0
ffffffff80215596:	66 0f 6f c8          	movdqa %xmm0,%xmm1
ffffffff8021559a:	66 0f 73 d9 08       	psrldq $0x8,%xmm1
ffffffff8021559f:	66 0f d4 c1          	paddq  %xmm1,%xmm0
ffffffff802155a3:	66 48 0f 7e c0       	movq   %xmm0,%rax
            if((Checksum&0xFF)==0)
ffffffff802155a8:	00 c2                	add    %al,%dl
ffffffff802155aa:	0f 85 20 ff ff ff    	jne    ffffffff802154d0 <__RME_X64_RDSP_Scan+0x30>
}
ffffffff802155b0:	4c 89 e0             	mov    %r12,%rax
ffffffff802155b3:	5b                   	pop    %rbx
ffffffff802155b4:	5d                   	pop    %rbp
ffffffff802155b5:	41 5c                	pop    %r12
ffffffff802155b7:	c3                   	ret
    return 0;
ffffffff802155b8:	45 31 e4             	xor    %r12d,%r12d
}
ffffffff802155bb:	5b                   	pop    %rbx
ffffffff802155bc:	5d                   	pop    %rbp
ffffffff802155bd:	4c 89 e0             	mov    %r12,%rax
ffffffff802155c0:	41 5c                	pop    %r12
ffffffff802155c2:	c3                   	ret
ffffffff802155c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff802155ca:	00 00 00 00 
ffffffff802155ce:	66 90                	xchg   %ax,%ax

ffffffff802155d0 <__RME_X64_CPU_Local_Init>:
{
ffffffff802155d0:	55                   	push   %rbp
ffffffff802155d1:	53                   	push   %rbx
ffffffff802155d2:	48 83 ec 18          	sub    $0x18,%rsp
    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff802155d6:	48 8b 05 f3 1e 01 00 	mov    0x11ef3(%rip),%rax        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff802155dd:	48 8b 1d bc 1e 01 00 	mov    0x11ebc(%rip),%rbx        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff802155e4:	48 c1 e3 0d          	shl    $0xd,%rbx
ffffffff802155e8:	48 01 c3             	add    %rax,%rbx
    for(Count=0;Count<256;Count++)
ffffffff802155eb:	48 8d 93 00 10 00 00 	lea    0x1000(%rbx),%rdx
    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff802155f2:	48 89 d8             	mov    %rbx,%rax
ffffffff802155f5:	0f 1f 00             	nopl   (%rax)
        IDT_Table[Count].Type_Attr=0;
ffffffff802155f8:	c6 40 05 00          	movb   $0x0,0x5(%rax)
    for(Count=0;Count<256;Count++)
ffffffff802155fc:	48 83 c0 20          	add    $0x20,%rax
        IDT_Table[Count].Type_Attr=0;
ffffffff80215600:	c6 40 f5 00          	movb   $0x0,-0xb(%rax)
    for(Count=0;Count<256;Count++)
ffffffff80215604:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215607:	75 ef                	jne    ffffffff802155f8 <__RME_X64_CPU_Local_Init+0x28>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80215609:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff80215610:	c7 43 02 08 00 00 8e 	movl   $0x8e000008,0x2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215617:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8021561c:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80215621:	66 89 03             	mov    %ax,(%rbx)
ffffffff80215624:	48 89 c2             	mov    %rax,%rdx
ffffffff80215627:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8021562b:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80215630:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215634:	89 43 08             	mov    %eax,0x8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215637:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8021563e:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80215644:	66 89 53 06          	mov    %dx,0x6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215648:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8021564b:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80215651:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215657:	66 89 43 10          	mov    %ax,0x10(%rbx)
ffffffff8021565b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021565f:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80215663:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215669:	89 43 18             	mov    %eax,0x18(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8021566c:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215673:	66 89 53 16          	mov    %dx,0x16(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80215677:	48 89 c2             	mov    %rax,%rdx
ffffffff8021567a:	66 89 43 20          	mov    %ax,0x20(%rbx)
ffffffff8021567e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215682:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215686:	89 43 28             	mov    %eax,0x28(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80215689:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80215690:	66 89 53 26          	mov    %dx,0x26(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80215694:	48 89 c2             	mov    %rax,%rdx
ffffffff80215697:	66 89 43 30          	mov    %ax,0x30(%rbx)
ffffffff8021569b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021569f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802156a3:	89 43 38             	mov    %eax,0x38(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff802156a6:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff802156ad:	66 89 53 36          	mov    %dx,0x36(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff802156b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802156b4:	66 89 43 40          	mov    %ax,0x40(%rbx)
ffffffff802156b8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802156bc:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802156c0:	89 43 48             	mov    %eax,0x48(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff802156c3:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff802156ca:	66 89 53 46          	mov    %dx,0x46(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff802156ce:	48 89 c2             	mov    %rax,%rdx
ffffffff802156d1:	66 89 43 50          	mov    %ax,0x50(%rbx)
ffffffff802156d5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802156d9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802156dd:	89 43 58             	mov    %eax,0x58(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff802156e0:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff802156e7:	66 89 53 56          	mov    %dx,0x56(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff802156eb:	48 89 c2             	mov    %rax,%rdx
ffffffff802156ee:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802156f2:	66 89 43 60          	mov    %ax,0x60(%rbx)
ffffffff802156f6:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff802156fa:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215701:	c7 43 12 08 00 00 8e 	movl   $0x8e000008,0x12(%rbx)
ffffffff80215708:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8021570f:	c7 43 22 08 00 00 8e 	movl   $0x8e000008,0x22(%rbx)
ffffffff80215716:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8021571d:	c7 43 32 08 00 00 ee 	movl   $0xee000008,0x32(%rbx)
ffffffff80215724:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8021572b:	c7 43 42 08 00 00 8e 	movl   $0x8e000008,0x42(%rbx)
ffffffff80215732:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80215739:	c7 43 52 08 00 00 8e 	movl   $0x8e000008,0x52(%rbx)
ffffffff80215740:	c7 43 5c 00 00 00 00 	movl   $0x0,0x5c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff80215747:	c7 43 62 08 00 00 8e 	movl   $0x8e000008,0x62(%rbx)
ffffffff8021574e:	66 89 53 66          	mov    %dx,0x66(%rbx)
ffffffff80215752:	89 43 68             	mov    %eax,0x68(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff80215755:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff8021575c:	66 89 43 70          	mov    %ax,0x70(%rbx)
ffffffff80215760:	48 89 c2             	mov    %rax,%rdx
ffffffff80215763:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215767:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021576b:	89 43 78             	mov    %eax,0x78(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff8021576e:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff80215775:	66 89 53 76          	mov    %dx,0x76(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80215779:	48 89 c2             	mov    %rax,%rdx
ffffffff8021577c:	66 89 83 80 00 00 00 	mov    %ax,0x80(%rbx)
ffffffff80215783:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215787:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021578b:	89 83 88 00 00 00    	mov    %eax,0x88(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff80215791:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80215798:	66 89 93 86 00 00 00 	mov    %dx,0x86(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8021579f:	48 89 c2             	mov    %rax,%rdx
ffffffff802157a2:	66 89 83 90 00 00 00 	mov    %ax,0x90(%rbx)
ffffffff802157a9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802157ad:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802157b1:	89 83 98 00 00 00    	mov    %eax,0x98(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff802157b7:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff802157be:	66 89 93 96 00 00 00 	mov    %dx,0x96(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff802157c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802157c8:	66 89 83 a0 00 00 00 	mov    %ax,0xa0(%rbx)
ffffffff802157cf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802157d3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802157d7:	89 83 a8 00 00 00    	mov    %eax,0xa8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff802157dd:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff802157e4:	66 89 93 a6 00 00 00 	mov    %dx,0xa6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff802157eb:	48 89 c2             	mov    %rax,%rdx
ffffffff802157ee:	66 89 83 b0 00 00 00 	mov    %ax,0xb0(%rbx)
ffffffff802157f5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802157f9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802157fd:	89 83 b8 00 00 00    	mov    %eax,0xb8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215803:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021580a:	66 89 93 b6 00 00 00 	mov    %dx,0xb6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215811:	48 89 c2             	mov    %rax,%rdx
ffffffff80215814:	66 89 83 c0 00 00 00 	mov    %ax,0xc0(%rbx)
ffffffff8021581b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021581f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215823:	89 83 c8 00 00 00    	mov    %eax,0xc8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff80215829:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215830:	66 89 93 c6 00 00 00 	mov    %dx,0xc6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff80215837:	48 89 c2             	mov    %rax,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8021583a:	c7 43 6c 00 00 00 00 	movl   $0x0,0x6c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff80215841:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff80215845:	c7 43 72 08 00 00 8e 	movl   $0x8e000008,0x72(%rbx)
ffffffff8021584c:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80215853:	c7 83 82 00 00 00 08 	movl   $0x8e000008,0x82(%rbx)
ffffffff8021585a:	00 00 8e 
ffffffff8021585d:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%rbx)
ffffffff80215864:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff80215867:	c7 83 92 00 00 00 08 	movl   $0x8e000008,0x92(%rbx)
ffffffff8021586e:	00 00 8e 
ffffffff80215871:	c7 83 9c 00 00 00 00 	movl   $0x0,0x9c(%rbx)
ffffffff80215878:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8021587b:	c7 83 a2 00 00 00 08 	movl   $0x8e000008,0xa2(%rbx)
ffffffff80215882:	00 00 8e 
ffffffff80215885:	c7 83 ac 00 00 00 00 	movl   $0x0,0xac(%rbx)
ffffffff8021588c:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021588f:	c7 83 b2 00 00 00 08 	movl   $0x8e000008,0xb2(%rbx)
ffffffff80215896:	00 00 8e 
ffffffff80215899:	c7 83 bc 00 00 00 00 	movl   $0x0,0xbc(%rbx)
ffffffff802158a0:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff802158a3:	c7 83 c2 00 00 00 08 	movl   $0x8e000008,0xc2(%rbx)
ffffffff802158aa:	00 00 8e 
ffffffff802158ad:	c7 83 cc 00 00 00 00 	movl   $0x0,0xcc(%rbx)
ffffffff802158b4:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff802158b7:	66 89 83 d0 00 00 00 	mov    %ax,0xd0(%rbx)
ffffffff802158be:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802158c2:	89 83 d8 00 00 00    	mov    %eax,0xd8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff802158c8:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff802158cf:	66 89 93 d6 00 00 00 	mov    %dx,0xd6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff802158d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802158d9:	66 89 83 e0 00 00 00 	mov    %ax,0xe0(%rbx)
ffffffff802158e0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802158e4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802158e8:	89 83 e8 00 00 00    	mov    %eax,0xe8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff802158ee:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff802158f5:	66 89 93 e6 00 00 00 	mov    %dx,0xe6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff802158fc:	48 89 c2             	mov    %rax,%rdx
ffffffff802158ff:	66 89 83 00 01 00 00 	mov    %ax,0x100(%rbx)
ffffffff80215906:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021590a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021590e:	89 83 08 01 00 00    	mov    %eax,0x108(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff80215914:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8021591b:	66 89 93 06 01 00 00 	mov    %dx,0x106(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff80215922:	48 89 c2             	mov    %rax,%rdx
ffffffff80215925:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215929:	66 89 83 10 01 00 00 	mov    %ax,0x110(%rbx)
ffffffff80215930:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215934:	89 83 18 01 00 00    	mov    %eax,0x118(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8021593a:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff80215941:	66 89 93 16 01 00 00 	mov    %dx,0x116(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff80215948:	48 89 c2             	mov    %rax,%rdx
ffffffff8021594b:	66 89 83 20 01 00 00 	mov    %ax,0x120(%rbx)
ffffffff80215952:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215956:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021595a:	89 83 28 01 00 00    	mov    %eax,0x128(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff80215960:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff80215967:	66 89 93 26 01 00 00 	mov    %dx,0x126(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8021596e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215971:	66 89 83 30 01 00 00 	mov    %ax,0x130(%rbx)
ffffffff80215978:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021597c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215980:	89 83 38 01 00 00    	mov    %eax,0x138(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff80215986:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8021598d:	66 89 93 36 01 00 00 	mov    %dx,0x136(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff80215994:	48 89 c2             	mov    %rax,%rdx
ffffffff80215997:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021599b:	66 89 83 40 01 00 00 	mov    %ax,0x140(%rbx)
ffffffff802159a2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802159a6:	66 89 93 46 01 00 00 	mov    %dx,0x146(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff802159ad:	c7 83 d2 00 00 00 08 	movl   $0x8e000008,0xd2(%rbx)
ffffffff802159b4:	00 00 8e 
ffffffff802159b7:	c7 83 dc 00 00 00 00 	movl   $0x0,0xdc(%rbx)
ffffffff802159be:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff802159c1:	c7 83 e2 00 00 00 08 	movl   $0x8e000008,0xe2(%rbx)
ffffffff802159c8:	00 00 8e 
ffffffff802159cb:	c7 83 ec 00 00 00 00 	movl   $0x0,0xec(%rbx)
ffffffff802159d2:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff802159d5:	c7 83 02 01 00 00 08 	movl   $0x8e000008,0x102(%rbx)
ffffffff802159dc:	00 00 8e 
ffffffff802159df:	c7 83 0c 01 00 00 00 	movl   $0x0,0x10c(%rbx)
ffffffff802159e6:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff802159e9:	c7 83 12 01 00 00 08 	movl   $0x8e000008,0x112(%rbx)
ffffffff802159f0:	00 00 8e 
ffffffff802159f3:	c7 83 1c 01 00 00 00 	movl   $0x0,0x11c(%rbx)
ffffffff802159fa:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff802159fd:	c7 83 22 01 00 00 08 	movl   $0x8e000008,0x122(%rbx)
ffffffff80215a04:	00 00 8e 
ffffffff80215a07:	c7 83 2c 01 00 00 00 	movl   $0x0,0x12c(%rbx)
ffffffff80215a0e:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff80215a11:	c7 83 32 01 00 00 08 	movl   $0x8e000008,0x132(%rbx)
ffffffff80215a18:	00 00 8e 
ffffffff80215a1b:	c7 83 3c 01 00 00 00 	movl   $0x0,0x13c(%rbx)
ffffffff80215a22:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff80215a25:	c7 83 42 01 00 00 08 	movl   $0x8e000008,0x142(%rbx)
ffffffff80215a2c:	00 00 8e 
ffffffff80215a2f:	89 83 48 01 00 00    	mov    %eax,0x148(%rbx)
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215a35:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff80215a3c:	48 89 c2             	mov    %rax,%rdx
ffffffff80215a3f:	66 89 8b 12 02 00 00 	mov    %cx,0x212(%rbx)
ffffffff80215a46:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215a4a:	66 89 83 00 02 00 00 	mov    %ax,0x200(%rbx)
ffffffff80215a51:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215a55:	66 89 93 06 02 00 00 	mov    %dx,0x206(%rbx)
ffffffff80215a5c:	48 c7 c2 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rdx
ffffffff80215a63:	66 89 93 10 02 00 00 	mov    %dx,0x210(%rbx)
ffffffff80215a6a:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215a6d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215a71:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215a75:	89 93 18 02 00 00    	mov    %edx,0x218(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff80215a7b:	48 c7 c2 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215a82:	66 89 8b 16 02 00 00 	mov    %cx,0x216(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff80215a89:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215a8c:	66 89 93 20 02 00 00 	mov    %dx,0x220(%rbx)
ffffffff80215a93:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215a97:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215a9b:	89 93 28 02 00 00    	mov    %edx,0x228(%rbx)
ffffffff80215aa1:	48 c7 c2 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rdx
ffffffff80215aa8:	66 89 8b 26 02 00 00 	mov    %cx,0x226(%rbx)
ffffffff80215aaf:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215ab2:	66 89 93 30 02 00 00 	mov    %dx,0x230(%rbx)
ffffffff80215ab9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215abd:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215ac1:	89 93 38 02 00 00    	mov    %edx,0x238(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215ac7:	48 c7 c2 05 ba 20 80 	mov    $0xffffffff8020ba05,%rdx
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff80215ace:	66 89 8b 36 02 00 00 	mov    %cx,0x236(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215ad5:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215ad8:	66 89 93 40 02 00 00 	mov    %dx,0x240(%rbx)
ffffffff80215adf:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215ae3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215ae7:	89 93 48 02 00 00    	mov    %edx,0x248(%rbx)
ffffffff80215aed:	48 c7 c2 11 ba 20 80 	mov    $0xffffffff8020ba11,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215af4:	89 83 08 02 00 00    	mov    %eax,0x208(%rbx)
ffffffff80215afa:	0f b7 05 7f 82 00 00 	movzwl 0x827f(%rip),%eax        # ffffffff8021dd80 <RME_X64_Pgflg_RME2NAT+0x100>
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215b01:	66 89 8b 46 02 00 00 	mov    %cx,0x246(%rbx)
ffffffff80215b08:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215b0b:	66 89 93 50 02 00 00 	mov    %dx,0x250(%rbx)
ffffffff80215b12:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215b16:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215b1a:	89 93 58 02 00 00    	mov    %edx,0x258(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215b20:	48 c7 c2 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215b27:	66 89 83 14 02 00 00 	mov    %ax,0x214(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215b2e:	66 89 8b 56 02 00 00 	mov    %cx,0x256(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215b35:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff80215b38:	c7 83 4c 01 00 00 00 	movl   $0x0,0x14c(%rbx)
ffffffff80215b3f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215b42:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215b46:	c7 83 02 02 00 00 08 	movl   $0x8e000008,0x202(%rbx)
ffffffff80215b4d:	00 00 8e 
ffffffff80215b50:	c7 83 0c 02 00 00 00 	movl   $0x0,0x20c(%rbx)
ffffffff80215b57:	00 00 00 
ffffffff80215b5a:	c7 83 1c 02 00 00 00 	movl   $0x0,0x21c(%rbx)
ffffffff80215b61:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff80215b64:	c7 83 22 02 00 00 08 	movl   $0x8e000008,0x222(%rbx)
ffffffff80215b6b:	00 00 8e 
ffffffff80215b6e:	c7 83 2c 02 00 00 00 	movl   $0x0,0x22c(%rbx)
ffffffff80215b75:	00 00 00 
ffffffff80215b78:	c7 83 32 02 00 00 08 	movl   $0x8e000008,0x232(%rbx)
ffffffff80215b7f:	00 00 8e 
ffffffff80215b82:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%rbx)
ffffffff80215b89:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215b8c:	c7 83 42 02 00 00 08 	movl   $0x8e000008,0x242(%rbx)
ffffffff80215b93:	00 00 8e 
ffffffff80215b96:	c7 83 4c 02 00 00 00 	movl   $0x0,0x24c(%rbx)
ffffffff80215b9d:	00 00 00 
ffffffff80215ba0:	c7 83 52 02 00 00 08 	movl   $0x8e000008,0x252(%rbx)
ffffffff80215ba7:	00 00 8e 
ffffffff80215baa:	c7 83 5c 02 00 00 00 	movl   $0x0,0x25c(%rbx)
ffffffff80215bb1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215bb4:	66 89 93 60 02 00 00 	mov    %dx,0x260(%rbx)
ffffffff80215bbb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215bbf:	89 93 68 02 00 00    	mov    %edx,0x268(%rbx)
ffffffff80215bc5:	48 c7 c2 29 ba 20 80 	mov    $0xffffffff8020ba29,%rdx
ffffffff80215bcc:	66 89 8b 66 02 00 00 	mov    %cx,0x266(%rbx)
ffffffff80215bd3:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215bd6:	66 89 93 70 02 00 00 	mov    %dx,0x270(%rbx)
ffffffff80215bdd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215be1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215be5:	89 93 78 02 00 00    	mov    %edx,0x278(%rbx)
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215beb:	48 c7 c2 35 ba 20 80 	mov    $0xffffffff8020ba35,%rdx
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215bf2:	66 89 8b 76 02 00 00 	mov    %cx,0x276(%rbx)
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215bf9:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215bfc:	66 89 93 80 02 00 00 	mov    %dx,0x280(%rbx)
ffffffff80215c03:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215c07:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215c0b:	89 93 88 02 00 00    	mov    %edx,0x288(%rbx)
ffffffff80215c11:	48 c7 c2 41 ba 20 80 	mov    $0xffffffff8020ba41,%rdx
ffffffff80215c18:	66 89 8b 86 02 00 00 	mov    %cx,0x286(%rbx)
ffffffff80215c1f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215c22:	66 89 93 90 02 00 00 	mov    %dx,0x290(%rbx)
ffffffff80215c29:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215c2d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215c31:	89 93 98 02 00 00    	mov    %edx,0x298(%rbx)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff80215c37:	48 c7 c2 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rdx
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215c3e:	66 89 8b 96 02 00 00 	mov    %cx,0x296(%rbx)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff80215c45:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215c48:	66 89 93 a0 02 00 00 	mov    %dx,0x2a0(%rbx)
ffffffff80215c4f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215c53:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215c57:	89 93 a8 02 00 00    	mov    %edx,0x2a8(%rbx)
ffffffff80215c5d:	48 c7 c2 59 ba 20 80 	mov    $0xffffffff8020ba59,%rdx
ffffffff80215c64:	66 89 8b a6 02 00 00 	mov    %cx,0x2a6(%rbx)
ffffffff80215c6b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215c6e:	66 89 93 b0 02 00 00 	mov    %dx,0x2b0(%rbx)
ffffffff80215c75:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215c79:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215c7d:	89 93 b8 02 00 00    	mov    %edx,0x2b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215c83:	48 c7 c2 65 ba 20 80 	mov    $0xffffffff8020ba65,%rdx
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff80215c8a:	66 89 8b b6 02 00 00 	mov    %cx,0x2b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215c91:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215c94:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215c98:	66 89 93 c0 02 00 00 	mov    %dx,0x2c0(%rbx)
ffffffff80215c9f:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215ca3:	c7 83 62 02 00 00 08 	movl   $0x8e000008,0x262(%rbx)
ffffffff80215caa:	00 00 8e 
ffffffff80215cad:	c7 83 6c 02 00 00 00 	movl   $0x0,0x26c(%rbx)
ffffffff80215cb4:	00 00 00 
ffffffff80215cb7:	c7 83 72 02 00 00 08 	movl   $0x8e000008,0x272(%rbx)
ffffffff80215cbe:	00 00 8e 
ffffffff80215cc1:	c7 83 7c 02 00 00 00 	movl   $0x0,0x27c(%rbx)
ffffffff80215cc8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215ccb:	c7 83 82 02 00 00 08 	movl   $0x8e000008,0x282(%rbx)
ffffffff80215cd2:	00 00 8e 
ffffffff80215cd5:	c7 83 8c 02 00 00 00 	movl   $0x0,0x28c(%rbx)
ffffffff80215cdc:	00 00 00 
ffffffff80215cdf:	c7 83 92 02 00 00 08 	movl   $0x8e000008,0x292(%rbx)
ffffffff80215ce6:	00 00 8e 
ffffffff80215ce9:	c7 83 9c 02 00 00 00 	movl   $0x0,0x29c(%rbx)
ffffffff80215cf0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff80215cf3:	c7 83 a2 02 00 00 08 	movl   $0x8e000008,0x2a2(%rbx)
ffffffff80215cfa:	00 00 8e 
ffffffff80215cfd:	c7 83 ac 02 00 00 00 	movl   $0x0,0x2ac(%rbx)
ffffffff80215d04:	00 00 00 
ffffffff80215d07:	c7 83 b2 02 00 00 08 	movl   $0x8e000008,0x2b2(%rbx)
ffffffff80215d0e:	00 00 8e 
ffffffff80215d11:	c7 83 bc 02 00 00 00 	movl   $0x0,0x2bc(%rbx)
ffffffff80215d18:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215d1b:	c7 83 c2 02 00 00 08 	movl   $0x8e000008,0x2c2(%rbx)
ffffffff80215d22:	00 00 8e 
ffffffff80215d25:	66 89 8b c6 02 00 00 	mov    %cx,0x2c6(%rbx)
ffffffff80215d2c:	89 93 c8 02 00 00    	mov    %edx,0x2c8(%rbx)
ffffffff80215d32:	48 c7 c2 71 ba 20 80 	mov    $0xffffffff8020ba71,%rdx
ffffffff80215d39:	66 89 93 d0 02 00 00 	mov    %dx,0x2d0(%rbx)
ffffffff80215d40:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215d43:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215d47:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215d4b:	89 93 d8 02 00 00    	mov    %edx,0x2d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215d51:	48 c7 c2 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rdx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215d58:	66 89 8b d6 02 00 00 	mov    %cx,0x2d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215d5f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215d62:	66 89 93 e0 02 00 00 	mov    %dx,0x2e0(%rbx)
ffffffff80215d69:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215d6d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215d71:	89 93 e8 02 00 00    	mov    %edx,0x2e8(%rbx)
ffffffff80215d77:	48 c7 c2 89 ba 20 80 	mov    $0xffffffff8020ba89,%rdx
ffffffff80215d7e:	66 89 8b e6 02 00 00 	mov    %cx,0x2e6(%rbx)
ffffffff80215d85:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215d88:	66 89 93 f0 02 00 00 	mov    %dx,0x2f0(%rbx)
ffffffff80215d8f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215d93:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215d97:	89 93 f8 02 00 00    	mov    %edx,0x2f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215d9d:	48 c7 c2 95 ba 20 80 	mov    $0xffffffff8020ba95,%rdx
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215da4:	66 89 8b f6 02 00 00 	mov    %cx,0x2f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215dab:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215dae:	66 89 93 00 03 00 00 	mov    %dx,0x300(%rbx)
ffffffff80215db5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215db9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215dbd:	89 93 08 03 00 00    	mov    %edx,0x308(%rbx)
ffffffff80215dc3:	48 c7 c2 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rdx
ffffffff80215dca:	66 89 8b 06 03 00 00 	mov    %cx,0x306(%rbx)
ffffffff80215dd1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215dd4:	66 89 93 10 03 00 00 	mov    %dx,0x310(%rbx)
ffffffff80215ddb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215ddf:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215de3:	89 93 18 03 00 00    	mov    %edx,0x318(%rbx)
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215de9:	48 c7 c2 ad ba 20 80 	mov    $0xffffffff8020baad,%rdx
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215df0:	66 89 8b 16 03 00 00 	mov    %cx,0x316(%rbx)
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215df7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215dfa:	66 89 93 20 03 00 00 	mov    %dx,0x320(%rbx)
ffffffff80215e01:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215e05:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215e09:	89 93 28 03 00 00    	mov    %edx,0x328(%rbx)
ffffffff80215e0f:	48 c7 c2 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rdx
ffffffff80215e16:	66 89 8b 26 03 00 00 	mov    %cx,0x326(%rbx)
ffffffff80215e1d:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215e20:	c7 83 cc 02 00 00 00 	movl   $0x0,0x2cc(%rbx)
ffffffff80215e27:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215e2a:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215e2e:	c7 83 d2 02 00 00 08 	movl   $0x8e000008,0x2d2(%rbx)
ffffffff80215e35:	00 00 8e 
ffffffff80215e38:	c7 83 dc 02 00 00 00 	movl   $0x0,0x2dc(%rbx)
ffffffff80215e3f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215e42:	c7 83 e2 02 00 00 08 	movl   $0x8e000008,0x2e2(%rbx)
ffffffff80215e49:	00 00 8e 
ffffffff80215e4c:	c7 83 ec 02 00 00 00 	movl   $0x0,0x2ec(%rbx)
ffffffff80215e53:	00 00 00 
ffffffff80215e56:	c7 83 f2 02 00 00 08 	movl   $0x8e000008,0x2f2(%rbx)
ffffffff80215e5d:	00 00 8e 
ffffffff80215e60:	c7 83 fc 02 00 00 00 	movl   $0x0,0x2fc(%rbx)
ffffffff80215e67:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215e6a:	c7 83 02 03 00 00 08 	movl   $0x8e000008,0x302(%rbx)
ffffffff80215e71:	00 00 8e 
ffffffff80215e74:	c7 83 0c 03 00 00 00 	movl   $0x0,0x30c(%rbx)
ffffffff80215e7b:	00 00 00 
ffffffff80215e7e:	c7 83 12 03 00 00 08 	movl   $0x8e000008,0x312(%rbx)
ffffffff80215e85:	00 00 8e 
ffffffff80215e88:	c7 83 1c 03 00 00 00 	movl   $0x0,0x31c(%rbx)
ffffffff80215e8f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215e92:	c7 83 22 03 00 00 08 	movl   $0x8e000008,0x322(%rbx)
ffffffff80215e99:	00 00 8e 
ffffffff80215e9c:	c7 83 2c 03 00 00 00 	movl   $0x0,0x32c(%rbx)
ffffffff80215ea3:	00 00 00 
ffffffff80215ea6:	66 89 93 30 03 00 00 	mov    %dx,0x330(%rbx)
ffffffff80215ead:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215eb1:	89 93 38 03 00 00    	mov    %edx,0x338(%rbx)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80215eb7:	48 c7 c2 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rdx
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215ebe:	66 89 8b 36 03 00 00 	mov    %cx,0x336(%rbx)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80215ec5:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215ec8:	66 89 93 40 03 00 00 	mov    %dx,0x340(%rbx)
ffffffff80215ecf:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215ed3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215ed7:	89 93 48 03 00 00    	mov    %edx,0x348(%rbx)
ffffffff80215edd:	48 c7 c2 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rdx
ffffffff80215ee4:	66 89 8b 46 03 00 00 	mov    %cx,0x346(%rbx)
ffffffff80215eeb:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215eee:	66 89 93 50 03 00 00 	mov    %dx,0x350(%rbx)
ffffffff80215ef5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215ef9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215efd:	89 93 58 03 00 00    	mov    %edx,0x358(%rbx)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215f03:	48 c7 c2 dd ba 20 80 	mov    $0xffffffff8020badd,%rdx
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80215f0a:	66 89 8b 56 03 00 00 	mov    %cx,0x356(%rbx)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215f11:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215f14:	66 89 93 60 03 00 00 	mov    %dx,0x360(%rbx)
ffffffff80215f1b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215f1f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215f23:	89 93 68 03 00 00    	mov    %edx,0x368(%rbx)
ffffffff80215f29:	48 c7 c2 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rdx
ffffffff80215f30:	66 89 8b 66 03 00 00 	mov    %cx,0x366(%rbx)
ffffffff80215f37:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215f3a:	66 89 93 70 03 00 00 	mov    %dx,0x370(%rbx)
ffffffff80215f41:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215f45:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215f49:	89 93 78 03 00 00    	mov    %edx,0x378(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80215f4f:	48 c7 c2 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rdx
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215f56:	66 89 8b 76 03 00 00 	mov    %cx,0x376(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80215f5d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215f60:	66 89 93 80 03 00 00 	mov    %dx,0x380(%rbx)
ffffffff80215f67:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215f6b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215f6f:	89 93 88 03 00 00    	mov    %edx,0x388(%rbx)
ffffffff80215f75:	48 c7 c2 01 bb 20 80 	mov    $0xffffffff8020bb01,%rdx
ffffffff80215f7c:	66 89 8b 86 03 00 00 	mov    %cx,0x386(%rbx)
ffffffff80215f83:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215f86:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215f8a:	66 89 93 90 03 00 00 	mov    %dx,0x390(%rbx)
ffffffff80215f91:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215f95:	66 89 8b 96 03 00 00 	mov    %cx,0x396(%rbx)
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215f9c:	c7 83 32 03 00 00 08 	movl   $0x8e000008,0x332(%rbx)
ffffffff80215fa3:	00 00 8e 
ffffffff80215fa6:	c7 83 3c 03 00 00 00 	movl   $0x0,0x33c(%rbx)
ffffffff80215fad:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80215fb0:	c7 83 42 03 00 00 08 	movl   $0x8e000008,0x342(%rbx)
ffffffff80215fb7:	00 00 8e 
ffffffff80215fba:	c7 83 4c 03 00 00 00 	movl   $0x0,0x34c(%rbx)
ffffffff80215fc1:	00 00 00 
ffffffff80215fc4:	c7 83 52 03 00 00 08 	movl   $0x8e000008,0x352(%rbx)
ffffffff80215fcb:	00 00 8e 
ffffffff80215fce:	c7 83 5c 03 00 00 00 	movl   $0x0,0x35c(%rbx)
ffffffff80215fd5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215fd8:	c7 83 62 03 00 00 08 	movl   $0x8e000008,0x362(%rbx)
ffffffff80215fdf:	00 00 8e 
ffffffff80215fe2:	c7 83 6c 03 00 00 00 	movl   $0x0,0x36c(%rbx)
ffffffff80215fe9:	00 00 00 
ffffffff80215fec:	c7 83 72 03 00 00 08 	movl   $0x8e000008,0x372(%rbx)
ffffffff80215ff3:	00 00 8e 
ffffffff80215ff6:	c7 83 7c 03 00 00 00 	movl   $0x0,0x37c(%rbx)
ffffffff80215ffd:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80216000:	c7 83 82 03 00 00 08 	movl   $0x8e000008,0x382(%rbx)
ffffffff80216007:	00 00 8e 
ffffffff8021600a:	c7 83 8c 03 00 00 00 	movl   $0x0,0x38c(%rbx)
ffffffff80216011:	00 00 00 
ffffffff80216014:	c7 83 92 03 00 00 08 	movl   $0x8e000008,0x392(%rbx)
ffffffff8021601b:	00 00 8e 
ffffffff8021601e:	89 93 98 03 00 00    	mov    %edx,0x398(%rbx)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff80216024:	48 c7 c2 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rdx
ffffffff8021602b:	66 89 93 a0 03 00 00 	mov    %dx,0x3a0(%rbx)
ffffffff80216032:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216035:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216039:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021603d:	89 93 a8 03 00 00    	mov    %edx,0x3a8(%rbx)
ffffffff80216043:	48 c7 c2 19 bb 20 80 	mov    $0xffffffff8020bb19,%rdx
ffffffff8021604a:	66 89 8b a6 03 00 00 	mov    %cx,0x3a6(%rbx)
ffffffff80216051:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216054:	66 89 93 b0 03 00 00 	mov    %dx,0x3b0(%rbx)
ffffffff8021605b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021605f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216063:	89 93 b8 03 00 00    	mov    %edx,0x3b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80216069:	48 c7 c2 25 bb 20 80 	mov    $0xffffffff8020bb25,%rdx
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff80216070:	66 89 8b b6 03 00 00 	mov    %cx,0x3b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80216077:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021607a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021607e:	66 89 93 c0 03 00 00 	mov    %dx,0x3c0(%rbx)
ffffffff80216085:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216089:	89 93 c8 03 00 00    	mov    %edx,0x3c8(%rbx)
ffffffff8021608f:	48 c7 c2 31 bb 20 80 	mov    $0xffffffff8020bb31,%rdx
ffffffff80216096:	66 89 8b c6 03 00 00 	mov    %cx,0x3c6(%rbx)
ffffffff8021609d:	48 89 d1             	mov    %rdx,%rcx
ffffffff802160a0:	66 89 93 d0 03 00 00 	mov    %dx,0x3d0(%rbx)
ffffffff802160a7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802160ab:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802160af:	89 93 d8 03 00 00    	mov    %edx,0x3d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff802160b5:	48 c7 c2 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rdx
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff802160bc:	66 89 8b d6 03 00 00 	mov    %cx,0x3d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff802160c3:	48 89 d1             	mov    %rdx,%rcx
ffffffff802160c6:	66 89 93 e0 03 00 00 	mov    %dx,0x3e0(%rbx)
ffffffff802160cd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802160d1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802160d5:	89 93 e8 03 00 00    	mov    %edx,0x3e8(%rbx)
ffffffff802160db:	48 c7 c2 49 bb 20 80 	mov    $0xffffffff8020bb49,%rdx
ffffffff802160e2:	66 89 8b e6 03 00 00 	mov    %cx,0x3e6(%rbx)
ffffffff802160e9:	48 89 d1             	mov    %rdx,%rcx
ffffffff802160ec:	66 89 93 f0 03 00 00 	mov    %dx,0x3f0(%rbx)
ffffffff802160f3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802160f7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802160fb:	89 93 f8 03 00 00    	mov    %edx,0x3f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80216101:	48 c7 c2 55 bb 20 80 	mov    $0xffffffff8020bb55,%rdx
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff80216108:	66 89 8b f6 03 00 00 	mov    %cx,0x3f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8021610f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216112:	66 89 93 00 04 00 00 	mov    %dx,0x400(%rbx)
ffffffff80216119:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021611d:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80216121:	c7 83 9c 03 00 00 00 	movl   $0x0,0x39c(%rbx)
ffffffff80216128:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8021612b:	c7 83 a2 03 00 00 08 	movl   $0x8e000008,0x3a2(%rbx)
ffffffff80216132:	00 00 8e 
ffffffff80216135:	c7 83 ac 03 00 00 00 	movl   $0x0,0x3ac(%rbx)
ffffffff8021613c:	00 00 00 
ffffffff8021613f:	c7 83 b2 03 00 00 08 	movl   $0x8e000008,0x3b2(%rbx)
ffffffff80216146:	00 00 8e 
ffffffff80216149:	c7 83 bc 03 00 00 00 	movl   $0x0,0x3bc(%rbx)
ffffffff80216150:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80216153:	c7 83 c2 03 00 00 08 	movl   $0x8e000008,0x3c2(%rbx)
ffffffff8021615a:	00 00 8e 
ffffffff8021615d:	c7 83 cc 03 00 00 00 	movl   $0x0,0x3cc(%rbx)
ffffffff80216164:	00 00 00 
ffffffff80216167:	c7 83 d2 03 00 00 08 	movl   $0x8e000008,0x3d2(%rbx)
ffffffff8021616e:	00 00 8e 
ffffffff80216171:	c7 83 dc 03 00 00 00 	movl   $0x0,0x3dc(%rbx)
ffffffff80216178:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8021617b:	c7 83 e2 03 00 00 08 	movl   $0x8e000008,0x3e2(%rbx)
ffffffff80216182:	00 00 8e 
ffffffff80216185:	c7 83 ec 03 00 00 00 	movl   $0x0,0x3ec(%rbx)
ffffffff8021618c:	00 00 00 
ffffffff8021618f:	c7 83 f2 03 00 00 08 	movl   $0x8e000008,0x3f2(%rbx)
ffffffff80216196:	00 00 8e 
ffffffff80216199:	c7 83 fc 03 00 00 00 	movl   $0x0,0x3fc(%rbx)
ffffffff802161a0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff802161a3:	c7 83 02 04 00 00 08 	movl   $0x8e000008,0x402(%rbx)
ffffffff802161aa:	00 00 8e 
ffffffff802161ad:	89 93 08 04 00 00    	mov    %edx,0x408(%rbx)
ffffffff802161b3:	48 c7 c2 61 bb 20 80 	mov    $0xffffffff8020bb61,%rdx
ffffffff802161ba:	66 89 8b 06 04 00 00 	mov    %cx,0x406(%rbx)
ffffffff802161c1:	48 89 d1             	mov    %rdx,%rcx
ffffffff802161c4:	66 89 93 10 04 00 00 	mov    %dx,0x410(%rbx)
ffffffff802161cb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802161cf:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802161d3:	89 93 18 04 00 00    	mov    %edx,0x418(%rbx)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff802161d9:	48 c7 c2 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rdx
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff802161e0:	66 89 8b 16 04 00 00 	mov    %cx,0x416(%rbx)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff802161e7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802161ea:	66 89 93 20 04 00 00 	mov    %dx,0x420(%rbx)
ffffffff802161f1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802161f5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802161f9:	89 93 28 04 00 00    	mov    %edx,0x428(%rbx)
ffffffff802161ff:	48 c7 c2 79 bb 20 80 	mov    $0xffffffff8020bb79,%rdx
ffffffff80216206:	66 89 8b 26 04 00 00 	mov    %cx,0x426(%rbx)
ffffffff8021620d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216210:	66 89 93 30 04 00 00 	mov    %dx,0x430(%rbx)
ffffffff80216217:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021621b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021621f:	89 93 38 04 00 00    	mov    %edx,0x438(%rbx)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80216225:	48 c7 c2 85 bb 20 80 	mov    $0xffffffff8020bb85,%rdx
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8021622c:	66 89 8b 36 04 00 00 	mov    %cx,0x436(%rbx)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80216233:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216236:	66 89 93 40 04 00 00 	mov    %dx,0x440(%rbx)
ffffffff8021623d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216241:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216245:	89 93 48 04 00 00    	mov    %edx,0x448(%rbx)
ffffffff8021624b:	48 c7 c2 91 bb 20 80 	mov    $0xffffffff8020bb91,%rdx
ffffffff80216252:	66 89 8b 46 04 00 00 	mov    %cx,0x446(%rbx)
ffffffff80216259:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021625c:	66 89 93 50 04 00 00 	mov    %dx,0x450(%rbx)
ffffffff80216263:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216267:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021626b:	89 93 58 04 00 00    	mov    %edx,0x458(%rbx)
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80216271:	48 c7 c2 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rdx
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80216278:	66 89 8b 56 04 00 00 	mov    %cx,0x456(%rbx)
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8021627f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216282:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216286:	66 89 93 60 04 00 00 	mov    %dx,0x460(%rbx)
ffffffff8021628d:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80216291:	66 89 83 14 04 00 00 	mov    %ax,0x414(%rbx)
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80216298:	66 89 8b 66 04 00 00 	mov    %cx,0x466(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8021629f:	c7 83 0c 04 00 00 00 	movl   $0x0,0x40c(%rbx)
ffffffff802162a6:	00 00 00 
ffffffff802162a9:	66 89 b3 12 04 00 00 	mov    %si,0x412(%rbx)
ffffffff802162b0:	c7 83 1c 04 00 00 00 	movl   $0x0,0x41c(%rbx)
ffffffff802162b7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff802162ba:	c7 83 22 04 00 00 08 	movl   $0x8e000008,0x422(%rbx)
ffffffff802162c1:	00 00 8e 
ffffffff802162c4:	c7 83 2c 04 00 00 00 	movl   $0x0,0x42c(%rbx)
ffffffff802162cb:	00 00 00 
ffffffff802162ce:	c7 83 32 04 00 00 08 	movl   $0x8e000008,0x432(%rbx)
ffffffff802162d5:	00 00 8e 
ffffffff802162d8:	c7 83 3c 04 00 00 00 	movl   $0x0,0x43c(%rbx)
ffffffff802162df:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff802162e2:	c7 83 42 04 00 00 08 	movl   $0x8e000008,0x442(%rbx)
ffffffff802162e9:	00 00 8e 
ffffffff802162ec:	c7 83 4c 04 00 00 00 	movl   $0x0,0x44c(%rbx)
ffffffff802162f3:	00 00 00 
ffffffff802162f6:	c7 83 52 04 00 00 08 	movl   $0x8e000008,0x452(%rbx)
ffffffff802162fd:	00 00 8e 
ffffffff80216300:	c7 83 5c 04 00 00 00 	movl   $0x0,0x45c(%rbx)
ffffffff80216307:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8021630a:	c7 83 62 04 00 00 08 	movl   $0x8e000008,0x462(%rbx)
ffffffff80216311:	00 00 8e 
ffffffff80216314:	89 93 68 04 00 00    	mov    %edx,0x468(%rbx)
ffffffff8021631a:	48 c7 c2 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rdx
ffffffff80216321:	66 89 93 70 04 00 00 	mov    %dx,0x470(%rbx)
ffffffff80216328:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021632b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021632f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216333:	89 93 78 04 00 00    	mov    %edx,0x478(%rbx)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80216339:	48 c7 c2 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rdx
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80216340:	66 89 8b 76 04 00 00 	mov    %cx,0x476(%rbx)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80216347:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021634a:	66 89 93 80 04 00 00 	mov    %dx,0x480(%rbx)
ffffffff80216351:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216355:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216359:	89 93 88 04 00 00    	mov    %edx,0x488(%rbx)
ffffffff8021635f:	48 c7 c2 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rdx
ffffffff80216366:	66 89 8b 86 04 00 00 	mov    %cx,0x486(%rbx)
ffffffff8021636d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216370:	66 89 93 90 04 00 00 	mov    %dx,0x490(%rbx)
ffffffff80216377:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021637b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021637f:	89 93 98 04 00 00    	mov    %edx,0x498(%rbx)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80216385:	48 c7 c2 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rdx
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8021638c:	66 89 8b 96 04 00 00 	mov    %cx,0x496(%rbx)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80216393:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216396:	66 89 93 a0 04 00 00 	mov    %dx,0x4a0(%rbx)
ffffffff8021639d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802163a1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802163a5:	89 93 a8 04 00 00    	mov    %edx,0x4a8(%rbx)
ffffffff802163ab:	48 c7 c2 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rdx
ffffffff802163b2:	66 89 8b a6 04 00 00 	mov    %cx,0x4a6(%rbx)
ffffffff802163b9:	48 89 d1             	mov    %rdx,%rcx
ffffffff802163bc:	66 89 93 b0 04 00 00 	mov    %dx,0x4b0(%rbx)
ffffffff802163c3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802163c7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802163cb:	89 93 b8 04 00 00    	mov    %edx,0x4b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff802163d1:	48 c7 c2 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rdx
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff802163d8:	66 89 8b b6 04 00 00 	mov    %cx,0x4b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff802163df:	48 89 d1             	mov    %rdx,%rcx
ffffffff802163e2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802163e6:	66 89 93 c0 04 00 00 	mov    %dx,0x4c0(%rbx)
ffffffff802163ed:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802163f1:	89 93 c8 04 00 00    	mov    %edx,0x4c8(%rbx)
ffffffff802163f7:	48 c7 c2 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rdx
ffffffff802163fe:	66 89 8b c6 04 00 00 	mov    %cx,0x4c6(%rbx)
ffffffff80216405:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216408:	66 89 93 d0 04 00 00 	mov    %dx,0x4d0(%rbx)
ffffffff8021640f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216413:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80216417:	c7 83 6c 04 00 00 00 	movl   $0x0,0x46c(%rbx)
ffffffff8021641e:	00 00 00 
ffffffff80216421:	c7 83 72 04 00 00 08 	movl   $0x8e000008,0x472(%rbx)
ffffffff80216428:	00 00 8e 
ffffffff8021642b:	c7 83 7c 04 00 00 00 	movl   $0x0,0x47c(%rbx)
ffffffff80216432:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80216435:	c7 83 82 04 00 00 08 	movl   $0x8e000008,0x482(%rbx)
ffffffff8021643c:	00 00 8e 
ffffffff8021643f:	c7 83 8c 04 00 00 00 	movl   $0x0,0x48c(%rbx)
ffffffff80216446:	00 00 00 
ffffffff80216449:	c7 83 92 04 00 00 08 	movl   $0x8e000008,0x492(%rbx)
ffffffff80216450:	00 00 8e 
ffffffff80216453:	c7 83 9c 04 00 00 00 	movl   $0x0,0x49c(%rbx)
ffffffff8021645a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8021645d:	c7 83 a2 04 00 00 08 	movl   $0x8e000008,0x4a2(%rbx)
ffffffff80216464:	00 00 8e 
ffffffff80216467:	c7 83 ac 04 00 00 00 	movl   $0x0,0x4ac(%rbx)
ffffffff8021646e:	00 00 00 
ffffffff80216471:	c7 83 b2 04 00 00 08 	movl   $0x8e000008,0x4b2(%rbx)
ffffffff80216478:	00 00 8e 
ffffffff8021647b:	c7 83 bc 04 00 00 00 	movl   $0x0,0x4bc(%rbx)
ffffffff80216482:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216485:	c7 83 c2 04 00 00 08 	movl   $0x8e000008,0x4c2(%rbx)
ffffffff8021648c:	00 00 8e 
ffffffff8021648f:	c7 83 cc 04 00 00 00 	movl   $0x0,0x4cc(%rbx)
ffffffff80216496:	00 00 00 
ffffffff80216499:	c7 83 d2 04 00 00 08 	movl   $0x8e000008,0x4d2(%rbx)
ffffffff802164a0:	00 00 8e 
ffffffff802164a3:	89 93 d8 04 00 00    	mov    %edx,0x4d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff802164a9:	48 c7 c2 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rdx
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff802164b0:	66 89 8b d6 04 00 00 	mov    %cx,0x4d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff802164b7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802164ba:	66 89 93 e0 04 00 00 	mov    %dx,0x4e0(%rbx)
ffffffff802164c1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802164c5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802164c9:	89 93 e8 04 00 00    	mov    %edx,0x4e8(%rbx)
ffffffff802164cf:	48 c7 c2 09 bc 20 80 	mov    $0xffffffff8020bc09,%rdx
ffffffff802164d6:	66 89 8b e6 04 00 00 	mov    %cx,0x4e6(%rbx)
ffffffff802164dd:	48 89 d1             	mov    %rdx,%rcx
ffffffff802164e0:	66 89 93 f0 04 00 00 	mov    %dx,0x4f0(%rbx)
ffffffff802164e7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802164eb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802164ef:	89 93 f8 04 00 00    	mov    %edx,0x4f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff802164f5:	48 c7 c2 15 bc 20 80 	mov    $0xffffffff8020bc15,%rdx
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff802164fc:	66 89 8b f6 04 00 00 	mov    %cx,0x4f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80216503:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216506:	66 89 93 00 05 00 00 	mov    %dx,0x500(%rbx)
ffffffff8021650d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216511:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216515:	89 93 08 05 00 00    	mov    %edx,0x508(%rbx)
ffffffff8021651b:	48 c7 c2 21 bc 20 80 	mov    $0xffffffff8020bc21,%rdx
ffffffff80216522:	66 89 8b 06 05 00 00 	mov    %cx,0x506(%rbx)
ffffffff80216529:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021652c:	66 89 93 10 05 00 00 	mov    %dx,0x510(%rbx)
ffffffff80216533:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216537:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021653b:	89 93 18 05 00 00    	mov    %edx,0x518(%rbx)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80216541:	48 c7 c2 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rdx
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80216548:	66 89 8b 16 05 00 00 	mov    %cx,0x516(%rbx)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8021654f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216552:	66 89 93 20 05 00 00 	mov    %dx,0x520(%rbx)
ffffffff80216559:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021655d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216561:	89 93 28 05 00 00    	mov    %edx,0x528(%rbx)
ffffffff80216567:	48 c7 c2 39 bc 20 80 	mov    $0xffffffff8020bc39,%rdx
ffffffff8021656e:	66 89 8b 26 05 00 00 	mov    %cx,0x526(%rbx)
ffffffff80216575:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216578:	66 89 93 30 05 00 00 	mov    %dx,0x530(%rbx)
ffffffff8021657f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216583:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216587:	89 93 38 05 00 00    	mov    %edx,0x538(%rbx)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8021658d:	48 c7 c2 45 bc 20 80 	mov    $0xffffffff8020bc45,%rdx
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80216594:	66 89 8b 36 05 00 00 	mov    %cx,0x536(%rbx)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8021659b:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8021659e:	c7 83 dc 04 00 00 00 	movl   $0x0,0x4dc(%rbx)
ffffffff802165a5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff802165a8:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff802165ac:	c7 83 e2 04 00 00 08 	movl   $0x8e000008,0x4e2(%rbx)
ffffffff802165b3:	00 00 8e 
ffffffff802165b6:	c7 83 ec 04 00 00 00 	movl   $0x0,0x4ec(%rbx)
ffffffff802165bd:	00 00 00 
ffffffff802165c0:	c7 83 f2 04 00 00 08 	movl   $0x8e000008,0x4f2(%rbx)
ffffffff802165c7:	00 00 8e 
ffffffff802165ca:	c7 83 fc 04 00 00 00 	movl   $0x0,0x4fc(%rbx)
ffffffff802165d1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff802165d4:	c7 83 02 05 00 00 08 	movl   $0x8e000008,0x502(%rbx)
ffffffff802165db:	00 00 8e 
ffffffff802165de:	c7 83 0c 05 00 00 00 	movl   $0x0,0x50c(%rbx)
ffffffff802165e5:	00 00 00 
ffffffff802165e8:	c7 83 12 05 00 00 08 	movl   $0x8e000008,0x512(%rbx)
ffffffff802165ef:	00 00 8e 
ffffffff802165f2:	c7 83 1c 05 00 00 00 	movl   $0x0,0x51c(%rbx)
ffffffff802165f9:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff802165fc:	c7 83 22 05 00 00 08 	movl   $0x8e000008,0x522(%rbx)
ffffffff80216603:	00 00 8e 
ffffffff80216606:	c7 83 2c 05 00 00 00 	movl   $0x0,0x52c(%rbx)
ffffffff8021660d:	00 00 00 
ffffffff80216610:	c7 83 32 05 00 00 08 	movl   $0x8e000008,0x532(%rbx)
ffffffff80216617:	00 00 8e 
ffffffff8021661a:	c7 83 3c 05 00 00 00 	movl   $0x0,0x53c(%rbx)
ffffffff80216621:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80216624:	66 89 93 40 05 00 00 	mov    %dx,0x540(%rbx)
ffffffff8021662b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021662f:	89 93 48 05 00 00    	mov    %edx,0x548(%rbx)
ffffffff80216635:	48 c7 c2 51 bc 20 80 	mov    $0xffffffff8020bc51,%rdx
ffffffff8021663c:	66 89 8b 46 05 00 00 	mov    %cx,0x546(%rbx)
ffffffff80216643:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216646:	66 89 93 50 05 00 00 	mov    %dx,0x550(%rbx)
ffffffff8021664d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216651:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216655:	89 93 58 05 00 00    	mov    %edx,0x558(%rbx)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8021665b:	48 c7 c2 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rdx
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80216662:	66 89 8b 56 05 00 00 	mov    %cx,0x556(%rbx)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff80216669:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021666c:	66 89 93 60 05 00 00 	mov    %dx,0x560(%rbx)
ffffffff80216673:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216677:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021667b:	89 93 68 05 00 00    	mov    %edx,0x568(%rbx)
ffffffff80216681:	48 c7 c2 69 bc 20 80 	mov    $0xffffffff8020bc69,%rdx
ffffffff80216688:	66 89 8b 66 05 00 00 	mov    %cx,0x566(%rbx)
ffffffff8021668f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216692:	66 89 93 70 05 00 00 	mov    %dx,0x570(%rbx)
ffffffff80216699:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021669d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802166a1:	89 93 78 05 00 00    	mov    %edx,0x578(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff802166a7:	48 c7 c2 75 bc 20 80 	mov    $0xffffffff8020bc75,%rdx
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff802166ae:	66 89 8b 76 05 00 00 	mov    %cx,0x576(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff802166b5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802166b8:	66 89 93 80 05 00 00 	mov    %dx,0x580(%rbx)
ffffffff802166bf:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802166c3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802166c7:	89 93 88 05 00 00    	mov    %edx,0x588(%rbx)
ffffffff802166cd:	48 c7 c2 81 bc 20 80 	mov    $0xffffffff8020bc81,%rdx
ffffffff802166d4:	66 89 8b 86 05 00 00 	mov    %cx,0x586(%rbx)
ffffffff802166db:	48 89 d1             	mov    %rdx,%rcx
ffffffff802166de:	66 89 93 90 05 00 00 	mov    %dx,0x590(%rbx)
ffffffff802166e5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802166e9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802166ed:	89 93 98 05 00 00    	mov    %edx,0x598(%rbx)
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff802166f3:	48 c7 c2 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rdx
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff802166fa:	66 89 8b 96 05 00 00 	mov    %cx,0x596(%rbx)
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216701:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216704:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216708:	66 89 93 a0 05 00 00 	mov    %dx,0x5a0(%rbx)
ffffffff8021670f:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80216713:	c7 83 42 05 00 00 08 	movl   $0x8e000008,0x542(%rbx)
ffffffff8021671a:	00 00 8e 
ffffffff8021671d:	c7 83 4c 05 00 00 00 	movl   $0x0,0x54c(%rbx)
ffffffff80216724:	00 00 00 
ffffffff80216727:	c7 83 52 05 00 00 08 	movl   $0x8e000008,0x552(%rbx)
ffffffff8021672e:	00 00 8e 
ffffffff80216731:	c7 83 5c 05 00 00 00 	movl   $0x0,0x55c(%rbx)
ffffffff80216738:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8021673b:	c7 83 62 05 00 00 08 	movl   $0x8e000008,0x562(%rbx)
ffffffff80216742:	00 00 8e 
ffffffff80216745:	c7 83 6c 05 00 00 00 	movl   $0x0,0x56c(%rbx)
ffffffff8021674c:	00 00 00 
ffffffff8021674f:	c7 83 72 05 00 00 08 	movl   $0x8e000008,0x572(%rbx)
ffffffff80216756:	00 00 8e 
ffffffff80216759:	c7 83 7c 05 00 00 00 	movl   $0x0,0x57c(%rbx)
ffffffff80216760:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216763:	c7 83 82 05 00 00 08 	movl   $0x8e000008,0x582(%rbx)
ffffffff8021676a:	00 00 8e 
ffffffff8021676d:	c7 83 8c 05 00 00 00 	movl   $0x0,0x58c(%rbx)
ffffffff80216774:	00 00 00 
ffffffff80216777:	c7 83 92 05 00 00 08 	movl   $0x8e000008,0x592(%rbx)
ffffffff8021677e:	00 00 8e 
ffffffff80216781:	c7 83 9c 05 00 00 00 	movl   $0x0,0x59c(%rbx)
ffffffff80216788:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8021678b:	c7 83 a2 05 00 00 08 	movl   $0x8e000008,0x5a2(%rbx)
ffffffff80216792:	00 00 8e 
ffffffff80216795:	66 89 8b a6 05 00 00 	mov    %cx,0x5a6(%rbx)
ffffffff8021679c:	89 93 a8 05 00 00    	mov    %edx,0x5a8(%rbx)
ffffffff802167a2:	48 c7 c2 99 bc 20 80 	mov    $0xffffffff8020bc99,%rdx
ffffffff802167a9:	66 89 93 b0 05 00 00 	mov    %dx,0x5b0(%rbx)
ffffffff802167b0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802167b3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802167b7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802167bb:	89 93 b8 05 00 00    	mov    %edx,0x5b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff802167c1:	48 c7 c2 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rdx
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff802167c8:	66 89 8b b6 05 00 00 	mov    %cx,0x5b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff802167cf:	48 89 d1             	mov    %rdx,%rcx
ffffffff802167d2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802167d6:	66 89 93 c0 05 00 00 	mov    %dx,0x5c0(%rbx)
ffffffff802167dd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802167e1:	89 93 c8 05 00 00    	mov    %edx,0x5c8(%rbx)
ffffffff802167e7:	48 c7 c2 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rdx
ffffffff802167ee:	66 89 8b c6 05 00 00 	mov    %cx,0x5c6(%rbx)
ffffffff802167f5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802167f8:	66 89 93 d0 05 00 00 	mov    %dx,0x5d0(%rbx)
ffffffff802167ff:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216803:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216807:	89 93 d8 05 00 00    	mov    %edx,0x5d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021680d:	48 c7 c2 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rdx
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216814:	66 89 8b d6 05 00 00 	mov    %cx,0x5d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021681b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021681e:	66 89 93 e0 05 00 00 	mov    %dx,0x5e0(%rbx)
ffffffff80216825:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216829:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021682d:	89 93 e8 05 00 00    	mov    %edx,0x5e8(%rbx)
ffffffff80216833:	48 c7 c2 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rdx
ffffffff8021683a:	66 89 8b e6 05 00 00 	mov    %cx,0x5e6(%rbx)
ffffffff80216841:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216844:	66 89 93 f0 05 00 00 	mov    %dx,0x5f0(%rbx)
ffffffff8021684b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021684f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216853:	89 93 f8 05 00 00    	mov    %edx,0x5f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216859:	48 c7 c2 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rdx
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff80216860:	66 89 8b f6 05 00 00 	mov    %cx,0x5f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216867:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021686a:	66 89 93 00 06 00 00 	mov    %dx,0x600(%rbx)
ffffffff80216871:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216875:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216879:	89 93 08 06 00 00    	mov    %edx,0x608(%rbx)
ffffffff8021687f:	48 c7 c2 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rdx
ffffffff80216886:	66 89 8b 06 06 00 00 	mov    %cx,0x606(%rbx)
ffffffff8021688d:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216890:	c7 83 ac 05 00 00 00 	movl   $0x0,0x5ac(%rbx)
ffffffff80216897:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8021689a:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8021689e:	c7 83 b2 05 00 00 08 	movl   $0x8e000008,0x5b2(%rbx)
ffffffff802168a5:	00 00 8e 
ffffffff802168a8:	c7 83 bc 05 00 00 00 	movl   $0x0,0x5bc(%rbx)
ffffffff802168af:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff802168b2:	c7 83 c2 05 00 00 08 	movl   $0x8e000008,0x5c2(%rbx)
ffffffff802168b9:	00 00 8e 
ffffffff802168bc:	c7 83 cc 05 00 00 00 	movl   $0x0,0x5cc(%rbx)
ffffffff802168c3:	00 00 00 
ffffffff802168c6:	c7 83 d2 05 00 00 08 	movl   $0x8e000008,0x5d2(%rbx)
ffffffff802168cd:	00 00 8e 
ffffffff802168d0:	c7 83 dc 05 00 00 00 	movl   $0x0,0x5dc(%rbx)
ffffffff802168d7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff802168da:	c7 83 e2 05 00 00 08 	movl   $0x8e000008,0x5e2(%rbx)
ffffffff802168e1:	00 00 8e 
ffffffff802168e4:	c7 83 ec 05 00 00 00 	movl   $0x0,0x5ec(%rbx)
ffffffff802168eb:	00 00 00 
ffffffff802168ee:	c7 83 f2 05 00 00 08 	movl   $0x8e000008,0x5f2(%rbx)
ffffffff802168f5:	00 00 8e 
ffffffff802168f8:	c7 83 fc 05 00 00 00 	movl   $0x0,0x5fc(%rbx)
ffffffff802168ff:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216902:	c7 83 02 06 00 00 08 	movl   $0x8e000008,0x602(%rbx)
ffffffff80216909:	00 00 8e 
ffffffff8021690c:	c7 83 0c 06 00 00 00 	movl   $0x0,0x60c(%rbx)
ffffffff80216913:	00 00 00 
ffffffff80216916:	66 89 93 10 06 00 00 	mov    %dx,0x610(%rbx)
ffffffff8021691d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216921:	89 93 18 06 00 00    	mov    %edx,0x618(%rbx)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff80216927:	48 c7 c2 ed bc 20 80 	mov    $0xffffffff8020bced,%rdx
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8021692e:	66 89 8b 16 06 00 00 	mov    %cx,0x616(%rbx)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff80216935:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216938:	66 89 93 20 06 00 00 	mov    %dx,0x620(%rbx)
ffffffff8021693f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216943:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216947:	89 93 28 06 00 00    	mov    %edx,0x628(%rbx)
ffffffff8021694d:	48 c7 c2 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rdx
ffffffff80216954:	66 89 8b 26 06 00 00 	mov    %cx,0x626(%rbx)
ffffffff8021695b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021695e:	66 89 93 30 06 00 00 	mov    %dx,0x630(%rbx)
ffffffff80216965:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216969:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021696d:	89 93 38 06 00 00    	mov    %edx,0x638(%rbx)
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff80216973:	48 c7 c2 05 bd 20 80 	mov    $0xffffffff8020bd05,%rdx
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8021697a:	66 89 8b 36 06 00 00 	mov    %cx,0x636(%rbx)
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff80216981:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216984:	66 89 93 40 06 00 00 	mov    %dx,0x640(%rbx)
ffffffff8021698b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021698f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216993:	89 93 48 06 00 00    	mov    %edx,0x648(%rbx)
ffffffff80216999:	48 c7 c2 11 bd 20 80 	mov    $0xffffffff8020bd11,%rdx
ffffffff802169a0:	66 89 8b 46 06 00 00 	mov    %cx,0x646(%rbx)
ffffffff802169a7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802169aa:	66 89 93 50 06 00 00 	mov    %dx,0x650(%rbx)
ffffffff802169b1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802169b5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802169b9:	89 93 58 06 00 00    	mov    %edx,0x658(%rbx)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff802169bf:	48 c7 c2 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rdx
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff802169c6:	66 89 8b 56 06 00 00 	mov    %cx,0x656(%rbx)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff802169cd:	48 89 d1             	mov    %rdx,%rcx
ffffffff802169d0:	66 89 93 60 06 00 00 	mov    %dx,0x660(%rbx)
ffffffff802169d7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802169db:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802169df:	89 93 68 06 00 00    	mov    %edx,0x668(%rbx)
ffffffff802169e5:	48 c7 c2 29 bd 20 80 	mov    $0xffffffff8020bd29,%rdx
ffffffff802169ec:	66 89 8b 66 06 00 00 	mov    %cx,0x666(%rbx)
ffffffff802169f3:	48 89 d1             	mov    %rdx,%rcx
ffffffff802169f6:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802169fa:	66 89 93 70 06 00 00 	mov    %dx,0x670(%rbx)
ffffffff80216a01:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216a05:	66 89 83 14 06 00 00 	mov    %ax,0x614(%rbx)
ffffffff80216a0c:	66 89 bb 12 06 00 00 	mov    %di,0x612(%rbx)
ffffffff80216a13:	c7 83 1c 06 00 00 00 	movl   $0x0,0x61c(%rbx)
ffffffff80216a1a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff80216a1d:	c7 83 22 06 00 00 08 	movl   $0x8e000008,0x622(%rbx)
ffffffff80216a24:	00 00 8e 
ffffffff80216a27:	c7 83 2c 06 00 00 00 	movl   $0x0,0x62c(%rbx)
ffffffff80216a2e:	00 00 00 
ffffffff80216a31:	c7 83 32 06 00 00 08 	movl   $0x8e000008,0x632(%rbx)
ffffffff80216a38:	00 00 8e 
ffffffff80216a3b:	c7 83 3c 06 00 00 00 	movl   $0x0,0x63c(%rbx)
ffffffff80216a42:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff80216a45:	c7 83 42 06 00 00 08 	movl   $0x8e000008,0x642(%rbx)
ffffffff80216a4c:	00 00 8e 
ffffffff80216a4f:	c7 83 4c 06 00 00 00 	movl   $0x0,0x64c(%rbx)
ffffffff80216a56:	00 00 00 
ffffffff80216a59:	c7 83 52 06 00 00 08 	movl   $0x8e000008,0x652(%rbx)
ffffffff80216a60:	00 00 8e 
ffffffff80216a63:	c7 83 5c 06 00 00 00 	movl   $0x0,0x65c(%rbx)
ffffffff80216a6a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff80216a6d:	c7 83 62 06 00 00 08 	movl   $0x8e000008,0x662(%rbx)
ffffffff80216a74:	00 00 8e 
ffffffff80216a77:	c7 83 6c 06 00 00 00 	movl   $0x0,0x66c(%rbx)
ffffffff80216a7e:	00 00 00 
ffffffff80216a81:	c7 83 72 06 00 00 08 	movl   $0x8e000008,0x672(%rbx)
ffffffff80216a88:	00 00 8e 
ffffffff80216a8b:	66 89 8b 76 06 00 00 	mov    %cx,0x676(%rbx)
ffffffff80216a92:	89 93 78 06 00 00    	mov    %edx,0x678(%rbx)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff80216a98:	48 c7 c2 35 bd 20 80 	mov    $0xffffffff8020bd35,%rdx
ffffffff80216a9f:	66 89 93 80 06 00 00 	mov    %dx,0x680(%rbx)
ffffffff80216aa6:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216aa9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216aad:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216ab1:	89 93 88 06 00 00    	mov    %edx,0x688(%rbx)
ffffffff80216ab7:	48 c7 c2 41 bd 20 80 	mov    $0xffffffff8020bd41,%rdx
ffffffff80216abe:	66 89 8b 86 06 00 00 	mov    %cx,0x686(%rbx)
ffffffff80216ac5:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216ac8:	66 89 93 90 06 00 00 	mov    %dx,0x690(%rbx)
ffffffff80216acf:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216ad3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216ad7:	89 93 98 06 00 00    	mov    %edx,0x698(%rbx)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff80216add:	48 c7 c2 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rdx
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff80216ae4:	66 89 8b 96 06 00 00 	mov    %cx,0x696(%rbx)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff80216aeb:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216aee:	66 89 93 a0 06 00 00 	mov    %dx,0x6a0(%rbx)
ffffffff80216af5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216af9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216afd:	89 93 a8 06 00 00    	mov    %edx,0x6a8(%rbx)
ffffffff80216b03:	48 c7 c2 59 bd 20 80 	mov    $0xffffffff8020bd59,%rdx
ffffffff80216b0a:	66 89 8b a6 06 00 00 	mov    %cx,0x6a6(%rbx)
ffffffff80216b11:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b14:	66 89 93 b0 06 00 00 	mov    %dx,0x6b0(%rbx)
ffffffff80216b1b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b1f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216b23:	89 93 b8 06 00 00    	mov    %edx,0x6b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff80216b29:	48 c7 c2 65 bd 20 80 	mov    $0xffffffff8020bd65,%rdx
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff80216b30:	66 89 8b b6 06 00 00 	mov    %cx,0x6b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff80216b37:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b3a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216b3e:	66 89 93 c0 06 00 00 	mov    %dx,0x6c0(%rbx)
ffffffff80216b45:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b49:	89 93 c8 06 00 00    	mov    %edx,0x6c8(%rbx)
ffffffff80216b4f:	48 c7 c2 71 bd 20 80 	mov    $0xffffffff8020bd71,%rdx
ffffffff80216b56:	66 89 8b c6 06 00 00 	mov    %cx,0x6c6(%rbx)
ffffffff80216b5d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b60:	66 89 93 d0 06 00 00 	mov    %dx,0x6d0(%rbx)
ffffffff80216b67:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b6b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216b6f:	89 93 d8 06 00 00    	mov    %edx,0x6d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216b75:	48 c7 c2 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rdx
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff80216b7c:	66 89 8b d6 06 00 00 	mov    %cx,0x6d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216b83:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff80216b86:	c7 83 7c 06 00 00 00 	movl   $0x0,0x67c(%rbx)
ffffffff80216b8d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216b90:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff80216b94:	c7 83 82 06 00 00 08 	movl   $0x8e000008,0x682(%rbx)
ffffffff80216b9b:	00 00 8e 
ffffffff80216b9e:	c7 83 8c 06 00 00 00 	movl   $0x0,0x68c(%rbx)
ffffffff80216ba5:	00 00 00 
ffffffff80216ba8:	c7 83 92 06 00 00 08 	movl   $0x8e000008,0x692(%rbx)
ffffffff80216baf:	00 00 8e 
ffffffff80216bb2:	c7 83 9c 06 00 00 00 	movl   $0x0,0x69c(%rbx)
ffffffff80216bb9:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff80216bbc:	c7 83 a2 06 00 00 08 	movl   $0x8e000008,0x6a2(%rbx)
ffffffff80216bc3:	00 00 8e 
ffffffff80216bc6:	c7 83 ac 06 00 00 00 	movl   $0x0,0x6ac(%rbx)
ffffffff80216bcd:	00 00 00 
ffffffff80216bd0:	c7 83 b2 06 00 00 08 	movl   $0x8e000008,0x6b2(%rbx)
ffffffff80216bd7:	00 00 8e 
ffffffff80216bda:	c7 83 bc 06 00 00 00 	movl   $0x0,0x6bc(%rbx)
ffffffff80216be1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff80216be4:	c7 83 c2 06 00 00 08 	movl   $0x8e000008,0x6c2(%rbx)
ffffffff80216beb:	00 00 8e 
ffffffff80216bee:	c7 83 cc 06 00 00 00 	movl   $0x0,0x6cc(%rbx)
ffffffff80216bf5:	00 00 00 
ffffffff80216bf8:	c7 83 d2 06 00 00 08 	movl   $0x8e000008,0x6d2(%rbx)
ffffffff80216bff:	00 00 8e 
ffffffff80216c02:	c7 83 dc 06 00 00 00 	movl   $0x0,0x6dc(%rbx)
ffffffff80216c09:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216c0c:	66 89 93 e0 06 00 00 	mov    %dx,0x6e0(%rbx)
ffffffff80216c13:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216c17:	89 93 e8 06 00 00    	mov    %edx,0x6e8(%rbx)
ffffffff80216c1d:	48 c7 c2 89 bd 20 80 	mov    $0xffffffff8020bd89,%rdx
ffffffff80216c24:	66 89 8b e6 06 00 00 	mov    %cx,0x6e6(%rbx)
ffffffff80216c2b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216c2e:	66 89 93 f0 06 00 00 	mov    %dx,0x6f0(%rbx)
ffffffff80216c35:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216c39:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216c3d:	89 93 f8 06 00 00    	mov    %edx,0x6f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216c43:	48 c7 c2 95 bd 20 80 	mov    $0xffffffff8020bd95,%rdx
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216c4a:	66 89 8b f6 06 00 00 	mov    %cx,0x6f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216c51:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216c54:	66 89 93 00 07 00 00 	mov    %dx,0x700(%rbx)
ffffffff80216c5b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216c5f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216c63:	89 93 08 07 00 00    	mov    %edx,0x708(%rbx)
ffffffff80216c69:	48 c7 c2 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rdx
ffffffff80216c70:	66 89 8b 06 07 00 00 	mov    %cx,0x706(%rbx)
ffffffff80216c77:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216c7a:	66 89 93 10 07 00 00 	mov    %dx,0x710(%rbx)
ffffffff80216c81:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216c85:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216c89:	89 93 18 07 00 00    	mov    %edx,0x718(%rbx)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216c8f:	48 c7 c2 ad bd 20 80 	mov    $0xffffffff8020bdad,%rdx
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216c96:	66 89 8b 16 07 00 00 	mov    %cx,0x716(%rbx)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216c9d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216ca0:	66 89 93 20 07 00 00 	mov    %dx,0x720(%rbx)
ffffffff80216ca7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216cab:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216caf:	89 93 28 07 00 00    	mov    %edx,0x728(%rbx)
ffffffff80216cb5:	48 c7 c2 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rdx
ffffffff80216cbc:	66 89 8b 26 07 00 00 	mov    %cx,0x726(%rbx)
ffffffff80216cc3:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216cc6:	66 89 93 30 07 00 00 	mov    %dx,0x730(%rbx)
ffffffff80216ccd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216cd1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216cd5:	89 93 38 07 00 00    	mov    %edx,0x738(%rbx)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216cdb:	48 c7 c2 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rdx
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216ce2:	66 89 8b 36 07 00 00 	mov    %cx,0x736(%rbx)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216ce9:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216cec:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216cf0:	66 89 93 40 07 00 00 	mov    %dx,0x740(%rbx)
ffffffff80216cf7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216cfb:	66 89 8b 46 07 00 00 	mov    %cx,0x746(%rbx)
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216d02:	c7 83 e2 06 00 00 08 	movl   $0x8e000008,0x6e2(%rbx)
ffffffff80216d09:	00 00 8e 
ffffffff80216d0c:	c7 83 ec 06 00 00 00 	movl   $0x0,0x6ec(%rbx)
ffffffff80216d13:	00 00 00 
ffffffff80216d16:	c7 83 f2 06 00 00 08 	movl   $0x8e000008,0x6f2(%rbx)
ffffffff80216d1d:	00 00 8e 
ffffffff80216d20:	c7 83 fc 06 00 00 00 	movl   $0x0,0x6fc(%rbx)
ffffffff80216d27:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216d2a:	c7 83 02 07 00 00 08 	movl   $0x8e000008,0x702(%rbx)
ffffffff80216d31:	00 00 8e 
ffffffff80216d34:	c7 83 0c 07 00 00 00 	movl   $0x0,0x70c(%rbx)
ffffffff80216d3b:	00 00 00 
ffffffff80216d3e:	c7 83 12 07 00 00 08 	movl   $0x8e000008,0x712(%rbx)
ffffffff80216d45:	00 00 8e 
ffffffff80216d48:	c7 83 1c 07 00 00 00 	movl   $0x0,0x71c(%rbx)
ffffffff80216d4f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216d52:	c7 83 22 07 00 00 08 	movl   $0x8e000008,0x722(%rbx)
ffffffff80216d59:	00 00 8e 
ffffffff80216d5c:	c7 83 2c 07 00 00 00 	movl   $0x0,0x72c(%rbx)
ffffffff80216d63:	00 00 00 
ffffffff80216d66:	c7 83 32 07 00 00 08 	movl   $0x8e000008,0x732(%rbx)
ffffffff80216d6d:	00 00 8e 
ffffffff80216d70:	c7 83 3c 07 00 00 00 	movl   $0x0,0x73c(%rbx)
ffffffff80216d77:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216d7a:	c7 83 42 07 00 00 08 	movl   $0x8e000008,0x742(%rbx)
ffffffff80216d81:	00 00 8e 
ffffffff80216d84:	89 93 48 07 00 00    	mov    %edx,0x748(%rbx)
ffffffff80216d8a:	48 c7 c2 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rdx
ffffffff80216d91:	66 89 93 50 07 00 00 	mov    %dx,0x750(%rbx)
ffffffff80216d98:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216d9b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216d9f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216da3:	89 93 58 07 00 00    	mov    %edx,0x758(%rbx)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216da9:	48 c7 c2 dd bd 20 80 	mov    $0xffffffff8020bddd,%rdx
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216db0:	66 89 8b 56 07 00 00 	mov    %cx,0x756(%rbx)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216db7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216dba:	66 89 93 60 07 00 00 	mov    %dx,0x760(%rbx)
ffffffff80216dc1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216dc5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216dc9:	89 93 68 07 00 00    	mov    %edx,0x768(%rbx)
ffffffff80216dcf:	48 c7 c2 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rdx
ffffffff80216dd6:	66 89 8b 66 07 00 00 	mov    %cx,0x766(%rbx)
ffffffff80216ddd:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216de0:	66 89 93 70 07 00 00 	mov    %dx,0x770(%rbx)
ffffffff80216de7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216deb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216def:	89 93 78 07 00 00    	mov    %edx,0x778(%rbx)
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216df5:	48 c7 c2 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rdx
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216dfc:	66 89 8b 76 07 00 00 	mov    %cx,0x776(%rbx)
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216e03:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e06:	66 89 93 80 07 00 00 	mov    %dx,0x780(%rbx)
ffffffff80216e0d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e11:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e15:	89 93 88 07 00 00    	mov    %edx,0x788(%rbx)
ffffffff80216e1b:	48 c7 c2 01 be 20 80 	mov    $0xffffffff8020be01,%rdx
ffffffff80216e22:	66 89 8b 86 07 00 00 	mov    %cx,0x786(%rbx)
ffffffff80216e29:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e2c:	66 89 93 90 07 00 00 	mov    %dx,0x790(%rbx)
ffffffff80216e33:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e37:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e3b:	89 93 98 07 00 00    	mov    %edx,0x798(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216e41:	48 c7 c2 0d be 20 80 	mov    $0xffffffff8020be0d,%rdx
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216e48:	66 89 8b 96 07 00 00 	mov    %cx,0x796(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216e4f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e52:	66 89 93 a0 07 00 00 	mov    %dx,0x7a0(%rbx)
ffffffff80216e59:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e5d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e61:	89 93 a8 07 00 00    	mov    %edx,0x7a8(%rbx)
ffffffff80216e67:	48 c7 c2 19 be 20 80 	mov    $0xffffffff8020be19,%rdx
ffffffff80216e6e:	66 89 8b a6 07 00 00 	mov    %cx,0x7a6(%rbx)
ffffffff80216e75:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e78:	66 89 93 b0 07 00 00 	mov    %dx,0x7b0(%rbx)
ffffffff80216e7f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e83:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216e87:	c7 83 4c 07 00 00 00 	movl   $0x0,0x74c(%rbx)
ffffffff80216e8e:	00 00 00 
ffffffff80216e91:	c7 83 52 07 00 00 08 	movl   $0x8e000008,0x752(%rbx)
ffffffff80216e98:	00 00 8e 
ffffffff80216e9b:	c7 83 5c 07 00 00 00 	movl   $0x0,0x75c(%rbx)
ffffffff80216ea2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216ea5:	c7 83 62 07 00 00 08 	movl   $0x8e000008,0x762(%rbx)
ffffffff80216eac:	00 00 8e 
ffffffff80216eaf:	c7 83 6c 07 00 00 00 	movl   $0x0,0x76c(%rbx)
ffffffff80216eb6:	00 00 00 
ffffffff80216eb9:	c7 83 72 07 00 00 08 	movl   $0x8e000008,0x772(%rbx)
ffffffff80216ec0:	00 00 8e 
ffffffff80216ec3:	c7 83 7c 07 00 00 00 	movl   $0x0,0x77c(%rbx)
ffffffff80216eca:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216ecd:	c7 83 82 07 00 00 08 	movl   $0x8e000008,0x782(%rbx)
ffffffff80216ed4:	00 00 8e 
ffffffff80216ed7:	c7 83 8c 07 00 00 00 	movl   $0x0,0x78c(%rbx)
ffffffff80216ede:	00 00 00 
ffffffff80216ee1:	c7 83 92 07 00 00 08 	movl   $0x8e000008,0x792(%rbx)
ffffffff80216ee8:	00 00 8e 
ffffffff80216eeb:	c7 83 9c 07 00 00 00 	movl   $0x0,0x79c(%rbx)
ffffffff80216ef2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216ef5:	c7 83 a2 07 00 00 08 	movl   $0x8e000008,0x7a2(%rbx)
ffffffff80216efc:	00 00 8e 
ffffffff80216eff:	c7 83 ac 07 00 00 00 	movl   $0x0,0x7ac(%rbx)
ffffffff80216f06:	00 00 00 
ffffffff80216f09:	c7 83 b2 07 00 00 08 	movl   $0x8e000008,0x7b2(%rbx)
ffffffff80216f10:	00 00 8e 
ffffffff80216f13:	89 93 b8 07 00 00    	mov    %edx,0x7b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80216f19:	48 c7 c2 25 be 20 80 	mov    $0xffffffff8020be25,%rdx
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216f20:	66 89 8b b6 07 00 00 	mov    %cx,0x7b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80216f27:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216f2a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216f2e:	66 89 93 c0 07 00 00 	mov    %dx,0x7c0(%rbx)
ffffffff80216f35:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216f39:	89 93 c8 07 00 00    	mov    %edx,0x7c8(%rbx)
ffffffff80216f3f:	48 c7 c2 31 be 20 80 	mov    $0xffffffff8020be31,%rdx
ffffffff80216f46:	66 89 8b c6 07 00 00 	mov    %cx,0x7c6(%rbx)
ffffffff80216f4d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216f50:	66 89 93 d0 07 00 00 	mov    %dx,0x7d0(%rbx)
ffffffff80216f57:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216f5b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216f5f:	89 93 d8 07 00 00    	mov    %edx,0x7d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80216f65:	48 c7 c2 3d be 20 80 	mov    $0xffffffff8020be3d,%rdx
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80216f6c:	66 89 8b d6 07 00 00 	mov    %cx,0x7d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80216f73:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216f76:	66 89 93 e0 07 00 00 	mov    %dx,0x7e0(%rbx)
ffffffff80216f7d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216f81:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216f85:	89 93 e8 07 00 00    	mov    %edx,0x7e8(%rbx)
ffffffff80216f8b:	48 c7 c2 49 be 20 80 	mov    $0xffffffff8020be49,%rdx
ffffffff80216f92:	66 89 8b e6 07 00 00 	mov    %cx,0x7e6(%rbx)
ffffffff80216f99:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216f9c:	66 89 93 f0 07 00 00 	mov    %dx,0x7f0(%rbx)
ffffffff80216fa3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216fa7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216fab:	89 93 f8 07 00 00    	mov    %edx,0x7f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80216fb1:	48 c7 c2 55 be 20 80 	mov    $0xffffffff8020be55,%rdx
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80216fb8:	66 89 8b f6 07 00 00 	mov    %cx,0x7f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80216fbf:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216fc2:	66 89 93 00 08 00 00 	mov    %dx,0x800(%rbx)
ffffffff80216fc9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216fcd:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216fd1:	89 93 08 08 00 00    	mov    %edx,0x808(%rbx)
ffffffff80216fd7:	48 c7 c2 64 be 20 80 	mov    $0xffffffff8020be64,%rdx
ffffffff80216fde:	66 89 8b 06 08 00 00 	mov    %cx,0x806(%rbx)
ffffffff80216fe5:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216fe8:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216fec:	66 89 93 10 08 00 00 	mov    %dx,0x810(%rbx)
ffffffff80216ff3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216ff7:	66 89 83 14 08 00 00 	mov    %ax,0x814(%rbx)
ffffffff80216ffe:	66 89 8b 16 08 00 00 	mov    %cx,0x816(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80217005:	c7 83 bc 07 00 00 00 	movl   $0x0,0x7bc(%rbx)
ffffffff8021700c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8021700f:	c7 83 c2 07 00 00 08 	movl   $0x8e000008,0x7c2(%rbx)
ffffffff80217016:	00 00 8e 
ffffffff80217019:	c7 83 cc 07 00 00 00 	movl   $0x0,0x7cc(%rbx)
ffffffff80217020:	00 00 00 
ffffffff80217023:	c7 83 d2 07 00 00 08 	movl   $0x8e000008,0x7d2(%rbx)
ffffffff8021702a:	00 00 8e 
ffffffff8021702d:	c7 83 dc 07 00 00 00 	movl   $0x0,0x7dc(%rbx)
ffffffff80217034:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80217037:	c7 83 e2 07 00 00 08 	movl   $0x8e000008,0x7e2(%rbx)
ffffffff8021703e:	00 00 8e 
ffffffff80217041:	c7 83 ec 07 00 00 00 	movl   $0x0,0x7ec(%rbx)
ffffffff80217048:	00 00 00 
ffffffff8021704b:	c7 83 f2 07 00 00 08 	movl   $0x8e000008,0x7f2(%rbx)
ffffffff80217052:	00 00 8e 
ffffffff80217055:	c7 83 fc 07 00 00 00 	movl   $0x0,0x7fc(%rbx)
ffffffff8021705c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8021705f:	c7 83 02 08 00 00 08 	movl   $0x8e000008,0x802(%rbx)
ffffffff80217066:	00 00 8e 
ffffffff80217069:	c7 83 0c 08 00 00 00 	movl   $0x0,0x80c(%rbx)
ffffffff80217070:	00 00 00 
ffffffff80217073:	66 44 89 83 12 08 00 	mov    %r8w,0x812(%rbx)
ffffffff8021707a:	00 
ffffffff8021707b:	89 93 18 08 00 00    	mov    %edx,0x818(%rbx)
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff80217081:	48 c7 c2 73 be 20 80 	mov    $0xffffffff8020be73,%rdx
ffffffff80217088:	66 89 93 20 08 00 00 	mov    %dx,0x820(%rbx)
ffffffff8021708f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217092:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217096:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021709a:	89 93 28 08 00 00    	mov    %edx,0x828(%rbx)
ffffffff802170a0:	48 c7 c2 82 be 20 80 	mov    $0xffffffff8020be82,%rdx
ffffffff802170a7:	66 89 8b 26 08 00 00 	mov    %cx,0x826(%rbx)
ffffffff802170ae:	48 89 d1             	mov    %rdx,%rcx
ffffffff802170b1:	66 89 93 30 08 00 00 	mov    %dx,0x830(%rbx)
ffffffff802170b8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802170bc:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802170c0:	89 93 38 08 00 00    	mov    %edx,0x838(%rbx)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff802170c6:	48 c7 c2 91 be 20 80 	mov    $0xffffffff8020be91,%rdx
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff802170cd:	66 89 8b 36 08 00 00 	mov    %cx,0x836(%rbx)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff802170d4:	48 89 d1             	mov    %rdx,%rcx
ffffffff802170d7:	66 89 93 40 08 00 00 	mov    %dx,0x840(%rbx)
ffffffff802170de:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802170e2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802170e6:	89 93 48 08 00 00    	mov    %edx,0x848(%rbx)
ffffffff802170ec:	48 c7 c2 a0 be 20 80 	mov    $0xffffffff8020bea0,%rdx
ffffffff802170f3:	66 89 8b 46 08 00 00 	mov    %cx,0x846(%rbx)
ffffffff802170fa:	48 89 d1             	mov    %rdx,%rcx
ffffffff802170fd:	66 89 93 50 08 00 00 	mov    %dx,0x850(%rbx)
ffffffff80217104:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217108:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021710c:	89 93 58 08 00 00    	mov    %edx,0x858(%rbx)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff80217112:	48 c7 c2 af be 20 80 	mov    $0xffffffff8020beaf,%rdx
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80217119:	66 89 8b 56 08 00 00 	mov    %cx,0x856(%rbx)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff80217120:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217123:	66 89 93 60 08 00 00 	mov    %dx,0x860(%rbx)
ffffffff8021712a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021712e:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217132:	89 93 68 08 00 00    	mov    %edx,0x868(%rbx)
ffffffff80217138:	48 c7 c2 be be 20 80 	mov    $0xffffffff8020bebe,%rdx
ffffffff8021713f:	66 89 8b 66 08 00 00 	mov    %cx,0x866(%rbx)
ffffffff80217146:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217149:	66 89 93 70 08 00 00 	mov    %dx,0x870(%rbx)
ffffffff80217150:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217154:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217158:	89 93 78 08 00 00    	mov    %edx,0x878(%rbx)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8021715e:	48 c7 c2 cd be 20 80 	mov    $0xffffffff8020becd,%rdx
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff80217165:	66 89 8b 76 08 00 00 	mov    %cx,0x876(%rbx)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8021716c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021716f:	66 89 93 80 08 00 00 	mov    %dx,0x880(%rbx)
ffffffff80217176:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021717a:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8021717e:	c7 83 1c 08 00 00 00 	movl   $0x0,0x81c(%rbx)
ffffffff80217185:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff80217188:	c7 83 22 08 00 00 08 	movl   $0x8e000008,0x822(%rbx)
ffffffff8021718f:	00 00 8e 
ffffffff80217192:	c7 83 2c 08 00 00 00 	movl   $0x0,0x82c(%rbx)
ffffffff80217199:	00 00 00 
ffffffff8021719c:	c7 83 32 08 00 00 08 	movl   $0x8e000008,0x832(%rbx)
ffffffff802171a3:	00 00 8e 
ffffffff802171a6:	c7 83 3c 08 00 00 00 	movl   $0x0,0x83c(%rbx)
ffffffff802171ad:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff802171b0:	c7 83 42 08 00 00 08 	movl   $0x8e000008,0x842(%rbx)
ffffffff802171b7:	00 00 8e 
ffffffff802171ba:	c7 83 4c 08 00 00 00 	movl   $0x0,0x84c(%rbx)
ffffffff802171c1:	00 00 00 
ffffffff802171c4:	c7 83 52 08 00 00 08 	movl   $0x8e000008,0x852(%rbx)
ffffffff802171cb:	00 00 8e 
ffffffff802171ce:	c7 83 5c 08 00 00 00 	movl   $0x0,0x85c(%rbx)
ffffffff802171d5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff802171d8:	c7 83 62 08 00 00 08 	movl   $0x8e000008,0x862(%rbx)
ffffffff802171df:	00 00 8e 
ffffffff802171e2:	c7 83 6c 08 00 00 00 	movl   $0x0,0x86c(%rbx)
ffffffff802171e9:	00 00 00 
ffffffff802171ec:	c7 83 72 08 00 00 08 	movl   $0x8e000008,0x872(%rbx)
ffffffff802171f3:	00 00 8e 
ffffffff802171f6:	c7 83 7c 08 00 00 00 	movl   $0x0,0x87c(%rbx)
ffffffff802171fd:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80217200:	c7 83 82 08 00 00 08 	movl   $0x8e000008,0x882(%rbx)
ffffffff80217207:	00 00 8e 
ffffffff8021720a:	89 93 88 08 00 00    	mov    %edx,0x888(%rbx)
ffffffff80217210:	48 c7 c2 dc be 20 80 	mov    $0xffffffff8020bedc,%rdx
ffffffff80217217:	66 89 8b 86 08 00 00 	mov    %cx,0x886(%rbx)
ffffffff8021721e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217221:	66 89 93 90 08 00 00 	mov    %dx,0x890(%rbx)
ffffffff80217228:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021722c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217230:	89 93 98 08 00 00    	mov    %edx,0x898(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80217236:	48 c7 c2 eb be 20 80 	mov    $0xffffffff8020beeb,%rdx
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8021723d:	66 89 8b 96 08 00 00 	mov    %cx,0x896(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80217244:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217247:	66 89 93 a0 08 00 00 	mov    %dx,0x8a0(%rbx)
ffffffff8021724e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217252:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217256:	89 93 a8 08 00 00    	mov    %edx,0x8a8(%rbx)
ffffffff8021725c:	48 c7 c2 fa be 20 80 	mov    $0xffffffff8020befa,%rdx
ffffffff80217263:	66 89 8b a6 08 00 00 	mov    %cx,0x8a6(%rbx)
ffffffff8021726a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021726d:	66 89 93 b0 08 00 00 	mov    %dx,0x8b0(%rbx)
ffffffff80217274:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217278:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021727c:	89 93 b8 08 00 00    	mov    %edx,0x8b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80217282:	48 c7 c2 09 bf 20 80 	mov    $0xffffffff8020bf09,%rdx
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80217289:	66 89 8b b6 08 00 00 	mov    %cx,0x8b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80217290:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217293:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217297:	66 89 93 c0 08 00 00 	mov    %dx,0x8c0(%rbx)
ffffffff8021729e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802172a2:	89 93 c8 08 00 00    	mov    %edx,0x8c8(%rbx)
ffffffff802172a8:	48 c7 c2 18 bf 20 80 	mov    $0xffffffff8020bf18,%rdx
ffffffff802172af:	66 89 8b c6 08 00 00 	mov    %cx,0x8c6(%rbx)
ffffffff802172b6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802172b9:	66 89 93 d0 08 00 00 	mov    %dx,0x8d0(%rbx)
ffffffff802172c0:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802172c4:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802172c8:	89 93 d8 08 00 00    	mov    %edx,0x8d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff802172ce:	48 c7 c2 27 bf 20 80 	mov    $0xffffffff8020bf27,%rdx
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff802172d5:	66 89 8b d6 08 00 00 	mov    %cx,0x8d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff802172dc:	48 89 d1             	mov    %rdx,%rcx
ffffffff802172df:	66 89 93 e0 08 00 00 	mov    %dx,0x8e0(%rbx)
ffffffff802172e6:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802172ea:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802172ee:	89 93 e8 08 00 00    	mov    %edx,0x8e8(%rbx)
ffffffff802172f4:	48 c7 c2 36 bf 20 80 	mov    $0xffffffff8020bf36,%rdx
ffffffff802172fb:	66 89 8b e6 08 00 00 	mov    %cx,0x8e6(%rbx)
ffffffff80217302:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80217305:	c7 83 8c 08 00 00 00 	movl   $0x0,0x88c(%rbx)
ffffffff8021730c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8021730f:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80217313:	c7 83 92 08 00 00 08 	movl   $0x8e000008,0x892(%rbx)
ffffffff8021731a:	00 00 8e 
ffffffff8021731d:	c7 83 9c 08 00 00 00 	movl   $0x0,0x89c(%rbx)
ffffffff80217324:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80217327:	c7 83 a2 08 00 00 08 	movl   $0x8e000008,0x8a2(%rbx)
ffffffff8021732e:	00 00 8e 
ffffffff80217331:	c7 83 ac 08 00 00 00 	movl   $0x0,0x8ac(%rbx)
ffffffff80217338:	00 00 00 
ffffffff8021733b:	c7 83 b2 08 00 00 08 	movl   $0x8e000008,0x8b2(%rbx)
ffffffff80217342:	00 00 8e 
ffffffff80217345:	c7 83 bc 08 00 00 00 	movl   $0x0,0x8bc(%rbx)
ffffffff8021734c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff8021734f:	c7 83 c2 08 00 00 08 	movl   $0x8e000008,0x8c2(%rbx)
ffffffff80217356:	00 00 8e 
ffffffff80217359:	c7 83 cc 08 00 00 00 	movl   $0x0,0x8cc(%rbx)
ffffffff80217360:	00 00 00 
ffffffff80217363:	c7 83 d2 08 00 00 08 	movl   $0x8e000008,0x8d2(%rbx)
ffffffff8021736a:	00 00 8e 
ffffffff8021736d:	c7 83 dc 08 00 00 00 	movl   $0x0,0x8dc(%rbx)
ffffffff80217374:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80217377:	c7 83 e2 08 00 00 08 	movl   $0x8e000008,0x8e2(%rbx)
ffffffff8021737e:	00 00 8e 
ffffffff80217381:	c7 83 ec 08 00 00 00 	movl   $0x0,0x8ec(%rbx)
ffffffff80217388:	00 00 00 
ffffffff8021738b:	66 89 93 f0 08 00 00 	mov    %dx,0x8f0(%rbx)
ffffffff80217392:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217396:	89 93 f8 08 00 00    	mov    %edx,0x8f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8021739c:	48 c7 c2 45 bf 20 80 	mov    $0xffffffff8020bf45,%rdx
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff802173a3:	66 89 8b f6 08 00 00 	mov    %cx,0x8f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff802173aa:	48 89 d1             	mov    %rdx,%rcx
ffffffff802173ad:	66 89 93 00 09 00 00 	mov    %dx,0x900(%rbx)
ffffffff802173b4:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802173b8:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802173bc:	89 93 08 09 00 00    	mov    %edx,0x908(%rbx)
ffffffff802173c2:	48 c7 c2 54 bf 20 80 	mov    $0xffffffff8020bf54,%rdx
ffffffff802173c9:	66 89 8b 06 09 00 00 	mov    %cx,0x906(%rbx)
ffffffff802173d0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802173d3:	66 89 93 10 09 00 00 	mov    %dx,0x910(%rbx)
ffffffff802173da:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802173de:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802173e2:	89 93 18 09 00 00    	mov    %edx,0x918(%rbx)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff802173e8:	48 c7 c2 63 bf 20 80 	mov    $0xffffffff8020bf63,%rdx
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff802173ef:	66 89 8b 16 09 00 00 	mov    %cx,0x916(%rbx)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff802173f6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802173f9:	66 89 93 20 09 00 00 	mov    %dx,0x920(%rbx)
ffffffff80217400:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217404:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217408:	89 93 28 09 00 00    	mov    %edx,0x928(%rbx)
ffffffff8021740e:	48 c7 c2 72 bf 20 80 	mov    $0xffffffff8020bf72,%rdx
ffffffff80217415:	66 89 8b 26 09 00 00 	mov    %cx,0x926(%rbx)
ffffffff8021741c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021741f:	66 89 93 30 09 00 00 	mov    %dx,0x930(%rbx)
ffffffff80217426:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021742a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021742e:	89 93 38 09 00 00    	mov    %edx,0x938(%rbx)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80217434:	48 c7 c2 81 bf 20 80 	mov    $0xffffffff8020bf81,%rdx
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff8021743b:	66 89 8b 36 09 00 00 	mov    %cx,0x936(%rbx)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80217442:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217445:	66 89 93 40 09 00 00 	mov    %dx,0x940(%rbx)
ffffffff8021744c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217450:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217454:	89 93 48 09 00 00    	mov    %edx,0x948(%rbx)
ffffffff8021745a:	48 c7 c2 90 bf 20 80 	mov    $0xffffffff8020bf90,%rdx
ffffffff80217461:	66 89 8b 46 09 00 00 	mov    %cx,0x946(%rbx)
ffffffff80217468:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021746b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021746f:	66 89 93 50 09 00 00 	mov    %dx,0x950(%rbx)
ffffffff80217476:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8021747a:	c7 83 f2 08 00 00 08 	movl   $0x8e000008,0x8f2(%rbx)
ffffffff80217481:	00 00 8e 
ffffffff80217484:	c7 83 fc 08 00 00 00 	movl   $0x0,0x8fc(%rbx)
ffffffff8021748b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8021748e:	c7 83 02 09 00 00 08 	movl   $0x8e000008,0x902(%rbx)
ffffffff80217495:	00 00 8e 
ffffffff80217498:	c7 83 0c 09 00 00 00 	movl   $0x0,0x90c(%rbx)
ffffffff8021749f:	00 00 00 
ffffffff802174a2:	c7 83 12 09 00 00 08 	movl   $0x8e000008,0x912(%rbx)
ffffffff802174a9:	00 00 8e 
ffffffff802174ac:	c7 83 1c 09 00 00 00 	movl   $0x0,0x91c(%rbx)
ffffffff802174b3:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff802174b6:	c7 83 22 09 00 00 08 	movl   $0x8e000008,0x922(%rbx)
ffffffff802174bd:	00 00 8e 
ffffffff802174c0:	c7 83 2c 09 00 00 00 	movl   $0x0,0x92c(%rbx)
ffffffff802174c7:	00 00 00 
ffffffff802174ca:	c7 83 32 09 00 00 08 	movl   $0x8e000008,0x932(%rbx)
ffffffff802174d1:	00 00 8e 
ffffffff802174d4:	c7 83 3c 09 00 00 00 	movl   $0x0,0x93c(%rbx)
ffffffff802174db:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff802174de:	c7 83 42 09 00 00 08 	movl   $0x8e000008,0x942(%rbx)
ffffffff802174e5:	00 00 8e 
ffffffff802174e8:	c7 83 4c 09 00 00 00 	movl   $0x0,0x94c(%rbx)
ffffffff802174ef:	00 00 00 
ffffffff802174f2:	c7 83 52 09 00 00 08 	movl   $0x8e000008,0x952(%rbx)
ffffffff802174f9:	00 00 8e 
ffffffff802174fc:	66 89 8b 56 09 00 00 	mov    %cx,0x956(%rbx)
ffffffff80217503:	89 93 58 09 00 00    	mov    %edx,0x958(%rbx)
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80217509:	48 c7 c2 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rdx
ffffffff80217510:	66 89 93 60 09 00 00 	mov    %dx,0x960(%rbx)
ffffffff80217517:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021751a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021751e:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217522:	89 93 68 09 00 00    	mov    %edx,0x968(%rbx)
ffffffff80217528:	48 c7 c2 ae bf 20 80 	mov    $0xffffffff8020bfae,%rdx
ffffffff8021752f:	66 89 8b 66 09 00 00 	mov    %cx,0x966(%rbx)
ffffffff80217536:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217539:	66 89 93 70 09 00 00 	mov    %dx,0x970(%rbx)
ffffffff80217540:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217544:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217548:	89 93 78 09 00 00    	mov    %edx,0x978(%rbx)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8021754e:	48 c7 c2 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rdx
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80217555:	66 89 8b 76 09 00 00 	mov    %cx,0x976(%rbx)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8021755c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021755f:	66 89 93 80 09 00 00 	mov    %dx,0x980(%rbx)
ffffffff80217566:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021756a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021756e:	89 93 88 09 00 00    	mov    %edx,0x988(%rbx)
ffffffff80217574:	48 c7 c2 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rdx
ffffffff8021757b:	66 89 8b 86 09 00 00 	mov    %cx,0x986(%rbx)
ffffffff80217582:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217585:	66 89 93 90 09 00 00 	mov    %dx,0x990(%rbx)
ffffffff8021758c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217590:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217594:	89 93 98 09 00 00    	mov    %edx,0x998(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8021759a:	48 c7 c2 db bf 20 80 	mov    $0xffffffff8020bfdb,%rdx
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff802175a1:	66 89 8b 96 09 00 00 	mov    %cx,0x996(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff802175a8:	48 89 d1             	mov    %rdx,%rcx
ffffffff802175ab:	66 89 93 a0 09 00 00 	mov    %dx,0x9a0(%rbx)
ffffffff802175b2:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802175b6:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802175ba:	89 93 a8 09 00 00    	mov    %edx,0x9a8(%rbx)
ffffffff802175c0:	48 c7 c2 ea bf 20 80 	mov    $0xffffffff8020bfea,%rdx
ffffffff802175c7:	66 89 8b a6 09 00 00 	mov    %cx,0x9a6(%rbx)
ffffffff802175ce:	48 89 d1             	mov    %rdx,%rcx
ffffffff802175d1:	66 89 93 b0 09 00 00 	mov    %dx,0x9b0(%rbx)
ffffffff802175d8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802175dc:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802175e0:	89 93 b8 09 00 00    	mov    %edx,0x9b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff802175e6:	48 c7 c2 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rdx
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff802175ed:	66 89 8b b6 09 00 00 	mov    %cx,0x9b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff802175f4:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff802175f7:	c7 83 5c 09 00 00 00 	movl   $0x0,0x95c(%rbx)
ffffffff802175fe:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217601:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80217605:	c7 83 62 09 00 00 08 	movl   $0x8e000008,0x962(%rbx)
ffffffff8021760c:	00 00 8e 
ffffffff8021760f:	c7 83 6c 09 00 00 00 	movl   $0x0,0x96c(%rbx)
ffffffff80217616:	00 00 00 
ffffffff80217619:	c7 83 72 09 00 00 08 	movl   $0x8e000008,0x972(%rbx)
ffffffff80217620:	00 00 8e 
ffffffff80217623:	c7 83 7c 09 00 00 00 	movl   $0x0,0x97c(%rbx)
ffffffff8021762a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8021762d:	c7 83 82 09 00 00 08 	movl   $0x8e000008,0x982(%rbx)
ffffffff80217634:	00 00 8e 
ffffffff80217637:	c7 83 8c 09 00 00 00 	movl   $0x0,0x98c(%rbx)
ffffffff8021763e:	00 00 00 
ffffffff80217641:	c7 83 92 09 00 00 08 	movl   $0x8e000008,0x992(%rbx)
ffffffff80217648:	00 00 8e 
ffffffff8021764b:	c7 83 9c 09 00 00 00 	movl   $0x0,0x99c(%rbx)
ffffffff80217652:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80217655:	c7 83 a2 09 00 00 08 	movl   $0x8e000008,0x9a2(%rbx)
ffffffff8021765c:	00 00 8e 
ffffffff8021765f:	c7 83 ac 09 00 00 00 	movl   $0x0,0x9ac(%rbx)
ffffffff80217666:	00 00 00 
ffffffff80217669:	c7 83 b2 09 00 00 08 	movl   $0x8e000008,0x9b2(%rbx)
ffffffff80217670:	00 00 8e 
ffffffff80217673:	c7 83 bc 09 00 00 00 	movl   $0x0,0x9bc(%rbx)
ffffffff8021767a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8021767d:	66 89 93 c0 09 00 00 	mov    %dx,0x9c0(%rbx)
ffffffff80217684:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217688:	89 93 c8 09 00 00    	mov    %edx,0x9c8(%rbx)
ffffffff8021768e:	48 c7 c2 08 c0 20 80 	mov    $0xffffffff8020c008,%rdx
ffffffff80217695:	66 89 8b c6 09 00 00 	mov    %cx,0x9c6(%rbx)
ffffffff8021769c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021769f:	66 89 93 d0 09 00 00 	mov    %dx,0x9d0(%rbx)
ffffffff802176a6:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802176aa:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802176ae:	89 93 d8 09 00 00    	mov    %edx,0x9d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff802176b4:	48 c7 c2 17 c0 20 80 	mov    $0xffffffff8020c017,%rdx
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff802176bb:	66 89 8b d6 09 00 00 	mov    %cx,0x9d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff802176c2:	48 89 d1             	mov    %rdx,%rcx
ffffffff802176c5:	66 89 93 e0 09 00 00 	mov    %dx,0x9e0(%rbx)
ffffffff802176cc:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802176d0:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802176d4:	89 93 e8 09 00 00    	mov    %edx,0x9e8(%rbx)
ffffffff802176da:	48 c7 c2 26 c0 20 80 	mov    $0xffffffff8020c026,%rdx
ffffffff802176e1:	66 89 8b e6 09 00 00 	mov    %cx,0x9e6(%rbx)
ffffffff802176e8:	48 89 d1             	mov    %rdx,%rcx
ffffffff802176eb:	66 89 93 f0 09 00 00 	mov    %dx,0x9f0(%rbx)
ffffffff802176f2:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802176f6:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802176fa:	89 93 f8 09 00 00    	mov    %edx,0x9f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80217700:	48 c7 c2 35 c0 20 80 	mov    $0xffffffff8020c035,%rdx
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217707:	66 89 8b f6 09 00 00 	mov    %cx,0x9f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8021770e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217711:	66 89 93 00 0a 00 00 	mov    %dx,0xa00(%rbx)
ffffffff80217718:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021771c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217720:	89 93 08 0a 00 00    	mov    %edx,0xa08(%rbx)
ffffffff80217726:	48 c7 c2 44 c0 20 80 	mov    $0xffffffff8020c044,%rdx
ffffffff8021772d:	66 89 8b 06 0a 00 00 	mov    %cx,0xa06(%rbx)
ffffffff80217734:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217737:	66 89 93 10 0a 00 00 	mov    %dx,0xa10(%rbx)
ffffffff8021773e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217742:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217746:	89 93 18 0a 00 00    	mov    %edx,0xa18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8021774c:	48 c7 c2 53 c0 20 80 	mov    $0xffffffff8020c053,%rdx
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80217753:	66 89 8b 16 0a 00 00 	mov    %cx,0xa16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8021775a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021775d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217761:	66 89 93 20 0a 00 00 	mov    %dx,0xa20(%rbx)
ffffffff80217768:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8021776c:	66 89 83 14 0a 00 00 	mov    %ax,0xa14(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217773:	c7 83 c2 09 00 00 08 	movl   $0x8e000008,0x9c2(%rbx)
ffffffff8021777a:	00 00 8e 
ffffffff8021777d:	c7 83 cc 09 00 00 00 	movl   $0x0,0x9cc(%rbx)
ffffffff80217784:	00 00 00 
ffffffff80217787:	c7 83 d2 09 00 00 08 	movl   $0x8e000008,0x9d2(%rbx)
ffffffff8021778e:	00 00 8e 
ffffffff80217791:	c7 83 dc 09 00 00 00 	movl   $0x0,0x9dc(%rbx)
ffffffff80217798:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8021779b:	c7 83 e2 09 00 00 08 	movl   $0x8e000008,0x9e2(%rbx)
ffffffff802177a2:	00 00 8e 
ffffffff802177a5:	c7 83 ec 09 00 00 00 	movl   $0x0,0x9ec(%rbx)
ffffffff802177ac:	00 00 00 
ffffffff802177af:	c7 83 f2 09 00 00 08 	movl   $0x8e000008,0x9f2(%rbx)
ffffffff802177b6:	00 00 8e 
ffffffff802177b9:	c7 83 fc 09 00 00 00 	movl   $0x0,0x9fc(%rbx)
ffffffff802177c0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff802177c3:	c7 83 02 0a 00 00 08 	movl   $0x8e000008,0xa02(%rbx)
ffffffff802177ca:	00 00 8e 
ffffffff802177cd:	c7 83 0c 0a 00 00 00 	movl   $0x0,0xa0c(%rbx)
ffffffff802177d4:	00 00 00 
ffffffff802177d7:	66 44 89 8b 12 0a 00 	mov    %r9w,0xa12(%rbx)
ffffffff802177de:	00 
ffffffff802177df:	c7 83 1c 0a 00 00 00 	movl   $0x0,0xa1c(%rbx)
ffffffff802177e6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff802177e9:	c7 83 22 0a 00 00 08 	movl   $0x8e000008,0xa22(%rbx)
ffffffff802177f0:	00 00 8e 
ffffffff802177f3:	66 89 8b 26 0a 00 00 	mov    %cx,0xa26(%rbx)
ffffffff802177fa:	89 93 28 0a 00 00    	mov    %edx,0xa28(%rbx)
ffffffff80217800:	48 c7 c2 62 c0 20 80 	mov    $0xffffffff8020c062,%rdx
ffffffff80217807:	66 89 93 30 0a 00 00 	mov    %dx,0xa30(%rbx)
ffffffff8021780e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217811:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217815:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217819:	89 93 38 0a 00 00    	mov    %edx,0xa38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff8021781f:	48 c7 c2 71 c0 20 80 	mov    $0xffffffff8020c071,%rdx
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80217826:	66 89 8b 36 0a 00 00 	mov    %cx,0xa36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff8021782d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217830:	66 89 93 40 0a 00 00 	mov    %dx,0xa40(%rbx)
ffffffff80217837:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021783b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021783f:	89 93 48 0a 00 00    	mov    %edx,0xa48(%rbx)
ffffffff80217845:	48 c7 c2 80 c0 20 80 	mov    $0xffffffff8020c080,%rdx
ffffffff8021784c:	66 89 8b 46 0a 00 00 	mov    %cx,0xa46(%rbx)
ffffffff80217853:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217856:	66 89 93 50 0a 00 00 	mov    %dx,0xa50(%rbx)
ffffffff8021785d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217861:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217865:	89 93 58 0a 00 00    	mov    %edx,0xa58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff8021786b:	48 c7 c2 8f c0 20 80 	mov    $0xffffffff8020c08f,%rdx
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80217872:	66 89 8b 56 0a 00 00 	mov    %cx,0xa56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80217879:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021787c:	66 89 93 60 0a 00 00 	mov    %dx,0xa60(%rbx)
ffffffff80217883:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217887:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021788b:	89 93 68 0a 00 00    	mov    %edx,0xa68(%rbx)
ffffffff80217891:	48 c7 c2 9e c0 20 80 	mov    $0xffffffff8020c09e,%rdx
ffffffff80217898:	66 89 8b 66 0a 00 00 	mov    %cx,0xa66(%rbx)
ffffffff8021789f:	48 89 d1             	mov    %rdx,%rcx
ffffffff802178a2:	66 89 93 70 0a 00 00 	mov    %dx,0xa70(%rbx)
ffffffff802178a9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802178ad:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802178b1:	89 93 78 0a 00 00    	mov    %edx,0xa78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff802178b7:	48 c7 c2 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rdx
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff802178be:	66 89 8b 76 0a 00 00 	mov    %cx,0xa76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff802178c5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802178c8:	66 89 93 80 0a 00 00 	mov    %dx,0xa80(%rbx)
ffffffff802178cf:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802178d3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802178d7:	89 93 88 0a 00 00    	mov    %edx,0xa88(%rbx)
ffffffff802178dd:	48 c7 c2 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rdx
ffffffff802178e4:	66 89 8b 86 0a 00 00 	mov    %cx,0xa86(%rbx)
ffffffff802178eb:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff802178ee:	c7 83 2c 0a 00 00 00 	movl   $0x0,0xa2c(%rbx)
ffffffff802178f5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff802178f8:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff802178fc:	c7 83 32 0a 00 00 08 	movl   $0x8e000008,0xa32(%rbx)
ffffffff80217903:	00 00 8e 
ffffffff80217906:	c7 83 3c 0a 00 00 00 	movl   $0x0,0xa3c(%rbx)
ffffffff8021790d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80217910:	c7 83 42 0a 00 00 08 	movl   $0x8e000008,0xa42(%rbx)
ffffffff80217917:	00 00 8e 
ffffffff8021791a:	c7 83 4c 0a 00 00 00 	movl   $0x0,0xa4c(%rbx)
ffffffff80217921:	00 00 00 
ffffffff80217924:	c7 83 52 0a 00 00 08 	movl   $0x8e000008,0xa52(%rbx)
ffffffff8021792b:	00 00 8e 
ffffffff8021792e:	c7 83 5c 0a 00 00 00 	movl   $0x0,0xa5c(%rbx)
ffffffff80217935:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80217938:	c7 83 62 0a 00 00 08 	movl   $0x8e000008,0xa62(%rbx)
ffffffff8021793f:	00 00 8e 
ffffffff80217942:	c7 83 6c 0a 00 00 00 	movl   $0x0,0xa6c(%rbx)
ffffffff80217949:	00 00 00 
ffffffff8021794c:	c7 83 72 0a 00 00 08 	movl   $0x8e000008,0xa72(%rbx)
ffffffff80217953:	00 00 8e 
ffffffff80217956:	c7 83 7c 0a 00 00 00 	movl   $0x0,0xa7c(%rbx)
ffffffff8021795d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80217960:	c7 83 82 0a 00 00 08 	movl   $0x8e000008,0xa82(%rbx)
ffffffff80217967:	00 00 8e 
ffffffff8021796a:	c7 83 8c 0a 00 00 00 	movl   $0x0,0xa8c(%rbx)
ffffffff80217971:	00 00 00 
ffffffff80217974:	66 89 93 90 0a 00 00 	mov    %dx,0xa90(%rbx)
ffffffff8021797b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021797f:	89 93 98 0a 00 00    	mov    %edx,0xa98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80217985:	48 c7 c2 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rdx
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8021798c:	66 89 8b 96 0a 00 00 	mov    %cx,0xa96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80217993:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217996:	66 89 93 a0 0a 00 00 	mov    %dx,0xaa0(%rbx)
ffffffff8021799d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802179a1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802179a5:	89 93 a8 0a 00 00    	mov    %edx,0xaa8(%rbx)
ffffffff802179ab:	48 c7 c2 da c0 20 80 	mov    $0xffffffff8020c0da,%rdx
ffffffff802179b2:	66 89 8b a6 0a 00 00 	mov    %cx,0xaa6(%rbx)
ffffffff802179b9:	48 89 d1             	mov    %rdx,%rcx
ffffffff802179bc:	66 89 93 b0 0a 00 00 	mov    %dx,0xab0(%rbx)
ffffffff802179c3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802179c7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802179cb:	89 93 b8 0a 00 00    	mov    %edx,0xab8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff802179d1:	48 c7 c2 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rdx
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff802179d8:	66 89 8b b6 0a 00 00 	mov    %cx,0xab6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff802179df:	48 89 d1             	mov    %rdx,%rcx
ffffffff802179e2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802179e6:	66 89 93 c0 0a 00 00 	mov    %dx,0xac0(%rbx)
ffffffff802179ed:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802179f1:	89 93 c8 0a 00 00    	mov    %edx,0xac8(%rbx)
ffffffff802179f7:	48 c7 c2 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rdx
ffffffff802179fe:	66 89 8b c6 0a 00 00 	mov    %cx,0xac6(%rbx)
ffffffff80217a05:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a08:	66 89 93 d0 0a 00 00 	mov    %dx,0xad0(%rbx)
ffffffff80217a0f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a13:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217a17:	89 93 d8 0a 00 00    	mov    %edx,0xad8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80217a1d:	48 c7 c2 07 c1 20 80 	mov    $0xffffffff8020c107,%rdx
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80217a24:	66 89 8b d6 0a 00 00 	mov    %cx,0xad6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80217a2b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a2e:	66 89 93 e0 0a 00 00 	mov    %dx,0xae0(%rbx)
ffffffff80217a35:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a39:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217a3d:	89 93 e8 0a 00 00    	mov    %edx,0xae8(%rbx)
ffffffff80217a43:	48 c7 c2 16 c1 20 80 	mov    $0xffffffff8020c116,%rdx
ffffffff80217a4a:	66 89 8b e6 0a 00 00 	mov    %cx,0xae6(%rbx)
ffffffff80217a51:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a54:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217a58:	66 89 93 f0 0a 00 00 	mov    %dx,0xaf0(%rbx)
ffffffff80217a5f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a63:	66 89 8b f6 0a 00 00 	mov    %cx,0xaf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80217a6a:	c7 83 92 0a 00 00 08 	movl   $0x8e000008,0xa92(%rbx)
ffffffff80217a71:	00 00 8e 
ffffffff80217a74:	c7 83 9c 0a 00 00 00 	movl   $0x0,0xa9c(%rbx)
ffffffff80217a7b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80217a7e:	c7 83 a2 0a 00 00 08 	movl   $0x8e000008,0xaa2(%rbx)
ffffffff80217a85:	00 00 8e 
ffffffff80217a88:	c7 83 ac 0a 00 00 00 	movl   $0x0,0xaac(%rbx)
ffffffff80217a8f:	00 00 00 
ffffffff80217a92:	c7 83 b2 0a 00 00 08 	movl   $0x8e000008,0xab2(%rbx)
ffffffff80217a99:	00 00 8e 
ffffffff80217a9c:	c7 83 bc 0a 00 00 00 	movl   $0x0,0xabc(%rbx)
ffffffff80217aa3:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80217aa6:	c7 83 c2 0a 00 00 08 	movl   $0x8e000008,0xac2(%rbx)
ffffffff80217aad:	00 00 8e 
ffffffff80217ab0:	c7 83 cc 0a 00 00 00 	movl   $0x0,0xacc(%rbx)
ffffffff80217ab7:	00 00 00 
ffffffff80217aba:	c7 83 d2 0a 00 00 08 	movl   $0x8e000008,0xad2(%rbx)
ffffffff80217ac1:	00 00 8e 
ffffffff80217ac4:	c7 83 dc 0a 00 00 00 	movl   $0x0,0xadc(%rbx)
ffffffff80217acb:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80217ace:	c7 83 e2 0a 00 00 08 	movl   $0x8e000008,0xae2(%rbx)
ffffffff80217ad5:	00 00 8e 
ffffffff80217ad8:	c7 83 ec 0a 00 00 00 	movl   $0x0,0xaec(%rbx)
ffffffff80217adf:	00 00 00 
ffffffff80217ae2:	c7 83 f2 0a 00 00 08 	movl   $0x8e000008,0xaf2(%rbx)
ffffffff80217ae9:	00 00 8e 
ffffffff80217aec:	89 93 f8 0a 00 00    	mov    %edx,0xaf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80217af2:	48 c7 c2 25 c1 20 80 	mov    $0xffffffff8020c125,%rdx
ffffffff80217af9:	66 89 93 00 0b 00 00 	mov    %dx,0xb00(%rbx)
ffffffff80217b00:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217b03:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217b07:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217b0b:	89 93 08 0b 00 00    	mov    %edx,0xb08(%rbx)
ffffffff80217b11:	48 c7 c2 34 c1 20 80 	mov    $0xffffffff8020c134,%rdx
ffffffff80217b18:	66 89 8b 06 0b 00 00 	mov    %cx,0xb06(%rbx)
ffffffff80217b1f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217b22:	66 89 93 10 0b 00 00 	mov    %dx,0xb10(%rbx)
ffffffff80217b29:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217b2d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217b31:	89 93 18 0b 00 00    	mov    %edx,0xb18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff80217b37:	48 c7 c2 43 c1 20 80 	mov    $0xffffffff8020c143,%rdx
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80217b3e:	66 89 8b 16 0b 00 00 	mov    %cx,0xb16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff80217b45:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217b48:	66 89 93 20 0b 00 00 	mov    %dx,0xb20(%rbx)
ffffffff80217b4f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217b53:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217b57:	89 93 28 0b 00 00    	mov    %edx,0xb28(%rbx)
ffffffff80217b5d:	48 c7 c2 52 c1 20 80 	mov    $0xffffffff8020c152,%rdx
ffffffff80217b64:	66 89 8b 26 0b 00 00 	mov    %cx,0xb26(%rbx)
ffffffff80217b6b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217b6e:	66 89 93 30 0b 00 00 	mov    %dx,0xb30(%rbx)
ffffffff80217b75:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217b79:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217b7d:	89 93 38 0b 00 00    	mov    %edx,0xb38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80217b83:	48 c7 c2 61 c1 20 80 	mov    $0xffffffff8020c161,%rdx
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff80217b8a:	66 89 8b 36 0b 00 00 	mov    %cx,0xb36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80217b91:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217b94:	66 89 93 40 0b 00 00 	mov    %dx,0xb40(%rbx)
ffffffff80217b9b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217b9f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217ba3:	89 93 48 0b 00 00    	mov    %edx,0xb48(%rbx)
ffffffff80217ba9:	48 c7 c2 70 c1 20 80 	mov    $0xffffffff8020c170,%rdx
ffffffff80217bb0:	66 89 8b 46 0b 00 00 	mov    %cx,0xb46(%rbx)
ffffffff80217bb7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217bba:	66 89 93 50 0b 00 00 	mov    %dx,0xb50(%rbx)
ffffffff80217bc1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217bc5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217bc9:	89 93 58 0b 00 00    	mov    %edx,0xb58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217bcf:	48 c7 c2 7f c1 20 80 	mov    $0xffffffff8020c17f,%rdx
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80217bd6:	66 89 8b 56 0b 00 00 	mov    %cx,0xb56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217bdd:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217be0:	66 89 93 60 0b 00 00 	mov    %dx,0xb60(%rbx)
ffffffff80217be7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217beb:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80217bef:	c7 83 fc 0a 00 00 00 	movl   $0x0,0xafc(%rbx)
ffffffff80217bf6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80217bf9:	c7 83 02 0b 00 00 08 	movl   $0x8e000008,0xb02(%rbx)
ffffffff80217c00:	00 00 8e 
ffffffff80217c03:	c7 83 0c 0b 00 00 00 	movl   $0x0,0xb0c(%rbx)
ffffffff80217c0a:	00 00 00 
ffffffff80217c0d:	c7 83 12 0b 00 00 08 	movl   $0x8e000008,0xb12(%rbx)
ffffffff80217c14:	00 00 8e 
ffffffff80217c17:	c7 83 1c 0b 00 00 00 	movl   $0x0,0xb1c(%rbx)
ffffffff80217c1e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff80217c21:	c7 83 22 0b 00 00 08 	movl   $0x8e000008,0xb22(%rbx)
ffffffff80217c28:	00 00 8e 
ffffffff80217c2b:	c7 83 2c 0b 00 00 00 	movl   $0x0,0xb2c(%rbx)
ffffffff80217c32:	00 00 00 
ffffffff80217c35:	c7 83 32 0b 00 00 08 	movl   $0x8e000008,0xb32(%rbx)
ffffffff80217c3c:	00 00 8e 
ffffffff80217c3f:	c7 83 3c 0b 00 00 00 	movl   $0x0,0xb3c(%rbx)
ffffffff80217c46:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80217c49:	c7 83 42 0b 00 00 08 	movl   $0x8e000008,0xb42(%rbx)
ffffffff80217c50:	00 00 8e 
ffffffff80217c53:	c7 83 4c 0b 00 00 00 	movl   $0x0,0xb4c(%rbx)
ffffffff80217c5a:	00 00 00 
ffffffff80217c5d:	c7 83 52 0b 00 00 08 	movl   $0x8e000008,0xb52(%rbx)
ffffffff80217c64:	00 00 8e 
ffffffff80217c67:	c7 83 5c 0b 00 00 00 	movl   $0x0,0xb5c(%rbx)
ffffffff80217c6e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217c71:	c7 83 62 0b 00 00 08 	movl   $0x8e000008,0xb62(%rbx)
ffffffff80217c78:	00 00 8e 
ffffffff80217c7b:	89 93 68 0b 00 00    	mov    %edx,0xb68(%rbx)
ffffffff80217c81:	48 c7 c2 8e c1 20 80 	mov    $0xffffffff8020c18e,%rdx
ffffffff80217c88:	66 89 8b 66 0b 00 00 	mov    %cx,0xb66(%rbx)
ffffffff80217c8f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217c92:	66 89 93 70 0b 00 00 	mov    %dx,0xb70(%rbx)
ffffffff80217c99:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217c9d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217ca1:	89 93 78 0b 00 00    	mov    %edx,0xb78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217ca7:	48 c7 c2 9d c1 20 80 	mov    $0xffffffff8020c19d,%rdx
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217cae:	66 89 8b 76 0b 00 00 	mov    %cx,0xb76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217cb5:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217cb8:	66 89 93 80 0b 00 00 	mov    %dx,0xb80(%rbx)
ffffffff80217cbf:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217cc3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217cc7:	89 93 88 0b 00 00    	mov    %edx,0xb88(%rbx)
ffffffff80217ccd:	48 c7 c2 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rdx
ffffffff80217cd4:	66 89 8b 86 0b 00 00 	mov    %cx,0xb86(%rbx)
ffffffff80217cdb:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217cde:	66 89 93 90 0b 00 00 	mov    %dx,0xb90(%rbx)
ffffffff80217ce5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217ce9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217ced:	89 93 98 0b 00 00    	mov    %edx,0xb98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217cf3:	48 c7 c2 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rdx
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217cfa:	66 89 8b 96 0b 00 00 	mov    %cx,0xb96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217d01:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217d04:	66 89 93 a0 0b 00 00 	mov    %dx,0xba0(%rbx)
ffffffff80217d0b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d0f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217d13:	89 93 a8 0b 00 00    	mov    %edx,0xba8(%rbx)
ffffffff80217d19:	48 c7 c2 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rdx
ffffffff80217d20:	66 89 8b a6 0b 00 00 	mov    %cx,0xba6(%rbx)
ffffffff80217d27:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217d2a:	66 89 93 b0 0b 00 00 	mov    %dx,0xbb0(%rbx)
ffffffff80217d31:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d35:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217d39:	89 93 b8 0b 00 00    	mov    %edx,0xbb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217d3f:	48 c7 c2 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rdx
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217d46:	66 89 8b b6 0b 00 00 	mov    %cx,0xbb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217d4d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217d50:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217d54:	66 89 93 c0 0b 00 00 	mov    %dx,0xbc0(%rbx)
ffffffff80217d5b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d5f:	89 93 c8 0b 00 00    	mov    %edx,0xbc8(%rbx)
ffffffff80217d65:	48 c7 c2 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rdx
ffffffff80217d6c:	66 89 8b c6 0b 00 00 	mov    %cx,0xbc6(%rbx)
ffffffff80217d73:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217d76:	c7 83 6c 0b 00 00 00 	movl   $0x0,0xb6c(%rbx)
ffffffff80217d7d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217d80:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217d84:	c7 83 72 0b 00 00 08 	movl   $0x8e000008,0xb72(%rbx)
ffffffff80217d8b:	00 00 8e 
ffffffff80217d8e:	c7 83 7c 0b 00 00 00 	movl   $0x0,0xb7c(%rbx)
ffffffff80217d95:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217d98:	c7 83 82 0b 00 00 08 	movl   $0x8e000008,0xb82(%rbx)
ffffffff80217d9f:	00 00 8e 
ffffffff80217da2:	c7 83 8c 0b 00 00 00 	movl   $0x0,0xb8c(%rbx)
ffffffff80217da9:	00 00 00 
ffffffff80217dac:	c7 83 92 0b 00 00 08 	movl   $0x8e000008,0xb92(%rbx)
ffffffff80217db3:	00 00 8e 
ffffffff80217db6:	c7 83 9c 0b 00 00 00 	movl   $0x0,0xb9c(%rbx)
ffffffff80217dbd:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217dc0:	c7 83 a2 0b 00 00 08 	movl   $0x8e000008,0xba2(%rbx)
ffffffff80217dc7:	00 00 8e 
ffffffff80217dca:	c7 83 ac 0b 00 00 00 	movl   $0x0,0xbac(%rbx)
ffffffff80217dd1:	00 00 00 
ffffffff80217dd4:	c7 83 b2 0b 00 00 08 	movl   $0x8e000008,0xbb2(%rbx)
ffffffff80217ddb:	00 00 8e 
ffffffff80217dde:	c7 83 bc 0b 00 00 00 	movl   $0x0,0xbbc(%rbx)
ffffffff80217de5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217de8:	c7 83 c2 0b 00 00 08 	movl   $0x8e000008,0xbc2(%rbx)
ffffffff80217def:	00 00 8e 
ffffffff80217df2:	c7 83 cc 0b 00 00 00 	movl   $0x0,0xbcc(%rbx)
ffffffff80217df9:	00 00 00 
ffffffff80217dfc:	66 89 93 d0 0b 00 00 	mov    %dx,0xbd0(%rbx)
ffffffff80217e03:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e07:	89 93 d8 0b 00 00    	mov    %edx,0xbd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80217e0d:	48 c7 c2 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rdx
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217e14:	66 89 8b d6 0b 00 00 	mov    %cx,0xbd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80217e1b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217e1e:	66 89 93 e0 0b 00 00 	mov    %dx,0xbe0(%rbx)
ffffffff80217e25:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e29:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217e2d:	89 93 e8 0b 00 00    	mov    %edx,0xbe8(%rbx)
ffffffff80217e33:	48 c7 c2 06 c2 20 80 	mov    $0xffffffff8020c206,%rdx
ffffffff80217e3a:	66 89 8b e6 0b 00 00 	mov    %cx,0xbe6(%rbx)
ffffffff80217e41:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217e44:	66 89 93 f0 0b 00 00 	mov    %dx,0xbf0(%rbx)
ffffffff80217e4b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e4f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217e53:	89 93 f8 0b 00 00    	mov    %edx,0xbf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217e59:	48 c7 c2 15 c2 20 80 	mov    $0xffffffff8020c215,%rdx
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80217e60:	66 89 8b f6 0b 00 00 	mov    %cx,0xbf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217e67:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217e6a:	66 89 93 00 0c 00 00 	mov    %dx,0xc00(%rbx)
ffffffff80217e71:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e75:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217e79:	89 93 08 0c 00 00    	mov    %edx,0xc08(%rbx)
ffffffff80217e7f:	48 c7 c2 24 c2 20 80 	mov    $0xffffffff8020c224,%rdx
ffffffff80217e86:	66 89 8b 06 0c 00 00 	mov    %cx,0xc06(%rbx)
ffffffff80217e8d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217e90:	66 89 93 10 0c 00 00 	mov    %dx,0xc10(%rbx)
ffffffff80217e97:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e9b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217e9f:	89 93 18 0c 00 00    	mov    %edx,0xc18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217ea5:	48 c7 c2 33 c2 20 80 	mov    $0xffffffff8020c233,%rdx
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217eac:	66 89 8b 16 0c 00 00 	mov    %cx,0xc16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217eb3:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217eb6:	66 89 93 20 0c 00 00 	mov    %dx,0xc20(%rbx)
ffffffff80217ebd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217ec1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217ec5:	89 93 28 0c 00 00    	mov    %edx,0xc28(%rbx)
ffffffff80217ecb:	48 c7 c2 42 c2 20 80 	mov    $0xffffffff8020c242,%rdx
ffffffff80217ed2:	66 89 8b 26 0c 00 00 	mov    %cx,0xc26(%rbx)
ffffffff80217ed9:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217edc:	66 89 93 30 0c 00 00 	mov    %dx,0xc30(%rbx)
ffffffff80217ee3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217ee7:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217eeb:	66 89 83 14 0c 00 00 	mov    %ax,0xc14(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217ef2:	c7 83 d2 0b 00 00 08 	movl   $0x8e000008,0xbd2(%rbx)
ffffffff80217ef9:	00 00 8e 
ffffffff80217efc:	c7 83 dc 0b 00 00 00 	movl   $0x0,0xbdc(%rbx)
ffffffff80217f03:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80217f06:	c7 83 e2 0b 00 00 08 	movl   $0x8e000008,0xbe2(%rbx)
ffffffff80217f0d:	00 00 8e 
ffffffff80217f10:	c7 83 ec 0b 00 00 00 	movl   $0x0,0xbec(%rbx)
ffffffff80217f17:	00 00 00 
ffffffff80217f1a:	c7 83 f2 0b 00 00 08 	movl   $0x8e000008,0xbf2(%rbx)
ffffffff80217f21:	00 00 8e 
ffffffff80217f24:	c7 83 fc 0b 00 00 00 	movl   $0x0,0xbfc(%rbx)
ffffffff80217f2b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217f2e:	c7 83 02 0c 00 00 08 	movl   $0x8e000008,0xc02(%rbx)
ffffffff80217f35:	00 00 8e 
ffffffff80217f38:	c7 83 0c 0c 00 00 00 	movl   $0x0,0xc0c(%rbx)
ffffffff80217f3f:	00 00 00 
ffffffff80217f42:	66 44 89 93 12 0c 00 	mov    %r10w,0xc12(%rbx)
ffffffff80217f49:	00 
ffffffff80217f4a:	c7 83 1c 0c 00 00 00 	movl   $0x0,0xc1c(%rbx)
ffffffff80217f51:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217f54:	c7 83 22 0c 00 00 08 	movl   $0x8e000008,0xc22(%rbx)
ffffffff80217f5b:	00 00 8e 
ffffffff80217f5e:	c7 83 2c 0c 00 00 00 	movl   $0x0,0xc2c(%rbx)
ffffffff80217f65:	00 00 00 
ffffffff80217f68:	c7 83 32 0c 00 00 08 	movl   $0x8e000008,0xc32(%rbx)
ffffffff80217f6f:	00 00 8e 
ffffffff80217f72:	89 93 38 0c 00 00    	mov    %edx,0xc38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80217f78:	48 c7 c2 51 c2 20 80 	mov    $0xffffffff8020c251,%rdx
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217f7f:	66 89 8b 36 0c 00 00 	mov    %cx,0xc36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80217f86:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217f89:	66 89 93 40 0c 00 00 	mov    %dx,0xc40(%rbx)
ffffffff80217f90:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217f94:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217f98:	89 93 48 0c 00 00    	mov    %edx,0xc48(%rbx)
ffffffff80217f9e:	48 c7 c2 60 c2 20 80 	mov    $0xffffffff8020c260,%rdx
ffffffff80217fa5:	66 89 8b 46 0c 00 00 	mov    %cx,0xc46(%rbx)
ffffffff80217fac:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217faf:	66 89 93 50 0c 00 00 	mov    %dx,0xc50(%rbx)
ffffffff80217fb6:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217fba:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217fbe:	89 93 58 0c 00 00    	mov    %edx,0xc58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80217fc4:	48 c7 c2 6f c2 20 80 	mov    $0xffffffff8020c26f,%rdx
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80217fcb:	66 89 8b 56 0c 00 00 	mov    %cx,0xc56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80217fd2:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217fd5:	66 89 93 60 0c 00 00 	mov    %dx,0xc60(%rbx)
ffffffff80217fdc:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217fe0:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217fe4:	89 93 68 0c 00 00    	mov    %edx,0xc68(%rbx)
ffffffff80217fea:	48 c7 c2 7e c2 20 80 	mov    $0xffffffff8020c27e,%rdx
ffffffff80217ff1:	66 89 8b 66 0c 00 00 	mov    %cx,0xc66(%rbx)
ffffffff80217ff8:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217ffb:	66 89 93 70 0c 00 00 	mov    %dx,0xc70(%rbx)
ffffffff80218002:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218006:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021800a:	89 93 78 0c 00 00    	mov    %edx,0xc78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80218010:	48 c7 c2 8d c2 20 80 	mov    $0xffffffff8020c28d,%rdx
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80218017:	66 89 8b 76 0c 00 00 	mov    %cx,0xc76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff8021801e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218021:	66 89 93 80 0c 00 00 	mov    %dx,0xc80(%rbx)
ffffffff80218028:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021802c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218030:	89 93 88 0c 00 00    	mov    %edx,0xc88(%rbx)
ffffffff80218036:	48 c7 c2 9c c2 20 80 	mov    $0xffffffff8020c29c,%rdx
ffffffff8021803d:	66 89 8b 86 0c 00 00 	mov    %cx,0xc86(%rbx)
ffffffff80218044:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218047:	66 89 93 90 0c 00 00 	mov    %dx,0xc90(%rbx)
ffffffff8021804e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218052:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218056:	89 93 98 0c 00 00    	mov    %edx,0xc98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff8021805c:	48 c7 c2 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rdx
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80218063:	66 89 8b 96 0c 00 00 	mov    %cx,0xc96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff8021806a:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff8021806d:	c7 83 3c 0c 00 00 00 	movl   $0x0,0xc3c(%rbx)
ffffffff80218074:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80218077:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff8021807b:	c7 83 42 0c 00 00 08 	movl   $0x8e000008,0xc42(%rbx)
ffffffff80218082:	00 00 8e 
ffffffff80218085:	c7 83 4c 0c 00 00 00 	movl   $0x0,0xc4c(%rbx)
ffffffff8021808c:	00 00 00 
ffffffff8021808f:	c7 83 52 0c 00 00 08 	movl   $0x8e000008,0xc52(%rbx)
ffffffff80218096:	00 00 8e 
ffffffff80218099:	c7 83 5c 0c 00 00 00 	movl   $0x0,0xc5c(%rbx)
ffffffff802180a0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff802180a3:	c7 83 62 0c 00 00 08 	movl   $0x8e000008,0xc62(%rbx)
ffffffff802180aa:	00 00 8e 
ffffffff802180ad:	c7 83 6c 0c 00 00 00 	movl   $0x0,0xc6c(%rbx)
ffffffff802180b4:	00 00 00 
ffffffff802180b7:	c7 83 72 0c 00 00 08 	movl   $0x8e000008,0xc72(%rbx)
ffffffff802180be:	00 00 8e 
ffffffff802180c1:	c7 83 7c 0c 00 00 00 	movl   $0x0,0xc7c(%rbx)
ffffffff802180c8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff802180cb:	c7 83 82 0c 00 00 08 	movl   $0x8e000008,0xc82(%rbx)
ffffffff802180d2:	00 00 8e 
ffffffff802180d5:	c7 83 8c 0c 00 00 00 	movl   $0x0,0xc8c(%rbx)
ffffffff802180dc:	00 00 00 
ffffffff802180df:	c7 83 92 0c 00 00 08 	movl   $0x8e000008,0xc92(%rbx)
ffffffff802180e6:	00 00 8e 
ffffffff802180e9:	c7 83 9c 0c 00 00 00 	movl   $0x0,0xc9c(%rbx)
ffffffff802180f0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff802180f3:	66 89 93 a0 0c 00 00 	mov    %dx,0xca0(%rbx)
ffffffff802180fa:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802180fe:	89 93 a8 0c 00 00    	mov    %edx,0xca8(%rbx)
ffffffff80218104:	48 c7 c2 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rdx
ffffffff8021810b:	66 89 8b a6 0c 00 00 	mov    %cx,0xca6(%rbx)
ffffffff80218112:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218115:	66 89 93 b0 0c 00 00 	mov    %dx,0xcb0(%rbx)
ffffffff8021811c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218120:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218124:	89 93 b8 0c 00 00    	mov    %edx,0xcb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff8021812a:	48 c7 c2 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rdx
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80218131:	66 89 8b b6 0c 00 00 	mov    %cx,0xcb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80218138:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021813b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021813f:	66 89 93 c0 0c 00 00 	mov    %dx,0xcc0(%rbx)
ffffffff80218146:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021814a:	89 93 c8 0c 00 00    	mov    %edx,0xcc8(%rbx)
ffffffff80218150:	48 c7 c2 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rdx
ffffffff80218157:	66 89 8b c6 0c 00 00 	mov    %cx,0xcc6(%rbx)
ffffffff8021815e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218161:	66 89 93 d0 0c 00 00 	mov    %dx,0xcd0(%rbx)
ffffffff80218168:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021816c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218170:	89 93 d8 0c 00 00    	mov    %edx,0xcd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80218176:	48 c7 c2 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rdx
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff8021817d:	66 89 8b d6 0c 00 00 	mov    %cx,0xcd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80218184:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218187:	66 89 93 e0 0c 00 00 	mov    %dx,0xce0(%rbx)
ffffffff8021818e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218192:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218196:	89 93 e8 0c 00 00    	mov    %edx,0xce8(%rbx)
ffffffff8021819c:	48 c7 c2 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rdx
ffffffff802181a3:	66 89 8b e6 0c 00 00 	mov    %cx,0xce6(%rbx)
ffffffff802181aa:	48 89 d1             	mov    %rdx,%rcx
ffffffff802181ad:	66 89 93 f0 0c 00 00 	mov    %dx,0xcf0(%rbx)
ffffffff802181b4:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802181b8:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802181bc:	89 93 f8 0c 00 00    	mov    %edx,0xcf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802181c2:	48 c7 c2 05 c3 20 80 	mov    $0xffffffff8020c305,%rdx
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802181c9:	66 89 8b f6 0c 00 00 	mov    %cx,0xcf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802181d0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802181d3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802181d7:	66 89 93 00 0d 00 00 	mov    %dx,0xd00(%rbx)
ffffffff802181de:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff802181e2:	c7 83 a2 0c 00 00 08 	movl   $0x8e000008,0xca2(%rbx)
ffffffff802181e9:	00 00 8e 
ffffffff802181ec:	c7 83 ac 0c 00 00 00 	movl   $0x0,0xcac(%rbx)
ffffffff802181f3:	00 00 00 
ffffffff802181f6:	c7 83 b2 0c 00 00 08 	movl   $0x8e000008,0xcb2(%rbx)
ffffffff802181fd:	00 00 8e 
ffffffff80218200:	c7 83 bc 0c 00 00 00 	movl   $0x0,0xcbc(%rbx)
ffffffff80218207:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff8021820a:	c7 83 c2 0c 00 00 08 	movl   $0x8e000008,0xcc2(%rbx)
ffffffff80218211:	00 00 8e 
ffffffff80218214:	c7 83 cc 0c 00 00 00 	movl   $0x0,0xccc(%rbx)
ffffffff8021821b:	00 00 00 
ffffffff8021821e:	c7 83 d2 0c 00 00 08 	movl   $0x8e000008,0xcd2(%rbx)
ffffffff80218225:	00 00 8e 
ffffffff80218228:	c7 83 dc 0c 00 00 00 	movl   $0x0,0xcdc(%rbx)
ffffffff8021822f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80218232:	c7 83 e2 0c 00 00 08 	movl   $0x8e000008,0xce2(%rbx)
ffffffff80218239:	00 00 8e 
ffffffff8021823c:	c7 83 ec 0c 00 00 00 	movl   $0x0,0xcec(%rbx)
ffffffff80218243:	00 00 00 
ffffffff80218246:	c7 83 f2 0c 00 00 08 	movl   $0x8e000008,0xcf2(%rbx)
ffffffff8021824d:	00 00 8e 
ffffffff80218250:	c7 83 fc 0c 00 00 00 	movl   $0x0,0xcfc(%rbx)
ffffffff80218257:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff8021825a:	c7 83 02 0d 00 00 08 	movl   $0x8e000008,0xd02(%rbx)
ffffffff80218261:	00 00 8e 
ffffffff80218264:	66 89 8b 06 0d 00 00 	mov    %cx,0xd06(%rbx)
ffffffff8021826b:	89 93 08 0d 00 00    	mov    %edx,0xd08(%rbx)
ffffffff80218271:	48 c7 c2 14 c3 20 80 	mov    $0xffffffff8020c314,%rdx
ffffffff80218278:	66 89 93 10 0d 00 00 	mov    %dx,0xd10(%rbx)
ffffffff8021827f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218282:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218286:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021828a:	89 93 18 0d 00 00    	mov    %edx,0xd18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80218290:	48 c7 c2 23 c3 20 80 	mov    $0xffffffff8020c323,%rdx
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80218297:	66 89 8b 16 0d 00 00 	mov    %cx,0xd16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff8021829e:	48 89 d1             	mov    %rdx,%rcx
ffffffff802182a1:	66 89 93 20 0d 00 00 	mov    %dx,0xd20(%rbx)
ffffffff802182a8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802182ac:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802182b0:	89 93 28 0d 00 00    	mov    %edx,0xd28(%rbx)
ffffffff802182b6:	48 c7 c2 32 c3 20 80 	mov    $0xffffffff8020c332,%rdx
ffffffff802182bd:	66 89 8b 26 0d 00 00 	mov    %cx,0xd26(%rbx)
ffffffff802182c4:	48 89 d1             	mov    %rdx,%rcx
ffffffff802182c7:	66 89 93 30 0d 00 00 	mov    %dx,0xd30(%rbx)
ffffffff802182ce:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802182d2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802182d6:	89 93 38 0d 00 00    	mov    %edx,0xd38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff802182dc:	48 c7 c2 41 c3 20 80 	mov    $0xffffffff8020c341,%rdx
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff802182e3:	66 89 8b 36 0d 00 00 	mov    %cx,0xd36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff802182ea:	48 89 d1             	mov    %rdx,%rcx
ffffffff802182ed:	66 89 93 40 0d 00 00 	mov    %dx,0xd40(%rbx)
ffffffff802182f4:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802182f8:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802182fc:	89 93 48 0d 00 00    	mov    %edx,0xd48(%rbx)
ffffffff80218302:	48 c7 c2 50 c3 20 80 	mov    $0xffffffff8020c350,%rdx
ffffffff80218309:	66 89 8b 46 0d 00 00 	mov    %cx,0xd46(%rbx)
ffffffff80218310:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218313:	66 89 93 50 0d 00 00 	mov    %dx,0xd50(%rbx)
ffffffff8021831a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021831e:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218322:	89 93 58 0d 00 00    	mov    %edx,0xd58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80218328:	48 c7 c2 5f c3 20 80 	mov    $0xffffffff8020c35f,%rdx
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff8021832f:	66 89 8b 56 0d 00 00 	mov    %cx,0xd56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80218336:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218339:	66 89 93 60 0d 00 00 	mov    %dx,0xd60(%rbx)
ffffffff80218340:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218344:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218348:	89 93 68 0d 00 00    	mov    %edx,0xd68(%rbx)
ffffffff8021834e:	48 c7 c2 6e c3 20 80 	mov    $0xffffffff8020c36e,%rdx
ffffffff80218355:	66 89 8b 66 0d 00 00 	mov    %cx,0xd66(%rbx)
ffffffff8021835c:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff8021835f:	c7 83 0c 0d 00 00 00 	movl   $0x0,0xd0c(%rbx)
ffffffff80218366:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80218369:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff8021836d:	c7 83 12 0d 00 00 08 	movl   $0x8e000008,0xd12(%rbx)
ffffffff80218374:	00 00 8e 
ffffffff80218377:	c7 83 1c 0d 00 00 00 	movl   $0x0,0xd1c(%rbx)
ffffffff8021837e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80218381:	c7 83 22 0d 00 00 08 	movl   $0x8e000008,0xd22(%rbx)
ffffffff80218388:	00 00 8e 
ffffffff8021838b:	c7 83 2c 0d 00 00 00 	movl   $0x0,0xd2c(%rbx)
ffffffff80218392:	00 00 00 
ffffffff80218395:	c7 83 32 0d 00 00 08 	movl   $0x8e000008,0xd32(%rbx)
ffffffff8021839c:	00 00 8e 
ffffffff8021839f:	c7 83 3c 0d 00 00 00 	movl   $0x0,0xd3c(%rbx)
ffffffff802183a6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff802183a9:	c7 83 42 0d 00 00 08 	movl   $0x8e000008,0xd42(%rbx)
ffffffff802183b0:	00 00 8e 
ffffffff802183b3:	c7 83 4c 0d 00 00 00 	movl   $0x0,0xd4c(%rbx)
ffffffff802183ba:	00 00 00 
ffffffff802183bd:	c7 83 52 0d 00 00 08 	movl   $0x8e000008,0xd52(%rbx)
ffffffff802183c4:	00 00 8e 
ffffffff802183c7:	c7 83 5c 0d 00 00 00 	movl   $0x0,0xd5c(%rbx)
ffffffff802183ce:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802183d1:	c7 83 62 0d 00 00 08 	movl   $0x8e000008,0xd62(%rbx)
ffffffff802183d8:	00 00 8e 
ffffffff802183db:	c7 83 6c 0d 00 00 00 	movl   $0x0,0xd6c(%rbx)
ffffffff802183e2:	00 00 00 
ffffffff802183e5:	66 89 93 70 0d 00 00 	mov    %dx,0xd70(%rbx)
ffffffff802183ec:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802183f0:	89 93 78 0d 00 00    	mov    %edx,0xd78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff802183f6:	48 c7 c2 7d c3 20 80 	mov    $0xffffffff8020c37d,%rdx
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802183fd:	66 89 8b 76 0d 00 00 	mov    %cx,0xd76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80218404:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218407:	66 89 93 80 0d 00 00 	mov    %dx,0xd80(%rbx)
ffffffff8021840e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218412:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218416:	89 93 88 0d 00 00    	mov    %edx,0xd88(%rbx)
ffffffff8021841c:	48 c7 c2 8c c3 20 80 	mov    $0xffffffff8020c38c,%rdx
ffffffff80218423:	66 89 8b 86 0d 00 00 	mov    %cx,0xd86(%rbx)
ffffffff8021842a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021842d:	66 89 93 90 0d 00 00 	mov    %dx,0xd90(%rbx)
ffffffff80218434:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218438:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021843c:	89 93 98 0d 00 00    	mov    %edx,0xd98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218442:	48 c7 c2 9b c3 20 80 	mov    $0xffffffff8020c39b,%rdx
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80218449:	66 89 8b 96 0d 00 00 	mov    %cx,0xd96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218450:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218453:	66 89 93 a0 0d 00 00 	mov    %dx,0xda0(%rbx)
ffffffff8021845a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021845e:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218462:	89 93 a8 0d 00 00    	mov    %edx,0xda8(%rbx)
ffffffff80218468:	48 c7 c2 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rdx
ffffffff8021846f:	66 89 8b a6 0d 00 00 	mov    %cx,0xda6(%rbx)
ffffffff80218476:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218479:	66 89 93 b0 0d 00 00 	mov    %dx,0xdb0(%rbx)
ffffffff80218480:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218484:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218488:	89 93 b8 0d 00 00    	mov    %edx,0xdb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff8021848e:	48 c7 c2 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rdx
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218495:	66 89 8b b6 0d 00 00 	mov    %cx,0xdb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff8021849c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021849f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802184a3:	66 89 93 c0 0d 00 00 	mov    %dx,0xdc0(%rbx)
ffffffff802184aa:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802184ae:	89 93 c8 0d 00 00    	mov    %edx,0xdc8(%rbx)
ffffffff802184b4:	48 c7 c2 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rdx
ffffffff802184bb:	66 89 8b c6 0d 00 00 	mov    %cx,0xdc6(%rbx)
ffffffff802184c2:	48 89 d1             	mov    %rdx,%rcx
ffffffff802184c5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802184c9:	66 89 93 d0 0d 00 00 	mov    %dx,0xdd0(%rbx)
ffffffff802184d0:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802184d4:	66 89 8b d6 0d 00 00 	mov    %cx,0xdd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802184db:	c7 83 72 0d 00 00 08 	movl   $0x8e000008,0xd72(%rbx)
ffffffff802184e2:	00 00 8e 
ffffffff802184e5:	c7 83 7c 0d 00 00 00 	movl   $0x0,0xd7c(%rbx)
ffffffff802184ec:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff802184ef:	c7 83 82 0d 00 00 08 	movl   $0x8e000008,0xd82(%rbx)
ffffffff802184f6:	00 00 8e 
ffffffff802184f9:	c7 83 8c 0d 00 00 00 	movl   $0x0,0xd8c(%rbx)
ffffffff80218500:	00 00 00 
ffffffff80218503:	c7 83 92 0d 00 00 08 	movl   $0x8e000008,0xd92(%rbx)
ffffffff8021850a:	00 00 8e 
ffffffff8021850d:	c7 83 9c 0d 00 00 00 	movl   $0x0,0xd9c(%rbx)
ffffffff80218514:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218517:	c7 83 a2 0d 00 00 08 	movl   $0x8e000008,0xda2(%rbx)
ffffffff8021851e:	00 00 8e 
ffffffff80218521:	c7 83 ac 0d 00 00 00 	movl   $0x0,0xdac(%rbx)
ffffffff80218528:	00 00 00 
ffffffff8021852b:	c7 83 b2 0d 00 00 08 	movl   $0x8e000008,0xdb2(%rbx)
ffffffff80218532:	00 00 8e 
ffffffff80218535:	c7 83 bc 0d 00 00 00 	movl   $0x0,0xdbc(%rbx)
ffffffff8021853c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff8021853f:	c7 83 c2 0d 00 00 08 	movl   $0x8e000008,0xdc2(%rbx)
ffffffff80218546:	00 00 8e 
ffffffff80218549:	c7 83 cc 0d 00 00 00 	movl   $0x0,0xdcc(%rbx)
ffffffff80218550:	00 00 00 
ffffffff80218553:	c7 83 d2 0d 00 00 08 	movl   $0x8e000008,0xdd2(%rbx)
ffffffff8021855a:	00 00 8e 
ffffffff8021855d:	89 93 d8 0d 00 00    	mov    %edx,0xdd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80218563:	48 c7 c2 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rdx
ffffffff8021856a:	66 89 93 e0 0d 00 00 	mov    %dx,0xde0(%rbx)
ffffffff80218571:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218574:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218578:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021857c:	89 93 e8 0d 00 00    	mov    %edx,0xde8(%rbx)
ffffffff80218582:	48 c7 c2 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rdx
ffffffff80218589:	66 89 8b e6 0d 00 00 	mov    %cx,0xde6(%rbx)
ffffffff80218590:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218593:	66 89 93 f0 0d 00 00 	mov    %dx,0xdf0(%rbx)
ffffffff8021859a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021859e:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802185a2:	89 93 f8 0d 00 00    	mov    %edx,0xdf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff802185a8:	48 c7 c2 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rdx
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff802185af:	66 89 8b f6 0d 00 00 	mov    %cx,0xdf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff802185b6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802185b9:	66 89 93 00 0e 00 00 	mov    %dx,0xe00(%rbx)
ffffffff802185c0:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802185c4:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802185c8:	89 93 08 0e 00 00    	mov    %edx,0xe08(%rbx)
ffffffff802185ce:	48 c7 c2 04 c4 20 80 	mov    $0xffffffff8020c404,%rdx
ffffffff802185d5:	66 89 83 14 0e 00 00 	mov    %ax,0xe14(%rbx)
ffffffff802185dc:	48 89 d0             	mov    %rdx,%rax
ffffffff802185df:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802185e3:	66 89 93 10 0e 00 00 	mov    %dx,0xe10(%rbx)
ffffffff802185ea:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802185ee:	66 89 83 16 0e 00 00 	mov    %ax,0xe16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff802185f5:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff802185fc:	89 93 18 0e 00 00    	mov    %edx,0xe18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218602:	48 89 c2             	mov    %rax,%rdx
ffffffff80218605:	66 89 83 20 0e 00 00 	mov    %ax,0xe20(%rbx)
ffffffff8021860c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218610:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218614:	89 83 28 0e 00 00    	mov    %eax,0xe28(%rbx)
ffffffff8021861a:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff80218621:	66 89 93 26 0e 00 00 	mov    %dx,0xe26(%rbx)
ffffffff80218628:	48 89 c2             	mov    %rax,%rdx
ffffffff8021862b:	66 89 83 30 0e 00 00 	mov    %ax,0xe30(%rbx)
ffffffff80218632:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218636:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021863a:	89 83 38 0e 00 00    	mov    %eax,0xe38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80218640:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218647:	66 89 93 36 0e 00 00 	mov    %dx,0xe36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff8021864e:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80218651:	c7 83 dc 0d 00 00 00 	movl   $0x0,0xddc(%rbx)
ffffffff80218658:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff8021865b:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff8021865f:	c7 83 e2 0d 00 00 08 	movl   $0x8e000008,0xde2(%rbx)
ffffffff80218666:	00 00 8e 
ffffffff80218669:	c7 83 ec 0d 00 00 00 	movl   $0x0,0xdec(%rbx)
ffffffff80218670:	00 00 00 
ffffffff80218673:	c7 83 f2 0d 00 00 08 	movl   $0x8e000008,0xdf2(%rbx)
ffffffff8021867a:	00 00 8e 
ffffffff8021867d:	c7 83 fc 0d 00 00 00 	movl   $0x0,0xdfc(%rbx)
ffffffff80218684:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218687:	c7 83 02 0e 00 00 08 	movl   $0x8e000008,0xe02(%rbx)
ffffffff8021868e:	00 00 8e 
ffffffff80218691:	66 89 8b 06 0e 00 00 	mov    %cx,0xe06(%rbx)
ffffffff80218698:	c7 83 0c 0e 00 00 00 	movl   $0x0,0xe0c(%rbx)
ffffffff8021869f:	00 00 00 
ffffffff802186a2:	66 44 89 9b 12 0e 00 	mov    %r11w,0xe12(%rbx)
ffffffff802186a9:	00 
ffffffff802186aa:	c7 83 1c 0e 00 00 00 	movl   $0x0,0xe1c(%rbx)
ffffffff802186b1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff802186b4:	c7 83 22 0e 00 00 08 	movl   $0x8e000008,0xe22(%rbx)
ffffffff802186bb:	00 00 8e 
ffffffff802186be:	c7 83 2c 0e 00 00 00 	movl   $0x0,0xe2c(%rbx)
ffffffff802186c5:	00 00 00 
ffffffff802186c8:	c7 83 32 0e 00 00 08 	movl   $0x8e000008,0xe32(%rbx)
ffffffff802186cf:	00 00 8e 
ffffffff802186d2:	c7 83 3c 0e 00 00 00 	movl   $0x0,0xe3c(%rbx)
ffffffff802186d9:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802186dc:	66 89 83 40 0e 00 00 	mov    %ax,0xe40(%rbx)
ffffffff802186e3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802186e7:	89 83 48 0e 00 00    	mov    %eax,0xe48(%rbx)
ffffffff802186ed:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff802186f4:	66 89 93 46 0e 00 00 	mov    %dx,0xe46(%rbx)
ffffffff802186fb:	48 89 c2             	mov    %rax,%rdx
ffffffff802186fe:	66 89 83 50 0e 00 00 	mov    %ax,0xe50(%rbx)
ffffffff80218705:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218709:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021870d:	89 83 58 0e 00 00    	mov    %eax,0xe58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80218713:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff8021871a:	66 89 93 56 0e 00 00 	mov    %dx,0xe56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80218721:	48 89 c2             	mov    %rax,%rdx
ffffffff80218724:	66 89 83 60 0e 00 00 	mov    %ax,0xe60(%rbx)
ffffffff8021872b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021872f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218733:	89 83 68 0e 00 00    	mov    %eax,0xe68(%rbx)
ffffffff80218739:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff80218740:	66 89 93 66 0e 00 00 	mov    %dx,0xe66(%rbx)
ffffffff80218747:	48 89 c2             	mov    %rax,%rdx
ffffffff8021874a:	66 89 83 70 0e 00 00 	mov    %ax,0xe70(%rbx)
ffffffff80218751:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218755:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218759:	89 83 78 0e 00 00    	mov    %eax,0xe78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff8021875f:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80218766:	66 89 93 76 0e 00 00 	mov    %dx,0xe76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff8021876d:	48 89 c2             	mov    %rax,%rdx
ffffffff80218770:	66 89 83 80 0e 00 00 	mov    %ax,0xe80(%rbx)
ffffffff80218777:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021877b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021877f:	89 83 88 0e 00 00    	mov    %eax,0xe88(%rbx)
ffffffff80218785:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff8021878c:	66 89 93 86 0e 00 00 	mov    %dx,0xe86(%rbx)
ffffffff80218793:	48 89 c2             	mov    %rax,%rdx
ffffffff80218796:	66 89 83 90 0e 00 00 	mov    %ax,0xe90(%rbx)
ffffffff8021879d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802187a1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802187a5:	89 83 98 0e 00 00    	mov    %eax,0xe98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff802187ab:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff802187b2:	66 89 93 96 0e 00 00 	mov    %dx,0xe96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff802187b9:	48 89 c2             	mov    %rax,%rdx
ffffffff802187bc:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802187c0:	66 89 83 a0 0e 00 00 	mov    %ax,0xea0(%rbx)
ffffffff802187c7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802187cb:	66 89 93 a6 0e 00 00 	mov    %dx,0xea6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802187d2:	c7 83 42 0e 00 00 08 	movl   $0x8e000008,0xe42(%rbx)
ffffffff802187d9:	00 00 8e 
ffffffff802187dc:	c7 83 4c 0e 00 00 00 	movl   $0x0,0xe4c(%rbx)
ffffffff802187e3:	00 00 00 
ffffffff802187e6:	c7 83 52 0e 00 00 08 	movl   $0x8e000008,0xe52(%rbx)
ffffffff802187ed:	00 00 8e 
ffffffff802187f0:	c7 83 5c 0e 00 00 00 	movl   $0x0,0xe5c(%rbx)
ffffffff802187f7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802187fa:	c7 83 62 0e 00 00 08 	movl   $0x8e000008,0xe62(%rbx)
ffffffff80218801:	00 00 8e 
ffffffff80218804:	c7 83 6c 0e 00 00 00 	movl   $0x0,0xe6c(%rbx)
ffffffff8021880b:	00 00 00 
ffffffff8021880e:	c7 83 72 0e 00 00 08 	movl   $0x8e000008,0xe72(%rbx)
ffffffff80218815:	00 00 8e 
ffffffff80218818:	c7 83 7c 0e 00 00 00 	movl   $0x0,0xe7c(%rbx)
ffffffff8021881f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80218822:	c7 83 82 0e 00 00 08 	movl   $0x8e000008,0xe82(%rbx)
ffffffff80218829:	00 00 8e 
ffffffff8021882c:	c7 83 8c 0e 00 00 00 	movl   $0x0,0xe8c(%rbx)
ffffffff80218833:	00 00 00 
ffffffff80218836:	c7 83 92 0e 00 00 08 	movl   $0x8e000008,0xe92(%rbx)
ffffffff8021883d:	00 00 8e 
ffffffff80218840:	c7 83 9c 0e 00 00 00 	movl   $0x0,0xe9c(%rbx)
ffffffff80218847:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff8021884a:	c7 83 a2 0e 00 00 08 	movl   $0x8e000008,0xea2(%rbx)
ffffffff80218851:	00 00 8e 
ffffffff80218854:	89 83 a8 0e 00 00    	mov    %eax,0xea8(%rbx)
ffffffff8021885a:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff80218861:	66 89 83 b0 0e 00 00 	mov    %ax,0xeb0(%rbx)
ffffffff80218868:	48 89 c2             	mov    %rax,%rdx
ffffffff8021886b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021886f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218873:	89 83 b8 0e 00 00    	mov    %eax,0xeb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218879:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218880:	66 89 93 b6 0e 00 00 	mov    %dx,0xeb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218887:	48 89 c2             	mov    %rax,%rdx
ffffffff8021888a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021888e:	66 89 83 c0 0e 00 00 	mov    %ax,0xec0(%rbx)
ffffffff80218895:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218899:	89 83 c8 0e 00 00    	mov    %eax,0xec8(%rbx)
ffffffff8021889f:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff802188a6:	66 89 93 c6 0e 00 00 	mov    %dx,0xec6(%rbx)
ffffffff802188ad:	48 89 c2             	mov    %rax,%rdx
ffffffff802188b0:	66 89 83 d0 0e 00 00 	mov    %ax,0xed0(%rbx)
ffffffff802188b7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802188bb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802188bf:	89 83 d8 0e 00 00    	mov    %eax,0xed8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff802188c5:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff802188cc:	66 89 93 d6 0e 00 00 	mov    %dx,0xed6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff802188d3:	48 89 c2             	mov    %rax,%rdx
ffffffff802188d6:	66 89 83 e0 0e 00 00 	mov    %ax,0xee0(%rbx)
ffffffff802188dd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802188e1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802188e5:	89 83 e8 0e 00 00    	mov    %eax,0xee8(%rbx)
ffffffff802188eb:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff802188f2:	66 89 93 e6 0e 00 00 	mov    %dx,0xee6(%rbx)
ffffffff802188f9:	48 89 c2             	mov    %rax,%rdx
ffffffff802188fc:	66 89 83 f0 0e 00 00 	mov    %ax,0xef0(%rbx)
ffffffff80218903:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218907:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021890b:	89 83 f8 0e 00 00    	mov    %eax,0xef8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80218911:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80218918:	66 89 93 f6 0e 00 00 	mov    %dx,0xef6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff8021891f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218922:	66 89 83 00 0f 00 00 	mov    %ax,0xf00(%rbx)
ffffffff80218929:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021892d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218931:	89 83 08 0f 00 00    	mov    %eax,0xf08(%rbx)
ffffffff80218937:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff8021893e:	66 89 93 06 0f 00 00 	mov    %dx,0xf06(%rbx)
ffffffff80218945:	48 89 c2             	mov    %rax,%rdx
ffffffff80218948:	66 89 83 10 0f 00 00 	mov    %ax,0xf10(%rbx)
ffffffff8021894f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218953:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218957:	c7 83 ac 0e 00 00 00 	movl   $0x0,0xeac(%rbx)
ffffffff8021895e:	00 00 00 
ffffffff80218961:	c7 83 b2 0e 00 00 08 	movl   $0x8e000008,0xeb2(%rbx)
ffffffff80218968:	00 00 8e 
ffffffff8021896b:	c7 83 bc 0e 00 00 00 	movl   $0x0,0xebc(%rbx)
ffffffff80218972:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218975:	c7 83 c2 0e 00 00 08 	movl   $0x8e000008,0xec2(%rbx)
ffffffff8021897c:	00 00 8e 
ffffffff8021897f:	c7 83 cc 0e 00 00 00 	movl   $0x0,0xecc(%rbx)
ffffffff80218986:	00 00 00 
ffffffff80218989:	c7 83 d2 0e 00 00 08 	movl   $0x8e000008,0xed2(%rbx)
ffffffff80218990:	00 00 8e 
ffffffff80218993:	c7 83 dc 0e 00 00 00 	movl   $0x0,0xedc(%rbx)
ffffffff8021899a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff8021899d:	c7 83 e2 0e 00 00 08 	movl   $0x8e000008,0xee2(%rbx)
ffffffff802189a4:	00 00 8e 
ffffffff802189a7:	c7 83 ec 0e 00 00 00 	movl   $0x0,0xeec(%rbx)
ffffffff802189ae:	00 00 00 
ffffffff802189b1:	c7 83 f2 0e 00 00 08 	movl   $0x8e000008,0xef2(%rbx)
ffffffff802189b8:	00 00 8e 
ffffffff802189bb:	c7 83 fc 0e 00 00 00 	movl   $0x0,0xefc(%rbx)
ffffffff802189c2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff802189c5:	c7 83 02 0f 00 00 08 	movl   $0x8e000008,0xf02(%rbx)
ffffffff802189cc:	00 00 8e 
ffffffff802189cf:	c7 83 0c 0f 00 00 00 	movl   $0x0,0xf0c(%rbx)
ffffffff802189d6:	00 00 00 
ffffffff802189d9:	c7 83 12 0f 00 00 08 	movl   $0x8e000008,0xf12(%rbx)
ffffffff802189e0:	00 00 8e 
ffffffff802189e3:	89 83 18 0f 00 00    	mov    %eax,0xf18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff802189e9:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff802189f0:	66 89 93 16 0f 00 00 	mov    %dx,0xf16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff802189f7:	48 89 c2             	mov    %rax,%rdx
ffffffff802189fa:	66 89 83 20 0f 00 00 	mov    %ax,0xf20(%rbx)
ffffffff80218a01:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218a05:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218a09:	89 83 28 0f 00 00    	mov    %eax,0xf28(%rbx)
ffffffff80218a0f:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff80218a16:	66 89 93 26 0f 00 00 	mov    %dx,0xf26(%rbx)
ffffffff80218a1d:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a20:	66 89 83 30 0f 00 00 	mov    %ax,0xf30(%rbx)
ffffffff80218a27:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218a2b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218a2f:	89 83 38 0f 00 00    	mov    %eax,0xf38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80218a35:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80218a3c:	66 89 93 36 0f 00 00 	mov    %dx,0xf36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80218a43:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a46:	66 89 83 40 0f 00 00 	mov    %ax,0xf40(%rbx)
ffffffff80218a4d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218a51:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218a55:	89 83 48 0f 00 00    	mov    %eax,0xf48(%rbx)
ffffffff80218a5b:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff80218a62:	66 89 93 46 0f 00 00 	mov    %dx,0xf46(%rbx)
ffffffff80218a69:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a6c:	66 89 83 50 0f 00 00 	mov    %ax,0xf50(%rbx)
ffffffff80218a73:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218a77:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218a7b:	89 83 58 0f 00 00    	mov    %eax,0xf58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80218a81:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80218a88:	66 89 93 56 0f 00 00 	mov    %dx,0xf56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80218a8f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a92:	66 89 83 60 0f 00 00 	mov    %ax,0xf60(%rbx)
ffffffff80218a99:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218a9d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218aa1:	89 83 68 0f 00 00    	mov    %eax,0xf68(%rbx)
ffffffff80218aa7:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff80218aae:	66 89 93 66 0f 00 00 	mov    %dx,0xf66(%rbx)
ffffffff80218ab5:	48 89 c2             	mov    %rax,%rdx
ffffffff80218ab8:	66 89 83 70 0f 00 00 	mov    %ax,0xf70(%rbx)
ffffffff80218abf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218ac3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218ac7:	89 83 78 0f 00 00    	mov    %eax,0xf78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80218acd:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80218ad4:	66 89 93 76 0f 00 00 	mov    %dx,0xf76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80218adb:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80218ade:	c7 83 1c 0f 00 00 00 	movl   $0x0,0xf1c(%rbx)
ffffffff80218ae5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80218ae8:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80218aec:	c7 83 22 0f 00 00 08 	movl   $0x8e000008,0xf22(%rbx)
ffffffff80218af3:	00 00 8e 
ffffffff80218af6:	c7 83 2c 0f 00 00 00 	movl   $0x0,0xf2c(%rbx)
ffffffff80218afd:	00 00 00 
ffffffff80218b00:	c7 83 32 0f 00 00 08 	movl   $0x8e000008,0xf32(%rbx)
ffffffff80218b07:	00 00 8e 
ffffffff80218b0a:	c7 83 3c 0f 00 00 00 	movl   $0x0,0xf3c(%rbx)
ffffffff80218b11:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80218b14:	c7 83 42 0f 00 00 08 	movl   $0x8e000008,0xf42(%rbx)
ffffffff80218b1b:	00 00 8e 
ffffffff80218b1e:	c7 83 4c 0f 00 00 00 	movl   $0x0,0xf4c(%rbx)
ffffffff80218b25:	00 00 00 
ffffffff80218b28:	c7 83 52 0f 00 00 08 	movl   $0x8e000008,0xf52(%rbx)
ffffffff80218b2f:	00 00 8e 
ffffffff80218b32:	c7 83 5c 0f 00 00 00 	movl   $0x0,0xf5c(%rbx)
ffffffff80218b39:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80218b3c:	c7 83 62 0f 00 00 08 	movl   $0x8e000008,0xf62(%rbx)
ffffffff80218b43:	00 00 8e 
ffffffff80218b46:	c7 83 6c 0f 00 00 00 	movl   $0x0,0xf6c(%rbx)
ffffffff80218b4d:	00 00 00 
ffffffff80218b50:	c7 83 72 0f 00 00 08 	movl   $0x8e000008,0xf72(%rbx)
ffffffff80218b57:	00 00 8e 
ffffffff80218b5a:	c7 83 7c 0f 00 00 00 	movl   $0x0,0xf7c(%rbx)
ffffffff80218b61:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80218b64:	66 89 83 80 0f 00 00 	mov    %ax,0xf80(%rbx)
ffffffff80218b6b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218b6f:	89 83 88 0f 00 00    	mov    %eax,0xf88(%rbx)
ffffffff80218b75:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff80218b7c:	66 89 93 86 0f 00 00 	mov    %dx,0xf86(%rbx)
ffffffff80218b83:	48 89 c2             	mov    %rax,%rdx
ffffffff80218b86:	66 89 83 90 0f 00 00 	mov    %ax,0xf90(%rbx)
ffffffff80218b8d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218b91:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218b95:	89 83 98 0f 00 00    	mov    %eax,0xf98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80218b9b:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80218ba2:	66 89 93 96 0f 00 00 	mov    %dx,0xf96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80218ba9:	48 89 c2             	mov    %rax,%rdx
ffffffff80218bac:	66 89 83 a0 0f 00 00 	mov    %ax,0xfa0(%rbx)
ffffffff80218bb3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218bb7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218bbb:	89 83 a8 0f 00 00    	mov    %eax,0xfa8(%rbx)
ffffffff80218bc1:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80218bc8:	66 89 93 a6 0f 00 00 	mov    %dx,0xfa6(%rbx)
ffffffff80218bcf:	48 89 c2             	mov    %rax,%rdx
ffffffff80218bd2:	66 89 83 b0 0f 00 00 	mov    %ax,0xfb0(%rbx)
ffffffff80218bd9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218bdd:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218be1:	89 83 b8 0f 00 00    	mov    %eax,0xfb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218be7:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80218bee:	66 89 93 b6 0f 00 00 	mov    %dx,0xfb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218bf5:	48 89 c2             	mov    %rax,%rdx
ffffffff80218bf8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218bfc:	66 89 83 c0 0f 00 00 	mov    %ax,0xfc0(%rbx)
ffffffff80218c03:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218c07:	89 83 c8 0f 00 00    	mov    %eax,0xfc8(%rbx)
ffffffff80218c0d:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff80218c14:	66 89 93 c6 0f 00 00 	mov    %dx,0xfc6(%rbx)
ffffffff80218c1b:	48 89 c2             	mov    %rax,%rdx
ffffffff80218c1e:	66 89 83 d0 0f 00 00 	mov    %ax,0xfd0(%rbx)
ffffffff80218c25:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218c29:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218c2d:	89 83 d8 0f 00 00    	mov    %eax,0xfd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80218c33:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218c3a:	66 89 93 d6 0f 00 00 	mov    %dx,0xfd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80218c41:	48 89 c2             	mov    %rax,%rdx
ffffffff80218c44:	66 89 83 e0 0f 00 00 	mov    %ax,0xfe0(%rbx)
ffffffff80218c4b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218c4f:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80218c53:	c7 83 82 0f 00 00 08 	movl   $0x8e000008,0xf82(%rbx)
ffffffff80218c5a:	00 00 8e 
ffffffff80218c5d:	c7 83 8c 0f 00 00 00 	movl   $0x0,0xf8c(%rbx)
ffffffff80218c64:	00 00 00 
ffffffff80218c67:	c7 83 92 0f 00 00 08 	movl   $0x8e000008,0xf92(%rbx)
ffffffff80218c6e:	00 00 8e 
ffffffff80218c71:	c7 83 9c 0f 00 00 00 	movl   $0x0,0xf9c(%rbx)
ffffffff80218c78:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80218c7b:	c7 83 a2 0f 00 00 08 	movl   $0x8e000008,0xfa2(%rbx)
ffffffff80218c82:	00 00 8e 
ffffffff80218c85:	c7 83 ac 0f 00 00 00 	movl   $0x0,0xfac(%rbx)
ffffffff80218c8c:	00 00 00 
ffffffff80218c8f:	c7 83 b2 0f 00 00 08 	movl   $0x8e000008,0xfb2(%rbx)
ffffffff80218c96:	00 00 8e 
ffffffff80218c99:	c7 83 bc 0f 00 00 00 	movl   $0x0,0xfbc(%rbx)
ffffffff80218ca0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218ca3:	c7 83 c2 0f 00 00 08 	movl   $0x8e000008,0xfc2(%rbx)
ffffffff80218caa:	00 00 8e 
ffffffff80218cad:	c7 83 cc 0f 00 00 00 	movl   $0x0,0xfcc(%rbx)
ffffffff80218cb4:	00 00 00 
ffffffff80218cb7:	c7 83 d2 0f 00 00 08 	movl   $0x8e000008,0xfd2(%rbx)
ffffffff80218cbe:	00 00 8e 
ffffffff80218cc1:	c7 83 dc 0f 00 00 00 	movl   $0x0,0xfdc(%rbx)
ffffffff80218cc8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80218ccb:	c7 83 e2 0f 00 00 08 	movl   $0x8e000008,0xfe2(%rbx)
ffffffff80218cd2:	00 00 8e 
ffffffff80218cd5:	66 89 93 e6 0f 00 00 	mov    %dx,0xfe6(%rbx)
ffffffff80218cdc:	89 83 e8 0f 00 00    	mov    %eax,0xfe8(%rbx)
ffffffff80218ce2:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80218ce9:	48 89 c2             	mov    %rax,%rdx
ffffffff80218cec:	66 89 83 f0 0f 00 00 	mov    %ax,0xff0(%rbx)
ffffffff80218cf3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218cf7:	89 83 f8 0f 00 00    	mov    %eax,0xff8(%rbx)
ffffffff80218cfd:	48 c1 ea 10          	shr    $0x10,%rdx
    if(RME_X64_CPU_Cnt==0)
ffffffff80218d01:	48 8b 05 98 e7 00 00 	mov    0xe798(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80218d08:	c7 83 ec 0f 00 00 00 	movl   $0x0,0xfec(%rbx)
ffffffff80218d0f:	00 00 00 
ffffffff80218d12:	c7 83 f2 0f 00 00 08 	movl   $0x8e000008,0xff2(%rbx)
ffffffff80218d19:	00 00 8e 
ffffffff80218d1c:	66 89 93 f6 0f 00 00 	mov    %dx,0xff6(%rbx)
ffffffff80218d23:	c7 83 fc 0f 00 00 00 	movl   $0x0,0xffc(%rbx)
ffffffff80218d2a:	00 00 00 
    if(RME_X64_CPU_Cnt==0)
ffffffff80218d2d:	48 85 c0             	test   %rax,%rax
ffffffff80218d30:	75 3a                	jne    ffffffff80218d6c <__RME_X64_CPU_Local_Init+0x379c>
        RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
ffffffff80218d32:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff80218d39:	c7 83 22 02 00 00 08 	movl   $0x8e000008,0x222(%rbx)
ffffffff80218d40:	00 00 8e 
ffffffff80218d43:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d46:	66 89 83 20 02 00 00 	mov    %ax,0x220(%rbx)
ffffffff80218d4d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218d51:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218d55:	89 83 28 02 00 00    	mov    %eax,0x228(%rbx)
ffffffff80218d5b:	66 89 93 26 02 00 00 	mov    %dx,0x226(%rbx)
ffffffff80218d62:	c7 83 2c 02 00 00 00 	movl   $0x0,0x22c(%rbx)
ffffffff80218d69:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80218d6c:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80218d73:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80218d78:	66 89 83 30 08 00 00 	mov    %ax,0x830(%rbx)
ffffffff80218d7f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d82:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218d86:	89 83 38 08 00 00    	mov    %eax,0x838(%rbx)
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff80218d8c:	b8 ff 0f 00 00       	mov    $0xfff,%eax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80218d91:	48 c1 ea 10          	shr    $0x10,%rdx
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff80218d95:	66 89 44 24 06       	mov    %ax,0x6(%rsp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80218d9a:	48 89 d8             	mov    %rbx,%rax
ffffffff80218d9d:	48 c1 e8 10          	shr    $0x10,%rax
    Desc[1]=(rme_ptr_t)IDT_Table;
ffffffff80218da1:	66 89 5c 24 08       	mov    %bx,0x8(%rsp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80218da6:	66 89 44 24 0a       	mov    %ax,0xa(%rsp)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff80218dab:	48 89 d8             	mov    %rbx,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80218dae:	66 89 93 36 08 00 00 	mov    %dx,0x836(%rbx)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff80218db5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218db9:	66 89 44 24 0c       	mov    %ax,0xc(%rsp)
    Desc[4]=((rme_ptr_t)IDT_Table)>>48;
ffffffff80218dbe:	48 89 d8             	mov    %rbx,%rax
ffffffff80218dc1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218dc5:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80218dca:	e8 aa 2a ff ff       	call   ffffffff8020b879 <__RME_X64_IDT_Load>
    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80218dcf:	48 8b 15 fa e6 00 00 	mov    0xe6fa(%rip),%rdx        # ffffffff802274d0 <RME_X64_Layout+0x10>
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff80218dd6:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80218ddb:	48 8b 05 be e6 00 00 	mov    0xe6be(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218de2:	48 be 00 00 ff ff ff 	movabs $0xffffff0000,%rsi
ffffffff80218de9:	00 00 00 
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80218dec:	66 0f 6f 05 3c 4c 00 	movdqa 0x4c3c(%rip),%xmm0        # ffffffff8021da30 <Table.1+0x1b0>
ffffffff80218df3:	00 
    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80218df4:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80218df8:	48 8d 84 02 00 10 00 	lea    0x1000(%rdx,%rax,1),%rax
ffffffff80218dff:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80218e00:	48 8b 15 c9 e6 00 00 	mov    0xe6c9(%rip),%rdx        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff80218e07:	48 8b 2d 92 e6 00 00 	mov    0xe692(%rip),%rbp        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80218e0e:	0f 11 00             	movups %xmm0,(%rax)
ffffffff80218e11:	66 0f 6f 05 27 4c 00 	movdqa 0x4c27(%rip),%xmm0        # ffffffff8021da40 <Table.1+0x1c0>
ffffffff80218e18:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80218e19:	48 c1 e5 0d          	shl    $0xd,%rbp
ffffffff80218e1d:	48 01 d5             	add    %rdx,%rbp
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80218e20:	0f 11 40 10          	movups %xmm0,0x10(%rax)
ffffffff80218e24:	66 0f 6f 05 24 4c 00 	movdqa 0x4c24(%rip),%xmm0        # ffffffff8021da50 <Table.1+0x1d0>
ffffffff80218e2b:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80218e2c:	48 8d 8d 80 10 00 00 	lea    0x1080(%rbp),%rcx
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218e33:	48 89 ca             	mov    %rcx,%rdx
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80218e36:	0f 11 40 20          	movups %xmm0,0x20(%rax)
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218e3a:	48 c1 e2 10          	shl    $0x10,%rdx
ffffffff80218e3e:	48 21 f2             	and    %rsi,%rdx
ffffffff80218e41:	48 89 ce             	mov    %rcx,%rsi
    GDT_Table[7]=(TSS_Table>>32);
ffffffff80218e44:	48 c1 e9 20          	shr    $0x20,%rcx
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218e48:	48 c1 ee 18          	shr    $0x18,%rsi
    GDT_Table[7]=(TSS_Table>>32);
ffffffff80218e4c:	48 89 48 38          	mov    %rcx,0x38(%rax)
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218e50:	48 c1 e6 38          	shl    $0x38,%rsi
ffffffff80218e54:	48 09 f2             	or     %rsi,%rdx
ffffffff80218e57:	48 be 67 00 00 00 00 	movabs $0x890000000067,%rsi
ffffffff80218e5e:	89 00 00 
ffffffff80218e61:	48 09 f2             	or     %rsi,%rdx
ffffffff80218e64:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Desc[0]=8*sizeof(rme_ptr_t)-1;
ffffffff80218e68:	ba 3f 00 00 00       	mov    $0x3f,%edx
ffffffff80218e6d:	66 89 54 24 06       	mov    %dx,0x6(%rsp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff80218e72:	48 89 c2             	mov    %rax,%rdx
ffffffff80218e75:	48 c1 ea 10          	shr    $0x10,%rdx
    Desc[1]=(rme_ptr_t)GDT_Table;
ffffffff80218e79:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff80218e7e:	66 89 54 24 0a       	mov    %dx,0xa(%rsp)
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff80218e83:	48 89 c2             	mov    %rax,%rdx
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff80218e86:	48 c1 e8 30          	shr    $0x30,%rax
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff80218e8a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218e8e:	66 89 54 24 0c       	mov    %dx,0xc(%rsp)
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff80218e93:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff80218e98:	e8 d8 29 ff ff       	call   ffffffff8020b875 <__RME_X64_GDT_Load>
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218e9d:	48 8b 15 74 e8 00 00 	mov    0xe874(%rip),%rdx        # ffffffff80227718 <RME_X64_Layout+0x258>
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff80218ea4:	bf 30 00 00 00       	mov    $0x30,%edi
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218ea9:	48 8b 05 f0 e5 00 00 	mov    0xe5f0(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff80218eb0:	83 c0 01             	add    $0x1,%eax
ffffffff80218eb3:	c1 e0 14             	shl    $0x14,%eax
ffffffff80218eb6:	01 d0                	add    %edx,%eax
ffffffff80218eb8:	89 85 84 10 00 00    	mov    %eax,0x1084(%rbp)
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80218ebe:	48 8b 15 53 e8 00 00 	mov    0xe853(%rip),%rdx        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80218ec5:	48 8b 05 d4 e5 00 00 	mov    0xe5d4(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    ((rme_u32_t*)TSS_Table)[16]=0x00680000;
ffffffff80218ecc:	c7 85 c0 10 00 00 00 	movl   $0x680000,0x10c0(%rbp)
ffffffff80218ed3:	00 68 00 
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80218ed6:	48 83 c0 01          	add    $0x1,%rax
ffffffff80218eda:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80218ede:	48 01 d0             	add    %rdx,%rax
ffffffff80218ee1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218ee5:	89 85 88 10 00 00    	mov    %eax,0x1088(%rbp)
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff80218eeb:	e8 8d 29 ff ff       	call   ffffffff8020b87d <__RME_X64_TSS_Load>
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80218ef0:	48 8b 15 d9 e5 00 00 	mov    0xe5d9(%rip),%rdx        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff80218ef7:	48 8b 05 a2 e5 00 00 	mov    0xe5a2(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff80218efe:	48 8b 35 9b e5 00 00 	mov    0xe59b(%rip),%rsi        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80218f05:	48 c1 e0 0d          	shl    $0xd,%rax
    		                          RME_POW2(RME_PGT_SIZE_4K)+
ffffffff80218f09:	48 8d ac 02 00 14 00 	lea    0x1400(%rdx,%rax,1),%rbp
ffffffff80218f10:	00 
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff80218f11:	48 89 ef             	mov    %rbp,%rdi
ffffffff80218f14:	e8 87 74 ff ff       	call   ffffffff802103a0 <_RME_CPU_Local_Init>
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff80218f19:	48 8b 15 b0 e5 00 00 	mov    0xe5b0(%rip),%rdx        # ffffffff802274d0 <RME_X64_Layout+0x10>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218f20:	48 89 de             	mov    %rbx,%rsi
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff80218f23:	48 8b 05 76 e5 00 00 	mov    0xe576(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218f2a:	bf 02 01 00 c0       	mov    $0xc0000102,%edi
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff80218f2f:	48 83 c0 01          	add    $0x1,%rax
ffffffff80218f33:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80218f37:	48 8d 54 02 e8       	lea    -0x18(%rdx,%rax,1),%rdx
    Temp->CPU_Local_Addr=(rme_ptr_t)CPU_Local;
ffffffff80218f3c:	48 89 2a             	mov    %rbp,(%rdx)
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218f3f:	48 8b 0d d2 e7 00 00 	mov    0xe7d2(%rip),%rcx        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80218f46:	48 8b 05 53 e5 00 00 	mov    0xe553(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    Temp->Temp_User_SP=0;
ffffffff80218f4d:	48 c7 42 10 00 00 00 	movq   $0x0,0x10(%rdx)
ffffffff80218f54:	00 
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218f55:	48 83 c0 01          	add    $0x1,%rax
ffffffff80218f59:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80218f5d:	48 01 c8             	add    %rcx,%rax
ffffffff80218f60:	48 89 42 08          	mov    %rax,0x8(%rdx)
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218f64:	e8 c1 28 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218f69:	48 89 de             	mov    %rbx,%rsi
ffffffff80218f6c:	bf 01 01 00 c0       	mov    $0xc0000101,%edi
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff80218f71:	bb 80 00 00 c0       	mov    $0xc0000080,%ebx
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218f76:	e8 af 28 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff80218f7b:	48 89 df             	mov    %rbx,%rdi
ffffffff80218f7e:	e8 93 28 ff ff       	call   ffffffff8020b816 <__RME_X64_Read_MSR>
ffffffff80218f83:	48 89 df             	mov    %rbx,%rdi
ffffffff80218f86:	48 83 c8 01          	or     $0x1,%rax
ffffffff80218f8a:	48 89 c6             	mov    %rax,%rsi
ffffffff80218f8d:	e8 98 28 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_LSTAR, (rme_ptr_t)SVC_Handler);
ffffffff80218f92:	48 c7 c6 c2 c6 20 80 	mov    $0xffffffff8020c6c2,%rsi
ffffffff80218f99:	bf 82 00 00 c0       	mov    $0xc0000082,%edi
ffffffff80218f9e:	e8 87 28 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_FMASK, ~RME_X64_RFLAGS_IF);
ffffffff80218fa3:	48 c7 c6 ff fd ff ff 	mov    $0xfffffffffffffdff,%rsi
ffffffff80218faa:	bf 84 00 00 c0       	mov    $0xc0000084,%edi
ffffffff80218faf:	e8 76 28 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_STAR, (((rme_ptr_t)RME_X64_SEG_EMPTY)<<48)|(((rme_ptr_t)RME_X64_SEG_KERNEL_CODE)<<32));
ffffffff80218fb4:	bf 81 00 00 c0       	mov    $0xc0000081,%edi
ffffffff80218fb9:	48 be 00 00 00 00 08 	movabs $0x1b000800000000,%rsi
ffffffff80218fc0:	00 1b 00 
ffffffff80218fc3:	e8 62 28 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
}
ffffffff80218fc8:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80218fcc:	5b                   	pop    %rbx
ffffffff80218fcd:	5d                   	pop    %rbp
ffffffff80218fce:	c3                   	ret
ffffffff80218fcf:	90                   	nop

ffffffff80218fd0 <__RME_Kfn_Handler>:
{
ffffffff80218fd0:	f3 0f 1e fa          	endbr64
}
ffffffff80218fd4:	31 c0                	xor    %eax,%eax
ffffffff80218fd6:	c3                   	ret
ffffffff80218fd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80218fde:	00 00 

ffffffff80218fe0 <__RME_Putchar>:
{
ffffffff80218fe0:	f3 0f 1e fa          	endbr64
ffffffff80218fe4:	53                   	push   %rbx
ffffffff80218fe5:	89 fb                	mov    %edi,%ebx
    while((__RME_X64_In(RME_X64_COM1+5)&0x20)==0);
ffffffff80218fe7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80218fee:	00 00 
ffffffff80218ff0:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff80218ff5:	e8 06 28 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff80218ffa:	a8 20                	test   $0x20,%al
ffffffff80218ffc:	74 f2                	je     ffffffff80218ff0 <__RME_Putchar+0x10>
    __RME_X64_Out(RME_X64_COM1, Char);
ffffffff80218ffe:	48 0f be f3          	movsbq %bl,%rsi
ffffffff80219002:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80219007:	e8 fe 27 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff8021900c:	31 c0                	xor    %eax,%eax
ffffffff8021900e:	5b                   	pop    %rbx
ffffffff8021900f:	c3                   	ret

ffffffff80219010 <__RME_X64_LAPIC_Ack>:
{
ffffffff80219010:	f3 0f 1e fa          	endbr64
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff80219014:	48 8b 15 15 d4 00 00 	mov    0xd415(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021901b:	48 b8 b0 00 00 00 00 	movabs $0xffff8000000000b0,%rax
ffffffff80219022:	80 ff ff 
ffffffff80219025:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
}
ffffffff8021902c:	c3                   	ret
ffffffff8021902d:	0f 1f 00             	nopl   (%rax)

ffffffff80219030 <__RME_X64_SMP_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff80219030:	f3 0f 1e fa          	endbr64
ffffffff80219034:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax
ffffffff8021903b:	80 ff ff 
ffffffff8021903e:	41 57                	push   %r15
ffffffff80219040:	48 be 80 6b 21 80 ff 	movabs $0x7fff80216b80,%rsi
ffffffff80219047:	7f 00 00 
    rme_cnt_t Count;
    rme_u16_t* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(rme_u8_t*)RME_X64_PA2VA(0x7000);
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff8021904a:	48 b9 62 70 00 00 00 	movabs $0xffff800000007062,%rcx
ffffffff80219051:	80 ff ff 
{
ffffffff80219054:	41 56                	push   %r14
ffffffff80219056:	41 55                	push   %r13
ffffffff80219058:	41 54                	push   %r12
ffffffff8021905a:	55                   	push   %rbp
ffffffff8021905b:	53                   	push   %rbx
ffffffff8021905c:	48 83 ec 18          	sub    $0x18,%rsp
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80219060:	0f b6 14 06          	movzbl (%rsi,%rax,1),%edx
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80219064:	48 83 c0 01          	add    $0x1,%rax
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80219068:	88 50 ff             	mov    %dl,-0x1(%rax)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff8021906b:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021906e:	75 f0                	jne    ffffffff80219060 <__RME_X64_SMP_Init+0x30>

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
ffffffff80219070:	48 c7 05 25 e4 00 00 	movq   $0x1,0xe425(%rip)        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff80219077:	01 00 00 00 
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff8021907b:	bb 01 00 00 00       	mov    $0x1,%ebx
    {
        RME_DBG_S("\n\rBooting CPU ");
        RME_DBG_I(Count);
        /* Temporary stack */
        *(rme_u32_t*)(Code-4)=0x8000;
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80219080:	48 c7 c7 89 80 10 80 	mov    $0xffffffff80108089,%rdi
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80219087:	48 8b 05 1a e4 00 00 	mov    0xe41a(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff8021908e:	49 bd f8 6f 00 00 00 	movabs $0xffff800000006ff8,%r13
ffffffff80219095:	80 ff ff 
ffffffff80219098:	8d bf 00 00 00 80    	lea    -0x80000000(%rdi),%edi
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff8021909e:	49 bc f0 6f 00 00 00 	movabs $0xffff800000006ff0,%r12
ffffffff802190a5:	80 ff ff 
        Warm_Reset=(rme_u16_t*)RME_X64_PA2VA((0x40<<4|0x67));
        Warm_Reset[0]=0;
        Warm_Reset[1]=0x7000>>4;

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802190a8:	48 bd 10 03 00 00 00 	movabs $0xffff800000000310,%rbp
ffffffff802190af:	80 ff ff 
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff802190b2:	49 bf 00 03 00 00 00 	movabs $0xffff800000000300,%r15
ffffffff802190b9:	80 ff ff 
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff802190bc:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff802190c0:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802190c4:	0f 86 42 01 00 00    	jbe    ffffffff8021920c <__RME_X64_SMP_Init+0x1dc>
ffffffff802190ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_DBG_S("\n\rBooting CPU ");
ffffffff802190d0:	48 c7 c7 3e d0 21 80 	mov    $0xffffffff8021d03e,%rdi
ffffffff802190d7:	49 89 de             	mov    %rbx,%r14
ffffffff802190da:	e8 c1 4d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
        RME_DBG_I(Count);
ffffffff802190df:	48 89 df             	mov    %rbx,%rdi
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff802190e2:	48 83 c3 01          	add    $0x1,%rbx
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802190e6:	49 c1 e6 04          	shl    $0x4,%r14
        RME_DBG_I(Count);
ffffffff802190ea:	e8 c1 4b ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff802190ef:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff802190f4:	bf 70 00 00 00       	mov    $0x70,%edi
        *(rme_u32_t*)(Code-4)=0x8000;
ffffffff802190f9:	48 b8 fc 6f 00 00 00 	movabs $0xffff800000006ffc,%rax
ffffffff80219100:	80 ff ff 
ffffffff80219103:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80219109:	8b 44 24 0c          	mov    0xc(%rsp),%eax
ffffffff8021910d:	41 89 45 00          	mov    %eax,0x0(%r13)
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80219111:	48 89 d8             	mov    %rbx,%rax
ffffffff80219114:	48 8b 0d fd e5 00 00 	mov    0xe5fd(%rip),%rcx        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff8021911b:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff8021911f:	48 01 c8             	add    %rcx,%rax
ffffffff80219122:	49 89 04 24          	mov    %rax,(%r12)
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff80219126:	e8 df 26 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
        __RME_X64_Out(RME_X64_RTC_DATA,0xA);
ffffffff8021912b:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80219130:	bf 71 00 00 00       	mov    $0x71,%edi
ffffffff80219135:	e8 d0 26 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
        Warm_Reset[1]=0x7000>>4;
ffffffff8021913a:	b9 00 07 00 00       	mov    $0x700,%ecx
        Warm_Reset[0]=0;
ffffffff8021913f:	31 d2                	xor    %edx,%edx
ffffffff80219141:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax
ffffffff80219148:	80 ff ff 
ffffffff8021914b:	66 89 10             	mov    %dx,(%rax)
        Warm_Reset[1]=0x7000>>4;
ffffffff8021914e:	66 89 48 02          	mov    %cx,0x2(%rax)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80219152:	49 8b 86 a0 64 22 80 	mov    -0x7fdd9b60(%r14),%rax
ffffffff80219159:	48 8b 0d d0 d2 00 00 	mov    0xd2d0(%rip),%rcx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80219160:	c1 e0 18             	shl    $0x18,%eax
ffffffff80219163:	89 04 29             	mov    %eax,(%rcx,%rbp,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80219166:	48 8b 05 c3 d2 00 00 	mov    0xd2c3(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021916d:	42 c7 04 38 00 c5 00 	movl   $0xc500,(%rax,%r15,1)
ffffffff80219174:	00 
                                                 RME_X64_LAPIC_ICRLO_LEVEL|
                                                 RME_X64_LAPIC_ICRLO_ASSERT);
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80219175:	48 8b 05 b4 d2 00 00 	mov    0xd2b4(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021917c:	42 c7 04 38 00 85 00 	movl   $0x8500,(%rax,%r15,1)
ffffffff80219183:	00 
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80219184:	49 8b 86 a0 64 22 80 	mov    -0x7fdd9b60(%r14),%rax
ffffffff8021918b:	48 8b 0d 9e d2 00 00 	mov    0xd29e(%rip),%rcx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80219192:	c1 e0 18             	shl    $0x18,%eax
ffffffff80219195:	89 04 29             	mov    %eax,(%rcx,%rbp,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff80219198:	48 8b 05 91 d2 00 00 	mov    0xd291(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021919f:	42 c7 04 38 07 06 00 	movl   $0x607,(%rax,%r15,1)
ffffffff802191a6:	00 
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802191a7:	49 8b 86 a0 64 22 80 	mov    -0x7fdd9b60(%r14),%rax
ffffffff802191ae:	48 8b 0d 7b d2 00 00 	mov    0xd27b(%rip),%rcx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff802191b5:	c1 e0 18             	shl    $0x18,%eax
ffffffff802191b8:	89 04 29             	mov    %eax,(%rcx,%rbp,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff802191bb:	48 8b 05 6e d2 00 00 	mov    0xd26e(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff802191c2:	42 c7 04 38 07 06 00 	movl   $0x607,(%rax,%r15,1)
ffffffff802191c9:	00 
        RME_X64_UDELAY(200);

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
ffffffff802191ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff802191d0:	48 8b 05 c9 e2 00 00 	mov    0xe2c9(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff802191d7:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802191db:	48 05 a0 64 22 80    	add    $0xffffffff802264a0,%rax
ffffffff802191e1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802191e5:	48 85 c0             	test   %rax,%rax
ffffffff802191e8:	74 e6                	je     ffffffff802191d0 <__RME_X64_SMP_Init+0x1a0>
        RME_X64_CPU_Cnt++;
ffffffff802191ea:	48 8b 05 af e2 00 00 	mov    0xe2af(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff802191f1:	48 83 c0 01          	add    $0x1,%rax
ffffffff802191f5:	48 89 05 a4 e2 00 00 	mov    %rax,0xe2a4(%rip)        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff802191fc:	48 8b 05 a5 e2 00 00 	mov    0xe2a5(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff80219203:	48 39 c3             	cmp    %rax,%rbx
ffffffff80219206:	0f 82 c4 fe ff ff    	jb     ffffffff802190d0 <__RME_X64_SMP_Init+0xa0>
    }
}
ffffffff8021920c:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80219210:	5b                   	pop    %rbx
ffffffff80219211:	5d                   	pop    %rbp
ffffffff80219212:	41 5c                	pop    %r12
ffffffff80219214:	41 5d                	pop    %r13
ffffffff80219216:	41 5e                	pop    %r14
ffffffff80219218:	41 5f                	pop    %r15
ffffffff8021921a:	c3                   	ret
ffffffff8021921b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80219220 <__RME_X64_SMP_Tick>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Tick(void)
{
ffffffff80219220:	f3 0f 1e fa          	endbr64
    /* Is this a SMP? */
    if(RME_X64_Num_CPU>1)
ffffffff80219224:	48 8b 05 7d e2 00 00 	mov    0xe27d(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021922b:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021922f:	76 27                	jbe    ffffffff80219258 <__RME_X64_SMP_Tick+0x38>
    {
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0xFFULL<<24);
ffffffff80219231:	48 8b 15 f8 d1 00 00 	mov    0xd1f8(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80219238:	48 b8 10 03 00 00 00 	movabs $0xffff800000000310,%rax
ffffffff8021923f:	80 ff ff 
ffffffff80219242:	c7 04 02 00 00 00 ff 	movl   $0xff000000,(%rdx,%rax,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_EXC_SELF|
ffffffff80219249:	48 8b 15 e0 d1 00 00 	mov    0xd1e0(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80219250:	c7 44 10 f0 83 00 0c 	movl   $0xc0083,-0x10(%rax,%rdx,1)
ffffffff80219257:	00 
                                                 RME_X64_LAPIC_ICRLO_FIXED|
                                                 RME_X64_INT_SMP_SYSTICK);
    }
}
ffffffff80219258:	c3                   	ret
ffffffff80219259:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80219260 <__RME_Lowlvl_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Lowlvl_Init(void)
{
ffffffff80219260:	f3 0f 1e fa          	endbr64
ffffffff80219264:	41 57                	push   %r15
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80219266:	31 f6                	xor    %esi,%esi
ffffffff80219268:	bf f9 03 00 00       	mov    $0x3f9,%edi
{
ffffffff8021926d:	41 56                	push   %r14
ffffffff8021926f:	41 55                	push   %r13
ffffffff80219271:	41 54                	push   %r12
ffffffff80219273:	55                   	push   %rbp
ffffffff80219274:	53                   	push   %rbx
ffffffff80219275:	48 83 ec 38          	sub    $0x38,%rsp
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80219279:	e8 8c 25 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x80);
ffffffff8021927e:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff80219283:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff80219288:	e8 7d 25 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+0, 115200/9600);
ffffffff8021928d:	be 0c 00 00 00       	mov    $0xc,%esi
ffffffff80219292:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80219297:	e8 6e 25 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021929c:	31 f6                	xor    %esi,%esi
ffffffff8021929e:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff802192a3:	e8 62 25 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x03);
ffffffff802192a8:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff802192ad:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff802192b2:	e8 53 25 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+2, 0xC7);
ffffffff802192b7:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff802192bc:	bf fa 03 00 00       	mov    $0x3fa,%edi
ffffffff802192c1:	e8 44 25 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+4, 0);
ffffffff802192c6:	31 f6                	xor    %esi,%esi
ffffffff802192c8:	bf fc 03 00 00       	mov    $0x3fc,%edi
ffffffff802192cd:	e8 38 25 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    if(__RME_X64_In(RME_X64_COM1+5)==0xFF)
ffffffff802192d2:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff802192d7:	e8 24 25 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff802192dc:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff802192e2:	0f 84 21 04 00 00    	je     ffffffff80219709 <__RME_Lowlvl_Init+0x4a9>
        RME_X64_UART_Exist=1;
ffffffff802192e8:	48 c7 05 35 e4 00 00 	movq   $0x1,0xe435(%rip)        # ffffffff80227728 <RME_X64_UART_Exist>
ffffffff802192ef:	01 00 00 00 
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff802192f3:	48 b8 0e 04 00 00 00 	movabs $0xffff80000000040e,%rax
ffffffff802192fa:	80 ff ff 
ffffffff802192fd:	0f b7 00             	movzwl (%rax),%eax
    if(Paddr!=0)
ffffffff80219300:	c1 e0 04             	shl    $0x4,%eax
ffffffff80219303:	0f 84 ff 02 00 00    	je     ffffffff80219608 <__RME_Lowlvl_Init+0x3a8>
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff80219309:	48 63 f8             	movslq %eax,%rdi
        RDSP=__RME_X64_RDSP_Scan(Paddr,1024);
ffffffff8021930c:	be 00 04 00 00       	mov    $0x400,%esi
ffffffff80219311:	e8 8a c1 ff ff       	call   ffffffff802154a0 <__RME_X64_RDSP_Scan>
ffffffff80219316:	48 89 c3             	mov    %rax,%rbx
        if(RDSP!=0)
ffffffff80219319:	48 85 c0             	test   %rax,%rax
ffffffff8021931c:	0f 84 e6 02 00 00    	je     ffffffff80219608 <__RME_Lowlvl_Init+0x3a8>
    RME_DBG_S("\r\nRDSP address: ");
ffffffff80219322:	48 c7 c7 4d d0 21 80 	mov    $0xffffffff8021d04d,%rdi
ffffffff80219329:	e8 72 4b ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U((rme_ptr_t)RDSP);
ffffffff8021932e:	48 89 df             	mov    %rbx,%rdi
ffffffff80219331:	e8 7a 49 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff80219336:	44 8b 73 10          	mov    0x10(%rbx),%r14d
    RME_DBG_S("\r\nRSDT address: ");
ffffffff8021933a:	48 c7 c7 5e d0 21 80 	mov    $0xffffffff8021d05e,%rdi
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff80219341:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80219348:	80 ff ff 
ffffffff8021934b:	49 01 c6             	add    %rax,%r14
    RME_DBG_S("\r\nRSDT address: ");
ffffffff8021934e:	e8 4d 4b ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U((rme_ptr_t)RSDT);
ffffffff80219353:	4c 89 f7             	mov    %r14,%rdi
ffffffff80219356:	e8 55 49 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;
ffffffff8021935b:	45 8b 6e 04          	mov    0x4(%r14),%r13d
ffffffff8021935f:	49 83 ed 24          	sub    $0x24,%r13
    for(Count=0;Count<Table_Num;Count++)
ffffffff80219363:	49 c1 ed 02          	shr    $0x2,%r13
ffffffff80219367:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
ffffffff8021936c:	0f 84 8e 02 00 00    	je     ffffffff80219600 <__RME_Lowlvl_Init+0x3a0>
    struct RME_X64_ACPI_MADT_Hdr* MADT=RME_NULL;
ffffffff80219372:	45 31 ed             	xor    %r13d,%r13d
    for(Count=0;Count<Table_Num;Count++)
ffffffff80219375:	45 31 ff             	xor    %r15d,%r15d
ffffffff80219378:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021937f:	00 
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff80219380:	43 8b 5c be 24       	mov    0x24(%r14,%r15,4),%ebx
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff80219385:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021938a:	48 8d 7c 24 16       	lea    0x16(%rsp),%rdi
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff8021938f:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80219396:	80 ff ff 
ffffffff80219399:	48 01 c3             	add    %rax,%rbx
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff8021939c:	48 89 de             	mov    %rbx,%rsi
ffffffff8021939f:	e8 ec 50 ff ff       	call   ffffffff8020e490 <_RME_Memcpy>
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff802193a4:	48 8d 73 0a          	lea    0xa(%rbx),%rsi
ffffffff802193a8:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff802193ad:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
    Signature[4]='\0';
ffffffff802193b2:	c6 44 24 1a 00       	movb   $0x0,0x1a(%rsp)
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff802193b7:	e8 d4 50 ff ff       	call   ffffffff8020e490 <_RME_Memcpy>
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff802193bc:	48 8d 73 10          	lea    0x10(%rbx),%rsi
ffffffff802193c0:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff802193c5:	48 8d 7c 24 27       	lea    0x27(%rsp),%rdi
    ID[6]='\0';
ffffffff802193ca:	c6 44 24 26 00       	movb   $0x0,0x26(%rsp)
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff802193cf:	e8 bc 50 ff ff       	call   ffffffff8020e490 <_RME_Memcpy>
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff802193d4:	48 8d 73 1c          	lea    0x1c(%rbx),%rsi
ffffffff802193d8:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff802193dd:	48 8d 7c 24 1b       	lea    0x1b(%rsp),%rdi
    Table_ID[8]='\0';
ffffffff802193e2:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff802193e7:	e8 a4 50 ff ff       	call   ffffffff8020e490 <_RME_Memcpy>
    RME_DBG_S("\n\rACPI:");
ffffffff802193ec:	48 c7 c7 6f d0 21 80 	mov    $0xffffffff8021d06f,%rdi
    OEM_Rev=Header->OEM_Revision;
ffffffff802193f3:	44 8b 63 18          	mov    0x18(%rbx),%r12d
    Creator_Rev=Header->Creator_Revision;
ffffffff802193f7:	8b 6b 20             	mov    0x20(%rbx),%ebp
    Creator[4]='\0';
ffffffff802193fa:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
    RME_DBG_S("\n\rACPI:");
ffffffff802193ff:	e8 9c 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S(Signature);
ffffffff80219404:	48 8d 7c 24 16       	lea    0x16(%rsp),%rdi
ffffffff80219409:	e8 92 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021940e:	48 c7 c7 32 d0 21 80 	mov    $0xffffffff8021d032,%rdi
ffffffff80219415:	e8 86 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S(ID);
ffffffff8021941a:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
ffffffff8021941f:	e8 7c 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff80219424:	48 c7 c7 32 d0 21 80 	mov    $0xffffffff8021d032,%rdi
ffffffff8021942b:	e8 70 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S(Table_ID);
ffffffff80219430:	48 8d 7c 24 27       	lea    0x27(%rsp),%rdi
ffffffff80219435:	e8 66 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021943a:	48 c7 c7 32 d0 21 80 	mov    $0xffffffff8021d032,%rdi
ffffffff80219441:	e8 5a 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S(OEM_Rev);
ffffffff80219446:	4c 89 e7             	mov    %r12,%rdi
ffffffff80219449:	e8 52 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021944e:	48 c7 c7 32 d0 21 80 	mov    $0xffffffff8021d032,%rdi
ffffffff80219455:	e8 46 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S(Creator);
ffffffff8021945a:	48 8d 7c 24 1b       	lea    0x1b(%rsp),%rdi
ffffffff8021945f:	e8 3c 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff80219464:	48 c7 c7 32 d0 21 80 	mov    $0xffffffff8021d032,%rdi
ffffffff8021946b:	e8 30 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S(Creator_Rev);
ffffffff80219470:	48 89 ef             	mov    %rbp,%rdi
ffffffff80219473:	e8 28 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S(".");
ffffffff80219478:	48 c7 c7 77 d0 21 80 	mov    $0xffffffff8021d077,%rdi
ffffffff8021947f:	e8 1c 4a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
        if(_RME_Memcmp(Header->Signature, "APIC", 4)==0)
ffffffff80219484:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80219489:	48 c7 c6 79 d0 21 80 	mov    $0xffffffff8021d079,%rsi
ffffffff80219490:	48 89 df             	mov    %rbx,%rdi
ffffffff80219493:	e8 b8 4f ff ff       	call   ffffffff8020e450 <_RME_Memcmp>
            MADT=(struct RME_X64_ACPI_MADT_Hdr*)Header;
ffffffff80219498:	48 85 c0             	test   %rax,%rax
ffffffff8021949b:	4c 0f 44 eb          	cmove  %rbx,%r13
    for(Count=0;Count<Table_Num;Count++)
ffffffff8021949f:	49 83 c7 01          	add    $0x1,%r15
ffffffff802194a3:	4c 39 7c 24 08       	cmp    %r15,0x8(%rsp)
ffffffff802194a8:	0f 85 d2 fe ff ff    	jne    ffffffff80219380 <__RME_Lowlvl_Init+0x120>
    if(MADT==0)
ffffffff802194ae:	4d 85 ed             	test   %r13,%r13
ffffffff802194b1:	0f 84 49 01 00 00    	je     ffffffff80219600 <__RME_Lowlvl_Init+0x3a0>
    if(MADT->Header.Length<sizeof(struct RME_X64_ACPI_MADT_Hdr))
ffffffff802194b7:	41 8b 45 04          	mov    0x4(%r13),%eax
ffffffff802194bb:	83 f8 2b             	cmp    $0x2b,%eax
ffffffff802194be:	0f 86 3c 01 00 00    	jbe    ffffffff80219600 <__RME_Lowlvl_Init+0x3a0>
    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff802194c4:	41 8b 55 24          	mov    0x24(%r13),%edx
    Ptr=MADT->Table;
ffffffff802194c8:	49 8d 5d 2c          	lea    0x2c(%r13),%rbx
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);
ffffffff802194cc:	48 83 e8 2c          	sub    $0x2c,%rax
ffffffff802194d0:	4c 8d 24 03          	lea    (%rbx,%rax,1),%r12
    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff802194d4:	48 89 15 55 cf 00 00 	mov    %rdx,0xcf55(%rip)        # ffffffff80226430 <RME_X64_LAPIC_Addr>
    RME_X64_Num_IOAPIC=0;
ffffffff802194db:	48 c7 05 9a cf 00 00 	movq   $0x0,0xcf9a(%rip)        # ffffffff80226480 <RME_X64_Num_IOAPIC>
ffffffff802194e2:	00 00 00 00 
    RME_X64_Num_CPU=0;
ffffffff802194e6:	48 c7 05 b7 df 00 00 	movq   $0x0,0xdfb7(%rip)        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff802194ed:	00 00 00 00 
    while(Ptr<End)
ffffffff802194f1:	4c 39 e3             	cmp    %r12,%rbx
ffffffff802194f4:	0f 83 06 01 00 00    	jae    ffffffff80219600 <__RME_Lowlvl_Init+0x3a0>
        if((End-Ptr)<2)
ffffffff802194fa:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802194fe:	75 44                	jne    ffffffff80219544 <__RME_Lowlvl_Init+0x2e4>
ffffffff80219500:	e9 12 02 00 00       	jmp    ffffffff80219717 <__RME_Lowlvl_Init+0x4b7>
ffffffff80219505:	0f 1f 00             	nopl   (%rax)
        switch(Ptr[0])
ffffffff80219508:	3c 02                	cmp    $0x2,%al
ffffffff8021950a:	0f 84 10 01 00 00    	je     ffffffff80219620 <__RME_Lowlvl_Init+0x3c0>
ffffffff80219510:	84 c0                	test   %al,%al
ffffffff80219512:	75 14                	jne    ffffffff80219528 <__RME_Lowlvl_Init+0x2c8>
                if(Length<sizeof(struct RME_X64_ACPI_MADT_LAPIC_Record))
ffffffff80219514:	48 83 fd 07          	cmp    $0x7,%rbp
ffffffff80219518:	76 0e                	jbe    ffffffff80219528 <__RME_Lowlvl_Init+0x2c8>
                if((LAPIC->Flags&RME_X64_APIC_LAPIC_ENABLED)==0)
ffffffff8021951a:	f6 43 04 01          	testb  $0x1,0x4(%rbx)
ffffffff8021951e:	0f 85 70 01 00 00    	jne    ffffffff80219694 <__RME_Lowlvl_Init+0x434>
ffffffff80219524:	0f 1f 40 00          	nopl   0x0(%rax)
        Ptr+=Length;
ffffffff80219528:	48 01 eb             	add    %rbp,%rbx
    while(Ptr<End)
ffffffff8021952b:	4c 39 e3             	cmp    %r12,%rbx
ffffffff8021952e:	0f 83 cc 00 00 00    	jae    ffffffff80219600 <__RME_Lowlvl_Init+0x3a0>
        if((End-Ptr)<2)
ffffffff80219534:	4c 89 e0             	mov    %r12,%rax
ffffffff80219537:	48 29 d8             	sub    %rbx,%rax
ffffffff8021953a:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021953e:	0f 84 bc 00 00 00    	je     ffffffff80219600 <__RME_Lowlvl_Init+0x3a0>
        Length=Ptr[1];
ffffffff80219544:	0f b6 6b 01          	movzbl 0x1(%rbx),%ebp
        if((End-Ptr)<Length)
ffffffff80219548:	48 39 e8             	cmp    %rbp,%rax
ffffffff8021954b:	0f 82 af 00 00 00    	jb     ffffffff80219600 <__RME_Lowlvl_Init+0x3a0>
        switch(Ptr[0])
ffffffff80219551:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80219554:	3c 01                	cmp    $0x1,%al
ffffffff80219556:	75 b0                	jne    ffffffff80219508 <__RME_Lowlvl_Init+0x2a8>
                if(Length<sizeof(struct RME_X64_ACPI_MADT_IOAPIC_Record))
ffffffff80219558:	48 83 fd 0b          	cmp    $0xb,%rbp
ffffffff8021955c:	76 ca                	jbe    ffffffff80219528 <__RME_Lowlvl_Init+0x2c8>
                RME_DBG_S("\n\rACPI: IOAPIC ");
ffffffff8021955e:	48 c7 c7 97 d0 21 80 	mov    $0xffffffff8021d097,%rdi
ffffffff80219565:	e8 36 49 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
                RME_Int_Print(RME_X64_Num_IOAPIC);
ffffffff8021956a:	48 8b 3d 0f cf 00 00 	mov    0xcf0f(%rip),%rdi        # ffffffff80226480 <RME_X64_Num_IOAPIC>
ffffffff80219571:	e8 3a 47 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
                RME_DBG_S(" @ ");
ffffffff80219576:	48 c7 c7 a7 d0 21 80 	mov    $0xffffffff8021d0a7,%rdi
ffffffff8021957d:	e8 1e 49 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
                RME_Hex_Print(IOAPIC->Addr);
ffffffff80219582:	8b 7b 04             	mov    0x4(%rbx),%edi
ffffffff80219585:	e8 56 48 ff ff       	call   ffffffff8020dde0 <RME_Hex_Print>
                RME_DBG_S(", ID ");
ffffffff8021958a:	48 c7 c7 ab d0 21 80 	mov    $0xffffffff8021d0ab,%rdi
ffffffff80219591:	e8 0a 49 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
                RME_Int_Print(IOAPIC->ID);
ffffffff80219596:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
ffffffff8021959a:	e8 11 47 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
                RME_DBG_S(", IBASE ");
ffffffff8021959f:	48 c7 c7 b1 d0 21 80 	mov    $0xffffffff8021d0b1,%rdi
ffffffff802195a6:	e8 f5 48 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
                RME_Int_Print(IOAPIC->Interrupt_Base);
ffffffff802195ab:	8b 7b 08             	mov    0x8(%rbx),%edi
ffffffff802195ae:	e8 fd 46 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
                if(RME_X64_Num_IOAPIC!=0)
ffffffff802195b3:	48 8b 05 c6 ce 00 00 	mov    0xcec6(%rip),%rax        # ffffffff80226480 <RME_X64_Num_IOAPIC>
ffffffff802195ba:	48 85 c0             	test   %rax,%rax
ffffffff802195bd:	0f 85 c0 00 00 00    	jne    ffffffff80219683 <__RME_Lowlvl_Init+0x423>
                    RME_X64_IOAPIC_Info[RME_X64_Num_IOAPIC].IOAPIC_ID=IOAPIC->ID;
ffffffff802195c3:	48 8b 05 b6 ce 00 00 	mov    0xceb6(%rip),%rax        # ffffffff80226480 <RME_X64_Num_IOAPIC>
ffffffff802195ca:	0f b6 53 02          	movzbl 0x2(%rbx),%edx
ffffffff802195ce:	48 89 14 c5 40 64 22 	mov    %rdx,-0x7fdd9bc0(,%rax,8)
ffffffff802195d5:	80 
                RME_X64_Num_IOAPIC++;
ffffffff802195d6:	48 8b 05 a3 ce 00 00 	mov    0xcea3(%rip),%rax        # ffffffff80226480 <RME_X64_Num_IOAPIC>
        Ptr+=Length;
ffffffff802195dd:	48 01 eb             	add    %rbp,%rbx
                RME_X64_Num_IOAPIC++;
ffffffff802195e0:	48 83 c0 01          	add    $0x1,%rax
ffffffff802195e4:	48 89 05 95 ce 00 00 	mov    %rax,0xce95(%rip)        # ffffffff80226480 <RME_X64_Num_IOAPIC>
                RME_ASSERT(RME_X64_Num_IOAPIC<=RME_X64_IOAPIC_NUM);
ffffffff802195eb:	48 8b 05 8e ce 00 00 	mov    0xce8e(%rip),%rax        # ffffffff80226480 <RME_X64_Num_IOAPIC>
    while(Ptr<End)
ffffffff802195f2:	4c 39 e3             	cmp    %r12,%rbx
ffffffff802195f5:	0f 82 39 ff ff ff    	jb     ffffffff80219534 <__RME_Lowlvl_Init+0x2d4>
ffffffff802195fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    /* We are here now ! */
    __RME_X64_UART_Init();
    /* Read APIC tables and detect the configurations. Now we are not NUMA-aware */
    RME_ASSERT(__RME_X64_ACPI_Init()==0);
    while(1)
ffffffff80219600:	eb fe                	jmp    ffffffff80219600 <__RME_Lowlvl_Init+0x3a0>
ffffffff80219602:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    return __RME_X64_RDSP_Scan(0xE0000, 0x20000);
ffffffff80219608:	be 00 00 02 00       	mov    $0x20000,%esi
ffffffff8021960d:	bf 00 00 0e 00       	mov    $0xe0000,%edi
ffffffff80219612:	e8 89 be ff ff       	call   ffffffff802154a0 <__RME_X64_RDSP_Scan>
ffffffff80219617:	48 89 c3             	mov    %rax,%rbx
ffffffff8021961a:	e9 03 fd ff ff       	jmp    ffffffff80219322 <__RME_Lowlvl_Init+0xc2>
ffffffff8021961f:	90                   	nop
                if(Length<sizeof(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record))
ffffffff80219620:	48 83 fd 06          	cmp    $0x6,%rbp
ffffffff80219624:	0f 86 fe fe ff ff    	jbe    ffffffff80219528 <__RME_Lowlvl_Init+0x2c8>
                RME_DBG_S("\n\rACPI: OVERRIDE Bus ");
ffffffff8021962a:	48 c7 c7 ba d0 21 80 	mov    $0xffffffff8021d0ba,%rdi
ffffffff80219631:	e8 6a 48 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
                RME_Int_Print(OVERRIDE->Bus);
ffffffff80219636:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
ffffffff8021963a:	e8 71 46 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
                RME_DBG_S(", Source ");
ffffffff8021963f:	48 c7 c7 d0 d0 21 80 	mov    $0xffffffff8021d0d0,%rdi
ffffffff80219646:	e8 55 48 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
                RME_Hex_Print(OVERRIDE->Source);
ffffffff8021964b:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
ffffffff8021964f:	e8 8c 47 ff ff       	call   ffffffff8020dde0 <RME_Hex_Print>
                RME_DBG_S(", GSI ");
ffffffff80219654:	48 c7 c7 da d0 21 80 	mov    $0xffffffff8021d0da,%rdi
ffffffff8021965b:	e8 40 48 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
                RME_Int_Print(OVERRIDE->GS_Interrupt);
ffffffff80219660:	0f b6 7b 04          	movzbl 0x4(%rbx),%edi
ffffffff80219664:	e8 47 46 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
                RME_DBG_S(", Flags ");
ffffffff80219669:	48 c7 c7 e1 d0 21 80 	mov    $0xffffffff8021d0e1,%rdi
ffffffff80219670:	e8 2b 48 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);
ffffffff80219675:	0f b7 7b 05          	movzwl 0x5(%rbx),%edi
ffffffff80219679:	e8 32 46 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
                break;
ffffffff8021967e:	e9 a5 fe ff ff       	jmp    ffffffff80219528 <__RME_Lowlvl_Init+0x2c8>
                    RME_DBG_S("Warning: multiple ioapics are not supported - currently we will not initialize IOAPIC > 1\n");
ffffffff80219683:	48 c7 c7 40 ce 21 80 	mov    $0xffffffff8021ce40,%rdi
ffffffff8021968a:	e8 11 48 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021968f:	e9 42 ff ff ff       	jmp    ffffffff802195d6 <__RME_Lowlvl_Init+0x376>
                RME_DBG_S("\n\rACPI: CPU ");
ffffffff80219694:	48 c7 c7 7e d0 21 80 	mov    $0xffffffff8021d07e,%rdi
ffffffff8021969b:	e8 00 48 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
                RME_Int_Print(RME_X64_Num_CPU);
ffffffff802196a0:	48 8b 3d 01 de 00 00 	mov    0xde01(%rip),%rdi        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff802196a7:	e8 04 46 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
                RME_DBG_S(", LAPIC ID ");
ffffffff802196ac:	48 c7 c7 8b d0 21 80 	mov    $0xffffffff8021d08b,%rdi
ffffffff802196b3:	e8 e8 47 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
                RME_Int_Print(LAPIC->APIC_ID);
ffffffff802196b8:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
ffffffff802196bc:	e8 ef 45 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
                RME_X64_CPU_Info[RME_X64_Num_CPU].LAPIC_ID=LAPIC->APIC_ID;
ffffffff802196c1:	48 8b 05 e0 dd 00 00 	mov    0xdde0(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff802196c8:	0f b6 53 03          	movzbl 0x3(%rbx),%edx
ffffffff802196cc:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802196d0:	48 89 90 a0 64 22 80 	mov    %rdx,-0x7fdd9b60(%rax)
                RME_X64_CPU_Info[RME_X64_Num_CPU].Boot_Done=0;
ffffffff802196d7:	48 8b 05 ca dd 00 00 	mov    0xddca(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff802196de:	31 d2                	xor    %edx,%edx
ffffffff802196e0:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802196e4:	48 89 90 a8 64 22 80 	mov    %rdx,-0x7fdd9b58(%rax)
                RME_X64_Num_CPU++;
ffffffff802196eb:	48 8b 05 b6 dd 00 00 	mov    0xddb6(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff802196f2:	48 83 c0 01          	add    $0x1,%rax
ffffffff802196f6:	48 89 05 ab dd 00 00 	mov    %rax,0xddab(%rip)        # ffffffff802274a8 <RME_X64_Num_CPU>
                RME_ASSERT(RME_X64_Num_CPU<=RME_X64_CPU_NUM);
ffffffff802196fd:	48 8b 05 a4 dd 00 00 	mov    0xdda4(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
                break;
ffffffff80219704:	e9 1f fe ff ff       	jmp    ffffffff80219528 <__RME_Lowlvl_Init+0x2c8>
        RME_X64_UART_Exist=0;
ffffffff80219709:	31 c9                	xor    %ecx,%ecx
ffffffff8021970b:	48 89 0d 16 e0 00 00 	mov    %rcx,0xe016(%rip)        # ffffffff80227728 <RME_X64_UART_Exist>
ffffffff80219712:	e9 dc fb ff ff       	jmp    ffffffff802192f3 <__RME_Lowlvl_Init+0x93>
ffffffff80219717:	e9 e4 fe ff ff       	jmp    ffffffff80219600 <__RME_Lowlvl_Init+0x3a0>
ffffffff8021971c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80219720 <__RME_Pgt_Kom_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Kom_Init(void)
{
ffffffff80219720:	f3 0f 1e fa          	endbr64
ffffffff80219724:	41 57                	push   %r15
ffffffff80219726:	41 56                	push   %r14
ffffffff80219728:	41 55                	push   %r13
ffffffff8021972a:	41 54                	push   %r12
ffffffff8021972c:	55                   	push   %rbp
ffffffff8021972d:	53                   	push   %rbx
ffffffff8021972e:	48 83 ec 08          	sub    $0x8,%rsp
    rme_cnt_t PDE_Cnt;
    rme_cnt_t Addr_Cnt;
    struct __RME_X64_Mem* Mem;

    /* Now initialize the kernel object allocation table */
    _RME_Kot_Init(RME_X64_Layout.Kot_Size/sizeof(rme_ptr_t));
ffffffff80219732:	48 8b 3d 8f dd 00 00 	mov    0xdd8f(%rip),%rdi        # ffffffff802274c8 <RME_X64_Layout+0x8>
ffffffff80219739:	48 c1 ef 03          	shr    $0x3,%rdi
ffffffff8021973d:	e8 6e 52 ff ff       	call   ffffffff8020e9b0 <_RME_Kot_Init>
    /* Reset PCID counter */
    RME_X64_PCID_Inc=0;
ffffffff80219742:	66 0f 6f 05 16 43 00 	movdqa 0x4316(%rip),%xmm0        # ffffffff8021da60 <Table.1+0x1e0>
ffffffff80219749:	00 
ffffffff8021974a:	48 c7 c1 00 a0 10 80 	mov    $0xffffffff8010a000,%rcx

    /* Create the frame for kernel page tables */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80219751:	31 f6                	xor    %esi,%esi
    RME_X64_PCID_Inc=0;
ffffffff80219753:	48 c7 05 b2 c8 00 00 	movq   $0x0,0xc8b2(%rip)        # ffffffff80226010 <RME_X64_PCID_Inc>
ffffffff8021975a:	00 00 00 00 
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff8021975e:	48 c7 c2 00 b0 10 80 	mov    $0xffffffff8010b000,%rdx
    {
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|
ffffffff80219765:	49 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%r8
ffffffff8021976c:	ff 0f 00 
ffffffff8021976f:	90                   	nop
ffffffff80219770:	48 8d 82 00 f0 ff 7f 	lea    0x7ffff000(%rdx),%rax
ffffffff80219777:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021977a:	4c 21 c0             	and    %r8,%rax
ffffffff8021977d:	48 29 cf             	sub    %rcx,%rdi
ffffffff80219780:	48 0d 03 01 00 00    	or     $0x103,%rax
ffffffff80219786:	83 e7 10             	and    $0x10,%edi
ffffffff80219789:	48 89 04 f5 00 98 10 	mov    %rax,-0x7fef6800(,%rsi,8)
ffffffff80219790:	80 
ffffffff80219791:	48 89 c8             	mov    %rcx,%rax
ffffffff80219794:	74 12                	je     ffffffff802197a8 <__RME_Pgt_Kom_Init+0x88>
        		                    RME_X64_MMU_KERN_PML4;

        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff80219796:	48 8d 41 10          	lea    0x10(%rcx),%rax
ffffffff8021979a:	0f 11 01             	movups %xmm0,(%rcx)
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff8021979d:	48 39 d0             	cmp    %rdx,%rax
ffffffff802197a0:	74 16                	je     ffffffff802197b8 <__RME_Pgt_Kom_Init+0x98>
ffffffff802197a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff802197a8:	0f 11 00             	movups %xmm0,(%rax)
ffffffff802197ab:	48 83 c0 20          	add    $0x20,%rax
ffffffff802197af:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff802197b3:	48 39 d0             	cmp    %rdx,%rax
ffffffff802197b6:	75 f0                	jne    ffffffff802197a8 <__RME_Pgt_Kom_Init+0x88>
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff802197b8:	48 83 c6 01          	add    $0x1,%rsi
ffffffff802197bc:	48 81 c1 00 10 00 00 	add    $0x1000,%rcx
ffffffff802197c3:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
ffffffff802197ca:	48 81 fe 00 01 00 00 	cmp    $0x100,%rsi
ffffffff802197d1:	75 9d                	jne    ffffffff80219770 <__RME_Pgt_Kom_Init+0x50>
    }

    /* Map in the first 4GB as linear mappings as always, 4 super pages, including the device hole.
     * We need to detect whether the 1GB page is supported. If not, we just map the initial tables
     * in, and we know where they are hard-coded in the assembly file */
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff802197d3:	48 8b 05 8e ca 00 00 	mov    0xca8e(%rip),%rax        # ffffffff80226268 <RME_X64_Feature+0x248>
ffffffff802197da:	a9 00 00 00 04       	test   $0x4000000,%eax
ffffffff802197df:	0f 84 73 06 00 00    	je     ffffffff80219e58 <__RME_Pgt_Kom_Init+0x738>
    {
        /* Can use 1GB pages */
        RME_DBG_S("\n\rThis CPU have 1GB superpage support");
ffffffff802197e5:	48 c7 c7 a0 ce 21 80 	mov    $0xffffffff8021cea0,%rdi
ffffffff802197ec:	e8 af 46 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_ADDR(3*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802197f1:	48 8b 05 00 08 ff ff 	mov    -0xf800(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802197f8:	f3 0f 7e 05 10 08 ef 	movq   -0x10f7f0(%rip),%xmm0        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff802197ff:	ff 
ffffffff80219800:	f3 0f 7e 0d f8 07 ef 	movq   -0x10f808(%rip),%xmm1        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80219807:	ff 
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219808:	48 81 0d dd 07 ff ff 	orq    $0x81,-0xf823(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff8021980f:	81 00 00 00 
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219813:	0f 16 05 fe 07 ef ff 	movhps -0x10f802(%rip),%xmm0        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff8021981a:	66 0f eb 05 4e 42 00 	por    0x424e(%rip),%xmm0        # ffffffff8021da70 <Table.1+0x1f0>
ffffffff80219821:	00 
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219822:	48 0d 81 00 00 40    	or     $0x40000081,%rax
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219828:	0f 16 0d d9 07 ef ff 	movhps -0x10f827(%rip),%xmm1        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff8021982f:	66 0f eb 0d 49 42 00 	por    0x4249(%rip),%xmm1        # ffffffff8021da80 <Table.1+0x200>
ffffffff80219836:	00 
ffffffff80219837:	0f 11 05 d2 07 ef ff 	movups %xmm0,-0x10f82e(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff8021983e:	0f 11 0d bb 07 ef ff 	movups %xmm1,-0x10f845(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
    }

    /* Ignore all memory below 4G, but we need to get the size of such memory above 16MB */
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
ffffffff80219845:	48 8b 1d b4 c7 00 00 	mov    0xc7b4(%rip),%rbx        # ffffffff80226000 <RME_X64_Phys_Mem>
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021984c:	48 89 05 a5 07 ff ff 	mov    %rax,-0xf85b(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219853:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff8021985a:	75 1c                	jne    ffffffff80219878 <__RME_Pgt_Kom_Init+0x158>
ffffffff8021985c:	e9 b1 06 00 00       	jmp    ffffffff80219f12 <__RME_Pgt_Kom_Init+0x7f2>
ffffffff80219861:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    {
        /* See if this memory segment passes 16MB limit */
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80219868:	48 8b 1b             	mov    (%rbx),%rbx
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021986b:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff80219872:	0f 84 ea 06 00 00    	je     ffffffff80219f62 <__RME_Pgt_Kom_Init+0x842>
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
ffffffff80219878:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff8021987c:	48 03 43 10          	add    0x10(%rbx),%rax
ffffffff80219880:	48 3d 00 00 00 01    	cmp    $0x1000000,%rax
ffffffff80219886:	76 e0                	jbe    ffffffff80219868 <__RME_Pgt_Kom_Init+0x148>
    }

    /* The first Kom1 trunk must start at smaller or equal to 16MB */
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGT_SIZE_16M));
    /* The raw sizes of kernel memory segment 1 - per CPU area is already aligned so no need to align again */
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80219888:	48 8b 05 41 dc 00 00 	mov    0xdc41(%rip),%rax        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff8021988f:	48 8b 15 42 dc 00 00 	mov    0xdc42(%rip),%rdx        # ffffffff802274d8 <RME_X64_Layout+0x18>
ffffffff80219896:	48 01 d0             	add    %rdx,%rax
ffffffff80219899:	48 89 05 58 dc 00 00 	mov    %rax,0xdc58(%rip)        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff802198a0:	48 8b 15 51 dc 00 00 	mov    0xdc51(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff802198a7:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff802198ae:	7f ff ff 
ffffffff802198b1:	48 29 d0             	sub    %rdx,%rax
ffffffff802198b4:	48 03 43 10          	add    0x10(%rbx),%rax
ffffffff802198b8:	48 03 43 18          	add    0x18(%rbx),%rax
ffffffff802198bc:	48 89 05 35 dd 00 00 	mov    %rax,0xdd35(%rip)        # ffffffff802275f8 <RME_X64_Layout+0x138>

    /* Add the rest of Kom1 into the array */
    Addr_Cnt=1;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff802198c3:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff802198ca:	0f 84 86 06 00 00    	je     ffffffff80219f56 <__RME_Pgt_Kom_Init+0x836>
    Addr_Cnt=1;
ffffffff802198d0:	bd 01 00 00 00       	mov    $0x1,%ebp
    {
        /* Add all segments under 4GB to Kom1 */
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
        /* If detected anything above 4GB, then this is not Kom1, exiting */
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff802198d5:	41 bd ff ff ff ff    	mov    $0xffffffff,%r13d
        if(Addr_Cnt>=RME_X64_KOM1_MAXSEGS)
        {
            RME_DBG_S("\r\nThe memory under 4G is too fragmented. Aborting.");
            RME_ASSERT(0);
        }
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff802198db:	49 bc 00 00 00 00 00 	movabs $0xffff800000000000,%r12
ffffffff802198e2:	80 ff ff 
ffffffff802198e5:	eb 3e                	jmp    ffffffff80219925 <__RME_Pgt_Kom_Init+0x205>
ffffffff802198e7:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff802198ed:	48 8d 55 06          	lea    0x6(%rbp),%rdx
ffffffff802198f1:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff802198f7:	4c 01 e0             	add    %r12,%rax
ffffffff802198fa:	48 89 04 d5 c8 74 22 	mov    %rax,-0x7fdd8b38(,%rdx,8)
ffffffff80219901:	80 
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff80219902:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff80219906:	48 8d 55 26          	lea    0x26(%rbp),%rdx
        Addr_Cnt++;
ffffffff8021990a:	48 83 c5 01          	add    $0x1,%rbp
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff8021990e:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80219914:	48 89 04 d5 c8 74 22 	mov    %rax,-0x7fdd8b38(,%rdx,8)
ffffffff8021991b:	80 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021991c:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff80219923:	74 65                	je     ffffffff8021998a <__RME_Pgt_Kom_Init+0x26a>
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80219925:	48 8b 1b             	mov    (%rbx),%rbx
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff80219928:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8021992c:	49 39 c5             	cmp    %rax,%r13
ffffffff8021992f:	0f 82 4f 03 00 00    	jb     ffffffff80219c84 <__RME_Pgt_Kom_Init+0x564>
        if(Mem->Length<RME_POW2(RME_PGT_SIZE_4M))
ffffffff80219935:	48 81 7b 18 ff ff 3f 	cmpq   $0x3fffff,0x18(%rbx)
ffffffff8021993c:	00 
ffffffff8021993d:	76 18                	jbe    ffffffff80219957 <__RME_Pgt_Kom_Init+0x237>
        if(Addr_Cnt>=RME_X64_KOM1_MAXSEGS)
ffffffff8021993f:	48 83 fd 1f          	cmp    $0x1f,%rbp
ffffffff80219943:	7e a2                	jle    ffffffff802198e7 <__RME_Pgt_Kom_Init+0x1c7>
            RME_DBG_S("\r\nThe memory under 4G is too fragmented. Aborting.");
ffffffff80219945:	48 c7 c7 28 cf 21 80 	mov    $0xffffffff8021cf28,%rdi
ffffffff8021994c:	e8 4f 45 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff80219951:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff80219955:	eb 90                	jmp    ffffffff802198e7 <__RME_Pgt_Kom_Init+0x1c7>
            RME_DBG_S("\n\rAbandoning physical memory below 4G: addr 0x");
ffffffff80219957:	48 c7 c7 f8 ce 21 80 	mov    $0xffffffff8021cef8,%rdi
ffffffff8021995e:	e8 3d 45 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
            RME_DBG_U(Mem->Start_Addr);
ffffffff80219963:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff80219967:	e8 44 43 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
            RME_DBG_S(", length 0x");
ffffffff8021996c:	48 c7 c7 ea d0 21 80 	mov    $0xffffffff8021d0ea,%rdi
ffffffff80219973:	e8 28 45 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
            RME_DBG_U(Mem->Length);
ffffffff80219978:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff8021997c:	e8 2f 43 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219981:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff80219988:	75 9b                	jne    ffffffff80219925 <__RME_Pgt_Kom_Init+0x205>
    }
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;

    /* This is the hole */
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff8021998a:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
ffffffff8021998e:	48 8d 50 06          	lea    0x6(%rax),%rdx
ffffffff80219992:	48 83 c0 26          	add    $0x26,%rax
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff80219996:	48 89 2d 53 db 00 00 	mov    %rbp,0xdb53(%rip)        # ffffffff802274f0 <RME_X64_Layout+0x30>
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff8021999d:	48 8b 14 d5 c8 74 22 	mov    -0x7fdd8b38(,%rdx,8),%rdx
ffffffff802199a4:	80 
ffffffff802199a5:	48 8b 04 c5 c8 74 22 	mov    -0x7fdd8b38(,%rax,8),%rax
ffffffff802199ac:	80 
ffffffff802199ad:	48 01 d0             	add    %rdx,%rax
ffffffff802199b0:	48 89 05 41 dd 00 00 	mov    %rax,0xdd41(%rip)        # ffffffff802276f8 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff802199b7:	48 8b 0d 3a dd 00 00 	mov    0xdd3a(%rip),%rcx        # ffffffff802276f8 <RME_X64_Layout+0x238>
ffffffff802199be:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff802199c5:	80 ff ff 
ffffffff802199c8:	48 89 c2             	mov    %rax,%rdx
ffffffff802199cb:	48 29 ca             	sub    %rcx,%rdx
ffffffff802199ce:	48 89 15 2b dd 00 00 	mov    %rdx,0xdd2b(%rip)        # ffffffff80227700 <RME_X64_Layout+0x240>

    /* Create kernel page mappings for memory above 4GB - we assume only one segment below 4GB */
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff802199d5:	48 8b 15 1c db 00 00 	mov    0xdb1c(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff802199dc:	48 89 15 fd da 00 00 	mov    %rdx,0xdafd(%rip)        # ffffffff802274e0 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff802199e3:	48 89 05 1e dd 00 00 	mov    %rax,0xdd1e(%rip)        # ffffffff80227708 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff802199ea:	48 c7 05 1b dd 00 00 	movq   $0x0,0xdd1b(%rip)        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff802199f1:	00 00 00 00 
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
        {
            PDE_Cnt++;
            if(PDE_Cnt==512)
            {
                PDE_Cnt=0;
ffffffff802199f5:	48 b8 00 18 10 00 00 	movabs $0xffff800000101800,%rax
ffffffff802199fc:	80 ff ff 
ffffffff802199ff:	48 be 00 80 00 80 ff 	movabs $0x7fff80008000,%rsi
ffffffff80219a06:	7f 00 00 

        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
    }

    /* Copy the new page tables to the temporary entries, so that we can boot SMP */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80219a09:	48 b9 00 20 10 00 00 	movabs $0xffff800000102000,%rcx
ffffffff80219a10:	80 ff ff 
ffffffff80219a13:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff80219a18:	48 8b 14 06          	mov    (%rsi,%rax,1),%rdx
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80219a1c:	48 83 c0 08          	add    $0x8,%rax
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff80219a20:	48 89 50 f8          	mov    %rdx,-0x8(%rax)
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80219a24:	48 39 c8             	cmp    %rcx,%rax
ffffffff80219a27:	75 ef                	jne    ffffffff80219a18 <__RME_Pgt_Kom_Init+0x2f8>

    /* Page table allocation finished. Now need to align Kom1 to 2MB page boundary */
    RME_X64_Layout.Kom1_Start[0]=RME_ROUND_UP(RME_X64_Layout.Kom1_Start[0],RME_PGT_SIZE_2M);
ffffffff80219a29:	48 8b 05 c8 da 00 00 	mov    0xdac8(%rip),%rax        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff80219a30:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80219a36:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80219a3c:	48 89 05 b5 da 00 00 	mov    %rax,0xdab5(%rip)        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Size[0]-1,RME_PGT_SIZE_2M);
ffffffff80219a43:	48 8b 05 ae db 00 00 	mov    0xdbae(%rip),%rax        # ffffffff802275f8 <RME_X64_Layout+0x138>
ffffffff80219a4a:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80219a4e:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80219a54:	48 89 05 9d db 00 00 	mov    %rax,0xdb9d(%rip)        # ffffffff802275f8 <RME_X64_Layout+0x138>

    /* All memory is mapped. Now figure out the size of kernel stacks */
    RME_X64_Layout.Kpgtbl_Size=RME_X64_Layout.Kom1_Start[0]-RME_X64_Layout.Kpgtbl_Start;
ffffffff80219a5b:	48 8b 05 96 da 00 00 	mov    0xda96(%rip),%rax        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff80219a62:	48 8b 15 77 da 00 00 	mov    0xda77(%rip),%rdx        # ffffffff802274e0 <RME_X64_Layout+0x20>
ffffffff80219a69:	48 29 d0             	sub    %rdx,%rax
ffffffff80219a6c:	48 89 05 75 da 00 00 	mov    %rax,0xda75(%rip)        # ffffffff802274e8 <RME_X64_Layout+0x28>

    /* See if we are allocating the stack from Kom2 or Kom1 */
    if(RME_X64_Layout.Kom2_Size==0)
ffffffff80219a73:	48 8b 05 96 dc 00 00 	mov    0xdc96(%rip),%rax        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff80219a7a:	48 85 c0             	test   %rax,%rax
ffffffff80219a7d:	0f 85 3a 04 00 00    	jne    ffffffff80219ebd <__RME_Pgt_Kom_Init+0x79d>
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Start[0]+RME_X64_Layout.Kom1_Size[0]-1,RME_X64_KSTACK_ORDER);
ffffffff80219a83:	48 8b 15 6e da 00 00 	mov    0xda6e(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff80219a8a:	48 8b 05 67 db 00 00 	mov    0xdb67(%rip),%rax        # ffffffff802275f8 <RME_X64_Layout+0x138>
ffffffff80219a91:	48 8d 44 02 ff       	lea    -0x1(%rdx,%rax,1),%rax
ffffffff80219a96:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff80219a9c:	48 89 05 75 dc 00 00 	mov    %rax,0xdc75(%rip)        # ffffffff80227718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80219aa3:	48 8b 15 76 dc 00 00 	mov    0xdc76(%rip),%rdx        # ffffffff80227720 <RME_X64_Layout+0x260>
ffffffff80219aaa:	48 8b 05 67 dc 00 00 	mov    0xdc67(%rip),%rax        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80219ab1:	48 29 d0             	sub    %rdx,%rax
ffffffff80219ab4:	48 89 05 5d dc 00 00 	mov    %rax,0xdc5d(%rip)        # ffffffff80227718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom1_Size[0]=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom1_Start[0];
ffffffff80219abb:	48 8b 05 56 dc 00 00 	mov    0xdc56(%rip),%rax        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80219ac2:	48 8b 15 2f da 00 00 	mov    0xda2f(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff80219ac9:	48 29 d0             	sub    %rdx,%rax
ffffffff80219acc:	48 89 05 25 db 00 00 	mov    %rax,0xdb25(%rip)        # ffffffff802275f8 <RME_X64_Layout+0x138>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
        RME_X64_Layout.Kom2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom2_Start;
    }

    /* Now report all mapping info */
    RME_DBG_S("\n\r\n\rKot_Start:     0x");
ffffffff80219ad3:	48 c7 c7 f6 d0 21 80 	mov    $0xffffffff8021d0f6,%rdi
    RME_DBG_U(RME_X64_Layout.PerCPU_Size);
    RME_DBG_S("\n\rKpgtbl_Start:    0x");
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Start);
    RME_DBG_S("\n\rKpgtbl_Size:     0x");
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Size);
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80219ada:	31 db                	xor    %ebx,%ebx
    RME_DBG_S("\n\r\n\rKot_Start:     0x");
ffffffff80219adc:	e8 bf 43 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kot_Start);
ffffffff80219ae1:	48 8b 3d d8 d9 00 00 	mov    0xd9d8(%rip),%rdi        # ffffffff802274c0 <RME_X64_Layout>
ffffffff80219ae8:	e8 c3 41 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rKot_Size:      0x");
ffffffff80219aed:	48 c7 c7 0c d1 21 80 	mov    $0xffffffff8021d10c,%rdi
ffffffff80219af4:	e8 a7 43 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kot_Size);
ffffffff80219af9:	48 8b 3d c8 d9 00 00 	mov    0xd9c8(%rip),%rdi        # ffffffff802274c8 <RME_X64_Layout+0x8>
ffffffff80219b00:	e8 ab 41 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rPerCPU_Start:    0x");
ffffffff80219b05:	48 c7 c7 20 d1 21 80 	mov    $0xffffffff8021d120,%rdi
ffffffff80219b0c:	e8 8f 43 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.PerCPU_Start);
ffffffff80219b11:	48 8b 3d b8 d9 00 00 	mov    0xd9b8(%rip),%rdi        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff80219b18:	e8 93 41 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rPerCPU_Size:     0x");
ffffffff80219b1d:	48 c7 c7 36 d1 21 80 	mov    $0xffffffff8021d136,%rdi
ffffffff80219b24:	e8 77 43 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.PerCPU_Size);
ffffffff80219b29:	48 8b 3d a8 d9 00 00 	mov    0xd9a8(%rip),%rdi        # ffffffff802274d8 <RME_X64_Layout+0x18>
ffffffff80219b30:	e8 7b 41 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rKpgtbl_Start:    0x");
ffffffff80219b35:	48 c7 c7 4c d1 21 80 	mov    $0xffffffff8021d14c,%rdi
ffffffff80219b3c:	e8 5f 43 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Start);
ffffffff80219b41:	48 8b 3d 98 d9 00 00 	mov    0xd998(%rip),%rdi        # ffffffff802274e0 <RME_X64_Layout+0x20>
ffffffff80219b48:	e8 63 41 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rKpgtbl_Size:     0x");
ffffffff80219b4d:	48 c7 c7 62 d1 21 80 	mov    $0xffffffff8021d162,%rdi
ffffffff80219b54:	e8 47 43 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Size);
ffffffff80219b59:	48 8b 3d 88 d9 00 00 	mov    0xd988(%rip),%rdi        # ffffffff802274e8 <RME_X64_Layout+0x28>
ffffffff80219b60:	e8 4b 41 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80219b65:	48 8b 05 84 d9 00 00 	mov    0xd984(%rip),%rax        # ffffffff802274f0 <RME_X64_Layout+0x30>
ffffffff80219b6c:	48 85 c0             	test   %rax,%rax
ffffffff80219b6f:	74 72                	je     ffffffff80219be3 <__RME_Pgt_Kom_Init+0x4c3>
    {
        RME_DBG_S("\n\rKom1_Start[");
ffffffff80219b71:	48 c7 c7 fa d1 21 80 	mov    $0xffffffff8021d1fa,%rdi
ffffffff80219b78:	e8 23 43 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff80219b7d:	48 89 df             	mov    %rbx,%rdi
ffffffff80219b80:	e8 2b 41 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
        RME_DBG_S("]:  0x");
ffffffff80219b85:	48 c7 c7 08 d2 21 80 	mov    $0xffffffff8021d208,%rdi
ffffffff80219b8c:	e8 0f 43 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
        RME_DBG_U(RME_X64_Layout.Kom1_Start[Addr_Cnt]);
ffffffff80219b91:	48 8d 43 06          	lea    0x6(%rbx),%rax
ffffffff80219b95:	48 8b 3c c5 c8 74 22 	mov    -0x7fdd8b38(,%rax,8),%rdi
ffffffff80219b9c:	80 
ffffffff80219b9d:	e8 0e 41 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
        RME_DBG_S("\n\rKom1_Size[");
ffffffff80219ba2:	48 c7 c7 0f d2 21 80 	mov    $0xffffffff8021d20f,%rdi
ffffffff80219ba9:	e8 f2 42 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff80219bae:	48 89 df             	mov    %rbx,%rdi
ffffffff80219bb1:	e8 fa 40 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
        RME_DBG_S("]:   0x");
ffffffff80219bb6:	48 c7 c7 1c d2 21 80 	mov    $0xffffffff8021d21c,%rdi
ffffffff80219bbd:	e8 de 42 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
        RME_DBG_U(RME_X64_Layout.Kom1_Size[Addr_Cnt]);
ffffffff80219bc2:	48 8d 43 26          	lea    0x26(%rbx),%rax
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80219bc6:	48 83 c3 01          	add    $0x1,%rbx
        RME_DBG_U(RME_X64_Layout.Kom1_Size[Addr_Cnt]);
ffffffff80219bca:	48 8b 3c c5 c8 74 22 	mov    -0x7fdd8b38(,%rax,8),%rdi
ffffffff80219bd1:	80 
ffffffff80219bd2:	e8 d9 40 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80219bd7:	48 8b 05 12 d9 00 00 	mov    0xd912(%rip),%rax        # ffffffff802274f0 <RME_X64_Layout+0x30>
ffffffff80219bde:	48 39 c3             	cmp    %rax,%rbx
ffffffff80219be1:	72 8e                	jb     ffffffff80219b71 <__RME_Pgt_Kom_Init+0x451>
    }
    RME_DBG_S("\n\rHole_Start:      0x");
ffffffff80219be3:	48 c7 c7 78 d1 21 80 	mov    $0xffffffff8021d178,%rdi
ffffffff80219bea:	e8 b1 42 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Hole_Start);
ffffffff80219bef:	48 8b 3d 02 db 00 00 	mov    0xdb02(%rip),%rdi        # ffffffff802276f8 <RME_X64_Layout+0x238>
ffffffff80219bf6:	e8 b5 40 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rHole_Size:       0x");
ffffffff80219bfb:	48 c7 c7 8e d1 21 80 	mov    $0xffffffff8021d18e,%rdi
ffffffff80219c02:	e8 99 42 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Hole_Size);
ffffffff80219c07:	48 8b 3d f2 da 00 00 	mov    0xdaf2(%rip),%rdi        # ffffffff80227700 <RME_X64_Layout+0x240>
ffffffff80219c0e:	e8 9d 40 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rKom2_Start:     0x");
ffffffff80219c13:	48 c7 c7 a4 d1 21 80 	mov    $0xffffffff8021d1a4,%rdi
ffffffff80219c1a:	e8 81 42 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kom2_Start);
ffffffff80219c1f:	48 8b 3d e2 da 00 00 	mov    0xdae2(%rip),%rdi        # ffffffff80227708 <RME_X64_Layout+0x248>
ffffffff80219c26:	e8 85 40 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rKom2_Size:      0x");
ffffffff80219c2b:	48 c7 c7 b9 d1 21 80 	mov    $0xffffffff8021d1b9,%rdi
ffffffff80219c32:	e8 69 42 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kom2_Size);
ffffffff80219c37:	48 8b 3d d2 da 00 00 	mov    0xdad2(%rip),%rdi        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff80219c3e:	e8 6d 40 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rStack_Start:     0x");
ffffffff80219c43:	48 c7 c7 ce d1 21 80 	mov    $0xffffffff8021d1ce,%rdi
ffffffff80219c4a:	e8 51 42 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Stack_Start);
ffffffff80219c4f:	48 8b 3d c2 da 00 00 	mov    0xdac2(%rip),%rdi        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80219c56:	e8 55 40 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rStack_Size:      0x");
ffffffff80219c5b:	48 c7 c7 e4 d1 21 80 	mov    $0xffffffff8021d1e4,%rdi
ffffffff80219c62:	e8 39 42 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Stack_Size);
ffffffff80219c67:	48 8b 3d b2 da 00 00 	mov    0xdab2(%rip),%rdi        # ffffffff80227720 <RME_X64_Layout+0x260>
ffffffff80219c6e:	e8 3d 40 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>

    return 0;
}
ffffffff80219c73:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80219c77:	31 c0                	xor    %eax,%eax
ffffffff80219c79:	5b                   	pop    %rbx
ffffffff80219c7a:	5d                   	pop    %rbp
ffffffff80219c7b:	41 5c                	pop    %r12
ffffffff80219c7d:	41 5d                	pop    %r13
ffffffff80219c7f:	41 5e                	pop    %r14
ffffffff80219c81:	41 5f                	pop    %r15
ffffffff80219c83:	c3                   	ret
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff80219c84:	48 89 2d 65 d8 00 00 	mov    %rbp,0xd865(%rip)        # ffffffff802274f0 <RME_X64_Layout+0x30>
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff80219c8b:	48 8d 45 05          	lea    0x5(%rbp),%rax
ffffffff80219c8f:	48 83 c5 25          	add    $0x25,%rbp
ffffffff80219c93:	48 8b 04 c5 c8 74 22 	mov    -0x7fdd8b38(,%rax,8),%rax
ffffffff80219c9a:	80 
ffffffff80219c9b:	48 8b 14 ed c8 74 22 	mov    -0x7fdd8b38(,%rbp,8),%rdx
ffffffff80219ca2:	80 
ffffffff80219ca3:	48 01 d0             	add    %rdx,%rax
ffffffff80219ca6:	48 89 05 4b da 00 00 	mov    %rax,0xda4b(%rip)        # ffffffff802276f8 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff80219cad:	48 8b 0d 44 da 00 00 	mov    0xda44(%rip),%rcx        # ffffffff802276f8 <RME_X64_Layout+0x238>
ffffffff80219cb4:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff80219cbb:	80 ff ff 
ffffffff80219cbe:	48 89 c2             	mov    %rax,%rdx
ffffffff80219cc1:	48 29 ca             	sub    %rcx,%rdx
ffffffff80219cc4:	48 89 15 35 da 00 00 	mov    %rdx,0xda35(%rip)        # ffffffff80227700 <RME_X64_Layout+0x240>
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff80219ccb:	48 8b 15 26 d8 00 00 	mov    0xd826(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff80219cd2:	48 89 15 07 d8 00 00 	mov    %rdx,0xd807(%rip)        # ffffffff802274e0 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff80219cd9:	48 89 05 28 da 00 00 	mov    %rax,0xda28(%rip)        # ffffffff80227708 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff80219ce0:	48 c7 05 25 da 00 00 	movq   $0x0,0xda25(%rip)        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff80219ce7:	00 00 00 00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219ceb:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff80219cf2:	0f 84 fd fc ff ff    	je     ffffffff802199f5 <__RME_Pgt_Kom_Init+0x2d5>
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219cf8:	48 8b 43 18          	mov    0x18(%rbx),%rax
    PDE_Cnt=511;
ffffffff80219cfc:	bd ff 01 00 00       	mov    $0x1ff,%ebp
    PDP_Cnt=3;
ffffffff80219d01:	41 bd 03 00 00 00    	mov    $0x3,%r13d
    PML4_Cnt=0;
ffffffff80219d07:	45 31 f6             	xor    %r14d,%r14d
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff80219d0a:	49 bf 00 00 00 00 00 	movabs $0x800000000000,%r15
ffffffff80219d11:	80 00 00 
ffffffff80219d14:	49 bc 00 f0 ff ff ff 	movabs $0xffffffffff000,%r12
ffffffff80219d1b:	ff 0f 00 
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219d1e:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80219d24:	0f 86 ff 00 00 00    	jbe    ffffffff80219e29 <__RME_Pgt_Kom_Init+0x709>
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80219d2a:	48 8b 73 10          	mov    0x10(%rbx),%rsi
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff80219d2e:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80219d32:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80219d38:	48 8d 96 ff ff 1f 00 	lea    0x1fffff(%rsi),%rdx
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff80219d3f:	48 89 43 18          	mov    %rax,0x18(%rbx)
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80219d43:	48 81 e2 00 00 e0 ff 	and    $0xffffffffffe00000,%rdx
ffffffff80219d4a:	48 89 53 10          	mov    %rdx,0x10(%rbx)
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff80219d4e:	31 d2                	xor    %edx,%edx
ffffffff80219d50:	eb 5f                	jmp    ffffffff80219db1 <__RME_Pgt_Kom_Init+0x691>
            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff80219d52:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff80219d56:	48 8b 0d 9b d7 00 00 	mov    0xd79b(%rip),%rcx        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff80219d5d:	48 01 d0             	add    %rdx,%rax
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219d60:	48 81 c2 00 00 20 00 	add    $0x200000,%rdx
            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff80219d67:	4c 21 e0             	and    %r12,%rax
ffffffff80219d6a:	48 0d 83 01 00 00    	or     $0x183,%rax
ffffffff80219d70:	48 89 01             	mov    %rax,(%rcx)
            RME_X64_Layout.Kom1_Start[0]+=sizeof(rme_ptr_t);
ffffffff80219d73:	48 8b 05 7e d7 00 00 	mov    0xd77e(%rip),%rax        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff80219d7a:	48 83 c0 08          	add    $0x8,%rax
ffffffff80219d7e:	48 89 05 73 d7 00 00 	mov    %rax,0xd773(%rip)        # ffffffff802274f8 <RME_X64_Layout+0x38>
            RME_X64_Layout.Kom1_Size[0]-=sizeof(rme_ptr_t);
ffffffff80219d85:	48 8b 05 6c d8 00 00 	mov    0xd86c(%rip),%rax        # ffffffff802275f8 <RME_X64_Layout+0x138>
ffffffff80219d8c:	48 83 e8 08          	sub    $0x8,%rax
ffffffff80219d90:	48 89 05 61 d8 00 00 	mov    %rax,0xd861(%rip)        # ffffffff802275f8 <RME_X64_Layout+0x138>
            RME_X64_Layout.Kom2_Size+=RME_POW2(RME_PGT_SIZE_2M);
ffffffff80219d97:	48 8b 05 72 d9 00 00 	mov    0xd972(%rip),%rax        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff80219d9e:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80219da4:	48 89 05 65 d9 00 00 	mov    %rax,0xd965(%rip)        # ffffffff80227710 <RME_X64_Layout+0x250>
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219dab:	48 3b 53 18          	cmp    0x18(%rbx),%rdx
ffffffff80219daf:	73 58                	jae    ffffffff80219e09 <__RME_Pgt_Kom_Init+0x6e9>
            PDE_Cnt++;
ffffffff80219db1:	48 83 c5 01          	add    $0x1,%rbp
            if(PDE_Cnt==512)
ffffffff80219db5:	48 81 fd 00 02 00 00 	cmp    $0x200,%rbp
ffffffff80219dbc:	75 94                	jne    ffffffff80219d52 <__RME_Pgt_Kom_Init+0x632>
                PDP_Cnt++;
ffffffff80219dbe:	49 83 c5 01          	add    $0x1,%r13
                if(PDP_Cnt==512)
ffffffff80219dc2:	49 81 fd 00 02 00 00 	cmp    $0x200,%r13
ffffffff80219dc9:	75 07                	jne    ffffffff80219dd2 <__RME_Pgt_Kom_Init+0x6b2>
                    PML4_Cnt++;
ffffffff80219dcb:	49 83 c6 01          	add    $0x1,%r14
                    PDP_Cnt=0;
ffffffff80219dcf:	45 31 ed             	xor    %r13d,%r13d
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff80219dd2:	48 8b 05 1f d7 00 00 	mov    0xd71f(%rip),%rax        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff80219dd9:	4c 89 f1             	mov    %r14,%rcx
                PDE_Cnt=0;
ffffffff80219ddc:	31 ed                	xor    %ebp,%ebp
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff80219dde:	48 c1 e1 09          	shl    $0x9,%rcx
ffffffff80219de2:	49 8d 8c 0d 00 02 00 	lea    0x200(%r13,%rcx,1),%rcx
ffffffff80219de9:	00 
ffffffff80219dea:	4c 01 f8             	add    %r15,%rax
ffffffff80219ded:	4c 21 e0             	and    %r12,%rax
ffffffff80219df0:	48 0b 04 cd 00 90 10 	or     -0x7fef7000(,%rcx,8),%rax
ffffffff80219df7:	80 
ffffffff80219df8:	48 83 c8 01          	or     $0x1,%rax
ffffffff80219dfc:	48 89 04 cd 00 90 10 	mov    %rax,-0x7fef7000(,%rcx,8)
ffffffff80219e03:	80 
ffffffff80219e04:	e9 49 ff ff ff       	jmp    ffffffff80219d52 <__RME_Pgt_Kom_Init+0x632>
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80219e09:	48 8b 1b             	mov    (%rbx),%rbx
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219e0c:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff80219e13:	0f 84 dc fb ff ff    	je     ffffffff802199f5 <__RME_Pgt_Kom_Init+0x2d5>
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219e19:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff80219e1d:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80219e23:	0f 87 01 ff ff ff    	ja     ffffffff80219d2a <__RME_Pgt_Kom_Init+0x60a>
            RME_DBG_S("\n\rAbandoning physical memory above 4G: addr 0x");
ffffffff80219e29:	48 c7 c7 60 cf 21 80 	mov    $0xffffffff8021cf60,%rdi
ffffffff80219e30:	e8 6b 40 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
            RME_DBG_U(Mem->Start_Addr);
ffffffff80219e35:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff80219e39:	e8 72 3e ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
            RME_DBG_S(", length 0x");
ffffffff80219e3e:	48 c7 c7 ea d0 21 80 	mov    $0xffffffff8021d0ea,%rdi
ffffffff80219e45:	e8 56 40 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
            RME_DBG_U(Mem->Length);
ffffffff80219e4a:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff80219e4e:	e8 5d 3e ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80219e53:	48 8b 1b             	mov    (%rbx),%rbx
            continue;
ffffffff80219e56:	eb b4                	jmp    ffffffff80219e0c <__RME_Pgt_Kom_Init+0x6ec>
        RME_DBG_S("\n\rThis CPU do not have 1GB superpage support");
ffffffff80219e58:	48 c7 c7 c8 ce 21 80 	mov    $0xffffffff8021cec8,%rdi
ffffffff80219e5f:	e8 3c 40 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff80219e64:	48 8b 05 8d 01 ff ff 	mov    -0xfe73(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff80219e6b:	f3 0f 7e 05 9d 01 ef 	movq   -0x10fe63(%rip),%xmm0        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80219e72:	ff 
ffffffff80219e73:	f3 0f 7e 0d 85 01 ef 	movq   -0x10fe7b(%rip),%xmm1        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80219e7a:	ff 
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
ffffffff80219e7b:	48 81 0d 6a 01 ff ff 	orq    $0x104001,-0xfe96(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff80219e82:	01 40 10 00 
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff80219e86:	0f 16 05 8b 01 ef ff 	movhps -0x10fe75(%rip),%xmm0        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80219e8d:	66 0f eb 05 fb 3b 00 	por    0x3bfb(%rip),%xmm0        # ffffffff8021da90 <Table.1+0x210>
ffffffff80219e94:	00 
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff80219e95:	48 0d 01 50 10 00    	or     $0x105001,%rax
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff80219e9b:	0f 16 0d 66 01 ef ff 	movhps -0x10fe9a(%rip),%xmm1        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80219ea2:	66 0f eb 0d f6 3b 00 	por    0x3bf6(%rip),%xmm1        # ffffffff8021daa0 <Table.1+0x220>
ffffffff80219ea9:	00 
ffffffff80219eaa:	0f 11 05 5f 01 ef ff 	movups %xmm0,-0x10fea1(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80219eb1:	0f 11 0d 48 01 ef ff 	movups %xmm1,-0x10feb8(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80219eb8:	e9 88 f9 ff ff       	jmp    ffffffff80219845 <__RME_Pgt_Kom_Init+0x125>
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size-1,RME_X64_KSTACK_ORDER);
ffffffff80219ebd:	48 8b 15 44 d8 00 00 	mov    0xd844(%rip),%rdx        # ffffffff80227708 <RME_X64_Layout+0x248>
ffffffff80219ec4:	48 8b 05 45 d8 00 00 	mov    0xd845(%rip),%rax        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff80219ecb:	48 8d 44 02 ff       	lea    -0x1(%rdx,%rax,1),%rax
ffffffff80219ed0:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff80219ed6:	48 89 05 3b d8 00 00 	mov    %rax,0xd83b(%rip)        # ffffffff80227718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80219edd:	48 8b 15 3c d8 00 00 	mov    0xd83c(%rip),%rdx        # ffffffff80227720 <RME_X64_Layout+0x260>
ffffffff80219ee4:	48 8b 05 2d d8 00 00 	mov    0xd82d(%rip),%rax        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80219eeb:	48 29 d0             	sub    %rdx,%rax
ffffffff80219eee:	48 89 05 23 d8 00 00 	mov    %rax,0xd823(%rip)        # ffffffff80227718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom2_Start;
ffffffff80219ef5:	48 8b 05 1c d8 00 00 	mov    0xd81c(%rip),%rax        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80219efc:	48 8b 15 05 d8 00 00 	mov    0xd805(%rip),%rdx        # ffffffff80227708 <RME_X64_Layout+0x248>
ffffffff80219f03:	48 29 d0             	sub    %rdx,%rax
ffffffff80219f06:	48 89 05 03 d8 00 00 	mov    %rax,0xd803(%rip)        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff80219f0d:	e9 c1 fb ff ff       	jmp    ffffffff80219ad3 <__RME_Pgt_Kom_Init+0x3b3>
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80219f12:	48 8b 15 b7 d5 00 00 	mov    0xd5b7(%rip),%rdx        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff80219f19:	48 8b 05 b8 d5 00 00 	mov    0xd5b8(%rip),%rax        # ffffffff802274d8 <RME_X64_Layout+0x18>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219f20:	48 b9 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rcx
ffffffff80219f27:	7f ff ff 
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80219f2a:	48 01 d0             	add    %rdx,%rax
ffffffff80219f2d:	48 89 05 c4 d5 00 00 	mov    %rax,0xd5c4(%rip)        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219f34:	48 8b 05 dd c0 00 00 	mov    0xc0dd(%rip),%rax        # ffffffff80226018 <RME_X64_PCID_Inc+0x8>
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80219f3b:	48 8b 15 b6 d5 00 00 	mov    0xd5b6(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219f42:	48 03 05 c7 c0 00 00 	add    0xc0c7(%rip),%rax        # ffffffff80226010 <RME_X64_PCID_Inc>
ffffffff80219f49:	48 01 c8             	add    %rcx,%rax
ffffffff80219f4c:	48 29 d0             	sub    %rdx,%rax
ffffffff80219f4f:	48 89 05 a2 d6 00 00 	mov    %rax,0xd6a2(%rip)        # ffffffff802275f8 <RME_X64_Layout+0x138>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80219f56:	31 c0                	xor    %eax,%eax
ffffffff80219f58:	bd 01 00 00 00       	mov    $0x1,%ebp
ffffffff80219f5d:	e9 2c fa ff ff       	jmp    ffffffff8021998e <__RME_Pgt_Kom_Init+0x26e>
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80219f62:	48 8b 05 67 d5 00 00 	mov    0xd567(%rip),%rax        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff80219f69:	48 8b 15 68 d5 00 00 	mov    0xd568(%rip),%rdx        # ffffffff802274d8 <RME_X64_Layout+0x18>
ffffffff80219f70:	48 01 d0             	add    %rdx,%rax
ffffffff80219f73:	48 89 05 7e d5 00 00 	mov    %rax,0xd57e(%rip)        # ffffffff802274f8 <RME_X64_Layout+0x38>
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80219f7a:	48 8b 15 77 d5 00 00 	mov    0xd577(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219f81:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff80219f88:	7f ff ff 
ffffffff80219f8b:	48 29 d0             	sub    %rdx,%rax
ffffffff80219f8e:	48 03 05 7b c0 00 00 	add    0xc07b(%rip),%rax        # ffffffff80226010 <RME_X64_PCID_Inc>
ffffffff80219f95:	48 03 05 7c c0 00 00 	add    0xc07c(%rip),%rax        # ffffffff80226018 <RME_X64_PCID_Inc+0x8>
ffffffff80219f9c:	48 89 05 55 d6 00 00 	mov    %rax,0xd655(%rip)        # ffffffff802275f8 <RME_X64_Layout+0x138>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219fa3:	eb b1                	jmp    ffffffff80219f56 <__RME_Pgt_Kom_Init+0x836>
ffffffff80219fa5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80219fac:	00 00 00 00 

ffffffff80219fb0 <__RME_SMP_Low_Level_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
rme_ptr_t __RME_SMP_Low_Level_Init(void)
{
ffffffff80219fb0:	f3 0f 1e fa          	endbr64
ffffffff80219fb4:	53                   	push   %rbx
    struct RME_CPU_Local* CPU_Local;

    /* Initialize all vector tables */
    __RME_X64_CPU_Local_Init();
ffffffff80219fb5:	e8 16 b6 ff ff       	call   ffffffff802155d0 <__RME_X64_CPU_Local_Init>
    /* Initialize LAPIC */
    __RME_X64_LAPIC_Init();
ffffffff80219fba:	e8 d1 b3 ff ff       	call   ffffffff80215390 <__RME_X64_LAPIC_Init>

    /* Check to see if we are booting this correctly */
    CPU_Local=RME_CPU_LOCAL();
ffffffff80219fbf:	e8 7b 18 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80219fc4:	48 89 c3             	mov    %rax,%rbx
    RME_ASSERT(CPU_Local->CPUID==RME_X64_CPU_Cnt);
ffffffff80219fc7:	48 8b 05 d2 d4 00 00 	mov    0xd4d2(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>

    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
ffffffff80219fce:	48 8b 15 cb d4 00 00 	mov    0xd4cb(%rip),%rdx        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff80219fd5:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80219fd9:	48 c7 82 a8 64 22 80 	movq   $0x1,-0x7fdd9b58(%rdx)
ffffffff80219fe0:	01 00 00 00 
    /* Spin until the global CPU counter is zero again, which means the booting
     * processor has done booting and we can proceed now */
    while(RME_X64_CPU_Cnt!=0);
ffffffff80219fe4:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80219fe8:	48 8b 15 b1 d4 00 00 	mov    0xd4b1(%rip),%rdx        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff80219fef:	48 85 d2             	test   %rdx,%rdx
ffffffff80219ff2:	75 f4                	jne    ffffffff80219fe8 <__RME_SMP_Low_Level_Init+0x38>
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgt_Set(rme_ptr_t Pgt)
{
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff80219ff4:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff80219ffb:	80 00 00 
    __RME_Pgt_Set(RME_CAP_GETOBJ((CPU_Local->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff80219ffe:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffffff8021a002:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021a006:	48 8b 40 30          	mov    0x30(%rax),%rax
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff8021a00a:	48 03 78 18          	add    0x18(%rax),%rdi
ffffffff8021a00e:	e8 96 18 ff ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
    __RME_Enter_User_Mode(0, RME_X64_USTACK(CPU_Local->CPUID), CPU_Local->CPUID);
ffffffff8021a013:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8021a016:	31 ff                	xor    %edi,%edi
ffffffff8021a018:	48 8d b2 01 04 00 00 	lea    0x401(%rdx),%rsi
ffffffff8021a01f:	48 c1 e6 0b          	shl    $0xb,%rsi
ffffffff8021a023:	e8 98 18 ff ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
}
ffffffff8021a028:	31 c0                	xor    %eax,%eax
ffffffff8021a02a:	5b                   	pop    %rbx
ffffffff8021a02b:	c3                   	ret
ffffffff8021a02c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8021a030 <__RME_Boot>:
{
ffffffff8021a030:	f3 0f 1e fa          	endbr64
ffffffff8021a034:	41 57                	push   %r15
    RME_DBG_S("\r\nCPU 0 local IDT/GDT init");
ffffffff8021a036:	48 c7 c7 24 d2 21 80 	mov    $0xffffffff8021d224,%rdi
{
ffffffff8021a03d:	41 56                	push   %r14
ffffffff8021a03f:	41 55                	push   %r13
ffffffff8021a041:	41 54                	push   %r12
ffffffff8021a043:	55                   	push   %rbp
ffffffff8021a044:	53                   	push   %rbx
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff8021a045:	48 bb 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rbx
ffffffff8021a04c:	80 ff ff 
{
ffffffff8021a04f:	48 83 ec 28          	sub    $0x28,%rsp
    RME_X64_CPU_Cnt=0;
ffffffff8021a053:	48 c7 05 42 d4 00 00 	movq   $0x0,0xd442(%rip)        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff8021a05a:	00 00 00 00 
    RME_DBG_S("\r\nCPU 0 local IDT/GDT init");
ffffffff8021a05e:	e8 3d 3e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    __RME_X64_CPU_Local_Init();
ffffffff8021a063:	e8 68 b5 ff ff       	call   ffffffff802155d0 <__RME_X64_CPU_Local_Init>
    RME_DBG_S("\r\nCPU 0 LAPIC init");
ffffffff8021a068:	48 c7 c7 3f d2 21 80 	mov    $0xffffffff8021d23f,%rdi
ffffffff8021a06f:	e8 2c 3e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S("\r\nPIC init");
ffffffff8021a074:	48 c7 c7 52 d2 21 80 	mov    $0xffffffff8021d252,%rdi
    __RME_X64_LAPIC_Init();
ffffffff8021a07b:	e8 10 b3 ff ff       	call   ffffffff80215390 <__RME_X64_LAPIC_Init>
    RME_DBG_S("\r\nPIC init");
ffffffff8021a080:	e8 1b 3e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff8021a085:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8021a08a:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8021a08f:	e8 76 17 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff8021a094:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8021a099:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8021a09e:	e8 67 17 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x11);
ffffffff8021a0a3:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff8021a0a8:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8021a0ad:	e8 58 17 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, RME_X64_INT_USER(0));
ffffffff8021a0b2:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8021a0b7:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8021a0bc:	e8 49 17 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 1<<2);
ffffffff8021a0c1:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff8021a0c6:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8021a0cb:	e8 3a 17 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0x3);
ffffffff8021a0d0:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021a0d5:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8021a0da:	e8 2b 17 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x11);
ffffffff8021a0df:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff8021a0e4:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8021a0e9:	e8 1c 17 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, RME_X64_INT_USER(8));
ffffffff8021a0ee:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff8021a0f3:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8021a0f8:	e8 0d 17 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 2);
ffffffff8021a0fd:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff8021a102:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8021a107:	e8 fe 16 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0x3);
ffffffff8021a10c:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021a111:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8021a116:	e8 ef 16 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x68);
ffffffff8021a11b:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff8021a120:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8021a125:	e8 e0 16 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x0A);
ffffffff8021a12a:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff8021a12f:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8021a134:	e8 d1 16 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x68);
ffffffff8021a139:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff8021a13e:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8021a143:	e8 c2 16 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x0A);
ffffffff8021a148:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff8021a14d:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8021a152:	e8 b3 16 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff8021a157:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8021a15c:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8021a161:	e8 a4 16 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff8021a166:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8021a16b:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8021a170:	e8 95 16 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    RME_DBG_S("\r\nIOAPIC init");
ffffffff8021a175:	48 c7 c7 5d d2 21 80 	mov    $0xffffffff8021d25d,%rdi
ffffffff8021a17c:	e8 1f 3d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff8021a181:	c7 03 01 00 00 00    	movl   $0x1,(%rbx)
    Max_Int=((Max_Int>>16)&0xFF);
ffffffff8021a187:	44 0f b6 63 12       	movzbl 0x12(%rbx),%r12d
    RME_DBG_S("\n\rMax int is: ");
ffffffff8021a18c:	48 c7 c7 6b d2 21 80 	mov    $0xffffffff8021d26b,%rdi
ffffffff8021a193:	e8 08 3d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_I(Max_Int);
ffffffff8021a198:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021a19b:	e8 10 3b ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_ID,IOAPIC_ID);
ffffffff8021a1a0:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
ffffffff8021a1a6:	8b 6b 10             	mov    0x10(%rbx),%ebp
    RME_DBG_S("\n\rIOAPIC ID is: ");
ffffffff8021a1a9:	48 c7 c7 7a d2 21 80 	mov    $0xffffffff8021d27a,%rdi
ffffffff8021a1b0:	e8 eb 3c ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    IOAPIC_ID>>=24;
ffffffff8021a1b5:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021a1b8:	48 c1 ef 18          	shr    $0x18,%rdi
    RME_DBG_I(IOAPIC_ID);
ffffffff8021a1bc:	e8 ef 3a ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,0);
ffffffff8021a1c1:	43 8d 44 24 11       	lea    0x11(%r12,%r12,1),%eax
ffffffff8021a1c6:	89 03                	mov    %eax,(%rbx)
ffffffff8021a1c8:	48 b8 10 00 c0 fe 00 	movabs $0xffff8000fec00010,%rax
ffffffff8021a1cf:	80 ff ff 
ffffffff8021a1d2:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    __RME_X64_SMP_Init();
ffffffff8021a1d8:	e8 53 ee ff ff       	call   ffffffff80219030 <__RME_X64_SMP_Init>
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff8021a1dd:	4c 8b 3d 14 d3 00 00 	mov    0xd314(%rip),%r15        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_DBG_S("\r\nKot registration start offset: 0x");
ffffffff8021a1e4:	48 c7 c7 90 cf 21 80 	mov    $0xffffffff8021cf90,%rdi
ffffffff8021a1eb:	e8 b0 3c ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff8021a1f0:	48 bf 00 00 00 02 00 	movabs $0x800002000000,%rdi
ffffffff8021a1f7:	80 00 00 
ffffffff8021a1fa:	4c 01 ff             	add    %r15,%rdi
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff8021a1fd:	49 8d 9f 00 00 00 02 	lea    0x2000000(%r15),%rbx
    RME_DBG_U(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff8021a204:	48 c1 ef 07          	shr    $0x7,%rdi
ffffffff8021a208:	e8 a3 3a ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_ASSERT(_RME_Cpt_Boot_Init(RME_BOOT_INIT_CPT,Cur_Addr,16)==RME_BOOT_INIT_CPT);
ffffffff8021a20d:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff8021a212:	48 89 de             	mov    %rbx,%rsi
ffffffff8021a215:	31 ff                	xor    %edi,%edi
ffffffff8021a217:	e8 24 55 ff ff       	call   ffffffff8020f740 <_RME_Cpt_Boot_Init>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(16));
ffffffff8021a21c:	49 8d 8f 00 10 00 02 	lea    0x2001000(%r15),%rcx
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff8021a223:	31 f6                	xor    %esi,%esi
    for(Count=0;Count<16;Count++)
ffffffff8021a225:	31 ed                	xor    %ebp,%ebp
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff8021a227:	49 81 c7 ff 2f 08 02 	add    $0x2082fff,%r15
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff8021a22e:	41 b8 11 20 00 00    	mov    $0x2011,%r8d
ffffffff8021a234:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021a239:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a23c:	e8 bf 55 ff ff       	call   ffffffff8020f800 <_RME_Cpt_Boot_Crt>
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8021a241:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff8021a247:	45 31 c0             	xor    %r8d,%r8d
ffffffff8021a24a:	31 d2                	xor    %edx,%edx
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff8021a24c:	49 81 e7 00 f0 ff ff 	and    $0xfffffffffffff000,%r15
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8021a253:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a258:	48 89 df             	mov    %rbx,%rdi
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff8021a25b:	4c 89 7c 24 10       	mov    %r15,0x10(%rsp)
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8021a260:	4c 89 f9             	mov    %r15,%rcx
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff8021a263:	4d 8d a7 00 10 00 00 	lea    0x1000(%r15),%r12
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8021a26a:	6a 09                	push   $0x9
ffffffff8021a26c:	6a 27                	push   $0x27
ffffffff8021a26e:	e8 ad 57 ff ff       	call   ffffffff8020fa20 <_RME_Pgt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff8021a273:	41 5a                	pop    %r10
ffffffff8021a275:	41 5b                	pop    %r11
ffffffff8021a277:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a27e:	00 00 
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff8021a280:	6a 09                	push   $0x9
ffffffff8021a282:	49 89 ed             	mov    %rbp,%r13
ffffffff8021a285:	48 83 c5 01          	add    $0x1,%rbp
ffffffff8021a289:	45 31 c9             	xor    %r9d,%r9d
ffffffff8021a28c:	6a 1e                	push   $0x1e
ffffffff8021a28e:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021a291:	45 31 c0             	xor    %r8d,%r8d
ffffffff8021a294:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a297:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a29c:	48 89 df             	mov    %rbx,%rdi
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8021a29f:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff8021a2a6:	e8 75 57 ff ff       	call   ffffffff8020fa20 <_RME_Pgt_Boot_Crt>
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4), Count,
ffffffff8021a2ab:	48 89 e9             	mov    %rbp,%rcx
ffffffff8021a2ae:	4c 89 ea             	mov    %r13,%rdx
ffffffff8021a2b1:	be 00 80 01 00       	mov    $0x18000,%esi
ffffffff8021a2b6:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8021a2bc:	48 81 c9 00 80 01 00 	or     $0x18000,%rcx
ffffffff8021a2c3:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a2c6:	e8 75 44 ff ff       	call   ffffffff8020e740 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<16;Count++)
ffffffff8021a2cb:	41 58                	pop    %r8
ffffffff8021a2cd:	41 59                	pop    %r9
ffffffff8021a2cf:	48 83 fd 10          	cmp    $0x10,%rbp
ffffffff8021a2d3:	75 ab                	jne    ffffffff8021a280 <__RME_Boot+0x250>
ffffffff8021a2d5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    for(Count=0;Count<8192;Count++)
ffffffff8021a2da:	31 ed                	xor    %ebp,%ebp
ffffffff8021a2dc:	4c 8d a0 00 10 01 00 	lea    0x11000(%rax),%r12
ffffffff8021a2e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff8021a2e8:	6a 09                	push   $0x9
ffffffff8021a2ea:	4c 8d 6d 11          	lea    0x11(%rbp),%r13
ffffffff8021a2ee:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021a2f1:	45 31 c9             	xor    %r9d,%r9d
ffffffff8021a2f4:	6a 15                	push   $0x15
ffffffff8021a2f6:	45 31 c0             	xor    %r8d,%r8d
ffffffff8021a2f9:	4c 89 ea             	mov    %r13,%rdx
ffffffff8021a2fc:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a301:	48 89 df             	mov    %rbx,%rdi
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8021a304:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff8021a30b:	e8 10 57 ff ff       	call   ffffffff8020fa20 <_RME_Pgt_Boot_Crt>
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff8021a310:	48 89 ee             	mov    %rbp,%rsi
ffffffff8021a313:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a316:	4c 89 e9             	mov    %r13,%rcx
ffffffff8021a319:	48 c1 fe 09          	sar    $0x9,%rsi
ffffffff8021a31d:	48 89 df             	mov    %rbx,%rdi
    for(Count=0;Count<8192;Count++)
ffffffff8021a320:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff8021a324:	48 81 c9 00 80 01 00 	or     $0x18000,%rcx
ffffffff8021a32b:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8021a32f:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
ffffffff8021a335:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8021a33b:	48 81 ce 00 80 01 00 	or     $0x18000,%rsi
ffffffff8021a342:	e8 f9 43 ff ff       	call   ffffffff8020e740 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<8192;Count++)
ffffffff8021a347:	5e                   	pop    %rsi
ffffffff8021a348:	5f                   	pop    %rdi
ffffffff8021a349:	48 81 fd 00 20 00 00 	cmp    $0x2000,%rbp
ffffffff8021a350:	75 96                	jne    ffffffff8021a2e8 <__RME_Boot+0x2b8>
ffffffff8021a352:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff8021a357:	4c 8b 3d 92 d1 00 00 	mov    0xd192(%rip),%r15        # ffffffff802274f0 <RME_X64_Layout+0x30>
ffffffff8021a35e:	bd 00 00 20 00       	mov    $0x200000,%ebp
ffffffff8021a363:	45 31 ed             	xor    %r13d,%r13d
ffffffff8021a366:	41 bc ff ff 1f 00    	mov    $0x1fffff,%r12d
ffffffff8021a36c:	48 05 00 10 01 02    	add    $0x2011000,%rax
ffffffff8021a372:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff8021a377:	4d 85 ff             	test   %r15,%r15
ffffffff8021a37a:	0f 84 c5 00 00 00    	je     ffffffff8021a445 <__RME_Boot+0x415>
ffffffff8021a380:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff8021a387:	00 00 
    Page_Ptr=0;
ffffffff8021a389:	45 31 ff             	xor    %r15d,%r15d
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021a38c:	49 bd 00 00 00 00 00 	movabs $0x800000000000,%r13
ffffffff8021a393:	80 00 00 
ffffffff8021a396:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021a39d:	00 00 00 
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a3a0:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff8021a3a5:	45 31 f6             	xor    %r14d,%r14d
ffffffff8021a3a8:	48 8d 6f 26          	lea    0x26(%rdi),%rbp
ffffffff8021a3ac:	4c 8d 67 06          	lea    0x6(%rdi),%r12
ffffffff8021a3b0:	48 8b 04 ed c8 74 22 	mov    -0x7fdd8b38(,%rbp,8),%rax
ffffffff8021a3b7:	80 
ffffffff8021a3b8:	48 85 c0             	test   %rax,%rax
ffffffff8021a3bb:	74 55                	je     ffffffff8021a412 <__RME_Boot+0x3e2>
ffffffff8021a3bd:	0f 1f 00             	nopl   (%rax)
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a3c0:	4c 89 fe             	mov    %r15,%rsi
ffffffff8021a3c3:	4c 89 f9             	mov    %r15,%rcx
ffffffff8021a3c6:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8021a3cc:	48 89 df             	mov    %rbx,%rdi
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021a3cf:	4a 8b 14 e5 c8 74 22 	mov    -0x7fdd8b38(,%r12,8),%rdx
ffffffff8021a3d6:	80 
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a3d7:	48 c1 ee 09          	shr    $0x9,%rsi
ffffffff8021a3db:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
            Page_Ptr++;
ffffffff8021a3e1:	49 83 c7 01          	add    $0x1,%r15
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a3e5:	48 83 c6 11          	add    $0x11,%rsi
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021a3e9:	4c 01 ea             	add    %r13,%rdx
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a3ec:	0f b7 f6             	movzwl %si,%esi
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021a3ef:	4c 01 f2             	add    %r14,%rdx
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a3f2:	48 81 ce 00 80 01 00 	or     $0x18000,%rsi
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a3f9:	49 81 c6 00 00 20 00 	add    $0x200000,%r14
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a400:	e8 eb 41 ff ff       	call   ffffffff8020e5f0 <_RME_Pgt_Boot_Add>
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a405:	48 8b 04 ed c8 74 22 	mov    -0x7fdd8b38(,%rbp,8),%rax
ffffffff8021a40c:	80 
ffffffff8021a40d:	49 39 c6             	cmp    %rax,%r14
ffffffff8021a410:	72 ae                	jb     ffffffff8021a3c0 <__RME_Boot+0x390>
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff8021a412:	48 83 44 24 08 01    	addq   $0x1,0x8(%rsp)
ffffffff8021a418:	48 8b 05 d1 d0 00 00 	mov    0xd0d1(%rip),%rax        # ffffffff802274f0 <RME_X64_Layout+0x30>
ffffffff8021a41f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff8021a424:	48 39 c7             	cmp    %rax,%rdi
ffffffff8021a427:	0f 82 73 ff ff ff    	jb     ffffffff8021a3a0 <__RME_Boot+0x370>
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8021a42d:	4c 89 fd             	mov    %r15,%rbp
    RME_DBG_U(Page_Ptr);
ffffffff8021a430:	4d 89 fd             	mov    %r15,%r13
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8021a433:	48 c1 e5 15          	shl    $0x15,%rbp
ffffffff8021a437:	4c 8d a5 ff ff 1f 00 	lea    0x1fffff(%rbp),%r12
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M));
ffffffff8021a43e:	48 81 c5 00 00 20 00 	add    $0x200000,%rbp
    RME_DBG_S("\r\nKom1 pages: 0x");
ffffffff8021a445:	48 c7 c7 8b d2 21 80 	mov    $0xffffffff8021d28b,%rdi
ffffffff8021a44c:	e8 4f 3a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(Page_Ptr);
ffffffff8021a451:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021a454:	e8 57 38 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S(", [0x0, 0x");
ffffffff8021a459:	48 c7 c7 9c d2 21 80 	mov    $0xffffffff8021d29c,%rdi
ffffffff8021a460:	e8 3b 3a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8021a465:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021a468:	e8 43 38 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("]");
ffffffff8021a46d:	48 c7 c7 a7 d2 21 80 	mov    $0xffffffff8021d2a7,%rdi
ffffffff8021a474:	e8 27 3a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S("\r\nKom2 pages: 0x");
ffffffff8021a479:	48 c7 c7 a9 d2 21 80 	mov    $0xffffffff8021d2a9,%rdi
ffffffff8021a480:	e8 1b 3a ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M));
ffffffff8021a485:	48 8b 3d 84 d2 00 00 	mov    0xd284(%rip),%rdi        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff8021a48c:	48 c1 ef 15          	shr    $0x15,%rdi
ffffffff8021a490:	e8 1b 38 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S(", [0x");
ffffffff8021a495:	48 c7 c7 ba d2 21 80 	mov    $0xffffffff8021d2ba,%rdi
ffffffff8021a49c:	e8 ff 39 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M));
ffffffff8021a4a1:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021a4a4:	e8 07 38 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S(", 0x");
ffffffff8021a4a9:	48 c7 c7 a2 d2 21 80 	mov    $0xffffffff8021d2a2,%rdi
ffffffff8021a4b0:	e8 eb 39 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a4b5:	48 8b 05 54 d2 00 00 	mov    0xd254(%rip),%rax        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff8021a4bc:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021a4c0:	0f 84 b5 00 00 00    	je     ffffffff8021a57b <__RME_Boot+0x54b>
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a4c6:	49 bd 00 f0 ff ff ff 	movabs $0xffffffffff000,%r13
ffffffff8021a4cd:	ff 0f 00 
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a4d0:	41 bc 00 08 00 00    	mov    $0x800,%r12d
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a4d6:	48 bd 00 00 00 00 00 	movabs $0xffff800000000000,%rbp
ffffffff8021a4dd:	80 ff ff 
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a4e0:	4c 89 e0             	mov    %r12,%rax
ffffffff8021a4e3:	4c 89 e2             	mov    %r12,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a4e6:	4c 89 fe             	mov    %r15,%rsi
ffffffff8021a4e9:	4c 89 f9             	mov    %r15,%rcx
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a4ec:	48 c1 f8 12          	sar    $0x12,%rax
ffffffff8021a4f0:	48 c1 fa 09          	sar    $0x9,%rdx
        Page_Ptr++;
ffffffff8021a4f4:	49 83 c7 01          	add    $0x1,%r15
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a4f8:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a4fe:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
ffffffff8021a504:	48 c1 e0 09          	shl    $0x9,%rax
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a508:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a50e:	48 8d 84 02 00 02 00 	lea    0x200(%rdx,%rax,1),%rax
ffffffff8021a515:	00 
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a516:	4c 89 e2             	mov    %r12,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a519:	48 c1 ee 09          	shr    $0x9,%rsi
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a51d:	49 83 c4 01          	add    $0x1,%r12
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a521:	48 8b 3c c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rdi
ffffffff8021a528:	80 
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a529:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a52f:	48 83 c6 11          	add    $0x11,%rsi
ffffffff8021a533:	0f b7 f6             	movzwl %si,%esi
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a536:	4c 21 ef             	and    %r13,%rdi
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a539:	48 81 ce 00 80 01 00 	or     $0x18000,%rsi
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a540:	48 8d 04 d7          	lea    (%rdi,%rdx,8),%rax
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a544:	48 89 df             	mov    %rbx,%rdi
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a547:	48 8b 14 28          	mov    (%rax,%rbp,1),%rdx
ffffffff8021a54b:	4c 21 ea             	and    %r13,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a54e:	e8 9d 40 ff ff       	call   ffffffff8020e5f0 <_RME_Pgt_Boot_Add>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a553:	48 8b 05 b6 d1 00 00 	mov    0xd1b6(%rip),%rax        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff8021a55a:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021a55e:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021a564:	49 39 c4             	cmp    %rax,%r12
ffffffff8021a567:	0f 82 73 ff ff ff    	jb     ffffffff8021a4e0 <__RME_Boot+0x4b0>
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8021a56d:	4d 89 f9             	mov    %r15,%r9
ffffffff8021a570:	49 c1 e1 15          	shl    $0x15,%r9
ffffffff8021a574:	4d 8d a1 ff ff 1f 00 	lea    0x1fffff(%r9),%r12
ffffffff8021a57b:	4c 89 e7             	mov    %r12,%rdi
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a57e:	31 ed                	xor    %ebp,%ebp
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8021a580:	e8 2b 37 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("]");
ffffffff8021a585:	48 c7 c7 a7 d2 21 80 	mov    $0xffffffff8021d2a7,%rdi
ffffffff8021a58c:	e8 0f 39 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_ASSERT(_RME_Prc_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_PRC,
ffffffff8021a591:	41 b8 00 80 01 00    	mov    $0x18000,%r8d
ffffffff8021a597:	31 c9                	xor    %ecx,%ecx
ffffffff8021a599:	31 f6                	xor    %esi,%esi
ffffffff8021a59b:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff8021a5a0:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a5a3:	e8 88 5e ff ff       	call   ffffffff80210430 <_RME_Prc_Boot_Crt>
    RME_ASSERT(_RME_Kfn_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_KERN)==0);
ffffffff8021a5a8:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021a5ad:	31 f6                	xor    %esi,%esi
ffffffff8021a5af:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a5b2:	e8 49 ac ff ff       	call   ffffffff80215200 <_RME_Kfn_Boot_Crt>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_KOM, Cur_Addr, RME_X64_KOM1_MAXSEGS+1)==0);
ffffffff8021a5b7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
ffffffff8021a5bc:	31 f6                	xor    %esi,%esi
ffffffff8021a5be:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a5c1:	41 b8 21 00 00 00    	mov    $0x21,%r8d
ffffffff8021a5c7:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff8021a5cc:	e8 2f 52 ff ff       	call   ffffffff8020f800 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff8021a5d1:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a5d6:	48 8b 05 13 cf 00 00 	mov    0xcf13(%rip),%rax        # ffffffff802274f0 <RME_X64_Layout+0x30>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff8021a5dd:	49 81 c7 00 20 01 02 	add    $0x2012000,%r15
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a5e4:	48 85 c0             	test   %rax,%rax
ffffffff8021a5e7:	74 51                	je     ffffffff8021a63a <__RME_Boot+0x60a>
ffffffff8021a5e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a5f0:	48 8d 45 06          	lea    0x6(%rbp),%rax
ffffffff8021a5f4:	48 8d 55 26          	lea    0x26(%rbp),%rdx
ffffffff8021a5f8:	41 b9 0f 00 00 00    	mov    $0xf,%r9d
ffffffff8021a5fe:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a601:	48 8b 34 c5 c8 74 22 	mov    -0x7fdd8b38(,%rax,8),%rsi
ffffffff8021a608:	80 
ffffffff8021a609:	48 8b 14 d5 c8 74 22 	mov    -0x7fdd8b38(,%rdx,8),%rdx
ffffffff8021a610:	80 
ffffffff8021a611:	48 8b 0c c5 c8 74 22 	mov    -0x7fdd8b38(,%rax,8),%rcx
ffffffff8021a618:	80 
ffffffff8021a619:	4c 8d 04 16          	lea    (%rsi,%rdx,1),%r8
ffffffff8021a61d:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a620:	be 05 00 00 00       	mov    $0x5,%esi
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a625:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a629:	e8 c2 5b ff ff       	call   ffffffff802101f0 <_RME_Kom_Boot_Crt>
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a62e:	48 8b 05 bb ce 00 00 	mov    0xcebb(%rip),%rax        # ffffffff802274f0 <RME_X64_Layout+0x30>
ffffffff8021a635:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a638:	72 b6                	jb     ffffffff8021a5f0 <__RME_Boot+0x5c0>
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a63a:	41 b9 0d 00 00 00    	mov    $0xd,%r9d
ffffffff8021a640:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff8021a645:	48 89 df             	mov    %rbx,%rdi
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a648:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a64a:	48 8b 15 b7 d0 00 00 	mov    0xd0b7(%rip),%rdx        # ffffffff80227708 <RME_X64_Layout+0x248>
ffffffff8021a651:	48 8b 05 b8 d0 00 00 	mov    0xd0b8(%rip),%rax        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff8021a658:	48 8b 0d a9 d0 00 00 	mov    0xd0a9(%rip),%rcx        # ffffffff80227708 <RME_X64_Layout+0x248>
ffffffff8021a65f:	4c 8d 04 02          	lea    (%rdx,%rax,1),%r8
ffffffff8021a663:	ba 20 00 00 00       	mov    $0x20,%edx
ffffffff8021a668:	e8 83 5b ff ff       	call   ffffffff802101f0 <_RME_Kom_Boot_Crt>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a66d:	4c 89 f9             	mov    %r15,%rcx
ffffffff8021a670:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff8021a675:	31 f6                	xor    %esi,%esi
ffffffff8021a677:	4c 8b 05 2a ce 00 00 	mov    0xce2a(%rip),%r8        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021a67e:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a681:	e8 7a 51 ff ff       	call   ffffffff8020f800 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a686:	4c 8b 25 1b ce 00 00 	mov    0xce1b(%rip),%r12        # ffffffff802274a8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a68d:	48 8b 05 14 ce 00 00 	mov    0xce14(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a694:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8021a698:	49 81 c4 ff 0f 00 00 	add    $0xfff,%r12
ffffffff8021a69f:	49 81 e4 00 f0 ff ff 	and    $0xfffffffffffff000,%r12
ffffffff8021a6a6:	4d 01 fc             	add    %r15,%r12
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a6a9:	48 85 c0             	test   %rax,%rax
ffffffff8021a6ac:	74 46                	je     ffffffff8021a6f4 <__RME_Boot+0x6c4>
ffffffff8021a6ae:	66 90                	xchg   %ax,%ax
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021a6b0:	48 8b 0d 19 ce 00 00 	mov    0xce19(%rip),%rcx        # ffffffff802274d0 <RME_X64_Layout+0x10>
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a6b7:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a6ba:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a6bd:	48 89 df             	mov    %rbx,%rdi
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a6c0:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021a6c4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a6c8:	48 03 83 98 01 00 00 	add    0x198(%rbx),%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a6cf:	be 06 00 00 00       	mov    $0x6,%esi
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a6d4:	48 89 84 11 10 14 00 	mov    %rax,0x1410(%rcx,%rdx,1)
ffffffff8021a6db:	00 
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a6dc:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a6df:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a6e3:	e8 a8 64 ff ff       	call   ffffffff80210b90 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a6e8:	48 8b 05 b9 cd 00 00 	mov    0xcdb9(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021a6ef:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a6f2:	72 bc                	jb     ffffffff8021a6b0 <__RME_Boot+0x680>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a6f4:	4c 8b 05 ad cd 00 00 	mov    0xcdad(%rip),%r8        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021a6fb:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021a6fe:	31 f6                	xor    %esi,%esi
ffffffff8021a700:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a703:	ba 07 00 00 00       	mov    $0x7,%edx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a708:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a70a:	e8 f1 50 ff ff       	call   ffffffff8020f800 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a70f:	4c 8b 2d 92 cd 00 00 	mov    0xcd92(%rip),%r13        # ffffffff802274a8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a716:	48 8b 05 8b cd 00 00 	mov    0xcd8b(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a71d:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8021a721:	49 81 c5 ff 0f 00 00 	add    $0xfff,%r13
ffffffff8021a728:	49 81 e5 00 f0 ff ff 	and    $0xfffffffffffff000,%r13
ffffffff8021a72f:	4d 01 e5             	add    %r12,%r13
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a732:	48 85 c0             	test   %rax,%rax
ffffffff8021a735:	74 4d                	je     ffffffff8021a784 <__RME_Boot+0x754>
ffffffff8021a737:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a73e:	00 00 
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021a740:	48 8b 0d 89 cd 00 00 	mov    0xcd89(%rip),%rcx        # ffffffff802274d0 <RME_X64_Layout+0x10>
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a747:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a74a:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a74d:	48 89 df             	mov    %rbx,%rdi
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a750:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021a754:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a758:	48 03 83 d8 01 00 00 	add    0x1d8(%rbx),%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a75f:	be 07 00 00 00       	mov    $0x7,%esi
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a764:	48 89 84 11 18 14 00 	mov    %rax,0x1418(%rcx,%rdx,1)
ffffffff8021a76b:	00 
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a76c:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a76f:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a773:	e8 18 64 ff ff       	call   ffffffff80210b90 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a778:	48 8b 05 29 cd 00 00 	mov    0xcd29(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021a77f:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a782:	72 bc                	jb     ffffffff8021a740 <__RME_Boot+0x710>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a784:	4c 8b 05 1d cd 00 00 	mov    0xcd1d(%rip),%r8        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021a78b:	4c 89 e9             	mov    %r13,%rcx
ffffffff8021a78e:	31 f6                	xor    %esi,%esi
ffffffff8021a790:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a793:	ba 03 00 00 00       	mov    $0x3,%edx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a798:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a79a:	e8 61 50 ff ff       	call   ffffffff8020f800 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a79f:	4c 8b 25 02 cd 00 00 	mov    0xcd02(%rip),%r12        # ffffffff802274a8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a7a6:	48 8b 05 fb cc 00 00 	mov    0xccfb(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a7ad:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8021a7b1:	49 81 c4 ff 0f 00 00 	add    $0xfff,%r12
ffffffff8021a7b8:	49 81 e4 00 f0 ff ff 	and    $0xfffffffffffff000,%r12
ffffffff8021a7bf:	4d 01 ec             	add    %r13,%r12
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a7c2:	48 85 c0             	test   %rax,%rax
ffffffff8021a7c5:	74 58                	je     ffffffff8021a81f <__RME_Boot+0x7ef>
ffffffff8021a7c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a7ce:	00 00 
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021a7d0:	48 8b 15 f9 cc 00 00 	mov    0xccf9(%rip),%rdx        # ffffffff802274d0 <RME_X64_Layout+0x10>
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021a7d7:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a7da:	4d 89 e0             	mov    %r12,%r8
ffffffff8021a7dd:	45 31 c9             	xor    %r9d,%r9d
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021a7e0:	48 c1 e0 0d          	shl    $0xd,%rax
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a7e4:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8021a7e8:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff8021a7ed:	48 89 df             	mov    %rbx,%rdi
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021a7f0:	48 8d 84 02 00 14 00 	lea    0x1400(%rdx,%rax,1),%rax
ffffffff8021a7f7:	00 
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a7f8:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021a7fd:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a800:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a804:	50                   	push   %rax
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_THD_SIZE(Count));
ffffffff8021a805:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a80c:	e8 8f 5f ff ff       	call   ffffffff802107a0 <_RME_Thd_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a811:	48 8b 05 90 cc 00 00 	mov    0xcc90(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021a818:	5a                   	pop    %rdx
ffffffff8021a819:	59                   	pop    %rcx
ffffffff8021a81a:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a81d:	72 b1                	jb     ffffffff8021a7d0 <__RME_Boot+0x7a0>
    RME_DBG_S("\r\nKot registration end offset: 0x");
ffffffff8021a81f:	48 c7 c7 b8 cf 21 80 	mov    $0xffffffff8021cfb8,%rdi
    RME_DBG_U(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff8021a826:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff8021a82d:	80 00 00 
    RME_DBG_S("\r\nKot registration end offset: 0x");
ffffffff8021a830:	e8 6b 36 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff8021a835:	49 8d 3c 1c          	lea    (%r12,%rbx,1),%rdi
ffffffff8021a839:	48 c1 ef 07          	shr    $0x7,%rdi
ffffffff8021a83d:	e8 6e 34 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\r\nKom1 frontier: 0x");
ffffffff8021a842:	48 c7 c7 c0 d2 21 80 	mov    $0xffffffff8021d2c0,%rdi
ffffffff8021a849:	e8 52 36 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_U(Cur_Addr);
ffffffff8021a84e:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021a851:	e8 5a 34 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\r\nThread object size: ");
ffffffff8021a856:	48 c7 c7 d4 d2 21 80 	mov    $0xffffffff8021d2d4,%rdi
ffffffff8021a85d:	e8 3e 36 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Thd_Struct)/sizeof(rme_ptr_t));
ffffffff8021a862:	bf 16 00 00 00       	mov    $0x16,%edi
ffffffff8021a867:	e8 44 34 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\r\nInvocation object size: ");
ffffffff8021a86c:	48 c7 c7 eb d2 21 80 	mov    $0xffffffff8021d2eb,%rdi
ffffffff8021a873:	e8 28 36 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Inv_Struct)/sizeof(rme_ptr_t));
ffffffff8021a878:	bf 09 00 00 00       	mov    $0x9,%edi
ffffffff8021a87d:	e8 2e 34 ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\r\nTimer init\r\n");
ffffffff8021a882:	48 c7 c7 06 d3 21 80 	mov    $0xffffffff8021d306,%rdi
ffffffff8021a889:	e8 12 36 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    __RME_X64_Out(RME_X64_PIT_CMD,0x34);
ffffffff8021a88e:	be 34 00 00 00       	mov    $0x34,%esi
ffffffff8021a893:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff8021a898:	e8 6d 0f ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,(1193182/2/RME_X64_TIMER_FREQ)&0xFF);
ffffffff8021a89d:	be 54 00 00 00       	mov    $0x54,%esi
ffffffff8021a8a2:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff8021a8a7:	e8 5e 0f ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,((1193182/2/RME_X64_TIMER_FREQ)>>8)&0xFF);
ffffffff8021a8ac:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff8021a8b1:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff8021a8b6:	e8 4f 0f ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,CPUID<<24);
ffffffff8021a8bb:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8021a8c2:	80 ff ff 
ffffffff8021a8c5:	c7 00 15 00 00 00    	movl   $0x15,(%rax)
ffffffff8021a8cb:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
    __RME_Pgt_Set(RME_CAP_GETOBJ((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff8021a8d2:	e8 68 0f ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021a8d7:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a8db:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021a8df:	48 8b 40 30          	mov    0x30(%rax),%rax
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff8021a8e3:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8021a8e7:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a8ea:	e8 ba 0f ff ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
    _RME_Memcpy(0,(void*)UVM_Init,RME_POW2(RME_PGT_SIZE_2M));
ffffffff8021a8ef:	ba 00 00 20 00       	mov    $0x200000,%edx
ffffffff8021a8f4:	48 c7 c6 a0 b7 21 80 	mov    $0xffffffff8021b7a0,%rsi
ffffffff8021a8fb:	31 ff                	xor    %edi,%edi
ffffffff8021a8fd:	e8 8e 3b ff ff       	call   ffffffff8020e490 <_RME_Memcpy>
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff8021a902:	31 d2                	xor    %edx,%edx
ffffffff8021a904:	be 00 08 20 00       	mov    $0x200800,%esi
ffffffff8021a909:	31 ff                	xor    %edi,%edi
    RME_X64_CPU_Cnt=0;
ffffffff8021a90b:	48 c7 05 8a cb 00 00 	movq   $0x0,0xcb8a(%rip)        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff8021a912:	00 00 00 00 
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff8021a916:	e8 a5 0f ff ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
}
ffffffff8021a91b:	48 83 c4 28          	add    $0x28,%rsp
ffffffff8021a91f:	31 c0                	xor    %eax,%eax
ffffffff8021a921:	5b                   	pop    %rbx
ffffffff8021a922:	5d                   	pop    %rbp
ffffffff8021a923:	41 5c                	pop    %r12
ffffffff8021a925:	41 5d                	pop    %r13
ffffffff8021a927:	41 5e                	pop    %r14
ffffffff8021a929:	41 5f                	pop    %r15
ffffffff8021a92b:	c3                   	ret
ffffffff8021a92c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8021a930 <__RME_Reboot>:
{
ffffffff8021a930:	f3 0f 1e fa          	endbr64
}
ffffffff8021a934:	c3                   	ret
ffffffff8021a935:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a93c:	00 00 00 00 

ffffffff8021a940 <__RME_Shutdown>:
void __RME_Shutdown(void)
ffffffff8021a940:	f3 0f 1e fa          	endbr64
ffffffff8021a944:	c3                   	ret
ffffffff8021a945:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a94c:	00 00 00 00 

ffffffff8021a950 <__RME_Get_Syscall_Param>:
{
ffffffff8021a950:	f3 0f 1e fa          	endbr64
    *Svc=(Reg->RDI)>>32;
ffffffff8021a954:	8b 47 2c             	mov    0x2c(%rdi),%eax
ffffffff8021a957:	48 89 06             	mov    %rax,(%rsi)
    *Capid=(Reg->RDI)&0xFFFFFFFF;
ffffffff8021a95a:	8b 47 28             	mov    0x28(%rdi),%eax
ffffffff8021a95d:	48 89 02             	mov    %rax,(%rdx)
    Param[0]=Reg->RSI;
ffffffff8021a960:	48 8b 47 20          	mov    0x20(%rdi),%rax
ffffffff8021a964:	48 89 01             	mov    %rax,(%rcx)
    Param[1]=Reg->RDX;
ffffffff8021a967:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8021a96b:	48 89 41 08          	mov    %rax,0x8(%rcx)
    Param[2]=Reg->R8;
ffffffff8021a96f:	48 8b 47 38          	mov    0x38(%rdi),%rax
ffffffff8021a973:	48 89 41 10          	mov    %rax,0x10(%rcx)
}
ffffffff8021a977:	c3                   	ret
ffffffff8021a978:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a97f:	00 

ffffffff8021a980 <__RME_Set_Syscall_Retval>:
{
ffffffff8021a980:	f3 0f 1e fa          	endbr64
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff8021a984:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8021a987:	c3                   	ret
ffffffff8021a988:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a98f:	00 

ffffffff8021a990 <__RME_Thd_Reg_Init>:
{
ffffffff8021a990:	f3 0f 1e fa          	endbr64
    Reg->INT_NUM=0x10000;
ffffffff8021a994:	66 0f 6f 05 14 31 00 	movdqa 0x3114(%rip),%xmm0        # ffffffff8021dab0 <Table.1+0x230>
ffffffff8021a99b:	00 
    Reg->RDI=Param;
ffffffff8021a99c:	49 89 48 28          	mov    %rcx,0x28(%r8)
    Reg->RIP=Entry;
ffffffff8021a9a0:	49 89 b0 88 00 00 00 	mov    %rsi,0x88(%r8)
    Reg->CS=RME_X64_SEG_USER_CODE;
ffffffff8021a9a7:	49 c7 80 90 00 00 00 	movq   $0x2b,0x90(%r8)
ffffffff8021a9ae:	2b 00 00 00 
    Reg->RFLAGS=0x3200;
ffffffff8021a9b2:	49 c7 80 98 00 00 00 	movq   $0x3200,0x98(%r8)
ffffffff8021a9b9:	00 32 00 00 
    Reg->RSP=Stack;
ffffffff8021a9bd:	49 89 90 a0 00 00 00 	mov    %rdx,0xa0(%r8)
    Reg->SS=RME_X64_SEG_USER_DATA;
ffffffff8021a9c4:	49 c7 80 a8 00 00 00 	movq   $0x23,0xa8(%r8)
ffffffff8021a9cb:	23 00 00 00 
    Reg->INT_NUM=0x10000;
ffffffff8021a9cf:	41 0f 11 40 78       	movups %xmm0,0x78(%r8)
}
ffffffff8021a9d4:	c3                   	ret
ffffffff8021a9d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a9dc:	00 00 00 00 

ffffffff8021a9e0 <__RME_Thd_Reg_Copy>:
{
ffffffff8021a9e0:	f3 0f 1e fa          	endbr64
    Dst->RAX=Src->RAX;
ffffffff8021a9e4:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff8021a9e7:	48 89 0f             	mov    %rcx,(%rdi)
    Dst->RBX=Src->RBX;
ffffffff8021a9ea:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
ffffffff8021a9ee:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
    Dst->RCX=Src->RCX;
ffffffff8021a9f2:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
ffffffff8021a9f6:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
    Dst->RDX=Src->RDX;
ffffffff8021a9fa:	48 8b 4e 18          	mov    0x18(%rsi),%rcx
ffffffff8021a9fe:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
    Dst->RSI=Src->RSI;
ffffffff8021aa02:	48 8b 4e 20          	mov    0x20(%rsi),%rcx
ffffffff8021aa06:	48 89 4f 20          	mov    %rcx,0x20(%rdi)
    Dst->RDI=Src->RDI;
ffffffff8021aa0a:	48 8b 4e 28          	mov    0x28(%rsi),%rcx
ffffffff8021aa0e:	48 89 4f 28          	mov    %rcx,0x28(%rdi)
    Dst->RBP=Src->RBP;
ffffffff8021aa12:	48 8b 4e 30          	mov    0x30(%rsi),%rcx
ffffffff8021aa16:	48 89 4f 30          	mov    %rcx,0x30(%rdi)
    Dst->R8=Src->R8;
ffffffff8021aa1a:	48 8b 4e 38          	mov    0x38(%rsi),%rcx
ffffffff8021aa1e:	48 89 4f 38          	mov    %rcx,0x38(%rdi)
    Dst->R9=Src->R9;
ffffffff8021aa22:	48 8b 4e 40          	mov    0x40(%rsi),%rcx
ffffffff8021aa26:	48 89 4f 40          	mov    %rcx,0x40(%rdi)
    Dst->R10=Src->R10;
ffffffff8021aa2a:	48 8b 4e 48          	mov    0x48(%rsi),%rcx
ffffffff8021aa2e:	48 89 4f 48          	mov    %rcx,0x48(%rdi)
    Dst->R11=Src->R11;
ffffffff8021aa32:	48 8b 4e 50          	mov    0x50(%rsi),%rcx
ffffffff8021aa36:	48 89 4f 50          	mov    %rcx,0x50(%rdi)
    Dst->R12=Src->R12;
ffffffff8021aa3a:	48 8b 4e 58          	mov    0x58(%rsi),%rcx
ffffffff8021aa3e:	48 89 4f 58          	mov    %rcx,0x58(%rdi)
    Dst->R13=Src->R13;
ffffffff8021aa42:	48 8b 4e 60          	mov    0x60(%rsi),%rcx
ffffffff8021aa46:	48 89 4f 60          	mov    %rcx,0x60(%rdi)
    Dst->R14=Src->R14;
ffffffff8021aa4a:	48 8b 4e 68          	mov    0x68(%rsi),%rcx
ffffffff8021aa4e:	48 89 4f 68          	mov    %rcx,0x68(%rdi)
    Dst->R15=Src->R15;
ffffffff8021aa52:	48 8b 4e 70          	mov    0x70(%rsi),%rcx
ffffffff8021aa56:	48 89 4f 70          	mov    %rcx,0x70(%rdi)
    Dst->INT_NUM=Src->INT_NUM;
ffffffff8021aa5a:	48 8b 4e 78          	mov    0x78(%rsi),%rcx
ffffffff8021aa5e:	48 89 4f 78          	mov    %rcx,0x78(%rdi)
    Dst->ERROR_CODE=Src->ERROR_CODE;
ffffffff8021aa62:	48 8b 8e 80 00 00 00 	mov    0x80(%rsi),%rcx
ffffffff8021aa69:	48 89 8f 80 00 00 00 	mov    %rcx,0x80(%rdi)
    Dst->RIP=Src->RIP;
ffffffff8021aa70:	48 8b 8e 88 00 00 00 	mov    0x88(%rsi),%rcx
ffffffff8021aa77:	48 89 8f 88 00 00 00 	mov    %rcx,0x88(%rdi)
    Dst->CS=Src->CS;
ffffffff8021aa7e:	48 8b 8e 90 00 00 00 	mov    0x90(%rsi),%rcx
ffffffff8021aa85:	48 89 8f 90 00 00 00 	mov    %rcx,0x90(%rdi)
    Dst->RFLAGS=Src->RFLAGS;
ffffffff8021aa8c:	48 8b 8e 98 00 00 00 	mov    0x98(%rsi),%rcx
ffffffff8021aa93:	48 89 8f 98 00 00 00 	mov    %rcx,0x98(%rdi)
    Dst->RSP=Src->RSP;
ffffffff8021aa9a:	48 8b 8e a0 00 00 00 	mov    0xa0(%rsi),%rcx
ffffffff8021aaa1:	48 89 8f a0 00 00 00 	mov    %rcx,0xa0(%rdi)
    Dst->SS=Src->SS;
ffffffff8021aaa8:	48 8b 96 a8 00 00 00 	mov    0xa8(%rsi),%rdx
ffffffff8021aaaf:	48 89 97 a8 00 00 00 	mov    %rdx,0xa8(%rdi)
}
ffffffff8021aab6:	c3                   	ret
ffffffff8021aab7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021aabe:	00 00 

ffffffff8021aac0 <__RME_Thd_Cop_Init>:
void __RME_Thd_Cop_Init(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
ffffffff8021aac0:	f3 0f 1e fa          	endbr64
ffffffff8021aac4:	c3                   	ret
ffffffff8021aac5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021aacc:	00 00 00 00 

ffffffff8021aad0 <__RME_Thd_Cop_Save>:
void __RME_Thd_Cop_Save(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
ffffffff8021aad0:	f3 0f 1e fa          	endbr64
ffffffff8021aad4:	c3                   	ret
ffffffff8021aad5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021aadc:	00 00 00 00 

ffffffff8021aae0 <__RME_Thd_Cop_Restore>:
void __RME_Thd_Cop_Restore(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
ffffffff8021aae0:	f3 0f 1e fa          	endbr64
ffffffff8021aae4:	c3                   	ret
ffffffff8021aae5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021aaec:	00 00 00 00 

ffffffff8021aaf0 <__RME_Inv_Reg_Save>:
{
ffffffff8021aaf0:	f3 0f 1e fa          	endbr64
    Ret->RIP=Reg->RIP;
ffffffff8021aaf4:	48 8b 86 88 00 00 00 	mov    0x88(%rsi),%rax
ffffffff8021aafb:	48 89 07             	mov    %rax,(%rdi)
    Ret->RSP=Reg->RSP;
ffffffff8021aafe:	48 8b 86 a0 00 00 00 	mov    0xa0(%rsi),%rax
ffffffff8021ab05:	48 89 47 08          	mov    %rax,0x8(%rdi)
}
ffffffff8021ab09:	c3                   	ret
ffffffff8021ab0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021ab10 <__RME_Inv_Reg_Restore>:
{
ffffffff8021ab10:	f3 0f 1e fa          	endbr64
    Reg->RIP=Ret->RIP;
ffffffff8021ab14:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021ab17:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
    Reg->RSP=Ret->RSP;
ffffffff8021ab1e:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8021ab22:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
}
ffffffff8021ab29:	c3                   	ret
ffffffff8021ab2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021ab30 <__RME_Set_Inv_Retval>:
{
ffffffff8021ab30:	f3 0f 1e fa          	endbr64
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff8021ab34:	48 89 77 28          	mov    %rsi,0x28(%rdi)
}
ffffffff8021ab38:	c3                   	ret
ffffffff8021ab39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021ab40 <write_string>:
{
ffffffff8021ab40:	f3 0f 1e fa          	endbr64
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021ab44:	48 b8 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rax
ffffffff8021ab4b:	80 ff ff 
ffffffff8021ab4e:	48 01 c2             	add    %rax,%rdx
    while( *string != 0 )
ffffffff8021ab51:	0f b6 06             	movzbl (%rsi),%eax
ffffffff8021ab54:	84 c0                	test   %al,%al
ffffffff8021ab56:	74 20                	je     ffffffff8021ab78 <write_string+0x38>
ffffffff8021ab58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021ab5f:	00 
        *video++ = *string++;
ffffffff8021ab60:	88 02                	mov    %al,(%rdx)
ffffffff8021ab62:	48 83 c6 01          	add    $0x1,%rsi
        *video++ = colour;
ffffffff8021ab66:	48 89 d0             	mov    %rdx,%rax
ffffffff8021ab69:	48 83 c2 02          	add    $0x2,%rdx
ffffffff8021ab6d:	40 88 78 01          	mov    %dil,0x1(%rax)
    while( *string != 0 )
ffffffff8021ab71:	0f b6 06             	movzbl (%rsi),%eax
ffffffff8021ab74:	84 c0                	test   %al,%al
ffffffff8021ab76:	75 e8                	jne    ffffffff8021ab60 <write_string+0x20>
}
ffffffff8021ab78:	c3                   	ret
ffffffff8021ab79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021ab80 <NDBG>:
{
ffffffff8021ab80:	f3 0f 1e fa          	endbr64
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021ab84:	48 b8 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rax
ffffffff8021ab8b:	80 ff ff 
    while( *string != 0 )
ffffffff8021ab8e:	b9 48 00 00 00       	mov    $0x48,%ecx
ffffffff8021ab93:	48 c7 c2 15 d3 21 80 	mov    $0xffffffff8021d315,%rdx
ffffffff8021ab9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        *video++ = *string++;
ffffffff8021aba0:	88 08                	mov    %cl,(%rax)
ffffffff8021aba2:	48 83 c2 01          	add    $0x1,%rdx
        *video++ = colour;
ffffffff8021aba6:	48 89 c1             	mov    %rax,%rcx
ffffffff8021aba9:	48 83 c0 02          	add    $0x2,%rax
ffffffff8021abad:	c6 41 01 07          	movb   $0x7,0x1(%rcx)
    while( *string != 0 )
ffffffff8021abb1:	0f b6 0a             	movzbl (%rdx),%ecx
ffffffff8021abb4:	84 c9                	test   %cl,%cl
ffffffff8021abb6:	75 e8                	jne    ffffffff8021aba0 <NDBG+0x20>
}
ffffffff8021abb8:	c3                   	ret
ffffffff8021abb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021abc0 <__RME_Kern_Func_Handler>:
{
ffffffff8021abc0:	f3 0f 1e fa          	endbr64
    String[0]=Param1/10000000+'0';
ffffffff8021abc4:	48 b8 bd 42 7a e5 d5 	movabs $0xd6bf94d5e57a42bd,%rax
ffffffff8021abcb:	94 bf d6 
{
ffffffff8021abce:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021abd1:	41 55                	push   %r13
    String[2]=(Param1/100000)%10+'0';
ffffffff8021abd3:	4d 89 c2             	mov    %r8,%r10
    String[0]=Param1/10000000+'0';
ffffffff8021abd6:	49 f7 e0             	mul    %r8
{
ffffffff8021abd9:	41 54                	push   %r12
    String[2]=(Param1/100000)%10+'0';
ffffffff8021abdb:	49 c1 ea 05          	shr    $0x5,%r10
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021abdf:	48 b8 db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rax
ffffffff8021abe6:	de 1b 43 
ffffffff8021abe9:	49 bc cd cc cc cc cc 	movabs $0xcccccccccccccccd,%r12
ffffffff8021abf0:	cc cc cc 
{
ffffffff8021abf3:	55                   	push   %rbp
    String[5]=(Param1/100)%10+'0';
ffffffff8021abf4:	4c 89 c5             	mov    %r8,%rbp
{
ffffffff8021abf7:	53                   	push   %rbx
    String[4]=(Param1/1000)%10+'0';
ffffffff8021abf8:	4c 89 c3             	mov    %r8,%rbx
    String[5]=(Param1/100)%10+'0';
ffffffff8021abfb:	48 c1 ed 02          	shr    $0x2,%rbp
    String[0]=Param1/10000000+'0';
ffffffff8021abff:	48 89 d7             	mov    %rdx,%rdi
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021ac02:	49 f7 e0             	mul    %r8
    String[4]=(Param1/1000)%10+'0';
ffffffff8021ac05:	48 c1 eb 03          	shr    $0x3,%rbx
    String[0]=Param1/10000000+'0';
ffffffff8021ac09:	48 c1 ef 17          	shr    $0x17,%rdi
{
ffffffff8021ac0d:	48 83 ec 18          	sub    $0x18,%rsp
    String[0]=Param1/10000000+'0';
ffffffff8021ac11:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff8021ac15:	f3 0f 7e 05 6b 31 00 	movq   0x316b(%rip),%xmm0        # ffffffff8021dd88 <RME_X64_Pgflg_RME2NAT+0x108>
ffffffff8021ac1c:	00 
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021ac1d:	49 89 d1             	mov    %rdx,%r9
    String[8]='\0';
ffffffff8021ac20:	c6 44 24 08 00       	movb   $0x0,0x8(%rsp)
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021ac25:	49 c1 e9 12          	shr    $0x12,%r9
ffffffff8021ac29:	4c 89 c8             	mov    %r9,%rax
ffffffff8021ac2c:	49 f7 e4             	mul    %r12
ffffffff8021ac2f:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021ac33:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021ac37:	48 01 c0             	add    %rax,%rax
ffffffff8021ac3a:	49 29 c1             	sub    %rax,%r9
    String[2]=(Param1/100000)%10+'0';
ffffffff8021ac3d:	48 b8 43 78 b4 71 c4 	movabs $0xa7c5ac471b47843,%rax
ffffffff8021ac44:	5a 7c 0a 
ffffffff8021ac47:	49 f7 e2             	mul    %r10
    String[0]=Param1/10000000+'0';
ffffffff8021ac4a:	45 0f b6 c9          	movzbl %r9b,%r9d
    String[2]=(Param1/100000)%10+'0';
ffffffff8021ac4e:	49 89 d2             	mov    %rdx,%r10
ffffffff8021ac51:	49 c1 ea 07          	shr    $0x7,%r10
ffffffff8021ac55:	4c 89 d0             	mov    %r10,%rax
ffffffff8021ac58:	49 f7 e4             	mul    %r12
ffffffff8021ac5b:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021ac5f:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021ac63:	48 01 c0             	add    %rax,%rax
ffffffff8021ac66:	49 29 c2             	sub    %rax,%r10
    String[3]=(Param1/10000)%10+'0';
ffffffff8021ac69:	48 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rax
ffffffff8021ac70:	c5 6d 34 
ffffffff8021ac73:	49 f7 e0             	mul    %r8
    String[0]=Param1/10000000+'0';
ffffffff8021ac76:	45 0f b6 d2          	movzbl %r10b,%r10d
    String[3]=(Param1/10000)%10+'0';
ffffffff8021ac7a:	49 89 d3             	mov    %rdx,%r11
ffffffff8021ac7d:	49 c1 eb 0b          	shr    $0xb,%r11
ffffffff8021ac81:	4c 89 d8             	mov    %r11,%rax
ffffffff8021ac84:	49 f7 e4             	mul    %r12
ffffffff8021ac87:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021ac8b:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021ac8f:	48 01 c0             	add    %rax,%rax
ffffffff8021ac92:	49 29 c3             	sub    %rax,%r11
    String[4]=(Param1/1000)%10+'0';
ffffffff8021ac95:	48 b8 cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rax
ffffffff8021ac9c:	9b c4 20 
ffffffff8021ac9f:	48 f7 e3             	mul    %rbx
    String[0]=Param1/10000000+'0';
ffffffff8021aca2:	45 0f b6 db          	movzbl %r11b,%r11d
    String[4]=(Param1/1000)%10+'0';
ffffffff8021aca6:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021aca9:	48 c1 eb 04          	shr    $0x4,%rbx
ffffffff8021acad:	48 89 d8             	mov    %rbx,%rax
ffffffff8021acb0:	49 f7 e4             	mul    %r12
ffffffff8021acb3:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021acb7:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021acbb:	48 01 c0             	add    %rax,%rax
ffffffff8021acbe:	48 29 c3             	sub    %rax,%rbx
    String[5]=(Param1/100)%10+'0';
ffffffff8021acc1:	48 b8 c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rax
ffffffff8021acc8:	c2 f5 28 
ffffffff8021accb:	48 f7 e5             	mul    %rbp
    String[0]=Param1/10000000+'0';
ffffffff8021acce:	0f b6 db             	movzbl %bl,%ebx
    String[5]=(Param1/100)%10+'0';
ffffffff8021acd1:	48 89 d5             	mov    %rdx,%rbp
ffffffff8021acd4:	48 c1 ed 02          	shr    $0x2,%rbp
ffffffff8021acd8:	48 89 e8             	mov    %rbp,%rax
ffffffff8021acdb:	49 f7 e4             	mul    %r12
ffffffff8021acde:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021ace2:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021ace6:	48 01 c0             	add    %rax,%rax
ffffffff8021ace9:	48 29 c5             	sub    %rax,%rbp
    String[6]=(Param1/10)%10+'0';
ffffffff8021acec:	4c 89 c0             	mov    %r8,%rax
ffffffff8021acef:	49 f7 e4             	mul    %r12
    String[0]=Param1/10000000+'0';
ffffffff8021acf2:	40 0f b6 ed          	movzbl %bpl,%ebp
    String[6]=(Param1/10)%10+'0';
ffffffff8021acf6:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021acfa:	48 89 d0             	mov    %rdx,%rax
ffffffff8021acfd:	49 89 d5             	mov    %rdx,%r13
ffffffff8021ad00:	49 f7 e4             	mul    %r12
ffffffff8021ad03:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021ad07:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021ad0b:	4c 89 ea             	mov    %r13,%rdx
ffffffff8021ad0e:	48 01 c0             	add    %rax,%rax
ffffffff8021ad11:	48 29 c2             	sub    %rax,%rdx
    String[7]=(Param1)%10+'0';
ffffffff8021ad14:	4b 8d 44 ad 00       	lea    0x0(%r13,%r13,4),%rax
ffffffff8021ad19:	48 01 c0             	add    %rax,%rax
    String[0]=Param1/10000000+'0';
ffffffff8021ad1c:	0f b6 d2             	movzbl %dl,%edx
    String[7]=(Param1)%10+'0';
ffffffff8021ad1f:	49 29 c0             	sub    %rax,%r8
    String[0]=Param1/10000000+'0';
ffffffff8021ad22:	41 0f b6 c0          	movzbl %r8b,%eax
ffffffff8021ad26:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021ad2a:	48 09 d0             	or     %rdx,%rax
ffffffff8021ad2d:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021ad31:	48 09 e8             	or     %rbp,%rax
ffffffff8021ad34:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021ad38:	48 09 d8             	or     %rbx,%rax
ffffffff8021ad3b:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021ad3f:	4c 09 d8             	or     %r11,%rax
ffffffff8021ad42:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021ad46:	4c 09 d0             	or     %r10,%rax
ffffffff8021ad49:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021ad4d:	4c 09 c8             	or     %r9,%rax
ffffffff8021ad50:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021ad54:	48 09 f8             	or     %rdi,%rax
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021ad57:	48 bf 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rdi
ffffffff8021ad5e:	80 ff ff 
    String[0]=Param1/10000000+'0';
ffffffff8021ad61:	66 48 0f 6e c8       	movq   %rax,%xmm1
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021ad66:	48 01 f9             	add    %rdi,%rcx
    String[0]=Param1/10000000+'0';
ffffffff8021ad69:	66 0f fc c1          	paddb  %xmm1,%xmm0
ffffffff8021ad6d:	66 48 0f 7e c2       	movq   %xmm0,%rdx
ffffffff8021ad72:	66 0f d6 04 24       	movq   %xmm0,(%rsp)
    while( *string != 0 )
ffffffff8021ad77:	84 d2                	test   %dl,%dl
ffffffff8021ad79:	74 1d                	je     ffffffff8021ad98 <__RME_Kern_Func_Handler+0x1d8>
ffffffff8021ad7b:	89 d0                	mov    %edx,%eax
        *video++ = colour;
ffffffff8021ad7d:	48 89 e2             	mov    %rsp,%rdx
        *video++ = *string++;
ffffffff8021ad80:	88 01                	mov    %al,(%rcx)
ffffffff8021ad82:	48 83 c2 01          	add    $0x1,%rdx
        *video++ = colour;
ffffffff8021ad86:	48 89 c8             	mov    %rcx,%rax
ffffffff8021ad89:	48 83 c1 02          	add    $0x2,%rcx
ffffffff8021ad8d:	40 88 70 01          	mov    %sil,0x1(%rax)
    while( *string != 0 )
ffffffff8021ad91:	0f b6 02             	movzbl (%rdx),%eax
ffffffff8021ad94:	84 c0                	test   %al,%al
ffffffff8021ad96:	75 e8                	jne    ffffffff8021ad80 <__RME_Kern_Func_Handler+0x1c0>
}
ffffffff8021ad98:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021ad9c:	31 c0                	xor    %eax,%eax
ffffffff8021ad9e:	5b                   	pop    %rbx
ffffffff8021ad9f:	5d                   	pop    %rbp
ffffffff8021ada0:	41 5c                	pop    %r12
ffffffff8021ada2:	41 5d                	pop    %r13
ffffffff8021ada4:	c3                   	ret
ffffffff8021ada5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021adac:	00 00 00 00 

ffffffff8021adb0 <__RME_X64_Fault_Handler>:
{
ffffffff8021adb0:	f3 0f 1e fa          	endbr64
ffffffff8021adb4:	55                   	push   %rbp
ffffffff8021adb5:	48 89 f5             	mov    %rsi,%rbp
ffffffff8021adb8:	53                   	push   %rbx
ffffffff8021adb9:	48 89 fb             	mov    %rdi,%rbx
    RME_DBG_S("\n\r\n\r*** Fault: ");RME_DBG_I(Reason);RME_DBG_S(" - ");
ffffffff8021adbc:	48 c7 c7 1a d3 21 80 	mov    $0xffffffff8021d31a,%rdi
{
ffffffff8021adc3:	48 83 ec 08          	sub    $0x8,%rsp
    RME_DBG_S("\n\r\n\r*** Fault: ");RME_DBG_I(Reason);RME_DBG_S(" - ");
ffffffff8021adc7:	e8 d4 30 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021adcc:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021adcf:	e8 dc 2e ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
ffffffff8021add4:	48 c7 c7 2a d3 21 80 	mov    $0xffffffff8021d32a,%rdi
ffffffff8021addb:	e8 c0 30 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    switch(Reason)
ffffffff8021ade0:	48 83 fd 14          	cmp    $0x14,%rbp
ffffffff8021ade4:	0f 87 44 03 00 00    	ja     ffffffff8021b12e <__RME_X64_Fault_Handler+0x37e>
ffffffff8021adea:	3e ff 24 ed c0 da 21 	notrack jmp *-0x7fde2540(,%rbp,8)
ffffffff8021adf1:	80 
        case RME_X64_FAULT_VE:RME_DBG_S("Virtualization exception");break;
ffffffff8021adf2:	48 c7 c7 9a d4 21 80 	mov    $0xffffffff8021d49a,%rdi
ffffffff8021adf9:	e8 a2 30 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_S("\n\rRAX:        0x");RME_DBG_U(Reg->RAX);
ffffffff8021adfe:	48 c7 c7 c5 d4 21 80 	mov    $0xffffffff8021d4c5,%rdi
ffffffff8021ae05:	e8 96 30 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021ae0a:	48 8b 3b             	mov    (%rbx),%rdi
ffffffff8021ae0d:	e8 9e 2e ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rRBX:        0x");RME_DBG_U(Reg->RBX);
ffffffff8021ae12:	48 c7 c7 d6 d4 21 80 	mov    $0xffffffff8021d4d6,%rdi
ffffffff8021ae19:	e8 82 30 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021ae1e:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
ffffffff8021ae22:	e8 89 2e ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rRCX:        0x");RME_DBG_U(Reg->RCX);
ffffffff8021ae27:	48 c7 c7 e7 d4 21 80 	mov    $0xffffffff8021d4e7,%rdi
ffffffff8021ae2e:	e8 6d 30 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021ae33:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff8021ae37:	e8 74 2e ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rRDX:        0x");RME_DBG_U(Reg->RDX);
ffffffff8021ae3c:	48 c7 c7 f8 d4 21 80 	mov    $0xffffffff8021d4f8,%rdi
ffffffff8021ae43:	e8 58 30 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021ae48:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff8021ae4c:	e8 5f 2e ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rRSI:        0x");RME_DBG_U(Reg->RSI);
ffffffff8021ae51:	48 c7 c7 09 d5 21 80 	mov    $0xffffffff8021d509,%rdi
ffffffff8021ae58:	e8 43 30 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021ae5d:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
ffffffff8021ae61:	e8 4a 2e ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rRDI:        0x");RME_DBG_U(Reg->RDI);
ffffffff8021ae66:	48 c7 c7 1a d5 21 80 	mov    $0xffffffff8021d51a,%rdi
ffffffff8021ae6d:	e8 2e 30 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021ae72:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
ffffffff8021ae76:	e8 35 2e ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rRBP:        0x");RME_DBG_U(Reg->RBP);
ffffffff8021ae7b:	48 c7 c7 2b d5 21 80 	mov    $0xffffffff8021d52b,%rdi
ffffffff8021ae82:	e8 19 30 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021ae87:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
ffffffff8021ae8b:	e8 20 2e ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rR8:         0x");RME_DBG_U(Reg->R8);
ffffffff8021ae90:	48 c7 c7 3c d5 21 80 	mov    $0xffffffff8021d53c,%rdi
ffffffff8021ae97:	e8 04 30 ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021ae9c:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
ffffffff8021aea0:	e8 0b 2e ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rR9:         0x");RME_DBG_U(Reg->R9);
ffffffff8021aea5:	48 c7 c7 4d d5 21 80 	mov    $0xffffffff8021d54d,%rdi
ffffffff8021aeac:	e8 ef 2f ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021aeb1:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
ffffffff8021aeb5:	e8 f6 2d ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rR10:        0x");RME_DBG_U(Reg->R10);
ffffffff8021aeba:	48 c7 c7 5e d5 21 80 	mov    $0xffffffff8021d55e,%rdi
ffffffff8021aec1:	e8 da 2f ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021aec6:	48 8b 7b 48          	mov    0x48(%rbx),%rdi
ffffffff8021aeca:	e8 e1 2d ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rR11:        0x");RME_DBG_U(Reg->R11);
ffffffff8021aecf:	48 c7 c7 6f d5 21 80 	mov    $0xffffffff8021d56f,%rdi
ffffffff8021aed6:	e8 c5 2f ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021aedb:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
ffffffff8021aedf:	e8 cc 2d ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rR12:        0x");RME_DBG_U(Reg->R12);
ffffffff8021aee4:	48 c7 c7 80 d5 21 80 	mov    $0xffffffff8021d580,%rdi
ffffffff8021aeeb:	e8 b0 2f ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021aef0:	48 8b 7b 58          	mov    0x58(%rbx),%rdi
ffffffff8021aef4:	e8 b7 2d ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rR13:        0x");RME_DBG_U(Reg->R13);
ffffffff8021aef9:	48 c7 c7 91 d5 21 80 	mov    $0xffffffff8021d591,%rdi
ffffffff8021af00:	e8 9b 2f ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021af05:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
ffffffff8021af09:	e8 a2 2d ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rR14:        0x");RME_DBG_U(Reg->R14);
ffffffff8021af0e:	48 c7 c7 a2 d5 21 80 	mov    $0xffffffff8021d5a2,%rdi
ffffffff8021af15:	e8 86 2f ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021af1a:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
ffffffff8021af1e:	e8 8d 2d ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rR15:        0x");RME_DBG_U(Reg->R15);
ffffffff8021af23:	48 c7 c7 b3 d5 21 80 	mov    $0xffffffff8021d5b3,%rdi
ffffffff8021af2a:	e8 71 2f ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021af2f:	48 8b 7b 70          	mov    0x70(%rbx),%rdi
ffffffff8021af33:	e8 78 2d ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rINT_NUM:    0x");RME_DBG_U(Reg->INT_NUM);
ffffffff8021af38:	48 c7 c7 c4 d5 21 80 	mov    $0xffffffff8021d5c4,%rdi
ffffffff8021af3f:	e8 5c 2f ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021af44:	48 8b 7b 78          	mov    0x78(%rbx),%rdi
ffffffff8021af48:	e8 63 2d ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rERROR_CODE: 0x");RME_DBG_U(Reg->ERROR_CODE);
ffffffff8021af4d:	48 c7 c7 d5 d5 21 80 	mov    $0xffffffff8021d5d5,%rdi
ffffffff8021af54:	e8 47 2f ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021af59:	48 8b bb 80 00 00 00 	mov    0x80(%rbx),%rdi
ffffffff8021af60:	e8 4b 2d ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rRIP:        0x");RME_DBG_U(Reg->RIP);
ffffffff8021af65:	48 c7 c7 e6 d5 21 80 	mov    $0xffffffff8021d5e6,%rdi
ffffffff8021af6c:	e8 2f 2f ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021af71:	48 8b bb 88 00 00 00 	mov    0x88(%rbx),%rdi
ffffffff8021af78:	e8 33 2d ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rCS:         0x");RME_DBG_U(Reg->CS);
ffffffff8021af7d:	48 c7 c7 f7 d5 21 80 	mov    $0xffffffff8021d5f7,%rdi
ffffffff8021af84:	e8 17 2f ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021af89:	48 8b bb 90 00 00 00 	mov    0x90(%rbx),%rdi
ffffffff8021af90:	e8 1b 2d ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rRFLAGS:     0x");RME_DBG_U(Reg->RFLAGS);
ffffffff8021af95:	48 c7 c7 08 d6 21 80 	mov    $0xffffffff8021d608,%rdi
ffffffff8021af9c:	e8 ff 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021afa1:	48 8b bb 98 00 00 00 	mov    0x98(%rbx),%rdi
ffffffff8021afa8:	e8 03 2d ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rRSP:        0x");RME_DBG_U(Reg->RSP);
ffffffff8021afad:	48 c7 c7 19 d6 21 80 	mov    $0xffffffff8021d619,%rdi
ffffffff8021afb4:	e8 e7 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021afb9:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
ffffffff8021afc0:	e8 eb 2c ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rSS:         0x");RME_DBG_U(Reg->SS);
ffffffff8021afc5:	48 c7 c7 2a d6 21 80 	mov    $0xffffffff8021d62a,%rdi
ffffffff8021afcc:	e8 cf 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021afd1:	48 8b bb a8 00 00 00 	mov    0xa8(%rbx),%rdi
ffffffff8021afd8:	e8 d3 2c ff ff       	call   ffffffff8020dcb0 <RME_Int_Print>
    RME_DBG_S("\n\rHang");
ffffffff8021afdd:	48 c7 c7 3b d6 21 80 	mov    $0xffffffff8021d63b,%rdi
ffffffff8021afe4:	e8 b7 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    while(1);
ffffffff8021afe9:	eb fe                	jmp    ffffffff8021afe9 <__RME_X64_Fault_Handler+0x239>
        case RME_X64_FAULT_XM:RME_DBG_S("SIMD floating-point exception");break;
ffffffff8021afeb:	48 c7 c7 7c d4 21 80 	mov    $0xffffffff8021d47c,%rdi
ffffffff8021aff2:	e8 a9 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021aff7:	e9 02 fe ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_ABORT_MC:RME_DBG_S("Machine check exception");break;
ffffffff8021affc:	48 c7 c7 64 d4 21 80 	mov    $0xffffffff8021d464,%rdi
ffffffff8021b003:	e8 98 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b008:	e9 f1 fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_AC:RME_DBG_S("Alignment check exception");break;
ffffffff8021b00d:	48 c7 c7 4a d4 21 80 	mov    $0xffffffff8021d44a,%rdi
ffffffff8021b014:	e8 87 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b019:	e9 e0 fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_MF:RME_DBG_S("X87 FPU floating-point error:");break;
ffffffff8021b01e:	48 c7 c7 2c d4 21 80 	mov    $0xffffffff8021d42c,%rdi
ffffffff8021b025:	e8 76 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b02a:	e9 cf fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_PF:RME_DBG_S("Page fault exception");break;
ffffffff8021b02f:	48 c7 c7 17 d4 21 80 	mov    $0xffffffff8021d417,%rdi
ffffffff8021b036:	e8 65 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b03b:	e9 be fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_GP:RME_DBG_S("General protection exception");break;
ffffffff8021b040:	48 c7 c7 fa d3 21 80 	mov    $0xffffffff8021d3fa,%rdi
ffffffff8021b047:	e8 54 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b04c:	e9 ad fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_SS:RME_DBG_S("Stack fault exception");break;
ffffffff8021b051:	48 c7 c7 e4 d3 21 80 	mov    $0xffffffff8021d3e4,%rdi
ffffffff8021b058:	e8 43 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b05d:	e9 9c fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_NP:RME_DBG_S("Segment not present");break;
ffffffff8021b062:	48 c7 c7 d0 d3 21 80 	mov    $0xffffffff8021d3d0,%rdi
ffffffff8021b069:	e8 32 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b06e:	e9 8b fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_TS:RME_DBG_S("Invalid TSS exception");break;
ffffffff8021b073:	48 c7 c7 ba d3 21 80 	mov    $0xffffffff8021d3ba,%rdi
ffffffff8021b07a:	e8 21 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b07f:	e9 7a fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_ABORT_OLD_MF:RME_DBG_S("Coprocessor overrun - not used later on");break;
ffffffff8021b084:	48 c7 c7 00 d0 21 80 	mov    $0xffffffff8021d000,%rdi
ffffffff8021b08b:	e8 10 2e ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b090:	e9 69 fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_ABORT_DF:RME_DBG_S("Double(nested) fault exception");break;
ffffffff8021b095:	48 c7 c7 e0 cf 21 80 	mov    $0xffffffff8021cfe0,%rdi
ffffffff8021b09c:	e8 ff 2d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b0a1:	e9 58 fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_NM:RME_DBG_S("Device not available");break;
ffffffff8021b0a6:	48 c7 c7 a5 d3 21 80 	mov    $0xffffffff8021d3a5,%rdi
ffffffff8021b0ad:	e8 ee 2d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b0b2:	e9 47 fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_UD:RME_DBG_S("Undefined instruction");break;
ffffffff8021b0b7:	48 c7 c7 8f d3 21 80 	mov    $0xffffffff8021d38f,%rdi
ffffffff8021b0be:	e8 dd 2d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b0c3:	e9 36 fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_BR:RME_DBG_S("Bound range exception");break;
ffffffff8021b0c8:	48 c7 c7 79 d3 21 80 	mov    $0xffffffff8021d379,%rdi
ffffffff8021b0cf:	e8 cc 2d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b0d4:	e9 25 fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_TRAP_OF:RME_DBG_S("Overflow exception");break;
ffffffff8021b0d9:	48 c7 c7 66 d3 21 80 	mov    $0xffffffff8021d366,%rdi
ffffffff8021b0e0:	e8 bb 2d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b0e5:	e9 14 fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_TRAP_BP:RME_DBG_S("Debug breakpoint");break;
ffffffff8021b0ea:	48 c7 c7 55 d3 21 80 	mov    $0xffffffff8021d355,%rdi
ffffffff8021b0f1:	e8 aa 2d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b0f6:	e9 03 fd ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_INT_NMI:RME_DBG_S("NMI error");break;
ffffffff8021b0fb:	48 c7 c7 4b d3 21 80 	mov    $0xffffffff8021d34b,%rdi
ffffffff8021b102:	e8 99 2d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b107:	e9 f2 fc ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_TRAP_DB:RME_DBG_S("Debug exception");break;
ffffffff8021b10c:	48 c7 c7 3b d3 21 80 	mov    $0xffffffff8021d33b,%rdi
ffffffff8021b113:	e8 88 2d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b118:	e9 e1 fc ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_DE:RME_DBG_S("Divide error");break;
ffffffff8021b11d:	48 c7 c7 2e d3 21 80 	mov    $0xffffffff8021d32e,%rdi
ffffffff8021b124:	e8 77 2d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b129:	e9 d0 fc ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
        default:RME_DBG_S("Unknown exception");break;
ffffffff8021b12e:	48 c7 c7 b3 d4 21 80 	mov    $0xffffffff8021d4b3,%rdi
ffffffff8021b135:	e8 66 2d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
ffffffff8021b13a:	e9 bf fc ff ff       	jmp    ffffffff8021adfe <__RME_X64_Fault_Handler+0x4e>
ffffffff8021b13f:	90                   	nop

ffffffff8021b140 <__RME_X64_Generic_Handler>:
{
ffffffff8021b140:	f3 0f 1e fa          	endbr64
ffffffff8021b144:	53                   	push   %rbx
    RME_DBG_S("\r\nGeneral int:");
ffffffff8021b145:	48 c7 c7 42 d6 21 80 	mov    $0xffffffff8021d642,%rdi
{
ffffffff8021b14c:	48 89 f3             	mov    %rsi,%rbx
    RME_DBG_S("\r\nGeneral int:");
ffffffff8021b14f:	e8 4c 2d ff ff       	call   ffffffff8020dea0 <RME_Str_Print>
    RME_DBG_I(Int_Num);
ffffffff8021b154:	48 89 df             	mov    %rbx,%rdi
}
ffffffff8021b157:	5b                   	pop    %rbx
    RME_DBG_I(Int_Num);
ffffffff8021b158:	e9 53 2b ff ff       	jmp    ffffffff8020dcb0 <RME_Int_Print>
ffffffff8021b15d:	0f 1f 00             	nopl   (%rax)

ffffffff8021b160 <__RME_Pgt_Set>:
{
ffffffff8021b160:	f3 0f 1e fa          	endbr64
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff8021b164:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8021b16b:	80 00 00 
ffffffff8021b16e:	48 01 c7             	add    %rax,%rdi
ffffffff8021b171:	e9 33 07 ff ff       	jmp    ffffffff8020b8a9 <__RME_X64_Pgt_Set>
ffffffff8021b176:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021b17d:	00 00 00 

ffffffff8021b180 <__RME_Pgt_Check>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Check(rme_ptr_t Base_Addr, rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order, rme_ptr_t Num_Order, rme_ptr_t Vaddr)
{
ffffffff8021b180:	f3 0f 1e fa          	endbr64
    /* Is the table address aligned to 4kB? */
    if((Vaddr&0xFFF)!=0)
        return RME_ERR_HAL_FAIL;
ffffffff8021b184:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    if((Vaddr&0xFFF)!=0)
ffffffff8021b18b:	41 f7 c0 ff 0f 00 00 	test   $0xfff,%r8d
ffffffff8021b192:	75 34                	jne    ffffffff8021b1c8 <__RME_Pgt_Check+0x48>

    /* Is the size order allowed? */
    if((Size_Order!=RME_PGT_SIZE_512G)&&(Size_Order!=RME_PGT_SIZE_1G)&&
       (Size_Order!=RME_PGT_SIZE_2M)&&(Size_Order!=RME_PGT_SIZE_4K))
ffffffff8021b194:	48 83 fa 27          	cmp    $0x27,%rdx
ffffffff8021b198:	77 2e                	ja     ffffffff8021b1c8 <__RME_Pgt_Check+0x48>
ffffffff8021b19a:	48 bf ff ef df bf 7f 	movabs $0xffffff7fbfdfefff,%rdi
ffffffff8021b1a1:	ff ff ff 
ffffffff8021b1a4:	48 0f a3 d7          	bt     %rdx,%rdi
ffffffff8021b1a8:	72 1e                	jb     ffffffff8021b1c8 <__RME_Pgt_Check+0x48>
        return RME_ERR_HAL_FAIL;

    /* Is the top-level relationship correct? */
    if(((Size_Order==RME_PGT_SIZE_512G)^(Is_Top!=0))!=0)
ffffffff8021b1aa:	48 83 fa 27          	cmp    $0x27,%rdx
ffffffff8021b1ae:	0f 94 c0             	sete   %al
ffffffff8021b1b1:	48 85 f6             	test   %rsi,%rsi
ffffffff8021b1b4:	0f 95 c2             	setne  %dl
ffffffff8021b1b7:	31 d0                	xor    %edx,%eax
        return RME_ERR_HAL_FAIL;

    /* Is the number order allowed? */
    if(Num_Order!=RME_PGT_NUM_512)
ffffffff8021b1b9:	48 83 f9 09          	cmp    $0x9,%rcx
ffffffff8021b1bd:	0f 95 c2             	setne  %dl
ffffffff8021b1c0:	09 d0                	or     %edx,%eax
ffffffff8021b1c2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b1c5:	48 f7 d8             	neg    %rax
        return RME_ERR_HAL_FAIL;

    return 0;
}
ffffffff8021b1c8:	c3                   	ret
ffffffff8021b1c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021b1d0 <__RME_Pgt_Init>:
Input       : struct RME_Cap_Pgt* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Init(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff8021b1d0:	f3 0f 1e fa          	endbr64
    rme_cnt_t Count;
    rme_ptr_t* Ptr;
    
    /* Get the actual table */
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8021b1d4:	48 8b 4f 18          	mov    0x18(%rdi),%rcx

    /* Hopefully the compiler optimize this to rep stos */
    for(Count=0;Count<256;Count++)
        Ptr[Count]=0;
ffffffff8021b1d8:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8021b1dc:	48 8d 91 00 08 00 00 	lea    0x800(%rcx),%rdx
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8021b1e3:	48 89 c8             	mov    %rcx,%rax
ffffffff8021b1e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021b1ed:	00 00 00 
        Ptr[Count]=0;
ffffffff8021b1f0:	0f 11 00             	movups %xmm0,(%rax)
ffffffff8021b1f3:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021b1f7:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8021b1fb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b1fe:	75 f0                	jne    ffffffff8021b1f0 <__RME_Pgt_Init+0x20>

    /* Hopefully the compiler optimize this to rep movs */
    if((Pgt_Op->Base&RME_PGT_TOP)!=0)
ffffffff8021b200:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b204:	74 64                	je     ffffffff8021b26a <__RME_Pgt_Init+0x9a>
    {
        for(;Count<512;Count++)
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021b206:	48 81 e9 00 90 10 80 	sub    $0xffffffff80109000,%rcx
ffffffff8021b20d:	48 81 fa 08 98 10 80 	cmp    $0xffffffff80109808,%rdx
ffffffff8021b214:	48 c7 c0 00 98 10 80 	mov    $0xffffffff80109800,%rax
ffffffff8021b21b:	48 c7 c6 00 a0 10 80 	mov    $0xffffffff8010a000,%rsi
ffffffff8021b222:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021b225:	74 21                	je     ffffffff8021b248 <__RME_Pgt_Init+0x78>
ffffffff8021b227:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021b22e:	00 00 
ffffffff8021b230:	f3 0f 6f 08          	movdqu (%rax),%xmm1
ffffffff8021b234:	0f 11 0c 02          	movups %xmm1,(%rdx,%rax,1)
        for(;Count<512;Count++)
ffffffff8021b238:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021b23c:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021b23f:	75 ef                	jne    ffffffff8021b230 <__RME_Pgt_Init+0x60>
        for(;Count<512;Count++)
            Ptr[Count]=0;
    }

    return 0;
}
ffffffff8021b241:	31 c0                	xor    %eax,%eax
ffffffff8021b243:	c3                   	ret
ffffffff8021b244:	0f 1f 40 00          	nopl   0x0(%rax)
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021b248:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021b24b:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
        for(;Count<512;Count++)
ffffffff8021b24f:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021b253:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021b256:	74 e9                	je     ffffffff8021b241 <__RME_Pgt_Init+0x71>
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021b258:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021b25b:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
        for(;Count<512;Count++)
ffffffff8021b25f:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021b263:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021b266:	75 e0                	jne    ffffffff8021b248 <__RME_Pgt_Init+0x78>
ffffffff8021b268:	eb d7                	jmp    ffffffff8021b241 <__RME_Pgt_Init+0x71>
ffffffff8021b26a:	48 8d 81 00 10 00 00 	lea    0x1000(%rcx),%rax
            Ptr[Count]=0;
ffffffff8021b271:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8021b275:	48 89 c1             	mov    %rax,%rcx
ffffffff8021b278:	48 29 d1             	sub    %rdx,%rcx
ffffffff8021b27b:	83 e1 10             	and    $0x10,%ecx
ffffffff8021b27e:	74 10                	je     ffffffff8021b290 <__RME_Pgt_Init+0xc0>
ffffffff8021b280:	0f 11 02             	movups %xmm0,(%rdx)
        for(;Count<512;Count++)
ffffffff8021b283:	48 83 c2 10          	add    $0x10,%rdx
ffffffff8021b287:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b28a:	74 b5                	je     ffffffff8021b241 <__RME_Pgt_Init+0x71>
ffffffff8021b28c:	0f 1f 40 00          	nopl   0x0(%rax)
            Ptr[Count]=0;
ffffffff8021b290:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff8021b293:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8021b297:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
        for(;Count<512;Count++)
ffffffff8021b29b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b29e:	74 a1                	je     ffffffff8021b241 <__RME_Pgt_Init+0x71>
            Ptr[Count]=0;
ffffffff8021b2a0:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff8021b2a3:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8021b2a7:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
        for(;Count<512;Count++)
ffffffff8021b2ab:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b2ae:	75 e0                	jne    ffffffff8021b290 <__RME_Pgt_Init+0xc0>
ffffffff8021b2b0:	eb 8f                	jmp    ffffffff8021b241 <__RME_Pgt_Init+0x71>
ffffffff8021b2b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b2b9:	00 00 00 00 
ffffffff8021b2bd:	0f 1f 00             	nopl   (%rax)

ffffffff8021b2c0 <__RME_Pgt_Del_Check>:
Input       : struct RME_Cap_Pgt Pgt_Op* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If can be deleted, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Del_Check(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff8021b2c0:	f3 0f 1e fa          	endbr64

    return 0;
}
ffffffff8021b2c4:	31 c0                	xor    %eax,%eax
ffffffff8021b2c6:	c3                   	ret
ffffffff8021b2c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021b2ce:	00 00 

ffffffff8021b2d0 <__RME_Pgt_Page_Map>:
                                architecture specific page table's settings.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Map(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Paddr, rme_ptr_t Pos, rme_ptr_t Flags)
{
ffffffff8021b2d0:	f3 0f 1e fa          	endbr64
ffffffff8021b2d4:	48 89 f8             	mov    %rdi,%rax
    rme_ptr_t* Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
        return RME_ERR_HAL_FAIL;
ffffffff8021b2d7:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
    if((Flags&RME_PGT_READ)==0)
ffffffff8021b2de:	f6 c1 01             	test   $0x1,%cl
ffffffff8021b2e1:	74 51                	je     ffffffff8021b334 <__RME_Pgt_Page_Map+0x64>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b2e3:	48 81 fa ff 00 00 00 	cmp    $0xff,%rdx
ffffffff8021b2ea:	76 06                	jbe    ffffffff8021b2f2 <__RME_Pgt_Page_Map+0x22>
ffffffff8021b2ec:	f6 40 30 01          	testb  $0x1,0x30(%rax)
ffffffff8021b2f0:	75 42                	jne    ffffffff8021b334 <__RME_Pgt_Page_Map+0x64>
    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);

    /* Generate flags */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021b2f2:	48 bf 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdi
ffffffff8021b2f9:	ff 0f 00 
ffffffff8021b2fc:	83 e1 df             	and    $0xffffffdf,%ecx
ffffffff8021b2ff:	48 21 fe             	and    %rdi,%rsi
ffffffff8021b302:	48 0b 34 cd 80 dc 21 	or     -0x7fde2380(,%rcx,8),%rsi
ffffffff8021b309:	80 
ffffffff8021b30a:	48 89 f1             	mov    %rsi,%rcx
ffffffff8021b30d:	48 83 ce 04          	or     $0x4,%rsi
ffffffff8021b311:	80 c9 84             	or     $0x84,%cl
ffffffff8021b314:	83 78 2c 0c          	cmpl   $0xc,0x2c(%rax)
ffffffff8021b318:	48 0f 44 ce          	cmove  %rsi,%rcx
    else
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;

    /* Try to map it in */
    if(RME_COMP_SWAP(&(Table[Pos]),0,X64_Flags)==0)
ffffffff8021b31c:	48 8b 70 18          	mov    0x18(%rax),%rsi
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021b320:	31 c0                	xor    %eax,%eax
ffffffff8021b322:	48 8d 14 d6          	lea    (%rsi,%rdx,8),%rdx
ffffffff8021b326:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021b32b:	0f 94 c1             	sete   %cl
ffffffff8021b32e:	80 f9 01             	cmp    $0x1,%cl
ffffffff8021b331:	48 19 ff             	sbb    %rdi,%rdi
        return RME_ERR_HAL_FAIL;

    return 0;
}
ffffffff8021b334:	48 89 f8             	mov    %rdi,%rax
ffffffff8021b337:	c3                   	ret
ffffffff8021b338:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021b33f:	00 

ffffffff8021b340 <__RME_Pgt_Page_Unmap>:
              rme_ptr_t Pos - The position in the page table.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Unmap(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos)
{
ffffffff8021b340:	f3 0f 1e fa          	endbr64
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b344:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff8021b34b:	76 06                	jbe    ffffffff8021b353 <__RME_Pgt_Page_Unmap+0x13>
ffffffff8021b34d:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b351:	75 3d                	jne    ffffffff8021b390 <__RME_Pgt_Page_Unmap+0x50>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);

    /* Make sure that there is something */
    Temp=Table[Pos];
ffffffff8021b353:	48 8b 47 18          	mov    0x18(%rdi),%rax
        return RME_ERR_HAL_FAIL;
ffffffff8021b357:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
    Temp=Table[Pos];
ffffffff8021b35e:	48 8d 14 f0          	lea    (%rax,%rsi,8),%rdx
ffffffff8021b362:	48 8b 02             	mov    (%rdx),%rax
    if(Temp==0)
ffffffff8021b365:	48 85 c0             	test   %rax,%rax
ffffffff8021b368:	74 1a                	je     ffffffff8021b384 <__RME_Pgt_Page_Unmap+0x44>
        return RME_ERR_HAL_FAIL;

    /* Is this a page directory? We cannot unmap page directories like this */
    if((RME_PGT_SIZEORD(Pgt_Op->Order)!=RME_PGT_SIZE_4K)&&((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff8021b36a:	83 7f 2c 0c          	cmpl   $0xc,0x2c(%rdi)
ffffffff8021b36e:	74 04                	je     ffffffff8021b374 <__RME_Pgt_Page_Unmap+0x34>
ffffffff8021b370:	a8 80                	test   $0x80,%al
ffffffff8021b372:	74 10                	je     ffffffff8021b384 <__RME_Pgt_Page_Unmap+0x44>
ffffffff8021b374:	31 c9                	xor    %ecx,%ecx
ffffffff8021b376:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021b37b:	0f 94 c1             	sete   %cl
        return RME_ERR_HAL_FAIL;

    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Table[Pos]),Temp,0)==0)
ffffffff8021b37e:	80 f9 01             	cmp    $0x1,%cl
ffffffff8021b381:	48 19 c9             	sbb    %rcx,%rcx
        return RME_ERR_HAL_FAIL;

    return 0;
}
ffffffff8021b384:	48 89 c8             	mov    %rcx,%rax
ffffffff8021b387:	c3                   	ret
ffffffff8021b388:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021b38f:	00 
        return RME_ERR_HAL_FAIL;
ffffffff8021b390:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
}
ffffffff8021b397:	48 89 c8             	mov    %rcx,%rax
ffffffff8021b39a:	c3                   	ret
ffffffff8021b39b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff8021b3a0 <__RME_Pgt_Pgdir_Map>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Map(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                struct RME_Cap_Pgt* Pgt_Child, rme_ptr_t Flags)
{
ffffffff8021b3a0:	f3 0f 1e fa          	endbr64
ffffffff8021b3a4:	48 89 f0             	mov    %rsi,%rax
ffffffff8021b3a7:	48 89 d6             	mov    %rdx,%rsi
    rme_ptr_t* Child_Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
        return RME_ERR_HAL_FAIL;
ffffffff8021b3aa:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
    if((Flags&RME_PGT_READ)==0)
ffffffff8021b3b1:	f6 c1 01             	test   $0x1,%cl
ffffffff8021b3b4:	74 50                	je     ffffffff8021b406 <__RME_Pgt_Pgdir_Map+0x66>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b3b6:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff8021b3bc:	76 06                	jbe    ffffffff8021b3c4 <__RME_Pgt_Pgdir_Map+0x24>
ffffffff8021b3be:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b3c2:	75 42                	jne    ffffffff8021b406 <__RME_Pgt_Pgdir_Map+0x66>
    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
    Child_Table=RME_CAP_GETOBJ(Pgt_Child,rme_ptr_t*);

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021b3c4:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021b3cb:	80 00 00 
ffffffff8021b3ce:	83 e1 df             	and    $0xffffffdf,%ecx
ffffffff8021b3d1:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff8021b3d5:	48 be 00 f0 ff ff ff 	movabs $0xffffffffff000,%rsi
ffffffff8021b3dc:	ff 0f 00 
ffffffff8021b3df:	48 21 f2             	and    %rsi,%rdx
ffffffff8021b3e2:	48 0b 14 cd 80 dc 21 	or     -0x7fde2380(,%rcx,8),%rdx
ffffffff8021b3e9:	80 

    /* Try to map it in - may need to increase some count */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff8021b3ea:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021b3ee:	48 83 ca 04          	or     $0x4,%rdx
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff8021b3f2:	48 8d 0c c1          	lea    (%rcx,%rax,8),%rcx
ffffffff8021b3f6:	31 c0                	xor    %eax,%eax
ffffffff8021b3f8:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021b3fd:	0f 94 c2             	sete   %dl
ffffffff8021b400:	80 fa 01             	cmp    $0x1,%dl
ffffffff8021b403:	48 19 d2             	sbb    %rdx,%rdx
        return RME_ERR_HAL_FAIL;

    return 0;
}
ffffffff8021b406:	48 89 d0             	mov    %rdx,%rax
ffffffff8021b409:	c3                   	ret
ffffffff8021b40a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021b410 <__RME_Pgt_Pgdir_Unmap>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Unmap(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                  struct RME_Cap_Pgt* Pgt_Child)
{
ffffffff8021b410:	f3 0f 1e fa          	endbr64
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b414:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff8021b41b:	76 06                	jbe    ffffffff8021b423 <__RME_Pgt_Pgdir_Unmap+0x13>
ffffffff8021b41d:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b421:	75 45                	jne    ffffffff8021b468 <__RME_Pgt_Pgdir_Unmap+0x58>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);

    /* Make sure that there is something */
    Temp=Parent_Table[Pos];
ffffffff8021b423:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8021b427:	48 8d 0c f0          	lea    (%rax,%rsi,8),%rcx
        return RME_ERR_HAL_FAIL;
ffffffff8021b42b:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
    Temp=Parent_Table[Pos];
ffffffff8021b432:	48 8b 01             	mov    (%rcx),%rax
    if(Temp==0)
ffffffff8021b435:	48 85 c0             	test   %rax,%rax
ffffffff8021b438:	74 27                	je     ffffffff8021b461 <__RME_Pgt_Pgdir_Unmap+0x51>
        return RME_ERR_HAL_FAIL;

    /* Is this a page? We cannot unmap pages like this */
    if((RME_PGT_SIZEORD(Pgt_Parent->Order)==RME_PGT_SIZE_4K)||((Temp&RME_X64_MMU_PDE_SUP)!=0))
ffffffff8021b43a:	83 7f 2c 0c          	cmpl   $0xc,0x2c(%rdi)
ffffffff8021b43e:	74 21                	je     ffffffff8021b461 <__RME_Pgt_Pgdir_Unmap+0x51>
ffffffff8021b440:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b443:	81 e7 80 00 00 00    	and    $0x80,%edi
ffffffff8021b449:	75 16                	jne    ffffffff8021b461 <__RME_Pgt_Pgdir_Unmap+0x51>

    /* Is this child table mapped here? - check that in the future */

    Child_Table=(rme_ptr_t*)Temp;
    rme_ptr_t* Expected_Child_Table = RME_CAP_GETOBJ(Pgt_Child, rme_ptr_t*);
    if (Child_Table != Expected_Child_Table)
ffffffff8021b44b:	48 3b 42 18          	cmp    0x18(%rdx),%rax
ffffffff8021b44f:	75 10                	jne    ffffffff8021b461 <__RME_Pgt_Pgdir_Unmap+0x51>
ffffffff8021b451:	f0 48 0f b1 39       	lock cmpxchg %rdi,(%rcx)
ffffffff8021b456:	40 0f 94 c7          	sete   %dil
        return RME_ERR_HAL_FAIL;
    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),Temp,0)==0)
ffffffff8021b45a:	40 80 ff 01          	cmp    $0x1,%dil
ffffffff8021b45e:	48 19 f6             	sbb    %rsi,%rsi
        return RME_ERR_HAL_FAIL;

    return 0;
}
ffffffff8021b461:	48 89 f0             	mov    %rsi,%rax
ffffffff8021b464:	c3                   	ret
ffffffff8021b465:	0f 1f 00             	nopl   (%rax)
        return RME_ERR_HAL_FAIL;
ffffffff8021b468:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
}
ffffffff8021b46f:	48 89 f0             	mov    %rsi,%rax
ffffffff8021b472:	c3                   	ret
ffffffff8021b473:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b47a:	00 00 00 00 
ffffffff8021b47e:	66 90                	xchg   %ax,%ax

ffffffff8021b480 <__RME_Pgt_Lookup>:
Output      : rme_ptr_t* Paddr - The physical address of the page.
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Lookup(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos, rme_ptr_t* Paddr, rme_ptr_t* Flags)
{
ffffffff8021b480:	f3 0f 1e fa          	endbr64
ffffffff8021b484:	49 89 c9             	mov    %rcx,%r9
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Check if the position is within the range of this page table */
    if((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0)
ffffffff8021b487:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8021b48b:	49 89 f0             	mov    %rsi,%r8
ffffffff8021b48e:	49 d3 e8             	shr    %cl,%r8
ffffffff8021b491:	4d 85 c0             	test   %r8,%r8
ffffffff8021b494:	75 6e                	jne    ffffffff8021b504 <__RME_Pgt_Lookup+0x84>
        return RME_ERR_HAL_FAIL;

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
    /* Get the position requested - atomic read */
    Temp=Table[Pos];
ffffffff8021b496:	48 8b 47 18          	mov    0x18(%rdi),%rax

    /* Start lookup - is this a terminal page, or? */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff8021b49a:	48 c1 e9 20          	shr    $0x20,%rcx
    Temp=Table[Pos];
ffffffff8021b49e:	48 8b 04 f0          	mov    (%rax,%rsi,8),%rax
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff8021b4a2:	48 83 f9 0c          	cmp    $0xc,%rcx
ffffffff8021b4a6:	74 58                	je     ffffffff8021b500 <__RME_Pgt_Lookup+0x80>
        if((Temp&RME_X64_MMU_P)==0)
            return RME_ERR_HAL_FAIL;
    }
    else
    {
        if(((Temp&RME_X64_MMU_P)==0)||((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff8021b4a8:	48 89 c1             	mov    %rax,%rcx
ffffffff8021b4ab:	48 f7 d1             	not    %rcx
ffffffff8021b4ae:	81 e1 81 00 00 00    	and    $0x81,%ecx
ffffffff8021b4b4:	75 4e                	jne    ffffffff8021b504 <__RME_Pgt_Lookup+0x84>
            return RME_ERR_HAL_FAIL;
    }

    /* This is a page. Return the physical address and flags */
    if(Paddr!=0)
ffffffff8021b4b6:	48 85 d2             	test   %rdx,%rdx
ffffffff8021b4b9:	74 10                	je     ffffffff8021b4cb <__RME_Pgt_Lookup+0x4b>
        *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff8021b4bb:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff8021b4c2:	ff 0f 00 
ffffffff8021b4c5:	48 21 c1             	and    %rax,%rcx
ffffffff8021b4c8:	48 89 0a             	mov    %rcx,(%rdx)

    if(Flags!=0)
ffffffff8021b4cb:	4d 85 c9             	test   %r9,%r9
ffffffff8021b4ce:	74 2c                	je     ffffffff8021b4fc <__RME_Pgt_Lookup+0x7c>
        *Flags=RME_X64_PGFLG_NAT2RME(Temp);
ffffffff8021b4d0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b4d3:	48 89 c1             	mov    %rax,%rcx
ffffffff8021b4d6:	48 d1 e8             	shr    $1,%rax
ffffffff8021b4d9:	48 c1 ea 3f          	shr    $0x3f,%rdx
ffffffff8021b4dd:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff8021b4e1:	83 e0 01             	and    $0x1,%eax
ffffffff8021b4e4:	48 c1 e2 03          	shl    $0x3,%rdx
ffffffff8021b4e8:	83 e1 06             	and    $0x6,%ecx
ffffffff8021b4eb:	48 09 ca             	or     %rcx,%rdx
ffffffff8021b4ee:	48 09 d0             	or     %rdx,%rax
ffffffff8021b4f1:	48 8b 04 c5 00 dc 21 	mov    -0x7fde2400(,%rax,8),%rax
ffffffff8021b4f8:	80 
ffffffff8021b4f9:	49 89 01             	mov    %rax,(%r9)

    return 0;
}
ffffffff8021b4fc:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b4ff:	c3                   	ret
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b500:	a8 01                	test   $0x1,%al
ffffffff8021b502:	75 b2                	jne    ffffffff8021b4b6 <__RME_Pgt_Lookup+0x36>
        return RME_ERR_HAL_FAIL;
ffffffff8021b504:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
}
ffffffff8021b50b:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b50e:	c3                   	ret
ffffffff8021b50f:	90                   	nop

ffffffff8021b510 <__RME_Pgt_Walk>:
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Walk(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Vaddr, rme_ptr_t* Pgt,
                           rme_ptr_t* Map_Vaddr, rme_ptr_t* Paddr, rme_ptr_t* Size_Order, rme_ptr_t* Num_Order, rme_ptr_t* Flags)
{
ffffffff8021b510:	f3 0f 1e fa          	endbr64
    /* Check if this is the top-level page table */
    if(((Pgt_Op->Base)&RME_PGT_TOP)==0)
        return RME_ERR_HAL_FAIL;

    /* Are we attempting a kernel or non-canonical lookup? If yes, stop immediately */
    if(Vaddr>=0x7FFFFFFFFFFFULL)
ffffffff8021b514:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b518:	0f 84 8a 01 00 00    	je     ffffffff8021b6a8 <__RME_Pgt_Walk+0x198>
ffffffff8021b51e:	49 89 d3             	mov    %rdx,%r11
ffffffff8021b521:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffe,%rdx
ffffffff8021b528:	7f 00 00 
ffffffff8021b52b:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021b52e:	0f 82 74 01 00 00    	jb     ffffffff8021b6a8 <__RME_Pgt_Walk+0x198>
        return RME_ERR_HAL_FAIL;

    /* Get the table and start lookup */
    Table=RME_CAP_GETOBJ(Pgt_Op, rme_ptr_t*);
ffffffff8021b534:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
    Flags_Accum=0xFFF;
    No_Execute=0;
    while(1)
    {
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b538:	48 89 f0             	mov    %rsi,%rax
ffffffff8021b53b:	48 c1 e8 27          	shr    $0x27,%rax
        /* Atomic read */
        Temp=Table[Pos];
ffffffff8021b53f:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b543:	a8 01                	test   $0x1,%al
ffffffff8021b545:	0f 84 5d 01 00 00    	je     ffffffff8021b6a8 <__RME_Pgt_Walk+0x198>
{
ffffffff8021b54b:	41 54                	push   %r12
ffffffff8021b54d:	49 89 ca             	mov    %rcx,%r10
ffffffff8021b550:	55                   	push   %rbp
ffffffff8021b551:	53                   	push   %rbx
            return RME_ERR_HAL_FAIL;
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b552:	a8 80                	test   $0x80,%al
ffffffff8021b554:	0f 85 7e 01 00 00    	jne    ffffffff8021b6d8 <__RME_Pgt_Walk+0x1c8>
        else
        {
            /* This is a directory, we goto that directory to continue walking */
            Flags_Accum&=Temp;
            No_Execute|=Temp&RME_X64_MMU_NX;
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b55a:	48 bb 00 f0 ff ff ff 	movabs $0xffffffffff000,%rbx
ffffffff8021b561:	ff 0f 00 
ffffffff8021b564:	48 89 c7             	mov    %rax,%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b567:	48 89 f1             	mov    %rsi,%rcx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b56a:	49 bc 00 00 00 00 00 	movabs $0xffff800000000000,%r12
ffffffff8021b571:	80 ff ff 
ffffffff8021b574:	48 21 df             	and    %rbx,%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b577:	48 c1 e9 1e          	shr    $0x1e,%rcx
            Flags_Accum&=Temp;
ffffffff8021b57b:	48 89 c2             	mov    %rax,%rdx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b57e:	4c 01 e7             	add    %r12,%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b581:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
            Flags_Accum&=Temp;
ffffffff8021b587:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
        Temp=Table[Pos];
ffffffff8021b58d:	48 8b 0c cf          	mov    (%rdi,%rcx,8),%rcx
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b591:	f6 c1 01             	test   $0x1,%cl
ffffffff8021b594:	0f 84 16 01 00 00    	je     ffffffff8021b6b0 <__RME_Pgt_Walk+0x1a0>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b59a:	f6 c1 80             	test   $0x80,%cl
ffffffff8021b59d:	0f 85 4d 01 00 00    	jne    ffffffff8021b6f0 <__RME_Pgt_Walk+0x1e0>
            Flags_Accum&=Temp;
ffffffff8021b5a3:	48 09 c8             	or     %rcx,%rax
ffffffff8021b5a6:	48 21 ca             	and    %rcx,%rdx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b5a9:	48 21 d9             	and    %rbx,%rcx
ffffffff8021b5ac:	48 89 c5             	mov    %rax,%rbp
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b5af:	48 89 f0             	mov    %rsi,%rax
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b5b2:	4a 8d 3c 21          	lea    (%rcx,%r12,1),%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b5b6:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021b5ba:	25 ff 01 00 00       	and    $0x1ff,%eax
        Temp=Table[Pos];
ffffffff8021b5bf:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b5c3:	a8 01                	test   $0x1,%al
ffffffff8021b5c5:	0f 84 e5 00 00 00    	je     ffffffff8021b6b0 <__RME_Pgt_Walk+0x1a0>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b5cb:	a8 80                	test   $0x80,%al
ffffffff8021b5cd:	0f 85 e6 00 00 00    	jne    ffffffff8021b6b9 <__RME_Pgt_Walk+0x1a9>
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b5d3:	48 09 c5             	or     %rax,%rbp
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b5d6:	48 21 c3             	and    %rax,%rbx
            Flags_Accum&=Temp;
ffffffff8021b5d9:	48 21 c2             	and    %rax,%rdx
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b5dc:	48 89 f0             	mov    %rsi,%rax
ffffffff8021b5df:	48 c1 e8 0c          	shr    $0xc,%rax
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b5e3:	4a 8d 3c 23          	lea    (%rbx,%r12,1),%rdi
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b5e7:	48 b9 00 00 00 00 00 	movabs $0x8000000000000000,%rcx
ffffffff8021b5ee:	00 00 80 
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b5f1:	25 ff 01 00 00       	and    $0x1ff,%eax
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b5f6:	48 21 cd             	and    %rcx,%rbp
        Temp=Table[Pos];
ffffffff8021b5f9:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b5fd:	a8 01                	test   $0x1,%al
ffffffff8021b5ff:	0f 84 ab 00 00 00    	je     ffffffff8021b6b0 <__RME_Pgt_Walk+0x1a0>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b605:	bb 0c 00 00 00       	mov    $0xc,%ebx
ffffffff8021b60a:	b9 0c 00 00 00       	mov    $0xc,%ecx
            if(Pgt!=0)
ffffffff8021b60f:	4d 85 db             	test   %r11,%r11
ffffffff8021b612:	74 03                	je     ffffffff8021b617 <__RME_Pgt_Walk+0x107>
                *Pgt=(rme_ptr_t)Table;
ffffffff8021b614:	49 89 3b             	mov    %rdi,(%r11)
            if(Map_Vaddr!=0)
ffffffff8021b617:	4d 85 d2             	test   %r10,%r10
ffffffff8021b61a:	74 10                	je     ffffffff8021b62c <__RME_Pgt_Walk+0x11c>
                *Map_Vaddr=RME_ROUND_DOWN(Vaddr,Size_Cnt);
ffffffff8021b61c:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
ffffffff8021b623:	48 d3 e7             	shl    %cl,%rdi
ffffffff8021b626:	48 21 f7             	and    %rsi,%rdi
ffffffff8021b629:	49 89 3a             	mov    %rdi,(%r10)
            if(Paddr!=0)
ffffffff8021b62c:	4d 85 c0             	test   %r8,%r8
ffffffff8021b62f:	74 10                	je     ffffffff8021b641 <__RME_Pgt_Walk+0x131>
                *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff8021b631:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff8021b638:	ff 0f 00 
ffffffff8021b63b:	48 21 c1             	and    %rax,%rcx
ffffffff8021b63e:	49 89 08             	mov    %rcx,(%r8)
            if(Size_Order!=0)
ffffffff8021b641:	4d 85 c9             	test   %r9,%r9
ffffffff8021b644:	74 03                	je     ffffffff8021b649 <__RME_Pgt_Walk+0x139>
                *Size_Order=Size_Cnt;
ffffffff8021b646:	49 89 19             	mov    %rbx,(%r9)
            if(Num_Order!=0)
ffffffff8021b649:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
ffffffff8021b64f:	74 0c                	je     ffffffff8021b65d <__RME_Pgt_Walk+0x14d>
                *Num_Order=RME_PGT_NUM_512;
ffffffff8021b651:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
ffffffff8021b656:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
            if(Flags!=0)
ffffffff8021b65d:	48 83 7c 24 28 00    	cmpq   $0x0,0x28(%rsp)
ffffffff8021b663:	74 37                	je     ffffffff8021b69c <__RME_Pgt_Walk+0x18c>
                *Flags=RME_X64_PGFLG_NAT2RME(No_Execute|(Temp&Flags_Accum));
ffffffff8021b665:	48 21 c2             	and    %rax,%rdx
ffffffff8021b668:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx
ffffffff8021b66d:	48 09 ea             	or     %rbp,%rdx
ffffffff8021b670:	48 89 d0             	mov    %rdx,%rax
ffffffff8021b673:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021b676:	48 d1 ea             	shr    $1,%rdx
ffffffff8021b679:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8021b67d:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff8021b681:	83 e2 01             	and    $0x1,%edx
ffffffff8021b684:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8021b688:	83 e1 06             	and    $0x6,%ecx
ffffffff8021b68b:	48 09 c8             	or     %rcx,%rax
ffffffff8021b68e:	48 09 d0             	or     %rdx,%rax
ffffffff8021b691:	48 8b 04 c5 00 dc 21 	mov    -0x7fde2400(,%rax,8),%rax
ffffffff8021b698:	80 
ffffffff8021b699:	48 89 03             	mov    %rax,(%rbx)

        /* The size order always decreases by 512 */
        Size_Cnt-=RME_PGT_SIZE_512B;
    }

    return 0;
ffffffff8021b69c:	31 c0                	xor    %eax,%eax
}
ffffffff8021b69e:	5b                   	pop    %rbx
ffffffff8021b69f:	5d                   	pop    %rbp
ffffffff8021b6a0:	41 5c                	pop    %r12
ffffffff8021b6a2:	c3                   	ret
ffffffff8021b6a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return RME_ERR_HAL_FAIL;
ffffffff8021b6a8:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8021b6af:	c3                   	ret
        return RME_ERR_HAL_FAIL;
ffffffff8021b6b0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b6b7:	eb e5                	jmp    ffffffff8021b69e <__RME_Pgt_Walk+0x18e>
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b6b9:	48 b9 00 00 00 00 00 	movabs $0x8000000000000000,%rcx
ffffffff8021b6c0:	00 00 80 
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff8021b6c3:	bb 15 00 00 00       	mov    $0x15,%ebx
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b6c8:	48 21 cd             	and    %rcx,%rbp
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b6cb:	b9 15 00 00 00       	mov    $0x15,%ecx
ffffffff8021b6d0:	e9 3a ff ff ff       	jmp    ffffffff8021b60f <__RME_Pgt_Walk+0xff>
ffffffff8021b6d5:	0f 1f 00             	nopl   (%rax)
    No_Execute=0;
ffffffff8021b6d8:	31 ed                	xor    %ebp,%ebp
    Flags_Accum=0xFFF;
ffffffff8021b6da:	ba ff 0f 00 00       	mov    $0xfff,%edx
    Size_Cnt=RME_PGT_SIZE_512G;
ffffffff8021b6df:	bb 27 00 00 00       	mov    $0x27,%ebx
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b6e4:	b9 27 00 00 00       	mov    $0x27,%ecx
ffffffff8021b6e9:	e9 21 ff ff ff       	jmp    ffffffff8021b60f <__RME_Pgt_Walk+0xff>
ffffffff8021b6ee:	66 90                	xchg   %ax,%ax
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b6f0:	48 bd 00 00 00 00 00 	movabs $0x8000000000000000,%rbp
ffffffff8021b6f7:	00 00 80 
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff8021b6fa:	bb 1e 00 00 00       	mov    $0x1e,%ebx
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b6ff:	48 21 c5             	and    %rax,%rbp
        Temp=Table[Pos];
ffffffff8021b702:	48 89 c8             	mov    %rcx,%rax
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b705:	b9 1e 00 00 00       	mov    $0x1e,%ecx
ffffffff8021b70a:	e9 00 ff ff ff       	jmp    ffffffff8021b60f <__RME_Pgt_Walk+0xff>
ffffffff8021b70f:	90                   	nop

ffffffff8021b710 <__RME_Svc_Param_Get>:
/* End Function:__RME_X64_Pgt_Set*/

/*Function:__RME_Svc_Param_Get*/

void __RME_Svc_Param_Get(struct RME_Reg_Struct* Reg,rme_ptr_t* Svc,rme_ptr_t* Cid,rme_ptr_t* Param)
{
ffffffff8021b710:	f3 0f 1e fa          	endbr64

}
ffffffff8021b714:	c3                   	ret
ffffffff8021b715:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b71c:	00 00 00 00 

ffffffff8021b720 <__RME_Svc_Retval_Set>:
/*End Function:__RME_Svc_Param_Get*/

/*Function:__RME_Svc_Retval_Set*/

void __RME_Svc_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff8021b720:	f3 0f 1e fa          	endbr64

}
ffffffff8021b724:	c3                   	ret
ffffffff8021b725:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b72c:	00 00 00 00 

ffffffff8021b730 <__RME_Inv_Retval_Set>:

/*End Function:__RME_Svc_Retval_Set*/

void __RME_Inv_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
ffffffff8021b730:	f3 0f 1e fa          	endbr64
ffffffff8021b734:	c3                   	ret
ffffffff8021b735:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b73c:	00 00 00 00 

ffffffff8021b740 <__RME_List_Crt>:
{

}

void __RME_List_Crt(volatile struct RME_List* Head)
{
ffffffff8021b740:	f3 0f 1e fa          	endbr64

}
ffffffff8021b744:	c3                   	ret
ffffffff8021b745:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b74c:	00 00 00 00 

ffffffff8021b750 <__RME_List_Ins>:

void __RME_List_Ins(volatile struct RME_List* New,volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
ffffffff8021b750:	f3 0f 1e fa          	endbr64

}
ffffffff8021b754:	c3                   	ret
ffffffff8021b755:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b75c:	00 00 00 00 

ffffffff8021b760 <__RME_List_Del>:

void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
ffffffff8021b760:	f3 0f 1e fa          	endbr64

}
ffffffff8021b764:	c3                   	ret
ffffffff8021b765:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021b76c:	00 00 00 
ffffffff8021b76f:	90                   	nop

ffffffff8021b770 <main>:
{
ffffffff8021b770:	f3 0f 1e fa          	endbr64
ffffffff8021b774:	48 83 ec 08          	sub    $0x8,%rsp
    _RME_Kmain(RME_KOM_STACK_ADDR);
ffffffff8021b778:	48 c7 c7 00 b8 20 80 	mov    $0xffffffff8020b800,%rdi
ffffffff8021b77f:	e8 2f 01 ff ff       	call   ffffffff8020b8b3 <_RME_Kmain>
}
ffffffff8021b784:	31 c0                	xor    %eax,%eax
ffffffff8021b786:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021b78a:	c3                   	ret
