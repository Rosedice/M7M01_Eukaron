
./Object/RME:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80100000 <__RME_X64_Mboot_Header>:
ffffffff80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
ffffffff80100006:	01 00                	add    %eax,(%rax)
ffffffff80100008:	fe 4f 51             	decb   0x51(%rdi)
ffffffff8010000b:	e4 00                	in     $0x0,%al
ffffffff8010000d:	00 10                	add    %dl,(%rax)
ffffffff8010000f:	00 00                	add    %al,(%rax)
ffffffff80100011:	00 10                	add    %dl,(%rax)
ffffffff80100013:	00 00                	add    %al,(%rax)
ffffffff80100015:	f0 21 00             	lock and %eax,(%rax)
ffffffff80100018:	58                   	pop    %rax
ffffffff80100019:	87 22                	xchg   %esp,(%rdx)
ffffffff8010001b:	00 00                	add    %al,(%rax)
ffffffff8010001d:	80 10 00             	adcb   $0x0,(%rax)
ffffffff80100020:	e9 db 0f 00 00       	jmp    ffffffff80101000 <__RME_X64_Mboot_Header+0x1000>
ffffffff80100025:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010002c:	00 00 00 00 
ffffffff80100030:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100037:	00 00 00 00 
ffffffff8010003b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100042:	00 00 00 00 
ffffffff80100046:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010004d:	00 00 00 00 
ffffffff80100051:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100058:	00 00 00 00 
ffffffff8010005c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100063:	00 00 00 00 
ffffffff80100067:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010006e:	00 00 00 00 
ffffffff80100072:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100079:	00 00 00 00 
ffffffff8010007d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100084:	00 00 00 00 
ffffffff80100088:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010008f:	00 00 00 00 
ffffffff80100093:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010009a:	00 00 00 00 
ffffffff8010009e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000a5:	00 00 00 00 
ffffffff801000a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000b0:	00 00 00 00 
ffffffff801000b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000bb:	00 00 00 00 
ffffffff801000bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000c6:	00 00 00 00 
ffffffff801000ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000d1:	00 00 00 00 
ffffffff801000d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000dc:	00 00 00 00 
ffffffff801000e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000e7:	00 00 00 00 
ffffffff801000eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000f2:	00 00 00 00 
ffffffff801000f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000fd:	00 00 00 00 
ffffffff80100101:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100108:	00 00 00 00 
ffffffff8010010c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100113:	00 00 00 00 
ffffffff80100117:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010011e:	00 00 00 00 
ffffffff80100122:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100129:	00 00 00 00 
ffffffff8010012d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100134:	00 00 00 00 
ffffffff80100138:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010013f:	00 00 00 00 
ffffffff80100143:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010014a:	00 00 00 00 
ffffffff8010014e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100155:	00 00 00 00 
ffffffff80100159:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100160:	00 00 00 00 
ffffffff80100164:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010016b:	00 00 00 00 
ffffffff8010016f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100176:	00 00 00 00 
ffffffff8010017a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100181:	00 00 00 00 
ffffffff80100185:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010018c:	00 00 00 00 
ffffffff80100190:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100197:	00 00 00 00 
ffffffff8010019b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001a2:	00 00 00 00 
ffffffff801001a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ad:	00 00 00 00 
ffffffff801001b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001b8:	00 00 00 00 
ffffffff801001bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001c3:	00 00 00 00 
ffffffff801001c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ce:	00 00 00 00 
ffffffff801001d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001d9:	00 00 00 00 
ffffffff801001dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001e4:	00 00 00 00 
ffffffff801001e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ef:	00 00 00 00 
ffffffff801001f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001fa:	00 00 00 00 
ffffffff801001fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100205:	00 00 00 00 
ffffffff80100209:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100210:	00 00 00 00 
ffffffff80100214:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010021b:	00 00 00 00 
ffffffff8010021f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100226:	00 00 00 00 
ffffffff8010022a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100231:	00 00 00 00 
ffffffff80100235:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010023c:	00 00 00 00 
ffffffff80100240:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100247:	00 00 00 00 
ffffffff8010024b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100252:	00 00 00 00 
ffffffff80100256:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010025d:	00 00 00 00 
ffffffff80100261:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100268:	00 00 00 00 
ffffffff8010026c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100273:	00 00 00 00 
ffffffff80100277:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010027e:	00 00 00 00 
ffffffff80100282:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100289:	00 00 00 00 
ffffffff8010028d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100294:	00 00 00 00 
ffffffff80100298:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010029f:	00 00 00 00 
ffffffff801002a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002aa:	00 00 00 00 
ffffffff801002ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002b5:	00 00 00 00 
ffffffff801002b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002c0:	00 00 00 00 
ffffffff801002c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002cb:	00 00 00 00 
ffffffff801002cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002d6:	00 00 00 00 
ffffffff801002da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002e1:	00 00 00 00 
ffffffff801002e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ec:	00 00 00 00 
ffffffff801002f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002f7:	00 00 00 00 
ffffffff801002fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100302:	00 00 00 00 
ffffffff80100306:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010030d:	00 00 00 00 
ffffffff80100311:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100318:	00 00 00 00 
ffffffff8010031c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100323:	00 00 00 00 
ffffffff80100327:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010032e:	00 00 00 00 
ffffffff80100332:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100339:	00 00 00 00 
ffffffff8010033d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100344:	00 00 00 00 
ffffffff80100348:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010034f:	00 00 00 00 
ffffffff80100353:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010035a:	00 00 00 00 
ffffffff8010035e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100365:	00 00 00 00 
ffffffff80100369:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100370:	00 00 00 00 
ffffffff80100374:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010037b:	00 00 00 00 
ffffffff8010037f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100386:	00 00 00 00 
ffffffff8010038a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100391:	00 00 00 00 
ffffffff80100395:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010039c:	00 00 00 00 
ffffffff801003a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003a7:	00 00 00 00 
ffffffff801003ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003b2:	00 00 00 00 
ffffffff801003b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003bd:	00 00 00 00 
ffffffff801003c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003c8:	00 00 00 00 
ffffffff801003cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003d3:	00 00 00 00 
ffffffff801003d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003de:	00 00 00 00 
ffffffff801003e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003e9:	00 00 00 00 
ffffffff801003ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003f4:	00 00 00 00 
ffffffff801003f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003ff:	00 00 00 00 
ffffffff80100403:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010040a:	00 00 00 00 
ffffffff8010040e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100415:	00 00 00 00 
ffffffff80100419:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100420:	00 00 00 00 
ffffffff80100424:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010042b:	00 00 00 00 
ffffffff8010042f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100436:	00 00 00 00 
ffffffff8010043a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100441:	00 00 00 00 
ffffffff80100445:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010044c:	00 00 00 00 
ffffffff80100450:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100457:	00 00 00 00 
ffffffff8010045b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100462:	00 00 00 00 
ffffffff80100466:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010046d:	00 00 00 00 
ffffffff80100471:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100478:	00 00 00 00 
ffffffff8010047c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100483:	00 00 00 00 
ffffffff80100487:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010048e:	00 00 00 00 
ffffffff80100492:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100499:	00 00 00 00 
ffffffff8010049d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004a4:	00 00 00 00 
ffffffff801004a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004af:	00 00 00 00 
ffffffff801004b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004ba:	00 00 00 00 
ffffffff801004be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004c5:	00 00 00 00 
ffffffff801004c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004d0:	00 00 00 00 
ffffffff801004d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004db:	00 00 00 00 
ffffffff801004df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004e6:	00 00 00 00 
ffffffff801004ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004f1:	00 00 00 00 
ffffffff801004f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004fc:	00 00 00 00 
ffffffff80100500:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100507:	00 00 00 00 
ffffffff8010050b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100512:	00 00 00 00 
ffffffff80100516:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010051d:	00 00 00 00 
ffffffff80100521:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100528:	00 00 00 00 
ffffffff8010052c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100533:	00 00 00 00 
ffffffff80100537:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010053e:	00 00 00 00 
ffffffff80100542:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100549:	00 00 00 00 
ffffffff8010054d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100554:	00 00 00 00 
ffffffff80100558:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010055f:	00 00 00 00 
ffffffff80100563:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010056a:	00 00 00 00 
ffffffff8010056e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100575:	00 00 00 00 
ffffffff80100579:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100580:	00 00 00 00 
ffffffff80100584:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010058b:	00 00 00 00 
ffffffff8010058f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100596:	00 00 00 00 
ffffffff8010059a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005a1:	00 00 00 00 
ffffffff801005a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ac:	00 00 00 00 
ffffffff801005b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005b7:	00 00 00 00 
ffffffff801005bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005c2:	00 00 00 00 
ffffffff801005c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005cd:	00 00 00 00 
ffffffff801005d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005d8:	00 00 00 00 
ffffffff801005dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005e3:	00 00 00 00 
ffffffff801005e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ee:	00 00 00 00 
ffffffff801005f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005f9:	00 00 00 00 
ffffffff801005fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100604:	00 00 00 00 
ffffffff80100608:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010060f:	00 00 00 00 
ffffffff80100613:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010061a:	00 00 00 00 
ffffffff8010061e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100625:	00 00 00 00 
ffffffff80100629:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100630:	00 00 00 00 
ffffffff80100634:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010063b:	00 00 00 00 
ffffffff8010063f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100646:	00 00 00 00 
ffffffff8010064a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100651:	00 00 00 00 
ffffffff80100655:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010065c:	00 00 00 00 
ffffffff80100660:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100667:	00 00 00 00 
ffffffff8010066b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100672:	00 00 00 00 
ffffffff80100676:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010067d:	00 00 00 00 
ffffffff80100681:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100688:	00 00 00 00 
ffffffff8010068c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100693:	00 00 00 00 
ffffffff80100697:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010069e:	00 00 00 00 
ffffffff801006a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006a9:	00 00 00 00 
ffffffff801006ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006b4:	00 00 00 00 
ffffffff801006b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006bf:	00 00 00 00 
ffffffff801006c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006ca:	00 00 00 00 
ffffffff801006ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006d5:	00 00 00 00 
ffffffff801006d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006e0:	00 00 00 00 
ffffffff801006e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006eb:	00 00 00 00 
ffffffff801006ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006f6:	00 00 00 00 
ffffffff801006fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100701:	00 00 00 00 
ffffffff80100705:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010070c:	00 00 00 00 
ffffffff80100710:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100717:	00 00 00 00 
ffffffff8010071b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100722:	00 00 00 00 
ffffffff80100726:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010072d:	00 00 00 00 
ffffffff80100731:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100738:	00 00 00 00 
ffffffff8010073c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100743:	00 00 00 00 
ffffffff80100747:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010074e:	00 00 00 00 
ffffffff80100752:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100759:	00 00 00 00 
ffffffff8010075d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100764:	00 00 00 00 
ffffffff80100768:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010076f:	00 00 00 00 
ffffffff80100773:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010077a:	00 00 00 00 
ffffffff8010077e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100785:	00 00 00 00 
ffffffff80100789:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100790:	00 00 00 00 
ffffffff80100794:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010079b:	00 00 00 00 
ffffffff8010079f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007a6:	00 00 00 00 
ffffffff801007aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007b1:	00 00 00 00 
ffffffff801007b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007bc:	00 00 00 00 
ffffffff801007c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007c7:	00 00 00 00 
ffffffff801007cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007d2:	00 00 00 00 
ffffffff801007d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007dd:	00 00 00 00 
ffffffff801007e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007e8:	00 00 00 00 
ffffffff801007ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007f3:	00 00 00 00 
ffffffff801007f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007fe:	00 00 00 00 
ffffffff80100802:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100809:	00 00 00 00 
ffffffff8010080d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100814:	00 00 00 00 
ffffffff80100818:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010081f:	00 00 00 00 
ffffffff80100823:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010082a:	00 00 00 00 
ffffffff8010082e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100835:	00 00 00 00 
ffffffff80100839:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100840:	00 00 00 00 
ffffffff80100844:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010084b:	00 00 00 00 
ffffffff8010084f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100856:	00 00 00 00 
ffffffff8010085a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100861:	00 00 00 00 
ffffffff80100865:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010086c:	00 00 00 00 
ffffffff80100870:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100877:	00 00 00 00 
ffffffff8010087b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100882:	00 00 00 00 
ffffffff80100886:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010088d:	00 00 00 00 
ffffffff80100891:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100898:	00 00 00 00 
ffffffff8010089c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008a3:	00 00 00 00 
ffffffff801008a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008ae:	00 00 00 00 
ffffffff801008b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008b9:	00 00 00 00 
ffffffff801008bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008c4:	00 00 00 00 
ffffffff801008c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008cf:	00 00 00 00 
ffffffff801008d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008da:	00 00 00 00 
ffffffff801008de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008e5:	00 00 00 00 
ffffffff801008e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008f0:	00 00 00 00 
ffffffff801008f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008fb:	00 00 00 00 
ffffffff801008ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100906:	00 00 00 00 
ffffffff8010090a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100911:	00 00 00 00 
ffffffff80100915:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010091c:	00 00 00 00 
ffffffff80100920:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100927:	00 00 00 00 
ffffffff8010092b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100932:	00 00 00 00 
ffffffff80100936:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010093d:	00 00 00 00 
ffffffff80100941:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100948:	00 00 00 00 
ffffffff8010094c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100953:	00 00 00 00 
ffffffff80100957:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010095e:	00 00 00 00 
ffffffff80100962:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100969:	00 00 00 00 
ffffffff8010096d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100974:	00 00 00 00 
ffffffff80100978:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010097f:	00 00 00 00 
ffffffff80100983:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010098a:	00 00 00 00 
ffffffff8010098e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100995:	00 00 00 00 
ffffffff80100999:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009a0:	00 00 00 00 
ffffffff801009a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ab:	00 00 00 00 
ffffffff801009af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009b6:	00 00 00 00 
ffffffff801009ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009c1:	00 00 00 00 
ffffffff801009c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009cc:	00 00 00 00 
ffffffff801009d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009d7:	00 00 00 00 
ffffffff801009db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009e2:	00 00 00 00 
ffffffff801009e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ed:	00 00 00 00 
ffffffff801009f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009f8:	00 00 00 00 
ffffffff801009fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a03:	00 00 00 00 
ffffffff80100a07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a0e:	00 00 00 00 
ffffffff80100a12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a19:	00 00 00 00 
ffffffff80100a1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a24:	00 00 00 00 
ffffffff80100a28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a2f:	00 00 00 00 
ffffffff80100a33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a3a:	00 00 00 00 
ffffffff80100a3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a45:	00 00 00 00 
ffffffff80100a49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a50:	00 00 00 00 
ffffffff80100a54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a5b:	00 00 00 00 
ffffffff80100a5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a66:	00 00 00 00 
ffffffff80100a6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a71:	00 00 00 00 
ffffffff80100a75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a7c:	00 00 00 00 
ffffffff80100a80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a87:	00 00 00 00 
ffffffff80100a8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a92:	00 00 00 00 
ffffffff80100a96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a9d:	00 00 00 00 
ffffffff80100aa1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aa8:	00 00 00 00 
ffffffff80100aac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ab3:	00 00 00 00 
ffffffff80100ab7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100abe:	00 00 00 00 
ffffffff80100ac2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ac9:	00 00 00 00 
ffffffff80100acd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ad4:	00 00 00 00 
ffffffff80100ad8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100adf:	00 00 00 00 
ffffffff80100ae3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aea:	00 00 00 00 
ffffffff80100aee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100af5:	00 00 00 00 
ffffffff80100af9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b00:	00 00 00 00 
ffffffff80100b04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b0b:	00 00 00 00 
ffffffff80100b0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b16:	00 00 00 00 
ffffffff80100b1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b21:	00 00 00 00 
ffffffff80100b25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b2c:	00 00 00 00 
ffffffff80100b30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b37:	00 00 00 00 
ffffffff80100b3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b42:	00 00 00 00 
ffffffff80100b46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b4d:	00 00 00 00 
ffffffff80100b51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b58:	00 00 00 00 
ffffffff80100b5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b63:	00 00 00 00 
ffffffff80100b67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b6e:	00 00 00 00 
ffffffff80100b72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b79:	00 00 00 00 
ffffffff80100b7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b84:	00 00 00 00 
ffffffff80100b88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b8f:	00 00 00 00 
ffffffff80100b93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b9a:	00 00 00 00 
ffffffff80100b9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ba5:	00 00 00 00 
ffffffff80100ba9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bb0:	00 00 00 00 
ffffffff80100bb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bbb:	00 00 00 00 
ffffffff80100bbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bc6:	00 00 00 00 
ffffffff80100bca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bd1:	00 00 00 00 
ffffffff80100bd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bdc:	00 00 00 00 
ffffffff80100be0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100be7:	00 00 00 00 
ffffffff80100beb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bf2:	00 00 00 00 
ffffffff80100bf6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bfd:	00 00 00 00 
ffffffff80100c01:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c08:	00 00 00 00 
ffffffff80100c0c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c13:	00 00 00 00 
ffffffff80100c17:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c1e:	00 00 00 00 
ffffffff80100c22:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c29:	00 00 00 00 
ffffffff80100c2d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c34:	00 00 00 00 
ffffffff80100c38:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c3f:	00 00 00 00 
ffffffff80100c43:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c4a:	00 00 00 00 
ffffffff80100c4e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c55:	00 00 00 00 
ffffffff80100c59:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c60:	00 00 00 00 
ffffffff80100c64:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c6b:	00 00 00 00 
ffffffff80100c6f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c76:	00 00 00 00 
ffffffff80100c7a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c81:	00 00 00 00 
ffffffff80100c85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c8c:	00 00 00 00 
ffffffff80100c90:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c97:	00 00 00 00 
ffffffff80100c9b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ca2:	00 00 00 00 
ffffffff80100ca6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cad:	00 00 00 00 
ffffffff80100cb1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cb8:	00 00 00 00 
ffffffff80100cbc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cc3:	00 00 00 00 
ffffffff80100cc7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cce:	00 00 00 00 
ffffffff80100cd2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cd9:	00 00 00 00 
ffffffff80100cdd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ce4:	00 00 00 00 
ffffffff80100ce8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cef:	00 00 00 00 
ffffffff80100cf3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cfa:	00 00 00 00 
ffffffff80100cfe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d05:	00 00 00 00 
ffffffff80100d09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d10:	00 00 00 00 
ffffffff80100d14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d1b:	00 00 00 00 
ffffffff80100d1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d26:	00 00 00 00 
ffffffff80100d2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d31:	00 00 00 00 
ffffffff80100d35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d3c:	00 00 00 00 
ffffffff80100d40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d47:	00 00 00 00 
ffffffff80100d4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d52:	00 00 00 00 
ffffffff80100d56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d5d:	00 00 00 00 
ffffffff80100d61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d68:	00 00 00 00 
ffffffff80100d6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d73:	00 00 00 00 
ffffffff80100d77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d7e:	00 00 00 00 
ffffffff80100d82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d89:	00 00 00 00 
ffffffff80100d8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d94:	00 00 00 00 
ffffffff80100d98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d9f:	00 00 00 00 
ffffffff80100da3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100daa:	00 00 00 00 
ffffffff80100dae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100db5:	00 00 00 00 
ffffffff80100db9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dc0:	00 00 00 00 
ffffffff80100dc4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dcb:	00 00 00 00 
ffffffff80100dcf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dd6:	00 00 00 00 
ffffffff80100dda:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100de1:	00 00 00 00 
ffffffff80100de5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dec:	00 00 00 00 
ffffffff80100df0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100df7:	00 00 00 00 
ffffffff80100dfb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e02:	00 00 00 00 
ffffffff80100e06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e0d:	00 00 00 00 
ffffffff80100e11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e18:	00 00 00 00 
ffffffff80100e1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e23:	00 00 00 00 
ffffffff80100e27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e2e:	00 00 00 00 
ffffffff80100e32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e39:	00 00 00 00 
ffffffff80100e3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e44:	00 00 00 00 
ffffffff80100e48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e4f:	00 00 00 00 
ffffffff80100e53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e5a:	00 00 00 00 
ffffffff80100e5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e65:	00 00 00 00 
ffffffff80100e69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e70:	00 00 00 00 
ffffffff80100e74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e7b:	00 00 00 00 
ffffffff80100e7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e86:	00 00 00 00 
ffffffff80100e8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e91:	00 00 00 00 
ffffffff80100e95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e9c:	00 00 00 00 
ffffffff80100ea0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ea7:	00 00 00 00 
ffffffff80100eab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eb2:	00 00 00 00 
ffffffff80100eb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ebd:	00 00 00 00 
ffffffff80100ec1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ec8:	00 00 00 00 
ffffffff80100ecc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ed3:	00 00 00 00 
ffffffff80100ed7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ede:	00 00 00 00 
ffffffff80100ee2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ee9:	00 00 00 00 
ffffffff80100eed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ef4:	00 00 00 00 
ffffffff80100ef8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eff:	00 00 00 00 
ffffffff80100f03:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f0a:	00 00 00 00 
ffffffff80100f0e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f15:	00 00 00 00 
ffffffff80100f19:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f20:	00 00 00 00 
ffffffff80100f24:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f2b:	00 00 00 00 
ffffffff80100f2f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f36:	00 00 00 00 
ffffffff80100f3a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f41:	00 00 00 00 
ffffffff80100f45:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f4c:	00 00 00 00 
ffffffff80100f50:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f57:	00 00 00 00 
ffffffff80100f5b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f62:	00 00 00 00 
ffffffff80100f66:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f6d:	00 00 00 00 
ffffffff80100f71:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f78:	00 00 00 00 
ffffffff80100f7c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f83:	00 00 00 00 
ffffffff80100f87:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f8e:	00 00 00 00 
ffffffff80100f92:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f99:	00 00 00 00 
ffffffff80100f9d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fa4:	00 00 00 00 
ffffffff80100fa8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100faf:	00 00 00 00 
ffffffff80100fb3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fba:	00 00 00 00 
ffffffff80100fbe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fc5:	00 00 00 00 
ffffffff80100fc9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fd0:	00 00 00 00 
ffffffff80100fd4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fdb:	00 00 00 00 
ffffffff80100fdf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fe6:	00 00 00 00 
ffffffff80100fea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ff1:	00 00 00 00 
ffffffff80100ff5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ffc:	00 00 00 00 
	...

ffffffff80108000 <__RME_X64_Mboot_Entry>:

/* The entry point after the bootloader finishes *****************************/
    .code32
    .align              16
__RME_X64_Mboot_Entry:
     MOVW               $0x0744, %ax
ffffffff80108000:	66 b8 44 07          	mov    $0x744,%ax
     MOV               $0xb8000, %edi
ffffffff80108004:	bf 00 80 0b 00       	mov    $0xb8000,%edi
     MOVW               %ax, (%edi)
ffffffff80108009:	66 89 07             	mov    %ax,(%rdi)
     /* EBX contains Multiboot data structure, let's relocate it to some other places */
     MOV                %EBX,%ESI
ffffffff8010800c:	89 de                	mov    %ebx,%esi
     /* Zero 7 pages for our bootstrap page tables, PML4 @ 0x101000 */
     CLD
ffffffff8010800e:	fc                   	cld    
     XOR                %EAX,%EAX
ffffffff8010800f:	31 c0                	xor    %eax,%eax
     MOV                $0x101000,%EDI
ffffffff80108011:	bf 00 10 10 00       	mov    $0x101000,%edi
     MOV                $0x7000,%ECX
ffffffff80108016:	b9 00 70 00 00       	mov    $0x7000,%ecx
     REP STOSB
ffffffff8010801b:	f3 aa                	rep stos %al,%es:(%rdi)
     /* PML4[0] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff8010801d:	b8 03 20 10 00       	mov    $0x102003,%eax
     MOV                %EAX,0x101000
ffffffff80108022:	a3 00 10 10 00 b8 03 	movabs %eax,0x102003b800101000
ffffffff80108029:	20 10 
     /* PML4[256] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff8010802b:	00 a3 00 18 10 00    	add    %ah,0x101800(%rbx)
     MOV                %EAX,0x101800
     /* PML4[511] -> PDP-B @ 0x103000 */
     MOV                $(0x103000|3),%EAX
ffffffff80108031:	b8 03 30 10 00       	mov    $0x103003,%eax
     MOV                %EAX,0x101FF8
ffffffff80108036:	a3 f8 1f 10 00 b8 03 	movabs %eax,0x104003b800101ff8
ffffffff8010803d:	40 10 
     /* PDP-A[0] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff8010803f:	00 a3 00 20 10 00    	add    %ah,0x102000(%rbx)
     MOV                %EAX,0x102000
     /* PDP-A[1] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108045:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x102008
ffffffff8010804a:	a3 08 20 10 00 b8 03 	movabs %eax,0x106003b800102008
ffffffff80108051:	60 10 
     /* PDP-A[2] -> PDE-C @ 0x106000 */
     MOV                $(0x106000|3),%EAX
ffffffff80108053:	00 a3 10 20 10 00    	add    %ah,0x102010(%rbx)
     MOV                %EAX,0x102010
     /* PDP-A[3] -> PDE-D @ 0x107000 unbufferable uncacheable */
     MOV                $(0x107000|3|0x18),%EAX
ffffffff80108059:	b8 1b 70 10 00       	mov    $0x10701b,%eax
     MOV                %EAX,0x102018
ffffffff8010805e:	a3 18 20 10 00 b8 03 	movabs %eax,0x104003b800102018
ffffffff80108065:	40 10 
     /* PDP-B[510] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff80108067:	00 a3 f0 3f 10 00    	add    %ah,0x103ff0(%rbx)
     MOV                %EAX,0x103FF0
     /* PDP-B[511] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff8010806d:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x103FF8
ffffffff80108072:	a3 f8 3f 10 00 b8 83 	movabs %eax,0x83b800103ff8
ffffffff80108079:	00 00 
     /* PDE-A/B/C/D [0..511/0...511/0..511/0..511] -> 0..4094MB */
     MOV                $(0x83),%EAX
ffffffff8010807b:	00 bb 00 40 10 00    	add    %bh,0x104000(%rbx)
     MOV                $0x104000,%EBX
     MOV                $(512*4),%ECX
ffffffff80108081:	b9 00 08 00 00       	mov    $0x800,%ecx

ffffffff80108086 <PDE_Loop>:
PDE_Loop:
     MOV                %EAX,(%EBX)
ffffffff80108086:	89 03                	mov    %eax,(%rbx)
     ADD                $0x200000,%EAX
ffffffff80108088:	05 00 00 20 00       	add    $0x200000,%eax
     ADD                $0x8,%EBX
ffffffff8010808d:	83 c3 08             	add    $0x8,%ebx
     DEC                %ECX
ffffffff80108090:	49 75 f3             	rex.WB jne ffffffff80108086 <PDE_Loop>
     JNZ                PDE_Loop
	 /* Clear ebx for initial processor boot.
      * When secondary processors boot, they'll call through
      * __RME_X64_SMP_Boot, but with a nonzero ebx.
      * We'll reuse these bootstrap pagetables and GDT. */
     XOR                %EBX,%EBX
ffffffff80108093:	31 db                	xor    %ebx,%ebx

ffffffff80108095 <__RME_X64_SMP_Boot_32>:
     /* SMP boot will run directly from here */
__RME_X64_SMP_Boot_32:
     /* CR3 -> PML4 @ 0x101000 */
     MOV                $0x101000,%EAX
ffffffff80108095:	b8 00 10 10 00       	mov    $0x101000,%eax
     MOV                %EAX,%CR3
ffffffff8010809a:	0f 22 d8             	mov    %rax,%cr3
     /* Load GDT */
     LGDT               (Boot_GDT_Desc-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff8010809d:	0f 01 15 28 81 10 00 	lgdt   0x108128(%rip)        # ffffffff802101cc <_RME_Sig_Rcv.isra.0+0x14c>
     /* Enable PAE - CR4.PAE=1 */
     MOV                %CR4,%EAX
ffffffff801080a4:	0f 20 e0             	mov    %cr4,%rax
     BTS                $5,%EAX
ffffffff801080a7:	0f ba e8 05          	bts    $0x5,%eax
     MOV                %EAX,%CR4
ffffffff801080ab:	0f 22 e0             	mov    %rax,%cr4
     /* Enable long mode and no execute bit - EFER.LME=1, EFER.NXE=1 */
     MOV                $0xC0000080,%ECX
ffffffff801080ae:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
     RDMSR
ffffffff801080b3:	0f 32                	rdmsr  
     BTS                $8,%EAX
ffffffff801080b5:	0f ba e8 08          	bts    $0x8,%eax
     BTS                $11,%EAX
ffffffff801080b9:	0f ba e8 0b          	bts    $0xb,%eax
     WRMSR
ffffffff801080bd:	0f 30                	wrmsr  
     /* Enable paging */
     MOV                %CR0,%EAX
ffffffff801080bf:	0f 20 c0             	mov    %cr0,%rax
     BTS                $31,%EAX
ffffffff801080c2:	0f ba e8 1f          	bts    $0x1f,%eax
     MOV                %EAX,%CR0
ffffffff801080c6:	0f 22 c0             	mov    %rax,%cr0
     /* Enable PCID - CR4.PCIDE=1 FIXME: this made things slower - due to extra logic for PCID processing *//*
     MOV                %CR4,%EAX
     BTS                $17,%EAX
     MOV                %EAX,%CR4 */
     /* shift to 64bit segment */
     LJMP               $8,$(Boot_Low_64-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff801080c9:	ea                   	(bad)  
ffffffff801080ca:	d0 80 10 00 08 00    	rolb   0x80010(%rax)

ffffffff801080d0 <Boot_Low_64>:

/* Now we are in 64-bit mode *************************************************/
    .align              16
    .code64
Boot_Low_64:
    movq                $Boot_High_64,%RAX
ffffffff801080d0:	48 c7 c0 d9 80 10 80 	mov    $0xffffffff801080d9,%rax
    jmp                 *%RAX
ffffffff801080d7:	ff e0                	jmp    *%rax

ffffffff801080d9 <_start>:
_start:
Boot_High_64:
    /* ensure data segment registers are sane - zero out all of them */
    XOR                 %RAX,%RAX
ffffffff801080d9:	48 31 c0             	xor    %rax,%rax
    /* Below are all 16-bit moves */
    MOV                 %AX,%SS
ffffffff801080dc:	8e d0                	mov    %eax,%ss
    MOV                 %AX,%DS
ffffffff801080de:	8e d8                	mov    %eax,%ds
    MOV                 %AX,%ES
ffffffff801080e0:	8e c0                	mov    %eax,%es
    MOV                 %AX,%FS
ffffffff801080e2:	8e e0                	mov    %eax,%fs
    MOV                 %AX,%GS
ffffffff801080e4:	8e e8                	mov    %eax,%gs
    /* Check to see if we're booting a secondary core */
    TEST                %EBX,%EBX
ffffffff801080e6:	85 db                	test   %ebx,%ebx
    JNZ                 Boot_SMP_64
ffffffff801080e8:	75 12                	jne    ffffffff801080fc <Boot_SMP_64>
    /* Setup initial stack - this is hard-coded at low memory */
    MOV                 $__RME_X64_Kern_Boot_Stack,%RAX
ffffffff801080ea:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
    MOV                 %RAX,%RSP
ffffffff801080f1:	48 89 c4             	mov    %rax,%rsp
    /* Pass the physical address of RSI to it */
    MOV                 %RSI,%RDI
ffffffff801080f4:	48 89 f7             	mov    %rsi,%rdi
    JMP                 main
ffffffff801080f7:	e9 f4 32 11 00       	jmp    ffffffff8021b3f0 <main>

ffffffff801080fc <Boot_SMP_64>:
Boot_SMP_64:
    MOV                 $0x7000,%RAX
ffffffff801080fc:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax
    MOV                 -16(%RAX),%RSP
ffffffff80108103:	48 8b 60 f0          	mov    -0x10(%rax),%rsp
    JMP                 __RME_SMP_Low_Level_Init
ffffffff80108107:	e9 c4 1b 11 00       	jmp    ffffffff80219cd0 <__RME_SMP_Low_Level_Init>
ffffffff8010810c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80108110 <Boot_GDT>:
	...
ffffffff8010811c:	00 98 20 00 00 00    	add    %bl,0x20(%rax)
ffffffff80108122:	00 00                	add    %al,(%rax)
ffffffff80108124:	00                   	.byte 0x0
ffffffff80108125:	90                   	nop
	...

ffffffff80108128 <Boot_GDT_Desc>:
ffffffff80108128:	17                   	(bad)  
ffffffff80108129:	00 10                	add    %dl,(%rax)
ffffffff8010812b:	81 10 00 00 00 00    	adcl   $0x0,(%rax)
ffffffff80108131:	00 66 66             	add    %ah,0x66(%rsi)
ffffffff80108134:	2e 0f 1f 84 00 00 00 	cs nopl 0x0(%rax,%rax,1)
ffffffff8010813b:	00 00 
ffffffff8010813d:	0f 1f 00             	nopl   (%rax)
ffffffff80108140:	e9 bb 0e 00 00       	jmp    ffffffff80109000 <RME_X64_Kpgt>
ffffffff80108145:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010814c:	00 00 00 00 
ffffffff80108150:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108157:	00 00 00 00 
ffffffff8010815b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108162:	00 00 00 00 
ffffffff80108166:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010816d:	00 00 00 00 
ffffffff80108171:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108178:	00 00 00 00 
ffffffff8010817c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108183:	00 00 00 00 
ffffffff80108187:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010818e:	00 00 00 00 
ffffffff80108192:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108199:	00 00 00 00 
ffffffff8010819d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081a4:	00 00 00 00 
ffffffff801081a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081af:	00 00 00 00 
ffffffff801081b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081ba:	00 00 00 00 
ffffffff801081be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081c5:	00 00 00 00 
ffffffff801081c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081d0:	00 00 00 00 
ffffffff801081d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081db:	00 00 00 00 
ffffffff801081df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081e6:	00 00 00 00 
ffffffff801081ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081f1:	00 00 00 00 
ffffffff801081f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081fc:	00 00 00 00 
ffffffff80108200:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108207:	00 00 00 00 
ffffffff8010820b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108212:	00 00 00 00 
ffffffff80108216:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010821d:	00 00 00 00 
ffffffff80108221:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108228:	00 00 00 00 
ffffffff8010822c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108233:	00 00 00 00 
ffffffff80108237:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010823e:	00 00 00 00 
ffffffff80108242:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108249:	00 00 00 00 
ffffffff8010824d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108254:	00 00 00 00 
ffffffff80108258:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010825f:	00 00 00 00 
ffffffff80108263:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010826a:	00 00 00 00 
ffffffff8010826e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108275:	00 00 00 00 
ffffffff80108279:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108280:	00 00 00 00 
ffffffff80108284:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010828b:	00 00 00 00 
ffffffff8010828f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108296:	00 00 00 00 
ffffffff8010829a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082a1:	00 00 00 00 
ffffffff801082a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ac:	00 00 00 00 
ffffffff801082b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082b7:	00 00 00 00 
ffffffff801082bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082c2:	00 00 00 00 
ffffffff801082c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082cd:	00 00 00 00 
ffffffff801082d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082d8:	00 00 00 00 
ffffffff801082dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082e3:	00 00 00 00 
ffffffff801082e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ee:	00 00 00 00 
ffffffff801082f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082f9:	00 00 00 00 
ffffffff801082fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108304:	00 00 00 00 
ffffffff80108308:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010830f:	00 00 00 00 
ffffffff80108313:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010831a:	00 00 00 00 
ffffffff8010831e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108325:	00 00 00 00 
ffffffff80108329:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108330:	00 00 00 00 
ffffffff80108334:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010833b:	00 00 00 00 
ffffffff8010833f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108346:	00 00 00 00 
ffffffff8010834a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108351:	00 00 00 00 
ffffffff80108355:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010835c:	00 00 00 00 
ffffffff80108360:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108367:	00 00 00 00 
ffffffff8010836b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108372:	00 00 00 00 
ffffffff80108376:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010837d:	00 00 00 00 
ffffffff80108381:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108388:	00 00 00 00 
ffffffff8010838c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108393:	00 00 00 00 
ffffffff80108397:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010839e:	00 00 00 00 
ffffffff801083a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083a9:	00 00 00 00 
ffffffff801083ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083b4:	00 00 00 00 
ffffffff801083b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083bf:	00 00 00 00 
ffffffff801083c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083ca:	00 00 00 00 
ffffffff801083ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083d5:	00 00 00 00 
ffffffff801083d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083e0:	00 00 00 00 
ffffffff801083e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083eb:	00 00 00 00 
ffffffff801083ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083f6:	00 00 00 00 
ffffffff801083fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108401:	00 00 00 00 
ffffffff80108405:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010840c:	00 00 00 00 
ffffffff80108410:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108417:	00 00 00 00 
ffffffff8010841b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108422:	00 00 00 00 
ffffffff80108426:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010842d:	00 00 00 00 
ffffffff80108431:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108438:	00 00 00 00 
ffffffff8010843c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108443:	00 00 00 00 
ffffffff80108447:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010844e:	00 00 00 00 
ffffffff80108452:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108459:	00 00 00 00 
ffffffff8010845d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108464:	00 00 00 00 
ffffffff80108468:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010846f:	00 00 00 00 
ffffffff80108473:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010847a:	00 00 00 00 
ffffffff8010847e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108485:	00 00 00 00 
ffffffff80108489:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108490:	00 00 00 00 
ffffffff80108494:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010849b:	00 00 00 00 
ffffffff8010849f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084a6:	00 00 00 00 
ffffffff801084aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084b1:	00 00 00 00 
ffffffff801084b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084bc:	00 00 00 00 
ffffffff801084c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084c7:	00 00 00 00 
ffffffff801084cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084d2:	00 00 00 00 
ffffffff801084d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084dd:	00 00 00 00 
ffffffff801084e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084e8:	00 00 00 00 
ffffffff801084ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084f3:	00 00 00 00 
ffffffff801084f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084fe:	00 00 00 00 
ffffffff80108502:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108509:	00 00 00 00 
ffffffff8010850d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108514:	00 00 00 00 
ffffffff80108518:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010851f:	00 00 00 00 
ffffffff80108523:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010852a:	00 00 00 00 
ffffffff8010852e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108535:	00 00 00 00 
ffffffff80108539:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108540:	00 00 00 00 
ffffffff80108544:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010854b:	00 00 00 00 
ffffffff8010854f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108556:	00 00 00 00 
ffffffff8010855a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108561:	00 00 00 00 
ffffffff80108565:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010856c:	00 00 00 00 
ffffffff80108570:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108577:	00 00 00 00 
ffffffff8010857b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108582:	00 00 00 00 
ffffffff80108586:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010858d:	00 00 00 00 
ffffffff80108591:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108598:	00 00 00 00 
ffffffff8010859c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085a3:	00 00 00 00 
ffffffff801085a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085ae:	00 00 00 00 
ffffffff801085b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085b9:	00 00 00 00 
ffffffff801085bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085c4:	00 00 00 00 
ffffffff801085c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085cf:	00 00 00 00 
ffffffff801085d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085da:	00 00 00 00 
ffffffff801085de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085e5:	00 00 00 00 
ffffffff801085e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085f0:	00 00 00 00 
ffffffff801085f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085fb:	00 00 00 00 
ffffffff801085ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108606:	00 00 00 00 
ffffffff8010860a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108611:	00 00 00 00 
ffffffff80108615:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010861c:	00 00 00 00 
ffffffff80108620:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108627:	00 00 00 00 
ffffffff8010862b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108632:	00 00 00 00 
ffffffff80108636:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010863d:	00 00 00 00 
ffffffff80108641:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108648:	00 00 00 00 
ffffffff8010864c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108653:	00 00 00 00 
ffffffff80108657:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010865e:	00 00 00 00 
ffffffff80108662:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108669:	00 00 00 00 
ffffffff8010866d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108674:	00 00 00 00 
ffffffff80108678:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010867f:	00 00 00 00 
ffffffff80108683:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010868a:	00 00 00 00 
ffffffff8010868e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108695:	00 00 00 00 
ffffffff80108699:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086a0:	00 00 00 00 
ffffffff801086a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ab:	00 00 00 00 
ffffffff801086af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086b6:	00 00 00 00 
ffffffff801086ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086c1:	00 00 00 00 
ffffffff801086c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086cc:	00 00 00 00 
ffffffff801086d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086d7:	00 00 00 00 
ffffffff801086db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086e2:	00 00 00 00 
ffffffff801086e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ed:	00 00 00 00 
ffffffff801086f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086f8:	00 00 00 00 
ffffffff801086fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108703:	00 00 00 00 
ffffffff80108707:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010870e:	00 00 00 00 
ffffffff80108712:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108719:	00 00 00 00 
ffffffff8010871d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108724:	00 00 00 00 
ffffffff80108728:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010872f:	00 00 00 00 
ffffffff80108733:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010873a:	00 00 00 00 
ffffffff8010873e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108745:	00 00 00 00 
ffffffff80108749:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108750:	00 00 00 00 
ffffffff80108754:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010875b:	00 00 00 00 
ffffffff8010875f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108766:	00 00 00 00 
ffffffff8010876a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108771:	00 00 00 00 
ffffffff80108775:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010877c:	00 00 00 00 
ffffffff80108780:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108787:	00 00 00 00 
ffffffff8010878b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108792:	00 00 00 00 
ffffffff80108796:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010879d:	00 00 00 00 
ffffffff801087a1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087a8:	00 00 00 00 
ffffffff801087ac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087b3:	00 00 00 00 
ffffffff801087b7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087be:	00 00 00 00 
ffffffff801087c2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087c9:	00 00 00 00 
ffffffff801087cd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087d4:	00 00 00 00 
ffffffff801087d8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087df:	00 00 00 00 
ffffffff801087e3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087ea:	00 00 00 00 
ffffffff801087ee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087f5:	00 00 00 00 
ffffffff801087f9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108800:	00 00 00 00 
ffffffff80108804:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010880b:	00 00 00 00 
ffffffff8010880f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108816:	00 00 00 00 
ffffffff8010881a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108821:	00 00 00 00 
ffffffff80108825:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010882c:	00 00 00 00 
ffffffff80108830:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108837:	00 00 00 00 
ffffffff8010883b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108842:	00 00 00 00 
ffffffff80108846:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010884d:	00 00 00 00 
ffffffff80108851:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108858:	00 00 00 00 
ffffffff8010885c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108863:	00 00 00 00 
ffffffff80108867:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010886e:	00 00 00 00 
ffffffff80108872:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108879:	00 00 00 00 
ffffffff8010887d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108884:	00 00 00 00 
ffffffff80108888:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010888f:	00 00 00 00 
ffffffff80108893:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010889a:	00 00 00 00 
ffffffff8010889e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088a5:	00 00 00 00 
ffffffff801088a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088b0:	00 00 00 00 
ffffffff801088b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088bb:	00 00 00 00 
ffffffff801088bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088c6:	00 00 00 00 
ffffffff801088ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088d1:	00 00 00 00 
ffffffff801088d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088dc:	00 00 00 00 
ffffffff801088e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088e7:	00 00 00 00 
ffffffff801088eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088f2:	00 00 00 00 
ffffffff801088f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088fd:	00 00 00 00 
ffffffff80108901:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108908:	00 00 00 00 
ffffffff8010890c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108913:	00 00 00 00 
ffffffff80108917:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010891e:	00 00 00 00 
ffffffff80108922:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108929:	00 00 00 00 
ffffffff8010892d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108934:	00 00 00 00 
ffffffff80108938:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010893f:	00 00 00 00 
ffffffff80108943:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010894a:	00 00 00 00 
ffffffff8010894e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108955:	00 00 00 00 
ffffffff80108959:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108960:	00 00 00 00 
ffffffff80108964:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010896b:	00 00 00 00 
ffffffff8010896f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108976:	00 00 00 00 
ffffffff8010897a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108981:	00 00 00 00 
ffffffff80108985:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010898c:	00 00 00 00 
ffffffff80108990:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108997:	00 00 00 00 
ffffffff8010899b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089a2:	00 00 00 00 
ffffffff801089a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ad:	00 00 00 00 
ffffffff801089b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089b8:	00 00 00 00 
ffffffff801089bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089c3:	00 00 00 00 
ffffffff801089c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ce:	00 00 00 00 
ffffffff801089d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089d9:	00 00 00 00 
ffffffff801089dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089e4:	00 00 00 00 
ffffffff801089e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ef:	00 00 00 00 
ffffffff801089f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089fa:	00 00 00 00 
ffffffff801089fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a05:	00 00 00 00 
ffffffff80108a09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a10:	00 00 00 00 
ffffffff80108a14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a1b:	00 00 00 00 
ffffffff80108a1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a26:	00 00 00 00 
ffffffff80108a2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a31:	00 00 00 00 
ffffffff80108a35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a3c:	00 00 00 00 
ffffffff80108a40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a47:	00 00 00 00 
ffffffff80108a4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a52:	00 00 00 00 
ffffffff80108a56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a5d:	00 00 00 00 
ffffffff80108a61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a68:	00 00 00 00 
ffffffff80108a6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a73:	00 00 00 00 
ffffffff80108a77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a7e:	00 00 00 00 
ffffffff80108a82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a89:	00 00 00 00 
ffffffff80108a8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a94:	00 00 00 00 
ffffffff80108a98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a9f:	00 00 00 00 
ffffffff80108aa3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aaa:	00 00 00 00 
ffffffff80108aae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ab5:	00 00 00 00 
ffffffff80108ab9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ac0:	00 00 00 00 
ffffffff80108ac4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108acb:	00 00 00 00 
ffffffff80108acf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ad6:	00 00 00 00 
ffffffff80108ada:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ae1:	00 00 00 00 
ffffffff80108ae5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aec:	00 00 00 00 
ffffffff80108af0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108af7:	00 00 00 00 
ffffffff80108afb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b02:	00 00 00 00 
ffffffff80108b06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b0d:	00 00 00 00 
ffffffff80108b11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b18:	00 00 00 00 
ffffffff80108b1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b23:	00 00 00 00 
ffffffff80108b27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b2e:	00 00 00 00 
ffffffff80108b32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b39:	00 00 00 00 
ffffffff80108b3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b44:	00 00 00 00 
ffffffff80108b48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b4f:	00 00 00 00 
ffffffff80108b53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b5a:	00 00 00 00 
ffffffff80108b5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b65:	00 00 00 00 
ffffffff80108b69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b70:	00 00 00 00 
ffffffff80108b74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b7b:	00 00 00 00 
ffffffff80108b7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b86:	00 00 00 00 
ffffffff80108b8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b91:	00 00 00 00 
ffffffff80108b95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b9c:	00 00 00 00 
ffffffff80108ba0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ba7:	00 00 00 00 
ffffffff80108bab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bb2:	00 00 00 00 
ffffffff80108bb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bbd:	00 00 00 00 
ffffffff80108bc1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bc8:	00 00 00 00 
ffffffff80108bcc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bd3:	00 00 00 00 
ffffffff80108bd7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bde:	00 00 00 00 
ffffffff80108be2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108be9:	00 00 00 00 
ffffffff80108bed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bf4:	00 00 00 00 
ffffffff80108bf8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bff:	00 00 00 00 
ffffffff80108c03:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c0a:	00 00 00 00 
ffffffff80108c0e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c15:	00 00 00 00 
ffffffff80108c19:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c20:	00 00 00 00 
ffffffff80108c24:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c2b:	00 00 00 00 
ffffffff80108c2f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c36:	00 00 00 00 
ffffffff80108c3a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c41:	00 00 00 00 
ffffffff80108c45:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c4c:	00 00 00 00 
ffffffff80108c50:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c57:	00 00 00 00 
ffffffff80108c5b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c62:	00 00 00 00 
ffffffff80108c66:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c6d:	00 00 00 00 
ffffffff80108c71:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c78:	00 00 00 00 
ffffffff80108c7c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c83:	00 00 00 00 
ffffffff80108c87:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c8e:	00 00 00 00 
ffffffff80108c92:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c99:	00 00 00 00 
ffffffff80108c9d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ca4:	00 00 00 00 
ffffffff80108ca8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108caf:	00 00 00 00 
ffffffff80108cb3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cba:	00 00 00 00 
ffffffff80108cbe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cc5:	00 00 00 00 
ffffffff80108cc9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cd0:	00 00 00 00 
ffffffff80108cd4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cdb:	00 00 00 00 
ffffffff80108cdf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ce6:	00 00 00 00 
ffffffff80108cea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cf1:	00 00 00 00 
ffffffff80108cf5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cfc:	00 00 00 00 
ffffffff80108d00:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d07:	00 00 00 00 
ffffffff80108d0b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d12:	00 00 00 00 
ffffffff80108d16:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d1d:	00 00 00 00 
ffffffff80108d21:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d28:	00 00 00 00 
ffffffff80108d2c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d33:	00 00 00 00 
ffffffff80108d37:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d3e:	00 00 00 00 
ffffffff80108d42:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d49:	00 00 00 00 
ffffffff80108d4d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d54:	00 00 00 00 
ffffffff80108d58:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d5f:	00 00 00 00 
ffffffff80108d63:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d6a:	00 00 00 00 
ffffffff80108d6e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d75:	00 00 00 00 
ffffffff80108d79:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d80:	00 00 00 00 
ffffffff80108d84:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d8b:	00 00 00 00 
ffffffff80108d8f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d96:	00 00 00 00 
ffffffff80108d9a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108da1:	00 00 00 00 
ffffffff80108da5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dac:	00 00 00 00 
ffffffff80108db0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108db7:	00 00 00 00 
ffffffff80108dbb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dc2:	00 00 00 00 
ffffffff80108dc6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dcd:	00 00 00 00 
ffffffff80108dd1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dd8:	00 00 00 00 
ffffffff80108ddc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108de3:	00 00 00 00 
ffffffff80108de7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dee:	00 00 00 00 
ffffffff80108df2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108df9:	00 00 00 00 
ffffffff80108dfd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e04:	00 00 00 00 
ffffffff80108e08:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e0f:	00 00 00 00 
ffffffff80108e13:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e1a:	00 00 00 00 
ffffffff80108e1e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e25:	00 00 00 00 
ffffffff80108e29:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e30:	00 00 00 00 
ffffffff80108e34:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e3b:	00 00 00 00 
ffffffff80108e3f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e46:	00 00 00 00 
ffffffff80108e4a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e51:	00 00 00 00 
ffffffff80108e55:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e5c:	00 00 00 00 
ffffffff80108e60:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e67:	00 00 00 00 
ffffffff80108e6b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e72:	00 00 00 00 
ffffffff80108e76:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e7d:	00 00 00 00 
ffffffff80108e81:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e88:	00 00 00 00 
ffffffff80108e8c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e93:	00 00 00 00 
ffffffff80108e97:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e9e:	00 00 00 00 
ffffffff80108ea2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ea9:	00 00 00 00 
ffffffff80108ead:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eb4:	00 00 00 00 
ffffffff80108eb8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ebf:	00 00 00 00 
ffffffff80108ec3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eca:	00 00 00 00 
ffffffff80108ece:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ed5:	00 00 00 00 
ffffffff80108ed9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ee0:	00 00 00 00 
ffffffff80108ee4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eeb:	00 00 00 00 
ffffffff80108eef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ef6:	00 00 00 00 
ffffffff80108efa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f01:	00 00 00 00 
ffffffff80108f05:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f0c:	00 00 00 00 
ffffffff80108f10:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f17:	00 00 00 00 
ffffffff80108f1b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f22:	00 00 00 00 
ffffffff80108f26:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f2d:	00 00 00 00 
ffffffff80108f31:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f38:	00 00 00 00 
ffffffff80108f3c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f43:	00 00 00 00 
ffffffff80108f47:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f4e:	00 00 00 00 
ffffffff80108f52:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f59:	00 00 00 00 
ffffffff80108f5d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f64:	00 00 00 00 
ffffffff80108f68:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f6f:	00 00 00 00 
ffffffff80108f73:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f7a:	00 00 00 00 
ffffffff80108f7e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f85:	00 00 00 00 
ffffffff80108f89:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f90:	00 00 00 00 
ffffffff80108f94:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f9b:	00 00 00 00 
ffffffff80108f9f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fa6:	00 00 00 00 
ffffffff80108faa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fb1:	00 00 00 00 
ffffffff80108fb5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fbc:	00 00 00 00 
ffffffff80108fc0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fc7:	00 00 00 00 
ffffffff80108fcb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fd2:	00 00 00 00 
ffffffff80108fd6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fdd:	00 00 00 00 
ffffffff80108fe1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fe8:	00 00 00 00 
ffffffff80108fec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ff3:	00 00 00 00 
ffffffff80108ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80108ffe:	00 00 

ffffffff80109000 <RME_X64_Kpgt>:
	...

ffffffff8020b800 <__RME_X64_In>:
Input       : ptr_t Port - The port to output to.
Output      : None.
Return      : ptr_t - The data received from that port.
******************************************************************************/
__RME_X64_In:
    PUSHQ               %RDX
ffffffff8020b800:	52                   	push   %rdx
    MOVQ                %RDI,%RDX
ffffffff8020b801:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RAX,%RAX
ffffffff8020b804:	48 89 c0             	mov    %rax,%rax
    INB                 (%DX),%AL
ffffffff8020b807:	ec                   	in     (%dx),%al
    POPQ                %RDX
ffffffff8020b808:	5a                   	pop    %rdx
    RETQ
ffffffff8020b809:	c3                   	ret    

ffffffff8020b80a <__RME_X64_Out>:
                 ptr_t Data - The data to send to that port.
Output         : None.
Return         : None.
******************************************************************************/
__RME_X64_Out:
    PUSHQ               %RDX
ffffffff8020b80a:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b80b:	50                   	push   %rax
    MOVQ                %RDI,%RDX
ffffffff8020b80c:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RSI,%RAX
ffffffff8020b80f:	48 89 f0             	mov    %rsi,%rax
    OUTB                %AL,(%DX)
ffffffff8020b812:	ee                   	out    %al,(%dx)
    POPQ                %RAX
ffffffff8020b813:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b814:	5a                   	pop    %rdx
    RETQ
ffffffff8020b815:	c3                   	ret    

ffffffff8020b816 <__RME_X64_Read_MSR>:
Input       : ptr_t MSR - The MSR to read.
Output      : None.
Return      : ptr_t - The content of the MSR.
******************************************************************************/
__RME_X64_Read_MSR:
    PUSHQ               %RCX
ffffffff8020b816:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b817:	52                   	push   %rdx
    MOVQ                %RDI,%RCX
ffffffff8020b818:	48 89 f9             	mov    %rdi,%rcx
    XORQ                %RAX,%RAX
ffffffff8020b81b:	48 31 c0             	xor    %rax,%rax
    RDMSR
ffffffff8020b81e:	0f 32                	rdmsr  
    SHLQ                $32,%RDX
ffffffff8020b820:	48 c1 e2 20          	shl    $0x20,%rdx
    ADDQ                %RDX,%RAX
ffffffff8020b824:	48 01 d0             	add    %rdx,%rax
    POPQ                %RDX
ffffffff8020b827:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b828:	59                   	pop    %rcx
    RETQ
ffffffff8020b829:	c3                   	ret    

ffffffff8020b82a <__RME_X64_Write_MSR>:
              ptr_t Value - The value to write to it.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_MSR:
    PUSHQ               %RCX
ffffffff8020b82a:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b82b:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b82c:	50                   	push   %rax
    MOVQ                %RDI,%RCX
ffffffff8020b82d:	48 89 f9             	mov    %rdi,%rcx
    MOVL                %ESI,%EAX
ffffffff8020b830:	89 f0                	mov    %esi,%eax
    MOVQ                %RSI,%RDX
ffffffff8020b832:	48 89 f2             	mov    %rsi,%rdx
    SHR                 $32,%RDX
ffffffff8020b835:	48 c1 ea 20          	shr    $0x20,%rdx
    WRMSR
ffffffff8020b839:	0f 30                	wrmsr  
    POPQ                %RAX
ffffffff8020b83b:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b83c:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b83d:	59                   	pop    %rcx
    RETQ
ffffffff8020b83e:	c3                   	ret    

ffffffff8020b83f <__RME_X64_CPU_Local_Get>:
Input       : None.
Output      : None.
Return      : struct RME_CPU_Local* - The CPU-local data structures.
******************************************************************************/
__RME_X64_CPU_Local_Get:
    MOVQ                %GS:(8192-8*3),%RAX
ffffffff8020b83f:	65 48 8b 04 25 e8 1f 	mov    %gs:0x1fe8,%rax
ffffffff8020b846:	00 00 
    RETQ
ffffffff8020b848:	c3                   	ret    

ffffffff8020b849 <__RME_X64_CPUID_Get>:
              ptr_t* ECX - The ECX info.
              ptr_t* EDX - The EDX info.
Return      : ptr_t - The maximum number for CPUID instruction.
******************************************************************************/
__RME_X64_CPUID_Get:
    PUSHQ               %R8
ffffffff8020b849:	41 50                	push   %r8
    PUSHQ               %R9
ffffffff8020b84b:	41 51                	push   %r9
    PUSHQ               %RBX
ffffffff8020b84d:	53                   	push   %rbx
    PUSHQ               %RCX
ffffffff8020b84e:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b84f:	52                   	push   %rdx

    MOVQ                %RDI,%RAX
ffffffff8020b850:	48 89 f8             	mov    %rdi,%rax
    MOVQ                %RDX,%R8
ffffffff8020b853:	49 89 d0             	mov    %rdx,%r8
    MOVQ                %RCX,%R9
ffffffff8020b856:	49 89 c9             	mov    %rcx,%r9

    MOVQ                (%RSI),%RBX
ffffffff8020b859:	48 8b 1e             	mov    (%rsi),%rbx
    MOVQ                (%R8),%RCX
ffffffff8020b85c:	49 8b 08             	mov    (%r8),%rcx
    MOVQ                (%R9),%RDX
ffffffff8020b85f:	49 8b 11             	mov    (%r9),%rdx
    CPUID
ffffffff8020b862:	0f a2                	cpuid  
    MOVQ                %RBX,(%RSI)
ffffffff8020b864:	48 89 1e             	mov    %rbx,(%rsi)
    MOVQ                %RCX,(%R8)
ffffffff8020b867:	49 89 08             	mov    %rcx,(%r8)
    MOVQ                %RDX,(%R9)
ffffffff8020b86a:	49 89 11             	mov    %rdx,(%r9)

    POPQ                %RDX
ffffffff8020b86d:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b86e:	59                   	pop    %rcx
    POPQ                %RBX
ffffffff8020b86f:	5b                   	pop    %rbx
    POPQ                %R9
ffffffff8020b870:	41 59                	pop    %r9
    POPQ                %R8
ffffffff8020b872:	41 58                	pop    %r8
    RETQ
ffffffff8020b874:	c3                   	ret    

ffffffff8020b875 <__RME_X64_GDT_Load>:
Input       : ptr_t* GDTR - The pointer to the GDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_GDT_Load:
    LGDT                (%RDI)
ffffffff8020b875:	0f 01 17             	lgdt   (%rdi)
    RETQ
ffffffff8020b878:	c3                   	ret    

ffffffff8020b879 <__RME_X64_IDT_Load>:
Input       : ptr_t* IDTR - The pointer to the IDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_IDT_Load:
    LIDT                (%RDI)
ffffffff8020b879:	0f 01 1f             	lidt   (%rdi)
    RETQ
ffffffff8020b87c:	c3                   	ret    

ffffffff8020b87d <__RME_X64_TSS_Load>:
Input       : ptr_t TSS - The TSS's position in GDT.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_TSS_Load:
    LTR                 %DI
ffffffff8020b87d:	0f 00 df             	ltr    %di
    RETQ
ffffffff8020b880:	c3                   	ret    

ffffffff8020b881 <__RME_X64_Comp_Swap>:
              ptr_t New - The new value.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - If successful, 1; else 0.
******************************************************************************/
__RME_X64_Comp_Swap:
    MOVQ                %RSI,%RAX
ffffffff8020b881:	48 89 f0             	mov    %rsi,%rax
    XOR                 %RSI,%RSI
ffffffff8020b884:	48 31 f6             	xor    %rsi,%rsi
    /* In x86, locked instructions act as a fence */
    LOCK CMPXCHGQ       %RDX,(%RDI)
ffffffff8020b887:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
    /* Set the bit if ZF is set */
    SETZ                %SIL
ffffffff8020b88c:	40 0f 94 c6          	sete   %sil
    MOVQ                %RSI,%RAX
ffffffff8020b890:	48 89 f0             	mov    %rsi,%rax
    RETQ
ffffffff8020b893:	c3                   	ret    

ffffffff8020b894 <__RME_X64_Fetch_Add>:
              cnt_t Addend - The number to add.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the addition.
******************************************************************************/
__RME_X64_Fetch_Add:
    MOVQ                %RSI,%RAX
ffffffff8020b894:	48 89 f0             	mov    %rsi,%rax
    /* In x86, locked instructions act as a fence */
    LOCK XADDQ          %RAX,(%RDI)
ffffffff8020b897:	f0 48 0f c1 07       	lock xadd %rax,(%rdi)
    RETQ
ffffffff8020b89c:	c3                   	ret    

ffffffff8020b89d <__RME_X64_Fetch_And>:
              cnt_t Operand - The number to logic AND with the destination.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the AND operation.
******************************************************************************/
__RME_X64_Fetch_And:
    MOVQ                (%RDI),%RAX
ffffffff8020b89d:	48 8b 07             	mov    (%rdi),%rax
    /* In x86, locked instructions act as a fence */
    LOCK ANDQ           %RSI,(%RDI)
ffffffff8020b8a0:	f0 48 21 37          	lock and %rsi,(%rdi)
    RETQ
ffffffff8020b8a4:	c3                   	ret    

ffffffff8020b8a5 <__RME_X64_Write_Release>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_Release:
    MFENCE
ffffffff8020b8a5:	0f ae f0             	mfence 
    RETQ
ffffffff8020b8a8:	c3                   	ret    

ffffffff8020b8a9 <__RME_X64_Pgt_Set>:
Input       : ptr_t Pgt - The physical address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Pgt_Set:
    MOV                 %RDI,%CR3
ffffffff8020b8a9:	0f 22 df             	mov    %rdi,%cr3
    RETQ
ffffffff8020b8ac:	c3                   	ret    

ffffffff8020b8ad <__RME_Disable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Disable_Int:
    /* Disable all interrupts */
    CLI
ffffffff8020b8ad:	fa                   	cli    
    RETQ
ffffffff8020b8ae:	c3                   	ret    

ffffffff8020b8af <__RME_Enable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enable_Int:
    /* Enable all interrupts */
    STI
ffffffff8020b8af:	fb                   	sti    
    RETQ
ffffffff8020b8b0:	c3                   	ret    

ffffffff8020b8b1 <__RME_X64_Halt>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Halt:
    /* Wait for interrupt */
    HLT
ffffffff8020b8b1:	f4                   	hlt    
    RETQ
ffffffff8020b8b2:	c3                   	ret    

ffffffff8020b8b3 <_RME_Kmain>:
Input       : ptr_t Stack - The stack address to set SP to.
Output      : None.
Return      : None.
******************************************************************************/
_RME_Kmain:
    MOVQ                %RDI,%RSP
ffffffff8020b8b3:	48 89 fc             	mov    %rdi,%rsp
    JMP                 RME_Kmain
ffffffff8020b8b6:	e9 25 1c 00 00       	jmp    ffffffff8020d4e0 <RME_Kmain>

ffffffff8020b8bb <__RME_X64_MSB_Get>:
Input       : ptr_t Val - The value.
Output      : None.
Return      : ptr_t - The MSB position.
******************************************************************************/
__RME_X64_MSB_Get:
    BSRQ                %RDI,%RAX
ffffffff8020b8bb:	48 0f bd c7          	bsr    %rdi,%rax
    RETQ
ffffffff8020b8bf:	c3                   	ret    

ffffffff8020b8c0 <__RME_Enter_User_Mode>:
              ptr_t CPUID - The CPUID.
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enter_User_Mode:
    MOVQ                %RDI,%RCX           /* Entry */
ffffffff8020b8c0:	48 89 f9             	mov    %rdi,%rcx
    MOVQ                %RSI,%RSP           /* Stack */
ffffffff8020b8c3:	48 89 f4             	mov    %rsi,%rsp
    MOVQ                $0x3200,%R11        /* Flags - IOPL 3, IF */
ffffffff8020b8c6:	49 c7 c3 00 32 00 00 	mov    $0x3200,%r11
    MOVQ                %RDX,%RDI           /* CPUID */
ffffffff8020b8cd:	48 89 d7             	mov    %rdx,%rdi
    SYSRETQ
ffffffff8020b8d0:	48 0f 07             	sysretq 

ffffffff8020b8d3 <__RME_X64_FAULT_DE_Handler>:
    PUSHQ               $\REASON
    JMP                 Fault_Handler
.endm

/* Fault handlers */
FAULT_HANDLER NAME=__RME_X64_FAULT_DE_Handler ERRCODE=0 REASON=0
ffffffff8020b8d3:	0f 01 f8             	swapgs 
ffffffff8020b8d6:	6a 00                	push   $0x0
ffffffff8020b8d8:	6a 00                	push   $0x0
ffffffff8020b8da:	e9 a6 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8df <__RME_X64_TRAP_DB_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_DB_Handler ERRCODE=0 REASON=1
ffffffff8020b8df:	0f 01 f8             	swapgs 
ffffffff8020b8e2:	6a 00                	push   $0x0
ffffffff8020b8e4:	6a 01                	push   $0x1
ffffffff8020b8e6:	e9 9a 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8eb <__RME_X64_INT_NMI_Handler>:
FAULT_HANDLER NAME=__RME_X64_INT_NMI_Handler ERRCODE=0 REASON=2
ffffffff8020b8eb:	0f 01 f8             	swapgs 
ffffffff8020b8ee:	6a 00                	push   $0x0
ffffffff8020b8f0:	6a 02                	push   $0x2
ffffffff8020b8f2:	e9 8e 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8f7 <__RME_X64_TRAP_BP_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_BP_Handler ERRCODE=0 REASON=3
ffffffff8020b8f7:	0f 01 f8             	swapgs 
ffffffff8020b8fa:	6a 00                	push   $0x0
ffffffff8020b8fc:	6a 03                	push   $0x3
ffffffff8020b8fe:	e9 82 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b903 <__RME_X64_TRAP_OF_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_OF_Handler ERRCODE=0 REASON=4
ffffffff8020b903:	0f 01 f8             	swapgs 
ffffffff8020b906:	6a 00                	push   $0x0
ffffffff8020b908:	6a 04                	push   $0x4
ffffffff8020b90a:	eb 79                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b90c <__RME_X64_FAULT_BR_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_BR_Handler ERRCODE=0 REASON=5
ffffffff8020b90c:	0f 01 f8             	swapgs 
ffffffff8020b90f:	6a 00                	push   $0x0
ffffffff8020b911:	6a 05                	push   $0x5
ffffffff8020b913:	eb 70                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b915 <__RME_X64_FAULT_UD_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_UD_Handler ERRCODE=0 REASON=6
ffffffff8020b915:	0f 01 f8             	swapgs 
ffffffff8020b918:	6a 00                	push   $0x0
ffffffff8020b91a:	6a 06                	push   $0x6
ffffffff8020b91c:	eb 67                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b91e <__RME_X64_FAULT_NM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NM_Handler ERRCODE=0 REASON=7
ffffffff8020b91e:	0f 01 f8             	swapgs 
ffffffff8020b921:	6a 00                	push   $0x0
ffffffff8020b923:	6a 07                	push   $0x7
ffffffff8020b925:	eb 5e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b927 <__RME_X64_ABORT_DF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_DF_Handler ERRCODE=1 REASON=8
ffffffff8020b927:	0f 01 f8             	swapgs 
ffffffff8020b92a:	6a 08                	push   $0x8
ffffffff8020b92c:	eb 57                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b92e <__RME_X64_ABORT_OLD_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_OLD_MF_Handler ERRCODE=0 REASON=9
ffffffff8020b92e:	0f 01 f8             	swapgs 
ffffffff8020b931:	6a 00                	push   $0x0
ffffffff8020b933:	6a 09                	push   $0x9
ffffffff8020b935:	eb 4e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b937 <__RME_X64_FAULT_TS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_TS_Handler ERRCODE=1 REASON=10
ffffffff8020b937:	0f 01 f8             	swapgs 
ffffffff8020b93a:	6a 0a                	push   $0xa
ffffffff8020b93c:	eb 47                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b93e <__RME_X64_FAULT_NP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NP_Handler ERRCODE=1 REASON=11
ffffffff8020b93e:	0f 01 f8             	swapgs 
ffffffff8020b941:	6a 0b                	push   $0xb
ffffffff8020b943:	eb 40                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b945 <__RME_X64_FAULT_SS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_SS_Handler ERRCODE=1 REASON=12
ffffffff8020b945:	0f 01 f8             	swapgs 
ffffffff8020b948:	6a 0c                	push   $0xc
ffffffff8020b94a:	eb 39                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b94c <__RME_X64_FAULT_GP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_GP_Handler ERRCODE=1 REASON=13
ffffffff8020b94c:	0f 01 f8             	swapgs 
ffffffff8020b94f:	6a 0d                	push   $0xd
ffffffff8020b951:	eb 32                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b953 <__RME_X64_FAULT_PF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_PF_Handler ERRCODE=1 REASON=14
ffffffff8020b953:	0f 01 f8             	swapgs 
ffffffff8020b956:	6a 0e                	push   $0xe
ffffffff8020b958:	eb 2b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b95a <__RME_X64_FAULT_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_MF_Handler ERRCODE=0 REASON=16
ffffffff8020b95a:	0f 01 f8             	swapgs 
ffffffff8020b95d:	6a 00                	push   $0x0
ffffffff8020b95f:	6a 10                	push   $0x10
ffffffff8020b961:	eb 22                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b963 <__RME_X64_FAULT_AC_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_AC_Handler ERRCODE=1 REASON=17
ffffffff8020b963:	0f 01 f8             	swapgs 
ffffffff8020b966:	6a 11                	push   $0x11
ffffffff8020b968:	eb 1b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b96a <__RME_X64_ABORT_MC_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_MC_Handler ERRCODE=0 REASON=18
ffffffff8020b96a:	0f 01 f8             	swapgs 
ffffffff8020b96d:	6a 00                	push   $0x0
ffffffff8020b96f:	6a 12                	push   $0x12
ffffffff8020b971:	eb 12                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b973 <__RME_X64_FAULT_XM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_XM_Handler ERRCODE=0 REASON=19
ffffffff8020b973:	0f 01 f8             	swapgs 
ffffffff8020b976:	6a 00                	push   $0x0
ffffffff8020b978:	6a 13                	push   $0x13
ffffffff8020b97a:	eb 09                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b97c <__RME_X64_FAULT_VE_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_VE_Handler ERRCODE=0 REASON=20
ffffffff8020b97c:	0f 01 f8             	swapgs 
ffffffff8020b97f:	6a 00                	push   $0x0
ffffffff8020b981:	6a 14                	push   $0x14
ffffffff8020b983:	eb 00                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b985 <Fault_Handler>:
/* Common function body for fault handlers - reduce I-Cache usage */
Fault_Handler:
    SAVE_GP_REGS
ffffffff8020b985:	41 57                	push   %r15
ffffffff8020b987:	41 56                	push   %r14
ffffffff8020b989:	41 55                	push   %r13
ffffffff8020b98b:	41 54                	push   %r12
ffffffff8020b98d:	41 53                	push   %r11
ffffffff8020b98f:	41 52                	push   %r10
ffffffff8020b991:	41 51                	push   %r9
ffffffff8020b993:	41 50                	push   %r8
ffffffff8020b995:	55                   	push   %rbp
ffffffff8020b996:	57                   	push   %rdi
ffffffff8020b997:	56                   	push   %rsi
ffffffff8020b998:	52                   	push   %rdx
ffffffff8020b999:	51                   	push   %rcx
ffffffff8020b99a:	53                   	push   %rbx
ffffffff8020b99b:	50                   	push   %rax
ffffffff8020b99c:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020b9a0:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020b9a2:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020b9a5:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Fault_Handler
ffffffff8020b9aa:	e8 31 f1 00 00       	call   ffffffff8021aae0 <__RME_X64_Fault_Handler>

    RESTORE_GP_REGS
ffffffff8020b9af:	0f 01 f8             	swapgs 
ffffffff8020b9b2:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020b9b6:	8e d8                	mov    %eax,%ds
ffffffff8020b9b8:	58                   	pop    %rax
ffffffff8020b9b9:	5b                   	pop    %rbx
ffffffff8020b9ba:	59                   	pop    %rcx
ffffffff8020b9bb:	5a                   	pop    %rdx
ffffffff8020b9bc:	5e                   	pop    %rsi
ffffffff8020b9bd:	5f                   	pop    %rdi
ffffffff8020b9be:	5d                   	pop    %rbp
ffffffff8020b9bf:	41 58                	pop    %r8
ffffffff8020b9c1:	41 59                	pop    %r9
ffffffff8020b9c3:	41 5a                	pop    %r10
ffffffff8020b9c5:	41 5b                	pop    %r11
ffffffff8020b9c7:	41 5c                	pop    %r12
ffffffff8020b9c9:	41 5d                	pop    %r13
ffffffff8020b9cb:	41 5e                	pop    %r14
ffffffff8020b9cd:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020b9cf:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020b9d3:	48 cf                	iretq  

ffffffff8020b9d5 <__RME_X64_USER32_Handler>:
    PUSHQ               $0                  /* Make a dummy error code */
    PUSHQ               $\VECTNUM           /* Interrupt number */
    JMP                 User_Handler
.endm
/* User handlers */
USER_HANDLER NAME=__RME_X64_USER32_Handler VECTNUM=32
ffffffff8020b9d5:	0f 01 f8             	swapgs 
ffffffff8020b9d8:	6a 00                	push   $0x0
ffffffff8020b9da:	6a 20                	push   $0x20
ffffffff8020b9dc:	e9 d3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9e1 <__RME_X64_USER33_Handler>:
USER_HANDLER NAME=__RME_X64_USER33_Handler VECTNUM=33
ffffffff8020b9e1:	0f 01 f8             	swapgs 
ffffffff8020b9e4:	6a 00                	push   $0x0
ffffffff8020b9e6:	6a 21                	push   $0x21
ffffffff8020b9e8:	e9 c7 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9ed <__RME_X64_USER34_Handler>:
USER_HANDLER NAME=__RME_X64_USER34_Handler VECTNUM=34
ffffffff8020b9ed:	0f 01 f8             	swapgs 
ffffffff8020b9f0:	6a 00                	push   $0x0
ffffffff8020b9f2:	6a 22                	push   $0x22
ffffffff8020b9f4:	e9 bb 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9f9 <__RME_X64_USER35_Handler>:
USER_HANDLER NAME=__RME_X64_USER35_Handler VECTNUM=35
ffffffff8020b9f9:	0f 01 f8             	swapgs 
ffffffff8020b9fc:	6a 00                	push   $0x0
ffffffff8020b9fe:	6a 23                	push   $0x23
ffffffff8020ba00:	e9 af 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba05 <__RME_X64_USER36_Handler>:
USER_HANDLER NAME=__RME_X64_USER36_Handler VECTNUM=36
ffffffff8020ba05:	0f 01 f8             	swapgs 
ffffffff8020ba08:	6a 00                	push   $0x0
ffffffff8020ba0a:	6a 24                	push   $0x24
ffffffff8020ba0c:	e9 a3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba11 <__RME_X64_USER37_Handler>:
USER_HANDLER NAME=__RME_X64_USER37_Handler VECTNUM=37
ffffffff8020ba11:	0f 01 f8             	swapgs 
ffffffff8020ba14:	6a 00                	push   $0x0
ffffffff8020ba16:	6a 25                	push   $0x25
ffffffff8020ba18:	e9 97 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba1d <__RME_X64_USER38_Handler>:
USER_HANDLER NAME=__RME_X64_USER38_Handler VECTNUM=38
ffffffff8020ba1d:	0f 01 f8             	swapgs 
ffffffff8020ba20:	6a 00                	push   $0x0
ffffffff8020ba22:	6a 26                	push   $0x26
ffffffff8020ba24:	e9 8b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba29 <__RME_X64_USER39_Handler>:
USER_HANDLER NAME=__RME_X64_USER39_Handler VECTNUM=39
ffffffff8020ba29:	0f 01 f8             	swapgs 
ffffffff8020ba2c:	6a 00                	push   $0x0
ffffffff8020ba2e:	6a 27                	push   $0x27
ffffffff8020ba30:	e9 7f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba35 <__RME_X64_USER40_Handler>:

USER_HANDLER NAME=__RME_X64_USER40_Handler VECTNUM=40
ffffffff8020ba35:	0f 01 f8             	swapgs 
ffffffff8020ba38:	6a 00                	push   $0x0
ffffffff8020ba3a:	6a 28                	push   $0x28
ffffffff8020ba3c:	e9 73 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba41 <__RME_X64_USER41_Handler>:
USER_HANDLER NAME=__RME_X64_USER41_Handler VECTNUM=41
ffffffff8020ba41:	0f 01 f8             	swapgs 
ffffffff8020ba44:	6a 00                	push   $0x0
ffffffff8020ba46:	6a 29                	push   $0x29
ffffffff8020ba48:	e9 67 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba4d <__RME_X64_USER42_Handler>:
USER_HANDLER NAME=__RME_X64_USER42_Handler VECTNUM=42
ffffffff8020ba4d:	0f 01 f8             	swapgs 
ffffffff8020ba50:	6a 00                	push   $0x0
ffffffff8020ba52:	6a 2a                	push   $0x2a
ffffffff8020ba54:	e9 5b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba59 <__RME_X64_USER43_Handler>:
USER_HANDLER NAME=__RME_X64_USER43_Handler VECTNUM=43
ffffffff8020ba59:	0f 01 f8             	swapgs 
ffffffff8020ba5c:	6a 00                	push   $0x0
ffffffff8020ba5e:	6a 2b                	push   $0x2b
ffffffff8020ba60:	e9 4f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba65 <__RME_X64_USER44_Handler>:
USER_HANDLER NAME=__RME_X64_USER44_Handler VECTNUM=44
ffffffff8020ba65:	0f 01 f8             	swapgs 
ffffffff8020ba68:	6a 00                	push   $0x0
ffffffff8020ba6a:	6a 2c                	push   $0x2c
ffffffff8020ba6c:	e9 43 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba71 <__RME_X64_USER45_Handler>:
USER_HANDLER NAME=__RME_X64_USER45_Handler VECTNUM=45
ffffffff8020ba71:	0f 01 f8             	swapgs 
ffffffff8020ba74:	6a 00                	push   $0x0
ffffffff8020ba76:	6a 2d                	push   $0x2d
ffffffff8020ba78:	e9 37 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba7d <__RME_X64_USER46_Handler>:
USER_HANDLER NAME=__RME_X64_USER46_Handler VECTNUM=46
ffffffff8020ba7d:	0f 01 f8             	swapgs 
ffffffff8020ba80:	6a 00                	push   $0x0
ffffffff8020ba82:	6a 2e                	push   $0x2e
ffffffff8020ba84:	e9 2b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba89 <__RME_X64_USER47_Handler>:
USER_HANDLER NAME=__RME_X64_USER47_Handler VECTNUM=47
ffffffff8020ba89:	0f 01 f8             	swapgs 
ffffffff8020ba8c:	6a 00                	push   $0x0
ffffffff8020ba8e:	6a 2f                	push   $0x2f
ffffffff8020ba90:	e9 1f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba95 <__RME_X64_USER48_Handler>:
USER_HANDLER NAME=__RME_X64_USER48_Handler VECTNUM=48
ffffffff8020ba95:	0f 01 f8             	swapgs 
ffffffff8020ba98:	6a 00                	push   $0x0
ffffffff8020ba9a:	6a 30                	push   $0x30
ffffffff8020ba9c:	e9 13 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baa1 <__RME_X64_USER49_Handler>:
USER_HANDLER NAME=__RME_X64_USER49_Handler VECTNUM=49
ffffffff8020baa1:	0f 01 f8             	swapgs 
ffffffff8020baa4:	6a 00                	push   $0x0
ffffffff8020baa6:	6a 31                	push   $0x31
ffffffff8020baa8:	e9 07 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baad <__RME_X64_USER50_Handler>:

USER_HANDLER NAME=__RME_X64_USER50_Handler VECTNUM=50
ffffffff8020baad:	0f 01 f8             	swapgs 
ffffffff8020bab0:	6a 00                	push   $0x0
ffffffff8020bab2:	6a 32                	push   $0x32
ffffffff8020bab4:	e9 fb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bab9 <__RME_X64_USER51_Handler>:
USER_HANDLER NAME=__RME_X64_USER51_Handler VECTNUM=51
ffffffff8020bab9:	0f 01 f8             	swapgs 
ffffffff8020babc:	6a 00                	push   $0x0
ffffffff8020babe:	6a 33                	push   $0x33
ffffffff8020bac0:	e9 ef 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bac5 <__RME_X64_USER52_Handler>:
USER_HANDLER NAME=__RME_X64_USER52_Handler VECTNUM=52
ffffffff8020bac5:	0f 01 f8             	swapgs 
ffffffff8020bac8:	6a 00                	push   $0x0
ffffffff8020baca:	6a 34                	push   $0x34
ffffffff8020bacc:	e9 e3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bad1 <__RME_X64_USER53_Handler>:
USER_HANDLER NAME=__RME_X64_USER53_Handler VECTNUM=53
ffffffff8020bad1:	0f 01 f8             	swapgs 
ffffffff8020bad4:	6a 00                	push   $0x0
ffffffff8020bad6:	6a 35                	push   $0x35
ffffffff8020bad8:	e9 d7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020badd <__RME_X64_USER54_Handler>:
USER_HANDLER NAME=__RME_X64_USER54_Handler VECTNUM=54
ffffffff8020badd:	0f 01 f8             	swapgs 
ffffffff8020bae0:	6a 00                	push   $0x0
ffffffff8020bae2:	6a 36                	push   $0x36
ffffffff8020bae4:	e9 cb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bae9 <__RME_X64_USER55_Handler>:
USER_HANDLER NAME=__RME_X64_USER55_Handler VECTNUM=55
ffffffff8020bae9:	0f 01 f8             	swapgs 
ffffffff8020baec:	6a 00                	push   $0x0
ffffffff8020baee:	6a 37                	push   $0x37
ffffffff8020baf0:	e9 bf 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baf5 <__RME_X64_USER56_Handler>:
USER_HANDLER NAME=__RME_X64_USER56_Handler VECTNUM=56
ffffffff8020baf5:	0f 01 f8             	swapgs 
ffffffff8020baf8:	6a 00                	push   $0x0
ffffffff8020bafa:	6a 38                	push   $0x38
ffffffff8020bafc:	e9 b3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb01 <__RME_X64_USER57_Handler>:
USER_HANDLER NAME=__RME_X64_USER57_Handler VECTNUM=57
ffffffff8020bb01:	0f 01 f8             	swapgs 
ffffffff8020bb04:	6a 00                	push   $0x0
ffffffff8020bb06:	6a 39                	push   $0x39
ffffffff8020bb08:	e9 a7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb0d <__RME_X64_USER58_Handler>:
USER_HANDLER NAME=__RME_X64_USER58_Handler VECTNUM=58
ffffffff8020bb0d:	0f 01 f8             	swapgs 
ffffffff8020bb10:	6a 00                	push   $0x0
ffffffff8020bb12:	6a 3a                	push   $0x3a
ffffffff8020bb14:	e9 9b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb19 <__RME_X64_USER59_Handler>:
USER_HANDLER NAME=__RME_X64_USER59_Handler VECTNUM=59
ffffffff8020bb19:	0f 01 f8             	swapgs 
ffffffff8020bb1c:	6a 00                	push   $0x0
ffffffff8020bb1e:	6a 3b                	push   $0x3b
ffffffff8020bb20:	e9 8f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb25 <__RME_X64_USER60_Handler>:

USER_HANDLER NAME=__RME_X64_USER60_Handler VECTNUM=60
ffffffff8020bb25:	0f 01 f8             	swapgs 
ffffffff8020bb28:	6a 00                	push   $0x0
ffffffff8020bb2a:	6a 3c                	push   $0x3c
ffffffff8020bb2c:	e9 83 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb31 <__RME_X64_USER61_Handler>:
USER_HANDLER NAME=__RME_X64_USER61_Handler VECTNUM=61
ffffffff8020bb31:	0f 01 f8             	swapgs 
ffffffff8020bb34:	6a 00                	push   $0x0
ffffffff8020bb36:	6a 3d                	push   $0x3d
ffffffff8020bb38:	e9 77 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb3d <__RME_X64_USER62_Handler>:
USER_HANDLER NAME=__RME_X64_USER62_Handler VECTNUM=62
ffffffff8020bb3d:	0f 01 f8             	swapgs 
ffffffff8020bb40:	6a 00                	push   $0x0
ffffffff8020bb42:	6a 3e                	push   $0x3e
ffffffff8020bb44:	e9 6b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb49 <__RME_X64_USER63_Handler>:
USER_HANDLER NAME=__RME_X64_USER63_Handler VECTNUM=63
ffffffff8020bb49:	0f 01 f8             	swapgs 
ffffffff8020bb4c:	6a 00                	push   $0x0
ffffffff8020bb4e:	6a 3f                	push   $0x3f
ffffffff8020bb50:	e9 5f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb55 <__RME_X64_USER64_Handler>:
USER_HANDLER NAME=__RME_X64_USER64_Handler VECTNUM=64
ffffffff8020bb55:	0f 01 f8             	swapgs 
ffffffff8020bb58:	6a 00                	push   $0x0
ffffffff8020bb5a:	6a 40                	push   $0x40
ffffffff8020bb5c:	e9 53 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb61 <__RME_X64_USER65_Handler>:
USER_HANDLER NAME=__RME_X64_USER65_Handler VECTNUM=65
ffffffff8020bb61:	0f 01 f8             	swapgs 
ffffffff8020bb64:	6a 00                	push   $0x0
ffffffff8020bb66:	6a 41                	push   $0x41
ffffffff8020bb68:	e9 47 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb6d <__RME_X64_USER66_Handler>:
USER_HANDLER NAME=__RME_X64_USER66_Handler VECTNUM=66
ffffffff8020bb6d:	0f 01 f8             	swapgs 
ffffffff8020bb70:	6a 00                	push   $0x0
ffffffff8020bb72:	6a 42                	push   $0x42
ffffffff8020bb74:	e9 3b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb79 <__RME_X64_USER67_Handler>:
USER_HANDLER NAME=__RME_X64_USER67_Handler VECTNUM=67
ffffffff8020bb79:	0f 01 f8             	swapgs 
ffffffff8020bb7c:	6a 00                	push   $0x0
ffffffff8020bb7e:	6a 43                	push   $0x43
ffffffff8020bb80:	e9 2f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb85 <__RME_X64_USER68_Handler>:
USER_HANDLER NAME=__RME_X64_USER68_Handler VECTNUM=68
ffffffff8020bb85:	0f 01 f8             	swapgs 
ffffffff8020bb88:	6a 00                	push   $0x0
ffffffff8020bb8a:	6a 44                	push   $0x44
ffffffff8020bb8c:	e9 23 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb91 <__RME_X64_USER69_Handler>:
USER_HANDLER NAME=__RME_X64_USER69_Handler VECTNUM=69
ffffffff8020bb91:	0f 01 f8             	swapgs 
ffffffff8020bb94:	6a 00                	push   $0x0
ffffffff8020bb96:	6a 45                	push   $0x45
ffffffff8020bb98:	e9 17 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb9d <__RME_X64_USER70_Handler>:

USER_HANDLER NAME=__RME_X64_USER70_Handler VECTNUM=70
ffffffff8020bb9d:	0f 01 f8             	swapgs 
ffffffff8020bba0:	6a 00                	push   $0x0
ffffffff8020bba2:	6a 46                	push   $0x46
ffffffff8020bba4:	e9 0b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bba9 <__RME_X64_USER71_Handler>:
USER_HANDLER NAME=__RME_X64_USER71_Handler VECTNUM=71
ffffffff8020bba9:	0f 01 f8             	swapgs 
ffffffff8020bbac:	6a 00                	push   $0x0
ffffffff8020bbae:	6a 47                	push   $0x47
ffffffff8020bbb0:	e9 ff 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbb5 <__RME_X64_USER72_Handler>:
USER_HANDLER NAME=__RME_X64_USER72_Handler VECTNUM=72
ffffffff8020bbb5:	0f 01 f8             	swapgs 
ffffffff8020bbb8:	6a 00                	push   $0x0
ffffffff8020bbba:	6a 48                	push   $0x48
ffffffff8020bbbc:	e9 f3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbc1 <__RME_X64_USER73_Handler>:
USER_HANDLER NAME=__RME_X64_USER73_Handler VECTNUM=73
ffffffff8020bbc1:	0f 01 f8             	swapgs 
ffffffff8020bbc4:	6a 00                	push   $0x0
ffffffff8020bbc6:	6a 49                	push   $0x49
ffffffff8020bbc8:	e9 e7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbcd <__RME_X64_USER74_Handler>:
USER_HANDLER NAME=__RME_X64_USER74_Handler VECTNUM=74
ffffffff8020bbcd:	0f 01 f8             	swapgs 
ffffffff8020bbd0:	6a 00                	push   $0x0
ffffffff8020bbd2:	6a 4a                	push   $0x4a
ffffffff8020bbd4:	e9 db 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbd9 <__RME_X64_USER75_Handler>:
USER_HANDLER NAME=__RME_X64_USER75_Handler VECTNUM=75
ffffffff8020bbd9:	0f 01 f8             	swapgs 
ffffffff8020bbdc:	6a 00                	push   $0x0
ffffffff8020bbde:	6a 4b                	push   $0x4b
ffffffff8020bbe0:	e9 cf 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbe5 <__RME_X64_USER76_Handler>:
USER_HANDLER NAME=__RME_X64_USER76_Handler VECTNUM=76
ffffffff8020bbe5:	0f 01 f8             	swapgs 
ffffffff8020bbe8:	6a 00                	push   $0x0
ffffffff8020bbea:	6a 4c                	push   $0x4c
ffffffff8020bbec:	e9 c3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbf1 <__RME_X64_USER77_Handler>:
USER_HANDLER NAME=__RME_X64_USER77_Handler VECTNUM=77
ffffffff8020bbf1:	0f 01 f8             	swapgs 
ffffffff8020bbf4:	6a 00                	push   $0x0
ffffffff8020bbf6:	6a 4d                	push   $0x4d
ffffffff8020bbf8:	e9 b7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbfd <__RME_X64_USER78_Handler>:
USER_HANDLER NAME=__RME_X64_USER78_Handler VECTNUM=78
ffffffff8020bbfd:	0f 01 f8             	swapgs 
ffffffff8020bc00:	6a 00                	push   $0x0
ffffffff8020bc02:	6a 4e                	push   $0x4e
ffffffff8020bc04:	e9 ab 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc09 <__RME_X64_USER79_Handler>:
USER_HANDLER NAME=__RME_X64_USER79_Handler VECTNUM=79
ffffffff8020bc09:	0f 01 f8             	swapgs 
ffffffff8020bc0c:	6a 00                	push   $0x0
ffffffff8020bc0e:	6a 4f                	push   $0x4f
ffffffff8020bc10:	e9 9f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc15 <__RME_X64_USER80_Handler>:

USER_HANDLER NAME=__RME_X64_USER80_Handler VECTNUM=80
ffffffff8020bc15:	0f 01 f8             	swapgs 
ffffffff8020bc18:	6a 00                	push   $0x0
ffffffff8020bc1a:	6a 50                	push   $0x50
ffffffff8020bc1c:	e9 93 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc21 <__RME_X64_USER81_Handler>:
USER_HANDLER NAME=__RME_X64_USER81_Handler VECTNUM=81
ffffffff8020bc21:	0f 01 f8             	swapgs 
ffffffff8020bc24:	6a 00                	push   $0x0
ffffffff8020bc26:	6a 51                	push   $0x51
ffffffff8020bc28:	e9 87 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc2d <__RME_X64_USER82_Handler>:
USER_HANDLER NAME=__RME_X64_USER82_Handler VECTNUM=82
ffffffff8020bc2d:	0f 01 f8             	swapgs 
ffffffff8020bc30:	6a 00                	push   $0x0
ffffffff8020bc32:	6a 52                	push   $0x52
ffffffff8020bc34:	e9 7b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc39 <__RME_X64_USER83_Handler>:
USER_HANDLER NAME=__RME_X64_USER83_Handler VECTNUM=83
ffffffff8020bc39:	0f 01 f8             	swapgs 
ffffffff8020bc3c:	6a 00                	push   $0x0
ffffffff8020bc3e:	6a 53                	push   $0x53
ffffffff8020bc40:	e9 6f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc45 <__RME_X64_USER84_Handler>:
USER_HANDLER NAME=__RME_X64_USER84_Handler VECTNUM=84
ffffffff8020bc45:	0f 01 f8             	swapgs 
ffffffff8020bc48:	6a 00                	push   $0x0
ffffffff8020bc4a:	6a 54                	push   $0x54
ffffffff8020bc4c:	e9 63 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc51 <__RME_X64_USER85_Handler>:
USER_HANDLER NAME=__RME_X64_USER85_Handler VECTNUM=85
ffffffff8020bc51:	0f 01 f8             	swapgs 
ffffffff8020bc54:	6a 00                	push   $0x0
ffffffff8020bc56:	6a 55                	push   $0x55
ffffffff8020bc58:	e9 57 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc5d <__RME_X64_USER86_Handler>:
USER_HANDLER NAME=__RME_X64_USER86_Handler VECTNUM=86
ffffffff8020bc5d:	0f 01 f8             	swapgs 
ffffffff8020bc60:	6a 00                	push   $0x0
ffffffff8020bc62:	6a 56                	push   $0x56
ffffffff8020bc64:	e9 4b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc69 <__RME_X64_USER87_Handler>:
USER_HANDLER NAME=__RME_X64_USER87_Handler VECTNUM=87
ffffffff8020bc69:	0f 01 f8             	swapgs 
ffffffff8020bc6c:	6a 00                	push   $0x0
ffffffff8020bc6e:	6a 57                	push   $0x57
ffffffff8020bc70:	e9 3f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc75 <__RME_X64_USER88_Handler>:
USER_HANDLER NAME=__RME_X64_USER88_Handler VECTNUM=88
ffffffff8020bc75:	0f 01 f8             	swapgs 
ffffffff8020bc78:	6a 00                	push   $0x0
ffffffff8020bc7a:	6a 58                	push   $0x58
ffffffff8020bc7c:	e9 33 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc81 <__RME_X64_USER89_Handler>:
USER_HANDLER NAME=__RME_X64_USER89_Handler VECTNUM=89
ffffffff8020bc81:	0f 01 f8             	swapgs 
ffffffff8020bc84:	6a 00                	push   $0x0
ffffffff8020bc86:	6a 59                	push   $0x59
ffffffff8020bc88:	e9 27 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc8d <__RME_X64_USER90_Handler>:

USER_HANDLER NAME=__RME_X64_USER90_Handler VECTNUM=90
ffffffff8020bc8d:	0f 01 f8             	swapgs 
ffffffff8020bc90:	6a 00                	push   $0x0
ffffffff8020bc92:	6a 5a                	push   $0x5a
ffffffff8020bc94:	e9 1b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc99 <__RME_X64_USER91_Handler>:
USER_HANDLER NAME=__RME_X64_USER91_Handler VECTNUM=91
ffffffff8020bc99:	0f 01 f8             	swapgs 
ffffffff8020bc9c:	6a 00                	push   $0x0
ffffffff8020bc9e:	6a 5b                	push   $0x5b
ffffffff8020bca0:	e9 0f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bca5 <__RME_X64_USER92_Handler>:
USER_HANDLER NAME=__RME_X64_USER92_Handler VECTNUM=92
ffffffff8020bca5:	0f 01 f8             	swapgs 
ffffffff8020bca8:	6a 00                	push   $0x0
ffffffff8020bcaa:	6a 5c                	push   $0x5c
ffffffff8020bcac:	e9 03 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcb1 <__RME_X64_USER93_Handler>:
USER_HANDLER NAME=__RME_X64_USER93_Handler VECTNUM=93
ffffffff8020bcb1:	0f 01 f8             	swapgs 
ffffffff8020bcb4:	6a 00                	push   $0x0
ffffffff8020bcb6:	6a 5d                	push   $0x5d
ffffffff8020bcb8:	e9 f7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcbd <__RME_X64_USER94_Handler>:
USER_HANDLER NAME=__RME_X64_USER94_Handler VECTNUM=94
ffffffff8020bcbd:	0f 01 f8             	swapgs 
ffffffff8020bcc0:	6a 00                	push   $0x0
ffffffff8020bcc2:	6a 5e                	push   $0x5e
ffffffff8020bcc4:	e9 eb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcc9 <__RME_X64_USER95_Handler>:
USER_HANDLER NAME=__RME_X64_USER95_Handler VECTNUM=95
ffffffff8020bcc9:	0f 01 f8             	swapgs 
ffffffff8020bccc:	6a 00                	push   $0x0
ffffffff8020bcce:	6a 5f                	push   $0x5f
ffffffff8020bcd0:	e9 df 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcd5 <__RME_X64_USER96_Handler>:
USER_HANDLER NAME=__RME_X64_USER96_Handler VECTNUM=96
ffffffff8020bcd5:	0f 01 f8             	swapgs 
ffffffff8020bcd8:	6a 00                	push   $0x0
ffffffff8020bcda:	6a 60                	push   $0x60
ffffffff8020bcdc:	e9 d3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bce1 <__RME_X64_USER97_Handler>:
USER_HANDLER NAME=__RME_X64_USER97_Handler VECTNUM=97
ffffffff8020bce1:	0f 01 f8             	swapgs 
ffffffff8020bce4:	6a 00                	push   $0x0
ffffffff8020bce6:	6a 61                	push   $0x61
ffffffff8020bce8:	e9 c7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bced <__RME_X64_USER98_Handler>:
USER_HANDLER NAME=__RME_X64_USER98_Handler VECTNUM=98
ffffffff8020bced:	0f 01 f8             	swapgs 
ffffffff8020bcf0:	6a 00                	push   $0x0
ffffffff8020bcf2:	6a 62                	push   $0x62
ffffffff8020bcf4:	e9 bb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcf9 <__RME_X64_USER99_Handler>:
USER_HANDLER NAME=__RME_X64_USER99_Handler VECTNUM=99
ffffffff8020bcf9:	0f 01 f8             	swapgs 
ffffffff8020bcfc:	6a 00                	push   $0x0
ffffffff8020bcfe:	6a 63                	push   $0x63
ffffffff8020bd00:	e9 af 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd05 <__RME_X64_USER100_Handler>:

USER_HANDLER NAME=__RME_X64_USER100_Handler VECTNUM=100
ffffffff8020bd05:	0f 01 f8             	swapgs 
ffffffff8020bd08:	6a 00                	push   $0x0
ffffffff8020bd0a:	6a 64                	push   $0x64
ffffffff8020bd0c:	e9 a3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd11 <__RME_X64_USER101_Handler>:
USER_HANDLER NAME=__RME_X64_USER101_Handler VECTNUM=101
ffffffff8020bd11:	0f 01 f8             	swapgs 
ffffffff8020bd14:	6a 00                	push   $0x0
ffffffff8020bd16:	6a 65                	push   $0x65
ffffffff8020bd18:	e9 97 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd1d <__RME_X64_USER102_Handler>:
USER_HANDLER NAME=__RME_X64_USER102_Handler VECTNUM=102
ffffffff8020bd1d:	0f 01 f8             	swapgs 
ffffffff8020bd20:	6a 00                	push   $0x0
ffffffff8020bd22:	6a 66                	push   $0x66
ffffffff8020bd24:	e9 8b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd29 <__RME_X64_USER103_Handler>:
USER_HANDLER NAME=__RME_X64_USER103_Handler VECTNUM=103
ffffffff8020bd29:	0f 01 f8             	swapgs 
ffffffff8020bd2c:	6a 00                	push   $0x0
ffffffff8020bd2e:	6a 67                	push   $0x67
ffffffff8020bd30:	e9 7f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd35 <__RME_X64_USER104_Handler>:
USER_HANDLER NAME=__RME_X64_USER104_Handler VECTNUM=104
ffffffff8020bd35:	0f 01 f8             	swapgs 
ffffffff8020bd38:	6a 00                	push   $0x0
ffffffff8020bd3a:	6a 68                	push   $0x68
ffffffff8020bd3c:	e9 73 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd41 <__RME_X64_USER105_Handler>:
USER_HANDLER NAME=__RME_X64_USER105_Handler VECTNUM=105
ffffffff8020bd41:	0f 01 f8             	swapgs 
ffffffff8020bd44:	6a 00                	push   $0x0
ffffffff8020bd46:	6a 69                	push   $0x69
ffffffff8020bd48:	e9 67 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd4d <__RME_X64_USER106_Handler>:
USER_HANDLER NAME=__RME_X64_USER106_Handler VECTNUM=106
ffffffff8020bd4d:	0f 01 f8             	swapgs 
ffffffff8020bd50:	6a 00                	push   $0x0
ffffffff8020bd52:	6a 6a                	push   $0x6a
ffffffff8020bd54:	e9 5b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd59 <__RME_X64_USER107_Handler>:
USER_HANDLER NAME=__RME_X64_USER107_Handler VECTNUM=107
ffffffff8020bd59:	0f 01 f8             	swapgs 
ffffffff8020bd5c:	6a 00                	push   $0x0
ffffffff8020bd5e:	6a 6b                	push   $0x6b
ffffffff8020bd60:	e9 4f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd65 <__RME_X64_USER108_Handler>:
USER_HANDLER NAME=__RME_X64_USER108_Handler VECTNUM=108
ffffffff8020bd65:	0f 01 f8             	swapgs 
ffffffff8020bd68:	6a 00                	push   $0x0
ffffffff8020bd6a:	6a 6c                	push   $0x6c
ffffffff8020bd6c:	e9 43 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd71 <__RME_X64_USER109_Handler>:
USER_HANDLER NAME=__RME_X64_USER109_Handler VECTNUM=109
ffffffff8020bd71:	0f 01 f8             	swapgs 
ffffffff8020bd74:	6a 00                	push   $0x0
ffffffff8020bd76:	6a 6d                	push   $0x6d
ffffffff8020bd78:	e9 37 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd7d <__RME_X64_USER110_Handler>:

USER_HANDLER NAME=__RME_X64_USER110_Handler VECTNUM=110
ffffffff8020bd7d:	0f 01 f8             	swapgs 
ffffffff8020bd80:	6a 00                	push   $0x0
ffffffff8020bd82:	6a 6e                	push   $0x6e
ffffffff8020bd84:	e9 2b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd89 <__RME_X64_USER111_Handler>:
USER_HANDLER NAME=__RME_X64_USER111_Handler VECTNUM=111
ffffffff8020bd89:	0f 01 f8             	swapgs 
ffffffff8020bd8c:	6a 00                	push   $0x0
ffffffff8020bd8e:	6a 6f                	push   $0x6f
ffffffff8020bd90:	e9 1f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd95 <__RME_X64_USER112_Handler>:
USER_HANDLER NAME=__RME_X64_USER112_Handler VECTNUM=112
ffffffff8020bd95:	0f 01 f8             	swapgs 
ffffffff8020bd98:	6a 00                	push   $0x0
ffffffff8020bd9a:	6a 70                	push   $0x70
ffffffff8020bd9c:	e9 13 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bda1 <__RME_X64_USER113_Handler>:
USER_HANDLER NAME=__RME_X64_USER113_Handler VECTNUM=113
ffffffff8020bda1:	0f 01 f8             	swapgs 
ffffffff8020bda4:	6a 00                	push   $0x0
ffffffff8020bda6:	6a 71                	push   $0x71
ffffffff8020bda8:	e9 07 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdad <__RME_X64_USER114_Handler>:
USER_HANDLER NAME=__RME_X64_USER114_Handler VECTNUM=114
ffffffff8020bdad:	0f 01 f8             	swapgs 
ffffffff8020bdb0:	6a 00                	push   $0x0
ffffffff8020bdb2:	6a 72                	push   $0x72
ffffffff8020bdb4:	e9 fb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdb9 <__RME_X64_USER115_Handler>:
USER_HANDLER NAME=__RME_X64_USER115_Handler VECTNUM=115
ffffffff8020bdb9:	0f 01 f8             	swapgs 
ffffffff8020bdbc:	6a 00                	push   $0x0
ffffffff8020bdbe:	6a 73                	push   $0x73
ffffffff8020bdc0:	e9 ef 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdc5 <__RME_X64_USER116_Handler>:
USER_HANDLER NAME=__RME_X64_USER116_Handler VECTNUM=116
ffffffff8020bdc5:	0f 01 f8             	swapgs 
ffffffff8020bdc8:	6a 00                	push   $0x0
ffffffff8020bdca:	6a 74                	push   $0x74
ffffffff8020bdcc:	e9 e3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdd1 <__RME_X64_USER117_Handler>:
USER_HANDLER NAME=__RME_X64_USER117_Handler VECTNUM=117
ffffffff8020bdd1:	0f 01 f8             	swapgs 
ffffffff8020bdd4:	6a 00                	push   $0x0
ffffffff8020bdd6:	6a 75                	push   $0x75
ffffffff8020bdd8:	e9 d7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bddd <__RME_X64_USER118_Handler>:
USER_HANDLER NAME=__RME_X64_USER118_Handler VECTNUM=118
ffffffff8020bddd:	0f 01 f8             	swapgs 
ffffffff8020bde0:	6a 00                	push   $0x0
ffffffff8020bde2:	6a 76                	push   $0x76
ffffffff8020bde4:	e9 cb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bde9 <__RME_X64_USER119_Handler>:
USER_HANDLER NAME=__RME_X64_USER119_Handler VECTNUM=119
ffffffff8020bde9:	0f 01 f8             	swapgs 
ffffffff8020bdec:	6a 00                	push   $0x0
ffffffff8020bdee:	6a 77                	push   $0x77
ffffffff8020bdf0:	e9 bf 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdf5 <__RME_X64_USER120_Handler>:

USER_HANDLER NAME=__RME_X64_USER120_Handler VECTNUM=120
ffffffff8020bdf5:	0f 01 f8             	swapgs 
ffffffff8020bdf8:	6a 00                	push   $0x0
ffffffff8020bdfa:	6a 78                	push   $0x78
ffffffff8020bdfc:	e9 b3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be01 <__RME_X64_USER121_Handler>:
USER_HANDLER NAME=__RME_X64_USER121_Handler VECTNUM=121
ffffffff8020be01:	0f 01 f8             	swapgs 
ffffffff8020be04:	6a 00                	push   $0x0
ffffffff8020be06:	6a 79                	push   $0x79
ffffffff8020be08:	e9 a7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be0d <__RME_X64_USER122_Handler>:
USER_HANDLER NAME=__RME_X64_USER122_Handler VECTNUM=122
ffffffff8020be0d:	0f 01 f8             	swapgs 
ffffffff8020be10:	6a 00                	push   $0x0
ffffffff8020be12:	6a 7a                	push   $0x7a
ffffffff8020be14:	e9 9b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be19 <__RME_X64_USER123_Handler>:
USER_HANDLER NAME=__RME_X64_USER123_Handler VECTNUM=123
ffffffff8020be19:	0f 01 f8             	swapgs 
ffffffff8020be1c:	6a 00                	push   $0x0
ffffffff8020be1e:	6a 7b                	push   $0x7b
ffffffff8020be20:	e9 8f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be25 <__RME_X64_USER124_Handler>:
USER_HANDLER NAME=__RME_X64_USER124_Handler VECTNUM=124
ffffffff8020be25:	0f 01 f8             	swapgs 
ffffffff8020be28:	6a 00                	push   $0x0
ffffffff8020be2a:	6a 7c                	push   $0x7c
ffffffff8020be2c:	e9 83 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be31 <__RME_X64_USER125_Handler>:
USER_HANDLER NAME=__RME_X64_USER125_Handler VECTNUM=125
ffffffff8020be31:	0f 01 f8             	swapgs 
ffffffff8020be34:	6a 00                	push   $0x0
ffffffff8020be36:	6a 7d                	push   $0x7d
ffffffff8020be38:	e9 77 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be3d <__RME_X64_USER126_Handler>:
USER_HANDLER NAME=__RME_X64_USER126_Handler VECTNUM=126
ffffffff8020be3d:	0f 01 f8             	swapgs 
ffffffff8020be40:	6a 00                	push   $0x0
ffffffff8020be42:	6a 7e                	push   $0x7e
ffffffff8020be44:	e9 6b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be49 <__RME_X64_USER127_Handler>:
USER_HANDLER NAME=__RME_X64_USER127_Handler VECTNUM=127
ffffffff8020be49:	0f 01 f8             	swapgs 
ffffffff8020be4c:	6a 00                	push   $0x0
ffffffff8020be4e:	6a 7f                	push   $0x7f
ffffffff8020be50:	e9 5f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be55 <__RME_X64_USER128_Handler>:
USER_HANDLER NAME=__RME_X64_USER128_Handler VECTNUM=128
ffffffff8020be55:	0f 01 f8             	swapgs 
ffffffff8020be58:	6a 00                	push   $0x0
ffffffff8020be5a:	68 80 00 00 00       	push   $0x80
ffffffff8020be5f:	e9 50 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be64 <__RME_X64_USER129_Handler>:
USER_HANDLER NAME=__RME_X64_USER129_Handler VECTNUM=129
ffffffff8020be64:	0f 01 f8             	swapgs 
ffffffff8020be67:	6a 00                	push   $0x0
ffffffff8020be69:	68 81 00 00 00       	push   $0x81
ffffffff8020be6e:	e9 41 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be73 <__RME_X64_USER130_Handler>:

USER_HANDLER NAME=__RME_X64_USER130_Handler VECTNUM=130
ffffffff8020be73:	0f 01 f8             	swapgs 
ffffffff8020be76:	6a 00                	push   $0x0
ffffffff8020be78:	68 82 00 00 00       	push   $0x82
ffffffff8020be7d:	e9 32 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be82 <__RME_X64_USER131_Handler>:
USER_HANDLER NAME=__RME_X64_USER131_Handler VECTNUM=131
ffffffff8020be82:	0f 01 f8             	swapgs 
ffffffff8020be85:	6a 00                	push   $0x0
ffffffff8020be87:	68 83 00 00 00       	push   $0x83
ffffffff8020be8c:	e9 23 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be91 <__RME_X64_USER132_Handler>:
USER_HANDLER NAME=__RME_X64_USER132_Handler VECTNUM=132
ffffffff8020be91:	0f 01 f8             	swapgs 
ffffffff8020be94:	6a 00                	push   $0x0
ffffffff8020be96:	68 84 00 00 00       	push   $0x84
ffffffff8020be9b:	e9 14 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bea0 <__RME_X64_USER133_Handler>:
USER_HANDLER NAME=__RME_X64_USER133_Handler VECTNUM=133
ffffffff8020bea0:	0f 01 f8             	swapgs 
ffffffff8020bea3:	6a 00                	push   $0x0
ffffffff8020bea5:	68 85 00 00 00       	push   $0x85
ffffffff8020beaa:	e9 05 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beaf <__RME_X64_USER134_Handler>:
USER_HANDLER NAME=__RME_X64_USER134_Handler VECTNUM=134
ffffffff8020beaf:	0f 01 f8             	swapgs 
ffffffff8020beb2:	6a 00                	push   $0x0
ffffffff8020beb4:	68 86 00 00 00       	push   $0x86
ffffffff8020beb9:	e9 f6 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bebe <__RME_X64_USER135_Handler>:
USER_HANDLER NAME=__RME_X64_USER135_Handler VECTNUM=135
ffffffff8020bebe:	0f 01 f8             	swapgs 
ffffffff8020bec1:	6a 00                	push   $0x0
ffffffff8020bec3:	68 87 00 00 00       	push   $0x87
ffffffff8020bec8:	e9 e7 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020becd <__RME_X64_USER136_Handler>:
USER_HANDLER NAME=__RME_X64_USER136_Handler VECTNUM=136
ffffffff8020becd:	0f 01 f8             	swapgs 
ffffffff8020bed0:	6a 00                	push   $0x0
ffffffff8020bed2:	68 88 00 00 00       	push   $0x88
ffffffff8020bed7:	e9 d8 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bedc <__RME_X64_USER137_Handler>:
USER_HANDLER NAME=__RME_X64_USER137_Handler VECTNUM=137
ffffffff8020bedc:	0f 01 f8             	swapgs 
ffffffff8020bedf:	6a 00                	push   $0x0
ffffffff8020bee1:	68 89 00 00 00       	push   $0x89
ffffffff8020bee6:	e9 c9 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beeb <__RME_X64_USER138_Handler>:
USER_HANDLER NAME=__RME_X64_USER138_Handler VECTNUM=138
ffffffff8020beeb:	0f 01 f8             	swapgs 
ffffffff8020beee:	6a 00                	push   $0x0
ffffffff8020bef0:	68 8a 00 00 00       	push   $0x8a
ffffffff8020bef5:	e9 ba 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020befa <__RME_X64_USER139_Handler>:
USER_HANDLER NAME=__RME_X64_USER139_Handler VECTNUM=139
ffffffff8020befa:	0f 01 f8             	swapgs 
ffffffff8020befd:	6a 00                	push   $0x0
ffffffff8020beff:	68 8b 00 00 00       	push   $0x8b
ffffffff8020bf04:	e9 ab 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf09 <__RME_X64_USER140_Handler>:

USER_HANDLER NAME=__RME_X64_USER140_Handler VECTNUM=140
ffffffff8020bf09:	0f 01 f8             	swapgs 
ffffffff8020bf0c:	6a 00                	push   $0x0
ffffffff8020bf0e:	68 8c 00 00 00       	push   $0x8c
ffffffff8020bf13:	e9 9c 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf18 <__RME_X64_USER141_Handler>:
USER_HANDLER NAME=__RME_X64_USER141_Handler VECTNUM=141
ffffffff8020bf18:	0f 01 f8             	swapgs 
ffffffff8020bf1b:	6a 00                	push   $0x0
ffffffff8020bf1d:	68 8d 00 00 00       	push   $0x8d
ffffffff8020bf22:	e9 8d 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf27 <__RME_X64_USER142_Handler>:
USER_HANDLER NAME=__RME_X64_USER142_Handler VECTNUM=142
ffffffff8020bf27:	0f 01 f8             	swapgs 
ffffffff8020bf2a:	6a 00                	push   $0x0
ffffffff8020bf2c:	68 8e 00 00 00       	push   $0x8e
ffffffff8020bf31:	e9 7e 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf36 <__RME_X64_USER143_Handler>:
USER_HANDLER NAME=__RME_X64_USER143_Handler VECTNUM=143
ffffffff8020bf36:	0f 01 f8             	swapgs 
ffffffff8020bf39:	6a 00                	push   $0x0
ffffffff8020bf3b:	68 8f 00 00 00       	push   $0x8f
ffffffff8020bf40:	e9 6f 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf45 <__RME_X64_USER144_Handler>:
USER_HANDLER NAME=__RME_X64_USER144_Handler VECTNUM=144
ffffffff8020bf45:	0f 01 f8             	swapgs 
ffffffff8020bf48:	6a 00                	push   $0x0
ffffffff8020bf4a:	68 90 00 00 00       	push   $0x90
ffffffff8020bf4f:	e9 60 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf54 <__RME_X64_USER145_Handler>:
USER_HANDLER NAME=__RME_X64_USER145_Handler VECTNUM=145
ffffffff8020bf54:	0f 01 f8             	swapgs 
ffffffff8020bf57:	6a 00                	push   $0x0
ffffffff8020bf59:	68 91 00 00 00       	push   $0x91
ffffffff8020bf5e:	e9 51 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf63 <__RME_X64_USER146_Handler>:
USER_HANDLER NAME=__RME_X64_USER146_Handler VECTNUM=146
ffffffff8020bf63:	0f 01 f8             	swapgs 
ffffffff8020bf66:	6a 00                	push   $0x0
ffffffff8020bf68:	68 92 00 00 00       	push   $0x92
ffffffff8020bf6d:	e9 42 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf72 <__RME_X64_USER147_Handler>:
USER_HANDLER NAME=__RME_X64_USER147_Handler VECTNUM=147
ffffffff8020bf72:	0f 01 f8             	swapgs 
ffffffff8020bf75:	6a 00                	push   $0x0
ffffffff8020bf77:	68 93 00 00 00       	push   $0x93
ffffffff8020bf7c:	e9 33 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf81 <__RME_X64_USER148_Handler>:
USER_HANDLER NAME=__RME_X64_USER148_Handler VECTNUM=148
ffffffff8020bf81:	0f 01 f8             	swapgs 
ffffffff8020bf84:	6a 00                	push   $0x0
ffffffff8020bf86:	68 94 00 00 00       	push   $0x94
ffffffff8020bf8b:	e9 24 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf90 <__RME_X64_USER149_Handler>:
USER_HANDLER NAME=__RME_X64_USER149_Handler VECTNUM=149
ffffffff8020bf90:	0f 01 f8             	swapgs 
ffffffff8020bf93:	6a 00                	push   $0x0
ffffffff8020bf95:	68 95 00 00 00       	push   $0x95
ffffffff8020bf9a:	e9 15 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf9f <__RME_X64_USER150_Handler>:

USER_HANDLER NAME=__RME_X64_USER150_Handler VECTNUM=150
ffffffff8020bf9f:	0f 01 f8             	swapgs 
ffffffff8020bfa2:	6a 00                	push   $0x0
ffffffff8020bfa4:	68 96 00 00 00       	push   $0x96
ffffffff8020bfa9:	e9 06 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfae <__RME_X64_USER151_Handler>:
USER_HANDLER NAME=__RME_X64_USER151_Handler VECTNUM=151
ffffffff8020bfae:	0f 01 f8             	swapgs 
ffffffff8020bfb1:	6a 00                	push   $0x0
ffffffff8020bfb3:	68 97 00 00 00       	push   $0x97
ffffffff8020bfb8:	e9 f7 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfbd <__RME_X64_USER152_Handler>:
USER_HANDLER NAME=__RME_X64_USER152_Handler VECTNUM=152
ffffffff8020bfbd:	0f 01 f8             	swapgs 
ffffffff8020bfc0:	6a 00                	push   $0x0
ffffffff8020bfc2:	68 98 00 00 00       	push   $0x98
ffffffff8020bfc7:	e9 e8 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfcc <__RME_X64_USER153_Handler>:
USER_HANDLER NAME=__RME_X64_USER153_Handler VECTNUM=153
ffffffff8020bfcc:	0f 01 f8             	swapgs 
ffffffff8020bfcf:	6a 00                	push   $0x0
ffffffff8020bfd1:	68 99 00 00 00       	push   $0x99
ffffffff8020bfd6:	e9 d9 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfdb <__RME_X64_USER154_Handler>:
USER_HANDLER NAME=__RME_X64_USER154_Handler VECTNUM=154
ffffffff8020bfdb:	0f 01 f8             	swapgs 
ffffffff8020bfde:	6a 00                	push   $0x0
ffffffff8020bfe0:	68 9a 00 00 00       	push   $0x9a
ffffffff8020bfe5:	e9 ca 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfea <__RME_X64_USER155_Handler>:
USER_HANDLER NAME=__RME_X64_USER155_Handler VECTNUM=155
ffffffff8020bfea:	0f 01 f8             	swapgs 
ffffffff8020bfed:	6a 00                	push   $0x0
ffffffff8020bfef:	68 9b 00 00 00       	push   $0x9b
ffffffff8020bff4:	e9 bb 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bff9 <__RME_X64_USER156_Handler>:
USER_HANDLER NAME=__RME_X64_USER156_Handler VECTNUM=156
ffffffff8020bff9:	0f 01 f8             	swapgs 
ffffffff8020bffc:	6a 00                	push   $0x0
ffffffff8020bffe:	68 9c 00 00 00       	push   $0x9c
ffffffff8020c003:	e9 ac 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c008 <__RME_X64_USER157_Handler>:
USER_HANDLER NAME=__RME_X64_USER157_Handler VECTNUM=157
ffffffff8020c008:	0f 01 f8             	swapgs 
ffffffff8020c00b:	6a 00                	push   $0x0
ffffffff8020c00d:	68 9d 00 00 00       	push   $0x9d
ffffffff8020c012:	e9 9d 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c017 <__RME_X64_USER158_Handler>:
USER_HANDLER NAME=__RME_X64_USER158_Handler VECTNUM=158
ffffffff8020c017:	0f 01 f8             	swapgs 
ffffffff8020c01a:	6a 00                	push   $0x0
ffffffff8020c01c:	68 9e 00 00 00       	push   $0x9e
ffffffff8020c021:	e9 8e 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c026 <__RME_X64_USER159_Handler>:
USER_HANDLER NAME=__RME_X64_USER159_Handler VECTNUM=159
ffffffff8020c026:	0f 01 f8             	swapgs 
ffffffff8020c029:	6a 00                	push   $0x0
ffffffff8020c02b:	68 9f 00 00 00       	push   $0x9f
ffffffff8020c030:	e9 7f 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c035 <__RME_X64_USER160_Handler>:

USER_HANDLER NAME=__RME_X64_USER160_Handler VECTNUM=160
ffffffff8020c035:	0f 01 f8             	swapgs 
ffffffff8020c038:	6a 00                	push   $0x0
ffffffff8020c03a:	68 a0 00 00 00       	push   $0xa0
ffffffff8020c03f:	e9 70 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c044 <__RME_X64_USER161_Handler>:
USER_HANDLER NAME=__RME_X64_USER161_Handler VECTNUM=161
ffffffff8020c044:	0f 01 f8             	swapgs 
ffffffff8020c047:	6a 00                	push   $0x0
ffffffff8020c049:	68 a1 00 00 00       	push   $0xa1
ffffffff8020c04e:	e9 61 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c053 <__RME_X64_USER162_Handler>:
USER_HANDLER NAME=__RME_X64_USER162_Handler VECTNUM=162
ffffffff8020c053:	0f 01 f8             	swapgs 
ffffffff8020c056:	6a 00                	push   $0x0
ffffffff8020c058:	68 a2 00 00 00       	push   $0xa2
ffffffff8020c05d:	e9 52 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c062 <__RME_X64_USER163_Handler>:
USER_HANDLER NAME=__RME_X64_USER163_Handler VECTNUM=163
ffffffff8020c062:	0f 01 f8             	swapgs 
ffffffff8020c065:	6a 00                	push   $0x0
ffffffff8020c067:	68 a3 00 00 00       	push   $0xa3
ffffffff8020c06c:	e9 43 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c071 <__RME_X64_USER164_Handler>:
USER_HANDLER NAME=__RME_X64_USER164_Handler VECTNUM=164
ffffffff8020c071:	0f 01 f8             	swapgs 
ffffffff8020c074:	6a 00                	push   $0x0
ffffffff8020c076:	68 a4 00 00 00       	push   $0xa4
ffffffff8020c07b:	e9 34 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c080 <__RME_X64_USER165_Handler>:
USER_HANDLER NAME=__RME_X64_USER165_Handler VECTNUM=165
ffffffff8020c080:	0f 01 f8             	swapgs 
ffffffff8020c083:	6a 00                	push   $0x0
ffffffff8020c085:	68 a5 00 00 00       	push   $0xa5
ffffffff8020c08a:	e9 25 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c08f <__RME_X64_USER166_Handler>:
USER_HANDLER NAME=__RME_X64_USER166_Handler VECTNUM=166
ffffffff8020c08f:	0f 01 f8             	swapgs 
ffffffff8020c092:	6a 00                	push   $0x0
ffffffff8020c094:	68 a6 00 00 00       	push   $0xa6
ffffffff8020c099:	e9 16 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c09e <__RME_X64_USER167_Handler>:
USER_HANDLER NAME=__RME_X64_USER167_Handler VECTNUM=167
ffffffff8020c09e:	0f 01 f8             	swapgs 
ffffffff8020c0a1:	6a 00                	push   $0x0
ffffffff8020c0a3:	68 a7 00 00 00       	push   $0xa7
ffffffff8020c0a8:	e9 07 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0ad <__RME_X64_USER168_Handler>:
USER_HANDLER NAME=__RME_X64_USER168_Handler VECTNUM=168
ffffffff8020c0ad:	0f 01 f8             	swapgs 
ffffffff8020c0b0:	6a 00                	push   $0x0
ffffffff8020c0b2:	68 a8 00 00 00       	push   $0xa8
ffffffff8020c0b7:	e9 f8 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0bc <__RME_X64_USER169_Handler>:
USER_HANDLER NAME=__RME_X64_USER169_Handler VECTNUM=169
ffffffff8020c0bc:	0f 01 f8             	swapgs 
ffffffff8020c0bf:	6a 00                	push   $0x0
ffffffff8020c0c1:	68 a9 00 00 00       	push   $0xa9
ffffffff8020c0c6:	e9 e9 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0cb <__RME_X64_USER170_Handler>:

USER_HANDLER NAME=__RME_X64_USER170_Handler VECTNUM=170
ffffffff8020c0cb:	0f 01 f8             	swapgs 
ffffffff8020c0ce:	6a 00                	push   $0x0
ffffffff8020c0d0:	68 aa 00 00 00       	push   $0xaa
ffffffff8020c0d5:	e9 da 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0da <__RME_X64_USER171_Handler>:
USER_HANDLER NAME=__RME_X64_USER171_Handler VECTNUM=171
ffffffff8020c0da:	0f 01 f8             	swapgs 
ffffffff8020c0dd:	6a 00                	push   $0x0
ffffffff8020c0df:	68 ab 00 00 00       	push   $0xab
ffffffff8020c0e4:	e9 cb 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0e9 <__RME_X64_USER172_Handler>:
USER_HANDLER NAME=__RME_X64_USER172_Handler VECTNUM=172
ffffffff8020c0e9:	0f 01 f8             	swapgs 
ffffffff8020c0ec:	6a 00                	push   $0x0
ffffffff8020c0ee:	68 ac 00 00 00       	push   $0xac
ffffffff8020c0f3:	e9 bc 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0f8 <__RME_X64_USER173_Handler>:
USER_HANDLER NAME=__RME_X64_USER173_Handler VECTNUM=173
ffffffff8020c0f8:	0f 01 f8             	swapgs 
ffffffff8020c0fb:	6a 00                	push   $0x0
ffffffff8020c0fd:	68 ad 00 00 00       	push   $0xad
ffffffff8020c102:	e9 ad 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c107 <__RME_X64_USER174_Handler>:
USER_HANDLER NAME=__RME_X64_USER174_Handler VECTNUM=174
ffffffff8020c107:	0f 01 f8             	swapgs 
ffffffff8020c10a:	6a 00                	push   $0x0
ffffffff8020c10c:	68 ae 00 00 00       	push   $0xae
ffffffff8020c111:	e9 9e 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c116 <__RME_X64_USER175_Handler>:
USER_HANDLER NAME=__RME_X64_USER175_Handler VECTNUM=175
ffffffff8020c116:	0f 01 f8             	swapgs 
ffffffff8020c119:	6a 00                	push   $0x0
ffffffff8020c11b:	68 af 00 00 00       	push   $0xaf
ffffffff8020c120:	e9 8f 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c125 <__RME_X64_USER176_Handler>:
USER_HANDLER NAME=__RME_X64_USER176_Handler VECTNUM=176
ffffffff8020c125:	0f 01 f8             	swapgs 
ffffffff8020c128:	6a 00                	push   $0x0
ffffffff8020c12a:	68 b0 00 00 00       	push   $0xb0
ffffffff8020c12f:	e9 80 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c134 <__RME_X64_USER177_Handler>:
USER_HANDLER NAME=__RME_X64_USER177_Handler VECTNUM=177
ffffffff8020c134:	0f 01 f8             	swapgs 
ffffffff8020c137:	6a 00                	push   $0x0
ffffffff8020c139:	68 b1 00 00 00       	push   $0xb1
ffffffff8020c13e:	e9 71 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c143 <__RME_X64_USER178_Handler>:
USER_HANDLER NAME=__RME_X64_USER178_Handler VECTNUM=178
ffffffff8020c143:	0f 01 f8             	swapgs 
ffffffff8020c146:	6a 00                	push   $0x0
ffffffff8020c148:	68 b2 00 00 00       	push   $0xb2
ffffffff8020c14d:	e9 62 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c152 <__RME_X64_USER179_Handler>:
USER_HANDLER NAME=__RME_X64_USER179_Handler VECTNUM=179
ffffffff8020c152:	0f 01 f8             	swapgs 
ffffffff8020c155:	6a 00                	push   $0x0
ffffffff8020c157:	68 b3 00 00 00       	push   $0xb3
ffffffff8020c15c:	e9 53 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c161 <__RME_X64_USER180_Handler>:

USER_HANDLER NAME=__RME_X64_USER180_Handler VECTNUM=180
ffffffff8020c161:	0f 01 f8             	swapgs 
ffffffff8020c164:	6a 00                	push   $0x0
ffffffff8020c166:	68 b4 00 00 00       	push   $0xb4
ffffffff8020c16b:	e9 44 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c170 <__RME_X64_USER181_Handler>:
USER_HANDLER NAME=__RME_X64_USER181_Handler VECTNUM=181
ffffffff8020c170:	0f 01 f8             	swapgs 
ffffffff8020c173:	6a 00                	push   $0x0
ffffffff8020c175:	68 b5 00 00 00       	push   $0xb5
ffffffff8020c17a:	e9 35 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c17f <__RME_X64_USER182_Handler>:
USER_HANDLER NAME=__RME_X64_USER182_Handler VECTNUM=182
ffffffff8020c17f:	0f 01 f8             	swapgs 
ffffffff8020c182:	6a 00                	push   $0x0
ffffffff8020c184:	68 b6 00 00 00       	push   $0xb6
ffffffff8020c189:	e9 26 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c18e <__RME_X64_USER183_Handler>:
USER_HANDLER NAME=__RME_X64_USER183_Handler VECTNUM=183
ffffffff8020c18e:	0f 01 f8             	swapgs 
ffffffff8020c191:	6a 00                	push   $0x0
ffffffff8020c193:	68 b7 00 00 00       	push   $0xb7
ffffffff8020c198:	e9 17 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c19d <__RME_X64_USER184_Handler>:
USER_HANDLER NAME=__RME_X64_USER184_Handler VECTNUM=184
ffffffff8020c19d:	0f 01 f8             	swapgs 
ffffffff8020c1a0:	6a 00                	push   $0x0
ffffffff8020c1a2:	68 b8 00 00 00       	push   $0xb8
ffffffff8020c1a7:	e9 08 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ac <__RME_X64_USER185_Handler>:
USER_HANDLER NAME=__RME_X64_USER185_Handler VECTNUM=185
ffffffff8020c1ac:	0f 01 f8             	swapgs 
ffffffff8020c1af:	6a 00                	push   $0x0
ffffffff8020c1b1:	68 b9 00 00 00       	push   $0xb9
ffffffff8020c1b6:	e9 f9 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1bb <__RME_X64_USER186_Handler>:
USER_HANDLER NAME=__RME_X64_USER186_Handler VECTNUM=186
ffffffff8020c1bb:	0f 01 f8             	swapgs 
ffffffff8020c1be:	6a 00                	push   $0x0
ffffffff8020c1c0:	68 ba 00 00 00       	push   $0xba
ffffffff8020c1c5:	e9 ea 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ca <__RME_X64_USER187_Handler>:
USER_HANDLER NAME=__RME_X64_USER187_Handler VECTNUM=187
ffffffff8020c1ca:	0f 01 f8             	swapgs 
ffffffff8020c1cd:	6a 00                	push   $0x0
ffffffff8020c1cf:	68 bb 00 00 00       	push   $0xbb
ffffffff8020c1d4:	e9 db 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1d9 <__RME_X64_USER188_Handler>:
USER_HANDLER NAME=__RME_X64_USER188_Handler VECTNUM=188
ffffffff8020c1d9:	0f 01 f8             	swapgs 
ffffffff8020c1dc:	6a 00                	push   $0x0
ffffffff8020c1de:	68 bc 00 00 00       	push   $0xbc
ffffffff8020c1e3:	e9 cc 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1e8 <__RME_X64_USER189_Handler>:
USER_HANDLER NAME=__RME_X64_USER189_Handler VECTNUM=189
ffffffff8020c1e8:	0f 01 f8             	swapgs 
ffffffff8020c1eb:	6a 00                	push   $0x0
ffffffff8020c1ed:	68 bd 00 00 00       	push   $0xbd
ffffffff8020c1f2:	e9 bd 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1f7 <__RME_X64_USER190_Handler>:

USER_HANDLER NAME=__RME_X64_USER190_Handler VECTNUM=190
ffffffff8020c1f7:	0f 01 f8             	swapgs 
ffffffff8020c1fa:	6a 00                	push   $0x0
ffffffff8020c1fc:	68 be 00 00 00       	push   $0xbe
ffffffff8020c201:	e9 ae 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c206 <__RME_X64_USER191_Handler>:
USER_HANDLER NAME=__RME_X64_USER191_Handler VECTNUM=191
ffffffff8020c206:	0f 01 f8             	swapgs 
ffffffff8020c209:	6a 00                	push   $0x0
ffffffff8020c20b:	68 bf 00 00 00       	push   $0xbf
ffffffff8020c210:	e9 9f 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c215 <__RME_X64_USER192_Handler>:
USER_HANDLER NAME=__RME_X64_USER192_Handler VECTNUM=192
ffffffff8020c215:	0f 01 f8             	swapgs 
ffffffff8020c218:	6a 00                	push   $0x0
ffffffff8020c21a:	68 c0 00 00 00       	push   $0xc0
ffffffff8020c21f:	e9 90 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c224 <__RME_X64_USER193_Handler>:
USER_HANDLER NAME=__RME_X64_USER193_Handler VECTNUM=193
ffffffff8020c224:	0f 01 f8             	swapgs 
ffffffff8020c227:	6a 00                	push   $0x0
ffffffff8020c229:	68 c1 00 00 00       	push   $0xc1
ffffffff8020c22e:	e9 81 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c233 <__RME_X64_USER194_Handler>:
USER_HANDLER NAME=__RME_X64_USER194_Handler VECTNUM=194
ffffffff8020c233:	0f 01 f8             	swapgs 
ffffffff8020c236:	6a 00                	push   $0x0
ffffffff8020c238:	68 c2 00 00 00       	push   $0xc2
ffffffff8020c23d:	e9 72 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c242 <__RME_X64_USER195_Handler>:
USER_HANDLER NAME=__RME_X64_USER195_Handler VECTNUM=195
ffffffff8020c242:	0f 01 f8             	swapgs 
ffffffff8020c245:	6a 00                	push   $0x0
ffffffff8020c247:	68 c3 00 00 00       	push   $0xc3
ffffffff8020c24c:	e9 63 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c251 <__RME_X64_USER196_Handler>:
USER_HANDLER NAME=__RME_X64_USER196_Handler VECTNUM=196
ffffffff8020c251:	0f 01 f8             	swapgs 
ffffffff8020c254:	6a 00                	push   $0x0
ffffffff8020c256:	68 c4 00 00 00       	push   $0xc4
ffffffff8020c25b:	e9 54 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c260 <__RME_X64_USER197_Handler>:
USER_HANDLER NAME=__RME_X64_USER197_Handler VECTNUM=197
ffffffff8020c260:	0f 01 f8             	swapgs 
ffffffff8020c263:	6a 00                	push   $0x0
ffffffff8020c265:	68 c5 00 00 00       	push   $0xc5
ffffffff8020c26a:	e9 45 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c26f <__RME_X64_USER198_Handler>:
USER_HANDLER NAME=__RME_X64_USER198_Handler VECTNUM=198
ffffffff8020c26f:	0f 01 f8             	swapgs 
ffffffff8020c272:	6a 00                	push   $0x0
ffffffff8020c274:	68 c6 00 00 00       	push   $0xc6
ffffffff8020c279:	e9 36 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c27e <__RME_X64_USER199_Handler>:
USER_HANDLER NAME=__RME_X64_USER199_Handler VECTNUM=199
ffffffff8020c27e:	0f 01 f8             	swapgs 
ffffffff8020c281:	6a 00                	push   $0x0
ffffffff8020c283:	68 c7 00 00 00       	push   $0xc7
ffffffff8020c288:	e9 27 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c28d <__RME_X64_USER200_Handler>:

USER_HANDLER NAME=__RME_X64_USER200_Handler VECTNUM=200
ffffffff8020c28d:	0f 01 f8             	swapgs 
ffffffff8020c290:	6a 00                	push   $0x0
ffffffff8020c292:	68 c8 00 00 00       	push   $0xc8
ffffffff8020c297:	e9 18 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c29c <__RME_X64_USER201_Handler>:
USER_HANDLER NAME=__RME_X64_USER201_Handler VECTNUM=201
ffffffff8020c29c:	0f 01 f8             	swapgs 
ffffffff8020c29f:	6a 00                	push   $0x0
ffffffff8020c2a1:	68 c9 00 00 00       	push   $0xc9
ffffffff8020c2a6:	e9 09 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ab <__RME_X64_USER202_Handler>:
USER_HANDLER NAME=__RME_X64_USER202_Handler VECTNUM=202
ffffffff8020c2ab:	0f 01 f8             	swapgs 
ffffffff8020c2ae:	6a 00                	push   $0x0
ffffffff8020c2b0:	68 ca 00 00 00       	push   $0xca
ffffffff8020c2b5:	e9 fa 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ba <__RME_X64_USER203_Handler>:
USER_HANDLER NAME=__RME_X64_USER203_Handler VECTNUM=203
ffffffff8020c2ba:	0f 01 f8             	swapgs 
ffffffff8020c2bd:	6a 00                	push   $0x0
ffffffff8020c2bf:	68 cb 00 00 00       	push   $0xcb
ffffffff8020c2c4:	e9 eb 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2c9 <__RME_X64_USER204_Handler>:
USER_HANDLER NAME=__RME_X64_USER204_Handler VECTNUM=204
ffffffff8020c2c9:	0f 01 f8             	swapgs 
ffffffff8020c2cc:	6a 00                	push   $0x0
ffffffff8020c2ce:	68 cc 00 00 00       	push   $0xcc
ffffffff8020c2d3:	e9 dc 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2d8 <__RME_X64_USER205_Handler>:
USER_HANDLER NAME=__RME_X64_USER205_Handler VECTNUM=205
ffffffff8020c2d8:	0f 01 f8             	swapgs 
ffffffff8020c2db:	6a 00                	push   $0x0
ffffffff8020c2dd:	68 cd 00 00 00       	push   $0xcd
ffffffff8020c2e2:	e9 cd 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2e7 <__RME_X64_USER206_Handler>:
USER_HANDLER NAME=__RME_X64_USER206_Handler VECTNUM=206
ffffffff8020c2e7:	0f 01 f8             	swapgs 
ffffffff8020c2ea:	6a 00                	push   $0x0
ffffffff8020c2ec:	68 ce 00 00 00       	push   $0xce
ffffffff8020c2f1:	e9 be 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2f6 <__RME_X64_USER207_Handler>:
USER_HANDLER NAME=__RME_X64_USER207_Handler VECTNUM=207
ffffffff8020c2f6:	0f 01 f8             	swapgs 
ffffffff8020c2f9:	6a 00                	push   $0x0
ffffffff8020c2fb:	68 cf 00 00 00       	push   $0xcf
ffffffff8020c300:	e9 af 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c305 <__RME_X64_USER208_Handler>:
USER_HANDLER NAME=__RME_X64_USER208_Handler VECTNUM=208
ffffffff8020c305:	0f 01 f8             	swapgs 
ffffffff8020c308:	6a 00                	push   $0x0
ffffffff8020c30a:	68 d0 00 00 00       	push   $0xd0
ffffffff8020c30f:	e9 a0 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c314 <__RME_X64_USER209_Handler>:
USER_HANDLER NAME=__RME_X64_USER209_Handler VECTNUM=209
ffffffff8020c314:	0f 01 f8             	swapgs 
ffffffff8020c317:	6a 00                	push   $0x0
ffffffff8020c319:	68 d1 00 00 00       	push   $0xd1
ffffffff8020c31e:	e9 91 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c323 <__RME_X64_USER210_Handler>:

USER_HANDLER NAME=__RME_X64_USER210_Handler VECTNUM=210
ffffffff8020c323:	0f 01 f8             	swapgs 
ffffffff8020c326:	6a 00                	push   $0x0
ffffffff8020c328:	68 d2 00 00 00       	push   $0xd2
ffffffff8020c32d:	e9 82 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c332 <__RME_X64_USER211_Handler>:
USER_HANDLER NAME=__RME_X64_USER211_Handler VECTNUM=211
ffffffff8020c332:	0f 01 f8             	swapgs 
ffffffff8020c335:	6a 00                	push   $0x0
ffffffff8020c337:	68 d3 00 00 00       	push   $0xd3
ffffffff8020c33c:	e9 73 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c341 <__RME_X64_USER212_Handler>:
USER_HANDLER NAME=__RME_X64_USER212_Handler VECTNUM=212
ffffffff8020c341:	0f 01 f8             	swapgs 
ffffffff8020c344:	6a 00                	push   $0x0
ffffffff8020c346:	68 d4 00 00 00       	push   $0xd4
ffffffff8020c34b:	e9 64 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c350 <__RME_X64_USER213_Handler>:
USER_HANDLER NAME=__RME_X64_USER213_Handler VECTNUM=213
ffffffff8020c350:	0f 01 f8             	swapgs 
ffffffff8020c353:	6a 00                	push   $0x0
ffffffff8020c355:	68 d5 00 00 00       	push   $0xd5
ffffffff8020c35a:	e9 55 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c35f <__RME_X64_USER214_Handler>:
USER_HANDLER NAME=__RME_X64_USER214_Handler VECTNUM=214
ffffffff8020c35f:	0f 01 f8             	swapgs 
ffffffff8020c362:	6a 00                	push   $0x0
ffffffff8020c364:	68 d6 00 00 00       	push   $0xd6
ffffffff8020c369:	e9 46 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c36e <__RME_X64_USER215_Handler>:
USER_HANDLER NAME=__RME_X64_USER215_Handler VECTNUM=215
ffffffff8020c36e:	0f 01 f8             	swapgs 
ffffffff8020c371:	6a 00                	push   $0x0
ffffffff8020c373:	68 d7 00 00 00       	push   $0xd7
ffffffff8020c378:	e9 37 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c37d <__RME_X64_USER216_Handler>:
USER_HANDLER NAME=__RME_X64_USER216_Handler VECTNUM=216
ffffffff8020c37d:	0f 01 f8             	swapgs 
ffffffff8020c380:	6a 00                	push   $0x0
ffffffff8020c382:	68 d8 00 00 00       	push   $0xd8
ffffffff8020c387:	e9 28 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c38c <__RME_X64_USER217_Handler>:
USER_HANDLER NAME=__RME_X64_USER217_Handler VECTNUM=217
ffffffff8020c38c:	0f 01 f8             	swapgs 
ffffffff8020c38f:	6a 00                	push   $0x0
ffffffff8020c391:	68 d9 00 00 00       	push   $0xd9
ffffffff8020c396:	e9 19 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c39b <__RME_X64_USER218_Handler>:
USER_HANDLER NAME=__RME_X64_USER218_Handler VECTNUM=218
ffffffff8020c39b:	0f 01 f8             	swapgs 
ffffffff8020c39e:	6a 00                	push   $0x0
ffffffff8020c3a0:	68 da 00 00 00       	push   $0xda
ffffffff8020c3a5:	e9 0a 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3aa <__RME_X64_USER219_Handler>:
USER_HANDLER NAME=__RME_X64_USER219_Handler VECTNUM=219
ffffffff8020c3aa:	0f 01 f8             	swapgs 
ffffffff8020c3ad:	6a 00                	push   $0x0
ffffffff8020c3af:	68 db 00 00 00       	push   $0xdb
ffffffff8020c3b4:	e9 fb 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3b9 <__RME_X64_USER220_Handler>:

USER_HANDLER NAME=__RME_X64_USER220_Handler VECTNUM=220
ffffffff8020c3b9:	0f 01 f8             	swapgs 
ffffffff8020c3bc:	6a 00                	push   $0x0
ffffffff8020c3be:	68 dc 00 00 00       	push   $0xdc
ffffffff8020c3c3:	e9 ec 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3c8 <__RME_X64_USER221_Handler>:
USER_HANDLER NAME=__RME_X64_USER221_Handler VECTNUM=221
ffffffff8020c3c8:	0f 01 f8             	swapgs 
ffffffff8020c3cb:	6a 00                	push   $0x0
ffffffff8020c3cd:	68 dd 00 00 00       	push   $0xdd
ffffffff8020c3d2:	e9 dd 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3d7 <__RME_X64_USER222_Handler>:
USER_HANDLER NAME=__RME_X64_USER222_Handler VECTNUM=222
ffffffff8020c3d7:	0f 01 f8             	swapgs 
ffffffff8020c3da:	6a 00                	push   $0x0
ffffffff8020c3dc:	68 de 00 00 00       	push   $0xde
ffffffff8020c3e1:	e9 ce 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3e6 <__RME_X64_USER223_Handler>:
USER_HANDLER NAME=__RME_X64_USER223_Handler VECTNUM=223
ffffffff8020c3e6:	0f 01 f8             	swapgs 
ffffffff8020c3e9:	6a 00                	push   $0x0
ffffffff8020c3eb:	68 df 00 00 00       	push   $0xdf
ffffffff8020c3f0:	e9 bf 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3f5 <__RME_X64_USER224_Handler>:
USER_HANDLER NAME=__RME_X64_USER224_Handler VECTNUM=224
ffffffff8020c3f5:	0f 01 f8             	swapgs 
ffffffff8020c3f8:	6a 00                	push   $0x0
ffffffff8020c3fa:	68 e0 00 00 00       	push   $0xe0
ffffffff8020c3ff:	e9 b0 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c404 <__RME_X64_USER225_Handler>:
USER_HANDLER NAME=__RME_X64_USER225_Handler VECTNUM=225
ffffffff8020c404:	0f 01 f8             	swapgs 
ffffffff8020c407:	6a 00                	push   $0x0
ffffffff8020c409:	68 e1 00 00 00       	push   $0xe1
ffffffff8020c40e:	e9 a1 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c413 <__RME_X64_USER226_Handler>:
USER_HANDLER NAME=__RME_X64_USER226_Handler VECTNUM=226
ffffffff8020c413:	0f 01 f8             	swapgs 
ffffffff8020c416:	6a 00                	push   $0x0
ffffffff8020c418:	68 e2 00 00 00       	push   $0xe2
ffffffff8020c41d:	e9 92 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c422 <__RME_X64_USER227_Handler>:
USER_HANDLER NAME=__RME_X64_USER227_Handler VECTNUM=227
ffffffff8020c422:	0f 01 f8             	swapgs 
ffffffff8020c425:	6a 00                	push   $0x0
ffffffff8020c427:	68 e3 00 00 00       	push   $0xe3
ffffffff8020c42c:	e9 83 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c431 <__RME_X64_USER228_Handler>:
USER_HANDLER NAME=__RME_X64_USER228_Handler VECTNUM=228
ffffffff8020c431:	0f 01 f8             	swapgs 
ffffffff8020c434:	6a 00                	push   $0x0
ffffffff8020c436:	68 e4 00 00 00       	push   $0xe4
ffffffff8020c43b:	e9 74 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c440 <__RME_X64_USER229_Handler>:
USER_HANDLER NAME=__RME_X64_USER229_Handler VECTNUM=229
ffffffff8020c440:	0f 01 f8             	swapgs 
ffffffff8020c443:	6a 00                	push   $0x0
ffffffff8020c445:	68 e5 00 00 00       	push   $0xe5
ffffffff8020c44a:	e9 65 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c44f <__RME_X64_USER230_Handler>:

USER_HANDLER NAME=__RME_X64_USER230_Handler VECTNUM=230
ffffffff8020c44f:	0f 01 f8             	swapgs 
ffffffff8020c452:	6a 00                	push   $0x0
ffffffff8020c454:	68 e6 00 00 00       	push   $0xe6
ffffffff8020c459:	e9 56 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c45e <__RME_X64_USER231_Handler>:
USER_HANDLER NAME=__RME_X64_USER231_Handler VECTNUM=231
ffffffff8020c45e:	0f 01 f8             	swapgs 
ffffffff8020c461:	6a 00                	push   $0x0
ffffffff8020c463:	68 e7 00 00 00       	push   $0xe7
ffffffff8020c468:	e9 47 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c46d <__RME_X64_USER232_Handler>:
USER_HANDLER NAME=__RME_X64_USER232_Handler VECTNUM=232
ffffffff8020c46d:	0f 01 f8             	swapgs 
ffffffff8020c470:	6a 00                	push   $0x0
ffffffff8020c472:	68 e8 00 00 00       	push   $0xe8
ffffffff8020c477:	e9 38 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c47c <__RME_X64_USER233_Handler>:
USER_HANDLER NAME=__RME_X64_USER233_Handler VECTNUM=233
ffffffff8020c47c:	0f 01 f8             	swapgs 
ffffffff8020c47f:	6a 00                	push   $0x0
ffffffff8020c481:	68 e9 00 00 00       	push   $0xe9
ffffffff8020c486:	e9 29 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c48b <__RME_X64_USER234_Handler>:
USER_HANDLER NAME=__RME_X64_USER234_Handler VECTNUM=234
ffffffff8020c48b:	0f 01 f8             	swapgs 
ffffffff8020c48e:	6a 00                	push   $0x0
ffffffff8020c490:	68 ea 00 00 00       	push   $0xea
ffffffff8020c495:	e9 1a 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c49a <__RME_X64_USER235_Handler>:
USER_HANDLER NAME=__RME_X64_USER235_Handler VECTNUM=235
ffffffff8020c49a:	0f 01 f8             	swapgs 
ffffffff8020c49d:	6a 00                	push   $0x0
ffffffff8020c49f:	68 eb 00 00 00       	push   $0xeb
ffffffff8020c4a4:	e9 0b 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4a9 <__RME_X64_USER236_Handler>:
USER_HANDLER NAME=__RME_X64_USER236_Handler VECTNUM=236
ffffffff8020c4a9:	0f 01 f8             	swapgs 
ffffffff8020c4ac:	6a 00                	push   $0x0
ffffffff8020c4ae:	68 ec 00 00 00       	push   $0xec
ffffffff8020c4b3:	e9 fc 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4b8 <__RME_X64_USER237_Handler>:
USER_HANDLER NAME=__RME_X64_USER237_Handler VECTNUM=237
ffffffff8020c4b8:	0f 01 f8             	swapgs 
ffffffff8020c4bb:	6a 00                	push   $0x0
ffffffff8020c4bd:	68 ed 00 00 00       	push   $0xed
ffffffff8020c4c2:	e9 ed 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4c7 <__RME_X64_USER238_Handler>:
USER_HANDLER NAME=__RME_X64_USER238_Handler VECTNUM=238
ffffffff8020c4c7:	0f 01 f8             	swapgs 
ffffffff8020c4ca:	6a 00                	push   $0x0
ffffffff8020c4cc:	68 ee 00 00 00       	push   $0xee
ffffffff8020c4d1:	e9 de 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4d6 <__RME_X64_USER239_Handler>:
USER_HANDLER NAME=__RME_X64_USER239_Handler VECTNUM=239
ffffffff8020c4d6:	0f 01 f8             	swapgs 
ffffffff8020c4d9:	6a 00                	push   $0x0
ffffffff8020c4db:	68 ef 00 00 00       	push   $0xef
ffffffff8020c4e0:	e9 cf 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4e5 <__RME_X64_USER240_Handler>:

USER_HANDLER NAME=__RME_X64_USER240_Handler VECTNUM=240
ffffffff8020c4e5:	0f 01 f8             	swapgs 
ffffffff8020c4e8:	6a 00                	push   $0x0
ffffffff8020c4ea:	68 f0 00 00 00       	push   $0xf0
ffffffff8020c4ef:	e9 c0 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4f4 <__RME_X64_USER241_Handler>:
USER_HANDLER NAME=__RME_X64_USER241_Handler VECTNUM=241
ffffffff8020c4f4:	0f 01 f8             	swapgs 
ffffffff8020c4f7:	6a 00                	push   $0x0
ffffffff8020c4f9:	68 f1 00 00 00       	push   $0xf1
ffffffff8020c4fe:	e9 b1 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c503 <__RME_X64_USER242_Handler>:
USER_HANDLER NAME=__RME_X64_USER242_Handler VECTNUM=242
ffffffff8020c503:	0f 01 f8             	swapgs 
ffffffff8020c506:	6a 00                	push   $0x0
ffffffff8020c508:	68 f2 00 00 00       	push   $0xf2
ffffffff8020c50d:	e9 a2 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c512 <__RME_X64_USER243_Handler>:
USER_HANDLER NAME=__RME_X64_USER243_Handler VECTNUM=243
ffffffff8020c512:	0f 01 f8             	swapgs 
ffffffff8020c515:	6a 00                	push   $0x0
ffffffff8020c517:	68 f3 00 00 00       	push   $0xf3
ffffffff8020c51c:	e9 93 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c521 <__RME_X64_USER244_Handler>:
USER_HANDLER NAME=__RME_X64_USER244_Handler VECTNUM=244
ffffffff8020c521:	0f 01 f8             	swapgs 
ffffffff8020c524:	6a 00                	push   $0x0
ffffffff8020c526:	68 f4 00 00 00       	push   $0xf4
ffffffff8020c52b:	e9 84 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c530 <__RME_X64_USER245_Handler>:
USER_HANDLER NAME=__RME_X64_USER245_Handler VECTNUM=245
ffffffff8020c530:	0f 01 f8             	swapgs 
ffffffff8020c533:	6a 00                	push   $0x0
ffffffff8020c535:	68 f5 00 00 00       	push   $0xf5
ffffffff8020c53a:	eb 78                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c53c <__RME_X64_USER246_Handler>:
USER_HANDLER NAME=__RME_X64_USER246_Handler VECTNUM=246
ffffffff8020c53c:	0f 01 f8             	swapgs 
ffffffff8020c53f:	6a 00                	push   $0x0
ffffffff8020c541:	68 f6 00 00 00       	push   $0xf6
ffffffff8020c546:	eb 6c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c548 <__RME_X64_USER247_Handler>:
USER_HANDLER NAME=__RME_X64_USER247_Handler VECTNUM=247
ffffffff8020c548:	0f 01 f8             	swapgs 
ffffffff8020c54b:	6a 00                	push   $0x0
ffffffff8020c54d:	68 f7 00 00 00       	push   $0xf7
ffffffff8020c552:	eb 60                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c554 <__RME_X64_USER248_Handler>:
USER_HANDLER NAME=__RME_X64_USER248_Handler VECTNUM=248
ffffffff8020c554:	0f 01 f8             	swapgs 
ffffffff8020c557:	6a 00                	push   $0x0
ffffffff8020c559:	68 f8 00 00 00       	push   $0xf8
ffffffff8020c55e:	eb 54                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c560 <__RME_X64_USER249_Handler>:
USER_HANDLER NAME=__RME_X64_USER249_Handler VECTNUM=249
ffffffff8020c560:	0f 01 f8             	swapgs 
ffffffff8020c563:	6a 00                	push   $0x0
ffffffff8020c565:	68 f9 00 00 00       	push   $0xf9
ffffffff8020c56a:	eb 48                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c56c <__RME_X64_USER250_Handler>:

USER_HANDLER NAME=__RME_X64_USER250_Handler VECTNUM=250
ffffffff8020c56c:	0f 01 f8             	swapgs 
ffffffff8020c56f:	6a 00                	push   $0x0
ffffffff8020c571:	68 fa 00 00 00       	push   $0xfa
ffffffff8020c576:	eb 3c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c578 <__RME_X64_USER251_Handler>:
USER_HANDLER NAME=__RME_X64_USER251_Handler VECTNUM=251
ffffffff8020c578:	0f 01 f8             	swapgs 
ffffffff8020c57b:	6a 00                	push   $0x0
ffffffff8020c57d:	68 fb 00 00 00       	push   $0xfb
ffffffff8020c582:	eb 30                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c584 <__RME_X64_USER252_Handler>:
USER_HANDLER NAME=__RME_X64_USER252_Handler VECTNUM=252
ffffffff8020c584:	0f 01 f8             	swapgs 
ffffffff8020c587:	6a 00                	push   $0x0
ffffffff8020c589:	68 fc 00 00 00       	push   $0xfc
ffffffff8020c58e:	eb 24                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c590 <__RME_X64_USER253_Handler>:
USER_HANDLER NAME=__RME_X64_USER253_Handler VECTNUM=253
ffffffff8020c590:	0f 01 f8             	swapgs 
ffffffff8020c593:	6a 00                	push   $0x0
ffffffff8020c595:	68 fd 00 00 00       	push   $0xfd
ffffffff8020c59a:	eb 18                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c59c <__RME_X64_USER254_Handler>:
USER_HANDLER NAME=__RME_X64_USER254_Handler VECTNUM=254
ffffffff8020c59c:	0f 01 f8             	swapgs 
ffffffff8020c59f:	6a 00                	push   $0x0
ffffffff8020c5a1:	68 fe 00 00 00       	push   $0xfe
ffffffff8020c5a6:	eb 0c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5a8 <__RME_X64_USER255_Handler>:
USER_HANDLER NAME=__RME_X64_USER255_Handler VECTNUM=255
ffffffff8020c5a8:	0f 01 f8             	swapgs 
ffffffff8020c5ab:	6a 00                	push   $0x0
ffffffff8020c5ad:	68 ff 00 00 00       	push   $0xff
ffffffff8020c5b2:	eb 00                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5b4 <User_Handler>:
/* Common function body for generic interrupt handlers - reduce I-Cache usage */
User_Handler:
    SAVE_GP_REGS
ffffffff8020c5b4:	41 57                	push   %r15
ffffffff8020c5b6:	41 56                	push   %r14
ffffffff8020c5b8:	41 55                	push   %r13
ffffffff8020c5ba:	41 54                	push   %r12
ffffffff8020c5bc:	41 53                	push   %r11
ffffffff8020c5be:	41 52                	push   %r10
ffffffff8020c5c0:	41 51                	push   %r9
ffffffff8020c5c2:	41 50                	push   %r8
ffffffff8020c5c4:	55                   	push   %rbp
ffffffff8020c5c5:	57                   	push   %rdi
ffffffff8020c5c6:	56                   	push   %rsi
ffffffff8020c5c7:	52                   	push   %rdx
ffffffff8020c5c8:	51                   	push   %rcx
ffffffff8020c5c9:	53                   	push   %rbx
ffffffff8020c5ca:	50                   	push   %rax
ffffffff8020c5cb:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c5cf:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c5d1:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020c5d4:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Generic_Handler
ffffffff8020c5d9:	e8 92 e8 00 00       	call   ffffffff8021ae70 <__RME_X64_Generic_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c5de:	e8 fd c2 00 00       	call   ffffffff802188e0 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c5e3:	0f 01 f8             	swapgs 
ffffffff8020c5e6:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c5ea:	8e d8                	mov    %eax,%ds
ffffffff8020c5ec:	58                   	pop    %rax
ffffffff8020c5ed:	5b                   	pop    %rbx
ffffffff8020c5ee:	59                   	pop    %rcx
ffffffff8020c5ef:	5a                   	pop    %rdx
ffffffff8020c5f0:	5e                   	pop    %rsi
ffffffff8020c5f1:	5f                   	pop    %rdi
ffffffff8020c5f2:	5d                   	pop    %rbp
ffffffff8020c5f3:	41 58                	pop    %r8
ffffffff8020c5f5:	41 59                	pop    %r9
ffffffff8020c5f7:	41 5a                	pop    %r10
ffffffff8020c5f9:	41 5b                	pop    %r11
ffffffff8020c5fb:	41 5c                	pop    %r12
ffffffff8020c5fd:	41 5d                	pop    %r13
ffffffff8020c5ff:	41 5e                	pop    %r14
ffffffff8020c601:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c603:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c607:	48 cf                	iretq  

ffffffff8020c609 <SysTick_SMP_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_SMP_Handler:
    .global             SysTick_SMP_Handler
    SWAPGS
ffffffff8020c609:	0f 01 f8             	swapgs 
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c60c:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c60e:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c613:	41 57                	push   %r15
ffffffff8020c615:	41 56                	push   %r14
ffffffff8020c617:	41 55                	push   %r13
ffffffff8020c619:	41 54                	push   %r12
ffffffff8020c61b:	41 53                	push   %r11
ffffffff8020c61d:	41 52                	push   %r10
ffffffff8020c61f:	41 51                	push   %r9
ffffffff8020c621:	41 50                	push   %r8
ffffffff8020c623:	55                   	push   %rbp
ffffffff8020c624:	57                   	push   %rdi
ffffffff8020c625:	56                   	push   %rsi
ffffffff8020c626:	52                   	push   %rdx
ffffffff8020c627:	51                   	push   %rcx
ffffffff8020c628:	53                   	push   %rbx
ffffffff8020c629:	50                   	push   %rax
ffffffff8020c62a:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c62e:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c630:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_SMP_Handler
ffffffff8020c633:	e8 26 01 00 00       	call   ffffffff8020c75e <_RME_Tick_SMP_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c638:	e8 a3 c2 00 00       	call   ffffffff802188e0 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c63d:	0f 01 f8             	swapgs 
ffffffff8020c640:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c644:	8e d8                	mov    %eax,%ds
ffffffff8020c646:	58                   	pop    %rax
ffffffff8020c647:	5b                   	pop    %rbx
ffffffff8020c648:	59                   	pop    %rcx
ffffffff8020c649:	5a                   	pop    %rdx
ffffffff8020c64a:	5e                   	pop    %rsi
ffffffff8020c64b:	5f                   	pop    %rdi
ffffffff8020c64c:	5d                   	pop    %rbp
ffffffff8020c64d:	41 58                	pop    %r8
ffffffff8020c64f:	41 59                	pop    %r9
ffffffff8020c651:	41 5a                	pop    %r10
ffffffff8020c653:	41 5b                	pop    %r11
ffffffff8020c655:	41 5c                	pop    %r12
ffffffff8020c657:	41 5d                	pop    %r13
ffffffff8020c659:	41 5e                	pop    %r14
ffffffff8020c65b:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c65d:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c661:	48 cf                	iretq  

ffffffff8020c663 <SysTick_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_Handler:
    .global             SysTick_Handler
    SWAPGS
ffffffff8020c663:	0f 01 f8             	swapgs 
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c666:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c668:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c66d:	41 57                	push   %r15
ffffffff8020c66f:	41 56                	push   %r14
ffffffff8020c671:	41 55                	push   %r13
ffffffff8020c673:	41 54                	push   %r12
ffffffff8020c675:	41 53                	push   %r11
ffffffff8020c677:	41 52                	push   %r10
ffffffff8020c679:	41 51                	push   %r9
ffffffff8020c67b:	41 50                	push   %r8
ffffffff8020c67d:	55                   	push   %rbp
ffffffff8020c67e:	57                   	push   %rdi
ffffffff8020c67f:	56                   	push   %rsi
ffffffff8020c680:	52                   	push   %rdx
ffffffff8020c681:	51                   	push   %rcx
ffffffff8020c682:	53                   	push   %rbx
ffffffff8020c683:	50                   	push   %rax
ffffffff8020c684:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c688:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c68a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tim_Handler
ffffffff8020c68d:	e8 6e 42 00 00       	call   ffffffff80210900 <_RME_Tim_Handler>
    CALLQ               __RME_X64_SMP_Tick
ffffffff8020c692:	e8 69 c4 00 00       	call   ffffffff80218b00 <__RME_X64_SMP_Tick>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c697:	e8 44 c2 00 00       	call   ffffffff802188e0 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c69c:	0f 01 f8             	swapgs 
ffffffff8020c69f:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c6a3:	8e d8                	mov    %eax,%ds
ffffffff8020c6a5:	58                   	pop    %rax
ffffffff8020c6a6:	5b                   	pop    %rbx
ffffffff8020c6a7:	59                   	pop    %rcx
ffffffff8020c6a8:	5a                   	pop    %rdx
ffffffff8020c6a9:	5e                   	pop    %rsi
ffffffff8020c6aa:	5f                   	pop    %rdi
ffffffff8020c6ab:	5d                   	pop    %rbp
ffffffff8020c6ac:	41 58                	pop    %r8
ffffffff8020c6ae:	41 59                	pop    %r9
ffffffff8020c6b0:	41 5a                	pop    %r10
ffffffff8020c6b2:	41 5b                	pop    %r11
ffffffff8020c6b4:	41 5c                	pop    %r12
ffffffff8020c6b6:	41 5d                	pop    %r13
ffffffff8020c6b8:	41 5e                	pop    %r14
ffffffff8020c6ba:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c6bc:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c6c0:	48 cf                	iretq  

ffffffff8020c6c2 <SVC_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SVC_Handler:
    .global             SVC_Handler
    SWAPGS
ffffffff8020c6c2:	0f 01 f8             	swapgs 
    /* Swap the pointers with the per-core kernel RSP */
    MOVQ                %RSP,%GS:(8192-8)
ffffffff8020c6c5:	65 48 89 24 25 f8 1f 	mov    %rsp,%gs:0x1ff8
ffffffff8020c6cc:	00 00 
    MOVQ                %GS:(8192-16),%RSP
ffffffff8020c6ce:	65 48 8b 24 25 f0 1f 	mov    %gs:0x1ff0,%rsp
ffffffff8020c6d5:	00 00 
    /* Simulate INT stack: High - [SS, RSP, RFLAGS, CS, RIP, ERRCODE] - Low */
    PUSHQ               $(USER_DATA)
ffffffff8020c6d7:	6a 23                	push   $0x23
    PUSHQ               %GS:(8192-8)
ffffffff8020c6d9:	65 ff 34 25 f8 1f 00 	push   %gs:0x1ff8
ffffffff8020c6e0:	00 
    PUSHQ               %R11
ffffffff8020c6e1:	41 53                	push   %r11
    PUSHQ               $(USER_CODE)
ffffffff8020c6e3:	6a 2b                	push   $0x2b
    PUSHQ               %RCX
ffffffff8020c6e5:	51                   	push   %rcx
    PUSHQ               $0
ffffffff8020c6e6:	6a 00                	push   $0x0
    /* We went into this from a SYSCALL - interrupt number 0x10000 */
    PUSHQ               $0x10000
ffffffff8020c6e8:	68 00 00 01 00       	push   $0x10000
    SAVE_GP_REGS
ffffffff8020c6ed:	41 57                	push   %r15
ffffffff8020c6ef:	41 56                	push   %r14
ffffffff8020c6f1:	41 55                	push   %r13
ffffffff8020c6f3:	41 54                	push   %r12
ffffffff8020c6f5:	41 53                	push   %r11
ffffffff8020c6f7:	41 52                	push   %r10
ffffffff8020c6f9:	41 51                	push   %r9
ffffffff8020c6fb:	41 50                	push   %r8
ffffffff8020c6fd:	55                   	push   %rbp
ffffffff8020c6fe:	57                   	push   %rdi
ffffffff8020c6ff:	56                   	push   %rsi
ffffffff8020c700:	52                   	push   %rdx
ffffffff8020c701:	51                   	push   %rcx
ffffffff8020c702:	53                   	push   %rbx
ffffffff8020c703:	50                   	push   %rax
ffffffff8020c704:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c708:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c70a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Svc_Handler
ffffffff8020c70d:	e8 7e 48 00 00       	call   ffffffff80210f90 <_RME_Svc_Handler>
    RESTORE_GP_REGS
ffffffff8020c712:	0f 01 f8             	swapgs 
ffffffff8020c715:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c719:	8e d8                	mov    %eax,%ds
ffffffff8020c71b:	58                   	pop    %rax
ffffffff8020c71c:	5b                   	pop    %rbx
ffffffff8020c71d:	59                   	pop    %rcx
ffffffff8020c71e:	5a                   	pop    %rdx
ffffffff8020c71f:	5e                   	pop    %rsi
ffffffff8020c720:	5f                   	pop    %rdi
ffffffff8020c721:	5d                   	pop    %rbp
ffffffff8020c722:	41 58                	pop    %r8
ffffffff8020c724:	41 59                	pop    %r9
ffffffff8020c726:	41 5a                	pop    %r10
ffffffff8020c728:	41 5b                	pop    %r11
ffffffff8020c72a:	41 5c                	pop    %r12
ffffffff8020c72c:	41 5d                	pop    %r13
ffffffff8020c72e:	41 5e                	pop    %r14
ffffffff8020c730:	41 5f                	pop    %r15
    /* See if we are forced to use IRET */
    TESTQ               $0x10000,(%RSP)
ffffffff8020c732:	48 f7 04 24 00 00 01 	testq  $0x10000,(%rsp)
ffffffff8020c739:	00 
    JZ                  Use_IRET
ffffffff8020c73a:	74 1c                	je     ffffffff8020c758 <Use_IRET>
    /* Just move these into the registers desired */
    /* CVE-2012-0217, CVE-2014-4699: Force canonical address on RIP */
    MOVQ                $0x7FFFFFFFFFFF,%RCX
ffffffff8020c73c:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffff,%rcx
ffffffff8020c743:	7f 00 00 
    ANDQ                16(%RSP),%RCX
ffffffff8020c746:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
    MOVQ                32(%RSP),%R11
ffffffff8020c74b:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    MOVQ                40(%RSP),%RSP
ffffffff8020c750:	48 8b 64 24 28       	mov    0x28(%rsp),%rsp
    /* Return to user-level */
    SYSRETQ
ffffffff8020c755:	48 0f 07             	sysretq 

ffffffff8020c758 <Use_IRET>:
Use_IRET:
    /* Flag is zero, We are forced to use IRET, because this is from INT */
    ADDQ                $16,%RSP
ffffffff8020c758:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c75c:	48 cf                	iretq  

ffffffff8020c75e <_RME_Tick_SMP_Handler>:
ffffffff8020c75e:	66 90                	xchg   %ax,%ax

ffffffff8020c760 <_RME_Run_Del>:
static void _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff8020c760:	48 8b 4f 40          	mov    0x40(%rdi),%rcx
    Local=Thd->Sched.Local;
    /* It can't be free or there must be an error */
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Delete this thread from the runqueue */
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8020c764:	48 8b 37             	mov    (%rdi),%rsi
ffffffff8020c767:	48 8b 47 08          	mov    0x8(%rdi),%rax
    Local=Thd->Sched.Local;
ffffffff8020c76b:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    Next->Prev=Prev;
ffffffff8020c76f:	48 89 46 08          	mov    %rax,0x8(%rsi)
    Prev->Next=Next;
ffffffff8020c773:	48 89 30             	mov    %rsi,(%rax)
    
    /* See if there are any thread on this priority level */
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff8020c776:	48 8d 41 02          	lea    0x2(%rcx),%rax
ffffffff8020c77a:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8020c77e:	48 8d 74 02 08       	lea    0x8(%rdx,%rax,1),%rsi
ffffffff8020c783:	48 39 74 02 08       	cmp    %rsi,0x8(%rdx,%rax,1)
ffffffff8020c788:	74 06                	je     ffffffff8020c790 <_RME_Run_Del+0x30>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff8020c78a:	c3                   	ret    
ffffffff8020c78b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff8020c790:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020c793:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020c798:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff8020c79c:	48 d3 e0             	shl    %cl,%rax
ffffffff8020c79f:	48 f7 d0             	not    %rax
ffffffff8020c7a2:	48 21 44 f2 20       	and    %rax,0x20(%rdx,%rsi,8)
}
ffffffff8020c7a7:	c3                   	ret    
ffffffff8020c7a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020c7af:	00 

ffffffff8020c7b0 <_RME_Inv_Ret>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Ret(struct RME_Reg_Struct* Reg,
                              rme_ptr_t Retval,
                              rme_ptr_t Is_Exc)
{
ffffffff8020c7b0:	41 57                	push   %r15
ffffffff8020c7b2:	41 56                	push   %r14
ffffffff8020c7b4:	49 89 f6             	mov    %rsi,%r14
ffffffff8020c7b7:	41 55                	push   %r13
ffffffff8020c7b9:	49 89 d5             	mov    %rdx,%r13
ffffffff8020c7bc:	41 54                	push   %r12
ffffffff8020c7be:	49 89 fc             	mov    %rdi,%r12
ffffffff8020c7c1:	55                   	push   %rbp
ffffffff8020c7c2:	53                   	push   %rbx
ffffffff8020c7c3:	48 83 ec 08          	sub    $0x8,%rsp
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;

    /* See if we can return; If we can, get the structure */
    Thread=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020c7c7:	e8 73 f0 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020c7cc:	48 8b 68 08          	mov    0x8(%rax),%rbp
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8020c7d0:	48 8b 9d 98 00 00 00 	mov    0x98(%rbp),%rbx
ffffffff8020c7d7:	4c 8d bd 98 00 00 00 	lea    0x98(%rbp),%r15
    if(RME_UNLIKELY(Invocation==(void*)RME_NULL))
ffffffff8020c7de:	4c 39 fb             	cmp    %r15,%rbx
ffffffff8020c7e1:	0f 84 a9 00 00 00    	je     ffffffff8020c890 <_RME_Inv_Ret+0xe0>
ffffffff8020c7e7:	48 85 db             	test   %rbx,%rbx
ffffffff8020c7ea:	0f 84 a0 00 00 00    	je     ffffffff8020c890 <_RME_Inv_Ret+0xe0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if this port allows return-on-fault */
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8020c7f0:	4d 85 ed             	test   %r13,%r13
ffffffff8020c7f3:	0f 85 b7 00 00 00    	jne    ffffffff8020c8b0 <_RME_Inv_Ret+0x100>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Pop it from the stack */
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8020c7f9:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020c7fc:	48 8b 43 08          	mov    0x8(%rbx),%rax
    /* Decrease invocation depth - no atomic operation needed */
    Thread->Ctx.Invstk_Depth--;

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well. */
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c800:	48 8d 73 38          	lea    0x38(%rbx),%rsi
ffffffff8020c804:	4c 89 e7             	mov    %r12,%rdi
    Next->Prev=Prev;
ffffffff8020c807:	48 89 42 08          	mov    %rax,0x8(%rdx)
    Prev->Next=Next;
ffffffff8020c80b:	48 89 10             	mov    %rdx,(%rax)
    Thread->Ctx.Invstk_Depth--;
ffffffff8020c80e:	48 83 ad a8 00 00 00 	subq   $0x1,0xa8(%rbp)
ffffffff8020c815:	01 
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c816:	e8 35 e0 00 00       	call   ffffffff8021a850 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8020c81b:	4c 89 f6             	mov    %r14,%rsi
ffffffff8020c81e:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c821:	e8 7a eb 00 00       	call   ffffffff8021b3a0 <__RME_Inv_Retval_Set>

    /* We have successfully returned, set the invocation as inactive. We need
     * a barrier here to avoid potential destruction of the return value. */
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8020c826:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff8020c82d:	00 
    }
    else
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg,0);
ffffffff8020c82e:	31 f6                	xor    %esi,%esi
ffffffff8020c830:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c833:	e8 58 eb 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
    }

    /* Same assumptions as in invocation activation */
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8020c838:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Invocation!=(void*)RME_NULL)
ffffffff8020c83f:	48 85 c0             	test   %rax,%rax
ffffffff8020c842:	74 2c                	je     ffffffff8020c870 <_RME_Inv_Ret+0xc0>
ffffffff8020c844:	49 39 c7             	cmp    %rax,%r15
ffffffff8020c847:	74 27                	je     ffffffff8020c870 <_RME_Inv_Ret+0xc0>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set(Invocation->Prc->Pgt);
ffffffff8020c849:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020c84d:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020c851:	e8 3a e6 00 00       	call   ffffffff8021ae90 <__RME_Pgt_Set>
        RME_ASSERT(RME_CAP_IS_ROOT(Thread->Sched.Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set(Thread->Sched.Prc->Pgt);
    }
    
    return 0;
ffffffff8020c856:	31 c0                	xor    %eax,%eax
}
ffffffff8020c858:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020c85c:	5b                   	pop    %rbx
ffffffff8020c85d:	5d                   	pop    %rbp
ffffffff8020c85e:	41 5c                	pop    %r12
ffffffff8020c860:	41 5d                	pop    %r13
ffffffff8020c862:	41 5e                	pop    %r14
ffffffff8020c864:	41 5f                	pop    %r15
ffffffff8020c866:	c3                   	ret    
ffffffff8020c867:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020c86e:	00 00 
        __RME_Pgt_Set(Thread->Sched.Prc->Pgt);
ffffffff8020c870:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff8020c874:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020c878:	e8 13 e6 00 00       	call   ffffffff8021ae90 <__RME_Pgt_Set>
}
ffffffff8020c87d:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
ffffffff8020c881:	31 c0                	xor    %eax,%eax
}
ffffffff8020c883:	5b                   	pop    %rbx
ffffffff8020c884:	5d                   	pop    %rbp
ffffffff8020c885:	41 5c                	pop    %r12
ffffffff8020c887:	41 5d                	pop    %r13
ffffffff8020c889:	41 5e                	pop    %r14
ffffffff8020c88b:	41 5f                	pop    %r15
ffffffff8020c88d:	c3                   	ret    
ffffffff8020c88e:	66 90                	xchg   %ax,%ax
ffffffff8020c890:	48 83 c4 08          	add    $0x8,%rsp
        return RME_ERR_SIV_EMPTY;
ffffffff8020c894:	48 c7 c0 d0 fe ff ff 	mov    $0xfffffffffffffed0,%rax
}
ffffffff8020c89b:	5b                   	pop    %rbx
ffffffff8020c89c:	5d                   	pop    %rbp
ffffffff8020c89d:	41 5c                	pop    %r12
ffffffff8020c89f:	41 5d                	pop    %r13
ffffffff8020c8a1:	41 5e                	pop    %r14
ffffffff8020c8a3:	41 5f                	pop    %r15
ffffffff8020c8a5:	c3                   	ret    
ffffffff8020c8a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020c8ad:	00 00 00 
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8020c8b0:	48 83 7b 30 00       	cmpq   $0x0,0x30(%rbx)
ffffffff8020c8b5:	74 49                	je     ffffffff8020c900 <_RME_Inv_Ret+0x150>
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8020c8b7:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020c8ba:	48 8b 43 08          	mov    0x8(%rbx),%rax
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c8be:	48 8d 73 38          	lea    0x38(%rbx),%rsi
ffffffff8020c8c2:	4c 89 e7             	mov    %r12,%rdi
    Next->Prev=Prev;
ffffffff8020c8c5:	48 89 42 08          	mov    %rax,0x8(%rdx)
    Prev->Next=Next;
ffffffff8020c8c9:	48 89 10             	mov    %rdx,(%rax)
    Thread->Ctx.Invstk_Depth--;
ffffffff8020c8cc:	48 83 ad a8 00 00 00 	subq   $0x1,0xa8(%rbp)
ffffffff8020c8d3:	01 
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c8d4:	e8 77 df 00 00       	call   ffffffff8021a850 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8020c8d9:	4c 89 f6             	mov    %r14,%rsi
ffffffff8020c8dc:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c8df:	e8 bc ea 00 00       	call   ffffffff8021b3a0 <__RME_Inv_Retval_Set>
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8020c8e4:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff8020c8eb:	00 
        __RME_Svc_Retval_Set(Reg, RME_ERR_SIV_FAULT);
ffffffff8020c8ec:	48 c7 c6 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rsi
ffffffff8020c8f3:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c8f6:	e8 95 ea 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
ffffffff8020c8fb:	e9 38 ff ff ff       	jmp    ffffffff8020c838 <_RME_Inv_Ret+0x88>
        return RME_ERR_SIV_FAULT;
ffffffff8020c900:	48 c7 c0 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rax
ffffffff8020c907:	e9 4c ff ff ff       	jmp    ffffffff8020c858 <_RME_Inv_Ret+0xa8>
ffffffff8020c90c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020c910 <_RME_Inv_Act.isra.0>:
static rme_ret_t _RME_Inv_Act(struct RME_Cap_Cpt* Cpt, 
ffffffff8020c910:	41 55                	push   %r13
ffffffff8020c912:	49 89 d5             	mov    %rdx,%r13
ffffffff8020c915:	41 54                	push   %r12
ffffffff8020c917:	4d 89 c4             	mov    %r8,%r12
ffffffff8020c91a:	55                   	push   %rbp
ffffffff8020c91b:	53                   	push   %rbx
ffffffff8020c91c:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8020c920:	f6 c5 80             	test   $0x80,%ch
ffffffff8020c923:	0f 85 df 00 00 00    	jne    ffffffff8020ca08 <_RME_Inv_Act.isra.0+0xf8>
ffffffff8020c929:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020c92c:	0f 83 26 01 00 00    	jae    ffffffff8020ca58 <_RME_Inv_Act.isra.0+0x148>
ffffffff8020c932:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020c936:	48 01 f9             	add    %rdi,%rcx
ffffffff8020c939:	48 8b 01             	mov    (%rcx),%rax
ffffffff8020c93c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020c93f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8020c943:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff8020c947:	0f 84 23 01 00 00    	je     ffffffff8020ca70 <_RME_Inv_Act.isra.0+0x160>
ffffffff8020c94d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020c951:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8020c955:	0f 85 2d 01 00 00    	jne    ffffffff8020ca88 <_RME_Inv_Act.isra.0+0x178>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff8020c95b:	f6 41 10 02          	testb  $0x2,0x10(%rcx)
ffffffff8020c95f:	0f 84 53 01 00 00    	je     ffffffff8020cab8 <_RME_Inv_Act.isra.0+0x1a8>
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8020c965:	48 8b 59 18          	mov    0x18(%rcx),%rbx
    if(RME_UNLIKELY(Thd_Act!=(void*)0U))
ffffffff8020c969:	48 83 7b 18 00       	cmpq   $0x0,0x18(%rbx)
ffffffff8020c96e:	0f 85 2c 01 00 00    	jne    ffffffff8020caa0 <_RME_Inv_Act.isra.0+0x190>
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020c974:	e8 c6 ee ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020c979:	48 8b 68 08          	mov    0x8(%rax),%rbp
/* Inline assembly implementation */
#else
static INLINE rme_ptr_t _RME_X64_Comp_Swap(volatile rme_ptr_t* Ptr, rme_ptr_t Old, rme_ptr_t New)
{
	rme_u8_t Zero;
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020c97d:	31 c0                	xor    %eax,%eax
ffffffff8020c97f:	f0 48 0f b1 6b 18    	lock cmpxchg %rbp,0x18(%rbx)
ffffffff8020c985:	0f 94 c0             	sete   %al
    if(RME_UNLIKELY(RME_COMP_SWAP((volatile rme_ptr_t*)&(Invocation->Thd_Act),
ffffffff8020c988:	84 c0                	test   %al,%al
ffffffff8020c98a:	0f 84 10 01 00 00    	je     ffffffff8020caa0 <_RME_Inv_Act.isra.0+0x190>
    __RME_Inv_Reg_Save(&(Invocation->Ret),Reg);
ffffffff8020c990:	48 8d 7b 38          	lea    0x38(%rbx),%rdi
ffffffff8020c994:	4c 89 ee             	mov    %r13,%rsi
ffffffff8020c997:	e8 94 de 00 00       	call   ffffffff8021a830 <__RME_Inv_Reg_Save>
    _RME_List_Ins(&(Invocation->Head),
ffffffff8020c99c:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff8020c9a3:	4d 89 e8             	mov    %r13,%r8
ffffffff8020c9a6:	4c 89 e1             	mov    %r12,%rcx
                  &(Thd_Cur->Ctx.Invstk),
ffffffff8020c9a9:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff8020c9b0:	48 bf ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdi
ffffffff8020c9b7:	ff ff 7f 
    Next->Prev=New;
ffffffff8020c9ba:	48 89 58 08          	mov    %rbx,0x8(%rax)
    New->Next=Next;
ffffffff8020c9be:	48 89 03             	mov    %rax,(%rbx)
    New->Prev=Prev;
ffffffff8020c9c1:	48 89 53 08          	mov    %rdx,0x8(%rbx)
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff8020c9c5:	48 23 bd 88 00 00 00 	and    0x88(%rbp),%rdi
    Thd_Cur->Ctx.Invstk_Depth++;
ffffffff8020c9cc:	48 83 85 a8 00 00 00 	addq   $0x1,0xa8(%rbp)
ffffffff8020c9d3:	01 
    Prev->Next=New;
ffffffff8020c9d4:	48 89 9d 98 00 00 00 	mov    %rbx,0x98(%rbp)
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff8020c9db:	48 8b 53 28          	mov    0x28(%rbx),%rdx
ffffffff8020c9df:	48 8b 73 20          	mov    0x20(%rbx),%rsi
ffffffff8020c9e3:	e8 e8 dc 00 00       	call   ffffffff8021a6d0 <__RME_Thd_Reg_Init>
    __RME_Pgt_Set(Invocation->Prc->Pgt);
ffffffff8020c9e8:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8020c9ec:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020c9f0:	e8 9b e4 00 00       	call   ffffffff8021ae90 <__RME_Pgt_Set>
    return 0;
ffffffff8020c9f5:	31 c0                	xor    %eax,%eax
}
ffffffff8020c9f7:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020c9fb:	5b                   	pop    %rbx
ffffffff8020c9fc:	5d                   	pop    %rbp
ffffffff8020c9fd:	41 5c                	pop    %r12
ffffffff8020c9ff:	41 5d                	pop    %r13
ffffffff8020ca01:	c3                   	ret    
ffffffff8020ca02:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8020ca08:	48 89 c8             	mov    %rcx,%rax
ffffffff8020ca0b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ca0f:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020ca12:	73 44                	jae    ffffffff8020ca58 <_RME_Inv_Act.isra.0+0x148>
ffffffff8020ca14:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ca18:	48 01 f8             	add    %rdi,%rax
ffffffff8020ca1b:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020ca1e:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020ca21:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020ca25:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020ca29:	74 45                	je     ffffffff8020ca70 <_RME_Inv_Act.isra.0+0x160>
ffffffff8020ca2b:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020ca2f:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020ca33:	75 53                	jne    ffffffff8020ca88 <_RME_Inv_Act.isra.0+0x178>
ffffffff8020ca35:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020ca39:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff8020ca3f:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8020ca42:	73 14                	jae    ffffffff8020ca58 <_RME_Inv_Act.isra.0+0x148>
ffffffff8020ca44:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020ca48:	48 03 48 18          	add    0x18(%rax),%rcx
ffffffff8020ca4c:	e9 e8 fe ff ff       	jmp    ffffffff8020c939 <_RME_Inv_Act.isra.0+0x29>
ffffffff8020ca51:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
}
ffffffff8020ca58:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8020ca5c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020ca63:	5b                   	pop    %rbx
ffffffff8020ca64:	5d                   	pop    %rbp
ffffffff8020ca65:	41 5c                	pop    %r12
ffffffff8020ca67:	41 5d                	pop    %r13
ffffffff8020ca69:	c3                   	ret    
ffffffff8020ca6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020ca70:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8020ca74:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020ca7b:	5b                   	pop    %rbx
ffffffff8020ca7c:	5d                   	pop    %rbp
ffffffff8020ca7d:	41 5c                	pop    %r12
ffffffff8020ca7f:	41 5d                	pop    %r13
ffffffff8020ca81:	c3                   	ret    
ffffffff8020ca82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020ca88:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8020ca8c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020ca93:	5b                   	pop    %rbx
ffffffff8020ca94:	5d                   	pop    %rbp
ffffffff8020ca95:	41 5c                	pop    %r12
ffffffff8020ca97:	41 5d                	pop    %r13
ffffffff8020ca99:	c3                   	ret    
ffffffff8020ca9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020caa0:	48 83 c4 08          	add    $0x8,%rsp
        return RME_ERR_SIV_ACT;
ffffffff8020caa4:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
}
ffffffff8020caab:	5b                   	pop    %rbx
ffffffff8020caac:	5d                   	pop    %rbp
ffffffff8020caad:	41 5c                	pop    %r12
ffffffff8020caaf:	41 5d                	pop    %r13
ffffffff8020cab1:	c3                   	ret    
ffffffff8020cab2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff8020cab8:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020cabf:	e9 33 ff ff ff       	jmp    ffffffff8020c9f7 <_RME_Inv_Act.isra.0+0xe7>
ffffffff8020cac4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020cacb:	00 00 00 00 
ffffffff8020cacf:	90                   	nop

ffffffff8020cad0 <_RME_Sig_Del.isra.0>:
static rme_ret_t _RME_Sig_Del(struct RME_Cap_Cpt* Cpt,
ffffffff8020cad0:	48 89 c8             	mov    %rcx,%rax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020cad3:	f6 c6 80             	test   $0x80,%dh
ffffffff8020cad6:	0f 85 bc 00 00 00    	jne    ffffffff8020cb98 <_RME_Sig_Del.isra.0+0xc8>
ffffffff8020cadc:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020cadf:	0f 83 03 01 00 00    	jae    ffffffff8020cbe8 <_RME_Sig_Del.isra.0+0x118>
ffffffff8020cae5:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020cae9:	48 01 fa             	add    %rdi,%rdx
ffffffff8020caec:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020caef:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020caf2:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020caf6:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020cafa:	0f 84 f0 00 00 00    	je     ffffffff8020cbf0 <_RME_Sig_Del.isra.0+0x120>
ffffffff8020cb00:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020cb04:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020cb08:	0f 85 f2 00 00 00    	jne    ffffffff8020cc00 <_RME_Sig_Del.isra.0+0x130>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8020cb0e:	f6 42 10 02          	testb  $0x2,0x10(%rdx)
ffffffff8020cb12:	0f 84 f8 00 00 00    	je     ffffffff8020cc10 <_RME_Sig_Del.isra.0+0x140>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff8020cb18:	48 39 42 28          	cmp    %rax,0x28(%rdx)
ffffffff8020cb1c:	0f 86 c6 00 00 00    	jbe    ffffffff8020cbe8 <_RME_Sig_Del.isra.0+0x118>
ffffffff8020cb22:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cb26:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020cb2a:	48 89 c2             	mov    %rax,%rdx
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff8020cb2d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020cb30:	48 89 c1             	mov    %rax,%rcx
ffffffff8020cb33:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020cb37:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020cb3b:	0f 85 af 00 00 00    	jne    ffffffff8020cbf0 <_RME_Sig_Del.isra.0+0x120>
ffffffff8020cb41:	48 89 c1             	mov    %rax,%rcx
ffffffff8020cb44:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020cb48:	48 83 f9 08          	cmp    $0x8,%rcx
ffffffff8020cb4c:	0f 85 ae 00 00 00    	jne    ffffffff8020cc00 <_RME_Sig_Del.isra.0+0x130>
ffffffff8020cb52:	48 8b 72 20          	mov    0x20(%rdx),%rsi
ffffffff8020cb56:	48 8b 0d b3 a4 01 00 	mov    0x1a4b3(%rip),%rcx        # ffffffff80227010 <RME_x64_timestamp>
ffffffff8020cb5d:	48 29 f1             	sub    %rsi,%rcx
ffffffff8020cb60:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff8020cb64:	0f 86 b6 00 00 00    	jbe    ffffffff8020cc20 <_RME_Sig_Del.isra.0+0x150>
ffffffff8020cb6a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff8020cb6e:	48 85 c9             	test   %rcx,%rcx
ffffffff8020cb71:	0f 85 b9 00 00 00    	jne    ffffffff8020cc30 <_RME_Sig_Del.isra.0+0x160>
    if(Sig_Del->Thd!=(void*)0U)
ffffffff8020cb77:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
ffffffff8020cb7b:	48 85 c9             	test   %rcx,%rcx
ffffffff8020cb7e:	0f 85 cd 00 00 00    	jne    ffffffff8020cc51 <_RME_Sig_Del.isra.0+0x181>
ffffffff8020cb84:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020cb89:	0f 94 c1             	sete   %cl
    RME_CAP_DELETE(Sig_Del,Type_Stat);
ffffffff8020cb8c:	80 f9 01             	cmp    $0x1,%cl
ffffffff8020cb8f:	48 19 c0             	sbb    %rax,%rax
ffffffff8020cb92:	c3                   	ret    
ffffffff8020cb93:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020cb98:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020cb9b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020cb9f:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020cba2:	73 44                	jae    ffffffff8020cbe8 <_RME_Sig_Del.isra.0+0x118>
ffffffff8020cba4:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020cba8:	48 01 cf             	add    %rcx,%rdi
ffffffff8020cbab:	48 8b 0f             	mov    (%rdi),%rcx
ffffffff8020cbae:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020cbb1:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020cbb5:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020cbb9:	74 35                	je     ffffffff8020cbf0 <_RME_Sig_Del.isra.0+0x120>
ffffffff8020cbbb:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020cbbf:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020cbc3:	75 3b                	jne    ffffffff8020cc00 <_RME_Sig_Del.isra.0+0x130>
ffffffff8020cbc5:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020cbc9:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020cbcf:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020cbd2:	73 14                	jae    ffffffff8020cbe8 <_RME_Sig_Del.isra.0+0x118>
ffffffff8020cbd4:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020cbd8:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8020cbdc:	e9 0b ff ff ff       	jmp    ffffffff8020caec <_RME_Sig_Del.isra.0+0x1c>
ffffffff8020cbe1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020cbe8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020cbef:	c3                   	ret    
ffffffff8020cbf0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020cbf7:	c3                   	ret    
ffffffff8020cbf8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020cbff:	00 
ffffffff8020cc00:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020cc07:	c3                   	ret    
ffffffff8020cc08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020cc0f:	00 
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8020cc10:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020cc17:	c3                   	ret    
ffffffff8020cc18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020cc1f:	00 
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff8020cc20:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020cc27:	c3                   	ret    
ffffffff8020cc28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020cc2f:	00 
ffffffff8020cc30:	85 c0                	test   %eax,%eax
ffffffff8020cc32:	75 3a                	jne    ffffffff8020cc6e <_RME_Sig_Del.isra.0+0x19e>
ffffffff8020cc34:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff8020cc3b:	00 ff ff 
ffffffff8020cc3e:	48 21 c1             	and    %rax,%rcx
ffffffff8020cc41:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020cc46:	0f 94 c1             	sete   %cl
ffffffff8020cc49:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
	                     :[Ptr]"+m"(*Ptr), [Zero]"=r"(Zero)
	                     :[New]"r"(New), [Old]"a"(Old)
	                     :"memory", "cc");
	return (rme_ptr_t)Zero;
ffffffff8020cc50:	c3                   	ret    
        RME_CAP_DEFROST(Sig_Del,Type_Stat);
ffffffff8020cc51:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff8020cc58:	00 ff ff 
ffffffff8020cc5b:	48 21 c1             	and    %rax,%rcx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020cc5e:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020cc63:	0f 94 c1             	sete   %cl
        return RME_ERR_SIV_ACT;
ffffffff8020cc66:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8020cc6d:	c3                   	ret    
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff8020cc6e:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
}
ffffffff8020cc75:	c3                   	ret    
ffffffff8020cc76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020cc7d:	00 00 00 

ffffffff8020cc80 <_RME_Thd_Sched_Rcv.isra.0>:
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cc80:	f6 c6 80             	test   $0x80,%dh
ffffffff8020cc83:	0f 85 a7 00 00 00    	jne    ffffffff8020cd30 <_RME_Thd_Sched_Rcv.isra.0+0xb0>
ffffffff8020cc89:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020cc8c:	0f 83 ee 00 00 00    	jae    ffffffff8020cd80 <_RME_Thd_Sched_Rcv.isra.0+0x100>
ffffffff8020cc92:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020cc96:	48 01 fa             	add    %rdi,%rdx
ffffffff8020cc99:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020cc9c:	48 89 c1             	mov    %rax,%rcx
ffffffff8020cc9f:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020cca3:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020cca7:	0f 84 0b 01 00 00    	je     ffffffff8020cdb8 <_RME_Thd_Sched_Rcv.isra.0+0x138>
ffffffff8020ccad:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ccb1:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8020ccb5:	0f 85 05 01 00 00    	jne    ffffffff8020cdc0 <_RME_Thd_Sched_Rcv.isra.0+0x140>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
ffffffff8020ccbb:	f6 42 10 20          	testb  $0x20,0x10(%rdx)
ffffffff8020ccbf:	0f 84 0b 01 00 00    	je     ffffffff8020cdd0 <_RME_Thd_Sched_Rcv.isra.0+0x150>
static rme_ret_t _RME_Thd_Sched_Rcv(struct RME_Cap_Cpt* Cpt,
ffffffff8020ccc5:	55                   	push   %rbp
ffffffff8020ccc6:	53                   	push   %rbx
ffffffff8020ccc7:	48 83 ec 08          	sub    $0x8,%rsp
    Scheduler=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff8020cccb:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
    if(Scheduler->Sched.Local!=RME_CPU_LOCAL())
ffffffff8020cccf:	48 8b 6b 28          	mov    0x28(%rbx),%rbp
ffffffff8020ccd3:	e8 67 eb ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020ccd8:	48 39 c5             	cmp    %rax,%rbp
ffffffff8020ccdb:	0f 85 ff 00 00 00    	jne    ffffffff8020cde0 <_RME_Thd_Sched_Rcv.isra.0+0x160>
    if(Scheduler->Sched.Event.Next==&(Scheduler->Sched.Event))
ffffffff8020cce1:	48 8b 53 78          	mov    0x78(%rbx),%rdx
ffffffff8020cce5:	48 83 c3 78          	add    $0x78,%rbx
ffffffff8020cce9:	48 39 da             	cmp    %rbx,%rdx
ffffffff8020ccec:	0f 84 fa 00 00 00    	je     ffffffff8020cdec <_RME_Thd_Sched_Rcv.isra.0+0x16c>
    _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff8020ccf2:	48 8b 42 08          	mov    0x8(%rdx),%rax
ffffffff8020ccf6:	48 8b 0a             	mov    (%rdx),%rcx
    Next->Prev=Prev;
ffffffff8020ccf9:	48 89 41 08          	mov    %rax,0x8(%rcx)
    Prev->Next=Next;
ffffffff8020ccfd:	48 89 08             	mov    %rcx,(%rax)
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff8020cd00:	48 8b 42 28          	mov    0x28(%rdx),%rax
    Head->Prev=Head;
ffffffff8020cd04:	48 89 52 08          	mov    %rdx,0x8(%rdx)
    Head->Next=Head;
ffffffff8020cd08:	48 89 12             	mov    %rdx,(%rdx)
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff8020cd0b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020cd0f:	74 7f                	je     ffffffff8020cd90 <_RME_Thd_Sched_Rcv.isra.0+0x110>
    else if(Thread->Sched.State==RME_THD_TIMEOUT)
ffffffff8020cd11:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020cd15:	0f 94 c0             	sete   %al
ffffffff8020cd18:	0f b6 c0             	movzbl %al,%eax
ffffffff8020cd1b:	48 c1 e0 3d          	shl    $0x3d,%rax
    return (rme_ret_t)(Thread->Sched.TID|Flag);
ffffffff8020cd1f:	48 0b 42 10          	or     0x10(%rdx),%rax
}
ffffffff8020cd23:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020cd27:	5b                   	pop    %rbx
ffffffff8020cd28:	5d                   	pop    %rbp
ffffffff8020cd29:	c3                   	ret    
ffffffff8020cd2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cd30:	48 89 d0             	mov    %rdx,%rax
ffffffff8020cd33:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020cd37:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020cd3a:	73 44                	jae    ffffffff8020cd80 <_RME_Thd_Sched_Rcv.isra.0+0x100>
ffffffff8020cd3c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cd40:	48 01 c7             	add    %rax,%rdi
ffffffff8020cd43:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020cd46:	48 89 c1             	mov    %rax,%rcx
ffffffff8020cd49:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020cd4d:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020cd51:	74 65                	je     ffffffff8020cdb8 <_RME_Thd_Sched_Rcv.isra.0+0x138>
ffffffff8020cd53:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020cd57:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020cd5b:	75 63                	jne    ffffffff8020cdc0 <_RME_Thd_Sched_Rcv.isra.0+0x140>
ffffffff8020cd5d:	48 8b 47 28          	mov    0x28(%rdi),%rax
ffffffff8020cd61:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020cd67:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020cd6a:	73 14                	jae    ffffffff8020cd80 <_RME_Thd_Sched_Rcv.isra.0+0x100>
ffffffff8020cd6c:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020cd70:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8020cd74:	e9 20 ff ff ff       	jmp    ffffffff8020cc99 <_RME_Thd_Sched_Rcv.isra.0+0x19>
ffffffff8020cd79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020cd80:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020cd87:	c3                   	ret    
ffffffff8020cd88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020cd8f:	00 
            Flag|=RME_THD_TIMEOUT_FLAG;
ffffffff8020cd90:	48 b8 00 00 00 00 00 	movabs $0x4000000000000000,%rax
ffffffff8020cd97:	00 00 40 
ffffffff8020cd9a:	48 83 7a 20 00       	cmpq   $0x0,0x20(%rdx)
ffffffff8020cd9f:	48 b9 00 00 00 00 00 	movabs $0x6000000000000000,%rcx
ffffffff8020cda6:	00 00 60 
ffffffff8020cda9:	48 0f 44 c1          	cmove  %rcx,%rax
ffffffff8020cdad:	e9 6d ff ff ff       	jmp    ffffffff8020cd1f <_RME_Thd_Sched_Rcv.isra.0+0x9f>
ffffffff8020cdb2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cdb8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020cdbf:	c3                   	ret    
ffffffff8020cdc0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020cdc7:	c3                   	ret    
ffffffff8020cdc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020cdcf:	00 
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
ffffffff8020cdd0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff8020cdd7:	c3                   	ret    
ffffffff8020cdd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020cddf:	00 
        return RME_ERR_PTH_INVSTATE;
ffffffff8020cde0:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8020cde7:	e9 37 ff ff ff       	jmp    ffffffff8020cd23 <_RME_Thd_Sched_Rcv.isra.0+0xa3>
        return RME_ERR_PTH_NOTIF;
ffffffff8020cdec:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff8020cdf3:	e9 2b ff ff ff       	jmp    ffffffff8020cd23 <_RME_Thd_Sched_Rcv.isra.0+0xa3>
ffffffff8020cdf8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020cdff:	00 

ffffffff8020ce00 <_RME_Run_Swt.isra.0>:
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
ffffffff8020ce00:	41 55                	push   %r13
ffffffff8020ce02:	41 54                	push   %r12
ffffffff8020ce04:	49 89 fc             	mov    %rdi,%r12
ffffffff8020ce07:	55                   	push   %rbp
ffffffff8020ce08:	48 89 f5             	mov    %rsi,%rbp
ffffffff8020ce0b:	53                   	push   %rbx
ffffffff8020ce0c:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020ce0f:	48 83 ec 08          	sub    $0x8,%rsp
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff8020ce13:	4c 8b aa 90 00 00 00 	mov    0x90(%rdx),%r13
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff8020ce1a:	48 8b be 90 00 00 00 	mov    0x90(%rsi),%rdi
ffffffff8020ce21:	4c 89 e6             	mov    %r12,%rsi
ffffffff8020ce24:	e8 f7 d8 00 00       	call   ffffffff8021a720 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff8020ce29:	4c 89 ee             	mov    %r13,%rsi
ffffffff8020ce2c:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020ce2f:	e8 ec d8 00 00       	call   ffffffff8021a720 <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020ce34:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
ffffffff8020ce3b:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020ce42:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020ce45:	74 69                	je     ffffffff8020ceb0 <_RME_Run_Swt.isra.0+0xb0>
ffffffff8020ce47:	48 85 c0             	test   %rax,%rax
ffffffff8020ce4a:	74 64                	je     ffffffff8020ceb0 <_RME_Run_Swt.isra.0+0xb0>
        return Inv_Top->Prc->Pgt;
ffffffff8020ce4c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020ce50:	48 8b 48 30          	mov    0x30(%rax),%rcx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020ce54:	48 8b 83 98 00 00 00 	mov    0x98(%rbx),%rax
ffffffff8020ce5b:	48 8d 93 98 00 00 00 	lea    0x98(%rbx),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020ce62:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020ce65:	74 39                	je     ffffffff8020cea0 <_RME_Run_Swt.isra.0+0xa0>
ffffffff8020ce67:	48 85 c0             	test   %rax,%rax
ffffffff8020ce6a:	74 34                	je     ffffffff8020cea0 <_RME_Run_Swt.isra.0+0xa0>
        return Inv_Top->Prc->Pgt;
ffffffff8020ce6c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020ce70:	48 8b 78 30          	mov    0x30(%rax),%rdi
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff8020ce74:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8020ce78:	48 39 41 18          	cmp    %rax,0x18(%rcx)
ffffffff8020ce7c:	75 12                	jne    ffffffff8020ce90 <_RME_Run_Swt.isra.0+0x90>
}
ffffffff8020ce7e:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020ce82:	5b                   	pop    %rbx
ffffffff8020ce83:	5d                   	pop    %rbp
ffffffff8020ce84:	41 5c                	pop    %r12
ffffffff8020ce86:	41 5d                	pop    %r13
ffffffff8020ce88:	c3                   	ret    
ffffffff8020ce89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020ce90:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020ce94:	5b                   	pop    %rbx
ffffffff8020ce95:	5d                   	pop    %rbp
ffffffff8020ce96:	41 5c                	pop    %r12
ffffffff8020ce98:	41 5d                	pop    %r13
        __RME_Pgt_Set(Pgt_New);
ffffffff8020ce9a:	e9 f1 df 00 00       	jmp    ffffffff8021ae90 <__RME_Pgt_Set>
ffffffff8020ce9f:	90                   	nop
        return Thd->Sched.Prc->Pgt;
ffffffff8020cea0:	48 8b 43 58          	mov    0x58(%rbx),%rax
ffffffff8020cea4:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020cea8:	eb ca                	jmp    ffffffff8020ce74 <_RME_Run_Swt.isra.0+0x74>
ffffffff8020ceaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020ceb0:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff8020ceb4:	48 8b 48 30          	mov    0x30(%rax),%rcx
ffffffff8020ceb8:	eb 9a                	jmp    ffffffff8020ce54 <_RME_Run_Swt.isra.0+0x54>
ffffffff8020ceba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020cec0 <RME_Int_Print>:
{
ffffffff8020cec0:	f3 0f 1e fa          	endbr64 
ffffffff8020cec4:	41 56                	push   %r14
ffffffff8020cec6:	41 55                	push   %r13
ffffffff8020cec8:	41 54                	push   %r12
ffffffff8020ceca:	55                   	push   %rbp
ffffffff8020cecb:	53                   	push   %rbx
    if(Int==0)
ffffffff8020cecc:	48 85 ff             	test   %rdi,%rdi
ffffffff8020cecf:	0f 84 bb 00 00 00    	je     ffffffff8020cf90 <RME_Int_Print+0xd0>
ffffffff8020ced5:	48 89 fd             	mov    %rdi,%rbp
        Num=0;
ffffffff8020ced8:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    if(Int<0)
ffffffff8020cede:	0f 88 8c 00 00 00    	js     ffffffff8020cf70 <RME_Int_Print+0xb0>
        Iter/=10;
ffffffff8020cee4:	48 89 e8             	mov    %rbp,%rax
        Count++;
ffffffff8020cee7:	41 be 01 00 00 00    	mov    $0x1,%r14d
    Div=1;
ffffffff8020ceed:	bb 01 00 00 00       	mov    $0x1,%ebx
        Iter/=10;
ffffffff8020cef2:	48 b9 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rcx
ffffffff8020cef9:	cc cc cc 
ffffffff8020cefc:	48 f7 e1             	mul    %rcx
        if(Iter!=0)
ffffffff8020ceff:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8020cf03:	74 1a                	je     ffffffff8020cf1f <RME_Int_Print+0x5f>
ffffffff8020cf05:	0f 1f 00             	nopl   (%rax)
        Iter/=10;
ffffffff8020cf08:	48 89 d0             	mov    %rdx,%rax
            Div*=10;
ffffffff8020cf0b:	48 8d 1c 9b          	lea    (%rbx,%rbx,4),%rbx
        Count++;
ffffffff8020cf0f:	49 83 c6 01          	add    $0x1,%r14
        Iter/=10;
ffffffff8020cf13:	48 f7 e1             	mul    %rcx
            Div*=10;
ffffffff8020cf16:	48 01 db             	add    %rbx,%rbx
        if(Iter!=0)
ffffffff8020cf19:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8020cf1d:	75 e9                	jne    ffffffff8020cf08 <RME_Int_Print+0x48>
        Div/=10;
ffffffff8020cf1f:	49 bc cd cc cc cc cc 	movabs $0xcccccccccccccccd,%r12
ffffffff8020cf26:	cc cc cc 
    Num+=Count;
ffffffff8020cf29:	4d 01 f5             	add    %r14,%r13
    while(Count>0)
ffffffff8020cf2c:	0f 1f 40 00          	nopl   0x0(%rax)
        Count--;
ffffffff8020cf30:	48 89 e8             	mov    %rbp,%rax
ffffffff8020cf33:	49 83 ee 01          	sub    $0x1,%r14
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020cf37:	48 99                	cqto   
ffffffff8020cf39:	48 f7 fb             	idiv   %rbx
ffffffff8020cf3c:	83 c0 30             	add    $0x30,%eax
ffffffff8020cf3f:	48 89 d5             	mov    %rdx,%rbp
ffffffff8020cf42:	0f be f8             	movsbl %al,%edi
ffffffff8020cf45:	e8 46 b9 00 00       	call   ffffffff80218890 <__RME_Putchar>
        Div/=10;
ffffffff8020cf4a:	48 89 d8             	mov    %rbx,%rax
ffffffff8020cf4d:	49 f7 e4             	mul    %r12
ffffffff8020cf50:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020cf53:	48 c1 eb 03          	shr    $0x3,%rbx
    while(Count>0)
ffffffff8020cf57:	4d 85 f6             	test   %r14,%r14
ffffffff8020cf5a:	75 d4                	jne    ffffffff8020cf30 <RME_Int_Print+0x70>
}
ffffffff8020cf5c:	5b                   	pop    %rbx
ffffffff8020cf5d:	4c 89 e8             	mov    %r13,%rax
ffffffff8020cf60:	5d                   	pop    %rbp
ffffffff8020cf61:	41 5c                	pop    %r12
ffffffff8020cf63:	41 5d                	pop    %r13
ffffffff8020cf65:	41 5e                	pop    %r14
ffffffff8020cf67:	c3                   	ret    
ffffffff8020cf68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020cf6f:	00 
        __RME_Putchar('-');
ffffffff8020cf70:	bf 2d 00 00 00       	mov    $0x2d,%edi
        Abs=-Int;
ffffffff8020cf75:	48 f7 dd             	neg    %rbp
        Num=1;
ffffffff8020cf78:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        __RME_Putchar('-');
ffffffff8020cf7e:	e8 0d b9 00 00       	call   ffffffff80218890 <__RME_Putchar>
        Num=1;
ffffffff8020cf83:	e9 5c ff ff ff       	jmp    ffffffff8020cee4 <RME_Int_Print+0x24>
ffffffff8020cf88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020cf8f:	00 
        return 1;
ffffffff8020cf90:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        __RME_Putchar('0');
ffffffff8020cf96:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020cf9b:	e8 f0 b8 00 00       	call   ffffffff80218890 <__RME_Putchar>
}
ffffffff8020cfa0:	5b                   	pop    %rbx
ffffffff8020cfa1:	4c 89 e8             	mov    %r13,%rax
ffffffff8020cfa4:	5d                   	pop    %rbp
ffffffff8020cfa5:	41 5c                	pop    %r12
ffffffff8020cfa7:	41 5d                	pop    %r13
ffffffff8020cfa9:	41 5e                	pop    %r14
ffffffff8020cfab:	c3                   	ret    
ffffffff8020cfac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020cfb0 <RME_Hex_Print>:
{
ffffffff8020cfb0:	f3 0f 1e fa          	endbr64 
ffffffff8020cfb4:	41 54                	push   %r12
ffffffff8020cfb6:	55                   	push   %rbp
ffffffff8020cfb7:	53                   	push   %rbx
    if(Uint==0U)
ffffffff8020cfb8:	48 85 ff             	test   %rdi,%rdi
ffffffff8020cfbb:	0f 84 87 00 00 00    	je     ffffffff8020d048 <RME_Hex_Print+0x98>
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020cfc1:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020cfc4:	48 89 fd             	mov    %rdi,%rbp
ffffffff8020cfc7:	48 89 f8             	mov    %rdi,%rax
ffffffff8020cfca:	41 bc 10 00 00 00    	mov    $0x10,%r12d
ffffffff8020cfd0:	48 c1 ea 3c          	shr    $0x3c,%rdx
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020cfd4:	bb 10 00 00 00       	mov    $0x10,%ebx
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020cfd9:	75 42                	jne    ffffffff8020d01d <RME_Hex_Print+0x6d>
ffffffff8020cfdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        Iter<<=4;
ffffffff8020cfe0:	48 c1 e0 04          	shl    $0x4,%rax
        Count++;
ffffffff8020cfe4:	48 83 c2 01          	add    $0x1,%rdx
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020cfe8:	48 89 c6             	mov    %rax,%rsi
ffffffff8020cfeb:	48 c1 ee 3c          	shr    $0x3c,%rsi
ffffffff8020cfef:	74 ef                	je     ffffffff8020cfe0 <RME_Hex_Print+0x30>
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020cff1:	bb 10 00 00 00       	mov    $0x10,%ebx
ffffffff8020cff6:	48 29 d3             	sub    %rdx,%rbx
    return (rme_cnt_t)Num;
ffffffff8020cff9:	49 89 dc             	mov    %rbx,%r12
    while(Count>0U)
ffffffff8020cffc:	75 1f                	jne    ffffffff8020d01d <RME_Hex_Print+0x6d>
}
ffffffff8020cffe:	4c 89 e0             	mov    %r12,%rax
ffffffff8020d001:	5b                   	pop    %rbx
ffffffff8020d002:	5d                   	pop    %rbp
ffffffff8020d003:	41 5c                	pop    %r12
ffffffff8020d005:	c3                   	ret    
ffffffff8020d006:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020d00d:	00 00 00 
            __RME_Putchar((rme_s8_t)Iter+'0');
ffffffff8020d010:	8d 78 30             	lea    0x30(%rax),%edi
ffffffff8020d013:	e8 78 b8 00 00       	call   ffffffff80218890 <__RME_Putchar>
    while(Count>0U)
ffffffff8020d018:	48 85 db             	test   %rbx,%rbx
ffffffff8020d01b:	74 e1                	je     ffffffff8020cffe <RME_Hex_Print+0x4e>
        Count--;
ffffffff8020d01d:	48 83 eb 01          	sub    $0x1,%rbx
        Iter=(Uint>>(Count<<2U))&0x0FU;
ffffffff8020d021:	48 89 e8             	mov    %rbp,%rax
ffffffff8020d024:	8d 0c 9d 00 00 00 00 	lea    0x0(,%rbx,4),%ecx
ffffffff8020d02b:	48 d3 e8             	shr    %cl,%rax
ffffffff8020d02e:	83 e0 0f             	and    $0xf,%eax
        if(Iter<10U)
ffffffff8020d031:	48 83 f8 09          	cmp    $0x9,%rax
ffffffff8020d035:	76 d9                	jbe    ffffffff8020d010 <RME_Hex_Print+0x60>
            __RME_Putchar((rme_s8_t)Iter+'A'-10);
ffffffff8020d037:	8d 78 37             	lea    0x37(%rax),%edi
ffffffff8020d03a:	e8 51 b8 00 00       	call   ffffffff80218890 <__RME_Putchar>
ffffffff8020d03f:	eb d7                	jmp    ffffffff8020d018 <RME_Hex_Print+0x68>
ffffffff8020d041:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        return 1;
ffffffff8020d048:	41 bc 01 00 00 00    	mov    $0x1,%r12d
        __RME_Putchar('0');
ffffffff8020d04e:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020d053:	e8 38 b8 00 00       	call   ffffffff80218890 <__RME_Putchar>
}
ffffffff8020d058:	4c 89 e0             	mov    %r12,%rax
ffffffff8020d05b:	5b                   	pop    %rbx
ffffffff8020d05c:	5d                   	pop    %rbp
ffffffff8020d05d:	41 5c                	pop    %r12
ffffffff8020d05f:	c3                   	ret    

ffffffff8020d060 <RME_Str_Print>:
{
ffffffff8020d060:	f3 0f 1e fa          	endbr64 
ffffffff8020d064:	55                   	push   %rbp
ffffffff8020d065:	48 89 fd             	mov    %rdi,%rbp
ffffffff8020d068:	53                   	push   %rbx
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020d069:	31 db                	xor    %ebx,%ebx
{
ffffffff8020d06b:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d06f:	eb 19                	jmp    ffffffff8020d08a <RME_Str_Print+0x2a>
ffffffff8020d071:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count]);
ffffffff8020d078:	e8 13 b8 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020d07d:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020d081:	48 81 fb ff 00 00 00 	cmp    $0xff,%rbx
ffffffff8020d088:	74 16                	je     ffffffff8020d0a0 <RME_Str_Print+0x40>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020d08a:	0f be 7c 1d 00       	movsbl 0x0(%rbp,%rbx,1),%edi
ffffffff8020d08f:	40 84 ff             	test   %dil,%dil
ffffffff8020d092:	75 e4                	jne    ffffffff8020d078 <RME_Str_Print+0x18>
}
ffffffff8020d094:	48 83 c4 08          	add    $0x8,%rsp
    return (rme_cnt_t)Count;
ffffffff8020d098:	48 89 d8             	mov    %rbx,%rax
}
ffffffff8020d09b:	5b                   	pop    %rbx
ffffffff8020d09c:	5d                   	pop    %rbp
ffffffff8020d09d:	c3                   	ret    
ffffffff8020d09e:	66 90                	xchg   %ax,%ax
ffffffff8020d0a0:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d0a4:	b8 ff 00 00 00       	mov    $0xff,%eax
ffffffff8020d0a9:	5b                   	pop    %rbx
ffffffff8020d0aa:	5d                   	pop    %rbp
ffffffff8020d0ab:	c3                   	ret    
ffffffff8020d0ac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020d0b0 <RME_Log>:
{
ffffffff8020d0b0:	f3 0f 1e fa          	endbr64 
ffffffff8020d0b4:	41 56                	push   %r14
ffffffff8020d0b6:	49 89 fe             	mov    %rdi,%r14
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020d0b9:	bf 0d 00 00 00       	mov    $0xd,%edi
{
ffffffff8020d0be:	41 55                	push   %r13
ffffffff8020d0c0:	49 89 d5             	mov    %rdx,%r13
ffffffff8020d0c3:	41 54                	push   %r12
ffffffff8020d0c5:	49 89 cc             	mov    %rcx,%r12
ffffffff8020d0c8:	55                   	push   %rbp
ffffffff8020d0c9:	48 89 f5             	mov    %rsi,%rbp
ffffffff8020d0cc:	53                   	push   %rbx
ffffffff8020d0cd:	48 c7 c3 b1 d6 21 80 	mov    $0xffffffff8021d6b1,%rbx
ffffffff8020d0d4:	0f 1f 40 00          	nopl   0x0(%rax)
        __RME_Putchar(String[Count]);
ffffffff8020d0d8:	e8 b3 b7 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020d0dd:	48 81 fb af d7 21 80 	cmp    $0xffffffff8021d7af,%rbx
ffffffff8020d0e4:	74 0c                	je     ffffffff8020d0f2 <RME_Log+0x42>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020d0e6:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020d0e9:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020d0ed:	40 84 ff             	test   %dil,%dil
ffffffff8020d0f0:	75 e6                	jne    ffffffff8020d0d8 <RME_Log+0x28>
ffffffff8020d0f2:	49 8d 9e ff 00 00 00 	lea    0xff(%r14),%rbx
ffffffff8020d0f9:	eb 13                	jmp    ffffffff8020d10e <RME_Log+0x5e>
ffffffff8020d0fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar(String[Count]);
ffffffff8020d100:	e8 8b b7 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020d105:	49 83 c6 01          	add    $0x1,%r14
ffffffff8020d109:	49 39 de             	cmp    %rbx,%r14
ffffffff8020d10c:	74 09                	je     ffffffff8020d117 <RME_Log+0x67>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020d10e:	41 0f be 3e          	movsbl (%r14),%edi
ffffffff8020d112:	40 84 ff             	test   %dil,%dil
ffffffff8020d115:	75 e9                	jne    ffffffff8020d100 <RME_Log+0x50>
ffffffff8020d117:	48 c7 c3 98 d7 21 80 	mov    $0xffffffff8021d798,%rbx
ffffffff8020d11e:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8020d123:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar(String[Count]);
ffffffff8020d128:	e8 63 b7 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020d12d:	48 81 fb 96 d8 21 80 	cmp    $0xffffffff8021d896,%rbx
ffffffff8020d134:	74 0c                	je     ffffffff8020d142 <RME_Log+0x92>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020d136:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020d139:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020d13d:	40 84 ff             	test   %dil,%dil
ffffffff8020d140:	75 e6                	jne    ffffffff8020d128 <RME_Log+0x78>
    RME_DBG_I(Line); \
ffffffff8020d142:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020d145:	48 c7 c3 a1 d7 21 80 	mov    $0xffffffff8021d7a1,%rbx
ffffffff8020d14c:	48 c7 c5 9f d8 21 80 	mov    $0xffffffff8021d89f,%rbp
ffffffff8020d153:	e8 68 fd ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
ffffffff8020d158:	49 89 de             	mov    %rbx,%r14
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020d15b:	bf 0d 00 00 00       	mov    $0xd,%edi
        __RME_Putchar(String[Count]);
ffffffff8020d160:	e8 2b b7 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020d165:	49 81 fe 9f d8 21 80 	cmp    $0xffffffff8021d89f,%r14
ffffffff8020d16c:	74 0d                	je     ffffffff8020d17b <RME_Log+0xcb>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020d16e:	41 0f be 3e          	movsbl (%r14),%edi
ffffffff8020d172:	49 83 c6 01          	add    $0x1,%r14
ffffffff8020d176:	40 84 ff             	test   %dil,%dil
ffffffff8020d179:	75 e5                	jne    ffffffff8020d160 <RME_Log+0xb0>
ffffffff8020d17b:	4d 8d b5 ff 00 00 00 	lea    0xff(%r13),%r14
ffffffff8020d182:	eb 12                	jmp    ffffffff8020d196 <RME_Log+0xe6>
ffffffff8020d184:	0f 1f 40 00          	nopl   0x0(%rax)
        __RME_Putchar(String[Count]);
ffffffff8020d188:	e8 03 b7 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020d18d:	49 83 c5 01          	add    $0x1,%r13
ffffffff8020d191:	4d 39 ee             	cmp    %r13,%r14
ffffffff8020d194:	74 0a                	je     ffffffff8020d1a0 <RME_Log+0xf0>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020d196:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
ffffffff8020d19b:	40 84 ff             	test   %dil,%dil
ffffffff8020d19e:	75 e8                	jne    ffffffff8020d188 <RME_Log+0xd8>
ffffffff8020d1a0:	49 c7 c6 a4 d7 21 80 	mov    $0xffffffff8021d7a4,%r14
ffffffff8020d1a7:	49 c7 c5 a2 d8 21 80 	mov    $0xffffffff8021d8a2,%r13
ffffffff8020d1ae:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8020d1b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar(String[Count]);
ffffffff8020d1b8:	e8 d3 b6 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020d1bd:	4d 39 f5             	cmp    %r14,%r13
ffffffff8020d1c0:	74 0d                	je     ffffffff8020d1cf <RME_Log+0x11f>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020d1c2:	41 0f be 3e          	movsbl (%r14),%edi
ffffffff8020d1c6:	49 83 c6 01          	add    $0x1,%r14
ffffffff8020d1ca:	40 84 ff             	test   %dil,%dil
ffffffff8020d1cd:	75 e9                	jne    ffffffff8020d1b8 <RME_Log+0x108>
ffffffff8020d1cf:	4d 8d ac 24 ff 00 00 	lea    0xff(%r12),%r13
ffffffff8020d1d6:	00 
ffffffff8020d1d7:	eb 15                	jmp    ffffffff8020d1ee <RME_Log+0x13e>
ffffffff8020d1d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count]);
ffffffff8020d1e0:	e8 ab b6 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020d1e5:	49 83 c4 01          	add    $0x1,%r12
ffffffff8020d1e9:	4d 39 ec             	cmp    %r13,%r12
ffffffff8020d1ec:	74 0a                	je     ffffffff8020d1f8 <RME_Log+0x148>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020d1ee:	41 0f be 3c 24       	movsbl (%r12),%edi
ffffffff8020d1f3:	40 84 ff             	test   %dil,%dil
ffffffff8020d1f6:	75 e8                	jne    ffffffff8020d1e0 <RME_Log+0x130>
ffffffff8020d1f8:	bf 0d 00 00 00       	mov    $0xd,%edi
ffffffff8020d1fd:	0f 1f 00             	nopl   (%rax)
        __RME_Putchar(String[Count]);
ffffffff8020d200:	e8 8b b6 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020d205:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020d208:	74 0c                	je     ffffffff8020d216 <RME_Log+0x166>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020d20a:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020d20d:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020d211:	40 84 ff             	test   %dil,%dil
ffffffff8020d214:	75 ea                	jne    ffffffff8020d200 <RME_Log+0x150>
}
ffffffff8020d216:	5b                   	pop    %rbx
ffffffff8020d217:	5d                   	pop    %rbp
ffffffff8020d218:	41 5c                	pop    %r12
ffffffff8020d21a:	41 5d                	pop    %r13
ffffffff8020d21c:	41 5e                	pop    %r14
ffffffff8020d21e:	c3                   	ret    
ffffffff8020d21f:	90                   	nop

ffffffff8020d220 <_RME_MSB_Generic>:
{
ffffffff8020d220:	f3 0f 1e fa          	endbr64 
    if(Value>=RME_POW2(32U))
ffffffff8020d224:	48 89 f8             	mov    %rdi,%rax
ffffffff8020d227:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d22b:	74 43                	je     ffffffff8020d270 <_RME_MSB_Generic+0x50>
        if(Value>=RME_POW2(48U))
ffffffff8020d22d:	48 89 f8             	mov    %rdi,%rax
ffffffff8020d230:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020d234:	0f 84 96 00 00 00    	je     ffffffff8020d2d0 <_RME_MSB_Generic+0xb0>
            if(Value>=RME_POW2(56U))
ffffffff8020d23a:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffffff,%rax
ffffffff8020d241:	ff ff 00 
ffffffff8020d244:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020d247:	19 c9                	sbb    %ecx,%ecx
ffffffff8020d249:	83 e1 08             	and    $0x8,%ecx
ffffffff8020d24c:	83 c1 30             	add    $0x30,%ecx
ffffffff8020d24f:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020d252:	48 19 d2             	sbb    %rdx,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020d255:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020d258:	0f b6 87 e0 d9 21 80 	movzbl -0x7fde2620(%rdi),%eax
            if(Value>=RME_POW2(56U))
ffffffff8020d25f:	83 e2 08             	and    $0x8,%edx
ffffffff8020d262:	48 83 c2 30          	add    $0x30,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020d266:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020d269:	c3                   	ret    
ffffffff8020d26a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if(Value>=RME_POW2(16U))
ffffffff8020d270:	48 81 ff ff ff 00 00 	cmp    $0xffff,%rdi
ffffffff8020d277:	77 27                	ja     ffffffff8020d2a0 <_RME_MSB_Generic+0x80>
            if(Value>=RME_POW2(8U))
ffffffff8020d279:	31 d2                	xor    %edx,%edx
ffffffff8020d27b:	48 81 ff ff 00 00 00 	cmp    $0xff,%rdi
ffffffff8020d282:	0f 97 c2             	seta   %dl
ffffffff8020d285:	48 c1 e2 03          	shl    $0x3,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020d289:	89 d1                	mov    %edx,%ecx
ffffffff8020d28b:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020d28e:	0f b6 87 e0 d9 21 80 	movzbl -0x7fde2620(%rdi),%eax
ffffffff8020d295:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020d298:	c3                   	ret    
ffffffff8020d299:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            if(Value>=RME_POW2(24U))
ffffffff8020d2a0:	48 81 ff 00 00 00 01 	cmp    $0x1000000,%rdi
ffffffff8020d2a7:	19 c9                	sbb    %ecx,%ecx
ffffffff8020d2a9:	83 e1 f8             	and    $0xfffffff8,%ecx
ffffffff8020d2ac:	83 c1 18             	add    $0x18,%ecx
ffffffff8020d2af:	48 81 ff 00 00 00 01 	cmp    $0x1000000,%rdi
ffffffff8020d2b6:	48 19 d2             	sbb    %rdx,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020d2b9:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020d2bc:	0f b6 87 e0 d9 21 80 	movzbl -0x7fde2620(%rdi),%eax
            if(Value>=RME_POW2(24U))
ffffffff8020d2c3:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
ffffffff8020d2c7:	48 83 c2 18          	add    $0x18,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020d2cb:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020d2ce:	c3                   	ret    
ffffffff8020d2cf:	90                   	nop
            if(Value>=RME_POW2(40U))
ffffffff8020d2d0:	48 b8 ff ff ff ff ff 	movabs $0xffffffffff,%rax
ffffffff8020d2d7:	00 00 00 
ffffffff8020d2da:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020d2dd:	19 c9                	sbb    %ecx,%ecx
ffffffff8020d2df:	83 e1 08             	and    $0x8,%ecx
ffffffff8020d2e2:	83 c1 20             	add    $0x20,%ecx
ffffffff8020d2e5:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020d2e8:	48 19 d2             	sbb    %rdx,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020d2eb:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020d2ee:	0f b6 87 e0 d9 21 80 	movzbl -0x7fde2620(%rdi),%eax
            if(Value>=RME_POW2(40U))
ffffffff8020d2f5:	83 e2 08             	and    $0x8,%edx
ffffffff8020d2f8:	48 83 c2 20          	add    $0x20,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020d2fc:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020d2ff:	c3                   	ret    

ffffffff8020d300 <_RME_LSB_Generic>:
{
ffffffff8020d300:	f3 0f 1e fa          	endbr64 
    if((Value<<32U)==0U)
ffffffff8020d304:	48 89 f8             	mov    %rdi,%rax
ffffffff8020d307:	48 c1 e0 20          	shl    $0x20,%rax
        if((Value<<16U)==0U)
ffffffff8020d30b:	48 89 f8             	mov    %rdi,%rax
    if((Value<<32U)==0U)
ffffffff8020d30e:	75 30                	jne    ffffffff8020d340 <_RME_LSB_Generic+0x40>
        if((Value<<16U)==0U)
ffffffff8020d310:	48 c1 e0 10          	shl    $0x10,%rax
            if((Value<<8U)==0U)
ffffffff8020d314:	48 89 f8             	mov    %rdi,%rax
        if((Value<<16U)==0U)
ffffffff8020d317:	75 77                	jne    ffffffff8020d390 <_RME_LSB_Generic+0x90>
            if((Value<<8U)==0U)
ffffffff8020d319:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8020d31d:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020d321:	19 c9                	sbb    %ecx,%ecx
ffffffff8020d323:	83 e1 08             	and    $0x8,%ecx
ffffffff8020d326:	83 c1 30             	add    $0x30,%ecx
ffffffff8020d329:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020d32d:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020d330:	83 e2 08             	and    $0x8,%edx
ffffffff8020d333:	48 83 c2 30          	add    $0x30,%rdx
ffffffff8020d337:	eb 1f                	jmp    ffffffff8020d358 <_RME_LSB_Generic+0x58>
ffffffff8020d339:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if((Value<<48U)==0U)
ffffffff8020d340:	48 c1 e0 30          	shl    $0x30,%rax
            if((Value<<40U)==0U)
ffffffff8020d344:	48 89 f8             	mov    %rdi,%rax
        if((Value<<48U)==0U)
ffffffff8020d347:	74 27                	je     ffffffff8020d370 <_RME_LSB_Generic+0x70>
            if((Value<<56U)==0U)
ffffffff8020d349:	31 d2                	xor    %edx,%edx
ffffffff8020d34b:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff8020d34f:	0f 94 c2             	sete   %dl
ffffffff8020d352:	48 c1 e2 03          	shl    $0x3,%rdx
    return Table[(rme_u8_t)(Value>>Bit)]+Bit;
ffffffff8020d356:	89 d1                	mov    %edx,%ecx
ffffffff8020d358:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020d35b:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff8020d35f:	0f b6 87 e0 d8 21 80 	movzbl -0x7fde2720(%rdi),%eax
ffffffff8020d366:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020d369:	c3                   	ret    
ffffffff8020d36a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            if((Value<<40U)==0U)
ffffffff8020d370:	48 c1 e0 28          	shl    $0x28,%rax
ffffffff8020d374:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020d378:	19 c9                	sbb    %ecx,%ecx
ffffffff8020d37a:	83 e1 08             	and    $0x8,%ecx
ffffffff8020d37d:	83 c1 10             	add    $0x10,%ecx
ffffffff8020d380:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020d384:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020d387:	83 e2 08             	and    $0x8,%edx
ffffffff8020d38a:	48 83 c2 10          	add    $0x10,%rdx
ffffffff8020d38e:	eb c8                	jmp    ffffffff8020d358 <_RME_LSB_Generic+0x58>
            if((Value<<24U)==0U)
ffffffff8020d390:	48 c1 e0 18          	shl    $0x18,%rax
ffffffff8020d394:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020d398:	19 c9                	sbb    %ecx,%ecx
ffffffff8020d39a:	83 e1 08             	and    $0x8,%ecx
ffffffff8020d39d:	83 c1 20             	add    $0x20,%ecx
ffffffff8020d3a0:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020d3a4:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020d3a7:	83 e2 08             	and    $0x8,%edx
ffffffff8020d3aa:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8020d3ae:	eb a8                	jmp    ffffffff8020d358 <_RME_LSB_Generic+0x58>

ffffffff8020d3b0 <_RME_Comp_Swap_Single>:
{
ffffffff8020d3b0:	f3 0f 1e fa          	endbr64 
    if(*Ptr==Old)
ffffffff8020d3b4:	48 8b 0f             	mov    (%rdi),%rcx
    return 0U;
ffffffff8020d3b7:	31 c0                	xor    %eax,%eax
    if(*Ptr==Old)
ffffffff8020d3b9:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020d3bc:	74 02                	je     ffffffff8020d3c0 <_RME_Comp_Swap_Single+0x10>
}
ffffffff8020d3be:	c3                   	ret    
ffffffff8020d3bf:	90                   	nop
        *Ptr=New;
ffffffff8020d3c0:	48 89 17             	mov    %rdx,(%rdi)
        return 1U;
ffffffff8020d3c3:	b8 01 00 00 00       	mov    $0x1,%eax
}
ffffffff8020d3c8:	c3                   	ret    
ffffffff8020d3c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8020d3d0 <_RME_Fetch_Add_Single>:
{
ffffffff8020d3d0:	f3 0f 1e fa          	endbr64 
    Old=(rme_cnt_t)(*Ptr);
ffffffff8020d3d4:	48 8b 07             	mov    (%rdi),%rax
    *Ptr=(rme_ptr_t)(Old+Addend);
ffffffff8020d3d7:	48 01 c6             	add    %rax,%rsi
ffffffff8020d3da:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020d3dd:	c3                   	ret    
ffffffff8020d3de:	66 90                	xchg   %ax,%ax

ffffffff8020d3e0 <_RME_Fetch_And_Single>:
{
ffffffff8020d3e0:	f3 0f 1e fa          	endbr64 
    Old=*Ptr;
ffffffff8020d3e4:	48 8b 07             	mov    (%rdi),%rax
    *Ptr=Old&Operand;
ffffffff8020d3e7:	48 21 c6             	and    %rax,%rsi
ffffffff8020d3ea:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020d3ed:	c3                   	ret    
ffffffff8020d3ee:	66 90                	xchg   %ax,%ax

ffffffff8020d3f0 <_RME_List_Crt>:
{
ffffffff8020d3f0:	f3 0f 1e fa          	endbr64 
    Head->Prev=Head;
ffffffff8020d3f4:	48 89 7f 08          	mov    %rdi,0x8(%rdi)
    Head->Next=Head;
ffffffff8020d3f8:	48 89 3f             	mov    %rdi,(%rdi)
}
ffffffff8020d3fb:	c3                   	ret    
ffffffff8020d3fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020d400 <_RME_List_Del>:
{
ffffffff8020d400:	f3 0f 1e fa          	endbr64 
    Next->Prev=Prev;
ffffffff8020d404:	48 89 7e 08          	mov    %rdi,0x8(%rsi)
    Prev->Next=Next;
ffffffff8020d408:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020d40b:	c3                   	ret    
ffffffff8020d40c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020d410 <_RME_List_Ins>:
{
ffffffff8020d410:	f3 0f 1e fa          	endbr64 
    Next->Prev=New;
ffffffff8020d414:	48 89 7a 08          	mov    %rdi,0x8(%rdx)
    New->Next=Next;
ffffffff8020d418:	48 89 17             	mov    %rdx,(%rdi)
    New->Prev=Prev;
ffffffff8020d41b:	48 89 77 08          	mov    %rsi,0x8(%rdi)
    Prev->Next=New;
ffffffff8020d41f:	48 89 3e             	mov    %rdi,(%rsi)
}
ffffffff8020d422:	c3                   	ret    
ffffffff8020d423:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020d42a:	00 00 00 00 
ffffffff8020d42e:	66 90                	xchg   %ax,%ax

ffffffff8020d430 <_RME_Clear>:
{
ffffffff8020d430:	f3 0f 1e fa          	endbr64 
    for(Count=0U;Count<Size;Count++)
ffffffff8020d434:	48 85 f6             	test   %rsi,%rsi
ffffffff8020d437:	74 13                	je     ffffffff8020d44c <_RME_Clear+0x1c>
ffffffff8020d439:	48 01 fe             	add    %rdi,%rsi
ffffffff8020d43c:	0f 1f 40 00          	nopl   0x0(%rax)
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020d440:	c6 07 00             	movb   $0x0,(%rdi)
    for(Count=0U;Count<Size;Count++)
ffffffff8020d443:	48 83 c7 01          	add    $0x1,%rdi
ffffffff8020d447:	48 39 f7             	cmp    %rsi,%rdi
ffffffff8020d44a:	75 f4                	jne    ffffffff8020d440 <_RME_Clear+0x10>
}
ffffffff8020d44c:	c3                   	ret    
ffffffff8020d44d:	0f 1f 00             	nopl   (%rax)

ffffffff8020d450 <_RME_Memcmp>:
{
ffffffff8020d450:	f3 0f 1e fa          	endbr64 
    for(Count=0U;Count<Num;Count++)
ffffffff8020d454:	31 c0                	xor    %eax,%eax
ffffffff8020d456:	48 85 d2             	test   %rdx,%rdx
ffffffff8020d459:	75 0e                	jne    ffffffff8020d469 <_RME_Memcmp+0x19>
ffffffff8020d45b:	eb 26                	jmp    ffffffff8020d483 <_RME_Memcmp+0x33>
ffffffff8020d45d:	0f 1f 00             	nopl   (%rax)
ffffffff8020d460:	48 83 c0 01          	add    $0x1,%rax
ffffffff8020d464:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d467:	74 17                	je     ffffffff8020d480 <_RME_Memcmp+0x30>
        if(Dst[Count]!=Src[Count])
ffffffff8020d469:	0f b6 0c 07          	movzbl (%rdi,%rax,1),%ecx
ffffffff8020d46d:	44 0f be 04 06       	movsbl (%rsi,%rax,1),%r8d
ffffffff8020d472:	44 38 c1             	cmp    %r8b,%cl
ffffffff8020d475:	74 e9                	je     ffffffff8020d460 <_RME_Memcmp+0x10>
            return Dst[Count]-Src[Count];
ffffffff8020d477:	0f be c1             	movsbl %cl,%eax
ffffffff8020d47a:	44 29 c0             	sub    %r8d,%eax
ffffffff8020d47d:	48 98                	cltq   
ffffffff8020d47f:	c3                   	ret    
    return 0;
ffffffff8020d480:	31 c0                	xor    %eax,%eax
ffffffff8020d482:	c3                   	ret    
}
ffffffff8020d483:	c3                   	ret    
ffffffff8020d484:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020d48b:	00 00 00 00 
ffffffff8020d48f:	90                   	nop

ffffffff8020d490 <_RME_Memcpy>:
{
ffffffff8020d490:	f3 0f 1e fa          	endbr64 
    for(Count=0U;Count<Num;Count++)
ffffffff8020d494:	48 85 d2             	test   %rdx,%rdx
ffffffff8020d497:	74 1a                	je     ffffffff8020d4b3 <_RME_Memcpy+0x23>
ffffffff8020d499:	48 01 f2             	add    %rsi,%rdx
ffffffff8020d49c:	0f 1f 40 00          	nopl   0x0(%rax)
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020d4a0:	0f b6 06             	movzbl (%rsi),%eax
    for(Count=0U;Count<Num;Count++)
ffffffff8020d4a3:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8020d4a7:	48 83 c7 01          	add    $0x1,%rdi
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020d4ab:	88 47 ff             	mov    %al,-0x1(%rdi)
    for(Count=0U;Count<Num;Count++)
ffffffff8020d4ae:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8020d4b1:	75 ed                	jne    ffffffff8020d4a0 <_RME_Memcpy+0x10>
}
ffffffff8020d4b3:	c3                   	ret    
ffffffff8020d4b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020d4bb:	00 00 00 00 
ffffffff8020d4bf:	90                   	nop

ffffffff8020d4c0 <_RME_Diff>:
{
ffffffff8020d4c0:	f3 0f 1e fa          	endbr64 
    Diff1=Num1-Num2;
ffffffff8020d4c4:	48 89 f8             	mov    %rdi,%rax
ffffffff8020d4c7:	48 29 f0             	sub    %rsi,%rax
    Diff2=Num2-Num1;
ffffffff8020d4ca:	48 29 fe             	sub    %rdi,%rsi
}
ffffffff8020d4cd:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020d4d0:	48 0f 47 c6          	cmova  %rsi,%rax
ffffffff8020d4d4:	c3                   	ret    
ffffffff8020d4d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020d4dc:	00 00 00 00 

ffffffff8020d4e0 <RME_Kmain>:
{
ffffffff8020d4e0:	f3 0f 1e fa          	endbr64 
ffffffff8020d4e4:	48 83 ec 08          	sub    $0x8,%rsp
	return Ret;
}

static INLINE void __RME_Int_Disable()
{
	__asm__ __volatile__ (
ffffffff8020d4e8:	fa                   	cli    
    __RME_Lowlvl_Init();
ffffffff8020d4e9:	e8 52 b6 00 00       	call   ffffffff80218b40 <__RME_Lowlvl_Init>
    __RME_Pgt_Kom_Init();
ffffffff8020d4ee:	e8 cd be 00 00       	call   ffffffff802193c0 <__RME_Pgt_Kom_Init>
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020d4f3:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020d4fa:	80 ff ff 
ffffffff8020d4fd:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff8020d504:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020d50b:	00 
ffffffff8020d50c:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff8020d513:	00 
ffffffff8020d514:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8020d51b:	00 
    __RME_Boot();
ffffffff8020d51c:	e8 2f c8 00 00       	call   ffffffff80219d50 <__RME_Boot>
}
ffffffff8020d521:	31 c0                	xor    %eax,%eax
ffffffff8020d523:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d527:	c3                   	ret    
ffffffff8020d528:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020d52f:	00 

ffffffff8020d530 <_RME_Tim_Elapse>:
{
ffffffff8020d530:	f3 0f 1e fa          	endbr64 
ffffffff8020d534:	53                   	push   %rbx
ffffffff8020d535:	48 89 fb             	mov    %rdi,%rbx
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020d538:	e8 02 e3 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020d53d:	48 b9 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rcx
ffffffff8020d544:	ff ff 7f 
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020d547:	48 8b 50 08          	mov    0x8(%rax),%rdx
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020d54b:	48 8b 42 30          	mov    0x30(%rdx),%rax
ffffffff8020d54f:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020d552:	77 16                	ja     ffffffff8020d56a <_RME_Tim_Elapse+0x3a>
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020d554:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d557:	48 29 d9             	sub    %rbx,%rcx
ffffffff8020d55a:	48 39 d8             	cmp    %rbx,%rax
ffffffff8020d55d:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020d562:	48 0f 47 c1          	cmova  %rcx,%rax
ffffffff8020d566:	48 89 42 30          	mov    %rax,0x30(%rdx)
}
ffffffff8020d56a:	5b                   	pop    %rbx
ffffffff8020d56b:	c3                   	ret    
ffffffff8020d56c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020d570 <_RME_Tim_Future>:
{
ffffffff8020d570:	f3 0f 1e fa          	endbr64 
ffffffff8020d574:	48 83 ec 08          	sub    $0x8,%rsp
    return RME_CPU_LOCAL()->Thd_Cur->Sched.Slice;
ffffffff8020d578:	e8 c2 e2 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020d57d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020d581:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff8020d585:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d589:	c3                   	ret    
ffffffff8020d58a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020d590 <_RME_Pgt_Boot_Add>:
{
ffffffff8020d590:	f3 0f 1e fa          	endbr64 
ffffffff8020d594:	48 89 f0             	mov    %rsi,%rax
ffffffff8020d597:	49 89 f9             	mov    %rdi,%r9
ffffffff8020d59a:	48 89 d6             	mov    %rdx,%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020d59d:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
{
ffffffff8020d5a1:	48 89 ca             	mov    %rcx,%rdx
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020d5a4:	f6 c4 80             	test   $0x80,%ah
ffffffff8020d5a7:	0f 85 83 00 00 00    	jne    ffffffff8020d630 <_RME_Pgt_Boot_Add+0xa0>
ffffffff8020d5ad:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020d5b0:	0f 83 ca 00 00 00    	jae    ffffffff8020d680 <_RME_Pgt_Boot_Add+0xf0>
ffffffff8020d5b6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d5ba:	49 03 41 18          	add    0x18(%r9),%rax
ffffffff8020d5be:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d5c1:	48 8b 00             	mov    (%rax),%rax
ffffffff8020d5c4:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d5c7:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020d5cb:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020d5cf:	0f 84 bb 00 00 00    	je     ffffffff8020d690 <_RME_Pgt_Boot_Add+0x100>
ffffffff8020d5d5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020d5d9:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020d5dd:	0f 85 bd 00 00 00    	jne    ffffffff8020d6a0 <_RME_Pgt_Boot_Add+0x110>
    Szord=RME_PGT_SIZEORD(Pgt_Op->Order);
ffffffff8020d5e3:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020d5e7:	b9 40 00 00 00       	mov    $0x40,%ecx
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020d5ec:	49 89 d2             	mov    %rdx,%r10
    Szord=RME_PGT_SIZEORD(Pgt_Op->Order);
ffffffff8020d5ef:	4c 89 c8             	mov    %r9,%rax
ffffffff8020d5f2:	48 c1 e8 20          	shr    $0x20,%rax
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020d5f6:	29 c1                	sub    %eax,%ecx
ffffffff8020d5f8:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020d5ff:	48 d3 e8             	shr    %cl,%rax
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020d602:	44 89 c9             	mov    %r9d,%ecx
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020d605:	48 21 f0             	and    %rsi,%rax
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020d608:	49 d3 ea             	shr    %cl,%r10
ffffffff8020d60b:	4c 09 d0             	or     %r10,%rax
ffffffff8020d60e:	0f 85 9c 00 00 00    	jne    ffffffff8020d6b0 <_RME_Pgt_Boot_Add+0x120>
{
ffffffff8020d614:	48 83 ec 08          	sub    $0x8,%rsp
    if(__RME_Pgt_Page_Map(Pgt_Op,Paddr,Pos,Flag)!=0)
ffffffff8020d618:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020d61b:	e8 70 d9 00 00       	call   ffffffff8021af90 <__RME_Pgt_Page_Map>
        return RME_ERR_PGT_MAP;
ffffffff8020d620:	48 f7 d8             	neg    %rax
ffffffff8020d623:	48 19 c0             	sbb    %rax,%rax
}
ffffffff8020d626:	48 83 c4 08          	add    $0x8,%rsp
        return RME_ERR_PGT_MAP;
ffffffff8020d62a:	48 83 e0 9a          	and    $0xffffffffffffff9a,%rax
}
ffffffff8020d62e:	c3                   	ret    
ffffffff8020d62f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020d630:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d633:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020d637:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020d63a:	73 44                	jae    ffffffff8020d680 <_RME_Pgt_Boot_Add+0xf0>
ffffffff8020d63c:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020d640:	49 03 49 18          	add    0x18(%r9),%rcx
ffffffff8020d644:	48 8b 39             	mov    (%rcx),%rdi
ffffffff8020d647:	49 89 f9             	mov    %rdi,%r9
ffffffff8020d64a:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff8020d64e:	66 41 83 f9 02       	cmp    $0x2,%r9w
ffffffff8020d653:	74 3b                	je     ffffffff8020d690 <_RME_Pgt_Boot_Add+0x100>
ffffffff8020d655:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020d659:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020d65d:	75 41                	jne    ffffffff8020d6a0 <_RME_Pgt_Boot_Add+0x110>
ffffffff8020d65f:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff8020d663:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020d668:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020d66b:	73 13                	jae    ffffffff8020d680 <_RME_Pgt_Boot_Add+0xf0>
ffffffff8020d66d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d671:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020d675:	e9 44 ff ff ff       	jmp    ffffffff8020d5be <_RME_Pgt_Boot_Add+0x2e>
ffffffff8020d67a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020d680:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020d687:	c3                   	ret    
ffffffff8020d688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020d68f:	00 
ffffffff8020d690:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020d697:	c3                   	ret    
ffffffff8020d698:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020d69f:	00 
ffffffff8020d6a0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020d6a7:	c3                   	ret    
ffffffff8020d6a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020d6af:	00 
        return RME_ERR_PGT_ADDR;
ffffffff8020d6b0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
}
ffffffff8020d6b7:	c3                   	ret    
ffffffff8020d6b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020d6bf:	00 

ffffffff8020d6c0 <_RME_Pgt_Boot_Con>:
{
ffffffff8020d6c0:	f3 0f 1e fa          	endbr64 
ffffffff8020d6c4:	55                   	push   %rbp
ffffffff8020d6c5:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020d6c8:	53                   	push   %rbx
ffffffff8020d6c9:	48 89 f3             	mov    %rsi,%rbx
ffffffff8020d6cc:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d6cf:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d6d3:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020d6d7:	f6 c7 80             	test   $0x80,%bh
ffffffff8020d6da:	0f 85 00 01 00 00    	jne    ffffffff8020d7e0 <_RME_Pgt_Boot_Con+0x120>
ffffffff8020d6e0:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020d6e3:	0f 83 df 00 00 00    	jae    ffffffff8020d7c8 <_RME_Pgt_Boot_Con+0x108>
ffffffff8020d6e9:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020d6ed:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020d6f1:	48 01 fb             	add    %rdi,%rbx
ffffffff8020d6f4:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020d6f7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d6fa:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8020d6fe:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff8020d702:	0f 84 80 01 00 00    	je     ffffffff8020d888 <_RME_Pgt_Boot_Con+0x1c8>
ffffffff8020d708:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020d70c:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020d710:	0f 85 9a 01 00 00    	jne    ffffffff8020d8b0 <_RME_Pgt_Boot_Con+0x1f0>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020d716:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020d71c:	0f 85 16 01 00 00    	jne    ffffffff8020d838 <_RME_Pgt_Boot_Con+0x178>
ffffffff8020d722:	48 39 e9             	cmp    %rbp,%rcx
ffffffff8020d725:	0f 86 9d 00 00 00    	jbe    ffffffff8020d7c8 <_RME_Pgt_Boot_Con+0x108>
ffffffff8020d72b:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020d72f:	48 01 fd             	add    %rdi,%rbp
ffffffff8020d732:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020d736:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d739:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8020d73d:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff8020d741:	0f 84 41 01 00 00    	je     ffffffff8020d888 <_RME_Pgt_Boot_Con+0x1c8>
ffffffff8020d747:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020d74b:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020d74f:	0f 85 5b 01 00 00    	jne    ffffffff8020d8b0 <_RME_Pgt_Boot_Con+0x1f0>
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff8020d755:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff8020d759:	48 89 f0             	mov    %rsi,%rax
ffffffff8020d75c:	48 d3 e8             	shr    %cl,%rax
ffffffff8020d75f:	48 85 c0             	test   %rax,%rax
ffffffff8020d762:	0f 85 58 01 00 00    	jne    ffffffff8020d8c0 <_RME_Pgt_Boot_Con+0x200>
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff8020d768:	48 8b 45 28          	mov    0x28(%rbp),%rax
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff8020d76c:	48 c1 e9 20          	shr    $0x20,%rcx
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff8020d770:	89 c2                	mov    %eax,%edx
ffffffff8020d772:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d776:	48 01 d0             	add    %rdx,%rax
    if(Szord_Parent!=Order_Child)
ffffffff8020d779:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020d77c:	0f 85 3e 01 00 00    	jne    ffffffff8020d8c0 <_RME_Pgt_Boot_Con+0x200>
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff8020d782:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020d785:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020d788:	48 89 df             	mov    %rbx,%rdi
ffffffff8020d78b:	e8 d0 d8 00 00       	call   ffffffff8021b060 <__RME_Pgt_Pgdir_Map>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff8020d790:	8b 13                	mov    (%rbx),%edx
ffffffff8020d792:	85 d2                	test   %edx,%edx
ffffffff8020d794:	74 04                	je     ffffffff8020d79a <_RME_Pgt_Boot_Con+0xda>
ffffffff8020d796:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020d79a:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020d79f:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020d7a5:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff8020d7a8:	85 c0                	test   %eax,%eax
ffffffff8020d7aa:	0f 85 f0 00 00 00    	jne    ffffffff8020d8a0 <_RME_Pgt_Boot_Con+0x1e0>
ffffffff8020d7b0:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020d7b5:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    return 0;
ffffffff8020d7bb:	31 c0                	xor    %eax,%eax
}
ffffffff8020d7bd:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d7c1:	5b                   	pop    %rbx
ffffffff8020d7c2:	5d                   	pop    %rbp
ffffffff8020d7c3:	c3                   	ret    
ffffffff8020d7c4:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020d7c8:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d7cc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020d7d3:	5b                   	pop    %rbx
ffffffff8020d7d4:	5d                   	pop    %rbp
ffffffff8020d7d5:	c3                   	ret    
ffffffff8020d7d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020d7dd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d7e0:	48 89 da             	mov    %rbx,%rdx
ffffffff8020d7e3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d7e7:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020d7ea:	73 dc                	jae    ffffffff8020d7c8 <_RME_Pgt_Boot_Con+0x108>
ffffffff8020d7ec:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020d7f0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d7f4:	48 8d 04 3a          	lea    (%rdx,%rdi,1),%rax
ffffffff8020d7f8:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020d7fb:	49 89 d1             	mov    %rdx,%r9
ffffffff8020d7fe:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff8020d802:	66 41 83 f9 02       	cmp    $0x2,%r9w
ffffffff8020d807:	74 7f                	je     ffffffff8020d888 <_RME_Pgt_Boot_Con+0x1c8>
ffffffff8020d809:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d80d:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020d811:	0f 85 99 00 00 00    	jne    ffffffff8020d8b0 <_RME_Pgt_Boot_Con+0x1f0>
ffffffff8020d817:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020d81b:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020d821:	48 39 d3             	cmp    %rdx,%rbx
ffffffff8020d824:	73 a2                	jae    ffffffff8020d7c8 <_RME_Pgt_Boot_Con+0x108>
ffffffff8020d826:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020d82a:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8020d82e:	e9 c1 fe ff ff       	jmp    ffffffff8020d6f4 <_RME_Pgt_Boot_Con+0x34>
ffffffff8020d833:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020d838:	48 89 e8             	mov    %rbp,%rax
ffffffff8020d83b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020d83f:	48 39 c1             	cmp    %rax,%rcx
ffffffff8020d842:	76 84                	jbe    ffffffff8020d7c8 <_RME_Pgt_Boot_Con+0x108>
ffffffff8020d844:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d848:	48 01 f8             	add    %rdi,%rax
ffffffff8020d84b:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020d84e:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d851:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020d855:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020d859:	74 2d                	je     ffffffff8020d888 <_RME_Pgt_Boot_Con+0x1c8>
ffffffff8020d85b:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d85f:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020d863:	75 4b                	jne    ffffffff8020d8b0 <_RME_Pgt_Boot_Con+0x1f0>
ffffffff8020d865:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020d869:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff8020d86f:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020d872:	0f 83 50 ff ff ff    	jae    ffffffff8020d7c8 <_RME_Pgt_Boot_Con+0x108>
ffffffff8020d878:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020d87c:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff8020d880:	e9 ad fe ff ff       	jmp    ffffffff8020d732 <_RME_Pgt_Boot_Con+0x72>
ffffffff8020d885:	0f 1f 00             	nopl   (%rax)
}
ffffffff8020d888:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d88c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020d893:	5b                   	pop    %rbx
ffffffff8020d894:	5d                   	pop    %rbp
ffffffff8020d895:	c3                   	ret    
ffffffff8020d896:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020d89d:	00 00 00 
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020d8a0:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
ffffffff8020d8a4:	e9 07 ff ff ff       	jmp    ffffffff8020d7b0 <_RME_Pgt_Boot_Con+0xf0>
ffffffff8020d8a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
}
ffffffff8020d8b0:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d8b4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020d8bb:	5b                   	pop    %rbx
ffffffff8020d8bc:	5d                   	pop    %rbp
ffffffff8020d8bd:	c3                   	ret    
ffffffff8020d8be:	66 90                	xchg   %ax,%ax
        return RME_ERR_PGT_ADDR;
ffffffff8020d8c0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020d8c7:	e9 f1 fe ff ff       	jmp    ffffffff8020d7bd <_RME_Pgt_Boot_Con+0xfd>
ffffffff8020d8cc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020d8d0 <_RME_Kot_Init>:
{
ffffffff8020d8d0:	f3 0f 1e fa          	endbr64 
    if(Word<RME_KOT_WORD_NUM)
ffffffff8020d8d4:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020d8d8:	76 29                	jbe    ffffffff8020d903 <_RME_Kot_Init+0x33>
ffffffff8020d8da:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020d8e1:	80 ff ff 
ffffffff8020d8e4:	48 8d 14 f8          	lea    (%rax,%rdi,8),%rdx
ffffffff8020d8e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020d8ef:	00 
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020d8f0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff8020d8f7:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020d8fb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d8fe:	75 f0                	jne    ffffffff8020d8f0 <_RME_Kot_Init+0x20>
ffffffff8020d900:	31 c0                	xor    %eax,%eax
ffffffff8020d902:	c3                   	ret    
        return -1;
ffffffff8020d903:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8020d90a:	c3                   	ret    
ffffffff8020d90b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff8020d910 <_RME_Kot_Mark>:
{
ffffffff8020d910:	f3 0f 1e fa          	endbr64 
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff8020d914:	40 f6 c7 0f          	test   $0xf,%dil
ffffffff8020d918:	0f 85 66 01 00 00    	jne    ffffffff8020da84 <_RME_Kot_Mark+0x174>
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020d91e:	49 b9 00 00 a0 fe ff 	movabs $0x7ffffea00000,%r9
ffffffff8020d925:	7f 00 00 
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020d928:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
{
ffffffff8020d92f:	55                   	push   %rbp
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020d930:	48 ba ff ff 9f fe ff 	movabs $0x7ffffe9fffff,%rdx
ffffffff8020d937:	7f 00 00 
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020d93a:	49 01 f9             	add    %rdi,%r9
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020d93d:	48 01 d6             	add    %rdx,%rsi
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020d940:	49 89 c2             	mov    %rax,%r10
{
ffffffff8020d943:	53                   	push   %rbx
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020d944:	4c 89 c9             	mov    %r9,%rcx
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020d947:	48 01 fe             	add    %rdi,%rsi
    Start=Start>>RME_WORD_ORDER;
ffffffff8020d94a:	49 c1 e9 0a          	shr    $0xa,%r9
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020d94e:	48 bf 00 00 00 01 00 	movabs $0xffff800001000000,%rdi
ffffffff8020d955:	80 ff ff 
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020d958:	48 c1 e9 04          	shr    $0x4,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020d95c:	4a 8d 2c cd 00 00 00 	lea    0x0(,%r9,8),%rbp
ffffffff8020d963:	00 
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020d964:	49 d3 e2             	shl    %cl,%r10
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020d967:	48 89 f1             	mov    %rsi,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020d96a:	48 8d 5c 3d 00       	lea    0x0(%rbp,%rdi,1),%rbx
    End=End>>RME_WORD_ORDER;
ffffffff8020d96f:	48 c1 ee 0a          	shr    $0xa,%rsi
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020d973:	48 c1 e9 04          	shr    $0x4,%rcx
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020d977:	f7 d1                	not    %ecx
ffffffff8020d979:	48 d3 e8             	shr    %cl,%rax
ffffffff8020d97c:	49 89 c3             	mov    %rax,%r11
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020d97f:	48 8b 03             	mov    (%rbx),%rax
    if(Start==End)
ffffffff8020d982:	49 39 f1             	cmp    %rsi,%r9
ffffffff8020d985:	0f 84 a5 00 00 00    	je     ffffffff8020da30 <_RME_Kot_Mark+0x120>
        if((Old_Val&Mask_Begin)!=0U)
ffffffff8020d98b:	49 85 c2             	test   %rax,%r10
ffffffff8020d98e:	0f 85 8e 00 00 00    	jne    ffffffff8020da22 <_RME_Kot_Mark+0x112>
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020d994:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d997:	48 09 c2             	or     %rax,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020d99a:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff8020d99f:	0f 94 c2             	sete   %dl
ffffffff8020d9a2:	84 d2                	test   %dl,%dl
ffffffff8020d9a4:	74 7c                	je     ffffffff8020da22 <_RME_Kot_Mark+0x112>
        for(Count=Start+1U;Count<End;Count++)
ffffffff8020d9a6:	49 8d 49 01          	lea    0x1(%r9),%rcx
ffffffff8020d9aa:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020d9ad:	0f 86 9d 00 00 00    	jbe    ffffffff8020da50 <_RME_Kot_Mark+0x140>
ffffffff8020d9b3:	48 8d 54 3d 08       	lea    0x8(%rbp,%rdi,1),%rdx
ffffffff8020d9b8:	31 c0                	xor    %eax,%eax
ffffffff8020d9ba:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
ffffffff8020d9c1:	eb 20                	jmp    ffffffff8020d9e3 <_RME_Kot_Mark+0xd3>
ffffffff8020d9c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff8020d9c8:	f0 48 0f b1 3a       	lock cmpxchg %rdi,(%rdx)
ffffffff8020d9cd:	41 0f 94 c0          	sete   %r8b
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Count],
ffffffff8020d9d1:	45 84 c0             	test   %r8b,%r8b
ffffffff8020d9d4:	74 13                	je     ffffffff8020d9e9 <_RME_Kot_Mark+0xd9>
        for(Count=Start+1U;Count<End;Count++)
ffffffff8020d9d6:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8020d9da:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8020d9de:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020d9e1:	74 6d                	je     ffffffff8020da50 <_RME_Kot_Mark+0x140>
            if(Old_Val!=0U)
ffffffff8020d9e3:	48 83 3a 00          	cmpq   $0x0,(%rdx)
ffffffff8020d9e7:	74 df                	je     ffffffff8020d9c8 <_RME_Kot_Mark+0xb8>
            for(Count--;Count>Start;Count--)
ffffffff8020d9e9:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8020d9ed:	49 39 c9             	cmp    %rcx,%r9
ffffffff8020d9f0:	73 26                	jae    ffffffff8020da18 <_RME_Kot_Mark+0x108>
ffffffff8020d9f2:	48 ba 00 00 00 01 00 	movabs $0xffff800001000000,%rdx
ffffffff8020d9f9:	80 ff ff 
ffffffff8020d9fc:	48 8d 04 ca          	lea    (%rdx,%rcx,8),%rax
ffffffff8020da00:	48 01 ea             	add    %rbp,%rdx
ffffffff8020da03:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020da08:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            for(Count--;Count>Start;Count--)
ffffffff8020da0f:	48 83 e8 08          	sub    $0x8,%rax
ffffffff8020da13:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020da16:	75 f0                	jne    ffffffff8020da08 <_RME_Kot_Mark+0xf8>
            RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff8020da18:	49 f7 d2             	not    %r10
	__asm__ __volatile__("MOVQ %[Ptr],%[Old]; LOCK ANDQ %[Operand], %[Ptr]"
ffffffff8020da1b:	4c 8b 13             	mov    (%rbx),%r10
ffffffff8020da1e:	f0 4c 21 13          	lock and %r10,(%rbx)
            return RME_ERR_KOT_BMP;
ffffffff8020da22:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020da29:	eb 20                	jmp    ffffffff8020da4b <_RME_Kot_Mark+0x13b>
ffffffff8020da2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        if((Old_Val&(Mask_Begin&Mask_End))!=0U)
ffffffff8020da30:	4d 21 d3             	and    %r10,%r11
ffffffff8020da33:	49 85 c3             	test   %rax,%r11
ffffffff8020da36:	75 ea                	jne    ffffffff8020da22 <_RME_Kot_Mark+0x112>
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020da38:	49 09 c3             	or     %rax,%r11
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020da3b:	f0 4c 0f b1 1b       	lock cmpxchg %r11,(%rbx)
ffffffff8020da40:	41 0f 94 c3          	sete   %r11b
ffffffff8020da44:	41 80 fb 01          	cmp    $0x1,%r11b
ffffffff8020da48:	48 19 c0             	sbb    %rax,%rax
}
ffffffff8020da4b:	5b                   	pop    %rbx
ffffffff8020da4c:	5d                   	pop    %rbp
ffffffff8020da4d:	c3                   	ret    
ffffffff8020da4e:	66 90                	xchg   %ax,%ax
            Old_Val=RME_KOT_VA_BASE[End];
ffffffff8020da50:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020da57:	80 ff ff 
ffffffff8020da5a:	48 8d 14 f0          	lea    (%rax,%rsi,8),%rdx
ffffffff8020da5e:	48 8b 02             	mov    (%rdx),%rax
            if((Old_Val&Mask_End)!=0U)
ffffffff8020da61:	49 85 c3             	test   %rax,%r11
ffffffff8020da64:	0f 85 7f ff ff ff    	jne    ffffffff8020d9e9 <_RME_Kot_Mark+0xd9>
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[End],
ffffffff8020da6a:	49 09 c3             	or     %rax,%r11
ffffffff8020da6d:	f0 4c 0f b1 1a       	lock cmpxchg %r11,(%rdx)
ffffffff8020da72:	41 0f 94 c3          	sete   %r11b
ffffffff8020da76:	45 84 db             	test   %r11b,%r11b
ffffffff8020da79:	0f 84 6a ff ff ff    	je     ffffffff8020d9e9 <_RME_Kot_Mark+0xd9>
    return 0;
ffffffff8020da7f:	31 c0                	xor    %eax,%eax
}
ffffffff8020da81:	5b                   	pop    %rbx
ffffffff8020da82:	5d                   	pop    %rbp
ffffffff8020da83:	c3                   	ret    
        return RME_ERR_KOT_BMP;
ffffffff8020da84:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
}
ffffffff8020da88:	c3                   	ret    
ffffffff8020da89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8020da90 <_RME_Cpt_Crt>:
{
ffffffff8020da90:	41 55                	push   %r13
ffffffff8020da92:	41 54                	push   %r12
ffffffff8020da94:	55                   	push   %rbp
ffffffff8020da95:	53                   	push   %rbx
ffffffff8020da96:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020da99:	48 89 ca             	mov    %rcx,%rdx
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020da9c:	49 8d 49 ff          	lea    -0x1(%r9),%rcx
{
ffffffff8020daa0:	48 83 ec 08          	sub    $0x8,%rsp
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020daa4:	48 81 f9 ff 7f 00 00 	cmp    $0x7fff,%rcx
ffffffff8020daab:	0f 87 c7 01 00 00    	ja     ffffffff8020dc78 <_RME_Cpt_Crt+0x1e8>
ffffffff8020dab1:	48 89 f0             	mov    %rsi,%rax
ffffffff8020dab4:	4d 89 cc             	mov    %r9,%r12
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020dab7:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff8020dabb:	f6 c4 80             	test   $0x80,%ah
ffffffff8020dabe:	0f 84 9c 01 00 00    	je     ffffffff8020dc60 <_RME_Cpt_Crt+0x1d0>
ffffffff8020dac4:	48 89 c1             	mov    %rax,%rcx
ffffffff8020dac7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020dacb:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020dace:	0f 86 a4 01 00 00    	jbe    ffffffff8020dc78 <_RME_Cpt_Crt+0x1e8>
ffffffff8020dad4:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020dad8:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020dadc:	48 01 f9             	add    %rdi,%rcx
ffffffff8020dadf:	4c 8b 09             	mov    (%rcx),%r9
ffffffff8020dae2:	4d 89 ca             	mov    %r9,%r10
ffffffff8020dae5:	49 c1 ea 20          	shr    $0x20,%r10
ffffffff8020dae9:	66 41 83 fa 02       	cmp    $0x2,%r10w
ffffffff8020daee:	0f 84 ec 01 00 00    	je     ffffffff8020dce0 <_RME_Cpt_Crt+0x250>
ffffffff8020daf4:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8020daf8:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8020dafc:	0f 85 6e 02 00 00    	jne    ffffffff8020dd70 <_RME_Cpt_Crt+0x2e0>
ffffffff8020db02:	4c 8b 49 28          	mov    0x28(%rcx),%r9
ffffffff8020db06:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020db0b:	4c 39 c8             	cmp    %r9,%rax
ffffffff8020db0e:	0f 83 64 01 00 00    	jae    ffffffff8020dc78 <_RME_Cpt_Crt+0x1e8>
ffffffff8020db14:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020db18:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020db1c:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020db1f:	49 89 c9             	mov    %rcx,%r9
ffffffff8020db22:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff8020db26:	66 41 83 f9 02       	cmp    $0x2,%r9w
ffffffff8020db2b:	0f 84 af 01 00 00    	je     ffffffff8020dce0 <_RME_Cpt_Crt+0x250>
ffffffff8020db31:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020db35:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020db39:	0f 85 31 02 00 00    	jne    ffffffff8020dd70 <_RME_Cpt_Crt+0x2e0>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020db3f:	f6 c7 80             	test   $0x80,%bh
ffffffff8020db42:	0f 85 48 01 00 00    	jne    ffffffff8020dc90 <_RME_Cpt_Crt+0x200>
ffffffff8020db48:	48 39 de             	cmp    %rbx,%rsi
ffffffff8020db4b:	0f 86 27 01 00 00    	jbe    ffffffff8020dc78 <_RME_Cpt_Crt+0x1e8>
ffffffff8020db51:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020db55:	48 01 fb             	add    %rdi,%rbx
ffffffff8020db58:	48 8b 0b             	mov    (%rbx),%rcx
ffffffff8020db5b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020db5e:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020db62:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020db66:	0f 84 74 01 00 00    	je     ffffffff8020dce0 <_RME_Cpt_Crt+0x250>
ffffffff8020db6c:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020db70:	48 83 f9 02          	cmp    $0x2,%rcx
ffffffff8020db74:	0f 85 f6 01 00 00    	jne    ffffffff8020dd70 <_RME_Cpt_Crt+0x2e0>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020db7a:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8020db7e:	0f 84 d0 01 00 00    	je     ffffffff8020dd54 <_RME_Cpt_Crt+0x2c4>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
ffffffff8020db84:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020db88:	0f 84 fa 01 00 00    	je     ffffffff8020dd88 <_RME_Cpt_Crt+0x2f8>
ffffffff8020db8e:	4c 03 43 28          	add    0x28(%rbx),%r8
ffffffff8020db92:	4d 89 c5             	mov    %r8,%r13
ffffffff8020db95:	0f 82 57 01 00 00    	jb     ffffffff8020dcf2 <_RME_Cpt_Crt+0x262>
ffffffff8020db9b:	4c 89 e6             	mov    %r12,%rsi
ffffffff8020db9e:	31 ed                	xor    %ebp,%ebp
ffffffff8020dba0:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020dba4:	48 89 f1             	mov    %rsi,%rcx
ffffffff8020dba7:	4c 01 c1             	add    %r8,%rcx
ffffffff8020dbaa:	40 0f 92 c5          	setb   %bpl
ffffffff8020dbae:	0f 82 0c 02 00 00    	jb     ffffffff8020ddc0 <_RME_Cpt_Crt+0x330>
ffffffff8020dbb4:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8020dbb8:	48 39 4b 30          	cmp    %rcx,0x30(%rbx)
ffffffff8020dbbc:	0f 82 3e 02 00 00    	jb     ffffffff8020de00 <_RME_Cpt_Crt+0x370>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020dbc2:	48 39 50 28          	cmp    %rdx,0x28(%rax)
ffffffff8020dbc6:	0f 86 ac 00 00 00    	jbe    ffffffff8020dc78 <_RME_Cpt_Crt+0x1e8>
ffffffff8020dbcc:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020dbd0:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff8020dbd4:	48 89 e8             	mov    %rbp,%rax
ffffffff8020dbd7:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020dbda:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020dbe1:	00 00 00 
ffffffff8020dbe4:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff8020dbe9:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020dbec:	84 d2                	test   %dl,%dl
ffffffff8020dbee:	0f 84 44 02 00 00    	je     ffffffff8020de38 <_RME_Cpt_Crt+0x3a8>
ffffffff8020dbf4:	48 8b 05 15 94 01 00 	mov    0x19415(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020dbfb:	4c 89 c7             	mov    %r8,%rdi
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020dbfe:	48 89 43 20          	mov    %rax,0x20(%rbx)
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020dc02:	e8 09 fd ff ff       	call   ffffffff8020d910 <_RME_Kot_Mark>
ffffffff8020dc07:	48 85 c0             	test   %rax,%rax
ffffffff8020dc0a:	0f 88 34 02 00 00    	js     ffffffff8020de44 <_RME_Cpt_Crt+0x3b4>
ffffffff8020dc10:	4c 89 e8             	mov    %r13,%rax
ffffffff8020dc13:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020dc18:	48 83 c5 01          	add    $0x1,%rbp
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020dc1c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020dc23:	48 83 c0 40          	add    $0x40,%rax
ffffffff8020dc27:	49 39 ec             	cmp    %rbp,%r12
ffffffff8020dc2a:	77 ec                	ja     ffffffff8020dc18 <_RME_Cpt_Crt+0x188>
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020dc2c:	48 b8 00 00 00 00 00 	movabs $0x3000000000000,%rax
ffffffff8020dc33:	00 03 00 
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020dc36:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
ffffffff8020dc3d:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020dc3e:	4c 89 6b 18          	mov    %r13,0x18(%rbx)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020dc42:	48 c7 43 10 ff 00 00 	movq   $0xff,0x10(%rbx)
ffffffff8020dc49:	00 
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020dc4a:	4c 89 63 28          	mov    %r12,0x28(%rbx)
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020dc4e:	48 89 03             	mov    %rax,(%rbx)
}
ffffffff8020dc51:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
ffffffff8020dc55:	31 c0                	xor    %eax,%eax
}
ffffffff8020dc57:	5b                   	pop    %rbx
ffffffff8020dc58:	5d                   	pop    %rbp
ffffffff8020dc59:	41 5c                	pop    %r12
ffffffff8020dc5b:	41 5d                	pop    %r13
ffffffff8020dc5d:	c3                   	ret    
ffffffff8020dc5e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020dc60:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020dc63:	73 13                	jae    ffffffff8020dc78 <_RME_Cpt_Crt+0x1e8>
ffffffff8020dc65:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020dc69:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dc6d:	48 01 f8             	add    %rdi,%rax
ffffffff8020dc70:	e9 a7 fe ff ff       	jmp    ffffffff8020db1c <_RME_Cpt_Crt+0x8c>
ffffffff8020dc75:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020dc78:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020dc7f:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020dc83:	5b                   	pop    %rbx
ffffffff8020dc84:	5d                   	pop    %rbp
ffffffff8020dc85:	41 5c                	pop    %r12
ffffffff8020dc87:	41 5d                	pop    %r13
ffffffff8020dc89:	c3                   	ret    
ffffffff8020dc8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020dc90:	48 89 d9             	mov    %rbx,%rcx
ffffffff8020dc93:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020dc97:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020dc9a:	76 dc                	jbe    ffffffff8020dc78 <_RME_Cpt_Crt+0x1e8>
ffffffff8020dc9c:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020dca0:	48 01 f9             	add    %rdi,%rcx
ffffffff8020dca3:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8020dca6:	48 89 f7             	mov    %rsi,%rdi
ffffffff8020dca9:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff8020dcad:	66 83 ff 02          	cmp    $0x2,%di
ffffffff8020dcb1:	74 2d                	je     ffffffff8020dce0 <_RME_Cpt_Crt+0x250>
ffffffff8020dcb3:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020dcb7:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020dcbb:	0f 85 af 00 00 00    	jne    ffffffff8020dd70 <_RME_Cpt_Crt+0x2e0>
ffffffff8020dcc1:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020dcc5:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020dccb:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8020dcce:	73 a8                	jae    ffffffff8020dc78 <_RME_Cpt_Crt+0x1e8>
ffffffff8020dcd0:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020dcd4:	48 03 59 18          	add    0x18(%rcx),%rbx
ffffffff8020dcd8:	e9 7b fe ff ff       	jmp    ffffffff8020db58 <_RME_Cpt_Crt+0xc8>
ffffffff8020dcdd:	0f 1f 00             	nopl   (%rax)
}
ffffffff8020dce0:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020dce4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020dceb:	5b                   	pop    %rbx
ffffffff8020dcec:	5d                   	pop    %rbp
ffffffff8020dced:	41 5c                	pop    %r12
ffffffff8020dcef:	41 5d                	pop    %r13
ffffffff8020dcf1:	c3                   	ret    
ffffffff8020dcf2:	48 c7 c5 f9 d6 21 80 	mov    $0xffffffff8021d6f9,%rbp
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020dcf9:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020dcfe:	66 90                	xchg   %ax,%ax
        __RME_Putchar(String[Count]);
ffffffff8020dd00:	e8 8b ab 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020dd05:	48 81 fd f7 d7 21 80 	cmp    $0xffffffff8021d7f7,%rbp
ffffffff8020dd0c:	74 0d                	je     ffffffff8020dd1b <_RME_Cpt_Crt+0x28b>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020dd0e:	0f be 7d 00          	movsbl 0x0(%rbp),%edi
ffffffff8020dd12:	48 83 c5 01          	add    $0x1,%rbp
ffffffff8020dd16:	40 84 ff             	test   %dil,%dil
ffffffff8020dd19:	75 e5                	jne    ffffffff8020dd00 <_RME_Cpt_Crt+0x270>
ffffffff8020dd1b:	48 c7 c5 a8 d7 21 80 	mov    $0xffffffff8021d7a8,%rbp
ffffffff8020dd22:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020dd27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020dd2e:	00 00 
        __RME_Putchar(String[Count]);
ffffffff8020dd30:	e8 5b ab 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020dd35:	48 81 fd a6 d8 21 80 	cmp    $0xffffffff8021d8a6,%rbp
ffffffff8020dd3c:	74 0d                	je     ffffffff8020dd4b <_RME_Cpt_Crt+0x2bb>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020dd3e:	0f be 7d 00          	movsbl 0x0(%rbp),%edi
ffffffff8020dd42:	48 83 c5 01          	add    $0x1,%rbp
ffffffff8020dd46:	40 84 ff             	test   %dil,%dil
ffffffff8020dd49:	75 e5                	jne    ffffffff8020dd30 <_RME_Cpt_Crt+0x2a0>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
ffffffff8020dd4b:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
ffffffff8020dd4f:	e8 5c f2 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
}
ffffffff8020dd54:	48 83 c4 08          	add    $0x8,%rsp
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
ffffffff8020dd58:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff8020dd5f:	5b                   	pop    %rbx
ffffffff8020dd60:	5d                   	pop    %rbp
ffffffff8020dd61:	41 5c                	pop    %r12
ffffffff8020dd63:	41 5d                	pop    %r13
ffffffff8020dd65:	c3                   	ret    
ffffffff8020dd66:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020dd6d:	00 00 00 
ffffffff8020dd70:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020dd74:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020dd7b:	5b                   	pop    %rbx
ffffffff8020dd7c:	5d                   	pop    %rbp
ffffffff8020dd7d:	41 5c                	pop    %r12
ffffffff8020dd7f:	41 5d                	pop    %r13
ffffffff8020dd81:	c3                   	ret    
ffffffff8020dd82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020dd88:	48 c7 c3 d9 d6 21 80 	mov    $0xffffffff8021d6d9,%rbx
ffffffff8020dd8f:	48 c7 c5 d7 d7 21 80 	mov    $0xffffffff8021d7d7,%rbp
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020dd96:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020dd9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar(String[Count]);
ffffffff8020dda0:	e8 eb aa 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020dda5:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020dda8:	74 aa                	je     ffffffff8020dd54 <_RME_Cpt_Crt+0x2c4>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020ddaa:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020ddad:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020ddb1:	40 84 ff             	test   %dil,%dil
ffffffff8020ddb4:	75 ea                	jne    ffffffff8020dda0 <_RME_Cpt_Crt+0x310>
ffffffff8020ddb6:	eb 9c                	jmp    ffffffff8020dd54 <_RME_Cpt_Crt+0x2c4>
ffffffff8020ddb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020ddbf:	00 
ffffffff8020ddc0:	48 c7 c3 39 d7 21 80 	mov    $0xffffffff8021d739,%rbx
ffffffff8020ddc7:	48 c7 c5 37 d8 21 80 	mov    $0xffffffff8021d837,%rbp
ffffffff8020ddce:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020ddd3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar(String[Count]);
ffffffff8020ddd8:	e8 b3 aa 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020dddd:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020dde0:	0f 84 6e ff ff ff    	je     ffffffff8020dd54 <_RME_Cpt_Crt+0x2c4>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020dde6:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020dde9:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020dded:	40 84 ff             	test   %dil,%dil
ffffffff8020ddf0:	75 e6                	jne    ffffffff8020ddd8 <_RME_Cpt_Crt+0x348>
ffffffff8020ddf2:	e9 5d ff ff ff       	jmp    ffffffff8020dd54 <_RME_Cpt_Crt+0x2c4>
ffffffff8020ddf7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020ddfe:	00 00 
ffffffff8020de00:	48 c7 c3 59 d7 21 80 	mov    $0xffffffff8021d759,%rbx
ffffffff8020de07:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020de0c:	0f 1f 40 00          	nopl   0x0(%rax)
        __RME_Putchar(String[Count]);
ffffffff8020de10:	e8 7b aa 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020de15:	48 81 fb 57 d8 21 80 	cmp    $0xffffffff8021d857,%rbx
ffffffff8020de1c:	0f 84 32 ff ff ff    	je     ffffffff8020dd54 <_RME_Cpt_Crt+0x2c4>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020de22:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020de25:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020de29:	40 84 ff             	test   %dil,%dil
ffffffff8020de2c:	75 e2                	jne    ffffffff8020de10 <_RME_Cpt_Crt+0x380>
ffffffff8020de2e:	e9 21 ff ff ff       	jmp    ffffffff8020dd54 <_RME_Cpt_Crt+0x2c4>
ffffffff8020de33:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020de38:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020de3f:	e9 3b fe ff ff       	jmp    ffffffff8020dc7f <_RME_Cpt_Crt+0x1ef>
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020de44:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        return RME_ERR_CPT_KOT;
ffffffff8020de4b:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020de52:	e9 28 fe ff ff       	jmp    ffffffff8020dc7f <_RME_Cpt_Crt+0x1ef>
ffffffff8020de57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020de5e:	00 00 

ffffffff8020de60 <_RME_Pgt_Crt>:
{
ffffffff8020de60:	41 57                	push   %r15
ffffffff8020de62:	48 89 d0             	mov    %rdx,%rax
ffffffff8020de65:	41 56                	push   %r14
ffffffff8020de67:	41 55                	push   %r13
ffffffff8020de69:	41 54                	push   %r12
ffffffff8020de6b:	55                   	push   %rbp
ffffffff8020de6c:	53                   	push   %rbx
ffffffff8020de6d:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020de71:	4c 8b 74 24 60       	mov    0x60(%rsp),%r14
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020de76:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
ffffffff8020de7b:	4c 01 f2             	add    %r14,%rdx
ffffffff8020de7e:	48 83 fa 40          	cmp    $0x40,%rdx
ffffffff8020de82:	0f 87 88 03 00 00    	ja     ffffffff8020e210 <_RME_Pgt_Crt+0x3b0>
ffffffff8020de88:	49 89 cc             	mov    %rcx,%r12
ffffffff8020de8b:	4d 89 cd             	mov    %r9,%r13
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020de8e:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020de92:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8020de98:	0f 84 fa 01 00 00    	je     ffffffff8020e098 <_RME_Pgt_Crt+0x238>
ffffffff8020de9e:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020dea1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020dea5:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020dea8:	0f 83 02 02 00 00    	jae    ffffffff8020e0b0 <_RME_Pgt_Crt+0x250>
ffffffff8020deae:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020deb2:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020deb6:	48 01 fa             	add    %rdi,%rdx
ffffffff8020deb9:	4c 8b 0a             	mov    (%rdx),%r9
ffffffff8020debc:	4d 89 ca             	mov    %r9,%r10
ffffffff8020debf:	49 c1 ea 20          	shr    $0x20,%r10
ffffffff8020dec3:	66 41 83 fa 02       	cmp    $0x2,%r10w
ffffffff8020dec8:	0f 84 52 02 00 00    	je     ffffffff8020e120 <_RME_Pgt_Crt+0x2c0>
ffffffff8020dece:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8020ded2:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8020ded6:	0f 85 b4 02 00 00    	jne    ffffffff8020e190 <_RME_Pgt_Crt+0x330>
ffffffff8020dedc:	4c 8b 4a 28          	mov    0x28(%rdx),%r9
ffffffff8020dee0:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8020dee6:	4c 39 ce             	cmp    %r9,%rsi
ffffffff8020dee9:	0f 83 c1 01 00 00    	jae    ffffffff8020e0b0 <_RME_Pgt_Crt+0x250>
ffffffff8020deef:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
ffffffff8020def3:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020def7:	48 01 f3             	add    %rsi,%rbx
ffffffff8020defa:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020defd:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020df00:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020df04:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020df08:	0f 84 12 02 00 00    	je     ffffffff8020e120 <_RME_Pgt_Crt+0x2c0>
ffffffff8020df0e:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020df12:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020df16:	0f 85 74 02 00 00    	jne    ffffffff8020e190 <_RME_Pgt_Crt+0x330>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020df1c:	f6 c4 80             	test   $0x80,%ah
ffffffff8020df1f:	0f 85 ab 01 00 00    	jne    ffffffff8020e0d0 <_RME_Pgt_Crt+0x270>
ffffffff8020df25:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020df28:	0f 83 82 01 00 00    	jae    ffffffff8020e0b0 <_RME_Pgt_Crt+0x250>
ffffffff8020df2e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020df32:	48 8d 2c 38          	lea    (%rax,%rdi,1),%rbp
ffffffff8020df36:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020df3a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020df3d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8020df41:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff8020df45:	0f 84 d5 01 00 00    	je     ffffffff8020e120 <_RME_Pgt_Crt+0x2c0>
ffffffff8020df4b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020df4f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020df53:	0f 85 37 02 00 00    	jne    ffffffff8020e190 <_RME_Pgt_Crt+0x330>
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff8020df59:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020df5d:	0f 84 20 02 00 00    	je     ffffffff8020e183 <_RME_Pgt_Crt+0x323>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff8020df63:	f6 45 10 02          	testb  $0x2,0x10(%rbp)
ffffffff8020df67:	0f 84 33 02 00 00    	je     ffffffff8020e1a0 <_RME_Pgt_Crt+0x340>
ffffffff8020df6d:	4c 03 45 28          	add    0x28(%rbp),%r8
ffffffff8020df71:	0f 82 b2 01 00 00    	jb     ffffffff8020e129 <_RME_Pgt_Crt+0x2c9>
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020df77:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020df7c:	44 89 f1             	mov    %r14d,%ecx
ffffffff8020df7f:	d3 e0                	shl    %cl,%eax
ffffffff8020df81:	48 98                	cltq   
ffffffff8020df83:	4c 8d 3c c5 00 00 00 	lea    0x0(,%rax,8),%r15
ffffffff8020df8a:	00 
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff8020df8b:	4c 89 c0             	mov    %r8,%rax
ffffffff8020df8e:	4c 01 f8             	add    %r15,%rax
ffffffff8020df91:	0f 82 99 02 00 00    	jb     ffffffff8020e230 <_RME_Pgt_Crt+0x3d0>
ffffffff8020df97:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8020df9b:	48 39 45 30          	cmp    %rax,0x30(%rbp)
ffffffff8020df9f:	0f 82 2b 02 00 00    	jb     ffffffff8020e1d0 <_RME_Pgt_Crt+0x370>
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)<0)
ffffffff8020dfa5:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
ffffffff8020dfaa:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
ffffffff8020dfaf:	4c 89 f1             	mov    %r14,%rcx
ffffffff8020dfb2:	4c 89 ef             	mov    %r13,%rdi
ffffffff8020dfb5:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
ffffffff8020dfba:	e8 f1 ce 00 00       	call   ffffffff8021aeb0 <__RME_Pgt_Check>
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020dfbf:	b9 40 00 00 00       	mov    $0x40,%ecx
ffffffff8020dfc4:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020dfcb:	44 29 f1             	sub    %r14d,%ecx
ffffffff8020dfce:	2b 4c 24 58          	sub    0x58(%rsp),%ecx
ffffffff8020dfd2:	48 d3 e8             	shr    %cl,%rax
ffffffff8020dfd5:	4c 21 e8             	and    %r13,%rax
ffffffff8020dfd8:	0f 85 32 02 00 00    	jne    ffffffff8020e210 <_RME_Pgt_Crt+0x3b0>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020dfde:	4c 39 63 28          	cmp    %r12,0x28(%rbx)
ffffffff8020dfe2:	0f 86 c8 00 00 00    	jbe    ffffffff8020e0b0 <_RME_Pgt_Crt+0x250>
ffffffff8020dfe8:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020dfef:	00 00 00 
ffffffff8020dff2:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8020dff6:	4c 03 63 18          	add    0x18(%rbx),%r12
ffffffff8020dffa:	f0 49 0f b1 14 24    	lock cmpxchg %rdx,(%r12)
ffffffff8020e000:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020e003:	84 d2                	test   %dl,%dl
ffffffff8020e005:	0f 84 f5 01 00 00    	je     ffffffff8020e200 <_RME_Pgt_Crt+0x3a0>
ffffffff8020e00b:	48 8b 05 fe 8f 01 00 	mov    0x18ffe(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
ffffffff8020e012:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff8020e017:	4c 89 fe             	mov    %r15,%rsi
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020e01a:	49 89 44 24 20       	mov    %rax,0x20(%r12)
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
ffffffff8020e01f:	e8 ec f8 ff ff       	call   ffffffff8020d910 <_RME_Kot_Mark>
ffffffff8020e024:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
ffffffff8020e029:	48 85 c0             	test   %rax,%rax
ffffffff8020e02c:	49 89 c7             	mov    %rax,%r15
ffffffff8020e02f:	0f 85 e7 01 00 00    	jne    ffffffff8020e21c <_RME_Pgt_Crt+0x3bc>
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ALL;
ffffffff8020e035:	48 b8 ff 00 00 00 f0 	movabs $0xfffffff0000000ff,%rax
ffffffff8020e03c:	ff ff ff 
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020e03f:	4d 89 44 24 18       	mov    %r8,0x18(%r12)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020e044:	4c 89 e7             	mov    %r12,%rdi
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ALL;
ffffffff8020e047:	49 89 44 24 10       	mov    %rax,0x10(%r12)
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020e04c:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020e051:	49 c7 44 24 08 00 00 	movq   $0x0,0x8(%r12)
ffffffff8020e058:	00 00 
    Pgt_Crt->ASID=0U;
ffffffff8020e05a:	49 c7 44 24 38 00 00 	movq   $0x0,0x38(%r12)
ffffffff8020e061:	00 00 
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020e063:	4c 09 e8             	or     %r13,%rax
ffffffff8020e066:	49 89 44 24 30       	mov    %rax,0x30(%r12)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020e06b:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
ffffffff8020e070:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020e074:	4c 09 f0             	or     %r14,%rax
ffffffff8020e077:	49 89 44 24 28       	mov    %rax,0x28(%r12)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020e07c:	e8 7f ce 00 00       	call   ffffffff8021af00 <__RME_Pgt_Init>
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020e081:	48 b8 00 00 00 00 00 	movabs $0x4000000000000,%rax
ffffffff8020e088:	00 04 00 
ffffffff8020e08b:	49 89 04 24          	mov    %rax,(%r12)
    return 0;
ffffffff8020e08f:	eb 26                	jmp    ffffffff8020e0b7 <_RME_Pgt_Crt+0x257>
ffffffff8020e091:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020e098:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020e09b:	73 13                	jae    ffffffff8020e0b0 <_RME_Pgt_Crt+0x250>
ffffffff8020e09d:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020e0a1:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020e0a5:	48 8d 1c 3e          	lea    (%rsi,%rdi,1),%rbx
ffffffff8020e0a9:	e9 4c fe ff ff       	jmp    ffffffff8020defa <_RME_Pgt_Crt+0x9a>
ffffffff8020e0ae:	66 90                	xchg   %ax,%ax
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020e0b0:	49 c7 c7 fd ff ff ff 	mov    $0xfffffffffffffffd,%r15
}
ffffffff8020e0b7:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8020e0bb:	4c 89 f8             	mov    %r15,%rax
ffffffff8020e0be:	5b                   	pop    %rbx
ffffffff8020e0bf:	5d                   	pop    %rbp
ffffffff8020e0c0:	41 5c                	pop    %r12
ffffffff8020e0c2:	41 5d                	pop    %r13
ffffffff8020e0c4:	41 5e                	pop    %r14
ffffffff8020e0c6:	41 5f                	pop    %r15
ffffffff8020e0c8:	c3                   	ret    
ffffffff8020e0c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020e0d0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e0d3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e0d7:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020e0da:	73 d4                	jae    ffffffff8020e0b0 <_RME_Pgt_Crt+0x250>
ffffffff8020e0dc:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020e0e0:	48 01 fa             	add    %rdi,%rdx
ffffffff8020e0e3:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020e0e6:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e0e9:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020e0ed:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020e0f1:	74 2d                	je     ffffffff8020e120 <_RME_Pgt_Crt+0x2c0>
ffffffff8020e0f3:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020e0f7:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020e0fb:	0f 85 8f 00 00 00    	jne    ffffffff8020e190 <_RME_Pgt_Crt+0x330>
ffffffff8020e101:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020e105:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e10a:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020e10d:	73 a1                	jae    ffffffff8020e0b0 <_RME_Pgt_Crt+0x250>
ffffffff8020e10f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e113:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020e117:	48 89 c5             	mov    %rax,%rbp
ffffffff8020e11a:	e9 17 fe ff ff       	jmp    ffffffff8020df36 <_RME_Pgt_Crt+0xd6>
ffffffff8020e11f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020e120:	49 c7 c7 f7 ff ff ff 	mov    $0xfffffffffffffff7,%r15
ffffffff8020e127:	eb 8e                	jmp    ffffffff8020e0b7 <_RME_Pgt_Crt+0x257>
ffffffff8020e129:	48 c7 c3 f9 d6 21 80 	mov    $0xffffffff8021d6f9,%rbx
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e130:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020e135:	0f 1f 00             	nopl   (%rax)
        __RME_Putchar(String[Count]);
ffffffff8020e138:	e8 53 a7 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e13d:	48 81 fb f7 d7 21 80 	cmp    $0xffffffff8021d7f7,%rbx
ffffffff8020e144:	74 0c                	je     ffffffff8020e152 <_RME_Pgt_Crt+0x2f2>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e146:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e149:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020e14d:	40 84 ff             	test   %dil,%dil
ffffffff8020e150:	75 e6                	jne    ffffffff8020e138 <_RME_Pgt_Crt+0x2d8>
ffffffff8020e152:	48 c7 c3 a8 d7 21 80 	mov    $0xffffffff8021d7a8,%rbx
ffffffff8020e159:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020e15e:	66 90                	xchg   %ax,%ax
        __RME_Putchar(String[Count]);
ffffffff8020e160:	e8 2b a7 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e165:	48 81 fb a6 d8 21 80 	cmp    $0xffffffff8021d8a6,%rbx
ffffffff8020e16c:	74 0c                	je     ffffffff8020e17a <_RME_Pgt_Crt+0x31a>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e16e:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e171:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020e175:	40 84 ff             	test   %dil,%dil
ffffffff8020e178:	75 e6                	jne    ffffffff8020e160 <_RME_Pgt_Crt+0x300>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff8020e17a:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
ffffffff8020e17e:	e8 2d ee ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
ffffffff8020e183:	49 c7 c7 f9 ff ff ff 	mov    $0xfffffffffffffff9,%r15
ffffffff8020e18a:	e9 28 ff ff ff       	jmp    ffffffff8020e0b7 <_RME_Pgt_Crt+0x257>
ffffffff8020e18f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020e190:	49 c7 c7 fe ff ff ff 	mov    $0xfffffffffffffffe,%r15
ffffffff8020e197:	e9 1b ff ff ff       	jmp    ffffffff8020e0b7 <_RME_Pgt_Crt+0x257>
ffffffff8020e19c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020e1a0:	48 c7 c3 d9 d6 21 80 	mov    $0xffffffff8021d6d9,%rbx
ffffffff8020e1a7:	48 c7 c5 d7 d7 21 80 	mov    $0xffffffff8021d7d7,%rbp
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e1ae:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020e1b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar(String[Count]);
ffffffff8020e1b8:	e8 d3 a6 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e1bd:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020e1c0:	74 c1                	je     ffffffff8020e183 <_RME_Pgt_Crt+0x323>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e1c2:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e1c5:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020e1c9:	40 84 ff             	test   %dil,%dil
ffffffff8020e1cc:	75 ea                	jne    ffffffff8020e1b8 <_RME_Pgt_Crt+0x358>
ffffffff8020e1ce:	eb b3                	jmp    ffffffff8020e183 <_RME_Pgt_Crt+0x323>
ffffffff8020e1d0:	48 c7 c3 59 d7 21 80 	mov    $0xffffffff8021d759,%rbx
ffffffff8020e1d7:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020e1dc:	0f 1f 40 00          	nopl   0x0(%rax)
        __RME_Putchar(String[Count]);
ffffffff8020e1e0:	e8 ab a6 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e1e5:	48 81 fb 57 d8 21 80 	cmp    $0xffffffff8021d857,%rbx
ffffffff8020e1ec:	74 95                	je     ffffffff8020e183 <_RME_Pgt_Crt+0x323>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e1ee:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e1f1:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020e1f5:	40 84 ff             	test   %dil,%dil
ffffffff8020e1f8:	75 e6                	jne    ffffffff8020e1e0 <_RME_Pgt_Crt+0x380>
ffffffff8020e1fa:	eb 87                	jmp    ffffffff8020e183 <_RME_Pgt_Crt+0x323>
ffffffff8020e1fc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020e200:	49 c7 c7 fb ff ff ff 	mov    $0xfffffffffffffffb,%r15
ffffffff8020e207:	e9 ab fe ff ff       	jmp    ffffffff8020e0b7 <_RME_Pgt_Crt+0x257>
ffffffff8020e20c:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PGT_HW;
ffffffff8020e210:	49 c7 c7 99 ff ff ff 	mov    $0xffffffffffffff99,%r15
ffffffff8020e217:	e9 9b fe ff ff       	jmp    ffffffff8020e0b7 <_RME_Pgt_Crt+0x257>
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020e21c:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
ffffffff8020e223:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020e224:	49 c7 c7 fc ff ff ff 	mov    $0xfffffffffffffffc,%r15
ffffffff8020e22b:	e9 87 fe ff ff       	jmp    ffffffff8020e0b7 <_RME_Pgt_Crt+0x257>
ffffffff8020e230:	48 c7 c3 39 d7 21 80 	mov    $0xffffffff8021d739,%rbx
ffffffff8020e237:	48 c7 c5 37 d8 21 80 	mov    $0xffffffff8021d837,%rbp
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e23e:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020e243:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar(String[Count]);
ffffffff8020e248:	e8 43 a6 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e24d:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020e250:	0f 84 2d ff ff ff    	je     ffffffff8020e183 <_RME_Pgt_Crt+0x323>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e256:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e259:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020e25d:	40 84 ff             	test   %dil,%dil
ffffffff8020e260:	75 e6                	jne    ffffffff8020e248 <_RME_Pgt_Crt+0x3e8>
ffffffff8020e262:	e9 1c ff ff ff       	jmp    ffffffff8020e183 <_RME_Pgt_Crt+0x323>
ffffffff8020e267:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020e26e:	00 00 

ffffffff8020e270 <_RME_Thd_Crt>:
{
ffffffff8020e270:	41 57                	push   %r15
ffffffff8020e272:	49 89 ff             	mov    %rdi,%r15
ffffffff8020e275:	41 56                	push   %r14
ffffffff8020e277:	4d 89 ce             	mov    %r9,%r14
ffffffff8020e27a:	41 55                	push   %r13
ffffffff8020e27c:	49 89 cd             	mov    %rcx,%r13
ffffffff8020e27f:	41 54                	push   %r12
ffffffff8020e281:	4d 89 c4             	mov    %r8,%r12
ffffffff8020e284:	55                   	push   %rbp
ffffffff8020e285:	48 89 d5             	mov    %rdx,%rbp
ffffffff8020e288:	53                   	push   %rbx
ffffffff8020e289:	48 89 f3             	mov    %rsi,%rbx
ffffffff8020e28c:	48 83 ec 08          	sub    $0x8,%rsp
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
ffffffff8020e290:	e8 aa d5 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020e295:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020e299:	4c 39 70 48          	cmp    %r14,0x48(%rax)
ffffffff8020e29d:	0f 82 cd 04 00 00    	jb     ffffffff8020e770 <_RME_Thd_Crt+0x500>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020e2a3:	49 8b 47 28          	mov    0x28(%r15),%rax
ffffffff8020e2a7:	f6 c7 80             	test   $0x80,%bh
ffffffff8020e2aa:	0f 84 c0 02 00 00    	je     ffffffff8020e570 <_RME_Thd_Crt+0x300>
ffffffff8020e2b0:	48 89 d9             	mov    %rbx,%rcx
ffffffff8020e2b3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020e2b7:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020e2ba:	0f 86 18 03 00 00    	jbe    ffffffff8020e5d8 <_RME_Thd_Crt+0x368>
ffffffff8020e2c0:	49 8b 57 18          	mov    0x18(%r15),%rdx
ffffffff8020e2c4:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020e2c8:	48 01 d1             	add    %rdx,%rcx
ffffffff8020e2cb:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8020e2ce:	48 89 f7             	mov    %rsi,%rdi
ffffffff8020e2d1:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff8020e2d5:	66 83 ff 02          	cmp    $0x2,%di
ffffffff8020e2d9:	0f 84 11 03 00 00    	je     ffffffff8020e5f0 <_RME_Thd_Crt+0x380>
ffffffff8020e2df:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020e2e3:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020e2e7:	0f 85 23 03 00 00    	jne    ffffffff8020e610 <_RME_Thd_Crt+0x3a0>
ffffffff8020e2ed:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020e2f1:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020e2f7:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8020e2fa:	0f 83 d8 02 00 00    	jae    ffffffff8020e5d8 <_RME_Thd_Crt+0x368>
ffffffff8020e300:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020e304:	48 03 59 18          	add    0x18(%rcx),%rbx
ffffffff8020e308:	48 8b 0b             	mov    (%rbx),%rcx
ffffffff8020e30b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e30e:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020e312:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020e316:	0f 84 d4 02 00 00    	je     ffffffff8020e5f0 <_RME_Thd_Crt+0x380>
ffffffff8020e31c:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020e320:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020e324:	0f 85 e6 02 00 00    	jne    ffffffff8020e610 <_RME_Thd_Crt+0x3a0>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020e32a:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020e330:	0f 85 52 02 00 00    	jne    ffffffff8020e588 <_RME_Thd_Crt+0x318>
ffffffff8020e336:	48 39 e8             	cmp    %rbp,%rax
ffffffff8020e339:	0f 86 99 02 00 00    	jbe    ffffffff8020e5d8 <_RME_Thd_Crt+0x368>
ffffffff8020e33f:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020e343:	48 01 d5             	add    %rdx,%rbp
ffffffff8020e346:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
ffffffff8020e34a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e34d:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020e351:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020e355:	0f 84 95 02 00 00    	je     ffffffff8020e5f0 <_RME_Thd_Crt+0x380>
ffffffff8020e35b:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020e35f:	48 83 f9 02          	cmp    $0x2,%rcx
ffffffff8020e363:	0f 85 a7 02 00 00    	jne    ffffffff8020e610 <_RME_Thd_Crt+0x3a0>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020e369:	41 f7 c4 00 80 00 00 	test   $0x8000,%r12d
ffffffff8020e370:	0f 84 ba 02 00 00    	je     ffffffff8020e630 <_RME_Thd_Crt+0x3c0>
ffffffff8020e376:	4c 89 e1             	mov    %r12,%rcx
ffffffff8020e379:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020e37d:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020e380:	0f 86 52 02 00 00    	jbe    ffffffff8020e5d8 <_RME_Thd_Crt+0x368>
ffffffff8020e386:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020e38a:	48 8d 04 11          	lea    (%rcx,%rdx,1),%rax
ffffffff8020e38e:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020e391:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020e394:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020e398:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020e39c:	0f 84 4e 02 00 00    	je     ffffffff8020e5f0 <_RME_Thd_Crt+0x380>
ffffffff8020e3a2:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020e3a6:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020e3aa:	0f 85 60 02 00 00    	jne    ffffffff8020e610 <_RME_Thd_Crt+0x3a0>
ffffffff8020e3b0:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e3b4:	41 81 e4 ff 7f 00 00 	and    $0x7fff,%r12d
ffffffff8020e3bb:	49 39 d4             	cmp    %rdx,%r12
ffffffff8020e3be:	0f 83 14 02 00 00    	jae    ffffffff8020e5d8 <_RME_Thd_Crt+0x368>
ffffffff8020e3c4:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8020e3c8:	4c 03 60 18          	add    0x18(%rax),%r12
ffffffff8020e3cc:	49 8b 04 24          	mov    (%r12),%rax
ffffffff8020e3d0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e3d3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8020e3d7:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff8020e3db:	0f 84 0f 02 00 00    	je     ffffffff8020e5f0 <_RME_Thd_Crt+0x380>
ffffffff8020e3e1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e3e5:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8020e3e9:	0f 85 21 02 00 00    	jne    ffffffff8020e610 <_RME_Thd_Crt+0x3a0>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020e3ef:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020e3f3:	0f 84 ae 02 00 00    	je     ffffffff8020e6a7 <_RME_Thd_Crt+0x437>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff8020e3f9:	41 f6 44 24 10 02    	testb  $0x2,0x10(%r12)
ffffffff8020e3ff:	0f 84 a2 02 00 00    	je     ffffffff8020e6a7 <_RME_Thd_Crt+0x437>
    if(Is_Hyp==0U)
ffffffff8020e405:	48 83 7c 24 50 00    	cmpq   $0x0,0x50(%rsp)
ffffffff8020e40b:	0f 85 6b 03 00 00    	jne    ffffffff8020e77c <_RME_Thd_Crt+0x50c>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff8020e411:	f6 45 10 04          	testb  $0x4,0x10(%rbp)
ffffffff8020e415:	0f 84 a5 02 00 00    	je     ffffffff8020e6c0 <_RME_Thd_Crt+0x450>
ffffffff8020e41b:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
ffffffff8020e420:	4c 03 7d 28          	add    0x28(%rbp),%r15
ffffffff8020e424:	0f 82 17 02 00 00    	jb     ffffffff8020e641 <_RME_Thd_Crt+0x3d1>
ffffffff8020e42a:	49 81 ff 9f fe ff ff 	cmp    $0xfffffffffffffe9f,%r15
ffffffff8020e431:	0f 87 b9 02 00 00    	ja     ffffffff8020e6f0 <_RME_Thd_Crt+0x480>
ffffffff8020e437:	49 8d 87 5f 01 00 00 	lea    0x15f(%r15),%rax
ffffffff8020e43e:	48 39 45 30          	cmp    %rax,0x30(%rbp)
ffffffff8020e442:	0f 82 d8 02 00 00    	jb     ffffffff8020e720 <_RME_Thd_Crt+0x4b0>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8020e448:	4c 39 6b 28          	cmp    %r13,0x28(%rbx)
ffffffff8020e44c:	0f 86 86 01 00 00    	jbe    ffffffff8020e5d8 <_RME_Thd_Crt+0x368>
ffffffff8020e452:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8020e456:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
ffffffff8020e45b:	4c 03 6b 18          	add    0x18(%rbx),%r13
ffffffff8020e45f:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020e466:	00 00 00 
ffffffff8020e469:	f0 49 0f b1 55 00    	lock cmpxchg %rdx,0x0(%r13)
ffffffff8020e46f:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020e472:	84 d2                	test   %dl,%dl
ffffffff8020e474:	0f 84 e6 02 00 00    	je     ffffffff8020e760 <_RME_Thd_Crt+0x4f0>
ffffffff8020e47a:	48 8b 05 8f 8b 01 00 	mov    0x18b8f(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    if(_RME_Kot_Mark(Vaddr,Size)<0)
ffffffff8020e481:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff8020e486:	4c 89 ff             	mov    %r15,%rdi
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020e489:	49 89 45 20          	mov    %rax,0x20(%r13)
    if(_RME_Kot_Mark(Vaddr,Size)<0)
ffffffff8020e48d:	e8 7e f4 ff ff       	call   ffffffff8020d910 <_RME_Kot_Mark>
ffffffff8020e492:	48 85 c0             	test   %rax,%rax
ffffffff8020e495:	0f 88 ed 02 00 00    	js     ffffffff8020e788 <_RME_Thd_Crt+0x518>
    Thread->Sched.TID=0U;
ffffffff8020e49b:	49 c7 47 20 00 00 00 	movq   $0x0,0x20(%r15)
ffffffff8020e4a2:	00 
    Thread->Sched.Slice=0U;
ffffffff8020e4a3:	49 c7 47 30 00 00 00 	movq   $0x0,0x30(%r15)
ffffffff8020e4aa:	00 
    Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff8020e4ab:	49 c7 47 38 02 00 00 	movq   $0x2,0x38(%r15)
ffffffff8020e4b2:	00 
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8020e4b3:	41 8b 04 24          	mov    (%r12),%eax
ffffffff8020e4b7:	85 c0                	test   %eax,%eax
ffffffff8020e4b9:	74 05                	je     ffffffff8020e4c0 <_RME_Thd_Crt+0x250>
ffffffff8020e4bb:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8020e4c0:	49 8d 47 10          	lea    0x10(%r15),%rax
    Thread->Sched.Prc=Prc_Root;
ffffffff8020e4c4:	4d 89 67 58          	mov    %r12,0x58(%r15)
    Head->Prev=Head;
ffffffff8020e4c8:	49 89 47 18          	mov    %rax,0x18(%r15)
    Head->Next=Head;
ffffffff8020e4cc:	49 89 47 10          	mov    %rax,0x10(%r15)
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff8020e4d0:	49 8d 47 78          	lea    0x78(%r15),%rax
    Head->Prev=Head;
ffffffff8020e4d4:	49 89 87 80 00 00 00 	mov    %rax,0x80(%r15)
    Head->Next=Head;
ffffffff8020e4db:	49 89 47 78          	mov    %rax,0x78(%r15)
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff8020e4df:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    Thread->Sched.Signal=0U;
ffffffff8020e4e4:	49 c7 47 50 00 00 00 	movq   $0x0,0x50(%r15)
ffffffff8020e4eb:	00 
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff8020e4ec:	49 89 87 88 00 00 00 	mov    %rax,0x88(%r15)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff8020e4f3:	49 8d 87 b0 00 00 00 	lea    0xb0(%r15),%rax
ffffffff8020e4fa:	49 89 87 90 00 00 00 	mov    %rax,0x90(%r15)
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff8020e501:	49 8d 87 98 00 00 00 	lea    0x98(%r15),%rax
    Head->Prev=Head;
ffffffff8020e508:	49 89 87 a0 00 00 00 	mov    %rax,0xa0(%r15)
    Thread->Sched.Prio_Max=Prio_Max;
ffffffff8020e50f:	4d 89 77 48          	mov    %r14,0x48(%r15)
    Head->Next=Head;
ffffffff8020e513:	49 89 87 98 00 00 00 	mov    %rax,0x98(%r15)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020e51a:	b8 01 00 00 00       	mov    $0x1,%eax
    Thread->Sched.Sched_Ref=0U;
ffffffff8020e51f:	49 c7 47 60 00 00 00 	movq   $0x0,0x60(%r15)
ffffffff8020e526:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff8020e527:	49 c7 47 70 00 00 00 	movq   $0x0,0x70(%r15)
ffffffff8020e52e:	00 
    Thread->Sched.Local=RME_THD_FREE;
ffffffff8020e52f:	49 c7 47 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%r15)
ffffffff8020e536:	ff 
    Thread->Ctx.Invstk_Depth=0U;
ffffffff8020e537:	49 c7 87 a8 00 00 00 	movq   $0x0,0xa8(%r15)
ffffffff8020e53e:	00 00 00 00 
    Thd_Crt->Head.Root_Ref=0U;
ffffffff8020e542:	49 c7 45 08 00 00 00 	movq   $0x0,0x8(%r13)
ffffffff8020e549:	00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff8020e54a:	4d 89 7d 18          	mov    %r15,0x18(%r13)
    Thd_Crt->Head.Flag=RME_THD_FLAG_ALL;
ffffffff8020e54e:	49 c7 45 10 ff 01 00 	movq   $0x1ff,0x10(%r13)
ffffffff8020e555:	00 
ffffffff8020e556:	f0 49 0f c1 44 24 08 	lock xadd %rax,0x8(%r12)
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff8020e55d:	48 b8 00 00 00 00 00 	movabs $0x6000000000000,%rax
ffffffff8020e564:	00 06 00 
ffffffff8020e567:	49 89 45 00          	mov    %rax,0x0(%r13)
    return 0;
ffffffff8020e56b:	31 c0                	xor    %eax,%eax
ffffffff8020e56d:	eb 70                	jmp    ffffffff8020e5df <_RME_Thd_Crt+0x36f>
ffffffff8020e56f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020e570:	48 39 c3             	cmp    %rax,%rbx
ffffffff8020e573:	73 63                	jae    ffffffff8020e5d8 <_RME_Thd_Crt+0x368>
ffffffff8020e575:	49 8b 57 18          	mov    0x18(%r15),%rdx
ffffffff8020e579:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020e57d:	48 01 d3             	add    %rdx,%rbx
ffffffff8020e580:	e9 83 fd ff ff       	jmp    ffffffff8020e308 <_RME_Thd_Crt+0x98>
ffffffff8020e585:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020e588:	48 89 e9             	mov    %rbp,%rcx
ffffffff8020e58b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020e58f:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020e592:	76 44                	jbe    ffffffff8020e5d8 <_RME_Thd_Crt+0x368>
ffffffff8020e594:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020e598:	48 01 d1             	add    %rdx,%rcx
ffffffff8020e59b:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8020e59e:	48 89 f7             	mov    %rsi,%rdi
ffffffff8020e5a1:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff8020e5a5:	66 83 ff 02          	cmp    $0x2,%di
ffffffff8020e5a9:	74 45                	je     ffffffff8020e5f0 <_RME_Thd_Crt+0x380>
ffffffff8020e5ab:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020e5af:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020e5b3:	75 5b                	jne    ffffffff8020e610 <_RME_Thd_Crt+0x3a0>
ffffffff8020e5b5:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020e5b9:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff8020e5bf:	48 39 f5             	cmp    %rsi,%rbp
ffffffff8020e5c2:	73 14                	jae    ffffffff8020e5d8 <_RME_Thd_Crt+0x368>
ffffffff8020e5c4:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020e5c8:	48 03 69 18          	add    0x18(%rcx),%rbp
ffffffff8020e5cc:	e9 75 fd ff ff       	jmp    ffffffff8020e346 <_RME_Thd_Crt+0xd6>
ffffffff8020e5d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8020e5d8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020e5df:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020e5e3:	5b                   	pop    %rbx
ffffffff8020e5e4:	5d                   	pop    %rbp
ffffffff8020e5e5:	41 5c                	pop    %r12
ffffffff8020e5e7:	41 5d                	pop    %r13
ffffffff8020e5e9:	41 5e                	pop    %r14
ffffffff8020e5eb:	41 5f                	pop    %r15
ffffffff8020e5ed:	c3                   	ret    
ffffffff8020e5ee:	66 90                	xchg   %ax,%ax
ffffffff8020e5f0:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020e5f4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020e5fb:	5b                   	pop    %rbx
ffffffff8020e5fc:	5d                   	pop    %rbp
ffffffff8020e5fd:	41 5c                	pop    %r12
ffffffff8020e5ff:	41 5d                	pop    %r13
ffffffff8020e601:	41 5e                	pop    %r14
ffffffff8020e603:	41 5f                	pop    %r15
ffffffff8020e605:	c3                   	ret    
ffffffff8020e606:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e60d:	00 00 00 
ffffffff8020e610:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020e614:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020e61b:	5b                   	pop    %rbx
ffffffff8020e61c:	5d                   	pop    %rbp
ffffffff8020e61d:	41 5c                	pop    %r12
ffffffff8020e61f:	41 5d                	pop    %r13
ffffffff8020e621:	41 5e                	pop    %r14
ffffffff8020e623:	41 5f                	pop    %r15
ffffffff8020e625:	c3                   	ret    
ffffffff8020e626:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e62d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020e630:	4c 39 e0             	cmp    %r12,%rax
ffffffff8020e633:	76 a3                	jbe    ffffffff8020e5d8 <_RME_Thd_Crt+0x368>
ffffffff8020e635:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8020e639:	49 01 d4             	add    %rdx,%r12
ffffffff8020e63c:	e9 8b fd ff ff       	jmp    ffffffff8020e3cc <_RME_Thd_Crt+0x15c>
ffffffff8020e641:	48 c7 c3 f9 d6 21 80 	mov    $0xffffffff8021d6f9,%rbx
ffffffff8020e648:	49 c7 c4 f7 d7 21 80 	mov    $0xffffffff8021d7f7,%r12
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e64f:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020e654:	0f 1f 40 00          	nopl   0x0(%rax)
        __RME_Putchar(String[Count]);
ffffffff8020e658:	e8 33 a2 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e65d:	49 39 dc             	cmp    %rbx,%r12
ffffffff8020e660:	74 0c                	je     ffffffff8020e66e <_RME_Thd_Crt+0x3fe>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e662:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e665:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020e669:	40 84 ff             	test   %dil,%dil
ffffffff8020e66c:	75 ea                	jne    ffffffff8020e658 <_RME_Thd_Crt+0x3e8>
ffffffff8020e66e:	48 c7 c3 a8 d7 21 80 	mov    $0xffffffff8021d7a8,%rbx
ffffffff8020e675:	49 c7 c4 a6 d8 21 80 	mov    $0xffffffff8021d8a6,%r12
ffffffff8020e67c:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020e681:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count]);
ffffffff8020e688:	e8 03 a2 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e68d:	49 39 dc             	cmp    %rbx,%r12
ffffffff8020e690:	74 0c                	je     ffffffff8020e69e <_RME_Thd_Crt+0x42e>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e692:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e695:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020e699:	40 84 ff             	test   %dil,%dil
ffffffff8020e69c:	75 ea                	jne    ffffffff8020e688 <_RME_Thd_Crt+0x418>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff8020e69e:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
ffffffff8020e6a2:	e8 09 e9 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
}
ffffffff8020e6a7:	48 83 c4 08          	add    $0x8,%rsp
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff8020e6ab:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff8020e6b2:	5b                   	pop    %rbx
ffffffff8020e6b3:	5d                   	pop    %rbp
ffffffff8020e6b4:	41 5c                	pop    %r12
ffffffff8020e6b6:	41 5d                	pop    %r13
ffffffff8020e6b8:	41 5e                	pop    %r14
ffffffff8020e6ba:	41 5f                	pop    %r15
ffffffff8020e6bc:	c3                   	ret    
ffffffff8020e6bd:	0f 1f 00             	nopl   (%rax)
ffffffff8020e6c0:	48 c7 c3 d9 d6 21 80 	mov    $0xffffffff8021d6d9,%rbx
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e6c7:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020e6cc:	0f 1f 40 00          	nopl   0x0(%rax)
        __RME_Putchar(String[Count]);
ffffffff8020e6d0:	e8 bb a1 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e6d5:	48 81 fb d7 d7 21 80 	cmp    $0xffffffff8021d7d7,%rbx
ffffffff8020e6dc:	74 c9                	je     ffffffff8020e6a7 <_RME_Thd_Crt+0x437>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e6de:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e6e1:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020e6e5:	40 84 ff             	test   %dil,%dil
ffffffff8020e6e8:	75 e6                	jne    ffffffff8020e6d0 <_RME_Thd_Crt+0x460>
ffffffff8020e6ea:	eb bb                	jmp    ffffffff8020e6a7 <_RME_Thd_Crt+0x437>
ffffffff8020e6ec:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020e6f0:	48 c7 c3 39 d7 21 80 	mov    $0xffffffff8021d739,%rbx
ffffffff8020e6f7:	48 c7 c5 37 d8 21 80 	mov    $0xffffffff8021d837,%rbp
ffffffff8020e6fe:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020e703:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar(String[Count]);
ffffffff8020e708:	e8 83 a1 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e70d:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020e710:	74 95                	je     ffffffff8020e6a7 <_RME_Thd_Crt+0x437>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e712:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e715:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020e719:	40 84 ff             	test   %dil,%dil
ffffffff8020e71c:	75 ea                	jne    ffffffff8020e708 <_RME_Thd_Crt+0x498>
ffffffff8020e71e:	eb 87                	jmp    ffffffff8020e6a7 <_RME_Thd_Crt+0x437>
ffffffff8020e720:	48 c7 c3 59 d7 21 80 	mov    $0xffffffff8021d759,%rbx
ffffffff8020e727:	48 c7 c5 57 d8 21 80 	mov    $0xffffffff8021d857,%rbp
ffffffff8020e72e:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020e733:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar(String[Count]);
ffffffff8020e738:	e8 53 a1 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e73d:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020e740:	0f 84 61 ff ff ff    	je     ffffffff8020e6a7 <_RME_Thd_Crt+0x437>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e746:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e749:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020e74d:	40 84 ff             	test   %dil,%dil
ffffffff8020e750:	75 e6                	jne    ffffffff8020e738 <_RME_Thd_Crt+0x4c8>
ffffffff8020e752:	e9 50 ff ff ff       	jmp    ffffffff8020e6a7 <_RME_Thd_Crt+0x437>
ffffffff8020e757:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020e75e:	00 00 
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020e760:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020e767:	e9 73 fe ff ff       	jmp    ffffffff8020e5df <_RME_Thd_Crt+0x36f>
ffffffff8020e76c:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_PRIO;
ffffffff8020e770:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8020e777:	e9 63 fe ff ff       	jmp    ffffffff8020e5df <_RME_Thd_Crt+0x36f>
        return RME_ERR_PTH_HADDR;
ffffffff8020e77c:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff8020e783:	e9 57 fe ff ff       	jmp    ffffffff8020e5df <_RME_Thd_Crt+0x36f>
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff8020e788:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
ffffffff8020e78f:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020e790:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020e797:	e9 43 fe ff ff       	jmp    ffffffff8020e5df <_RME_Thd_Crt+0x36f>
ffffffff8020e79c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e7a0 <_RME_Cpt_Boot_Init>:
{
ffffffff8020e7a0:	f3 0f 1e fa          	endbr64 
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020e7a4:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
ffffffff8020e7a8:	48 3d ff 7f 00 00    	cmp    $0x7fff,%rax
ffffffff8020e7ae:	77 79                	ja     ffffffff8020e829 <_RME_Cpt_Boot_Init+0x89>
{
ffffffff8020e7b0:	41 55                	push   %r13
ffffffff8020e7b2:	49 89 d5             	mov    %rdx,%r13
ffffffff8020e7b5:	41 54                	push   %r12
ffffffff8020e7b7:	49 89 fc             	mov    %rdi,%r12
ffffffff8020e7ba:	55                   	push   %rbp
ffffffff8020e7bb:	48 89 f5             	mov    %rsi,%rbp
ffffffff8020e7be:	53                   	push   %rbx
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020e7bf:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020e7c2:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020e7c5:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020e7c9:	48 89 de             	mov    %rbx,%rsi
ffffffff8020e7cc:	e8 3f f1 ff ff       	call   ffffffff8020d910 <_RME_Kot_Mark>
ffffffff8020e7d1:	48 85 c0             	test   %rax,%rax
ffffffff8020e7d4:	75 5b                	jne    ffffffff8020e831 <_RME_Cpt_Boot_Init+0x91>
ffffffff8020e7d6:	48 8d 34 2b          	lea    (%rbx,%rbp,1),%rsi
ffffffff8020e7da:	48 89 e9             	mov    %rbp,%rcx
ffffffff8020e7dd:	0f 1f 00             	nopl   (%rax)
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020e7e0:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e7e7:	48 83 c1 40          	add    $0x40,%rcx
ffffffff8020e7eb:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020e7ee:	75 f0                	jne    ffffffff8020e7e0 <_RME_Cpt_Boot_Init+0x40>
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020e7f0:	48 b8 00 00 00 00 00 	movabs $0x3000000000000,%rax
ffffffff8020e7f7:	00 03 00 
    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff8020e7fa:	4c 89 e1             	mov    %r12,%rcx
ffffffff8020e7fd:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020e801:	48 01 e9             	add    %rbp,%rcx
    Cpt->Head.Root_Ref=1U;
ffffffff8020e804:	48 c7 41 08 01 00 00 	movq   $0x1,0x8(%rcx)
ffffffff8020e80b:	00 
    Cpt->Head.Object=Vaddr;
ffffffff8020e80c:	48 89 69 18          	mov    %rbp,0x18(%rcx)
    Cpt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020e810:	48 c7 41 10 ff 00 00 	movq   $0xff,0x10(%rcx)
ffffffff8020e817:	00 
    Cpt->Entry_Num=Entry_Num;
ffffffff8020e818:	4c 89 69 28          	mov    %r13,0x28(%rcx)
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020e81c:	48 89 01             	mov    %rax,(%rcx)
    return Cap_Cpt;
ffffffff8020e81f:	4c 89 e0             	mov    %r12,%rax
}
ffffffff8020e822:	5b                   	pop    %rbx
ffffffff8020e823:	5d                   	pop    %rbp
ffffffff8020e824:	41 5c                	pop    %r12
ffffffff8020e826:	41 5d                	pop    %r13
ffffffff8020e828:	c3                   	ret    
        return RME_ERR_CPT_RANGE;
ffffffff8020e829:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020e830:	c3                   	ret    
        return RME_ERR_CPT_KOT;
ffffffff8020e831:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020e838:	eb e8                	jmp    ffffffff8020e822 <_RME_Cpt_Boot_Init+0x82>
ffffffff8020e83a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020e840 <_RME_Cpt_Boot_Crt>:
{
ffffffff8020e840:	f3 0f 1e fa          	endbr64 
ffffffff8020e844:	41 55                	push   %r13
ffffffff8020e846:	41 54                	push   %r12
ffffffff8020e848:	55                   	push   %rbp
ffffffff8020e849:	53                   	push   %rbx
ffffffff8020e84a:	48 89 d3             	mov    %rdx,%rbx
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020e84d:	49 8d 50 ff          	lea    -0x1(%r8),%rdx
ffffffff8020e851:	48 81 fa ff 7f 00 00 	cmp    $0x7fff,%rdx
ffffffff8020e858:	0f 87 5a 01 00 00    	ja     ffffffff8020e9b8 <_RME_Cpt_Boot_Crt+0x178>
ffffffff8020e85e:	48 89 f0             	mov    %rsi,%rax
ffffffff8020e861:	49 89 cc             	mov    %rcx,%r12
ffffffff8020e864:	4c 89 c5             	mov    %r8,%rbp
    RME_CPT_GETCAP(Cpt,
ffffffff8020e867:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020e86b:	f6 c4 80             	test   $0x80,%ah
ffffffff8020e86e:	0f 84 2c 01 00 00    	je     ffffffff8020e9a0 <_RME_Cpt_Boot_Crt+0x160>
ffffffff8020e874:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020e877:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e87b:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8020e87e:	0f 86 34 01 00 00    	jbe    ffffffff8020e9b8 <_RME_Cpt_Boot_Crt+0x178>
ffffffff8020e884:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020e888:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8020e88c:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020e88f:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e892:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020e896:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020e89a:	0f 84 30 01 00 00    	je     ffffffff8020e9d0 <_RME_Cpt_Boot_Crt+0x190>
ffffffff8020e8a0:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020e8a4:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020e8a8:	0f 85 32 01 00 00    	jne    ffffffff8020e9e0 <_RME_Cpt_Boot_Crt+0x1a0>
ffffffff8020e8ae:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020e8b2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e8b7:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020e8ba:	0f 83 f8 00 00 00    	jae    ffffffff8020e9b8 <_RME_Cpt_Boot_Crt+0x178>
ffffffff8020e8c0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e8c4:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020e8c8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e8cb:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e8ce:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e8d1:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020e8d5:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020e8d9:	0f 84 f1 00 00 00    	je     ffffffff8020e9d0 <_RME_Cpt_Boot_Crt+0x190>
ffffffff8020e8df:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e8e3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e8e7:	0f 85 f3 00 00 00    	jne    ffffffff8020e9e0 <_RME_Cpt_Boot_Crt+0x1a0>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020e8ed:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff8020e8f1:	48 f7 d0             	not    %rax
ffffffff8020e8f4:	83 e0 01             	and    $0x1,%eax
ffffffff8020e8f7:	0f 85 f3 00 00 00    	jne    ffffffff8020e9f0 <_RME_Cpt_Boot_Crt+0x1b0>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020e8fd:	48 39 5a 28          	cmp    %rbx,0x28(%rdx)
ffffffff8020e901:	0f 86 b1 00 00 00    	jbe    ffffffff8020e9b8 <_RME_Cpt_Boot_Crt+0x178>
ffffffff8020e907:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020e90b:	48 03 5a 18          	add    0x18(%rdx),%rbx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020e90f:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020e916:	00 00 00 
ffffffff8020e919:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff8020e91e:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020e921:	84 d2                	test   %dl,%dl
ffffffff8020e923:	0f 84 d7 00 00 00    	je     ffffffff8020ea00 <_RME_Cpt_Boot_Crt+0x1c0>
ffffffff8020e929:	48 8b 05 e0 86 01 00 	mov    0x186e0(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020e930:	49 89 ed             	mov    %rbp,%r13
ffffffff8020e933:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020e936:	49 c1 e5 06          	shl    $0x6,%r13
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020e93a:	48 89 43 20          	mov    %rax,0x20(%rbx)
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020e93e:	4c 89 ee             	mov    %r13,%rsi
ffffffff8020e941:	e8 ca ef ff ff       	call   ffffffff8020d910 <_RME_Kot_Mark>
ffffffff8020e946:	48 85 c0             	test   %rax,%rax
ffffffff8020e949:	0f 85 ba 00 00 00    	jne    ffffffff8020ea09 <_RME_Cpt_Boot_Crt+0x1c9>
ffffffff8020e94f:	4b 8d 4c 25 00       	lea    0x0(%r13,%r12,1),%rcx
ffffffff8020e954:	4c 89 e2             	mov    %r12,%rdx
ffffffff8020e957:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020e95e:	00 00 
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020e960:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e967:	48 83 c2 40          	add    $0x40,%rdx
ffffffff8020e96b:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8020e96e:	75 f0                	jne    ffffffff8020e960 <_RME_Cpt_Boot_Crt+0x120>
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020e970:	48 be 00 00 00 00 00 	movabs $0x3000000000000,%rsi
ffffffff8020e977:	00 03 00 
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020e97a:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
ffffffff8020e981:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020e982:	4c 89 63 18          	mov    %r12,0x18(%rbx)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020e986:	48 c7 43 10 ff 00 00 	movq   $0xff,0x10(%rbx)
ffffffff8020e98d:	00 
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020e98e:	48 89 6b 28          	mov    %rbp,0x28(%rbx)
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020e992:	48 89 33             	mov    %rsi,(%rbx)
}
ffffffff8020e995:	5b                   	pop    %rbx
ffffffff8020e996:	5d                   	pop    %rbp
ffffffff8020e997:	41 5c                	pop    %r12
ffffffff8020e999:	41 5d                	pop    %r13
ffffffff8020e99b:	c3                   	ret    
ffffffff8020e99c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,
ffffffff8020e9a0:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020e9a3:	73 13                	jae    ffffffff8020e9b8 <_RME_Cpt_Boot_Crt+0x178>
ffffffff8020e9a5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e9a9:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8020e9ad:	e9 16 ff ff ff       	jmp    ffffffff8020e8c8 <_RME_Cpt_Boot_Crt+0x88>
ffffffff8020e9b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
}
ffffffff8020e9b8:	5b                   	pop    %rbx
        return RME_ERR_CPT_RANGE;
ffffffff8020e9b9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020e9c0:	5d                   	pop    %rbp
ffffffff8020e9c1:	41 5c                	pop    %r12
ffffffff8020e9c3:	41 5d                	pop    %r13
ffffffff8020e9c5:	c3                   	ret    
ffffffff8020e9c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e9cd:	00 00 00 
ffffffff8020e9d0:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,
ffffffff8020e9d1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020e9d8:	5d                   	pop    %rbp
ffffffff8020e9d9:	41 5c                	pop    %r12
ffffffff8020e9db:	41 5d                	pop    %r13
ffffffff8020e9dd:	c3                   	ret    
ffffffff8020e9de:	66 90                	xchg   %ax,%ax
ffffffff8020e9e0:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,
ffffffff8020e9e1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020e9e8:	5d                   	pop    %rbp
ffffffff8020e9e9:	41 5c                	pop    %r12
ffffffff8020e9eb:	41 5d                	pop    %r13
ffffffff8020e9ed:	c3                   	ret    
ffffffff8020e9ee:	66 90                	xchg   %ax,%ax
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020e9f0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e9f7:	eb 9c                	jmp    ffffffff8020e995 <_RME_Cpt_Boot_Crt+0x155>
ffffffff8020e9f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020ea00:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020ea07:	eb 8c                	jmp    ffffffff8020e995 <_RME_Cpt_Boot_Crt+0x155>
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020ea09:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        return RME_ERR_CPT_KOT;
ffffffff8020ea10:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020ea17:	e9 79 ff ff ff       	jmp    ffffffff8020e995 <_RME_Cpt_Boot_Crt+0x155>
ffffffff8020ea1c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020ea20 <_RME_Pgt_Boot_Crt>:
{
ffffffff8020ea20:	f3 0f 1e fa          	endbr64 
ffffffff8020ea24:	41 57                	push   %r15
ffffffff8020ea26:	41 56                	push   %r14
ffffffff8020ea28:	41 55                	push   %r13
ffffffff8020ea2a:	41 54                	push   %r12
ffffffff8020ea2c:	55                   	push   %rbp
ffffffff8020ea2d:	48 89 d5             	mov    %rdx,%rbp
ffffffff8020ea30:	53                   	push   %rbx
ffffffff8020ea31:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020ea35:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
ffffffff8020ea3a:	4c 8b 7c 24 58       	mov    0x58(%rsp),%r15
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020ea3f:	4b 8d 54 3d 00       	lea    0x0(%r13,%r15,1),%rdx
ffffffff8020ea44:	48 83 fa 40          	cmp    $0x40,%rdx
ffffffff8020ea48:	0f 87 02 02 00 00    	ja     ffffffff8020ec50 <_RME_Pgt_Boot_Crt+0x230>
ffffffff8020ea4e:	48 89 f0             	mov    %rsi,%rax
ffffffff8020ea51:	49 89 ce             	mov    %rcx,%r14
ffffffff8020ea54:	4d 89 c4             	mov    %r8,%r12
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ea57:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020ea5b:	f6 c4 80             	test   $0x80,%ah
ffffffff8020ea5e:	0f 84 84 01 00 00    	je     ffffffff8020ebe8 <_RME_Pgt_Boot_Crt+0x1c8>
ffffffff8020ea64:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020ea67:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ea6b:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020ea6e:	0f 83 8c 01 00 00    	jae    ffffffff8020ec00 <_RME_Pgt_Boot_Crt+0x1e0>
ffffffff8020ea74:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020ea78:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8020ea7c:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020ea7f:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020ea82:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020ea86:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020ea8a:	0f 84 80 01 00 00    	je     ffffffff8020ec10 <_RME_Pgt_Boot_Crt+0x1f0>
ffffffff8020ea90:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020ea94:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020ea98:	0f 85 82 01 00 00    	jne    ffffffff8020ec20 <_RME_Pgt_Boot_Crt+0x200>
ffffffff8020ea9e:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020eaa2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020eaa7:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020eaaa:	0f 83 50 01 00 00    	jae    ffffffff8020ec00 <_RME_Pgt_Boot_Crt+0x1e0>
ffffffff8020eab0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eab4:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020eab8:	48 89 c3             	mov    %rax,%rbx
ffffffff8020eabb:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eabe:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eac1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8020eac5:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff8020eac9:	0f 84 41 01 00 00    	je     ffffffff8020ec10 <_RME_Pgt_Boot_Crt+0x1f0>
ffffffff8020eacf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ead3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ead7:	0f 85 43 01 00 00    	jne    ffffffff8020ec20 <_RME_Pgt_Boot_Crt+0x200>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020eadd:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020eae1:	0f 84 49 01 00 00    	je     ffffffff8020ec30 <_RME_Pgt_Boot_Crt+0x210>
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)!=0)
ffffffff8020eae7:	4d 89 f0             	mov    %r14,%r8
ffffffff8020eaea:	4c 89 f9             	mov    %r15,%rcx
ffffffff8020eaed:	4c 89 ea             	mov    %r13,%rdx
ffffffff8020eaf0:	4c 89 ce             	mov    %r9,%rsi
ffffffff8020eaf3:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020eaf6:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff8020eafb:	e8 b0 c3 00 00       	call   ffffffff8021aeb0 <__RME_Pgt_Check>
ffffffff8020eb00:	48 85 c0             	test   %rax,%rax
ffffffff8020eb03:	0f 85 47 01 00 00    	jne    ffffffff8020ec50 <_RME_Pgt_Boot_Crt+0x230>
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020eb09:	b9 40 00 00 00       	mov    $0x40,%ecx
ffffffff8020eb0e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020eb15:	44 29 f9             	sub    %r15d,%ecx
ffffffff8020eb18:	44 29 e9             	sub    %r13d,%ecx
ffffffff8020eb1b:	48 d3 e8             	shr    %cl,%rax
ffffffff8020eb1e:	4c 21 e0             	and    %r12,%rax
ffffffff8020eb21:	0f 85 29 01 00 00    	jne    ffffffff8020ec50 <_RME_Pgt_Boot_Crt+0x230>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020eb27:	48 39 6b 28          	cmp    %rbp,0x28(%rbx)
ffffffff8020eb2b:	0f 86 cf 00 00 00    	jbe    ffffffff8020ec00 <_RME_Pgt_Boot_Crt+0x1e0>
ffffffff8020eb31:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020eb38:	00 00 00 
ffffffff8020eb3b:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020eb3f:	48 03 6b 18          	add    0x18(%rbx),%rbp
ffffffff8020eb43:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff8020eb49:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020eb4c:	84 d2                	test   %dl,%dl
ffffffff8020eb4e:	0f 84 ec 00 00 00    	je     ffffffff8020ec40 <_RME_Pgt_Boot_Crt+0x220>
ffffffff8020eb54:	48 8b 05 b5 84 01 00 	mov    0x184b5(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020eb5b:	44 89 f9             	mov    %r15d,%ecx
ffffffff8020eb5e:	be 01 00 00 00       	mov    $0x1,%esi
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020eb63:	4c 89 f7             	mov    %r14,%rdi
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020eb66:	d3 e6                	shl    %cl,%esi
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020eb68:	48 89 45 20          	mov    %rax,0x20(%rbp)
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020eb6c:	48 63 f6             	movslq %esi,%rsi
ffffffff8020eb6f:	48 c1 e6 03          	shl    $0x3,%rsi
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020eb73:	e8 98 ed ff ff       	call   ffffffff8020d910 <_RME_Kot_Mark>
ffffffff8020eb78:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
ffffffff8020eb7d:	48 85 c0             	test   %rax,%rax
ffffffff8020eb80:	48 89 c3             	mov    %rax,%rbx
ffffffff8020eb83:	0f 85 d3 00 00 00    	jne    ffffffff8020ec5c <_RME_Pgt_Boot_Crt+0x23c>
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020eb89:	49 c1 e5 20          	shl    $0x20,%r13
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020eb8d:	4d 09 cc             	or     %r9,%r12
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020eb90:	4c 89 75 18          	mov    %r14,0x18(%rbp)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020eb94:	48 89 ef             	mov    %rbp,%rdi
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ADD_SRC|
ffffffff8020eb97:	48 b8 c1 00 00 00 f0 	movabs $0xfffffff0000000c1,%rax
ffffffff8020eb9e:	ff ff ff 
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020eba1:	4d 09 fd             	or     %r15,%r13
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020eba4:	4c 89 65 30          	mov    %r12,0x30(%rbp)
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020eba8:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
ffffffff8020ebaf:	00 
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ADD_SRC|
ffffffff8020ebb0:	48 89 45 10          	mov    %rax,0x10(%rbp)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020ebb4:	4c 89 6d 28          	mov    %r13,0x28(%rbp)
    Pgt_Crt->ASID=0U;
ffffffff8020ebb8:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff8020ebbf:	00 
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020ebc0:	e8 3b c3 00 00       	call   ffffffff8021af00 <__RME_Pgt_Init>
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020ebc5:	48 b8 00 00 00 00 00 	movabs $0x4000000000000,%rax
ffffffff8020ebcc:	00 04 00 
ffffffff8020ebcf:	48 89 45 00          	mov    %rax,0x0(%rbp)
}
ffffffff8020ebd3:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8020ebd7:	48 89 d8             	mov    %rbx,%rax
ffffffff8020ebda:	5b                   	pop    %rbx
ffffffff8020ebdb:	5d                   	pop    %rbp
ffffffff8020ebdc:	41 5c                	pop    %r12
ffffffff8020ebde:	41 5d                	pop    %r13
ffffffff8020ebe0:	41 5e                	pop    %r14
ffffffff8020ebe2:	41 5f                	pop    %r15
ffffffff8020ebe4:	c3                   	ret    
ffffffff8020ebe5:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ebe8:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020ebeb:	73 13                	jae    ffffffff8020ec00 <_RME_Pgt_Boot_Crt+0x1e0>
ffffffff8020ebed:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ebf1:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8020ebf5:	e9 be fe ff ff       	jmp    ffffffff8020eab8 <_RME_Pgt_Boot_Crt+0x98>
ffffffff8020ebfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020ec00:	48 c7 c3 fd ff ff ff 	mov    $0xfffffffffffffffd,%rbx
ffffffff8020ec07:	eb ca                	jmp    ffffffff8020ebd3 <_RME_Pgt_Boot_Crt+0x1b3>
ffffffff8020ec09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020ec10:	48 c7 c3 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rbx
ffffffff8020ec17:	eb ba                	jmp    ffffffff8020ebd3 <_RME_Pgt_Boot_Crt+0x1b3>
ffffffff8020ec19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020ec20:	48 c7 c3 fe ff ff ff 	mov    $0xfffffffffffffffe,%rbx
ffffffff8020ec27:	eb aa                	jmp    ffffffff8020ebd3 <_RME_Pgt_Boot_Crt+0x1b3>
ffffffff8020ec29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020ec30:	48 c7 c3 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rbx
ffffffff8020ec37:	eb 9a                	jmp    ffffffff8020ebd3 <_RME_Pgt_Boot_Crt+0x1b3>
ffffffff8020ec39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020ec40:	48 c7 c3 fb ff ff ff 	mov    $0xfffffffffffffffb,%rbx
ffffffff8020ec47:	eb 8a                	jmp    ffffffff8020ebd3 <_RME_Pgt_Boot_Crt+0x1b3>
ffffffff8020ec49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        return RME_ERR_PGT_HW;
ffffffff8020ec50:	48 c7 c3 99 ff ff ff 	mov    $0xffffffffffffff99,%rbx
ffffffff8020ec57:	e9 77 ff ff ff       	jmp    ffffffff8020ebd3 <_RME_Pgt_Boot_Crt+0x1b3>
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020ec5c:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8020ec63:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020ec64:	48 c7 c3 fc ff ff ff 	mov    $0xfffffffffffffffc,%rbx
ffffffff8020ec6b:	e9 63 ff ff ff       	jmp    ffffffff8020ebd3 <_RME_Pgt_Boot_Crt+0x1b3>

ffffffff8020ec70 <_RME_Inv_Crt.isra.0>:
static rme_ret_t _RME_Inv_Crt(struct RME_Cap_Cpt* Cpt,
ffffffff8020ec70:	41 54                	push   %r12
ffffffff8020ec72:	48 89 d0             	mov    %rdx,%rax
ffffffff8020ec75:	55                   	push   %rbp
ffffffff8020ec76:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020ec79:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ec7a:	80 e6 80             	and    $0x80,%dh
ffffffff8020ec7d:	0f 85 f5 01 00 00    	jne    ffffffff8020ee78 <_RME_Inv_Crt.isra.0+0x208>
ffffffff8020ec83:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020ec86:	0f 83 dc 01 00 00    	jae    ffffffff8020ee68 <_RME_Inv_Crt.isra.0+0x1f8>
ffffffff8020ec8c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ec90:	48 8d 14 38          	lea    (%rax,%rdi,1),%rdx
ffffffff8020ec94:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020ec97:	48 89 c1             	mov    %rax,%rcx
ffffffff8020ec9a:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020ec9e:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020eca2:	0f 84 80 02 00 00    	je     ffffffff8020ef28 <_RME_Inv_Crt.isra.0+0x2b8>
ffffffff8020eca8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ecac:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ecb0:	0f 85 82 02 00 00    	jne    ffffffff8020ef38 <_RME_Inv_Crt.isra.0+0x2c8>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020ecb6:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff8020ecbd:	0f 85 0d 02 00 00    	jne    ffffffff8020eed0 <_RME_Inv_Crt.isra.0+0x260>
ffffffff8020ecc3:	49 39 f1             	cmp    %rsi,%r9
ffffffff8020ecc6:	0f 83 9c 01 00 00    	jae    ffffffff8020ee68 <_RME_Inv_Crt.isra.0+0x1f8>
ffffffff8020eccc:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020ecd0:	49 8d 1c 39          	lea    (%r9,%rdi,1),%rbx
ffffffff8020ecd4:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020ecd7:	48 89 c1             	mov    %rax,%rcx
ffffffff8020ecda:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020ecde:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020ece2:	0f 84 40 02 00 00    	je     ffffffff8020ef28 <_RME_Inv_Crt.isra.0+0x2b8>
ffffffff8020ece8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ecec:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8020ecf0:	0f 85 42 02 00 00    	jne    ffffffff8020ef38 <_RME_Inv_Crt.isra.0+0x2c8>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020ecf6:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020ecfc:	0f 84 46 02 00 00    	je     ffffffff8020ef48 <_RME_Inv_Crt.isra.0+0x2d8>
ffffffff8020ed02:	48 89 e8             	mov    %rbp,%rax
ffffffff8020ed05:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ed09:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020ed0c:	0f 83 56 01 00 00    	jae    ffffffff8020ee68 <_RME_Inv_Crt.isra.0+0x1f8>
ffffffff8020ed12:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ed16:	48 01 f8             	add    %rdi,%rax
ffffffff8020ed19:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020ed1c:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020ed1f:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020ed23:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020ed27:	0f 84 fb 01 00 00    	je     ffffffff8020ef28 <_RME_Inv_Crt.isra.0+0x2b8>
ffffffff8020ed2d:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020ed31:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020ed35:	0f 85 fd 01 00 00    	jne    ffffffff8020ef38 <_RME_Inv_Crt.isra.0+0x2c8>
ffffffff8020ed3b:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8020ed3f:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff8020ed45:	48 39 cd             	cmp    %rcx,%rbp
ffffffff8020ed48:	0f 83 1a 01 00 00    	jae    ffffffff8020ee68 <_RME_Inv_Crt.isra.0+0x1f8>
ffffffff8020ed4e:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020ed52:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff8020ed56:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020ed5a:	48 89 c1             	mov    %rax,%rcx
ffffffff8020ed5d:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020ed61:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020ed65:	0f 84 bd 01 00 00    	je     ffffffff8020ef28 <_RME_Inv_Crt.isra.0+0x2b8>
ffffffff8020ed6b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ed6f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ed73:	0f 85 bf 01 00 00    	jne    ffffffff8020ef38 <_RME_Inv_Crt.isra.0+0x2c8>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020ed79:	f6 42 10 01          	testb  $0x1,0x10(%rdx)
ffffffff8020ed7d:	0f 84 40 02 00 00    	je     ffffffff8020efc3 <_RME_Inv_Crt.isra.0+0x353>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_INV);
ffffffff8020ed83:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8020ed87:	48 f7 d0             	not    %rax
ffffffff8020ed8a:	83 e0 01             	and    $0x1,%eax
ffffffff8020ed8d:	0f 85 30 02 00 00    	jne    ffffffff8020efc3 <_RME_Inv_Crt.isra.0+0x353>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
ffffffff8020ed93:	f6 45 10 08          	testb  $0x8,0x10(%rbp)
ffffffff8020ed97:	0f 84 33 02 00 00    	je     ffffffff8020efd0 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8020ed9d:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
ffffffff8020eda2:	4c 03 65 28          	add    0x28(%rbp),%r12
ffffffff8020eda6:	0f 82 b1 01 00 00    	jb     ffffffff8020ef5d <_RME_Inv_Crt.isra.0+0x2ed>
ffffffff8020edac:	49 83 fc b7          	cmp    $0xffffffffffffffb7,%r12
ffffffff8020edb0:	0f 87 4a 02 00 00    	ja     ffffffff8020f000 <_RME_Inv_Crt.isra.0+0x390>
ffffffff8020edb6:	49 8d 4c 24 47       	lea    0x47(%r12),%rcx
ffffffff8020edbb:	48 39 4d 30          	cmp    %rcx,0x30(%rbp)
ffffffff8020edbf:	0f 82 6b 02 00 00    	jb     ffffffff8020f030 <_RME_Inv_Crt.isra.0+0x3c0>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff8020edc5:	4c 39 42 28          	cmp    %r8,0x28(%rdx)
ffffffff8020edc9:	0f 86 99 00 00 00    	jbe    ffffffff8020ee68 <_RME_Inv_Crt.isra.0+0x1f8>
ffffffff8020edcf:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020edd3:	4c 03 42 18          	add    0x18(%rdx),%r8
ffffffff8020edd7:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020edde:	00 00 00 
ffffffff8020ede1:	4c 89 c5             	mov    %r8,%rbp
ffffffff8020ede4:	f0 49 0f b1 10       	lock cmpxchg %rdx,(%r8)
ffffffff8020ede9:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff8020edec:	84 d2                	test   %dl,%dl
ffffffff8020edee:	0f 84 74 02 00 00    	je     ffffffff8020f068 <_RME_Inv_Crt.isra.0+0x3f8>
ffffffff8020edf4:	48 8b 05 15 82 01 00 	mov    0x18215(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff8020edfb:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8020ee00:	4c 89 e7             	mov    %r12,%rdi
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff8020ee03:	49 89 40 20          	mov    %rax,0x20(%r8)
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff8020ee07:	e8 04 eb ff ff       	call   ffffffff8020d910 <_RME_Kot_Mark>
ffffffff8020ee0c:	48 85 c0             	test   %rax,%rax
ffffffff8020ee0f:	0f 85 5f 02 00 00    	jne    ffffffff8020f074 <_RME_Inv_Crt.isra.0+0x404>
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8020ee15:	8b 13                	mov    (%rbx),%edx
ffffffff8020ee17:	85 d2                	test   %edx,%edx
ffffffff8020ee19:	74 04                	je     ffffffff8020ee1f <_RME_Inv_Crt.isra.0+0x1af>
ffffffff8020ee1b:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    Invocation->Prc=Prc_Root;
ffffffff8020ee1f:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020ee24:	ba 01 00 00 00       	mov    $0x1,%edx
    Invocation->Thd_Act=RME_NULL;
ffffffff8020ee29:	49 c7 44 24 18 00 00 	movq   $0x0,0x18(%r12)
ffffffff8020ee30:	00 00 
    Invocation->Is_Exc_Ret=0U;
ffffffff8020ee32:	49 c7 44 24 30 00 00 	movq   $0x0,0x30(%r12)
ffffffff8020ee39:	00 00 
    Inv_Crt->Head.Root_Ref=0U;
ffffffff8020ee3b:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
ffffffff8020ee42:	00 
    Inv_Crt->Head.Object=Vaddr;
ffffffff8020ee43:	4c 89 65 18          	mov    %r12,0x18(%rbp)
    Inv_Crt->Head.Flag=RME_INV_FLAG_ALL;
ffffffff8020ee47:	48 c7 45 10 03 00 00 	movq   $0x3,0x10(%rbp)
ffffffff8020ee4e:	00 
ffffffff8020ee4f:	f0 48 0f c1 53 08    	lock xadd %rdx,0x8(%rbx)
    RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),
ffffffff8020ee55:	48 bb 00 00 00 00 00 	movabs $0x7000000000000,%rbx
ffffffff8020ee5c:	00 07 00 
ffffffff8020ee5f:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
    return 0;
ffffffff8020ee63:	eb 0a                	jmp    ffffffff8020ee6f <_RME_Inv_Crt.isra.0+0x1ff>
ffffffff8020ee65:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff8020ee68:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020ee6f:	5b                   	pop    %rbx
ffffffff8020ee70:	5d                   	pop    %rbp
ffffffff8020ee71:	41 5c                	pop    %r12
ffffffff8020ee73:	c3                   	ret    
ffffffff8020ee74:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ee78:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ee7b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ee7f:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020ee82:	73 e4                	jae    ffffffff8020ee68 <_RME_Inv_Crt.isra.0+0x1f8>
ffffffff8020ee84:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020ee88:	48 01 fa             	add    %rdi,%rdx
ffffffff8020ee8b:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020ee8e:	49 89 ca             	mov    %rcx,%r10
ffffffff8020ee91:	49 c1 ea 20          	shr    $0x20,%r10
ffffffff8020ee95:	66 41 83 fa 02       	cmp    $0x2,%r10w
ffffffff8020ee9a:	0f 84 88 00 00 00    	je     ffffffff8020ef28 <_RME_Inv_Crt.isra.0+0x2b8>
ffffffff8020eea0:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020eea4:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020eea8:	0f 85 8a 00 00 00    	jne    ffffffff8020ef38 <_RME_Inv_Crt.isra.0+0x2c8>
ffffffff8020eeae:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020eeb2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020eeb7:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020eeba:	73 ac                	jae    ffffffff8020ee68 <_RME_Inv_Crt.isra.0+0x1f8>
ffffffff8020eebc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eec0:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020eec4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eec7:	e9 c8 fd ff ff       	jmp    ffffffff8020ec94 <_RME_Inv_Crt.isra.0+0x24>
ffffffff8020eecc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020eed0:	4c 89 c8             	mov    %r9,%rax
ffffffff8020eed3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020eed7:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020eeda:	73 8c                	jae    ffffffff8020ee68 <_RME_Inv_Crt.isra.0+0x1f8>
ffffffff8020eedc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eee0:	48 01 f8             	add    %rdi,%rax
ffffffff8020eee3:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020eee6:	49 89 ca             	mov    %rcx,%r10
ffffffff8020eee9:	49 c1 ea 20          	shr    $0x20,%r10
ffffffff8020eeed:	66 41 83 fa 02       	cmp    $0x2,%r10w
ffffffff8020eef2:	74 34                	je     ffffffff8020ef28 <_RME_Inv_Crt.isra.0+0x2b8>
ffffffff8020eef4:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020eef8:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020eefc:	75 3a                	jne    ffffffff8020ef38 <_RME_Inv_Crt.isra.0+0x2c8>
ffffffff8020eefe:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8020ef02:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff8020ef09:	49 39 c9             	cmp    %rcx,%r9
ffffffff8020ef0c:	0f 83 56 ff ff ff    	jae    ffffffff8020ee68 <_RME_Inv_Crt.isra.0+0x1f8>
ffffffff8020ef12:	48 8b 58 18          	mov    0x18(%rax),%rbx
ffffffff8020ef16:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020ef1a:	4c 01 cb             	add    %r9,%rbx
ffffffff8020ef1d:	e9 b2 fd ff ff       	jmp    ffffffff8020ecd4 <_RME_Inv_Crt.isra.0+0x64>
ffffffff8020ef22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
}
ffffffff8020ef28:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ef29:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020ef30:	5d                   	pop    %rbp
ffffffff8020ef31:	41 5c                	pop    %r12
ffffffff8020ef33:	c3                   	ret    
ffffffff8020ef34:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020ef38:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ef39:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020ef40:	5d                   	pop    %rbp
ffffffff8020ef41:	41 5c                	pop    %r12
ffffffff8020ef43:	c3                   	ret    
ffffffff8020ef44:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020ef48:	48 39 f5             	cmp    %rsi,%rbp
ffffffff8020ef4b:	0f 83 17 ff ff ff    	jae    ffffffff8020ee68 <_RME_Inv_Crt.isra.0+0x1f8>
ffffffff8020ef51:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020ef55:	48 01 fd             	add    %rdi,%rbp
ffffffff8020ef58:	e9 f9 fd ff ff       	jmp    ffffffff8020ed56 <_RME_Inv_Crt.isra.0+0xe6>
ffffffff8020ef5d:	48 c7 c3 f9 d6 21 80 	mov    $0xffffffff8021d6f9,%rbx
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020ef64:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020ef69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count]);
ffffffff8020ef70:	e8 1b 99 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020ef75:	48 81 fb f7 d7 21 80 	cmp    $0xffffffff8021d7f7,%rbx
ffffffff8020ef7c:	74 0c                	je     ffffffff8020ef8a <_RME_Inv_Crt.isra.0+0x31a>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020ef7e:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020ef81:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020ef85:	40 84 ff             	test   %dil,%dil
ffffffff8020ef88:	75 e6                	jne    ffffffff8020ef70 <_RME_Inv_Crt.isra.0+0x300>
ffffffff8020ef8a:	48 c7 c3 a8 d7 21 80 	mov    $0xffffffff8021d7a8,%rbx
ffffffff8020ef91:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020ef96:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020ef9d:	00 00 00 
        __RME_Putchar(String[Count]);
ffffffff8020efa0:	e8 eb 98 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020efa5:	48 81 fb a6 d8 21 80 	cmp    $0xffffffff8021d8a6,%rbx
ffffffff8020efac:	74 0c                	je     ffffffff8020efba <_RME_Inv_Crt.isra.0+0x34a>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020efae:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020efb1:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020efb5:	40 84 ff             	test   %dil,%dil
ffffffff8020efb8:	75 e6                	jne    ffffffff8020efa0 <_RME_Inv_Crt.isra.0+0x330>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
ffffffff8020efba:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
ffffffff8020efbe:	e8 ed df ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
}
ffffffff8020efc3:	5b                   	pop    %rbx
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
ffffffff8020efc4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff8020efcb:	5d                   	pop    %rbp
ffffffff8020efcc:	41 5c                	pop    %r12
ffffffff8020efce:	c3                   	ret    
ffffffff8020efcf:	90                   	nop
ffffffff8020efd0:	48 c7 c3 d9 d6 21 80 	mov    $0xffffffff8021d6d9,%rbx
ffffffff8020efd7:	48 c7 c5 d7 d7 21 80 	mov    $0xffffffff8021d7d7,%rbp
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020efde:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020efe3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar(String[Count]);
ffffffff8020efe8:	e8 a3 98 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020efed:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020eff0:	74 d1                	je     ffffffff8020efc3 <_RME_Inv_Crt.isra.0+0x353>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020eff2:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020eff5:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020eff9:	40 84 ff             	test   %dil,%dil
ffffffff8020effc:	75 ea                	jne    ffffffff8020efe8 <_RME_Inv_Crt.isra.0+0x378>
ffffffff8020effe:	eb c3                	jmp    ffffffff8020efc3 <_RME_Inv_Crt.isra.0+0x353>
ffffffff8020f000:	48 c7 c3 39 d7 21 80 	mov    $0xffffffff8021d739,%rbx
ffffffff8020f007:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020f00c:	0f 1f 40 00          	nopl   0x0(%rax)
        __RME_Putchar(String[Count]);
ffffffff8020f010:	e8 7b 98 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020f015:	48 81 fb 37 d8 21 80 	cmp    $0xffffffff8021d837,%rbx
ffffffff8020f01c:	74 a5                	je     ffffffff8020efc3 <_RME_Inv_Crt.isra.0+0x353>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020f01e:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020f021:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020f025:	40 84 ff             	test   %dil,%dil
ffffffff8020f028:	75 e6                	jne    ffffffff8020f010 <_RME_Inv_Crt.isra.0+0x3a0>
ffffffff8020f02a:	eb 97                	jmp    ffffffff8020efc3 <_RME_Inv_Crt.isra.0+0x353>
ffffffff8020f02c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020f030:	48 c7 c3 59 d7 21 80 	mov    $0xffffffff8021d759,%rbx
ffffffff8020f037:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff8020f03c:	0f 1f 40 00          	nopl   0x0(%rax)
        __RME_Putchar(String[Count]);
ffffffff8020f040:	e8 4b 98 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020f045:	48 81 fb 57 d8 21 80 	cmp    $0xffffffff8021d857,%rbx
ffffffff8020f04c:	0f 84 71 ff ff ff    	je     ffffffff8020efc3 <_RME_Inv_Crt.isra.0+0x353>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020f052:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020f055:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8020f059:	40 84 ff             	test   %dil,%dil
ffffffff8020f05c:	75 e2                	jne    ffffffff8020f040 <_RME_Inv_Crt.isra.0+0x3d0>
ffffffff8020f05e:	e9 60 ff ff ff       	jmp    ffffffff8020efc3 <_RME_Inv_Crt.isra.0+0x353>
ffffffff8020f063:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff8020f068:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f06f:	e9 fb fd ff ff       	jmp    ffffffff8020ee6f <_RME_Inv_Crt.isra.0+0x1ff>
        RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),0U);
ffffffff8020f074:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8020f07b:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020f07c:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020f083:	e9 e7 fd ff ff       	jmp    ffffffff8020ee6f <_RME_Inv_Crt.isra.0+0x1ff>
ffffffff8020f088:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f08f:	00 

ffffffff8020f090 <_RME_Kot_Erase>:
{
ffffffff8020f090:	f3 0f 1e fa          	endbr64 
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff8020f094:	40 f6 c7 0f          	test   $0xf,%dil
ffffffff8020f098:	0f 85 38 01 00 00    	jne    ffffffff8020f1d6 <_RME_Kot_Erase+0x146>
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f09e:	48 ba 00 00 a0 fe ff 	movabs $0x7ffffea00000,%rdx
ffffffff8020f0a5:	7f 00 00 
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f0a8:	48 b8 ff ff 9f fe ff 	movabs $0x7ffffe9fffff,%rax
ffffffff8020f0af:	7f 00 00 
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020f0b2:	49 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%r9
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff8020f0b9:	49 bb 00 00 00 01 00 	movabs $0xffff800001000000,%r11
ffffffff8020f0c0:	80 ff ff 
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f0c3:	48 01 fa             	add    %rdi,%rdx
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f0c6:	48 01 c6             	add    %rax,%rsi
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020f0c9:	4d 89 c8             	mov    %r9,%r8
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f0cc:	48 89 d1             	mov    %rdx,%rcx
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f0cf:	48 8d 04 3e          	lea    (%rsi,%rdi,1),%rax
    Start=Start>>RME_WORD_ORDER;
ffffffff8020f0d3:	48 c1 ea 0a          	shr    $0xa,%rdx
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020f0d7:	4c 89 cf             	mov    %r9,%rdi
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f0da:	48 c1 e9 04          	shr    $0x4,%rcx
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff8020f0de:	4c 8d 14 d5 00 00 00 	lea    0x0(,%rdx,8),%r10
ffffffff8020f0e5:	00 
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020f0e6:	49 d3 e0             	shl    %cl,%r8
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f0e9:	48 89 c1             	mov    %rax,%rcx
    End=End>>RME_WORD_ORDER;
ffffffff8020f0ec:	48 c1 e8 0a          	shr    $0xa,%rax
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff8020f0f0:	4f 8d 0c 1a          	lea    (%r10,%r11,1),%r9
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f0f4:	48 c1 e9 04          	shr    $0x4,%rcx
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020f0f8:	f7 d1                	not    %ecx
ffffffff8020f0fa:	48 d3 ef             	shr    %cl,%rdi
    End=End>>RME_WORD_ORDER;
ffffffff8020f0fd:	48 89 c1             	mov    %rax,%rcx
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff8020f100:	49 8b 01             	mov    (%r9),%rax
    if(Start==End)
ffffffff8020f103:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020f106:	74 48                	je     ffffffff8020f150 <_RME_Kot_Erase+0xc0>
        if((RME_KOT_VA_BASE[Start]&Mask_Begin)!=Mask_Begin)
ffffffff8020f108:	4c 21 c0             	and    %r8,%rax
ffffffff8020f10b:	4c 39 c0             	cmp    %r8,%rax
ffffffff8020f10e:	0f 85 c2 00 00 00    	jne    ffffffff8020f1d6 <_RME_Kot_Erase+0x146>
{
ffffffff8020f114:	53                   	push   %rbx
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff8020f115:	48 8d 71 ff          	lea    -0x1(%rcx),%rsi
ffffffff8020f119:	48 8d 5a 01          	lea    0x1(%rdx),%rbx
ffffffff8020f11d:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8020f120:	73 4e                	jae    ffffffff8020f170 <_RME_Kot_Erase+0xe0>
ffffffff8020f122:	4b 8d 44 1a 08       	lea    0x8(%r10,%r11,1),%rax
ffffffff8020f127:	48 89 da             	mov    %rbx,%rdx
ffffffff8020f12a:	eb 11                	jmp    ffffffff8020f13d <_RME_Kot_Erase+0xad>
ffffffff8020f12c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020f130:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8020f134:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020f138:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020f13b:	74 33                	je     ffffffff8020f170 <_RME_Kot_Erase+0xe0>
            if(RME_KOT_VA_BASE[Count]!=RME_MASK_FULL)
ffffffff8020f13d:	48 83 38 ff          	cmpq   $0xffffffffffffffff,(%rax)
ffffffff8020f141:	74 ed                	je     ffffffff8020f130 <_RME_Kot_Erase+0xa0>
        return RME_ERR_KOT_BMP;
ffffffff8020f143:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8020f14a:	5b                   	pop    %rbx
ffffffff8020f14b:	c3                   	ret    
ffffffff8020f14c:	0f 1f 40 00          	nopl   0x0(%rax)
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff8020f150:	4c 21 c7             	and    %r8,%rdi
ffffffff8020f153:	48 21 f8             	and    %rdi,%rax
ffffffff8020f156:	48 39 c7             	cmp    %rax,%rdi
ffffffff8020f159:	75 7b                	jne    ffffffff8020f1d6 <_RME_Kot_Erase+0x146>
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~(Mask_Begin&Mask_End));
ffffffff8020f15b:	48 f7 d7             	not    %rdi
	__asm__ __volatile__("MOVQ %[Ptr],%[Old]; LOCK ANDQ %[Operand], %[Ptr]"
ffffffff8020f15e:	49 8b 39             	mov    (%r9),%rdi
ffffffff8020f161:	f0 49 21 39          	lock and %rdi,(%r9)
    return 0;
ffffffff8020f165:	31 c0                	xor    %eax,%eax
	return Old;
ffffffff8020f167:	c3                   	ret    
ffffffff8020f168:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f16f:	00 
        if((RME_KOT_VA_BASE[End]&Mask_End)!=Mask_End)
ffffffff8020f170:	48 8d 04 cd 00 00 00 	lea    0x0(,%rcx,8),%rax
ffffffff8020f177:	00 
ffffffff8020f178:	48 ba 00 00 00 01 00 	movabs $0xffff800001000000,%rdx
ffffffff8020f17f:	80 ff ff 
ffffffff8020f182:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
ffffffff8020f186:	4c 8b 19             	mov    (%rcx),%r11
ffffffff8020f189:	49 21 fb             	and    %rdi,%r11
ffffffff8020f18c:	49 39 fb             	cmp    %rdi,%r11
ffffffff8020f18f:	75 b2                	jne    ffffffff8020f143 <_RME_Kot_Erase+0xb3>
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff8020f191:	49 f7 d0             	not    %r8
	__asm__ __volatile__("MOVQ %[Ptr],%[Old]; LOCK ANDQ %[Operand], %[Ptr]"
ffffffff8020f194:	4d 8b 01             	mov    (%r9),%r8
ffffffff8020f197:	f0 4d 21 01          	lock and %r8,(%r9)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff8020f19b:	49 b8 f8 ff ff 00 00 	movabs $0xffff800000fffff8,%r8
ffffffff8020f1a2:	80 ff ff 
ffffffff8020f1a5:	49 8d 54 12 08       	lea    0x8(%r10,%rdx,1),%rdx
ffffffff8020f1aa:	4c 01 c0             	add    %r8,%rax
ffffffff8020f1ad:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8020f1b0:	73 16                	jae    ffffffff8020f1c8 <_RME_Kot_Erase+0x138>
ffffffff8020f1b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            RME_KOT_VA_BASE[Count]=0U;
ffffffff8020f1b8:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff8020f1bf:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8020f1c3:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f1c6:	75 f0                	jne    ffffffff8020f1b8 <_RME_Kot_Erase+0x128>
        RME_FETCH_AND(&(RME_KOT_VA_BASE[End]),~Mask_End);
ffffffff8020f1c8:	48 f7 d7             	not    %rdi
ffffffff8020f1cb:	48 8b 39             	mov    (%rcx),%rdi
ffffffff8020f1ce:	f0 48 21 39          	lock and %rdi,(%rcx)
    return 0;
ffffffff8020f1d2:	31 c0                	xor    %eax,%eax
}
ffffffff8020f1d4:	5b                   	pop    %rbx
ffffffff8020f1d5:	c3                   	ret    
        return RME_ERR_KOT_BMP;
ffffffff8020f1d6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8020f1dd:	c3                   	ret    
ffffffff8020f1de:	66 90                	xchg   %ax,%ax

ffffffff8020f1e0 <_RME_Inv_Del.isra.0>:
static rme_ret_t _RME_Inv_Del(struct RME_Cap_Cpt* Cpt,
ffffffff8020f1e0:	48 89 c8             	mov    %rcx,%rax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f1e3:	f6 c6 80             	test   $0x80,%dh
ffffffff8020f1e6:	0f 85 dc 00 00 00    	jne    ffffffff8020f2c8 <_RME_Inv_Del.isra.0+0xe8>
ffffffff8020f1ec:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020f1ef:	0f 83 23 01 00 00    	jae    ffffffff8020f318 <_RME_Inv_Del.isra.0+0x138>
ffffffff8020f1f5:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f1f9:	48 01 fa             	add    %rdi,%rdx
ffffffff8020f1fc:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020f1ff:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020f202:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020f206:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020f20a:	0f 84 10 01 00 00    	je     ffffffff8020f320 <_RME_Inv_Del.isra.0+0x140>
ffffffff8020f210:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f214:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020f218:	0f 85 12 01 00 00    	jne    ffffffff8020f330 <_RME_Inv_Del.isra.0+0x150>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8020f21e:	f6 42 10 02          	testb  $0x2,0x10(%rdx)
ffffffff8020f222:	0f 84 18 01 00 00    	je     ffffffff8020f340 <_RME_Inv_Del.isra.0+0x160>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff8020f228:	48 39 42 28          	cmp    %rax,0x28(%rdx)
ffffffff8020f22c:	0f 86 e6 00 00 00    	jbe    ffffffff8020f318 <_RME_Inv_Del.isra.0+0x138>
ffffffff8020f232:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f236:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020f23a:	48 89 c2             	mov    %rax,%rdx
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff8020f23d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f240:	48 89 c1             	mov    %rax,%rcx
ffffffff8020f243:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020f247:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020f24b:	0f 85 cf 00 00 00    	jne    ffffffff8020f320 <_RME_Inv_Del.isra.0+0x140>
ffffffff8020f251:	48 89 c1             	mov    %rax,%rcx
ffffffff8020f254:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f258:	48 83 f9 07          	cmp    $0x7,%rcx
ffffffff8020f25c:	0f 85 ce 00 00 00    	jne    ffffffff8020f330 <_RME_Inv_Del.isra.0+0x150>
ffffffff8020f262:	48 8b 72 20          	mov    0x20(%rdx),%rsi
ffffffff8020f266:	48 8b 0d a3 7d 01 00 	mov    0x17da3(%rip),%rcx        # ffffffff80227010 <RME_x64_timestamp>
ffffffff8020f26d:	48 29 f1             	sub    %rsi,%rcx
ffffffff8020f270:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff8020f274:	0f 86 d6 00 00 00    	jbe    ffffffff8020f350 <_RME_Inv_Del.isra.0+0x170>
ffffffff8020f27a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff8020f27e:	48 85 c9             	test   %rcx,%rcx
ffffffff8020f281:	0f 85 d9 00 00 00    	jne    ffffffff8020f360 <_RME_Inv_Del.isra.0+0x180>
    Invocation=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
ffffffff8020f287:	48 8b 7a 18          	mov    0x18(%rdx),%rdi
    if(Invocation->Thd_Act!=(void*)RME_NULL)
ffffffff8020f28b:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
ffffffff8020f290:	0f 85 fa 00 00 00    	jne    ffffffff8020f390 <_RME_Inv_Del.isra.0+0x1b0>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020f296:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020f29b:	0f 94 c1             	sete   %cl
    RME_CAP_DELETE(Inv_Del,Type_Stat);
ffffffff8020f29e:	84 c9                	test   %cl,%cl
ffffffff8020f2a0:	0f 84 e2 00 00 00    	je     ffffffff8020f388 <_RME_Inv_Del.isra.0+0x1a8>
    RME_FETCH_ADD(&(Invocation->Prc->Head.Root_Ref), -1);
ffffffff8020f2a6:	48 8b 47 10          	mov    0x10(%rdi),%rax
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020f2aa:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8020f2b1:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Invocation,RME_INV_SIZE)==0);
ffffffff8020f2b7:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8020f2bc:	e8 cf fd ff ff       	call   ffffffff8020f090 <_RME_Kot_Erase>
    return 0;
ffffffff8020f2c1:	31 c0                	xor    %eax,%eax
ffffffff8020f2c3:	c3                   	ret    
ffffffff8020f2c4:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f2c8:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020f2cb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020f2cf:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020f2d2:	73 44                	jae    ffffffff8020f318 <_RME_Inv_Del.isra.0+0x138>
ffffffff8020f2d4:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020f2d8:	48 01 cf             	add    %rcx,%rdi
ffffffff8020f2db:	48 8b 0f             	mov    (%rdi),%rcx
ffffffff8020f2de:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020f2e1:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020f2e5:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020f2e9:	74 35                	je     ffffffff8020f320 <_RME_Inv_Del.isra.0+0x140>
ffffffff8020f2eb:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f2ef:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020f2f3:	75 3b                	jne    ffffffff8020f330 <_RME_Inv_Del.isra.0+0x150>
ffffffff8020f2f5:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020f2f9:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020f2ff:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020f302:	73 14                	jae    ffffffff8020f318 <_RME_Inv_Del.isra.0+0x138>
ffffffff8020f304:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f308:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8020f30c:	e9 eb fe ff ff       	jmp    ffffffff8020f1fc <_RME_Inv_Del.isra.0+0x1c>
ffffffff8020f311:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020f318:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f31f:	c3                   	ret    
ffffffff8020f320:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f327:	c3                   	ret    
ffffffff8020f328:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f32f:	00 
ffffffff8020f330:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f337:	c3                   	ret    
ffffffff8020f338:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f33f:	00 
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8020f340:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f347:	c3                   	ret    
ffffffff8020f348:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f34f:	00 
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff8020f350:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020f357:	c3                   	ret    
ffffffff8020f358:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f35f:	00 
ffffffff8020f360:	85 c0                	test   %eax,%eax
ffffffff8020f362:	75 49                	jne    ffffffff8020f3ad <_RME_Inv_Del.isra.0+0x1cd>
ffffffff8020f364:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff8020f36b:	00 ff ff 
ffffffff8020f36e:	48 21 c1             	and    %rax,%rcx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020f371:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020f376:	0f 94 c1             	sete   %cl
ffffffff8020f379:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
	return (rme_ptr_t)Zero;
ffffffff8020f380:	c3                   	ret    
ffffffff8020f381:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAP_DELETE(Inv_Del,Type_Stat);
ffffffff8020f388:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8020f38f:	c3                   	ret    
        RME_CAP_DEFROST(Inv_Del,Type_Stat);
ffffffff8020f390:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff8020f397:	00 ff ff 
ffffffff8020f39a:	48 21 c1             	and    %rax,%rcx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020f39d:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020f3a2:	0f 94 c1             	sete   %cl
        return RME_ERR_SIV_ACT;
ffffffff8020f3a5:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8020f3ac:	c3                   	ret    
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff8020f3ad:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8020f3b4:	c3                   	ret    
ffffffff8020f3b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020f3bc:	00 00 00 00 

ffffffff8020f3c0 <_RME_Kom_Boot_Crt>:
{
ffffffff8020f3c0:	f3 0f 1e fa          	endbr64 
ffffffff8020f3c4:	48 89 f0             	mov    %rsi,%rax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f3c7:	4c 8b 57 28          	mov    0x28(%rdi),%r10
{
ffffffff8020f3cb:	48 89 d6             	mov    %rdx,%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f3ce:	f6 c4 80             	test   $0x80,%ah
ffffffff8020f3d1:	0f 85 c9 00 00 00    	jne    ffffffff8020f4a0 <_RME_Kom_Boot_Crt+0xe0>
ffffffff8020f3d7:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020f3da:	0f 83 10 01 00 00    	jae    ffffffff8020f4f0 <_RME_Kom_Boot_Crt+0x130>
ffffffff8020f3e0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f3e4:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8020f3e8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f3eb:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f3ee:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f3f1:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff8020f3f5:	66 83 ff 02          	cmp    $0x2,%di
ffffffff8020f3f9:	0f 84 01 01 00 00    	je     ffffffff8020f500 <_RME_Kom_Boot_Crt+0x140>
ffffffff8020f3ff:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f403:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f407:	0f 85 03 01 00 00    	jne    ffffffff8020f510 <_RME_Kom_Boot_Crt+0x150>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f40d:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff8020f411:	48 f7 d0             	not    %rax
ffffffff8020f414:	83 e0 01             	and    $0x1,%eax
ffffffff8020f417:	0f 85 03 01 00 00    	jne    ffffffff8020f520 <_RME_Kom_Boot_Crt+0x160>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kom,struct RME_Cap_Kom*,Kom_Crt);
ffffffff8020f41d:	48 39 72 28          	cmp    %rsi,0x28(%rdx)
ffffffff8020f421:	0f 86 c9 00 00 00    	jbe    ffffffff8020f4f0 <_RME_Kom_Boot_Crt+0x130>
ffffffff8020f427:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020f42b:	48 03 72 18          	add    0x18(%rdx),%rsi
ffffffff8020f42f:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020f432:	48 be 00 00 00 00 01 	movabs $0x100000000,%rsi
ffffffff8020f439:	00 00 00 
ffffffff8020f43c:	f0 48 0f b1 32       	lock cmpxchg %rsi,(%rdx)
ffffffff8020f441:	40 0f 94 c6          	sete   %sil
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff8020f445:	40 84 f6             	test   %sil,%sil
ffffffff8020f448:	0f 84 e2 00 00 00    	je     ffffffff8020f530 <_RME_Kom_Boot_Crt+0x170>
ffffffff8020f44e:	48 8b 05 bb 7b 01 00 	mov    0x17bbb(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff8020f455:	49 83 c0 01          	add    $0x1,%r8
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff8020f459:	48 83 c1 3f          	add    $0x3f,%rcx
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff8020f45d:	49 83 e0 c0          	and    $0xffffffffffffffc0,%r8
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff8020f461:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff8020f465:	48 89 42 20          	mov    %rax,0x20(%rdx)
    Kom_Crt->End=Kom_End-1U;
ffffffff8020f469:	49 83 e8 01          	sub    $0x1,%r8
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff8020f46d:	48 b8 00 00 00 00 00 	movabs $0x2000000000000,%rax
ffffffff8020f474:	00 02 00 
    Kom_Crt->Head.Root_Ref=1U;
ffffffff8020f477:	48 c7 42 08 01 00 00 	movq   $0x1,0x8(%rdx)
ffffffff8020f47e:	00 
    Kom_Crt->Head.Object=0U;
ffffffff8020f47f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff8020f486:	00 
    Kom_Crt->Head.Flag=Flag;
ffffffff8020f487:	4c 89 4a 10          	mov    %r9,0x10(%rdx)
    Kom_Crt->Begin=Kom_Begin;
ffffffff8020f48b:	48 89 4a 28          	mov    %rcx,0x28(%rdx)
    Kom_Crt->End=Kom_End-1U;
ffffffff8020f48f:	4c 89 42 30          	mov    %r8,0x30(%rdx)
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff8020f493:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff8020f496:	31 c0                	xor    %eax,%eax
ffffffff8020f498:	c3                   	ret    
ffffffff8020f499:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f4a0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f4a3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f4a7:	49 39 d2             	cmp    %rdx,%r10
ffffffff8020f4aa:	76 44                	jbe    ffffffff8020f4f0 <_RME_Kom_Boot_Crt+0x130>
ffffffff8020f4ac:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f4b0:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8020f4b4:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff8020f4b7:	49 89 fa             	mov    %rdi,%r10
ffffffff8020f4ba:	49 c1 ea 20          	shr    $0x20,%r10
ffffffff8020f4be:	66 41 83 fa 02       	cmp    $0x2,%r10w
ffffffff8020f4c3:	74 3b                	je     ffffffff8020f500 <_RME_Kom_Boot_Crt+0x140>
ffffffff8020f4c5:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020f4c9:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020f4cd:	75 41                	jne    ffffffff8020f510 <_RME_Kom_Boot_Crt+0x150>
ffffffff8020f4cf:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff8020f4d3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f4d8:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020f4db:	73 13                	jae    ffffffff8020f4f0 <_RME_Kom_Boot_Crt+0x130>
ffffffff8020f4dd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f4e1:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020f4e5:	e9 fe fe ff ff       	jmp    ffffffff8020f3e8 <_RME_Kom_Boot_Crt+0x28>
ffffffff8020f4ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020f4f0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f4f7:	c3                   	ret    
ffffffff8020f4f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f4ff:	00 
ffffffff8020f500:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f507:	c3                   	ret    
ffffffff8020f508:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f50f:	00 
ffffffff8020f510:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f517:	c3                   	ret    
ffffffff8020f518:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f51f:	00 
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f520:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f527:	c3                   	ret    
ffffffff8020f528:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f52f:	00 
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff8020f530:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff8020f537:	c3                   	ret    
ffffffff8020f538:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f53f:	00 

ffffffff8020f540 <_RME_CPU_Local_Init>:
{
ffffffff8020f540:	f3 0f 1e fa          	endbr64 
    Local->CPUID=CPUID;
ffffffff8020f544:	48 89 37             	mov    %rsi,(%rdi)
    Local->Thd_Cur=RME_NULL;
ffffffff8020f547:	48 8d 4f 28          	lea    0x28(%rdi),%rcx
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff8020f54b:	31 d2                	xor    %edx,%edx
    Local->Thd_Cur=RME_NULL;
ffffffff8020f54d:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
ffffffff8020f554:	00 
    Local->Sig_Vct=RME_NULL;
ffffffff8020f555:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
ffffffff8020f55c:	00 
    Local->Sig_Tim=RME_NULL;
ffffffff8020f55d:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
ffffffff8020f564:	00 
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff8020f565:	0f 1f 00             	nopl   (%rax)
    Head->Prev=Head;
ffffffff8020f568:	48 89 d0             	mov    %rdx,%rax
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff8020f56b:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8020f56f:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8020f573:	48 01 f8             	add    %rdi,%rax
    Head->Prev=Head;
ffffffff8020f576:	48 89 48 30          	mov    %rcx,0x30(%rax)
    Head->Next=Head;
ffffffff8020f57a:	48 89 48 28          	mov    %rcx,0x28(%rax)
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff8020f57e:	48 83 c1 10          	add    $0x10,%rcx
ffffffff8020f582:	48 83 fa 40          	cmp    $0x40,%rdx
ffffffff8020f586:	75 e0                	jne    ffffffff8020f568 <_RME_CPU_Local_Init+0x28>
ffffffff8020f588:	48 c7 47 20 00 00 00 	movq   $0x0,0x20(%rdi)
ffffffff8020f58f:	00 
}
ffffffff8020f590:	c3                   	ret    
ffffffff8020f591:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020f598:	00 00 00 00 
ffffffff8020f59c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020f5a0 <_RME_Thd_Pgt>:
{
ffffffff8020f5a0:	f3 0f 1e fa          	endbr64 
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020f5a4:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
ffffffff8020f5ab:	48 8d 97 98 00 00 00 	lea    0x98(%rdi),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020f5b2:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f5b5:	74 11                	je     ffffffff8020f5c8 <_RME_Thd_Pgt+0x28>
ffffffff8020f5b7:	48 85 c0             	test   %rax,%rax
ffffffff8020f5ba:	74 0c                	je     ffffffff8020f5c8 <_RME_Thd_Pgt+0x28>
        return Inv_Top->Prc->Pgt;
ffffffff8020f5bc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f5c0:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff8020f5c4:	c3                   	ret    
ffffffff8020f5c5:	0f 1f 00             	nopl   (%rax)
        return Thd->Sched.Prc->Pgt;
ffffffff8020f5c8:	48 8b 47 58          	mov    0x58(%rdi),%rax
ffffffff8020f5cc:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020f5d0:	c3                   	ret    
ffffffff8020f5d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020f5d8:	00 00 00 00 
ffffffff8020f5dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020f5e0 <_RME_Prc_Boot_Crt>:
{
ffffffff8020f5e0:	f3 0f 1e fa          	endbr64 
ffffffff8020f5e4:	48 89 f0             	mov    %rsi,%rax
ffffffff8020f5e7:	49 89 f9             	mov    %rdi,%r9
ffffffff8020f5ea:	48 89 d6             	mov    %rdx,%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020f5ed:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
ffffffff8020f5f1:	f6 c4 80             	test   $0x80,%ah
ffffffff8020f5f4:	0f 85 c6 01 00 00    	jne    ffffffff8020f7c0 <_RME_Prc_Boot_Crt+0x1e0>
ffffffff8020f5fa:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020f5fd:	0f 83 ad 01 00 00    	jae    ffffffff8020f7b0 <_RME_Prc_Boot_Crt+0x1d0>
ffffffff8020f603:	4d 8b 49 18          	mov    0x18(%r9),%r9
ffffffff8020f607:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f60b:	4a 8d 14 08          	lea    (%rax,%r9,1),%rdx
ffffffff8020f60f:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020f612:	49 89 c2             	mov    %rax,%r10
ffffffff8020f615:	49 c1 ea 20          	shr    $0x20,%r10
ffffffff8020f619:	66 41 83 fa 02       	cmp    $0x2,%r10w
ffffffff8020f61e:	0f 84 3c 02 00 00    	je     ffffffff8020f860 <_RME_Prc_Boot_Crt+0x280>
ffffffff8020f624:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f628:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f62c:	0f 85 3e 02 00 00    	jne    ffffffff8020f870 <_RME_Prc_Boot_Crt+0x290>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f632:	f6 c5 80             	test   $0x80,%ch
ffffffff8020f635:	0f 85 d5 01 00 00    	jne    ffffffff8020f810 <_RME_Prc_Boot_Crt+0x230>
ffffffff8020f63b:	48 39 cf             	cmp    %rcx,%rdi
ffffffff8020f63e:	0f 86 6c 01 00 00    	jbe    ffffffff8020f7b0 <_RME_Prc_Boot_Crt+0x1d0>
ffffffff8020f644:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020f648:	4c 01 c9             	add    %r9,%rcx
ffffffff8020f64b:	48 8b 01             	mov    (%rcx),%rax
ffffffff8020f64e:	49 89 c2             	mov    %rax,%r10
ffffffff8020f651:	49 c1 ea 20          	shr    $0x20,%r10
ffffffff8020f655:	66 41 83 fa 02       	cmp    $0x2,%r10w
ffffffff8020f65a:	0f 84 00 02 00 00    	je     ffffffff8020f860 <_RME_Prc_Boot_Crt+0x280>
ffffffff8020f660:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f664:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f668:	0f 85 02 02 00 00    	jne    ffffffff8020f870 <_RME_Prc_Boot_Crt+0x290>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020f66e:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020f675:	0f 84 05 02 00 00    	je     ffffffff8020f880 <_RME_Prc_Boot_Crt+0x2a0>
ffffffff8020f67b:	4c 89 c0             	mov    %r8,%rax
ffffffff8020f67e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f682:	48 39 c7             	cmp    %rax,%rdi
ffffffff8020f685:	0f 86 25 01 00 00    	jbe    ffffffff8020f7b0 <_RME_Prc_Boot_Crt+0x1d0>
ffffffff8020f68b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f68f:	4c 01 c8             	add    %r9,%rax
ffffffff8020f692:	48 8b 38             	mov    (%rax),%rdi
ffffffff8020f695:	49 89 f9             	mov    %rdi,%r9
ffffffff8020f698:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff8020f69c:	66 41 83 f9 02       	cmp    $0x2,%r9w
ffffffff8020f6a1:	0f 84 b9 01 00 00    	je     ffffffff8020f860 <_RME_Prc_Boot_Crt+0x280>
ffffffff8020f6a7:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020f6ab:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020f6af:	0f 85 bb 01 00 00    	jne    ffffffff8020f870 <_RME_Prc_Boot_Crt+0x290>
ffffffff8020f6b5:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff8020f6b9:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020f6c0:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020f6c3:	0f 83 e7 00 00 00    	jae    ffffffff8020f7b0 <_RME_Prc_Boot_Crt+0x1d0>
ffffffff8020f6c9:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020f6cd:	4c 03 40 18          	add    0x18(%rax),%r8
ffffffff8020f6d1:	49 8b 00             	mov    (%r8),%rax
ffffffff8020f6d4:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f6d7:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff8020f6db:	66 83 ff 02          	cmp    $0x2,%di
ffffffff8020f6df:	0f 84 7b 01 00 00    	je     ffffffff8020f860 <_RME_Prc_Boot_Crt+0x280>
ffffffff8020f6e5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f6e9:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020f6ed:	0f 85 7d 01 00 00    	jne    ffffffff8020f870 <_RME_Prc_Boot_Crt+0x290>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8020f6f3:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff8020f6f7:	48 f7 d0             	not    %rax
ffffffff8020f6fa:	83 e0 01             	and    $0x1,%eax
ffffffff8020f6fd:	0f 85 95 01 00 00    	jne    ffffffff8020f898 <_RME_Prc_Boot_Crt+0x2b8>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff8020f703:	f6 41 10 40          	testb  $0x40,0x10(%rcx)
ffffffff8020f707:	0f 84 8b 01 00 00    	je     ffffffff8020f898 <_RME_Prc_Boot_Crt+0x2b8>
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff8020f70d:	41 f6 40 10 40       	testb  $0x40,0x10(%r8)
ffffffff8020f712:	0f 84 80 01 00 00    	je     ffffffff8020f898 <_RME_Prc_Boot_Crt+0x2b8>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff8020f718:	48 39 72 28          	cmp    %rsi,0x28(%rdx)
ffffffff8020f71c:	0f 86 8e 00 00 00    	jbe    ffffffff8020f7b0 <_RME_Prc_Boot_Crt+0x1d0>
ffffffff8020f722:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020f726:	48 03 72 18          	add    0x18(%rdx),%rsi
ffffffff8020f72a:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f731:	00 00 00 
ffffffff8020f734:	f0 48 0f b1 16       	lock cmpxchg %rdx,(%rsi)
ffffffff8020f739:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8020f73c:	84 d2                	test   %dl,%dl
ffffffff8020f73e:	0f 84 5c 01 00 00    	je     ffffffff8020f8a0 <_RME_Prc_Boot_Crt+0x2c0>
ffffffff8020f744:	48 8b 05 c5 78 01 00 	mov    0x178c5(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    Prc_Crt->Head.Root_Ref=1U;
ffffffff8020f74b:	48 c7 46 08 01 00 00 	movq   $0x1,0x8(%rsi)
ffffffff8020f752:	00 
    Prc_Crt->Head.Object=0U;
ffffffff8020f753:	48 c7 46 18 00 00 00 	movq   $0x0,0x18(%rsi)
ffffffff8020f75a:	00 
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8020f75b:	48 89 46 20          	mov    %rax,0x20(%rsi)
    Prc_Crt->Head.Flag=RME_PRC_FLAG_INV|RME_PRC_FLAG_THD;
ffffffff8020f75f:	48 c7 46 10 03 00 00 	movq   $0x3,0x10(%rsi)
ffffffff8020f766:	00 
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff8020f767:	8b 11                	mov    (%rcx),%edx
ffffffff8020f769:	85 d2                	test   %edx,%edx
ffffffff8020f76b:	74 04                	je     ffffffff8020f771 <_RME_Prc_Boot_Crt+0x191>
ffffffff8020f76d:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff8020f771:	41 8b 00             	mov    (%r8),%eax
ffffffff8020f774:	85 c0                	test   %eax,%eax
ffffffff8020f776:	74 04                	je     ffffffff8020f77c <_RME_Prc_Boot_Crt+0x19c>
ffffffff8020f778:	4d 8b 40 08          	mov    0x8(%r8),%r8
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020f77c:	b8 01 00 00 00       	mov    $0x1,%eax
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff8020f781:	48 89 4e 28          	mov    %rcx,0x28(%rsi)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff8020f785:	4c 89 46 30          	mov    %r8,0x30(%rsi)
ffffffff8020f789:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f78c:	f0 48 0f c1 51 08    	lock xadd %rdx,0x8(%rcx)
ffffffff8020f792:	f0 49 0f c1 40 08    	lock xadd %rax,0x8(%r8)
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff8020f798:	48 b8 00 00 00 00 00 	movabs $0x5000000000000,%rax
ffffffff8020f79f:	00 05 00 
ffffffff8020f7a2:	48 89 06             	mov    %rax,(%rsi)
    return 0;
ffffffff8020f7a5:	31 c0                	xor    %eax,%eax
ffffffff8020f7a7:	c3                   	ret    
ffffffff8020f7a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f7af:	00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020f7b0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f7b7:	c3                   	ret    
ffffffff8020f7b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f7bf:	00 
ffffffff8020f7c0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f7c3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f7c7:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020f7ca:	73 e4                	jae    ffffffff8020f7b0 <_RME_Prc_Boot_Crt+0x1d0>
ffffffff8020f7cc:	4d 8b 49 18          	mov    0x18(%r9),%r9
ffffffff8020f7d0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f7d4:	4c 01 ca             	add    %r9,%rdx
ffffffff8020f7d7:	4c 8b 12             	mov    (%rdx),%r10
ffffffff8020f7da:	4d 89 d3             	mov    %r10,%r11
ffffffff8020f7dd:	49 c1 eb 20          	shr    $0x20,%r11
ffffffff8020f7e1:	66 41 83 fb 02       	cmp    $0x2,%r11w
ffffffff8020f7e6:	74 78                	je     ffffffff8020f860 <_RME_Prc_Boot_Crt+0x280>
ffffffff8020f7e8:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020f7ec:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020f7f0:	75 7e                	jne    ffffffff8020f870 <_RME_Prc_Boot_Crt+0x290>
ffffffff8020f7f2:	4c 8b 52 28          	mov    0x28(%rdx),%r10
ffffffff8020f7f6:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f7fb:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020f7fe:	73 b0                	jae    ffffffff8020f7b0 <_RME_Prc_Boot_Crt+0x1d0>
ffffffff8020f800:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f804:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020f808:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f80b:	e9 ff fd ff ff       	jmp    ffffffff8020f60f <_RME_Prc_Boot_Crt+0x2f>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f810:	48 89 c8             	mov    %rcx,%rax
ffffffff8020f813:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f817:	48 39 c7             	cmp    %rax,%rdi
ffffffff8020f81a:	76 94                	jbe    ffffffff8020f7b0 <_RME_Prc_Boot_Crt+0x1d0>
ffffffff8020f81c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f820:	4c 01 c8             	add    %r9,%rax
ffffffff8020f823:	4c 8b 10             	mov    (%rax),%r10
ffffffff8020f826:	4d 89 d3             	mov    %r10,%r11
ffffffff8020f829:	49 c1 eb 20          	shr    $0x20,%r11
ffffffff8020f82d:	66 41 83 fb 02       	cmp    $0x2,%r11w
ffffffff8020f832:	74 2c                	je     ffffffff8020f860 <_RME_Prc_Boot_Crt+0x280>
ffffffff8020f834:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020f838:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020f83c:	75 32                	jne    ffffffff8020f870 <_RME_Prc_Boot_Crt+0x290>
ffffffff8020f83e:	4c 8b 50 28          	mov    0x28(%rax),%r10
ffffffff8020f842:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff8020f848:	4c 39 d1             	cmp    %r10,%rcx
ffffffff8020f84b:	0f 83 5f ff ff ff    	jae    ffffffff8020f7b0 <_RME_Prc_Boot_Crt+0x1d0>
ffffffff8020f851:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020f855:	48 03 48 18          	add    0x18(%rax),%rcx
ffffffff8020f859:	e9 ed fd ff ff       	jmp    ffffffff8020f64b <_RME_Prc_Boot_Crt+0x6b>
ffffffff8020f85e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020f860:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f867:	c3                   	ret    
ffffffff8020f868:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f86f:	00 
ffffffff8020f870:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f877:	c3                   	ret    
ffffffff8020f878:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f87f:	00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020f880:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020f883:	0f 86 27 ff ff ff    	jbe    ffffffff8020f7b0 <_RME_Prc_Boot_Crt+0x1d0>
ffffffff8020f889:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020f88d:	4d 01 c8             	add    %r9,%r8
ffffffff8020f890:	e9 3c fe ff ff       	jmp    ffffffff8020f6d1 <_RME_Prc_Boot_Crt+0xf1>
ffffffff8020f895:	0f 1f 00             	nopl   (%rax)
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8020f898:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f89f:	c3                   	ret    
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8020f8a0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff8020f8a7:	c3                   	ret    
ffffffff8020f8a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f8af:	00 

ffffffff8020f8b0 <_RME_Thd_Boot_Crt>:
{
ffffffff8020f8b0:	f3 0f 1e fa          	endbr64 
    if(Prio>=RME_PREEMPT_PRIO_NUM)
ffffffff8020f8b4:	49 83 f9 3f          	cmp    $0x3f,%r9
ffffffff8020f8b8:	0f 87 42 03 00 00    	ja     ffffffff8020fc00 <_RME_Thd_Boot_Crt+0x350>
ffffffff8020f8be:	48 89 f0             	mov    %rsi,%rax
{
ffffffff8020f8c1:	41 55                	push   %r13
ffffffff8020f8c3:	4d 89 cd             	mov    %r9,%r13
ffffffff8020f8c6:	41 54                	push   %r12
ffffffff8020f8c8:	49 89 d4             	mov    %rdx,%r12
ffffffff8020f8cb:	55                   	push   %rbp
ffffffff8020f8cc:	4c 89 c5             	mov    %r8,%rbp
ffffffff8020f8cf:	53                   	push   %rbx
ffffffff8020f8d0:	48 89 cb             	mov    %rcx,%rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f8d3:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020f8d7:	f6 c4 80             	test   $0x80,%ah
ffffffff8020f8da:	0f 84 58 02 00 00    	je     ffffffff8020fb38 <_RME_Thd_Boot_Crt+0x288>
ffffffff8020f8e0:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020f8e3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f8e7:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020f8ea:	0f 83 b0 02 00 00    	jae    ffffffff8020fba0 <_RME_Thd_Boot_Crt+0x2f0>
ffffffff8020f8f0:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff8020f8f4:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f8f8:	48 01 f2             	add    %rsi,%rdx
ffffffff8020f8fb:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff8020f8fe:	49 89 f8             	mov    %rdi,%r8
ffffffff8020f901:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff8020f905:	66 41 83 f8 02       	cmp    $0x2,%r8w
ffffffff8020f90a:	0f 84 b0 02 00 00    	je     ffffffff8020fbc0 <_RME_Thd_Boot_Crt+0x310>
ffffffff8020f910:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020f914:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020f918:	0f 85 b2 02 00 00    	jne    ffffffff8020fbd0 <_RME_Thd_Boot_Crt+0x320>
ffffffff8020f91e:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff8020f922:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f927:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020f92a:	0f 83 70 02 00 00    	jae    ffffffff8020fba0 <_RME_Thd_Boot_Crt+0x2f0>
ffffffff8020f930:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f934:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020f938:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f93b:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020f93e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f941:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff8020f945:	66 83 ff 02          	cmp    $0x2,%di
ffffffff8020f949:	0f 84 71 02 00 00    	je     ffffffff8020fbc0 <_RME_Thd_Boot_Crt+0x310>
ffffffff8020f94f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f953:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f957:	0f 85 73 02 00 00    	jne    ffffffff8020fbd0 <_RME_Thd_Boot_Crt+0x320>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020f95d:	f6 c7 80             	test   $0x80,%bh
ffffffff8020f960:	0f 85 ea 01 00 00    	jne    ffffffff8020fb50 <_RME_Thd_Boot_Crt+0x2a0>
ffffffff8020f966:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020f969:	0f 83 31 02 00 00    	jae    ffffffff8020fba0 <_RME_Thd_Boot_Crt+0x2f0>
ffffffff8020f96f:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020f973:	48 01 f3             	add    %rsi,%rbx
ffffffff8020f976:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020f979:	48 89 c1             	mov    %rax,%rcx
ffffffff8020f97c:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020f980:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020f984:	0f 84 36 02 00 00    	je     ffffffff8020fbc0 <_RME_Thd_Boot_Crt+0x310>
ffffffff8020f98a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f98e:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8020f992:	0f 85 38 02 00 00    	jne    ffffffff8020fbd0 <_RME_Thd_Boot_Crt+0x320>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f998:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff8020f99c:	48 f7 d0             	not    %rax
ffffffff8020f99f:	83 e0 01             	and    $0x1,%eax
ffffffff8020f9a2:	0f 85 38 02 00 00    	jne    ffffffff8020fbe0 <_RME_Thd_Boot_Crt+0x330>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff8020f9a8:	f6 43 10 02          	testb  $0x2,0x10(%rbx)
ffffffff8020f9ac:	0f 84 2e 02 00 00    	je     ffffffff8020fbe0 <_RME_Thd_Boot_Crt+0x330>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8020f9b2:	4c 39 62 28          	cmp    %r12,0x28(%rdx)
ffffffff8020f9b6:	0f 86 e4 01 00 00    	jbe    ffffffff8020fba0 <_RME_Thd_Boot_Crt+0x2f0>
ffffffff8020f9bc:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8020f9c0:	4c 03 62 18          	add    0x18(%rdx),%r12
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020f9c4:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f9cb:	00 00 00 
ffffffff8020f9ce:	f0 49 0f b1 14 24    	lock cmpxchg %rdx,(%r12)
ffffffff8020f9d4:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020f9d7:	84 d2                	test   %dl,%dl
ffffffff8020f9d9:	0f 84 11 02 00 00    	je     ffffffff8020fbf0 <_RME_Thd_Boot_Crt+0x340>
ffffffff8020f9df:	48 8b 05 2a 76 01 00 	mov    0x1762a(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    if(_RME_Kot_Mark(Vaddr,RME_THD_SIZE(0U))!=0)
ffffffff8020f9e6:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff8020f9eb:	48 89 ef             	mov    %rbp,%rdi
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020f9ee:	49 89 44 24 20       	mov    %rax,0x20(%r12)
    if(_RME_Kot_Mark(Vaddr,RME_THD_SIZE(0U))!=0)
ffffffff8020f9f3:	e8 18 df ff ff       	call   ffffffff8020d910 <_RME_Kot_Mark>
ffffffff8020f9f8:	48 85 c0             	test   %rax,%rax
ffffffff8020f9fb:	0f 85 07 02 00 00    	jne    ffffffff8020fc08 <_RME_Thd_Boot_Crt+0x358>
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff8020fa01:	48 be ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rsi
ffffffff8020fa08:	ff ff 7f 
    Thread->Sched.TID=0U;
ffffffff8020fa0b:	48 c7 45 20 00 00 00 	movq   $0x0,0x20(%rbp)
ffffffff8020fa12:	00 
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff8020fa13:	48 89 75 30          	mov    %rsi,0x30(%rbp)
    Thread->Sched.State=RME_THD_READY;
ffffffff8020fa17:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff8020fa1e:	00 
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8020fa1f:	8b 13                	mov    (%rbx),%edx
ffffffff8020fa21:	85 d2                	test   %edx,%edx
ffffffff8020fa23:	0f 85 87 01 00 00    	jne    ffffffff8020fbb0 <_RME_Thd_Boot_Crt+0x300>
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8020fa29:	48 8d 55 10          	lea    0x10(%rbp),%rdx
    Thread->Sched.Local=Local;
ffffffff8020fa2d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    Thread->Sched.Prc=Prc_Root;
ffffffff8020fa32:	48 89 5d 58          	mov    %rbx,0x58(%rbp)
    Head->Prev=Head;
ffffffff8020fa36:	48 89 55 18          	mov    %rdx,0x18(%rbp)
    Head->Next=Head;
ffffffff8020fa3a:	48 89 55 10          	mov    %rdx,0x10(%rbp)
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff8020fa3e:	48 8d 55 78          	lea    0x78(%rbp),%rdx
    Head->Prev=Head;
ffffffff8020fa42:	48 89 95 80 00 00 00 	mov    %rdx,0x80(%rbp)
    Head->Next=Head;
ffffffff8020fa49:	48 89 55 78          	mov    %rdx,0x78(%rbp)
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff8020fa4d:	48 8d 95 b0 00 00 00 	lea    0xb0(%rbp),%rdx
    Thread->Sched.Local=Local;
ffffffff8020fa54:	48 89 75 28          	mov    %rsi,0x28(%rbp)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020fa58:	be 01 00 00 00       	mov    $0x1,%esi
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff8020fa5d:	48 89 95 90 00 00 00 	mov    %rdx,0x90(%rbp)
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff8020fa64:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    Head->Prev=Head;
ffffffff8020fa6b:	48 89 95 a0 00 00 00 	mov    %rdx,0xa0(%rbp)
    Thread->Sched.Signal=0U;
ffffffff8020fa72:	48 c7 45 50 00 00 00 	movq   $0x0,0x50(%rbp)
ffffffff8020fa79:	00 
    Head->Next=Head;
ffffffff8020fa7a:	48 89 95 98 00 00 00 	mov    %rdx,0x98(%rbp)
ffffffff8020fa81:	48 89 f2             	mov    %rsi,%rdx
    Thread->Sched.Prio=Prio;
ffffffff8020fa84:	4c 89 6d 40          	mov    %r13,0x40(%rbp)
    Thread->Sched.Prio_Max=RME_PREEMPT_PRIO_NUM-1U;
ffffffff8020fa88:	48 c7 45 48 3f 00 00 	movq   $0x3f,0x48(%rbp)
ffffffff8020fa8f:	00 
    Thread->Sched.Sched_Ref=1U;
ffffffff8020fa90:	48 c7 45 60 01 00 00 	movq   $0x1,0x60(%rbp)
ffffffff8020fa97:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff8020fa98:	48 c7 45 70 00 00 00 	movq   $0x0,0x70(%rbp)
ffffffff8020fa9f:	00 
    Thread->Ctx.Hyp_Attr=0U;
ffffffff8020faa0:	48 c7 85 88 00 00 00 	movq   $0x0,0x88(%rbp)
ffffffff8020faa7:	00 00 00 00 
    Thread->Ctx.Invstk_Depth=0U;
ffffffff8020faab:	48 c7 85 a8 00 00 00 	movq   $0x0,0xa8(%rbp)
ffffffff8020fab2:	00 00 00 00 
    Thd_Crt->Head.Root_Ref=1U;
ffffffff8020fab6:	49 c7 44 24 08 01 00 	movq   $0x1,0x8(%r12)
ffffffff8020fabd:	00 00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff8020fabf:	49 89 6c 24 18       	mov    %rbp,0x18(%r12)
    Thd_Crt->Head.Flag=RME_THD_FLAG_SCHED_PRIO|RME_THD_FLAG_SCHED_PARENT|
ffffffff8020fac4:	49 c7 44 24 10 ec 01 	movq   $0x1ec,0x10(%r12)
ffffffff8020facb:	00 00 
ffffffff8020facd:	f0 48 0f c1 53 08    	lock xadd %rdx,0x8(%rbx)
    Prio=Thd->Sched.Prio;
ffffffff8020fad3:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff8020fad7:	48 8b 55 28          	mov    0x28(%rbp),%rdx
    Local->Thd_Cur=Thread;
ffffffff8020fadb:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx
                  &(Local->Run.List[Prio]));
ffffffff8020fae0:	48 89 cf             	mov    %rcx,%rdi
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020fae3:	48 d3 e6             	shl    %cl,%rsi
                  &(Local->Run.List[Prio]));
ffffffff8020fae6:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff8020faea:	4c 8d 4c 3a 28       	lea    0x28(%rdx,%rdi,1),%r9
ffffffff8020faef:	48 89 cf             	mov    %rcx,%rdi
ffffffff8020faf2:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff8020faf6:	48 01 d7             	add    %rdx,%rdi
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8020faf9:	4c 8b 47 30          	mov    0x30(%rdi),%r8
    Next->Prev=New;
ffffffff8020fafd:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020fb01:	48 89 cf             	mov    %rcx,%rdi
ffffffff8020fb04:	48 c1 ef 06          	shr    $0x6,%rdi
    New->Next=Next;
ffffffff8020fb08:	4c 89 4d 00          	mov    %r9,0x0(%rbp)
    New->Prev=Prev;
ffffffff8020fb0c:	4c 89 45 08          	mov    %r8,0x8(%rbp)
    Prev->Next=New;
ffffffff8020fb10:	49 89 28             	mov    %rbp,(%r8)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020fb13:	48 09 74 fa 20       	or     %rsi,0x20(%rdx,%rdi,8)
    Local->Thd_Cur=Thread;
ffffffff8020fb18:	48 89 6b 08          	mov    %rbp,0x8(%rbx)
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff8020fb1c:	48 bb 00 00 00 00 00 	movabs $0x6000000000000,%rbx
ffffffff8020fb23:	00 06 00 
ffffffff8020fb26:	49 89 1c 24          	mov    %rbx,(%r12)
}
ffffffff8020fb2a:	5b                   	pop    %rbx
ffffffff8020fb2b:	5d                   	pop    %rbp
ffffffff8020fb2c:	41 5c                	pop    %r12
ffffffff8020fb2e:	41 5d                	pop    %r13
ffffffff8020fb30:	c3                   	ret    
ffffffff8020fb31:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fb38:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020fb3b:	73 63                	jae    ffffffff8020fba0 <_RME_Thd_Boot_Crt+0x2f0>
ffffffff8020fb3d:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff8020fb41:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fb45:	48 8d 14 30          	lea    (%rax,%rsi,1),%rdx
ffffffff8020fb49:	e9 ed fd ff ff       	jmp    ffffffff8020f93b <_RME_Thd_Boot_Crt+0x8b>
ffffffff8020fb4e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020fb50:	48 89 d8             	mov    %rbx,%rax
ffffffff8020fb53:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fb57:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020fb5a:	73 44                	jae    ffffffff8020fba0 <_RME_Thd_Boot_Crt+0x2f0>
ffffffff8020fb5c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fb60:	48 01 f0             	add    %rsi,%rax
ffffffff8020fb63:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020fb66:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020fb69:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020fb6d:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020fb71:	74 4d                	je     ffffffff8020fbc0 <_RME_Thd_Boot_Crt+0x310>
ffffffff8020fb73:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020fb77:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020fb7b:	75 53                	jne    ffffffff8020fbd0 <_RME_Thd_Boot_Crt+0x320>
ffffffff8020fb7d:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8020fb81:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020fb87:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020fb8a:	73 14                	jae    ffffffff8020fba0 <_RME_Thd_Boot_Crt+0x2f0>
ffffffff8020fb8c:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020fb90:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8020fb94:	e9 dd fd ff ff       	jmp    ffffffff8020f976 <_RME_Thd_Boot_Crt+0xc6>
ffffffff8020fb99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
}
ffffffff8020fba0:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fba1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020fba8:	5d                   	pop    %rbp
ffffffff8020fba9:	41 5c                	pop    %r12
ffffffff8020fbab:	41 5d                	pop    %r13
ffffffff8020fbad:	c3                   	ret    
ffffffff8020fbae:	66 90                	xchg   %ax,%ax
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8020fbb0:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff8020fbb4:	e9 70 fe ff ff       	jmp    ffffffff8020fa29 <_RME_Thd_Boot_Crt+0x179>
ffffffff8020fbb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
}
ffffffff8020fbc0:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fbc1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020fbc8:	5d                   	pop    %rbp
ffffffff8020fbc9:	41 5c                	pop    %r12
ffffffff8020fbcb:	41 5d                	pop    %r13
ffffffff8020fbcd:	c3                   	ret    
ffffffff8020fbce:	66 90                	xchg   %ax,%ax
ffffffff8020fbd0:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fbd1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020fbd8:	5d                   	pop    %rbp
ffffffff8020fbd9:	41 5c                	pop    %r12
ffffffff8020fbdb:	41 5d                	pop    %r13
ffffffff8020fbdd:	c3                   	ret    
ffffffff8020fbde:	66 90                	xchg   %ax,%ax
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fbe0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020fbe7:	e9 3e ff ff ff       	jmp    ffffffff8020fb2a <_RME_Thd_Boot_Crt+0x27a>
ffffffff8020fbec:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020fbf0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020fbf7:	e9 2e ff ff ff       	jmp    ffffffff8020fb2a <_RME_Thd_Boot_Crt+0x27a>
ffffffff8020fbfc:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_PRIO;
ffffffff8020fc00:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
}
ffffffff8020fc07:	c3                   	ret    
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff8020fc08:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
ffffffff8020fc0f:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020fc10:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020fc17:	e9 0e ff ff ff       	jmp    ffffffff8020fb2a <_RME_Thd_Boot_Crt+0x27a>
ffffffff8020fc1c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020fc20 <_RME_Sig_Boot_Crt>:
{
ffffffff8020fc20:	f3 0f 1e fa          	endbr64 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fc24:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020fc28:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8020fc2e:	0f 85 bc 00 00 00    	jne    ffffffff8020fcf0 <_RME_Sig_Boot_Crt+0xd0>
ffffffff8020fc34:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020fc37:	0f 83 03 01 00 00    	jae    ffffffff8020fd40 <_RME_Sig_Boot_Crt+0x120>
ffffffff8020fc3d:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020fc41:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8020fc45:	48 8b 06             	mov    (%rsi),%rax
ffffffff8020fc48:	48 89 c1             	mov    %rax,%rcx
ffffffff8020fc4b:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020fc4f:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020fc53:	0f 84 f7 00 00 00    	je     ffffffff8020fd50 <_RME_Sig_Boot_Crt+0x130>
ffffffff8020fc59:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fc5d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fc61:	0f 85 f9 00 00 00    	jne    ffffffff8020fd60 <_RME_Sig_Boot_Crt+0x140>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8020fc67:	48 8b 46 10          	mov    0x10(%rsi),%rax
ffffffff8020fc6b:	48 f7 d0             	not    %rax
ffffffff8020fc6e:	83 e0 01             	and    $0x1,%eax
ffffffff8020fc71:	0f 85 f9 00 00 00    	jne    ffffffff8020fd70 <_RME_Sig_Boot_Crt+0x150>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff8020fc77:	48 39 56 28          	cmp    %rdx,0x28(%rsi)
ffffffff8020fc7b:	0f 86 bf 00 00 00    	jbe    ffffffff8020fd40 <_RME_Sig_Boot_Crt+0x120>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020fc81:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff8020fc88:	00 00 00 
ffffffff8020fc8b:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020fc8f:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff8020fc93:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020fc98:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff8020fc9b:	84 c9                	test   %cl,%cl
ffffffff8020fc9d:	0f 84 dd 00 00 00    	je     ffffffff8020fd80 <_RME_Sig_Boot_Crt+0x160>
ffffffff8020fca3:	48 8b 05 66 73 01 00 	mov    0x17366(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    Sig_Crt->Head.Root_Ref=1U;
ffffffff8020fcaa:	48 c7 42 08 01 00 00 	movq   $0x1,0x8(%rdx)
ffffffff8020fcb1:	00 
    Sig_Crt->Head.Object=0U;
ffffffff8020fcb2:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff8020fcb9:	00 
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff8020fcba:	48 89 42 20          	mov    %rax,0x20(%rdx)
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff8020fcbe:	48 b8 00 00 00 00 00 	movabs $0x8000000000000,%rax
ffffffff8020fcc5:	00 08 00 
ffffffff8020fcc8:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff8020fccb:	31 c0                	xor    %eax,%eax
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff8020fccd:	48 c7 42 10 3f 00 00 	movq   $0x3f,0x10(%rdx)
ffffffff8020fcd4:	00 
    Sig_Crt->Sig_Num=0U;
ffffffff8020fcd5:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
ffffffff8020fcdc:	00 
    Sig_Crt->Thd=RME_NULL;
ffffffff8020fcdd:	48 c7 42 30 00 00 00 	movq   $0x0,0x30(%rdx)
ffffffff8020fce4:	00 
    return 0;
ffffffff8020fce5:	c3                   	ret    
ffffffff8020fce6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020fced:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fcf0:	48 89 f0             	mov    %rsi,%rax
ffffffff8020fcf3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fcf7:	48 39 c1             	cmp    %rax,%rcx
ffffffff8020fcfa:	76 44                	jbe    ffffffff8020fd40 <_RME_Sig_Boot_Crt+0x120>
ffffffff8020fcfc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fd00:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8020fd04:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020fd07:	48 89 cf             	mov    %rcx,%rdi
ffffffff8020fd0a:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff8020fd0e:	66 83 ff 02          	cmp    $0x2,%di
ffffffff8020fd12:	74 3c                	je     ffffffff8020fd50 <_RME_Sig_Boot_Crt+0x130>
ffffffff8020fd14:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020fd18:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020fd1c:	75 42                	jne    ffffffff8020fd60 <_RME_Sig_Boot_Crt+0x140>
ffffffff8020fd1e:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8020fd22:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8020fd28:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020fd2b:	73 13                	jae    ffffffff8020fd40 <_RME_Sig_Boot_Crt+0x120>
ffffffff8020fd2d:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020fd31:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff8020fd35:	e9 0b ff ff ff       	jmp    ffffffff8020fc45 <_RME_Sig_Boot_Crt+0x25>
ffffffff8020fd3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020fd40:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fd47:	c3                   	ret    
ffffffff8020fd48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020fd4f:	00 
ffffffff8020fd50:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fd57:	c3                   	ret    
ffffffff8020fd58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020fd5f:	00 
ffffffff8020fd60:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fd67:	c3                   	ret    
ffffffff8020fd68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020fd6f:	00 
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8020fd70:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020fd77:	c3                   	ret    
ffffffff8020fd78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020fd7f:	00 
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff8020fd80:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff8020fd87:	c3                   	ret    
ffffffff8020fd88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020fd8f:	00 

ffffffff8020fd90 <_RME_Kern_High>:
{
ffffffff8020fd90:	f3 0f 1e fa          	endbr64 
ffffffff8020fd94:	55                   	push   %rbp
ffffffff8020fd95:	53                   	push   %rbx
ffffffff8020fd96:	48 89 f3             	mov    %rsi,%rbx
ffffffff8020fd99:	48 83 ec 08          	sub    $0x8,%rsp
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff8020fd9d:	48 8b 46 20          	mov    0x20(%rsi),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff8020fda1:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff8020fda5:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020fda9:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff8020fdac:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff8020fdb0:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff8020fdb5:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8020fdb9:	48 8b 6c 06 08       	mov    0x8(%rsi,%rax,1),%rbp
    Thd_Cur=Local->Thd_Cur;
ffffffff8020fdbe:	48 8b 76 08          	mov    0x8(%rsi),%rsi
    if(Thd_New==Thd_Cur)
ffffffff8020fdc2:	48 39 ee             	cmp    %rbp,%rsi
ffffffff8020fdc5:	74 1d                	je     ffffffff8020fde4 <_RME_Kern_High+0x54>
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff8020fdc7:	48 83 7e 38 00       	cmpq   $0x0,0x38(%rsi)
ffffffff8020fdcc:	75 0a                	jne    ffffffff8020fdd8 <_RME_Kern_High+0x48>
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff8020fdce:	48 8b 46 40          	mov    0x40(%rsi),%rax
ffffffff8020fdd2:	48 39 45 40          	cmp    %rax,0x40(%rbp)
ffffffff8020fdd6:	76 0c                	jbe    ffffffff8020fde4 <_RME_Kern_High+0x54>
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff8020fdd8:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020fddb:	e8 20 d0 ff ff       	call   ffffffff8020ce00 <_RME_Run_Swt.isra.0>
    Local->Thd_Cur=Thd_New;
ffffffff8020fde0:	48 89 6b 08          	mov    %rbp,0x8(%rbx)
}
ffffffff8020fde4:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020fde8:	5b                   	pop    %rbx
ffffffff8020fde9:	5d                   	pop    %rbp
ffffffff8020fdea:	c3                   	ret    
ffffffff8020fdeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff8020fdf0 <_RME_Thd_Sched_Prio>:
    if((Number==0U)||(Number>3U))
ffffffff8020fdf0:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
ffffffff8020fdf4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fdf8:	0f 87 76 02 00 00    	ja     ffffffff80210074 <_RME_Thd_Sched_Prio+0x284>
{
ffffffff8020fdfe:	41 57                	push   %r15
ffffffff8020fe00:	41 56                	push   %r14
ffffffff8020fe02:	49 89 d6             	mov    %rdx,%r14
ffffffff8020fe05:	41 55                	push   %r13
    for(Count=0U;Count<Number;Count++)
ffffffff8020fe07:	45 31 ed             	xor    %r13d,%r13d
{
ffffffff8020fe0a:	41 54                	push   %r12
ffffffff8020fe0c:	49 89 fc             	mov    %rdi,%r12
ffffffff8020fe0f:	55                   	push   %rbp
ffffffff8020fe10:	48 89 f5             	mov    %rsi,%rbp
ffffffff8020fe13:	53                   	push   %rbx
ffffffff8020fe14:	48 89 cb             	mov    %rcx,%rbx
ffffffff8020fe17:	48 83 ec 68          	sub    $0x68,%rsp
    Cap_Thd[2]=Cap_Thd2;
ffffffff8020fe1b:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
ffffffff8020fe22:	00 
    Cap_Thd[1]=Cap_Thd1;
ffffffff8020fe23:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
    Prio[0]=Prio0;
ffffffff8020fe28:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
    Cap_Thd[2]=Cap_Thd2;
ffffffff8020fe2d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    Prio[1]=Prio1;
ffffffff8020fe32:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
ffffffff8020fe39:	00 
ffffffff8020fe3a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    Prio[2]=Prio2;
ffffffff8020fe3f:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
ffffffff8020fe46:	00 
ffffffff8020fe47:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    Local=RME_CPU_LOCAL();
ffffffff8020fe4c:	e8 ee b9 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff8020fe51:	49 8b 54 24 28       	mov    0x28(%r12),%rdx
    Local=RME_CPU_LOCAL();
ffffffff8020fe56:	49 89 c7             	mov    %rax,%r15
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff8020fe59:	f6 c7 80             	test   $0x80,%bh
ffffffff8020fe5c:	75 79                	jne    ffffffff8020fed7 <_RME_Thd_Sched_Prio+0xe7>
ffffffff8020fe5e:	48 39 d3             	cmp    %rdx,%rbx
ffffffff8020fe61:	0f 83 e9 00 00 00    	jae    ffffffff8020ff50 <_RME_Thd_Sched_Prio+0x160>
ffffffff8020fe67:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020fe6b:	49 03 5c 24 18       	add    0x18(%r12),%rbx
ffffffff8020fe70:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020fe73:	48 89 c1             	mov    %rax,%rcx
ffffffff8020fe76:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020fe7a:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020fe7e:	0f 84 ad 00 00 00    	je     ffffffff8020ff31 <_RME_Thd_Sched_Prio+0x141>
ffffffff8020fe84:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fe88:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8020fe8c:	0f 85 de 00 00 00    	jne    ffffffff8020ff70 <_RME_Thd_Sched_Prio+0x180>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff8020fe92:	f6 43 10 08          	testb  $0x8,0x10(%rbx)
ffffffff8020fe96:	0f 84 f4 00 00 00    	je     ffffffff8020ff90 <_RME_Thd_Sched_Prio+0x1a0>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff8020fe9c:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff8020fea0:	4a 89 44 ec 40       	mov    %rax,0x40(%rsp,%r13,8)
        if(Thread[Count]->Sched.Local!=Local)
ffffffff8020fea5:	4c 39 78 28          	cmp    %r15,0x28(%rax)
ffffffff8020fea9:	0f 85 a9 01 00 00    	jne    ffffffff80210058 <_RME_Thd_Sched_Prio+0x268>
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff8020feaf:	4a 8b 7c ec 20       	mov    0x20(%rsp,%r13,8),%rdi
ffffffff8020feb4:	48 39 78 48          	cmp    %rdi,0x48(%rax)
ffffffff8020feb8:	0f 82 aa 01 00 00    	jb     ffffffff80210068 <_RME_Thd_Sched_Prio+0x278>
    for(Count=0U;Count<Number;Count++)
ffffffff8020febe:	49 8d 45 01          	lea    0x1(%r13),%rax
ffffffff8020fec2:	49 39 c6             	cmp    %rax,%r14
ffffffff8020fec5:	0f 84 e5 00 00 00    	je     ffffffff8020ffb0 <_RME_Thd_Sched_Prio+0x1c0>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff8020fecb:	48 8b 1c c4          	mov    (%rsp,%rax,8),%rbx
ffffffff8020fecf:	49 89 c5             	mov    %rax,%r13
ffffffff8020fed2:	f6 c7 80             	test   $0x80,%bh
ffffffff8020fed5:	74 87                	je     ffffffff8020fe5e <_RME_Thd_Sched_Prio+0x6e>
ffffffff8020fed7:	48 89 d8             	mov    %rbx,%rax
ffffffff8020feda:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fede:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fee1:	76 6d                	jbe    ffffffff8020ff50 <_RME_Thd_Sched_Prio+0x160>
ffffffff8020fee3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fee7:	49 03 44 24 18       	add    0x18(%r12),%rax
ffffffff8020feec:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020feef:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020fef2:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8020fef6:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8020fefa:	74 35                	je     ffffffff8020ff31 <_RME_Thd_Sched_Prio+0x141>
ffffffff8020fefc:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020ff00:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020ff04:	75 6a                	jne    ffffffff8020ff70 <_RME_Thd_Sched_Prio+0x180>
ffffffff8020ff06:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8020ff0a:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020ff10:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020ff13:	73 3b                	jae    ffffffff8020ff50 <_RME_Thd_Sched_Prio+0x160>
ffffffff8020ff15:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020ff19:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8020ff1d:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020ff20:	48 89 c1             	mov    %rax,%rcx
ffffffff8020ff23:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8020ff27:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8020ff2b:	0f 85 53 ff ff ff    	jne    ffffffff8020fe84 <_RME_Thd_Sched_Prio+0x94>
}
ffffffff8020ff31:	48 83 c4 68          	add    $0x68,%rsp
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff8020ff35:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020ff3c:	5b                   	pop    %rbx
ffffffff8020ff3d:	5d                   	pop    %rbp
ffffffff8020ff3e:	41 5c                	pop    %r12
ffffffff8020ff40:	41 5d                	pop    %r13
ffffffff8020ff42:	41 5e                	pop    %r14
ffffffff8020ff44:	41 5f                	pop    %r15
ffffffff8020ff46:	c3                   	ret    
ffffffff8020ff47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020ff4e:	00 00 
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff8020ff50:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020ff57:	48 83 c4 68          	add    $0x68,%rsp
ffffffff8020ff5b:	5b                   	pop    %rbx
ffffffff8020ff5c:	5d                   	pop    %rbp
ffffffff8020ff5d:	41 5c                	pop    %r12
ffffffff8020ff5f:	41 5d                	pop    %r13
ffffffff8020ff61:	41 5e                	pop    %r14
ffffffff8020ff63:	41 5f                	pop    %r15
ffffffff8020ff65:	c3                   	ret    
ffffffff8020ff66:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020ff6d:	00 00 00 
ffffffff8020ff70:	48 83 c4 68          	add    $0x68,%rsp
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff8020ff74:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020ff7b:	5b                   	pop    %rbx
ffffffff8020ff7c:	5d                   	pop    %rbp
ffffffff8020ff7d:	41 5c                	pop    %r12
ffffffff8020ff7f:	41 5d                	pop    %r13
ffffffff8020ff81:	41 5e                	pop    %r14
ffffffff8020ff83:	41 5f                	pop    %r15
ffffffff8020ff85:	c3                   	ret    
ffffffff8020ff86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020ff8d:	00 00 00 
ffffffff8020ff90:	48 83 c4 68          	add    $0x68,%rsp
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff8020ff94:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff8020ff9b:	5b                   	pop    %rbx
ffffffff8020ff9c:	5d                   	pop    %rbp
ffffffff8020ff9d:	41 5c                	pop    %r12
ffffffff8020ff9f:	41 5d                	pop    %r13
ffffffff8020ffa1:	41 5e                	pop    %r14
ffffffff8020ffa3:	41 5f                	pop    %r15
ffffffff8020ffa5:	c3                   	ret    
ffffffff8020ffa6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020ffad:	00 00 00 
    __RME_Svc_Retval_Set(Reg,0);
ffffffff8020ffb0:	31 f6                	xor    %esi,%esi
ffffffff8020ffb2:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020ffb5:	e8 d6 b3 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
    for(Count=0U;Count<Number;Count++)
ffffffff8020ffba:	45 31 c0             	xor    %r8d,%r8d
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020ffbd:	41 b9 01 00 00 00    	mov    $0x1,%r9d
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff8020ffc3:	4a 8b 7c c4 40       	mov    0x40(%rsp,%r8,8),%rdi
ffffffff8020ffc8:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
ffffffff8020ffcd:	74 21                	je     ffffffff8020fff0 <_RME_Thd_Sched_Prio+0x200>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff8020ffcf:	4a 8b 44 c4 20       	mov    0x20(%rsp,%r8,8),%rax
ffffffff8020ffd4:	48 89 47 40          	mov    %rax,0x40(%rdi)
    for(Count=0U;Count<Number;Count++)
ffffffff8020ffd8:	49 8d 40 01          	lea    0x1(%r8),%rax
ffffffff8020ffdc:	4d 39 c5             	cmp    %r8,%r13
ffffffff8020ffdf:	74 5f                	je     ffffffff80210040 <_RME_Thd_Sched_Prio+0x250>
ffffffff8020ffe1:	49 89 c0             	mov    %rax,%r8
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff8020ffe4:	4a 8b 7c c4 40       	mov    0x40(%rsp,%r8,8),%rdi
ffffffff8020ffe9:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
ffffffff8020ffee:	75 df                	jne    ffffffff8020ffcf <_RME_Thd_Sched_Prio+0x1df>
            _RME_Run_Del(Thread[Count]);
ffffffff8020fff0:	e8 6b c7 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff8020fff5:	4a 8b 4c c4 20       	mov    0x20(%rsp,%r8,8),%rcx
    Local=Thd->Sched.Local;
ffffffff8020fffa:	48 8b 47 28          	mov    0x28(%rdi),%rax
                  &(Local->Run.List[Prio]));
ffffffff8020fffe:	48 89 ca             	mov    %rcx,%rdx
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80210001:	48 89 4f 40          	mov    %rcx,0x40(%rdi)
                  &(Local->Run.List[Prio]));
ffffffff80210005:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80210009:	4c 8d 54 10 28       	lea    0x28(%rax,%rdx,1),%r10
ffffffff8021000e:	48 89 ca             	mov    %rcx,%rdx
ffffffff80210011:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80210015:	48 01 c2             	add    %rax,%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80210018:	48 8b 72 30          	mov    0x30(%rdx),%rsi
    Next->Prev=New;
ffffffff8021001c:	48 89 7a 30          	mov    %rdi,0x30(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210020:	48 89 ca             	mov    %rcx,%rdx
    New->Next=Next;
ffffffff80210023:	4c 89 17             	mov    %r10,(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210026:	48 c1 ea 06          	shr    $0x6,%rdx
    New->Prev=Prev;
ffffffff8021002a:	48 89 77 08          	mov    %rsi,0x8(%rdi)
    Prev->Next=New;
ffffffff8021002e:	48 89 3e             	mov    %rdi,(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210031:	4c 89 cf             	mov    %r9,%rdi
ffffffff80210034:	48 d3 e7             	shl    %cl,%rdi
ffffffff80210037:	48 09 7c d0 20       	or     %rdi,0x20(%rax,%rdx,8)
}
ffffffff8021003c:	eb 9a                	jmp    ffffffff8020ffd8 <_RME_Thd_Sched_Prio+0x1e8>
ffffffff8021003e:	66 90                	xchg   %ax,%ax
    _RME_Kern_High(Reg,Local);
ffffffff80210040:	4c 89 fe             	mov    %r15,%rsi
ffffffff80210043:	48 89 ef             	mov    %rbp,%rdi
ffffffff80210046:	e8 45 fd ff ff       	call   ffffffff8020fd90 <_RME_Kern_High>
    return 0;
ffffffff8021004b:	31 c0                	xor    %eax,%eax
ffffffff8021004d:	e9 05 ff ff ff       	jmp    ffffffff8020ff57 <_RME_Thd_Sched_Prio+0x167>
ffffffff80210052:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            return RME_ERR_PTH_INVSTATE;
ffffffff80210058:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021005f:	e9 f3 fe ff ff       	jmp    ffffffff8020ff57 <_RME_Thd_Sched_Prio+0x167>
ffffffff80210064:	0f 1f 40 00          	nopl   0x0(%rax)
            return RME_ERR_PTH_PRIO;
ffffffff80210068:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8021006f:	e9 e3 fe ff ff       	jmp    ffffffff8020ff57 <_RME_Thd_Sched_Prio+0x167>
        return RME_ERR_PTH_INVSTATE;
ffffffff80210074:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
}
ffffffff8021007b:	c3                   	ret    
ffffffff8021007c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80210080 <_RME_Sig_Rcv.isra.0>:
static rme_ret_t _RME_Sig_Rcv(struct RME_Cap_Cpt* Cpt,
ffffffff80210080:	41 54                	push   %r12
ffffffff80210082:	49 89 d4             	mov    %rdx,%r12
ffffffff80210085:	55                   	push   %rbp
ffffffff80210086:	4c 89 c5             	mov    %r8,%rbp
ffffffff80210089:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8021008a:	f6 c5 80             	test   $0x80,%ch
ffffffff8021008d:	0f 85 f5 00 00 00    	jne    ffffffff80210188 <_RME_Sig_Rcv.isra.0+0x108>
ffffffff80210093:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80210096:	0f 83 d4 01 00 00    	jae    ffffffff80210270 <_RME_Sig_Rcv.isra.0+0x1f0>
ffffffff8021009c:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802100a0:	48 8d 1c 39          	lea    (%rcx,%rdi,1),%rbx
ffffffff802100a4:	48 8b 03             	mov    (%rbx),%rax
ffffffff802100a7:	48 89 c2             	mov    %rax,%rdx
ffffffff802100aa:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802100ae:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff802100b2:	0f 84 e8 01 00 00    	je     ffffffff802102a0 <_RME_Sig_Rcv.isra.0+0x220>
ffffffff802100b8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802100bc:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802100c0:	0f 85 ea 01 00 00    	jne    ffffffff802102b0 <_RME_Sig_Rcv.isra.0+0x230>
    switch(Option)
ffffffff802100c6:	48 83 fd 02          	cmp    $0x2,%rbp
ffffffff802100ca:	0f 84 b0 01 00 00    	je     ffffffff80210280 <_RME_Sig_Rcv.isra.0+0x200>
ffffffff802100d0:	0f 87 92 00 00 00    	ja     ffffffff80210168 <_RME_Sig_Rcv.isra.0+0xe8>
ffffffff802100d6:	48 85 ed             	test   %rbp,%rbp
ffffffff802100d9:	0f 84 b1 01 00 00    	je     ffffffff80210290 <_RME_Sig_Rcv.isra.0+0x210>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BM);
ffffffff802100df:	f6 43 10 04          	testb  $0x4,0x10(%rbx)
ffffffff802100e3:	0f 84 8f 00 00 00    	je     ffffffff80210178 <_RME_Sig_Rcv.isra.0+0xf8>
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802100e9:	8b 03                	mov    (%rbx),%eax
ffffffff802100eb:	85 c0                	test   %eax,%eax
ffffffff802100ed:	74 04                	je     ffffffff802100f3 <_RME_Sig_Rcv.isra.0+0x73>
ffffffff802100ef:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    if(Sig_Root->Thd!=(void*)RME_NULL)
ffffffff802100f3:	48 83 7b 30 00       	cmpq   $0x0,0x30(%rbx)
ffffffff802100f8:	0f 85 ea 00 00 00    	jne    ffffffff802101e8 <_RME_Sig_Rcv.isra.0+0x168>
    Local=RME_CPU_LOCAL();
ffffffff802100fe:	e8 3c b7 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thd_Cur=Local->Thd_Cur;
ffffffff80210103:	48 8b 78 08          	mov    0x8(%rax),%rdi
    Local=RME_CPU_LOCAL();
ffffffff80210107:	49 89 c0             	mov    %rax,%r8
    if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff8021010a:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80210111:	ff ff 7f 
ffffffff80210114:	48 39 47 30          	cmp    %rax,0x30(%rdi)
ffffffff80210118:	0f 84 ae 01 00 00    	je     ffffffff802102cc <_RME_Sig_Rcv.isra.0+0x24c>
    Old_Value=Sig_Root->Sig_Num;
ffffffff8021011e:	48 8b 43 28          	mov    0x28(%rbx),%rax
    if(Old_Value>0U)
ffffffff80210122:	48 85 c0             	test   %rax,%rax
ffffffff80210125:	0f 84 cd 00 00 00    	je     ffffffff802101f8 <_RME_Sig_Rcv.isra.0+0x178>
        if((Option==RME_RCV_BS)||(Option==RME_RCV_NS))
ffffffff8021012b:	48 f7 c5 fd ff ff ff 	test   $0xfffffffffffffffd,%rbp
ffffffff80210132:	0f 85 00 01 00 00    	jne    ffffffff80210238 <_RME_Sig_Rcv.isra.0+0x1b8>
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff80210138:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021013c:	f0 48 0f b1 53 28    	lock cmpxchg %rdx,0x28(%rbx)
ffffffff80210142:	0f 94 c2             	sete   %dl
ffffffff80210145:	84 d2                	test   %dl,%dl
ffffffff80210147:	0f 84 73 01 00 00    	je     ffffffff802102c0 <_RME_Sig_Rcv.isra.0+0x240>
            __RME_Svc_Retval_Set(Reg,1);
ffffffff8021014d:	4c 89 e7             	mov    %r12,%rdi
ffffffff80210150:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80210155:	e8 36 b2 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
}
ffffffff8021015a:	5b                   	pop    %rbx
        return 0;
ffffffff8021015b:	31 c0                	xor    %eax,%eax
}
ffffffff8021015d:	5d                   	pop    %rbp
ffffffff8021015e:	41 5c                	pop    %r12
ffffffff80210160:	c3                   	ret    
ffffffff80210161:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    switch(Option)
ffffffff80210168:	48 83 fd 03          	cmp    $0x3,%rbp
ffffffff8021016c:	75 7a                	jne    ffffffff802101e8 <_RME_Sig_Rcv.isra.0+0x168>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NM);
ffffffff8021016e:	f6 43 10 10          	testb  $0x10,0x10(%rbx)
ffffffff80210172:	0f 85 71 ff ff ff    	jne    ffffffff802100e9 <_RME_Sig_Rcv.isra.0+0x69>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff80210178:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021017f:	eb 6e                	jmp    ffffffff802101ef <_RME_Sig_Rcv.isra.0+0x16f>
ffffffff80210181:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80210188:	48 89 c8             	mov    %rcx,%rax
ffffffff8021018b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021018f:	48 39 f0             	cmp    %rsi,%rax
ffffffff80210192:	0f 83 d8 00 00 00    	jae    ffffffff80210270 <_RME_Sig_Rcv.isra.0+0x1f0>
ffffffff80210198:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021019c:	48 01 f8             	add    %rdi,%rax
ffffffff8021019f:	48 8b 10             	mov    (%rax),%rdx
ffffffff802101a2:	48 89 d6             	mov    %rdx,%rsi
ffffffff802101a5:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff802101a9:	66 83 fe 02          	cmp    $0x2,%si
ffffffff802101ad:	0f 84 ed 00 00 00    	je     ffffffff802102a0 <_RME_Sig_Rcv.isra.0+0x220>
ffffffff802101b3:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802101b7:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802101bb:	0f 85 ef 00 00 00    	jne    ffffffff802102b0 <_RME_Sig_Rcv.isra.0+0x230>
ffffffff802101c1:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802101c5:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff802101cb:	48 39 d1             	cmp    %rdx,%rcx
ffffffff802101ce:	0f 83 9c 00 00 00    	jae    ffffffff80210270 <_RME_Sig_Rcv.isra.0+0x1f0>
ffffffff802101d4:	48 8b 58 18          	mov    0x18(%rax),%rbx
ffffffff802101d8:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802101dc:	48 01 cb             	add    %rcx,%rbx
ffffffff802101df:	e9 c0 fe ff ff       	jmp    ffffffff802100a4 <_RME_Sig_Rcv.isra.0+0x24>
ffffffff802101e4:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_SIV_ACT;
ffffffff802101e8:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
}
ffffffff802101ef:	5b                   	pop    %rbx
ffffffff802101f0:	5d                   	pop    %rbp
ffffffff802101f1:	41 5c                	pop    %r12
ffffffff802101f3:	c3                   	ret    
ffffffff802101f4:	0f 1f 40 00          	nopl   0x0(%rax)
        if((Option==RME_RCV_BS)||(Option==RME_RCV_BM))
ffffffff802101f8:	48 83 fd 01          	cmp    $0x1,%rbp
ffffffff802101fc:	77 62                	ja     ffffffff80210260 <_RME_Sig_Rcv.isra.0+0x1e0>
ffffffff802101fe:	f0 48 0f b1 7b 30    	lock cmpxchg %rdi,0x30(%rbx)
ffffffff80210204:	0f 94 c0             	sete   %al
            if(RME_COMP_SWAP((rme_ptr_t*)&(Sig_Root->Thd),
ffffffff80210207:	84 c0                	test   %al,%al
ffffffff80210209:	0f 84 b1 00 00 00    	je     ffffffff802102c0 <_RME_Sig_Rcv.isra.0+0x240>
            Thd_Cur->Sched.Signal=Sig_Root;
ffffffff8021020f:	48 89 5f 50          	mov    %rbx,0x50(%rdi)
            Thd_Cur->Sched.State=RME_THD_BLOCKED;
ffffffff80210213:	48 c7 47 38 01 00 00 	movq   $0x1,0x38(%rdi)
ffffffff8021021a:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff8021021b:	e8 40 c5 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            _RME_Kern_High(Reg,Local);
ffffffff80210220:	4c 89 e7             	mov    %r12,%rdi
ffffffff80210223:	4c 89 c6             	mov    %r8,%rsi
ffffffff80210226:	e8 65 fb ff ff       	call   ffffffff8020fd90 <_RME_Kern_High>
}
ffffffff8021022b:	5b                   	pop    %rbx
    return 0;
ffffffff8021022c:	31 c0                	xor    %eax,%eax
}
ffffffff8021022e:	5d                   	pop    %rbp
ffffffff8021022f:	41 5c                	pop    %r12
ffffffff80210231:	c3                   	ret    
ffffffff80210232:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80210238:	31 d2                	xor    %edx,%edx
ffffffff8021023a:	f0 48 0f b1 53 28    	lock cmpxchg %rdx,0x28(%rbx)
ffffffff80210240:	0f 94 c2             	sete   %dl
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff80210243:	84 d2                	test   %dl,%dl
ffffffff80210245:	74 79                	je     ffffffff802102c0 <_RME_Sig_Rcv.isra.0+0x240>
            __RME_Svc_Retval_Set(Reg,(rme_ret_t)Old_Value);
ffffffff80210247:	48 89 c6             	mov    %rax,%rsi
ffffffff8021024a:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021024d:	e8 3e b1 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
}
ffffffff80210252:	5b                   	pop    %rbx
        return 0;
ffffffff80210253:	31 c0                	xor    %eax,%eax
}
ffffffff80210255:	5d                   	pop    %rbp
ffffffff80210256:	41 5c                	pop    %r12
ffffffff80210258:	c3                   	ret    
ffffffff80210259:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            __RME_Svc_Retval_Set(Reg,0);
ffffffff80210260:	31 f6                	xor    %esi,%esi
ffffffff80210262:	4c 89 e7             	mov    %r12,%rdi
ffffffff80210265:	e8 26 b1 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
    return 0;
ffffffff8021026a:	31 c0                	xor    %eax,%eax
ffffffff8021026c:	eb 81                	jmp    ffffffff802101ef <_RME_Sig_Rcv.isra.0+0x16f>
ffffffff8021026e:	66 90                	xchg   %ax,%ax
}
ffffffff80210270:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80210271:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff80210278:	5d                   	pop    %rbp
ffffffff80210279:	41 5c                	pop    %r12
ffffffff8021027b:	c3                   	ret    
ffffffff8021027c:	0f 1f 40 00          	nopl   0x0(%rax)
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NS);
ffffffff80210280:	f6 43 10 08          	testb  $0x8,0x10(%rbx)
ffffffff80210284:	0f 85 5f fe ff ff    	jne    ffffffff802100e9 <_RME_Sig_Rcv.isra.0+0x69>
ffffffff8021028a:	e9 e9 fe ff ff       	jmp    ffffffff80210178 <_RME_Sig_Rcv.isra.0+0xf8>
ffffffff8021028f:	90                   	nop
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff80210290:	f6 43 10 02          	testb  $0x2,0x10(%rbx)
ffffffff80210294:	0f 85 4f fe ff ff    	jne    ffffffff802100e9 <_RME_Sig_Rcv.isra.0+0x69>
ffffffff8021029a:	e9 d9 fe ff ff       	jmp    ffffffff80210178 <_RME_Sig_Rcv.isra.0+0xf8>
ffffffff8021029f:	90                   	nop
}
ffffffff802102a0:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802102a1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff802102a8:	5d                   	pop    %rbp
ffffffff802102a9:	41 5c                	pop    %r12
ffffffff802102ab:	c3                   	ret    
ffffffff802102ac:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff802102b0:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802102b1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff802102b8:	5d                   	pop    %rbp
ffffffff802102b9:	41 5c                	pop    %r12
ffffffff802102bb:	c3                   	ret    
ffffffff802102bc:	0f 1f 40 00          	nopl   0x0(%rax)
                return RME_ERR_SIV_CONFLICT;
ffffffff802102c0:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff802102c7:	e9 23 ff ff ff       	jmp    ffffffff802101ef <_RME_Sig_Rcv.isra.0+0x16f>
        return RME_ERR_SIV_BOOT;
ffffffff802102cc:	48 c7 c0 cd fe ff ff 	mov    $0xfffffffffffffecd,%rax
ffffffff802102d3:	e9 17 ff ff ff       	jmp    ffffffff802101ef <_RME_Sig_Rcv.isra.0+0x16f>
ffffffff802102d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff802102df:	00 

ffffffff802102e0 <_RME_Kern_Snd>:
{
ffffffff802102e0:	f3 0f 1e fa          	endbr64 
ffffffff802102e4:	41 54                	push   %r12
ffffffff802102e6:	55                   	push   %rbp
ffffffff802102e7:	53                   	push   %rbx
    Thd_Sig=Cap_Sig->Thd;
ffffffff802102e8:	48 8b 6f 30          	mov    0x30(%rdi),%rbp
{
ffffffff802102ec:	48 89 fb             	mov    %rdi,%rbx
    if(Thd_Sig!=(void*)RME_NULL)
ffffffff802102ef:	48 85 ed             	test   %rbp,%rbp
ffffffff802102f2:	74 0e                	je     ffffffff80210302 <_RME_Kern_Snd+0x22>
        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff802102f4:	4c 8b 65 28          	mov    0x28(%rbp),%r12
ffffffff802102f8:	e8 42 b5 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802102fd:	49 39 c4             	cmp    %rax,%r12
ffffffff80210300:	74 2e                	je     ffffffff80210330 <_RME_Kern_Snd+0x50>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80210302:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80210307:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff8021030d:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80210314:	ff ff 7f 
ffffffff80210317:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021031a:	0f 87 d6 00 00 00    	ja     ffffffff802103f6 <_RME_Kern_Snd+0x116>
    return 0;
ffffffff80210320:	31 c0                	xor    %eax,%eax
}
ffffffff80210322:	5b                   	pop    %rbx
ffffffff80210323:	5d                   	pop    %rbp
ffffffff80210324:	41 5c                	pop    %r12
ffffffff80210326:	c3                   	ret    
ffffffff80210327:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021032e:	00 00 
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff80210330:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff80210337:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021033c:	e8 4f b0 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff80210341:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff80210346:	75 30                	jne    ffffffff80210378 <_RME_Kern_Snd+0x98>
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff80210348:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff8021034f:	00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80210350:	48 8d 45 10          	lea    0x10(%rbp),%rax
ffffffff80210354:	48 39 45 10          	cmp    %rax,0x10(%rbp)
ffffffff80210358:	74 76                	je     ffffffff802103d0 <_RME_Kern_Snd+0xf0>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff8021035a:	48 8b 7d 70          	mov    0x70(%rbp),%rdi
ffffffff8021035e:	48 85 ff             	test   %rdi,%rdi
ffffffff80210361:	74 05                	je     ffffffff80210368 <_RME_Kern_Snd+0x88>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80210363:	e8 78 ff ff ff       	call   ffffffff802102e0 <_RME_Kern_Snd>
        Cap_Sig->Thd=RME_NULL;
ffffffff80210368:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff8021036f:	00 
    return 0;
ffffffff80210370:	31 c0                	xor    %eax,%eax
ffffffff80210372:	eb ae                	jmp    ffffffff80210322 <_RME_Kern_Snd+0x42>
ffffffff80210374:	0f 1f 40 00          	nopl   0x0(%rax)
    Prio=Thd->Sched.Prio;
ffffffff80210378:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff8021037c:	48 8b 45 28          	mov    0x28(%rbp),%rax
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff80210380:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff80210387:	00 
                  &(Local->Run.List[Prio]));
ffffffff80210388:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021038b:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff8021038f:	48 8d 7c 10 28       	lea    0x28(%rax,%rdx,1),%rdi
ffffffff80210394:	48 89 ca             	mov    %rcx,%rdx
ffffffff80210397:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff8021039b:	48 01 c2             	add    %rax,%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8021039e:	48 8b 72 30          	mov    0x30(%rdx),%rsi
    Next->Prev=New;
ffffffff802103a2:	48 89 6a 30          	mov    %rbp,0x30(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802103a6:	ba 01 00 00 00       	mov    $0x1,%edx
    New->Next=Next;
ffffffff802103ab:	48 89 7d 00          	mov    %rdi,0x0(%rbp)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802103af:	48 d3 e2             	shl    %cl,%rdx
    New->Prev=Prev;
ffffffff802103b2:	48 89 75 08          	mov    %rsi,0x8(%rbp)
    Prev->Next=New;
ffffffff802103b6:	48 89 2e             	mov    %rbp,(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802103b9:	48 89 ce             	mov    %rcx,%rsi
ffffffff802103bc:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff802103c0:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
}
ffffffff802103c5:	eb a1                	jmp    ffffffff80210368 <_RME_Kern_Snd+0x88>
ffffffff802103c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff802103ce:	00 00 
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff802103d0:	48 8b 55 68          	mov    0x68(%rbp),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff802103d4:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff802103db:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff802103df:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
    New->Next=Next;
ffffffff802103e6:	48 89 75 10          	mov    %rsi,0x10(%rbp)
    New->Prev=Prev;
ffffffff802103ea:	48 89 4d 18          	mov    %rcx,0x18(%rbp)
    Prev->Next=New;
ffffffff802103ee:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff802103f1:	e9 64 ff ff ff       	jmp    ffffffff8021035a <_RME_Kern_Snd+0x7a>
ffffffff802103f6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802103fd:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
            return RME_ERR_SIV_FULL;
ffffffff80210403:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff8021040a:	e9 13 ff ff ff       	jmp    ffffffff80210322 <_RME_Kern_Snd+0x42>
ffffffff8021040f:	90                   	nop

ffffffff80210410 <_RME_Thd_Time_Xfer>:
    if(Time==0U)
ffffffff80210410:	4d 85 c0             	test   %r8,%r8
ffffffff80210413:	0f 84 ef 03 00 00    	je     ffffffff80210808 <_RME_Thd_Time_Xfer+0x3f8>
{
ffffffff80210419:	41 56                	push   %r14
ffffffff8021041b:	48 89 d0             	mov    %rdx,%rax
ffffffff8021041e:	41 55                	push   %r13
ffffffff80210420:	4d 89 c5             	mov    %r8,%r13
ffffffff80210423:	41 54                	push   %r12
ffffffff80210425:	49 89 f4             	mov    %rsi,%r12
ffffffff80210428:	55                   	push   %rbp
ffffffff80210429:	48 89 cd             	mov    %rcx,%rbp
ffffffff8021042c:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff8021042d:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff80210431:	f6 c6 80             	test   $0x80,%dh
ffffffff80210434:	0f 84 ae 01 00 00    	je     ffffffff802105e8 <_RME_Thd_Time_Xfer+0x1d8>
ffffffff8021043a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021043e:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80210441:	0f 83 11 02 00 00    	jae    ffffffff80210658 <_RME_Thd_Time_Xfer+0x248>
ffffffff80210447:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff8021044b:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021044f:	48 01 f2             	add    %rsi,%rdx
ffffffff80210452:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff80210455:	49 89 f8             	mov    %rdi,%r8
ffffffff80210458:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff8021045c:	66 41 83 f8 02       	cmp    $0x2,%r8w
ffffffff80210461:	0f 84 79 02 00 00    	je     ffffffff802106e0 <_RME_Thd_Time_Xfer+0x2d0>
ffffffff80210467:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021046b:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021046f:	0f 85 7b 02 00 00    	jne    ffffffff802106f0 <_RME_Thd_Time_Xfer+0x2e0>
ffffffff80210475:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff80210479:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021047e:	48 39 f8             	cmp    %rdi,%rax
ffffffff80210481:	0f 83 d1 01 00 00    	jae    ffffffff80210658 <_RME_Thd_Time_Xfer+0x248>
ffffffff80210487:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021048b:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021048f:	48 89 c3             	mov    %rax,%rbx
ffffffff80210492:	48 8b 03             	mov    (%rbx),%rax
ffffffff80210495:	48 89 c2             	mov    %rax,%rdx
ffffffff80210498:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021049c:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff802104a0:	0f 84 3a 02 00 00    	je     ffffffff802106e0 <_RME_Thd_Time_Xfer+0x2d0>
ffffffff802104a6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802104aa:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802104ae:	0f 85 3c 02 00 00    	jne    ffffffff802106f0 <_RME_Thd_Time_Xfer+0x2e0>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff802104b4:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff802104ba:	0f 85 40 01 00 00    	jne    ffffffff80210600 <_RME_Thd_Time_Xfer+0x1f0>
ffffffff802104c0:	48 39 cd             	cmp    %rcx,%rbp
ffffffff802104c3:	0f 83 8f 01 00 00    	jae    ffffffff80210658 <_RME_Thd_Time_Xfer+0x248>
ffffffff802104c9:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff802104cd:	48 01 f5             	add    %rsi,%rbp
ffffffff802104d0:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff802104d4:	48 89 c2             	mov    %rax,%rdx
ffffffff802104d7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802104db:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff802104df:	0f 84 fb 01 00 00    	je     ffffffff802106e0 <_RME_Thd_Time_Xfer+0x2d0>
ffffffff802104e5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802104e9:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802104ed:	0f 85 fd 01 00 00    	jne    ffffffff802106f0 <_RME_Thd_Time_Xfer+0x2e0>
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff802104f3:	f6 43 10 80          	testb  $0x80,0x10(%rbx)
ffffffff802104f7:	0f 84 03 02 00 00    	je     ffffffff80210700 <_RME_Thd_Time_Xfer+0x2f0>
    RME_CAP_CHECK(Thd_Src_Op,RME_THD_FLAG_XFER_SRC);
ffffffff802104fd:	f6 45 10 40          	testb  $0x40,0x10(%rbp)
ffffffff80210501:	0f 84 f9 01 00 00    	je     ffffffff80210700 <_RME_Thd_Time_Xfer+0x2f0>
    Local=RME_CPU_LOCAL();
ffffffff80210507:	e8 33 b3 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thd_Src=RME_CAP_GETOBJ(Thd_Src_Op,struct RME_Thd_Struct*);
ffffffff8021050c:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
    Local=RME_CPU_LOCAL();
ffffffff80210510:	49 89 c6             	mov    %rax,%r14
    if(Thd_Src->Sched.Local!=Local)
ffffffff80210513:	48 39 47 28          	cmp    %rax,0x28(%rdi)
ffffffff80210517:	0f 85 b3 02 00 00    	jne    ffffffff802107d0 <_RME_Thd_Time_Xfer+0x3c0>
    if(Thd_Src->Sched.Slice==0U)
ffffffff8021051d:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff80210521:	48 85 c0             	test   %rax,%rax
ffffffff80210524:	0f 84 a6 02 00 00    	je     ffffffff802107d0 <_RME_Thd_Time_Xfer+0x3c0>
    Thd_Dst=RME_CAP_GETOBJ(Thd_Dst_Op,struct RME_Thd_Struct*);
ffffffff8021052a:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
    if(Thd_Dst->Sched.Local!=Local)
ffffffff8021052e:	4c 39 73 28          	cmp    %r14,0x28(%rbx)
ffffffff80210532:	0f 85 98 02 00 00    	jne    ffffffff802107d0 <_RME_Thd_Time_Xfer+0x3c0>
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80210538:	48 8b 73 48          	mov    0x48(%rbx),%rsi
ffffffff8021053c:	48 39 77 48          	cmp    %rsi,0x48(%rdi)
ffffffff80210540:	73 14                	jae    ffffffff80210556 <_RME_Thd_Time_Xfer+0x146>
ffffffff80210542:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff80210549:	ff ff 7f 
ffffffff8021054c:	48 39 53 30          	cmp    %rdx,0x30(%rbx)
ffffffff80210550:	0f 85 2b 02 00 00    	jne    ffffffff80210781 <_RME_Thd_Time_Xfer+0x371>
    if(Thd_Src->Sched.Slice<RME_THD_INF_TIME)
ffffffff80210556:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8021055d:	ff ff 7f 
ffffffff80210560:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210563:	0f 87 07 01 00 00    	ja     ffffffff80210670 <_RME_Thd_Time_Xfer+0x260>
        if(Time>=RME_THD_INF_TIME)
ffffffff80210569:	4c 39 e8             	cmp    %r13,%rax
ffffffff8021056c:	4c 89 e9             	mov    %r13,%rcx
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff8021056f:	48 8b 73 30          	mov    0x30(%rbx),%rsi
ffffffff80210573:	48 0f 46 c8          	cmovbe %rax,%rcx
ffffffff80210577:	49 39 d5             	cmp    %rdx,%r13
ffffffff8021057a:	48 0f 47 c8          	cmova  %rax,%rcx
ffffffff8021057e:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80210581:	77 1a                	ja     ffffffff8021059d <_RME_Thd_Time_Xfer+0x18d>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80210583:	48 01 ce             	add    %rcx,%rsi
ffffffff80210586:	0f 82 34 02 00 00    	jb     ffffffff802107c0 <_RME_Thd_Time_Xfer+0x3b0>
ffffffff8021058c:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8021058f:	0f 87 2b 02 00 00    	ja     ffffffff802107c0 <_RME_Thd_Time_Xfer+0x3b0>
            Thd_Dst->Sched.Slice+=Time_Xfer;
ffffffff80210595:	48 89 73 30          	mov    %rsi,0x30(%rbx)
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff80210599:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff8021059d:	48 29 c8             	sub    %rcx,%rax
ffffffff802105a0:	48 89 47 30          	mov    %rax,0x30(%rdi)
    if(Thd_Src->Sched.Slice==0U)
ffffffff802105a4:	48 85 c0             	test   %rax,%rax
ffffffff802105a7:	75 0b                	jne    ffffffff802105b4 <_RME_Thd_Time_Xfer+0x1a4>
        if(Thd_Src->Sched.State==RME_THD_READY)
ffffffff802105a9:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
ffffffff802105ae:	0f 84 dc 01 00 00    	je     ffffffff80210790 <_RME_Thd_Time_Xfer+0x380>
    __RME_Svc_Retval_Set(Reg,(rme_ret_t)(Thd_Dst->Sched.Slice));
ffffffff802105b4:	48 8b 73 30          	mov    0x30(%rbx),%rsi
ffffffff802105b8:	4c 89 e7             	mov    %r12,%rdi
ffffffff802105bb:	e8 d0 ad 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
    if(Thd_Dst->Sched.State==RME_THD_TIMEOUT)
ffffffff802105c0:	48 83 7b 38 02       	cmpq   $0x2,0x38(%rbx)
ffffffff802105c5:	0f 84 65 01 00 00    	je     ffffffff80210730 <_RME_Thd_Time_Xfer+0x320>
    _RME_Kern_High(Reg,Local);
ffffffff802105cb:	4c 89 f6             	mov    %r14,%rsi
ffffffff802105ce:	4c 89 e7             	mov    %r12,%rdi
ffffffff802105d1:	e8 ba f7 ff ff       	call   ffffffff8020fd90 <_RME_Kern_High>
}
ffffffff802105d6:	5b                   	pop    %rbx
    return 0;
ffffffff802105d7:	31 c0                	xor    %eax,%eax
}
ffffffff802105d9:	5d                   	pop    %rbp
ffffffff802105da:	41 5c                	pop    %r12
ffffffff802105dc:	41 5d                	pop    %r13
ffffffff802105de:	41 5e                	pop    %r14
ffffffff802105e0:	c3                   	ret    
ffffffff802105e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff802105e8:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802105eb:	73 6b                	jae    ffffffff80210658 <_RME_Thd_Time_Xfer+0x248>
ffffffff802105ed:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff802105f1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802105f5:	48 8d 1c 30          	lea    (%rax,%rsi,1),%rbx
ffffffff802105f9:	e9 94 fe ff ff       	jmp    ffffffff80210492 <_RME_Thd_Time_Xfer+0x82>
ffffffff802105fe:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff80210600:	48 89 e8             	mov    %rbp,%rax
ffffffff80210603:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210607:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021060a:	73 4c                	jae    ffffffff80210658 <_RME_Thd_Time_Xfer+0x248>
ffffffff8021060c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210610:	48 01 f0             	add    %rsi,%rax
ffffffff80210613:	48 8b 10             	mov    (%rax),%rdx
ffffffff80210616:	48 89 d1             	mov    %rdx,%rcx
ffffffff80210619:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8021061d:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80210621:	0f 84 b9 00 00 00    	je     ffffffff802106e0 <_RME_Thd_Time_Xfer+0x2d0>
ffffffff80210627:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021062b:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021062f:	0f 85 bb 00 00 00    	jne    ffffffff802106f0 <_RME_Thd_Time_Xfer+0x2e0>
ffffffff80210635:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80210639:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff8021063f:	48 39 d5             	cmp    %rdx,%rbp
ffffffff80210642:	73 14                	jae    ffffffff80210658 <_RME_Thd_Time_Xfer+0x248>
ffffffff80210644:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff80210648:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff8021064c:	e9 7f fe ff ff       	jmp    ffffffff802104d0 <_RME_Thd_Time_Xfer+0xc0>
ffffffff80210651:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80210658:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8021065f:	5b                   	pop    %rbx
ffffffff80210660:	5d                   	pop    %rbp
ffffffff80210661:	41 5c                	pop    %r12
ffffffff80210663:	41 5d                	pop    %r13
ffffffff80210665:	41 5e                	pop    %r14
ffffffff80210667:	c3                   	ret    
ffffffff80210668:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021066f:	00 
        if(Time>=RME_THD_INF_TIME)
ffffffff80210670:	49 39 d5             	cmp    %rdx,%r13
ffffffff80210673:	0f 86 97 00 00 00    	jbe    ffffffff80210710 <_RME_Thd_Time_Xfer+0x300>
                if(Thd_Src->Sched.Slice!=RME_THD_INIT_TIME)
ffffffff80210679:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff80210680:	ff ff 7f 
ffffffff80210683:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210686:	74 38                	je     ffffffff802106c0 <_RME_Thd_Time_Xfer+0x2b0>
ffffffff80210688:	49 39 cd             	cmp    %rcx,%r13
ffffffff8021068b:	75 33                	jne    ffffffff802106c0 <_RME_Thd_Time_Xfer+0x2b0>
                    Thd_Src->Sched.Slice=0U;
ffffffff8021068d:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
ffffffff80210694:	00 
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80210695:	48 39 53 30          	cmp    %rdx,0x30(%rbx)
ffffffff80210699:	0f 87 0a ff ff ff    	ja     ffffffff802105a9 <_RME_Thd_Time_Xfer+0x199>
                Thd_Dst->Sched.Slice=RME_THD_INF_TIME;
ffffffff8021069f:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
ffffffff802106a6:	ff ff 7f 
ffffffff802106a9:	48 89 43 30          	mov    %rax,0x30(%rbx)
    if(Thd_Src->Sched.Slice==0U)
ffffffff802106ad:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff802106b1:	e9 ee fe ff ff       	jmp    ffffffff802105a4 <_RME_Thd_Time_Xfer+0x194>
ffffffff802106b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff802106bd:	00 00 00 
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff802106c0:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff802106c7:	ff ff 7f 
ffffffff802106ca:	48 8b 73 30          	mov    0x30(%rbx),%rsi
ffffffff802106ce:	48 39 c6             	cmp    %rax,%rsi
ffffffff802106d1:	76 cc                	jbe    ffffffff8021069f <_RME_Thd_Time_Xfer+0x28f>
ffffffff802106d3:	e9 e0 fe ff ff       	jmp    ffffffff802105b8 <_RME_Thd_Time_Xfer+0x1a8>
ffffffff802106d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff802106df:	00 
}
ffffffff802106e0:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff802106e1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff802106e8:	5d                   	pop    %rbp
ffffffff802106e9:	41 5c                	pop    %r12
ffffffff802106eb:	41 5d                	pop    %r13
ffffffff802106ed:	41 5e                	pop    %r14
ffffffff802106ef:	c3                   	ret    
ffffffff802106f0:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff802106f1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff802106f8:	5d                   	pop    %rbp
ffffffff802106f9:	41 5c                	pop    %r12
ffffffff802106fb:	41 5d                	pop    %r13
ffffffff802106fd:	41 5e                	pop    %r14
ffffffff802106ff:	c3                   	ret    
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff80210700:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210707:	e9 53 ff ff ff       	jmp    ffffffff8021065f <_RME_Thd_Time_Xfer+0x24f>
ffffffff8021070c:	0f 1f 40 00          	nopl   0x0(%rax)
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time);
ffffffff80210710:	4c 03 6b 30          	add    0x30(%rbx),%r13
ffffffff80210714:	0f 82 a6 00 00 00    	jb     ffffffff802107c0 <_RME_Thd_Time_Xfer+0x3b0>
ffffffff8021071a:	49 39 d5             	cmp    %rdx,%r13
ffffffff8021071d:	0f 87 9d 00 00 00    	ja     ffffffff802107c0 <_RME_Thd_Time_Xfer+0x3b0>
            Thd_Dst->Sched.Slice+=Time;
ffffffff80210723:	4c 89 6b 30          	mov    %r13,0x30(%rbx)
    if(Thd_Src->Sched.Slice==0U)
ffffffff80210727:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff8021072b:	e9 74 fe ff ff       	jmp    ffffffff802105a4 <_RME_Thd_Time_Xfer+0x194>
    Prio=Thd->Sched.Prio;
ffffffff80210730:	48 8b 4b 40          	mov    0x40(%rbx),%rcx
    Local=Thd->Sched.Local;
ffffffff80210734:	48 8b 43 28          	mov    0x28(%rbx),%rax
        Thd_Dst->Sched.State=RME_THD_READY;
ffffffff80210738:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
ffffffff8021073f:	00 
                  &(Local->Run.List[Prio]));
ffffffff80210740:	48 89 ca             	mov    %rcx,%rdx
ffffffff80210743:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80210747:	48 8d 7c 10 28       	lea    0x28(%rax,%rdx,1),%rdi
ffffffff8021074c:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021074f:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80210753:	48 01 c2             	add    %rax,%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80210756:	48 8b 72 30          	mov    0x30(%rdx),%rsi
    Next->Prev=New;
ffffffff8021075a:	48 89 5a 30          	mov    %rbx,0x30(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021075e:	ba 01 00 00 00       	mov    $0x1,%edx
    New->Next=Next;
ffffffff80210763:	48 89 3b             	mov    %rdi,(%rbx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210766:	48 d3 e2             	shl    %cl,%rdx
    New->Prev=Prev;
ffffffff80210769:	48 89 73 08          	mov    %rsi,0x8(%rbx)
    Prev->Next=New;
ffffffff8021076d:	48 89 1e             	mov    %rbx,(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210770:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210773:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff80210777:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
}
ffffffff8021077c:	e9 4a fe ff ff       	jmp    ffffffff802105cb <_RME_Thd_Time_Xfer+0x1bb>
        return RME_ERR_PTH_PRIO;
ffffffff80210781:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80210788:	e9 d2 fe ff ff       	jmp    ffffffff8021065f <_RME_Thd_Time_Xfer+0x24f>
ffffffff8021078d:	0f 1f 00             	nopl   (%rax)
            _RME_Run_Del(Thd_Src);
ffffffff80210790:	e8 cb bf ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Src->Sched.State=RME_THD_TIMEOUT;
ffffffff80210795:	48 c7 47 38 02 00 00 	movq   $0x2,0x38(%rdi)
ffffffff8021079c:	00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8021079d:	48 8d 47 10          	lea    0x10(%rdi),%rax
ffffffff802107a1:	48 39 47 10          	cmp    %rax,0x10(%rdi)
ffffffff802107a5:	74 39                	je     ffffffff802107e0 <_RME_Thd_Time_Xfer+0x3d0>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff802107a7:	48 8b 7f 70          	mov    0x70(%rdi),%rdi
ffffffff802107ab:	48 85 ff             	test   %rdi,%rdi
ffffffff802107ae:	0f 84 00 fe ff ff    	je     ffffffff802105b4 <_RME_Thd_Time_Xfer+0x1a4>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff802107b4:	e8 27 fb ff ff       	call   ffffffff802102e0 <_RME_Kern_Snd>
ffffffff802107b9:	e9 f6 fd ff ff       	jmp    ffffffff802105b4 <_RME_Thd_Time_Xfer+0x1a4>
ffffffff802107be:	66 90                	xchg   %ax,%ax
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff802107c0:	48 c7 c0 30 ff ff ff 	mov    $0xffffffffffffff30,%rax
ffffffff802107c7:	e9 93 fe ff ff       	jmp    ffffffff8021065f <_RME_Thd_Time_Xfer+0x24f>
ffffffff802107cc:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_INVSTATE;
ffffffff802107d0:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802107d7:	e9 83 fe ff ff       	jmp    ffffffff8021065f <_RME_Thd_Time_Xfer+0x24f>
ffffffff802107dc:	0f 1f 40 00          	nopl   0x0(%rax)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff802107e0:	48 8b 57 68          	mov    0x68(%rdi),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff802107e4:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff802107eb:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff802107ef:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
    New->Next=Next;
ffffffff802107f6:	48 89 77 10          	mov    %rsi,0x10(%rdi)
    New->Prev=Prev;
ffffffff802107fa:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
    Prev->Next=New;
ffffffff802107fe:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff80210801:	eb a4                	jmp    ffffffff802107a7 <_RME_Thd_Time_Xfer+0x397>
ffffffff80210803:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return RME_ERR_PTH_INVSTATE;
ffffffff80210808:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
}
ffffffff8021080f:	c3                   	ret    

ffffffff80210810 <_RME_Thd_Fatal>:
{
ffffffff80210810:	f3 0f 1e fa          	endbr64 
ffffffff80210814:	41 56                	push   %r14
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80210816:	31 f6                	xor    %esi,%esi
ffffffff80210818:	ba 01 00 00 00       	mov    $0x1,%edx
{
ffffffff8021081d:	41 55                	push   %r13
ffffffff8021081f:	41 54                	push   %r12
ffffffff80210821:	55                   	push   %rbp
ffffffff80210822:	48 89 fd             	mov    %rdi,%rbp
ffffffff80210825:	53                   	push   %rbx
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80210826:	e8 85 bf ff ff       	call   ffffffff8020c7b0 <_RME_Inv_Ret>
ffffffff8021082b:	48 85 c0             	test   %rax,%rax
ffffffff8021082e:	75 10                	jne    ffffffff80210840 <_RME_Thd_Fatal+0x30>
}
ffffffff80210830:	5b                   	pop    %rbx
ffffffff80210831:	5d                   	pop    %rbp
ffffffff80210832:	41 5c                	pop    %r12
ffffffff80210834:	41 5d                	pop    %r13
ffffffff80210836:	41 5e                	pop    %r14
ffffffff80210838:	c3                   	ret    
ffffffff80210839:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        Local=RME_CPU_LOCAL();
ffffffff80210840:	e8 fa af ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
        Thd_Cur=Local->Thd_Cur;
ffffffff80210845:	4c 8b 70 08          	mov    0x8(%rax),%r14
        Local=RME_CPU_LOCAL();
ffffffff80210849:	49 89 c4             	mov    %rax,%r12
        if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff8021084c:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80210853:	ff ff 7f 
ffffffff80210856:	49 39 46 30          	cmp    %rax,0x30(%r14)
ffffffff8021085a:	74 6c                	je     ffffffff802108c8 <_RME_Thd_Fatal+0xb8>
        _RME_Run_Del(Thd_Cur);
ffffffff8021085c:	4c 89 f7             	mov    %r14,%rdi
ffffffff8021085f:	e8 fc be ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
        Thd_Cur->Sched.State=RME_THD_EXCPEND;
ffffffff80210864:	49 c7 46 38 03 00 00 	movq   $0x3,0x38(%r14)
ffffffff8021086b:	00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8021086c:	49 8d 46 10          	lea    0x10(%r14),%rax
ffffffff80210870:	49 39 46 10          	cmp    %rax,0x10(%r14)
ffffffff80210874:	74 2a                	je     ffffffff802108a0 <_RME_Thd_Fatal+0x90>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80210876:	49 8b 7e 70          	mov    0x70(%r14),%rdi
ffffffff8021087a:	48 85 ff             	test   %rdi,%rdi
ffffffff8021087d:	74 05                	je     ffffffff80210884 <_RME_Thd_Fatal+0x74>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff8021087f:	e8 5c fa ff ff       	call   ffffffff802102e0 <_RME_Kern_Snd>
}
ffffffff80210884:	5b                   	pop    %rbx
        _RME_Kern_High(Reg,Local);
ffffffff80210885:	4c 89 e6             	mov    %r12,%rsi
ffffffff80210888:	48 89 ef             	mov    %rbp,%rdi
}
ffffffff8021088b:	5d                   	pop    %rbp
ffffffff8021088c:	41 5c                	pop    %r12
ffffffff8021088e:	41 5d                	pop    %r13
ffffffff80210890:	41 5e                	pop    %r14
        _RME_Kern_High(Reg,Local);
ffffffff80210892:	e9 f9 f4 ff ff       	jmp    ffffffff8020fd90 <_RME_Kern_High>
ffffffff80210897:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021089e:	00 00 
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff802108a0:	49 8b 56 68          	mov    0x68(%r14),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff802108a4:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff802108ab:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff802108af:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
    New->Next=Next;
ffffffff802108b6:	49 89 76 10          	mov    %rsi,0x10(%r14)
    New->Prev=Prev;
ffffffff802108ba:	49 89 4e 18          	mov    %rcx,0x18(%r14)
    Prev->Next=New;
ffffffff802108be:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff802108c1:	eb b3                	jmp    ffffffff80210876 <_RME_Thd_Fatal+0x66>
ffffffff802108c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff802108c8:	48 c7 c3 79 d7 21 80 	mov    $0xffffffff8021d779,%rbx
ffffffff802108cf:	49 c7 c5 77 d8 21 80 	mov    $0xffffffff8021d877,%r13
        if(String[Count]==(rme_s8_t)'\0')
ffffffff802108d6:	bf 41 00 00 00       	mov    $0x41,%edi
ffffffff802108db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar(String[Count]);
ffffffff802108e0:	e8 ab 7f 00 00       	call   ffffffff80218890 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff802108e5:	49 39 dd             	cmp    %rbx,%r13
ffffffff802108e8:	0f 84 6e ff ff ff    	je     ffffffff8021085c <_RME_Thd_Fatal+0x4c>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff802108ee:	0f be 3b             	movsbl (%rbx),%edi
ffffffff802108f1:	48 83 c3 01          	add    $0x1,%rbx
ffffffff802108f5:	40 84 ff             	test   %dil,%dil
ffffffff802108f8:	75 e6                	jne    ffffffff802108e0 <_RME_Thd_Fatal+0xd0>
ffffffff802108fa:	e9 5d ff ff ff       	jmp    ffffffff8021085c <_RME_Thd_Fatal+0x4c>
ffffffff802108ff:	90                   	nop

ffffffff80210900 <_RME_Tim_Handler>:
{
ffffffff80210900:	f3 0f 1e fa          	endbr64 
ffffffff80210904:	41 54                	push   %r12
ffffffff80210906:	49 89 fc             	mov    %rdi,%r12
ffffffff80210909:	55                   	push   %rbp
ffffffff8021090a:	53                   	push   %rbx
ffffffff8021090b:	48 89 f3             	mov    %rsi,%rbx
    RME_x64_timestamp++;
ffffffff8021090e:	48 83 05 fa 66 01 00 	addq   $0x1,0x166fa(%rip)        # ffffffff80227010 <RME_x64_timestamp>
ffffffff80210915:	01 
    Local=RME_CPU_LOCAL();
ffffffff80210916:	e8 24 af ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8021091b:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80210922:	ff ff 7f 
    Thd_Cur=Local->Thd_Cur;
ffffffff80210925:	48 8b 78 08          	mov    0x8(%rax),%rdi
    Local=RME_CPU_LOCAL();
ffffffff80210929:	48 89 c5             	mov    %rax,%rbp
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8021092c:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff80210930:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210933:	77 0c                	ja     ffffffff80210941 <_RME_Tim_Handler+0x41>
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff80210935:	48 39 d8             	cmp    %rbx,%rax
ffffffff80210938:	76 26                	jbe    ffffffff80210960 <_RME_Tim_Handler+0x60>
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8021093a:	48 29 d8             	sub    %rbx,%rax
ffffffff8021093d:	48 89 47 30          	mov    %rax,0x30(%rdi)
    _RME_Kern_Snd(Local->Sig_Tim);
ffffffff80210941:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
ffffffff80210945:	e8 96 f9 ff ff       	call   ffffffff802102e0 <_RME_Kern_Snd>
}
ffffffff8021094a:	5b                   	pop    %rbx
    _RME_Kern_High(Reg,Local);
ffffffff8021094b:	48 89 ee             	mov    %rbp,%rsi
ffffffff8021094e:	4c 89 e7             	mov    %r12,%rdi
}
ffffffff80210951:	5d                   	pop    %rbp
ffffffff80210952:	41 5c                	pop    %r12
    _RME_Kern_High(Reg,Local);
ffffffff80210954:	e9 37 f4 ff ff       	jmp    ffffffff8020fd90 <_RME_Kern_High>
ffffffff80210959:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            Thd_Cur->Sched.Slice=0U;
ffffffff80210960:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
ffffffff80210967:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80210968:	e8 f3 bd ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff8021096d:	48 c7 47 38 02 00 00 	movq   $0x2,0x38(%rdi)
ffffffff80210974:	00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80210975:	48 8d 47 10          	lea    0x10(%rdi),%rax
ffffffff80210979:	48 39 47 10          	cmp    %rax,0x10(%rdi)
ffffffff8021097d:	74 11                	je     ffffffff80210990 <_RME_Tim_Handler+0x90>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff8021097f:	48 8b 7f 70          	mov    0x70(%rdi),%rdi
ffffffff80210983:	48 85 ff             	test   %rdi,%rdi
ffffffff80210986:	74 b9                	je     ffffffff80210941 <_RME_Tim_Handler+0x41>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80210988:	e8 53 f9 ff ff       	call   ffffffff802102e0 <_RME_Kern_Snd>
ffffffff8021098d:	eb b2                	jmp    ffffffff80210941 <_RME_Tim_Handler+0x41>
ffffffff8021098f:	90                   	nop
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80210990:	48 8b 57 68          	mov    0x68(%rdi),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80210994:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff8021099b:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff8021099f:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
    New->Next=Next;
ffffffff802109a6:	48 89 77 10          	mov    %rsi,0x10(%rdi)
    New->Prev=Prev;
ffffffff802109aa:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
    Prev->Next=New;
ffffffff802109ae:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff802109b1:	eb cc                	jmp    ffffffff8021097f <_RME_Tim_Handler+0x7f>
ffffffff802109b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff802109ba:	00 00 00 00 
ffffffff802109be:	66 90                	xchg   %ax,%ax

ffffffff802109c0 <_RME_Sig_Snd.isra.0>:
static rme_ret_t _RME_Sig_Snd(struct RME_Cap_Cpt* Cpt, 
ffffffff802109c0:	41 55                	push   %r13
ffffffff802109c2:	41 54                	push   %r12
ffffffff802109c4:	55                   	push   %rbp
ffffffff802109c5:	48 89 d5             	mov    %rdx,%rbp
ffffffff802109c8:	53                   	push   %rbx
ffffffff802109c9:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802109cd:	f6 c5 80             	test   $0x80,%ch
ffffffff802109d0:	0f 85 9a 00 00 00    	jne    ffffffff80210a70 <_RME_Sig_Snd.isra.0+0xb0>
ffffffff802109d6:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802109d9:	0f 83 e1 00 00 00    	jae    ffffffff80210ac0 <_RME_Sig_Snd.isra.0+0x100>
ffffffff802109df:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802109e3:	48 8d 1c 39          	lea    (%rcx,%rdi,1),%rbx
ffffffff802109e7:	48 8b 03             	mov    (%rbx),%rax
ffffffff802109ea:	48 89 c2             	mov    %rax,%rdx
ffffffff802109ed:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802109f1:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff802109f5:	0f 84 dd 00 00 00    	je     ffffffff80210ad8 <_RME_Sig_Snd.isra.0+0x118>
ffffffff802109fb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802109ff:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80210a03:	0f 85 e7 00 00 00    	jne    ffffffff80210af0 <_RME_Sig_Snd.isra.0+0x130>
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff80210a09:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff80210a0d:	0f 84 5d 01 00 00    	je     ffffffff80210b70 <_RME_Sig_Snd.isra.0+0x1b0>
    Local=RME_CPU_LOCAL();
ffffffff80210a13:	e8 27 ae ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80210a18:	49 89 c5             	mov    %rax,%r13
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff80210a1b:	8b 03                	mov    (%rbx),%eax
ffffffff80210a1d:	85 c0                	test   %eax,%eax
ffffffff80210a1f:	74 04                	je     ffffffff80210a25 <_RME_Sig_Snd.isra.0+0x65>
ffffffff80210a21:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    Thd_Rcv=Sig_Root->Thd;
ffffffff80210a25:	4c 8b 63 30          	mov    0x30(%rbx),%r12
    if(Thd_Rcv!=(void*)RME_NULL)
ffffffff80210a29:	4d 85 e4             	test   %r12,%r12
ffffffff80210a2c:	74 0b                	je     ffffffff80210a39 <_RME_Sig_Snd.isra.0+0x79>
        if(Thd_Rcv->Sched.Local==Local)
ffffffff80210a2e:	4d 3b 6c 24 28       	cmp    0x28(%r12),%r13
ffffffff80210a33:	0f 84 cf 00 00 00    	je     ffffffff80210b08 <_RME_Sig_Snd.isra.0+0x148>
ffffffff80210a39:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80210a3e:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
        if(RME_FETCH_ADD(&(Sig_Root->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80210a44:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80210a4b:	ff ff 7f 
ffffffff80210a4e:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210a51:	0f 87 b9 01 00 00    	ja     ffffffff80210c10 <_RME_Sig_Snd.isra.0+0x250>
        __RME_Svc_Retval_Set(Reg,0);
ffffffff80210a57:	31 f6                	xor    %esi,%esi
ffffffff80210a59:	48 89 ef             	mov    %rbp,%rdi
ffffffff80210a5c:	e8 2f a9 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
    return 0;
ffffffff80210a61:	31 c0                	xor    %eax,%eax
}
ffffffff80210a63:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80210a67:	5b                   	pop    %rbx
ffffffff80210a68:	5d                   	pop    %rbp
ffffffff80210a69:	41 5c                	pop    %r12
ffffffff80210a6b:	41 5d                	pop    %r13
ffffffff80210a6d:	c3                   	ret    
ffffffff80210a6e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80210a70:	48 89 c8             	mov    %rcx,%rax
ffffffff80210a73:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210a77:	48 39 f0             	cmp    %rsi,%rax
ffffffff80210a7a:	73 44                	jae    ffffffff80210ac0 <_RME_Sig_Snd.isra.0+0x100>
ffffffff80210a7c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210a80:	48 01 c7             	add    %rax,%rdi
ffffffff80210a83:	48 8b 07             	mov    (%rdi),%rax
ffffffff80210a86:	48 89 c2             	mov    %rax,%rdx
ffffffff80210a89:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80210a8d:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff80210a91:	74 45                	je     ffffffff80210ad8 <_RME_Sig_Snd.isra.0+0x118>
ffffffff80210a93:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210a97:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210a9b:	75 53                	jne    ffffffff80210af0 <_RME_Sig_Snd.isra.0+0x130>
ffffffff80210a9d:	48 8b 47 28          	mov    0x28(%rdi),%rax
ffffffff80210aa1:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff80210aa7:	48 39 c1             	cmp    %rax,%rcx
ffffffff80210aaa:	73 14                	jae    ffffffff80210ac0 <_RME_Sig_Snd.isra.0+0x100>
ffffffff80210aac:	48 8b 5f 18          	mov    0x18(%rdi),%rbx
ffffffff80210ab0:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80210ab4:	48 01 cb             	add    %rcx,%rbx
ffffffff80210ab7:	e9 2b ff ff ff       	jmp    ffffffff802109e7 <_RME_Sig_Snd.isra.0+0x27>
ffffffff80210abc:	0f 1f 40 00          	nopl   0x0(%rax)
}
ffffffff80210ac0:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80210ac4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff80210acb:	5b                   	pop    %rbx
ffffffff80210acc:	5d                   	pop    %rbp
ffffffff80210acd:	41 5c                	pop    %r12
ffffffff80210acf:	41 5d                	pop    %r13
ffffffff80210ad1:	c3                   	ret    
ffffffff80210ad2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80210ad8:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80210adc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff80210ae3:	5b                   	pop    %rbx
ffffffff80210ae4:	5d                   	pop    %rbp
ffffffff80210ae5:	41 5c                	pop    %r12
ffffffff80210ae7:	41 5d                	pop    %r13
ffffffff80210ae9:	c3                   	ret    
ffffffff80210aea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80210af0:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80210af4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff80210afb:	5b                   	pop    %rbx
ffffffff80210afc:	5d                   	pop    %rbp
ffffffff80210afd:	41 5c                	pop    %r12
ffffffff80210aff:	41 5d                	pop    %r13
ffffffff80210b01:	c3                   	ret    
ffffffff80210b02:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        __RME_Svc_Retval_Set(Reg,0);
ffffffff80210b08:	31 f6                	xor    %esi,%esi
ffffffff80210b0a:	48 89 ef             	mov    %rbp,%rdi
ffffffff80210b0d:	e8 7e a8 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
        __RME_Svc_Retval_Set(&(Thd_Rcv->Ctx.Reg->Reg),1);
ffffffff80210b12:	49 8b bc 24 90 00 00 	mov    0x90(%r12),%rdi
ffffffff80210b19:	00 
ffffffff80210b1a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80210b1f:	e8 6c a8 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
        if(Thd_Rcv->Sched.Slice!=0U)
ffffffff80210b24:	49 83 7c 24 30 00    	cmpq   $0x0,0x30(%r12)
ffffffff80210b2a:	75 54                	jne    ffffffff80210b80 <_RME_Sig_Snd.isra.0+0x1c0>
            Thd_Rcv->Sched.State=RME_THD_TIMEOUT;
ffffffff80210b2c:	49 c7 44 24 38 02 00 	movq   $0x2,0x38(%r12)
ffffffff80210b33:	00 00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80210b35:	49 8d 44 24 10       	lea    0x10(%r12),%rax
ffffffff80210b3a:	49 39 44 24 10       	cmp    %rax,0x10(%r12)
ffffffff80210b3f:	0f 84 9b 00 00 00    	je     ffffffff80210be0 <_RME_Sig_Snd.isra.0+0x220>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80210b45:	49 8b 7c 24 70       	mov    0x70(%r12),%rdi
ffffffff80210b4a:	48 85 ff             	test   %rdi,%rdi
ffffffff80210b4d:	74 05                	je     ffffffff80210b54 <_RME_Sig_Snd.isra.0+0x194>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80210b4f:	e8 8c f7 ff ff       	call   ffffffff802102e0 <_RME_Kern_Snd>
        _RME_Kern_High(Reg,Local);
ffffffff80210b54:	4c 89 ee             	mov    %r13,%rsi
ffffffff80210b57:	48 89 ef             	mov    %rbp,%rdi
ffffffff80210b5a:	e8 31 f2 ff ff       	call   ffffffff8020fd90 <_RME_Kern_High>
        Sig_Root->Thd=RME_NULL;
ffffffff80210b5f:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff80210b66:	00 
    return 0;
ffffffff80210b67:	31 c0                	xor    %eax,%eax
ffffffff80210b69:	e9 f5 fe ff ff       	jmp    ffffffff80210a63 <_RME_Sig_Snd.isra.0+0xa3>
ffffffff80210b6e:	66 90                	xchg   %ax,%ax
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff80210b70:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210b77:	e9 e7 fe ff ff       	jmp    ffffffff80210a63 <_RME_Sig_Snd.isra.0+0xa3>
ffffffff80210b7c:	0f 1f 40 00          	nopl   0x0(%rax)
    Prio=Thd->Sched.Prio;
ffffffff80210b80:	49 8b 4c 24 40       	mov    0x40(%r12),%rcx
    Local=Thd->Sched.Local;
ffffffff80210b85:	49 8b 44 24 28       	mov    0x28(%r12),%rax
            Thd_Rcv->Sched.State=RME_THD_READY;
ffffffff80210b8a:	49 c7 44 24 38 00 00 	movq   $0x0,0x38(%r12)
ffffffff80210b91:	00 00 
                  &(Local->Run.List[Prio]));
ffffffff80210b93:	48 89 ca             	mov    %rcx,%rdx
ffffffff80210b96:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80210b9a:	48 8d 7c 10 28       	lea    0x28(%rax,%rdx,1),%rdi
ffffffff80210b9f:	48 89 ca             	mov    %rcx,%rdx
ffffffff80210ba2:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80210ba6:	48 01 c2             	add    %rax,%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80210ba9:	48 8b 72 30          	mov    0x30(%rdx),%rsi
    Next->Prev=New;
ffffffff80210bad:	4c 89 62 30          	mov    %r12,0x30(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210bb1:	ba 01 00 00 00       	mov    $0x1,%edx
    New->Next=Next;
ffffffff80210bb6:	49 89 3c 24          	mov    %rdi,(%r12)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210bba:	48 d3 e2             	shl    %cl,%rdx
    New->Prev=Prev;
ffffffff80210bbd:	49 89 74 24 08       	mov    %rsi,0x8(%r12)
    Prev->Next=New;
ffffffff80210bc2:	4c 89 26             	mov    %r12,(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210bc5:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210bc8:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff80210bcc:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
}
ffffffff80210bd1:	e9 7e ff ff ff       	jmp    ffffffff80210b54 <_RME_Sig_Snd.isra.0+0x194>
ffffffff80210bd6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80210bdd:	00 00 00 
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80210be0:	49 8b 54 24 68       	mov    0x68(%r12),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80210be5:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff80210bec:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff80210bf0:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
    New->Next=Next;
ffffffff80210bf7:	49 89 74 24 10       	mov    %rsi,0x10(%r12)
    New->Prev=Prev;
ffffffff80210bfc:	49 89 4c 24 18       	mov    %rcx,0x18(%r12)
    Prev->Next=New;
ffffffff80210c01:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff80210c04:	e9 3c ff ff ff       	jmp    ffffffff80210b45 <_RME_Sig_Snd.isra.0+0x185>
ffffffff80210c09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80210c10:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80210c17:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
            return RME_ERR_SIV_FULL;
ffffffff80210c1d:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff80210c24:	e9 3a fe ff ff       	jmp    ffffffff80210a63 <_RME_Sig_Snd.isra.0+0xa3>
ffffffff80210c29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80210c30 <_RME_Thd_Swt>:
{
ffffffff80210c30:	41 57                	push   %r15
ffffffff80210c32:	41 56                	push   %r14
ffffffff80210c34:	49 89 fe             	mov    %rdi,%r14
ffffffff80210c37:	41 55                	push   %r13
ffffffff80210c39:	41 54                	push   %r12
ffffffff80210c3b:	49 89 cc             	mov    %rcx,%r12
ffffffff80210c3e:	55                   	push   %rbp
ffffffff80210c3f:	48 89 f5             	mov    %rsi,%rbp
ffffffff80210c42:	53                   	push   %rbx
ffffffff80210c43:	48 89 d3             	mov    %rdx,%rbx
ffffffff80210c46:	48 83 ec 08          	sub    $0x8,%rsp
    Local=RME_CPU_LOCAL();
ffffffff80210c4a:	e8 f0 ab ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thd_Cur=Local->Thd_Cur;
ffffffff80210c4f:	4c 8b 68 08          	mov    0x8(%rax),%r13
    Local=RME_CPU_LOCAL();
ffffffff80210c53:	49 89 c7             	mov    %rax,%r15
    if(Cap_Thd<RME_CID_NULL)
ffffffff80210c56:	48 81 fb ff ff ff 7f 	cmp    $0x7fffffff,%rbx
ffffffff80210c5d:	0f 8f 1d 01 00 00    	jg     ffffffff80210d80 <_RME_Thd_Swt+0x150>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80210c63:	49 8b 56 28          	mov    0x28(%r14),%rdx
ffffffff80210c67:	f6 c7 80             	test   $0x80,%bh
ffffffff80210c6a:	0f 85 b0 00 00 00    	jne    ffffffff80210d20 <_RME_Thd_Swt+0xf0>
ffffffff80210c70:	48 39 d3             	cmp    %rdx,%rbx
ffffffff80210c73:	0f 83 77 02 00 00    	jae    ffffffff80210ef0 <_RME_Thd_Swt+0x2c0>
ffffffff80210c79:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff80210c7d:	49 03 5e 18          	add    0x18(%r14),%rbx
ffffffff80210c81:	48 8b 03             	mov    (%rbx),%rax
ffffffff80210c84:	48 89 c2             	mov    %rax,%rdx
ffffffff80210c87:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80210c8b:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff80210c8f:	0f 84 6b 02 00 00    	je     ffffffff80210f00 <_RME_Thd_Swt+0x2d0>
ffffffff80210c95:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210c99:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80210c9d:	0f 85 fd 01 00 00    	jne    ffffffff80210ea0 <_RME_Thd_Swt+0x270>
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff80210ca3:	f6 43 11 01          	testb  $0x1,0x11(%rbx)
ffffffff80210ca7:	0f 84 8b 02 00 00    	je     ffffffff80210f38 <_RME_Thd_Swt+0x308>
        Thd_New=RME_CAP_GETOBJ(Thd_Cap_New,struct RME_Thd_Struct*);
ffffffff80210cad:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
        if(Thd_New->Sched.Local!=Local)
ffffffff80210cb1:	4c 39 7b 28          	cmp    %r15,0x28(%rbx)
ffffffff80210cb5:	0f 85 bb 02 00 00    	jne    ffffffff80210f76 <_RME_Thd_Swt+0x346>
        if(Thd_Cur->Sched.Prio!=Thd_New->Sched.Prio)
ffffffff80210cbb:	48 8b 43 40          	mov    0x40(%rbx),%rax
ffffffff80210cbf:	49 39 45 40          	cmp    %rax,0x40(%r13)
ffffffff80210cc3:	0f 85 b9 02 00 00    	jne    ffffffff80210f82 <_RME_Thd_Swt+0x352>
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff80210cc9:	48 8b 43 38          	mov    0x38(%rbx),%rax
ffffffff80210ccd:	48 83 e8 01          	sub    $0x1,%rax
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff80210cd1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210cd5:	0f 86 9b 02 00 00    	jbe    ffffffff80210f76 <_RME_Thd_Swt+0x346>
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80210cdb:	4d 85 e4             	test   %r12,%r12
ffffffff80210cde:	0f 85 2c 01 00 00    	jne    ffffffff80210e10 <_RME_Thd_Swt+0x1e0>
ffffffff80210ce4:	0f 1f 40 00          	nopl   0x0(%rax)
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80210ce8:	31 f6                	xor    %esi,%esi
ffffffff80210cea:	48 89 ef             	mov    %rbp,%rdi
ffffffff80210ced:	e8 9e a6 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
        return 0;
ffffffff80210cf2:	31 c0                	xor    %eax,%eax
    if(Thd_Cur==Thd_New)
ffffffff80210cf4:	4c 39 eb             	cmp    %r13,%rbx
ffffffff80210cf7:	74 14                	je     ffffffff80210d0d <_RME_Thd_Swt+0xdd>
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff80210cf9:	48 89 da             	mov    %rbx,%rdx
ffffffff80210cfc:	4c 89 ee             	mov    %r13,%rsi
ffffffff80210cff:	48 89 ef             	mov    %rbp,%rdi
ffffffff80210d02:	e8 f9 c0 ff ff       	call   ffffffff8020ce00 <_RME_Run_Swt.isra.0>
    Local->Thd_Cur=Thd_New;
ffffffff80210d07:	49 89 5f 08          	mov    %rbx,0x8(%r15)
    return 0;
ffffffff80210d0b:	31 c0                	xor    %eax,%eax
}
ffffffff80210d0d:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80210d11:	5b                   	pop    %rbx
ffffffff80210d12:	5d                   	pop    %rbp
ffffffff80210d13:	41 5c                	pop    %r12
ffffffff80210d15:	41 5d                	pop    %r13
ffffffff80210d17:	41 5e                	pop    %r14
ffffffff80210d19:	41 5f                	pop    %r15
ffffffff80210d1b:	c3                   	ret    
ffffffff80210d1c:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80210d20:	48 89 d8             	mov    %rbx,%rax
ffffffff80210d23:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210d27:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210d2a:	0f 83 c0 01 00 00    	jae    ffffffff80210ef0 <_RME_Thd_Swt+0x2c0>
ffffffff80210d30:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210d34:	49 03 46 18          	add    0x18(%r14),%rax
ffffffff80210d38:	48 8b 10             	mov    (%rax),%rdx
ffffffff80210d3b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80210d3e:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80210d42:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80210d46:	0f 84 b4 01 00 00    	je     ffffffff80210f00 <_RME_Thd_Swt+0x2d0>
ffffffff80210d4c:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80210d50:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80210d54:	0f 85 46 01 00 00    	jne    ffffffff80210ea0 <_RME_Thd_Swt+0x270>
ffffffff80210d5a:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80210d5e:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff80210d64:	48 39 d3             	cmp    %rdx,%rbx
ffffffff80210d67:	0f 83 83 01 00 00    	jae    ffffffff80210ef0 <_RME_Thd_Swt+0x2c0>
ffffffff80210d6d:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff80210d71:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff80210d75:	e9 07 ff ff ff       	jmp    ffffffff80210c81 <_RME_Thd_Swt+0x51>
ffffffff80210d7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80210d80:	4d 85 e4             	test   %r12,%r12
ffffffff80210d83:	74 14                	je     ffffffff80210d99 <_RME_Thd_Swt+0x169>
ffffffff80210d85:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80210d8c:	ff ff 7f 
ffffffff80210d8f:	49 39 45 30          	cmp    %rax,0x30(%r13)
ffffffff80210d93:	0f 86 17 01 00 00    	jbe    ffffffff80210eb0 <_RME_Thd_Swt+0x280>
            _RME_Run_Del(Thd_Cur);
ffffffff80210d99:	4c 89 ef             	mov    %r13,%rdi
ffffffff80210d9c:	e8 bf b9 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
    Prio=Thd->Sched.Prio;
ffffffff80210da1:	49 8b 4d 40          	mov    0x40(%r13),%rcx
    Local=Thd->Sched.Local;
ffffffff80210da5:	49 8b 45 28          	mov    0x28(%r13),%rax
                  &(Local->Run.List[Prio]));
ffffffff80210da9:	48 89 ca             	mov    %rcx,%rdx
ffffffff80210dac:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80210db0:	48 8d 7c 10 28       	lea    0x28(%rax,%rdx,1),%rdi
ffffffff80210db5:	48 89 ca             	mov    %rcx,%rdx
ffffffff80210db8:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80210dbc:	48 01 c2             	add    %rax,%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80210dbf:	48 8b 72 30          	mov    0x30(%rdx),%rsi
    Next->Prev=New;
ffffffff80210dc3:	4c 89 6a 30          	mov    %r13,0x30(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210dc7:	ba 01 00 00 00       	mov    $0x1,%edx
    New->Next=Next;
ffffffff80210dcc:	49 89 7d 00          	mov    %rdi,0x0(%r13)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210dd0:	48 d3 e2             	shl    %cl,%rdx
    New->Prev=Prev;
ffffffff80210dd3:	49 89 75 08          	mov    %rsi,0x8(%r13)
    Prev->Next=New;
ffffffff80210dd7:	4c 89 2e             	mov    %r13,(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210dda:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210ddd:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff80210de1:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80210de6:	49 8b 47 20          	mov    0x20(%r15),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff80210dea:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80210dee:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80210df2:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80210df5:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80210df9:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80210dfe:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80210e02:	49 8b 5c 07 08       	mov    0x8(%r15,%rax,1),%rbx
ffffffff80210e07:	e9 dc fe ff ff       	jmp    ffffffff80210ce8 <_RME_Thd_Swt+0xb8>
ffffffff80210e0c:	0f 1f 40 00          	nopl   0x0(%rax)
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80210e10:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80210e17:	ff ff 7f 
ffffffff80210e1a:	49 39 45 30          	cmp    %rax,0x30(%r13)
ffffffff80210e1e:	0f 87 c4 fe ff ff    	ja     ffffffff80210ce8 <_RME_Thd_Swt+0xb8>
            Thd_Cur->Sched.Slice=0U;
ffffffff80210e24:	49 c7 45 30 00 00 00 	movq   $0x0,0x30(%r13)
ffffffff80210e2b:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80210e2c:	4c 89 ef             	mov    %r13,%rdi
ffffffff80210e2f:	e8 2c b9 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff80210e34:	49 c7 45 38 02 00 00 	movq   $0x2,0x38(%r13)
ffffffff80210e3b:	00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80210e3c:	49 8d 45 10          	lea    0x10(%r13),%rax
ffffffff80210e40:	49 39 45 10          	cmp    %rax,0x10(%r13)
ffffffff80210e44:	0f 84 06 01 00 00    	je     ffffffff80210f50 <_RME_Thd_Swt+0x320>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80210e4a:	49 8b 7d 70          	mov    0x70(%r13),%rdi
ffffffff80210e4e:	48 85 ff             	test   %rdi,%rdi
ffffffff80210e51:	74 05                	je     ffffffff80210e58 <_RME_Thd_Swt+0x228>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80210e53:	e8 88 f4 ff ff       	call   ffffffff802102e0 <_RME_Kern_Snd>
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80210e58:	49 8b 47 20          	mov    0x20(%r15),%rax
ffffffff80210e5c:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80210e60:	48 83 f8 01          	cmp    $0x1,%rax
            if((Thd_High->Sched.Prio>Thd_New->Sched.Prio)||(Thd_Cur==Thd_New))
ffffffff80210e64:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80210e68:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80210e6b:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80210e6f:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80210e74:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80210e78:	49 8b 44 07 08       	mov    0x8(%r15,%rax,1),%rax
            if((Thd_High->Sched.Prio>Thd_New->Sched.Prio)||(Thd_Cur==Thd_New))
ffffffff80210e7d:	48 39 78 40          	cmp    %rdi,0x40(%rax)
ffffffff80210e81:	0f 87 c1 00 00 00    	ja     ffffffff80210f48 <_RME_Thd_Swt+0x318>
ffffffff80210e87:	49 39 dd             	cmp    %rbx,%r13
ffffffff80210e8a:	0f 84 b8 00 00 00    	je     ffffffff80210f48 <_RME_Thd_Swt+0x318>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80210e90:	31 f6                	xor    %esi,%esi
ffffffff80210e92:	48 89 ef             	mov    %rbp,%rdi
ffffffff80210e95:	e8 f6 a4 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
    if(Thd_Cur==Thd_New)
ffffffff80210e9a:	e9 5a fe ff ff       	jmp    ffffffff80210cf9 <_RME_Thd_Swt+0xc9>
ffffffff80210e9f:	90                   	nop
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80210ea0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210ea7:	e9 61 fe ff ff       	jmp    ffffffff80210d0d <_RME_Thd_Swt+0xdd>
ffffffff80210eac:	0f 1f 40 00          	nopl   0x0(%rax)
            Thd_Cur->Sched.Slice=0U;
ffffffff80210eb0:	49 c7 45 30 00 00 00 	movq   $0x0,0x30(%r13)
ffffffff80210eb7:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80210eb8:	4c 89 ef             	mov    %r13,%rdi
ffffffff80210ebb:	e8 a0 b8 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff80210ec0:	49 c7 45 38 02 00 00 	movq   $0x2,0x38(%r13)
ffffffff80210ec7:	00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80210ec8:	49 8d 45 10          	lea    0x10(%r13),%rax
ffffffff80210ecc:	49 39 45 10          	cmp    %rax,0x10(%r13)
ffffffff80210ed0:	74 3e                	je     ffffffff80210f10 <_RME_Thd_Swt+0x2e0>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80210ed2:	49 8b 7d 70          	mov    0x70(%r13),%rdi
ffffffff80210ed6:	48 85 ff             	test   %rdi,%rdi
ffffffff80210ed9:	0f 84 07 ff ff ff    	je     ffffffff80210de6 <_RME_Thd_Swt+0x1b6>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80210edf:	e8 fc f3 ff ff       	call   ffffffff802102e0 <_RME_Kern_Snd>
ffffffff80210ee4:	e9 fd fe ff ff       	jmp    ffffffff80210de6 <_RME_Thd_Swt+0x1b6>
ffffffff80210ee9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80210ef0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210ef7:	e9 11 fe ff ff       	jmp    ffffffff80210d0d <_RME_Thd_Swt+0xdd>
ffffffff80210efc:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80210f00:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210f07:	e9 01 fe ff ff       	jmp    ffffffff80210d0d <_RME_Thd_Swt+0xdd>
ffffffff80210f0c:	0f 1f 40 00          	nopl   0x0(%rax)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80210f10:	49 8b 55 68          	mov    0x68(%r13),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80210f14:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff80210f1b:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff80210f1f:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
    New->Next=Next;
ffffffff80210f26:	49 89 75 10          	mov    %rsi,0x10(%r13)
    New->Prev=Prev;
ffffffff80210f2a:	49 89 4d 18          	mov    %rcx,0x18(%r13)
    Prev->Next=New;
ffffffff80210f2e:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff80210f31:	eb 9f                	jmp    ffffffff80210ed2 <_RME_Thd_Swt+0x2a2>
ffffffff80210f33:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff80210f38:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210f3f:	e9 c9 fd ff ff       	jmp    ffffffff80210d0d <_RME_Thd_Swt+0xdd>
ffffffff80210f44:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80210f48:	48 89 c3             	mov    %rax,%rbx
ffffffff80210f4b:	e9 98 fd ff ff       	jmp    ffffffff80210ce8 <_RME_Thd_Swt+0xb8>
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80210f50:	49 8b 55 68          	mov    0x68(%r13),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80210f54:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff80210f5b:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff80210f5f:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
    New->Next=Next;
ffffffff80210f66:	49 89 75 10          	mov    %rsi,0x10(%r13)
    New->Prev=Prev;
ffffffff80210f6a:	49 89 4d 18          	mov    %rcx,0x18(%r13)
    Prev->Next=New;
ffffffff80210f6e:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff80210f71:	e9 d4 fe ff ff       	jmp    ffffffff80210e4a <_RME_Thd_Swt+0x21a>
            return RME_ERR_PTH_INVSTATE;
ffffffff80210f76:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80210f7d:	e9 8b fd ff ff       	jmp    ffffffff80210d0d <_RME_Thd_Swt+0xdd>
            return RME_ERR_PTH_PRIO;
ffffffff80210f82:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80210f89:	e9 7f fd ff ff       	jmp    ffffffff80210d0d <_RME_Thd_Swt+0xdd>
ffffffff80210f8e:	66 90                	xchg   %ax,%ax

ffffffff80210f90 <_RME_Svc_Handler>:
{
ffffffff80210f90:	f3 0f 1e fa          	endbr64 
ffffffff80210f94:	41 57                	push   %r15
ffffffff80210f96:	41 56                	push   %r14
ffffffff80210f98:	41 55                	push   %r13
ffffffff80210f9a:	41 54                	push   %r12
ffffffff80210f9c:	55                   	push   %rbp
ffffffff80210f9d:	48 89 fd             	mov    %rdi,%rbp
ffffffff80210fa0:	53                   	push   %rbx
ffffffff80210fa1:	48 83 ec 48          	sub    $0x48,%rsp
    __RME_Svc_Param_Get(Reg, &Svc, &Cid, Param);
ffffffff80210fa5:	48 8d 4c 24 20       	lea    0x20(%rsp),%rcx
ffffffff80210faa:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
ffffffff80210faf:	48 89 e6             	mov    %rsp,%rsi
ffffffff80210fb2:	e8 a9 a3 00 00       	call   ffffffff8021b360 <__RME_Svc_Param_Get>
    if(Svc_Num==RME_SVC_INV_RET)
ffffffff80210fb7:	48 8b 1c 24          	mov    (%rsp),%rbx
ffffffff80210fbb:	83 e3 3f             	and    $0x3f,%ebx
ffffffff80210fbe:	74 58                	je     ffffffff80211018 <_RME_Svc_Handler+0x88>
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff80210fc0:	e8 7a a8 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80210fc5:	48 8b 40 08          	mov    0x8(%rax),%rax
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff80210fc9:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210fd0:	48 85 d2             	test   %rdx,%rdx
ffffffff80210fd3:	74 33                	je     ffffffff80211008 <_RME_Svc_Handler+0x78>
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff80210fd5:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210fdc:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80210fdf:	74 27                	je     ffffffff80211008 <_RME_Svc_Handler+0x78>
        Cpt=Inv_Top->Prc->Cpt;
ffffffff80210fe1:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff80210fe5:	48 8b 78 28          	mov    0x28(%rax),%rdi
    if(Svc_Num==RME_SVC_INV_ACT)
ffffffff80210fe9:	48 83 fb 01          	cmp    $0x1,%rbx
ffffffff80210fed:	0f 84 85 04 00 00    	je     ffffffff80211478 <_RME_Svc_Handler+0x4e8>
    switch(Svc_Num)
ffffffff80210ff3:	48 83 fb 09          	cmp    $0x9,%rbx
ffffffff80210ff7:	0f 87 a3 04 00 00    	ja     ffffffff802114a0 <_RME_Svc_Handler+0x510>
ffffffff80210ffd:	3e ff 24 dd c0 d7 21 	notrack jmp *-0x7fde2840(,%rbx,8)
ffffffff80211004:	80 
ffffffff80211005:	0f 1f 00             	nopl   (%rax)
        Cpt=Thd_Cur->Sched.Prc->Cpt;
ffffffff80211008:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021100c:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff80211010:	eb d7                	jmp    ffffffff80210fe9 <_RME_Svc_Handler+0x59>
ffffffff80211012:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Retval=_RME_Inv_Ret(Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
ffffffff80211018:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
ffffffff8021101d:	31 d2                	xor    %edx,%edx
ffffffff8021101f:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211022:	e8 89 b7 ff ff       	call   ffffffff8020c7b0 <_RME_Inv_Ret>
        RME_SWITCH_RETURN(Reg, Retval);
ffffffff80211027:	48 85 c0             	test   %rax,%rax
ffffffff8021102a:	78 34                	js     ffffffff80211060 <_RME_Svc_Handler+0xd0>
}
ffffffff8021102c:	48 83 c4 48          	add    $0x48,%rsp
ffffffff80211030:	5b                   	pop    %rbx
ffffffff80211031:	5d                   	pop    %rbp
ffffffff80211032:	41 5c                	pop    %r12
ffffffff80211034:	41 5d                	pop    %r13
ffffffff80211036:	41 5e                	pop    %r14
ffffffff80211038:	41 5f                	pop    %r15
ffffffff8021103a:	c3                   	ret    
ffffffff8021103b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Retval=_RME_Thd_Swt(Cpt,
ffffffff80211040:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
ffffffff80211045:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff8021104a:	48 89 ee             	mov    %rbp,%rsi
ffffffff8021104d:	e8 de fb ff ff       	call   ffffffff80210c30 <_RME_Thd_Swt>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211052:	48 85 c0             	test   %rax,%rax
ffffffff80211055:	79 d5                	jns    ffffffff8021102c <_RME_Svc_Handler+0x9c>
ffffffff80211057:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021105e:	00 00 
ffffffff80211060:	48 89 c6             	mov    %rax,%rsi
ffffffff80211063:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211066:	e8 25 a3 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
ffffffff8021106b:	eb bf                	jmp    ffffffff8021102c <_RME_Svc_Handler+0x9c>
ffffffff8021106d:	0f 1f 00             	nopl   (%rax)
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff80211070:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
ffffffff80211075:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
ffffffff8021107a:	48 89 ee             	mov    %rbp,%rsi
ffffffff8021107d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff80211082:	e8 89 f3 ff ff       	call   ffffffff80210410 <_RME_Thd_Time_Xfer>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211087:	48 85 c0             	test   %rax,%rax
ffffffff8021108a:	79 a0                	jns    ffffffff8021102c <_RME_Svc_Handler+0x9c>
ffffffff8021108c:	eb d2                	jmp    ffffffff80211060 <_RME_Svc_Handler+0xd0>
ffffffff8021108e:	66 90                	xchg   %ax,%ax
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff80211090:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
ffffffff80211095:	4c 8b 4c 24 28       	mov    0x28(%rsp),%r9
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8021109a:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8021109e:	48 89 ee             	mov    %rbp,%rsi
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
ffffffff802110a1:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff802110a6:	48 89 c2             	mov    %rax,%rdx
ffffffff802110a9:	89 c0                	mov    %eax,%eax
ffffffff802110ab:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802110af:	44 89 c1             	mov    %r8d,%ecx
ffffffff802110b2:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff802110b6:	52                   	push   %rdx
ffffffff802110b7:	50                   	push   %rax
ffffffff802110b8:	4c 89 c8             	mov    %r9,%rax
ffffffff802110bb:	45 89 c9             	mov    %r9d,%r9d
ffffffff802110be:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802110c2:	50                   	push   %rax
ffffffff802110c3:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff802110c8:	e8 23 ed ff ff       	call   ffffffff8020fdf0 <_RME_Thd_Sched_Prio>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802110cd:	48 83 c4 20          	add    $0x20,%rsp
ffffffff802110d1:	48 85 c0             	test   %rax,%rax
ffffffff802110d4:	0f 89 52 ff ff ff    	jns    ffffffff8021102c <_RME_Svc_Handler+0x9c>
ffffffff802110da:	eb 84                	jmp    ffffffff80211060 <_RME_Svc_Handler+0xd0>
ffffffff802110dc:	0f 1f 40 00          	nopl   0x0(%rax)
            Retval=_RME_Thd_Exec_Set(Cpt,
ffffffff802110e0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff802110e5:	4c 8b 74 24 30       	mov    0x30(%rsp),%r14
ffffffff802110ea:	4c 8b 6c 24 28       	mov    0x28(%rsp),%r13
ffffffff802110ef:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
ffffffff802110f4:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff802110f8:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802110fc:	f6 c4 80             	test   $0x80,%ah
ffffffff802110ff:	0f 85 fb 03 00 00    	jne    ffffffff80211500 <_RME_Svc_Handler+0x570>
ffffffff80211105:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211108:	0f 83 8f 18 00 00    	jae    ffffffff8021299d <_RME_Svc_Handler+0x1a0d>
ffffffff8021110e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211112:	48 01 f0             	add    %rsi,%rax
ffffffff80211115:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211118:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021111b:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8021111f:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80211123:	0f 84 98 18 00 00    	je     ffffffff802129c1 <_RME_Svc_Handler+0x1a31>
ffffffff80211129:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021112d:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80211131:	0f 85 a2 18 00 00    	jne    ffffffff802129d9 <_RME_Svc_Handler+0x1a49>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff80211137:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8021113b:	0f 84 99 19 00 00    	je     ffffffff80212ada <_RME_Svc_Handler+0x1b4a>
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff80211141:	48 8b 58 18          	mov    0x18(%rax),%rbx
    Local=RME_CPU_LOCAL();
ffffffff80211145:	e8 f5 a6 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021114a:	49 89 c7             	mov    %rax,%r15
    if(Thread->Sched.Local!=Local)
ffffffff8021114d:	48 3b 43 28          	cmp    0x28(%rbx),%rax
ffffffff80211151:	0f 85 c6 22 00 00    	jne    ffffffff8021341d <_RME_Svc_Handler+0x248d>
    if((Entry!=RME_NULL)&&(Stack!=RME_NULL))
ffffffff80211157:	4d 85 e4             	test   %r12,%r12
ffffffff8021115a:	74 2b                	je     ffffffff80211187 <_RME_Svc_Handler+0x1f7>
ffffffff8021115c:	4d 85 ed             	test   %r13,%r13
ffffffff8021115f:	74 26                	je     ffffffff80211187 <_RME_Svc_Handler+0x1f7>
        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
ffffffff80211161:	4c 8b 83 90 00 00 00 	mov    0x90(%rbx),%r8
ffffffff80211168:	4c 89 f1             	mov    %r14,%rcx
ffffffff8021116b:	4c 89 ea             	mov    %r13,%rdx
ffffffff8021116e:	4c 89 e6             	mov    %r12,%rsi
ffffffff80211171:	48 bf ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdi
ffffffff80211178:	ff ff 7f 
ffffffff8021117b:	48 23 bb 88 00 00 00 	and    0x88(%rbx),%rdi
ffffffff80211182:	e8 49 95 00 00       	call   ffffffff8021a6d0 <__RME_Thd_Reg_Init>
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80211187:	31 f6                	xor    %esi,%esi
ffffffff80211189:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021118c:	e8 ff a1 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80211191:	48 83 7b 38 03       	cmpq   $0x3,0x38(%rbx)
ffffffff80211196:	0f 85 90 fe ff ff    	jne    ffffffff8021102c <_RME_Svc_Handler+0x9c>
        if(Thread->Sched.Slice!=0U)
ffffffff8021119c:	48 83 7b 30 00       	cmpq   $0x0,0x30(%rbx)
ffffffff802111a1:	0f 84 ca 18 00 00    	je     ffffffff80212a71 <_RME_Svc_Handler+0x1ae1>
    Prio=Thd->Sched.Prio;
ffffffff802111a7:	48 8b 4b 40          	mov    0x40(%rbx),%rcx
    Local=Thd->Sched.Local;
ffffffff802111ab:	48 8b 43 28          	mov    0x28(%rbx),%rax
            Thread->Sched.State=RME_THD_READY;
ffffffff802111af:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
ffffffff802111b6:	00 
                  &(Local->Run.List[Prio]));
ffffffff802111b7:	48 89 ca             	mov    %rcx,%rdx
ffffffff802111ba:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff802111be:	48 8d 7c 10 28       	lea    0x28(%rax,%rdx,1),%rdi
ffffffff802111c3:	48 89 ca             	mov    %rcx,%rdx
ffffffff802111c6:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff802111ca:	48 01 c2             	add    %rax,%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802111cd:	48 8b 72 30          	mov    0x30(%rdx),%rsi
    Next->Prev=New;
ffffffff802111d1:	48 89 5a 30          	mov    %rbx,0x30(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802111d5:	ba 01 00 00 00       	mov    $0x1,%edx
    New->Next=Next;
ffffffff802111da:	48 89 3b             	mov    %rdi,(%rbx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802111dd:	48 d3 e2             	shl    %cl,%rdx
    New->Prev=Prev;
ffffffff802111e0:	48 89 73 08          	mov    %rsi,0x8(%rbx)
    Prev->Next=New;
ffffffff802111e4:	48 89 1e             	mov    %rbx,(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802111e7:	48 89 ce             	mov    %rcx,%rsi
ffffffff802111ea:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff802111ee:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        _RME_Kern_High(Reg,Local);
ffffffff802111f3:	4c 89 fe             	mov    %r15,%rsi
ffffffff802111f6:	48 89 ef             	mov    %rbp,%rdi
ffffffff802111f9:	e8 92 eb ff ff       	call   ffffffff8020fd90 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802111fe:	e9 29 fe ff ff       	jmp    ffffffff8021102c <_RME_Svc_Handler+0x9c>
ffffffff80211203:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                                       (rme_cid_t)Param[0]);                /* rme_cid_t Cap_Thd */
ffffffff80211208:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
ffffffff8021120d:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff80211211:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211215:	f6 c4 80             	test   $0x80,%ah
ffffffff80211218:	0f 84 c2 02 00 00    	je     ffffffff802114e0 <_RME_Svc_Handler+0x550>
ffffffff8021121e:	48 89 c2             	mov    %rax,%rdx
ffffffff80211221:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211225:	48 39 d1             	cmp    %rdx,%rcx
ffffffff80211228:	0f 86 63 17 00 00    	jbe    ffffffff80212991 <_RME_Svc_Handler+0x1a01>
ffffffff8021122e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80211232:	48 01 f2             	add    %rsi,%rdx
ffffffff80211235:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80211238:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021123b:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8021123f:	66 83 fe 02          	cmp    $0x2,%si
ffffffff80211243:	0f 84 6c 17 00 00    	je     ffffffff802129b5 <_RME_Svc_Handler+0x1a25>
ffffffff80211249:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021124d:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80211251:	0f 85 76 17 00 00    	jne    ffffffff802129cd <_RME_Svc_Handler+0x1a3d>
ffffffff80211257:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8021125b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211260:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211263:	0f 83 28 17 00 00    	jae    ffffffff80212991 <_RME_Svc_Handler+0x1a01>
ffffffff80211269:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021126d:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80211271:	48 89 c3             	mov    %rax,%rbx
ffffffff80211274:	48 8b 03             	mov    (%rbx),%rax
ffffffff80211277:	48 89 c2             	mov    %rax,%rdx
ffffffff8021127a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021127e:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff80211282:	0f 84 2d 17 00 00    	je     ffffffff802129b5 <_RME_Svc_Handler+0x1a25>
ffffffff80211288:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021128c:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80211290:	0f 85 37 17 00 00    	jne    ffffffff802129cd <_RME_Svc_Handler+0x1a3d>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff80211296:	f6 43 10 10          	testb  $0x10,0x10(%rbx)
ffffffff8021129a:	0f 84 2e 18 00 00    	je     ffffffff80212ace <_RME_Svc_Handler+0x1b3e>
    Local=RME_CPU_LOCAL();
ffffffff802112a0:	e8 9a a5 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thread=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff802112a5:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
    Local=RME_CPU_LOCAL();
ffffffff802112a9:	49 89 c4             	mov    %rax,%r12
    if(Thread->Sched.Local!=Local)
ffffffff802112ac:	48 3b 43 28          	cmp    0x28(%rbx),%rax
ffffffff802112b0:	0f 85 73 21 00 00    	jne    ffffffff80213429 <_RME_Svc_Handler+0x2499>
    if(Thread->Sched.Sched_Ref!=0U)
ffffffff802112b6:	48 83 7b 60 00       	cmpq   $0x0,0x60(%rbx)
ffffffff802112bb:	0f 85 1f 26 00 00    	jne    ffffffff802138e0 <_RME_Svc_Handler+0x2950>
    Thread->Sched.Sched_Thd->Sched.Sched_Ref--;
ffffffff802112c1:	48 8b 43 68          	mov    0x68(%rbx),%rax
ffffffff802112c5:	48 83 68 60 01       	subq   $0x1,0x60(%rax)
    if(Thread->Sched.Notif.Next!=&(Thread->Sched.Notif))
ffffffff802112ca:	48 8b 53 10          	mov    0x10(%rbx),%rdx
ffffffff802112ce:	48 8d 43 10          	lea    0x10(%rbx),%rax
ffffffff802112d2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802112d5:	74 13                	je     ffffffff802112ea <_RME_Svc_Handler+0x35a>
        _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff802112d7:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
    Next->Prev=Prev;
ffffffff802112db:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
    Prev->Next=Next;
ffffffff802112df:	48 89 11             	mov    %rdx,(%rcx)
    Head->Prev=Head;
ffffffff802112e2:	48 89 43 18          	mov    %rax,0x18(%rbx)
    Head->Next=Head;
ffffffff802112e6:	48 89 43 10          	mov    %rax,0x10(%rbx)
    if(Thread->Sched.Sched_Sig!=(void*)RME_NULL)
ffffffff802112ea:	48 8b 43 70          	mov    0x70(%rbx),%rax
ffffffff802112ee:	48 85 c0             	test   %rax,%rax
ffffffff802112f1:	74 0d                	je     ffffffff80211300 <_RME_Svc_Handler+0x370>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802112f3:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802112fa:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80211300:	31 f6                	xor    %esi,%esi
ffffffff80211302:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211305:	e8 86 a0 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
    if(Thread->Sched.State==RME_THD_READY)
ffffffff8021130a:	48 8b 43 38          	mov    0x38(%rbx),%rax
ffffffff8021130e:	48 85 c0             	test   %rax,%rax
ffffffff80211311:	0f 84 59 16 00 00    	je     ffffffff80212970 <_RME_Svc_Handler+0x19e0>
    else if(Thread->Sched.State==RME_THD_BLOCKED)
ffffffff80211317:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021131b:	0f 84 79 17 00 00    	je     ffffffff80212a9a <_RME_Svc_Handler+0x1b0a>
    Thread->Sched.Slice=0U;
ffffffff80211321:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff80211328:	00 
    if(Local->Thd_Cur==Thread)
ffffffff80211329:	49 3b 5c 24 08       	cmp    0x8(%r12),%rbx
ffffffff8021132e:	0f 84 bd 16 00 00    	je     ffffffff802129f1 <_RME_Svc_Handler+0x1a61>
    RME_WRITE_RELEASE((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff80211334:	48 c7 43 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%rbx)
ffffffff8021133b:	ff 
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021133c:	e9 eb fc ff ff       	jmp    ffffffff8021102c <_RME_Svc_Handler+0x9c>
ffffffff80211341:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            Retval=_RME_Kfn_Act(Cpt,
ffffffff80211348:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff8021134d:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
ffffffff80211352:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
                                RME_PARAM_D1(Param[0]),                     /* rme_ptr_t Sub_ID */
ffffffff80211357:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
{
    struct RME_Cap_Kfn* Kfn_Op;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff8021135c:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff80211360:	f6 c4 80             	test   $0x80,%ah
ffffffff80211363:	0f 84 57 01 00 00    	je     ffffffff802114c0 <_RME_Svc_Handler+0x530>
ffffffff80211369:	48 89 c2             	mov    %rax,%rdx
ffffffff8021136c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211370:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80211373:	0f 86 0c 16 00 00    	jbe    ffffffff80212985 <_RME_Svc_Handler+0x19f5>
ffffffff80211379:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021137d:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff80211381:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80211384:	49 89 f2             	mov    %rsi,%r10
ffffffff80211387:	49 c1 ea 20          	shr    $0x20,%r10
ffffffff8021138b:	66 41 83 fa 02       	cmp    $0x2,%r10w
ffffffff80211390:	0f 84 13 16 00 00    	je     ffffffff802129a9 <_RME_Svc_Handler+0x1a19>
ffffffff80211396:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021139a:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021139e:	0f 85 41 16 00 00    	jne    ffffffff802129e5 <_RME_Svc_Handler+0x1a55>
ffffffff802113a4:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff802113a8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802113ad:	48 39 f0             	cmp    %rsi,%rax
ffffffff802113b0:	0f 83 cf 15 00 00    	jae    ffffffff80212985 <_RME_Svc_Handler+0x19f5>
ffffffff802113b6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802113ba:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802113be:	48 8b 10             	mov    (%rax),%rdx
ffffffff802113c1:	48 89 d6             	mov    %rdx,%rsi
ffffffff802113c4:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff802113c8:	66 83 fe 02          	cmp    $0x2,%si
ffffffff802113cc:	0f 84 d7 15 00 00    	je     ffffffff802129a9 <_RME_Svc_Handler+0x1a19>
ffffffff802113d2:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802113d6:	48 83 fa 01          	cmp    $0x1,%rdx
ffffffff802113da:	0f 85 05 16 00 00    	jne    ffffffff802129e5 <_RME_Svc_Handler+0x1a55>
                   struct RME_Cap_Kfn*,Kfn_Op,Type_Stat);    

    /* Check if the range of calling is allowed - kernel function specific */
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff802113e0:	48 8b 40 10          	mov    0x10(%rax),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff802113e4:	89 ca                	mov    %ecx,%edx
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff802113e6:	48 89 c6             	mov    %rax,%rsi
ffffffff802113e9:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff802113ed:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802113f0:	0f 87 16 17 00 00    	ja     ffffffff80212b0c <_RME_Svc_Handler+0x1b7c>
       (Func_ID<RME_KFN_FLAG_LOW(Kfn_Op->Head.Flag)))
ffffffff802113f6:	89 c0                	mov    %eax,%eax
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff802113f8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802113fb:	0f 82 0b 17 00 00    	jb     ffffffff80212b0c <_RME_Svc_Handler+0x1b7c>
            Retval=_RME_Kfn_Act(Cpt,
ffffffff80211401:	48 c1 e9 20          	shr    $0x20,%rcx
        RME_COV_MARKER();
        /* No action required */
    }

    /* Return whatever the function returns */
    return __RME_Kfn_Handler(Cpt,Reg,Func_ID,Sub_ID,Param1,Param2);
ffffffff80211405:	48 89 ee             	mov    %rbp,%rsi
ffffffff80211408:	e8 53 74 00 00       	call   ffffffff80218860 <__RME_Kfn_Handler>
            RME_SWITCH_RETURN(Reg, Retval);
ffffffff8021140d:	48 85 c0             	test   %rax,%rax
ffffffff80211410:	0f 89 16 fc ff ff    	jns    ffffffff8021102c <_RME_Svc_Handler+0x9c>
ffffffff80211416:	e9 45 fc ff ff       	jmp    ffffffff80211060 <_RME_Svc_Handler+0xd0>
ffffffff8021141b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff80211420:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff80211424:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
ffffffff80211429:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021142c:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80211430:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffffff80211435:	e8 46 ec ff ff       	call   ffffffff80210080 <_RME_Sig_Rcv.isra.0>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021143a:	48 85 c0             	test   %rax,%rax
ffffffff8021143d:	0f 89 e9 fb ff ff    	jns    ffffffff8021102c <_RME_Svc_Handler+0x9c>
ffffffff80211443:	e9 18 fc ff ff       	jmp    ffffffff80211060 <_RME_Svc_Handler+0xd0>
ffffffff80211448:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021144f:	00 
            Retval=_RME_Sig_Snd(Cpt,
ffffffff80211450:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff80211454:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffffff80211459:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021145c:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80211460:	e8 5b f5 ff ff       	call   ffffffff802109c0 <_RME_Sig_Snd.isra.0>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211465:	48 85 c0             	test   %rax,%rax
ffffffff80211468:	0f 89 be fb ff ff    	jns    ffffffff8021102c <_RME_Svc_Handler+0x9c>
ffffffff8021146e:	e9 ed fb ff ff       	jmp    ffffffff80211060 <_RME_Svc_Handler+0xd0>
ffffffff80211473:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        Retval=_RME_Inv_Act(Cpt,
ffffffff80211478:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff8021147c:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
ffffffff80211481:	48 89 ea             	mov    %rbp,%rdx
ffffffff80211484:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80211488:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffffff8021148d:	e8 7e b4 ff ff       	call   ffffffff8020c910 <_RME_Inv_Act.isra.0>
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211492:	48 85 c0             	test   %rax,%rax
ffffffff80211495:	0f 89 91 fb ff ff    	jns    ffffffff8021102c <_RME_Svc_Handler+0x9c>
ffffffff8021149b:	e9 c0 fb ff ff       	jmp    ffffffff80211060 <_RME_Svc_Handler+0xd0>
    switch(Svc_Num)
ffffffff802114a0:	48 83 eb 0a          	sub    $0xa,%rbx
ffffffff802114a4:	48 83 fb 17          	cmp    $0x17,%rbx
ffffffff802114a8:	0f 87 6a 37 00 00    	ja     ffffffff80214c18 <_RME_Svc_Handler.cold>
ffffffff802114ae:	3e ff 24 dd 10 d8 21 	notrack jmp *-0x7fde27f0(,%rbx,8)
ffffffff802114b5:	80 
ffffffff802114b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff802114bd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff802114c0:	48 39 f0             	cmp    %rsi,%rax
ffffffff802114c3:	0f 83 bc 14 00 00    	jae    ffffffff80212985 <_RME_Svc_Handler+0x19f5>
ffffffff802114c9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802114cd:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff802114d1:	e9 e8 fe ff ff       	jmp    ffffffff802113be <_RME_Svc_Handler+0x42e>
ffffffff802114d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff802114dd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802114e0:	48 39 c8             	cmp    %rcx,%rax
ffffffff802114e3:	0f 83 a8 14 00 00    	jae    ffffffff80212991 <_RME_Svc_Handler+0x1a01>
ffffffff802114e9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802114ed:	48 8d 1c 30          	lea    (%rax,%rsi,1),%rbx
ffffffff802114f1:	e9 7e fd ff ff       	jmp    ffffffff80211274 <_RME_Svc_Handler+0x2e4>
ffffffff802114f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff802114fd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211500:	48 89 c2             	mov    %rax,%rdx
ffffffff80211503:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211507:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8021150a:	0f 86 8d 14 00 00    	jbe    ffffffff8021299d <_RME_Svc_Handler+0x1a0d>
ffffffff80211510:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80211514:	48 01 f2             	add    %rsi,%rdx
ffffffff80211517:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8021151a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021151d:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff80211521:	66 83 fe 02          	cmp    $0x2,%si
ffffffff80211525:	0f 84 96 14 00 00    	je     ffffffff802129c1 <_RME_Svc_Handler+0x1a31>
ffffffff8021152b:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021152f:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80211533:	0f 85 a0 14 00 00    	jne    ffffffff802129d9 <_RME_Svc_Handler+0x1a49>
ffffffff80211539:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8021153d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211542:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211545:	0f 83 52 14 00 00    	jae    ffffffff8021299d <_RME_Svc_Handler+0x1a0d>
ffffffff8021154b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021154f:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80211553:	e9 bd fb ff ff       	jmp    ffffffff80211115 <_RME_Svc_Handler+0x185>
            Retval=_RME_Inv_Del(Cpt,
ffffffff80211558:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff8021155c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffffff80211561:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80211565:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff8021156a:	e8 71 dc ff ff       	call   ffffffff8020f1e0 <_RME_Inv_Del.isra.0>
ffffffff8021156f:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80211572:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    __RME_Svc_Retval_Set(Reg,Retval);
ffffffff80211578:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021157b:	e8 10 9e 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
ffffffff80211580:	e9 a7 fa ff ff       	jmp    ffffffff8021102c <_RME_Svc_Handler+0x9c>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff80211585:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
ffffffff8021158a:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff8021158e:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80211592:	f6 c4 80             	test   $0x80,%ah
ffffffff80211595:	0f 85 35 19 00 00    	jne    ffffffff80212ed0 <_RME_Svc_Handler+0x1f40>
ffffffff8021159b:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021159e:	0f 83 e0 26 00 00    	jae    ffffffff80213c84 <_RME_Svc_Handler+0x2cf4>
ffffffff802115a4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802115a8:	48 8d 0c 30          	lea    (%rax,%rsi,1),%rcx
ffffffff802115ac:	48 8b 01             	mov    (%rcx),%rax
ffffffff802115af:	48 89 c2             	mov    %rax,%rdx
ffffffff802115b2:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802115b6:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff802115ba:	0f 84 39 2b 00 00    	je     ffffffff802140f9 <_RME_Svc_Handler+0x3169>
ffffffff802115c0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802115c4:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802115c8:	0f 85 1f 2b 00 00    	jne    ffffffff802140ed <_RME_Svc_Handler+0x315d>
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Cpt */
ffffffff802115ce:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802115d3:	f6 c4 80             	test   $0x80,%ah
ffffffff802115d6:	0f 85 f2 20 00 00    	jne    ffffffff802136ce <_RME_Svc_Handler+0x273e>
ffffffff802115dc:	48 39 f8             	cmp    %rdi,%rax
ffffffff802115df:	0f 83 20 2b 00 00    	jae    ffffffff80214105 <_RME_Svc_Handler+0x3175>
ffffffff802115e5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802115e9:	48 8d 14 30          	lea    (%rax,%rsi,1),%rdx
ffffffff802115ed:	48 8b 02             	mov    (%rdx),%rax
ffffffff802115f0:	48 89 c6             	mov    %rax,%rsi
ffffffff802115f3:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff802115f7:	66 83 fe 02          	cmp    $0x2,%si
ffffffff802115fb:	0f 84 77 26 00 00    	je     ffffffff80213c78 <_RME_Svc_Handler+0x2ce8>
ffffffff80211601:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211605:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211609:	0f 85 5d 26 00 00    	jne    ffffffff80213c6c <_RME_Svc_Handler+0x2cdc>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_CPT);
ffffffff8021160f:	f6 41 10 04          	testb  $0x4,0x10(%rcx)
ffffffff80211613:	0f 84 47 26 00 00    	je     ffffffff80213c60 <_RME_Svc_Handler+0x2cd0>
    RME_CAP_CHECK(Cpt_New,RME_CPT_FLAG_PRC_CPT);
ffffffff80211619:	f6 42 10 80          	testb  $0x80,0x10(%rdx)
ffffffff8021161d:	0f 84 31 26 00 00    	je     ffffffff80213c54 <_RME_Svc_Handler+0x2cc4>
    Cpt_New=RME_CAP_CONV_ROOT(Cpt_New,struct RME_Cap_Cpt*);
ffffffff80211623:	83 3a 00             	cmpl   $0x0,(%rdx)
ffffffff80211626:	74 04                	je     ffffffff8021162c <_RME_Svc_Handler+0x69c>
ffffffff80211628:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    Cpt_Old=Prc_Op->Cpt;
ffffffff8021162c:	48 8b 41 28          	mov    0x28(%rcx),%rax
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80211630:	f0 48 0f b1 51 28    	lock cmpxchg %rdx,0x28(%rcx)
ffffffff80211636:	40 0f 94 c6          	sete   %sil
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Cpt)),
ffffffff8021163a:	40 84 f6             	test   %sil,%sil
ffffffff8021163d:	0f 84 58 32 00 00    	je     ffffffff8021489b <_RME_Svc_Handler+0x390b>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80211643:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80211648:	f0 48 0f c1 4a 08    	lock xadd %rcx,0x8(%rdx)
ffffffff8021164e:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
ffffffff80211652:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    return 0;
ffffffff80211658:	31 f6                	xor    %esi,%esi
ffffffff8021165a:	e9 19 ff ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
            Retval=_RME_Prc_Del(Cpt,
ffffffff8021165f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80211664:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff80211668:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021166c:	f6 c4 80             	test   $0x80,%ah
ffffffff8021166f:	0f 85 c3 16 00 00    	jne    ffffffff80212d38 <_RME_Svc_Handler+0x1da8>
ffffffff80211675:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211678:	0f 83 3b 28 00 00    	jae    ffffffff80213eb9 <_RME_Svc_Handler+0x2f29>
ffffffff8021167e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211682:	48 01 c8             	add    %rcx,%rax
ffffffff80211685:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211688:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021168b:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8021168f:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80211693:	0f 84 14 28 00 00    	je     ffffffff80213ead <_RME_Svc_Handler+0x2f1d>
ffffffff80211699:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021169d:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802116a1:	0f 85 fa 27 00 00    	jne    ffffffff80213ea1 <_RME_Svc_Handler+0x2f11>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff802116a7:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff802116ab:	0f 84 3c 23 00 00    	je     ffffffff802139ed <_RME_Svc_Handler+0x2a5d>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Prc */
ffffffff802116b1:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff802116b6:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff802116ba:	0f 83 2c 24 00 00    	jae    ffffffff80213aec <_RME_Svc_Handler+0x2b5c>
ffffffff802116c0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802116c4:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff802116c8:	48 8b 02             	mov    (%rdx),%rax
ffffffff802116cb:	48 89 c1             	mov    %rax,%rcx
ffffffff802116ce:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff802116d2:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff802116d6:	0f 85 54 25 00 00    	jne    ffffffff80213c30 <_RME_Svc_Handler+0x2ca0>
ffffffff802116dc:	48 89 c1             	mov    %rax,%rcx
ffffffff802116df:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802116e3:	48 83 f9 05          	cmp    $0x5,%rcx
ffffffff802116e7:	0f 85 37 25 00 00    	jne    ffffffff80213c24 <_RME_Svc_Handler+0x2c94>
ffffffff802116ed:	48 8b 0d 1c 59 01 00 	mov    0x1591c(%rip),%rcx        # ffffffff80227010 <RME_x64_timestamp>
ffffffff802116f4:	48 2b 4a 20          	sub    0x20(%rdx),%rcx
ffffffff802116f8:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff802116fc:	0f 86 71 2c 00 00    	jbe    ffffffff80214373 <_RME_Svc_Handler+0x33e3>
ffffffff80211702:	48 83 7a 08 00       	cmpq   $0x0,0x8(%rdx)
ffffffff80211707:	0f 85 3d 2c 00 00    	jne    ffffffff8021434a <_RME_Svc_Handler+0x33ba>
    Prc_Cpt=Prc_Del->Cpt;
ffffffff8021170d:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
    Prc_Pgt=Prc_Del->Pgt;
ffffffff80211711:	48 8b 72 30          	mov    0x30(%rdx),%rsi
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80211715:	31 c9                	xor    %ecx,%ecx
ffffffff80211717:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021171c:	0f 94 c1             	sete   %cl
    RME_CAP_DELETE(Prc_Del,Type_Stat);
ffffffff8021171f:	84 c9                	test   %cl,%cl
ffffffff80211721:	0f 84 1a 2c 00 00    	je     ffffffff80214341 <_RME_Svc_Handler+0x33b1>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80211727:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff8021172b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021172e:	f0 48 0f c1 57 08    	lock xadd %rdx,0x8(%rdi)
ffffffff80211734:	f0 48 0f c1 46 08    	lock xadd %rax,0x8(%rsi)
    return 0;
ffffffff8021173a:	31 f6                	xor    %esi,%esi
ffffffff8021173c:	e9 37 fe ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff80211741:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
            Retval=_RME_Inv_Crt(Cpt,
ffffffff80211746:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8021174a:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff8021174e:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80211752:	ff 74 24 38          	push   0x38(%rsp)
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80211756:	4c 89 c1             	mov    %r8,%rcx
            Retval=_RME_Inv_Crt(Cpt,
ffffffff80211759:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
ffffffff8021175e:	45 89 c0             	mov    %r8d,%r8d
ffffffff80211761:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80211766:	48 c1 e9 20          	shr    $0x20,%rcx
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8021176a:	e8 01 d5 ff ff       	call   ffffffff8020ec70 <_RME_Inv_Crt.isra.0>
ffffffff8021176f:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80211772:	58                   	pop    %rax
ffffffff80211773:	5a                   	pop    %rdx
ffffffff80211774:	e9 ff fd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
            Retval=_RME_Sig_Crt(Cpt,
ffffffff80211779:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff8021177e:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff80211782:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80211786:	f6 c4 80             	test   $0x80,%ah
ffffffff80211789:	0f 85 61 19 00 00    	jne    ffffffff802130f0 <_RME_Svc_Handler+0x2160>
ffffffff8021178f:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211792:	0f 83 9b 2a 00 00    	jae    ffffffff80214233 <_RME_Svc_Handler+0x32a3>
ffffffff80211798:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021179c:	48 8d 14 08          	lea    (%rax,%rcx,1),%rdx
ffffffff802117a0:	48 8b 02             	mov    (%rdx),%rax
ffffffff802117a3:	48 89 c1             	mov    %rax,%rcx
ffffffff802117a6:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff802117aa:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff802117ae:	0f 84 73 2a 00 00    	je     ffffffff80214227 <_RME_Svc_Handler+0x3297>
ffffffff802117b4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802117b8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802117bc:	0f 85 59 2a 00 00    	jne    ffffffff8021421b <_RME_Svc_Handler+0x328b>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802117c2:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff802117c6:	48 f7 d0             	not    %rax
ffffffff802117c9:	83 e0 01             	and    $0x1,%eax
ffffffff802117cc:	0f 85 f6 22 00 00    	jne    ffffffff80213ac8 <_RME_Svc_Handler+0x2b38>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff802117d2:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff802117d7:	48 3b 4a 28          	cmp    0x28(%rdx),%rcx
ffffffff802117db:	0f 83 c2 2e 00 00    	jae    ffffffff802146a3 <_RME_Svc_Handler+0x3713>
ffffffff802117e1:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802117e5:	48 03 4a 18          	add    0x18(%rdx),%rcx
ffffffff802117e9:	48 89 ca             	mov    %rcx,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802117ec:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff802117f3:	00 00 00 
ffffffff802117f6:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802117fb:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff802117fe:	84 c9                	test   %cl,%cl
ffffffff80211800:	0f 84 ce 22 00 00    	je     ffffffff80213ad4 <_RME_Svc_Handler+0x2b44>
ffffffff80211806:	48 8b 05 03 58 01 00 	mov    0x15803(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    return 0;
ffffffff8021180d:	31 f6                	xor    %esi,%esi
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff8021180f:	48 89 42 20          	mov    %rax,0x20(%rdx)
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80211813:	48 b8 00 00 00 00 00 	movabs $0x8000000000000,%rax
ffffffff8021181a:	00 08 00 
    Sig_Crt->Head.Root_Ref=0U;
ffffffff8021181d:	48 c7 42 08 00 00 00 	movq   $0x0,0x8(%rdx)
ffffffff80211824:	00 
    Sig_Crt->Head.Object=0U;
ffffffff80211825:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff8021182c:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff8021182d:	48 c7 42 10 3f 00 00 	movq   $0x3f,0x10(%rdx)
ffffffff80211834:	00 
    Sig_Crt->Sig_Num=0U;
ffffffff80211835:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
ffffffff8021183c:	00 
    Sig_Crt->Thd=0U;
ffffffff8021183d:	48 c7 42 30 00 00 00 	movq   $0x0,0x30(%rdx)
ffffffff80211844:	00 
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80211845:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff80211848:	e9 2b fd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
            Retval=_RME_Thd_Sched_Rcv(Cpt,
ffffffff8021184d:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff80211851:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff80211856:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8021185a:	e8 21 b4 ff ff       	call   ffffffff8020cc80 <_RME_Thd_Sched_Rcv.isra.0>
ffffffff8021185f:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80211862:	e9 11 fd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
                                RME_PARAM_Q0(Param[0]),                     /* rme_ptr_t Size_Order */
ffffffff80211867:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
ffffffff8021186c:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff80211871:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80211875:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff8021187a:	48 89 c1             	mov    %rax,%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8021187d:	49 89 c2             	mov    %rax,%r10
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff80211880:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211883:	48 c1 ea 10          	shr    $0x10,%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80211887:	49 c1 ea 20          	shr    $0x20,%r10
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8021188b:	52                   	push   %rdx
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff8021188c:	48 c1 e9 10          	shr    $0x10,%rcx
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff80211890:	4c 89 d2             	mov    %r10,%rdx
ffffffff80211893:	50                   	push   %rax
ffffffff80211894:	4c 89 c8             	mov    %r9,%rax
ffffffff80211897:	0f b7 c9             	movzwl %cx,%ecx
ffffffff8021189a:	49 83 e1 fe          	and    $0xfffffffffffffffe,%r9
ffffffff8021189e:	83 e0 01             	and    $0x1,%eax
ffffffff802118a1:	50                   	push   %rax
ffffffff802118a2:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
ffffffff802118a7:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
ffffffff802118ac:	e8 af c5 ff ff       	call   ffffffff8020de60 <_RME_Pgt_Crt>
            break;
ffffffff802118b1:	48 83 c4 20          	add    $0x20,%rsp
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff802118b5:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff802118b8:	e9 bb fc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
            Retval=_RME_Cpt_Rem(Cpt,
ffffffff802118bd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff802118c2:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff802118c6:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802118ca:	f6 c4 80             	test   $0x80,%ah
ffffffff802118cd:	0f 85 2d 19 00 00    	jne    ffffffff80213200 <_RME_Svc_Handler+0x2270>
ffffffff802118d3:	48 39 f0             	cmp    %rsi,%rax
ffffffff802118d6:	0f 83 1b 2b 00 00    	jae    ffffffff802143f7 <_RME_Svc_Handler+0x3467>
ffffffff802118dc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802118e0:	48 01 c8             	add    %rcx,%rax
ffffffff802118e3:	48 8b 10             	mov    (%rax),%rdx
ffffffff802118e6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802118e9:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff802118ed:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff802118f1:	0f 84 f4 2a 00 00    	je     ffffffff802143eb <_RME_Svc_Handler+0x345b>
ffffffff802118f7:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802118fb:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802118ff:	0f 85 da 2a 00 00    	jne    ffffffff802143df <_RME_Svc_Handler+0x344f>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_REM);
ffffffff80211905:	f6 40 10 20          	testb  $0x20,0x10(%rax)
ffffffff80211909:	0f 84 02 21 00 00    	je     ffffffff80213a11 <_RME_Svc_Handler+0x2a81>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Rem */
ffffffff8021190f:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff80211914:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80211918:	0f 83 7d 2c 00 00    	jae    ffffffff8021459b <_RME_Svc_Handler+0x360b>
ffffffff8021191e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80211922:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff80211926:	48 8b 02             	mov    (%rdx),%rax
ffffffff80211929:	48 89 c1             	mov    %rax,%rcx
ffffffff8021192c:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80211930:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80211934:	0f 85 79 2c 00 00    	jne    ffffffff802145b3 <_RME_Svc_Handler+0x3623>
ffffffff8021193a:	48 8b 72 20          	mov    0x20(%rdx),%rsi
ffffffff8021193e:	48 8b 0d cb 56 01 00 	mov    0x156cb(%rip),%rcx        # ffffffff80227010 <RME_x64_timestamp>
ffffffff80211945:	48 29 f1             	sub    %rsi,%rcx
ffffffff80211948:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff8021194c:	0f 86 55 2c 00 00    	jbe    ffffffff802145a7 <_RME_Svc_Handler+0x3617>
ffffffff80211952:	85 c0                	test   %eax,%eax
ffffffff80211954:	0f 84 a7 25 00 00    	je     ffffffff80213f01 <_RME_Svc_Handler+0x2f71>
    Rem_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8021195a:	48 89 c1             	mov    %rax,%rcx
ffffffff8021195d:	48 c1 e9 30          	shr    $0x30,%rcx
    if((Rem_Type!=RME_CAP_TYPE_KOM)&&(Rem_Type!=RME_CAP_TYPE_KFN))
ffffffff80211961:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff80211965:	48 83 f9 01          	cmp    $0x1,%rcx
ffffffff80211969:	0f 86 7d 1f 00 00    	jbe    ffffffff802138ec <_RME_Svc_Handler+0x295c>
        Capobj_Root=(struct RME_Cap_Struct*)(Capobj_Rem->Head.Root_Ref);
ffffffff8021196f:	48 8b 72 08          	mov    0x8(%rdx),%rsi
ffffffff80211973:	31 c9                	xor    %ecx,%ecx
ffffffff80211975:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021197a:	0f 94 c1             	sete   %cl
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8021197d:	84 c9                	test   %cl,%cl
ffffffff8021197f:	0f 84 28 28 00 00    	je     ffffffff802141ad <_RME_Svc_Handler+0x321d>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80211985:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff80211989:	f0 48 0f c1 46 08    	lock xadd %rax,0x8(%rsi)
    return 0;
ffffffff8021198f:	31 f6                	xor    %esi,%esi
	return Addend;
ffffffff80211991:	e9 e2 fb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
ffffffff80211996:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
ffffffff8021199b:	4c 8b 47 18          	mov    0x18(%rdi),%r8
ffffffff8021199f:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
ffffffff802119a3:	48 89 f0             	mov    %rsi,%rax
ffffffff802119a6:	48 c1 e8 20          	shr    $0x20,%rax
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff802119aa:	f6 c4 80             	test   $0x80,%ah
ffffffff802119ad:	0f 85 b5 16 00 00    	jne    ffffffff80213068 <_RME_Svc_Handler+0x20d8>
ffffffff802119b3:	4c 39 c8             	cmp    %r9,%rax
ffffffff802119b6:	0f 83 9d 27 00 00    	jae    ffffffff80214159 <_RME_Svc_Handler+0x31c9>
ffffffff802119bc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802119c0:	4a 8d 3c 00          	lea    (%rax,%r8,1),%rdi
ffffffff802119c4:	48 8b 07             	mov    (%rdi),%rax
ffffffff802119c7:	48 89 c2             	mov    %rax,%rdx
ffffffff802119ca:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802119ce:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff802119d2:	0f 84 75 27 00 00    	je     ffffffff8021414d <_RME_Svc_Handler+0x31bd>
ffffffff802119d8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802119dc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802119e0:	0f 85 7f 27 00 00    	jne    ffffffff80214165 <_RME_Svc_Handler+0x31d5>
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
ffffffff802119e6:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Cpt_Src */
ffffffff802119eb:	48 89 c2             	mov    %rax,%rdx
ffffffff802119ee:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff802119f2:	f6 c6 80             	test   $0x80,%dh
ffffffff802119f5:	0f 85 db 1d 00 00    	jne    ffffffff802137d6 <_RME_Svc_Handler+0x2846>
ffffffff802119fb:	4c 39 ca             	cmp    %r9,%rdx
ffffffff802119fe:	0f 83 03 2c 00 00    	jae    ffffffff80214607 <_RME_Svc_Handler+0x3677>
ffffffff80211a04:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80211a08:	4a 8d 0c 02          	lea    (%rdx,%r8,1),%rcx
ffffffff80211a0c:	48 8b 11             	mov    (%rcx),%rdx
ffffffff80211a0f:	49 89 d0             	mov    %rdx,%r8
ffffffff80211a12:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80211a16:	66 41 83 f8 02       	cmp    $0x2,%r8w
ffffffff80211a1b:	0f 84 da 2b 00 00    	je     ffffffff802145fb <_RME_Svc_Handler+0x366b>
ffffffff80211a21:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211a25:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80211a29:	0f 85 c0 2b 00 00    	jne    ffffffff802145ef <_RME_Svc_Handler+0x365f>
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff80211a2f:	f6 47 10 10          	testb  $0x10,0x10(%rdi)
ffffffff80211a33:	0f 84 aa 2b 00 00    	je     ffffffff802145e3 <_RME_Svc_Handler+0x3653>
    RME_CAP_CHECK(Cpt_Src,RME_CPT_FLAG_ADD_SRC);
ffffffff80211a39:	f6 41 10 08          	testb  $0x8,0x10(%rcx)
ffffffff80211a3d:	0f 84 94 2b 00 00    	je     ffffffff802145d7 <_RME_Svc_Handler+0x3647>
            Retval=_RME_Cpt_Add(Cpt,
ffffffff80211a43:	89 f6                	mov    %esi,%esi
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff80211a45:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff80211a49:	0f 86 7c 2b 00 00    	jbe    ffffffff802145cb <_RME_Svc_Handler+0x363b>
            Retval=_RME_Cpt_Add(Cpt,
ffffffff80211a4f:	89 c0                	mov    %eax,%eax
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff80211a51:	48 39 41 28          	cmp    %rax,0x28(%rcx)
ffffffff80211a55:	0f 86 64 2b 00 00    	jbe    ffffffff802145bf <_RME_Svc_Handler+0x362f>
ffffffff80211a5b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211a5f:	48 03 41 18          	add    0x18(%rcx),%rax
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Src->Head.Type_Stat));
ffffffff80211a63:	4c 8b 08             	mov    (%rax),%r9
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff80211a66:	48 89 c2             	mov    %rax,%rdx
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff80211a69:	4c 89 c8             	mov    %r9,%rax
ffffffff80211a6c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211a70:	66 83 f8 02          	cmp    $0x2,%ax
ffffffff80211a74:	0f 84 8e 2d 00 00    	je     ffffffff80214808 <_RME_Svc_Handler+0x3878>
    if(Type_Stat==0U)
ffffffff80211a7a:	4d 85 c9             	test   %r9,%r9
ffffffff80211a7d:	0f 84 c1 2d 00 00    	je     ffffffff80214844 <_RME_Svc_Handler+0x38b4>
    Src_Type=RME_CAP_TYPE(Type_Stat);
ffffffff80211a83:	4d 89 ca             	mov    %r9,%r10
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff80211a86:	48 8b 0c 24          	mov    (%rsp),%rcx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff80211a8a:	4c 8b 5c 24 08       	mov    0x8(%rsp),%r11
    Src_Type=RME_CAP_TYPE(Type_Stat);
ffffffff80211a8f:	49 c1 ea 30          	shr    $0x30,%r10
            Retval=_RME_Cpt_Add(Cpt,
ffffffff80211a93:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
    if(Src_Type==RME_CAP_TYPE_PGT)
ffffffff80211a98:	49 83 fa 04          	cmp    $0x4,%r10
ffffffff80211a9c:	0f 84 b8 1f 00 00    	je     ffffffff80213a5a <_RME_Svc_Handler+0x2aca>
    else if(Src_Type==RME_CAP_TYPE_KFN)
ffffffff80211aa2:	49 83 fa 01          	cmp    $0x1,%r10
ffffffff80211aa6:	0f 84 aa 2a 00 00    	je     ffffffff80214556 <_RME_Svc_Handler+0x35c6>
    else if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff80211aac:	49 83 fa 02          	cmp    $0x2,%r10
ffffffff80211ab0:	0f 84 2a 2a 00 00    	je     ffffffff802144e0 <_RME_Svc_Handler+0x3550>
        if(Flag==0U)
ffffffff80211ab6:	4d 85 c0             	test   %r8,%r8
ffffffff80211ab9:	0f 84 41 2f 00 00    	je     ffffffff80214a00 <_RME_Svc_Handler+0x3a70>
        if((Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff80211abf:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff80211ac3:	48 f7 d0             	not    %rax
ffffffff80211ac6:	4c 85 c0             	test   %r8,%rax
ffffffff80211ac9:	0f 85 25 2f 00 00    	jne    ffffffff802149f4 <_RME_Svc_Handler+0x3a64>
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff80211acf:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80211ad3:	48 03 77 18          	add    0x18(%rdi),%rsi
    if(Capobj_Dst->Head.Type_Stat!=0U)
ffffffff80211ad7:	48 8b 06             	mov    (%rsi),%rax
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff80211ada:	48 89 f1             	mov    %rsi,%rcx
    if(Capobj_Dst->Head.Type_Stat!=0U)
ffffffff80211add:	48 85 c0             	test   %rax,%rax
ffffffff80211ae0:	0f 85 ee 29 00 00    	jne    ffffffff802144d4 <_RME_Svc_Handler+0x3544>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80211ae6:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80211aeb:	48 c1 e6 20          	shl    $0x20,%rsi
ffffffff80211aef:	f0 48 0f b1 31       	lock cmpxchg %rsi,(%rcx)
ffffffff80211af4:	40 0f 94 c6          	sete   %sil
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff80211af8:	40 84 f6             	test   %sil,%sil
ffffffff80211afb:	0f 84 d3 29 00 00    	je     ffffffff802144d4 <_RME_Svc_Handler+0x3544>
ffffffff80211b01:	48 8b 05 08 55 01 00 	mov    0x15508(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff80211b08:	49 83 ea 01          	sub    $0x1,%r10
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff80211b0c:	48 89 41 20          	mov    %rax,0x20(%rcx)
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
ffffffff80211b10:	4c 89 41 10          	mov    %r8,0x10(%rcx)
ffffffff80211b14:	48 8b 42 18          	mov    0x18(%rdx),%rax
ffffffff80211b18:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff80211b1c:	48 8b 42 28          	mov    0x28(%rdx),%rax
ffffffff80211b20:	48 89 41 28          	mov    %rax,0x28(%rcx)
ffffffff80211b24:	48 8b 42 30          	mov    0x30(%rdx),%rax
ffffffff80211b28:	48 89 41 30          	mov    %rax,0x30(%rcx)
ffffffff80211b2c:	48 8b 42 38          	mov    0x38(%rdx),%rax
ffffffff80211b30:	48 89 41 38          	mov    %rax,0x38(%rcx)
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff80211b34:	49 83 fa 01          	cmp    $0x1,%r10
ffffffff80211b38:	0f 86 0f 1f 00 00    	jbe    ffffffff80213a4d <_RME_Svc_Handler+0x2abd>
        Capobj_Dst->Head.Root_Ref=RME_CAP_CONV_ROOT(Capobj_Src,rme_ptr_t);
ffffffff80211b3e:	48 8b 02             	mov    (%rdx),%rax
ffffffff80211b41:	85 c0                	test   %eax,%eax
ffffffff80211b43:	74 04                	je     ffffffff80211b49 <_RME_Svc_Handler+0xbb9>
ffffffff80211b45:	48 8b 52 08          	mov    0x8(%rdx),%rdx
ffffffff80211b49:	48 89 51 08          	mov    %rdx,0x8(%rcx)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80211b4d:	ba 01 00 00 00       	mov    $0x1,%edx
        RME_FETCH_ADD(&(((volatile struct RME_Cap_Struct*)
ffffffff80211b52:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80211b56:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff80211b5c:	b8 ff ff 00 00       	mov    $0xffff,%eax
    return 0;
ffffffff80211b61:	31 f6                	xor    %esi,%esi
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff80211b63:	48 c1 e0 30          	shl    $0x30,%rax
ffffffff80211b67:	4c 21 c8             	and    %r9,%rax
ffffffff80211b6a:	48 83 c8 01          	or     $0x1,%rax
ffffffff80211b6e:	48 89 01             	mov    %rax,(%rcx)
    return 0;
ffffffff80211b71:	e9 02 fa ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Pgt_Child */
ffffffff80211b76:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
ffffffff80211b7b:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff80211b7f:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff80211b83:	48 89 f0             	mov    %rsi,%rax
ffffffff80211b86:	48 c1 e8 20          	shr    $0x20,%rax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff80211b8a:	f6 c4 80             	test   $0x80,%ah
ffffffff80211b8d:	0f 85 0d 10 00 00    	jne    ffffffff80212ba0 <_RME_Svc_Handler+0x1c10>
ffffffff80211b93:	48 39 f8             	cmp    %rdi,%rax
ffffffff80211b96:	0f 83 3d 24 00 00    	jae    ffffffff80213fd9 <_RME_Svc_Handler+0x3049>
ffffffff80211b9c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211ba0:	48 8d 1c 08          	lea    (%rax,%rcx,1),%rbx
ffffffff80211ba4:	48 8b 03             	mov    (%rbx),%rax
ffffffff80211ba7:	48 89 c2             	mov    %rax,%rdx
ffffffff80211baa:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80211bae:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff80211bb2:	0f 84 15 24 00 00    	je     ffffffff80213fcd <_RME_Svc_Handler+0x303d>
ffffffff80211bb8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211bbc:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211bc0:	0f 85 1f 24 00 00    	jne    ffffffff80213fe5 <_RME_Svc_Handler+0x3055>
            Retval=_RME_Pgt_Con(Cpt,
ffffffff80211bc6:	89 f0                	mov    %esi,%eax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff80211bc8:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80211bce:	0f 85 76 1a 00 00    	jne    ffffffff8021364a <_RME_Svc_Handler+0x26ba>
ffffffff80211bd4:	48 39 c7             	cmp    %rax,%rdi
ffffffff80211bd7:	0f 86 93 1f 00 00    	jbe    ffffffff80213b70 <_RME_Svc_Handler+0x2be0>
ffffffff80211bdd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211be1:	4c 8d 24 08          	lea    (%rax,%rcx,1),%r12
ffffffff80211be5:	49 8b 04 24          	mov    (%r12),%rax
ffffffff80211be9:	48 89 c2             	mov    %rax,%rdx
ffffffff80211bec:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80211bf0:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff80211bf4:	0f 84 6a 1f 00 00    	je     ffffffff80213b64 <_RME_Svc_Handler+0x2bd4>
ffffffff80211bfa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211bfe:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211c02:	0f 85 50 1f 00 00    	jne    ffffffff80213b58 <_RME_Svc_Handler+0x2bc8>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff80211c08:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff80211c0c:	a8 10                	test   $0x10,%al
ffffffff80211c0e:	0f 84 38 1f 00 00    	je     ffffffff80213b4c <_RME_Svc_Handler+0x2bbc>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff80211c14:	41 f6 44 24 10 08    	testb  $0x8,0x10(%r12)
ffffffff80211c1a:	0f 84 5b 26 00 00    	je     ffffffff8021427b <_RME_Svc_Handler+0x32eb>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211c20:	48 89 c2             	mov    %rax,%rdx
            Retval=_RME_Pgt_Con(Cpt,
ffffffff80211c23:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211c28:	48 c1 ea 24          	shr    $0x24,%rdx
ffffffff80211c2c:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80211c2f:	0f 87 8a 2c 00 00    	ja     ffffffff802148bf <_RME_Svc_Handler+0x392f>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff80211c35:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211c39:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211c3e:	48 39 c6             	cmp    %rax,%rsi
ffffffff80211c41:	0f 82 6c 2c 00 00    	jb     ffffffff802148b3 <_RME_Svc_Handler+0x3923>
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff80211c47:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff80211c4b:	48 89 f0             	mov    %rsi,%rax
ffffffff80211c4e:	48 d3 e8             	shr    %cl,%rax
ffffffff80211c51:	48 85 c0             	test   %rax,%rax
ffffffff80211c54:	0f 85 4d 2c 00 00    	jne    ffffffff802148a7 <_RME_Svc_Handler+0x3917>
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff80211c5a:	49 8b 44 24 28       	mov    0x28(%r12),%rax
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff80211c5f:	48 c1 e9 20          	shr    $0x20,%rcx
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff80211c63:	89 c2                	mov    %eax,%edx
ffffffff80211c65:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211c69:	48 01 d0             	add    %rdx,%rax
    if(Szord_Parent!=Order_Child)
ffffffff80211c6c:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211c6f:	0f 85 1a 2c 00 00    	jne    ffffffff8021488f <_RME_Svc_Handler+0x38ff>
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff80211c75:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
ffffffff80211c7a:	4c 89 e2             	mov    %r12,%rdx
ffffffff80211c7d:	48 89 df             	mov    %rbx,%rdi
ffffffff80211c80:	e8 db 93 00 00       	call   ffffffff8021b060 <__RME_Pgt_Pgdir_Map>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff80211c85:	83 3b 00             	cmpl   $0x0,(%rbx)
ffffffff80211c88:	74 04                	je     ffffffff80211c8e <_RME_Svc_Handler+0xcfe>
ffffffff80211c8a:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff80211c8e:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80211c93:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff80211c99:	41 83 3c 24 00       	cmpl   $0x0,(%r12)
ffffffff80211c9e:	74 05                	je     ffffffff80211ca5 <_RME_Svc_Handler+0xd15>
ffffffff80211ca0:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
ffffffff80211ca5:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80211caa:	f0 49 0f c1 44 24 08 	lock xadd %rax,0x8(%r12)
    return 0;
ffffffff80211cb1:	31 f6                	xor    %esi,%esi
ffffffff80211cb3:	e9 c0 f8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt */
ffffffff80211cb8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
ffffffff80211cbd:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff80211cc1:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff80211cc5:	f6 c4 80             	test   $0x80,%ah
ffffffff80211cc8:	0f 85 ba 15 00 00    	jne    ffffffff80213288 <_RME_Svc_Handler+0x22f8>
ffffffff80211cce:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211cd1:	0f 83 54 29 00 00    	jae    ffffffff8021462b <_RME_Svc_Handler+0x369b>
ffffffff80211cd7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211cdb:	48 8d 3c 08          	lea    (%rax,%rcx,1),%rdi
ffffffff80211cdf:	48 8b 07             	mov    (%rdi),%rax
ffffffff80211ce2:	48 89 c2             	mov    %rax,%rdx
ffffffff80211ce5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80211ce9:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff80211ced:	0f 84 2c 29 00 00    	je     ffffffff8021461f <_RME_Svc_Handler+0x368f>
ffffffff80211cf3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211cf7:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211cfb:	0f 85 12 29 00 00    	jne    ffffffff80214613 <_RME_Svc_Handler+0x3683>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80211d01:	48 8b 47 10          	mov    0x10(%rdi),%rax
ffffffff80211d05:	a8 04                	test   $0x4,%al
ffffffff80211d07:	0f 84 10 1d 00 00    	je     ffffffff80213a1d <_RME_Svc_Handler+0x2a8d>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80211d0d:	48 89 c2             	mov    %rax,%rdx
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff80211d10:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80211d15:	48 c1 ea 24          	shr    $0x24,%rdx
ffffffff80211d19:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80211d1c:	0f 87 62 2d 00 00    	ja     ffffffff80214a84 <_RME_Svc_Handler+0x3af4>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Rem->Head.Flag)))
ffffffff80211d22:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211d26:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80211d2b:	48 39 c6             	cmp    %rax,%rsi
ffffffff80211d2e:	0f 82 0f 2c 00 00    	jb     ffffffff80214943 <_RME_Svc_Handler+0x39b3>
    if((Pos>>RME_PGT_NUMORD(Pgt_Rem->Order))!=0U)
ffffffff80211d34:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff80211d38:	48 89 f0             	mov    %rsi,%rax
ffffffff80211d3b:	48 d3 e8             	shr    %cl,%rax
ffffffff80211d3e:	48 85 c0             	test   %rax,%rax
ffffffff80211d41:	0f 85 f0 2b 00 00    	jne    ffffffff80214937 <_RME_Svc_Handler+0x39a7>
    if(__RME_Pgt_Page_Unmap(Pgt_Rem,Pos)<0)
ffffffff80211d47:	e8 b4 92 00 00       	call   ffffffff8021b000 <__RME_Pgt_Page_Unmap>
    return 0;
ffffffff80211d4c:	31 f6                	xor    %esi,%esi
ffffffff80211d4e:	e9 25 f8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
ffffffff80211d53:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff80211d58:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff80211d5c:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
ffffffff80211d60:	48 89 d0             	mov    %rdx,%rax
ffffffff80211d63:	48 c1 e8 20          	shr    $0x20,%rax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff80211d67:	f6 c4 80             	test   $0x80,%ah
ffffffff80211d6a:	0f 85 a8 0d 00 00    	jne    ffffffff80212b18 <_RME_Svc_Handler+0x1b88>
ffffffff80211d70:	48 39 f8             	cmp    %rdi,%rax
ffffffff80211d73:	0f 83 30 22 00 00    	jae    ffffffff80213fa9 <_RME_Svc_Handler+0x3019>
ffffffff80211d79:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211d7d:	4c 8d 24 30          	lea    (%rax,%rsi,1),%r12
ffffffff80211d81:	49 8b 04 24          	mov    (%r12),%rax
ffffffff80211d85:	48 89 c1             	mov    %rax,%rcx
ffffffff80211d88:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80211d8c:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80211d90:	0f 84 2b 22 00 00    	je     ffffffff80213fc1 <_RME_Svc_Handler+0x3031>
ffffffff80211d96:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211d9a:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211d9e:	0f 85 11 22 00 00    	jne    ffffffff80213fb5 <_RME_Svc_Handler+0x3025>
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Pos_Src */
ffffffff80211da4:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
ffffffff80211da9:	4c 89 c0             	mov    %r8,%rax
ffffffff80211dac:	48 c1 e8 20          	shr    $0x20,%rax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff80211db0:	f6 c4 80             	test   $0x80,%ah
ffffffff80211db3:	0f 85 86 17 00 00    	jne    ffffffff8021353f <_RME_Svc_Handler+0x25af>
ffffffff80211db9:	48 39 f8             	cmp    %rdi,%rax
ffffffff80211dbc:	0f 83 9f 21 00 00    	jae    ffffffff80213f61 <_RME_Svc_Handler+0x2fd1>
ffffffff80211dc2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211dc6:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff80211dca:	48 8b 07             	mov    (%rdi),%rax
ffffffff80211dcd:	48 89 c1             	mov    %rax,%rcx
ffffffff80211dd0:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80211dd4:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80211dd8:	0f 84 77 21 00 00    	je     ffffffff80213f55 <_RME_Svc_Handler+0x2fc5>
ffffffff80211dde:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211de2:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211de6:	0f 85 5d 21 00 00    	jne    ffffffff80213f49 <_RME_Svc_Handler+0x2fb9>
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff80211dec:	49 8b 4c 24 10       	mov    0x10(%r12),%rcx
ffffffff80211df1:	f6 c1 02             	test   $0x2,%cl
ffffffff80211df4:	0f 84 b2 1d 00 00    	je     ffffffff80213bac <_RME_Svc_Handler+0x2c1c>
    RME_CAP_CHECK(Pgt_Src,RME_PGT_FLAG_ADD_SRC);
ffffffff80211dfa:	48 8b 47 10          	mov    0x10(%rdi),%rax
ffffffff80211dfe:	a8 01                	test   $0x1,%al
ffffffff80211e00:	0f 84 9a 1d 00 00    	je     ffffffff80213ba0 <_RME_Svc_Handler+0x2c10>
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80211e06:	41 89 d5             	mov    %edx,%r13d
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff80211e09:	48 89 ca             	mov    %rcx,%rdx
ffffffff80211e0c:	48 c1 ea 24          	shr    $0x24,%rdx
ffffffff80211e10:	49 39 d5             	cmp    %rdx,%r13
ffffffff80211e13:	0f 87 ff 2b 00 00    	ja     ffffffff80214a18 <_RME_Svc_Handler+0x3a88>
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff80211e19:	48 c1 e9 08          	shr    $0x8,%rcx
ffffffff80211e1d:	48 89 ca             	mov    %rcx,%rdx
ffffffff80211e20:	81 e2 ff ff ff 0f    	and    $0xfffffff,%edx
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff80211e26:	49 39 d5             	cmp    %rdx,%r13
ffffffff80211e29:	0f 82 dd 2b 00 00    	jb     ffffffff80214a0c <_RME_Svc_Handler+0x3a7c>
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff80211e2f:	48 89 c2             	mov    %rax,%rdx
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80211e32:	44 89 c6             	mov    %r8d,%esi
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff80211e35:	48 c1 ea 24          	shr    $0x24,%rdx
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff80211e39:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80211e3c:	0f 87 a6 2b 00 00    	ja     ffffffff802149e8 <_RME_Svc_Handler+0x3a58>
       (Pos_Src<RME_PGT_FLAG_LOW(Pgt_Src->Head.Flag)))
ffffffff80211e42:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211e46:	25 ff ff ff 0f       	and    $0xfffffff,%eax
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff80211e4b:	48 39 c6             	cmp    %rax,%rsi
ffffffff80211e4e:	0f 82 88 2b 00 00    	jb     ffffffff802149dc <_RME_Svc_Handler+0x3a4c>
    Szord_Dst=RME_PGT_SIZEORD(Pgt_Dst->Order);
ffffffff80211e54:	49 8b 4c 24 28       	mov    0x28(%r12),%rcx
    Szord_Src=RME_PGT_SIZEORD(Pgt_Src->Order);
ffffffff80211e59:	4c 8b 47 28          	mov    0x28(%rdi),%r8
    Szord_Dst=RME_PGT_SIZEORD(Pgt_Dst->Order);
ffffffff80211e5d:	49 89 ce             	mov    %rcx,%r14
    Szord_Src=RME_PGT_SIZEORD(Pgt_Src->Order);
ffffffff80211e60:	4c 89 c2             	mov    %r8,%rdx
    Szord_Dst=RME_PGT_SIZEORD(Pgt_Dst->Order);
ffffffff80211e63:	49 c1 ee 20          	shr    $0x20,%r14
    Szord_Src=RME_PGT_SIZEORD(Pgt_Src->Order);
ffffffff80211e67:	48 c1 ea 20          	shr    $0x20,%rdx
    if(Szord_Dst>Szord_Src)
ffffffff80211e6b:	49 39 d6             	cmp    %rdx,%r14
ffffffff80211e6e:	0f 87 5c 2b 00 00    	ja     ffffffff802149d0 <_RME_Svc_Handler+0x3a40>
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff80211e74:	4c 89 e8             	mov    %r13,%rax
       ((Pos_Src>>RME_PGT_NUMORD(Pgt_Src->Order))!=0U))
ffffffff80211e77:	48 89 f3             	mov    %rsi,%rbx
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff80211e7a:	48 d3 e8             	shr    %cl,%rax
       ((Pos_Src>>RME_PGT_NUMORD(Pgt_Src->Order))!=0U))
ffffffff80211e7d:	44 89 c1             	mov    %r8d,%ecx
ffffffff80211e80:	48 d3 eb             	shr    %cl,%rbx
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff80211e83:	48 09 d8             	or     %rbx,%rax
ffffffff80211e86:	0f 85 38 2b 00 00    	jne    ffffffff802149c4 <_RME_Svc_Handler+0x3a34>
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80211e8c:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
    if(Szord_Src<RME_WORD_BIT)
ffffffff80211e91:	48 83 fa 3f          	cmp    $0x3f,%rdx
ffffffff80211e95:	77 1c                	ja     ffffffff80211eb3 <_RME_Svc_Handler+0xf23>
        if(RME_POW2(Szord_Src)<=(Index<<Szord_Dst))
ffffffff80211e97:	89 d1                	mov    %edx,%ecx
ffffffff80211e99:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80211e9e:	48 89 da             	mov    %rbx,%rdx
ffffffff80211ea1:	48 d3 e0             	shl    %cl,%rax
ffffffff80211ea4:	44 89 f1             	mov    %r14d,%ecx
ffffffff80211ea7:	48 d3 e2             	shl    %cl,%rdx
ffffffff80211eaa:	48 39 d0             	cmp    %rdx,%rax
ffffffff80211ead:	0f 86 f9 2a 00 00    	jbe    ffffffff802149ac <_RME_Svc_Handler+0x3a1c>
    if(__RME_Pgt_Lookup(Pgt_Src,Pos_Src,&Paddr_Src,&Flag_Src)<0)
ffffffff80211eb3:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
ffffffff80211eb8:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80211ebd:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
    if(__RME_Pgt_Lookup(Pgt_Src,Pos_Src,&Paddr_Src,&Flag_Src)<0)
ffffffff80211ec2:	e8 79 92 00 00       	call   ffffffff8021b140 <__RME_Pgt_Lookup>
    if(Szord_Dst<RME_WORD_BIT)
ffffffff80211ec7:	49 83 fe 3f          	cmp    $0x3f,%r14
ffffffff80211ecb:	0f 87 30 1a 00 00    	ja     ffffffff80213901 <_RME_Svc_Handler+0x2971>
        Paddr_Dst=Paddr_Src+(Index<<Szord_Dst);
ffffffff80211ed1:	48 89 de             	mov    %rbx,%rsi
ffffffff80211ed4:	44 89 f1             	mov    %r14d,%ecx
ffffffff80211ed7:	48 d3 e6             	shl    %cl,%rsi
ffffffff80211eda:	48 03 74 24 10       	add    0x10(%rsp),%rsi
    if(((Flag_Dst)&(~Flag_Src))!=0U)
ffffffff80211edf:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80211ee4:	48 f7 d0             	not    %rax
ffffffff80211ee7:	4c 85 f8             	test   %r15,%rax
ffffffff80211eea:	0f 85 c8 2a 00 00    	jne    ffffffff802149b8 <_RME_Svc_Handler+0x3a28>
    if(__RME_Pgt_Page_Map(Pgt_Dst,Paddr_Dst,Pos_Dst,Flag_Dst)<0)
ffffffff80211ef0:	4c 89 f9             	mov    %r15,%rcx
ffffffff80211ef3:	4c 89 ea             	mov    %r13,%rdx
ffffffff80211ef6:	4c 89 e7             	mov    %r12,%rdi
ffffffff80211ef9:	e8 92 90 00 00       	call   ffffffff8021af90 <__RME_Pgt_Page_Map>
    return 0;
ffffffff80211efe:	31 f6                	xor    %esi,%esi
ffffffff80211f00:	e9 73 f6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
            Retval=_RME_Pgt_Del(Cpt,
ffffffff80211f05:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80211f0a:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff80211f0e:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80211f12:	f6 c4 80             	test   $0x80,%ah
ffffffff80211f15:	0f 85 c5 10 00 00    	jne    ffffffff80212fe0 <_RME_Svc_Handler+0x2050>
ffffffff80211f1b:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211f1e:	0f 83 73 24 00 00    	jae    ffffffff80214397 <_RME_Svc_Handler+0x3407>
ffffffff80211f24:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211f28:	48 01 c8             	add    %rcx,%rax
ffffffff80211f2b:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211f2e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80211f31:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80211f35:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80211f39:	0f 84 4c 24 00 00    	je     ffffffff8021438b <_RME_Svc_Handler+0x33fb>
ffffffff80211f3f:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211f43:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80211f47:	0f 85 32 24 00 00    	jne    ffffffff8021437f <_RME_Svc_Handler+0x33ef>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80211f4d:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80211f51:	0f 84 8a 1a 00 00    	je     ffffffff802139e1 <_RME_Svc_Handler+0x2a51>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Pgt */
ffffffff80211f57:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80211f5c:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80211f60:	0f 83 82 1c 00 00    	jae    ffffffff80213be8 <_RME_Svc_Handler+0x2c58>
ffffffff80211f66:	48 8b 58 18          	mov    0x18(%rax),%rbx
ffffffff80211f6a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80211f6e:	48 01 d3             	add    %rdx,%rbx
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80211f71:	4c 8b 23             	mov    (%rbx),%r12
ffffffff80211f74:	4c 89 e0             	mov    %r12,%rax
ffffffff80211f77:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211f7b:	66 83 f8 02          	cmp    $0x2,%ax
ffffffff80211f7f:	0f 85 7b 1c 00 00    	jne    ffffffff80213c00 <_RME_Svc_Handler+0x2c70>
ffffffff80211f85:	4c 89 e0             	mov    %r12,%rax
ffffffff80211f88:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211f8c:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211f90:	0f 85 5e 1c 00 00    	jne    ffffffff80213bf4 <_RME_Svc_Handler+0x2c64>
ffffffff80211f96:	48 8b 05 73 50 01 00 	mov    0x15073(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
ffffffff80211f9d:	48 2b 43 20          	sub    0x20(%rbx),%rax
ffffffff80211fa1:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80211fa5:	0f 86 8a 23 00 00    	jbe    ffffffff80214335 <_RME_Svc_Handler+0x33a5>
ffffffff80211fab:	48 83 7b 08 00       	cmpq   $0x0,0x8(%rbx)
ffffffff80211fb0:	0f 85 52 23 00 00    	jne    ffffffff80214308 <_RME_Svc_Handler+0x3378>
    if(__RME_Pgt_Del_Check(Pgt_Del)<0)
ffffffff80211fb6:	48 89 df             	mov    %rbx,%rdi
ffffffff80211fb9:	e8 c2 8f 00 00       	call   ffffffff8021af80 <__RME_Pgt_Del_Check>
        Table_Size=RME_PGT_SIZE_TOP(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80211fbe:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff80211fc2:	b8 01 00 00 00       	mov    $0x1,%eax
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80211fc7:	31 d2                	xor    %edx,%edx
    Object=RME_CAP_GETOBJ(Pgt_Del,rme_ptr_t);
ffffffff80211fc9:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
        Table_Size=RME_PGT_SIZE_NOM(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80211fcd:	d3 e0                	shl    %cl,%eax
ffffffff80211fcf:	48 63 f0             	movslq %eax,%rsi
ffffffff80211fd2:	4c 89 e0             	mov    %r12,%rax
ffffffff80211fd5:	48 c1 e6 03          	shl    $0x3,%rsi
ffffffff80211fd9:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff80211fde:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Pgt_Del,Type_Stat);
ffffffff80211fe1:	84 d2                	test   %dl,%dl
ffffffff80211fe3:	0f 84 de 26 00 00    	je     ffffffff802146c7 <_RME_Svc_Handler+0x3737>
    RME_ASSERT(_RME_Kot_Erase(Object,Table_Size)==0);
ffffffff80211fe9:	e8 a2 d0 ff ff       	call   ffffffff8020f090 <_RME_Kot_Erase>
    return 0;
ffffffff80211fee:	31 f6                	xor    %esi,%esi
ffffffff80211ff0:	e9 83 f5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80211ff5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80211ffa:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff80211ffe:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80212002:	f6 c4 80             	test   $0x80,%ah
ffffffff80212005:	0f 85 1d 0c 00 00    	jne    ffffffff80212c28 <_RME_Svc_Handler+0x1c98>
ffffffff8021200b:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021200e:	0f 83 fd 1d 00 00    	jae    ffffffff80213e11 <_RME_Svc_Handler+0x2e81>
ffffffff80212014:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212018:	48 01 f0             	add    %rsi,%rax
ffffffff8021201b:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021201e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80212021:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80212025:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80212029:	0f 84 d6 1d 00 00    	je     ffffffff80213e05 <_RME_Svc_Handler+0x2e75>
ffffffff8021202f:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212033:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80212037:	0f 85 e0 1d 00 00    	jne    ffffffff80213e1d <_RME_Svc_Handler+0x2e8d>
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
ffffffff8021203d:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff80212042:	4c 89 c2             	mov    %r8,%rdx
ffffffff80212045:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff80212049:	f6 c6 80             	test   $0x80,%dh
ffffffff8021204c:	0f 85 67 14 00 00    	jne    ffffffff802134b9 <_RME_Svc_Handler+0x2529>
ffffffff80212052:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80212055:	0f 83 39 1b 00 00    	jae    ffffffff80213b94 <_RME_Svc_Handler+0x2c04>
ffffffff8021205b:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021205f:	4c 8d 24 32          	lea    (%rdx,%rsi,1),%r12
ffffffff80212063:	49 8b 14 24          	mov    (%r12),%rdx
ffffffff80212067:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021206a:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8021206e:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80212072:	0f 84 10 1b 00 00    	je     ffffffff80213b88 <_RME_Svc_Handler+0x2bf8>
ffffffff80212078:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021207c:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80212080:	0f 85 f6 1a 00 00    	jne    ffffffff80213b7c <_RME_Svc_Handler+0x2bec>
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80212086:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13
                                       RME_PARAM_D0(Param[1]),              /* rme_ptr_t Prio */
ffffffff8021208b:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff80212090:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212094:	0f 84 8f 19 00 00    	je     ffffffff80213a29 <_RME_Svc_Handler+0x2a99>
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
ffffffff8021209a:	41 f6 44 24 10 04    	testb  $0x4,0x10(%r12)
ffffffff802120a0:	0f 84 83 19 00 00    	je     ffffffff80213a29 <_RME_Svc_Handler+0x2a99>
    if(Cap_Sig!=RME_CID_NULL)
ffffffff802120a6:	44 89 c1             	mov    %r8d,%ecx
ffffffff802120a9:	41 81 f8 00 00 00 80 	cmp    $0x80000000,%r8d
ffffffff802120b0:	0f 84 24 19 00 00    	je     ffffffff802139da <_RME_Svc_Handler+0x2a4a>
        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802120b6:	f6 c5 80             	test   $0x80,%ch
ffffffff802120b9:	0f 85 96 18 00 00    	jne    ffffffff80213955 <_RME_Svc_Handler+0x29c5>
ffffffff802120bf:	48 39 cf             	cmp    %rcx,%rdi
ffffffff802120c2:	0f 86 93 28 00 00    	jbe    ffffffff8021495b <_RME_Svc_Handler+0x39cb>
ffffffff802120c8:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802120cc:	48 8d 1c 31          	lea    (%rcx,%rsi,1),%rbx
ffffffff802120d0:	48 8b 13             	mov    (%rbx),%rdx
ffffffff802120d3:	48 89 d1             	mov    %rdx,%rcx
ffffffff802120d6:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff802120da:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff802120de:	0f 84 6b 28 00 00    	je     ffffffff8021494f <_RME_Svc_Handler+0x39bf>
ffffffff802120e4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802120e8:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff802120ec:	0f 85 99 28 00 00    	jne    ffffffff8021498b <_RME_Svc_Handler+0x39fb>
        RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SCHED);
ffffffff802120f2:	f6 43 10 20          	testb  $0x20,0x10(%rbx)
ffffffff802120f6:	0f 84 2d 19 00 00    	je     ffffffff80213a29 <_RME_Svc_Handler+0x2a99>
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff802120fc:	4c 8b 78 18          	mov    0x18(%rax),%r15
    if(Local_Old!=RME_THD_FREE)
ffffffff80212100:	49 83 7f 28 ff       	cmpq   $0xffffffffffffffff,0x28(%r15)
ffffffff80212105:	0f 85 74 28 00 00    	jne    ffffffff8021497f <_RME_Svc_Handler+0x39ef>
    Local_New=RME_CPU_LOCAL();
ffffffff8021210b:	e8 2f 97 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Scheduler=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
ffffffff80212110:	49 8b 4c 24 18       	mov    0x18(%r12),%rcx
    Local_New=RME_CPU_LOCAL();
ffffffff80212115:	48 89 c2             	mov    %rax,%rdx
    if(Scheduler->Sched.Local!=Local_New)
ffffffff80212118:	48 3b 41 28          	cmp    0x28(%rcx),%rax
ffffffff8021211c:	0f 85 5d 28 00 00    	jne    ffffffff8021497f <_RME_Svc_Handler+0x39ef>
    if(Thread==Scheduler)
ffffffff80212122:	49 39 cf             	cmp    %rcx,%r15
ffffffff80212125:	0f 84 48 28 00 00    	je     ffffffff80214973 <_RME_Svc_Handler+0x39e3>
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8021212b:	44 89 f6             	mov    %r14d,%esi
    if(Scheduler->Sched.Prio_Max<Prio)
ffffffff8021212e:	48 3b 71 48          	cmp    0x48(%rcx),%rsi
ffffffff80212132:	0f 87 2f 28 00 00    	ja     ffffffff80214967 <_RME_Svc_Handler+0x39d7>
    Hyp_Attr=Thread->Ctx.Hyp_Attr;
ffffffff80212138:	49 8b 87 88 00 00 00 	mov    0x88(%r15),%rax
    if(RME_THD_ATTR(Hyp_Attr)!=0U)
ffffffff8021213f:	48 89 c7             	mov    %rax,%rdi
ffffffff80212142:	48 0f ba f7 3f       	btr    $0x3f,%rdi
ffffffff80212147:	48 85 ff             	test   %rdi,%rdi
ffffffff8021214a:	0f 85 d9 18 00 00    	jne    ffffffff80213a29 <_RME_Svc_Handler+0x2a99>
    else if(((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)==0U))||
ffffffff80212150:	4d 85 ed             	test   %r13,%r13
ffffffff80212153:	0f 85 f0 17 00 00    	jne    ffffffff80213949 <_RME_Svc_Handler+0x29b9>
ffffffff80212159:	48 85 c0             	test   %rax,%rax
ffffffff8021215c:	0f 88 e7 17 00 00    	js     ffffffff80213949 <_RME_Svc_Handler+0x29b9>
ffffffff80212162:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff80212166:	f0 49 0f b1 57 28    	lock cmpxchg %rdx,0x28(%r15)
ffffffff8021216c:	0f 94 c2             	sete   %dl
    if(RME_COMP_SWAP((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff8021216f:	84 d2                	test   %dl,%dl
ffffffff80212171:	0f 84 29 28 00 00    	je     ffffffff802149a0 <_RME_Svc_Handler+0x3a10>
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
ffffffff80212177:	49 c1 ee 20          	shr    $0x20,%r14
    Scheduler->Sched.Sched_Ref++;
ffffffff8021217b:	48 83 41 60 01       	addq   $0x1,0x60(%rcx)
    Thread->Sched.Sched_Thd=Scheduler;
ffffffff80212180:	49 89 4f 68          	mov    %rcx,0x68(%r15)
    Thread->Sched.Prio=Prio;
ffffffff80212184:	49 89 77 40          	mov    %rsi,0x40(%r15)
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
ffffffff80212188:	4d 89 77 20          	mov    %r14,0x20(%r15)
    if(Sig_Op==(void*)0U)
ffffffff8021218c:	48 85 db             	test   %rbx,%rbx
ffffffff8021218f:	0f 84 0f 1c 00 00    	je     ffffffff80213da4 <_RME_Svc_Handler+0x2e14>
        Thread->Sched.Sched_Sig=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff80212195:	83 3b 00             	cmpl   $0x0,(%rbx)
ffffffff80212198:	74 04                	je     ffffffff8021219e <_RME_Svc_Handler+0x120e>
ffffffff8021219a:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff8021219e:	49 89 5f 70          	mov    %rbx,0x70(%r15)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802121a2:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff802121a7:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    return 0;
ffffffff802121ad:	31 f6                	xor    %esi,%esi
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)!=0U)
ffffffff802121af:	49 83 bf 88 00 00 00 	cmpq   $0x0,0x88(%r15)
ffffffff802121b6:	00 
ffffffff802121b7:	0f 89 bb f3 ff ff    	jns    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)Haddr;
ffffffff802121bd:	4d 89 af 90 00 00 00 	mov    %r13,0x90(%r15)
ffffffff802121c4:	e9 af f3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802121c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            Retval=_RME_Thd_Crt(Cpt,
ffffffff802121d0:	48 8b 04 24          	mov    (%rsp),%rax
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Prio_Max */
ffffffff802121d4:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
            Retval=_RME_Thd_Crt(Cpt,
ffffffff802121d9:	48 83 ec 08          	sub    $0x8,%rsp
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
ffffffff802121dd:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
            Retval=_RME_Thd_Crt(Cpt,
ffffffff802121e2:	48 89 c6             	mov    %rax,%rsi
ffffffff802121e5:	48 c1 e8 07          	shr    $0x7,%rax
ffffffff802121e9:	45 89 c1             	mov    %r8d,%r9d
ffffffff802121ec:	83 e6 40             	and    $0x40,%esi
ffffffff802121ef:	89 d1                	mov    %edx,%ecx
ffffffff802121f1:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff802121f5:	56                   	push   %rsi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff802121f6:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Thd_Crt(Cpt,
ffffffff802121fa:	50                   	push   %rax
ffffffff802121fb:	ff 74 24 48          	push   0x48(%rsp)
ffffffff802121ff:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
ffffffff80212204:	e8 67 c0 ff ff       	call   ffffffff8020e270 <_RME_Thd_Crt>
            break;
ffffffff80212209:	48 83 c4 20          	add    $0x20,%rsp
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8021220d:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212210:	e9 63 f3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff80212215:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
ffffffff8021221a:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff8021221e:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80212222:	f6 c4 80             	test   $0x80,%ah
ffffffff80212225:	0f 85 1d 0c 00 00    	jne    ffffffff80212e48 <_RME_Svc_Handler+0x1eb8>
ffffffff8021222b:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021222e:	0f 83 64 1b 00 00    	jae    ffffffff80213d98 <_RME_Svc_Handler+0x2e08>
ffffffff80212234:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212238:	48 8d 0c 30          	lea    (%rax,%rsi,1),%rcx
ffffffff8021223c:	48 8b 01             	mov    (%rcx),%rax
ffffffff8021223f:	48 89 c2             	mov    %rax,%rdx
ffffffff80212242:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80212246:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff8021224a:	0f 84 3c 1b 00 00    	je     ffffffff80213d8c <_RME_Svc_Handler+0x2dfc>
ffffffff80212250:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212254:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80212258:	0f 85 47 1e 00 00    	jne    ffffffff802140a5 <_RME_Svc_Handler+0x3115>
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Pgt */
ffffffff8021225e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80212263:	f6 c4 80             	test   $0x80,%ah
ffffffff80212266:	0f 85 e6 14 00 00    	jne    ffffffff80213752 <_RME_Svc_Handler+0x27c2>
ffffffff8021226c:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021226f:	0f 83 24 1e 00 00    	jae    ffffffff80214099 <_RME_Svc_Handler+0x3109>
ffffffff80212275:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212279:	48 8d 14 30          	lea    (%rax,%rsi,1),%rdx
ffffffff8021227d:	48 8b 02             	mov    (%rdx),%rax
ffffffff80212280:	48 89 c6             	mov    %rax,%rsi
ffffffff80212283:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff80212287:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8021228b:	0f 84 fc 1d 00 00    	je     ffffffff8021408d <_RME_Svc_Handler+0x30fd>
ffffffff80212291:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212295:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80212299:	0f 85 99 1a 00 00    	jne    ffffffff80213d38 <_RME_Svc_Handler+0x2da8>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
ffffffff8021229f:	f6 41 10 08          	testb  $0x8,0x10(%rcx)
ffffffff802122a3:	0f 84 83 1a 00 00    	je     ffffffff80213d2c <_RME_Svc_Handler+0x2d9c>
    RME_CAP_CHECK(Pgt_New,RME_PGT_FLAG_PRC_PGT);
ffffffff802122a9:	f6 42 10 80          	testb  $0x80,0x10(%rdx)
ffffffff802122ad:	0f 84 91 1a 00 00    	je     ffffffff80213d44 <_RME_Svc_Handler+0x2db4>
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff802122b3:	83 3a 00             	cmpl   $0x0,(%rdx)
    Pgt_Old=Prc_Op->Pgt;
ffffffff802122b6:	48 8b 41 30          	mov    0x30(%rcx),%rax
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff802122ba:	74 04                	je     ffffffff802122c0 <_RME_Svc_Handler+0x1330>
ffffffff802122bc:	48 8b 52 08          	mov    0x8(%rdx),%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802122c0:	f0 48 0f b1 51 30    	lock cmpxchg %rdx,0x30(%rcx)
ffffffff802122c6:	40 0f 94 c6          	sete   %sil
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Pgt)),
ffffffff802122ca:	40 84 f6             	test   %sil,%sil
ffffffff802122cd:	0f 84 83 25 00 00    	je     ffffffff80214856 <_RME_Svc_Handler+0x38c6>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802122d3:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff802122d8:	f0 48 0f c1 4a 08    	lock xadd %rcx,0x8(%rdx)
ffffffff802122de:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
ffffffff802122e2:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    return 0;
ffffffff802122e8:	31 f6                	xor    %esi,%esi
ffffffff802122ea:	e9 89 f2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
            Retval=_RME_Prc_Crt(Cpt,
ffffffff802122ef:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff802122f4:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff802122f8:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff802122fc:	f6 c4 80             	test   $0x80,%ah
ffffffff802122ff:	0f 85 ab 09 00 00    	jne    ffffffff80212cb0 <_RME_Svc_Handler+0x1d20>
ffffffff80212305:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212308:	0f 83 2b 1d 00 00    	jae    ffffffff80214039 <_RME_Svc_Handler+0x30a9>
ffffffff8021230e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212312:	48 01 c8             	add    %rcx,%rax
ffffffff80212315:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212318:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021231b:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff8021231f:	66 83 ff 02          	cmp    $0x2,%di
ffffffff80212323:	0f 84 04 1d 00 00    	je     ffffffff8021402d <_RME_Svc_Handler+0x309d>
ffffffff80212329:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021232d:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212331:	0f 85 0e 1d 00 00    	jne    ffffffff80214045 <_RME_Svc_Handler+0x30b5>
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
ffffffff80212337:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021233c:	f6 c6 80             	test   $0x80,%dh
ffffffff8021233f:	0f 85 7e 12 00 00    	jne    ffffffff802135c3 <_RME_Svc_Handler+0x2633>
ffffffff80212345:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80212348:	0f 83 8a 19 00 00    	jae    ffffffff80213cd8 <_RME_Svc_Handler+0x2d48>
ffffffff8021234e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212352:	48 8d 3c 0a          	lea    (%rdx,%rcx,1),%rdi
ffffffff80212356:	48 8b 17             	mov    (%rdi),%rdx
ffffffff80212359:	49 89 d0             	mov    %rdx,%r8
ffffffff8021235c:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80212360:	66 41 83 f8 02       	cmp    $0x2,%r8w
ffffffff80212365:	0f 84 61 19 00 00    	je     ffffffff80213ccc <_RME_Svc_Handler+0x2d3c>
ffffffff8021236b:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021236f:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212373:	0f 85 6b 19 00 00    	jne    ffffffff80213ce4 <_RME_Svc_Handler+0x2d54>
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt */
ffffffff80212379:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8021237e:	f6 c6 80             	test   $0x80,%dh
ffffffff80212381:	0f 85 d6 14 00 00    	jne    ffffffff8021385d <_RME_Svc_Handler+0x28cd>
ffffffff80212387:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021238a:	0f 83 88 18 00 00    	jae    ffffffff80213c18 <_RME_Svc_Handler+0x2c88>
ffffffff80212390:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212394:	48 01 ca             	add    %rcx,%rdx
ffffffff80212397:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8021239a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021239d:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff802123a1:	66 83 fe 02          	cmp    $0x2,%si
ffffffff802123a5:	0f 84 b5 26 00 00    	je     ffffffff80214a60 <_RME_Svc_Handler+0x3ad0>
ffffffff802123ab:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802123af:	48 83 f9 04          	cmp    $0x4,%rcx
ffffffff802123b3:	0f 85 9b 26 00 00    	jne    ffffffff80214a54 <_RME_Svc_Handler+0x3ac4>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff802123b9:	48 8b 70 10          	mov    0x10(%rax),%rsi
ffffffff802123bd:	48 f7 d6             	not    %rsi
ffffffff802123c0:	83 e6 01             	and    $0x1,%esi
ffffffff802123c3:	0f 85 43 18 00 00    	jne    ffffffff80213c0c <_RME_Svc_Handler+0x2c7c>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff802123c9:	f6 47 10 40          	testb  $0x40,0x10(%rdi)
ffffffff802123cd:	0f 84 d5 23 00 00    	je     ffffffff802147a8 <_RME_Svc_Handler+0x3818>
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff802123d3:	f6 42 10 40          	testb  $0x40,0x10(%rdx)
ffffffff802123d7:	0f 84 bf 23 00 00    	je     ffffffff8021479c <_RME_Svc_Handler+0x380c>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff802123dd:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff802123e2:	48 3b 48 28          	cmp    0x28(%rax),%rcx
ffffffff802123e6:	0f 83 10 24 00 00    	jae    ffffffff802147fc <_RME_Svc_Handler+0x386c>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802123ec:	49 b8 00 00 00 00 01 	movabs $0x100000000,%r8
ffffffff802123f3:	00 00 00 
ffffffff802123f6:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802123fa:	48 03 48 18          	add    0x18(%rax),%rcx
ffffffff802123fe:	48 89 f0             	mov    %rsi,%rax
ffffffff80212401:	f0 4c 0f b1 01       	lock cmpxchg %r8,(%rcx)
ffffffff80212406:	41 0f 94 c0          	sete   %r8b
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8021240a:	45 84 c0             	test   %r8b,%r8b
ffffffff8021240d:	0f 84 dd 23 00 00    	je     ffffffff802147f0 <_RME_Svc_Handler+0x3860>
ffffffff80212413:	48 8b 05 f6 4b 01 00 	mov    0x14bf6(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    Prc_Crt->Head.Root_Ref=0U;
ffffffff8021241a:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
ffffffff80212421:	00 
    Prc_Crt->Head.Object=0U;
ffffffff80212422:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
ffffffff80212429:	00 
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8021242a:	48 89 41 20          	mov    %rax,0x20(%rcx)
    Prc_Crt->Head.Flag=RME_PRC_FLAG_ALL;
ffffffff8021242e:	48 c7 41 10 0f 00 00 	movq   $0xf,0x10(%rcx)
ffffffff80212435:	00 
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff80212436:	83 3f 00             	cmpl   $0x0,(%rdi)
ffffffff80212439:	74 04                	je     ffffffff8021243f <_RME_Svc_Handler+0x14af>
ffffffff8021243b:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff8021243f:	83 3a 00             	cmpl   $0x0,(%rdx)
ffffffff80212442:	74 04                	je     ffffffff80212448 <_RME_Svc_Handler+0x14b8>
ffffffff80212444:	48 8b 52 08          	mov    0x8(%rdx),%rdx
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80212448:	b8 01 00 00 00       	mov    $0x1,%eax
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff8021244d:	48 89 79 28          	mov    %rdi,0x28(%rcx)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff80212451:	48 89 51 30          	mov    %rdx,0x30(%rcx)
ffffffff80212455:	48 89 c6             	mov    %rax,%rsi
ffffffff80212458:	f0 48 0f c1 77 08    	lock xadd %rsi,0x8(%rdi)
ffffffff8021245e:	f0 48 0f c1 42 08    	lock xadd %rax,0x8(%rdx)
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff80212464:	b8 05 00 00 00       	mov    $0x5,%eax
    return 0;
ffffffff80212469:	31 f6                	xor    %esi,%esi
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff8021246b:	48 c1 e0 30          	shl    $0x30,%rax
ffffffff8021246f:	48 89 01             	mov    %rax,(%rcx)
    return 0;
ffffffff80212472:	e9 01 f1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
            Retval=_RME_Cpt_Del(Cpt,
ffffffff80212477:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff8021247c:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff80212480:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80212484:	f6 c4 80             	test   $0x80,%ah
ffffffff80212487:	0f 85 33 09 00 00    	jne    ffffffff80212dc0 <_RME_Svc_Handler+0x1e30>
ffffffff8021248d:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212490:	0f 83 57 19 00 00    	jae    ffffffff80213ded <_RME_Svc_Handler+0x2e5d>
ffffffff80212496:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021249a:	48 01 c8             	add    %rcx,%rax
ffffffff8021249d:	48 8b 10             	mov    (%rax),%rdx
ffffffff802124a0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802124a3:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff802124a7:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff802124ab:	0f 84 5f 16 00 00    	je     ffffffff80213b10 <_RME_Svc_Handler+0x2b80>
ffffffff802124b1:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802124b5:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802124b9:	0f 85 45 16 00 00    	jne    ffffffff80213b04 <_RME_Svc_Handler+0x2b74>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff802124bf:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff802124c3:	0f 84 30 15 00 00    	je     ffffffff802139f9 <_RME_Svc_Handler+0x2a69>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Cpt */
ffffffff802124c9:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff802124ce:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff802124d2:	0f 83 20 16 00 00    	jae    ffffffff80213af8 <_RME_Svc_Handler+0x2b68>
ffffffff802124d8:	48 8b 70 18          	mov    0x18(%rax),%rsi
ffffffff802124dc:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802124e0:	48 01 d6             	add    %rdx,%rsi
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff802124e3:	48 8b 06             	mov    (%rsi),%rax
ffffffff802124e6:	48 89 c2             	mov    %rax,%rdx
ffffffff802124e9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802124ed:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff802124f1:	0f 85 c9 22 00 00    	jne    ffffffff802147c0 <_RME_Svc_Handler+0x3830>
ffffffff802124f7:	48 89 c2             	mov    %rax,%rdx
ffffffff802124fa:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802124fe:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212502:	0f 85 ac 22 00 00    	jne    ffffffff802147b4 <_RME_Svc_Handler+0x3824>
ffffffff80212508:	48 8b 4e 20          	mov    0x20(%rsi),%rcx
ffffffff8021250c:	48 8b 15 fd 4a 01 00 	mov    0x14afd(%rip),%rdx        # ffffffff80227010 <RME_x64_timestamp>
ffffffff80212513:	48 29 ca             	sub    %rcx,%rdx
ffffffff80212516:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8021251a:	0f 86 a8 1f 00 00    	jbe    ffffffff802144c8 <_RME_Svc_Handler+0x3538>
ffffffff80212520:	48 8b 56 08          	mov    0x8(%rsi),%rdx
ffffffff80212524:	48 85 d2             	test   %rdx,%rdx
ffffffff80212527:	0f 85 72 1f 00 00    	jne    ffffffff8021449f <_RME_Svc_Handler+0x350f>
    Table=RME_CAP_GETOBJ(Cpt_Del,struct RME_Cap_Struct*);
ffffffff8021252d:	48 8b 4e 18          	mov    0x18(%rsi),%rcx
    Entry_Num=Cpt_Del->Entry_Num;
ffffffff80212531:	48 8b 7e 28          	mov    0x28(%rsi),%rdi
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff80212535:	48 85 ff             	test   %rdi,%rdi
ffffffff80212538:	75 17                	jne    ffffffff80212551 <_RME_Svc_Handler+0x15c1>
ffffffff8021253a:	e9 cc 13 00 00       	jmp    ffffffff8021390b <_RME_Svc_Handler+0x297b>
ffffffff8021253f:	90                   	nop
ffffffff80212540:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80212544:	48 83 c1 40          	add    $0x40,%rcx
ffffffff80212548:	48 39 d7             	cmp    %rdx,%rdi
ffffffff8021254b:	0f 84 ba 13 00 00    	je     ffffffff8021390b <_RME_Svc_Handler+0x297b>
        if(Table[Count].Head.Type_Stat!=0U)
ffffffff80212551:	48 83 39 00          	cmpq   $0x0,(%rcx)
ffffffff80212555:	74 e9                	je     ffffffff80212540 <_RME_Svc_Handler+0x15b0>
            RME_CAP_DEFROST(Cpt_Del,Type_Stat);
ffffffff80212557:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff8021255e:	00 ff ff 
ffffffff80212561:	48 21 c2             	and    %rax,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212564:	f0 48 0f b1 16       	lock cmpxchg %rdx,(%rsi)
ffffffff80212569:	0f 94 c2             	sete   %dl
            return RME_ERR_CPT_EXIST;
ffffffff8021256c:	48 c7 c6 fb ff ff ff 	mov    $0xfffffffffffffffb,%rsi
ffffffff80212573:	e9 00 f0 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Crt */
ffffffff80212578:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8021257d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
ffffffff80212582:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
ffffffff80212587:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
ffffffff8021258c:	89 d1                	mov    %edx,%ecx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8021258e:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff80212592:	e8 f9 b4 ff ff       	call   ffffffff8020da90 <_RME_Cpt_Crt>
ffffffff80212597:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff8021259a:	e9 d9 ef ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
                                RME_PARAM_D1(Param[0]));                    /* rme_ptr_t Is_Exc_Ret */
ffffffff8021259f:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff802125a4:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff802125a8:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
            Retval=_RME_Inv_Set(Cpt,
ffffffff802125ac:	89 d0                	mov    %edx,%eax
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff802125ae:	f6 c6 80             	test   $0x80,%dh
ffffffff802125b1:	0f 85 59 0d 00 00    	jne    ffffffff80213310 <_RME_Svc_Handler+0x2380>
ffffffff802125b7:	48 39 c7             	cmp    %rax,%rdi
ffffffff802125ba:	0f 86 97 1e 00 00    	jbe    ffffffff80214457 <_RME_Svc_Handler+0x34c7>
ffffffff802125c0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802125c4:	48 01 f0             	add    %rsi,%rax
ffffffff802125c7:	48 8b 08             	mov    (%rax),%rcx
ffffffff802125ca:	48 89 ce             	mov    %rcx,%rsi
ffffffff802125cd:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff802125d1:	66 83 fe 02          	cmp    $0x2,%si
ffffffff802125d5:	0f 84 70 1e 00 00    	je     ffffffff8021444b <_RME_Svc_Handler+0x34bb>
ffffffff802125db:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802125df:	48 83 f9 07          	cmp    $0x7,%rcx
ffffffff802125e3:	0f 85 56 1e 00 00    	jne    ffffffff8021443f <_RME_Svc_Handler+0x34af>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff802125e9:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff802125ed:	0f 84 42 14 00 00    	je     ffffffff80213a35 <_RME_Svc_Handler+0x2aa5>
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff802125f3:	48 8b 40 18          	mov    0x18(%rax),%rax
    Invocation->Entry=Entry;
ffffffff802125f7:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
            Retval=_RME_Inv_Set(Cpt,
ffffffff802125fc:	48 c1 ea 20          	shr    $0x20,%rdx
    return 0;
ffffffff80212600:	31 f6                	xor    %esi,%esi
    Invocation->Entry=Entry;
ffffffff80212602:	48 89 48 20          	mov    %rcx,0x20(%rax)
    Invocation->Stack=Stack;
ffffffff80212606:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
ffffffff8021260b:	48 89 48 28          	mov    %rcx,0x28(%rax)
    Invocation->Is_Exc_Ret=Is_Exc_Ret;
ffffffff8021260f:	48 89 50 30          	mov    %rdx,0x30(%rax)
    return 0;
ffffffff80212613:	e9 60 ef ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
            Retval=_RME_Cpt_Frz(Cpt,
ffffffff80212618:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff8021261d:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff80212621:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff80212625:	f6 c4 80             	test   $0x80,%ah
ffffffff80212628:	0f 85 4a 0b 00 00    	jne    ffffffff80213178 <_RME_Svc_Handler+0x21e8>
ffffffff8021262e:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212631:	0f 83 1d 21 00 00    	jae    ffffffff80214754 <_RME_Svc_Handler+0x37c4>
ffffffff80212637:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021263b:	48 01 c8             	add    %rcx,%rax
ffffffff8021263e:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212641:	48 89 d1             	mov    %rdx,%rcx
ffffffff80212644:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80212648:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8021264c:	0f 84 f6 15 00 00    	je     ffffffff80213c48 <_RME_Svc_Handler+0x2cb8>
ffffffff80212652:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212656:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021265a:	0f 85 dc 15 00 00    	jne    ffffffff80213c3c <_RME_Svc_Handler+0x2cac>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_FRZ);
ffffffff80212660:	f6 40 10 04          	testb  $0x4,0x10(%rax)
ffffffff80212664:	0f 84 9b 13 00 00    	je     ffffffff80213a05 <_RME_Svc_Handler+0x2a75>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Frz */
ffffffff8021266a:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Frz,struct RME_Cap_Struct*,Capobj_Frz);
ffffffff8021266f:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212673:	0f 83 16 1f 00 00    	jae    ffffffff8021458f <_RME_Svc_Handler+0x35ff>
ffffffff80212679:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021267d:	48 03 50 18          	add    0x18(%rax),%rdx
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Frz->Head.Type_Stat));
ffffffff80212681:	48 8b 02             	mov    (%rdx),%rax
    if(RME_CAP_TYPE(Type_Stat)==RME_CAP_TYPE_NOP)
ffffffff80212684:	48 89 c6             	mov    %rax,%rsi
ffffffff80212687:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021268b:	0f 84 bc 21 00 00    	je     ffffffff8021484d <_RME_Svc_Handler+0x38bd>
    if(RME_CAP_ATTR(Type_Stat)==RME_CAP_ATTR_ROOT)
ffffffff80212691:	85 c0                	test   %eax,%eax
ffffffff80212693:	75 0d                	jne    ffffffff802126a2 <_RME_Svc_Handler+0x1712>
        if(Capobj_Frz->Head.Root_Ref!=0U)
ffffffff80212695:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80212699:	48 85 c9             	test   %rcx,%rcx
ffffffff8021269c:	0f 85 42 21 00 00    	jne    ffffffff802147e4 <_RME_Svc_Handler+0x3854>
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff802126a2:	48 89 c1             	mov    %rax,%rcx
ffffffff802126a5:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff802126a9:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff802126ad:	0f 84 18 22 00 00    	je     ffffffff802148cb <_RME_Svc_Handler+0x393b>
    if(RME_UNLIKELY(RME_CAP_QUIE(Capobj_Frz->Head.Timestamp)==0U))
ffffffff802126b3:	48 8b 0d 56 49 01 00 	mov    0x14956(%rip),%rcx        # ffffffff80227010 <RME_x64_timestamp>
ffffffff802126ba:	48 8b 7a 20          	mov    0x20(%rdx),%rdi
ffffffff802126be:	48 89 ce             	mov    %rcx,%rsi
ffffffff802126c1:	48 29 fe             	sub    %rdi,%rsi
ffffffff802126c4:	48 83 fe 0a          	cmp    $0xa,%rsi
ffffffff802126c8:	0f 86 e9 1b 00 00    	jbe    ffffffff802142b7 <_RME_Svc_Handler+0x3327>
    Capobj_Frz->Head.Timestamp=RME_TIMESTAMP();
ffffffff802126ce:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
ffffffff802126d2:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff802126d9:	00 ff ff 
ffffffff802126dc:	48 21 c1             	and    %rax,%rcx
ffffffff802126df:	48 0f ba e9 21       	bts    $0x21,%rcx
ffffffff802126e4:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802126e9:	0f 94 c1             	sete   %cl
    return 0;
ffffffff802126ec:	31 f6                	xor    %esi,%esi
ffffffff802126ee:	e9 85 ee ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
ffffffff802126f3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
ffffffff802126f8:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff802126fc:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff80212700:	f6 c4 80             	test   $0x80,%ah
ffffffff80212703:	0f 85 8f 0c 00 00    	jne    ffffffff80213398 <_RME_Svc_Handler+0x2408>
ffffffff80212709:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021270c:	0f 83 fa 1f 00 00    	jae    ffffffff8021470c <_RME_Svc_Handler+0x377c>
ffffffff80212712:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212716:	48 8d 1c 08          	lea    (%rax,%rcx,1),%rbx
ffffffff8021271a:	48 8b 03             	mov    (%rbx),%rax
ffffffff8021271d:	48 89 c2             	mov    %rax,%rdx
ffffffff80212720:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80212724:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff80212728:	0f 84 96 14 00 00    	je     ffffffff80213bc4 <_RME_Svc_Handler+0x2c34>
ffffffff8021272e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212732:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212736:	0f 85 7c 14 00 00    	jne    ffffffff80213bb8 <_RME_Svc_Handler+0x2c28>
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt_Child */
ffffffff8021273c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff80212741:	f6 c4 80             	test   $0x80,%ah
ffffffff80212744:	0f 85 eb 0c 00 00    	jne    ffffffff80213435 <_RME_Svc_Handler+0x24a5>
ffffffff8021274a:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021274d:	0f 83 7d 14 00 00    	jae    ffffffff80213bd0 <_RME_Svc_Handler+0x2c40>
ffffffff80212753:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212757:	4c 8d 24 08          	lea    (%rax,%rcx,1),%r12
ffffffff8021275b:	49 8b 04 24          	mov    (%r12),%rax
ffffffff8021275f:	48 89 c2             	mov    %rax,%rdx
ffffffff80212762:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80212766:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff8021276a:	0f 84 d0 13 00 00    	je     ffffffff80213b40 <_RME_Svc_Handler+0x2bb0>
ffffffff80212770:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212774:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212778:	0f 85 b6 13 00 00    	jne    ffffffff80213b34 <_RME_Svc_Handler+0x2ba4>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
ffffffff8021277e:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff80212782:	a8 20                	test   $0x20,%al
ffffffff80212784:	0f 84 9e 13 00 00    	je     ffffffff80213b28 <_RME_Svc_Handler+0x2b98>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff8021278a:	41 f6 44 24 10 08    	testb  $0x8,0x10(%r12)
ffffffff80212790:	0f 84 86 13 00 00    	je     ffffffff80213b1c <_RME_Svc_Handler+0x2b8c>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80212796:	48 89 c2             	mov    %rax,%rdx
            Retval=_RME_Pgt_Des(Cpt,
ffffffff80212799:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff8021279e:	48 c1 ea 24          	shr    $0x24,%rdx
ffffffff802127a2:	48 39 d6             	cmp    %rdx,%rsi
ffffffff802127a5:	0f 87 68 21 00 00    	ja     ffffffff80214913 <_RME_Svc_Handler+0x3983>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff802127ab:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802127af:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff802127b4:	48 39 c6             	cmp    %rax,%rsi
ffffffff802127b7:	0f 82 4a 21 00 00    	jb     ffffffff80214907 <_RME_Svc_Handler+0x3977>
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff802127bd:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff802127c1:	48 89 f0             	mov    %rsi,%rax
ffffffff802127c4:	48 d3 e8             	shr    %cl,%rax
ffffffff802127c7:	48 85 c0             	test   %rax,%rax
ffffffff802127ca:	0f 85 5b 21 00 00    	jne    ffffffff8021492b <_RME_Svc_Handler+0x399b>
    if(__RME_Pgt_Pgdir_Unmap(Pgt_Parent,Pos,Pgt_Child)<0)
ffffffff802127d0:	4c 89 e2             	mov    %r12,%rdx
ffffffff802127d3:	48 89 df             	mov    %rbx,%rdi
ffffffff802127d6:	e8 f5 88 00 00       	call   ffffffff8021b0d0 <__RME_Pgt_Pgdir_Unmap>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff802127db:	83 3b 00             	cmpl   $0x0,(%rbx)
ffffffff802127de:	74 04                	je     ffffffff802127e4 <_RME_Svc_Handler+0x1854>
ffffffff802127e0:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802127e4:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff802127e8:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff802127ee:	41 83 3c 24 00       	cmpl   $0x0,(%r12)
ffffffff802127f3:	74 05                	je     ffffffff802127fa <_RME_Svc_Handler+0x186a>
ffffffff802127f5:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
ffffffff802127fa:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff802127fe:	f0 49 0f c1 44 24 08 	lock xadd %rax,0x8(%r12)
    return 0;
ffffffff80212805:	31 f6                	xor    %esi,%esi
ffffffff80212807:	e9 6c ed ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
            Retval=_RME_Sig_Del(Cpt,
ffffffff8021280c:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff80212810:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffffff80212815:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80212819:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff8021281e:	e8 ad a2 ff ff       	call   ffffffff8020cad0 <_RME_Sig_Del.isra.0>
ffffffff80212823:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212826:	e9 4d ed ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
            Retval=_RME_Thd_Del(Cpt,
ffffffff8021282b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80212830:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff80212834:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212838:	f6 c4 80             	test   $0x80,%ah
ffffffff8021283b:	0f 85 17 07 00 00    	jne    ffffffff80212f58 <_RME_Svc_Handler+0x1fc8>
ffffffff80212841:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212844:	0f 83 71 1e 00 00    	jae    ffffffff802146bb <_RME_Svc_Handler+0x372b>
ffffffff8021284a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021284e:	48 01 c8             	add    %rcx,%rax
ffffffff80212851:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212854:	48 89 d1             	mov    %rdx,%rcx
ffffffff80212857:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8021285b:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8021285f:	0f 84 4a 1e 00 00    	je     ffffffff802146af <_RME_Svc_Handler+0x371f>
ffffffff80212865:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212869:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021286d:	0f 85 43 19 00 00    	jne    ffffffff802141b6 <_RME_Svc_Handler+0x3226>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212873:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212877:	0f 84 c4 11 00 00    	je     ffffffff80213a41 <_RME_Svc_Handler+0x2ab1>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Thd */
ffffffff8021287d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff80212882:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212886:	0f 83 42 19 00 00    	jae    ffffffff802141ce <_RME_Svc_Handler+0x323e>
ffffffff8021288c:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80212890:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212894:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff80212897:	48 8b 01             	mov    (%rcx),%rax
ffffffff8021289a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021289d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802128a1:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff802128a5:	0f 85 17 19 00 00    	jne    ffffffff802141c2 <_RME_Svc_Handler+0x3232>
ffffffff802128ab:	48 89 c2             	mov    %rax,%rdx
ffffffff802128ae:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802128b2:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff802128b6:	0f 85 53 19 00 00    	jne    ffffffff8021420f <_RME_Svc_Handler+0x327f>
ffffffff802128bc:	48 8b 15 4d 47 01 00 	mov    0x1474d(%rip),%rdx        # ffffffff80227010 <RME_x64_timestamp>
ffffffff802128c3:	48 2b 51 20          	sub    0x20(%rcx),%rdx
ffffffff802128c7:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff802128cb:	0f 86 32 19 00 00    	jbe    ffffffff80214203 <_RME_Svc_Handler+0x3273>
ffffffff802128d1:	48 83 79 08 00       	cmpq   $0x0,0x8(%rcx)
ffffffff802128d6:	0f 85 fe 18 00 00    	jne    ffffffff802141da <_RME_Svc_Handler+0x324a>
    Thread=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
ffffffff802128dc:	48 8b 79 18          	mov    0x18(%rcx),%rdi
    if(Thread->Sched.Local!=RME_THD_FREE)
ffffffff802128e0:	48 83 7f 28 ff       	cmpq   $0xffffffffffffffff,0x28(%rdi)
ffffffff802128e5:	0f 85 77 1f 00 00    	jne    ffffffff80214862 <_RME_Svc_Handler+0x38d2>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802128eb:	31 d2                	xor    %edx,%edx
ffffffff802128ed:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff802128f2:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Thd_Del,Type_Stat);
ffffffff802128f5:	84 d2                	test   %dl,%dl
ffffffff802128f7:	0f 84 c6 19 00 00    	je     ffffffff802142c3 <_RME_Svc_Handler+0x3333>
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff802128fd:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
ffffffff80212904:	48 8d b7 98 00 00 00 	lea    0x98(%rdi),%rsi
ffffffff8021290b:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021290e:	74 2a                	je     ffffffff8021293a <_RME_Svc_Handler+0x19aa>
        _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff80212910:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212913:	48 8b 50 08          	mov    0x8(%rax),%rdx
    Next->Prev=Prev;
ffffffff80212917:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    Prev->Next=Next;
ffffffff8021291b:	48 89 0a             	mov    %rcx,(%rdx)
        Invocation->Thd_Act=0U;
ffffffff8021291e:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80212925:	00 
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff80212926:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
        Thread->Ctx.Invstk_Depth--;
ffffffff8021292d:	48 83 af a8 00 00 00 	subq   $0x1,0xa8(%rdi)
ffffffff80212934:	01 
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff80212935:	48 39 c6             	cmp    %rax,%rsi
ffffffff80212938:	75 d6                	jne    ffffffff80212910 <_RME_Svc_Handler+0x1980>
    RME_FETCH_ADD(&(Thread->Sched.Prc->Head.Root_Ref), -1);
ffffffff8021293a:	48 8b 47 58          	mov    0x58(%rdi),%rax
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8021293e:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
ffffffff80212942:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212946:	f0 48 0f c1 10       	lock xadd %rdx,(%rax)
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)==0U)
ffffffff8021294b:	48 83 bf 88 00 00 00 	cmpq   $0x0,0x88(%rdi)
ffffffff80212952:	00 
ffffffff80212953:	0f 88 df 0f 00 00    	js     ffffffff80213938 <_RME_Svc_Handler+0x29a8>
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff80212959:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff8021295e:	e8 2d c7 ff ff       	call   ffffffff8020f090 <_RME_Kot_Erase>
    return 0;
ffffffff80212963:	31 f6                	xor    %esi,%esi
ffffffff80212965:	e9 0e ec ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021296a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        _RME_Run_Del(Thread);
ffffffff80212970:	48 89 df             	mov    %rbx,%rdi
ffffffff80212973:	e8 e8 9d ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80212978:	48 c7 43 38 02 00 00 	movq   $0x2,0x38(%rbx)
ffffffff8021297f:	00 
ffffffff80212980:	e9 9c e9 ff ff       	jmp    ffffffff80211321 <_RME_Svc_Handler+0x391>
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80212985:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021298c:	e9 cf e6 ff ff       	jmp    ffffffff80211060 <_RME_Svc_Handler+0xd0>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80212991:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80212998:	e9 db eb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8021299d:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802129a4:	e9 cf eb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff802129a9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802129b0:	e9 ab e6 ff ff       	jmp    ffffffff80211060 <_RME_Svc_Handler+0xd0>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802129b5:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802129bc:	e9 b7 eb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802129c1:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802129c8:	e9 ab eb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802129cd:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802129d4:	e9 9f eb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802129d9:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802129e0:	e9 93 eb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff802129e5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802129ec:	e9 6f e6 ff ff       	jmp    ffffffff80211060 <_RME_Svc_Handler+0xd0>
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff802129f1:	49 8b 44 24 20       	mov    0x20(%r12),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff802129f6:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff802129fa:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802129fe:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80212a01:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80212a05:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80212a0a:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212a0e:	49 8b 44 04 08       	mov    0x8(%r12,%rax,1),%rax
        Local->Thd_Cur=_RME_Run_High(Local);
ffffffff80212a13:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    Prio=Thd->Sched.Prio;
ffffffff80212a18:	48 8b 48 40          	mov    0x40(%rax),%rcx
    Local=Thd->Sched.Local;
ffffffff80212a1c:	48 8b 50 28          	mov    0x28(%rax),%rdx
                  &(Local->Run.List[Prio]));
ffffffff80212a20:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212a23:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80212a27:	4c 8d 44 32 28       	lea    0x28(%rdx,%rsi,1),%r8
ffffffff80212a2c:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212a2f:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80212a33:	48 01 d6             	add    %rdx,%rsi
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80212a36:	48 8b 7e 30          	mov    0x30(%rsi),%rdi
    Next->Prev=New;
ffffffff80212a3a:	48 89 46 30          	mov    %rax,0x30(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80212a3e:	48 89 ce             	mov    %rcx,%rsi
    New->Next=Next;
ffffffff80212a41:	4c 89 00             	mov    %r8,(%rax)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80212a44:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Prev=Prev;
ffffffff80212a48:	48 89 78 08          	mov    %rdi,0x8(%rax)
    Prev->Next=New;
ffffffff80212a4c:	48 89 07             	mov    %rax,(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80212a4f:	b8 01 00 00 00       	mov    $0x1,%eax
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff80212a54:	48 89 ef             	mov    %rbp,%rdi
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80212a57:	48 d3 e0             	shl    %cl,%rax
ffffffff80212a5a:	48 09 44 f2 20       	or     %rax,0x20(%rdx,%rsi,8)
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff80212a5f:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
ffffffff80212a64:	48 89 de             	mov    %rbx,%rsi
ffffffff80212a67:	e8 94 a3 ff ff       	call   ffffffff8020ce00 <_RME_Run_Swt.isra.0>
ffffffff80212a6c:	e9 c3 e8 ff ff       	jmp    ffffffff80211334 <_RME_Svc_Handler+0x3a4>
            Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80212a71:	48 c7 43 38 02 00 00 	movq   $0x2,0x38(%rbx)
ffffffff80212a78:	00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80212a79:	48 8d 43 10          	lea    0x10(%rbx),%rax
ffffffff80212a7d:	48 39 43 10          	cmp    %rax,0x10(%rbx)
ffffffff80212a81:	74 63                	je     ffffffff80212ae6 <_RME_Svc_Handler+0x1b56>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80212a83:	48 8b 7b 70          	mov    0x70(%rbx),%rdi
ffffffff80212a87:	48 85 ff             	test   %rdi,%rdi
ffffffff80212a8a:	0f 84 63 e7 ff ff    	je     ffffffff802111f3 <_RME_Svc_Handler+0x263>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80212a90:	e8 4b d8 ff ff       	call   ffffffff802102e0 <_RME_Kern_Snd>
ffffffff80212a95:	e9 59 e7 ff ff       	jmp    ffffffff802111f3 <_RME_Svc_Handler+0x263>
        __RME_Svc_Retval_Set(&(Thread->Ctx.Reg->Reg),RME_ERR_SIV_FREE);
ffffffff80212a9a:	48 8b bb 90 00 00 00 	mov    0x90(%rbx),%rdi
ffffffff80212aa1:	48 c7 c6 ce fe ff ff 	mov    $0xfffffffffffffece,%rsi
ffffffff80212aa8:	e8 e3 88 00 00       	call   ffffffff8021b390 <__RME_Svc_Retval_Set>
        Thread->Sched.Signal->Thd=RME_NULL;
ffffffff80212aad:	48 8b 43 50          	mov    0x50(%rbx),%rax
ffffffff80212ab1:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80212ab8:	00 
        Thread->Sched.Signal=RME_NULL;
ffffffff80212ab9:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
ffffffff80212ac0:	00 
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80212ac1:	48 c7 43 38 02 00 00 	movq   $0x2,0x38(%rbx)
ffffffff80212ac8:	00 
ffffffff80212ac9:	e9 53 e8 ff ff       	jmp    ffffffff80211321 <_RME_Svc_Handler+0x391>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff80212ace:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80212ad5:	e9 9e ea ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff80212ada:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80212ae1:	e9 92 ea ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80212ae6:	48 8b 53 68          	mov    0x68(%rbx),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80212aea:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff80212af1:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff80212af5:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
    New->Next=Next;
ffffffff80212afc:	48 89 73 10          	mov    %rsi,0x10(%rbx)
    New->Prev=Prev;
ffffffff80212b00:	48 89 4b 18          	mov    %rcx,0x18(%rbx)
    Prev->Next=New;
ffffffff80212b04:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff80212b07:	e9 77 ff ff ff       	jmp    ffffffff80212a83 <_RME_Svc_Handler+0x1af3>
        return RME_ERR_CPT_FLAG;
ffffffff80212b0c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
            RME_SWITCH_RETURN(Reg, Retval);
ffffffff80212b13:	e9 48 e5 ff ff       	jmp    ffffffff80211060 <_RME_Svc_Handler+0xd0>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff80212b18:	48 89 d1             	mov    %rdx,%rcx
ffffffff80212b1b:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212b1f:	48 39 cf             	cmp    %rcx,%rdi
ffffffff80212b22:	0f 86 15 14 00 00    	jbe    ffffffff80213f3d <_RME_Svc_Handler+0x2fad>
ffffffff80212b28:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80212b2c:	48 01 f1             	add    %rsi,%rcx
ffffffff80212b2f:	4c 8b 01             	mov    (%rcx),%r8
ffffffff80212b32:	4d 89 c1             	mov    %r8,%r9
ffffffff80212b35:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff80212b39:	66 41 83 f9 02       	cmp    $0x2,%r9w
ffffffff80212b3e:	0f 84 ed 13 00 00    	je     ffffffff80213f31 <_RME_Svc_Handler+0x2fa1>
ffffffff80212b44:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff80212b48:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff80212b4c:	0f 85 d3 13 00 00    	jne    ffffffff80213f25 <_RME_Svc_Handler+0x2f95>
ffffffff80212b52:	4c 8b 41 28          	mov    0x28(%rcx),%r8
ffffffff80212b56:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212b5b:	4c 39 c0             	cmp    %r8,%rax
ffffffff80212b5e:	0f 83 b5 13 00 00    	jae    ffffffff80213f19 <_RME_Svc_Handler+0x2f89>
ffffffff80212b64:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212b68:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80212b6c:	49 89 c4             	mov    %rax,%r12
ffffffff80212b6f:	48 8b 00             	mov    (%rax),%rax
ffffffff80212b72:	48 89 c1             	mov    %rax,%rcx
ffffffff80212b75:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80212b79:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80212b7d:	0f 84 8a 13 00 00    	je     ffffffff80213f0d <_RME_Svc_Handler+0x2f7d>
ffffffff80212b83:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212b87:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80212b8b:	0f 84 13 f2 ff ff    	je     ffffffff80211da4 <_RME_Svc_Handler+0xe14>
ffffffff80212b91:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80212b98:	e9 db e9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80212b9d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff80212ba0:	48 89 f2             	mov    %rsi,%rdx
ffffffff80212ba3:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212ba7:	48 39 d7             	cmp    %rdx,%rdi
ffffffff80212baa:	0f 86 e5 12 00 00    	jbe    ffffffff80213e95 <_RME_Svc_Handler+0x2f05>
ffffffff80212bb0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212bb4:	48 01 ca             	add    %rcx,%rdx
ffffffff80212bb7:	4c 8b 02             	mov    (%rdx),%r8
ffffffff80212bba:	4d 89 c1             	mov    %r8,%r9
ffffffff80212bbd:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff80212bc1:	66 41 83 f9 02       	cmp    $0x2,%r9w
ffffffff80212bc6:	0f 84 bd 12 00 00    	je     ffffffff80213e89 <_RME_Svc_Handler+0x2ef9>
ffffffff80212bcc:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff80212bd0:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff80212bd4:	0f 85 a3 12 00 00    	jne    ffffffff80213e7d <_RME_Svc_Handler+0x2eed>
ffffffff80212bda:	4c 8b 42 28          	mov    0x28(%rdx),%r8
ffffffff80212bde:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212be3:	4c 39 c0             	cmp    %r8,%rax
ffffffff80212be6:	0f 83 85 12 00 00    	jae    ffffffff80213e71 <_RME_Svc_Handler+0x2ee1>
ffffffff80212bec:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212bf0:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80212bf4:	48 89 c3             	mov    %rax,%rbx
ffffffff80212bf7:	48 8b 00             	mov    (%rax),%rax
ffffffff80212bfa:	48 89 c2             	mov    %rax,%rdx
ffffffff80212bfd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80212c01:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff80212c05:	0f 84 5a 12 00 00    	je     ffffffff80213e65 <_RME_Svc_Handler+0x2ed5>
ffffffff80212c0b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212c0f:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80212c13:	0f 84 ad ef ff ff    	je     ffffffff80211bc6 <_RME_Svc_Handler+0xc36>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80212c19:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80212c20:	e9 53 e9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80212c25:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80212c28:	48 89 c2             	mov    %rax,%rdx
ffffffff80212c2b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80212c2f:	48 39 d7             	cmp    %rdx,%rdi
ffffffff80212c32:	0f 86 48 11 00 00    	jbe    ffffffff80213d80 <_RME_Svc_Handler+0x2df0>
ffffffff80212c38:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212c3c:	48 01 f2             	add    %rsi,%rdx
ffffffff80212c3f:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80212c42:	49 89 c8             	mov    %rcx,%r8
ffffffff80212c45:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80212c49:	66 41 83 f8 02       	cmp    $0x2,%r8w
ffffffff80212c4e:	0f 84 20 11 00 00    	je     ffffffff80213d74 <_RME_Svc_Handler+0x2de4>
ffffffff80212c54:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212c58:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212c5c:	0f 85 06 11 00 00    	jne    ffffffff80213d68 <_RME_Svc_Handler+0x2dd8>
ffffffff80212c62:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80212c66:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212c6b:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212c6e:	0f 83 e8 10 00 00    	jae    ffffffff80213d5c <_RME_Svc_Handler+0x2dcc>
ffffffff80212c74:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212c78:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80212c7c:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212c7f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80212c82:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80212c86:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80212c8a:	0f 84 c0 10 00 00    	je     ffffffff80213d50 <_RME_Svc_Handler+0x2dc0>
ffffffff80212c90:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212c94:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80212c98:	0f 84 9f f3 ff ff    	je     ffffffff8021203d <_RME_Svc_Handler+0x10ad>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80212c9e:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80212ca5:	e9 ce e8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80212caa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80212cb0:	48 89 c2             	mov    %rax,%rdx
ffffffff80212cb3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80212cb7:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80212cba:	0f 86 35 12 00 00    	jbe    ffffffff80213ef5 <_RME_Svc_Handler+0x2f65>
ffffffff80212cc0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212cc4:	48 01 ca             	add    %rcx,%rdx
ffffffff80212cc7:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff80212cca:	49 89 f8             	mov    %rdi,%r8
ffffffff80212ccd:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80212cd1:	66 41 83 f8 02       	cmp    $0x2,%r8w
ffffffff80212cd6:	0f 84 0d 12 00 00    	je     ffffffff80213ee9 <_RME_Svc_Handler+0x2f59>
ffffffff80212cdc:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80212ce0:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80212ce4:	0f 85 f3 11 00 00    	jne    ffffffff80213edd <_RME_Svc_Handler+0x2f4d>
ffffffff80212cea:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff80212cee:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212cf3:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212cf6:	0f 83 d5 11 00 00    	jae    ffffffff80213ed1 <_RME_Svc_Handler+0x2f41>
ffffffff80212cfc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212d00:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80212d04:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212d07:	48 89 d7             	mov    %rdx,%rdi
ffffffff80212d0a:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff80212d0e:	66 83 ff 02          	cmp    $0x2,%di
ffffffff80212d12:	0f 84 ad 11 00 00    	je     ffffffff80213ec5 <_RME_Svc_Handler+0x2f35>
ffffffff80212d18:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212d1c:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212d20:	0f 84 11 f6 ff ff    	je     ffffffff80212337 <_RME_Svc_Handler+0x13a7>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80212d26:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80212d2d:	e9 46 e8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80212d32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212d38:	48 89 c2             	mov    %rax,%rdx
ffffffff80212d3b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80212d3f:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80212d42:	0f 86 78 0f 00 00    	jbe    ffffffff80213cc0 <_RME_Svc_Handler+0x2d30>
ffffffff80212d48:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212d4c:	48 01 ca             	add    %rcx,%rdx
ffffffff80212d4f:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80212d52:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212d55:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff80212d59:	66 83 fe 02          	cmp    $0x2,%si
ffffffff80212d5d:	0f 84 51 0f 00 00    	je     ffffffff80213cb4 <_RME_Svc_Handler+0x2d24>
ffffffff80212d63:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212d67:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212d6b:	0f 85 37 0f 00 00    	jne    ffffffff80213ca8 <_RME_Svc_Handler+0x2d18>
ffffffff80212d71:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80212d75:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212d7a:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212d7d:	0f 83 19 0f 00 00    	jae    ffffffff80213c9c <_RME_Svc_Handler+0x2d0c>
ffffffff80212d83:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212d87:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80212d8b:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212d8e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80212d91:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80212d95:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80212d99:	0f 84 5a 10 00 00    	je     ffffffff80213df9 <_RME_Svc_Handler+0x2e69>
ffffffff80212d9f:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212da3:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212da7:	0f 84 fa e8 ff ff    	je     ffffffff802116a7 <_RME_Svc_Handler+0x717>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80212dad:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80212db4:	e9 bf e7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80212db9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80212dc0:	48 89 c2             	mov    %rax,%rdx
ffffffff80212dc3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80212dc7:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80212dca:	0f 86 11 10 00 00    	jbe    ffffffff80213de1 <_RME_Svc_Handler+0x2e51>
ffffffff80212dd0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212dd4:	48 01 ca             	add    %rcx,%rdx
ffffffff80212dd7:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80212dda:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212ddd:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff80212de1:	66 83 fe 02          	cmp    $0x2,%si
ffffffff80212de5:	0f 84 ea 0f 00 00    	je     ffffffff80213dd5 <_RME_Svc_Handler+0x2e45>
ffffffff80212deb:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212def:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212df3:	0f 85 d0 0f 00 00    	jne    ffffffff80213dc9 <_RME_Svc_Handler+0x2e39>
ffffffff80212df9:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80212dfd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212e02:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212e05:	0f 83 b2 0f 00 00    	jae    ffffffff80213dbd <_RME_Svc_Handler+0x2e2d>
ffffffff80212e0b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212e0f:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80212e13:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212e16:	48 89 d1             	mov    %rdx,%rcx
ffffffff80212e19:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80212e1d:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80212e21:	0f 84 8a 0f 00 00    	je     ffffffff80213db1 <_RME_Svc_Handler+0x2e21>
ffffffff80212e27:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212e2b:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212e2f:	0f 84 8a f6 ff ff    	je     ffffffff802124bf <_RME_Svc_Handler+0x152f>
ffffffff80212e35:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80212e3c:	e9 37 e7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80212e41:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80212e48:	48 89 c2             	mov    %rax,%rdx
ffffffff80212e4b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80212e4f:	48 39 d7             	cmp    %rdx,%rdi
ffffffff80212e52:	0f 86 53 14 00 00    	jbe    ffffffff802142ab <_RME_Svc_Handler+0x331b>
ffffffff80212e58:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212e5c:	48 01 f2             	add    %rsi,%rdx
ffffffff80212e5f:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80212e62:	49 89 c8             	mov    %rcx,%r8
ffffffff80212e65:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80212e69:	66 41 83 f8 02       	cmp    $0x2,%r8w
ffffffff80212e6e:	0f 84 2b 14 00 00    	je     ffffffff8021429f <_RME_Svc_Handler+0x330f>
ffffffff80212e74:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212e78:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212e7c:	0f 85 11 14 00 00    	jne    ffffffff80214293 <_RME_Svc_Handler+0x3303>
ffffffff80212e82:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80212e86:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212e8b:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212e8e:	0f 83 f3 13 00 00    	jae    ffffffff80214287 <_RME_Svc_Handler+0x32f7>
ffffffff80212e94:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212e98:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80212e9c:	48 89 c1             	mov    %rax,%rcx
ffffffff80212e9f:	48 8b 00             	mov    (%rax),%rax
ffffffff80212ea2:	48 89 c2             	mov    %rax,%rdx
ffffffff80212ea5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80212ea9:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff80212ead:	0f 84 dd 0d 00 00    	je     ffffffff80213c90 <_RME_Svc_Handler+0x2d00>
ffffffff80212eb3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212eb7:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80212ebb:	0f 84 9d f3 ff ff    	je     ffffffff8021225e <_RME_Svc_Handler+0x12ce>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80212ec1:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80212ec8:	e9 ab e6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80212ecd:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80212ed0:	48 89 c2             	mov    %rax,%rdx
ffffffff80212ed3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80212ed7:	48 39 d7             	cmp    %rdx,%rdi
ffffffff80212eda:	0f 86 20 18 00 00    	jbe    ffffffff80214700 <_RME_Svc_Handler+0x3770>
ffffffff80212ee0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212ee4:	48 01 f2             	add    %rsi,%rdx
ffffffff80212ee7:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80212eea:	49 89 c8             	mov    %rcx,%r8
ffffffff80212eed:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80212ef1:	66 41 83 f8 02       	cmp    $0x2,%r8w
ffffffff80212ef6:	0f 84 f8 17 00 00    	je     ffffffff802146f4 <_RME_Svc_Handler+0x3764>
ffffffff80212efc:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212f00:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212f04:	0f 85 de 17 00 00    	jne    ffffffff802146e8 <_RME_Svc_Handler+0x3758>
ffffffff80212f0a:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80212f0e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212f13:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212f16:	0f 83 c0 17 00 00    	jae    ffffffff802146dc <_RME_Svc_Handler+0x374c>
ffffffff80212f1c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212f20:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80212f24:	48 89 c1             	mov    %rax,%rcx
ffffffff80212f27:	48 8b 00             	mov    (%rax),%rax
ffffffff80212f2a:	48 89 c2             	mov    %rax,%rdx
ffffffff80212f2d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80212f31:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff80212f35:	0f 84 95 17 00 00    	je     ffffffff802146d0 <_RME_Svc_Handler+0x3740>
ffffffff80212f3b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212f3f:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80212f43:	0f 84 85 e6 ff ff    	je     ffffffff802115ce <_RME_Svc_Handler+0x63e>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80212f49:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80212f50:	e9 23 e6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80212f55:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212f58:	48 89 c2             	mov    %rax,%rdx
ffffffff80212f5b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80212f5f:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80212f62:	0f 86 6b 14 00 00    	jbe    ffffffff802143d3 <_RME_Svc_Handler+0x3443>
ffffffff80212f68:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212f6c:	48 01 ca             	add    %rcx,%rdx
ffffffff80212f6f:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80212f72:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212f75:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff80212f79:	66 83 fe 02          	cmp    $0x2,%si
ffffffff80212f7d:	0f 84 44 14 00 00    	je     ffffffff802143c7 <_RME_Svc_Handler+0x3437>
ffffffff80212f83:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212f87:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212f8b:	0f 85 2a 14 00 00    	jne    ffffffff802143bb <_RME_Svc_Handler+0x342b>
ffffffff80212f91:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80212f95:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212f9a:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212f9d:	0f 83 0c 14 00 00    	jae    ffffffff802143af <_RME_Svc_Handler+0x341f>
ffffffff80212fa3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212fa7:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80212fab:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212fae:	48 89 d1             	mov    %rdx,%rcx
ffffffff80212fb1:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80212fb5:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80212fb9:	0f 84 e4 13 00 00    	je     ffffffff802143a3 <_RME_Svc_Handler+0x3413>
ffffffff80212fbf:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212fc3:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212fc7:	0f 84 a6 f8 ff ff    	je     ffffffff80212873 <_RME_Svc_Handler+0x18e3>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80212fcd:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80212fd4:	e9 9f e5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80212fd9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212fe0:	48 89 c2             	mov    %rax,%rdx
ffffffff80212fe3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80212fe7:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80212fea:	0f 86 a7 16 00 00    	jbe    ffffffff80214697 <_RME_Svc_Handler+0x3707>
ffffffff80212ff0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212ff4:	48 01 ca             	add    %rcx,%rdx
ffffffff80212ff7:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80212ffa:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212ffd:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff80213001:	66 83 fe 02          	cmp    $0x2,%si
ffffffff80213005:	0f 84 80 16 00 00    	je     ffffffff8021468b <_RME_Svc_Handler+0x36fb>
ffffffff8021300b:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021300f:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213013:	0f 85 66 16 00 00    	jne    ffffffff8021467f <_RME_Svc_Handler+0x36ef>
ffffffff80213019:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8021301d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213022:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213025:	0f 83 48 16 00 00    	jae    ffffffff80214673 <_RME_Svc_Handler+0x36e3>
ffffffff8021302b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021302f:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213033:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213036:	48 89 d1             	mov    %rdx,%rcx
ffffffff80213039:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8021303d:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80213041:	0f 84 99 0a 00 00    	je     ffffffff80213ae0 <_RME_Svc_Handler+0x2b50>
ffffffff80213047:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021304b:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021304f:	0f 84 f8 ee ff ff    	je     ffffffff80211f4d <_RME_Svc_Handler+0xfbd>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213055:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021305c:	e9 17 e5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213061:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff80213068:	48 89 f2             	mov    %rsi,%rdx
ffffffff8021306b:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021306f:	49 39 d1             	cmp    %rdx,%r9
ffffffff80213072:	0f 86 f7 11 00 00    	jbe    ffffffff8021426f <_RME_Svc_Handler+0x32df>
ffffffff80213078:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021307c:	4c 01 c2             	add    %r8,%rdx
ffffffff8021307f:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80213082:	48 89 cf             	mov    %rcx,%rdi
ffffffff80213085:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff80213089:	66 83 ff 02          	cmp    $0x2,%di
ffffffff8021308d:	0f 84 d0 11 00 00    	je     ffffffff80214263 <_RME_Svc_Handler+0x32d3>
ffffffff80213093:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213097:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021309b:	0f 85 b6 11 00 00    	jne    ffffffff80214257 <_RME_Svc_Handler+0x32c7>
ffffffff802130a1:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff802130a5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802130aa:	48 39 c8             	cmp    %rcx,%rax
ffffffff802130ad:	0f 83 98 11 00 00    	jae    ffffffff8021424b <_RME_Svc_Handler+0x32bb>
ffffffff802130b3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802130b7:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802130bb:	48 89 c7             	mov    %rax,%rdi
ffffffff802130be:	48 8b 00             	mov    (%rax),%rax
ffffffff802130c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802130c4:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802130c8:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff802130cc:	0f 84 6d 11 00 00    	je     ffffffff8021423f <_RME_Svc_Handler+0x32af>
ffffffff802130d2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802130d6:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802130da:	0f 84 06 e9 ff ff    	je     ffffffff802119e6 <_RME_Svc_Handler+0xa56>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802130e0:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802130e7:	e9 8c e4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802130ec:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802130f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802130f3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802130f7:	48 39 d6             	cmp    %rdx,%rsi
ffffffff802130fa:	0f 86 90 16 00 00    	jbe    ffffffff80214790 <_RME_Svc_Handler+0x3800>
ffffffff80213100:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213104:	48 01 ca             	add    %rcx,%rdx
ffffffff80213107:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8021310a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021310d:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff80213111:	66 83 fe 02          	cmp    $0x2,%si
ffffffff80213115:	0f 84 69 16 00 00    	je     ffffffff80214784 <_RME_Svc_Handler+0x37f4>
ffffffff8021311b:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021311f:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213123:	0f 85 4f 16 00 00    	jne    ffffffff80214778 <_RME_Svc_Handler+0x37e8>
ffffffff80213129:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8021312d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213132:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213135:	0f 83 31 16 00 00    	jae    ffffffff8021476c <_RME_Svc_Handler+0x37dc>
ffffffff8021313b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021313f:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213143:	48 89 c2             	mov    %rax,%rdx
ffffffff80213146:	48 8b 00             	mov    (%rax),%rax
ffffffff80213149:	48 89 c1             	mov    %rax,%rcx
ffffffff8021314c:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80213150:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80213154:	0f 84 06 16 00 00    	je     ffffffff80214760 <_RME_Svc_Handler+0x37d0>
ffffffff8021315a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021315e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213162:	0f 84 5a e6 ff ff    	je     ffffffff802117c2 <_RME_Svc_Handler+0x832>
ffffffff80213168:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021316f:	e9 04 e4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213174:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff80213178:	48 89 c2             	mov    %rax,%rdx
ffffffff8021317b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021317f:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80213182:	0f 86 ab 12 00 00    	jbe    ffffffff80214433 <_RME_Svc_Handler+0x34a3>
ffffffff80213188:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021318c:	48 01 ca             	add    %rcx,%rdx
ffffffff8021318f:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80213192:	48 89 ce             	mov    %rcx,%rsi
ffffffff80213195:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff80213199:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8021319d:	0f 84 84 12 00 00    	je     ffffffff80214427 <_RME_Svc_Handler+0x3497>
ffffffff802131a3:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802131a7:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802131ab:	0f 85 6a 12 00 00    	jne    ffffffff8021441b <_RME_Svc_Handler+0x348b>
ffffffff802131b1:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff802131b5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802131ba:	48 39 c8             	cmp    %rcx,%rax
ffffffff802131bd:	0f 83 4c 12 00 00    	jae    ffffffff8021440f <_RME_Svc_Handler+0x347f>
ffffffff802131c3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802131c7:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802131cb:	48 8b 10             	mov    (%rax),%rdx
ffffffff802131ce:	48 89 d1             	mov    %rdx,%rcx
ffffffff802131d1:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff802131d5:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff802131d9:	0f 84 24 12 00 00    	je     ffffffff80214403 <_RME_Svc_Handler+0x3473>
ffffffff802131df:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802131e3:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802131e7:	0f 84 73 f4 ff ff    	je     ffffffff80212660 <_RME_Svc_Handler+0x16d0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802131ed:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802131f4:	e9 7f e3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802131f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213200:	48 89 c2             	mov    %rax,%rdx
ffffffff80213203:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213207:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8021320a:	0f 86 57 14 00 00    	jbe    ffffffff80214667 <_RME_Svc_Handler+0x36d7>
ffffffff80213210:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213214:	48 01 ca             	add    %rcx,%rdx
ffffffff80213217:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8021321a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021321d:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff80213221:	66 83 fe 02          	cmp    $0x2,%si
ffffffff80213225:	0f 84 30 14 00 00    	je     ffffffff8021465b <_RME_Svc_Handler+0x36cb>
ffffffff8021322b:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021322f:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213233:	0f 85 16 14 00 00    	jne    ffffffff8021464f <_RME_Svc_Handler+0x36bf>
ffffffff80213239:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8021323d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213242:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213245:	0f 83 f8 13 00 00    	jae    ffffffff80214643 <_RME_Svc_Handler+0x36b3>
ffffffff8021324b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021324f:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213253:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213256:	48 89 d1             	mov    %rdx,%rcx
ffffffff80213259:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8021325d:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80213261:	0f 84 d0 13 00 00    	je     ffffffff80214637 <_RME_Svc_Handler+0x36a7>
ffffffff80213267:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021326b:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021326f:	0f 84 90 e6 ff ff    	je     ffffffff80211905 <_RME_Svc_Handler+0x975>
ffffffff80213275:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021327c:	e9 f7 e2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213281:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff80213288:	48 89 c2             	mov    %rax,%rdx
ffffffff8021328b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021328f:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80213292:	0f 86 fb 11 00 00    	jbe    ffffffff80214493 <_RME_Svc_Handler+0x3503>
ffffffff80213298:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021329c:	48 01 ca             	add    %rcx,%rdx
ffffffff8021329f:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff802132a2:	48 89 ce             	mov    %rcx,%rsi
ffffffff802132a5:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff802132a9:	66 83 fe 02          	cmp    $0x2,%si
ffffffff802132ad:	0f 84 d4 11 00 00    	je     ffffffff80214487 <_RME_Svc_Handler+0x34f7>
ffffffff802132b3:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802132b7:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802132bb:	0f 85 ba 11 00 00    	jne    ffffffff8021447b <_RME_Svc_Handler+0x34eb>
ffffffff802132c1:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff802132c5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802132ca:	48 39 c8             	cmp    %rcx,%rax
ffffffff802132cd:	0f 83 9c 11 00 00    	jae    ffffffff8021446f <_RME_Svc_Handler+0x34df>
ffffffff802132d3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802132d7:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802132db:	48 89 c7             	mov    %rax,%rdi
ffffffff802132de:	48 8b 00             	mov    (%rax),%rax
ffffffff802132e1:	48 89 c2             	mov    %rax,%rdx
ffffffff802132e4:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802132e8:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff802132ec:	0f 84 71 11 00 00    	je     ffffffff80214463 <_RME_Svc_Handler+0x34d3>
ffffffff802132f2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802132f6:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802132fa:	0f 84 01 ea ff ff    	je     ffffffff80211d01 <_RME_Svc_Handler+0xd71>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213300:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213307:	e9 6c e2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021330c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80213310:	48 89 c1             	mov    %rax,%rcx
ffffffff80213313:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80213317:	48 39 cf             	cmp    %rcx,%rdi
ffffffff8021331a:	0f 86 28 14 00 00    	jbe    ffffffff80214748 <_RME_Svc_Handler+0x37b8>
ffffffff80213320:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80213324:	48 01 f1             	add    %rsi,%rcx
ffffffff80213327:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8021332a:	48 89 f7             	mov    %rsi,%rdi
ffffffff8021332d:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff80213331:	66 83 ff 02          	cmp    $0x2,%di
ffffffff80213335:	0f 84 01 14 00 00    	je     ffffffff8021473c <_RME_Svc_Handler+0x37ac>
ffffffff8021333b:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021333f:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213343:	0f 85 e7 13 00 00    	jne    ffffffff80214730 <_RME_Svc_Handler+0x37a0>
ffffffff80213349:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8021334d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213352:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213355:	0f 83 c9 13 00 00    	jae    ffffffff80214724 <_RME_Svc_Handler+0x3794>
ffffffff8021335b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021335f:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80213363:	48 8b 08             	mov    (%rax),%rcx
ffffffff80213366:	48 89 ce             	mov    %rcx,%rsi
ffffffff80213369:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8021336d:	66 83 fe 02          	cmp    $0x2,%si
ffffffff80213371:	0f 84 a1 13 00 00    	je     ffffffff80214718 <_RME_Svc_Handler+0x3788>
ffffffff80213377:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021337b:	48 83 f9 07          	cmp    $0x7,%rcx
ffffffff8021337f:	0f 84 64 f2 ff ff    	je     ffffffff802125e9 <_RME_Svc_Handler+0x1659>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213385:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021338c:	e9 e7 e1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213391:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff80213398:	48 89 c2             	mov    %rax,%rdx
ffffffff8021339b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021339f:	48 39 d6             	cmp    %rdx,%rsi
ffffffff802133a2:	0f 86 54 0f 00 00    	jbe    ffffffff802142fc <_RME_Svc_Handler+0x336c>
ffffffff802133a8:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802133ac:	48 01 ca             	add    %rcx,%rdx
ffffffff802133af:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff802133b2:	49 89 f8             	mov    %rdi,%r8
ffffffff802133b5:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff802133b9:	66 41 83 f8 02       	cmp    $0x2,%r8w
ffffffff802133be:	0f 84 2c 0f 00 00    	je     ffffffff802142f0 <_RME_Svc_Handler+0x3360>
ffffffff802133c4:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff802133c8:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff802133cc:	0f 85 12 0f 00 00    	jne    ffffffff802142e4 <_RME_Svc_Handler+0x3354>
ffffffff802133d2:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff802133d6:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802133db:	48 39 f8             	cmp    %rdi,%rax
ffffffff802133de:	0f 83 f4 0e 00 00    	jae    ffffffff802142d8 <_RME_Svc_Handler+0x3348>
ffffffff802133e4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802133e8:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802133ec:	48 89 c3             	mov    %rax,%rbx
ffffffff802133ef:	48 8b 00             	mov    (%rax),%rax
ffffffff802133f2:	48 89 c2             	mov    %rax,%rdx
ffffffff802133f5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802133f9:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff802133fd:	0f 84 c9 0e 00 00    	je     ffffffff802142cc <_RME_Svc_Handler+0x333c>
ffffffff80213403:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213407:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021340b:	0f 84 2b f3 ff ff    	je     ffffffff8021273c <_RME_Svc_Handler+0x17ac>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213411:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213418:	e9 5b e1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PTH_INVSTATE;
ffffffff8021341d:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213424:	e9 4f e1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PTH_INVSTATE;
ffffffff80213429:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff80213430:	e9 43 e1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff80213435:	48 89 c2             	mov    %rax,%rdx
ffffffff80213438:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021343c:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8021343f:	0f 86 14 0a 00 00    	jbe    ffffffff80213e59 <_RME_Svc_Handler+0x2ec9>
ffffffff80213445:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213449:	48 01 ca             	add    %rcx,%rdx
ffffffff8021344c:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8021344f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80213452:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff80213456:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8021345a:	0f 84 ed 09 00 00    	je     ffffffff80213e4d <_RME_Svc_Handler+0x2ebd>
ffffffff80213460:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213464:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213468:	0f 85 d3 09 00 00    	jne    ffffffff80213e41 <_RME_Svc_Handler+0x2eb1>
ffffffff8021346e:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80213472:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213477:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021347a:	0f 83 b5 09 00 00    	jae    ffffffff80213e35 <_RME_Svc_Handler+0x2ea5>
ffffffff80213480:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213484:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213488:	49 89 c4             	mov    %rax,%r12
ffffffff8021348b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021348e:	48 89 c2             	mov    %rax,%rdx
ffffffff80213491:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80213495:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff80213499:	0f 84 8a 09 00 00    	je     ffffffff80213e29 <_RME_Svc_Handler+0x2e99>
ffffffff8021349f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802134a3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802134a7:	0f 84 d1 f2 ff ff    	je     ffffffff8021277e <_RME_Svc_Handler+0x17ee>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802134ad:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802134b4:	e9 bf e0 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff802134b9:	4c 89 c1             	mov    %r8,%rcx
ffffffff802134bc:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802134c0:	48 39 cf             	cmp    %rcx,%rdi
ffffffff802134c3:	0f 86 d4 0a 00 00    	jbe    ffffffff80213f9d <_RME_Svc_Handler+0x300d>
ffffffff802134c9:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802134cd:	48 01 f1             	add    %rsi,%rcx
ffffffff802134d0:	4c 8b 09             	mov    (%rcx),%r9
ffffffff802134d3:	4d 89 ca             	mov    %r9,%r10
ffffffff802134d6:	49 c1 ea 20          	shr    $0x20,%r10
ffffffff802134da:	66 41 83 fa 02       	cmp    $0x2,%r10w
ffffffff802134df:	0f 84 ac 0a 00 00    	je     ffffffff80213f91 <_RME_Svc_Handler+0x3001>
ffffffff802134e5:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff802134e9:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff802134ed:	0f 85 92 0a 00 00    	jne    ffffffff80213f85 <_RME_Svc_Handler+0x2ff5>
ffffffff802134f3:	4c 8b 49 28          	mov    0x28(%rcx),%r9
ffffffff802134f7:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff802134fd:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80213500:	0f 83 73 0a 00 00    	jae    ffffffff80213f79 <_RME_Svc_Handler+0x2fe9>
ffffffff80213506:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021350a:	48 03 51 18          	add    0x18(%rcx),%rdx
ffffffff8021350e:	49 89 d4             	mov    %rdx,%r12
ffffffff80213511:	48 8b 12             	mov    (%rdx),%rdx
ffffffff80213514:	48 89 d1             	mov    %rdx,%rcx
ffffffff80213517:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8021351b:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff8021351f:	0f 84 48 0a 00 00    	je     ffffffff80213f6d <_RME_Svc_Handler+0x2fdd>
ffffffff80213525:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213529:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8021352d:	0f 84 53 eb ff ff    	je     ffffffff80212086 <_RME_Svc_Handler+0x10f6>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213533:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021353a:	e9 39 e0 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff8021353f:	4c 89 c1             	mov    %r8,%rcx
ffffffff80213542:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213546:	48 39 cf             	cmp    %rcx,%rdi
ffffffff80213549:	0f 86 32 0b 00 00    	jbe    ffffffff80214081 <_RME_Svc_Handler+0x30f1>
ffffffff8021354f:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80213553:	48 01 f1             	add    %rsi,%rcx
ffffffff80213556:	48 8b 31             	mov    (%rcx),%rsi
ffffffff80213559:	48 89 f7             	mov    %rsi,%rdi
ffffffff8021355c:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff80213560:	66 83 ff 02          	cmp    $0x2,%di
ffffffff80213564:	0f 84 0b 0b 00 00    	je     ffffffff80214075 <_RME_Svc_Handler+0x30e5>
ffffffff8021356a:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021356e:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213572:	0f 85 f1 0a 00 00    	jne    ffffffff80214069 <_RME_Svc_Handler+0x30d9>
ffffffff80213578:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8021357c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213581:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213584:	0f 83 d3 0a 00 00    	jae    ffffffff8021405d <_RME_Svc_Handler+0x30cd>
ffffffff8021358a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021358e:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80213592:	48 89 c7             	mov    %rax,%rdi
ffffffff80213595:	48 8b 00             	mov    (%rax),%rax
ffffffff80213598:	48 89 c1             	mov    %rax,%rcx
ffffffff8021359b:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8021359f:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff802135a3:	0f 84 a8 0a 00 00    	je     ffffffff80214051 <_RME_Svc_Handler+0x30c1>
ffffffff802135a9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802135ad:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802135b1:	0f 84 35 e8 ff ff    	je     ffffffff80211dec <_RME_Svc_Handler+0xe5c>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff802135b7:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802135be:	e9 b5 df ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802135c3:	48 89 d7             	mov    %rdx,%rdi
ffffffff802135c6:	48 c1 ef 10          	shr    $0x10,%rdi
ffffffff802135ca:	48 39 fe             	cmp    %rdi,%rsi
ffffffff802135cd:	0f 86 4e 0a 00 00    	jbe    ffffffff80214021 <_RME_Svc_Handler+0x3091>
ffffffff802135d3:	48 c1 e7 06          	shl    $0x6,%rdi
ffffffff802135d7:	48 01 cf             	add    %rcx,%rdi
ffffffff802135da:	4c 8b 07             	mov    (%rdi),%r8
ffffffff802135dd:	4d 89 c1             	mov    %r8,%r9
ffffffff802135e0:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff802135e4:	66 41 83 f9 02       	cmp    $0x2,%r9w
ffffffff802135e9:	0f 84 26 0a 00 00    	je     ffffffff80214015 <_RME_Svc_Handler+0x3085>
ffffffff802135ef:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff802135f3:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff802135f7:	0f 85 0c 0a 00 00    	jne    ffffffff80214009 <_RME_Svc_Handler+0x3079>
ffffffff802135fd:	4c 8b 47 28          	mov    0x28(%rdi),%r8
ffffffff80213601:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff80213607:	4c 39 c2             	cmp    %r8,%rdx
ffffffff8021360a:	0f 83 ed 09 00 00    	jae    ffffffff80213ffd <_RME_Svc_Handler+0x306d>
ffffffff80213610:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213614:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff80213618:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021361b:	48 8b 12             	mov    (%rdx),%rdx
ffffffff8021361e:	49 89 d0             	mov    %rdx,%r8
ffffffff80213621:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80213625:	66 41 83 f8 02       	cmp    $0x2,%r8w
ffffffff8021362a:	0f 84 c1 09 00 00    	je     ffffffff80213ff1 <_RME_Svc_Handler+0x3061>
ffffffff80213630:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213634:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213638:	0f 84 3b ed ff ff    	je     ffffffff80212379 <_RME_Svc_Handler+0x13e9>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff8021363e:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213645:	e9 2e df ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8021364a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021364d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213651:	48 39 d7             	cmp    %rdx,%rdi
ffffffff80213654:	0f 86 e7 0a 00 00    	jbe    ffffffff80214141 <_RME_Svc_Handler+0x31b1>
ffffffff8021365a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021365e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213661:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80213664:	48 89 ce             	mov    %rcx,%rsi
ffffffff80213667:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8021366b:	66 83 fe 02          	cmp    $0x2,%si
ffffffff8021366f:	0f 84 c0 0a 00 00    	je     ffffffff80214135 <_RME_Svc_Handler+0x31a5>
ffffffff80213675:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213679:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021367d:	0f 85 a6 0a 00 00    	jne    ffffffff80214129 <_RME_Svc_Handler+0x3199>
ffffffff80213683:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80213687:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021368c:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021368f:	0f 83 88 0a 00 00    	jae    ffffffff8021411d <_RME_Svc_Handler+0x318d>
ffffffff80213695:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213699:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021369d:	49 89 c4             	mov    %rax,%r12
ffffffff802136a0:	48 8b 00             	mov    (%rax),%rax
ffffffff802136a3:	48 89 c2             	mov    %rax,%rdx
ffffffff802136a6:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802136aa:	66 83 fa 02          	cmp    $0x2,%dx
ffffffff802136ae:	0f 84 5d 0a 00 00    	je     ffffffff80214111 <_RME_Svc_Handler+0x3181>
ffffffff802136b4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802136b8:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802136bc:	0f 84 46 e5 ff ff    	je     ffffffff80211c08 <_RME_Svc_Handler+0xc78>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802136c2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802136c9:	e9 aa de ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802136ce:	48 89 c2             	mov    %rax,%rdx
ffffffff802136d1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802136d5:	48 39 d7             	cmp    %rdx,%rdi
ffffffff802136d8:	0f 86 03 0a 00 00    	jbe    ffffffff802140e1 <_RME_Svc_Handler+0x3151>
ffffffff802136de:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802136e2:	48 01 f2             	add    %rsi,%rdx
ffffffff802136e5:	48 8b 32             	mov    (%rdx),%rsi
ffffffff802136e8:	48 89 f7             	mov    %rsi,%rdi
ffffffff802136eb:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff802136ef:	66 83 ff 02          	cmp    $0x2,%di
ffffffff802136f3:	0f 84 dc 09 00 00    	je     ffffffff802140d5 <_RME_Svc_Handler+0x3145>
ffffffff802136f9:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802136fd:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213701:	0f 85 c2 09 00 00    	jne    ffffffff802140c9 <_RME_Svc_Handler+0x3139>
ffffffff80213707:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff8021370b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213710:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213713:	0f 83 a4 09 00 00    	jae    ffffffff802140bd <_RME_Svc_Handler+0x312d>
ffffffff80213719:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021371d:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213721:	48 89 c2             	mov    %rax,%rdx
ffffffff80213724:	48 8b 00             	mov    (%rax),%rax
ffffffff80213727:	48 89 c6             	mov    %rax,%rsi
ffffffff8021372a:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8021372e:	66 83 fe 02          	cmp    $0x2,%si
ffffffff80213732:	0f 84 79 09 00 00    	je     ffffffff802140b1 <_RME_Svc_Handler+0x3121>
ffffffff80213738:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021373c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213740:	0f 84 c9 de ff ff    	je     ffffffff8021160f <_RME_Svc_Handler+0x67f>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213746:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021374d:	e9 26 de ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80213752:	48 89 c2             	mov    %rax,%rdx
ffffffff80213755:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213759:	48 39 d7             	cmp    %rdx,%rdi
ffffffff8021375c:	0f 86 3f 0a 00 00    	jbe    ffffffff802141a1 <_RME_Svc_Handler+0x3211>
ffffffff80213762:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213766:	48 01 f2             	add    %rsi,%rdx
ffffffff80213769:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8021376c:	48 89 f7             	mov    %rsi,%rdi
ffffffff8021376f:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff80213773:	66 83 ff 02          	cmp    $0x2,%di
ffffffff80213777:	0f 84 18 0a 00 00    	je     ffffffff80214195 <_RME_Svc_Handler+0x3205>
ffffffff8021377d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213781:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213785:	0f 85 fe 09 00 00    	jne    ffffffff80214189 <_RME_Svc_Handler+0x31f9>
ffffffff8021378b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff8021378f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213794:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213797:	0f 83 e0 09 00 00    	jae    ffffffff8021417d <_RME_Svc_Handler+0x31ed>
ffffffff8021379d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802137a1:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802137a5:	48 89 c2             	mov    %rax,%rdx
ffffffff802137a8:	48 8b 00             	mov    (%rax),%rax
ffffffff802137ab:	48 89 c6             	mov    %rax,%rsi
ffffffff802137ae:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff802137b2:	66 83 fe 02          	cmp    $0x2,%si
ffffffff802137b6:	0f 84 b5 09 00 00    	je     ffffffff80214171 <_RME_Svc_Handler+0x31e1>
ffffffff802137bc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802137c0:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802137c4:	0f 84 d5 ea ff ff    	je     ffffffff8021229f <_RME_Svc_Handler+0x130f>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802137ca:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802137d1:	e9 a2 dd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff802137d6:	48 89 c1             	mov    %rax,%rcx
ffffffff802137d9:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802137dd:	49 39 c9             	cmp    %rcx,%r9
ffffffff802137e0:	0f 86 3a 05 00 00    	jbe    ffffffff80213d20 <_RME_Svc_Handler+0x2d90>
ffffffff802137e6:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802137ea:	4c 01 c1             	add    %r8,%rcx
ffffffff802137ed:	4c 8b 01             	mov    (%rcx),%r8
ffffffff802137f0:	4d 89 c1             	mov    %r8,%r9
ffffffff802137f3:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff802137f7:	66 41 83 f9 02       	cmp    $0x2,%r9w
ffffffff802137fc:	0f 84 12 05 00 00    	je     ffffffff80213d14 <_RME_Svc_Handler+0x2d84>
ffffffff80213802:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff80213806:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff8021380a:	0f 85 f8 04 00 00    	jne    ffffffff80213d08 <_RME_Svc_Handler+0x2d78>
ffffffff80213810:	4c 8b 41 28          	mov    0x28(%rcx),%r8
ffffffff80213814:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021381a:	4c 39 c2             	cmp    %r8,%rdx
ffffffff8021381d:	0f 83 d9 04 00 00    	jae    ffffffff80213cfc <_RME_Svc_Handler+0x2d6c>
ffffffff80213823:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213827:	48 03 51 18          	add    0x18(%rcx),%rdx
ffffffff8021382b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021382e:	48 8b 12             	mov    (%rdx),%rdx
ffffffff80213831:	49 89 d0             	mov    %rdx,%r8
ffffffff80213834:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80213838:	66 41 83 f8 02       	cmp    $0x2,%r8w
ffffffff8021383d:	0f 84 ad 04 00 00    	je     ffffffff80213cf0 <_RME_Svc_Handler+0x2d60>
ffffffff80213843:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213847:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021384b:	0f 84 de e1 ff ff    	je     ffffffff80211a2f <_RME_Svc_Handler+0xa9f>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213851:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213858:	e9 1b dd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8021385d:	49 89 d0             	mov    %rdx,%r8
ffffffff80213860:	49 c1 e8 10          	shr    $0x10,%r8
ffffffff80213864:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80213867:	0f 86 6f 03 00 00    	jbe    ffffffff80213bdc <_RME_Svc_Handler+0x2c4c>
ffffffff8021386d:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff80213871:	4c 01 c1             	add    %r8,%rcx
ffffffff80213874:	48 8b 31             	mov    (%rcx),%rsi
ffffffff80213877:	49 89 f0             	mov    %rsi,%r8
ffffffff8021387a:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff8021387e:	66 41 83 f8 02       	cmp    $0x2,%r8w
ffffffff80213883:	0f 84 e3 11 00 00    	je     ffffffff80214a6c <_RME_Svc_Handler+0x3adc>
ffffffff80213889:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021388d:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213891:	0f 85 11 12 00 00    	jne    ffffffff80214aa8 <_RME_Svc_Handler+0x3b18>
ffffffff80213897:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8021389b:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff802138a1:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802138a4:	0f 83 f2 11 00 00    	jae    ffffffff80214a9c <_RME_Svc_Handler+0x3b0c>
ffffffff802138aa:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802138ae:	48 03 51 18          	add    0x18(%rcx),%rdx
ffffffff802138b2:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff802138b5:	48 89 ce             	mov    %rcx,%rsi
ffffffff802138b8:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff802138bc:	66 83 fe 02          	cmp    $0x2,%si
ffffffff802138c0:	0f 84 ca 11 00 00    	je     ffffffff80214a90 <_RME_Svc_Handler+0x3b00>
ffffffff802138c6:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802138ca:	48 83 f9 04          	cmp    $0x4,%rcx
ffffffff802138ce:	0f 84 e5 ea ff ff    	je     ffffffff802123b9 <_RME_Svc_Handler+0x1429>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802138d4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802138db:	e9 98 dc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PTH_REFCNT;
ffffffff802138e0:	48 c7 c6 32 ff ff ff 	mov    $0xffffffffffffff32,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802138e7:	e9 8c dc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802138ec:	31 c9                	xor    %ecx,%ecx
ffffffff802138ee:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802138f3:	0f 94 c1             	sete   %cl
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff802138f6:	80 f9 01             	cmp    $0x1,%cl
ffffffff802138f9:	48 19 f6             	sbb    %rsi,%rsi
ffffffff802138fc:	e9 77 dc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        Paddr_Dst=Paddr_Src;
ffffffff80213901:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80213906:	e9 d4 e5 ff ff       	jmp    ffffffff80211edf <_RME_Svc_Handler+0xf4f>
    Object=RME_CAP_GETOBJ(Cpt_Del,rme_ptr_t);
ffffffff8021390b:	48 8b 7e 18          	mov    0x18(%rsi),%rdi
    Size=RME_CPT_SIZE(Cpt_Del->Entry_Num);
ffffffff8021390f:	4c 8b 46 28          	mov    0x28(%rsi),%r8
ffffffff80213913:	31 d2                	xor    %edx,%edx
ffffffff80213915:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff80213919:	f0 48 0f b1 16       	lock cmpxchg %rdx,(%rsi)
ffffffff8021391e:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Cpt_Del,Type_Stat);
ffffffff80213921:	84 d2                	test   %dl,%dl
ffffffff80213923:	0f 84 6e 10 00 00    	je     ffffffff80214997 <_RME_Svc_Handler+0x3a07>
    RME_ASSERT(_RME_Kot_Erase(Object,Size)==0);
ffffffff80213929:	4c 89 c6             	mov    %r8,%rsi
ffffffff8021392c:	e8 5f b7 ff ff       	call   ffffffff8020f090 <_RME_Kot_Erase>
    return 0;
ffffffff80213931:	31 f6                	xor    %esi,%esi
ffffffff80213933:	e9 40 dc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff80213938:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff8021393d:	e8 4e b7 ff ff       	call   ffffffff8020f090 <_RME_Kot_Erase>
    return 0;
ffffffff80213942:	31 f6                	xor    %esi,%esi
ffffffff80213944:	e9 2f dc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PTH_HADDR;
ffffffff80213949:	48 c7 c6 35 ff ff ff 	mov    $0xffffffffffffff35,%rsi
ffffffff80213950:	e9 23 dc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80213955:	48 89 ca             	mov    %rcx,%rdx
ffffffff80213958:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021395c:	48 39 d7             	cmp    %rdx,%rdi
ffffffff8021395f:	0f 86 e3 10 00 00    	jbe    ffffffff80214a48 <_RME_Svc_Handler+0x3ab8>
ffffffff80213965:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213969:	48 01 f2             	add    %rsi,%rdx
ffffffff8021396c:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8021396f:	48 89 f7             	mov    %rsi,%rdi
ffffffff80213972:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff80213976:	66 83 ff 02          	cmp    $0x2,%di
ffffffff8021397a:	0f 84 bc 10 00 00    	je     ffffffff80214a3c <_RME_Svc_Handler+0x3aac>
ffffffff80213980:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213984:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213988:	0f 85 a2 10 00 00    	jne    ffffffff80214a30 <_RME_Svc_Handler+0x3aa0>
ffffffff8021398e:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213992:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff80213998:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021399b:	0f 83 83 10 00 00    	jae    ffffffff80214a24 <_RME_Svc_Handler+0x3a94>
ffffffff802139a1:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802139a5:	48 03 4a 18          	add    0x18(%rdx),%rcx
ffffffff802139a9:	48 8b 11             	mov    (%rcx),%rdx
ffffffff802139ac:	48 89 cb             	mov    %rcx,%rbx
ffffffff802139af:	48 89 d1             	mov    %rdx,%rcx
ffffffff802139b2:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff802139b6:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff802139ba:	0f 84 b8 10 00 00    	je     ffffffff80214a78 <_RME_Svc_Handler+0x3ae8>
ffffffff802139c0:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802139c4:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff802139c8:	0f 84 24 e7 ff ff    	je     ffffffff802120f2 <_RME_Svc_Handler+0x1162>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802139ce:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802139d5:	e9 9e db ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        Sig_Op=RME_NULL;
ffffffff802139da:	31 db                	xor    %ebx,%ebx
ffffffff802139dc:	e9 1b e7 ff ff       	jmp    ffffffff802120fc <_RME_Svc_Handler+0x116c>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff802139e1:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802139e8:	e9 8b db ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff802139ed:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802139f4:	e9 7f db ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff802139f9:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213a00:	e9 73 db ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_FRZ);
ffffffff80213a05:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213a0c:	e9 67 db ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_REM);
ffffffff80213a11:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213a18:	e9 5b db ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80213a1d:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213a24:	e9 4f db ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff80213a29:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213a30:	e9 43 db ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff80213a35:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213a3c:	e9 37 db ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80213a41:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213a48:	e9 2b db ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        Capobj_Dst->Head.Root_Ref=0U;
ffffffff80213a4d:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
ffffffff80213a54:	00 
ffffffff80213a55:	e9 02 e1 ff ff       	jmp    ffffffff80211b5c <_RME_Svc_Handler+0xbcc>
        if(RME_PGT_FLAG_HIGH(Flag)>RME_PGT_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff80213a5a:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff80213a5e:	4d 89 c3             	mov    %r8,%r11
ffffffff80213a61:	49 c1 eb 24          	shr    $0x24,%r11
ffffffff80213a65:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff80213a69:	49 39 c3             	cmp    %rax,%r11
ffffffff80213a6c:	0f 87 ba 0d 00 00    	ja     ffffffff8021482c <_RME_Svc_Handler+0x389c>
        if(RME_PGT_FLAG_LOW(Flag)<RME_PGT_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff80213a72:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff80213a76:	4c 89 c1             	mov    %r8,%rcx
ffffffff80213a79:	48 c1 e9 08          	shr    $0x8,%rcx
ffffffff80213a7d:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80213a81:	81 e1 ff ff ff 0f    	and    $0xfffffff,%ecx
ffffffff80213a87:	25 ff ff ff 0f       	and    $0xfffffff,%eax
        if(RME_PGT_FLAG_HIGH(Flag)<RME_PGT_FLAG_LOW(Flag))
ffffffff80213a8c:	48 39 c1             	cmp    %rax,%rcx
ffffffff80213a8f:	0f 82 8b 0d 00 00    	jb     ffffffff80214820 <_RME_Svc_Handler+0x3890>
ffffffff80213a95:	49 39 cb             	cmp    %rcx,%r11
ffffffff80213a98:	0f 82 82 0d 00 00    	jb     ffffffff80214820 <_RME_Svc_Handler+0x3890>
        if(RME_PGT_FLAG_FLAG(Flag)==0U)
ffffffff80213a9e:	45 84 c0             	test   %r8b,%r8b
ffffffff80213aa1:	0f 84 6d 0d 00 00    	je     ffffffff80214814 <_RME_Svc_Handler+0x3884>
        if((RME_PGT_FLAG_FLAG(Flag)&(~RME_PGT_FLAG_FLAG(Capobj_Src->Head.Flag)))!=0U)
ffffffff80213aa7:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff80213aab:	0f b6 c0             	movzbl %al,%eax
ffffffff80213aae:	48 f7 d0             	not    %rax
ffffffff80213ab1:	4c 21 c0             	and    %r8,%rax
ffffffff80213ab4:	84 c0                	test   %al,%al
ffffffff80213ab6:	0f 84 13 e0 ff ff    	je     ffffffff80211acf <_RME_Svc_Handler+0xb3f>
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff80213abc:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213ac3:	e9 b0 da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80213ac8:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213acf:	e9 a4 da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80213ad4:	48 c7 c6 fb ff ff ff 	mov    $0xfffffffffffffffb,%rsi
ffffffff80213adb:	e9 98 da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213ae0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213ae7:	e9 8c da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213aec:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213af3:	e9 80 da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213af8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213aff:	e9 74 da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213b04:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213b0b:	e9 68 da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213b10:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213b17:	e9 5c da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
ffffffff80213b1c:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213b23:	e9 50 da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213b28:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213b2f:	e9 44 da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213b34:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213b3b:	e9 38 da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213b40:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213b47:	e9 2c da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff80213b4c:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213b53:	e9 20 da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213b58:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213b5f:	e9 14 da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213b64:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213b6b:	e9 08 da ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213b70:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213b77:	e9 fc d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213b7c:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213b83:	e9 f0 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213b88:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213b8f:	e9 e4 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213b94:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213b9b:	e9 d8 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff80213ba0:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213ba7:	e9 cc d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213bac:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213bb3:	e9 c0 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213bb8:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213bbf:	e9 b4 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213bc4:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213bcb:	e9 a8 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213bd0:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213bd7:	e9 9c d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213bdc:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213be3:	e9 90 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213be8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213bef:	e9 84 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213bf4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213bfb:	e9 78 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213c00:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213c07:	e9 6c d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80213c0c:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213c13:	e9 60 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213c18:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213c1f:	e9 54 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213c24:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213c2b:	e9 48 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213c30:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213c37:	e9 3c d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213c3c:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213c43:	e9 30 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213c48:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213c4f:	e9 24 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_CPT);
ffffffff80213c54:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213c5b:	e9 18 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213c60:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213c67:	e9 0c d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213c6c:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213c73:	e9 00 d9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213c78:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213c7f:	e9 f4 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213c84:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213c8b:	e9 e8 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213c90:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213c97:	e9 dc d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213c9c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213ca3:	e9 d0 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213ca8:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213caf:	e9 c4 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213cb4:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213cbb:	e9 b8 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213cc0:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213cc7:	e9 ac d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213ccc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213cd3:	e9 a0 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213cd8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213cdf:	e9 94 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213ce4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213ceb:	e9 88 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213cf0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213cf7:	e9 7c d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213cfc:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213d03:	e9 70 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213d08:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213d0f:	e9 64 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213d14:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213d1b:	e9 58 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213d20:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213d27:	e9 4c d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
ffffffff80213d2c:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213d33:	e9 40 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213d38:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213d3f:	e9 34 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
ffffffff80213d44:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213d4b:	e9 28 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213d50:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213d57:	e9 1c d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213d5c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213d63:	e9 10 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213d68:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213d6f:	e9 04 d8 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213d74:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213d7b:	e9 f8 d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213d80:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213d87:	e9 ec d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213d8c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213d93:	e9 e0 d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213d98:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213d9f:	e9 d4 d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        Thread->Sched.Sched_Sig=0U;
ffffffff80213da4:	49 c7 47 70 00 00 00 	movq   $0x0,0x70(%r15)
ffffffff80213dab:	00 
ffffffff80213dac:	e9 fc e3 ff ff       	jmp    ffffffff802121ad <_RME_Svc_Handler+0x121d>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213db1:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213db8:	e9 bb d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213dbd:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213dc4:	e9 af d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213dc9:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213dd0:	e9 a3 d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213dd5:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213ddc:	e9 97 d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213de1:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213de8:	e9 8b d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213ded:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213df4:	e9 7f d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213df9:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213e00:	e9 73 d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e05:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213e0c:	e9 67 d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e11:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213e18:	e9 5b d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e1d:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213e24:	e9 4f d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e29:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213e30:	e9 43 d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e35:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213e3c:	e9 37 d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e41:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213e48:	e9 2b d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e4d:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213e54:	e9 1f d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e59:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213e60:	e9 13 d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e65:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213e6c:	e9 07 d7 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e71:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213e78:	e9 fb d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e7d:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213e84:	e9 ef d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e89:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213e90:	e9 e3 d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213e95:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213e9c:	e9 d7 d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213ea1:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213ea8:	e9 cb d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213ead:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213eb4:	e9 bf d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213eb9:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213ec0:	e9 b3 d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213ec5:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213ecc:	e9 a7 d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213ed1:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213ed8:	e9 9b d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213edd:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213ee4:	e9 8f d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213ee9:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213ef0:	e9 83 d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213ef5:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213efc:	e9 77 d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff80213f01:	48 c7 c6 f6 ff ff ff 	mov    $0xfffffffffffffff6,%rsi
ffffffff80213f08:	e9 6b d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff80213f0d:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213f14:	e9 5f d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213f19:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213f20:	e9 53 d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213f25:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213f2c:	e9 47 d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213f31:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213f38:	e9 3b d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213f3d:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213f44:	e9 2f d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213f49:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213f50:	e9 23 d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213f55:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213f5c:	e9 17 d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213f61:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213f68:	e9 0b d6 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213f6d:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213f74:	e9 ff d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213f79:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213f80:	e9 f3 d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213f85:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213f8c:	e9 e7 d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213f91:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213f98:	e9 db d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213f9d:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213fa4:	e9 cf d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff80213fa9:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213fb0:	e9 c3 d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213fb5:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213fbc:	e9 b7 d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213fc1:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213fc8:	e9 ab d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213fcd:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213fd4:	e9 9f d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213fd9:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213fe0:	e9 93 d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213fe5:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213fec:	e9 87 d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213ff1:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213ff8:	e9 7b d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80213ffd:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214004:	e9 6f d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214009:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214010:	e9 63 d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214015:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021401c:	e9 57 d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214021:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214028:	e9 4b d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021402d:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214034:	e9 3f d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214039:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214040:	e9 33 d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214045:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021404c:	e9 27 d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff80214051:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214058:	e9 1b d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021405d:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214064:	e9 0f d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214069:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214070:	e9 03 d5 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214075:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021407c:	e9 f7 d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214081:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214088:	e9 eb d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff8021408d:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214094:	e9 df d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214099:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802140a0:	e9 d3 d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802140a5:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802140ac:	e9 c7 d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802140b1:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802140b8:	e9 bb d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802140bd:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802140c4:	e9 af d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802140c9:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802140d0:	e9 a3 d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802140d5:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802140dc:	e9 97 d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802140e1:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802140e8:	e9 8b d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802140ed:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802140f4:	e9 7f d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802140f9:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214100:	e9 73 d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214105:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021410c:	e9 67 d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214111:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214118:	e9 5b d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021411d:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214124:	e9 4f d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214129:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214130:	e9 43 d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214135:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021413c:	e9 37 d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214141:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214148:	e9 2b d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021414d:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214154:	e9 1f d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214159:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214160:	e9 13 d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214165:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021416c:	e9 07 d4 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80214171:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214178:	e9 fb d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021417d:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214184:	e9 ef d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214189:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214190:	e9 e3 d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214195:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021419c:	e9 d7 d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802141a1:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802141a8:	e9 cb d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff802141ad:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
ffffffff802141b1:	e9 c2 d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802141b6:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802141bd:	e9 b6 d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802141c2:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802141c9:	e9 aa d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802141ce:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802141d5:	e9 9e d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff802141da:	85 c0                	test   %eax,%eax
ffffffff802141dc:	0f 85 a1 06 00 00    	jne    ffffffff80214883 <_RME_Svc_Handler+0x38f3>
ffffffff802141e2:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff802141e9:	00 ff ff 
ffffffff802141ec:	48 21 c2             	and    %rax,%rdx
ffffffff802141ef:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff802141f4:	0f 94 c2             	sete   %dl
ffffffff802141f7:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
	return (rme_ptr_t)Zero;
ffffffff802141fe:	e9 75 d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214203:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff8021420a:	e9 69 d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff8021420f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214216:	e9 5d d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021421b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214222:	e9 51 d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214227:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021422e:	e9 45 d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214233:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021423a:	e9 39 d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021423f:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214246:	e9 2d d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021424b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214252:	e9 21 d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214257:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021425e:	e9 15 d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214263:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021426a:	e9 09 d3 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021426f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214276:	e9 fd d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff8021427b:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214282:	e9 f1 d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80214287:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021428e:	e9 e5 d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214293:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021429a:	e9 d9 d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021429f:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802142a6:	e9 cd d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802142ab:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802142b2:	e9 c1 d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_CPT_QUIE;
ffffffff802142b7:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802142be:	e9 b5 d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_DELETE(Thd_Del,Type_Stat);
ffffffff802142c3:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
ffffffff802142c7:	e9 ac d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802142cc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802142d3:	e9 a0 d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802142d8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802142df:	e9 94 d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802142e4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802142eb:	e9 88 d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802142f0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802142f7:	e9 7c d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802142fc:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214303:	e9 70 d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80214308:	45 85 e4             	test   %r12d,%r12d
ffffffff8021430b:	0f 85 0e 06 00 00    	jne    ffffffff8021491f <_RME_Svc_Handler+0x398f>
ffffffff80214311:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff80214318:	00 ff ff 
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021431b:	4c 89 e0             	mov    %r12,%rax
ffffffff8021431e:	4c 21 e2             	and    %r12,%rdx
ffffffff80214321:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff80214326:	0f 94 c2             	sete   %dl
ffffffff80214329:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
	return (rme_ptr_t)Zero;
ffffffff80214330:	e9 43 d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214335:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff8021433c:	e9 37 d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_DELETE(Prc_Del,Type_Stat);
ffffffff80214341:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
ffffffff80214345:	e9 2e d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff8021434a:	85 c0                	test   %eax,%eax
ffffffff8021434c:	0f 85 7a 04 00 00    	jne    ffffffff802147cc <_RME_Svc_Handler+0x383c>
ffffffff80214352:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff80214359:	00 ff ff 
ffffffff8021435c:	48 21 c1             	and    %rax,%rcx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021435f:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80214364:	0f 94 c1             	sete   %cl
ffffffff80214367:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
	return (rme_ptr_t)Zero;
ffffffff8021436e:	e9 05 d2 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214373:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff8021437a:	e9 f9 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff8021437f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214386:	e9 ed d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021438b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214392:	e9 e1 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214397:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021439e:	e9 d5 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802143a3:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802143aa:	e9 c9 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802143af:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802143b6:	e9 bd d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802143bb:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802143c2:	e9 b1 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802143c7:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802143ce:	e9 a5 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802143d3:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802143da:	e9 99 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802143df:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802143e6:	e9 8d d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802143eb:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802143f2:	e9 81 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802143f7:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802143fe:	e9 75 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214403:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021440a:	e9 69 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021440f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214416:	e9 5d d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021441b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214422:	e9 51 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214427:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021442e:	e9 45 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214433:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021443a:	e9 39 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021443f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214446:	e9 2d d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021444b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214452:	e9 21 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214457:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021445e:	e9 15 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80214463:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021446a:	e9 09 d1 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021446f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214476:	e9 fd d0 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021447b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214482:	e9 f1 d0 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214487:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021448e:	e9 e5 d0 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214493:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021449a:	e9 d9 d0 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff8021449f:	85 c0                	test   %eax,%eax
ffffffff802144a1:	0f 85 31 03 00 00    	jne    ffffffff802147d8 <_RME_Svc_Handler+0x3848>
ffffffff802144a7:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff802144ae:	00 ff ff 
ffffffff802144b1:	48 21 c2             	and    %rax,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802144b4:	f0 48 0f b1 16       	lock cmpxchg %rdx,(%rsi)
ffffffff802144b9:	0f 94 c2             	sete   %dl
ffffffff802144bc:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
	return (rme_ptr_t)Zero;
ffffffff802144c3:	e9 b0 d0 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802144c8:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802144cf:	e9 a4 d0 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_CPT_EXIST;
ffffffff802144d4:	48 c7 c6 fb ff ff ff 	mov    $0xfffffffffffffffb,%rsi
ffffffff802144db:	e9 98 d0 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff802144e0:	48 89 c8             	mov    %rcx,%rax
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff802144e3:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff802144e8:	4c 89 c6             	mov    %r8,%rsi
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff802144eb:	48 c1 e0 20          	shl    $0x20,%rax
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff802144ef:	48 c1 e1 20          	shl    $0x20,%rcx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff802144f3:	4c 09 d8             	or     %r11,%rax
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff802144f6:	4c 21 c1             	and    %r8,%rcx
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff802144f9:	48 c1 e6 20          	shl    $0x20,%rsi
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff802144fd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214501:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff80214505:	48 09 c8             	or     %rcx,%rax
        if(Kom_End<=Kom_Begin)
ffffffff80214508:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021450b:	0f 83 ea 03 00 00    	jae    ffffffff802148fb <_RME_Svc_Handler+0x396b>
        Kom_Begin+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff80214511:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80214515:	48 01 f1             	add    %rsi,%rcx
        if(Kom_Begin<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff80214518:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff8021451c:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021451f:	0f 82 ca 03 00 00    	jb     ffffffff802148ef <_RME_Svc_Handler+0x395f>
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff80214525:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff80214529:	48 8b 72 28          	mov    0x28(%rdx),%rsi
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8021452d:	48 01 f8             	add    %rdi,%rax
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff80214530:	48 39 f0             	cmp    %rsi,%rax
ffffffff80214533:	0f 82 aa 03 00 00    	jb     ffffffff802148e3 <_RME_Svc_Handler+0x3953>
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff80214539:	48 8b 42 28          	mov    0x28(%rdx),%rax
ffffffff8021453d:	48 39 c1             	cmp    %rax,%rcx
ffffffff80214540:	0f 82 91 03 00 00    	jb     ffffffff802148d7 <_RME_Svc_Handler+0x3947>
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->End<(Kom_End-1U))
ffffffff80214546:	48 8b 42 30          	mov    0x30(%rdx),%rax
            return RME_ERR_CPT_FLAG;
ffffffff8021454a:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214551:	e9 22 d0 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        if(RME_KFN_FLAG_HIGH(Flag)>RME_KFN_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff80214556:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff8021455a:	4c 89 c1             	mov    %r8,%rcx
ffffffff8021455d:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80214561:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214565:	48 39 c1             	cmp    %rax,%rcx
ffffffff80214568:	0f 87 ca 02 00 00    	ja     ffffffff80214838 <_RME_Svc_Handler+0x38a8>
        if(RME_KFN_FLAG_LOW(Flag)<RME_KFN_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8021456e:	4c 8b 5a 10          	mov    0x10(%rdx),%r11
ffffffff80214572:	44 89 c0             	mov    %r8d,%eax
        if(RME_KFN_FLAG_HIGH(Flag)<RME_KFN_FLAG_LOW(Flag))
ffffffff80214575:	45 39 c3             	cmp    %r8d,%r11d
ffffffff80214578:	77 09                	ja     ffffffff80214583 <_RME_Svc_Handler+0x35f3>
ffffffff8021457a:	48 39 c1             	cmp    %rax,%rcx
ffffffff8021457d:	0f 83 4c d5 ff ff    	jae    ffffffff80211acf <_RME_Svc_Handler+0xb3f>
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff80214583:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021458a:	e9 e9 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021458f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214596:	e9 dd cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff8021459b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802145a2:	e9 d1 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff802145a7:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802145ae:	e9 c5 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802145b3:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802145ba:	e9 b9 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802145bf:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802145c6:	e9 ad cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802145cb:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802145d2:	e9 a1 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff802145d7:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802145de:	e9 95 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802145e3:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802145ea:	e9 89 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802145ef:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802145f6:	e9 7d cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802145fb:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214602:	e9 71 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214607:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021460e:	e9 65 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80214613:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021461a:	e9 59 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021461f:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214626:	e9 4d cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021462b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214632:	e9 41 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214637:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021463e:	e9 35 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214643:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021464a:	e9 29 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021464f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214656:	e9 1d cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021465b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214662:	e9 11 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214667:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021466e:	e9 05 cf ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214673:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021467a:	e9 f9 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021467f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214686:	e9 ed ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021468b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214692:	e9 e1 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214697:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021469e:	e9 d5 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802146a3:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802146aa:	e9 c9 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802146af:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802146b6:	e9 bd ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802146bb:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802146c2:	e9 b1 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_DELETE(Pgt_Del,Type_Stat);
ffffffff802146c7:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
ffffffff802146cb:	e9 a8 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802146d0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802146d7:	e9 9c ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802146dc:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802146e3:	e9 90 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802146e8:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802146ef:	e9 84 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802146f4:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802146fb:	e9 78 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214700:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214707:	e9 6c ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021470c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214713:	e9 60 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214718:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021471f:	e9 54 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214724:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021472b:	e9 48 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214730:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214737:	e9 3c ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021473c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214743:	e9 30 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214748:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021474f:	e9 24 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214754:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021475b:	e9 18 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214760:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214767:	e9 0c ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021476c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214773:	e9 00 ce ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214778:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021477f:	e9 f4 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214784:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021478b:	e9 e8 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214790:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214797:	e9 dc cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8021479c:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802147a3:	e9 d0 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802147a8:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802147af:	e9 c4 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802147b4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802147bb:	e9 b8 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802147c0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802147c7:	e9 ac cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff802147cc:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
ffffffff802147d3:	e9 a0 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff802147d8:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
ffffffff802147df:	e9 94 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
            return RME_ERR_CPT_REFCNT;
ffffffff802147e4:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
ffffffff802147eb:	e9 88 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff802147f0:	48 c7 c6 fb ff ff ff 	mov    $0xfffffffffffffffb,%rsi
ffffffff802147f7:	e9 7c cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802147fc:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214803:	e9 70 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214808:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021480f:	e9 64 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff80214814:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021481b:	e9 58 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214820:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214827:	e9 4c cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021482c:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214833:	e9 40 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214838:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021483f:	e9 34 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_CPT_NULL;
ffffffff80214844:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
ffffffff80214848:	e9 2b cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_CPT_NULL;
ffffffff8021484d:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
ffffffff80214851:	e9 22 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PTH_CONFLICT;
ffffffff80214856:	48 c7 c6 36 ff ff ff 	mov    $0xffffffffffffff36,%rsi
ffffffff8021485d:	e9 16 cd ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        RME_CAP_DEFROST(Thd_Del,Type_Stat);
ffffffff80214862:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff80214869:	00 ff ff 
ffffffff8021486c:	48 21 c2             	and    %rax,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021486f:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80214874:	0f 94 c2             	sete   %dl
        return RME_ERR_PTH_INVSTATE;
ffffffff80214877:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff8021487e:	e9 f5 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff80214883:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
ffffffff8021488a:	e9 e9 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PGT_ADDR;
ffffffff8021488f:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff80214896:	e9 dd cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PTH_CONFLICT;
ffffffff8021489b:	48 c7 c6 36 ff ff ff 	mov    $0xffffffffffffff36,%rsi
ffffffff802148a2:	e9 d1 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PGT_ADDR;
ffffffff802148a7:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff802148ae:	e9 c5 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff802148b3:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802148ba:	e9 b9 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802148bf:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802148c6:	e9 ad cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802148cb:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802148d2:	e9 a1 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff802148d7:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802148de:	e9 95 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802148e3:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802148ea:	e9 89 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802148ef:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802148f6:	e9 7d cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802148fb:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214902:	e9 71 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
ffffffff80214907:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021490e:	e9 65 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214913:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021491a:	e9 59 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff8021491f:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
ffffffff80214926:	e9 4d cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PGT_ADDR;
ffffffff8021492b:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff80214932:	e9 41 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PGT_ADDR;
ffffffff80214937:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff8021493e:	e9 35 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214943:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021494a:	e9 29 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff8021494f:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214956:	e9 1d cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff8021495b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214962:	e9 11 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PTH_PRIO;
ffffffff80214967:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff8021496e:	e9 05 cc ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PTH_NOTIF;
ffffffff80214973:	48 c7 c6 31 ff ff ff 	mov    $0xffffffffffffff31,%rsi
ffffffff8021497a:	e9 f9 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PTH_INVSTATE;
ffffffff8021497f:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff80214986:	e9 ed cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff8021498b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214992:	e9 e1 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_DELETE(Cpt_Del,Type_Stat);
ffffffff80214997:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
ffffffff8021499b:	e9 d8 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PTH_CONFLICT;
ffffffff802149a0:	48 c7 c6 36 ff ff ff 	mov    $0xffffffffffffff36,%rsi
ffffffff802149a7:	e9 cc cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PGT_ADDR;
ffffffff802149ac:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff802149b3:	e9 c0 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PGT_PERM;
ffffffff802149b8:	48 c7 c6 98 ff ff ff 	mov    $0xffffffffffffff98,%rsi
            break;
ffffffff802149bf:	e9 b4 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
        return RME_ERR_PGT_ADDR;
ffffffff802149c4:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff802149cb:	e9 a8 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802149d0:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff802149d7:	e9 9c cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff802149dc:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802149e3:	e9 90 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff802149e8:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802149ef:	e9 84 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff802149f4:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802149fb:	e9 78 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214a00:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214a07:	e9 6c cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff80214a0c:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214a13:	e9 60 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214a18:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214a1f:	e9 54 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80214a24:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a2b:	e9 48 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214a30:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214a37:	e9 3c cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214a3c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a43:	e9 30 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214a48:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a4f:	e9 24 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214a54:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214a5b:	e9 18 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214a60:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a67:	e9 0c cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214a6c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a73:	e9 00 cb ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214a78:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a7f:	e9 f4 ca ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214a84:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214a8b:	e9 e8 ca ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80214a90:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a97:	e9 dc ca ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214a9c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214aa3:	e9 d0 ca ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214aa8:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214aaf:	e9 c4 ca ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214ab4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80214abb:	00 00 00 00 
ffffffff80214abf:	90                   	nop

ffffffff80214ac0 <_RME_Kfn_Boot_Crt>:
{
ffffffff80214ac0:	f3 0f 1e fa          	endbr64 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214ac4:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff80214ac8:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80214ace:	0f 85 ac 00 00 00    	jne    ffffffff80214b80 <_RME_Kfn_Boot_Crt+0xc0>
ffffffff80214ad4:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80214ad7:	0f 83 f3 00 00 00    	jae    ffffffff80214bd0 <_RME_Kfn_Boot_Crt+0x110>
ffffffff80214add:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80214ae1:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff80214ae5:	48 8b 06             	mov    (%rsi),%rax
ffffffff80214ae8:	48 89 c1             	mov    %rax,%rcx
ffffffff80214aeb:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80214aef:	66 83 f9 02          	cmp    $0x2,%cx
ffffffff80214af3:	0f 84 e7 00 00 00    	je     ffffffff80214be0 <_RME_Kfn_Boot_Crt+0x120>
ffffffff80214af9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214afd:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214b01:	0f 85 e9 00 00 00    	jne    ffffffff80214bf0 <_RME_Kfn_Boot_Crt+0x130>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80214b07:	48 8b 46 10          	mov    0x10(%rsi),%rax
ffffffff80214b0b:	48 f7 d0             	not    %rax
ffffffff80214b0e:	83 e0 01             	and    $0x1,%eax
ffffffff80214b11:	0f 85 e9 00 00 00    	jne    ffffffff80214c00 <_RME_Kfn_Boot_Crt+0x140>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kfn,struct RME_Cap_Kfn*,Kfn_Crt);
ffffffff80214b17:	48 39 56 28          	cmp    %rdx,0x28(%rsi)
ffffffff80214b1b:	0f 86 af 00 00 00    	jbe    ffffffff80214bd0 <_RME_Kfn_Boot_Crt+0x110>
ffffffff80214b21:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff80214b28:	00 00 00 
ffffffff80214b2b:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80214b2f:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff80214b33:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80214b38:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff80214b3b:	84 c9                	test   %cl,%cl
ffffffff80214b3d:	0f 84 cd 00 00 00    	je     ffffffff80214c10 <_RME_Kfn_Boot_Crt+0x150>
ffffffff80214b43:	48 8b 05 c6 24 01 00 	mov    0x124c6(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
ffffffff80214b4a:	48 89 42 20          	mov    %rax,0x20(%rdx)
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff80214b4e:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
ffffffff80214b55:	ff ff ff 
    Kfn_Crt->Head.Root_Ref=1U;
ffffffff80214b58:	48 c7 42 08 01 00 00 	movq   $0x1,0x8(%rdx)
ffffffff80214b5f:	00 
    Kfn_Crt->Head.Object=0U;
ffffffff80214b60:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff80214b67:	00 
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff80214b68:	48 89 42 10          	mov    %rax,0x10(%rdx)
    RME_WRITE_RELEASE(&(Kfn_Crt->Head.Type_Stat),
ffffffff80214b6c:	48 b8 00 00 00 00 00 	movabs $0x1000000000000,%rax
ffffffff80214b73:	00 01 00 
ffffffff80214b76:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff80214b79:	31 c0                	xor    %eax,%eax
ffffffff80214b7b:	c3                   	ret    
ffffffff80214b7c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214b80:	48 89 f0             	mov    %rsi,%rax
ffffffff80214b83:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214b87:	48 39 c1             	cmp    %rax,%rcx
ffffffff80214b8a:	76 44                	jbe    ffffffff80214bd0 <_RME_Kfn_Boot_Crt+0x110>
ffffffff80214b8c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214b90:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80214b94:	48 8b 08             	mov    (%rax),%rcx
ffffffff80214b97:	48 89 cf             	mov    %rcx,%rdi
ffffffff80214b9a:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff80214b9e:	66 83 ff 02          	cmp    $0x2,%di
ffffffff80214ba2:	74 3c                	je     ffffffff80214be0 <_RME_Kfn_Boot_Crt+0x120>
ffffffff80214ba4:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80214ba8:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80214bac:	75 42                	jne    ffffffff80214bf0 <_RME_Kfn_Boot_Crt+0x130>
ffffffff80214bae:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff80214bb2:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80214bb8:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80214bbb:	73 13                	jae    ffffffff80214bd0 <_RME_Kfn_Boot_Crt+0x110>
ffffffff80214bbd:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80214bc1:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff80214bc5:	e9 1b ff ff ff       	jmp    ffffffff80214ae5 <_RME_Kfn_Boot_Crt+0x25>
ffffffff80214bca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80214bd0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214bd7:	c3                   	ret    
ffffffff80214bd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80214bdf:	00 
ffffffff80214be0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214be7:	c3                   	ret    
ffffffff80214be8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80214bef:	00 
ffffffff80214bf0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214bf7:	c3                   	ret    
ffffffff80214bf8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80214bff:	00 
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80214c00:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214c07:	c3                   	ret    
ffffffff80214c08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80214c0f:	00 
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff80214c10:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff80214c17:	c3                   	ret    

ffffffff80214c18 <_RME_Svc_Handler.cold>:
    switch(Svc_Num)
ffffffff80214c18:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
ffffffff80214c1c:	e9 57 c9 ff ff       	jmp    ffffffff80211578 <_RME_Svc_Handler+0x5e8>
ffffffff80214c21:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80214c28:	00 00 00 
ffffffff80214c2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80214c30 <__RME_X64_LAPIC_Init>:
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Init(void)
{
    /* LAPIC initialization - Check if there is any LAPIC */
    RME_ASSERT(RME_X64_LAPIC_Addr!=0);
ffffffff80214c30:	48 8b 05 19 28 01 00 	mov    0x12819(%rip),%rax        # ffffffff80227450 <RME_X64_LAPIC_Addr>

    /* Enable local APIC; set spurious interrupt vector to 32 */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_SVR, RME_X64_LAPIC_SVR_ENABLE|RME_X64_INT_SPUR);
ffffffff80214c37:	48 8b 15 12 28 01 00 	mov    0x12812(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80214c3e:	48 b8 f0 00 00 00 00 	movabs $0xffff8000000000f0,%rax
ffffffff80214c45:	80 ff ff 
ffffffff80214c48:	c7 04 02 80 01 00 00 	movl   $0x180,(%rdx,%rax,1)

    /* Disable local interrupt lines */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff80214c4f:	48 8b 15 fa 27 01 00 	mov    0x127fa(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);

    /* Disable performance counter overflow interrupts when there is one */
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff80214c56:	48 2d c0 00 00 00    	sub    $0xc0,%rax
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff80214c5c:	c7 84 10 20 03 00 00 	movl   $0x10000,0x320(%rax,%rdx,1)
ffffffff80214c63:	00 00 01 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);
ffffffff80214c67:	48 8b 15 e2 27 01 00 	mov    0x127e2(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80214c6e:	c7 84 10 30 03 00 00 	movl   $0x10000,0x330(%rax,%rdx,1)
ffffffff80214c75:	00 00 01 00 
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff80214c79:	48 8b 15 d0 27 01 00 	mov    0x127d0(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80214c80:	8b 04 02             	mov    (%rdx,%rax,1),%eax
ffffffff80214c83:	c1 e8 10             	shr    $0x10,%eax
ffffffff80214c86:	a8 fc                	test   $0xfc,%al
ffffffff80214c88:	74 18                	je     ffffffff80214ca2 <__RME_X64_LAPIC_Init+0x72>
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_PCINT, RME_X64_LAPIC_MASKED);
ffffffff80214c8a:	48 8b 15 bf 27 01 00 	mov    0x127bf(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80214c91:	48 b8 40 03 00 00 00 	movabs $0xffff800000000340,%rax
ffffffff80214c98:	80 ff ff 
ffffffff80214c9b:	c7 04 02 00 00 01 00 	movl   $0x10000,(%rdx,%rax,1)

    /* Map error interrupt to IRQ_ERROR */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ERROR, RME_X64_INT_ERROR);
ffffffff80214ca2:	48 8b 15 a7 27 01 00 	mov    0x127a7(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80214ca9:	48 b8 70 03 00 00 00 	movabs $0xffff800000000370,%rax
ffffffff80214cb0:	80 ff ff 
ffffffff80214cb3:	c7 04 02 81 00 00 00 	movl   $0x81,(%rdx,%rax,1)

    /* Clear error status register (requires back-to-back writes) */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff80214cba:	48 8b 15 8f 27 01 00 	mov    0x1278f(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80214cc1:	c7 84 10 10 ff ff ff 	movl   $0x0,-0xf0(%rax,%rdx,1)
ffffffff80214cc8:	00 00 00 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff80214ccc:	48 8b 15 7d 27 01 00 	mov    0x1277d(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80214cd3:	c7 84 10 10 ff ff ff 	movl   $0x0,-0xf0(%rax,%rdx,1)
ffffffff80214cda:	00 00 00 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff80214cde:	48 8b 15 6b 27 01 00 	mov    0x1276b(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80214ce5:	c7 84 10 40 fd ff ff 	movl   $0x0,-0x2c0(%rax,%rdx,1)
ffffffff80214cec:	00 00 00 00 

    /* Acknowledge any outstanding interrupts */
    __RME_X64_LAPIC_Ack();

    /* Send an Init Level De-Assert to synchronise arbitration IDs */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0);
ffffffff80214cf0:	48 8b 15 59 27 01 00 	mov    0x12759(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80214cf7:	c7 44 10 a0 00 00 00 	movl   $0x0,-0x60(%rax,%rdx,1)
ffffffff80214cfe:	00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_BCAST|
ffffffff80214cff:	48 8b 05 4a 27 01 00 	mov    0x1274a(%rip),%rax        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80214d06:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80214d0d:	80 ff ff 
ffffffff80214d10:	c7 04 10 00 85 08 00 	movl   $0x88500,(%rax,%rdx,1)
                                             RME_X64_LAPIC_ICRLO_INIT|
                                             RME_X64_LAPIC_ICRLO_LEVEL);
    while(RME_X64_LAPIC_READ(RME_X64_LAPIC_ICRLO)&RME_X64_LAPIC_ICRLO_DELIVS);
ffffffff80214d17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80214d1e:	00 00 
ffffffff80214d20:	48 8b 05 29 27 01 00 	mov    0x12729(%rip),%rax        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80214d27:	8b 04 10             	mov    (%rax,%rdx,1),%eax
ffffffff80214d2a:	f6 c4 10             	test   $0x10,%ah
ffffffff80214d2d:	75 f1                	jne    ffffffff80214d20 <__RME_X64_LAPIC_Init+0xf0>

    /* Enable interrupts on the APIC */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_TPR, 0);
ffffffff80214d2f:	48 8b 15 1a 27 01 00 	mov    0x1271a(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80214d36:	48 b8 80 00 00 00 00 	movabs $0xffff800000000080,%rax
ffffffff80214d3d:	80 ff ff 
ffffffff80214d40:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
}
ffffffff80214d47:	c3                   	ret    
ffffffff80214d48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80214d4f:	00 

ffffffff80214d50 <__RME_X64_RDSP_Scan>:
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff80214d50:	48 b8 14 00 00 00 00 	movabs $0xffff800000000014,%rax
ffffffff80214d57:	80 ff ff 
{
ffffffff80214d5a:	41 56                	push   %r14
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff80214d5c:	45 31 f6             	xor    %r14d,%r14d
{
ffffffff80214d5f:	41 55                	push   %r13
ffffffff80214d61:	4c 8d 2c 07          	lea    (%rdi,%rax,1),%r13
ffffffff80214d65:	41 54                	push   %r12
ffffffff80214d67:	55                   	push   %rbp
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff80214d68:	48 8d 6e dc          	lea    -0x24(%rsi),%rbp
{
ffffffff80214d6c:	53                   	push   %rbx
ffffffff80214d6d:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80214d71:	eb 12                	jmp    ffffffff80214d85 <__RME_X64_RDSP_Scan+0x35>
ffffffff80214d73:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff80214d78:	49 83 c6 10          	add    $0x10,%r14
ffffffff80214d7c:	49 83 c5 10          	add    $0x10,%r13
ffffffff80214d80:	4c 39 f5             	cmp    %r14,%rbp
ffffffff80214d83:	72 5d                	jb     ffffffff80214de2 <__RME_X64_RDSP_Scan+0x92>
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff80214d85:	49 8d 5d ec          	lea    -0x14(%r13),%rbx
ffffffff80214d89:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80214d8e:	48 c7 c6 e0 da 21 80 	mov    $0xffffffff8021dae0,%rsi
ffffffff80214d95:	48 89 df             	mov    %rbx,%rdi
ffffffff80214d98:	49 89 dc             	mov    %rbx,%r12
ffffffff80214d9b:	e8 b0 86 ff ff       	call   ffffffff8020d450 <_RME_Memcmp>
ffffffff80214da0:	48 85 c0             	test   %rax,%rax
ffffffff80214da3:	75 d3                	jne    ffffffff80214d78 <__RME_X64_RDSP_Scan+0x28>
            Checksum=0;
ffffffff80214da5:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff80214dac:	00 00 
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff80214dae:	66 90                	xchg   %ax,%ax
                Checksum+=(rme_ptr_t)Pos[Count+Check_Cnt];
ffffffff80214db0:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff80214db5:	0f b6 03             	movzbl (%rbx),%eax
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff80214db8:	48 83 c3 01          	add    $0x1,%rbx
                Checksum+=(rme_ptr_t)Pos[Count+Check_Cnt];
ffffffff80214dbc:	48 01 d0             	add    %rdx,%rax
ffffffff80214dbf:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff80214dc4:	4c 39 eb             	cmp    %r13,%rbx
ffffffff80214dc7:	75 e7                	jne    ffffffff80214db0 <__RME_X64_RDSP_Scan+0x60>
            if((Checksum&0xFF)==0)
ffffffff80214dc9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80214dce:	84 c0                	test   %al,%al
ffffffff80214dd0:	75 a6                	jne    ffffffff80214d78 <__RME_X64_RDSP_Scan+0x28>
}
ffffffff80214dd2:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80214dd6:	4c 89 e0             	mov    %r12,%rax
ffffffff80214dd9:	5b                   	pop    %rbx
ffffffff80214dda:	5d                   	pop    %rbp
ffffffff80214ddb:	41 5c                	pop    %r12
ffffffff80214ddd:	41 5d                	pop    %r13
ffffffff80214ddf:	41 5e                	pop    %r14
ffffffff80214de1:	c3                   	ret    
ffffffff80214de2:	48 83 c4 10          	add    $0x10,%rsp
    return 0;
ffffffff80214de6:	45 31 e4             	xor    %r12d,%r12d
}
ffffffff80214de9:	5b                   	pop    %rbx
ffffffff80214dea:	4c 89 e0             	mov    %r12,%rax
ffffffff80214ded:	5d                   	pop    %rbp
ffffffff80214dee:	41 5c                	pop    %r12
ffffffff80214df0:	41 5d                	pop    %r13
ffffffff80214df2:	41 5e                	pop    %r14
ffffffff80214df4:	c3                   	ret    
ffffffff80214df5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80214dfc:	00 00 00 00 

ffffffff80214e00 <__RME_X64_CPU_Local_Init>:
{
ffffffff80214e00:	55                   	push   %rbp
ffffffff80214e01:	53                   	push   %rbx
ffffffff80214e02:	48 83 ec 18          	sub    $0x18,%rsp
    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff80214e06:	48 8b 05 e3 36 01 00 	mov    0x136e3(%rip),%rax        # ffffffff802284f0 <RME_X64_Layout+0x10>
ffffffff80214e0d:	48 8b 2d ac 36 01 00 	mov    0x136ac(%rip),%rbp        # ffffffff802284c0 <RME_X64_CPU_Cnt>
ffffffff80214e14:	48 c1 e5 0d          	shl    $0xd,%rbp
ffffffff80214e18:	48 01 c5             	add    %rax,%rbp
    for(Count=0;Count<256;Count++)
ffffffff80214e1b:	48 8d 95 00 10 00 00 	lea    0x1000(%rbp),%rdx
    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff80214e22:	48 89 e8             	mov    %rbp,%rax
ffffffff80214e25:	0f 1f 00             	nopl   (%rax)
        IDT_Table[Count].Type_Attr=0;
ffffffff80214e28:	c6 40 05 00          	movb   $0x0,0x5(%rax)
    for(Count=0;Count<256;Count++)
ffffffff80214e2c:	48 83 c0 10          	add    $0x10,%rax
ffffffff80214e30:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214e33:	75 f3                	jne    ffffffff80214e28 <__RME_X64_CPU_Local_Init+0x28>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80214e35:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff80214e3c:	c7 45 02 08 00 00 8e 	movl   $0x8e000008,0x2(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff80214e43:	b9 08 00 00 00       	mov    $0x8,%ecx
ffffffff80214e48:	be 00 8e ff ff       	mov    $0xffff8e00,%esi
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80214e4d:	66 89 45 00          	mov    %ax,0x0(%rbp)
ffffffff80214e51:	48 89 c2             	mov    %rax,%rdx
ffffffff80214e54:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80214e58:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80214e5d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214e61:	89 45 08             	mov    %eax,0x8(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80214e64:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff80214e6b:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80214e71:	66 89 55 06          	mov    %dx,0x6(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80214e75:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff80214e78:	41 b9 00 8e ff ff    	mov    $0xffff8e00,%r9d
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff80214e7e:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80214e84:	66 89 45 10          	mov    %ax,0x10(%rbp)
ffffffff80214e88:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214e8c:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80214e90:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80214e96:	89 45 18             	mov    %eax,0x18(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80214e99:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80214ea0:	bb 00 8e ff ff       	mov    $0xffff8e00,%ebx
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80214ea5:	66 89 55 16          	mov    %dx,0x16(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80214ea9:	48 89 c2             	mov    %rax,%rdx
ffffffff80214eac:	66 89 45 20          	mov    %ax,0x20(%rbp)
ffffffff80214eb0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214eb4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214eb8:	89 45 28             	mov    %eax,0x28(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80214ebb:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80214ec2:	66 89 55 26          	mov    %dx,0x26(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80214ec6:	48 89 c2             	mov    %rax,%rdx
ffffffff80214ec9:	66 89 45 30          	mov    %ax,0x30(%rbp)
ffffffff80214ecd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214ed1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214ed5:	89 45 38             	mov    %eax,0x38(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff80214ed8:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80214edf:	66 89 55 36          	mov    %dx,0x36(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff80214ee3:	48 89 c2             	mov    %rax,%rdx
ffffffff80214ee6:	66 89 45 40          	mov    %ax,0x40(%rbp)
ffffffff80214eea:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214eee:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214ef2:	89 45 48             	mov    %eax,0x48(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80214ef5:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff80214efc:	66 89 55 46          	mov    %dx,0x46(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80214f00:	48 89 c2             	mov    %rax,%rdx
ffffffff80214f03:	66 89 45 50          	mov    %ax,0x50(%rbp)
ffffffff80214f07:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214f0b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214f0f:	89 45 58             	mov    %eax,0x58(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff80214f12:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80214f19:	66 89 55 56          	mov    %dx,0x56(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff80214f1d:	48 89 c2             	mov    %rax,%rdx
ffffffff80214f20:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214f24:	66 89 45 60          	mov    %ax,0x60(%rbp)
ffffffff80214f28:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80214f2c:	c7 45 0c 00 00 00 00 	movl   $0x0,0xc(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80214f33:	c7 45 12 08 00 00 8e 	movl   $0x8e000008,0x12(%rbp)
ffffffff80214f3a:	c7 45 1c 00 00 00 00 	movl   $0x0,0x1c(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80214f41:	c7 45 22 08 00 00 8e 	movl   $0x8e000008,0x22(%rbp)
ffffffff80214f48:	c7 45 2c 00 00 00 00 	movl   $0x0,0x2c(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80214f4f:	c7 45 32 08 00 00 ee 	movl   $0xee000008,0x32(%rbp)
ffffffff80214f56:	c7 45 3c 00 00 00 00 	movl   $0x0,0x3c(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff80214f5d:	c7 45 42 08 00 00 8e 	movl   $0x8e000008,0x42(%rbp)
ffffffff80214f64:	c7 45 4c 00 00 00 00 	movl   $0x0,0x4c(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80214f6b:	c7 45 52 08 00 00 8e 	movl   $0x8e000008,0x52(%rbp)
ffffffff80214f72:	c7 45 5c 00 00 00 00 	movl   $0x0,0x5c(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff80214f79:	c7 45 62 08 00 00 8e 	movl   $0x8e000008,0x62(%rbp)
ffffffff80214f80:	66 89 55 66          	mov    %dx,0x66(%rbp)
ffffffff80214f84:	89 45 68             	mov    %eax,0x68(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff80214f87:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff80214f8e:	66 89 45 70          	mov    %ax,0x70(%rbp)
ffffffff80214f92:	48 89 c2             	mov    %rax,%rdx
ffffffff80214f95:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214f99:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214f9d:	89 45 78             	mov    %eax,0x78(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80214fa0:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff80214fa7:	66 89 55 76          	mov    %dx,0x76(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80214fab:	48 89 c2             	mov    %rax,%rdx
ffffffff80214fae:	66 89 85 80 00 00 00 	mov    %ax,0x80(%rbp)
ffffffff80214fb5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214fb9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214fbd:	89 85 88 00 00 00    	mov    %eax,0x88(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff80214fc3:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80214fca:	66 89 95 86 00 00 00 	mov    %dx,0x86(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff80214fd1:	48 89 c2             	mov    %rax,%rdx
ffffffff80214fd4:	66 89 85 90 00 00 00 	mov    %ax,0x90(%rbp)
ffffffff80214fdb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214fdf:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214fe3:	89 85 98 00 00 00    	mov    %eax,0x98(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff80214fe9:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff80214ff0:	66 89 95 96 00 00 00 	mov    %dx,0x96(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff80214ff7:	48 89 c2             	mov    %rax,%rdx
ffffffff80214ffa:	66 89 85 a0 00 00 00 	mov    %ax,0xa0(%rbp)
ffffffff80215001:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215005:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215009:	89 85 a8 00 00 00    	mov    %eax,0xa8(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021500f:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff80215016:	66 89 95 a6 00 00 00 	mov    %dx,0xa6(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021501d:	48 89 c2             	mov    %rax,%rdx
ffffffff80215020:	66 89 85 b0 00 00 00 	mov    %ax,0xb0(%rbp)
ffffffff80215027:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021502b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021502f:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215035:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021503c:	66 89 95 b6 00 00 00 	mov    %dx,0xb6(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215043:	48 89 c2             	mov    %rax,%rdx
ffffffff80215046:	66 89 85 c0 00 00 00 	mov    %ax,0xc0(%rbp)
ffffffff8021504d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215051:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215055:	89 85 c8 00 00 00    	mov    %eax,0xc8(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8021505b:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215062:	66 89 95 c6 00 00 00 	mov    %dx,0xc6(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff80215069:	48 89 c2             	mov    %rax,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8021506c:	c7 45 6c 00 00 00 00 	movl   $0x0,0x6c(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff80215073:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff80215077:	c7 45 72 08 00 00 8e 	movl   $0x8e000008,0x72(%rbp)
ffffffff8021507e:	c7 45 7c 00 00 00 00 	movl   $0x0,0x7c(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80215085:	c7 85 82 00 00 00 08 	movl   $0x8e000008,0x82(%rbp)
ffffffff8021508c:	00 00 8e 
ffffffff8021508f:	c7 85 8c 00 00 00 00 	movl   $0x0,0x8c(%rbp)
ffffffff80215096:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff80215099:	c7 85 92 00 00 00 08 	movl   $0x8e000008,0x92(%rbp)
ffffffff802150a0:	00 00 8e 
ffffffff802150a3:	c7 85 9c 00 00 00 00 	movl   $0x0,0x9c(%rbp)
ffffffff802150aa:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff802150ad:	c7 85 a2 00 00 00 08 	movl   $0x8e000008,0xa2(%rbp)
ffffffff802150b4:	00 00 8e 
ffffffff802150b7:	c7 85 ac 00 00 00 00 	movl   $0x0,0xac(%rbp)
ffffffff802150be:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff802150c1:	c7 85 b2 00 00 00 08 	movl   $0x8e000008,0xb2(%rbp)
ffffffff802150c8:	00 00 8e 
ffffffff802150cb:	c7 85 bc 00 00 00 00 	movl   $0x0,0xbc(%rbp)
ffffffff802150d2:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff802150d5:	c7 85 c2 00 00 00 08 	movl   $0x8e000008,0xc2(%rbp)
ffffffff802150dc:	00 00 8e 
ffffffff802150df:	c7 85 cc 00 00 00 00 	movl   $0x0,0xcc(%rbp)
ffffffff802150e6:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff802150e9:	66 89 85 d0 00 00 00 	mov    %ax,0xd0(%rbp)
ffffffff802150f0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802150f4:	89 85 d8 00 00 00    	mov    %eax,0xd8(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff802150fa:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff80215101:	66 89 95 d6 00 00 00 	mov    %dx,0xd6(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215108:	48 89 c2             	mov    %rax,%rdx
ffffffff8021510b:	66 89 85 e0 00 00 00 	mov    %ax,0xe0(%rbp)
ffffffff80215112:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215116:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021511a:	89 85 e8 00 00 00    	mov    %eax,0xe8(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff80215120:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215127:	66 89 95 e6 00 00 00 	mov    %dx,0xe6(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8021512e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215131:	66 89 85 00 01 00 00 	mov    %ax,0x100(%rbp)
ffffffff80215138:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021513c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215140:	89 85 08 01 00 00    	mov    %eax,0x108(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff80215146:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8021514d:	66 89 95 06 01 00 00 	mov    %dx,0x106(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff80215154:	48 89 c2             	mov    %rax,%rdx
ffffffff80215157:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021515b:	66 89 85 10 01 00 00 	mov    %ax,0x110(%rbp)
ffffffff80215162:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215166:	89 85 18 01 00 00    	mov    %eax,0x118(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8021516c:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff80215173:	66 89 95 16 01 00 00 	mov    %dx,0x116(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8021517a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021517d:	66 89 85 20 01 00 00 	mov    %ax,0x120(%rbp)
ffffffff80215184:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215188:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021518c:	89 85 28 01 00 00    	mov    %eax,0x128(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff80215192:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff80215199:	66 89 95 26 01 00 00 	mov    %dx,0x126(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff802151a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802151a3:	66 89 85 30 01 00 00 	mov    %ax,0x130(%rbp)
ffffffff802151aa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802151ae:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802151b2:	89 85 38 01 00 00    	mov    %eax,0x138(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff802151b8:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff802151bf:	66 89 95 36 01 00 00 	mov    %dx,0x136(%rbp)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff802151c6:	48 89 c2             	mov    %rax,%rdx
ffffffff802151c9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802151cd:	66 89 85 40 01 00 00 	mov    %ax,0x140(%rbp)
ffffffff802151d4:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff802151d8:	66 89 8d 32 01 00 00 	mov    %cx,0x132(%rbp)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff802151df:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff802151e4:	66 89 b5 34 01 00 00 	mov    %si,0x134(%rbp)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff802151eb:	be 00 8e ff ff       	mov    $0xffff8e00,%esi
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff802151f0:	c7 85 d2 00 00 00 08 	movl   $0x8e000008,0xd2(%rbp)
ffffffff802151f7:	00 00 8e 
ffffffff802151fa:	c7 85 dc 00 00 00 00 	movl   $0x0,0xdc(%rbp)
ffffffff80215201:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215204:	c7 85 e2 00 00 00 08 	movl   $0x8e000008,0xe2(%rbp)
ffffffff8021520b:	00 00 8e 
ffffffff8021520e:	c7 85 ec 00 00 00 00 	movl   $0x0,0xec(%rbp)
ffffffff80215215:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff80215218:	c7 85 02 01 00 00 08 	movl   $0x8e000008,0x102(%rbp)
ffffffff8021521f:	00 00 8e 
ffffffff80215222:	c7 85 0c 01 00 00 00 	movl   $0x0,0x10c(%rbp)
ffffffff80215229:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8021522c:	c7 85 12 01 00 00 08 	movl   $0x8e000008,0x112(%rbp)
ffffffff80215233:	00 00 8e 
ffffffff80215236:	c7 85 1c 01 00 00 00 	movl   $0x0,0x11c(%rbp)
ffffffff8021523d:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff80215240:	c7 85 22 01 00 00 08 	movl   $0x8e000008,0x122(%rbp)
ffffffff80215247:	00 00 8e 
ffffffff8021524a:	c7 85 2c 01 00 00 00 	movl   $0x0,0x12c(%rbp)
ffffffff80215251:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff80215254:	c7 85 3c 01 00 00 00 	movl   $0x0,0x13c(%rbp)
ffffffff8021525b:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff8021525e:	c7 85 42 01 00 00 08 	movl   $0x8e000008,0x142(%rbp)
ffffffff80215265:	00 00 8e 
ffffffff80215268:	66 89 95 46 01 00 00 	mov    %dx,0x146(%rbp)
ffffffff8021526f:	89 85 48 01 00 00    	mov    %eax,0x148(%rbp)
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215275:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff8021527c:	66 89 85 00 02 00 00 	mov    %ax,0x200(%rbp)
ffffffff80215283:	48 89 c2             	mov    %rax,%rdx
ffffffff80215286:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021528a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021528e:	89 85 08 02 00 00    	mov    %eax,0x208(%rbp)
ffffffff80215294:	48 c7 c0 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rax
ffffffff8021529b:	66 89 95 06 02 00 00 	mov    %dx,0x206(%rbp)
ffffffff802152a2:	48 89 c2             	mov    %rax,%rdx
ffffffff802152a5:	66 89 85 10 02 00 00 	mov    %ax,0x210(%rbp)
ffffffff802152ac:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802152b0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802152b4:	89 85 18 02 00 00    	mov    %eax,0x218(%rbp)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff802152ba:	48 c7 c0 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rax
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff802152c1:	66 89 95 16 02 00 00 	mov    %dx,0x216(%rbp)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff802152c8:	48 89 c2             	mov    %rax,%rdx
ffffffff802152cb:	66 89 85 20 02 00 00 	mov    %ax,0x220(%rbp)
ffffffff802152d2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802152d6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802152da:	89 85 28 02 00 00    	mov    %eax,0x228(%rbp)
ffffffff802152e0:	48 c7 c0 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rax
ffffffff802152e7:	66 89 95 26 02 00 00 	mov    %dx,0x226(%rbp)
ffffffff802152ee:	48 89 c2             	mov    %rax,%rdx
ffffffff802152f1:	66 89 85 30 02 00 00 	mov    %ax,0x230(%rbp)
ffffffff802152f8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802152fc:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215300:	89 85 38 02 00 00    	mov    %eax,0x238(%rbp)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215306:	48 c7 c0 05 ba 20 80 	mov    $0xffffffff8020ba05,%rax
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8021530d:	66 89 95 36 02 00 00 	mov    %dx,0x236(%rbp)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215314:	48 89 c2             	mov    %rax,%rdx
ffffffff80215317:	66 89 85 40 02 00 00 	mov    %ax,0x240(%rbp)
ffffffff8021531e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215322:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215326:	89 85 48 02 00 00    	mov    %eax,0x248(%rbp)
ffffffff8021532c:	48 c7 c0 11 ba 20 80 	mov    $0xffffffff8020ba11,%rax
ffffffff80215333:	66 89 95 46 02 00 00 	mov    %dx,0x246(%rbp)
ffffffff8021533a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021533d:	66 89 85 50 02 00 00 	mov    %ax,0x250(%rbp)
ffffffff80215344:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215348:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021534c:	89 85 58 02 00 00    	mov    %eax,0x258(%rbp)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215352:	48 c7 c0 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rax
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215359:	66 89 95 56 02 00 00 	mov    %dx,0x256(%rbp)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215360:	48 89 c2             	mov    %rax,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff80215363:	c7 85 4c 01 00 00 00 	movl   $0x0,0x14c(%rbp)
ffffffff8021536a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8021536d:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215371:	c7 85 02 02 00 00 08 	movl   $0x8e000008,0x202(%rbp)
ffffffff80215378:	00 00 8e 
ffffffff8021537b:	c7 85 0c 02 00 00 00 	movl   $0x0,0x20c(%rbp)
ffffffff80215382:	00 00 00 
ffffffff80215385:	c7 85 12 02 00 00 08 	movl   $0x8e000008,0x212(%rbp)
ffffffff8021538c:	00 00 8e 
ffffffff8021538f:	c7 85 1c 02 00 00 00 	movl   $0x0,0x21c(%rbp)
ffffffff80215396:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff80215399:	c7 85 22 02 00 00 08 	movl   $0x8e000008,0x222(%rbp)
ffffffff802153a0:	00 00 8e 
ffffffff802153a3:	c7 85 2c 02 00 00 00 	movl   $0x0,0x22c(%rbp)
ffffffff802153aa:	00 00 00 
ffffffff802153ad:	c7 85 32 02 00 00 08 	movl   $0x8e000008,0x232(%rbp)
ffffffff802153b4:	00 00 8e 
ffffffff802153b7:	c7 85 3c 02 00 00 00 	movl   $0x0,0x23c(%rbp)
ffffffff802153be:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff802153c1:	c7 85 42 02 00 00 08 	movl   $0x8e000008,0x242(%rbp)
ffffffff802153c8:	00 00 8e 
ffffffff802153cb:	c7 85 4c 02 00 00 00 	movl   $0x0,0x24c(%rbp)
ffffffff802153d2:	00 00 00 
ffffffff802153d5:	c7 85 52 02 00 00 08 	movl   $0x8e000008,0x252(%rbp)
ffffffff802153dc:	00 00 8e 
ffffffff802153df:	c7 85 5c 02 00 00 00 	movl   $0x0,0x25c(%rbp)
ffffffff802153e6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff802153e9:	66 89 85 60 02 00 00 	mov    %ax,0x260(%rbp)
ffffffff802153f0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802153f4:	89 85 68 02 00 00    	mov    %eax,0x268(%rbp)
ffffffff802153fa:	48 c7 c0 29 ba 20 80 	mov    $0xffffffff8020ba29,%rax
ffffffff80215401:	66 89 95 66 02 00 00 	mov    %dx,0x266(%rbp)
ffffffff80215408:	48 89 c2             	mov    %rax,%rdx
ffffffff8021540b:	66 89 85 70 02 00 00 	mov    %ax,0x270(%rbp)
ffffffff80215412:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215416:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021541a:	89 85 78 02 00 00    	mov    %eax,0x278(%rbp)
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215420:	48 c7 c0 35 ba 20 80 	mov    $0xffffffff8020ba35,%rax
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215427:	66 89 95 76 02 00 00 	mov    %dx,0x276(%rbp)
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8021542e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215431:	66 89 85 80 02 00 00 	mov    %ax,0x280(%rbp)
ffffffff80215438:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021543c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215440:	89 85 88 02 00 00    	mov    %eax,0x288(%rbp)
ffffffff80215446:	48 c7 c0 41 ba 20 80 	mov    $0xffffffff8020ba41,%rax
ffffffff8021544d:	66 89 95 86 02 00 00 	mov    %dx,0x286(%rbp)
ffffffff80215454:	48 89 c2             	mov    %rax,%rdx
ffffffff80215457:	66 89 85 90 02 00 00 	mov    %ax,0x290(%rbp)
ffffffff8021545e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215462:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215466:	89 85 98 02 00 00    	mov    %eax,0x298(%rbp)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8021546c:	48 c7 c0 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rax
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215473:	66 89 95 96 02 00 00 	mov    %dx,0x296(%rbp)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8021547a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021547d:	66 89 85 a0 02 00 00 	mov    %ax,0x2a0(%rbp)
ffffffff80215484:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215488:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021548c:	89 85 a8 02 00 00    	mov    %eax,0x2a8(%rbp)
ffffffff80215492:	48 c7 c0 59 ba 20 80 	mov    $0xffffffff8020ba59,%rax
ffffffff80215499:	66 89 95 a6 02 00 00 	mov    %dx,0x2a6(%rbp)
ffffffff802154a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802154a3:	66 89 85 b0 02 00 00 	mov    %ax,0x2b0(%rbp)
ffffffff802154aa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802154ae:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802154b2:	89 85 b8 02 00 00    	mov    %eax,0x2b8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff802154b8:	48 c7 c0 65 ba 20 80 	mov    $0xffffffff8020ba65,%rax
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff802154bf:	66 89 95 b6 02 00 00 	mov    %dx,0x2b6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff802154c6:	48 89 c2             	mov    %rax,%rdx
ffffffff802154c9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802154cd:	66 89 85 c0 02 00 00 	mov    %ax,0x2c0(%rbp)
ffffffff802154d4:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff802154d8:	66 89 bd 72 02 00 00 	mov    %di,0x272(%rbp)
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802154df:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff802154e4:	c7 85 62 02 00 00 08 	movl   $0x8e000008,0x262(%rbp)
ffffffff802154eb:	00 00 8e 
ffffffff802154ee:	c7 85 6c 02 00 00 00 	movl   $0x0,0x26c(%rbp)
ffffffff802154f5:	00 00 00 
ffffffff802154f8:	c6 85 74 02 00 00 00 	movb   $0x0,0x274(%rbp)
ffffffff802154ff:	c6 85 75 02 00 00 8e 	movb   $0x8e,0x275(%rbp)
ffffffff80215506:	c7 85 7c 02 00 00 00 	movl   $0x0,0x27c(%rbp)
ffffffff8021550d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215510:	c7 85 82 02 00 00 08 	movl   $0x8e000008,0x282(%rbp)
ffffffff80215517:	00 00 8e 
ffffffff8021551a:	c7 85 8c 02 00 00 00 	movl   $0x0,0x28c(%rbp)
ffffffff80215521:	00 00 00 
ffffffff80215524:	c7 85 92 02 00 00 08 	movl   $0x8e000008,0x292(%rbp)
ffffffff8021552b:	00 00 8e 
ffffffff8021552e:	c7 85 9c 02 00 00 00 	movl   $0x0,0x29c(%rbp)
ffffffff80215535:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff80215538:	c7 85 a2 02 00 00 08 	movl   $0x8e000008,0x2a2(%rbp)
ffffffff8021553f:	00 00 8e 
ffffffff80215542:	c7 85 ac 02 00 00 00 	movl   $0x0,0x2ac(%rbp)
ffffffff80215549:	00 00 00 
ffffffff8021554c:	c7 85 b2 02 00 00 08 	movl   $0x8e000008,0x2b2(%rbp)
ffffffff80215553:	00 00 8e 
ffffffff80215556:	c7 85 bc 02 00 00 00 	movl   $0x0,0x2bc(%rbp)
ffffffff8021555d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215560:	c7 85 c2 02 00 00 08 	movl   $0x8e000008,0x2c2(%rbp)
ffffffff80215567:	00 00 8e 
ffffffff8021556a:	89 85 c8 02 00 00    	mov    %eax,0x2c8(%rbp)
ffffffff80215570:	48 c7 c0 71 ba 20 80 	mov    $0xffffffff8020ba71,%rax
ffffffff80215577:	66 89 95 c6 02 00 00 	mov    %dx,0x2c6(%rbp)
ffffffff8021557e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215581:	66 89 85 d0 02 00 00 	mov    %ax,0x2d0(%rbp)
ffffffff80215588:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021558c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215590:	89 85 d8 02 00 00    	mov    %eax,0x2d8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215596:	48 c7 c0 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rax
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8021559d:	66 89 95 d6 02 00 00 	mov    %dx,0x2d6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff802155a4:	48 89 c2             	mov    %rax,%rdx
ffffffff802155a7:	66 89 85 e0 02 00 00 	mov    %ax,0x2e0(%rbp)
ffffffff802155ae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802155b2:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802155b6:	89 85 e8 02 00 00    	mov    %eax,0x2e8(%rbp)
ffffffff802155bc:	48 c7 c0 89 ba 20 80 	mov    $0xffffffff8020ba89,%rax
ffffffff802155c3:	66 89 95 e6 02 00 00 	mov    %dx,0x2e6(%rbp)
ffffffff802155ca:	48 89 c2             	mov    %rax,%rdx
ffffffff802155cd:	66 89 85 f0 02 00 00 	mov    %ax,0x2f0(%rbp)
ffffffff802155d4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802155d8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802155dc:	89 85 f8 02 00 00    	mov    %eax,0x2f8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff802155e2:	48 c7 c0 95 ba 20 80 	mov    $0xffffffff8020ba95,%rax
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff802155e9:	66 89 95 f6 02 00 00 	mov    %dx,0x2f6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff802155f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802155f3:	66 89 85 00 03 00 00 	mov    %ax,0x300(%rbp)
ffffffff802155fa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802155fe:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215602:	89 85 08 03 00 00    	mov    %eax,0x308(%rbp)
ffffffff80215608:	48 c7 c0 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rax
ffffffff8021560f:	66 89 95 06 03 00 00 	mov    %dx,0x306(%rbp)
ffffffff80215616:	48 89 c2             	mov    %rax,%rdx
ffffffff80215619:	66 89 85 10 03 00 00 	mov    %ax,0x310(%rbp)
ffffffff80215620:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215624:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215628:	89 85 18 03 00 00    	mov    %eax,0x318(%rbp)
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8021562e:	48 c7 c0 ad ba 20 80 	mov    $0xffffffff8020baad,%rax
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215635:	66 89 95 16 03 00 00 	mov    %dx,0x316(%rbp)
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8021563c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021563f:	66 89 85 20 03 00 00 	mov    %ax,0x320(%rbp)
ffffffff80215646:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021564a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021564e:	89 85 28 03 00 00    	mov    %eax,0x328(%rbp)
ffffffff80215654:	48 c7 c0 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rax
ffffffff8021565b:	66 89 95 26 03 00 00 	mov    %dx,0x326(%rbp)
ffffffff80215662:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215665:	c7 85 cc 02 00 00 00 	movl   $0x0,0x2cc(%rbp)
ffffffff8021566c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8021566f:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215673:	c7 85 d2 02 00 00 08 	movl   $0x8e000008,0x2d2(%rbp)
ffffffff8021567a:	00 00 8e 
ffffffff8021567d:	c7 85 dc 02 00 00 00 	movl   $0x0,0x2dc(%rbp)
ffffffff80215684:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215687:	c7 85 e2 02 00 00 08 	movl   $0x8e000008,0x2e2(%rbp)
ffffffff8021568e:	00 00 8e 
ffffffff80215691:	c7 85 ec 02 00 00 00 	movl   $0x0,0x2ec(%rbp)
ffffffff80215698:	00 00 00 
ffffffff8021569b:	c7 85 f2 02 00 00 08 	movl   $0x8e000008,0x2f2(%rbp)
ffffffff802156a2:	00 00 8e 
ffffffff802156a5:	c7 85 fc 02 00 00 00 	movl   $0x0,0x2fc(%rbp)
ffffffff802156ac:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff802156af:	c7 85 02 03 00 00 08 	movl   $0x8e000008,0x302(%rbp)
ffffffff802156b6:	00 00 8e 
ffffffff802156b9:	c7 85 0c 03 00 00 00 	movl   $0x0,0x30c(%rbp)
ffffffff802156c0:	00 00 00 
ffffffff802156c3:	c7 85 12 03 00 00 08 	movl   $0x8e000008,0x312(%rbp)
ffffffff802156ca:	00 00 8e 
ffffffff802156cd:	c7 85 1c 03 00 00 00 	movl   $0x0,0x31c(%rbp)
ffffffff802156d4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff802156d7:	c7 85 22 03 00 00 08 	movl   $0x8e000008,0x322(%rbp)
ffffffff802156de:	00 00 8e 
ffffffff802156e1:	c7 85 2c 03 00 00 00 	movl   $0x0,0x32c(%rbp)
ffffffff802156e8:	00 00 00 
ffffffff802156eb:	66 89 85 30 03 00 00 	mov    %ax,0x330(%rbp)
ffffffff802156f2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802156f6:	89 85 38 03 00 00    	mov    %eax,0x338(%rbp)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff802156fc:	48 c7 c0 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rax
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215703:	66 89 95 36 03 00 00 	mov    %dx,0x336(%rbp)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8021570a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021570d:	66 89 85 40 03 00 00 	mov    %ax,0x340(%rbp)
ffffffff80215714:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215718:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021571c:	89 85 48 03 00 00    	mov    %eax,0x348(%rbp)
ffffffff80215722:	48 c7 c0 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rax
ffffffff80215729:	66 89 95 46 03 00 00 	mov    %dx,0x346(%rbp)
ffffffff80215730:	48 89 c2             	mov    %rax,%rdx
ffffffff80215733:	66 89 85 50 03 00 00 	mov    %ax,0x350(%rbp)
ffffffff8021573a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021573e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215742:	89 85 58 03 00 00    	mov    %eax,0x358(%rbp)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215748:	48 c7 c0 dd ba 20 80 	mov    $0xffffffff8020badd,%rax
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8021574f:	66 89 95 56 03 00 00 	mov    %dx,0x356(%rbp)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215756:	48 89 c2             	mov    %rax,%rdx
ffffffff80215759:	66 89 85 60 03 00 00 	mov    %ax,0x360(%rbp)
ffffffff80215760:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215764:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215768:	89 85 68 03 00 00    	mov    %eax,0x368(%rbp)
ffffffff8021576e:	48 c7 c0 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rax
ffffffff80215775:	66 89 95 66 03 00 00 	mov    %dx,0x366(%rbp)
ffffffff8021577c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021577f:	66 89 85 70 03 00 00 	mov    %ax,0x370(%rbp)
ffffffff80215786:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021578a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021578e:	89 85 78 03 00 00    	mov    %eax,0x378(%rbp)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80215794:	48 c7 c0 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rax
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8021579b:	66 89 95 76 03 00 00 	mov    %dx,0x376(%rbp)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff802157a2:	48 89 c2             	mov    %rax,%rdx
ffffffff802157a5:	66 89 85 80 03 00 00 	mov    %ax,0x380(%rbp)
ffffffff802157ac:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802157b0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802157b4:	89 85 88 03 00 00    	mov    %eax,0x388(%rbp)
ffffffff802157ba:	48 c7 c0 01 bb 20 80 	mov    $0xffffffff8020bb01,%rax
ffffffff802157c1:	66 89 95 86 03 00 00 	mov    %dx,0x386(%rbp)
ffffffff802157c8:	48 89 c2             	mov    %rax,%rdx
ffffffff802157cb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802157cf:	66 89 85 90 03 00 00 	mov    %ax,0x390(%rbp)
ffffffff802157d6:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff802157da:	c7 85 32 03 00 00 08 	movl   $0x8e000008,0x332(%rbp)
ffffffff802157e1:	00 00 8e 
ffffffff802157e4:	c7 85 3c 03 00 00 00 	movl   $0x0,0x33c(%rbp)
ffffffff802157eb:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff802157ee:	c7 85 42 03 00 00 08 	movl   $0x8e000008,0x342(%rbp)
ffffffff802157f5:	00 00 8e 
ffffffff802157f8:	c7 85 4c 03 00 00 00 	movl   $0x0,0x34c(%rbp)
ffffffff802157ff:	00 00 00 
ffffffff80215802:	c7 85 52 03 00 00 08 	movl   $0x8e000008,0x352(%rbp)
ffffffff80215809:	00 00 8e 
ffffffff8021580c:	c7 85 5c 03 00 00 00 	movl   $0x0,0x35c(%rbp)
ffffffff80215813:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215816:	c7 85 62 03 00 00 08 	movl   $0x8e000008,0x362(%rbp)
ffffffff8021581d:	00 00 8e 
ffffffff80215820:	c7 85 6c 03 00 00 00 	movl   $0x0,0x36c(%rbp)
ffffffff80215827:	00 00 00 
ffffffff8021582a:	c7 85 72 03 00 00 08 	movl   $0x8e000008,0x372(%rbp)
ffffffff80215831:	00 00 8e 
ffffffff80215834:	c7 85 7c 03 00 00 00 	movl   $0x0,0x37c(%rbp)
ffffffff8021583b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8021583e:	c7 85 82 03 00 00 08 	movl   $0x8e000008,0x382(%rbp)
ffffffff80215845:	00 00 8e 
ffffffff80215848:	c7 85 8c 03 00 00 00 	movl   $0x0,0x38c(%rbp)
ffffffff8021584f:	00 00 00 
ffffffff80215852:	c7 85 92 03 00 00 08 	movl   $0x8e000008,0x392(%rbp)
ffffffff80215859:	00 00 8e 
ffffffff8021585c:	66 89 95 96 03 00 00 	mov    %dx,0x396(%rbp)
ffffffff80215863:	89 85 98 03 00 00    	mov    %eax,0x398(%rbp)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff80215869:	48 c7 c0 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rax
ffffffff80215870:	66 89 85 a0 03 00 00 	mov    %ax,0x3a0(%rbp)
ffffffff80215877:	48 89 c2             	mov    %rax,%rdx
ffffffff8021587a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021587e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215882:	89 85 a8 03 00 00    	mov    %eax,0x3a8(%rbp)
ffffffff80215888:	48 c7 c0 19 bb 20 80 	mov    $0xffffffff8020bb19,%rax
ffffffff8021588f:	66 89 95 a6 03 00 00 	mov    %dx,0x3a6(%rbp)
ffffffff80215896:	48 89 c2             	mov    %rax,%rdx
ffffffff80215899:	66 89 85 b0 03 00 00 	mov    %ax,0x3b0(%rbp)
ffffffff802158a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802158a4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802158a8:	89 85 b8 03 00 00    	mov    %eax,0x3b8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff802158ae:	48 c7 c0 25 bb 20 80 	mov    $0xffffffff8020bb25,%rax
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff802158b5:	66 89 95 b6 03 00 00 	mov    %dx,0x3b6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff802158bc:	48 89 c2             	mov    %rax,%rdx
ffffffff802158bf:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802158c3:	66 89 85 c0 03 00 00 	mov    %ax,0x3c0(%rbp)
ffffffff802158ca:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802158ce:	89 85 c8 03 00 00    	mov    %eax,0x3c8(%rbp)
ffffffff802158d4:	48 c7 c0 31 bb 20 80 	mov    $0xffffffff8020bb31,%rax
ffffffff802158db:	66 89 95 c6 03 00 00 	mov    %dx,0x3c6(%rbp)
ffffffff802158e2:	48 89 c2             	mov    %rax,%rdx
ffffffff802158e5:	66 89 85 d0 03 00 00 	mov    %ax,0x3d0(%rbp)
ffffffff802158ec:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802158f0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802158f4:	89 85 d8 03 00 00    	mov    %eax,0x3d8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff802158fa:	48 c7 c0 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rax
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80215901:	66 89 95 d6 03 00 00 	mov    %dx,0x3d6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff80215908:	48 89 c2             	mov    %rax,%rdx
ffffffff8021590b:	66 89 85 e0 03 00 00 	mov    %ax,0x3e0(%rbp)
ffffffff80215912:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215916:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021591a:	89 85 e8 03 00 00    	mov    %eax,0x3e8(%rbp)
ffffffff80215920:	48 c7 c0 49 bb 20 80 	mov    $0xffffffff8020bb49,%rax
ffffffff80215927:	66 89 95 e6 03 00 00 	mov    %dx,0x3e6(%rbp)
ffffffff8021592e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215931:	66 89 85 f0 03 00 00 	mov    %ax,0x3f0(%rbp)
ffffffff80215938:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021593c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215940:	89 85 f8 03 00 00    	mov    %eax,0x3f8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80215946:	48 c7 c0 55 bb 20 80 	mov    $0xffffffff8020bb55,%rax
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8021594d:	66 89 95 f6 03 00 00 	mov    %dx,0x3f6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80215954:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80215957:	c7 85 9c 03 00 00 00 	movl   $0x0,0x39c(%rbp)
ffffffff8021595e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80215961:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff80215965:	c7 85 a2 03 00 00 08 	movl   $0x8e000008,0x3a2(%rbp)
ffffffff8021596c:	00 00 8e 
ffffffff8021596f:	c7 85 ac 03 00 00 00 	movl   $0x0,0x3ac(%rbp)
ffffffff80215976:	00 00 00 
ffffffff80215979:	c7 85 b2 03 00 00 08 	movl   $0x8e000008,0x3b2(%rbp)
ffffffff80215980:	00 00 8e 
ffffffff80215983:	c7 85 bc 03 00 00 00 	movl   $0x0,0x3bc(%rbp)
ffffffff8021598a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8021598d:	c7 85 c2 03 00 00 08 	movl   $0x8e000008,0x3c2(%rbp)
ffffffff80215994:	00 00 8e 
ffffffff80215997:	c7 85 cc 03 00 00 00 	movl   $0x0,0x3cc(%rbp)
ffffffff8021599e:	00 00 00 
ffffffff802159a1:	c7 85 d2 03 00 00 08 	movl   $0x8e000008,0x3d2(%rbp)
ffffffff802159a8:	00 00 8e 
ffffffff802159ab:	c7 85 dc 03 00 00 00 	movl   $0x0,0x3dc(%rbp)
ffffffff802159b2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff802159b5:	c7 85 e2 03 00 00 08 	movl   $0x8e000008,0x3e2(%rbp)
ffffffff802159bc:	00 00 8e 
ffffffff802159bf:	c7 85 ec 03 00 00 00 	movl   $0x0,0x3ec(%rbp)
ffffffff802159c6:	00 00 00 
ffffffff802159c9:	c7 85 f2 03 00 00 08 	movl   $0x8e000008,0x3f2(%rbp)
ffffffff802159d0:	00 00 8e 
ffffffff802159d3:	c7 85 fc 03 00 00 00 	movl   $0x0,0x3fc(%rbp)
ffffffff802159da:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff802159dd:	66 89 85 00 04 00 00 	mov    %ax,0x400(%rbp)
ffffffff802159e4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802159e8:	89 85 08 04 00 00    	mov    %eax,0x408(%rbp)
ffffffff802159ee:	48 c7 c0 61 bb 20 80 	mov    $0xffffffff8020bb61,%rax
ffffffff802159f5:	66 89 95 06 04 00 00 	mov    %dx,0x406(%rbp)
ffffffff802159fc:	48 89 c2             	mov    %rax,%rdx
ffffffff802159ff:	66 89 85 10 04 00 00 	mov    %ax,0x410(%rbp)
ffffffff80215a06:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215a0a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215a0e:	89 85 18 04 00 00    	mov    %eax,0x418(%rbp)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff80215a14:	48 c7 c0 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rax
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80215a1b:	66 89 95 16 04 00 00 	mov    %dx,0x416(%rbp)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff80215a22:	48 89 c2             	mov    %rax,%rdx
ffffffff80215a25:	66 89 85 20 04 00 00 	mov    %ax,0x420(%rbp)
ffffffff80215a2c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215a30:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215a34:	89 85 28 04 00 00    	mov    %eax,0x428(%rbp)
ffffffff80215a3a:	48 c7 c0 79 bb 20 80 	mov    $0xffffffff8020bb79,%rax
ffffffff80215a41:	66 89 95 26 04 00 00 	mov    %dx,0x426(%rbp)
ffffffff80215a48:	48 89 c2             	mov    %rax,%rdx
ffffffff80215a4b:	66 89 85 30 04 00 00 	mov    %ax,0x430(%rbp)
ffffffff80215a52:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215a56:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215a5a:	89 85 38 04 00 00    	mov    %eax,0x438(%rbp)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80215a60:	48 c7 c0 85 bb 20 80 	mov    $0xffffffff8020bb85,%rax
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff80215a67:	66 89 95 36 04 00 00 	mov    %dx,0x436(%rbp)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80215a6e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215a71:	66 89 85 40 04 00 00 	mov    %ax,0x440(%rbp)
ffffffff80215a78:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215a7c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215a80:	89 85 48 04 00 00    	mov    %eax,0x448(%rbp)
ffffffff80215a86:	48 c7 c0 91 bb 20 80 	mov    $0xffffffff8020bb91,%rax
ffffffff80215a8d:	66 89 95 46 04 00 00 	mov    %dx,0x446(%rbp)
ffffffff80215a94:	48 89 c2             	mov    %rax,%rdx
ffffffff80215a97:	66 89 85 50 04 00 00 	mov    %ax,0x450(%rbp)
ffffffff80215a9e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215aa2:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215aa6:	89 85 58 04 00 00    	mov    %eax,0x458(%rbp)
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80215aac:	48 c7 c0 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rax
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80215ab3:	66 89 95 56 04 00 00 	mov    %dx,0x456(%rbp)
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80215aba:	48 89 c2             	mov    %rax,%rdx
ffffffff80215abd:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215ac1:	66 89 85 60 04 00 00 	mov    %ax,0x460(%rbp)
ffffffff80215ac8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215acc:	66 89 95 66 04 00 00 	mov    %dx,0x466(%rbp)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80215ad3:	c7 85 02 04 00 00 08 	movl   $0x8e000008,0x402(%rbp)
ffffffff80215ada:	00 00 8e 
ffffffff80215add:	c7 85 0c 04 00 00 00 	movl   $0x0,0x40c(%rbp)
ffffffff80215ae4:	00 00 00 
ffffffff80215ae7:	c7 85 12 04 00 00 08 	movl   $0x8e000008,0x412(%rbp)
ffffffff80215aee:	00 00 8e 
ffffffff80215af1:	c7 85 1c 04 00 00 00 	movl   $0x0,0x41c(%rbp)
ffffffff80215af8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff80215afb:	c7 85 22 04 00 00 08 	movl   $0x8e000008,0x422(%rbp)
ffffffff80215b02:	00 00 8e 
ffffffff80215b05:	c7 85 2c 04 00 00 00 	movl   $0x0,0x42c(%rbp)
ffffffff80215b0c:	00 00 00 
ffffffff80215b0f:	c7 85 32 04 00 00 08 	movl   $0x8e000008,0x432(%rbp)
ffffffff80215b16:	00 00 8e 
ffffffff80215b19:	c7 85 3c 04 00 00 00 	movl   $0x0,0x43c(%rbp)
ffffffff80215b20:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80215b23:	c7 85 42 04 00 00 08 	movl   $0x8e000008,0x442(%rbp)
ffffffff80215b2a:	00 00 8e 
ffffffff80215b2d:	c7 85 4c 04 00 00 00 	movl   $0x0,0x44c(%rbp)
ffffffff80215b34:	00 00 00 
ffffffff80215b37:	c7 85 52 04 00 00 08 	movl   $0x8e000008,0x452(%rbp)
ffffffff80215b3e:	00 00 8e 
ffffffff80215b41:	c7 85 5c 04 00 00 00 	movl   $0x0,0x45c(%rbp)
ffffffff80215b48:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80215b4b:	c7 85 62 04 00 00 08 	movl   $0x8e000008,0x462(%rbp)
ffffffff80215b52:	00 00 8e 
ffffffff80215b55:	89 85 68 04 00 00    	mov    %eax,0x468(%rbp)
ffffffff80215b5b:	48 c7 c0 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rax
ffffffff80215b62:	66 89 85 70 04 00 00 	mov    %ax,0x470(%rbp)
ffffffff80215b69:	48 89 c2             	mov    %rax,%rdx
ffffffff80215b6c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215b70:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215b74:	89 85 78 04 00 00    	mov    %eax,0x478(%rbp)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80215b7a:	48 c7 c0 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rax
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80215b81:	66 89 95 76 04 00 00 	mov    %dx,0x476(%rbp)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80215b88:	48 89 c2             	mov    %rax,%rdx
ffffffff80215b8b:	66 89 85 80 04 00 00 	mov    %ax,0x480(%rbp)
ffffffff80215b92:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215b96:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215b9a:	89 85 88 04 00 00    	mov    %eax,0x488(%rbp)
ffffffff80215ba0:	48 c7 c0 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rax
ffffffff80215ba7:	66 89 95 86 04 00 00 	mov    %dx,0x486(%rbp)
ffffffff80215bae:	48 89 c2             	mov    %rax,%rdx
ffffffff80215bb1:	66 89 85 90 04 00 00 	mov    %ax,0x490(%rbp)
ffffffff80215bb8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215bbc:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215bc0:	89 85 98 04 00 00    	mov    %eax,0x498(%rbp)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80215bc6:	48 c7 c0 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rax
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80215bcd:	66 89 95 96 04 00 00 	mov    %dx,0x496(%rbp)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80215bd4:	48 89 c2             	mov    %rax,%rdx
ffffffff80215bd7:	66 89 85 a0 04 00 00 	mov    %ax,0x4a0(%rbp)
ffffffff80215bde:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215be2:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215be6:	89 85 a8 04 00 00    	mov    %eax,0x4a8(%rbp)
ffffffff80215bec:	48 c7 c0 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rax
ffffffff80215bf3:	66 89 95 a6 04 00 00 	mov    %dx,0x4a6(%rbp)
ffffffff80215bfa:	48 89 c2             	mov    %rax,%rdx
ffffffff80215bfd:	66 89 85 b0 04 00 00 	mov    %ax,0x4b0(%rbp)
ffffffff80215c04:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215c08:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215c0c:	89 85 b8 04 00 00    	mov    %eax,0x4b8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80215c12:	48 c7 c0 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rax
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80215c19:	66 89 95 b6 04 00 00 	mov    %dx,0x4b6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80215c20:	48 89 c2             	mov    %rax,%rdx
ffffffff80215c23:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215c27:	66 89 85 c0 04 00 00 	mov    %ax,0x4c0(%rbp)
ffffffff80215c2e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215c32:	89 85 c8 04 00 00    	mov    %eax,0x4c8(%rbp)
ffffffff80215c38:	48 c7 c0 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rax
ffffffff80215c3f:	66 89 95 c6 04 00 00 	mov    %dx,0x4c6(%rbp)
ffffffff80215c46:	48 89 c2             	mov    %rax,%rdx
ffffffff80215c49:	66 89 85 d0 04 00 00 	mov    %ax,0x4d0(%rbp)
ffffffff80215c50:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215c54:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80215c58:	c7 85 6c 04 00 00 00 	movl   $0x0,0x46c(%rbp)
ffffffff80215c5f:	00 00 00 
ffffffff80215c62:	c7 85 72 04 00 00 08 	movl   $0x8e000008,0x472(%rbp)
ffffffff80215c69:	00 00 8e 
ffffffff80215c6c:	c7 85 7c 04 00 00 00 	movl   $0x0,0x47c(%rbp)
ffffffff80215c73:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80215c76:	c7 85 82 04 00 00 08 	movl   $0x8e000008,0x482(%rbp)
ffffffff80215c7d:	00 00 8e 
ffffffff80215c80:	c7 85 8c 04 00 00 00 	movl   $0x0,0x48c(%rbp)
ffffffff80215c87:	00 00 00 
ffffffff80215c8a:	c7 85 92 04 00 00 08 	movl   $0x8e000008,0x492(%rbp)
ffffffff80215c91:	00 00 8e 
ffffffff80215c94:	c7 85 9c 04 00 00 00 	movl   $0x0,0x49c(%rbp)
ffffffff80215c9b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80215c9e:	c7 85 a2 04 00 00 08 	movl   $0x8e000008,0x4a2(%rbp)
ffffffff80215ca5:	00 00 8e 
ffffffff80215ca8:	c7 85 ac 04 00 00 00 	movl   $0x0,0x4ac(%rbp)
ffffffff80215caf:	00 00 00 
ffffffff80215cb2:	c7 85 b2 04 00 00 08 	movl   $0x8e000008,0x4b2(%rbp)
ffffffff80215cb9:	00 00 8e 
ffffffff80215cbc:	c7 85 bc 04 00 00 00 	movl   $0x0,0x4bc(%rbp)
ffffffff80215cc3:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80215cc6:	c7 85 c2 04 00 00 08 	movl   $0x8e000008,0x4c2(%rbp)
ffffffff80215ccd:	00 00 8e 
ffffffff80215cd0:	c7 85 cc 04 00 00 00 	movl   $0x0,0x4cc(%rbp)
ffffffff80215cd7:	00 00 00 
ffffffff80215cda:	c7 85 d2 04 00 00 08 	movl   $0x8e000008,0x4d2(%rbp)
ffffffff80215ce1:	00 00 8e 
ffffffff80215ce4:	89 85 d8 04 00 00    	mov    %eax,0x4d8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff80215cea:	48 c7 c0 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rax
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80215cf1:	66 89 95 d6 04 00 00 	mov    %dx,0x4d6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff80215cf8:	48 89 c2             	mov    %rax,%rdx
ffffffff80215cfb:	66 89 85 e0 04 00 00 	mov    %ax,0x4e0(%rbp)
ffffffff80215d02:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215d06:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215d0a:	89 85 e8 04 00 00    	mov    %eax,0x4e8(%rbp)
ffffffff80215d10:	48 c7 c0 09 bc 20 80 	mov    $0xffffffff8020bc09,%rax
ffffffff80215d17:	66 89 95 e6 04 00 00 	mov    %dx,0x4e6(%rbp)
ffffffff80215d1e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d21:	66 89 85 f0 04 00 00 	mov    %ax,0x4f0(%rbp)
ffffffff80215d28:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215d2c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215d30:	89 85 f8 04 00 00    	mov    %eax,0x4f8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80215d36:	48 c7 c0 15 bc 20 80 	mov    $0xffffffff8020bc15,%rax
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff80215d3d:	66 89 95 f6 04 00 00 	mov    %dx,0x4f6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80215d44:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d47:	66 89 85 00 05 00 00 	mov    %ax,0x500(%rbp)
ffffffff80215d4e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215d52:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215d56:	89 85 08 05 00 00    	mov    %eax,0x508(%rbp)
ffffffff80215d5c:	48 c7 c0 21 bc 20 80 	mov    $0xffffffff8020bc21,%rax
ffffffff80215d63:	66 89 95 06 05 00 00 	mov    %dx,0x506(%rbp)
ffffffff80215d6a:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d6d:	66 89 85 10 05 00 00 	mov    %ax,0x510(%rbp)
ffffffff80215d74:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215d78:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215d7c:	89 85 18 05 00 00    	mov    %eax,0x518(%rbp)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80215d82:	48 c7 c0 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rax
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80215d89:	66 89 95 16 05 00 00 	mov    %dx,0x516(%rbp)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80215d90:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d93:	66 89 85 20 05 00 00 	mov    %ax,0x520(%rbp)
ffffffff80215d9a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215d9e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215da2:	89 85 28 05 00 00    	mov    %eax,0x528(%rbp)
ffffffff80215da8:	48 c7 c0 39 bc 20 80 	mov    $0xffffffff8020bc39,%rax
ffffffff80215daf:	66 89 95 26 05 00 00 	mov    %dx,0x526(%rbp)
ffffffff80215db6:	48 89 c2             	mov    %rax,%rdx
ffffffff80215db9:	66 89 85 30 05 00 00 	mov    %ax,0x530(%rbp)
ffffffff80215dc0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215dc4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215dc8:	89 85 38 05 00 00    	mov    %eax,0x538(%rbp)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80215dce:	48 c7 c0 45 bc 20 80 	mov    $0xffffffff8020bc45,%rax
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80215dd5:	66 89 95 36 05 00 00 	mov    %dx,0x536(%rbp)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80215ddc:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80215ddf:	c7 85 dc 04 00 00 00 	movl   $0x0,0x4dc(%rbp)
ffffffff80215de6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80215de9:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff80215ded:	c7 85 e2 04 00 00 08 	movl   $0x8e000008,0x4e2(%rbp)
ffffffff80215df4:	00 00 8e 
ffffffff80215df7:	c7 85 ec 04 00 00 00 	movl   $0x0,0x4ec(%rbp)
ffffffff80215dfe:	00 00 00 
ffffffff80215e01:	c7 85 f2 04 00 00 08 	movl   $0x8e000008,0x4f2(%rbp)
ffffffff80215e08:	00 00 8e 
ffffffff80215e0b:	c7 85 fc 04 00 00 00 	movl   $0x0,0x4fc(%rbp)
ffffffff80215e12:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80215e15:	c7 85 02 05 00 00 08 	movl   $0x8e000008,0x502(%rbp)
ffffffff80215e1c:	00 00 8e 
ffffffff80215e1f:	c7 85 0c 05 00 00 00 	movl   $0x0,0x50c(%rbp)
ffffffff80215e26:	00 00 00 
ffffffff80215e29:	c7 85 12 05 00 00 08 	movl   $0x8e000008,0x512(%rbp)
ffffffff80215e30:	00 00 8e 
ffffffff80215e33:	c7 85 1c 05 00 00 00 	movl   $0x0,0x51c(%rbp)
ffffffff80215e3a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80215e3d:	c7 85 22 05 00 00 08 	movl   $0x8e000008,0x522(%rbp)
ffffffff80215e44:	00 00 8e 
ffffffff80215e47:	c7 85 2c 05 00 00 00 	movl   $0x0,0x52c(%rbp)
ffffffff80215e4e:	00 00 00 
ffffffff80215e51:	c7 85 32 05 00 00 08 	movl   $0x8e000008,0x532(%rbp)
ffffffff80215e58:	00 00 8e 
ffffffff80215e5b:	c7 85 3c 05 00 00 00 	movl   $0x0,0x53c(%rbp)
ffffffff80215e62:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80215e65:	66 89 85 40 05 00 00 	mov    %ax,0x540(%rbp)
ffffffff80215e6c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215e70:	89 85 48 05 00 00    	mov    %eax,0x548(%rbp)
ffffffff80215e76:	48 c7 c0 51 bc 20 80 	mov    $0xffffffff8020bc51,%rax
ffffffff80215e7d:	66 89 95 46 05 00 00 	mov    %dx,0x546(%rbp)
ffffffff80215e84:	48 89 c2             	mov    %rax,%rdx
ffffffff80215e87:	66 89 85 50 05 00 00 	mov    %ax,0x550(%rbp)
ffffffff80215e8e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215e92:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215e96:	89 85 58 05 00 00    	mov    %eax,0x558(%rbp)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff80215e9c:	48 c7 c0 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rax
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80215ea3:	66 89 95 56 05 00 00 	mov    %dx,0x556(%rbp)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff80215eaa:	48 89 c2             	mov    %rax,%rdx
ffffffff80215ead:	66 89 85 60 05 00 00 	mov    %ax,0x560(%rbp)
ffffffff80215eb4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215eb8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215ebc:	89 85 68 05 00 00    	mov    %eax,0x568(%rbp)
ffffffff80215ec2:	48 c7 c0 69 bc 20 80 	mov    $0xffffffff8020bc69,%rax
ffffffff80215ec9:	66 89 95 66 05 00 00 	mov    %dx,0x566(%rbp)
ffffffff80215ed0:	48 89 c2             	mov    %rax,%rdx
ffffffff80215ed3:	66 89 85 70 05 00 00 	mov    %ax,0x570(%rbp)
ffffffff80215eda:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215ede:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215ee2:	89 85 78 05 00 00    	mov    %eax,0x578(%rbp)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80215ee8:	48 c7 c0 75 bc 20 80 	mov    $0xffffffff8020bc75,%rax
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff80215eef:	66 89 95 76 05 00 00 	mov    %dx,0x576(%rbp)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80215ef6:	48 89 c2             	mov    %rax,%rdx
ffffffff80215ef9:	66 89 85 80 05 00 00 	mov    %ax,0x580(%rbp)
ffffffff80215f00:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215f04:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215f08:	89 85 88 05 00 00    	mov    %eax,0x588(%rbp)
ffffffff80215f0e:	48 c7 c0 81 bc 20 80 	mov    $0xffffffff8020bc81,%rax
ffffffff80215f15:	66 89 95 86 05 00 00 	mov    %dx,0x586(%rbp)
ffffffff80215f1c:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f1f:	66 89 85 90 05 00 00 	mov    %ax,0x590(%rbp)
ffffffff80215f26:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215f2a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215f2e:	89 85 98 05 00 00    	mov    %eax,0x598(%rbp)
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80215f34:	48 c7 c0 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rax
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80215f3b:	66 89 95 96 05 00 00 	mov    %dx,0x596(%rbp)
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80215f42:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f45:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215f49:	66 89 85 a0 05 00 00 	mov    %ax,0x5a0(%rbp)
ffffffff80215f50:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80215f54:	c7 85 42 05 00 00 08 	movl   $0x8e000008,0x542(%rbp)
ffffffff80215f5b:	00 00 8e 
ffffffff80215f5e:	c7 85 4c 05 00 00 00 	movl   $0x0,0x54c(%rbp)
ffffffff80215f65:	00 00 00 
ffffffff80215f68:	c7 85 52 05 00 00 08 	movl   $0x8e000008,0x552(%rbp)
ffffffff80215f6f:	00 00 8e 
ffffffff80215f72:	c7 85 5c 05 00 00 00 	movl   $0x0,0x55c(%rbp)
ffffffff80215f79:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff80215f7c:	c7 85 62 05 00 00 08 	movl   $0x8e000008,0x562(%rbp)
ffffffff80215f83:	00 00 8e 
ffffffff80215f86:	c7 85 6c 05 00 00 00 	movl   $0x0,0x56c(%rbp)
ffffffff80215f8d:	00 00 00 
ffffffff80215f90:	c7 85 72 05 00 00 08 	movl   $0x8e000008,0x572(%rbp)
ffffffff80215f97:	00 00 8e 
ffffffff80215f9a:	c7 85 7c 05 00 00 00 	movl   $0x0,0x57c(%rbp)
ffffffff80215fa1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80215fa4:	c7 85 82 05 00 00 08 	movl   $0x8e000008,0x582(%rbp)
ffffffff80215fab:	00 00 8e 
ffffffff80215fae:	c7 85 8c 05 00 00 00 	movl   $0x0,0x58c(%rbp)
ffffffff80215fb5:	00 00 00 
ffffffff80215fb8:	c7 85 92 05 00 00 08 	movl   $0x8e000008,0x592(%rbp)
ffffffff80215fbf:	00 00 8e 
ffffffff80215fc2:	c7 85 9c 05 00 00 00 	movl   $0x0,0x59c(%rbp)
ffffffff80215fc9:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80215fcc:	c7 85 a2 05 00 00 08 	movl   $0x8e000008,0x5a2(%rbp)
ffffffff80215fd3:	00 00 8e 
ffffffff80215fd6:	66 89 95 a6 05 00 00 	mov    %dx,0x5a6(%rbp)
ffffffff80215fdd:	89 85 a8 05 00 00    	mov    %eax,0x5a8(%rbp)
ffffffff80215fe3:	48 c7 c0 99 bc 20 80 	mov    $0xffffffff8020bc99,%rax
ffffffff80215fea:	66 89 85 b0 05 00 00 	mov    %ax,0x5b0(%rbp)
ffffffff80215ff1:	48 89 c2             	mov    %rax,%rdx
ffffffff80215ff4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215ff8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215ffc:	89 85 b8 05 00 00    	mov    %eax,0x5b8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216002:	48 c7 c0 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rax
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216009:	66 89 95 b6 05 00 00 	mov    %dx,0x5b6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216010:	48 89 c2             	mov    %rax,%rdx
ffffffff80216013:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216017:	66 89 85 c0 05 00 00 	mov    %ax,0x5c0(%rbp)
ffffffff8021601e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216022:	89 85 c8 05 00 00    	mov    %eax,0x5c8(%rbp)
ffffffff80216028:	48 c7 c0 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rax
ffffffff8021602f:	66 89 95 c6 05 00 00 	mov    %dx,0x5c6(%rbp)
ffffffff80216036:	48 89 c2             	mov    %rax,%rdx
ffffffff80216039:	66 89 85 d0 05 00 00 	mov    %ax,0x5d0(%rbp)
ffffffff80216040:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216044:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216048:	89 85 d8 05 00 00    	mov    %eax,0x5d8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021604e:	48 c7 c0 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rax
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216055:	66 89 95 d6 05 00 00 	mov    %dx,0x5d6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021605c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021605f:	66 89 85 e0 05 00 00 	mov    %ax,0x5e0(%rbp)
ffffffff80216066:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021606a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021606e:	89 85 e8 05 00 00    	mov    %eax,0x5e8(%rbp)
ffffffff80216074:	48 c7 c0 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rax
ffffffff8021607b:	66 89 95 e6 05 00 00 	mov    %dx,0x5e6(%rbp)
ffffffff80216082:	48 89 c2             	mov    %rax,%rdx
ffffffff80216085:	66 89 85 f0 05 00 00 	mov    %ax,0x5f0(%rbp)
ffffffff8021608c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216090:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216094:	89 85 f8 05 00 00    	mov    %eax,0x5f8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8021609a:	48 c7 c0 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rax
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff802160a1:	66 89 95 f6 05 00 00 	mov    %dx,0x5f6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff802160a8:	48 89 c2             	mov    %rax,%rdx
ffffffff802160ab:	66 89 85 00 06 00 00 	mov    %ax,0x600(%rbp)
ffffffff802160b2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802160b6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802160ba:	89 85 08 06 00 00    	mov    %eax,0x608(%rbp)
ffffffff802160c0:	48 c7 c0 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rax
ffffffff802160c7:	66 89 95 06 06 00 00 	mov    %dx,0x606(%rbp)
ffffffff802160ce:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff802160d1:	c7 85 ac 05 00 00 00 	movl   $0x0,0x5ac(%rbp)
ffffffff802160d8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff802160db:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff802160df:	c7 85 b2 05 00 00 08 	movl   $0x8e000008,0x5b2(%rbp)
ffffffff802160e6:	00 00 8e 
ffffffff802160e9:	c7 85 bc 05 00 00 00 	movl   $0x0,0x5bc(%rbp)
ffffffff802160f0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff802160f3:	c7 85 c2 05 00 00 08 	movl   $0x8e000008,0x5c2(%rbp)
ffffffff802160fa:	00 00 8e 
ffffffff802160fd:	c7 85 cc 05 00 00 00 	movl   $0x0,0x5cc(%rbp)
ffffffff80216104:	00 00 00 
ffffffff80216107:	c7 85 d2 05 00 00 08 	movl   $0x8e000008,0x5d2(%rbp)
ffffffff8021610e:	00 00 8e 
ffffffff80216111:	c7 85 dc 05 00 00 00 	movl   $0x0,0x5dc(%rbp)
ffffffff80216118:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021611b:	66 44 89 85 e2 05 00 	mov    %r8w,0x5e2(%rbp)
ffffffff80216122:	00 
ffffffff80216123:	66 44 89 8d e4 05 00 	mov    %r9w,0x5e4(%rbp)
ffffffff8021612a:	00 
ffffffff8021612b:	c7 85 ec 05 00 00 00 	movl   $0x0,0x5ec(%rbp)
ffffffff80216132:	00 00 00 
ffffffff80216135:	c7 85 f2 05 00 00 08 	movl   $0x8e000008,0x5f2(%rbp)
ffffffff8021613c:	00 00 8e 
ffffffff8021613f:	c7 85 fc 05 00 00 00 	movl   $0x0,0x5fc(%rbp)
ffffffff80216146:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216149:	c7 85 02 06 00 00 08 	movl   $0x8e000008,0x602(%rbp)
ffffffff80216150:	00 00 8e 
ffffffff80216153:	c7 85 0c 06 00 00 00 	movl   $0x0,0x60c(%rbp)
ffffffff8021615a:	00 00 00 
ffffffff8021615d:	66 89 85 10 06 00 00 	mov    %ax,0x610(%rbp)
ffffffff80216164:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216168:	89 85 18 06 00 00    	mov    %eax,0x618(%rbp)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8021616e:	48 c7 c0 ed bc 20 80 	mov    $0xffffffff8020bced,%rax
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216175:	66 89 95 16 06 00 00 	mov    %dx,0x616(%rbp)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8021617c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021617f:	66 89 85 20 06 00 00 	mov    %ax,0x620(%rbp)
ffffffff80216186:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021618a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021618e:	89 85 28 06 00 00    	mov    %eax,0x628(%rbp)
ffffffff80216194:	48 c7 c0 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rax
ffffffff8021619b:	66 89 95 26 06 00 00 	mov    %dx,0x626(%rbp)
ffffffff802161a2:	48 89 c2             	mov    %rax,%rdx
ffffffff802161a5:	66 89 85 30 06 00 00 	mov    %ax,0x630(%rbp)
ffffffff802161ac:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802161b0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802161b4:	89 85 38 06 00 00    	mov    %eax,0x638(%rbp)
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff802161ba:	48 c7 c0 05 bd 20 80 	mov    $0xffffffff8020bd05,%rax
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff802161c1:	66 89 95 36 06 00 00 	mov    %dx,0x636(%rbp)
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff802161c8:	48 89 c2             	mov    %rax,%rdx
ffffffff802161cb:	66 89 85 40 06 00 00 	mov    %ax,0x640(%rbp)
ffffffff802161d2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802161d6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802161da:	89 85 48 06 00 00    	mov    %eax,0x648(%rbp)
ffffffff802161e0:	48 c7 c0 11 bd 20 80 	mov    $0xffffffff8020bd11,%rax
ffffffff802161e7:	66 89 95 46 06 00 00 	mov    %dx,0x646(%rbp)
ffffffff802161ee:	48 89 c2             	mov    %rax,%rdx
ffffffff802161f1:	66 89 85 50 06 00 00 	mov    %ax,0x650(%rbp)
ffffffff802161f8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802161fc:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216200:	89 85 58 06 00 00    	mov    %eax,0x658(%rbp)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff80216206:	48 c7 c0 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rax
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8021620d:	66 89 95 56 06 00 00 	mov    %dx,0x656(%rbp)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff80216214:	48 89 c2             	mov    %rax,%rdx
ffffffff80216217:	66 89 85 60 06 00 00 	mov    %ax,0x660(%rbp)
ffffffff8021621e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216222:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216226:	89 85 68 06 00 00    	mov    %eax,0x668(%rbp)
ffffffff8021622c:	48 c7 c0 29 bd 20 80 	mov    $0xffffffff8020bd29,%rax
ffffffff80216233:	66 89 95 66 06 00 00 	mov    %dx,0x666(%rbp)
ffffffff8021623a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021623d:	66 89 85 70 06 00 00 	mov    %ax,0x670(%rbp)
ffffffff80216244:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216248:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8021624c:	c7 85 12 06 00 00 08 	movl   $0x8e000008,0x612(%rbp)
ffffffff80216253:	00 00 8e 
ffffffff80216256:	c7 85 1c 06 00 00 00 	movl   $0x0,0x61c(%rbp)
ffffffff8021625d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff80216260:	c7 85 22 06 00 00 08 	movl   $0x8e000008,0x622(%rbp)
ffffffff80216267:	00 00 8e 
ffffffff8021626a:	c7 85 2c 06 00 00 00 	movl   $0x0,0x62c(%rbp)
ffffffff80216271:	00 00 00 
ffffffff80216274:	c7 85 32 06 00 00 08 	movl   $0x8e000008,0x632(%rbp)
ffffffff8021627b:	00 00 8e 
ffffffff8021627e:	c7 85 3c 06 00 00 00 	movl   $0x0,0x63c(%rbp)
ffffffff80216285:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff80216288:	c7 85 42 06 00 00 08 	movl   $0x8e000008,0x642(%rbp)
ffffffff8021628f:	00 00 8e 
ffffffff80216292:	c7 85 4c 06 00 00 00 	movl   $0x0,0x64c(%rbp)
ffffffff80216299:	00 00 00 
ffffffff8021629c:	c7 85 52 06 00 00 08 	movl   $0x8e000008,0x652(%rbp)
ffffffff802162a3:	00 00 8e 
ffffffff802162a6:	c7 85 5c 06 00 00 00 	movl   $0x0,0x65c(%rbp)
ffffffff802162ad:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff802162b0:	c7 85 62 06 00 00 08 	movl   $0x8e000008,0x662(%rbp)
ffffffff802162b7:	00 00 8e 
ffffffff802162ba:	c7 85 6c 06 00 00 00 	movl   $0x0,0x66c(%rbp)
ffffffff802162c1:	00 00 00 
ffffffff802162c4:	66 44 89 95 72 06 00 	mov    %r10w,0x672(%rbp)
ffffffff802162cb:	00 
ffffffff802162cc:	c6 85 74 06 00 00 00 	movb   $0x0,0x674(%rbp)
ffffffff802162d3:	89 85 78 06 00 00    	mov    %eax,0x678(%rbp)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff802162d9:	48 c7 c0 35 bd 20 80 	mov    $0xffffffff8020bd35,%rax
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff802162e0:	66 89 95 76 06 00 00 	mov    %dx,0x676(%rbp)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff802162e7:	48 89 c2             	mov    %rax,%rdx
ffffffff802162ea:	66 89 85 80 06 00 00 	mov    %ax,0x680(%rbp)
ffffffff802162f1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802162f5:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802162f9:	89 85 88 06 00 00    	mov    %eax,0x688(%rbp)
ffffffff802162ff:	48 c7 c0 41 bd 20 80 	mov    $0xffffffff8020bd41,%rax
ffffffff80216306:	66 89 95 86 06 00 00 	mov    %dx,0x686(%rbp)
ffffffff8021630d:	48 89 c2             	mov    %rax,%rdx
ffffffff80216310:	66 89 85 90 06 00 00 	mov    %ax,0x690(%rbp)
ffffffff80216317:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021631b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021631f:	89 85 98 06 00 00    	mov    %eax,0x698(%rbp)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff80216325:	48 c7 c0 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rax
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8021632c:	66 89 95 96 06 00 00 	mov    %dx,0x696(%rbp)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff80216333:	48 89 c2             	mov    %rax,%rdx
ffffffff80216336:	66 89 85 a0 06 00 00 	mov    %ax,0x6a0(%rbp)
ffffffff8021633d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216341:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216345:	89 85 a8 06 00 00    	mov    %eax,0x6a8(%rbp)
ffffffff8021634b:	48 c7 c0 59 bd 20 80 	mov    $0xffffffff8020bd59,%rax
ffffffff80216352:	66 89 95 a6 06 00 00 	mov    %dx,0x6a6(%rbp)
ffffffff80216359:	48 89 c2             	mov    %rax,%rdx
ffffffff8021635c:	66 89 85 b0 06 00 00 	mov    %ax,0x6b0(%rbp)
ffffffff80216363:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216367:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021636b:	89 85 b8 06 00 00    	mov    %eax,0x6b8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff80216371:	48 c7 c0 65 bd 20 80 	mov    $0xffffffff8020bd65,%rax
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff80216378:	66 89 95 b6 06 00 00 	mov    %dx,0x6b6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8021637f:	48 89 c2             	mov    %rax,%rdx
ffffffff80216382:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216386:	66 89 85 c0 06 00 00 	mov    %ax,0x6c0(%rbp)
ffffffff8021638d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216391:	89 85 c8 06 00 00    	mov    %eax,0x6c8(%rbp)
ffffffff80216397:	48 c7 c0 71 bd 20 80 	mov    $0xffffffff8020bd71,%rax
ffffffff8021639e:	66 89 95 c6 06 00 00 	mov    %dx,0x6c6(%rbp)
ffffffff802163a5:	48 89 c2             	mov    %rax,%rdx
ffffffff802163a8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802163ac:	66 89 85 d0 06 00 00 	mov    %ax,0x6d0(%rbp)
ffffffff802163b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802163b7:	66 89 95 d6 06 00 00 	mov    %dx,0x6d6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff802163be:	c6 85 75 06 00 00 8e 	movb   $0x8e,0x675(%rbp)
ffffffff802163c5:	c7 85 7c 06 00 00 00 	movl   $0x0,0x67c(%rbp)
ffffffff802163cc:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff802163cf:	c7 85 82 06 00 00 08 	movl   $0x8e000008,0x682(%rbp)
ffffffff802163d6:	00 00 8e 
ffffffff802163d9:	c7 85 8c 06 00 00 00 	movl   $0x0,0x68c(%rbp)
ffffffff802163e0:	00 00 00 
ffffffff802163e3:	c7 85 92 06 00 00 08 	movl   $0x8e000008,0x692(%rbp)
ffffffff802163ea:	00 00 8e 
ffffffff802163ed:	c7 85 9c 06 00 00 00 	movl   $0x0,0x69c(%rbp)
ffffffff802163f4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff802163f7:	c7 85 a2 06 00 00 08 	movl   $0x8e000008,0x6a2(%rbp)
ffffffff802163fe:	00 00 8e 
ffffffff80216401:	c7 85 ac 06 00 00 00 	movl   $0x0,0x6ac(%rbp)
ffffffff80216408:	00 00 00 
ffffffff8021640b:	c7 85 b2 06 00 00 08 	movl   $0x8e000008,0x6b2(%rbp)
ffffffff80216412:	00 00 8e 
ffffffff80216415:	c7 85 bc 06 00 00 00 	movl   $0x0,0x6bc(%rbp)
ffffffff8021641c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8021641f:	c7 85 c2 06 00 00 08 	movl   $0x8e000008,0x6c2(%rbp)
ffffffff80216426:	00 00 8e 
ffffffff80216429:	c7 85 cc 06 00 00 00 	movl   $0x0,0x6cc(%rbp)
ffffffff80216430:	00 00 00 
ffffffff80216433:	c7 85 d2 06 00 00 08 	movl   $0x8e000008,0x6d2(%rbp)
ffffffff8021643a:	00 00 8e 
ffffffff8021643d:	89 85 d8 06 00 00    	mov    %eax,0x6d8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216443:	48 c7 c0 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rax
ffffffff8021644a:	66 89 85 e0 06 00 00 	mov    %ax,0x6e0(%rbp)
ffffffff80216451:	48 89 c2             	mov    %rax,%rdx
ffffffff80216454:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216458:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021645c:	89 85 e8 06 00 00    	mov    %eax,0x6e8(%rbp)
ffffffff80216462:	48 c7 c0 89 bd 20 80 	mov    $0xffffffff8020bd89,%rax
ffffffff80216469:	66 89 95 e6 06 00 00 	mov    %dx,0x6e6(%rbp)
ffffffff80216470:	48 89 c2             	mov    %rax,%rdx
ffffffff80216473:	66 89 85 f0 06 00 00 	mov    %ax,0x6f0(%rbp)
ffffffff8021647a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021647e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216482:	89 85 f8 06 00 00    	mov    %eax,0x6f8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216488:	48 c7 c0 95 bd 20 80 	mov    $0xffffffff8020bd95,%rax
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8021648f:	66 89 95 f6 06 00 00 	mov    %dx,0x6f6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216496:	48 89 c2             	mov    %rax,%rdx
ffffffff80216499:	66 89 85 00 07 00 00 	mov    %ax,0x700(%rbp)
ffffffff802164a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802164a4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802164a8:	89 85 08 07 00 00    	mov    %eax,0x708(%rbp)
ffffffff802164ae:	48 c7 c0 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rax
ffffffff802164b5:	66 89 95 06 07 00 00 	mov    %dx,0x706(%rbp)
ffffffff802164bc:	48 89 c2             	mov    %rax,%rdx
ffffffff802164bf:	66 89 85 10 07 00 00 	mov    %ax,0x710(%rbp)
ffffffff802164c6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802164ca:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802164ce:	89 85 18 07 00 00    	mov    %eax,0x718(%rbp)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff802164d4:	48 c7 c0 ad bd 20 80 	mov    $0xffffffff8020bdad,%rax
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff802164db:	66 89 95 16 07 00 00 	mov    %dx,0x716(%rbp)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff802164e2:	48 89 c2             	mov    %rax,%rdx
ffffffff802164e5:	66 89 85 20 07 00 00 	mov    %ax,0x720(%rbp)
ffffffff802164ec:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802164f0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802164f4:	89 85 28 07 00 00    	mov    %eax,0x728(%rbp)
ffffffff802164fa:	48 c7 c0 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rax
ffffffff80216501:	66 89 95 26 07 00 00 	mov    %dx,0x726(%rbp)
ffffffff80216508:	48 89 c2             	mov    %rax,%rdx
ffffffff8021650b:	66 89 85 30 07 00 00 	mov    %ax,0x730(%rbp)
ffffffff80216512:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216516:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021651a:	89 85 38 07 00 00    	mov    %eax,0x738(%rbp)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216520:	48 c7 c0 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rax
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216527:	66 89 95 36 07 00 00 	mov    %dx,0x736(%rbp)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff8021652e:	48 89 c2             	mov    %rax,%rdx
ffffffff80216531:	66 89 85 40 07 00 00 	mov    %ax,0x740(%rbp)
ffffffff80216538:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021653c:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff80216540:	c7 85 dc 06 00 00 00 	movl   $0x0,0x6dc(%rbp)
ffffffff80216547:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8021654a:	c7 85 e2 06 00 00 08 	movl   $0x8e000008,0x6e2(%rbp)
ffffffff80216551:	00 00 8e 
ffffffff80216554:	c7 85 ec 06 00 00 00 	movl   $0x0,0x6ec(%rbp)
ffffffff8021655b:	00 00 00 
ffffffff8021655e:	c7 85 f2 06 00 00 08 	movl   $0x8e000008,0x6f2(%rbp)
ffffffff80216565:	00 00 8e 
ffffffff80216568:	c7 85 fc 06 00 00 00 	movl   $0x0,0x6fc(%rbp)
ffffffff8021656f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216572:	c7 85 02 07 00 00 08 	movl   $0x8e000008,0x702(%rbp)
ffffffff80216579:	00 00 8e 
ffffffff8021657c:	c7 85 0c 07 00 00 00 	movl   $0x0,0x70c(%rbp)
ffffffff80216583:	00 00 00 
ffffffff80216586:	c7 85 12 07 00 00 08 	movl   $0x8e000008,0x712(%rbp)
ffffffff8021658d:	00 00 8e 
ffffffff80216590:	c7 85 1c 07 00 00 00 	movl   $0x0,0x71c(%rbp)
ffffffff80216597:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8021659a:	c7 85 22 07 00 00 08 	movl   $0x8e000008,0x722(%rbp)
ffffffff802165a1:	00 00 8e 
ffffffff802165a4:	c7 85 2c 07 00 00 00 	movl   $0x0,0x72c(%rbp)
ffffffff802165ab:	00 00 00 
ffffffff802165ae:	c7 85 32 07 00 00 08 	movl   $0x8e000008,0x732(%rbp)
ffffffff802165b5:	00 00 8e 
ffffffff802165b8:	c7 85 3c 07 00 00 00 	movl   $0x0,0x73c(%rbp)
ffffffff802165bf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff802165c2:	c7 85 42 07 00 00 08 	movl   $0x8e000008,0x742(%rbp)
ffffffff802165c9:	00 00 8e 
ffffffff802165cc:	89 85 48 07 00 00    	mov    %eax,0x748(%rbp)
ffffffff802165d2:	48 c7 c0 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rax
ffffffff802165d9:	66 89 95 46 07 00 00 	mov    %dx,0x746(%rbp)
ffffffff802165e0:	48 89 c2             	mov    %rax,%rdx
ffffffff802165e3:	66 89 85 50 07 00 00 	mov    %ax,0x750(%rbp)
ffffffff802165ea:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802165ee:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802165f2:	89 85 58 07 00 00    	mov    %eax,0x758(%rbp)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff802165f8:	48 c7 c0 dd bd 20 80 	mov    $0xffffffff8020bddd,%rax
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff802165ff:	66 89 95 56 07 00 00 	mov    %dx,0x756(%rbp)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216606:	48 89 c2             	mov    %rax,%rdx
ffffffff80216609:	66 89 85 60 07 00 00 	mov    %ax,0x760(%rbp)
ffffffff80216610:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216614:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216618:	89 85 68 07 00 00    	mov    %eax,0x768(%rbp)
ffffffff8021661e:	48 c7 c0 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rax
ffffffff80216625:	66 89 95 66 07 00 00 	mov    %dx,0x766(%rbp)
ffffffff8021662c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021662f:	66 89 85 70 07 00 00 	mov    %ax,0x770(%rbp)
ffffffff80216636:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021663a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021663e:	89 85 78 07 00 00    	mov    %eax,0x778(%rbp)
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216644:	48 c7 c0 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rax
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8021664b:	66 89 95 76 07 00 00 	mov    %dx,0x776(%rbp)
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216652:	48 89 c2             	mov    %rax,%rdx
ffffffff80216655:	66 89 85 80 07 00 00 	mov    %ax,0x780(%rbp)
ffffffff8021665c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216660:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216664:	89 85 88 07 00 00    	mov    %eax,0x788(%rbp)
ffffffff8021666a:	48 c7 c0 01 be 20 80 	mov    $0xffffffff8020be01,%rax
ffffffff80216671:	66 89 95 86 07 00 00 	mov    %dx,0x786(%rbp)
ffffffff80216678:	48 89 c2             	mov    %rax,%rdx
ffffffff8021667b:	66 89 85 90 07 00 00 	mov    %ax,0x790(%rbp)
ffffffff80216682:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216686:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021668a:	89 85 98 07 00 00    	mov    %eax,0x798(%rbp)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216690:	48 c7 c0 0d be 20 80 	mov    $0xffffffff8020be0d,%rax
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216697:	66 89 95 96 07 00 00 	mov    %dx,0x796(%rbp)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8021669e:	48 89 c2             	mov    %rax,%rdx
ffffffff802166a1:	66 89 85 a0 07 00 00 	mov    %ax,0x7a0(%rbp)
ffffffff802166a8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802166ac:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802166b0:	89 85 a8 07 00 00    	mov    %eax,0x7a8(%rbp)
ffffffff802166b6:	48 c7 c0 19 be 20 80 	mov    $0xffffffff8020be19,%rax
ffffffff802166bd:	66 89 95 a6 07 00 00 	mov    %dx,0x7a6(%rbp)
ffffffff802166c4:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff802166c7:	c7 85 4c 07 00 00 00 	movl   $0x0,0x74c(%rbp)
ffffffff802166ce:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff802166d1:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff802166d5:	c7 85 52 07 00 00 08 	movl   $0x8e000008,0x752(%rbp)
ffffffff802166dc:	00 00 8e 
ffffffff802166df:	c7 85 5c 07 00 00 00 	movl   $0x0,0x75c(%rbp)
ffffffff802166e6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff802166e9:	c7 85 62 07 00 00 08 	movl   $0x8e000008,0x762(%rbp)
ffffffff802166f0:	00 00 8e 
ffffffff802166f3:	c7 85 6c 07 00 00 00 	movl   $0x0,0x76c(%rbp)
ffffffff802166fa:	00 00 00 
ffffffff802166fd:	c7 85 72 07 00 00 08 	movl   $0x8e000008,0x772(%rbp)
ffffffff80216704:	00 00 8e 
ffffffff80216707:	c7 85 7c 07 00 00 00 	movl   $0x0,0x77c(%rbp)
ffffffff8021670e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216711:	c7 85 82 07 00 00 08 	movl   $0x8e000008,0x782(%rbp)
ffffffff80216718:	00 00 8e 
ffffffff8021671b:	c7 85 8c 07 00 00 00 	movl   $0x0,0x78c(%rbp)
ffffffff80216722:	00 00 00 
ffffffff80216725:	c7 85 92 07 00 00 08 	movl   $0x8e000008,0x792(%rbp)
ffffffff8021672c:	00 00 8e 
ffffffff8021672f:	c7 85 9c 07 00 00 00 	movl   $0x0,0x79c(%rbp)
ffffffff80216736:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216739:	c7 85 a2 07 00 00 08 	movl   $0x8e000008,0x7a2(%rbp)
ffffffff80216740:	00 00 8e 
ffffffff80216743:	c7 85 ac 07 00 00 00 	movl   $0x0,0x7ac(%rbp)
ffffffff8021674a:	00 00 00 
ffffffff8021674d:	66 89 85 b0 07 00 00 	mov    %ax,0x7b0(%rbp)
ffffffff80216754:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216758:	89 85 b8 07 00 00    	mov    %eax,0x7b8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8021675e:	48 c7 c0 25 be 20 80 	mov    $0xffffffff8020be25,%rax
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216765:	66 89 95 b6 07 00 00 	mov    %dx,0x7b6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8021676c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021676f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216773:	66 89 85 c0 07 00 00 	mov    %ax,0x7c0(%rbp)
ffffffff8021677a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021677e:	89 85 c8 07 00 00    	mov    %eax,0x7c8(%rbp)
ffffffff80216784:	48 c7 c0 31 be 20 80 	mov    $0xffffffff8020be31,%rax
ffffffff8021678b:	66 89 95 c6 07 00 00 	mov    %dx,0x7c6(%rbp)
ffffffff80216792:	48 89 c2             	mov    %rax,%rdx
ffffffff80216795:	66 89 85 d0 07 00 00 	mov    %ax,0x7d0(%rbp)
ffffffff8021679c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802167a0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802167a4:	89 85 d8 07 00 00    	mov    %eax,0x7d8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff802167aa:	48 c7 c0 3d be 20 80 	mov    $0xffffffff8020be3d,%rax
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff802167b1:	66 89 95 d6 07 00 00 	mov    %dx,0x7d6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff802167b8:	48 89 c2             	mov    %rax,%rdx
ffffffff802167bb:	66 89 85 e0 07 00 00 	mov    %ax,0x7e0(%rbp)
ffffffff802167c2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802167c6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802167ca:	89 85 e8 07 00 00    	mov    %eax,0x7e8(%rbp)
ffffffff802167d0:	48 c7 c0 49 be 20 80 	mov    $0xffffffff8020be49,%rax
ffffffff802167d7:	66 89 95 e6 07 00 00 	mov    %dx,0x7e6(%rbp)
ffffffff802167de:	48 89 c2             	mov    %rax,%rdx
ffffffff802167e1:	66 89 85 f0 07 00 00 	mov    %ax,0x7f0(%rbp)
ffffffff802167e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802167ec:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802167f0:	89 85 f8 07 00 00    	mov    %eax,0x7f8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff802167f6:	48 c7 c0 55 be 20 80 	mov    $0xffffffff8020be55,%rax
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff802167fd:	66 89 95 f6 07 00 00 	mov    %dx,0x7f6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80216804:	48 89 c2             	mov    %rax,%rdx
ffffffff80216807:	66 89 85 00 08 00 00 	mov    %ax,0x800(%rbp)
ffffffff8021680e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216812:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216816:	89 85 08 08 00 00    	mov    %eax,0x808(%rbp)
ffffffff8021681c:	48 c7 c0 64 be 20 80 	mov    $0xffffffff8020be64,%rax
ffffffff80216823:	66 89 95 06 08 00 00 	mov    %dx,0x806(%rbp)
ffffffff8021682a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021682d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216831:	66 89 85 10 08 00 00 	mov    %ax,0x810(%rbp)
ffffffff80216838:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8021683c:	c7 85 b2 07 00 00 08 	movl   $0x8e000008,0x7b2(%rbp)
ffffffff80216843:	00 00 8e 
ffffffff80216846:	c7 85 bc 07 00 00 00 	movl   $0x0,0x7bc(%rbp)
ffffffff8021684d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80216850:	c7 85 c2 07 00 00 08 	movl   $0x8e000008,0x7c2(%rbp)
ffffffff80216857:	00 00 8e 
ffffffff8021685a:	c7 85 cc 07 00 00 00 	movl   $0x0,0x7cc(%rbp)
ffffffff80216861:	00 00 00 
ffffffff80216864:	c7 85 d2 07 00 00 08 	movl   $0x8e000008,0x7d2(%rbp)
ffffffff8021686b:	00 00 8e 
ffffffff8021686e:	c7 85 dc 07 00 00 00 	movl   $0x0,0x7dc(%rbp)
ffffffff80216875:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80216878:	c7 85 e2 07 00 00 08 	movl   $0x8e000008,0x7e2(%rbp)
ffffffff8021687f:	00 00 8e 
ffffffff80216882:	c7 85 ec 07 00 00 00 	movl   $0x0,0x7ec(%rbp)
ffffffff80216889:	00 00 00 
ffffffff8021688c:	c7 85 f2 07 00 00 08 	movl   $0x8e000008,0x7f2(%rbp)
ffffffff80216893:	00 00 8e 
ffffffff80216896:	c7 85 fc 07 00 00 00 	movl   $0x0,0x7fc(%rbp)
ffffffff8021689d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff802168a0:	c7 85 02 08 00 00 08 	movl   $0x8e000008,0x802(%rbp)
ffffffff802168a7:	00 00 8e 
ffffffff802168aa:	c7 85 0c 08 00 00 00 	movl   $0x0,0x80c(%rbp)
ffffffff802168b1:	00 00 00 
ffffffff802168b4:	c7 85 12 08 00 00 08 	movl   $0x8e000008,0x812(%rbp)
ffffffff802168bb:	00 00 8e 
ffffffff802168be:	66 89 95 16 08 00 00 	mov    %dx,0x816(%rbp)
ffffffff802168c5:	89 85 18 08 00 00    	mov    %eax,0x818(%rbp)
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff802168cb:	48 c7 c0 73 be 20 80 	mov    $0xffffffff8020be73,%rax
ffffffff802168d2:	66 89 85 20 08 00 00 	mov    %ax,0x820(%rbp)
ffffffff802168d9:	48 89 c2             	mov    %rax,%rdx
ffffffff802168dc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802168e0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802168e4:	89 85 28 08 00 00    	mov    %eax,0x828(%rbp)
ffffffff802168ea:	48 c7 c0 82 be 20 80 	mov    $0xffffffff8020be82,%rax
ffffffff802168f1:	66 89 95 26 08 00 00 	mov    %dx,0x826(%rbp)
ffffffff802168f8:	48 89 c2             	mov    %rax,%rdx
ffffffff802168fb:	66 89 85 30 08 00 00 	mov    %ax,0x830(%rbp)
ffffffff80216902:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216906:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021690a:	89 85 38 08 00 00    	mov    %eax,0x838(%rbp)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80216910:	48 c7 c0 91 be 20 80 	mov    $0xffffffff8020be91,%rax
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff80216917:	66 89 95 36 08 00 00 	mov    %dx,0x836(%rbp)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8021691e:	48 89 c2             	mov    %rax,%rdx
ffffffff80216921:	66 89 85 40 08 00 00 	mov    %ax,0x840(%rbp)
ffffffff80216928:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021692c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216930:	89 85 48 08 00 00    	mov    %eax,0x848(%rbp)
ffffffff80216936:	48 c7 c0 a0 be 20 80 	mov    $0xffffffff8020bea0,%rax
ffffffff8021693d:	66 89 95 46 08 00 00 	mov    %dx,0x846(%rbp)
ffffffff80216944:	48 89 c2             	mov    %rax,%rdx
ffffffff80216947:	66 89 85 50 08 00 00 	mov    %ax,0x850(%rbp)
ffffffff8021694e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216952:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216956:	89 85 58 08 00 00    	mov    %eax,0x858(%rbp)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8021695c:	48 c7 c0 af be 20 80 	mov    $0xffffffff8020beaf,%rax
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80216963:	66 89 95 56 08 00 00 	mov    %dx,0x856(%rbp)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8021696a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021696d:	66 89 85 60 08 00 00 	mov    %ax,0x860(%rbp)
ffffffff80216974:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216978:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021697c:	89 85 68 08 00 00    	mov    %eax,0x868(%rbp)
ffffffff80216982:	48 c7 c0 be be 20 80 	mov    $0xffffffff8020bebe,%rax
ffffffff80216989:	66 89 95 66 08 00 00 	mov    %dx,0x866(%rbp)
ffffffff80216990:	48 89 c2             	mov    %rax,%rdx
ffffffff80216993:	66 89 85 70 08 00 00 	mov    %ax,0x870(%rbp)
ffffffff8021699a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021699e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802169a2:	89 85 78 08 00 00    	mov    %eax,0x878(%rbp)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff802169a8:	48 c7 c0 cd be 20 80 	mov    $0xffffffff8020becd,%rax
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff802169af:	66 89 95 76 08 00 00 	mov    %dx,0x876(%rbp)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff802169b6:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff802169b9:	c7 85 1c 08 00 00 00 	movl   $0x0,0x81c(%rbp)
ffffffff802169c0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff802169c3:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff802169c7:	c7 85 22 08 00 00 08 	movl   $0x8e000008,0x822(%rbp)
ffffffff802169ce:	00 00 8e 
ffffffff802169d1:	c7 85 2c 08 00 00 00 	movl   $0x0,0x82c(%rbp)
ffffffff802169d8:	00 00 00 
ffffffff802169db:	c7 85 32 08 00 00 08 	movl   $0x8e000008,0x832(%rbp)
ffffffff802169e2:	00 00 8e 
ffffffff802169e5:	c7 85 3c 08 00 00 00 	movl   $0x0,0x83c(%rbp)
ffffffff802169ec:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff802169ef:	c7 85 42 08 00 00 08 	movl   $0x8e000008,0x842(%rbp)
ffffffff802169f6:	00 00 8e 
ffffffff802169f9:	c7 85 4c 08 00 00 00 	movl   $0x0,0x84c(%rbp)
ffffffff80216a00:	00 00 00 
ffffffff80216a03:	c7 85 52 08 00 00 08 	movl   $0x8e000008,0x852(%rbp)
ffffffff80216a0a:	00 00 8e 
ffffffff80216a0d:	c7 85 5c 08 00 00 00 	movl   $0x0,0x85c(%rbp)
ffffffff80216a14:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff80216a17:	c7 85 62 08 00 00 08 	movl   $0x8e000008,0x862(%rbp)
ffffffff80216a1e:	00 00 8e 
ffffffff80216a21:	c7 85 6c 08 00 00 00 	movl   $0x0,0x86c(%rbp)
ffffffff80216a28:	00 00 00 
ffffffff80216a2b:	c7 85 72 08 00 00 08 	movl   $0x8e000008,0x872(%rbp)
ffffffff80216a32:	00 00 8e 
ffffffff80216a35:	c7 85 7c 08 00 00 00 	movl   $0x0,0x87c(%rbp)
ffffffff80216a3c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80216a3f:	66 89 85 80 08 00 00 	mov    %ax,0x880(%rbp)
ffffffff80216a46:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216a4a:	89 85 88 08 00 00    	mov    %eax,0x888(%rbp)
ffffffff80216a50:	48 c7 c0 dc be 20 80 	mov    $0xffffffff8020bedc,%rax
ffffffff80216a57:	66 89 95 86 08 00 00 	mov    %dx,0x886(%rbp)
ffffffff80216a5e:	48 89 c2             	mov    %rax,%rdx
ffffffff80216a61:	66 89 85 90 08 00 00 	mov    %ax,0x890(%rbp)
ffffffff80216a68:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216a6c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216a70:	89 85 98 08 00 00    	mov    %eax,0x898(%rbp)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80216a76:	48 c7 c0 eb be 20 80 	mov    $0xffffffff8020beeb,%rax
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80216a7d:	66 89 95 96 08 00 00 	mov    %dx,0x896(%rbp)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80216a84:	48 89 c2             	mov    %rax,%rdx
ffffffff80216a87:	66 89 85 a0 08 00 00 	mov    %ax,0x8a0(%rbp)
ffffffff80216a8e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216a92:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216a96:	89 85 a8 08 00 00    	mov    %eax,0x8a8(%rbp)
ffffffff80216a9c:	48 c7 c0 fa be 20 80 	mov    $0xffffffff8020befa,%rax
ffffffff80216aa3:	66 89 95 a6 08 00 00 	mov    %dx,0x8a6(%rbp)
ffffffff80216aaa:	48 89 c2             	mov    %rax,%rdx
ffffffff80216aad:	66 89 85 b0 08 00 00 	mov    %ax,0x8b0(%rbp)
ffffffff80216ab4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216ab8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216abc:	89 85 b8 08 00 00    	mov    %eax,0x8b8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80216ac2:	48 c7 c0 09 bf 20 80 	mov    $0xffffffff8020bf09,%rax
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80216ac9:	66 89 95 b6 08 00 00 	mov    %dx,0x8b6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80216ad0:	48 89 c2             	mov    %rax,%rdx
ffffffff80216ad3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216ad7:	66 89 85 c0 08 00 00 	mov    %ax,0x8c0(%rbp)
ffffffff80216ade:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216ae2:	89 85 c8 08 00 00    	mov    %eax,0x8c8(%rbp)
ffffffff80216ae8:	48 c7 c0 18 bf 20 80 	mov    $0xffffffff8020bf18,%rax
ffffffff80216aef:	66 89 95 c6 08 00 00 	mov    %dx,0x8c6(%rbp)
ffffffff80216af6:	48 89 c2             	mov    %rax,%rdx
ffffffff80216af9:	66 89 85 d0 08 00 00 	mov    %ax,0x8d0(%rbp)
ffffffff80216b00:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216b04:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216b08:	89 85 d8 08 00 00    	mov    %eax,0x8d8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80216b0e:	48 c7 c0 27 bf 20 80 	mov    $0xffffffff8020bf27,%rax
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80216b15:	66 89 95 d6 08 00 00 	mov    %dx,0x8d6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80216b1c:	48 89 c2             	mov    %rax,%rdx
ffffffff80216b1f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216b23:	66 89 85 e0 08 00 00 	mov    %ax,0x8e0(%rbp)
ffffffff80216b2a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216b2e:	66 89 95 e6 08 00 00 	mov    %dx,0x8e6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80216b35:	c7 85 82 08 00 00 08 	movl   $0x8e000008,0x882(%rbp)
ffffffff80216b3c:	00 00 8e 
ffffffff80216b3f:	c7 85 8c 08 00 00 00 	movl   $0x0,0x88c(%rbp)
ffffffff80216b46:	00 00 00 
ffffffff80216b49:	c7 85 92 08 00 00 08 	movl   $0x8e000008,0x892(%rbp)
ffffffff80216b50:	00 00 8e 
ffffffff80216b53:	c7 85 9c 08 00 00 00 	movl   $0x0,0x89c(%rbp)
ffffffff80216b5a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80216b5d:	c7 85 a2 08 00 00 08 	movl   $0x8e000008,0x8a2(%rbp)
ffffffff80216b64:	00 00 8e 
ffffffff80216b67:	c7 85 ac 08 00 00 00 	movl   $0x0,0x8ac(%rbp)
ffffffff80216b6e:	00 00 00 
ffffffff80216b71:	c7 85 b2 08 00 00 08 	movl   $0x8e000008,0x8b2(%rbp)
ffffffff80216b78:	00 00 8e 
ffffffff80216b7b:	c7 85 bc 08 00 00 00 	movl   $0x0,0x8bc(%rbp)
ffffffff80216b82:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80216b85:	c7 85 c2 08 00 00 08 	movl   $0x8e000008,0x8c2(%rbp)
ffffffff80216b8c:	00 00 8e 
ffffffff80216b8f:	c7 85 cc 08 00 00 00 	movl   $0x0,0x8cc(%rbp)
ffffffff80216b96:	00 00 00 
ffffffff80216b99:	c7 85 d2 08 00 00 08 	movl   $0x8e000008,0x8d2(%rbp)
ffffffff80216ba0:	00 00 8e 
ffffffff80216ba3:	c7 85 dc 08 00 00 00 	movl   $0x0,0x8dc(%rbp)
ffffffff80216baa:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80216bad:	c7 85 e2 08 00 00 08 	movl   $0x8e000008,0x8e2(%rbp)
ffffffff80216bb4:	00 00 8e 
ffffffff80216bb7:	89 85 e8 08 00 00    	mov    %eax,0x8e8(%rbp)
ffffffff80216bbd:	48 c7 c0 36 bf 20 80 	mov    $0xffffffff8020bf36,%rax
ffffffff80216bc4:	66 89 85 f0 08 00 00 	mov    %ax,0x8f0(%rbp)
ffffffff80216bcb:	48 89 c2             	mov    %rax,%rdx
ffffffff80216bce:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216bd2:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216bd6:	89 85 f8 08 00 00    	mov    %eax,0x8f8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff80216bdc:	48 c7 c0 45 bf 20 80 	mov    $0xffffffff8020bf45,%rax
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80216be3:	66 89 95 f6 08 00 00 	mov    %dx,0x8f6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff80216bea:	48 89 c2             	mov    %rax,%rdx
ffffffff80216bed:	66 89 85 00 09 00 00 	mov    %ax,0x900(%rbp)
ffffffff80216bf4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216bf8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216bfc:	89 85 08 09 00 00    	mov    %eax,0x908(%rbp)
ffffffff80216c02:	48 c7 c0 54 bf 20 80 	mov    $0xffffffff8020bf54,%rax
ffffffff80216c09:	66 89 95 06 09 00 00 	mov    %dx,0x906(%rbp)
ffffffff80216c10:	48 89 c2             	mov    %rax,%rdx
ffffffff80216c13:	66 89 85 10 09 00 00 	mov    %ax,0x910(%rbp)
ffffffff80216c1a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216c1e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216c22:	89 85 18 09 00 00    	mov    %eax,0x918(%rbp)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80216c28:	48 c7 c0 63 bf 20 80 	mov    $0xffffffff8020bf63,%rax
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff80216c2f:	66 89 95 16 09 00 00 	mov    %dx,0x916(%rbp)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80216c36:	48 89 c2             	mov    %rax,%rdx
ffffffff80216c39:	66 89 85 20 09 00 00 	mov    %ax,0x920(%rbp)
ffffffff80216c40:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216c44:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216c48:	89 85 28 09 00 00    	mov    %eax,0x928(%rbp)
ffffffff80216c4e:	48 c7 c0 72 bf 20 80 	mov    $0xffffffff8020bf72,%rax
ffffffff80216c55:	66 89 95 26 09 00 00 	mov    %dx,0x926(%rbp)
ffffffff80216c5c:	48 89 c2             	mov    %rax,%rdx
ffffffff80216c5f:	66 89 85 30 09 00 00 	mov    %ax,0x930(%rbp)
ffffffff80216c66:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216c6a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216c6e:	89 85 38 09 00 00    	mov    %eax,0x938(%rbp)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80216c74:	48 c7 c0 81 bf 20 80 	mov    $0xffffffff8020bf81,%rax
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80216c7b:	66 89 95 36 09 00 00 	mov    %dx,0x936(%rbp)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80216c82:	48 89 c2             	mov    %rax,%rdx
ffffffff80216c85:	66 89 85 40 09 00 00 	mov    %ax,0x940(%rbp)
ffffffff80216c8c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216c90:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216c94:	89 85 48 09 00 00    	mov    %eax,0x948(%rbp)
ffffffff80216c9a:	48 c7 c0 90 bf 20 80 	mov    $0xffffffff8020bf90,%rax
ffffffff80216ca1:	66 89 95 46 09 00 00 	mov    %dx,0x946(%rbp)
ffffffff80216ca8:	48 89 c2             	mov    %rax,%rdx
ffffffff80216cab:	66 89 85 50 09 00 00 	mov    %ax,0x950(%rbp)
ffffffff80216cb2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216cb6:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80216cba:	c7 85 ec 08 00 00 00 	movl   $0x0,0x8ec(%rbp)
ffffffff80216cc1:	00 00 00 
ffffffff80216cc4:	c7 85 f2 08 00 00 08 	movl   $0x8e000008,0x8f2(%rbp)
ffffffff80216ccb:	00 00 8e 
ffffffff80216cce:	c7 85 fc 08 00 00 00 	movl   $0x0,0x8fc(%rbp)
ffffffff80216cd5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff80216cd8:	c7 85 02 09 00 00 08 	movl   $0x8e000008,0x902(%rbp)
ffffffff80216cdf:	00 00 8e 
ffffffff80216ce2:	c7 85 0c 09 00 00 00 	movl   $0x0,0x90c(%rbp)
ffffffff80216ce9:	00 00 00 
ffffffff80216cec:	c7 85 12 09 00 00 08 	movl   $0x8e000008,0x912(%rbp)
ffffffff80216cf3:	00 00 8e 
ffffffff80216cf6:	c7 85 1c 09 00 00 00 	movl   $0x0,0x91c(%rbp)
ffffffff80216cfd:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80216d00:	c7 85 22 09 00 00 08 	movl   $0x8e000008,0x922(%rbp)
ffffffff80216d07:	00 00 8e 
ffffffff80216d0a:	c7 85 2c 09 00 00 00 	movl   $0x0,0x92c(%rbp)
ffffffff80216d11:	00 00 00 
ffffffff80216d14:	c7 85 32 09 00 00 08 	movl   $0x8e000008,0x932(%rbp)
ffffffff80216d1b:	00 00 8e 
ffffffff80216d1e:	c7 85 3c 09 00 00 00 	movl   $0x0,0x93c(%rbp)
ffffffff80216d25:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80216d28:	c7 85 42 09 00 00 08 	movl   $0x8e000008,0x942(%rbp)
ffffffff80216d2f:	00 00 8e 
ffffffff80216d32:	c7 85 4c 09 00 00 00 	movl   $0x0,0x94c(%rbp)
ffffffff80216d39:	00 00 00 
ffffffff80216d3c:	c7 85 52 09 00 00 08 	movl   $0x8e000008,0x952(%rbp)
ffffffff80216d43:	00 00 8e 
ffffffff80216d46:	89 85 58 09 00 00    	mov    %eax,0x958(%rbp)
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80216d4c:	48 c7 c0 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rax
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80216d53:	66 89 95 56 09 00 00 	mov    %dx,0x956(%rbp)
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80216d5a:	48 89 c2             	mov    %rax,%rdx
ffffffff80216d5d:	66 89 85 60 09 00 00 	mov    %ax,0x960(%rbp)
ffffffff80216d64:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216d68:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216d6c:	89 85 68 09 00 00    	mov    %eax,0x968(%rbp)
ffffffff80216d72:	48 c7 c0 ae bf 20 80 	mov    $0xffffffff8020bfae,%rax
ffffffff80216d79:	66 89 95 66 09 00 00 	mov    %dx,0x966(%rbp)
ffffffff80216d80:	48 89 c2             	mov    %rax,%rdx
ffffffff80216d83:	66 89 85 70 09 00 00 	mov    %ax,0x970(%rbp)
ffffffff80216d8a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216d8e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216d92:	89 85 78 09 00 00    	mov    %eax,0x978(%rbp)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80216d98:	48 c7 c0 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rax
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80216d9f:	66 89 95 76 09 00 00 	mov    %dx,0x976(%rbp)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80216da6:	48 89 c2             	mov    %rax,%rdx
ffffffff80216da9:	66 89 85 80 09 00 00 	mov    %ax,0x980(%rbp)
ffffffff80216db0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216db4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216db8:	89 85 88 09 00 00    	mov    %eax,0x988(%rbp)
ffffffff80216dbe:	48 c7 c0 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rax
ffffffff80216dc5:	66 89 95 86 09 00 00 	mov    %dx,0x986(%rbp)
ffffffff80216dcc:	48 89 c2             	mov    %rax,%rdx
ffffffff80216dcf:	66 89 85 90 09 00 00 	mov    %ax,0x990(%rbp)
ffffffff80216dd6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216dda:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216dde:	89 85 98 09 00 00    	mov    %eax,0x998(%rbp)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80216de4:	48 c7 c0 db bf 20 80 	mov    $0xffffffff8020bfdb,%rax
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80216deb:	66 89 95 96 09 00 00 	mov    %dx,0x996(%rbp)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80216df2:	48 89 c2             	mov    %rax,%rdx
ffffffff80216df5:	66 89 85 a0 09 00 00 	mov    %ax,0x9a0(%rbp)
ffffffff80216dfc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216e00:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216e04:	89 85 a8 09 00 00    	mov    %eax,0x9a8(%rbp)
ffffffff80216e0a:	48 c7 c0 ea bf 20 80 	mov    $0xffffffff8020bfea,%rax
ffffffff80216e11:	66 89 95 a6 09 00 00 	mov    %dx,0x9a6(%rbp)
ffffffff80216e18:	48 89 c2             	mov    %rax,%rdx
ffffffff80216e1b:	66 89 85 b0 09 00 00 	mov    %ax,0x9b0(%rbp)
ffffffff80216e22:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216e26:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216e2a:	89 85 b8 09 00 00    	mov    %eax,0x9b8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80216e30:	48 c7 c0 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rax
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80216e37:	66 89 95 b6 09 00 00 	mov    %dx,0x9b6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80216e3e:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80216e41:	c7 85 5c 09 00 00 00 	movl   $0x0,0x95c(%rbp)
ffffffff80216e48:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80216e4b:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80216e4f:	c7 85 62 09 00 00 08 	movl   $0x8e000008,0x962(%rbp)
ffffffff80216e56:	00 00 8e 
ffffffff80216e59:	c7 85 6c 09 00 00 00 	movl   $0x0,0x96c(%rbp)
ffffffff80216e60:	00 00 00 
ffffffff80216e63:	c7 85 72 09 00 00 08 	movl   $0x8e000008,0x972(%rbp)
ffffffff80216e6a:	00 00 8e 
ffffffff80216e6d:	c7 85 7c 09 00 00 00 	movl   $0x0,0x97c(%rbp)
ffffffff80216e74:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80216e77:	c7 85 82 09 00 00 08 	movl   $0x8e000008,0x982(%rbp)
ffffffff80216e7e:	00 00 8e 
ffffffff80216e81:	c7 85 8c 09 00 00 00 	movl   $0x0,0x98c(%rbp)
ffffffff80216e88:	00 00 00 
ffffffff80216e8b:	c7 85 92 09 00 00 08 	movl   $0x8e000008,0x992(%rbp)
ffffffff80216e92:	00 00 8e 
ffffffff80216e95:	c7 85 9c 09 00 00 00 	movl   $0x0,0x99c(%rbp)
ffffffff80216e9c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80216e9f:	c7 85 a2 09 00 00 08 	movl   $0x8e000008,0x9a2(%rbp)
ffffffff80216ea6:	00 00 8e 
ffffffff80216ea9:	c7 85 ac 09 00 00 00 	movl   $0x0,0x9ac(%rbp)
ffffffff80216eb0:	00 00 00 
ffffffff80216eb3:	c7 85 b2 09 00 00 08 	movl   $0x8e000008,0x9b2(%rbp)
ffffffff80216eba:	00 00 8e 
ffffffff80216ebd:	c7 85 bc 09 00 00 00 	movl   $0x0,0x9bc(%rbp)
ffffffff80216ec4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80216ec7:	66 89 85 c0 09 00 00 	mov    %ax,0x9c0(%rbp)
ffffffff80216ece:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216ed2:	89 85 c8 09 00 00    	mov    %eax,0x9c8(%rbp)
ffffffff80216ed8:	48 c7 c0 08 c0 20 80 	mov    $0xffffffff8020c008,%rax
ffffffff80216edf:	66 89 95 c6 09 00 00 	mov    %dx,0x9c6(%rbp)
ffffffff80216ee6:	48 89 c2             	mov    %rax,%rdx
ffffffff80216ee9:	66 89 85 d0 09 00 00 	mov    %ax,0x9d0(%rbp)
ffffffff80216ef0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216ef4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216ef8:	89 85 d8 09 00 00    	mov    %eax,0x9d8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80216efe:	48 c7 c0 17 c0 20 80 	mov    $0xffffffff8020c017,%rax
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80216f05:	66 89 95 d6 09 00 00 	mov    %dx,0x9d6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80216f0c:	48 89 c2             	mov    %rax,%rdx
ffffffff80216f0f:	66 89 85 e0 09 00 00 	mov    %ax,0x9e0(%rbp)
ffffffff80216f16:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216f1a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216f1e:	89 85 e8 09 00 00    	mov    %eax,0x9e8(%rbp)
ffffffff80216f24:	48 c7 c0 26 c0 20 80 	mov    $0xffffffff8020c026,%rax
ffffffff80216f2b:	66 89 95 e6 09 00 00 	mov    %dx,0x9e6(%rbp)
ffffffff80216f32:	48 89 c2             	mov    %rax,%rdx
ffffffff80216f35:	66 89 85 f0 09 00 00 	mov    %ax,0x9f0(%rbp)
ffffffff80216f3c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216f40:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216f44:	89 85 f8 09 00 00    	mov    %eax,0x9f8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80216f4a:	48 c7 c0 35 c0 20 80 	mov    $0xffffffff8020c035,%rax
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80216f51:	66 89 95 f6 09 00 00 	mov    %dx,0x9f6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80216f58:	48 89 c2             	mov    %rax,%rdx
ffffffff80216f5b:	66 89 85 00 0a 00 00 	mov    %ax,0xa00(%rbp)
ffffffff80216f62:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216f66:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216f6a:	89 85 08 0a 00 00    	mov    %eax,0xa08(%rbp)
ffffffff80216f70:	48 c7 c0 44 c0 20 80 	mov    $0xffffffff8020c044,%rax
ffffffff80216f77:	66 89 95 06 0a 00 00 	mov    %dx,0xa06(%rbp)
ffffffff80216f7e:	48 89 c2             	mov    %rax,%rdx
ffffffff80216f81:	66 89 85 10 0a 00 00 	mov    %ax,0xa10(%rbp)
ffffffff80216f88:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216f8c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80216f90:	89 85 18 0a 00 00    	mov    %eax,0xa18(%rbp)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80216f96:	48 c7 c0 53 c0 20 80 	mov    $0xffffffff8020c053,%rax
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80216f9d:	66 89 95 16 0a 00 00 	mov    %dx,0xa16(%rbp)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80216fa4:	48 89 c2             	mov    %rax,%rdx
ffffffff80216fa7:	66 89 85 20 0a 00 00 	mov    %ax,0xa20(%rbp)
ffffffff80216fae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216fb2:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80216fb6:	c7 85 c2 09 00 00 08 	movl   $0x8e000008,0x9c2(%rbp)
ffffffff80216fbd:	00 00 8e 
ffffffff80216fc0:	c7 85 cc 09 00 00 00 	movl   $0x0,0x9cc(%rbp)
ffffffff80216fc7:	00 00 00 
ffffffff80216fca:	c7 85 d2 09 00 00 08 	movl   $0x8e000008,0x9d2(%rbp)
ffffffff80216fd1:	00 00 8e 
ffffffff80216fd4:	c7 85 dc 09 00 00 00 	movl   $0x0,0x9dc(%rbp)
ffffffff80216fdb:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80216fde:	66 44 89 9d e2 09 00 	mov    %r11w,0x9e2(%rbp)
ffffffff80216fe5:	00 
ffffffff80216fe6:	66 89 9d e4 09 00 00 	mov    %bx,0x9e4(%rbp)
ffffffff80216fed:	c7 85 ec 09 00 00 00 	movl   $0x0,0x9ec(%rbp)
ffffffff80216ff4:	00 00 00 
ffffffff80216ff7:	c7 85 f2 09 00 00 08 	movl   $0x8e000008,0x9f2(%rbp)
ffffffff80216ffe:	00 00 8e 
ffffffff80217001:	c7 85 fc 09 00 00 00 	movl   $0x0,0x9fc(%rbp)
ffffffff80217008:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8021700b:	c7 85 02 0a 00 00 08 	movl   $0x8e000008,0xa02(%rbp)
ffffffff80217012:	00 00 8e 
ffffffff80217015:	c7 85 0c 0a 00 00 00 	movl   $0x0,0xa0c(%rbp)
ffffffff8021701c:	00 00 00 
ffffffff8021701f:	c7 85 12 0a 00 00 08 	movl   $0x8e000008,0xa12(%rbp)
ffffffff80217026:	00 00 8e 
ffffffff80217029:	c7 85 1c 0a 00 00 00 	movl   $0x0,0xa1c(%rbp)
ffffffff80217030:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80217033:	c7 85 22 0a 00 00 08 	movl   $0x8e000008,0xa22(%rbp)
ffffffff8021703a:	00 00 8e 
ffffffff8021703d:	89 85 28 0a 00 00    	mov    %eax,0xa28(%rbp)
ffffffff80217043:	48 c7 c0 62 c0 20 80 	mov    $0xffffffff8020c062,%rax
ffffffff8021704a:	66 89 95 26 0a 00 00 	mov    %dx,0xa26(%rbp)
ffffffff80217051:	48 89 c2             	mov    %rax,%rdx
ffffffff80217054:	66 89 85 30 0a 00 00 	mov    %ax,0xa30(%rbp)
ffffffff8021705b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021705f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217063:	89 85 38 0a 00 00    	mov    %eax,0xa38(%rbp)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80217069:	48 c7 c0 71 c0 20 80 	mov    $0xffffffff8020c071,%rax
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80217070:	66 89 95 36 0a 00 00 	mov    %dx,0xa36(%rbp)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80217077:	48 89 c2             	mov    %rax,%rdx
ffffffff8021707a:	66 89 85 40 0a 00 00 	mov    %ax,0xa40(%rbp)
ffffffff80217081:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217085:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217089:	89 85 48 0a 00 00    	mov    %eax,0xa48(%rbp)
ffffffff8021708f:	48 c7 c0 80 c0 20 80 	mov    $0xffffffff8020c080,%rax
ffffffff80217096:	66 89 95 46 0a 00 00 	mov    %dx,0xa46(%rbp)
ffffffff8021709d:	48 89 c2             	mov    %rax,%rdx
ffffffff802170a0:	66 89 85 50 0a 00 00 	mov    %ax,0xa50(%rbp)
ffffffff802170a7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802170ab:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802170af:	89 85 58 0a 00 00    	mov    %eax,0xa58(%rbp)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff802170b5:	48 c7 c0 8f c0 20 80 	mov    $0xffffffff8020c08f,%rax
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff802170bc:	66 89 95 56 0a 00 00 	mov    %dx,0xa56(%rbp)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff802170c3:	48 89 c2             	mov    %rax,%rdx
ffffffff802170c6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802170ca:	66 89 85 60 0a 00 00 	mov    %ax,0xa60(%rbp)
ffffffff802170d1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802170d5:	66 89 95 66 0a 00 00 	mov    %dx,0xa66(%rbp)
ffffffff802170dc:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff802170e1:	89 85 68 0a 00 00    	mov    %eax,0xa68(%rbp)
ffffffff802170e7:	48 c7 c0 9e c0 20 80 	mov    $0xffffffff8020c09e,%rax
ffffffff802170ee:	66 89 85 70 0a 00 00 	mov    %ax,0xa70(%rbp)
ffffffff802170f5:	66 89 95 72 0a 00 00 	mov    %dx,0xa72(%rbp)
ffffffff802170fc:	48 89 c2             	mov    %rax,%rdx
ffffffff802170ff:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217103:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217107:	89 85 78 0a 00 00    	mov    %eax,0xa78(%rbp)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8021710d:	48 c7 c0 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rax
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80217114:	66 89 95 76 0a 00 00 	mov    %dx,0xa76(%rbp)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8021711b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021711e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217122:	66 89 85 80 0a 00 00 	mov    %ax,0xa80(%rbp)
ffffffff80217129:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8021712d:	c7 85 2c 0a 00 00 00 	movl   $0x0,0xa2c(%rbp)
ffffffff80217134:	00 00 00 
ffffffff80217137:	c7 85 32 0a 00 00 08 	movl   $0x8e000008,0xa32(%rbp)
ffffffff8021713e:	00 00 8e 
ffffffff80217141:	c7 85 3c 0a 00 00 00 	movl   $0x0,0xa3c(%rbp)
ffffffff80217148:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff8021714b:	c7 85 42 0a 00 00 08 	movl   $0x8e000008,0xa42(%rbp)
ffffffff80217152:	00 00 8e 
ffffffff80217155:	c7 85 4c 0a 00 00 00 	movl   $0x0,0xa4c(%rbp)
ffffffff8021715c:	00 00 00 
ffffffff8021715f:	c7 85 52 0a 00 00 08 	movl   $0x8e000008,0xa52(%rbp)
ffffffff80217166:	00 00 8e 
ffffffff80217169:	c7 85 5c 0a 00 00 00 	movl   $0x0,0xa5c(%rbp)
ffffffff80217170:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80217173:	c7 85 62 0a 00 00 08 	movl   $0x8e000008,0xa62(%rbp)
ffffffff8021717a:	00 00 8e 
ffffffff8021717d:	c7 85 6c 0a 00 00 00 	movl   $0x0,0xa6c(%rbp)
ffffffff80217184:	00 00 00 
ffffffff80217187:	c6 85 74 0a 00 00 00 	movb   $0x0,0xa74(%rbp)
ffffffff8021718e:	c6 85 75 0a 00 00 8e 	movb   $0x8e,0xa75(%rbp)
ffffffff80217195:	c7 85 7c 0a 00 00 00 	movl   $0x0,0xa7c(%rbp)
ffffffff8021719c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8021719f:	c7 85 82 0a 00 00 08 	movl   $0x8e000008,0xa82(%rbp)
ffffffff802171a6:	00 00 8e 
ffffffff802171a9:	66 89 95 86 0a 00 00 	mov    %dx,0xa86(%rbp)
ffffffff802171b0:	89 85 88 0a 00 00    	mov    %eax,0xa88(%rbp)
ffffffff802171b6:	48 c7 c0 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rax
ffffffff802171bd:	66 89 85 90 0a 00 00 	mov    %ax,0xa90(%rbp)
ffffffff802171c4:	48 89 c2             	mov    %rax,%rdx
ffffffff802171c7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802171cb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802171cf:	89 85 98 0a 00 00    	mov    %eax,0xa98(%rbp)
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff802171d5:	48 c7 c0 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rax
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff802171dc:	66 89 95 96 0a 00 00 	mov    %dx,0xa96(%rbp)
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff802171e3:	48 89 c2             	mov    %rax,%rdx
ffffffff802171e6:	66 89 85 a0 0a 00 00 	mov    %ax,0xaa0(%rbp)
ffffffff802171ed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802171f1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802171f5:	89 85 a8 0a 00 00    	mov    %eax,0xaa8(%rbp)
ffffffff802171fb:	48 c7 c0 da c0 20 80 	mov    $0xffffffff8020c0da,%rax
ffffffff80217202:	66 89 95 a6 0a 00 00 	mov    %dx,0xaa6(%rbp)
ffffffff80217209:	48 89 c2             	mov    %rax,%rdx
ffffffff8021720c:	66 89 85 b0 0a 00 00 	mov    %ax,0xab0(%rbp)
ffffffff80217213:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217217:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021721b:	89 85 b8 0a 00 00    	mov    %eax,0xab8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80217221:	48 c7 c0 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rax
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80217228:	66 89 95 b6 0a 00 00 	mov    %dx,0xab6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8021722f:	48 89 c2             	mov    %rax,%rdx
ffffffff80217232:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217236:	66 89 85 c0 0a 00 00 	mov    %ax,0xac0(%rbp)
ffffffff8021723d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217241:	89 85 c8 0a 00 00    	mov    %eax,0xac8(%rbp)
ffffffff80217247:	48 c7 c0 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rax
ffffffff8021724e:	66 89 95 c6 0a 00 00 	mov    %dx,0xac6(%rbp)
ffffffff80217255:	48 89 c2             	mov    %rax,%rdx
ffffffff80217258:	66 89 85 d0 0a 00 00 	mov    %ax,0xad0(%rbp)
ffffffff8021725f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217263:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217267:	89 85 d8 0a 00 00    	mov    %eax,0xad8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8021726d:	48 c7 c0 07 c1 20 80 	mov    $0xffffffff8020c107,%rax
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80217274:	66 89 95 d6 0a 00 00 	mov    %dx,0xad6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8021727b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021727e:	66 89 85 e0 0a 00 00 	mov    %ax,0xae0(%rbp)
ffffffff80217285:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217289:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021728d:	89 85 e8 0a 00 00    	mov    %eax,0xae8(%rbp)
ffffffff80217293:	48 c7 c0 16 c1 20 80 	mov    $0xffffffff8020c116,%rax
ffffffff8021729a:	66 89 95 e6 0a 00 00 	mov    %dx,0xae6(%rbp)
ffffffff802172a1:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff802172a4:	c7 85 8c 0a 00 00 00 	movl   $0x0,0xa8c(%rbp)
ffffffff802172ab:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff802172ae:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff802172b2:	c7 85 92 0a 00 00 08 	movl   $0x8e000008,0xa92(%rbp)
ffffffff802172b9:	00 00 8e 
ffffffff802172bc:	c7 85 9c 0a 00 00 00 	movl   $0x0,0xa9c(%rbp)
ffffffff802172c3:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff802172c6:	c7 85 a2 0a 00 00 08 	movl   $0x8e000008,0xaa2(%rbp)
ffffffff802172cd:	00 00 8e 
ffffffff802172d0:	c7 85 ac 0a 00 00 00 	movl   $0x0,0xaac(%rbp)
ffffffff802172d7:	00 00 00 
ffffffff802172da:	c7 85 b2 0a 00 00 08 	movl   $0x8e000008,0xab2(%rbp)
ffffffff802172e1:	00 00 8e 
ffffffff802172e4:	c7 85 bc 0a 00 00 00 	movl   $0x0,0xabc(%rbp)
ffffffff802172eb:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff802172ee:	c7 85 c2 0a 00 00 08 	movl   $0x8e000008,0xac2(%rbp)
ffffffff802172f5:	00 00 8e 
ffffffff802172f8:	c7 85 cc 0a 00 00 00 	movl   $0x0,0xacc(%rbp)
ffffffff802172ff:	00 00 00 
ffffffff80217302:	c7 85 d2 0a 00 00 08 	movl   $0x8e000008,0xad2(%rbp)
ffffffff80217309:	00 00 8e 
ffffffff8021730c:	c7 85 dc 0a 00 00 00 	movl   $0x0,0xadc(%rbp)
ffffffff80217313:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80217316:	c7 85 e2 0a 00 00 08 	movl   $0x8e000008,0xae2(%rbp)
ffffffff8021731d:	00 00 8e 
ffffffff80217320:	c7 85 ec 0a 00 00 00 	movl   $0x0,0xaec(%rbp)
ffffffff80217327:	00 00 00 
ffffffff8021732a:	66 89 85 f0 0a 00 00 	mov    %ax,0xaf0(%rbp)
ffffffff80217331:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217335:	89 85 f8 0a 00 00    	mov    %eax,0xaf8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8021733b:	48 c7 c0 25 c1 20 80 	mov    $0xffffffff8020c125,%rax
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80217342:	66 89 95 f6 0a 00 00 	mov    %dx,0xaf6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80217349:	48 89 c2             	mov    %rax,%rdx
ffffffff8021734c:	66 89 85 00 0b 00 00 	mov    %ax,0xb00(%rbp)
ffffffff80217353:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217357:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021735b:	89 85 08 0b 00 00    	mov    %eax,0xb08(%rbp)
ffffffff80217361:	48 c7 c0 34 c1 20 80 	mov    $0xffffffff8020c134,%rax
ffffffff80217368:	66 89 95 06 0b 00 00 	mov    %dx,0xb06(%rbp)
ffffffff8021736f:	48 89 c2             	mov    %rax,%rdx
ffffffff80217372:	66 89 85 10 0b 00 00 	mov    %ax,0xb10(%rbp)
ffffffff80217379:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021737d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217381:	89 85 18 0b 00 00    	mov    %eax,0xb18(%rbp)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff80217387:	48 c7 c0 43 c1 20 80 	mov    $0xffffffff8020c143,%rax
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8021738e:	66 89 95 16 0b 00 00 	mov    %dx,0xb16(%rbp)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff80217395:	48 89 c2             	mov    %rax,%rdx
ffffffff80217398:	66 89 85 20 0b 00 00 	mov    %ax,0xb20(%rbp)
ffffffff8021739f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802173a3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802173a7:	89 85 28 0b 00 00    	mov    %eax,0xb28(%rbp)
ffffffff802173ad:	48 c7 c0 52 c1 20 80 	mov    $0xffffffff8020c152,%rax
ffffffff802173b4:	66 89 95 26 0b 00 00 	mov    %dx,0xb26(%rbp)
ffffffff802173bb:	48 89 c2             	mov    %rax,%rdx
ffffffff802173be:	66 89 85 30 0b 00 00 	mov    %ax,0xb30(%rbp)
ffffffff802173c5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802173c9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802173cd:	89 85 38 0b 00 00    	mov    %eax,0xb38(%rbp)
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff802173d3:	48 c7 c0 61 c1 20 80 	mov    $0xffffffff8020c161,%rax
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff802173da:	66 89 95 36 0b 00 00 	mov    %dx,0xb36(%rbp)
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff802173e1:	48 89 c2             	mov    %rax,%rdx
ffffffff802173e4:	66 89 85 40 0b 00 00 	mov    %ax,0xb40(%rbp)
ffffffff802173eb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802173ef:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802173f3:	89 85 48 0b 00 00    	mov    %eax,0xb48(%rbp)
ffffffff802173f9:	48 c7 c0 70 c1 20 80 	mov    $0xffffffff8020c170,%rax
ffffffff80217400:	66 89 95 46 0b 00 00 	mov    %dx,0xb46(%rbp)
ffffffff80217407:	48 89 c2             	mov    %rax,%rdx
ffffffff8021740a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021740e:	66 89 85 50 0b 00 00 	mov    %ax,0xb50(%rbp)
ffffffff80217415:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217419:	66 89 95 56 0b 00 00 	mov    %dx,0xb56(%rbp)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80217420:	c7 85 f2 0a 00 00 08 	movl   $0x8e000008,0xaf2(%rbp)
ffffffff80217427:	00 00 8e 
ffffffff8021742a:	c7 85 fc 0a 00 00 00 	movl   $0x0,0xafc(%rbp)
ffffffff80217431:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80217434:	c7 85 02 0b 00 00 08 	movl   $0x8e000008,0xb02(%rbp)
ffffffff8021743b:	00 00 8e 
ffffffff8021743e:	c7 85 0c 0b 00 00 00 	movl   $0x0,0xb0c(%rbp)
ffffffff80217445:	00 00 00 
ffffffff80217448:	c7 85 12 0b 00 00 08 	movl   $0x8e000008,0xb12(%rbp)
ffffffff8021744f:	00 00 8e 
ffffffff80217452:	c7 85 1c 0b 00 00 00 	movl   $0x0,0xb1c(%rbp)
ffffffff80217459:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8021745c:	c7 85 22 0b 00 00 08 	movl   $0x8e000008,0xb22(%rbp)
ffffffff80217463:	00 00 8e 
ffffffff80217466:	c7 85 2c 0b 00 00 00 	movl   $0x0,0xb2c(%rbp)
ffffffff8021746d:	00 00 00 
ffffffff80217470:	c7 85 32 0b 00 00 08 	movl   $0x8e000008,0xb32(%rbp)
ffffffff80217477:	00 00 8e 
ffffffff8021747a:	c7 85 3c 0b 00 00 00 	movl   $0x0,0xb3c(%rbp)
ffffffff80217481:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80217484:	c7 85 42 0b 00 00 08 	movl   $0x8e000008,0xb42(%rbp)
ffffffff8021748b:	00 00 8e 
ffffffff8021748e:	c7 85 4c 0b 00 00 00 	movl   $0x0,0xb4c(%rbp)
ffffffff80217495:	00 00 00 
ffffffff80217498:	c7 85 52 0b 00 00 08 	movl   $0x8e000008,0xb52(%rbp)
ffffffff8021749f:	00 00 8e 
ffffffff802174a2:	89 85 58 0b 00 00    	mov    %eax,0xb58(%rbp)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff802174a8:	48 c7 c0 7f c1 20 80 	mov    $0xffffffff8020c17f,%rax
ffffffff802174af:	66 89 85 60 0b 00 00 	mov    %ax,0xb60(%rbp)
ffffffff802174b6:	48 89 c2             	mov    %rax,%rdx
ffffffff802174b9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802174bd:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802174c1:	89 85 68 0b 00 00    	mov    %eax,0xb68(%rbp)
ffffffff802174c7:	48 c7 c0 8e c1 20 80 	mov    $0xffffffff8020c18e,%rax
ffffffff802174ce:	66 89 95 66 0b 00 00 	mov    %dx,0xb66(%rbp)
ffffffff802174d5:	48 89 c2             	mov    %rax,%rdx
ffffffff802174d8:	66 89 85 70 0b 00 00 	mov    %ax,0xb70(%rbp)
ffffffff802174df:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802174e3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802174e7:	89 85 78 0b 00 00    	mov    %eax,0xb78(%rbp)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff802174ed:	48 c7 c0 9d c1 20 80 	mov    $0xffffffff8020c19d,%rax
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff802174f4:	66 89 95 76 0b 00 00 	mov    %dx,0xb76(%rbp)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff802174fb:	48 89 c2             	mov    %rax,%rdx
ffffffff802174fe:	66 89 85 80 0b 00 00 	mov    %ax,0xb80(%rbp)
ffffffff80217505:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217509:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021750d:	89 85 88 0b 00 00    	mov    %eax,0xb88(%rbp)
ffffffff80217513:	48 c7 c0 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rax
ffffffff8021751a:	66 89 95 86 0b 00 00 	mov    %dx,0xb86(%rbp)
ffffffff80217521:	48 89 c2             	mov    %rax,%rdx
ffffffff80217524:	66 89 85 90 0b 00 00 	mov    %ax,0xb90(%rbp)
ffffffff8021752b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021752f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217533:	89 85 98 0b 00 00    	mov    %eax,0xb98(%rbp)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217539:	48 c7 c0 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rax
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217540:	66 89 95 96 0b 00 00 	mov    %dx,0xb96(%rbp)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217547:	48 89 c2             	mov    %rax,%rdx
ffffffff8021754a:	66 89 85 a0 0b 00 00 	mov    %ax,0xba0(%rbp)
ffffffff80217551:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217555:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217559:	89 85 a8 0b 00 00    	mov    %eax,0xba8(%rbp)
ffffffff8021755f:	48 c7 c0 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rax
ffffffff80217566:	66 89 95 a6 0b 00 00 	mov    %dx,0xba6(%rbp)
ffffffff8021756d:	48 89 c2             	mov    %rax,%rdx
ffffffff80217570:	66 89 85 b0 0b 00 00 	mov    %ax,0xbb0(%rbp)
ffffffff80217577:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021757b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021757f:	89 85 b8 0b 00 00    	mov    %eax,0xbb8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217585:	48 c7 c0 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rax
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8021758c:	66 89 95 b6 0b 00 00 	mov    %dx,0xbb6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217593:	48 89 c2             	mov    %rax,%rdx
ffffffff80217596:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021759a:	66 89 85 c0 0b 00 00 	mov    %ax,0xbc0(%rbp)
ffffffff802175a1:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff802175a5:	c7 85 5c 0b 00 00 00 	movl   $0x0,0xb5c(%rbp)
ffffffff802175ac:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff802175af:	c7 85 62 0b 00 00 08 	movl   $0x8e000008,0xb62(%rbp)
ffffffff802175b6:	00 00 8e 
ffffffff802175b9:	c7 85 6c 0b 00 00 00 	movl   $0x0,0xb6c(%rbp)
ffffffff802175c0:	00 00 00 
ffffffff802175c3:	c7 85 72 0b 00 00 08 	movl   $0x8e000008,0xb72(%rbp)
ffffffff802175ca:	00 00 8e 
ffffffff802175cd:	c7 85 7c 0b 00 00 00 	movl   $0x0,0xb7c(%rbp)
ffffffff802175d4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff802175d7:	c7 85 82 0b 00 00 08 	movl   $0x8e000008,0xb82(%rbp)
ffffffff802175de:	00 00 8e 
ffffffff802175e1:	c7 85 8c 0b 00 00 00 	movl   $0x0,0xb8c(%rbp)
ffffffff802175e8:	00 00 00 
ffffffff802175eb:	c7 85 92 0b 00 00 08 	movl   $0x8e000008,0xb92(%rbp)
ffffffff802175f2:	00 00 8e 
ffffffff802175f5:	c7 85 9c 0b 00 00 00 	movl   $0x0,0xb9c(%rbp)
ffffffff802175fc:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff802175ff:	c7 85 a2 0b 00 00 08 	movl   $0x8e000008,0xba2(%rbp)
ffffffff80217606:	00 00 8e 
ffffffff80217609:	c7 85 ac 0b 00 00 00 	movl   $0x0,0xbac(%rbp)
ffffffff80217610:	00 00 00 
ffffffff80217613:	c7 85 b2 0b 00 00 08 	movl   $0x8e000008,0xbb2(%rbp)
ffffffff8021761a:	00 00 8e 
ffffffff8021761d:	c7 85 bc 0b 00 00 00 	movl   $0x0,0xbbc(%rbp)
ffffffff80217624:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217627:	c7 85 c2 0b 00 00 08 	movl   $0x8e000008,0xbc2(%rbp)
ffffffff8021762e:	00 00 8e 
ffffffff80217631:	89 85 c8 0b 00 00    	mov    %eax,0xbc8(%rbp)
ffffffff80217637:	48 c7 c0 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rax
ffffffff8021763e:	66 89 95 c6 0b 00 00 	mov    %dx,0xbc6(%rbp)
ffffffff80217645:	48 89 c2             	mov    %rax,%rdx
ffffffff80217648:	66 89 85 d0 0b 00 00 	mov    %ax,0xbd0(%rbp)
ffffffff8021764f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217653:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217657:	89 85 d8 0b 00 00    	mov    %eax,0xbd8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8021765d:	48 c7 c0 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rax
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217664:	66 89 95 d6 0b 00 00 	mov    %dx,0xbd6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8021766b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021766e:	66 89 85 e0 0b 00 00 	mov    %ax,0xbe0(%rbp)
ffffffff80217675:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217679:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021767d:	89 85 e8 0b 00 00    	mov    %eax,0xbe8(%rbp)
ffffffff80217683:	48 c7 c0 06 c2 20 80 	mov    $0xffffffff8020c206,%rax
ffffffff8021768a:	66 89 95 e6 0b 00 00 	mov    %dx,0xbe6(%rbp)
ffffffff80217691:	48 89 c2             	mov    %rax,%rdx
ffffffff80217694:	66 89 85 f0 0b 00 00 	mov    %ax,0xbf0(%rbp)
ffffffff8021769b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021769f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802176a3:	89 85 f8 0b 00 00    	mov    %eax,0xbf8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff802176a9:	48 c7 c0 15 c2 20 80 	mov    $0xffffffff8020c215,%rax
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff802176b0:	66 89 95 f6 0b 00 00 	mov    %dx,0xbf6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff802176b7:	48 89 c2             	mov    %rax,%rdx
ffffffff802176ba:	66 89 85 00 0c 00 00 	mov    %ax,0xc00(%rbp)
ffffffff802176c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802176c5:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802176c9:	89 85 08 0c 00 00    	mov    %eax,0xc08(%rbp)
ffffffff802176cf:	48 c7 c0 24 c2 20 80 	mov    $0xffffffff8020c224,%rax
ffffffff802176d6:	66 89 95 06 0c 00 00 	mov    %dx,0xc06(%rbp)
ffffffff802176dd:	48 89 c2             	mov    %rax,%rdx
ffffffff802176e0:	66 89 85 10 0c 00 00 	mov    %ax,0xc10(%rbp)
ffffffff802176e7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802176eb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802176ef:	89 85 18 0c 00 00    	mov    %eax,0xc18(%rbp)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff802176f5:	48 c7 c0 33 c2 20 80 	mov    $0xffffffff8020c233,%rax
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff802176fc:	66 89 95 16 0c 00 00 	mov    %dx,0xc16(%rbp)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217703:	48 89 c2             	mov    %rax,%rdx
ffffffff80217706:	66 89 85 20 0c 00 00 	mov    %ax,0xc20(%rbp)
ffffffff8021770d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217711:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217715:	89 85 28 0c 00 00    	mov    %eax,0xc28(%rbp)
ffffffff8021771b:	48 c7 c0 42 c2 20 80 	mov    $0xffffffff8020c242,%rax
ffffffff80217722:	66 89 95 26 0c 00 00 	mov    %dx,0xc26(%rbp)
ffffffff80217729:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff8021772c:	c7 85 cc 0b 00 00 00 	movl   $0x0,0xbcc(%rbp)
ffffffff80217733:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217736:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff8021773a:	c7 85 d2 0b 00 00 08 	movl   $0x8e000008,0xbd2(%rbp)
ffffffff80217741:	00 00 8e 
ffffffff80217744:	c7 85 dc 0b 00 00 00 	movl   $0x0,0xbdc(%rbp)
ffffffff8021774b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8021774e:	c7 85 e2 0b 00 00 08 	movl   $0x8e000008,0xbe2(%rbp)
ffffffff80217755:	00 00 8e 
ffffffff80217758:	c7 85 ec 0b 00 00 00 	movl   $0x0,0xbec(%rbp)
ffffffff8021775f:	00 00 00 
ffffffff80217762:	c7 85 f2 0b 00 00 08 	movl   $0x8e000008,0xbf2(%rbp)
ffffffff80217769:	00 00 8e 
ffffffff8021776c:	c7 85 fc 0b 00 00 00 	movl   $0x0,0xbfc(%rbp)
ffffffff80217773:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217776:	c7 85 02 0c 00 00 08 	movl   $0x8e000008,0xc02(%rbp)
ffffffff8021777d:	00 00 8e 
ffffffff80217780:	c7 85 0c 0c 00 00 00 	movl   $0x0,0xc0c(%rbp)
ffffffff80217787:	00 00 00 
ffffffff8021778a:	c7 85 12 0c 00 00 08 	movl   $0x8e000008,0xc12(%rbp)
ffffffff80217791:	00 00 8e 
ffffffff80217794:	c7 85 1c 0c 00 00 00 	movl   $0x0,0xc1c(%rbp)
ffffffff8021779b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff8021779e:	c7 85 22 0c 00 00 08 	movl   $0x8e000008,0xc22(%rbp)
ffffffff802177a5:	00 00 8e 
ffffffff802177a8:	c7 85 2c 0c 00 00 00 	movl   $0x0,0xc2c(%rbp)
ffffffff802177af:	00 00 00 
ffffffff802177b2:	66 89 85 30 0c 00 00 	mov    %ax,0xc30(%rbp)
ffffffff802177b9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802177bd:	89 85 38 0c 00 00    	mov    %eax,0xc38(%rbp)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff802177c3:	48 c7 c0 51 c2 20 80 	mov    $0xffffffff8020c251,%rax
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff802177ca:	66 89 95 36 0c 00 00 	mov    %dx,0xc36(%rbp)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff802177d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802177d4:	66 89 85 40 0c 00 00 	mov    %ax,0xc40(%rbp)
ffffffff802177db:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802177df:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802177e3:	89 85 48 0c 00 00    	mov    %eax,0xc48(%rbp)
ffffffff802177e9:	48 c7 c0 60 c2 20 80 	mov    $0xffffffff8020c260,%rax
ffffffff802177f0:	66 89 95 46 0c 00 00 	mov    %dx,0xc46(%rbp)
ffffffff802177f7:	48 89 c2             	mov    %rax,%rdx
ffffffff802177fa:	66 89 85 50 0c 00 00 	mov    %ax,0xc50(%rbp)
ffffffff80217801:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217805:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217809:	89 85 58 0c 00 00    	mov    %eax,0xc58(%rbp)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff8021780f:	48 c7 c0 6f c2 20 80 	mov    $0xffffffff8020c26f,%rax
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80217816:	66 89 95 56 0c 00 00 	mov    %dx,0xc56(%rbp)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff8021781d:	48 89 c2             	mov    %rax,%rdx
ffffffff80217820:	66 89 85 60 0c 00 00 	mov    %ax,0xc60(%rbp)
ffffffff80217827:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021782b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021782f:	89 85 68 0c 00 00    	mov    %eax,0xc68(%rbp)
ffffffff80217835:	48 c7 c0 7e c2 20 80 	mov    $0xffffffff8020c27e,%rax
ffffffff8021783c:	66 89 95 66 0c 00 00 	mov    %dx,0xc66(%rbp)
ffffffff80217843:	48 89 c2             	mov    %rax,%rdx
ffffffff80217846:	66 89 85 70 0c 00 00 	mov    %ax,0xc70(%rbp)
ffffffff8021784d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217851:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217855:	89 85 78 0c 00 00    	mov    %eax,0xc78(%rbp)
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff8021785b:	48 c7 c0 8d c2 20 80 	mov    $0xffffffff8020c28d,%rax
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80217862:	66 89 95 76 0c 00 00 	mov    %dx,0xc76(%rbp)
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80217869:	48 89 c2             	mov    %rax,%rdx
ffffffff8021786c:	66 89 85 80 0c 00 00 	mov    %ax,0xc80(%rbp)
ffffffff80217873:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217877:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021787b:	89 85 88 0c 00 00    	mov    %eax,0xc88(%rbp)
ffffffff80217881:	48 c7 c0 9c c2 20 80 	mov    $0xffffffff8020c29c,%rax
ffffffff80217888:	66 89 95 86 0c 00 00 	mov    %dx,0xc86(%rbp)
ffffffff8021788f:	48 89 c2             	mov    %rax,%rdx
ffffffff80217892:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217896:	66 89 85 90 0c 00 00 	mov    %ax,0xc90(%rbp)
ffffffff8021789d:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff802178a1:	c7 85 32 0c 00 00 08 	movl   $0x8e000008,0xc32(%rbp)
ffffffff802178a8:	00 00 8e 
ffffffff802178ab:	c7 85 3c 0c 00 00 00 	movl   $0x0,0xc3c(%rbp)
ffffffff802178b2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff802178b5:	c7 85 42 0c 00 00 08 	movl   $0x8e000008,0xc42(%rbp)
ffffffff802178bc:	00 00 8e 
ffffffff802178bf:	c7 85 4c 0c 00 00 00 	movl   $0x0,0xc4c(%rbp)
ffffffff802178c6:	00 00 00 
ffffffff802178c9:	c7 85 52 0c 00 00 08 	movl   $0x8e000008,0xc52(%rbp)
ffffffff802178d0:	00 00 8e 
ffffffff802178d3:	c7 85 5c 0c 00 00 00 	movl   $0x0,0xc5c(%rbp)
ffffffff802178da:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff802178dd:	c7 85 62 0c 00 00 08 	movl   $0x8e000008,0xc62(%rbp)
ffffffff802178e4:	00 00 8e 
ffffffff802178e7:	c7 85 6c 0c 00 00 00 	movl   $0x0,0xc6c(%rbp)
ffffffff802178ee:	00 00 00 
ffffffff802178f1:	c7 85 72 0c 00 00 08 	movl   $0x8e000008,0xc72(%rbp)
ffffffff802178f8:	00 00 8e 
ffffffff802178fb:	c7 85 7c 0c 00 00 00 	movl   $0x0,0xc7c(%rbp)
ffffffff80217902:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80217905:	c7 85 82 0c 00 00 08 	movl   $0x8e000008,0xc82(%rbp)
ffffffff8021790c:	00 00 8e 
ffffffff8021790f:	c7 85 8c 0c 00 00 00 	movl   $0x0,0xc8c(%rbp)
ffffffff80217916:	00 00 00 
ffffffff80217919:	c7 85 92 0c 00 00 08 	movl   $0x8e000008,0xc92(%rbp)
ffffffff80217920:	00 00 8e 
ffffffff80217923:	66 89 95 96 0c 00 00 	mov    %dx,0xc96(%rbp)
ffffffff8021792a:	89 85 98 0c 00 00    	mov    %eax,0xc98(%rbp)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217930:	48 c7 c0 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rax
ffffffff80217937:	66 89 85 a0 0c 00 00 	mov    %ax,0xca0(%rbp)
ffffffff8021793e:	48 89 c2             	mov    %rax,%rdx
ffffffff80217941:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217945:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217949:	89 85 a8 0c 00 00    	mov    %eax,0xca8(%rbp)
ffffffff8021794f:	48 c7 c0 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rax
ffffffff80217956:	66 89 95 a6 0c 00 00 	mov    %dx,0xca6(%rbp)
ffffffff8021795d:	48 89 c2             	mov    %rax,%rdx
ffffffff80217960:	66 89 85 b0 0c 00 00 	mov    %ax,0xcb0(%rbp)
ffffffff80217967:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021796b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021796f:	89 85 b8 0c 00 00    	mov    %eax,0xcb8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80217975:	48 c7 c0 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rax
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff8021797c:	66 89 95 b6 0c 00 00 	mov    %dx,0xcb6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80217983:	48 89 c2             	mov    %rax,%rdx
ffffffff80217986:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021798a:	66 89 85 c0 0c 00 00 	mov    %ax,0xcc0(%rbp)
ffffffff80217991:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217995:	89 85 c8 0c 00 00    	mov    %eax,0xcc8(%rbp)
ffffffff8021799b:	48 c7 c0 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rax
ffffffff802179a2:	66 89 95 c6 0c 00 00 	mov    %dx,0xcc6(%rbp)
ffffffff802179a9:	48 89 c2             	mov    %rax,%rdx
ffffffff802179ac:	66 89 85 d0 0c 00 00 	mov    %ax,0xcd0(%rbp)
ffffffff802179b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802179b7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802179bb:	89 85 d8 0c 00 00    	mov    %eax,0xcd8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802179c1:	48 c7 c0 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rax
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff802179c8:	66 89 95 d6 0c 00 00 	mov    %dx,0xcd6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802179cf:	48 89 c2             	mov    %rax,%rdx
ffffffff802179d2:	66 89 85 e0 0c 00 00 	mov    %ax,0xce0(%rbp)
ffffffff802179d9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802179dd:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802179e1:	89 85 e8 0c 00 00    	mov    %eax,0xce8(%rbp)
ffffffff802179e7:	48 c7 c0 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rax
ffffffff802179ee:	66 89 95 e6 0c 00 00 	mov    %dx,0xce6(%rbp)
ffffffff802179f5:	48 89 c2             	mov    %rax,%rdx
ffffffff802179f8:	66 89 85 f0 0c 00 00 	mov    %ax,0xcf0(%rbp)
ffffffff802179ff:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217a03:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217a07:	89 85 f8 0c 00 00    	mov    %eax,0xcf8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80217a0d:	48 c7 c0 05 c3 20 80 	mov    $0xffffffff8020c305,%rax
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80217a14:	66 89 95 f6 0c 00 00 	mov    %dx,0xcf6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80217a1b:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80217a1e:	c7 85 9c 0c 00 00 00 	movl   $0x0,0xc9c(%rbp)
ffffffff80217a25:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80217a28:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217a2c:	c7 85 a2 0c 00 00 08 	movl   $0x8e000008,0xca2(%rbp)
ffffffff80217a33:	00 00 8e 
ffffffff80217a36:	c7 85 ac 0c 00 00 00 	movl   $0x0,0xcac(%rbp)
ffffffff80217a3d:	00 00 00 
ffffffff80217a40:	c7 85 b2 0c 00 00 08 	movl   $0x8e000008,0xcb2(%rbp)
ffffffff80217a47:	00 00 8e 
ffffffff80217a4a:	c7 85 bc 0c 00 00 00 	movl   $0x0,0xcbc(%rbp)
ffffffff80217a51:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80217a54:	c7 85 c2 0c 00 00 08 	movl   $0x8e000008,0xcc2(%rbp)
ffffffff80217a5b:	00 00 8e 
ffffffff80217a5e:	c7 85 cc 0c 00 00 00 	movl   $0x0,0xccc(%rbp)
ffffffff80217a65:	00 00 00 
ffffffff80217a68:	c7 85 d2 0c 00 00 08 	movl   $0x8e000008,0xcd2(%rbp)
ffffffff80217a6f:	00 00 8e 
ffffffff80217a72:	c7 85 dc 0c 00 00 00 	movl   $0x0,0xcdc(%rbp)
ffffffff80217a79:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80217a7c:	c7 85 e2 0c 00 00 08 	movl   $0x8e000008,0xce2(%rbp)
ffffffff80217a83:	00 00 8e 
ffffffff80217a86:	c7 85 ec 0c 00 00 00 	movl   $0x0,0xcec(%rbp)
ffffffff80217a8d:	00 00 00 
ffffffff80217a90:	c7 85 f2 0c 00 00 08 	movl   $0x8e000008,0xcf2(%rbp)
ffffffff80217a97:	00 00 8e 
ffffffff80217a9a:	c7 85 fc 0c 00 00 00 	movl   $0x0,0xcfc(%rbp)
ffffffff80217aa1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80217aa4:	66 89 85 00 0d 00 00 	mov    %ax,0xd00(%rbp)
ffffffff80217aab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217aaf:	89 85 08 0d 00 00    	mov    %eax,0xd08(%rbp)
ffffffff80217ab5:	48 c7 c0 14 c3 20 80 	mov    $0xffffffff8020c314,%rax
ffffffff80217abc:	66 89 95 06 0d 00 00 	mov    %dx,0xd06(%rbp)
ffffffff80217ac3:	48 89 c2             	mov    %rax,%rdx
ffffffff80217ac6:	66 89 85 10 0d 00 00 	mov    %ax,0xd10(%rbp)
ffffffff80217acd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217ad1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217ad5:	89 85 18 0d 00 00    	mov    %eax,0xd18(%rbp)
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80217adb:	48 c7 c0 23 c3 20 80 	mov    $0xffffffff8020c323,%rax
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80217ae2:	66 89 95 16 0d 00 00 	mov    %dx,0xd16(%rbp)
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80217ae9:	48 89 c2             	mov    %rax,%rdx
ffffffff80217aec:	66 89 85 20 0d 00 00 	mov    %ax,0xd20(%rbp)
ffffffff80217af3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217af7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217afb:	89 85 28 0d 00 00    	mov    %eax,0xd28(%rbp)
ffffffff80217b01:	48 c7 c0 32 c3 20 80 	mov    $0xffffffff8020c332,%rax
ffffffff80217b08:	66 89 95 26 0d 00 00 	mov    %dx,0xd26(%rbp)
ffffffff80217b0f:	48 89 c2             	mov    %rax,%rdx
ffffffff80217b12:	66 89 85 30 0d 00 00 	mov    %ax,0xd30(%rbp)
ffffffff80217b19:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217b1d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217b21:	89 85 38 0d 00 00    	mov    %eax,0xd38(%rbp)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80217b27:	48 c7 c0 41 c3 20 80 	mov    $0xffffffff8020c341,%rax
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80217b2e:	66 89 95 36 0d 00 00 	mov    %dx,0xd36(%rbp)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80217b35:	48 89 c2             	mov    %rax,%rdx
ffffffff80217b38:	66 89 85 40 0d 00 00 	mov    %ax,0xd40(%rbp)
ffffffff80217b3f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217b43:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217b47:	89 85 48 0d 00 00    	mov    %eax,0xd48(%rbp)
ffffffff80217b4d:	48 c7 c0 50 c3 20 80 	mov    $0xffffffff8020c350,%rax
ffffffff80217b54:	66 89 95 46 0d 00 00 	mov    %dx,0xd46(%rbp)
ffffffff80217b5b:	48 89 c2             	mov    %rax,%rdx
ffffffff80217b5e:	66 89 85 50 0d 00 00 	mov    %ax,0xd50(%rbp)
ffffffff80217b65:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217b69:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217b6d:	89 85 58 0d 00 00    	mov    %eax,0xd58(%rbp)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80217b73:	48 c7 c0 5f c3 20 80 	mov    $0xffffffff8020c35f,%rax
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80217b7a:	66 89 95 56 0d 00 00 	mov    %dx,0xd56(%rbp)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80217b81:	48 89 c2             	mov    %rax,%rdx
ffffffff80217b84:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217b88:	66 89 85 60 0d 00 00 	mov    %ax,0xd60(%rbp)
ffffffff80217b8f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217b93:	66 89 95 66 0d 00 00 	mov    %dx,0xd66(%rbp)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80217b9a:	c7 85 02 0d 00 00 08 	movl   $0x8e000008,0xd02(%rbp)
ffffffff80217ba1:	00 00 8e 
ffffffff80217ba4:	c7 85 0c 0d 00 00 00 	movl   $0x0,0xd0c(%rbp)
ffffffff80217bab:	00 00 00 
ffffffff80217bae:	c7 85 12 0d 00 00 08 	movl   $0x8e000008,0xd12(%rbp)
ffffffff80217bb5:	00 00 8e 
ffffffff80217bb8:	c7 85 1c 0d 00 00 00 	movl   $0x0,0xd1c(%rbp)
ffffffff80217bbf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80217bc2:	c7 85 22 0d 00 00 08 	movl   $0x8e000008,0xd22(%rbp)
ffffffff80217bc9:	00 00 8e 
ffffffff80217bcc:	c7 85 2c 0d 00 00 00 	movl   $0x0,0xd2c(%rbp)
ffffffff80217bd3:	00 00 00 
ffffffff80217bd6:	c7 85 32 0d 00 00 08 	movl   $0x8e000008,0xd32(%rbp)
ffffffff80217bdd:	00 00 8e 
ffffffff80217be0:	c7 85 3c 0d 00 00 00 	movl   $0x0,0xd3c(%rbp)
ffffffff80217be7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80217bea:	c7 85 42 0d 00 00 08 	movl   $0x8e000008,0xd42(%rbp)
ffffffff80217bf1:	00 00 8e 
ffffffff80217bf4:	c7 85 4c 0d 00 00 00 	movl   $0x0,0xd4c(%rbp)
ffffffff80217bfb:	00 00 00 
ffffffff80217bfe:	c7 85 52 0d 00 00 08 	movl   $0x8e000008,0xd52(%rbp)
ffffffff80217c05:	00 00 8e 
ffffffff80217c08:	c7 85 5c 0d 00 00 00 	movl   $0x0,0xd5c(%rbp)
ffffffff80217c0f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80217c12:	c7 85 62 0d 00 00 08 	movl   $0x8e000008,0xd62(%rbp)
ffffffff80217c19:	00 00 8e 
ffffffff80217c1c:	89 85 68 0d 00 00    	mov    %eax,0xd68(%rbp)
ffffffff80217c22:	48 c7 c0 6e c3 20 80 	mov    $0xffffffff8020c36e,%rax
ffffffff80217c29:	66 89 85 70 0d 00 00 	mov    %ax,0xd70(%rbp)
ffffffff80217c30:	48 89 c2             	mov    %rax,%rdx
ffffffff80217c33:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217c37:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217c3b:	89 85 78 0d 00 00    	mov    %eax,0xd78(%rbp)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80217c41:	48 c7 c0 7d c3 20 80 	mov    $0xffffffff8020c37d,%rax
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80217c48:	66 89 95 76 0d 00 00 	mov    %dx,0xd76(%rbp)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80217c4f:	48 89 c2             	mov    %rax,%rdx
ffffffff80217c52:	66 89 85 80 0d 00 00 	mov    %ax,0xd80(%rbp)
ffffffff80217c59:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217c5d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217c61:	89 85 88 0d 00 00    	mov    %eax,0xd88(%rbp)
ffffffff80217c67:	48 c7 c0 8c c3 20 80 	mov    $0xffffffff8020c38c,%rax
ffffffff80217c6e:	66 89 95 86 0d 00 00 	mov    %dx,0xd86(%rbp)
ffffffff80217c75:	48 89 c2             	mov    %rax,%rdx
ffffffff80217c78:	66 89 85 90 0d 00 00 	mov    %ax,0xd90(%rbp)
ffffffff80217c7f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217c83:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217c87:	89 85 98 0d 00 00    	mov    %eax,0xd98(%rbp)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80217c8d:	48 c7 c0 9b c3 20 80 	mov    $0xffffffff8020c39b,%rax
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80217c94:	66 89 95 96 0d 00 00 	mov    %dx,0xd96(%rbp)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80217c9b:	48 89 c2             	mov    %rax,%rdx
ffffffff80217c9e:	66 89 85 a0 0d 00 00 	mov    %ax,0xda0(%rbp)
ffffffff80217ca5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217ca9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217cad:	89 85 a8 0d 00 00    	mov    %eax,0xda8(%rbp)
ffffffff80217cb3:	48 c7 c0 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rax
ffffffff80217cba:	66 89 95 a6 0d 00 00 	mov    %dx,0xda6(%rbp)
ffffffff80217cc1:	48 89 c2             	mov    %rax,%rdx
ffffffff80217cc4:	66 89 85 b0 0d 00 00 	mov    %ax,0xdb0(%rbp)
ffffffff80217ccb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217ccf:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217cd3:	89 85 b8 0d 00 00    	mov    %eax,0xdb8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80217cd9:	48 c7 c0 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rax
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80217ce0:	66 89 95 b6 0d 00 00 	mov    %dx,0xdb6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80217ce7:	48 89 c2             	mov    %rax,%rdx
ffffffff80217cea:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217cee:	66 89 85 c0 0d 00 00 	mov    %ax,0xdc0(%rbp)
ffffffff80217cf5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217cf9:	89 85 c8 0d 00 00    	mov    %eax,0xdc8(%rbp)
ffffffff80217cff:	48 c7 c0 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rax
ffffffff80217d06:	66 89 95 c6 0d 00 00 	mov    %dx,0xdc6(%rbp)
ffffffff80217d0d:	48 89 c2             	mov    %rax,%rdx
ffffffff80217d10:	66 89 85 d0 0d 00 00 	mov    %ax,0xdd0(%rbp)
ffffffff80217d17:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217d1b:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80217d1f:	c7 85 6c 0d 00 00 00 	movl   $0x0,0xd6c(%rbp)
ffffffff80217d26:	00 00 00 
ffffffff80217d29:	c7 85 72 0d 00 00 08 	movl   $0x8e000008,0xd72(%rbp)
ffffffff80217d30:	00 00 8e 
ffffffff80217d33:	c7 85 7c 0d 00 00 00 	movl   $0x0,0xd7c(%rbp)
ffffffff80217d3a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80217d3d:	c7 85 82 0d 00 00 08 	movl   $0x8e000008,0xd82(%rbp)
ffffffff80217d44:	00 00 8e 
ffffffff80217d47:	c7 85 8c 0d 00 00 00 	movl   $0x0,0xd8c(%rbp)
ffffffff80217d4e:	00 00 00 
ffffffff80217d51:	c7 85 92 0d 00 00 08 	movl   $0x8e000008,0xd92(%rbp)
ffffffff80217d58:	00 00 8e 
ffffffff80217d5b:	c7 85 9c 0d 00 00 00 	movl   $0x0,0xd9c(%rbp)
ffffffff80217d62:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80217d65:	c7 85 a2 0d 00 00 08 	movl   $0x8e000008,0xda2(%rbp)
ffffffff80217d6c:	00 00 8e 
ffffffff80217d6f:	c7 85 ac 0d 00 00 00 	movl   $0x0,0xdac(%rbp)
ffffffff80217d76:	00 00 00 
ffffffff80217d79:	c7 85 b2 0d 00 00 08 	movl   $0x8e000008,0xdb2(%rbp)
ffffffff80217d80:	00 00 8e 
ffffffff80217d83:	c7 85 bc 0d 00 00 00 	movl   $0x0,0xdbc(%rbp)
ffffffff80217d8a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80217d8d:	c7 85 c2 0d 00 00 08 	movl   $0x8e000008,0xdc2(%rbp)
ffffffff80217d94:	00 00 8e 
ffffffff80217d97:	c7 85 cc 0d 00 00 00 	movl   $0x0,0xdcc(%rbp)
ffffffff80217d9e:	00 00 00 
ffffffff80217da1:	c7 85 d2 0d 00 00 08 	movl   $0x8e000008,0xdd2(%rbp)
ffffffff80217da8:	00 00 8e 
ffffffff80217dab:	89 85 d8 0d 00 00    	mov    %eax,0xdd8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80217db1:	48 c7 c0 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rax
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80217db8:	66 89 95 d6 0d 00 00 	mov    %dx,0xdd6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80217dbf:	48 89 c2             	mov    %rax,%rdx
ffffffff80217dc2:	66 89 85 e0 0d 00 00 	mov    %ax,0xde0(%rbp)
ffffffff80217dc9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217dcd:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217dd1:	89 85 e8 0d 00 00    	mov    %eax,0xde8(%rbp)
ffffffff80217dd7:	48 c7 c0 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rax
ffffffff80217dde:	66 89 95 e6 0d 00 00 	mov    %dx,0xde6(%rbp)
ffffffff80217de5:	48 89 c2             	mov    %rax,%rdx
ffffffff80217de8:	66 89 85 f0 0d 00 00 	mov    %ax,0xdf0(%rbp)
ffffffff80217def:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217df3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217df7:	89 85 f8 0d 00 00    	mov    %eax,0xdf8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80217dfd:	48 c7 c0 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rax
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80217e04:	66 89 95 f6 0d 00 00 	mov    %dx,0xdf6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80217e0b:	48 89 c2             	mov    %rax,%rdx
ffffffff80217e0e:	66 89 85 00 0e 00 00 	mov    %ax,0xe00(%rbp)
ffffffff80217e15:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217e19:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217e1d:	89 85 08 0e 00 00    	mov    %eax,0xe08(%rbp)
ffffffff80217e23:	48 c7 c0 04 c4 20 80 	mov    $0xffffffff8020c404,%rax
ffffffff80217e2a:	66 89 95 06 0e 00 00 	mov    %dx,0xe06(%rbp)
ffffffff80217e31:	48 89 c2             	mov    %rax,%rdx
ffffffff80217e34:	66 89 85 10 0e 00 00 	mov    %ax,0xe10(%rbp)
ffffffff80217e3b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217e3f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217e43:	89 85 18 0e 00 00    	mov    %eax,0xe18(%rbp)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80217e49:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80217e50:	66 89 95 16 0e 00 00 	mov    %dx,0xe16(%rbp)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80217e57:	48 89 c2             	mov    %rax,%rdx
ffffffff80217e5a:	66 89 85 20 0e 00 00 	mov    %ax,0xe20(%rbp)
ffffffff80217e61:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217e65:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217e69:	89 85 28 0e 00 00    	mov    %eax,0xe28(%rbp)
ffffffff80217e6f:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff80217e76:	66 89 95 26 0e 00 00 	mov    %dx,0xe26(%rbp)
ffffffff80217e7d:	48 89 c2             	mov    %rax,%rdx
ffffffff80217e80:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217e84:	66 89 85 30 0e 00 00 	mov    %ax,0xe30(%rbp)
ffffffff80217e8b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217e8f:	66 89 95 36 0e 00 00 	mov    %dx,0xe36(%rbp)
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80217e96:	c7 85 dc 0d 00 00 00 	movl   $0x0,0xddc(%rbp)
ffffffff80217e9d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80217ea0:	66 89 8d e2 0d 00 00 	mov    %cx,0xde2(%rbp)
ffffffff80217ea7:	66 89 b5 e4 0d 00 00 	mov    %si,0xde4(%rbp)
ffffffff80217eae:	c7 85 ec 0d 00 00 00 	movl   $0x0,0xdec(%rbp)
ffffffff80217eb5:	00 00 00 
ffffffff80217eb8:	c7 85 f2 0d 00 00 08 	movl   $0x8e000008,0xdf2(%rbp)
ffffffff80217ebf:	00 00 8e 
ffffffff80217ec2:	c7 85 fc 0d 00 00 00 	movl   $0x0,0xdfc(%rbp)
ffffffff80217ec9:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80217ecc:	c7 85 02 0e 00 00 08 	movl   $0x8e000008,0xe02(%rbp)
ffffffff80217ed3:	00 00 8e 
ffffffff80217ed6:	c7 85 0c 0e 00 00 00 	movl   $0x0,0xe0c(%rbp)
ffffffff80217edd:	00 00 00 
ffffffff80217ee0:	c7 85 12 0e 00 00 08 	movl   $0x8e000008,0xe12(%rbp)
ffffffff80217ee7:	00 00 8e 
ffffffff80217eea:	c7 85 1c 0e 00 00 00 	movl   $0x0,0xe1c(%rbp)
ffffffff80217ef1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80217ef4:	c7 85 22 0e 00 00 08 	movl   $0x8e000008,0xe22(%rbp)
ffffffff80217efb:	00 00 8e 
ffffffff80217efe:	c7 85 2c 0e 00 00 00 	movl   $0x0,0xe2c(%rbp)
ffffffff80217f05:	00 00 00 
ffffffff80217f08:	c7 85 32 0e 00 00 08 	movl   $0x8e000008,0xe32(%rbp)
ffffffff80217f0f:	00 00 8e 
ffffffff80217f12:	89 85 38 0e 00 00    	mov    %eax,0xe38(%rbp)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80217f18:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
ffffffff80217f1f:	66 89 85 40 0e 00 00 	mov    %ax,0xe40(%rbp)
ffffffff80217f26:	48 89 c2             	mov    %rax,%rdx
ffffffff80217f29:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217f2d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217f31:	89 85 48 0e 00 00    	mov    %eax,0xe48(%rbp)
ffffffff80217f37:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff80217f3e:	66 89 95 46 0e 00 00 	mov    %dx,0xe46(%rbp)
ffffffff80217f45:	48 89 c2             	mov    %rax,%rdx
ffffffff80217f48:	66 89 85 50 0e 00 00 	mov    %ax,0xe50(%rbp)
ffffffff80217f4f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217f53:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217f57:	89 85 58 0e 00 00    	mov    %eax,0xe58(%rbp)
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80217f5d:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80217f64:	66 89 95 56 0e 00 00 	mov    %dx,0xe56(%rbp)
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80217f6b:	48 89 c2             	mov    %rax,%rdx
ffffffff80217f6e:	66 89 85 60 0e 00 00 	mov    %ax,0xe60(%rbp)
ffffffff80217f75:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217f79:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217f7d:	89 85 68 0e 00 00    	mov    %eax,0xe68(%rbp)
ffffffff80217f83:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff80217f8a:	66 89 95 66 0e 00 00 	mov    %dx,0xe66(%rbp)
ffffffff80217f91:	48 89 c2             	mov    %rax,%rdx
ffffffff80217f94:	66 89 85 70 0e 00 00 	mov    %ax,0xe70(%rbp)
ffffffff80217f9b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217f9f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217fa3:	89 85 78 0e 00 00    	mov    %eax,0xe78(%rbp)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80217fa9:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80217fb0:	66 89 95 76 0e 00 00 	mov    %dx,0xe76(%rbp)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80217fb7:	48 89 c2             	mov    %rax,%rdx
ffffffff80217fba:	66 89 85 80 0e 00 00 	mov    %ax,0xe80(%rbp)
ffffffff80217fc1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217fc5:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217fc9:	89 85 88 0e 00 00    	mov    %eax,0xe88(%rbp)
ffffffff80217fcf:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff80217fd6:	66 89 95 86 0e 00 00 	mov    %dx,0xe86(%rbp)
ffffffff80217fdd:	48 89 c2             	mov    %rax,%rdx
ffffffff80217fe0:	66 89 85 90 0e 00 00 	mov    %ax,0xe90(%rbp)
ffffffff80217fe7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217feb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80217fef:	89 85 98 0e 00 00    	mov    %eax,0xe98(%rbp)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80217ff5:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80217ffc:	66 89 95 96 0e 00 00 	mov    %dx,0xe96(%rbp)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218003:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218006:	c7 85 3c 0e 00 00 00 	movl   $0x0,0xe3c(%rbp)
ffffffff8021800d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218010:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80218014:	c7 85 42 0e 00 00 08 	movl   $0x8e000008,0xe42(%rbp)
ffffffff8021801b:	00 00 8e 
ffffffff8021801e:	c7 85 4c 0e 00 00 00 	movl   $0x0,0xe4c(%rbp)
ffffffff80218025:	00 00 00 
ffffffff80218028:	c7 85 52 0e 00 00 08 	movl   $0x8e000008,0xe52(%rbp)
ffffffff8021802f:	00 00 8e 
ffffffff80218032:	c7 85 5c 0e 00 00 00 	movl   $0x0,0xe5c(%rbp)
ffffffff80218039:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff8021803c:	c7 85 62 0e 00 00 08 	movl   $0x8e000008,0xe62(%rbp)
ffffffff80218043:	00 00 8e 
ffffffff80218046:	c7 85 6c 0e 00 00 00 	movl   $0x0,0xe6c(%rbp)
ffffffff8021804d:	00 00 00 
ffffffff80218050:	66 89 bd 72 0e 00 00 	mov    %di,0xe72(%rbp)
ffffffff80218057:	c6 85 74 0e 00 00 00 	movb   $0x0,0xe74(%rbp)
ffffffff8021805e:	c6 85 75 0e 00 00 8e 	movb   $0x8e,0xe75(%rbp)
ffffffff80218065:	c7 85 7c 0e 00 00 00 	movl   $0x0,0xe7c(%rbp)
ffffffff8021806c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff8021806f:	c7 85 82 0e 00 00 08 	movl   $0x8e000008,0xe82(%rbp)
ffffffff80218076:	00 00 8e 
ffffffff80218079:	c7 85 8c 0e 00 00 00 	movl   $0x0,0xe8c(%rbp)
ffffffff80218080:	00 00 00 
ffffffff80218083:	c7 85 92 0e 00 00 08 	movl   $0x8e000008,0xe92(%rbp)
ffffffff8021808a:	00 00 8e 
ffffffff8021808d:	c7 85 9c 0e 00 00 00 	movl   $0x0,0xe9c(%rbp)
ffffffff80218094:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218097:	66 89 85 a0 0e 00 00 	mov    %ax,0xea0(%rbp)
ffffffff8021809e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802180a2:	89 85 a8 0e 00 00    	mov    %eax,0xea8(%rbp)
ffffffff802180a8:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff802180af:	66 89 95 a6 0e 00 00 	mov    %dx,0xea6(%rbp)
ffffffff802180b6:	48 89 c2             	mov    %rax,%rdx
ffffffff802180b9:	66 89 85 b0 0e 00 00 	mov    %ax,0xeb0(%rbp)
ffffffff802180c0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802180c4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802180c8:	89 85 b8 0e 00 00    	mov    %eax,0xeb8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff802180ce:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff802180d5:	66 89 95 b6 0e 00 00 	mov    %dx,0xeb6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff802180dc:	48 89 c2             	mov    %rax,%rdx
ffffffff802180df:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802180e3:	66 89 85 c0 0e 00 00 	mov    %ax,0xec0(%rbp)
ffffffff802180ea:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802180ee:	89 85 c8 0e 00 00    	mov    %eax,0xec8(%rbp)
ffffffff802180f4:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff802180fb:	66 89 95 c6 0e 00 00 	mov    %dx,0xec6(%rbp)
ffffffff80218102:	48 89 c2             	mov    %rax,%rdx
ffffffff80218105:	66 89 85 d0 0e 00 00 	mov    %ax,0xed0(%rbp)
ffffffff8021810c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218110:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218114:	89 85 d8 0e 00 00    	mov    %eax,0xed8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff8021811a:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218121:	66 89 95 d6 0e 00 00 	mov    %dx,0xed6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80218128:	48 89 c2             	mov    %rax,%rdx
ffffffff8021812b:	66 89 85 e0 0e 00 00 	mov    %ax,0xee0(%rbp)
ffffffff80218132:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218136:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021813a:	89 85 e8 0e 00 00    	mov    %eax,0xee8(%rbp)
ffffffff80218140:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff80218147:	66 89 95 e6 0e 00 00 	mov    %dx,0xee6(%rbp)
ffffffff8021814e:	48 89 c2             	mov    %rax,%rdx
ffffffff80218151:	66 89 85 f0 0e 00 00 	mov    %ax,0xef0(%rbp)
ffffffff80218158:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021815c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218160:	89 85 f8 0e 00 00    	mov    %eax,0xef8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80218166:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff8021816d:	66 89 95 f6 0e 00 00 	mov    %dx,0xef6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80218174:	48 89 c2             	mov    %rax,%rdx
ffffffff80218177:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021817b:	66 89 85 00 0f 00 00 	mov    %ax,0xf00(%rbp)
ffffffff80218182:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218186:	c7 85 a2 0e 00 00 08 	movl   $0x8e000008,0xea2(%rbp)
ffffffff8021818d:	00 00 8e 
ffffffff80218190:	c7 85 ac 0e 00 00 00 	movl   $0x0,0xeac(%rbp)
ffffffff80218197:	00 00 00 
ffffffff8021819a:	c7 85 b2 0e 00 00 08 	movl   $0x8e000008,0xeb2(%rbp)
ffffffff802181a1:	00 00 8e 
ffffffff802181a4:	c7 85 bc 0e 00 00 00 	movl   $0x0,0xebc(%rbp)
ffffffff802181ab:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff802181ae:	c7 85 c2 0e 00 00 08 	movl   $0x8e000008,0xec2(%rbp)
ffffffff802181b5:	00 00 8e 
ffffffff802181b8:	c7 85 cc 0e 00 00 00 	movl   $0x0,0xecc(%rbp)
ffffffff802181bf:	00 00 00 
ffffffff802181c2:	c7 85 d2 0e 00 00 08 	movl   $0x8e000008,0xed2(%rbp)
ffffffff802181c9:	00 00 8e 
ffffffff802181cc:	c7 85 dc 0e 00 00 00 	movl   $0x0,0xedc(%rbp)
ffffffff802181d3:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff802181d6:	c7 85 e2 0e 00 00 08 	movl   $0x8e000008,0xee2(%rbp)
ffffffff802181dd:	00 00 8e 
ffffffff802181e0:	c7 85 ec 0e 00 00 00 	movl   $0x0,0xeec(%rbp)
ffffffff802181e7:	00 00 00 
ffffffff802181ea:	c7 85 f2 0e 00 00 08 	movl   $0x8e000008,0xef2(%rbp)
ffffffff802181f1:	00 00 8e 
ffffffff802181f4:	c7 85 fc 0e 00 00 00 	movl   $0x0,0xefc(%rbp)
ffffffff802181fb:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff802181fe:	c7 85 02 0f 00 00 08 	movl   $0x8e000008,0xf02(%rbp)
ffffffff80218205:	00 00 8e 
ffffffff80218208:	66 89 95 06 0f 00 00 	mov    %dx,0xf06(%rbp)
ffffffff8021820f:	89 85 08 0f 00 00    	mov    %eax,0xf08(%rbp)
ffffffff80218215:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff8021821c:	66 89 85 10 0f 00 00 	mov    %ax,0xf10(%rbp)
ffffffff80218223:	48 89 c2             	mov    %rax,%rdx
ffffffff80218226:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021822a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021822e:	89 85 18 0f 00 00    	mov    %eax,0xf18(%rbp)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80218234:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff8021823b:	66 89 95 16 0f 00 00 	mov    %dx,0xf16(%rbp)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80218242:	48 89 c2             	mov    %rax,%rdx
ffffffff80218245:	66 89 85 20 0f 00 00 	mov    %ax,0xf20(%rbp)
ffffffff8021824c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218250:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218254:	89 85 28 0f 00 00    	mov    %eax,0xf28(%rbp)
ffffffff8021825a:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff80218261:	66 89 95 26 0f 00 00 	mov    %dx,0xf26(%rbp)
ffffffff80218268:	48 89 c2             	mov    %rax,%rdx
ffffffff8021826b:	66 89 85 30 0f 00 00 	mov    %ax,0xf30(%rbp)
ffffffff80218272:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218276:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021827a:	89 85 38 0f 00 00    	mov    %eax,0xf38(%rbp)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80218280:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80218287:	66 89 95 36 0f 00 00 	mov    %dx,0xf36(%rbp)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff8021828e:	48 89 c2             	mov    %rax,%rdx
ffffffff80218291:	66 89 85 40 0f 00 00 	mov    %ax,0xf40(%rbp)
ffffffff80218298:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021829c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802182a0:	89 85 48 0f 00 00    	mov    %eax,0xf48(%rbp)
ffffffff802182a6:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff802182ad:	66 89 95 46 0f 00 00 	mov    %dx,0xf46(%rbp)
ffffffff802182b4:	48 89 c2             	mov    %rax,%rdx
ffffffff802182b7:	66 89 85 50 0f 00 00 	mov    %ax,0xf50(%rbp)
ffffffff802182be:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802182c2:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802182c6:	89 85 58 0f 00 00    	mov    %eax,0xf58(%rbp)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff802182cc:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff802182d3:	66 89 95 56 0f 00 00 	mov    %dx,0xf56(%rbp)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff802182da:	48 89 c2             	mov    %rax,%rdx
ffffffff802182dd:	66 89 85 60 0f 00 00 	mov    %ax,0xf60(%rbp)
ffffffff802182e4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802182e8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802182ec:	89 85 68 0f 00 00    	mov    %eax,0xf68(%rbp)
ffffffff802182f2:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff802182f9:	66 89 95 66 0f 00 00 	mov    %dx,0xf66(%rbp)
ffffffff80218300:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80218303:	c7 85 0c 0f 00 00 00 	movl   $0x0,0xf0c(%rbp)
ffffffff8021830a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff8021830d:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80218311:	c7 85 12 0f 00 00 08 	movl   $0x8e000008,0xf12(%rbp)
ffffffff80218318:	00 00 8e 
ffffffff8021831b:	c7 85 1c 0f 00 00 00 	movl   $0x0,0xf1c(%rbp)
ffffffff80218322:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80218325:	c7 85 22 0f 00 00 08 	movl   $0x8e000008,0xf22(%rbp)
ffffffff8021832c:	00 00 8e 
ffffffff8021832f:	c7 85 2c 0f 00 00 00 	movl   $0x0,0xf2c(%rbp)
ffffffff80218336:	00 00 00 
ffffffff80218339:	c7 85 32 0f 00 00 08 	movl   $0x8e000008,0xf32(%rbp)
ffffffff80218340:	00 00 8e 
ffffffff80218343:	c7 85 3c 0f 00 00 00 	movl   $0x0,0xf3c(%rbp)
ffffffff8021834a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff8021834d:	c7 85 42 0f 00 00 08 	movl   $0x8e000008,0xf42(%rbp)
ffffffff80218354:	00 00 8e 
ffffffff80218357:	c7 85 4c 0f 00 00 00 	movl   $0x0,0xf4c(%rbp)
ffffffff8021835e:	00 00 00 
ffffffff80218361:	c7 85 52 0f 00 00 08 	movl   $0x8e000008,0xf52(%rbp)
ffffffff80218368:	00 00 8e 
ffffffff8021836b:	c7 85 5c 0f 00 00 00 	movl   $0x0,0xf5c(%rbp)
ffffffff80218372:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80218375:	c7 85 62 0f 00 00 08 	movl   $0x8e000008,0xf62(%rbp)
ffffffff8021837c:	00 00 8e 
ffffffff8021837f:	c7 85 6c 0f 00 00 00 	movl   $0x0,0xf6c(%rbp)
ffffffff80218386:	00 00 00 
ffffffff80218389:	66 89 85 70 0f 00 00 	mov    %ax,0xf70(%rbp)
ffffffff80218390:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218394:	89 85 78 0f 00 00    	mov    %eax,0xf78(%rbp)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff8021839a:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff802183a1:	66 89 95 76 0f 00 00 	mov    %dx,0xf76(%rbp)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff802183a8:	48 89 c2             	mov    %rax,%rdx
ffffffff802183ab:	66 89 85 80 0f 00 00 	mov    %ax,0xf80(%rbp)
ffffffff802183b2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802183b6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802183ba:	89 85 88 0f 00 00    	mov    %eax,0xf88(%rbp)
ffffffff802183c0:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff802183c7:	66 89 95 86 0f 00 00 	mov    %dx,0xf86(%rbp)
ffffffff802183ce:	48 89 c2             	mov    %rax,%rdx
ffffffff802183d1:	66 89 85 90 0f 00 00 	mov    %ax,0xf90(%rbp)
ffffffff802183d8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802183dc:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802183e0:	89 85 98 0f 00 00    	mov    %eax,0xf98(%rbp)
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff802183e6:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff802183ed:	66 89 95 96 0f 00 00 	mov    %dx,0xf96(%rbp)
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff802183f4:	48 89 c2             	mov    %rax,%rdx
ffffffff802183f7:	66 89 85 a0 0f 00 00 	mov    %ax,0xfa0(%rbp)
ffffffff802183fe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218402:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218406:	89 85 a8 0f 00 00    	mov    %eax,0xfa8(%rbp)
ffffffff8021840c:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80218413:	66 89 95 a6 0f 00 00 	mov    %dx,0xfa6(%rbp)
ffffffff8021841a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021841d:	66 89 85 b0 0f 00 00 	mov    %ax,0xfb0(%rbp)
ffffffff80218424:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218428:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021842c:	89 85 b8 0f 00 00    	mov    %eax,0xfb8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218432:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80218439:	66 89 95 b6 0f 00 00 	mov    %dx,0xfb6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218440:	48 89 c2             	mov    %rax,%rdx
ffffffff80218443:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218447:	66 89 85 c0 0f 00 00 	mov    %ax,0xfc0(%rbp)
ffffffff8021844e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218452:	89 85 c8 0f 00 00    	mov    %eax,0xfc8(%rbp)
ffffffff80218458:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff8021845f:	66 89 95 c6 0f 00 00 	mov    %dx,0xfc6(%rbp)
ffffffff80218466:	48 89 c2             	mov    %rax,%rdx
ffffffff80218469:	66 89 85 d0 0f 00 00 	mov    %ax,0xfd0(%rbp)
ffffffff80218470:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218474:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218478:	66 89 95 d6 0f 00 00 	mov    %dx,0xfd6(%rbp)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff8021847f:	c7 85 72 0f 00 00 08 	movl   $0x8e000008,0xf72(%rbp)
ffffffff80218486:	00 00 8e 
ffffffff80218489:	c7 85 7c 0f 00 00 00 	movl   $0x0,0xf7c(%rbp)
ffffffff80218490:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80218493:	c7 85 82 0f 00 00 08 	movl   $0x8e000008,0xf82(%rbp)
ffffffff8021849a:	00 00 8e 
ffffffff8021849d:	c7 85 8c 0f 00 00 00 	movl   $0x0,0xf8c(%rbp)
ffffffff802184a4:	00 00 00 
ffffffff802184a7:	c7 85 92 0f 00 00 08 	movl   $0x8e000008,0xf92(%rbp)
ffffffff802184ae:	00 00 8e 
ffffffff802184b1:	c7 85 9c 0f 00 00 00 	movl   $0x0,0xf9c(%rbp)
ffffffff802184b8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff802184bb:	c7 85 a2 0f 00 00 08 	movl   $0x8e000008,0xfa2(%rbp)
ffffffff802184c2:	00 00 8e 
ffffffff802184c5:	c7 85 ac 0f 00 00 00 	movl   $0x0,0xfac(%rbp)
ffffffff802184cc:	00 00 00 
ffffffff802184cf:	c7 85 b2 0f 00 00 08 	movl   $0x8e000008,0xfb2(%rbp)
ffffffff802184d6:	00 00 8e 
ffffffff802184d9:	c7 85 bc 0f 00 00 00 	movl   $0x0,0xfbc(%rbp)
ffffffff802184e0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff802184e3:	c7 85 c2 0f 00 00 08 	movl   $0x8e000008,0xfc2(%rbp)
ffffffff802184ea:	00 00 8e 
ffffffff802184ed:	c7 85 cc 0f 00 00 00 	movl   $0x0,0xfcc(%rbp)
ffffffff802184f4:	00 00 00 
ffffffff802184f7:	c7 85 d2 0f 00 00 08 	movl   $0x8e000008,0xfd2(%rbp)
ffffffff802184fe:	00 00 8e 
ffffffff80218501:	89 85 d8 0f 00 00    	mov    %eax,0xfd8(%rbp)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80218507:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
ffffffff8021850e:	48 89 c2             	mov    %rax,%rdx
ffffffff80218511:	66 89 85 e0 0f 00 00 	mov    %ax,0xfe0(%rbp)
ffffffff80218518:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021851c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218520:	89 85 e8 0f 00 00    	mov    %eax,0xfe8(%rbp)
ffffffff80218526:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff8021852d:	66 89 95 e6 0f 00 00 	mov    %dx,0xfe6(%rbp)
ffffffff80218534:	48 89 c2             	mov    %rax,%rdx
ffffffff80218537:	66 89 85 f0 0f 00 00 	mov    %ax,0xff0(%rbp)
ffffffff8021853e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218542:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218546:	89 85 f8 0f 00 00    	mov    %eax,0xff8(%rbp)
    if(RME_X64_CPU_Cnt==0)
ffffffff8021854c:	48 8b 05 6d ff 00 00 	mov    0xff6d(%rip),%rax        # ffffffff802284c0 <RME_X64_CPU_Cnt>
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218553:	c7 85 dc 0f 00 00 00 	movl   $0x0,0xfdc(%rbp)
ffffffff8021855a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff8021855d:	c7 85 e2 0f 00 00 08 	movl   $0x8e000008,0xfe2(%rbp)
ffffffff80218564:	00 00 8e 
ffffffff80218567:	c7 85 ec 0f 00 00 00 	movl   $0x0,0xfec(%rbp)
ffffffff8021856e:	00 00 00 
ffffffff80218571:	c7 85 f2 0f 00 00 08 	movl   $0x8e000008,0xff2(%rbp)
ffffffff80218578:	00 00 8e 
ffffffff8021857b:	66 89 95 f6 0f 00 00 	mov    %dx,0xff6(%rbp)
ffffffff80218582:	c7 85 fc 0f 00 00 00 	movl   $0x0,0xffc(%rbp)
ffffffff80218589:	00 00 00 
    if(RME_X64_CPU_Cnt==0)
ffffffff8021858c:	48 85 c0             	test   %rax,%rax
ffffffff8021858f:	75 3a                	jne    ffffffff802185cb <__RME_X64_CPU_Local_Init+0x37cb>
        RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
ffffffff80218591:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff80218598:	c7 85 22 02 00 00 08 	movl   $0x8e000008,0x222(%rbp)
ffffffff8021859f:	00 00 8e 
ffffffff802185a2:	48 89 c2             	mov    %rax,%rdx
ffffffff802185a5:	66 89 85 20 02 00 00 	mov    %ax,0x220(%rbp)
ffffffff802185ac:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802185b0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802185b4:	89 85 28 02 00 00    	mov    %eax,0x228(%rbp)
ffffffff802185ba:	66 89 95 26 02 00 00 	mov    %dx,0x226(%rbp)
ffffffff802185c1:	c7 85 2c 02 00 00 00 	movl   $0x0,0x22c(%rbp)
ffffffff802185c8:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff802185cb:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff802185d2:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff802185d7:	66 89 85 30 08 00 00 	mov    %ax,0x830(%rbp)
ffffffff802185de:	48 89 c2             	mov    %rax,%rdx
ffffffff802185e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802185e5:	89 85 38 08 00 00    	mov    %eax,0x838(%rbp)
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff802185eb:	b8 ff 0f 00 00       	mov    $0xfff,%eax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff802185f0:	48 c1 ea 10          	shr    $0x10,%rdx
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff802185f4:	66 89 44 24 06       	mov    %ax,0x6(%rsp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff802185f9:	48 89 e8             	mov    %rbp,%rax
ffffffff802185fc:	48 c1 e8 10          	shr    $0x10,%rax
    Desc[1]=(rme_ptr_t)IDT_Table;
ffffffff80218600:	66 89 6c 24 08       	mov    %bp,0x8(%rsp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80218605:	66 89 44 24 0a       	mov    %ax,0xa(%rsp)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff8021860a:	48 89 e8             	mov    %rbp,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff8021860d:	66 89 95 36 08 00 00 	mov    %dx,0x836(%rbp)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff80218614:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218618:	66 89 44 24 0c       	mov    %ax,0xc(%rsp)
    Desc[4]=((rme_ptr_t)IDT_Table)>>48;
ffffffff8021861d:	48 89 e8             	mov    %rbp,%rax
ffffffff80218620:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218624:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80218629:	e8 4b 32 ff ff       	call   ffffffff8020b879 <__RME_X64_IDT_Load>
    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff8021862e:	48 8b 15 bb fe 00 00 	mov    0xfebb(%rip),%rdx        # ffffffff802284f0 <RME_X64_Layout+0x10>
ffffffff80218635:	48 8b 05 84 fe 00 00 	mov    0xfe84(%rip),%rax        # ffffffff802284c0 <RME_X64_CPU_Cnt>
    GDT_Table[2]=0x0000920000000000ULL;
ffffffff8021863c:	48 be 00 00 00 00 00 	movabs $0x920000000000,%rsi
ffffffff80218643:	92 00 00 
    GDT_Table[1]=0x0020980000000000ULL;
ffffffff80218646:	48 bf 00 00 00 00 00 	movabs $0x20980000000000,%rdi
ffffffff8021864d:	98 20 00 
    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80218650:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80218654:	48 8d 84 02 00 10 00 	lea    0x1000(%rdx,%rax,1),%rax
ffffffff8021865b:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff8021865c:	48 8b 15 8d fe 00 00 	mov    0xfe8d(%rip),%rdx        # ffffffff802284f0 <RME_X64_Layout+0x10>
ffffffff80218663:	48 8b 1d 56 fe 00 00 	mov    0xfe56(%rip),%rbx        # ffffffff802284c0 <RME_X64_CPU_Cnt>
    GDT_Table[2]=0x0000920000000000ULL;
ffffffff8021866a:	48 89 70 10          	mov    %rsi,0x10(%rax)
    GDT_Table[5]=0x0020F80000000000ULL;
ffffffff8021866e:	48 be 00 00 00 00 00 	movabs $0x20f80000000000,%rsi
ffffffff80218675:	f8 20 00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80218678:	48 c1 e3 0d          	shl    $0xd,%rbx
    GDT_Table[5]=0x0020F80000000000ULL;
ffffffff8021867c:	48 89 70 28          	mov    %rsi,0x28(%rax)
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218680:	48 be 00 00 ff ff ff 	movabs $0xffffff0000,%rsi
ffffffff80218687:	00 00 00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff8021868a:	48 01 d3             	add    %rdx,%rbx
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff8021868d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80218694:	48 8d 8b 80 10 00 00 	lea    0x1080(%rbx),%rcx
    GDT_Table[1]=0x0020980000000000ULL;
ffffffff8021869b:	48 89 78 08          	mov    %rdi,0x8(%rax)
    GDT_Table[4]=0x0000F20000000000ULL;
ffffffff8021869f:	48 bf 00 00 00 00 00 	movabs $0xf20000000000,%rdi
ffffffff802186a6:	f2 00 00 
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802186a9:	48 89 ca             	mov    %rcx,%rdx
    GDT_Table[4]=0x0000F20000000000ULL;
ffffffff802186ac:	48 89 78 20          	mov    %rdi,0x20(%rax)
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff802186b0:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802186b5:	48 c1 e2 10          	shl    $0x10,%rdx
    GDT_Table[3]=0x0000000000000000ULL;
ffffffff802186b9:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff802186c0:	00 
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802186c1:	48 21 f2             	and    %rsi,%rdx
ffffffff802186c4:	48 89 ce             	mov    %rcx,%rsi
    GDT_Table[7]=(TSS_Table>>32);
ffffffff802186c7:	48 c1 e9 20          	shr    $0x20,%rcx
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802186cb:	48 c1 ee 18          	shr    $0x18,%rsi
    GDT_Table[7]=(TSS_Table>>32);
ffffffff802186cf:	48 89 48 38          	mov    %rcx,0x38(%rax)
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802186d3:	48 c1 e6 38          	shl    $0x38,%rsi
ffffffff802186d7:	48 09 f2             	or     %rsi,%rdx
ffffffff802186da:	48 be 67 00 00 00 00 	movabs $0x890000000067,%rsi
ffffffff802186e1:	89 00 00 
ffffffff802186e4:	48 09 f2             	or     %rsi,%rdx
ffffffff802186e7:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Desc[0]=8*sizeof(rme_ptr_t)-1;
ffffffff802186eb:	ba 3f 00 00 00       	mov    $0x3f,%edx
ffffffff802186f0:	66 89 54 24 06       	mov    %dx,0x6(%rsp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff802186f5:	48 89 c2             	mov    %rax,%rdx
ffffffff802186f8:	48 c1 ea 10          	shr    $0x10,%rdx
    Desc[1]=(rme_ptr_t)GDT_Table;
ffffffff802186fc:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff80218701:	66 89 54 24 0a       	mov    %dx,0xa(%rsp)
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff80218706:	48 89 c2             	mov    %rax,%rdx
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff80218709:	48 c1 e8 30          	shr    $0x30,%rax
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff8021870d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218711:	66 89 54 24 0c       	mov    %dx,0xc(%rsp)
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff80218716:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff8021871b:	e8 55 31 ff ff       	call   ffffffff8020b875 <__RME_X64_GDT_Load>
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218720:	48 8b 15 11 00 01 00 	mov    0x10011(%rip),%rdx        # ffffffff80228738 <RME_X64_Layout+0x258>
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff80218727:	bf 30 00 00 00       	mov    $0x30,%edi
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff8021872c:	48 8b 05 8d fd 00 00 	mov    0xfd8d(%rip),%rax        # ffffffff802284c0 <RME_X64_CPU_Cnt>
ffffffff80218733:	83 c0 01             	add    $0x1,%eax
ffffffff80218736:	c1 e0 14             	shl    $0x14,%eax
ffffffff80218739:	01 d0                	add    %edx,%eax
ffffffff8021873b:	89 83 84 10 00 00    	mov    %eax,0x1084(%rbx)
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80218741:	48 8b 15 f0 ff 00 00 	mov    0xfff0(%rip),%rdx        # ffffffff80228738 <RME_X64_Layout+0x258>
ffffffff80218748:	48 8b 05 71 fd 00 00 	mov    0xfd71(%rip),%rax        # ffffffff802284c0 <RME_X64_CPU_Cnt>
    ((rme_u32_t*)TSS_Table)[16]=0x00680000;
ffffffff8021874f:	c7 83 c0 10 00 00 00 	movl   $0x680000,0x10c0(%rbx)
ffffffff80218756:	00 68 00 
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80218759:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021875d:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80218761:	48 01 d0             	add    %rdx,%rax
ffffffff80218764:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218768:	89 83 88 10 00 00    	mov    %eax,0x1088(%rbx)
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff8021876e:	e8 0a 31 ff ff       	call   ffffffff8020b87d <__RME_X64_TSS_Load>
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80218773:	48 8b 15 76 fd 00 00 	mov    0xfd76(%rip),%rdx        # ffffffff802284f0 <RME_X64_Layout+0x10>
ffffffff8021877a:	48 8b 05 3f fd 00 00 	mov    0xfd3f(%rip),%rax        # ffffffff802284c0 <RME_X64_CPU_Cnt>
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff80218781:	48 8b 35 38 fd 00 00 	mov    0xfd38(%rip),%rsi        # ffffffff802284c0 <RME_X64_CPU_Cnt>
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80218788:	48 c1 e0 0d          	shl    $0xd,%rax
    		                          RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021878c:	48 8d 9c 02 00 14 00 	lea    0x1400(%rdx,%rax,1),%rbx
ffffffff80218793:	00 
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff80218794:	48 89 df             	mov    %rbx,%rdi
ffffffff80218797:	e8 a4 6d ff ff       	call   ffffffff8020f540 <_RME_CPU_Local_Init>
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff8021879c:	48 8b 15 4d fd 00 00 	mov    0xfd4d(%rip),%rdx        # ffffffff802284f0 <RME_X64_Layout+0x10>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff802187a3:	48 89 ee             	mov    %rbp,%rsi
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff802187a6:	48 8b 05 13 fd 00 00 	mov    0xfd13(%rip),%rax        # ffffffff802284c0 <RME_X64_CPU_Cnt>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff802187ad:	bf 02 01 00 c0       	mov    $0xc0000102,%edi
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff802187b2:	48 83 c0 01          	add    $0x1,%rax
ffffffff802187b6:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff802187ba:	48 8d 54 02 e8       	lea    -0x18(%rdx,%rax,1),%rdx
    Temp->CPU_Local_Addr=(rme_ptr_t)CPU_Local;
ffffffff802187bf:	48 89 1a             	mov    %rbx,(%rdx)
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff802187c2:	48 8b 0d 6f ff 00 00 	mov    0xff6f(%rip),%rcx        # ffffffff80228738 <RME_X64_Layout+0x258>
ffffffff802187c9:	48 8b 05 f0 fc 00 00 	mov    0xfcf0(%rip),%rax        # ffffffff802284c0 <RME_X64_CPU_Cnt>
    Temp->Temp_User_SP=0;
ffffffff802187d0:	48 c7 42 10 00 00 00 	movq   $0x0,0x10(%rdx)
ffffffff802187d7:	00 
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff802187d8:	48 83 c0 01          	add    $0x1,%rax
ffffffff802187dc:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff802187e0:	48 01 c8             	add    %rcx,%rax
ffffffff802187e3:	48 89 42 08          	mov    %rax,0x8(%rdx)
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff802187e7:	e8 3e 30 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff802187ec:	48 89 ee             	mov    %rbp,%rsi
ffffffff802187ef:	bf 01 01 00 c0       	mov    $0xc0000101,%edi
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff802187f4:	bd 80 00 00 c0       	mov    $0xc0000080,%ebp
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff802187f9:	e8 2c 30 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff802187fe:	48 89 ef             	mov    %rbp,%rdi
ffffffff80218801:	e8 10 30 ff ff       	call   ffffffff8020b816 <__RME_X64_Read_MSR>
ffffffff80218806:	48 89 ef             	mov    %rbp,%rdi
ffffffff80218809:	48 83 c8 01          	or     $0x1,%rax
ffffffff8021880d:	48 89 c6             	mov    %rax,%rsi
ffffffff80218810:	e8 15 30 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_LSTAR, (rme_ptr_t)SVC_Handler);
ffffffff80218815:	48 c7 c6 c2 c6 20 80 	mov    $0xffffffff8020c6c2,%rsi
ffffffff8021881c:	bf 82 00 00 c0       	mov    $0xc0000082,%edi
ffffffff80218821:	e8 04 30 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_FMASK, ~RME_X64_RFLAGS_IF);
ffffffff80218826:	48 c7 c6 ff fd ff ff 	mov    $0xfffffffffffffdff,%rsi
ffffffff8021882d:	bf 84 00 00 c0       	mov    $0xc0000084,%edi
ffffffff80218832:	e8 f3 2f ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_STAR, (((rme_ptr_t)RME_X64_SEG_EMPTY)<<48)|(((rme_ptr_t)RME_X64_SEG_KERNEL_CODE)<<32));
ffffffff80218837:	bf 81 00 00 c0       	mov    $0xc0000081,%edi
ffffffff8021883c:	48 be 00 00 00 00 08 	movabs $0x1b000800000000,%rsi
ffffffff80218843:	00 1b 00 
ffffffff80218846:	e8 df 2f ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
}
ffffffff8021884b:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021884f:	5b                   	pop    %rbx
ffffffff80218850:	5d                   	pop    %rbp
ffffffff80218851:	c3                   	ret    
ffffffff80218852:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80218859:	00 00 00 00 
ffffffff8021885d:	0f 1f 00             	nopl   (%rax)

ffffffff80218860 <__RME_Kfn_Handler>:
{
ffffffff80218860:	f3 0f 1e fa          	endbr64 
    vga_buffer[0] = (0x07 << 8) | message;
ffffffff80218864:	48 8b 05 ad e7 00 00 	mov    0xe7ad(%rip),%rax        # ffffffff80227018 <vga_buffer>
ffffffff8021886b:	66 45 0f be c0       	movsbw %r8b,%r8w
ffffffff80218870:	66 41 81 c8 00 07    	or     $0x700,%r8w
ffffffff80218876:	66 44 89 00          	mov    %r8w,(%rax)
    vga_buffer++;
ffffffff8021887a:	48 83 c0 02          	add    $0x2,%rax
ffffffff8021887e:	48 89 05 93 e7 00 00 	mov    %rax,0xe793(%rip)        # ffffffff80227018 <vga_buffer>
}
ffffffff80218885:	31 c0                	xor    %eax,%eax
ffffffff80218887:	c3                   	ret    
ffffffff80218888:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021888f:	00 

ffffffff80218890 <__RME_Putchar>:
{
ffffffff80218890:	f3 0f 1e fa          	endbr64 
ffffffff80218894:	53                   	push   %rbx
ffffffff80218895:	89 fb                	mov    %edi,%ebx
    while((__RME_X64_In(RME_X64_COM1+5)&0x20)==0);
ffffffff80218897:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021889e:	00 00 
ffffffff802188a0:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff802188a5:	e8 56 2f ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff802188aa:	a8 20                	test   $0x20,%al
ffffffff802188ac:	74 f2                	je     ffffffff802188a0 <__RME_Putchar+0x10>
    __RME_X64_Out(RME_X64_COM1, Char);
ffffffff802188ae:	48 0f be f3          	movsbq %bl,%rsi
ffffffff802188b2:	bf f8 03 00 00       	mov    $0x3f8,%edi
    vga_buffer[0] = (0x07 << 8) | Char;
ffffffff802188b7:	66 0f be db          	movsbw %bl,%bx
    __RME_X64_Out(RME_X64_COM1, Char);
ffffffff802188bb:	e8 4a 2f ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    vga_buffer[0] = (0x07 << 8) | Char;
ffffffff802188c0:	48 8b 05 51 e7 00 00 	mov    0xe751(%rip),%rax        # ffffffff80227018 <vga_buffer>
ffffffff802188c7:	80 cf 07             	or     $0x7,%bh
ffffffff802188ca:	66 89 18             	mov    %bx,(%rax)
    vga_buffer++;
ffffffff802188cd:	48 83 c0 02          	add    $0x2,%rax
}
ffffffff802188d1:	5b                   	pop    %rbx
    vga_buffer++;
ffffffff802188d2:	48 89 05 3f e7 00 00 	mov    %rax,0xe73f(%rip)        # ffffffff80227018 <vga_buffer>
}
ffffffff802188d9:	31 c0                	xor    %eax,%eax
ffffffff802188db:	c3                   	ret    
ffffffff802188dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff802188e0 <__RME_X64_LAPIC_Ack>:
{
ffffffff802188e0:	f3 0f 1e fa          	endbr64 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff802188e4:	48 8b 15 65 eb 00 00 	mov    0xeb65(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff802188eb:	48 b8 b0 00 00 00 00 	movabs $0xffff8000000000b0,%rax
ffffffff802188f2:	80 ff ff 
ffffffff802188f5:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
}
ffffffff802188fc:	c3                   	ret    
ffffffff802188fd:	0f 1f 00             	nopl   (%rax)

ffffffff80218900 <__RME_X64_SMP_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff80218900:	f3 0f 1e fa          	endbr64 
ffffffff80218904:	41 57                	push   %r15
ffffffff80218906:	ba fa ff ff ff       	mov    $0xfffffffa,%edx
ffffffff8021890b:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax
ffffffff80218912:	80 ff ff 
    rme_cnt_t Count;
    rme_u16_t* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(rme_u8_t*)RME_X64_PA2VA(0x7000);
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80218915:	48 b9 62 70 00 00 00 	movabs $0xffff800000007062,%rcx
ffffffff8021891c:	80 ff ff 
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff8021891f:	48 be 20 74 21 80 ff 	movabs $0x7fff80217420,%rsi
ffffffff80218926:	7f 00 00 
{
ffffffff80218929:	41 56                	push   %r14
ffffffff8021892b:	41 55                	push   %r13
ffffffff8021892d:	41 54                	push   %r12
ffffffff8021892f:	55                   	push   %rbp
ffffffff80218930:	53                   	push   %rbx
ffffffff80218931:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80218935:	eb 0d                	jmp    ffffffff80218944 <__RME_X64_SMP_Init+0x44>
ffffffff80218937:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021893e:	00 00 
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80218940:	0f b6 14 06          	movzbl (%rsi,%rax,1),%edx
ffffffff80218944:	88 10                	mov    %dl,(%rax)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80218946:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021894a:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021894d:	75 f1                	jne    ffffffff80218940 <__RME_X64_SMP_Init+0x40>

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
ffffffff8021894f:	48 c7 05 66 fb 00 00 	movq   $0x1,0xfb66(%rip)        # ffffffff802284c0 <RME_X64_CPU_Cnt>
ffffffff80218956:	01 00 00 00 
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff8021895a:	bb 01 00 00 00       	mov    $0x1,%ebx
    {
        RME_DBG_S("\n\rBooting CPU ");
        RME_DBG_I(Count);
        /* Temporary stack */
        *(rme_u32_t*)(Code-4)=0x8000;
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff8021895f:	48 c7 c7 95 80 10 80 	mov    $0xffffffff80108095,%rdi
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80218966:	48 8b 05 5b fb 00 00 	mov    0xfb5b(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff8021896d:	49 bd f8 6f 00 00 00 	movabs $0xffff800000006ff8,%r13
ffffffff80218974:	80 ff ff 
ffffffff80218977:	8d bf 00 00 00 80    	lea    -0x80000000(%rdi),%edi
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff8021897d:	49 bc f0 6f 00 00 00 	movabs $0xffff800000006ff0,%r12
ffffffff80218984:	80 ff ff 
        Warm_Reset=(rme_u16_t*)RME_X64_PA2VA((0x40<<4|0x67));
        Warm_Reset[0]=0;
        Warm_Reset[1]=0x7000>>4;

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80218987:	48 bd 10 03 00 00 00 	movabs $0xffff800000000310,%rbp
ffffffff8021898e:	80 ff ff 
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80218991:	49 bf 00 03 00 00 00 	movabs $0xffff800000000300,%r15
ffffffff80218998:	80 ff ff 
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff8021899b:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff8021899f:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802189a3:	0f 86 43 01 00 00    	jbe    ffffffff80218aec <__RME_X64_SMP_Init+0x1ec>
ffffffff802189a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        RME_DBG_S("\n\rBooting CPU ");
ffffffff802189b0:	48 c7 c7 e9 da 21 80 	mov    $0xffffffff8021dae9,%rdi
ffffffff802189b7:	49 89 de             	mov    %rbx,%r14
ffffffff802189ba:	e8 a1 46 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
        RME_DBG_I(Count);
ffffffff802189bf:	48 89 df             	mov    %rbx,%rdi
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff802189c2:	48 83 c3 01          	add    $0x1,%rbx
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802189c6:	49 c1 e6 04          	shl    $0x4,%r14
        RME_DBG_I(Count);
ffffffff802189ca:	e8 f1 44 ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff802189cf:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff802189d4:	bf 70 00 00 00       	mov    $0x70,%edi
        *(rme_u32_t*)(Code-4)=0x8000;
ffffffff802189d9:	48 b8 fc 6f 00 00 00 	movabs $0xffff800000006ffc,%rax
ffffffff802189e0:	80 ff ff 
ffffffff802189e3:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff802189e9:	8b 44 24 0c          	mov    0xc(%rsp),%eax
ffffffff802189ed:	41 89 45 00          	mov    %eax,0x0(%r13)
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff802189f1:	48 89 d8             	mov    %rbx,%rax
ffffffff802189f4:	48 8b 0d 3d fd 00 00 	mov    0xfd3d(%rip),%rcx        # ffffffff80228738 <RME_X64_Layout+0x258>
ffffffff802189fb:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff802189ff:	48 01 c8             	add    %rcx,%rax
ffffffff80218a02:	49 89 04 24          	mov    %rax,(%r12)
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff80218a06:	e8 ff 2d ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
        __RME_X64_Out(RME_X64_RTC_DATA,0xA);
ffffffff80218a0b:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80218a10:	bf 71 00 00 00       	mov    $0x71,%edi
ffffffff80218a15:	e8 f0 2d ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
        Warm_Reset[1]=0x7000>>4;
ffffffff80218a1a:	b9 00 07 00 00       	mov    $0x700,%ecx
        Warm_Reset[0]=0;
ffffffff80218a1f:	31 d2                	xor    %edx,%edx
ffffffff80218a21:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax
ffffffff80218a28:	80 ff ff 
ffffffff80218a2b:	66 89 10             	mov    %dx,(%rax)
        Warm_Reset[1]=0x7000>>4;
ffffffff80218a2e:	66 89 48 02          	mov    %cx,0x2(%rax)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80218a32:	49 8b 86 c0 74 22 80 	mov    -0x7fdd8b40(%r14),%rax
ffffffff80218a39:	48 8b 0d 10 ea 00 00 	mov    0xea10(%rip),%rcx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80218a40:	c1 e0 18             	shl    $0x18,%eax
ffffffff80218a43:	89 04 29             	mov    %eax,(%rcx,%rbp,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80218a46:	48 8b 05 03 ea 00 00 	mov    0xea03(%rip),%rax        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80218a4d:	42 c7 04 38 00 c5 00 	movl   $0xc500,(%rax,%r15,1)
ffffffff80218a54:	00 
                                                 RME_X64_LAPIC_ICRLO_LEVEL|
                                                 RME_X64_LAPIC_ICRLO_ASSERT);
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80218a55:	48 8b 05 f4 e9 00 00 	mov    0xe9f4(%rip),%rax        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80218a5c:	42 c7 04 38 00 85 00 	movl   $0x8500,(%rax,%r15,1)
ffffffff80218a63:	00 
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80218a64:	49 8b 86 c0 74 22 80 	mov    -0x7fdd8b40(%r14),%rax
ffffffff80218a6b:	48 8b 0d de e9 00 00 	mov    0xe9de(%rip),%rcx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80218a72:	c1 e0 18             	shl    $0x18,%eax
ffffffff80218a75:	89 04 29             	mov    %eax,(%rcx,%rbp,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff80218a78:	48 8b 05 d1 e9 00 00 	mov    0xe9d1(%rip),%rax        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80218a7f:	42 c7 04 38 07 06 00 	movl   $0x607,(%rax,%r15,1)
ffffffff80218a86:	00 
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80218a87:	49 8b 86 c0 74 22 80 	mov    -0x7fdd8b40(%r14),%rax
ffffffff80218a8e:	48 8b 0d bb e9 00 00 	mov    0xe9bb(%rip),%rcx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80218a95:	c1 e0 18             	shl    $0x18,%eax
ffffffff80218a98:	89 04 29             	mov    %eax,(%rcx,%rbp,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff80218a9b:	48 8b 05 ae e9 00 00 	mov    0xe9ae(%rip),%rax        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80218aa2:	42 c7 04 38 07 06 00 	movl   $0x607,(%rax,%r15,1)
ffffffff80218aa9:	00 
        RME_X64_UDELAY(200);

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
ffffffff80218aaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80218ab0:	48 8b 05 09 fa 00 00 	mov    0xfa09(%rip),%rax        # ffffffff802284c0 <RME_X64_CPU_Cnt>
ffffffff80218ab7:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80218abb:	48 05 c0 74 22 80    	add    $0xffffffff802274c0,%rax
ffffffff80218ac1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218ac5:	48 85 c0             	test   %rax,%rax
ffffffff80218ac8:	74 e6                	je     ffffffff80218ab0 <__RME_X64_SMP_Init+0x1b0>
        RME_X64_CPU_Cnt++;
ffffffff80218aca:	48 8b 05 ef f9 00 00 	mov    0xf9ef(%rip),%rax        # ffffffff802284c0 <RME_X64_CPU_Cnt>
ffffffff80218ad1:	48 83 c0 01          	add    $0x1,%rax
ffffffff80218ad5:	48 89 05 e4 f9 00 00 	mov    %rax,0xf9e4(%rip)        # ffffffff802284c0 <RME_X64_CPU_Cnt>
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80218adc:	48 8b 05 e5 f9 00 00 	mov    0xf9e5(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff80218ae3:	48 39 d8             	cmp    %rbx,%rax
ffffffff80218ae6:	0f 87 c4 fe ff ff    	ja     ffffffff802189b0 <__RME_X64_SMP_Init+0xb0>
    }
}
ffffffff80218aec:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80218af0:	5b                   	pop    %rbx
ffffffff80218af1:	5d                   	pop    %rbp
ffffffff80218af2:	41 5c                	pop    %r12
ffffffff80218af4:	41 5d                	pop    %r13
ffffffff80218af6:	41 5e                	pop    %r14
ffffffff80218af8:	41 5f                	pop    %r15
ffffffff80218afa:	c3                   	ret    
ffffffff80218afb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80218b00 <__RME_X64_SMP_Tick>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Tick(void)
{
ffffffff80218b00:	f3 0f 1e fa          	endbr64 
    /* Is this a SMP? */
    if(RME_X64_Num_CPU>1)
ffffffff80218b04:	48 8b 05 bd f9 00 00 	mov    0xf9bd(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff80218b0b:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80218b0f:	76 27                	jbe    ffffffff80218b38 <__RME_X64_SMP_Tick+0x38>
    {
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0xFFULL<<24);
ffffffff80218b11:	48 8b 15 38 e9 00 00 	mov    0xe938(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80218b18:	48 b8 10 03 00 00 00 	movabs $0xffff800000000310,%rax
ffffffff80218b1f:	80 ff ff 
ffffffff80218b22:	c7 04 02 00 00 00 ff 	movl   $0xff000000,(%rdx,%rax,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_EXC_SELF|
ffffffff80218b29:	48 8b 15 20 e9 00 00 	mov    0xe920(%rip),%rdx        # ffffffff80227450 <RME_X64_LAPIC_Addr>
ffffffff80218b30:	c7 44 10 f0 83 00 0c 	movl   $0xc0083,-0x10(%rax,%rdx,1)
ffffffff80218b37:	00 
                                                 RME_X64_LAPIC_ICRLO_FIXED|
                                                 RME_X64_INT_SMP_SYSTICK);
    }
}
ffffffff80218b38:	c3                   	ret    
ffffffff80218b39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80218b40 <__RME_Lowlvl_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Lowlvl_Init(void)
{
ffffffff80218b40:	f3 0f 1e fa          	endbr64 
ffffffff80218b44:	41 57                	push   %r15
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80218b46:	31 f6                	xor    %esi,%esi
ffffffff80218b48:	bf f9 03 00 00       	mov    $0x3f9,%edi
{
ffffffff80218b4d:	41 56                	push   %r14
ffffffff80218b4f:	41 55                	push   %r13
ffffffff80218b51:	41 54                	push   %r12
ffffffff80218b53:	55                   	push   %rbp
ffffffff80218b54:	53                   	push   %rbx
ffffffff80218b55:	48 83 ec 38          	sub    $0x38,%rsp
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80218b59:	e8 ac 2c ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x80);
ffffffff80218b5e:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff80218b63:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff80218b68:	e8 9d 2c ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+0, 115200/9600);
ffffffff80218b6d:	be 0c 00 00 00       	mov    $0xc,%esi
ffffffff80218b72:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80218b77:	e8 8e 2c ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80218b7c:	31 f6                	xor    %esi,%esi
ffffffff80218b7e:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff80218b83:	e8 82 2c ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x03);
ffffffff80218b88:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80218b8d:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff80218b92:	e8 73 2c ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+2, 0xC7);
ffffffff80218b97:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff80218b9c:	bf fa 03 00 00       	mov    $0x3fa,%edi
ffffffff80218ba1:	e8 64 2c ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+4, 0);
ffffffff80218ba6:	31 f6                	xor    %esi,%esi
ffffffff80218ba8:	bf fc 03 00 00       	mov    $0x3fc,%edi
ffffffff80218bad:	e8 58 2c ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    if(__RME_X64_In(RME_X64_COM1+5)==0xFF)
ffffffff80218bb2:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff80218bb7:	e8 44 2c ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff80218bbc:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff80218bc2:	0f 84 b8 07 00 00    	je     ffffffff80219380 <__RME_Lowlvl_Init+0x840>
        RME_X64_UART_Exist=1;
ffffffff80218bc8:	48 c7 05 7d fb 00 00 	movq   $0x1,0xfb7d(%rip)        # ffffffff80228750 <RME_X64_UART_Exist>
ffffffff80218bcf:	01 00 00 00 
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff80218bd3:	48 b8 0e 04 00 00 00 	movabs $0xffff80000000040e,%rax
ffffffff80218bda:	80 ff ff 
ffffffff80218bdd:	0f b7 00             	movzwl (%rax),%eax
    if(Paddr!=0)
ffffffff80218be0:	c1 e0 04             	shl    $0x4,%eax
ffffffff80218be3:	0f 84 07 06 00 00    	je     ffffffff802191f0 <__RME_Lowlvl_Init+0x6b0>
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff80218be9:	48 63 f8             	movslq %eax,%rdi
        RDSP=__RME_X64_RDSP_Scan(Paddr,1024);
ffffffff80218bec:	be 00 04 00 00       	mov    $0x400,%esi
ffffffff80218bf1:	e8 5a c1 ff ff       	call   ffffffff80214d50 <__RME_X64_RDSP_Scan>
ffffffff80218bf6:	48 89 c3             	mov    %rax,%rbx
        if(RDSP!=0)
ffffffff80218bf9:	48 85 c0             	test   %rax,%rax
ffffffff80218bfc:	0f 84 ee 05 00 00    	je     ffffffff802191f0 <__RME_Lowlvl_Init+0x6b0>
    RME_DBG_S("\r\nRDSP address: ");
ffffffff80218c02:	48 c7 c7 f8 da 21 80 	mov    $0xffffffff8021daf8,%rdi
ffffffff80218c09:	e8 52 44 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H((rme_ptr_t)RDSP);
ffffffff80218c0e:	48 89 df             	mov    %rbx,%rdi
ffffffff80218c11:	e8 9a 43 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff80218c16:	44 8b 73 10          	mov    0x10(%rbx),%r14d
    RME_DBG_S("\r\nRSDT address: ");
ffffffff80218c1a:	48 c7 c7 09 db 21 80 	mov    $0xffffffff8021db09,%rdi
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff80218c21:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80218c28:	80 ff ff 
ffffffff80218c2b:	49 01 c6             	add    %rax,%r14
    RME_DBG_S("\r\nRSDT address: ");
ffffffff80218c2e:	e8 2d 44 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H((rme_ptr_t)RSDT);
ffffffff80218c33:	4c 89 f7             	mov    %r14,%rdi
ffffffff80218c36:	e8 75 43 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;
ffffffff80218c3b:	45 8b 6e 04          	mov    0x4(%r14),%r13d
ffffffff80218c3f:	49 83 ed 24          	sub    $0x24,%r13
    for(Count=0;Count<Table_Num;Count++)
ffffffff80218c43:	49 c1 ed 02          	shr    $0x2,%r13
ffffffff80218c47:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
ffffffff80218c4c:	0f 84 3e 02 00 00    	je     ffffffff80218e90 <__RME_Lowlvl_Init+0x350>
    struct RME_X64_ACPI_MADT_Hdr* MADT=RME_NULL;
ffffffff80218c52:	45 31 ed             	xor    %r13d,%r13d
    for(Count=0;Count<Table_Num;Count++)
ffffffff80218c55:	45 31 ff             	xor    %r15d,%r15d
ffffffff80218c58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80218c5f:	00 
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff80218c60:	43 8b 5c be 24       	mov    0x24(%r14,%r15,4),%ebx
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff80218c65:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80218c6a:	48 8d 7c 24 16       	lea    0x16(%rsp),%rdi
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff80218c6f:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80218c76:	80 ff ff 
ffffffff80218c79:	48 01 c3             	add    %rax,%rbx
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff80218c7c:	48 89 de             	mov    %rbx,%rsi
ffffffff80218c7f:	e8 0c 48 ff ff       	call   ffffffff8020d490 <_RME_Memcpy>
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff80218c84:	48 8d 73 0a          	lea    0xa(%rbx),%rsi
ffffffff80218c88:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff80218c8d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
    Signature[4]='\0';
ffffffff80218c92:	c6 44 24 1a 00       	movb   $0x0,0x1a(%rsp)
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff80218c97:	e8 f4 47 ff ff       	call   ffffffff8020d490 <_RME_Memcpy>
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff80218c9c:	48 8d 73 10          	lea    0x10(%rbx),%rsi
ffffffff80218ca0:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80218ca5:	48 8d 7c 24 27       	lea    0x27(%rsp),%rdi
    ID[6]='\0';
ffffffff80218caa:	c6 44 24 26 00       	movb   $0x0,0x26(%rsp)
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff80218caf:	e8 dc 47 ff ff       	call   ffffffff8020d490 <_RME_Memcpy>
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff80218cb4:	48 8d 73 1c          	lea    0x1c(%rbx),%rsi
ffffffff80218cb8:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80218cbd:	48 8d 7c 24 1b       	lea    0x1b(%rsp),%rdi
    Table_ID[8]='\0';
ffffffff80218cc2:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff80218cc7:	e8 c4 47 ff ff       	call   ffffffff8020d490 <_RME_Memcpy>
    RME_DBG_S("\n\rACPI:");
ffffffff80218ccc:	48 c7 c7 1a db 21 80 	mov    $0xffffffff8021db1a,%rdi
    OEM_Rev=Header->OEM_Revision;
ffffffff80218cd3:	44 8b 63 18          	mov    0x18(%rbx),%r12d
    Creator_Rev=Header->Creator_Revision;
ffffffff80218cd7:	8b 6b 20             	mov    0x20(%rbx),%ebp
    Creator[4]='\0';
ffffffff80218cda:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
    RME_DBG_S("\n\rACPI:");
ffffffff80218cdf:	e8 7c 43 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_S(Signature);
ffffffff80218ce4:	48 8d 7c 24 16       	lea    0x16(%rsp),%rdi
ffffffff80218ce9:	e8 72 43 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff80218cee:	48 c7 c7 a4 d7 21 80 	mov    $0xffffffff8021d7a4,%rdi
ffffffff80218cf5:	e8 66 43 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_S(ID);
ffffffff80218cfa:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
ffffffff80218cff:	e8 5c 43 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff80218d04:	48 c7 c7 a4 d7 21 80 	mov    $0xffffffff8021d7a4,%rdi
ffffffff80218d0b:	e8 50 43 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_S(Table_ID);
ffffffff80218d10:	48 8d 7c 24 27       	lea    0x27(%rsp),%rdi
ffffffff80218d15:	e8 46 43 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff80218d1a:	48 c7 c7 a4 d7 21 80 	mov    $0xffffffff8021d7a4,%rdi
ffffffff80218d21:	e8 3a 43 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_I(OEM_Rev);
ffffffff80218d26:	44 89 e7             	mov    %r12d,%edi
ffffffff80218d29:	e8 92 41 ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
    RME_DBG_S(", ");
ffffffff80218d2e:	48 c7 c7 a4 d7 21 80 	mov    $0xffffffff8021d7a4,%rdi
ffffffff80218d35:	e8 26 43 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_S(Creator);
ffffffff80218d3a:	48 8d 7c 24 1b       	lea    0x1b(%rsp),%rdi
ffffffff80218d3f:	e8 1c 43 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff80218d44:	48 c7 c7 a4 d7 21 80 	mov    $0xffffffff8021d7a4,%rdi
ffffffff80218d4b:	e8 10 43 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_I(Creator_Rev);
ffffffff80218d50:	89 ef                	mov    %ebp,%edi
ffffffff80218d52:	e8 69 41 ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
    RME_DBG_S(".");
ffffffff80218d57:	48 c7 c7 22 db 21 80 	mov    $0xffffffff8021db22,%rdi
ffffffff80218d5e:	e8 fd 42 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
        if(_RME_Memcmp(Header->Signature, "APIC", 4)==0)
ffffffff80218d63:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80218d68:	48 c7 c6 24 db 21 80 	mov    $0xffffffff8021db24,%rsi
ffffffff80218d6f:	48 89 df             	mov    %rbx,%rdi
ffffffff80218d72:	e8 d9 46 ff ff       	call   ffffffff8020d450 <_RME_Memcmp>
ffffffff80218d77:	48 85 c0             	test   %rax,%rax
ffffffff80218d7a:	4c 0f 44 eb          	cmove  %rbx,%r13
    for(Count=0;Count<Table_Num;Count++)
ffffffff80218d7e:	49 83 c7 01          	add    $0x1,%r15
ffffffff80218d82:	4c 39 7c 24 08       	cmp    %r15,0x8(%rsp)
ffffffff80218d87:	0f 85 d3 fe ff ff    	jne    ffffffff80218c60 <__RME_Lowlvl_Init+0x120>
    if(MADT==0)
ffffffff80218d8d:	4d 85 ed             	test   %r13,%r13
ffffffff80218d90:	0f 84 fa 00 00 00    	je     ffffffff80218e90 <__RME_Lowlvl_Init+0x350>
    if(MADT->Header.Length<sizeof(struct RME_X64_ACPI_MADT_Hdr))
ffffffff80218d96:	41 8b 45 04          	mov    0x4(%r13),%eax
ffffffff80218d9a:	83 f8 2b             	cmp    $0x2b,%eax
ffffffff80218d9d:	0f 86 ed 00 00 00    	jbe    ffffffff80218e90 <__RME_Lowlvl_Init+0x350>
    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff80218da3:	41 8b 55 24          	mov    0x24(%r13),%edx
    Ptr=MADT->Table;
ffffffff80218da7:	49 8d 5d 2c          	lea    0x2c(%r13),%rbx
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);
ffffffff80218dab:	48 83 e8 2c          	sub    $0x2c,%rax
ffffffff80218daf:	4c 8d 24 03          	lea    (%rbx,%rax,1),%r12
    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff80218db3:	48 89 15 96 e6 00 00 	mov    %rdx,0xe696(%rip)        # ffffffff80227450 <RME_X64_LAPIC_Addr>
    RME_X64_Num_IOAPIC=0;
ffffffff80218dba:	48 c7 05 db e6 00 00 	movq   $0x0,0xe6db(%rip)        # ffffffff802274a0 <RME_X64_Num_IOAPIC>
ffffffff80218dc1:	00 00 00 00 
    RME_X64_Num_CPU=0;
ffffffff80218dc5:	48 c7 05 f8 f6 00 00 	movq   $0x0,0xf6f8(%rip)        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff80218dcc:	00 00 00 00 
    while(Ptr<End)
ffffffff80218dd0:	4c 39 e3             	cmp    %r12,%rbx
ffffffff80218dd3:	0f 83 b7 00 00 00    	jae    ffffffff80218e90 <__RME_Lowlvl_Init+0x350>
        if((End-Ptr)<2)
ffffffff80218dd9:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80218ddd:	77 2d                	ja     ffffffff80218e0c <__RME_Lowlvl_Init+0x2cc>
ffffffff80218ddf:	e9 ac 00 00 00       	jmp    ffffffff80218e90 <__RME_Lowlvl_Init+0x350>
ffffffff80218de4:	0f 1f 40 00          	nopl   0x0(%rax)
        switch(Ptr[0])
ffffffff80218de8:	84 c0                	test   %al,%al
ffffffff80218dea:	0f 84 c0 04 00 00    	je     ffffffff802192b0 <__RME_Lowlvl_Init+0x770>
        Ptr+=Length;
ffffffff80218df0:	48 01 eb             	add    %rbp,%rbx
    while(Ptr<End)
ffffffff80218df3:	49 39 dc             	cmp    %rbx,%r12
ffffffff80218df6:	0f 86 94 00 00 00    	jbe    ffffffff80218e90 <__RME_Lowlvl_Init+0x350>
        if((End-Ptr)<2)
ffffffff80218dfc:	4c 89 e0             	mov    %r12,%rax
ffffffff80218dff:	48 29 d8             	sub    %rbx,%rax
ffffffff80218e02:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80218e06:	0f 8e 84 00 00 00    	jle    ffffffff80218e90 <__RME_Lowlvl_Init+0x350>
        Length=Ptr[1];
ffffffff80218e0c:	0f b6 6b 01          	movzbl 0x1(%rbx),%ebp
        if((End-Ptr)<Length)
ffffffff80218e10:	48 39 c5             	cmp    %rax,%rbp
ffffffff80218e13:	77 7b                	ja     ffffffff80218e90 <__RME_Lowlvl_Init+0x350>
        switch(Ptr[0])
ffffffff80218e15:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80218e18:	3c 01                	cmp    $0x1,%al
ffffffff80218e1a:	0f 84 f0 03 00 00    	je     ffffffff80219210 <__RME_Lowlvl_Init+0x6d0>
ffffffff80218e20:	3c 02                	cmp    $0x2,%al
ffffffff80218e22:	75 c4                	jne    ffffffff80218de8 <__RME_Lowlvl_Init+0x2a8>
                if(Length<sizeof(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record))
ffffffff80218e24:	48 83 fd 06          	cmp    $0x6,%rbp
ffffffff80218e28:	76 c6                	jbe    ffffffff80218df0 <__RME_Lowlvl_Init+0x2b0>
                RME_DBG_S("\n\rACPI: OVERRIDE Bus ");
ffffffff80218e2a:	48 c7 c7 65 db 21 80 	mov    $0xffffffff8021db65,%rdi
ffffffff80218e31:	e8 2a 42 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
                RME_Int_Print(OVERRIDE->Bus);
ffffffff80218e36:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
ffffffff80218e3a:	e8 81 40 ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
                RME_DBG_S(", Source ");
ffffffff80218e3f:	48 c7 c7 7b db 21 80 	mov    $0xffffffff8021db7b,%rdi
ffffffff80218e46:	e8 15 42 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
                RME_Hex_Print(OVERRIDE->Source);
ffffffff80218e4b:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
ffffffff80218e4f:	e8 5c 41 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
                RME_DBG_S(", GSI ");
ffffffff80218e54:	48 c7 c7 85 db 21 80 	mov    $0xffffffff8021db85,%rdi
ffffffff80218e5b:	e8 00 42 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
                RME_Int_Print(OVERRIDE->GS_Interrupt);
ffffffff80218e60:	0f b6 7b 04          	movzbl 0x4(%rbx),%edi
ffffffff80218e64:	e8 57 40 ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
                RME_DBG_S(", Flags ");
ffffffff80218e69:	48 c7 c7 8c db 21 80 	mov    $0xffffffff8021db8c,%rdi
ffffffff80218e70:	e8 eb 41 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);
ffffffff80218e75:	0f b7 7b 05          	movzwl 0x5(%rbx),%edi
        Ptr+=Length;
ffffffff80218e79:	48 01 eb             	add    %rbp,%rbx
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);
ffffffff80218e7c:	e8 3f 40 ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
    while(Ptr<End)
ffffffff80218e81:	49 39 dc             	cmp    %rbx,%r12
ffffffff80218e84:	0f 87 72 ff ff ff    	ja     ffffffff80218dfc <__RME_Lowlvl_Init+0x2bc>
ffffffff80218e8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff80218e90:	48 c7 c1 68 70 22 80 	mov    $0xffffffff80227068,%rcx
ffffffff80218e97:	48 c7 c2 60 70 22 80 	mov    $0xffffffff80227060,%rdx
ffffffff80218e9e:	31 ff                	xor    %edi,%edi
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff80218ea0:	bb 01 00 00 00       	mov    $0x1,%ebx
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff80218ea5:	48 c7 c6 58 70 22 80 	mov    $0xffffffff80227058,%rsi
ffffffff80218eac:	48 c7 c5 78 70 22 80 	mov    $0xffffffff80227078,%rbp
ffffffff80218eb3:	e8 91 29 ff ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff80218eb8:	48 89 05 81 e1 00 00 	mov    %rax,0xe181(%rip)        # ffffffff80227040 <RME_X64_Feature>
    RME_X64_Feature.Func[0][0]=RME_X64_Feature.Max_Func;
ffffffff80218ebf:	48 8b 05 7a e1 00 00 	mov    0xe17a(%rip),%rax        # ffffffff80227040 <RME_X64_Feature>
ffffffff80218ec6:	48 89 05 83 e1 00 00 	mov    %rax,0xe183(%rip)        # ffffffff80227050 <RME_X64_Feature+0x10>
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff80218ecd:	48 8b 05 6c e1 00 00 	mov    0xe16c(%rip),%rax        # ffffffff80227040 <RME_X64_Feature>
ffffffff80218ed4:	48 85 c0             	test   %rax,%rax
ffffffff80218ed7:	74 3c                	je     ffffffff80218f15 <__RME_Lowlvl_Init+0x3d5>
ffffffff80218ed9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff80218ee0:	48 8d 55 08          	lea    0x8(%rbp),%rdx
ffffffff80218ee4:	48 8d 4d 10          	lea    0x10(%rbp),%rcx
ffffffff80218ee8:	48 89 ee             	mov    %rbp,%rsi
ffffffff80218eeb:	48 89 df             	mov    %rbx,%rdi
ffffffff80218eee:	e8 56 29 ff ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff80218ef3:	48 89 da             	mov    %rbx,%rdx
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff80218ef6:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80218efa:	48 83 c5 20          	add    $0x20,%rbp
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff80218efe:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff80218f02:	48 89 82 50 70 22 80 	mov    %rax,-0x7fdd8fb0(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff80218f09:	48 8b 05 30 e1 00 00 	mov    0xe130(%rip),%rax        # ffffffff80227040 <RME_X64_Feature>
ffffffff80218f10:	48 39 d8             	cmp    %rbx,%rax
ffffffff80218f13:	73 cb                	jae    ffffffff80218ee0 <__RME_Lowlvl_Init+0x3a0>
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff80218f15:	41 bc 00 00 00 80    	mov    $0x80000000,%r12d
ffffffff80218f1b:	48 c7 c1 68 72 22 80 	mov    $0xffffffff80227268,%rcx
ffffffff80218f22:	48 c7 c2 60 72 22 80 	mov    $0xffffffff80227260,%rdx
ffffffff80218f29:	48 c7 c6 58 72 22 80 	mov    $0xffffffff80227258,%rsi
ffffffff80218f30:	4c 89 e7             	mov    %r12,%rdi
ffffffff80218f33:	48 c7 c5 78 72 22 80 	mov    $0xffffffff80227278,%rbp
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80218f3a:	bb 01 00 00 00       	mov    $0x1,%ebx
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff80218f3f:	e8 05 29 ff ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff80218f44:	48 89 05 fd e0 00 00 	mov    %rax,0xe0fd(%rip)        # ffffffff80227048 <RME_X64_Feature+0x8>
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;
ffffffff80218f4b:	48 8b 05 f6 e0 00 00 	mov    0xe0f6(%rip),%rax        # ffffffff80227048 <RME_X64_Feature+0x8>
ffffffff80218f52:	48 89 05 f7 e2 00 00 	mov    %rax,0xe2f7(%rip)        # ffffffff80227250 <RME_X64_Feature+0x210>
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80218f59:	48 8b 05 e8 e0 00 00 	mov    0xe0e8(%rip),%rax        # ffffffff80227048 <RME_X64_Feature+0x8>
ffffffff80218f60:	4c 39 e0             	cmp    %r12,%rax
ffffffff80218f63:	74 41                	je     ffffffff80218fa6 <__RME_Lowlvl_Init+0x466>
ffffffff80218f65:	0f 1f 00             	nopl   (%rax)
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff80218f68:	48 89 df             	mov    %rbx,%rdi
ffffffff80218f6b:	48 8d 55 08          	lea    0x8(%rbp),%rdx
ffffffff80218f6f:	48 8d 4d 10          	lea    0x10(%rbp),%rcx
ffffffff80218f73:	48 89 ee             	mov    %rbp,%rsi
ffffffff80218f76:	4c 09 e7             	or     %r12,%rdi
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80218f79:	48 83 c5 20          	add    $0x20,%rbp
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff80218f7d:	e8 c7 28 ff ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff80218f82:	48 89 da             	mov    %rbx,%rdx
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80218f85:	48 83 c3 01          	add    $0x1,%rbx
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff80218f89:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff80218f8d:	48 89 82 50 72 22 80 	mov    %rax,-0x7fdd8db0(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80218f94:	48 8b 05 ad e0 00 00 	mov    0xe0ad(%rip),%rax        # ffffffff80227048 <RME_X64_Feature+0x8>
ffffffff80218f9b:	48 05 00 00 00 80    	add    $0xffffffff80000000,%rax
ffffffff80218fa1:	48 39 d8             	cmp    %rbx,%rax
ffffffff80218fa4:	73 c2                	jae    ffffffff80218f68 <__RME_Lowlvl_Init+0x428>
    /* Read APIC tables and detect the configurations. Now we are not NUMA-aware */
    RME_ASSERT(__RME_X64_ACPI_Init()==0);
    /* Detect CPU features */
    __RME_X64_Feature_Get();
    /* Extract memory specifications */
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80218fa6:	48 8b 05 9b f7 00 00 	mov    0xf79b(%rip),%rax        # ffffffff80228748 <RME_X64_MBInfo>
    Info_Cnt=0;
ffffffff80218fad:	45 31 e4             	xor    %r12d,%r12d
    MMap_Cnt=0;
ffffffff80218fb0:	45 31 f6             	xor    %r14d,%r14d
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80218fb3:	8b 68 2c             	mov    0x2c(%rax),%ebp
ffffffff80218fb6:	44 8b 68 30          	mov    0x30(%rax),%r13d
    Reg->RDI=(rme_ptr_t)Retval;
}

void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Next=Head;
ffffffff80218fba:	48 c7 05 3b e0 00 00 	movq   $0xffffffff80227000,0xe03b(%rip)        # ffffffff80227000 <RME_X64_Phys_Mem>
ffffffff80218fc1:	00 70 22 80 
    Head->Prev=Head;
ffffffff80218fc5:	48 c7 05 38 e0 00 00 	movq   $0xffffffff80227000,0xe038(%rip)        # ffffffff80227008 <RME_X64_Phys_Mem+0x8>
ffffffff80218fcc:	00 70 22 80 
    while(MMap_Cnt<MMap_Length)
ffffffff80218fd0:	48 85 ed             	test   %rbp,%rbp
ffffffff80218fd3:	75 52                	jne    ffffffff80219027 <__RME_Lowlvl_Init+0x4e7>
ffffffff80218fd5:	e9 0b 01 00 00       	jmp    ffffffff802190e5 <__RME_Lowlvl_Init+0x5a5>
ffffffff80218fda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            RME_DBG_S("\n\rPhysical memory: 0x");
ffffffff80218fe0:	48 c7 c7 95 db 21 80 	mov    $0xffffffff8021db95,%rdi
ffffffff80218fe7:	e8 74 40 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
            RME_Hex_Print(MMap->addr);
ffffffff80218fec:	48 8b 7b 04          	mov    0x4(%rbx),%rdi
ffffffff80218ff0:	e8 bb 3f ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
            RME_DBG_S(", 0x");
ffffffff80218ff5:	48 c7 c7 9b dd 21 80 	mov    $0xffffffff8021dd9b,%rdi
ffffffff80218ffc:	e8 5f 40 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
            RME_Hex_Print(MMap->len);
ffffffff80219001:	48 8b 7b 0c          	mov    0xc(%rbx),%rdi
ffffffff80219005:	e8 a6 3f ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
            RME_DBG_S(", ");
ffffffff8021900a:	48 c7 c7 a4 d7 21 80 	mov    $0xffffffff8021d7a4,%rdi
ffffffff80219011:	e8 4a 40 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
            RME_Hex_Print(MMap->type);
ffffffff80219016:	8b 7b 14             	mov    0x14(%rbx),%edi
ffffffff80219019:	e8 92 3f ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    while(MMap_Cnt<MMap_Length)
ffffffff8021901e:	4c 39 f5             	cmp    %r14,%rbp
ffffffff80219021:	0f 86 be 00 00 00    	jbe    ffffffff802190e5 <__RME_Lowlvl_Init+0x5a5>
        MMap=(struct multiboot_mmap_entry*)(MMap_Addr+MMap_Cnt);
ffffffff80219027:	4b 8d 5c 35 00       	lea    0x0(%r13,%r14,1),%rbx
        MMap_Cnt+=MMap->size+4;
ffffffff8021902c:	8b 03                	mov    (%rbx),%eax
ffffffff8021902e:	83 c0 04             	add    $0x4,%eax
ffffffff80219031:	49 01 c6             	add    %rax,%r14
        if(MMap->type!=1)
ffffffff80219034:	83 7b 14 01          	cmpl   $0x1,0x14(%rbx)
ffffffff80219038:	75 a6                	jne    ffffffff80218fe0 <__RME_Lowlvl_Init+0x4a0>
        Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021903a:	48 8b 05 bf df 00 00 	mov    0xdfbf(%rip),%rax        # ffffffff80227000 <RME_X64_Phys_Mem>
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff80219041:	48 8b 53 04          	mov    0x4(%rbx),%rdx
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff80219045:	48 3d 00 70 22 80    	cmp    $0xffffffff80227000,%rax
ffffffff8021904b:	75 0e                	jne    ffffffff8021905b <__RME_Lowlvl_Init+0x51b>
ffffffff8021904d:	eb 12                	jmp    ffffffff80219061 <__RME_Lowlvl_Init+0x521>
ffffffff8021904f:	90                   	nop
            Trav_Ptr=Trav_Ptr->Next;
ffffffff80219050:	48 8b 00             	mov    (%rax),%rax
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff80219053:	48 3d 00 70 22 80    	cmp    $0xffffffff80227000,%rax
ffffffff80219059:	74 06                	je     ffffffff80219061 <__RME_Lowlvl_Init+0x521>
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
ffffffff8021905b:	48 39 50 10          	cmp    %rdx,0x10(%rax)
ffffffff8021905f:	76 ef                	jbe    ffffffff80219050 <__RME_Lowlvl_Init+0x510>
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff80219061:	4c 89 e6             	mov    %r12,%rsi
        RME_DBG_S("\n\rPhysical memory: 0x");
ffffffff80219064:	48 c7 c7 95 db 21 80 	mov    $0xffffffff8021db95,%rdi
        Info_Cnt++;
ffffffff8021906b:	49 83 c4 01          	add    $0x1,%r12
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff8021906f:	48 c1 e6 05          	shl    $0x5,%rsi
ffffffff80219073:	48 89 96 10 f0 21 80 	mov    %rdx,-0x7fde0ff0(%rsi)
        RME_X64_Mem[Info_Cnt].Length=MMap->len;
ffffffff8021907a:	48 8b 53 0c          	mov    0xc(%rbx),%rdx
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff8021907e:	48 8d 8e 00 f0 21 80 	lea    -0x7fde1000(%rsi),%rcx
        RME_X64_Mem[Info_Cnt].Length=MMap->len;
ffffffff80219085:	48 89 96 18 f0 21 80 	mov    %rdx,-0x7fde0fe8(%rsi)
        __RME_List_Ins(&(RME_X64_Mem[Info_Cnt].Head),Trav_Ptr->Prev,Trav_Ptr);
ffffffff8021908c:	48 8b 50 08          	mov    0x8(%rax),%rdx
}

void __RME_List_Ins(volatile struct RME_List* New,volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    New->Prev=Prev;
ffffffff80219090:	48 89 96 08 f0 21 80 	mov    %rdx,-0x7fde0ff8(%rsi)
    Prev->Next=New;
ffffffff80219097:	48 89 0a             	mov    %rcx,(%rdx)
    New->Next=Next;
ffffffff8021909a:	48 89 86 00 f0 21 80 	mov    %rax,-0x7fde1000(%rsi)
    Next->Prev=New;
ffffffff802190a1:	48 89 48 08          	mov    %rcx,0x8(%rax)
        RME_DBG_S("\n\rPhysical memory: 0x");
ffffffff802190a5:	e8 b6 3f ff ff       	call   ffffffff8020d060 <RME_Str_Print>
        RME_Hex_Print(MMap->addr);
ffffffff802190aa:	48 8b 7b 04          	mov    0x4(%rbx),%rdi
ffffffff802190ae:	e8 fd 3e ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
        RME_DBG_S(", 0x");
ffffffff802190b3:	48 c7 c7 9b dd 21 80 	mov    $0xffffffff8021dd9b,%rdi
ffffffff802190ba:	e8 a1 3f ff ff       	call   ffffffff8020d060 <RME_Str_Print>
        RME_Hex_Print(MMap->len);
ffffffff802190bf:	48 8b 7b 0c          	mov    0xc(%rbx),%rdi
ffffffff802190c3:	e8 e8 3e ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
        RME_DBG_S(", ");
ffffffff802190c8:	48 c7 c7 a4 d7 21 80 	mov    $0xffffffff8021d7a4,%rdi
ffffffff802190cf:	e8 8c 3f ff ff       	call   ffffffff8020d060 <RME_Str_Print>
        RME_Hex_Print(MMap->type);
ffffffff802190d4:	8b 7b 14             	mov    0x14(%rbx),%edi
ffffffff802190d7:	e8 d4 3e ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    while(MMap_Cnt<MMap_Length)
ffffffff802190dc:	4c 39 f5             	cmp    %r14,%rbp
ffffffff802190df:	0f 87 42 ff ff ff    	ja     ffffffff80219027 <__RME_Lowlvl_Init+0x4e7>
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff802190e5:	48 8b 05 14 df 00 00 	mov    0xdf14(%rip),%rax        # ffffffff80227000 <RME_X64_Phys_Mem>
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff802190ec:	48 3d 00 70 22 80    	cmp    $0xffffffff80227000,%rax
ffffffff802190f2:	74 33                	je     ffffffff80219127 <__RME_Lowlvl_Init+0x5e7>
ffffffff802190f4:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff802190f8:	48 8b 10             	mov    (%rax),%rdx
ffffffff802190fb:	48 81 fa 00 70 22 80 	cmp    $0xffffffff80227000,%rdx
ffffffff80219102:	74 23                	je     ffffffff80219127 <__RME_Lowlvl_Init+0x5e7>
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff80219104:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80219108:	48 8b 70 18          	mov    0x18(%rax),%rsi
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr)
ffffffff8021910c:	48 8b 08             	mov    (%rax),%rcx
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021910f:	48 01 d6             	add    %rdx,%rsi
ffffffff80219112:	48 3b 71 10          	cmp    0x10(%rcx),%rsi
ffffffff80219116:	0f 87 24 02 00 00    	ja     ffffffff80219340 <__RME_Lowlvl_Init+0x800>
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021911c:	48 8b 00             	mov    (%rax),%rax
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021911f:	48 3d 00 70 22 80    	cmp    $0xffffffff80227000,%rax
ffffffff80219125:	75 d1                	jne    ffffffff802190f8 <__RME_Lowlvl_Init+0x5b8>
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff80219127:	48 8b 05 d2 de 00 00 	mov    0xded2(%rip),%rax        # ffffffff80227000 <RME_X64_Phys_Mem>
    MMap_Cnt=0;
ffffffff8021912e:	31 db                	xor    %ebx,%ebx
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff80219130:	48 3d 00 70 22 80    	cmp    $0xffffffff80227000,%rax
ffffffff80219136:	0f 84 54 02 00 00    	je     ffffffff80219390 <__RME_Lowlvl_Init+0x850>
ffffffff8021913c:	0f 1f 40 00          	nopl   0x0(%rax)
        MMap_Cnt+=((struct __RME_X64_Mem*)(Trav_Ptr))->Length;
ffffffff80219140:	48 03 58 18          	add    0x18(%rax),%rbx
        Trav_Ptr=Trav_Ptr->Next;
ffffffff80219144:	48 8b 00             	mov    (%rax),%rax
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff80219147:	48 3d 00 70 22 80    	cmp    $0xffffffff80227000,%rax
ffffffff8021914d:	75 f1                	jne    ffffffff80219140 <__RME_Lowlvl_Init+0x600>
    RME_DBG_S("\n\rTotal physical memory: 0x");
ffffffff8021914f:	48 c7 c7 ab db 21 80 	mov    $0xffffffff8021dbab,%rdi
ffffffff80219156:	e8 05 3f ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_Hex_Print(MMap_Cnt);
ffffffff8021915b:	48 89 df             	mov    %rbx,%rdi
ffffffff8021915e:	e8 4d 3e ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_X64_Layout.Kot_Start=(rme_ptr_t)RME_KOT_VA_BASE;
ffffffff80219163:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021916a:	80 ff ff 
ffffffff8021916d:	48 89 05 6c f3 00 00 	mov    %rax,0xf36c(%rip)        # ffffffff802284e0 <RME_X64_Layout>
    Info_Cnt=(MMap_Cnt>3*RME_POW2(RME_PGT_SIZE_1G))?(MMap_Cnt+RME_POW2(RME_PGT_SIZE_1G)):MMap_Cnt;
ffffffff80219174:	b8 00 00 00 c0       	mov    $0xc0000000,%eax
ffffffff80219179:	48 39 c3             	cmp    %rax,%rbx
ffffffff8021917c:	76 07                	jbe    ffffffff80219185 <__RME_Lowlvl_Init+0x645>
ffffffff8021917e:	48 81 c3 00 00 00 40 	add    $0x40000000,%rbx
    RME_X64_Layout.Kot_Size=((Info_Cnt>>RME_KOM_SLOT_ORDER)>>RME_WORD_ORDER)+1;
ffffffff80219185:	48 c1 eb 0a          	shr    $0xa,%rbx
ffffffff80219189:	48 8d 43 01          	lea    0x1(%rbx),%rax
ffffffff8021918d:	48 89 05 54 f3 00 00 	mov    %rax,0xf354(%rip)        # ffffffff802284e8 <RME_X64_Layout+0x8>
    RME_X64_Layout.PerCPU_Start=RME_ROUND_UP(RME_X64_Layout.Kot_Start+RME_X64_Layout.Kot_Size,RME_PGT_SIZE_4K);
ffffffff80219194:	48 8b 15 45 f3 00 00 	mov    0xf345(%rip),%rdx        # ffffffff802284e0 <RME_X64_Layout>
ffffffff8021919b:	48 8b 05 46 f3 00 00 	mov    0xf346(%rip),%rax        # ffffffff802284e8 <RME_X64_Layout+0x8>
ffffffff802191a2:	48 8d 84 02 ff 0f 00 	lea    0xfff(%rdx,%rax,1),%rax
ffffffff802191a9:	00 
ffffffff802191aa:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff802191b0:	48 89 05 39 f3 00 00 	mov    %rax,0xf339(%rip)        # ffffffff802284f0 <RME_X64_Layout+0x10>
    RME_X64_Layout.PerCPU_Size=2*RME_POW2(RME_PGT_SIZE_4K)*RME_X64_Num_CPU;
ffffffff802191b7:	48 8b 05 0a f3 00 00 	mov    0xf30a(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff802191be:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff802191c2:	48 89 05 2f f3 00 00 	mov    %rax,0xf32f(%rip)        # ffffffff802284f8 <RME_X64_Layout+0x18>
    RME_X64_Layout.Stack_Size=RME_X64_Num_CPU<<RME_X64_KSTACK_ORDER;
ffffffff802191c9:	48 8b 05 f8 f2 00 00 	mov    0xf2f8(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff802191d0:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff802191d4:	48 89 05 65 f5 00 00 	mov    %rax,0xf565(%rip)        # ffffffff80228740 <RME_X64_Layout+0x260>
}
ffffffff802191db:	48 83 c4 38          	add    $0x38,%rsp
ffffffff802191df:	31 c0                	xor    %eax,%eax
ffffffff802191e1:	5b                   	pop    %rbx
ffffffff802191e2:	5d                   	pop    %rbp
ffffffff802191e3:	41 5c                	pop    %r12
ffffffff802191e5:	41 5d                	pop    %r13
ffffffff802191e7:	41 5e                	pop    %r14
ffffffff802191e9:	41 5f                	pop    %r15
ffffffff802191eb:	c3                   	ret    
ffffffff802191ec:	0f 1f 40 00          	nopl   0x0(%rax)
    return __RME_X64_RDSP_Scan(0xE0000, 0x20000);
ffffffff802191f0:	be 00 00 02 00       	mov    $0x20000,%esi
ffffffff802191f5:	bf 00 00 0e 00       	mov    $0xe0000,%edi
ffffffff802191fa:	e8 51 bb ff ff       	call   ffffffff80214d50 <__RME_X64_RDSP_Scan>
ffffffff802191ff:	48 89 c3             	mov    %rax,%rbx
ffffffff80219202:	e9 fb f9 ff ff       	jmp    ffffffff80218c02 <__RME_Lowlvl_Init+0xc2>
ffffffff80219207:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021920e:	00 00 
                if(Length<sizeof(struct RME_X64_ACPI_MADT_IOAPIC_Record))
ffffffff80219210:	48 83 fd 0b          	cmp    $0xb,%rbp
ffffffff80219214:	0f 86 d6 fb ff ff    	jbe    ffffffff80218df0 <__RME_Lowlvl_Init+0x2b0>
                RME_DBG_S("\n\rACPI: IOAPIC ");
ffffffff8021921a:	48 c7 c7 42 db 21 80 	mov    $0xffffffff8021db42,%rdi
ffffffff80219221:	e8 3a 3e ff ff       	call   ffffffff8020d060 <RME_Str_Print>
                RME_Int_Print((rme_cnt_t)RME_X64_Num_IOAPIC);
ffffffff80219226:	48 8b 3d 73 e2 00 00 	mov    0xe273(%rip),%rdi        # ffffffff802274a0 <RME_X64_Num_IOAPIC>
ffffffff8021922d:	e8 8e 3c ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
                RME_DBG_S(" @ ");
ffffffff80219232:	48 c7 c7 52 db 21 80 	mov    $0xffffffff8021db52,%rdi
ffffffff80219239:	e8 22 3e ff ff       	call   ffffffff8020d060 <RME_Str_Print>
                RME_Hex_Print(IOAPIC->Addr);
ffffffff8021923e:	8b 7b 04             	mov    0x4(%rbx),%edi
ffffffff80219241:	e8 6a 3d ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
                RME_DBG_S(", ID ");
ffffffff80219246:	48 c7 c7 56 db 21 80 	mov    $0xffffffff8021db56,%rdi
ffffffff8021924d:	e8 0e 3e ff ff       	call   ffffffff8020d060 <RME_Str_Print>
                RME_Int_Print(IOAPIC->ID);
ffffffff80219252:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
ffffffff80219256:	e8 65 3c ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
                RME_DBG_S(", IBASE ");
ffffffff8021925b:	48 c7 c7 5c db 21 80 	mov    $0xffffffff8021db5c,%rdi
ffffffff80219262:	e8 f9 3d ff ff       	call   ffffffff8020d060 <RME_Str_Print>
                RME_Int_Print(IOAPIC->Interrupt_Base);
ffffffff80219267:	8b 7b 08             	mov    0x8(%rbx),%edi
ffffffff8021926a:	e8 51 3c ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
                if(RME_X64_Num_IOAPIC!=0)
ffffffff8021926f:	48 8b 05 2a e2 00 00 	mov    0xe22a(%rip),%rax        # ffffffff802274a0 <RME_X64_Num_IOAPIC>
ffffffff80219276:	48 85 c0             	test   %rax,%rax
ffffffff80219279:	0f 85 e8 00 00 00    	jne    ffffffff80219367 <__RME_Lowlvl_Init+0x827>
                    RME_X64_IOAPIC_Info[RME_X64_Num_IOAPIC].IOAPIC_ID=IOAPIC->ID;
ffffffff8021927f:	48 8b 05 1a e2 00 00 	mov    0xe21a(%rip),%rax        # ffffffff802274a0 <RME_X64_Num_IOAPIC>
ffffffff80219286:	0f b6 53 02          	movzbl 0x2(%rbx),%edx
ffffffff8021928a:	48 89 14 c5 60 74 22 	mov    %rdx,-0x7fdd8ba0(,%rax,8)
ffffffff80219291:	80 
                RME_X64_Num_IOAPIC++;
ffffffff80219292:	48 8b 05 07 e2 00 00 	mov    0xe207(%rip),%rax        # ffffffff802274a0 <RME_X64_Num_IOAPIC>
ffffffff80219299:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021929d:	48 89 05 fc e1 00 00 	mov    %rax,0xe1fc(%rip)        # ffffffff802274a0 <RME_X64_Num_IOAPIC>
                RME_ASSERT(RME_X64_Num_IOAPIC<=RME_X64_IOAPIC_NUM);
ffffffff802192a4:	48 8b 05 f5 e1 00 00 	mov    0xe1f5(%rip),%rax        # ffffffff802274a0 <RME_X64_Num_IOAPIC>
                break;
ffffffff802192ab:	e9 40 fb ff ff       	jmp    ffffffff80218df0 <__RME_Lowlvl_Init+0x2b0>
                if(Length<sizeof(struct RME_X64_ACPI_MADT_LAPIC_Record))
ffffffff802192b0:	48 83 fd 07          	cmp    $0x7,%rbp
ffffffff802192b4:	0f 86 36 fb ff ff    	jbe    ffffffff80218df0 <__RME_Lowlvl_Init+0x2b0>
                if((LAPIC->Flags&RME_X64_APIC_LAPIC_ENABLED)==0)
ffffffff802192ba:	f6 43 04 01          	testb  $0x1,0x4(%rbx)
ffffffff802192be:	0f 84 2c fb ff ff    	je     ffffffff80218df0 <__RME_Lowlvl_Init+0x2b0>
                RME_DBG_S("\n\rACPI: CPU ");
ffffffff802192c4:	48 c7 c7 29 db 21 80 	mov    $0xffffffff8021db29,%rdi
ffffffff802192cb:	e8 90 3d ff ff       	call   ffffffff8020d060 <RME_Str_Print>
                RME_Int_Print((rme_cnt_t)RME_X64_Num_CPU);
ffffffff802192d0:	48 8b 3d f1 f1 00 00 	mov    0xf1f1(%rip),%rdi        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff802192d7:	e8 e4 3b ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
                RME_DBG_S(", LAPIC ID ");
ffffffff802192dc:	48 c7 c7 36 db 21 80 	mov    $0xffffffff8021db36,%rdi
ffffffff802192e3:	e8 78 3d ff ff       	call   ffffffff8020d060 <RME_Str_Print>
                RME_Int_Print(LAPIC->APIC_ID);
ffffffff802192e8:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
ffffffff802192ec:	e8 cf 3b ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
                RME_X64_CPU_Info[RME_X64_Num_CPU].LAPIC_ID=LAPIC->APIC_ID;
ffffffff802192f1:	48 8b 05 d0 f1 00 00 	mov    0xf1d0(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff802192f8:	0f b6 53 03          	movzbl 0x3(%rbx),%edx
ffffffff802192fc:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80219300:	48 89 90 c0 74 22 80 	mov    %rdx,-0x7fdd8b40(%rax)
                RME_X64_CPU_Info[RME_X64_Num_CPU].Boot_Done=0;
ffffffff80219307:	48 8b 05 ba f1 00 00 	mov    0xf1ba(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff8021930e:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80219312:	48 c7 80 c8 74 22 80 	movq   $0x0,-0x7fdd8b38(%rax)
ffffffff80219319:	00 00 00 00 
                RME_X64_Num_CPU++;
ffffffff8021931d:	48 8b 05 a4 f1 00 00 	mov    0xf1a4(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff80219324:	48 83 c0 01          	add    $0x1,%rax
ffffffff80219328:	48 89 05 99 f1 00 00 	mov    %rax,0xf199(%rip)        # ffffffff802284c8 <RME_X64_Num_CPU>
                RME_ASSERT(RME_X64_Num_CPU<=RME_X64_CPU_NUM);
ffffffff8021932f:	48 8b 05 92 f1 00 00 	mov    0xf192(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
                break;
ffffffff80219336:	e9 b5 fa ff ff       	jmp    ffffffff80218df0 <__RME_Lowlvl_Init+0x2b0>
ffffffff8021933b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff80219340:	48 8b 30             	mov    (%rax),%rsi
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff80219343:	48 8b 08             	mov    (%rax),%rcx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff80219346:	48 8b 49 18          	mov    0x18(%rcx),%rcx
ffffffff8021934a:	48 03 4e 10          	add    0x10(%rsi),%rcx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021934e:	48 29 d1             	sub    %rdx,%rcx
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff80219351:	48 8b 10             	mov    (%rax),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff80219354:	48 89 48 18          	mov    %rcx,0x18(%rax)
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff80219358:	48 8b 12             	mov    (%rdx),%rdx
}

void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Prev->Next = Next;
ffffffff8021935b:	48 89 10             	mov    %rdx,(%rax)
    Next->Prev = Prev;
ffffffff8021935e:	48 89 42 08          	mov    %rax,0x8(%rdx)
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff80219362:	e9 91 fd ff ff       	jmp    ffffffff802190f8 <__RME_Lowlvl_Init+0x5b8>
                    RME_DBG_S("Warning: multiple ioapics are not supported - currently we will not initialize IOAPIC > 1\n");
ffffffff80219367:	48 c7 c7 68 e1 21 80 	mov    $0xffffffff8021e168,%rdi
ffffffff8021936e:	e8 ed 3c ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff80219373:	e9 1a ff ff ff       	jmp    ffffffff80219292 <__RME_Lowlvl_Init+0x752>
ffffffff80219378:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021937f:	00 
        RME_X64_UART_Exist=0;
ffffffff80219380:	48 c7 05 c5 f3 00 00 	movq   $0x0,0xf3c5(%rip)        # ffffffff80228750 <RME_X64_UART_Exist>
ffffffff80219387:	00 00 00 00 
ffffffff8021938b:	e9 43 f8 ff ff       	jmp    ffffffff80218bd3 <__RME_Lowlvl_Init+0x93>
    RME_DBG_S("\n\rTotal physical memory: 0x");
ffffffff80219390:	48 c7 c7 ab db 21 80 	mov    $0xffffffff8021dbab,%rdi
ffffffff80219397:	e8 c4 3c ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_Hex_Print(MMap_Cnt);
ffffffff8021939c:	31 ff                	xor    %edi,%edi
ffffffff8021939e:	e8 0d 3c ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_X64_Layout.Kot_Start=(rme_ptr_t)RME_KOT_VA_BASE;
ffffffff802193a3:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802193aa:	80 ff ff 
ffffffff802193ad:	48 89 05 2c f1 00 00 	mov    %rax,0xf12c(%rip)        # ffffffff802284e0 <RME_X64_Layout>
ffffffff802193b4:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff802193b9:	e9 cf fd ff ff       	jmp    ffffffff8021918d <__RME_Lowlvl_Init+0x64d>
ffffffff802193be:	66 90                	xchg   %ax,%ax

ffffffff802193c0 <__RME_Pgt_Kom_Init>:
{
ffffffff802193c0:	f3 0f 1e fa          	endbr64 
ffffffff802193c4:	41 54                	push   %r12
ffffffff802193c6:	55                   	push   %rbp
ffffffff802193c7:	53                   	push   %rbx
ffffffff802193c8:	48 83 ec 20          	sub    $0x20,%rsp
    _RME_Kot_Init(RME_X64_Layout.Kot_Size/sizeof(rme_ptr_t));
ffffffff802193cc:	48 8b 3d 15 f1 00 00 	mov    0xf115(%rip),%rdi        # ffffffff802284e8 <RME_X64_Layout+0x8>
ffffffff802193d3:	48 c1 ef 03          	shr    $0x3,%rdi
ffffffff802193d7:	e8 f4 44 ff ff       	call   ffffffff8020d8d0 <_RME_Kot_Init>
    RME_X64_PCID_Inc=0;
ffffffff802193dc:	48 c7 05 39 dc 00 00 	movq   $0x0,0xdc39(%rip)        # ffffffff80227020 <RME_X64_PCID_Inc>
ffffffff802193e3:	00 00 00 00 
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff802193e7:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
ffffffff802193ee:	00 
ffffffff802193ef:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff802193f3:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff802193f9:	0f 8f a9 00 00 00    	jg     ffffffff802194a8 <__RME_Pgt_Kom_Init+0xe8>
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|
ffffffff802193ff:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff80219406:	ff 0f 00 
ffffffff80219409:	be 00 00 00 80       	mov    $0x80000000,%esi
ffffffff8021940e:	66 90                	xchg   %ax,%ax
ffffffff80219410:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80219414:	48 8b 14 24          	mov    (%rsp),%rdx
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80219418:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff8021941f:	00 00 
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|
ffffffff80219421:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80219425:	48 8d 84 30 00 a0 10 	lea    -0x7fef6000(%rax,%rsi,1),%rax
ffffffff8021942c:	80 
ffffffff8021942d:	48 21 c8             	and    %rcx,%rax
ffffffff80219430:	48 0d 03 01 00 00    	or     $0x103,%rax
ffffffff80219436:	48 89 04 d5 00 98 10 	mov    %rax,-0x7fef6800(,%rdx,8)
ffffffff8021943d:	80 
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff8021943e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80219443:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
ffffffff80219449:	7f 41                	jg     ffffffff8021948c <__RME_Pgt_Kom_Init+0xcc>
ffffffff8021944b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff80219450:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80219454:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff80219459:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff8021945d:	48 8d 84 02 00 02 00 	lea    0x200(%rdx,%rax,1),%rax
ffffffff80219464:	00 
ffffffff80219465:	48 c7 04 c5 00 90 10 	movq   $0x102,-0x7fef7000(,%rax,8)
ffffffff8021946c:	80 02 01 00 00 
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80219471:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80219476:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021947a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff8021947f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80219484:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
ffffffff8021948a:	7e c4                	jle    ffffffff80219450 <__RME_Pgt_Kom_Init+0x90>
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff8021948c:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80219490:	48 83 c0 01          	add    $0x1,%rax
ffffffff80219494:	48 89 04 24          	mov    %rax,(%rsp)
ffffffff80219498:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff8021949c:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff802194a2:	0f 8e 68 ff ff ff    	jle    ffffffff80219410 <__RME_Pgt_Kom_Init+0x50>
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff802194a8:	48 8b 05 d9 dd 00 00 	mov    0xddd9(%rip),%rax        # ffffffff80227288 <RME_X64_Feature+0x248>
ffffffff802194af:	a9 00 00 00 04       	test   $0x4000000,%eax
ffffffff802194b4:	0f 84 5d 07 00 00    	je     ffffffff80219c17 <__RME_Pgt_Kom_Init+0x857>
        RME_DBG_S("\n\rThis CPU have 1GB superpage support");
ffffffff802194ba:	48 c7 c7 c8 e1 21 80 	mov    $0xffffffff8021e1c8,%rdi
ffffffff802194c1:	e8 9a 3b ff ff       	call   ffffffff8020d060 <RME_Str_Print>
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802194c6:	b8 81 00 00 80       	mov    $0x80000081,%eax
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802194cb:	48 81 0d 2a 0b ef ff 	orq    $0x81,-0x10f4d6(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff802194d2:	81 00 00 00 
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802194d6:	48 81 0d 27 0b ef ff 	orq    $0x40000081,-0x10f4d9(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff802194dd:	81 00 00 40 
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802194e1:	48 81 0d 04 0b ff ff 	orq    $0x81,-0xf4fc(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff802194e8:	81 00 00 00 
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802194ec:	48 09 05 1d 0b ef ff 	or     %rax,-0x10f4e3(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff802194f3:	48 05 18 00 00 40    	add    $0x40000018,%rax
ffffffff802194f9:	48 09 05 18 0b ef ff 	or     %rax,-0x10f4e8(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219500:	48 8b 05 f1 0a ff ff 	mov    -0xf50f(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80219507:	48 0d 81 00 00 40    	or     $0x40000081,%rax
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
ffffffff8021950d:	48 8b 1d ec da 00 00 	mov    0xdaec(%rip),%rbx        # ffffffff80227000 <RME_X64_Phys_Mem>
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219514:	48 89 05 dd 0a ff ff 	mov    %rax,-0xf523(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021951b:	48 81 fb 00 70 22 80 	cmp    $0xffffffff80227000,%rbx
ffffffff80219522:	75 1c                	jne    ffffffff80219540 <__RME_Pgt_Kom_Init+0x180>
ffffffff80219524:	e9 43 07 00 00       	jmp    ffffffff80219c6c <__RME_Pgt_Kom_Init+0x8ac>
ffffffff80219529:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80219530:	48 8b 1b             	mov    (%rbx),%rbx
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219533:	48 81 fb 00 70 22 80 	cmp    $0xffffffff80227000,%rbx
ffffffff8021953a:	0f 84 2c 07 00 00    	je     ffffffff80219c6c <__RME_Pgt_Kom_Init+0x8ac>
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
ffffffff80219540:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff80219544:	48 8b 53 18          	mov    0x18(%rbx),%rdx
ffffffff80219548:	48 01 d0             	add    %rdx,%rax
ffffffff8021954b:	48 3d 00 00 00 01    	cmp    $0x1000000,%rax
ffffffff80219551:	76 dd                	jbe    ffffffff80219530 <__RME_Pgt_Kom_Init+0x170>
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGT_SIZE_16M));
ffffffff80219553:	48 8b 43 10          	mov    0x10(%rbx),%rax
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff80219557:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff8021955d:	48 8b 05 8c ef 00 00 	mov    0xef8c(%rip),%rax        # ffffffff802284f0 <RME_X64_Layout+0x10>
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff80219564:	48 bd 00 00 00 00 00 	movabs $0xffff800000000000,%rbp
ffffffff8021956b:	80 ff ff 
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff8021956e:	48 8b 15 83 ef 00 00 	mov    0xef83(%rip),%rdx        # ffffffff802284f8 <RME_X64_Layout+0x18>
ffffffff80219575:	48 01 d0             	add    %rdx,%rax
ffffffff80219578:	48 89 05 99 ef 00 00 	mov    %rax,0xef99(%rip)        # ffffffff80228518 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff8021957f:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
ffffffff80219583:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff8021958a:	7f ff ff 
ffffffff8021958d:	48 8b 53 18          	mov    0x18(%rbx),%rdx
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80219591:	48 8b 35 80 ef 00 00 	mov    0xef80(%rip),%rsi        # ffffffff80228518 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219598:	48 29 f0             	sub    %rsi,%rax
ffffffff8021959b:	48 01 c8             	add    %rcx,%rax
ffffffff8021959e:	48 01 d0             	add    %rdx,%rax
ffffffff802195a1:	48 89 05 70 f0 00 00 	mov    %rax,0xf070(%rip)        # ffffffff80228618 <RME_X64_Layout+0x138>
    Addr_Cnt=1;
ffffffff802195a8:	48 c7 44 24 18 01 00 	movq   $0x1,0x18(%rsp)
ffffffff802195af:	00 00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff802195b1:	eb 5c                	jmp    ffffffff8021960f <__RME_Pgt_Kom_Init+0x24f>
ffffffff802195b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff802195b8:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff802195bc:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff802195c1:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff802195c7:	48 83 c2 06          	add    $0x6,%rdx
ffffffff802195cb:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff802195d1:	48 01 e8             	add    %rbp,%rax
ffffffff802195d4:	48 89 04 d5 e8 84 22 	mov    %rax,-0x7fdd7b18(,%rdx,8)
ffffffff802195db:	80 
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff802195dc:	48 8b 53 18          	mov    0x18(%rbx),%rdx
ffffffff802195e0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff802195e5:	48 81 e2 00 00 e0 ff 	and    $0xffffffffffe00000,%rdx
ffffffff802195ec:	48 83 c0 26          	add    $0x26,%rax
ffffffff802195f0:	48 89 14 c5 e8 84 22 	mov    %rdx,-0x7fdd7b18(,%rax,8)
ffffffff802195f7:	80 
        Addr_Cnt++;
ffffffff802195f8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff802195fd:	48 83 c0 01          	add    $0x1,%rax
ffffffff80219601:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219606:	48 81 fb 00 70 22 80 	cmp    $0xffffffff80227000,%rbx
ffffffff8021960d:	74 71                	je     ffffffff80219680 <__RME_Pgt_Kom_Init+0x2c0>
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff8021960f:	48 8b 1b             	mov    (%rbx),%rbx
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff80219612:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff80219616:	4c 39 e0             	cmp    %r12,%rax
ffffffff80219619:	77 65                	ja     ffffffff80219680 <__RME_Pgt_Kom_Init+0x2c0>
        if(Mem->Length<RME_POW2(RME_PGT_SIZE_4M))
ffffffff8021961b:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff8021961f:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80219625:	76 21                	jbe    ffffffff80219648 <__RME_Pgt_Kom_Init+0x288>
        if(Addr_Cnt>=RME_X64_KOM1_MAXSEGS)
ffffffff80219627:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff8021962c:	48 83 f8 1f          	cmp    $0x1f,%rax
ffffffff80219630:	7e 86                	jle    ffffffff802195b8 <__RME_Pgt_Kom_Init+0x1f8>
            RME_DBG_S("\r\nThe memory under 4G is too fragmented. Aborting.");
ffffffff80219632:	48 c7 c7 50 e2 21 80 	mov    $0xffffffff8021e250,%rdi
ffffffff80219639:	e8 22 3a ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021963e:	e9 75 ff ff ff       	jmp    ffffffff802195b8 <__RME_Pgt_Kom_Init+0x1f8>
ffffffff80219643:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            RME_DBG_S("\n\rAbandoning physical memory below 4G: addr 0x");
ffffffff80219648:	48 c7 c7 20 e2 21 80 	mov    $0xffffffff8021e220,%rdi
ffffffff8021964f:	e8 0c 3a ff ff       	call   ffffffff8020d060 <RME_Str_Print>
            RME_DBG_H(Mem->Start_Addr);
ffffffff80219654:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff80219658:	e8 53 39 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
            RME_DBG_S(", length 0x");
ffffffff8021965d:	48 c7 c7 c7 db 21 80 	mov    $0xffffffff8021dbc7,%rdi
ffffffff80219664:	e8 f7 39 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
            RME_DBG_H(Mem->Length);
ffffffff80219669:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff8021966d:	e8 3e 39 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219672:	48 81 fb 00 70 22 80 	cmp    $0xffffffff80227000,%rbx
ffffffff80219679:	75 94                	jne    ffffffff8021960f <__RME_Pgt_Kom_Init+0x24f>
ffffffff8021967b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff80219680:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80219685:	48 89 05 84 ee 00 00 	mov    %rax,0xee84(%rip)        # ffffffff80228510 <RME_X64_Layout+0x30>
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff8021968c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80219691:	48 83 c0 05          	add    $0x5,%rax
ffffffff80219695:	48 8b 04 c5 e8 84 22 	mov    -0x7fdd7b18(,%rax,8),%rax
ffffffff8021969c:	80 
ffffffff8021969d:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff802196a2:	48 83 c2 25          	add    $0x25,%rdx
ffffffff802196a6:	48 8b 14 d5 e8 84 22 	mov    -0x7fdd7b18(,%rdx,8),%rdx
ffffffff802196ad:	80 
ffffffff802196ae:	48 01 d0             	add    %rdx,%rax
ffffffff802196b1:	48 89 05 60 f0 00 00 	mov    %rax,0xf060(%rip)        # ffffffff80228718 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff802196b8:	48 8b 0d 59 f0 00 00 	mov    0xf059(%rip),%rcx        # ffffffff80228718 <RME_X64_Layout+0x238>
ffffffff802196bf:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff802196c6:	80 ff ff 
ffffffff802196c9:	48 89 c2             	mov    %rax,%rdx
ffffffff802196cc:	48 29 ca             	sub    %rcx,%rdx
ffffffff802196cf:	48 89 15 4a f0 00 00 	mov    %rdx,0xf04a(%rip)        # ffffffff80228720 <RME_X64_Layout+0x240>
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff802196d6:	48 8b 15 3b ee 00 00 	mov    0xee3b(%rip),%rdx        # ffffffff80228518 <RME_X64_Layout+0x38>
ffffffff802196dd:	48 89 15 1c ee 00 00 	mov    %rdx,0xee1c(%rip)        # ffffffff80228500 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff802196e4:	48 89 05 3d f0 00 00 	mov    %rax,0xf03d(%rip)        # ffffffff80228728 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff802196eb:	48 c7 05 3a f0 00 00 	movq   $0x0,0xf03a(%rip)        # ffffffff80228730 <RME_X64_Layout+0x250>
ffffffff802196f2:	00 00 00 00 
    PML4_Cnt=0;
ffffffff802196f6:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
ffffffff802196fd:	00 
    PDP_Cnt=3;
ffffffff802196fe:	48 c7 44 24 08 03 00 	movq   $0x3,0x8(%rsp)
ffffffff80219705:	00 00 
    PDE_Cnt=511;
ffffffff80219707:	48 c7 44 24 10 ff 01 	movq   $0x1ff,0x10(%rsp)
ffffffff8021970e:	00 00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219710:	48 81 fb 00 70 22 80 	cmp    $0xffffffff80227000,%rbx
ffffffff80219717:	0f 84 93 01 00 00    	je     ffffffff802198b0 <__RME_Pgt_Kom_Init+0x4f0>
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff8021971d:	49 bc 00 00 00 00 00 	movabs $0x800000000000,%r12
ffffffff80219724:	80 00 00 
ffffffff80219727:	48 bd 00 f0 ff ff ff 	movabs $0xffffffffff000,%rbp
ffffffff8021972e:	ff 0f 00 
ffffffff80219731:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219738:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff8021973c:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80219742:	0f 86 48 04 00 00    	jbe    ffffffff80219b90 <__RME_Pgt_Kom_Init+0x7d0>
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80219748:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8021974c:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80219752:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80219758:	48 89 43 10          	mov    %rax,0x10(%rbx)
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff8021975c:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff80219760:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80219764:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff8021976a:	48 89 43 18          	mov    %rax,0x18(%rbx)
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021976e:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
ffffffff80219775:	00 00 
ffffffff80219777:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff8021977b:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff80219780:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219783:	0f 82 80 00 00 00    	jb     ffffffff80219809 <__RME_Pgt_Kom_Init+0x449>
ffffffff80219789:	e9 12 01 00 00       	jmp    ffffffff802198a0 <__RME_Pgt_Kom_Init+0x4e0>
ffffffff8021978e:	66 90                	xchg   %ax,%ax
            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff80219790:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
ffffffff80219794:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80219799:	48 8b 15 78 ed 00 00 	mov    0xed78(%rip),%rdx        # ffffffff80228518 <RME_X64_Layout+0x38>
ffffffff802197a0:	48 01 c8             	add    %rcx,%rax
ffffffff802197a3:	48 21 e8             	and    %rbp,%rax
ffffffff802197a6:	48 0d 83 01 00 00    	or     $0x183,%rax
ffffffff802197ac:	48 89 02             	mov    %rax,(%rdx)
            RME_X64_Layout.Kom1_Start[0]+=sizeof(rme_ptr_t);
ffffffff802197af:	48 8b 05 62 ed 00 00 	mov    0xed62(%rip),%rax        # ffffffff80228518 <RME_X64_Layout+0x38>
ffffffff802197b6:	48 83 c0 08          	add    $0x8,%rax
ffffffff802197ba:	48 89 05 57 ed 00 00 	mov    %rax,0xed57(%rip)        # ffffffff80228518 <RME_X64_Layout+0x38>
            RME_X64_Layout.Kom1_Size[0]-=sizeof(rme_ptr_t);
ffffffff802197c1:	48 8b 05 50 ee 00 00 	mov    0xee50(%rip),%rax        # ffffffff80228618 <RME_X64_Layout+0x138>
ffffffff802197c8:	48 83 e8 08          	sub    $0x8,%rax
ffffffff802197cc:	48 89 05 45 ee 00 00 	mov    %rax,0xee45(%rip)        # ffffffff80228618 <RME_X64_Layout+0x138>
            RME_X64_Layout.Kom2_Size+=RME_POW2(RME_PGT_SIZE_2M);
ffffffff802197d3:	48 8b 05 56 ef 00 00 	mov    0xef56(%rip),%rax        # ffffffff80228730 <RME_X64_Layout+0x250>
ffffffff802197da:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff802197e0:	48 89 05 49 ef 00 00 	mov    %rax,0xef49(%rip)        # ffffffff80228730 <RME_X64_Layout+0x250>
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff802197e7:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff802197ec:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff802197f2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff802197f7:	48 8b 53 18          	mov    0x18(%rbx),%rdx
ffffffff802197fb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80219800:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219803:	0f 86 97 00 00 00    	jbe    ffffffff802198a0 <__RME_Pgt_Kom_Init+0x4e0>
            PDE_Cnt++;
ffffffff80219809:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff8021980e:	48 83 c0 01          	add    $0x1,%rax
ffffffff80219812:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            if(PDE_Cnt==512)
ffffffff80219817:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff8021981c:	48 3d 00 02 00 00    	cmp    $0x200,%rax
ffffffff80219822:	0f 85 68 ff ff ff    	jne    ffffffff80219790 <__RME_Pgt_Kom_Init+0x3d0>
                PDE_Cnt=0;
ffffffff80219828:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
ffffffff8021982f:	00 00 
                PDP_Cnt++;
ffffffff80219831:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80219836:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021983a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
                if(PDP_Cnt==512)
ffffffff8021983f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80219844:	48 3d 00 02 00 00    	cmp    $0x200,%rax
ffffffff8021984a:	75 15                	jne    ffffffff80219861 <__RME_Pgt_Kom_Init+0x4a1>
                    PDP_Cnt=0;
ffffffff8021984c:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff80219853:	00 00 
                    PML4_Cnt++;
ffffffff80219855:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80219859:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021985d:	48 89 04 24          	mov    %rax,(%rsp)
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff80219861:	48 8b 05 b0 ec 00 00 	mov    0xecb0(%rip),%rax        # ffffffff80228518 <RME_X64_Layout+0x38>
ffffffff80219868:	48 8b 14 24          	mov    (%rsp),%rdx
ffffffff8021986c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffffff80219871:	48 c1 e2 09          	shl    $0x9,%rdx
ffffffff80219875:	4c 01 e0             	add    %r12,%rax
ffffffff80219878:	48 8d 94 11 00 02 00 	lea    0x200(%rcx,%rdx,1),%rdx
ffffffff8021987f:	00 
ffffffff80219880:	48 21 e8             	and    %rbp,%rax
ffffffff80219883:	48 0b 04 d5 00 90 10 	or     -0x7fef7000(,%rdx,8),%rax
ffffffff8021988a:	80 
ffffffff8021988b:	48 83 c8 01          	or     $0x1,%rax
ffffffff8021988f:	48 89 04 d5 00 90 10 	mov    %rax,-0x7fef7000(,%rdx,8)
ffffffff80219896:	80 
ffffffff80219897:	e9 f4 fe ff ff       	jmp    ffffffff80219790 <__RME_Pgt_Kom_Init+0x3d0>
ffffffff8021989c:	0f 1f 40 00          	nopl   0x0(%rax)
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff802198a0:	48 8b 1b             	mov    (%rbx),%rbx
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff802198a3:	48 81 fb 00 70 22 80 	cmp    $0xffffffff80227000,%rbx
ffffffff802198aa:	0f 85 88 fe ff ff    	jne    ffffffff80219738 <__RME_Pgt_Kom_Init+0x378>
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff802198b0:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
ffffffff802198b7:	00 
ffffffff802198b8:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff802198bc:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff802198c2:	7f 38                	jg     ffffffff802198fc <__RME_Pgt_Kom_Init+0x53c>
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff802198c4:	48 b9 00 18 10 00 00 	movabs $0xffff800000101800,%rcx
ffffffff802198cb:	80 ff ff 
ffffffff802198ce:	66 90                	xchg   %ax,%ax
ffffffff802198d0:	48 8b 14 24          	mov    (%rsp),%rdx
ffffffff802198d4:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff802198d8:	48 8b 14 d5 00 98 10 	mov    -0x7fef6800(,%rdx,8),%rdx
ffffffff802198df:	80 
ffffffff802198e0:	48 89 14 c1          	mov    %rdx,(%rcx,%rax,8)
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff802198e4:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff802198e8:	48 83 c0 01          	add    $0x1,%rax
ffffffff802198ec:	48 89 04 24          	mov    %rax,(%rsp)
ffffffff802198f0:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff802198f4:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff802198fa:	7e d4                	jle    ffffffff802198d0 <__RME_Pgt_Kom_Init+0x510>
    RME_X64_Layout.Kom1_Start[0]=RME_ROUND_UP(RME_X64_Layout.Kom1_Start[0],RME_PGT_SIZE_2M);
ffffffff802198fc:	48 8b 05 15 ec 00 00 	mov    0xec15(%rip),%rax        # ffffffff80228518 <RME_X64_Layout+0x38>
ffffffff80219903:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80219909:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff8021990f:	48 89 05 02 ec 00 00 	mov    %rax,0xec02(%rip)        # ffffffff80228518 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Size[0]-1,RME_PGT_SIZE_2M);
ffffffff80219916:	48 8b 05 fb ec 00 00 	mov    0xecfb(%rip),%rax        # ffffffff80228618 <RME_X64_Layout+0x138>
ffffffff8021991d:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80219921:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80219927:	48 89 05 ea ec 00 00 	mov    %rax,0xecea(%rip)        # ffffffff80228618 <RME_X64_Layout+0x138>
    RME_X64_Layout.Kpgtbl_Size=RME_X64_Layout.Kom1_Start[0]-RME_X64_Layout.Kpgtbl_Start;
ffffffff8021992e:	48 8b 05 e3 eb 00 00 	mov    0xebe3(%rip),%rax        # ffffffff80228518 <RME_X64_Layout+0x38>
ffffffff80219935:	48 8b 15 c4 eb 00 00 	mov    0xebc4(%rip),%rdx        # ffffffff80228500 <RME_X64_Layout+0x20>
ffffffff8021993c:	48 29 d0             	sub    %rdx,%rax
ffffffff8021993f:	48 89 05 c2 eb 00 00 	mov    %rax,0xebc2(%rip)        # ffffffff80228508 <RME_X64_Layout+0x28>
    if(RME_X64_Layout.Kom2_Size==0)
ffffffff80219946:	48 8b 05 e3 ed 00 00 	mov    0xede3(%rip),%rax        # ffffffff80228730 <RME_X64_Layout+0x250>
ffffffff8021994d:	48 85 c0             	test   %rax,%rax
ffffffff80219950:	0f 85 6c 02 00 00    	jne    ffffffff80219bc2 <__RME_Pgt_Kom_Init+0x802>
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Start[0]+RME_X64_Layout.Kom1_Size[0]-1,RME_X64_KSTACK_ORDER);
ffffffff80219956:	48 8b 15 bb eb 00 00 	mov    0xebbb(%rip),%rdx        # ffffffff80228518 <RME_X64_Layout+0x38>
ffffffff8021995d:	48 8b 05 b4 ec 00 00 	mov    0xecb4(%rip),%rax        # ffffffff80228618 <RME_X64_Layout+0x138>
ffffffff80219964:	48 8d 44 02 ff       	lea    -0x1(%rdx,%rax,1),%rax
ffffffff80219969:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff8021996f:	48 89 05 c2 ed 00 00 	mov    %rax,0xedc2(%rip)        # ffffffff80228738 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80219976:	48 8b 15 c3 ed 00 00 	mov    0xedc3(%rip),%rdx        # ffffffff80228740 <RME_X64_Layout+0x260>
ffffffff8021997d:	48 8b 05 b4 ed 00 00 	mov    0xedb4(%rip),%rax        # ffffffff80228738 <RME_X64_Layout+0x258>
ffffffff80219984:	48 29 d0             	sub    %rdx,%rax
ffffffff80219987:	48 89 05 aa ed 00 00 	mov    %rax,0xedaa(%rip)        # ffffffff80228738 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom1_Size[0]=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom1_Start[0];
ffffffff8021998e:	48 8b 05 a3 ed 00 00 	mov    0xeda3(%rip),%rax        # ffffffff80228738 <RME_X64_Layout+0x258>
ffffffff80219995:	48 8b 15 7c eb 00 00 	mov    0xeb7c(%rip),%rdx        # ffffffff80228518 <RME_X64_Layout+0x38>
ffffffff8021999c:	48 29 d0             	sub    %rdx,%rax
ffffffff8021999f:	48 89 05 72 ec 00 00 	mov    %rax,0xec72(%rip)        # ffffffff80228618 <RME_X64_Layout+0x138>
    RME_DBG_S("\n\r\n\rKot_Start:     0x");
ffffffff802199a6:	48 c7 c7 d3 db 21 80 	mov    $0xffffffff8021dbd3,%rdi
ffffffff802199ad:	e8 ae 36 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kot_Start);
ffffffff802199b2:	48 8b 3d 27 eb 00 00 	mov    0xeb27(%rip),%rdi        # ffffffff802284e0 <RME_X64_Layout>
ffffffff802199b9:	e8 f2 35 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rKot_Size:      0x");
ffffffff802199be:	48 c7 c7 e9 db 21 80 	mov    $0xffffffff8021dbe9,%rdi
ffffffff802199c5:	e8 96 36 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kot_Size);
ffffffff802199ca:	48 8b 3d 17 eb 00 00 	mov    0xeb17(%rip),%rdi        # ffffffff802284e8 <RME_X64_Layout+0x8>
ffffffff802199d1:	e8 da 35 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rPerCPU_Start:    0x");
ffffffff802199d6:	48 c7 c7 fd db 21 80 	mov    $0xffffffff8021dbfd,%rdi
ffffffff802199dd:	e8 7e 36 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.PerCPU_Start);
ffffffff802199e2:	48 8b 3d 07 eb 00 00 	mov    0xeb07(%rip),%rdi        # ffffffff802284f0 <RME_X64_Layout+0x10>
ffffffff802199e9:	e8 c2 35 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rPerCPU_Size:     0x");
ffffffff802199ee:	48 c7 c7 13 dc 21 80 	mov    $0xffffffff8021dc13,%rdi
ffffffff802199f5:	e8 66 36 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.PerCPU_Size);
ffffffff802199fa:	48 8b 3d f7 ea 00 00 	mov    0xeaf7(%rip),%rdi        # ffffffff802284f8 <RME_X64_Layout+0x18>
ffffffff80219a01:	e8 aa 35 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rKpgtbl_Start:    0x");
ffffffff80219a06:	48 c7 c7 29 dc 21 80 	mov    $0xffffffff8021dc29,%rdi
ffffffff80219a0d:	e8 4e 36 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kpgtbl_Start);
ffffffff80219a12:	48 8b 3d e7 ea 00 00 	mov    0xeae7(%rip),%rdi        # ffffffff80228500 <RME_X64_Layout+0x20>
ffffffff80219a19:	e8 92 35 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rKpgtbl_Size:     0x");
ffffffff80219a1e:	48 c7 c7 3f dc 21 80 	mov    $0xffffffff8021dc3f,%rdi
ffffffff80219a25:	e8 36 36 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kpgtbl_Size);
ffffffff80219a2a:	48 8b 3d d7 ea 00 00 	mov    0xead7(%rip),%rdi        # ffffffff80228508 <RME_X64_Layout+0x28>
ffffffff80219a31:	e8 7a 35 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80219a36:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
ffffffff80219a3d:	00 00 
ffffffff80219a3f:	48 8b 05 ca ea 00 00 	mov    0xeaca(%rip),%rax        # ffffffff80228510 <RME_X64_Layout+0x30>
ffffffff80219a46:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff80219a4b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219a4e:	0f 83 97 00 00 00    	jae    ffffffff80219aeb <__RME_Pgt_Kom_Init+0x72b>
ffffffff80219a54:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_DBG_S("\n\rKom1_Start[");
ffffffff80219a58:	48 c7 c7 55 dc 21 80 	mov    $0xffffffff8021dc55,%rdi
ffffffff80219a5f:	e8 fc 35 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff80219a64:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
ffffffff80219a69:	e8 52 34 ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
        RME_DBG_S("]:  0x");
ffffffff80219a6e:	48 c7 c7 63 dc 21 80 	mov    $0xffffffff8021dc63,%rdi
ffffffff80219a75:	e8 e6 35 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
        RME_DBG_H(RME_X64_Layout.Kom1_Start[Addr_Cnt]);
ffffffff80219a7a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80219a7f:	48 83 c0 06          	add    $0x6,%rax
ffffffff80219a83:	48 8b 3c c5 e8 84 22 	mov    -0x7fdd7b18(,%rax,8),%rdi
ffffffff80219a8a:	80 
ffffffff80219a8b:	e8 20 35 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
        RME_DBG_S("\n\rKom1_Size[");
ffffffff80219a90:	48 c7 c7 6a dc 21 80 	mov    $0xffffffff8021dc6a,%rdi
ffffffff80219a97:	e8 c4 35 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff80219a9c:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
ffffffff80219aa1:	e8 1a 34 ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
        RME_DBG_S("]:   0x");
ffffffff80219aa6:	48 c7 c7 77 dc 21 80 	mov    $0xffffffff8021dc77,%rdi
ffffffff80219aad:	e8 ae 35 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
        RME_DBG_H(RME_X64_Layout.Kom1_Size[Addr_Cnt]);
ffffffff80219ab2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80219ab7:	48 83 c0 26          	add    $0x26,%rax
ffffffff80219abb:	48 8b 3c c5 e8 84 22 	mov    -0x7fdd7b18(,%rax,8),%rdi
ffffffff80219ac2:	80 
ffffffff80219ac3:	e8 e8 34 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80219ac8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80219acd:	48 83 c0 01          	add    $0x1,%rax
ffffffff80219ad1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff80219ad6:	48 8b 15 33 ea 00 00 	mov    0xea33(%rip),%rdx        # ffffffff80228510 <RME_X64_Layout+0x30>
ffffffff80219add:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80219ae2:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219ae5:	0f 87 6d ff ff ff    	ja     ffffffff80219a58 <__RME_Pgt_Kom_Init+0x698>
    RME_DBG_S("\n\rHole_Start:      0x");
ffffffff80219aeb:	48 c7 c7 7f dc 21 80 	mov    $0xffffffff8021dc7f,%rdi
ffffffff80219af2:	e8 69 35 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Hole_Start);
ffffffff80219af7:	48 8b 3d 1a ec 00 00 	mov    0xec1a(%rip),%rdi        # ffffffff80228718 <RME_X64_Layout+0x238>
ffffffff80219afe:	e8 ad 34 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rHole_Size:       0x");
ffffffff80219b03:	48 c7 c7 95 dc 21 80 	mov    $0xffffffff8021dc95,%rdi
ffffffff80219b0a:	e8 51 35 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Hole_Size);
ffffffff80219b0f:	48 8b 3d 0a ec 00 00 	mov    0xec0a(%rip),%rdi        # ffffffff80228720 <RME_X64_Layout+0x240>
ffffffff80219b16:	e8 95 34 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rKom2_Start:     0x");
ffffffff80219b1b:	48 c7 c7 ab dc 21 80 	mov    $0xffffffff8021dcab,%rdi
ffffffff80219b22:	e8 39 35 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Start);
ffffffff80219b27:	48 8b 3d fa eb 00 00 	mov    0xebfa(%rip),%rdi        # ffffffff80228728 <RME_X64_Layout+0x248>
ffffffff80219b2e:	e8 7d 34 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rKom2_Size:      0x");
ffffffff80219b33:	48 c7 c7 c0 dc 21 80 	mov    $0xffffffff8021dcc0,%rdi
ffffffff80219b3a:	e8 21 35 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Size);
ffffffff80219b3f:	48 8b 3d ea eb 00 00 	mov    0xebea(%rip),%rdi        # ffffffff80228730 <RME_X64_Layout+0x250>
ffffffff80219b46:	e8 65 34 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rStack_Start:     0x");
ffffffff80219b4b:	48 c7 c7 d5 dc 21 80 	mov    $0xffffffff8021dcd5,%rdi
ffffffff80219b52:	e8 09 35 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Stack_Start);
ffffffff80219b57:	48 8b 3d da eb 00 00 	mov    0xebda(%rip),%rdi        # ffffffff80228738 <RME_X64_Layout+0x258>
ffffffff80219b5e:	e8 4d 34 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rStack_Size:      0x");
ffffffff80219b63:	48 c7 c7 eb dc 21 80 	mov    $0xffffffff8021dceb,%rdi
ffffffff80219b6a:	e8 f1 34 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Stack_Size);
ffffffff80219b6f:	48 8b 3d ca eb 00 00 	mov    0xebca(%rip),%rdi        # ffffffff80228740 <RME_X64_Layout+0x260>
ffffffff80219b76:	e8 35 34 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
}
ffffffff80219b7b:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80219b7f:	31 c0                	xor    %eax,%eax
ffffffff80219b81:	5b                   	pop    %rbx
ffffffff80219b82:	5d                   	pop    %rbp
ffffffff80219b83:	41 5c                	pop    %r12
ffffffff80219b85:	c3                   	ret    
ffffffff80219b86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80219b8d:	00 00 00 
            RME_DBG_S("\n\rAbandoning physical memory above 4G: addr 0x");
ffffffff80219b90:	48 c7 c7 88 e2 21 80 	mov    $0xffffffff8021e288,%rdi
ffffffff80219b97:	e8 c4 34 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
            RME_DBG_H(Mem->Start_Addr);
ffffffff80219b9c:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff80219ba0:	e8 0b 34 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
            RME_DBG_S(", length 0x");
ffffffff80219ba5:	48 c7 c7 c7 db 21 80 	mov    $0xffffffff8021dbc7,%rdi
ffffffff80219bac:	e8 af 34 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
            RME_DBG_H(Mem->Length);
ffffffff80219bb1:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff80219bb5:	e8 f6 33 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80219bba:	48 8b 1b             	mov    (%rbx),%rbx
            continue;
ffffffff80219bbd:	e9 e1 fc ff ff       	jmp    ffffffff802198a3 <__RME_Pgt_Kom_Init+0x4e3>
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size-1,RME_X64_KSTACK_ORDER);
ffffffff80219bc2:	48 8b 15 5f eb 00 00 	mov    0xeb5f(%rip),%rdx        # ffffffff80228728 <RME_X64_Layout+0x248>
ffffffff80219bc9:	48 8b 05 60 eb 00 00 	mov    0xeb60(%rip),%rax        # ffffffff80228730 <RME_X64_Layout+0x250>
ffffffff80219bd0:	48 8d 44 02 ff       	lea    -0x1(%rdx,%rax,1),%rax
ffffffff80219bd5:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff80219bdb:	48 89 05 56 eb 00 00 	mov    %rax,0xeb56(%rip)        # ffffffff80228738 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80219be2:	48 8b 15 57 eb 00 00 	mov    0xeb57(%rip),%rdx        # ffffffff80228740 <RME_X64_Layout+0x260>
ffffffff80219be9:	48 8b 05 48 eb 00 00 	mov    0xeb48(%rip),%rax        # ffffffff80228738 <RME_X64_Layout+0x258>
ffffffff80219bf0:	48 29 d0             	sub    %rdx,%rax
ffffffff80219bf3:	48 89 05 3e eb 00 00 	mov    %rax,0xeb3e(%rip)        # ffffffff80228738 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom2_Start;
ffffffff80219bfa:	48 8b 05 37 eb 00 00 	mov    0xeb37(%rip),%rax        # ffffffff80228738 <RME_X64_Layout+0x258>
ffffffff80219c01:	48 8b 15 20 eb 00 00 	mov    0xeb20(%rip),%rdx        # ffffffff80228728 <RME_X64_Layout+0x248>
ffffffff80219c08:	48 29 d0             	sub    %rdx,%rax
ffffffff80219c0b:	48 89 05 1e eb 00 00 	mov    %rax,0xeb1e(%rip)        # ffffffff80228730 <RME_X64_Layout+0x250>
ffffffff80219c12:	e9 8f fd ff ff       	jmp    ffffffff802199a6 <__RME_Pgt_Kom_Init+0x5e6>
        RME_DBG_S("\n\rThis CPU do not have 1GB superpage support");
ffffffff80219c17:	48 c7 c7 f0 e1 21 80 	mov    $0xffffffff8021e1f0,%rdi
ffffffff80219c1e:	e8 3d 34 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff80219c23:	48 8b 05 ce 03 ff ff 	mov    -0xfc32(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff80219c2a:	48 81 0d cb 03 ef ff 	orq    $0x104001,-0x10fc35(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80219c31:	01 40 10 00 
        RME_X64_Kpgt.PDP[0][1]|=0x105000|RME_X64_MMU_P;
ffffffff80219c35:	48 81 0d c8 03 ef ff 	orq    $0x105001,-0x10fc38(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80219c3c:	01 50 10 00 
        RME_X64_Kpgt.PDP[0][2]|=0x106000|RME_X64_MMU_P;
ffffffff80219c40:	48 81 0d c5 03 ef ff 	orq    $0x106001,-0x10fc3b(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80219c47:	01 60 10 00 
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff80219c4b:	48 0d 01 50 10 00    	or     $0x105001,%rax
        RME_X64_Kpgt.PDP[0][3]|=0x107000|RME_X64_MMU_PCD|RME_X64_MMU_PWT|RME_X64_MMU_P;
ffffffff80219c51:	48 81 0d bc 03 ef ff 	orq    $0x107019,-0x10fc44(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80219c58:	19 70 10 00 
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
ffffffff80219c5c:	48 81 0d 89 03 ff ff 	orq    $0x104001,-0xfc77(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff80219c63:	01 40 10 00 
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff80219c67:	e9 a1 f8 ff ff       	jmp    ffffffff8021950d <__RME_Pgt_Kom_Init+0x14d>
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGT_SIZE_16M));
ffffffff80219c6c:	48 8b 05 9d d3 00 00 	mov    0xd39d(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80219c73:	48 8b 05 76 e8 00 00 	mov    0xe876(%rip),%rax        # ffffffff802284f0 <RME_X64_Layout+0x10>
    Addr_Cnt=1;
ffffffff80219c7a:	48 c7 c3 00 70 22 80 	mov    $0xffffffff80227000,%rbx
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80219c81:	48 8b 15 70 e8 00 00 	mov    0xe870(%rip),%rdx        # ffffffff802284f8 <RME_X64_Layout+0x18>
ffffffff80219c88:	48 01 d0             	add    %rdx,%rax
ffffffff80219c8b:	48 89 05 86 e8 00 00 	mov    %rax,0xe886(%rip)        # ffffffff80228518 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219c92:	48 8b 05 77 d3 00 00 	mov    0xd377(%rip),%rax        # ffffffff80227010 <RME_x64_timestamp>
ffffffff80219c99:	48 8b 0d 78 d3 00 00 	mov    0xd378(%rip),%rcx        # ffffffff80227018 <vga_buffer>
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80219ca0:	48 8b 15 71 e8 00 00 	mov    0xe871(%rip),%rdx        # ffffffff80228518 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219ca7:	48 01 c8             	add    %rcx,%rax
ffffffff80219caa:	48 b9 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rcx
ffffffff80219cb1:	7f ff ff 
ffffffff80219cb4:	48 01 c8             	add    %rcx,%rax
ffffffff80219cb7:	48 29 d0             	sub    %rdx,%rax
ffffffff80219cba:	48 89 05 57 e9 00 00 	mov    %rax,0xe957(%rip)        # ffffffff80228618 <RME_X64_Layout+0x138>
    Addr_Cnt=1;
ffffffff80219cc1:	48 c7 44 24 18 01 00 	movq   $0x1,0x18(%rsp)
ffffffff80219cc8:	00 00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219cca:	e9 b1 f9 ff ff       	jmp    ffffffff80219680 <__RME_Pgt_Kom_Init+0x2c0>
ffffffff80219ccf:	90                   	nop

ffffffff80219cd0 <__RME_SMP_Low_Level_Init>:
{
ffffffff80219cd0:	f3 0f 1e fa          	endbr64 
ffffffff80219cd4:	53                   	push   %rbx
    __RME_X64_CPU_Local_Init();
ffffffff80219cd5:	e8 26 b1 ff ff       	call   ffffffff80214e00 <__RME_X64_CPU_Local_Init>
    __RME_X64_LAPIC_Init();
ffffffff80219cda:	e8 51 af ff ff       	call   ffffffff80214c30 <__RME_X64_LAPIC_Init>
    CPU_Local=RME_CPU_LOCAL();
ffffffff80219cdf:	e8 5b 1b ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80219ce4:	48 89 c3             	mov    %rax,%rbx
    RME_ASSERT(CPU_Local->CPUID==RME_X64_CPU_Cnt);
ffffffff80219ce7:	48 8b 05 d2 e7 00 00 	mov    0xe7d2(%rip),%rax        # ffffffff802284c0 <RME_X64_CPU_Cnt>
    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
ffffffff80219cee:	48 8b 15 cb e7 00 00 	mov    0xe7cb(%rip),%rdx        # ffffffff802284c0 <RME_X64_CPU_Cnt>
ffffffff80219cf5:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80219cf9:	48 c7 82 c8 74 22 80 	movq   $0x1,-0x7fdd8b38(%rdx)
ffffffff80219d00:	01 00 00 00 
    while(RME_X64_CPU_Cnt!=0);
ffffffff80219d04:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80219d08:	48 8b 15 b1 e7 00 00 	mov    0xe7b1(%rip),%rdx        # ffffffff802284c0 <RME_X64_CPU_Cnt>
ffffffff80219d0f:	48 85 d2             	test   %rdx,%rdx
ffffffff80219d12:	75 f4                	jne    ffffffff80219d08 <__RME_SMP_Low_Level_Init+0x38>
    __RME_X64_Pgt_Set(RME_X64_VA2PA(RME_CAP_GETOBJ(Pgt,rme_ptr_t)));
ffffffff80219d14:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff80219d1b:	80 00 00 
    __RME_Pgt_Set((CPU_Local->Thd_Cur)->Sched.Prc->Pgt);
ffffffff80219d1e:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffffff80219d22:	48 8b 40 58          	mov    0x58(%rax),%rax
    __RME_X64_Pgt_Set(RME_X64_VA2PA(RME_CAP_GETOBJ(Pgt,rme_ptr_t)));
ffffffff80219d26:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80219d2a:	48 03 78 18          	add    0x18(%rax),%rdi
ffffffff80219d2e:	e8 76 1b ff ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
    __RME_Enter_User_Mode(0, RME_X64_USTACK(CPU_Local->CPUID), CPU_Local->CPUID);
ffffffff80219d33:	48 8b 13             	mov    (%rbx),%rdx
ffffffff80219d36:	31 ff                	xor    %edi,%edi
ffffffff80219d38:	48 8d b2 01 04 00 00 	lea    0x401(%rdx),%rsi
ffffffff80219d3f:	48 c1 e6 0b          	shl    $0xb,%rsi
ffffffff80219d43:	e8 78 1b ff ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
}
ffffffff80219d48:	31 c0                	xor    %eax,%eax
ffffffff80219d4a:	5b                   	pop    %rbx
ffffffff80219d4b:	c3                   	ret    
ffffffff80219d4c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80219d50 <__RME_Boot>:
{
ffffffff80219d50:	f3 0f 1e fa          	endbr64 
ffffffff80219d54:	41 57                	push   %r15
    RME_DBG_S("\r\nCPU 0 local IDT/GDT init");
ffffffff80219d56:	48 c7 c7 01 dd 21 80 	mov    $0xffffffff8021dd01,%rdi
    vga_buffer++;
ffffffff80219d5d:	48 b8 02 80 0b 00 00 	movabs $0xffff8000000b8002,%rax
ffffffff80219d64:	80 ff ff 
{
ffffffff80219d67:	41 56                	push   %r14
ffffffff80219d69:	41 55                	push   %r13
ffffffff80219d6b:	41 54                	push   %r12
ffffffff80219d6d:	55                   	push   %rbp
ffffffff80219d6e:	53                   	push   %rbx
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff80219d6f:	48 bb 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rbx
ffffffff80219d76:	80 ff ff 
{
ffffffff80219d79:	48 83 ec 28          	sub    $0x28,%rsp
    vga_buffer++;
ffffffff80219d7d:	48 89 05 94 d2 00 00 	mov    %rax,0xd294(%rip)        # ffffffff80227018 <vga_buffer>
    RME_X64_CPU_Cnt = 0;
ffffffff80219d84:	48 c7 05 31 e7 00 00 	movq   $0x0,0xe731(%rip)        # ffffffff802284c0 <RME_X64_CPU_Cnt>
ffffffff80219d8b:	00 00 00 00 
    RME_DBG_S("\r\nCPU 0 local IDT/GDT init");
ffffffff80219d8f:	e8 cc 32 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    __RME_X64_CPU_Local_Init();
ffffffff80219d94:	e8 67 b0 ff ff       	call   ffffffff80214e00 <__RME_X64_CPU_Local_Init>
    RME_DBG_S("\r\nCPU 0 LAPIC init");
ffffffff80219d99:	48 c7 c7 1c dd 21 80 	mov    $0xffffffff8021dd1c,%rdi
ffffffff80219da0:	e8 bb 32 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_S("\r\nPIC init");
ffffffff80219da5:	48 c7 c7 2f dd 21 80 	mov    $0xffffffff8021dd2f,%rdi
    __RME_X64_LAPIC_Init();
ffffffff80219dac:	e8 7f ae ff ff       	call   ffffffff80214c30 <__RME_X64_LAPIC_Init>
    RME_DBG_S("\r\nPIC init");
ffffffff80219db1:	e8 aa 32 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80219db6:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80219dbb:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219dc0:	e8 45 1a ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff80219dc5:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80219dca:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219dcf:	e8 36 1a ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x11);
ffffffff80219dd4:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80219dd9:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80219dde:	e8 27 1a ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, RME_X64_INT_USER(0));
ffffffff80219de3:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80219de8:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219ded:	e8 18 1a ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 1<<2);
ffffffff80219df2:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80219df7:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219dfc:	e8 09 1a ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0x3);
ffffffff80219e01:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80219e06:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219e0b:	e8 fa 19 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x11);
ffffffff80219e10:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80219e15:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80219e1a:	e8 eb 19 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, RME_X64_INT_USER(8));
ffffffff80219e1f:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff80219e24:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219e29:	e8 dc 19 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 2);
ffffffff80219e2e:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80219e33:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219e38:	e8 cd 19 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0x3);
ffffffff80219e3d:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80219e42:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219e47:	e8 be 19 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x68);
ffffffff80219e4c:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80219e51:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80219e56:	e8 af 19 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x0A);
ffffffff80219e5b:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80219e60:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80219e65:	e8 a0 19 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x68);
ffffffff80219e6a:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80219e6f:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80219e74:	e8 91 19 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x0A);
ffffffff80219e79:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80219e7e:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80219e83:	e8 82 19 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80219e88:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80219e8d:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219e92:	e8 73 19 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff80219e97:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80219e9c:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219ea1:	e8 64 19 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    RME_DBG_S("\r\nIOAPIC init");
ffffffff80219ea6:	48 c7 c7 3a dd 21 80 	mov    $0xffffffff8021dd3a,%rdi
ffffffff80219ead:	e8 ae 31 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff80219eb2:	c7 03 01 00 00 00    	movl   $0x1,(%rbx)
    Max_Int=((Max_Int>>16)&0xFF);
ffffffff80219eb8:	44 0f b6 63 12       	movzbl 0x12(%rbx),%r12d
    RME_DBG_S("\n\rMax interupt number is: ");
ffffffff80219ebd:	48 c7 c7 48 dd 21 80 	mov    $0xffffffff8021dd48,%rdi
ffffffff80219ec4:	e8 97 31 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_I(Max_Int);
ffffffff80219ec9:	4c 89 e7             	mov    %r12,%rdi
ffffffff80219ecc:	e8 ef 2f ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_ID,IOAPIC_ID);
ffffffff80219ed1:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
ffffffff80219ed7:	8b 6b 10             	mov    0x10(%rbx),%ebp
    RME_DBG_S("\n\rIOAPIC ID is: ");
ffffffff80219eda:	48 c7 c7 63 dd 21 80 	mov    $0xffffffff8021dd63,%rdi
ffffffff80219ee1:	e8 7a 31 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    IOAPIC_ID>>=24;
ffffffff80219ee6:	48 89 ef             	mov    %rbp,%rdi
ffffffff80219ee9:	48 c1 ef 18          	shr    $0x18,%rdi
    RME_DBG_I(IOAPIC_ID);
ffffffff80219eed:	e8 ce 2f ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,0);
ffffffff80219ef2:	43 8d 44 24 11       	lea    0x11(%r12,%r12,1),%eax
ffffffff80219ef7:	89 03                	mov    %eax,(%rbx)
ffffffff80219ef9:	48 b8 10 00 c0 fe 00 	movabs $0xffff8000fec00010,%rax
ffffffff80219f00:	80 ff ff 
ffffffff80219f03:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    __RME_X64_SMP_Init();
ffffffff80219f09:	e8 f2 e9 ff ff       	call   ffffffff80218900 <__RME_X64_SMP_Init>
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff80219f0e:	4c 8b 3d 03 e6 00 00 	mov    0xe603(%rip),%r15        # ffffffff80228518 <RME_X64_Layout+0x38>
    RME_DBG_S("\r\nKot registration start offset: 0x");
ffffffff80219f15:	48 c7 c7 b8 e2 21 80 	mov    $0xffffffff8021e2b8,%rdi
ffffffff80219f1c:	e8 3f 31 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff80219f21:	48 bf 00 00 a0 00 00 	movabs $0x800000a00000,%rdi
ffffffff80219f28:	80 00 00 
ffffffff80219f2b:	4c 01 ff             	add    %r15,%rdi
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff80219f2e:	49 8d 9f 00 00 00 02 	lea    0x2000000(%r15),%rbx
    RME_DBG_H(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff80219f35:	48 c1 ef 07          	shr    $0x7,%rdi
ffffffff80219f39:	e8 72 30 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_ASSERT(_RME_Cpt_Boot_Init(RME_BOOT_INIT_CPT,Cur_Addr,16)==RME_BOOT_INIT_CPT);
ffffffff80219f3e:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff80219f43:	48 89 de             	mov    %rbx,%rsi
ffffffff80219f46:	31 ff                	xor    %edi,%edi
ffffffff80219f48:	e8 53 48 ff ff       	call   ffffffff8020e7a0 <_RME_Cpt_Boot_Init>
    Cur_Addr+=RME_KOM_ROUND(RME_CPT_SIZE(16));
ffffffff80219f4d:	49 8d 8f 00 04 00 02 	lea    0x2000400(%r15),%rcx
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff80219f54:	31 f6                	xor    %esi,%esi
    for(Count=0;Count<16;Count++)
ffffffff80219f56:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff80219f58:	41 b8 11 20 00 00    	mov    $0x2011,%r8d
ffffffff80219f5e:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80219f63:	48 89 df             	mov    %rbx,%rdi
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff80219f66:	49 81 c7 3f 18 08 02 	add    $0x208183f,%r15
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff80219f6d:	e8 ce 48 ff ff       	call   ffffffff8020e840 <_RME_Cpt_Boot_Crt>
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff80219f72:	49 81 e7 00 f0 ff ff 	and    $0xfffffffffffff000,%r15
    RME_DBG_S("\r\nPML4 address:");
ffffffff80219f79:	48 c7 c7 74 dd 21 80 	mov    $0xffffffff8021dd74,%rdi
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff80219f80:	4c 89 7c 24 10       	mov    %r15,0x10(%rsp)
    Cur_Addr+=RME_KOM_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff80219f85:	4d 8d a7 00 10 00 00 	lea    0x1000(%r15),%r12
    RME_DBG_S("\r\nPML4 address:");
ffffffff80219f8c:	e8 cf 30 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(Cur_Addr);
ffffffff80219f91:	4c 89 ff             	mov    %r15,%rdi
ffffffff80219f94:	e8 17 30 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff80219f99:	6a 09                	push   $0x9
ffffffff80219f9b:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff80219fa1:	45 31 c0             	xor    %r8d,%r8d
ffffffff80219fa4:	6a 27                	push   $0x27
ffffffff80219fa6:	4c 89 f9             	mov    %r15,%rcx
ffffffff80219fa9:	31 d2                	xor    %edx,%edx
ffffffff80219fab:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219fb0:	48 89 df             	mov    %rbx,%rdi
ffffffff80219fb3:	e8 68 4a ff ff       	call   ffffffff8020ea20 <_RME_Pgt_Boot_Crt>
    Cur_Addr+=RME_KOM_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff80219fb8:	41 5a                	pop    %r10
ffffffff80219fba:	41 5b                	pop    %r11
ffffffff80219fbc:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff80219fc0:	6a 09                	push   $0x9
ffffffff80219fc2:	49 89 ed             	mov    %rbp,%r13
ffffffff80219fc5:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80219fc9:	45 31 c9             	xor    %r9d,%r9d
ffffffff80219fcc:	6a 1e                	push   $0x1e
ffffffff80219fce:	4d 89 e8             	mov    %r13,%r8
ffffffff80219fd1:	4c 89 e1             	mov    %r12,%rcx
ffffffff80219fd4:	48 89 ea             	mov    %rbp,%rdx
ffffffff80219fd7:	49 c1 e0 27          	shl    $0x27,%r8
ffffffff80219fdb:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219fe0:	48 89 df             	mov    %rbx,%rdi
        Cur_Addr+=RME_KOM_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff80219fe3:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff80219fea:	e8 31 4a ff ff       	call   ffffffff8020ea20 <_RME_Pgt_Boot_Crt>
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4), Count,
ffffffff80219fef:	48 89 e9             	mov    %rbp,%rcx
ffffffff80219ff2:	4c 89 ea             	mov    %r13,%rdx
ffffffff80219ff5:	be 00 80 01 00       	mov    $0x18000,%esi
ffffffff80219ffa:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8021a000:	48 81 c9 00 80 01 00 	or     $0x18000,%rcx
ffffffff8021a007:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a00a:	e8 b1 36 ff ff       	call   ffffffff8020d6c0 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<16;Count++)
ffffffff8021a00f:	41 58                	pop    %r8
ffffffff8021a011:	41 59                	pop    %r9
ffffffff8021a013:	48 83 fd 10          	cmp    $0x10,%rbp
ffffffff8021a017:	75 a7                	jne    ffffffff80219fc0 <__RME_Boot+0x270>
        Cur_Addr+=RME_KOM_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8021a019:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    for(Count=0;Count<8192;Count++)
ffffffff8021a01e:	31 ed                	xor    %ebp,%ebp
        Cur_Addr+=RME_KOM_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8021a020:	4c 8d a0 00 10 01 00 	lea    0x11000(%rax),%r12
ffffffff8021a027:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a02e:	00 00 
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff8021a030:	6a 09                	push   $0x9
ffffffff8021a032:	4c 8d 6d 11          	lea    0x11(%rbp),%r13
ffffffff8021a036:	49 89 e8             	mov    %rbp,%r8
ffffffff8021a039:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021a03c:	6a 15                	push   $0x15
ffffffff8021a03e:	45 31 c9             	xor    %r9d,%r9d
ffffffff8021a041:	49 c1 e0 1e          	shl    $0x1e,%r8
ffffffff8021a045:	4c 89 ea             	mov    %r13,%rdx
ffffffff8021a048:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a04d:	48 89 df             	mov    %rbx,%rdi
        Cur_Addr+=RME_KOM_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8021a050:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff8021a057:	e8 c4 49 ff ff       	call   ffffffff8020ea20 <_RME_Pgt_Boot_Crt>
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff8021a05c:	48 89 ee             	mov    %rbp,%rsi
ffffffff8021a05f:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a062:	4c 89 e9             	mov    %r13,%rcx
ffffffff8021a065:	48 c1 fe 09          	sar    $0x9,%rsi
ffffffff8021a069:	48 89 df             	mov    %rbx,%rdi
    for(Count=0;Count<8192;Count++)
ffffffff8021a06c:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff8021a070:	48 81 c9 00 80 01 00 	or     $0x18000,%rcx
ffffffff8021a077:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8021a07b:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
ffffffff8021a081:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8021a087:	48 81 ce 00 80 01 00 	or     $0x18000,%rsi
ffffffff8021a08e:	e8 2d 36 ff ff       	call   ffffffff8020d6c0 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<8192;Count++)
ffffffff8021a093:	5e                   	pop    %rsi
ffffffff8021a094:	5f                   	pop    %rdi
ffffffff8021a095:	48 81 fd 00 20 00 00 	cmp    $0x2000,%rbp
ffffffff8021a09c:	75 92                	jne    ffffffff8021a030 <__RME_Boot+0x2e0>
        Cur_Addr+=RME_KOM_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8021a09e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff8021a0a3:	41 bc ff ff 1f 00    	mov    $0x1fffff,%r12d
ffffffff8021a0a9:	bd 00 00 20 00       	mov    $0x200000,%ebp
ffffffff8021a0ae:	4c 8b 3d 5b e4 00 00 	mov    0xe45b(%rip),%r15        # ffffffff80228510 <RME_X64_Layout+0x30>
        Cur_Addr+=RME_KOM_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8021a0b5:	48 05 00 10 01 02    	add    $0x2011000,%rax
ffffffff8021a0bb:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff8021a0c0:	4d 85 ff             	test   %r15,%r15
ffffffff8021a0c3:	0f 84 ad 00 00 00    	je     ffffffff8021a176 <__RME_Boot+0x426>
ffffffff8021a0c9:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff8021a0d0:	00 00 
    Page_Ptr=0;
ffffffff8021a0d2:	45 31 ff             	xor    %r15d,%r15d
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021a0d5:	49 bd 00 00 00 00 00 	movabs $0x800000000000,%r13
ffffffff8021a0dc:	80 00 00 
ffffffff8021a0df:	90                   	nop
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a0e0:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff8021a0e5:	45 31 f6             	xor    %r14d,%r14d
ffffffff8021a0e8:	48 8d 6f 26          	lea    0x26(%rdi),%rbp
ffffffff8021a0ec:	4c 8d 67 06          	lea    0x6(%rdi),%r12
ffffffff8021a0f0:	48 8b 04 ed e8 84 22 	mov    -0x7fdd7b18(,%rbp,8),%rax
ffffffff8021a0f7:	80 
ffffffff8021a0f8:	48 85 c0             	test   %rax,%rax
ffffffff8021a0fb:	74 52                	je     ffffffff8021a14f <__RME_Boot+0x3ff>
ffffffff8021a0fd:	0f 1f 00             	nopl   (%rax)
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a100:	4c 89 fe             	mov    %r15,%rsi
ffffffff8021a103:	4c 89 f9             	mov    %r15,%rcx
ffffffff8021a106:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8021a10c:	48 89 df             	mov    %rbx,%rdi
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021a10f:	4a 8b 14 e5 e8 84 22 	mov    -0x7fdd7b18(,%r12,8),%rdx
ffffffff8021a116:	80 
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a117:	48 c1 ee 09          	shr    $0x9,%rsi
ffffffff8021a11b:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
            Page_Ptr++;
ffffffff8021a121:	49 83 c7 01          	add    $0x1,%r15
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a125:	48 83 c6 11          	add    $0x11,%rsi
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021a129:	4c 01 ea             	add    %r13,%rdx
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a12c:	48 81 ce 00 80 01 00 	or     $0x18000,%rsi
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021a133:	4c 01 f2             	add    %r14,%rdx
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a136:	49 81 c6 00 00 20 00 	add    $0x200000,%r14
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a13d:	e8 4e 34 ff ff       	call   ffffffff8020d590 <_RME_Pgt_Boot_Add>
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a142:	48 8b 04 ed e8 84 22 	mov    -0x7fdd7b18(,%rbp,8),%rax
ffffffff8021a149:	80 
ffffffff8021a14a:	49 39 c6             	cmp    %rax,%r14
ffffffff8021a14d:	72 b1                	jb     ffffffff8021a100 <__RME_Boot+0x3b0>
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff8021a14f:	48 83 44 24 08 01    	addq   $0x1,0x8(%rsp)
ffffffff8021a155:	48 8b 05 b4 e3 00 00 	mov    0xe3b4(%rip),%rax        # ffffffff80228510 <RME_X64_Layout+0x30>
ffffffff8021a15c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff8021a161:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021a164:	0f 87 76 ff ff ff    	ja     ffffffff8021a0e0 <__RME_Boot+0x390>
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8021a16a:	49 8d 6f 01          	lea    0x1(%r15),%rbp
ffffffff8021a16e:	48 c1 e5 15          	shl    $0x15,%rbp
ffffffff8021a172:	4c 8d 65 ff          	lea    -0x1(%rbp),%r12
    RME_DBG_S("\r\nKom1 pages: 0x");
ffffffff8021a176:	48 c7 c7 84 dd 21 80 	mov    $0xffffffff8021dd84,%rdi
ffffffff8021a17d:	e8 de 2e ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(Page_Ptr);
ffffffff8021a182:	4c 89 ff             	mov    %r15,%rdi
ffffffff8021a185:	e8 26 2e ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S(", [0x0, 0x");
ffffffff8021a18a:	48 c7 c7 95 dd 21 80 	mov    $0xffffffff8021dd95,%rdi
ffffffff8021a191:	e8 ca 2e ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8021a196:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021a199:	e8 12 2e ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("]");
ffffffff8021a19e:	48 c7 c7 a0 dd 21 80 	mov    $0xffffffff8021dda0,%rdi
ffffffff8021a1a5:	e8 b6 2e ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_S("\r\nKom2 pages: 0x");
ffffffff8021a1aa:	48 c7 c7 a2 dd 21 80 	mov    $0xffffffff8021dda2,%rdi
ffffffff8021a1b1:	e8 aa 2e ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M));
ffffffff8021a1b6:	48 8b 3d 73 e5 00 00 	mov    0xe573(%rip),%rdi        # ffffffff80228730 <RME_X64_Layout+0x250>
ffffffff8021a1bd:	48 c1 ef 15          	shr    $0x15,%rdi
ffffffff8021a1c1:	e8 ea 2d ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S(", [0x");
ffffffff8021a1c6:	48 c7 c7 b3 dd 21 80 	mov    $0xffffffff8021ddb3,%rdi
ffffffff8021a1cd:	e8 8e 2e ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M));
ffffffff8021a1d2:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021a1d5:	e8 d6 2d ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S(", 0x");
ffffffff8021a1da:	48 c7 c7 9b dd 21 80 	mov    $0xffffffff8021dd9b,%rdi
ffffffff8021a1e1:	e8 7a 2e ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a1e6:	48 8b 05 43 e5 00 00 	mov    0xe543(%rip),%rax        # ffffffff80228730 <RME_X64_Layout+0x250>
ffffffff8021a1ed:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021a1f1:	0f 84 b1 00 00 00    	je     ffffffff8021a2a8 <__RME_Boot+0x558>
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a1f7:	49 bd 00 f0 ff ff ff 	movabs $0xffffffffff000,%r13
ffffffff8021a1fe:	ff 0f 00 
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a201:	bd 00 08 00 00       	mov    $0x800,%ebp
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a206:	49 bc 00 00 00 00 00 	movabs $0xffff800000000000,%r12
ffffffff8021a20d:	80 ff ff 
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a210:	48 89 e8             	mov    %rbp,%rax
ffffffff8021a213:	48 89 ea             	mov    %rbp,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a216:	4c 89 fe             	mov    %r15,%rsi
ffffffff8021a219:	4c 89 f9             	mov    %r15,%rcx
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a21c:	48 c1 f8 12          	sar    $0x12,%rax
ffffffff8021a220:	48 c1 fa 09          	sar    $0x9,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a224:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
ffffffff8021a22a:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a230:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff8021a234:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a23a:	48 c1 ee 09          	shr    $0x9,%rsi
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a23e:	48 8d 84 02 00 02 00 	lea    0x200(%rdx,%rax,1),%rax
ffffffff8021a245:	00 
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a246:	48 89 ea             	mov    %rbp,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a249:	48 83 c6 11          	add    $0x11,%rsi
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a24d:	48 83 c5 01          	add    $0x1,%rbp
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a251:	48 8b 3c c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rdi
ffffffff8021a258:	80 
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a259:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a25f:	48 81 ce 00 80 01 00 	or     $0x18000,%rsi
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a266:	4c 21 ef             	and    %r13,%rdi
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a269:	48 8d 04 d7          	lea    (%rdi,%rdx,8),%rax
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a26d:	48 89 df             	mov    %rbx,%rdi
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a270:	4a 8b 14 20          	mov    (%rax,%r12,1),%rdx
ffffffff8021a274:	4c 21 ea             	and    %r13,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a277:	e8 14 33 ff ff       	call   ffffffff8020d590 <_RME_Pgt_Boot_Add>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a27c:	48 8b 05 ad e4 00 00 	mov    0xe4ad(%rip),%rax        # ffffffff80228730 <RME_X64_Layout+0x250>
ffffffff8021a283:	4c 89 fa             	mov    %r15,%rdx
        Page_Ptr++;
ffffffff8021a286:	49 83 c7 01          	add    $0x1,%r15
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a28a:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021a28e:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021a294:	48 39 e8             	cmp    %rbp,%rax
ffffffff8021a297:	0f 87 73 ff ff ff    	ja     ffffffff8021a210 <__RME_Boot+0x4c0>
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8021a29d:	48 c1 e2 15          	shl    $0x15,%rdx
ffffffff8021a2a1:	4c 8d a2 ff ff 3f 00 	lea    0x3fffff(%rdx),%r12
ffffffff8021a2a8:	4c 89 e7             	mov    %r12,%rdi
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a2ab:	31 ed                	xor    %ebp,%ebp
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8021a2ad:	e8 fe 2c ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("]");
ffffffff8021a2b2:	48 c7 c7 a0 dd 21 80 	mov    $0xffffffff8021dda0,%rdi
ffffffff8021a2b9:	e8 a2 2d ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_ASSERT(_RME_Prc_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_PRC,
ffffffff8021a2be:	41 b8 00 80 01 00    	mov    $0x18000,%r8d
ffffffff8021a2c4:	31 c9                	xor    %ecx,%ecx
ffffffff8021a2c6:	31 f6                	xor    %esi,%esi
ffffffff8021a2c8:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff8021a2cd:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a2d0:	e8 0b 53 ff ff       	call   ffffffff8020f5e0 <_RME_Prc_Boot_Crt>
    RME_ASSERT(_RME_Kfn_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_KERN)==0);
ffffffff8021a2d5:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021a2da:	31 f6                	xor    %esi,%esi
ffffffff8021a2dc:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a2df:	e8 dc a7 ff ff       	call   ffffffff80214ac0 <_RME_Kfn_Boot_Crt>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_KOM, Cur_Addr, RME_X64_KOM1_MAXSEGS+1)==0);
ffffffff8021a2e4:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
ffffffff8021a2e9:	31 f6                	xor    %esi,%esi
ffffffff8021a2eb:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a2ee:	41 b8 21 00 00 00    	mov    $0x21,%r8d
ffffffff8021a2f4:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff8021a2f9:	e8 42 45 ff ff       	call   ffffffff8020e840 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOM_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff8021a2fe:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a303:	48 8b 05 06 e2 00 00 	mov    0xe206(%rip),%rax        # ffffffff80228510 <RME_X64_Layout+0x30>
    Cur_Addr+=RME_KOM_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff8021a30a:	49 81 c7 40 18 01 02 	add    $0x2011840,%r15
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a311:	48 85 c0             	test   %rax,%rax
ffffffff8021a314:	74 54                	je     ffffffff8021a36a <__RME_Boot+0x61a>
ffffffff8021a316:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021a31d:	00 00 00 
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a320:	48 8d 45 06          	lea    0x6(%rbp),%rax
ffffffff8021a324:	48 8d 55 26          	lea    0x26(%rbp),%rdx
ffffffff8021a328:	41 b9 0f 00 00 00    	mov    $0xf,%r9d
ffffffff8021a32e:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a331:	48 8b 34 c5 e8 84 22 	mov    -0x7fdd7b18(,%rax,8),%rsi
ffffffff8021a338:	80 
ffffffff8021a339:	48 8b 14 d5 e8 84 22 	mov    -0x7fdd7b18(,%rdx,8),%rdx
ffffffff8021a340:	80 
ffffffff8021a341:	48 8b 0c c5 e8 84 22 	mov    -0x7fdd7b18(,%rax,8),%rcx
ffffffff8021a348:	80 
ffffffff8021a349:	4c 8d 04 16          	lea    (%rsi,%rdx,1),%r8
ffffffff8021a34d:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a350:	be 05 00 00 00       	mov    $0x5,%esi
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a355:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a359:	e8 62 50 ff ff       	call   ffffffff8020f3c0 <_RME_Kom_Boot_Crt>
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a35e:	48 8b 05 ab e1 00 00 	mov    0xe1ab(%rip),%rax        # ffffffff80228510 <RME_X64_Layout+0x30>
ffffffff8021a365:	48 39 e8             	cmp    %rbp,%rax
ffffffff8021a368:	77 b6                	ja     ffffffff8021a320 <__RME_Boot+0x5d0>
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a36a:	41 b9 0d 00 00 00    	mov    $0xd,%r9d
ffffffff8021a370:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff8021a375:	48 89 df             	mov    %rbx,%rdi
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a378:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a37a:	48 8b 15 a7 e3 00 00 	mov    0xe3a7(%rip),%rdx        # ffffffff80228728 <RME_X64_Layout+0x248>
ffffffff8021a381:	48 8b 05 a8 e3 00 00 	mov    0xe3a8(%rip),%rax        # ffffffff80228730 <RME_X64_Layout+0x250>
ffffffff8021a388:	48 8b 0d 99 e3 00 00 	mov    0xe399(%rip),%rcx        # ffffffff80228728 <RME_X64_Layout+0x248>
ffffffff8021a38f:	4c 8d 04 02          	lea    (%rdx,%rax,1),%r8
ffffffff8021a393:	ba 20 00 00 00       	mov    $0x20,%edx
ffffffff8021a398:	e8 23 50 ff ff       	call   ffffffff8020f3c0 <_RME_Kom_Boot_Crt>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a39d:	4c 89 f9             	mov    %r15,%rcx
ffffffff8021a3a0:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff8021a3a5:	31 f6                	xor    %esi,%esi
ffffffff8021a3a7:	4c 8b 05 1a e1 00 00 	mov    0xe11a(%rip),%r8        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff8021a3ae:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a3b1:	e8 8a 44 ff ff       	call   ffffffff8020e840 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOM_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a3b6:	4c 8b 25 0b e1 00 00 	mov    0xe10b(%rip),%r12        # ffffffff802284c8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a3bd:	48 8b 05 04 e1 00 00 	mov    0xe104(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOM_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a3c4:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8021a3c8:	4d 01 fc             	add    %r15,%r12
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a3cb:	48 85 c0             	test   %rax,%rax
ffffffff8021a3ce:	74 44                	je     ffffffff8021a414 <__RME_Boot+0x6c4>
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021a3d0:	48 8b 0d 19 e1 00 00 	mov    0xe119(%rip),%rcx        # ffffffff802284f0 <RME_X64_Layout+0x10>
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a3d7:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a3da:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a3dd:	48 89 df             	mov    %rbx,%rdi
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a3e0:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021a3e4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a3e8:	48 03 83 98 01 00 00 	add    0x198(%rbx),%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a3ef:	be 06 00 00 00       	mov    $0x6,%esi
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a3f4:	48 89 84 11 10 14 00 	mov    %rax,0x1410(%rcx,%rdx,1)
ffffffff8021a3fb:	00 
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a3fc:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a3ff:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a403:	e8 18 58 ff ff       	call   ffffffff8020fc20 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a408:	48 8b 05 b9 e0 00 00 	mov    0xe0b9(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff8021a40f:	48 39 e8             	cmp    %rbp,%rax
ffffffff8021a412:	77 bc                	ja     ffffffff8021a3d0 <__RME_Boot+0x680>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a414:	4c 8b 05 ad e0 00 00 	mov    0xe0ad(%rip),%r8        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff8021a41b:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021a41e:	31 f6                	xor    %esi,%esi
ffffffff8021a420:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a423:	ba 07 00 00 00       	mov    $0x7,%edx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a428:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a42a:	e8 11 44 ff ff       	call   ffffffff8020e840 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a42f:	4c 8b 2d 92 e0 00 00 	mov    0xe092(%rip),%r13        # ffffffff802284c8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a436:	48 8b 05 8b e0 00 00 	mov    0xe08b(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a43d:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8021a441:	49 81 c5 ff 0f 00 00 	add    $0xfff,%r13
ffffffff8021a448:	49 81 e5 00 f0 ff ff 	and    $0xfffffffffffff000,%r13
ffffffff8021a44f:	4d 01 e5             	add    %r12,%r13
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a452:	48 85 c0             	test   %rax,%rax
ffffffff8021a455:	74 4d                	je     ffffffff8021a4a4 <__RME_Boot+0x754>
ffffffff8021a457:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a45e:	00 00 
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021a460:	48 8b 0d 89 e0 00 00 	mov    0xe089(%rip),%rcx        # ffffffff802284f0 <RME_X64_Layout+0x10>
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a467:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a46a:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a46d:	48 89 df             	mov    %rbx,%rdi
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a470:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021a474:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a478:	48 03 83 d8 01 00 00 	add    0x1d8(%rbx),%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a47f:	be 07 00 00 00       	mov    $0x7,%esi
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a484:	48 89 84 11 18 14 00 	mov    %rax,0x1418(%rcx,%rdx,1)
ffffffff8021a48b:	00 
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a48c:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a48f:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a493:	e8 88 57 ff ff       	call   ffffffff8020fc20 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a498:	48 8b 05 29 e0 00 00 	mov    0xe029(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff8021a49f:	48 39 e8             	cmp    %rbp,%rax
ffffffff8021a4a2:	77 bc                	ja     ffffffff8021a460 <__RME_Boot+0x710>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a4a4:	4c 8b 05 1d e0 00 00 	mov    0xe01d(%rip),%r8        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff8021a4ab:	4c 89 e9             	mov    %r13,%rcx
ffffffff8021a4ae:	31 f6                	xor    %esi,%esi
ffffffff8021a4b0:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a4b3:	ba 03 00 00 00       	mov    $0x3,%edx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a4b8:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a4ba:	e8 81 43 ff ff       	call   ffffffff8020e840 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOM_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a4bf:	4c 8b 25 02 e0 00 00 	mov    0xe002(%rip),%r12        # ffffffff802284c8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a4c6:	48 8b 05 fb df 00 00 	mov    0xdffb(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOM_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a4cd:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8021a4d1:	4d 01 ec             	add    %r13,%r12
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a4d4:	48 85 c0             	test   %rax,%rax
ffffffff8021a4d7:	74 56                	je     ffffffff8021a52f <__RME_Boot+0x7df>
ffffffff8021a4d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021a4e0:	48 8b 15 09 e0 00 00 	mov    0xe009(%rip),%rdx        # ffffffff802284f0 <RME_X64_Layout+0x10>
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021a4e7:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a4ea:	4d 89 e0             	mov    %r12,%r8
ffffffff8021a4ed:	45 31 c9             	xor    %r9d,%r9d
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021a4f0:	48 c1 e0 0d          	shl    $0xd,%rax
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a4f4:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8021a4f8:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff8021a4fd:	48 89 df             	mov    %rbx,%rdi
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021a500:	48 8d 84 02 00 14 00 	lea    0x1400(%rdx,%rax,1),%rax
ffffffff8021a507:	00 
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a508:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021a50d:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a510:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a514:	50                   	push   %rax
        Cur_Addr+=RME_KOM_ROUND(RME_THD_SIZE(Count));
ffffffff8021a515:	49 81 c4 60 01 00 00 	add    $0x160,%r12
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a51c:	e8 8f 53 ff ff       	call   ffffffff8020f8b0 <_RME_Thd_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a521:	48 8b 05 a0 df 00 00 	mov    0xdfa0(%rip),%rax        # ffffffff802284c8 <RME_X64_Num_CPU>
ffffffff8021a528:	5a                   	pop    %rdx
ffffffff8021a529:	59                   	pop    %rcx
ffffffff8021a52a:	48 39 e8             	cmp    %rbp,%rax
ffffffff8021a52d:	77 b1                	ja     ffffffff8021a4e0 <__RME_Boot+0x790>
    RME_DBG_S("\r\nKot registration end offset: 0x");
ffffffff8021a52f:	48 c7 c7 e0 e2 21 80 	mov    $0xffffffff8021e2e0,%rdi
ffffffff8021a536:	e8 25 2b ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff8021a53b:	48 bf 00 00 a0 fe ff 	movabs $0x7ffffea00000,%rdi
ffffffff8021a542:	7f 00 00 
ffffffff8021a545:	4c 01 e7             	add    %r12,%rdi
ffffffff8021a548:	48 c1 ef 07          	shr    $0x7,%rdi
ffffffff8021a54c:	e8 5f 2a ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\r\nKom1 frontier: 0x");
ffffffff8021a551:	48 c7 c7 b9 dd 21 80 	mov    $0xffffffff8021ddb9,%rdi
ffffffff8021a558:	e8 03 2b ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(Cur_Addr);
ffffffff8021a55d:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021a560:	e8 4b 2a ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\r\nThread object size: ");
ffffffff8021a565:	48 c7 c7 cd dd 21 80 	mov    $0xffffffff8021ddcd,%rdi
ffffffff8021a56c:	e8 ef 2a ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Thd_Struct)/sizeof(rme_ptr_t));
ffffffff8021a571:	bf 16 00 00 00       	mov    $0x16,%edi
ffffffff8021a576:	e8 45 29 ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
    RME_DBG_S("\r\nInvocation object size: ");
ffffffff8021a57b:	48 c7 c7 e4 dd 21 80 	mov    $0xffffffff8021dde4,%rdi
ffffffff8021a582:	e8 d9 2a ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Inv_Struct)/sizeof(rme_ptr_t));
ffffffff8021a587:	bf 09 00 00 00       	mov    $0x9,%edi
ffffffff8021a58c:	e8 2f 29 ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
    RME_DBG_S("\r\nTimer init");
ffffffff8021a591:	48 c7 c7 ff dd 21 80 	mov    $0xffffffff8021ddff,%rdi
ffffffff8021a598:	e8 c3 2a ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    __RME_X64_Out(RME_X64_PIT_CMD,0x34);
ffffffff8021a59d:	be 34 00 00 00       	mov    $0x34,%esi
ffffffff8021a5a2:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff8021a5a7:	e8 5e 12 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,(1193182/2/RME_X64_TIMER_FREQ)&0xFF);
ffffffff8021a5ac:	be 54 00 00 00       	mov    $0x54,%esi
ffffffff8021a5b1:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff8021a5b6:	e8 4f 12 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,((1193182/2/RME_X64_TIMER_FREQ)>>8)&0xFF);
ffffffff8021a5bb:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff8021a5c0:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff8021a5c5:	e8 40 12 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    RME_DBG_S("\r\nInit page table address:");
ffffffff8021a5ca:	48 c7 c7 0c de 21 80 	mov    $0xffffffff8021de0c,%rdi
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,CPUID<<24);
ffffffff8021a5d1:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8021a5d8:	80 ff ff 
ffffffff8021a5db:	c7 00 15 00 00 00    	movl   $0x15,(%rax)
ffffffff8021a5e1:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
    RME_DBG_S("\r\nInit page table address:");
ffffffff8021a5e8:	e8 73 2a ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_H(RME_CAP_GETOBJ((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff8021a5ed:	e8 4d 12 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021a5f2:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a5f6:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021a5fa:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021a5fe:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8021a602:	e8 a9 29 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    __RME_Pgt_Set((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt);
ffffffff8021a607:	e8 33 12 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    __RME_X64_Pgt_Set(RME_X64_VA2PA(RME_CAP_GETOBJ(Pgt,rme_ptr_t)));
ffffffff8021a60c:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021a613:	80 00 00 
    __RME_Pgt_Set((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt);
ffffffff8021a616:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a61a:	48 8b 40 58          	mov    0x58(%rax),%rax
    __RME_X64_Pgt_Set(RME_X64_VA2PA(RME_CAP_GETOBJ(Pgt,rme_ptr_t)));
ffffffff8021a61e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021a622:	48 03 78 18          	add    0x18(%rax),%rdi
ffffffff8021a626:	e8 7e 12 ff ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
    _RME_Memcpy((void*)0x0,(void*)UVM_Init,RME_POW2(RME_PGT_SIZE_2M));
ffffffff8021a62b:	ba 00 00 20 00       	mov    $0x200000,%edx
ffffffff8021a630:	48 c7 c6 20 b4 21 80 	mov    $0xffffffff8021b420,%rsi
ffffffff8021a637:	31 ff                	xor    %edi,%edi
ffffffff8021a639:	e8 52 2e ff ff       	call   ffffffff8020d490 <_RME_Memcpy>
    __RME_Enter_User_Mode(0x0ULL, RME_X64_USTACK(0), 0);
ffffffff8021a63e:	31 d2                	xor    %edx,%edx
ffffffff8021a640:	be 00 08 20 00       	mov    $0x200800,%esi
ffffffff8021a645:	31 ff                	xor    %edi,%edi
    RME_X64_CPU_Cnt=0;
ffffffff8021a647:	48 c7 05 6e de 00 00 	movq   $0x0,0xde6e(%rip)        # ffffffff802284c0 <RME_X64_CPU_Cnt>
ffffffff8021a64e:	00 00 00 00 
    __RME_Enter_User_Mode(0x0ULL, RME_X64_USTACK(0), 0);
ffffffff8021a652:	e8 69 12 ff ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
}
ffffffff8021a657:	48 83 c4 28          	add    $0x28,%rsp
ffffffff8021a65b:	31 c0                	xor    %eax,%eax
ffffffff8021a65d:	5b                   	pop    %rbx
ffffffff8021a65e:	5d                   	pop    %rbp
ffffffff8021a65f:	41 5c                	pop    %r12
ffffffff8021a661:	41 5d                	pop    %r13
ffffffff8021a663:	41 5e                	pop    %r14
ffffffff8021a665:	41 5f                	pop    %r15
ffffffff8021a667:	c3                   	ret    
ffffffff8021a668:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a66f:	00 

ffffffff8021a670 <__RME_Reboot>:
{
ffffffff8021a670:	f3 0f 1e fa          	endbr64 
}
ffffffff8021a674:	c3                   	ret    
ffffffff8021a675:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a67c:	00 00 00 00 

ffffffff8021a680 <__RME_Shutdown>:
ffffffff8021a680:	f3 0f 1e fa          	endbr64 
ffffffff8021a684:	c3                   	ret    
ffffffff8021a685:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a68c:	00 00 00 00 

ffffffff8021a690 <__RME_Get_Syscall_Param>:
ffffffff8021a690:	f3 0f 1e fa          	endbr64 
ffffffff8021a694:	8b 47 2c             	mov    0x2c(%rdi),%eax
ffffffff8021a697:	48 89 06             	mov    %rax,(%rsi)
ffffffff8021a69a:	8b 47 28             	mov    0x28(%rdi),%eax
ffffffff8021a69d:	48 89 02             	mov    %rax,(%rdx)
ffffffff8021a6a0:	48 8b 47 20          	mov    0x20(%rdi),%rax
ffffffff8021a6a4:	48 89 01             	mov    %rax,(%rcx)
ffffffff8021a6a7:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8021a6ab:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff8021a6af:	48 8b 47 38          	mov    0x38(%rdi),%rax
ffffffff8021a6b3:	48 89 41 10          	mov    %rax,0x10(%rcx)
ffffffff8021a6b7:	c3                   	ret    
ffffffff8021a6b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a6bf:	00 

ffffffff8021a6c0 <__RME_Set_Syscall_Retval>:
ffffffff8021a6c0:	f3 0f 1e fa          	endbr64 
ffffffff8021a6c4:	48 89 37             	mov    %rsi,(%rdi)
ffffffff8021a6c7:	c3                   	ret    
ffffffff8021a6c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a6cf:	00 

ffffffff8021a6d0 <__RME_Thd_Reg_Init>:
{
ffffffff8021a6d0:	f3 0f 1e fa          	endbr64 
    Reg->INT_NUM=0x10000;
ffffffff8021a6d4:	49 c7 40 78 00 00 01 	movq   $0x10000,0x78(%r8)
ffffffff8021a6db:	00 
    Reg->ERROR_CODE=0;
ffffffff8021a6dc:	49 c7 80 80 00 00 00 	movq   $0x0,0x80(%r8)
ffffffff8021a6e3:	00 00 00 00 
    Reg->RIP=Entry;
ffffffff8021a6e7:	49 89 b0 88 00 00 00 	mov    %rsi,0x88(%r8)
    Reg->CS=RME_X64_SEG_USER_CODE;
ffffffff8021a6ee:	49 c7 80 90 00 00 00 	movq   $0x2b,0x90(%r8)
ffffffff8021a6f5:	2b 00 00 00 
    Reg->RFLAGS=0x3200;
ffffffff8021a6f9:	49 c7 80 98 00 00 00 	movq   $0x3200,0x98(%r8)
ffffffff8021a700:	00 32 00 00 
    Reg->RSP=Stack;
ffffffff8021a704:	49 89 90 a0 00 00 00 	mov    %rdx,0xa0(%r8)
    Reg->SS=RME_X64_SEG_USER_DATA;
ffffffff8021a70b:	49 c7 80 a8 00 00 00 	movq   $0x23,0xa8(%r8)
ffffffff8021a712:	23 00 00 00 
    Reg->RDI=Param;
ffffffff8021a716:	49 89 48 28          	mov    %rcx,0x28(%r8)
}
ffffffff8021a71a:	c3                   	ret    
ffffffff8021a71b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff8021a720 <__RME_Thd_Reg_Copy>:
{
ffffffff8021a720:	f3 0f 1e fa          	endbr64 
    Dst->RAX=Src->RAX;
ffffffff8021a724:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff8021a727:	48 89 0f             	mov    %rcx,(%rdi)
    Dst->RBX=Src->RBX;
ffffffff8021a72a:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
ffffffff8021a72e:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
    Dst->RCX=Src->RCX;
ffffffff8021a732:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
ffffffff8021a736:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
    Dst->RDX=Src->RDX;
ffffffff8021a73a:	48 8b 4e 18          	mov    0x18(%rsi),%rcx
ffffffff8021a73e:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
    Dst->RSI=Src->RSI;
ffffffff8021a742:	48 8b 4e 20          	mov    0x20(%rsi),%rcx
ffffffff8021a746:	48 89 4f 20          	mov    %rcx,0x20(%rdi)
    Dst->RDI=Src->RDI;
ffffffff8021a74a:	48 8b 4e 28          	mov    0x28(%rsi),%rcx
ffffffff8021a74e:	48 89 4f 28          	mov    %rcx,0x28(%rdi)
    Dst->RBP=Src->RBP;
ffffffff8021a752:	48 8b 4e 30          	mov    0x30(%rsi),%rcx
ffffffff8021a756:	48 89 4f 30          	mov    %rcx,0x30(%rdi)
    Dst->R8=Src->R8;
ffffffff8021a75a:	48 8b 4e 38          	mov    0x38(%rsi),%rcx
ffffffff8021a75e:	48 89 4f 38          	mov    %rcx,0x38(%rdi)
    Dst->R9=Src->R9;
ffffffff8021a762:	48 8b 4e 40          	mov    0x40(%rsi),%rcx
ffffffff8021a766:	48 89 4f 40          	mov    %rcx,0x40(%rdi)
    Dst->R10=Src->R10;
ffffffff8021a76a:	48 8b 4e 48          	mov    0x48(%rsi),%rcx
ffffffff8021a76e:	48 89 4f 48          	mov    %rcx,0x48(%rdi)
    Dst->R11=Src->R11;
ffffffff8021a772:	48 8b 4e 50          	mov    0x50(%rsi),%rcx
ffffffff8021a776:	48 89 4f 50          	mov    %rcx,0x50(%rdi)
    Dst->R12=Src->R12;
ffffffff8021a77a:	48 8b 4e 58          	mov    0x58(%rsi),%rcx
ffffffff8021a77e:	48 89 4f 58          	mov    %rcx,0x58(%rdi)
    Dst->R13=Src->R13;
ffffffff8021a782:	48 8b 4e 60          	mov    0x60(%rsi),%rcx
ffffffff8021a786:	48 89 4f 60          	mov    %rcx,0x60(%rdi)
    Dst->R14=Src->R14;
ffffffff8021a78a:	48 8b 4e 68          	mov    0x68(%rsi),%rcx
ffffffff8021a78e:	48 89 4f 68          	mov    %rcx,0x68(%rdi)
    Dst->R15=Src->R15;
ffffffff8021a792:	48 8b 4e 70          	mov    0x70(%rsi),%rcx
ffffffff8021a796:	48 89 4f 70          	mov    %rcx,0x70(%rdi)
    Dst->INT_NUM=Src->INT_NUM;
ffffffff8021a79a:	48 8b 4e 78          	mov    0x78(%rsi),%rcx
ffffffff8021a79e:	48 89 4f 78          	mov    %rcx,0x78(%rdi)
    Dst->ERROR_CODE=Src->ERROR_CODE;
ffffffff8021a7a2:	48 8b 8e 80 00 00 00 	mov    0x80(%rsi),%rcx
ffffffff8021a7a9:	48 89 8f 80 00 00 00 	mov    %rcx,0x80(%rdi)
    Dst->RIP=Src->RIP;
ffffffff8021a7b0:	48 8b 8e 88 00 00 00 	mov    0x88(%rsi),%rcx
ffffffff8021a7b7:	48 89 8f 88 00 00 00 	mov    %rcx,0x88(%rdi)
    Dst->CS=Src->CS;
ffffffff8021a7be:	48 8b 8e 90 00 00 00 	mov    0x90(%rsi),%rcx
ffffffff8021a7c5:	48 89 8f 90 00 00 00 	mov    %rcx,0x90(%rdi)
    Dst->RFLAGS=Src->RFLAGS;
ffffffff8021a7cc:	48 8b 8e 98 00 00 00 	mov    0x98(%rsi),%rcx
ffffffff8021a7d3:	48 89 8f 98 00 00 00 	mov    %rcx,0x98(%rdi)
    Dst->RSP=Src->RSP;
ffffffff8021a7da:	48 8b 8e a0 00 00 00 	mov    0xa0(%rsi),%rcx
ffffffff8021a7e1:	48 89 8f a0 00 00 00 	mov    %rcx,0xa0(%rdi)
    Dst->SS=Src->SS;
ffffffff8021a7e8:	48 8b 96 a8 00 00 00 	mov    0xa8(%rsi),%rdx
ffffffff8021a7ef:	48 89 97 a8 00 00 00 	mov    %rdx,0xa8(%rdi)
}
ffffffff8021a7f6:	c3                   	ret    
ffffffff8021a7f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a7fe:	00 00 

ffffffff8021a800 <__RME_Thd_Cop_Init>:
{
ffffffff8021a800:	f3 0f 1e fa          	endbr64 
}
ffffffff8021a804:	c3                   	ret    
ffffffff8021a805:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a80c:	00 00 00 00 

ffffffff8021a810 <__RME_Thd_Cop_Save>:
ffffffff8021a810:	f3 0f 1e fa          	endbr64 
ffffffff8021a814:	c3                   	ret    
ffffffff8021a815:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a81c:	00 00 00 00 

ffffffff8021a820 <__RME_Thd_Cop_Restore>:
ffffffff8021a820:	f3 0f 1e fa          	endbr64 
ffffffff8021a824:	c3                   	ret    
ffffffff8021a825:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a82c:	00 00 00 00 

ffffffff8021a830 <__RME_Inv_Reg_Save>:
{
ffffffff8021a830:	f3 0f 1e fa          	endbr64 
    Ret->RIP=Reg->RIP;
ffffffff8021a834:	48 8b 86 88 00 00 00 	mov    0x88(%rsi),%rax
ffffffff8021a83b:	48 89 07             	mov    %rax,(%rdi)
    Ret->RSP=Reg->RSP;
ffffffff8021a83e:	48 8b 86 a0 00 00 00 	mov    0xa0(%rsi),%rax
ffffffff8021a845:	48 89 47 08          	mov    %rax,0x8(%rdi)
}
ffffffff8021a849:	c3                   	ret    
ffffffff8021a84a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021a850 <__RME_Inv_Reg_Restore>:
{
ffffffff8021a850:	f3 0f 1e fa          	endbr64 
    Reg->RIP=Ret->RIP;
ffffffff8021a854:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021a857:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
    Reg->RSP=Ret->RSP;
ffffffff8021a85e:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8021a862:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
}
ffffffff8021a869:	c3                   	ret    
ffffffff8021a86a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021a870 <__RME_Set_Inv_Retval>:
ffffffff8021a870:	f3 0f 1e fa          	endbr64 
ffffffff8021a874:	48 89 77 28          	mov    %rsi,0x28(%rdi)
ffffffff8021a878:	c3                   	ret    
ffffffff8021a879:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021a880 <write_string>:
{
ffffffff8021a880:	f3 0f 1e fa          	endbr64 
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021a884:	48 b8 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rax
ffffffff8021a88b:	80 ff ff 
ffffffff8021a88e:	48 01 c2             	add    %rax,%rdx
    while( *string != 0 )
ffffffff8021a891:	0f b6 06             	movzbl (%rsi),%eax
ffffffff8021a894:	84 c0                	test   %al,%al
ffffffff8021a896:	74 20                	je     ffffffff8021a8b8 <write_string+0x38>
ffffffff8021a898:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a89f:	00 
        *video++ = *string++;
ffffffff8021a8a0:	88 02                	mov    %al,(%rdx)
ffffffff8021a8a2:	48 83 c6 01          	add    $0x1,%rsi
        *video++ = colour;
ffffffff8021a8a6:	48 89 d0             	mov    %rdx,%rax
ffffffff8021a8a9:	48 83 c2 02          	add    $0x2,%rdx
ffffffff8021a8ad:	40 88 78 01          	mov    %dil,0x1(%rax)
    while( *string != 0 )
ffffffff8021a8b1:	0f b6 06             	movzbl (%rsi),%eax
ffffffff8021a8b4:	84 c0                	test   %al,%al
ffffffff8021a8b6:	75 e8                	jne    ffffffff8021a8a0 <write_string+0x20>
}
ffffffff8021a8b8:	c3                   	ret    
ffffffff8021a8b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021a8c0 <NDBG>:
{
ffffffff8021a8c0:	f3 0f 1e fa          	endbr64 
    while( *string != 0 )
ffffffff8021a8c4:	48 c7 c2 28 de 21 80 	mov    $0xffffffff8021de28,%rdx
ffffffff8021a8cb:	b9 65 00 00 00       	mov    $0x65,%ecx
ffffffff8021a8d0:	be 48 00 00 00       	mov    $0x48,%esi
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021a8d5:	48 b8 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rax
ffffffff8021a8dc:	80 ff ff 
ffffffff8021a8df:	eb 0f                	jmp    ffffffff8021a8f0 <NDBG+0x30>
ffffffff8021a8e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        *video++ = colour;
ffffffff8021a8e8:	48 89 f0             	mov    %rsi,%rax
    while( *string != 0 )
ffffffff8021a8eb:	89 ce                	mov    %ecx,%esi
ffffffff8021a8ed:	0f b6 0a             	movzbl (%rdx),%ecx
        *video++ = *string++;
ffffffff8021a8f0:	40 88 30             	mov    %sil,(%rax)
    while( *string != 0 )
ffffffff8021a8f3:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8021a8f7:	48 8d 70 02          	lea    0x2(%rax),%rsi
        *video++ = colour;
ffffffff8021a8fb:	c6 40 01 07          	movb   $0x7,0x1(%rax)
    while( *string != 0 )
ffffffff8021a8ff:	84 c9                	test   %cl,%cl
ffffffff8021a901:	75 e5                	jne    ffffffff8021a8e8 <NDBG+0x28>
}
ffffffff8021a903:	c3                   	ret    
ffffffff8021a904:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a90b:	00 00 00 00 
ffffffff8021a90f:	90                   	nop

ffffffff8021a910 <__RME_Kern_Func_Handler>:
{
ffffffff8021a910:	f3 0f 1e fa          	endbr64 
    String[0]=Param1/10000000+'0';
ffffffff8021a914:	4c 89 c0             	mov    %r8,%rax
{
ffffffff8021a917:	49 89 d2             	mov    %rdx,%r10
    String[0]=Param1/10000000+'0';
ffffffff8021a91a:	48 ba bd 42 7a e5 d5 	movabs $0xd6bf94d5e57a42bd,%rdx
ffffffff8021a921:	94 bf d6 
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a924:	48 be db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rsi
ffffffff8021a92b:	de 1b 43 
    String[0]=Param1/10000000+'0';
ffffffff8021a92e:	48 f7 e2             	mul    %rdx
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a931:	4c 89 c0             	mov    %r8,%rax
{
ffffffff8021a934:	48 83 ec 18          	sub    $0x18,%rsp
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a938:	49 b9 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%r9
ffffffff8021a93f:	cc cc cc 
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a942:	49 bb 43 78 b4 71 c4 	movabs $0xa7c5ac471b47843,%r11
ffffffff8021a949:	5a 7c 0a 
    String[8]='\0';
ffffffff8021a94c:	c6 44 24 08 00       	movb   $0x0,0x8(%rsp)
    String[0]=Param1/10000000+'0';
ffffffff8021a951:	48 c1 ea 17          	shr    $0x17,%rdx
ffffffff8021a955:	8d 7a 30             	lea    0x30(%rdx),%edi
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a958:	48 f7 e6             	mul    %rsi
    String[0]=Param1/10000000+'0';
ffffffff8021a95b:	40 88 3c 24          	mov    %dil,(%rsp)
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a95f:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021a962:	48 c1 ee 12          	shr    $0x12,%rsi
ffffffff8021a966:	48 89 f0             	mov    %rsi,%rax
ffffffff8021a969:	49 f7 e1             	mul    %r9
ffffffff8021a96c:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a970:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a974:	4c 89 c2             	mov    %r8,%rdx
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a977:	48 01 c0             	add    %rax,%rax
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a97a:	48 c1 ea 05          	shr    $0x5,%rdx
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a97e:	48 29 c6             	sub    %rax,%rsi
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a981:	48 89 d0             	mov    %rdx,%rax
ffffffff8021a984:	49 f7 e3             	mul    %r11
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a987:	83 c6 30             	add    $0x30,%esi
ffffffff8021a98a:	40 88 74 24 01       	mov    %sil,0x1(%rsp)
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a98f:	48 c1 ea 07          	shr    $0x7,%rdx
ffffffff8021a993:	48 89 d0             	mov    %rdx,%rax
ffffffff8021a996:	49 89 d3             	mov    %rdx,%r11
ffffffff8021a999:	49 f7 e1             	mul    %r9
ffffffff8021a99c:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a9a0:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
    String[3]=(Param1/10000)%10+'0';
ffffffff8021a9a4:	48 ba 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rdx
ffffffff8021a9ab:	c5 6d 34 
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a9ae:	48 01 c0             	add    %rax,%rax
ffffffff8021a9b1:	49 29 c3             	sub    %rax,%r11
    String[3]=(Param1/10000)%10+'0';
ffffffff8021a9b4:	4c 89 c0             	mov    %r8,%rax
ffffffff8021a9b7:	48 f7 e2             	mul    %rdx
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a9ba:	41 83 c3 30          	add    $0x30,%r11d
ffffffff8021a9be:	44 88 5c 24 02       	mov    %r11b,0x2(%rsp)
    String[3]=(Param1/10000)%10+'0';
ffffffff8021a9c3:	48 c1 ea 0b          	shr    $0xb,%rdx
ffffffff8021a9c7:	48 89 d0             	mov    %rdx,%rax
ffffffff8021a9ca:	49 89 d3             	mov    %rdx,%r11
ffffffff8021a9cd:	49 f7 e1             	mul    %r9
ffffffff8021a9d0:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a9d4:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
    String[4]=(Param1/1000)%10+'0';
ffffffff8021a9d8:	4c 89 c2             	mov    %r8,%rdx
    String[3]=(Param1/10000)%10+'0';
ffffffff8021a9db:	48 01 c0             	add    %rax,%rax
    String[4]=(Param1/1000)%10+'0';
ffffffff8021a9de:	48 c1 ea 03          	shr    $0x3,%rdx
    String[3]=(Param1/10000)%10+'0';
ffffffff8021a9e2:	49 29 c3             	sub    %rax,%r11
    String[4]=(Param1/1000)%10+'0';
ffffffff8021a9e5:	48 89 d0             	mov    %rdx,%rax
    String[3]=(Param1/10000)%10+'0';
ffffffff8021a9e8:	41 83 c3 30          	add    $0x30,%r11d
ffffffff8021a9ec:	44 88 5c 24 03       	mov    %r11b,0x3(%rsp)
    String[4]=(Param1/1000)%10+'0';
ffffffff8021a9f1:	49 bb cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%r11
ffffffff8021a9f8:	9b c4 20 
ffffffff8021a9fb:	49 f7 e3             	mul    %r11
ffffffff8021a9fe:	48 c1 ea 04          	shr    $0x4,%rdx
ffffffff8021aa02:	48 89 d0             	mov    %rdx,%rax
ffffffff8021aa05:	49 89 d3             	mov    %rdx,%r11
ffffffff8021aa08:	49 f7 e1             	mul    %r9
ffffffff8021aa0b:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021aa0f:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
    String[5]=(Param1/100)%10+'0';
ffffffff8021aa13:	4c 89 c2             	mov    %r8,%rdx
    String[4]=(Param1/1000)%10+'0';
ffffffff8021aa16:	48 01 c0             	add    %rax,%rax
ffffffff8021aa19:	49 29 c3             	sub    %rax,%r11
ffffffff8021aa1c:	41 83 c3 30          	add    $0x30,%r11d
    String[5]=(Param1/100)%10+'0';
ffffffff8021aa20:	48 c1 ea 02          	shr    $0x2,%rdx
ffffffff8021aa24:	48 89 d0             	mov    %rdx,%rax
    String[4]=(Param1/1000)%10+'0';
ffffffff8021aa27:	44 88 5c 24 04       	mov    %r11b,0x4(%rsp)
    String[5]=(Param1/100)%10+'0';
ffffffff8021aa2c:	49 bb c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%r11
ffffffff8021aa33:	c2 f5 28 
ffffffff8021aa36:	49 f7 e3             	mul    %r11
ffffffff8021aa39:	48 c1 ea 02          	shr    $0x2,%rdx
ffffffff8021aa3d:	48 89 d0             	mov    %rdx,%rax
ffffffff8021aa40:	49 89 d3             	mov    %rdx,%r11
ffffffff8021aa43:	49 f7 e1             	mul    %r9
ffffffff8021aa46:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021aa4a:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021aa4e:	48 01 c0             	add    %rax,%rax
ffffffff8021aa51:	49 29 c3             	sub    %rax,%r11
    String[6]=(Param1/10)%10+'0';
ffffffff8021aa54:	4c 89 c0             	mov    %r8,%rax
ffffffff8021aa57:	49 f7 e1             	mul    %r9
    String[5]=(Param1/100)%10+'0';
ffffffff8021aa5a:	41 83 c3 30          	add    $0x30,%r11d
ffffffff8021aa5e:	44 88 5c 24 05       	mov    %r11b,0x5(%rsp)
    String[6]=(Param1/10)%10+'0';
ffffffff8021aa63:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021aa67:	48 89 d0             	mov    %rdx,%rax
ffffffff8021aa6a:	49 89 d3             	mov    %rdx,%r11
ffffffff8021aa6d:	49 f7 e1             	mul    %r9
ffffffff8021aa70:	4c 89 d8             	mov    %r11,%rax
ffffffff8021aa73:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021aa77:	48 8d 14 92          	lea    (%rdx,%rdx,4),%rdx
ffffffff8021aa7b:	48 01 d2             	add    %rdx,%rdx
ffffffff8021aa7e:	48 29 d0             	sub    %rdx,%rax
ffffffff8021aa81:	83 c0 30             	add    $0x30,%eax
ffffffff8021aa84:	88 44 24 06          	mov    %al,0x6(%rsp)
    String[7]=(Param1)%10+'0';
ffffffff8021aa88:	4b 8d 04 9b          	lea    (%r11,%r11,4),%rax
ffffffff8021aa8c:	48 01 c0             	add    %rax,%rax
ffffffff8021aa8f:	49 29 c0             	sub    %rax,%r8
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021aa92:	48 b8 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rax
ffffffff8021aa99:	80 ff ff 
    String[7]=(Param1)%10+'0';
ffffffff8021aa9c:	41 83 c0 30          	add    $0x30,%r8d
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021aaa0:	48 01 c8             	add    %rcx,%rax
    String[7]=(Param1)%10+'0';
ffffffff8021aaa3:	44 88 44 24 07       	mov    %r8b,0x7(%rsp)
    while( *string != 0 )
ffffffff8021aaa8:	40 84 ff             	test   %dil,%dil
ffffffff8021aaab:	74 27                	je     ffffffff8021aad4 <__RME_Kern_Func_Handler+0x1c4>
ffffffff8021aaad:	48 8d 54 24 01       	lea    0x1(%rsp),%rdx
ffffffff8021aab2:	eb 0c                	jmp    ffffffff8021aac0 <__RME_Kern_Func_Handler+0x1b0>
ffffffff8021aab4:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8021aab8:	89 f7                	mov    %esi,%edi
ffffffff8021aaba:	0f b6 32             	movzbl (%rdx),%esi
        *video++ = colour;
ffffffff8021aabd:	48 89 c8             	mov    %rcx,%rax
        *video++ = *string++;
ffffffff8021aac0:	40 88 38             	mov    %dil,(%rax)
        *video++ = colour;
ffffffff8021aac3:	48 8d 48 02          	lea    0x2(%rax),%rcx
    while( *string != 0 )
ffffffff8021aac7:	48 83 c2 01          	add    $0x1,%rdx
        *video++ = colour;
ffffffff8021aacb:	44 88 50 01          	mov    %r10b,0x1(%rax)
    while( *string != 0 )
ffffffff8021aacf:	40 84 f6             	test   %sil,%sil
ffffffff8021aad2:	75 e4                	jne    ffffffff8021aab8 <__RME_Kern_Func_Handler+0x1a8>
}
ffffffff8021aad4:	31 c0                	xor    %eax,%eax
ffffffff8021aad6:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021aada:	c3                   	ret    
ffffffff8021aadb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff8021aae0 <__RME_X64_Fault_Handler>:
{
ffffffff8021aae0:	f3 0f 1e fa          	endbr64 
ffffffff8021aae4:	55                   	push   %rbp
ffffffff8021aae5:	48 89 f5             	mov    %rsi,%rbp
ffffffff8021aae8:	53                   	push   %rbx
ffffffff8021aae9:	48 89 fb             	mov    %rdi,%rbx
    RME_DBG_S("\n\r\n\r*** Fault: ");RME_DBG_I(Reason);RME_DBG_S(" - ");
ffffffff8021aaec:	48 c7 c7 2c de 21 80 	mov    $0xffffffff8021de2c,%rdi
{
ffffffff8021aaf3:	48 83 ec 08          	sub    $0x8,%rsp
    RME_DBG_S("\n\r\n\r*** Fault: ");RME_DBG_I(Reason);RME_DBG_S(" - ");
ffffffff8021aaf7:	e8 64 25 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021aafc:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021aaff:	e8 bc 23 ff ff       	call   ffffffff8020cec0 <RME_Int_Print>
ffffffff8021ab04:	48 c7 c7 3c de 21 80 	mov    $0xffffffff8021de3c,%rdi
ffffffff8021ab0b:	e8 50 25 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    switch(Reason)
ffffffff8021ab10:	48 83 fd 14          	cmp    $0x14,%rbp
ffffffff8021ab14:	0f 87 44 03 00 00    	ja     ffffffff8021ae5e <__RME_X64_Fault_Handler+0x37e>
ffffffff8021ab1a:	3e ff 24 ed 60 e3 21 	notrack jmp *-0x7fde1ca0(,%rbp,8)
ffffffff8021ab21:	80 
        case RME_X64_FAULT_VE:RME_DBG_S("Virtualization exception");break;
ffffffff8021ab22:	48 c7 c7 ac df 21 80 	mov    $0xffffffff8021dfac,%rdi
ffffffff8021ab29:	e8 32 25 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_S("\n\rRAX:        0x");RME_DBG_H(Reg->RAX);
ffffffff8021ab2e:	48 c7 c7 d7 df 21 80 	mov    $0xffffffff8021dfd7,%rdi
ffffffff8021ab35:	e8 26 25 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ab3a:	48 8b 3b             	mov    (%rbx),%rdi
ffffffff8021ab3d:	e8 6e 24 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rRBX:        0x");RME_DBG_H(Reg->RBX);
ffffffff8021ab42:	48 c7 c7 e8 df 21 80 	mov    $0xffffffff8021dfe8,%rdi
ffffffff8021ab49:	e8 12 25 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ab4e:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
ffffffff8021ab52:	e8 59 24 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rRCX:        0x");RME_DBG_H(Reg->RCX);
ffffffff8021ab57:	48 c7 c7 f9 df 21 80 	mov    $0xffffffff8021dff9,%rdi
ffffffff8021ab5e:	e8 fd 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ab63:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff8021ab67:	e8 44 24 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rRDX:        0x");RME_DBG_H(Reg->RDX);
ffffffff8021ab6c:	48 c7 c7 0a e0 21 80 	mov    $0xffffffff8021e00a,%rdi
ffffffff8021ab73:	e8 e8 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ab78:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff8021ab7c:	e8 2f 24 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rRSI:        0x");RME_DBG_H(Reg->RSI);
ffffffff8021ab81:	48 c7 c7 1b e0 21 80 	mov    $0xffffffff8021e01b,%rdi
ffffffff8021ab88:	e8 d3 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ab8d:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
ffffffff8021ab91:	e8 1a 24 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rRDI:        0x");RME_DBG_H(Reg->RDI);
ffffffff8021ab96:	48 c7 c7 2c e0 21 80 	mov    $0xffffffff8021e02c,%rdi
ffffffff8021ab9d:	e8 be 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021aba2:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
ffffffff8021aba6:	e8 05 24 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rRBP:        0x");RME_DBG_H(Reg->RBP);
ffffffff8021abab:	48 c7 c7 3d e0 21 80 	mov    $0xffffffff8021e03d,%rdi
ffffffff8021abb2:	e8 a9 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021abb7:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
ffffffff8021abbb:	e8 f0 23 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rR8:         0x");RME_DBG_H(Reg->R8);
ffffffff8021abc0:	48 c7 c7 4e e0 21 80 	mov    $0xffffffff8021e04e,%rdi
ffffffff8021abc7:	e8 94 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021abcc:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
ffffffff8021abd0:	e8 db 23 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rR9:         0x");RME_DBG_H(Reg->R9);
ffffffff8021abd5:	48 c7 c7 5f e0 21 80 	mov    $0xffffffff8021e05f,%rdi
ffffffff8021abdc:	e8 7f 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021abe1:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
ffffffff8021abe5:	e8 c6 23 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rR10:        0x");RME_DBG_H(Reg->R10);
ffffffff8021abea:	48 c7 c7 70 e0 21 80 	mov    $0xffffffff8021e070,%rdi
ffffffff8021abf1:	e8 6a 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021abf6:	48 8b 7b 48          	mov    0x48(%rbx),%rdi
ffffffff8021abfa:	e8 b1 23 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rR11:        0x");RME_DBG_H(Reg->R11);
ffffffff8021abff:	48 c7 c7 81 e0 21 80 	mov    $0xffffffff8021e081,%rdi
ffffffff8021ac06:	e8 55 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ac0b:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
ffffffff8021ac0f:	e8 9c 23 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rR12:        0x");RME_DBG_H(Reg->R12);
ffffffff8021ac14:	48 c7 c7 92 e0 21 80 	mov    $0xffffffff8021e092,%rdi
ffffffff8021ac1b:	e8 40 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ac20:	48 8b 7b 58          	mov    0x58(%rbx),%rdi
ffffffff8021ac24:	e8 87 23 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rR13:        0x");RME_DBG_H(Reg->R13);
ffffffff8021ac29:	48 c7 c7 a3 e0 21 80 	mov    $0xffffffff8021e0a3,%rdi
ffffffff8021ac30:	e8 2b 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ac35:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
ffffffff8021ac39:	e8 72 23 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rR14:        0x");RME_DBG_H(Reg->R14);
ffffffff8021ac3e:	48 c7 c7 b4 e0 21 80 	mov    $0xffffffff8021e0b4,%rdi
ffffffff8021ac45:	e8 16 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ac4a:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
ffffffff8021ac4e:	e8 5d 23 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rR15:        0x");RME_DBG_H(Reg->R15);
ffffffff8021ac53:	48 c7 c7 c5 e0 21 80 	mov    $0xffffffff8021e0c5,%rdi
ffffffff8021ac5a:	e8 01 24 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ac5f:	48 8b 7b 70          	mov    0x70(%rbx),%rdi
ffffffff8021ac63:	e8 48 23 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rINT_NUM:    0x");RME_DBG_H(Reg->INT_NUM);
ffffffff8021ac68:	48 c7 c7 d6 e0 21 80 	mov    $0xffffffff8021e0d6,%rdi
ffffffff8021ac6f:	e8 ec 23 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ac74:	48 8b 7b 78          	mov    0x78(%rbx),%rdi
ffffffff8021ac78:	e8 33 23 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rERROR_CODE: 0x");RME_DBG_H(Reg->ERROR_CODE);
ffffffff8021ac7d:	48 c7 c7 e7 e0 21 80 	mov    $0xffffffff8021e0e7,%rdi
ffffffff8021ac84:	e8 d7 23 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ac89:	48 8b bb 80 00 00 00 	mov    0x80(%rbx),%rdi
ffffffff8021ac90:	e8 1b 23 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rRIP:        0x");RME_DBG_H(Reg->RIP);
ffffffff8021ac95:	48 c7 c7 f8 e0 21 80 	mov    $0xffffffff8021e0f8,%rdi
ffffffff8021ac9c:	e8 bf 23 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021aca1:	48 8b bb 88 00 00 00 	mov    0x88(%rbx),%rdi
ffffffff8021aca8:	e8 03 23 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rCS:         0x");RME_DBG_H(Reg->CS);
ffffffff8021acad:	48 c7 c7 09 e1 21 80 	mov    $0xffffffff8021e109,%rdi
ffffffff8021acb4:	e8 a7 23 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021acb9:	48 8b bb 90 00 00 00 	mov    0x90(%rbx),%rdi
ffffffff8021acc0:	e8 eb 22 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rRFLAGS:     0x");RME_DBG_H(Reg->RFLAGS);
ffffffff8021acc5:	48 c7 c7 1a e1 21 80 	mov    $0xffffffff8021e11a,%rdi
ffffffff8021accc:	e8 8f 23 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021acd1:	48 8b bb 98 00 00 00 	mov    0x98(%rbx),%rdi
ffffffff8021acd8:	e8 d3 22 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rRSP:        0x");RME_DBG_H(Reg->RSP);
ffffffff8021acdd:	48 c7 c7 2b e1 21 80 	mov    $0xffffffff8021e12b,%rdi
ffffffff8021ace4:	e8 77 23 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ace9:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
ffffffff8021acf0:	e8 bb 22 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rSS:         0x");RME_DBG_H(Reg->SS);
ffffffff8021acf5:	48 c7 c7 3c e1 21 80 	mov    $0xffffffff8021e13c,%rdi
ffffffff8021acfc:	e8 5f 23 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ad01:	48 8b bb a8 00 00 00 	mov    0xa8(%rbx),%rdi
ffffffff8021ad08:	e8 a3 22 ff ff       	call   ffffffff8020cfb0 <RME_Hex_Print>
    RME_DBG_S("\n\rHang");
ffffffff8021ad0d:	48 c7 c7 4d e1 21 80 	mov    $0xffffffff8021e14d,%rdi
ffffffff8021ad14:	e8 47 23 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    while(1);
ffffffff8021ad19:	eb fe                	jmp    ffffffff8021ad19 <__RME_X64_Fault_Handler+0x239>
        case RME_X64_FAULT_XM:RME_DBG_S("SIMD floating-point exception");break;
ffffffff8021ad1b:	48 c7 c7 8e df 21 80 	mov    $0xffffffff8021df8e,%rdi
ffffffff8021ad22:	e8 39 23 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ad27:	e9 02 fe ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_ABORT_MC:RME_DBG_S("Machine check exception");break;
ffffffff8021ad2c:	48 c7 c7 76 df 21 80 	mov    $0xffffffff8021df76,%rdi
ffffffff8021ad33:	e8 28 23 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ad38:	e9 f1 fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_AC:RME_DBG_S("Alignment check exception");break;
ffffffff8021ad3d:	48 c7 c7 5c df 21 80 	mov    $0xffffffff8021df5c,%rdi
ffffffff8021ad44:	e8 17 23 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ad49:	e9 e0 fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_MF:RME_DBG_S("X87 FPU floating-point error:");break;
ffffffff8021ad4e:	48 c7 c7 3e df 21 80 	mov    $0xffffffff8021df3e,%rdi
ffffffff8021ad55:	e8 06 23 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ad5a:	e9 cf fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_PF:RME_DBG_S("Page fault exception");break;
ffffffff8021ad5f:	48 c7 c7 29 df 21 80 	mov    $0xffffffff8021df29,%rdi
ffffffff8021ad66:	e8 f5 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ad6b:	e9 be fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_GP:RME_DBG_S("General protection exception");break;
ffffffff8021ad70:	48 c7 c7 0c df 21 80 	mov    $0xffffffff8021df0c,%rdi
ffffffff8021ad77:	e8 e4 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ad7c:	e9 ad fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_SS:RME_DBG_S("Stack fault exception");break;
ffffffff8021ad81:	48 c7 c7 f6 de 21 80 	mov    $0xffffffff8021def6,%rdi
ffffffff8021ad88:	e8 d3 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ad8d:	e9 9c fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_NP:RME_DBG_S("Segment not present");break;
ffffffff8021ad92:	48 c7 c7 e2 de 21 80 	mov    $0xffffffff8021dee2,%rdi
ffffffff8021ad99:	e8 c2 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ad9e:	e9 8b fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_TS:RME_DBG_S("Invalid TSS exception");break;
ffffffff8021ada3:	48 c7 c7 cc de 21 80 	mov    $0xffffffff8021decc,%rdi
ffffffff8021adaa:	e8 b1 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021adaf:	e9 7a fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_ABORT_OLD_MF:RME_DBG_S("Coprocessor overrun - not used later on");break;
ffffffff8021adb4:	48 c7 c7 28 e3 21 80 	mov    $0xffffffff8021e328,%rdi
ffffffff8021adbb:	e8 a0 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021adc0:	e9 69 fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_ABORT_DF:RME_DBG_S("Double(nested) fault exception");break;
ffffffff8021adc5:	48 c7 c7 08 e3 21 80 	mov    $0xffffffff8021e308,%rdi
ffffffff8021adcc:	e8 8f 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021add1:	e9 58 fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_NM:RME_DBG_S("Device not available");break;
ffffffff8021add6:	48 c7 c7 b7 de 21 80 	mov    $0xffffffff8021deb7,%rdi
ffffffff8021addd:	e8 7e 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ade2:	e9 47 fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_UD:RME_DBG_S("Undefined instruction");break;
ffffffff8021ade7:	48 c7 c7 a1 de 21 80 	mov    $0xffffffff8021dea1,%rdi
ffffffff8021adee:	e8 6d 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021adf3:	e9 36 fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_BR:RME_DBG_S("Bound range exception");break;
ffffffff8021adf8:	48 c7 c7 8b de 21 80 	mov    $0xffffffff8021de8b,%rdi
ffffffff8021adff:	e8 5c 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ae04:	e9 25 fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_TRAP_OF:RME_DBG_S("Overflow exception");break;
ffffffff8021ae09:	48 c7 c7 78 de 21 80 	mov    $0xffffffff8021de78,%rdi
ffffffff8021ae10:	e8 4b 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ae15:	e9 14 fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_TRAP_BP:RME_DBG_S("Debug breakpoint");break;
ffffffff8021ae1a:	48 c7 c7 67 de 21 80 	mov    $0xffffffff8021de67,%rdi
ffffffff8021ae21:	e8 3a 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ae26:	e9 03 fd ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_INT_NMI:RME_DBG_S("NMI error");break;
ffffffff8021ae2b:	48 c7 c7 5d de 21 80 	mov    $0xffffffff8021de5d,%rdi
ffffffff8021ae32:	e8 29 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ae37:	e9 f2 fc ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_TRAP_DB:RME_DBG_S("Debug exception");break;
ffffffff8021ae3c:	48 c7 c7 4d de 21 80 	mov    $0xffffffff8021de4d,%rdi
ffffffff8021ae43:	e8 18 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ae48:	e9 e1 fc ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_DE:RME_DBG_S("Divide error");break;
ffffffff8021ae4d:	48 c7 c7 40 de 21 80 	mov    $0xffffffff8021de40,%rdi
ffffffff8021ae54:	e8 07 22 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ae59:	e9 d0 fc ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
        default:RME_DBG_S("Unknown exception");break;
ffffffff8021ae5e:	48 c7 c7 c5 df 21 80 	mov    $0xffffffff8021dfc5,%rdi
ffffffff8021ae65:	e8 f6 21 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
ffffffff8021ae6a:	e9 bf fc ff ff       	jmp    ffffffff8021ab2e <__RME_X64_Fault_Handler+0x4e>
ffffffff8021ae6f:	90                   	nop

ffffffff8021ae70 <__RME_X64_Generic_Handler>:
{
ffffffff8021ae70:	f3 0f 1e fa          	endbr64 
ffffffff8021ae74:	55                   	push   %rbp
    RME_DBG_S("\r\nGeneral int:");
ffffffff8021ae75:	48 c7 c7 54 e1 21 80 	mov    $0xffffffff8021e154,%rdi
{
ffffffff8021ae7c:	48 89 f5             	mov    %rsi,%rbp
    RME_DBG_S("\r\nGeneral int:");
ffffffff8021ae7f:	e8 dc 21 ff ff       	call   ffffffff8020d060 <RME_Str_Print>
    RME_DBG_I(Int_Num);
ffffffff8021ae84:	48 89 ef             	mov    %rbp,%rdi
}
ffffffff8021ae87:	5d                   	pop    %rbp
    RME_DBG_I(Int_Num);
ffffffff8021ae88:	e9 33 20 ff ff       	jmp    ffffffff8020cec0 <RME_Int_Print>
ffffffff8021ae8d:	0f 1f 00             	nopl   (%rax)

ffffffff8021ae90 <__RME_Pgt_Set>:
{
ffffffff8021ae90:	f3 0f 1e fa          	endbr64 
ffffffff8021ae94:	49 89 f8             	mov    %rdi,%r8
    __RME_X64_Pgt_Set(RME_X64_VA2PA(RME_CAP_GETOBJ(Pgt,rme_ptr_t)));
ffffffff8021ae97:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021ae9e:	80 00 00 
ffffffff8021aea1:	49 03 78 18          	add    0x18(%r8),%rdi
ffffffff8021aea5:	e9 ff 09 ff ff       	jmp    ffffffff8020b8a9 <__RME_X64_Pgt_Set>
ffffffff8021aeaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021aeb0 <__RME_Pgt_Check>:
{
ffffffff8021aeb0:	f3 0f 1e fa          	endbr64 
        return RME_ERR_HAL_FAIL;
ffffffff8021aeb4:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    if((Vaddr&0xFFF)!=0)
ffffffff8021aebb:	41 f7 c0 ff 0f 00 00 	test   $0xfff,%r8d
ffffffff8021aec2:	75 34                	jne    ffffffff8021aef8 <__RME_Pgt_Check+0x48>
       (Size_Order!=RME_PGT_SIZE_2M)&&(Size_Order!=RME_PGT_SIZE_4K))
ffffffff8021aec4:	48 83 fa 27          	cmp    $0x27,%rdx
ffffffff8021aec8:	77 2e                	ja     ffffffff8021aef8 <__RME_Pgt_Check+0x48>
ffffffff8021aeca:	48 bf ff ef df bf 7f 	movabs $0xffffff7fbfdfefff,%rdi
ffffffff8021aed1:	ff ff ff 
ffffffff8021aed4:	48 0f a3 d7          	bt     %rdx,%rdi
ffffffff8021aed8:	72 1e                	jb     ffffffff8021aef8 <__RME_Pgt_Check+0x48>
    if(((Size_Order==RME_PGT_SIZE_512G)^(Is_Top!=0))!=0)
ffffffff8021aeda:	48 83 fa 27          	cmp    $0x27,%rdx
ffffffff8021aede:	0f 94 c0             	sete   %al
ffffffff8021aee1:	48 85 f6             	test   %rsi,%rsi
ffffffff8021aee4:	0f 95 c2             	setne  %dl
ffffffff8021aee7:	31 d0                	xor    %edx,%eax
    if(Num_Order!=RME_PGT_NUM_512)
ffffffff8021aee9:	48 83 f9 09          	cmp    $0x9,%rcx
ffffffff8021aeed:	0f 95 c2             	setne  %dl
ffffffff8021aef0:	09 d0                	or     %edx,%eax
ffffffff8021aef2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aef5:	48 f7 d8             	neg    %rax
}
ffffffff8021aef8:	c3                   	ret    
ffffffff8021aef9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021af00 <__RME_Pgt_Init>:
{
ffffffff8021af00:	f3 0f 1e fa          	endbr64 
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8021af04:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
    for(Count=0;Count<256;Count++)
ffffffff8021af08:	48 8d 91 00 08 00 00 	lea    0x800(%rcx),%rdx
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8021af0f:	48 89 c8             	mov    %rcx,%rax
ffffffff8021af12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Ptr[Count]=0;
ffffffff8021af18:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8021af1f:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021af23:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021af26:	75 f0                	jne    ffffffff8021af18 <__RME_Pgt_Init+0x18>
    if((Pgt_Op->Base&RME_PGT_TOP)!=0)
ffffffff8021af28:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021af2c:	74 28                	je     ffffffff8021af56 <__RME_Pgt_Init+0x56>
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021af2e:	48 81 e9 00 90 10 80 	sub    $0xffffffff80109000,%rcx
ffffffff8021af35:	48 c7 c0 00 98 10 80 	mov    $0xffffffff80109800,%rax
ffffffff8021af3c:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021af3f:	90                   	nop
ffffffff8021af40:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021af43:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
        for(;Count<512;Count++)
ffffffff8021af47:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021af4b:	48 3d 00 a0 10 80    	cmp    $0xffffffff8010a000,%rax
ffffffff8021af51:	75 ed                	jne    ffffffff8021af40 <__RME_Pgt_Init+0x40>
}
ffffffff8021af53:	31 c0                	xor    %eax,%eax
ffffffff8021af55:	c3                   	ret    
ffffffff8021af56:	48 8d 81 00 10 00 00 	lea    0x1000(%rcx),%rax
ffffffff8021af5d:	0f 1f 00             	nopl   (%rax)
            Ptr[Count]=0;
ffffffff8021af60:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
        for(;Count<512;Count++)
ffffffff8021af67:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8021af6b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021af6e:	75 f0                	jne    ffffffff8021af60 <__RME_Pgt_Init+0x60>
}
ffffffff8021af70:	31 c0                	xor    %eax,%eax
ffffffff8021af72:	c3                   	ret    
ffffffff8021af73:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021af7a:	00 00 00 00 
ffffffff8021af7e:	66 90                	xchg   %ax,%ax

ffffffff8021af80 <__RME_Pgt_Del_Check>:
{
ffffffff8021af80:	f3 0f 1e fa          	endbr64 
}
ffffffff8021af84:	31 c0                	xor    %eax,%eax
ffffffff8021af86:	c3                   	ret    
ffffffff8021af87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021af8e:	00 00 

ffffffff8021af90 <__RME_Pgt_Page_Map>:
{
ffffffff8021af90:	f3 0f 1e fa          	endbr64 
ffffffff8021af94:	48 89 f8             	mov    %rdi,%rax
        return RME_ERR_HAL_FAIL;
ffffffff8021af97:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
    if((Flags&RME_PGT_READ)==0)
ffffffff8021af9e:	f6 c1 01             	test   $0x1,%cl
ffffffff8021afa1:	74 51                	je     ffffffff8021aff4 <__RME_Pgt_Page_Map+0x64>
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021afa3:	48 81 fa ff 00 00 00 	cmp    $0xff,%rdx
ffffffff8021afaa:	76 06                	jbe    ffffffff8021afb2 <__RME_Pgt_Page_Map+0x22>
ffffffff8021afac:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021afb0:	75 42                	jne    ffffffff8021aff4 <__RME_Pgt_Page_Map+0x64>
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021afb2:	48 bf 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdi
ffffffff8021afb9:	ff 0f 00 
ffffffff8021afbc:	83 e1 df             	and    $0xffffffdf,%ecx
ffffffff8021afbf:	48 21 fe             	and    %rdi,%rsi
ffffffff8021afc2:	48 0b 34 cd 20 e5 21 	or     -0x7fde1ae0(,%rcx,8),%rsi
ffffffff8021afc9:	80 
ffffffff8021afca:	48 89 f1             	mov    %rsi,%rcx
ffffffff8021afcd:	48 83 ce 04          	or     $0x4,%rsi
ffffffff8021afd1:	80 c9 84             	or     $0x84,%cl
ffffffff8021afd4:	83 78 2c 0c          	cmpl   $0xc,0x2c(%rax)
ffffffff8021afd8:	48 0f 44 ce          	cmove  %rsi,%rcx
    if(RME_COMP_SWAP(&(Table[Pos]),0,X64_Flags)==0)
ffffffff8021afdc:	48 8b 70 18          	mov    0x18(%rax),%rsi
ffffffff8021afe0:	31 c0                	xor    %eax,%eax
ffffffff8021afe2:	48 8d 14 d6          	lea    (%rsi,%rdx,8),%rdx
ffffffff8021afe6:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021afeb:	0f 94 c1             	sete   %cl
ffffffff8021afee:	80 f9 01             	cmp    $0x1,%cl
ffffffff8021aff1:	4d 19 c0             	sbb    %r8,%r8
}
ffffffff8021aff4:	4c 89 c0             	mov    %r8,%rax
ffffffff8021aff7:	c3                   	ret    
ffffffff8021aff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021afff:	00 

ffffffff8021b000 <__RME_Pgt_Page_Unmap>:
{
ffffffff8021b000:	f3 0f 1e fa          	endbr64 
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b004:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff8021b00b:	76 06                	jbe    ffffffff8021b013 <__RME_Pgt_Page_Unmap+0x13>
ffffffff8021b00d:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b011:	75 3d                	jne    ffffffff8021b050 <__RME_Pgt_Page_Unmap+0x50>
    Temp=Table[Pos];
ffffffff8021b013:	48 8b 47 18          	mov    0x18(%rdi),%rax
        return RME_ERR_HAL_FAIL;
ffffffff8021b017:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
    Temp=Table[Pos];
ffffffff8021b01e:	48 8d 14 f0          	lea    (%rax,%rsi,8),%rdx
ffffffff8021b022:	48 8b 02             	mov    (%rdx),%rax
    if(Temp==0)
ffffffff8021b025:	48 85 c0             	test   %rax,%rax
ffffffff8021b028:	74 1a                	je     ffffffff8021b044 <__RME_Pgt_Page_Unmap+0x44>
    if((RME_PGT_SIZEORD(Pgt_Op->Order)!=RME_PGT_SIZE_4K)&&((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff8021b02a:	83 7f 2c 0c          	cmpl   $0xc,0x2c(%rdi)
ffffffff8021b02e:	74 04                	je     ffffffff8021b034 <__RME_Pgt_Page_Unmap+0x34>
ffffffff8021b030:	a8 80                	test   $0x80,%al
ffffffff8021b032:	74 10                	je     ffffffff8021b044 <__RME_Pgt_Page_Unmap+0x44>
ffffffff8021b034:	31 c9                	xor    %ecx,%ecx
ffffffff8021b036:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021b03b:	0f 94 c1             	sete   %cl
    if(RME_COMP_SWAP(&(Table[Pos]),Temp,0)==0)
ffffffff8021b03e:	80 f9 01             	cmp    $0x1,%cl
ffffffff8021b041:	4d 19 c0             	sbb    %r8,%r8
}
ffffffff8021b044:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b047:	c3                   	ret    
ffffffff8021b048:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021b04f:	00 
        return RME_ERR_HAL_FAIL;
ffffffff8021b050:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
}
ffffffff8021b057:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b05a:	c3                   	ret    
ffffffff8021b05b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff8021b060 <__RME_Pgt_Pgdir_Map>:
{
ffffffff8021b060:	f3 0f 1e fa          	endbr64 
ffffffff8021b064:	48 89 f0             	mov    %rsi,%rax
        return RME_ERR_HAL_FAIL;
ffffffff8021b067:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
{
ffffffff8021b06e:	48 89 d6             	mov    %rdx,%rsi
    if((Flags&RME_PGT_READ)==0)
ffffffff8021b071:	f6 c1 01             	test   $0x1,%cl
ffffffff8021b074:	74 50                	je     ffffffff8021b0c6 <__RME_Pgt_Pgdir_Map+0x66>
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b076:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff8021b07c:	76 06                	jbe    ffffffff8021b084 <__RME_Pgt_Pgdir_Map+0x24>
ffffffff8021b07e:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b082:	75 42                	jne    ffffffff8021b0c6 <__RME_Pgt_Pgdir_Map+0x66>
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021b084:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021b08b:	80 00 00 
ffffffff8021b08e:	83 e1 df             	and    $0xffffffdf,%ecx
ffffffff8021b091:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff8021b095:	48 be 00 f0 ff ff ff 	movabs $0xffffffffff000,%rsi
ffffffff8021b09c:	ff 0f 00 
ffffffff8021b09f:	48 21 f2             	and    %rsi,%rdx
ffffffff8021b0a2:	48 0b 14 cd 20 e5 21 	or     -0x7fde1ae0(,%rcx,8),%rdx
ffffffff8021b0a9:	80 
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff8021b0aa:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021b0ae:	48 83 ca 04          	or     $0x4,%rdx
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff8021b0b2:	48 8d 0c c1          	lea    (%rcx,%rax,8),%rcx
ffffffff8021b0b6:	31 c0                	xor    %eax,%eax
ffffffff8021b0b8:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021b0bd:	0f 94 c2             	sete   %dl
ffffffff8021b0c0:	80 fa 01             	cmp    $0x1,%dl
ffffffff8021b0c3:	4d 19 c0             	sbb    %r8,%r8
}
ffffffff8021b0c6:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b0c9:	c3                   	ret    
ffffffff8021b0ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021b0d0 <__RME_Pgt_Pgdir_Unmap>:
{
ffffffff8021b0d0:	f3 0f 1e fa          	endbr64 
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b0d4:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff8021b0db:	76 06                	jbe    ffffffff8021b0e3 <__RME_Pgt_Pgdir_Unmap+0x13>
ffffffff8021b0dd:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b0e1:	75 45                	jne    ffffffff8021b128 <__RME_Pgt_Pgdir_Unmap+0x58>
    Temp=Parent_Table[Pos];
ffffffff8021b0e3:	48 8b 47 18          	mov    0x18(%rdi),%rax
        return RME_ERR_HAL_FAIL;
ffffffff8021b0e7:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
    Temp=Parent_Table[Pos];
ffffffff8021b0ee:	48 8d 0c f0          	lea    (%rax,%rsi,8),%rcx
ffffffff8021b0f2:	48 8b 01             	mov    (%rcx),%rax
    if(Temp==0)
ffffffff8021b0f5:	48 85 c0             	test   %rax,%rax
ffffffff8021b0f8:	74 27                	je     ffffffff8021b121 <__RME_Pgt_Pgdir_Unmap+0x51>
    if((RME_PGT_SIZEORD(Pgt_Parent->Order)==RME_PGT_SIZE_4K)||((Temp&RME_X64_MMU_PDE_SUP)!=0))
ffffffff8021b0fa:	83 7f 2c 0c          	cmpl   $0xc,0x2c(%rdi)
ffffffff8021b0fe:	74 21                	je     ffffffff8021b121 <__RME_Pgt_Pgdir_Unmap+0x51>
ffffffff8021b100:	48 89 c6             	mov    %rax,%rsi
ffffffff8021b103:	81 e6 80 00 00 00    	and    $0x80,%esi
ffffffff8021b109:	75 16                	jne    ffffffff8021b121 <__RME_Pgt_Pgdir_Unmap+0x51>
    if (Child_Table != Expected_Child_Table)
ffffffff8021b10b:	48 3b 42 18          	cmp    0x18(%rdx),%rax
ffffffff8021b10f:	75 10                	jne    ffffffff8021b121 <__RME_Pgt_Pgdir_Unmap+0x51>
ffffffff8021b111:	f0 48 0f b1 31       	lock cmpxchg %rsi,(%rcx)
ffffffff8021b116:	40 0f 94 c6          	sete   %sil
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),Temp,0)==0)
ffffffff8021b11a:	40 80 fe 01          	cmp    $0x1,%sil
ffffffff8021b11e:	4d 19 c0             	sbb    %r8,%r8
}
ffffffff8021b121:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b124:	c3                   	ret    
ffffffff8021b125:	0f 1f 00             	nopl   (%rax)
        return RME_ERR_HAL_FAIL;
ffffffff8021b128:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
}
ffffffff8021b12f:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b132:	c3                   	ret    
ffffffff8021b133:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b13a:	00 00 00 00 
ffffffff8021b13e:	66 90                	xchg   %ax,%ax

ffffffff8021b140 <__RME_Pgt_Lookup>:
{
ffffffff8021b140:	f3 0f 1e fa          	endbr64 
ffffffff8021b144:	49 89 c9             	mov    %rcx,%r9
    if((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0)
ffffffff8021b147:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8021b14b:	49 89 f0             	mov    %rsi,%r8
ffffffff8021b14e:	49 d3 e8             	shr    %cl,%r8
ffffffff8021b151:	4d 85 c0             	test   %r8,%r8
ffffffff8021b154:	75 76                	jne    ffffffff8021b1cc <__RME_Pgt_Lookup+0x8c>
    Temp=Table[Pos];
ffffffff8021b156:	48 8b 47 18          	mov    0x18(%rdi),%rax
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff8021b15a:	48 c1 e9 20          	shr    $0x20,%rcx
    Temp=Table[Pos];
ffffffff8021b15e:	48 8b 04 f0          	mov    (%rax,%rsi,8),%rax
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff8021b162:	48 83 f9 0c          	cmp    $0xc,%rcx
ffffffff8021b166:	74 60                	je     ffffffff8021b1c8 <__RME_Pgt_Lookup+0x88>
        if(((Temp&RME_X64_MMU_P)==0)||((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff8021b168:	48 89 c1             	mov    %rax,%rcx
ffffffff8021b16b:	81 e1 81 00 00 00    	and    $0x81,%ecx
ffffffff8021b171:	48 81 f9 81 00 00 00 	cmp    $0x81,%rcx
ffffffff8021b178:	75 52                	jne    ffffffff8021b1cc <__RME_Pgt_Lookup+0x8c>
    if(Paddr!=0)
ffffffff8021b17a:	48 85 d2             	test   %rdx,%rdx
ffffffff8021b17d:	74 10                	je     ffffffff8021b18f <__RME_Pgt_Lookup+0x4f>
        *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff8021b17f:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff8021b186:	ff 0f 00 
ffffffff8021b189:	48 21 c1             	and    %rax,%rcx
ffffffff8021b18c:	48 89 0a             	mov    %rcx,(%rdx)
    if(Flags!=0)
ffffffff8021b18f:	4d 85 c9             	test   %r9,%r9
ffffffff8021b192:	74 2c                	je     ffffffff8021b1c0 <__RME_Pgt_Lookup+0x80>
        *Flags=RME_X64_PGFLG_NAT2RME(Temp);
ffffffff8021b194:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b197:	48 89 c1             	mov    %rax,%rcx
ffffffff8021b19a:	48 d1 e8             	shr    %rax
ffffffff8021b19d:	48 c1 ea 3f          	shr    $0x3f,%rdx
ffffffff8021b1a1:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff8021b1a5:	83 e0 01             	and    $0x1,%eax
ffffffff8021b1a8:	48 c1 e2 03          	shl    $0x3,%rdx
ffffffff8021b1ac:	83 e1 06             	and    $0x6,%ecx
ffffffff8021b1af:	48 09 ca             	or     %rcx,%rdx
ffffffff8021b1b2:	48 09 d0             	or     %rdx,%rax
ffffffff8021b1b5:	48 8b 04 c5 a0 e4 21 	mov    -0x7fde1b60(,%rax,8),%rax
ffffffff8021b1bc:	80 
ffffffff8021b1bd:	49 89 01             	mov    %rax,(%r9)
}
ffffffff8021b1c0:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b1c3:	c3                   	ret    
ffffffff8021b1c4:	0f 1f 40 00          	nopl   0x0(%rax)
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b1c8:	a8 01                	test   $0x1,%al
ffffffff8021b1ca:	75 ae                	jne    ffffffff8021b17a <__RME_Pgt_Lookup+0x3a>
        return RME_ERR_HAL_FAIL;
ffffffff8021b1cc:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
}
ffffffff8021b1d3:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b1d6:	c3                   	ret    
ffffffff8021b1d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021b1de:	00 00 

ffffffff8021b1e0 <__RME_Pgt_Walk>:
{
ffffffff8021b1e0:	f3 0f 1e fa          	endbr64 
ffffffff8021b1e4:	48 89 f8             	mov    %rdi,%rax
    if(Vaddr>=0x7FFFFFFFFFFFULL)
ffffffff8021b1e7:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b1eb:	0f 84 5f 01 00 00    	je     ffffffff8021b350 <__RME_Pgt_Walk+0x170>
{
ffffffff8021b1f1:	41 56                	push   %r14
ffffffff8021b1f3:	48 89 f7             	mov    %rsi,%rdi
ffffffff8021b1f6:	41 55                	push   %r13
ffffffff8021b1f8:	41 54                	push   %r12
ffffffff8021b1fa:	55                   	push   %rbp
ffffffff8021b1fb:	53                   	push   %rbx
ffffffff8021b1fc:	48 89 d3             	mov    %rdx,%rbx
    if(Vaddr>=0x7FFFFFFFFFFFULL)
ffffffff8021b1ff:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffe,%rdx
ffffffff8021b206:	7f 00 00 
ffffffff8021b209:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8021b20c:	0f 87 7e 00 00 00    	ja     ffffffff8021b290 <__RME_Pgt_Walk+0xb0>
    Table=RME_CAP_GETOBJ(Pgt_Op, rme_ptr_t*);
ffffffff8021b212:	4c 8b 50 18          	mov    0x18(%rax),%r10
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b216:	48 89 f0             	mov    %rsi,%rax
ffffffff8021b219:	48 c1 e8 27          	shr    $0x27,%rax
        Temp=Table[Pos];
ffffffff8021b21d:	49 8b 04 c2          	mov    (%r10,%rax,8),%rax
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b221:	a8 01                	test   $0x1,%al
ffffffff8021b223:	74 6b                	je     ffffffff8021b290 <__RME_Pgt_Walk+0xb0>
ffffffff8021b225:	49 89 cb             	mov    %rcx,%r11
    No_Execute=0;
ffffffff8021b228:	31 ed                	xor    %ebp,%ebp
    Flags_Accum=0xFFF;
ffffffff8021b22a:	be ff 0f 00 00       	mov    $0xfff,%esi
    Size_Cnt=RME_PGT_SIZE_512G;
ffffffff8021b22f:	ba 27 00 00 00       	mov    $0x27,%edx
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b234:	49 be 00 00 00 00 00 	movabs $0x8000000000000000,%r14
ffffffff8021b23b:	00 00 80 
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b23e:	49 bd 00 f0 ff ff ff 	movabs $0xffffffffff000,%r13
ffffffff8021b245:	ff 0f 00 
ffffffff8021b248:	49 bc 00 00 00 00 00 	movabs $0xffff800000000000,%r12
ffffffff8021b24f:	80 ff ff 
ffffffff8021b252:	89 d1                	mov    %edx,%ecx
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b254:	a8 80                	test   $0x80,%al
ffffffff8021b256:	75 55                	jne    ffffffff8021b2ad <__RME_Pgt_Walk+0xcd>
ffffffff8021b258:	48 83 fa 0c          	cmp    $0xc,%rdx
ffffffff8021b25c:	74 4a                	je     ffffffff8021b2a8 <__RME_Pgt_Walk+0xc8>
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b25e:	48 89 c1             	mov    %rax,%rcx
            Flags_Accum&=Temp;
ffffffff8021b261:	48 21 c6             	and    %rax,%rsi
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff8021b264:	48 83 ea 09          	sub    $0x9,%rdx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b268:	4c 21 e8             	and    %r13,%rax
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b26b:	4c 21 f1             	and    %r14,%rcx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b26e:	4e 8d 14 20          	lea    (%rax,%r12,1),%r10
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b272:	48 89 f8             	mov    %rdi,%rax
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b275:	48 09 cd             	or     %rcx,%rbp
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b278:	89 d1                	mov    %edx,%ecx
ffffffff8021b27a:	48 d3 e8             	shr    %cl,%rax
ffffffff8021b27d:	48 89 c1             	mov    %rax,%rcx
ffffffff8021b280:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
        Temp=Table[Pos];
ffffffff8021b286:	49 8b 04 ca          	mov    (%r10,%rcx,8),%rax
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b28a:	a8 01                	test   $0x1,%al
ffffffff8021b28c:	75 c4                	jne    ffffffff8021b252 <__RME_Pgt_Walk+0x72>
ffffffff8021b28e:	66 90                	xchg   %ax,%ax
        return RME_ERR_HAL_FAIL;
ffffffff8021b290:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
}
ffffffff8021b297:	5b                   	pop    %rbx
ffffffff8021b298:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b29b:	5d                   	pop    %rbp
ffffffff8021b29c:	41 5c                	pop    %r12
ffffffff8021b29e:	41 5d                	pop    %r13
ffffffff8021b2a0:	41 5e                	pop    %r14
ffffffff8021b2a2:	c3                   	ret    
ffffffff8021b2a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff8021b2a8:	b9 0c 00 00 00       	mov    $0xc,%ecx
            if(Pgt!=0)
ffffffff8021b2ad:	48 85 db             	test   %rbx,%rbx
ffffffff8021b2b0:	74 03                	je     ffffffff8021b2b5 <__RME_Pgt_Walk+0xd5>
                *Pgt=(rme_ptr_t)Table;
ffffffff8021b2b2:	4c 89 13             	mov    %r10,(%rbx)
            if(Map_Vaddr!=0)
ffffffff8021b2b5:	4d 85 db             	test   %r11,%r11
ffffffff8021b2b8:	74 10                	je     ffffffff8021b2ca <__RME_Pgt_Walk+0xea>
                *Map_Vaddr=RME_ROUND_DOWN(Vaddr,Size_Cnt);
ffffffff8021b2ba:	49 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%r10
ffffffff8021b2c1:	49 d3 e2             	shl    %cl,%r10
ffffffff8021b2c4:	49 21 fa             	and    %rdi,%r10
ffffffff8021b2c7:	4d 89 13             	mov    %r10,(%r11)
            if(Paddr!=0)
ffffffff8021b2ca:	4d 85 c0             	test   %r8,%r8
ffffffff8021b2cd:	74 10                	je     ffffffff8021b2df <__RME_Pgt_Walk+0xff>
                *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff8021b2cf:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff8021b2d6:	ff 0f 00 
ffffffff8021b2d9:	48 21 c1             	and    %rax,%rcx
ffffffff8021b2dc:	49 89 08             	mov    %rcx,(%r8)
            if(Size_Order!=0)
ffffffff8021b2df:	4d 85 c9             	test   %r9,%r9
ffffffff8021b2e2:	74 03                	je     ffffffff8021b2e7 <__RME_Pgt_Walk+0x107>
                *Size_Order=Size_Cnt;
ffffffff8021b2e4:	49 89 11             	mov    %rdx,(%r9)
            if(Num_Order!=0)
ffffffff8021b2e7:	48 83 7c 24 30 00    	cmpq   $0x0,0x30(%rsp)
ffffffff8021b2ed:	74 0c                	je     ffffffff8021b2fb <__RME_Pgt_Walk+0x11b>
                *Num_Order=RME_PGT_NUM_512;
ffffffff8021b2ef:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
ffffffff8021b2f4:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
    return 0;
ffffffff8021b2fb:	45 31 c0             	xor    %r8d,%r8d
            if(Flags!=0)
ffffffff8021b2fe:	48 83 7c 24 38 00    	cmpq   $0x0,0x38(%rsp)
ffffffff8021b304:	74 91                	je     ffffffff8021b297 <__RME_Pgt_Walk+0xb7>
                *Flags=RME_X64_PGFLG_NAT2RME(No_Execute|(Temp&Flags_Accum));
ffffffff8021b306:	48 21 c6             	and    %rax,%rsi
ffffffff8021b309:	48 8b 5c 24 38       	mov    0x38(%rsp),%rbx
ffffffff8021b30e:	48 09 ee             	or     %rbp,%rsi
ffffffff8021b311:	48 89 f0             	mov    %rsi,%rax
ffffffff8021b314:	48 89 f2             	mov    %rsi,%rdx
ffffffff8021b317:	48 d1 ee             	shr    %rsi
ffffffff8021b31a:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8021b31e:	48 c1 ea 02          	shr    $0x2,%rdx
ffffffff8021b322:	83 e6 01             	and    $0x1,%esi
ffffffff8021b325:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8021b329:	83 e2 06             	and    $0x6,%edx
ffffffff8021b32c:	48 09 d0             	or     %rdx,%rax
ffffffff8021b32f:	48 09 f0             	or     %rsi,%rax
ffffffff8021b332:	48 8b 04 c5 a0 e4 21 	mov    -0x7fde1b60(,%rax,8),%rax
ffffffff8021b339:	80 
ffffffff8021b33a:	48 89 03             	mov    %rax,(%rbx)
}
ffffffff8021b33d:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b340:	5b                   	pop    %rbx
ffffffff8021b341:	5d                   	pop    %rbp
ffffffff8021b342:	41 5c                	pop    %r12
ffffffff8021b344:	41 5d                	pop    %r13
ffffffff8021b346:	41 5e                	pop    %r14
ffffffff8021b348:	c3                   	ret    
ffffffff8021b349:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8021b350:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b357:	c3                   	ret    
ffffffff8021b358:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021b35f:	00 

ffffffff8021b360 <__RME_Svc_Param_Get>:
{
ffffffff8021b360:	f3 0f 1e fa          	endbr64 
    *Svc=(Reg->RDI)>>32;
ffffffff8021b364:	8b 47 2c             	mov    0x2c(%rdi),%eax
ffffffff8021b367:	48 89 06             	mov    %rax,(%rsi)
    *Cid=(Reg->RDI)&0xFFFFFFFF;
ffffffff8021b36a:	8b 47 28             	mov    0x28(%rdi),%eax
ffffffff8021b36d:	48 89 02             	mov    %rax,(%rdx)
    Param[0]=Reg->RSI;
ffffffff8021b370:	48 8b 47 20          	mov    0x20(%rdi),%rax
ffffffff8021b374:	48 89 01             	mov    %rax,(%rcx)
    Param[1]=Reg->RDX;
ffffffff8021b377:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8021b37b:	48 89 41 08          	mov    %rax,0x8(%rcx)
    Param[2]=Reg->R8;
ffffffff8021b37f:	48 8b 47 38          	mov    0x38(%rdi),%rax
ffffffff8021b383:	48 89 41 10          	mov    %rax,0x10(%rcx)
}
ffffffff8021b387:	c3                   	ret    
ffffffff8021b388:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021b38f:	00 

ffffffff8021b390 <__RME_Svc_Retval_Set>:
{
ffffffff8021b390:	f3 0f 1e fa          	endbr64 
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff8021b394:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8021b397:	c3                   	ret    
ffffffff8021b398:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021b39f:	00 

ffffffff8021b3a0 <__RME_Inv_Retval_Set>:
{
ffffffff8021b3a0:	f3 0f 1e fa          	endbr64 
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff8021b3a4:	48 89 77 28          	mov    %rsi,0x28(%rdi)
}
ffffffff8021b3a8:	c3                   	ret    
ffffffff8021b3a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021b3b0 <__RME_List_Crt>:
{
ffffffff8021b3b0:	f3 0f 1e fa          	endbr64 
    Head->Next=Head;
ffffffff8021b3b4:	48 89 3f             	mov    %rdi,(%rdi)
    Head->Prev=Head;
ffffffff8021b3b7:	48 89 7f 08          	mov    %rdi,0x8(%rdi)
}
ffffffff8021b3bb:	c3                   	ret    
ffffffff8021b3bc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8021b3c0 <__RME_List_Ins>:
{
ffffffff8021b3c0:	f3 0f 1e fa          	endbr64 
    New->Prev=Prev;
ffffffff8021b3c4:	48 89 77 08          	mov    %rsi,0x8(%rdi)
    Prev->Next=New;
ffffffff8021b3c8:	48 89 3e             	mov    %rdi,(%rsi)
    New->Next=Next;
ffffffff8021b3cb:	48 89 17             	mov    %rdx,(%rdi)
    Next->Prev=New;
ffffffff8021b3ce:	48 89 7a 08          	mov    %rdi,0x8(%rdx)
}
ffffffff8021b3d2:	c3                   	ret    
ffffffff8021b3d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b3da:	00 00 00 00 
ffffffff8021b3de:	66 90                	xchg   %ax,%ax

ffffffff8021b3e0 <__RME_List_Del>:
{
ffffffff8021b3e0:	f3 0f 1e fa          	endbr64 
    Prev->Next = Next;
ffffffff8021b3e4:	48 89 37             	mov    %rsi,(%rdi)
    Next->Prev = Prev;
ffffffff8021b3e7:	48 89 7e 08          	mov    %rdi,0x8(%rsi)
}
ffffffff8021b3eb:	c3                   	ret    
ffffffff8021b3ec:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8021b3f0 <main>:
{
ffffffff8021b3f0:	f3 0f 1e fa          	endbr64 
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021b3f4:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b3fb:	80 ff ff 
{
ffffffff8021b3fe:	48 83 ec 08          	sub    $0x8,%rsp
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021b402:	48 01 c7             	add    %rax,%rdi
ffffffff8021b405:	48 89 3d 3c d3 00 00 	mov    %rdi,0xd33c(%rip)        # ffffffff80228748 <RME_X64_MBInfo>
    _RME_Kmain(RME_KOM_STACK_ADDR);
ffffffff8021b40c:	48 c7 c7 00 b8 20 80 	mov    $0xffffffff8020b800,%rdi
ffffffff8021b413:	e8 9b 04 ff ff       	call   ffffffff8020b8b3 <_RME_Kmain>
}
ffffffff8021b418:	31 c0                	xor    %eax,%eax
ffffffff8021b41a:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021b41e:	c3                   	ret    
