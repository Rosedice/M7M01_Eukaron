
./Object/RME：     文件格式 elf64-x86-64


Disassembly of section .text:

ffffffff80100000 <__RME_X64_Mboot_Header>:
ffffffff80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
ffffffff80100006:	01 00                	add    %eax,(%rax)
ffffffff80100008:	fe 4f 51             	decb   0x51(%rdi)
ffffffff8010000b:	e4 00                	in     $0x0,%al
ffffffff8010000d:	00 10                	add    %dl,(%rax)
ffffffff8010000f:	00 00                	add    %al,(%rax)
ffffffff80100011:	00 10                	add    %dl,(%rax)
ffffffff80100013:	00 00                	add    %al,(%rax)
ffffffff80100015:	a0 22 00 58 37 23 00 	movabs 0x8000002337580022,%al
ffffffff8010001c:	00 80 
ffffffff8010001e:	10 00                	adc    %al,(%rax)
ffffffff80100020:	90                   	nop
ffffffff80100021:	e9 da 0f 00 00       	jmp    ffffffff80101000 <__RME_X64_Mboot_Header+0x1000>
ffffffff80100026:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010002d:	00 00 00 00 
ffffffff80100031:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100038:	00 00 00 00 
ffffffff8010003c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100043:	00 00 00 00 
ffffffff80100047:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010004e:	00 00 00 00 
ffffffff80100052:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100059:	00 00 00 00 
ffffffff8010005d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100064:	00 00 00 00 
ffffffff80100068:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010006f:	00 00 00 00 
ffffffff80100073:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010007a:	00 00 00 00 
ffffffff8010007e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100085:	00 00 00 00 
ffffffff80100089:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100090:	00 00 00 00 
ffffffff80100094:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010009b:	00 00 00 00 
ffffffff8010009f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000a6:	00 00 00 00 
ffffffff801000aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000b1:	00 00 00 00 
ffffffff801000b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000bc:	00 00 00 00 
ffffffff801000c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000c7:	00 00 00 00 
ffffffff801000cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000d2:	00 00 00 00 
ffffffff801000d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000dd:	00 00 00 00 
ffffffff801000e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000e8:	00 00 00 00 
ffffffff801000ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000f3:	00 00 00 00 
ffffffff801000f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000fe:	00 00 00 00 
ffffffff80100102:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100109:	00 00 00 00 
ffffffff8010010d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100114:	00 00 00 00 
ffffffff80100118:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010011f:	00 00 00 00 
ffffffff80100123:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010012a:	00 00 00 00 
ffffffff8010012e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100135:	00 00 00 00 
ffffffff80100139:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100140:	00 00 00 00 
ffffffff80100144:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010014b:	00 00 00 00 
ffffffff8010014f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100156:	00 00 00 00 
ffffffff8010015a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100161:	00 00 00 00 
ffffffff80100165:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010016c:	00 00 00 00 
ffffffff80100170:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100177:	00 00 00 00 
ffffffff8010017b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100182:	00 00 00 00 
ffffffff80100186:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010018d:	00 00 00 00 
ffffffff80100191:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100198:	00 00 00 00 
ffffffff8010019c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001a3:	00 00 00 00 
ffffffff801001a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ae:	00 00 00 00 
ffffffff801001b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001b9:	00 00 00 00 
ffffffff801001bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001c4:	00 00 00 00 
ffffffff801001c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001cf:	00 00 00 00 
ffffffff801001d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001da:	00 00 00 00 
ffffffff801001de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001e5:	00 00 00 00 
ffffffff801001e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001f0:	00 00 00 00 
ffffffff801001f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001fb:	00 00 00 00 
ffffffff801001ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100206:	00 00 00 00 
ffffffff8010020a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100211:	00 00 00 00 
ffffffff80100215:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010021c:	00 00 00 00 
ffffffff80100220:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100227:	00 00 00 00 
ffffffff8010022b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100232:	00 00 00 00 
ffffffff80100236:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010023d:	00 00 00 00 
ffffffff80100241:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100248:	00 00 00 00 
ffffffff8010024c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100253:	00 00 00 00 
ffffffff80100257:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010025e:	00 00 00 00 
ffffffff80100262:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100269:	00 00 00 00 
ffffffff8010026d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100274:	00 00 00 00 
ffffffff80100278:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010027f:	00 00 00 00 
ffffffff80100283:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010028a:	00 00 00 00 
ffffffff8010028e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100295:	00 00 00 00 
ffffffff80100299:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002a0:	00 00 00 00 
ffffffff801002a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ab:	00 00 00 00 
ffffffff801002af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002b6:	00 00 00 00 
ffffffff801002ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002c1:	00 00 00 00 
ffffffff801002c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002cc:	00 00 00 00 
ffffffff801002d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002d7:	00 00 00 00 
ffffffff801002db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002e2:	00 00 00 00 
ffffffff801002e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ed:	00 00 00 00 
ffffffff801002f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002f8:	00 00 00 00 
ffffffff801002fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100303:	00 00 00 00 
ffffffff80100307:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010030e:	00 00 00 00 
ffffffff80100312:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100319:	00 00 00 00 
ffffffff8010031d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100324:	00 00 00 00 
ffffffff80100328:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010032f:	00 00 00 00 
ffffffff80100333:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010033a:	00 00 00 00 
ffffffff8010033e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100345:	00 00 00 00 
ffffffff80100349:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100350:	00 00 00 00 
ffffffff80100354:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010035b:	00 00 00 00 
ffffffff8010035f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100366:	00 00 00 00 
ffffffff8010036a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100371:	00 00 00 00 
ffffffff80100375:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010037c:	00 00 00 00 
ffffffff80100380:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100387:	00 00 00 00 
ffffffff8010038b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100392:	00 00 00 00 
ffffffff80100396:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010039d:	00 00 00 00 
ffffffff801003a1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003a8:	00 00 00 00 
ffffffff801003ac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003b3:	00 00 00 00 
ffffffff801003b7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003be:	00 00 00 00 
ffffffff801003c2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003c9:	00 00 00 00 
ffffffff801003cd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003d4:	00 00 00 00 
ffffffff801003d8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003df:	00 00 00 00 
ffffffff801003e3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003ea:	00 00 00 00 
ffffffff801003ee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003f5:	00 00 00 00 
ffffffff801003f9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100400:	00 00 00 00 
ffffffff80100404:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010040b:	00 00 00 00 
ffffffff8010040f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100416:	00 00 00 00 
ffffffff8010041a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100421:	00 00 00 00 
ffffffff80100425:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010042c:	00 00 00 00 
ffffffff80100430:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100437:	00 00 00 00 
ffffffff8010043b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100442:	00 00 00 00 
ffffffff80100446:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010044d:	00 00 00 00 
ffffffff80100451:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100458:	00 00 00 00 
ffffffff8010045c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100463:	00 00 00 00 
ffffffff80100467:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010046e:	00 00 00 00 
ffffffff80100472:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100479:	00 00 00 00 
ffffffff8010047d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100484:	00 00 00 00 
ffffffff80100488:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010048f:	00 00 00 00 
ffffffff80100493:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010049a:	00 00 00 00 
ffffffff8010049e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004a5:	00 00 00 00 
ffffffff801004a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004b0:	00 00 00 00 
ffffffff801004b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004bb:	00 00 00 00 
ffffffff801004bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004c6:	00 00 00 00 
ffffffff801004ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004d1:	00 00 00 00 
ffffffff801004d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004dc:	00 00 00 00 
ffffffff801004e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004e7:	00 00 00 00 
ffffffff801004eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004f2:	00 00 00 00 
ffffffff801004f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004fd:	00 00 00 00 
ffffffff80100501:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100508:	00 00 00 00 
ffffffff8010050c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100513:	00 00 00 00 
ffffffff80100517:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010051e:	00 00 00 00 
ffffffff80100522:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100529:	00 00 00 00 
ffffffff8010052d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100534:	00 00 00 00 
ffffffff80100538:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010053f:	00 00 00 00 
ffffffff80100543:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010054a:	00 00 00 00 
ffffffff8010054e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100555:	00 00 00 00 
ffffffff80100559:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100560:	00 00 00 00 
ffffffff80100564:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010056b:	00 00 00 00 
ffffffff8010056f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100576:	00 00 00 00 
ffffffff8010057a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100581:	00 00 00 00 
ffffffff80100585:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010058c:	00 00 00 00 
ffffffff80100590:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100597:	00 00 00 00 
ffffffff8010059b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005a2:	00 00 00 00 
ffffffff801005a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ad:	00 00 00 00 
ffffffff801005b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005b8:	00 00 00 00 
ffffffff801005bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005c3:	00 00 00 00 
ffffffff801005c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ce:	00 00 00 00 
ffffffff801005d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005d9:	00 00 00 00 
ffffffff801005dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005e4:	00 00 00 00 
ffffffff801005e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ef:	00 00 00 00 
ffffffff801005f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005fa:	00 00 00 00 
ffffffff801005fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100605:	00 00 00 00 
ffffffff80100609:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100610:	00 00 00 00 
ffffffff80100614:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010061b:	00 00 00 00 
ffffffff8010061f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100626:	00 00 00 00 
ffffffff8010062a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100631:	00 00 00 00 
ffffffff80100635:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010063c:	00 00 00 00 
ffffffff80100640:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100647:	00 00 00 00 
ffffffff8010064b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100652:	00 00 00 00 
ffffffff80100656:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010065d:	00 00 00 00 
ffffffff80100661:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100668:	00 00 00 00 
ffffffff8010066c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100673:	00 00 00 00 
ffffffff80100677:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010067e:	00 00 00 00 
ffffffff80100682:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100689:	00 00 00 00 
ffffffff8010068d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100694:	00 00 00 00 
ffffffff80100698:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010069f:	00 00 00 00 
ffffffff801006a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006aa:	00 00 00 00 
ffffffff801006ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006b5:	00 00 00 00 
ffffffff801006b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006c0:	00 00 00 00 
ffffffff801006c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006cb:	00 00 00 00 
ffffffff801006cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006d6:	00 00 00 00 
ffffffff801006da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006e1:	00 00 00 00 
ffffffff801006e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006ec:	00 00 00 00 
ffffffff801006f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006f7:	00 00 00 00 
ffffffff801006fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100702:	00 00 00 00 
ffffffff80100706:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010070d:	00 00 00 00 
ffffffff80100711:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100718:	00 00 00 00 
ffffffff8010071c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100723:	00 00 00 00 
ffffffff80100727:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010072e:	00 00 00 00 
ffffffff80100732:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100739:	00 00 00 00 
ffffffff8010073d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100744:	00 00 00 00 
ffffffff80100748:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010074f:	00 00 00 00 
ffffffff80100753:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010075a:	00 00 00 00 
ffffffff8010075e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100765:	00 00 00 00 
ffffffff80100769:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100770:	00 00 00 00 
ffffffff80100774:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010077b:	00 00 00 00 
ffffffff8010077f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100786:	00 00 00 00 
ffffffff8010078a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100791:	00 00 00 00 
ffffffff80100795:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010079c:	00 00 00 00 
ffffffff801007a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007a7:	00 00 00 00 
ffffffff801007ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007b2:	00 00 00 00 
ffffffff801007b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007bd:	00 00 00 00 
ffffffff801007c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007c8:	00 00 00 00 
ffffffff801007cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007d3:	00 00 00 00 
ffffffff801007d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007de:	00 00 00 00 
ffffffff801007e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007e9:	00 00 00 00 
ffffffff801007ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007f4:	00 00 00 00 
ffffffff801007f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007ff:	00 00 00 00 
ffffffff80100803:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010080a:	00 00 00 00 
ffffffff8010080e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100815:	00 00 00 00 
ffffffff80100819:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100820:	00 00 00 00 
ffffffff80100824:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010082b:	00 00 00 00 
ffffffff8010082f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100836:	00 00 00 00 
ffffffff8010083a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100841:	00 00 00 00 
ffffffff80100845:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010084c:	00 00 00 00 
ffffffff80100850:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100857:	00 00 00 00 
ffffffff8010085b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100862:	00 00 00 00 
ffffffff80100866:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010086d:	00 00 00 00 
ffffffff80100871:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100878:	00 00 00 00 
ffffffff8010087c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100883:	00 00 00 00 
ffffffff80100887:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010088e:	00 00 00 00 
ffffffff80100892:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100899:	00 00 00 00 
ffffffff8010089d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008a4:	00 00 00 00 
ffffffff801008a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008af:	00 00 00 00 
ffffffff801008b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008ba:	00 00 00 00 
ffffffff801008be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008c5:	00 00 00 00 
ffffffff801008c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008d0:	00 00 00 00 
ffffffff801008d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008db:	00 00 00 00 
ffffffff801008df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008e6:	00 00 00 00 
ffffffff801008ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008f1:	00 00 00 00 
ffffffff801008f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008fc:	00 00 00 00 
ffffffff80100900:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100907:	00 00 00 00 
ffffffff8010090b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100912:	00 00 00 00 
ffffffff80100916:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010091d:	00 00 00 00 
ffffffff80100921:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100928:	00 00 00 00 
ffffffff8010092c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100933:	00 00 00 00 
ffffffff80100937:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010093e:	00 00 00 00 
ffffffff80100942:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100949:	00 00 00 00 
ffffffff8010094d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100954:	00 00 00 00 
ffffffff80100958:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010095f:	00 00 00 00 
ffffffff80100963:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010096a:	00 00 00 00 
ffffffff8010096e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100975:	00 00 00 00 
ffffffff80100979:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100980:	00 00 00 00 
ffffffff80100984:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010098b:	00 00 00 00 
ffffffff8010098f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100996:	00 00 00 00 
ffffffff8010099a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009a1:	00 00 00 00 
ffffffff801009a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ac:	00 00 00 00 
ffffffff801009b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009b7:	00 00 00 00 
ffffffff801009bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009c2:	00 00 00 00 
ffffffff801009c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009cd:	00 00 00 00 
ffffffff801009d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009d8:	00 00 00 00 
ffffffff801009dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009e3:	00 00 00 00 
ffffffff801009e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ee:	00 00 00 00 
ffffffff801009f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009f9:	00 00 00 00 
ffffffff801009fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a04:	00 00 00 00 
ffffffff80100a08:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a0f:	00 00 00 00 
ffffffff80100a13:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a1a:	00 00 00 00 
ffffffff80100a1e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a25:	00 00 00 00 
ffffffff80100a29:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a30:	00 00 00 00 
ffffffff80100a34:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a3b:	00 00 00 00 
ffffffff80100a3f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a46:	00 00 00 00 
ffffffff80100a4a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a51:	00 00 00 00 
ffffffff80100a55:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a5c:	00 00 00 00 
ffffffff80100a60:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a67:	00 00 00 00 
ffffffff80100a6b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a72:	00 00 00 00 
ffffffff80100a76:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a7d:	00 00 00 00 
ffffffff80100a81:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a88:	00 00 00 00 
ffffffff80100a8c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a93:	00 00 00 00 
ffffffff80100a97:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a9e:	00 00 00 00 
ffffffff80100aa2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aa9:	00 00 00 00 
ffffffff80100aad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ab4:	00 00 00 00 
ffffffff80100ab8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100abf:	00 00 00 00 
ffffffff80100ac3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aca:	00 00 00 00 
ffffffff80100ace:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ad5:	00 00 00 00 
ffffffff80100ad9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ae0:	00 00 00 00 
ffffffff80100ae4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aeb:	00 00 00 00 
ffffffff80100aef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100af6:	00 00 00 00 
ffffffff80100afa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b01:	00 00 00 00 
ffffffff80100b05:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b0c:	00 00 00 00 
ffffffff80100b10:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b17:	00 00 00 00 
ffffffff80100b1b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b22:	00 00 00 00 
ffffffff80100b26:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b2d:	00 00 00 00 
ffffffff80100b31:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b38:	00 00 00 00 
ffffffff80100b3c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b43:	00 00 00 00 
ffffffff80100b47:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b4e:	00 00 00 00 
ffffffff80100b52:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b59:	00 00 00 00 
ffffffff80100b5d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b64:	00 00 00 00 
ffffffff80100b68:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b6f:	00 00 00 00 
ffffffff80100b73:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b7a:	00 00 00 00 
ffffffff80100b7e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b85:	00 00 00 00 
ffffffff80100b89:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b90:	00 00 00 00 
ffffffff80100b94:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b9b:	00 00 00 00 
ffffffff80100b9f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ba6:	00 00 00 00 
ffffffff80100baa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bb1:	00 00 00 00 
ffffffff80100bb5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bbc:	00 00 00 00 
ffffffff80100bc0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bc7:	00 00 00 00 
ffffffff80100bcb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bd2:	00 00 00 00 
ffffffff80100bd6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bdd:	00 00 00 00 
ffffffff80100be1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100be8:	00 00 00 00 
ffffffff80100bec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bf3:	00 00 00 00 
ffffffff80100bf7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bfe:	00 00 00 00 
ffffffff80100c02:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c09:	00 00 00 00 
ffffffff80100c0d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c14:	00 00 00 00 
ffffffff80100c18:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c1f:	00 00 00 00 
ffffffff80100c23:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c2a:	00 00 00 00 
ffffffff80100c2e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c35:	00 00 00 00 
ffffffff80100c39:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c40:	00 00 00 00 
ffffffff80100c44:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c4b:	00 00 00 00 
ffffffff80100c4f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c56:	00 00 00 00 
ffffffff80100c5a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c61:	00 00 00 00 
ffffffff80100c65:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c6c:	00 00 00 00 
ffffffff80100c70:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c77:	00 00 00 00 
ffffffff80100c7b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c82:	00 00 00 00 
ffffffff80100c86:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c8d:	00 00 00 00 
ffffffff80100c91:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c98:	00 00 00 00 
ffffffff80100c9c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ca3:	00 00 00 00 
ffffffff80100ca7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cae:	00 00 00 00 
ffffffff80100cb2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cb9:	00 00 00 00 
ffffffff80100cbd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cc4:	00 00 00 00 
ffffffff80100cc8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ccf:	00 00 00 00 
ffffffff80100cd3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cda:	00 00 00 00 
ffffffff80100cde:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ce5:	00 00 00 00 
ffffffff80100ce9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cf0:	00 00 00 00 
ffffffff80100cf4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cfb:	00 00 00 00 
ffffffff80100cff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d06:	00 00 00 00 
ffffffff80100d0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d11:	00 00 00 00 
ffffffff80100d15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d1c:	00 00 00 00 
ffffffff80100d20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d27:	00 00 00 00 
ffffffff80100d2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d32:	00 00 00 00 
ffffffff80100d36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d3d:	00 00 00 00 
ffffffff80100d41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d48:	00 00 00 00 
ffffffff80100d4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d53:	00 00 00 00 
ffffffff80100d57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d5e:	00 00 00 00 
ffffffff80100d62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d69:	00 00 00 00 
ffffffff80100d6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d74:	00 00 00 00 
ffffffff80100d78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d7f:	00 00 00 00 
ffffffff80100d83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d8a:	00 00 00 00 
ffffffff80100d8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d95:	00 00 00 00 
ffffffff80100d99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100da0:	00 00 00 00 
ffffffff80100da4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dab:	00 00 00 00 
ffffffff80100daf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100db6:	00 00 00 00 
ffffffff80100dba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dc1:	00 00 00 00 
ffffffff80100dc5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dcc:	00 00 00 00 
ffffffff80100dd0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dd7:	00 00 00 00 
ffffffff80100ddb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100de2:	00 00 00 00 
ffffffff80100de6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ded:	00 00 00 00 
ffffffff80100df1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100df8:	00 00 00 00 
ffffffff80100dfc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e03:	00 00 00 00 
ffffffff80100e07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e0e:	00 00 00 00 
ffffffff80100e12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e19:	00 00 00 00 
ffffffff80100e1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e24:	00 00 00 00 
ffffffff80100e28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e2f:	00 00 00 00 
ffffffff80100e33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e3a:	00 00 00 00 
ffffffff80100e3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e45:	00 00 00 00 
ffffffff80100e49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e50:	00 00 00 00 
ffffffff80100e54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e5b:	00 00 00 00 
ffffffff80100e5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e66:	00 00 00 00 
ffffffff80100e6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e71:	00 00 00 00 
ffffffff80100e75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e7c:	00 00 00 00 
ffffffff80100e80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e87:	00 00 00 00 
ffffffff80100e8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e92:	00 00 00 00 
ffffffff80100e96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e9d:	00 00 00 00 
ffffffff80100ea1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ea8:	00 00 00 00 
ffffffff80100eac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eb3:	00 00 00 00 
ffffffff80100eb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ebe:	00 00 00 00 
ffffffff80100ec2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ec9:	00 00 00 00 
ffffffff80100ecd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ed4:	00 00 00 00 
ffffffff80100ed8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100edf:	00 00 00 00 
ffffffff80100ee3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eea:	00 00 00 00 
ffffffff80100eee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ef5:	00 00 00 00 
ffffffff80100ef9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f00:	00 00 00 00 
ffffffff80100f04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f0b:	00 00 00 00 
ffffffff80100f0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f16:	00 00 00 00 
ffffffff80100f1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f21:	00 00 00 00 
ffffffff80100f25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f2c:	00 00 00 00 
ffffffff80100f30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f37:	00 00 00 00 
ffffffff80100f3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f42:	00 00 00 00 
ffffffff80100f46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f4d:	00 00 00 00 
ffffffff80100f51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f58:	00 00 00 00 
ffffffff80100f5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f63:	00 00 00 00 
ffffffff80100f67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f6e:	00 00 00 00 
ffffffff80100f72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f79:	00 00 00 00 
ffffffff80100f7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f84:	00 00 00 00 
ffffffff80100f88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f8f:	00 00 00 00 
ffffffff80100f93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f9a:	00 00 00 00 
ffffffff80100f9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fa5:	00 00 00 00 
ffffffff80100fa9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fb0:	00 00 00 00 
ffffffff80100fb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fbb:	00 00 00 00 
ffffffff80100fbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fc6:	00 00 00 00 
ffffffff80100fca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fd1:	00 00 00 00 
ffffffff80100fd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fdc:	00 00 00 00 
ffffffff80100fe0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fe7:	00 00 00 00 
ffffffff80100feb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ff2:	00 00 00 00 
ffffffff80100ff6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80100ffd:	00 00 00 
	...

ffffffff80108000 <__RME_X64_Mboot_Entry>:
/* The entry point after the bootloader finishes *****************************/
    .code32
    .align              16
__RME_X64_Mboot_Entry:
     /* EBX contains Multiboot data structure, let's relocate it to some other places */
     MOV                %EBX,%ESI
ffffffff80108000:	89 de                	mov    %ebx,%esi
     /* Zero 7 pages for our bootstrap page tables, PML4 @ 0x101000 */
     CLD
ffffffff80108002:	fc                   	cld
     XOR                %EAX,%EAX
ffffffff80108003:	31 c0                	xor    %eax,%eax
     MOV                $0x101000,%EDI
ffffffff80108005:	bf 00 10 10 00       	mov    $0x101000,%edi
     MOV                $0x7000,%ECX
ffffffff8010800a:	b9 00 70 00 00       	mov    $0x7000,%ecx
     REP STOSB
ffffffff8010800f:	f3 aa                	rep stos %al,%es:(%rdi)
     /* PML4[0] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff80108011:	b8 03 20 10 00       	mov    $0x102003,%eax
     MOV                %EAX,0x101000
ffffffff80108016:	a3 00 10 10 00 b8 03 	movabs %eax,0x102003b800101000
ffffffff8010801d:	20 10 
     /* PML4[256] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff8010801f:	00 a3 00 18 10 00    	add    %ah,0x101800(%rbx)
     MOV                %EAX,0x101800
     /* PML4[511] -> PDP-B @ 0x103000 */
     MOV                $(0x103000|3),%EAX
ffffffff80108025:	b8 03 30 10 00       	mov    $0x103003,%eax
     MOV                %EAX,0x101FF8
ffffffff8010802a:	a3 f8 1f 10 00 b8 03 	movabs %eax,0x104003b800101ff8
ffffffff80108031:	40 10 
     /* PDP-A[0] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff80108033:	00 a3 00 20 10 00    	add    %ah,0x102000(%rbx)
     MOV                %EAX,0x102000
     /* PDP-A[1] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108039:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x102008
ffffffff8010803e:	a3 08 20 10 00 b8 03 	movabs %eax,0x106003b800102008
ffffffff80108045:	60 10 
     /* PDP-A[2] -> PDE-C @ 0x106000 */
     MOV                $(0x106000|3),%EAX
ffffffff80108047:	00 a3 10 20 10 00    	add    %ah,0x102010(%rbx)
     MOV                %EAX,0x102010
     /* PDP-A[3] -> PDE-D @ 0x107000 unbufferable uncacheable */
     MOV                $(0x107000|3|0x18),%EAX
ffffffff8010804d:	b8 1b 70 10 00       	mov    $0x10701b,%eax
     MOV                %EAX,0x102018
ffffffff80108052:	a3 18 20 10 00 b8 03 	movabs %eax,0x104003b800102018
ffffffff80108059:	40 10 
     /* PDP-B[510] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff8010805b:	00 a3 f0 3f 10 00    	add    %ah,0x103ff0(%rbx)
     MOV                %EAX,0x103FF0
     /* PDP-B[511] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108061:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x103FF8
ffffffff80108066:	a3 f8 3f 10 00 b8 83 	movabs %eax,0x83b800103ff8
ffffffff8010806d:	00 00 
     /* PDE-A/B/C/D [0..511/0...511/0..511/0..511] -> 0..4094MB */
     MOV                $(0x83),%EAX
ffffffff8010806f:	00 bb 00 40 10 00    	add    %bh,0x104000(%rbx)
     MOV                $0x104000,%EBX
     MOV                $(512*4),%ECX
ffffffff80108075:	b9 00 08 00 00       	mov    $0x800,%ecx

ffffffff8010807a <PDE_Loop>:
PDE_Loop:
     MOV                %EAX,(%EBX)
ffffffff8010807a:	89 03                	mov    %eax,(%rbx)
     ADD                $0x200000,%EAX
ffffffff8010807c:	05 00 00 20 00       	add    $0x200000,%eax
     ADD                $0x8,%EBX
ffffffff80108081:	83 c3 08             	add    $0x8,%ebx
     DEC                %ECX
ffffffff80108084:	49 75 f3             	rex.WB jne ffffffff8010807a <PDE_Loop>
     JNZ                PDE_Loop
	 /* Clear ebx for initial processor boot.
      * When secondary processors boot, they'll call through
      * __RME_X64_SMP_Boot, but with a nonzero ebx.
      * We'll reuse these bootstrap pagetables and GDT. */
     XOR                %EBX,%EBX
ffffffff80108087:	31 db                	xor    %ebx,%ebx

ffffffff80108089 <__RME_X64_SMP_Boot_32>:
     /* SMP boot will run directly from here */
__RME_X64_SMP_Boot_32:
     /* CR3 -> PML4 @ 0x101000 */
     MOV                $0x101000,%EAX
ffffffff80108089:	b8 00 10 10 00       	mov    $0x101000,%eax
     MOV                %EAX,%CR3
ffffffff8010808e:	0f 22 d8             	mov    %rax,%cr3
     /* Load GDT */
     LGDT               (Boot_GDT_Desc-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff80108091:	0f 01 15 28 81 10 00 	lgdt   0x108128(%rip)        # ffffffff802101c0 <_RME_Pgt_Boot_Con+0x195>
     /* Enable PAE - CR4.PAE=1 */
     MOV                %CR4,%EAX
ffffffff80108098:	0f 20 e0             	mov    %cr4,%rax
     BTS                $5,%EAX
ffffffff8010809b:	0f ba e8 05          	bts    $0x5,%eax
     MOV                %EAX,%CR4
ffffffff8010809f:	0f 22 e0             	mov    %rax,%cr4
     /* Enable long mode and no execute bit - EFER.LME=1, EFER.NXE=1 */
     MOV                $0xC0000080,%ECX
ffffffff801080a2:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
     RDMSR
ffffffff801080a7:	0f 32                	rdmsr
     BTS                $8,%EAX
ffffffff801080a9:	0f ba e8 08          	bts    $0x8,%eax
     BTS                $11,%EAX
ffffffff801080ad:	0f ba e8 0b          	bts    $0xb,%eax
     WRMSR
ffffffff801080b1:	0f 30                	wrmsr
     /* Enable paging */
     MOV                %CR0,%EAX
ffffffff801080b3:	0f 20 c0             	mov    %cr0,%rax
     BTS                $31,%EAX
ffffffff801080b6:	0f ba e8 1f          	bts    $0x1f,%eax
     MOV                %EAX,%CR0
ffffffff801080ba:	0f 22 c0             	mov    %rax,%cr0
     /* Enable PCID - CR4.PCIDE=1 FIXME: this made things slower - due to extra logic for PCID processing *//*
     MOV                %CR4,%EAX
     BTS                $17,%EAX
     MOV                %EAX,%CR4 */
     /* shift to 64bit segment */
     LJMP               $8,$(Boot_Low_64-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff801080bd:	ea                   	(bad)
ffffffff801080be:	d0 80 10 00 08 00    	rolb   $1,0x80010(%rax)
ffffffff801080c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801080cb:	00 00 00 00 
ffffffff801080cf:	90                   	nop

ffffffff801080d0 <Boot_Low_64>:

/* Now we are in 64-bit mode *************************************************/
    .align              16
    .code64
Boot_Low_64:
    movq                $Boot_High_64,%RAX
ffffffff801080d0:	48 c7 c0 d9 80 10 80 	mov    $0xffffffff801080d9,%rax
    jmp                 *%RAX
ffffffff801080d7:	ff e0                	jmp    *%rax

ffffffff801080d9 <_start>:
_start:
Boot_High_64:
    /* ensure data segment registers are sane - zero out all of them */
    XOR                 %RAX,%RAX
ffffffff801080d9:	48 31 c0             	xor    %rax,%rax
    /* Below are all 16-bit moves */
    MOV                 %AX,%SS
ffffffff801080dc:	8e d0                	mov    %eax,%ss
    MOV                 %AX,%DS
ffffffff801080de:	8e d8                	mov    %eax,%ds
    MOV                 %AX,%ES
ffffffff801080e0:	8e c0                	mov    %eax,%es
    MOV                 %AX,%FS
ffffffff801080e2:	8e e0                	mov    %eax,%fs
    MOV                 %AX,%GS
ffffffff801080e4:	8e e8                	mov    %eax,%gs
    /* Check to see if we're booting a secondary core */
    TEST                %EBX,%EBX
ffffffff801080e6:	85 db                	test   %ebx,%ebx
    JNZ                 Boot_SMP_64
ffffffff801080e8:	75 14                	jne    ffffffff801080fe <Boot_SMP_64>
    /* Setup initial stack - this is hard-coded at low memory */
    MOV                 $__RME_X64_Kern_Boot_Stack,%RAX
ffffffff801080ea:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
    MOV                 %RAX,%RSP
ffffffff801080f1:	48 89 c4             	mov    %rax,%rsp
    /* Pass the physical address of RSI to it */
    MOV                 %RSI,%RDI
ffffffff801080f4:	48 89 f7             	mov    %rsi,%rdi
    JMP                 main
ffffffff801080f7:	e9 cf 2f 11 00       	jmp    ffffffff8021b0cb <main>
    JMP                 .
ffffffff801080fc:	eb fe                	jmp    ffffffff801080fc <_start+0x23>

ffffffff801080fe <Boot_SMP_64>:
Boot_SMP_64:
    MOV                 $0x7000,%RAX
ffffffff801080fe:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax
    MOV                 -16(%RAX),%RSP
ffffffff80108105:	48 8b 60 f0          	mov    -0x10(%rax),%rsp
    JMP                 __RME_SMP_Low_Level_Init
ffffffff80108109:	e9 0c d2 11 00       	jmp    ffffffff8022531a <__RME_SMP_Low_Level_Init>
    JMP                 .
ffffffff8010810e:	eb fe                	jmp    ffffffff8010810e <Boot_SMP_64+0x10>

ffffffff80108110 <Boot_GDT>:
	...
ffffffff8010811c:	00 98 20 00 00 00    	add    %bl,0x20(%rax)
ffffffff80108122:	00 00                	add    %al,(%rax)
ffffffff80108124:	00                   	.byte 0
ffffffff80108125:	90                   	nop
	...

ffffffff80108128 <Boot_GDT_Desc>:
ffffffff80108128:	17                   	(bad)
ffffffff80108129:	00 10                	add    %dl,(%rax)
ffffffff8010812b:	81 10 00 00 00 00    	adcl   $0x0,(%rax)
ffffffff80108131:	00 90 66 66 2e 0f    	add    %dl,0xf2e6666(%rax)
ffffffff80108137:	1f                   	(bad)
ffffffff80108138:	84 00                	test   %al,(%rax)
ffffffff8010813a:	00 00                	add    %al,(%rax)
ffffffff8010813c:	00 00                	add    %al,(%rax)
ffffffff8010813e:	66 90                	xchg   %ax,%ax
ffffffff80108140:	90                   	nop
ffffffff80108141:	e9 ba 0e 00 00       	jmp    ffffffff80109000 <RME_X64_Kpgt>
ffffffff80108146:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010814d:	00 00 00 00 
ffffffff80108151:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108158:	00 00 00 00 
ffffffff8010815c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108163:	00 00 00 00 
ffffffff80108167:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010816e:	00 00 00 00 
ffffffff80108172:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108179:	00 00 00 00 
ffffffff8010817d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108184:	00 00 00 00 
ffffffff80108188:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010818f:	00 00 00 00 
ffffffff80108193:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010819a:	00 00 00 00 
ffffffff8010819e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081a5:	00 00 00 00 
ffffffff801081a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081b0:	00 00 00 00 
ffffffff801081b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081bb:	00 00 00 00 
ffffffff801081bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081c6:	00 00 00 00 
ffffffff801081ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081d1:	00 00 00 00 
ffffffff801081d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081dc:	00 00 00 00 
ffffffff801081e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081e7:	00 00 00 00 
ffffffff801081eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081f2:	00 00 00 00 
ffffffff801081f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081fd:	00 00 00 00 
ffffffff80108201:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108208:	00 00 00 00 
ffffffff8010820c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108213:	00 00 00 00 
ffffffff80108217:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010821e:	00 00 00 00 
ffffffff80108222:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108229:	00 00 00 00 
ffffffff8010822d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108234:	00 00 00 00 
ffffffff80108238:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010823f:	00 00 00 00 
ffffffff80108243:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010824a:	00 00 00 00 
ffffffff8010824e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108255:	00 00 00 00 
ffffffff80108259:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108260:	00 00 00 00 
ffffffff80108264:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010826b:	00 00 00 00 
ffffffff8010826f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108276:	00 00 00 00 
ffffffff8010827a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108281:	00 00 00 00 
ffffffff80108285:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010828c:	00 00 00 00 
ffffffff80108290:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108297:	00 00 00 00 
ffffffff8010829b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082a2:	00 00 00 00 
ffffffff801082a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ad:	00 00 00 00 
ffffffff801082b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082b8:	00 00 00 00 
ffffffff801082bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082c3:	00 00 00 00 
ffffffff801082c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ce:	00 00 00 00 
ffffffff801082d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082d9:	00 00 00 00 
ffffffff801082dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082e4:	00 00 00 00 
ffffffff801082e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ef:	00 00 00 00 
ffffffff801082f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082fa:	00 00 00 00 
ffffffff801082fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108305:	00 00 00 00 
ffffffff80108309:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108310:	00 00 00 00 
ffffffff80108314:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010831b:	00 00 00 00 
ffffffff8010831f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108326:	00 00 00 00 
ffffffff8010832a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108331:	00 00 00 00 
ffffffff80108335:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010833c:	00 00 00 00 
ffffffff80108340:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108347:	00 00 00 00 
ffffffff8010834b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108352:	00 00 00 00 
ffffffff80108356:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010835d:	00 00 00 00 
ffffffff80108361:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108368:	00 00 00 00 
ffffffff8010836c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108373:	00 00 00 00 
ffffffff80108377:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010837e:	00 00 00 00 
ffffffff80108382:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108389:	00 00 00 00 
ffffffff8010838d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108394:	00 00 00 00 
ffffffff80108398:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010839f:	00 00 00 00 
ffffffff801083a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083aa:	00 00 00 00 
ffffffff801083ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083b5:	00 00 00 00 
ffffffff801083b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083c0:	00 00 00 00 
ffffffff801083c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083cb:	00 00 00 00 
ffffffff801083cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083d6:	00 00 00 00 
ffffffff801083da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083e1:	00 00 00 00 
ffffffff801083e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083ec:	00 00 00 00 
ffffffff801083f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083f7:	00 00 00 00 
ffffffff801083fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108402:	00 00 00 00 
ffffffff80108406:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010840d:	00 00 00 00 
ffffffff80108411:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108418:	00 00 00 00 
ffffffff8010841c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108423:	00 00 00 00 
ffffffff80108427:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010842e:	00 00 00 00 
ffffffff80108432:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108439:	00 00 00 00 
ffffffff8010843d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108444:	00 00 00 00 
ffffffff80108448:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010844f:	00 00 00 00 
ffffffff80108453:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010845a:	00 00 00 00 
ffffffff8010845e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108465:	00 00 00 00 
ffffffff80108469:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108470:	00 00 00 00 
ffffffff80108474:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010847b:	00 00 00 00 
ffffffff8010847f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108486:	00 00 00 00 
ffffffff8010848a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108491:	00 00 00 00 
ffffffff80108495:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010849c:	00 00 00 00 
ffffffff801084a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084a7:	00 00 00 00 
ffffffff801084ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084b2:	00 00 00 00 
ffffffff801084b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084bd:	00 00 00 00 
ffffffff801084c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084c8:	00 00 00 00 
ffffffff801084cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084d3:	00 00 00 00 
ffffffff801084d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084de:	00 00 00 00 
ffffffff801084e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084e9:	00 00 00 00 
ffffffff801084ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084f4:	00 00 00 00 
ffffffff801084f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084ff:	00 00 00 00 
ffffffff80108503:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010850a:	00 00 00 00 
ffffffff8010850e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108515:	00 00 00 00 
ffffffff80108519:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108520:	00 00 00 00 
ffffffff80108524:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010852b:	00 00 00 00 
ffffffff8010852f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108536:	00 00 00 00 
ffffffff8010853a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108541:	00 00 00 00 
ffffffff80108545:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010854c:	00 00 00 00 
ffffffff80108550:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108557:	00 00 00 00 
ffffffff8010855b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108562:	00 00 00 00 
ffffffff80108566:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010856d:	00 00 00 00 
ffffffff80108571:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108578:	00 00 00 00 
ffffffff8010857c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108583:	00 00 00 00 
ffffffff80108587:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010858e:	00 00 00 00 
ffffffff80108592:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108599:	00 00 00 00 
ffffffff8010859d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085a4:	00 00 00 00 
ffffffff801085a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085af:	00 00 00 00 
ffffffff801085b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085ba:	00 00 00 00 
ffffffff801085be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085c5:	00 00 00 00 
ffffffff801085c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085d0:	00 00 00 00 
ffffffff801085d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085db:	00 00 00 00 
ffffffff801085df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085e6:	00 00 00 00 
ffffffff801085ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085f1:	00 00 00 00 
ffffffff801085f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085fc:	00 00 00 00 
ffffffff80108600:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108607:	00 00 00 00 
ffffffff8010860b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108612:	00 00 00 00 
ffffffff80108616:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010861d:	00 00 00 00 
ffffffff80108621:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108628:	00 00 00 00 
ffffffff8010862c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108633:	00 00 00 00 
ffffffff80108637:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010863e:	00 00 00 00 
ffffffff80108642:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108649:	00 00 00 00 
ffffffff8010864d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108654:	00 00 00 00 
ffffffff80108658:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010865f:	00 00 00 00 
ffffffff80108663:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010866a:	00 00 00 00 
ffffffff8010866e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108675:	00 00 00 00 
ffffffff80108679:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108680:	00 00 00 00 
ffffffff80108684:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010868b:	00 00 00 00 
ffffffff8010868f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108696:	00 00 00 00 
ffffffff8010869a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086a1:	00 00 00 00 
ffffffff801086a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ac:	00 00 00 00 
ffffffff801086b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086b7:	00 00 00 00 
ffffffff801086bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086c2:	00 00 00 00 
ffffffff801086c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086cd:	00 00 00 00 
ffffffff801086d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086d8:	00 00 00 00 
ffffffff801086dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086e3:	00 00 00 00 
ffffffff801086e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ee:	00 00 00 00 
ffffffff801086f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086f9:	00 00 00 00 
ffffffff801086fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108704:	00 00 00 00 
ffffffff80108708:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010870f:	00 00 00 00 
ffffffff80108713:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010871a:	00 00 00 00 
ffffffff8010871e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108725:	00 00 00 00 
ffffffff80108729:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108730:	00 00 00 00 
ffffffff80108734:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010873b:	00 00 00 00 
ffffffff8010873f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108746:	00 00 00 00 
ffffffff8010874a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108751:	00 00 00 00 
ffffffff80108755:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010875c:	00 00 00 00 
ffffffff80108760:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108767:	00 00 00 00 
ffffffff8010876b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108772:	00 00 00 00 
ffffffff80108776:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010877d:	00 00 00 00 
ffffffff80108781:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108788:	00 00 00 00 
ffffffff8010878c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108793:	00 00 00 00 
ffffffff80108797:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010879e:	00 00 00 00 
ffffffff801087a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087a9:	00 00 00 00 
ffffffff801087ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087b4:	00 00 00 00 
ffffffff801087b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087bf:	00 00 00 00 
ffffffff801087c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087ca:	00 00 00 00 
ffffffff801087ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087d5:	00 00 00 00 
ffffffff801087d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087e0:	00 00 00 00 
ffffffff801087e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087eb:	00 00 00 00 
ffffffff801087ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087f6:	00 00 00 00 
ffffffff801087fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108801:	00 00 00 00 
ffffffff80108805:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010880c:	00 00 00 00 
ffffffff80108810:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108817:	00 00 00 00 
ffffffff8010881b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108822:	00 00 00 00 
ffffffff80108826:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010882d:	00 00 00 00 
ffffffff80108831:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108838:	00 00 00 00 
ffffffff8010883c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108843:	00 00 00 00 
ffffffff80108847:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010884e:	00 00 00 00 
ffffffff80108852:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108859:	00 00 00 00 
ffffffff8010885d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108864:	00 00 00 00 
ffffffff80108868:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010886f:	00 00 00 00 
ffffffff80108873:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010887a:	00 00 00 00 
ffffffff8010887e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108885:	00 00 00 00 
ffffffff80108889:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108890:	00 00 00 00 
ffffffff80108894:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010889b:	00 00 00 00 
ffffffff8010889f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088a6:	00 00 00 00 
ffffffff801088aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088b1:	00 00 00 00 
ffffffff801088b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088bc:	00 00 00 00 
ffffffff801088c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088c7:	00 00 00 00 
ffffffff801088cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088d2:	00 00 00 00 
ffffffff801088d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088dd:	00 00 00 00 
ffffffff801088e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088e8:	00 00 00 00 
ffffffff801088ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088f3:	00 00 00 00 
ffffffff801088f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088fe:	00 00 00 00 
ffffffff80108902:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108909:	00 00 00 00 
ffffffff8010890d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108914:	00 00 00 00 
ffffffff80108918:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010891f:	00 00 00 00 
ffffffff80108923:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010892a:	00 00 00 00 
ffffffff8010892e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108935:	00 00 00 00 
ffffffff80108939:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108940:	00 00 00 00 
ffffffff80108944:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010894b:	00 00 00 00 
ffffffff8010894f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108956:	00 00 00 00 
ffffffff8010895a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108961:	00 00 00 00 
ffffffff80108965:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010896c:	00 00 00 00 
ffffffff80108970:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108977:	00 00 00 00 
ffffffff8010897b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108982:	00 00 00 00 
ffffffff80108986:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010898d:	00 00 00 00 
ffffffff80108991:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108998:	00 00 00 00 
ffffffff8010899c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089a3:	00 00 00 00 
ffffffff801089a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ae:	00 00 00 00 
ffffffff801089b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089b9:	00 00 00 00 
ffffffff801089bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089c4:	00 00 00 00 
ffffffff801089c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089cf:	00 00 00 00 
ffffffff801089d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089da:	00 00 00 00 
ffffffff801089de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089e5:	00 00 00 00 
ffffffff801089e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089f0:	00 00 00 00 
ffffffff801089f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089fb:	00 00 00 00 
ffffffff801089ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a06:	00 00 00 00 
ffffffff80108a0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a11:	00 00 00 00 
ffffffff80108a15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a1c:	00 00 00 00 
ffffffff80108a20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a27:	00 00 00 00 
ffffffff80108a2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a32:	00 00 00 00 
ffffffff80108a36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a3d:	00 00 00 00 
ffffffff80108a41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a48:	00 00 00 00 
ffffffff80108a4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a53:	00 00 00 00 
ffffffff80108a57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a5e:	00 00 00 00 
ffffffff80108a62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a69:	00 00 00 00 
ffffffff80108a6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a74:	00 00 00 00 
ffffffff80108a78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a7f:	00 00 00 00 
ffffffff80108a83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a8a:	00 00 00 00 
ffffffff80108a8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a95:	00 00 00 00 
ffffffff80108a99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aa0:	00 00 00 00 
ffffffff80108aa4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aab:	00 00 00 00 
ffffffff80108aaf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ab6:	00 00 00 00 
ffffffff80108aba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ac1:	00 00 00 00 
ffffffff80108ac5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108acc:	00 00 00 00 
ffffffff80108ad0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ad7:	00 00 00 00 
ffffffff80108adb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ae2:	00 00 00 00 
ffffffff80108ae6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aed:	00 00 00 00 
ffffffff80108af1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108af8:	00 00 00 00 
ffffffff80108afc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b03:	00 00 00 00 
ffffffff80108b07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b0e:	00 00 00 00 
ffffffff80108b12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b19:	00 00 00 00 
ffffffff80108b1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b24:	00 00 00 00 
ffffffff80108b28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b2f:	00 00 00 00 
ffffffff80108b33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b3a:	00 00 00 00 
ffffffff80108b3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b45:	00 00 00 00 
ffffffff80108b49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b50:	00 00 00 00 
ffffffff80108b54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b5b:	00 00 00 00 
ffffffff80108b5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b66:	00 00 00 00 
ffffffff80108b6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b71:	00 00 00 00 
ffffffff80108b75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b7c:	00 00 00 00 
ffffffff80108b80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b87:	00 00 00 00 
ffffffff80108b8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b92:	00 00 00 00 
ffffffff80108b96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b9d:	00 00 00 00 
ffffffff80108ba1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ba8:	00 00 00 00 
ffffffff80108bac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bb3:	00 00 00 00 
ffffffff80108bb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bbe:	00 00 00 00 
ffffffff80108bc2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bc9:	00 00 00 00 
ffffffff80108bcd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bd4:	00 00 00 00 
ffffffff80108bd8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bdf:	00 00 00 00 
ffffffff80108be3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bea:	00 00 00 00 
ffffffff80108bee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bf5:	00 00 00 00 
ffffffff80108bf9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c00:	00 00 00 00 
ffffffff80108c04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c0b:	00 00 00 00 
ffffffff80108c0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c16:	00 00 00 00 
ffffffff80108c1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c21:	00 00 00 00 
ffffffff80108c25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c2c:	00 00 00 00 
ffffffff80108c30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c37:	00 00 00 00 
ffffffff80108c3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c42:	00 00 00 00 
ffffffff80108c46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c4d:	00 00 00 00 
ffffffff80108c51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c58:	00 00 00 00 
ffffffff80108c5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c63:	00 00 00 00 
ffffffff80108c67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c6e:	00 00 00 00 
ffffffff80108c72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c79:	00 00 00 00 
ffffffff80108c7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c84:	00 00 00 00 
ffffffff80108c88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c8f:	00 00 00 00 
ffffffff80108c93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c9a:	00 00 00 00 
ffffffff80108c9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ca5:	00 00 00 00 
ffffffff80108ca9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cb0:	00 00 00 00 
ffffffff80108cb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cbb:	00 00 00 00 
ffffffff80108cbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cc6:	00 00 00 00 
ffffffff80108cca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cd1:	00 00 00 00 
ffffffff80108cd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cdc:	00 00 00 00 
ffffffff80108ce0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ce7:	00 00 00 00 
ffffffff80108ceb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cf2:	00 00 00 00 
ffffffff80108cf6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cfd:	00 00 00 00 
ffffffff80108d01:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d08:	00 00 00 00 
ffffffff80108d0c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d13:	00 00 00 00 
ffffffff80108d17:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d1e:	00 00 00 00 
ffffffff80108d22:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d29:	00 00 00 00 
ffffffff80108d2d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d34:	00 00 00 00 
ffffffff80108d38:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d3f:	00 00 00 00 
ffffffff80108d43:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d4a:	00 00 00 00 
ffffffff80108d4e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d55:	00 00 00 00 
ffffffff80108d59:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d60:	00 00 00 00 
ffffffff80108d64:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d6b:	00 00 00 00 
ffffffff80108d6f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d76:	00 00 00 00 
ffffffff80108d7a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d81:	00 00 00 00 
ffffffff80108d85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d8c:	00 00 00 00 
ffffffff80108d90:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d97:	00 00 00 00 
ffffffff80108d9b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108da2:	00 00 00 00 
ffffffff80108da6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dad:	00 00 00 00 
ffffffff80108db1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108db8:	00 00 00 00 
ffffffff80108dbc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dc3:	00 00 00 00 
ffffffff80108dc7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dce:	00 00 00 00 
ffffffff80108dd2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dd9:	00 00 00 00 
ffffffff80108ddd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108de4:	00 00 00 00 
ffffffff80108de8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108def:	00 00 00 00 
ffffffff80108df3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dfa:	00 00 00 00 
ffffffff80108dfe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e05:	00 00 00 00 
ffffffff80108e09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e10:	00 00 00 00 
ffffffff80108e14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e1b:	00 00 00 00 
ffffffff80108e1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e26:	00 00 00 00 
ffffffff80108e2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e31:	00 00 00 00 
ffffffff80108e35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e3c:	00 00 00 00 
ffffffff80108e40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e47:	00 00 00 00 
ffffffff80108e4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e52:	00 00 00 00 
ffffffff80108e56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e5d:	00 00 00 00 
ffffffff80108e61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e68:	00 00 00 00 
ffffffff80108e6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e73:	00 00 00 00 
ffffffff80108e77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e7e:	00 00 00 00 
ffffffff80108e82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e89:	00 00 00 00 
ffffffff80108e8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e94:	00 00 00 00 
ffffffff80108e98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e9f:	00 00 00 00 
ffffffff80108ea3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eaa:	00 00 00 00 
ffffffff80108eae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eb5:	00 00 00 00 
ffffffff80108eb9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ec0:	00 00 00 00 
ffffffff80108ec4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ecb:	00 00 00 00 
ffffffff80108ecf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ed6:	00 00 00 00 
ffffffff80108eda:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ee1:	00 00 00 00 
ffffffff80108ee5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eec:	00 00 00 00 
ffffffff80108ef0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ef7:	00 00 00 00 
ffffffff80108efb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f02:	00 00 00 00 
ffffffff80108f06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f0d:	00 00 00 00 
ffffffff80108f11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f18:	00 00 00 00 
ffffffff80108f1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f23:	00 00 00 00 
ffffffff80108f27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f2e:	00 00 00 00 
ffffffff80108f32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f39:	00 00 00 00 
ffffffff80108f3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f44:	00 00 00 00 
ffffffff80108f48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f4f:	00 00 00 00 
ffffffff80108f53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f5a:	00 00 00 00 
ffffffff80108f5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f65:	00 00 00 00 
ffffffff80108f69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f70:	00 00 00 00 
ffffffff80108f74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f7b:	00 00 00 00 
ffffffff80108f7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f86:	00 00 00 00 
ffffffff80108f8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f91:	00 00 00 00 
ffffffff80108f95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f9c:	00 00 00 00 
ffffffff80108fa0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fa7:	00 00 00 00 
ffffffff80108fab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fb2:	00 00 00 00 
ffffffff80108fb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fbd:	00 00 00 00 
ffffffff80108fc1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fc8:	00 00 00 00 
ffffffff80108fcc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fd3:	00 00 00 00 
ffffffff80108fd7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fde:	00 00 00 00 
ffffffff80108fe2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fe9:	00 00 00 00 
ffffffff80108fed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ff4:	00 00 00 00 
ffffffff80108ff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80108fff:	00 

ffffffff80109000 <RME_X64_Kpgt>:
	...

ffffffff8020b800 <__RME_X64_In>:
Input       : ptr_t Port - The port to output to.
Output      : None.
Return      : ptr_t - The data received from that port.
******************************************************************************/
__RME_X64_In:
    PUSHQ               %RDX
ffffffff8020b800:	52                   	push   %rdx
    MOVQ                %RDI,%RDX
ffffffff8020b801:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RAX,%RAX
ffffffff8020b804:	48 89 c0             	mov    %rax,%rax
    INB                 (%DX),%AL
ffffffff8020b807:	ec                   	in     (%dx),%al
    POPQ                %RDX
ffffffff8020b808:	5a                   	pop    %rdx
    RETQ
ffffffff8020b809:	c3                   	ret

ffffffff8020b80a <__RME_X64_Out>:
                 ptr_t Data - The data to send to that port.
Output         : None.
Return         : None.
******************************************************************************/
__RME_X64_Out:
    PUSHQ               %RDX
ffffffff8020b80a:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b80b:	50                   	push   %rax
    MOVQ                %RDI,%RDX
ffffffff8020b80c:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RSI,%RAX
ffffffff8020b80f:	48 89 f0             	mov    %rsi,%rax
    OUTB                %AL,(%DX)
ffffffff8020b812:	ee                   	out    %al,(%dx)
    POPQ                %RAX
ffffffff8020b813:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b814:	5a                   	pop    %rdx
    RETQ
ffffffff8020b815:	c3                   	ret

ffffffff8020b816 <__RME_X64_Read_MSR>:
Input       : ptr_t MSR - The MSR to read.
Output      : None.
Return      : ptr_t - The content of the MSR.
******************************************************************************/
__RME_X64_Read_MSR:
    PUSHQ               %RCX
ffffffff8020b816:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b817:	52                   	push   %rdx
    MOVQ                %RDI,%RCX
ffffffff8020b818:	48 89 f9             	mov    %rdi,%rcx
    XORQ                %RAX,%RAX
ffffffff8020b81b:	48 31 c0             	xor    %rax,%rax
    RDMSR
ffffffff8020b81e:	0f 32                	rdmsr
    SHLQ                $32,%RDX
ffffffff8020b820:	48 c1 e2 20          	shl    $0x20,%rdx
    ADDQ                %RDX,%RAX
ffffffff8020b824:	48 01 d0             	add    %rdx,%rax
    POPQ                %RDX
ffffffff8020b827:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b828:	59                   	pop    %rcx
    RETQ
ffffffff8020b829:	c3                   	ret

ffffffff8020b82a <__RME_X64_Write_MSR>:
              ptr_t Value - The value to write to it.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_MSR:
    PUSHQ               %RCX
ffffffff8020b82a:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b82b:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b82c:	50                   	push   %rax
    MOVQ                %RDI,%RCX
ffffffff8020b82d:	48 89 f9             	mov    %rdi,%rcx
    MOVL                %ESI,%EAX
ffffffff8020b830:	89 f0                	mov    %esi,%eax
    MOVQ                %RSI,%RDX
ffffffff8020b832:	48 89 f2             	mov    %rsi,%rdx
    SHR                 $32,%RDX
ffffffff8020b835:	48 c1 ea 20          	shr    $0x20,%rdx
    WRMSR
ffffffff8020b839:	0f 30                	wrmsr
    POPQ                %RAX
ffffffff8020b83b:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b83c:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b83d:	59                   	pop    %rcx
    RETQ
ffffffff8020b83e:	c3                   	ret

ffffffff8020b83f <__RME_X64_CPU_Local_Get>:
Input       : None.
Output      : None.
Return      : struct RME_CPU_Local* - The CPU-local data structures.
******************************************************************************/
__RME_X64_CPU_Local_Get:
    MOVQ                %GS:(8192-8*3),%RAX
ffffffff8020b83f:	65 48 8b 04 25 e8 1f 	mov    %gs:0x1fe8,%rax
ffffffff8020b846:	00 00 
    RETQ
ffffffff8020b848:	c3                   	ret

ffffffff8020b849 <__RME_X64_CPUID_Get>:
              ptr_t* ECX - The ECX info.
              ptr_t* EDX - The EDX info.
Return      : ptr_t - The maximum number for CPUID instruction.
******************************************************************************/
__RME_X64_CPUID_Get:
    PUSHQ               %R8
ffffffff8020b849:	41 50                	push   %r8
    PUSHQ               %R9
ffffffff8020b84b:	41 51                	push   %r9
    PUSHQ               %RBX
ffffffff8020b84d:	53                   	push   %rbx
    PUSHQ               %RCX
ffffffff8020b84e:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b84f:	52                   	push   %rdx

    MOVQ                %RDI,%RAX
ffffffff8020b850:	48 89 f8             	mov    %rdi,%rax
    MOVQ                %RDX,%R8
ffffffff8020b853:	49 89 d0             	mov    %rdx,%r8
    MOVQ                %RCX,%R9
ffffffff8020b856:	49 89 c9             	mov    %rcx,%r9

    MOVQ                (%RSI),%RBX
ffffffff8020b859:	48 8b 1e             	mov    (%rsi),%rbx
    MOVQ                (%R8),%RCX
ffffffff8020b85c:	49 8b 08             	mov    (%r8),%rcx
    MOVQ                (%R9),%RDX
ffffffff8020b85f:	49 8b 11             	mov    (%r9),%rdx
    CPUID
ffffffff8020b862:	0f a2                	cpuid
    MOVQ                %RBX,(%RSI)
ffffffff8020b864:	48 89 1e             	mov    %rbx,(%rsi)
    MOVQ                %RCX,(%R8)
ffffffff8020b867:	49 89 08             	mov    %rcx,(%r8)
    MOVQ                %RDX,(%R9)
ffffffff8020b86a:	49 89 11             	mov    %rdx,(%r9)

    POPQ                %RDX
ffffffff8020b86d:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b86e:	59                   	pop    %rcx
    POPQ                %RBX
ffffffff8020b86f:	5b                   	pop    %rbx
    POPQ                %R9
ffffffff8020b870:	41 59                	pop    %r9
    POPQ                %R8
ffffffff8020b872:	41 58                	pop    %r8
    RETQ
ffffffff8020b874:	c3                   	ret

ffffffff8020b875 <__RME_X64_GDT_Load>:
Input       : ptr_t* GDTR - The pointer to the GDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_GDT_Load:
    LGDT                (%RDI)
ffffffff8020b875:	0f 01 17             	lgdt   (%rdi)
    RETQ
ffffffff8020b878:	c3                   	ret

ffffffff8020b879 <__RME_X64_IDT_Load>:
Input       : ptr_t* IDTR - The pointer to the IDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_IDT_Load:
    LIDT                (%RDI)
ffffffff8020b879:	0f 01 1f             	lidt   (%rdi)
    RETQ
ffffffff8020b87c:	c3                   	ret

ffffffff8020b87d <__RME_X64_TSS_Load>:
Input       : ptr_t TSS - The TSS's position in GDT.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_TSS_Load:
    LTR                 %DI
ffffffff8020b87d:	0f 00 df             	ltr    %edi
    RETQ
ffffffff8020b880:	c3                   	ret

ffffffff8020b881 <__RME_X64_Comp_Swap>:
              ptr_t New - The new value.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - If successful, 1; else 0.
******************************************************************************/
__RME_X64_Comp_Swap:
    MOVQ                %RSI,%RAX
ffffffff8020b881:	48 89 f0             	mov    %rsi,%rax
    XOR                 %RSI,%RSI
ffffffff8020b884:	48 31 f6             	xor    %rsi,%rsi
    /* In x86, locked instructions act as a fence */
    LOCK CMPXCHGQ       %RDX,(%RDI)
ffffffff8020b887:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
    /* Set the bit if ZF is set */
    SETZ                %SIL
ffffffff8020b88c:	40 0f 94 c6          	sete   %sil
    MOVQ                %RSI,%RAX
ffffffff8020b890:	48 89 f0             	mov    %rsi,%rax
    RETQ
ffffffff8020b893:	c3                   	ret

ffffffff8020b894 <__RME_X64_Fetch_Add>:
              cnt_t Addend - The number to add.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the addition.
******************************************************************************/
__RME_X64_Fetch_Add:
    MOVQ                %RSI,%RAX
ffffffff8020b894:	48 89 f0             	mov    %rsi,%rax
    /* In x86, locked instructions act as a fence */
    LOCK XADDQ          %RAX,(%RDI)
ffffffff8020b897:	f0 48 0f c1 07       	lock xadd %rax,(%rdi)
    RETQ
ffffffff8020b89c:	c3                   	ret

ffffffff8020b89d <__RME_X64_Fetch_And>:
              cnt_t Operand - The number to logic AND with the destination.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the AND operation.
******************************************************************************/
__RME_X64_Fetch_And:
    MOVQ                (%RDI),%RAX
ffffffff8020b89d:	48 8b 07             	mov    (%rdi),%rax
    /* In x86, locked instructions act as a fence */
    LOCK ANDQ           %RSI,(%RDI)
ffffffff8020b8a0:	f0 48 21 37          	lock and %rsi,(%rdi)
    RETQ
ffffffff8020b8a4:	c3                   	ret

ffffffff8020b8a5 <__RME_X64_Write_Release>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_Release:
    MFENCE
ffffffff8020b8a5:	0f ae f0             	mfence
    RETQ
ffffffff8020b8a8:	c3                   	ret

ffffffff8020b8a9 <__RME_X64_Pgt_Set>:
Input       : ptr_t Pgt - The physical address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Pgt_Set:
    MOV                 %RDI,%CR3
ffffffff8020b8a9:	0f 22 df             	mov    %rdi,%cr3
    RETQ
ffffffff8020b8ac:	c3                   	ret

ffffffff8020b8ad <__RME_Disable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Disable_Int:
    /* Disable all interrupts */
    CLI
ffffffff8020b8ad:	fa                   	cli
    RETQ
ffffffff8020b8ae:	c3                   	ret

ffffffff8020b8af <__RME_Enable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enable_Int:
    /* Enable all interrupts */
    STI
ffffffff8020b8af:	fb                   	sti
    RETQ
ffffffff8020b8b0:	c3                   	ret

ffffffff8020b8b1 <__RME_X64_Halt>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Halt:
    /* Wait for interrupt */
    HLT
ffffffff8020b8b1:	f4                   	hlt
    RETQ
ffffffff8020b8b2:	c3                   	ret

ffffffff8020b8b3 <_RME_Kmain>:
Input       : ptr_t Stack - The stack address to set SP to.
Output      : None.
Return      : None.
******************************************************************************/
_RME_Kmain:
    MOVQ                %RDI,%RSP
ffffffff8020b8b3:	48 89 fc             	mov    %rdi,%rsp
    JMP                 RME_Kmain
ffffffff8020b8b6:	e9 c4 16 00 00       	jmp    ffffffff8020cf7f <RME_Kmain>

ffffffff8020b8bb <__RME_X64_MSB_Get>:
Input       : ptr_t Val - The value.
Output      : None.
Return      : ptr_t - The MSB position.
******************************************************************************/
__RME_X64_MSB_Get:
    BSRQ                %RDI,%RAX
ffffffff8020b8bb:	48 0f bd c7          	bsr    %rdi,%rax
    RETQ
ffffffff8020b8bf:	c3                   	ret

ffffffff8020b8c0 <__RME_Enter_User_Mode>:
              ptr_t CPUID - The CPUID.
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enter_User_Mode:
    MOVQ                %RDI,%RCX           /* Entry */
ffffffff8020b8c0:	48 89 f9             	mov    %rdi,%rcx
    MOVQ                %RSI,%RSP           /* Stack */
ffffffff8020b8c3:	48 89 f4             	mov    %rsi,%rsp
    MOVQ                $0x3200,%R11        /* Flags - IOPL 3, IF */
ffffffff8020b8c6:	49 c7 c3 00 32 00 00 	mov    $0x3200,%r11
    MOVQ                %RDX,%RDI           /* CPUID */
ffffffff8020b8cd:	48 89 d7             	mov    %rdx,%rdi
    SYSRETQ
ffffffff8020b8d0:	48 0f 07             	sysretq

ffffffff8020b8d3 <__RME_X64_FAULT_DE_Handler>:
    PUSHQ               $\REASON
    JMP                 Fault_Handler
.endm

/* Fault handlers */
FAULT_HANDLER NAME=__RME_X64_FAULT_DE_Handler ERRCODE=0 REASON=0
ffffffff8020b8d3:	0f 01 f8             	swapgs
ffffffff8020b8d6:	6a 00                	push   $0x0
ffffffff8020b8d8:	6a 00                	push   $0x0
ffffffff8020b8da:	e9 a6 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8df <__RME_X64_TRAP_DB_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_DB_Handler ERRCODE=0 REASON=1
ffffffff8020b8df:	0f 01 f8             	swapgs
ffffffff8020b8e2:	6a 00                	push   $0x0
ffffffff8020b8e4:	6a 01                	push   $0x1
ffffffff8020b8e6:	e9 9a 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8eb <__RME_X64_INT_NMI_Handler>:
FAULT_HANDLER NAME=__RME_X64_INT_NMI_Handler ERRCODE=0 REASON=2
ffffffff8020b8eb:	0f 01 f8             	swapgs
ffffffff8020b8ee:	6a 00                	push   $0x0
ffffffff8020b8f0:	6a 02                	push   $0x2
ffffffff8020b8f2:	e9 8e 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8f7 <__RME_X64_TRAP_BP_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_BP_Handler ERRCODE=0 REASON=3
ffffffff8020b8f7:	0f 01 f8             	swapgs
ffffffff8020b8fa:	6a 00                	push   $0x0
ffffffff8020b8fc:	6a 03                	push   $0x3
ffffffff8020b8fe:	e9 82 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b903 <__RME_X64_TRAP_OF_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_OF_Handler ERRCODE=0 REASON=4
ffffffff8020b903:	0f 01 f8             	swapgs
ffffffff8020b906:	6a 00                	push   $0x0
ffffffff8020b908:	6a 04                	push   $0x4
ffffffff8020b90a:	eb 79                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b90c <__RME_X64_FAULT_BR_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_BR_Handler ERRCODE=0 REASON=5
ffffffff8020b90c:	0f 01 f8             	swapgs
ffffffff8020b90f:	6a 00                	push   $0x0
ffffffff8020b911:	6a 05                	push   $0x5
ffffffff8020b913:	eb 70                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b915 <__RME_X64_FAULT_UD_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_UD_Handler ERRCODE=0 REASON=6
ffffffff8020b915:	0f 01 f8             	swapgs
ffffffff8020b918:	6a 00                	push   $0x0
ffffffff8020b91a:	6a 06                	push   $0x6
ffffffff8020b91c:	eb 67                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b91e <__RME_X64_FAULT_NM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NM_Handler ERRCODE=0 REASON=7
ffffffff8020b91e:	0f 01 f8             	swapgs
ffffffff8020b921:	6a 00                	push   $0x0
ffffffff8020b923:	6a 07                	push   $0x7
ffffffff8020b925:	eb 5e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b927 <__RME_X64_ABORT_DF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_DF_Handler ERRCODE=1 REASON=8
ffffffff8020b927:	0f 01 f8             	swapgs
ffffffff8020b92a:	6a 08                	push   $0x8
ffffffff8020b92c:	eb 57                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b92e <__RME_X64_ABORT_OLD_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_OLD_MF_Handler ERRCODE=0 REASON=9
ffffffff8020b92e:	0f 01 f8             	swapgs
ffffffff8020b931:	6a 00                	push   $0x0
ffffffff8020b933:	6a 09                	push   $0x9
ffffffff8020b935:	eb 4e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b937 <__RME_X64_FAULT_TS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_TS_Handler ERRCODE=1 REASON=10
ffffffff8020b937:	0f 01 f8             	swapgs
ffffffff8020b93a:	6a 0a                	push   $0xa
ffffffff8020b93c:	eb 47                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b93e <__RME_X64_FAULT_NP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NP_Handler ERRCODE=1 REASON=11
ffffffff8020b93e:	0f 01 f8             	swapgs
ffffffff8020b941:	6a 0b                	push   $0xb
ffffffff8020b943:	eb 40                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b945 <__RME_X64_FAULT_SS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_SS_Handler ERRCODE=1 REASON=12
ffffffff8020b945:	0f 01 f8             	swapgs
ffffffff8020b948:	6a 0c                	push   $0xc
ffffffff8020b94a:	eb 39                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b94c <__RME_X64_FAULT_GP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_GP_Handler ERRCODE=1 REASON=13
ffffffff8020b94c:	0f 01 f8             	swapgs
ffffffff8020b94f:	6a 0d                	push   $0xd
ffffffff8020b951:	eb 32                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b953 <__RME_X64_FAULT_PF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_PF_Handler ERRCODE=1 REASON=14
ffffffff8020b953:	0f 01 f8             	swapgs
ffffffff8020b956:	6a 0e                	push   $0xe
ffffffff8020b958:	eb 2b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b95a <__RME_X64_FAULT_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_MF_Handler ERRCODE=0 REASON=16
ffffffff8020b95a:	0f 01 f8             	swapgs
ffffffff8020b95d:	6a 00                	push   $0x0
ffffffff8020b95f:	6a 10                	push   $0x10
ffffffff8020b961:	eb 22                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b963 <__RME_X64_FAULT_AC_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_AC_Handler ERRCODE=1 REASON=17
ffffffff8020b963:	0f 01 f8             	swapgs
ffffffff8020b966:	6a 11                	push   $0x11
ffffffff8020b968:	eb 1b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b96a <__RME_X64_ABORT_MC_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_MC_Handler ERRCODE=0 REASON=18
ffffffff8020b96a:	0f 01 f8             	swapgs
ffffffff8020b96d:	6a 00                	push   $0x0
ffffffff8020b96f:	6a 12                	push   $0x12
ffffffff8020b971:	eb 12                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b973 <__RME_X64_FAULT_XM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_XM_Handler ERRCODE=0 REASON=19
ffffffff8020b973:	0f 01 f8             	swapgs
ffffffff8020b976:	6a 00                	push   $0x0
ffffffff8020b978:	6a 13                	push   $0x13
ffffffff8020b97a:	eb 09                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b97c <__RME_X64_FAULT_VE_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_VE_Handler ERRCODE=0 REASON=20
ffffffff8020b97c:	0f 01 f8             	swapgs
ffffffff8020b97f:	6a 00                	push   $0x0
ffffffff8020b981:	6a 14                	push   $0x14
ffffffff8020b983:	eb 00                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b985 <Fault_Handler>:
/* Common function body for fault handlers - reduce I-Cache usage */
Fault_Handler:
    SAVE_GP_REGS
ffffffff8020b985:	41 57                	push   %r15
ffffffff8020b987:	41 56                	push   %r14
ffffffff8020b989:	41 55                	push   %r13
ffffffff8020b98b:	41 54                	push   %r12
ffffffff8020b98d:	41 53                	push   %r11
ffffffff8020b98f:	41 52                	push   %r10
ffffffff8020b991:	41 51                	push   %r9
ffffffff8020b993:	41 50                	push   %r8
ffffffff8020b995:	55                   	push   %rbp
ffffffff8020b996:	57                   	push   %rdi
ffffffff8020b997:	56                   	push   %rsi
ffffffff8020b998:	52                   	push   %rdx
ffffffff8020b999:	51                   	push   %rcx
ffffffff8020b99a:	53                   	push   %rbx
ffffffff8020b99b:	50                   	push   %rax
ffffffff8020b99c:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020b9a0:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020b9a2:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020b9a5:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Fault_Handler
ffffffff8020b9aa:	e8 69 a9 01 00       	call   ffffffff80226318 <__RME_X64_Fault_Handler>

    RESTORE_GP_REGS
ffffffff8020b9af:	0f 01 f8             	swapgs
ffffffff8020b9b2:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020b9b6:	8e d8                	mov    %eax,%ds
ffffffff8020b9b8:	58                   	pop    %rax
ffffffff8020b9b9:	5b                   	pop    %rbx
ffffffff8020b9ba:	59                   	pop    %rcx
ffffffff8020b9bb:	5a                   	pop    %rdx
ffffffff8020b9bc:	5e                   	pop    %rsi
ffffffff8020b9bd:	5f                   	pop    %rdi
ffffffff8020b9be:	5d                   	pop    %rbp
ffffffff8020b9bf:	41 58                	pop    %r8
ffffffff8020b9c1:	41 59                	pop    %r9
ffffffff8020b9c3:	41 5a                	pop    %r10
ffffffff8020b9c5:	41 5b                	pop    %r11
ffffffff8020b9c7:	41 5c                	pop    %r12
ffffffff8020b9c9:	41 5d                	pop    %r13
ffffffff8020b9cb:	41 5e                	pop    %r14
ffffffff8020b9cd:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020b9cf:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020b9d3:	48 cf                	iretq

ffffffff8020b9d5 <__RME_X64_USER32_Handler>:
    PUSHQ               $0                  /* Make a dummy error code */
    PUSHQ               $\VECTNUM           /* Interrupt number */
    JMP                 User_Handler
.endm
/* User handlers */
USER_HANDLER NAME=__RME_X64_USER32_Handler VECTNUM=32
ffffffff8020b9d5:	0f 01 f8             	swapgs
ffffffff8020b9d8:	6a 00                	push   $0x0
ffffffff8020b9da:	6a 20                	push   $0x20
ffffffff8020b9dc:	e9 d3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9e1 <__RME_X64_USER33_Handler>:
USER_HANDLER NAME=__RME_X64_USER33_Handler VECTNUM=33
ffffffff8020b9e1:	0f 01 f8             	swapgs
ffffffff8020b9e4:	6a 00                	push   $0x0
ffffffff8020b9e6:	6a 21                	push   $0x21
ffffffff8020b9e8:	e9 c7 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9ed <__RME_X64_USER34_Handler>:
USER_HANDLER NAME=__RME_X64_USER34_Handler VECTNUM=34
ffffffff8020b9ed:	0f 01 f8             	swapgs
ffffffff8020b9f0:	6a 00                	push   $0x0
ffffffff8020b9f2:	6a 22                	push   $0x22
ffffffff8020b9f4:	e9 bb 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9f9 <__RME_X64_USER35_Handler>:
USER_HANDLER NAME=__RME_X64_USER35_Handler VECTNUM=35
ffffffff8020b9f9:	0f 01 f8             	swapgs
ffffffff8020b9fc:	6a 00                	push   $0x0
ffffffff8020b9fe:	6a 23                	push   $0x23
ffffffff8020ba00:	e9 af 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba05 <__RME_X64_USER36_Handler>:
USER_HANDLER NAME=__RME_X64_USER36_Handler VECTNUM=36
ffffffff8020ba05:	0f 01 f8             	swapgs
ffffffff8020ba08:	6a 00                	push   $0x0
ffffffff8020ba0a:	6a 24                	push   $0x24
ffffffff8020ba0c:	e9 a3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba11 <__RME_X64_USER37_Handler>:
USER_HANDLER NAME=__RME_X64_USER37_Handler VECTNUM=37
ffffffff8020ba11:	0f 01 f8             	swapgs
ffffffff8020ba14:	6a 00                	push   $0x0
ffffffff8020ba16:	6a 25                	push   $0x25
ffffffff8020ba18:	e9 97 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba1d <__RME_X64_USER38_Handler>:
USER_HANDLER NAME=__RME_X64_USER38_Handler VECTNUM=38
ffffffff8020ba1d:	0f 01 f8             	swapgs
ffffffff8020ba20:	6a 00                	push   $0x0
ffffffff8020ba22:	6a 26                	push   $0x26
ffffffff8020ba24:	e9 8b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba29 <__RME_X64_USER39_Handler>:
USER_HANDLER NAME=__RME_X64_USER39_Handler VECTNUM=39
ffffffff8020ba29:	0f 01 f8             	swapgs
ffffffff8020ba2c:	6a 00                	push   $0x0
ffffffff8020ba2e:	6a 27                	push   $0x27
ffffffff8020ba30:	e9 7f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba35 <__RME_X64_USER40_Handler>:

USER_HANDLER NAME=__RME_X64_USER40_Handler VECTNUM=40
ffffffff8020ba35:	0f 01 f8             	swapgs
ffffffff8020ba38:	6a 00                	push   $0x0
ffffffff8020ba3a:	6a 28                	push   $0x28
ffffffff8020ba3c:	e9 73 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba41 <__RME_X64_USER41_Handler>:
USER_HANDLER NAME=__RME_X64_USER41_Handler VECTNUM=41
ffffffff8020ba41:	0f 01 f8             	swapgs
ffffffff8020ba44:	6a 00                	push   $0x0
ffffffff8020ba46:	6a 29                	push   $0x29
ffffffff8020ba48:	e9 67 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba4d <__RME_X64_USER42_Handler>:
USER_HANDLER NAME=__RME_X64_USER42_Handler VECTNUM=42
ffffffff8020ba4d:	0f 01 f8             	swapgs
ffffffff8020ba50:	6a 00                	push   $0x0
ffffffff8020ba52:	6a 2a                	push   $0x2a
ffffffff8020ba54:	e9 5b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba59 <__RME_X64_USER43_Handler>:
USER_HANDLER NAME=__RME_X64_USER43_Handler VECTNUM=43
ffffffff8020ba59:	0f 01 f8             	swapgs
ffffffff8020ba5c:	6a 00                	push   $0x0
ffffffff8020ba5e:	6a 2b                	push   $0x2b
ffffffff8020ba60:	e9 4f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba65 <__RME_X64_USER44_Handler>:
USER_HANDLER NAME=__RME_X64_USER44_Handler VECTNUM=44
ffffffff8020ba65:	0f 01 f8             	swapgs
ffffffff8020ba68:	6a 00                	push   $0x0
ffffffff8020ba6a:	6a 2c                	push   $0x2c
ffffffff8020ba6c:	e9 43 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba71 <__RME_X64_USER45_Handler>:
USER_HANDLER NAME=__RME_X64_USER45_Handler VECTNUM=45
ffffffff8020ba71:	0f 01 f8             	swapgs
ffffffff8020ba74:	6a 00                	push   $0x0
ffffffff8020ba76:	6a 2d                	push   $0x2d
ffffffff8020ba78:	e9 37 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba7d <__RME_X64_USER46_Handler>:
USER_HANDLER NAME=__RME_X64_USER46_Handler VECTNUM=46
ffffffff8020ba7d:	0f 01 f8             	swapgs
ffffffff8020ba80:	6a 00                	push   $0x0
ffffffff8020ba82:	6a 2e                	push   $0x2e
ffffffff8020ba84:	e9 2b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba89 <__RME_X64_USER47_Handler>:
USER_HANDLER NAME=__RME_X64_USER47_Handler VECTNUM=47
ffffffff8020ba89:	0f 01 f8             	swapgs
ffffffff8020ba8c:	6a 00                	push   $0x0
ffffffff8020ba8e:	6a 2f                	push   $0x2f
ffffffff8020ba90:	e9 1f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba95 <__RME_X64_USER48_Handler>:
USER_HANDLER NAME=__RME_X64_USER48_Handler VECTNUM=48
ffffffff8020ba95:	0f 01 f8             	swapgs
ffffffff8020ba98:	6a 00                	push   $0x0
ffffffff8020ba9a:	6a 30                	push   $0x30
ffffffff8020ba9c:	e9 13 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baa1 <__RME_X64_USER49_Handler>:
USER_HANDLER NAME=__RME_X64_USER49_Handler VECTNUM=49
ffffffff8020baa1:	0f 01 f8             	swapgs
ffffffff8020baa4:	6a 00                	push   $0x0
ffffffff8020baa6:	6a 31                	push   $0x31
ffffffff8020baa8:	e9 07 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baad <__RME_X64_USER50_Handler>:

USER_HANDLER NAME=__RME_X64_USER50_Handler VECTNUM=50
ffffffff8020baad:	0f 01 f8             	swapgs
ffffffff8020bab0:	6a 00                	push   $0x0
ffffffff8020bab2:	6a 32                	push   $0x32
ffffffff8020bab4:	e9 fb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bab9 <__RME_X64_USER51_Handler>:
USER_HANDLER NAME=__RME_X64_USER51_Handler VECTNUM=51
ffffffff8020bab9:	0f 01 f8             	swapgs
ffffffff8020babc:	6a 00                	push   $0x0
ffffffff8020babe:	6a 33                	push   $0x33
ffffffff8020bac0:	e9 ef 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bac5 <__RME_X64_USER52_Handler>:
USER_HANDLER NAME=__RME_X64_USER52_Handler VECTNUM=52
ffffffff8020bac5:	0f 01 f8             	swapgs
ffffffff8020bac8:	6a 00                	push   $0x0
ffffffff8020baca:	6a 34                	push   $0x34
ffffffff8020bacc:	e9 e3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bad1 <__RME_X64_USER53_Handler>:
USER_HANDLER NAME=__RME_X64_USER53_Handler VECTNUM=53
ffffffff8020bad1:	0f 01 f8             	swapgs
ffffffff8020bad4:	6a 00                	push   $0x0
ffffffff8020bad6:	6a 35                	push   $0x35
ffffffff8020bad8:	e9 d7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020badd <__RME_X64_USER54_Handler>:
USER_HANDLER NAME=__RME_X64_USER54_Handler VECTNUM=54
ffffffff8020badd:	0f 01 f8             	swapgs
ffffffff8020bae0:	6a 00                	push   $0x0
ffffffff8020bae2:	6a 36                	push   $0x36
ffffffff8020bae4:	e9 cb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bae9 <__RME_X64_USER55_Handler>:
USER_HANDLER NAME=__RME_X64_USER55_Handler VECTNUM=55
ffffffff8020bae9:	0f 01 f8             	swapgs
ffffffff8020baec:	6a 00                	push   $0x0
ffffffff8020baee:	6a 37                	push   $0x37
ffffffff8020baf0:	e9 bf 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baf5 <__RME_X64_USER56_Handler>:
USER_HANDLER NAME=__RME_X64_USER56_Handler VECTNUM=56
ffffffff8020baf5:	0f 01 f8             	swapgs
ffffffff8020baf8:	6a 00                	push   $0x0
ffffffff8020bafa:	6a 38                	push   $0x38
ffffffff8020bafc:	e9 b3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb01 <__RME_X64_USER57_Handler>:
USER_HANDLER NAME=__RME_X64_USER57_Handler VECTNUM=57
ffffffff8020bb01:	0f 01 f8             	swapgs
ffffffff8020bb04:	6a 00                	push   $0x0
ffffffff8020bb06:	6a 39                	push   $0x39
ffffffff8020bb08:	e9 a7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb0d <__RME_X64_USER58_Handler>:
USER_HANDLER NAME=__RME_X64_USER58_Handler VECTNUM=58
ffffffff8020bb0d:	0f 01 f8             	swapgs
ffffffff8020bb10:	6a 00                	push   $0x0
ffffffff8020bb12:	6a 3a                	push   $0x3a
ffffffff8020bb14:	e9 9b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb19 <__RME_X64_USER59_Handler>:
USER_HANDLER NAME=__RME_X64_USER59_Handler VECTNUM=59
ffffffff8020bb19:	0f 01 f8             	swapgs
ffffffff8020bb1c:	6a 00                	push   $0x0
ffffffff8020bb1e:	6a 3b                	push   $0x3b
ffffffff8020bb20:	e9 8f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb25 <__RME_X64_USER60_Handler>:

USER_HANDLER NAME=__RME_X64_USER60_Handler VECTNUM=60
ffffffff8020bb25:	0f 01 f8             	swapgs
ffffffff8020bb28:	6a 00                	push   $0x0
ffffffff8020bb2a:	6a 3c                	push   $0x3c
ffffffff8020bb2c:	e9 83 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb31 <__RME_X64_USER61_Handler>:
USER_HANDLER NAME=__RME_X64_USER61_Handler VECTNUM=61
ffffffff8020bb31:	0f 01 f8             	swapgs
ffffffff8020bb34:	6a 00                	push   $0x0
ffffffff8020bb36:	6a 3d                	push   $0x3d
ffffffff8020bb38:	e9 77 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb3d <__RME_X64_USER62_Handler>:
USER_HANDLER NAME=__RME_X64_USER62_Handler VECTNUM=62
ffffffff8020bb3d:	0f 01 f8             	swapgs
ffffffff8020bb40:	6a 00                	push   $0x0
ffffffff8020bb42:	6a 3e                	push   $0x3e
ffffffff8020bb44:	e9 6b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb49 <__RME_X64_USER63_Handler>:
USER_HANDLER NAME=__RME_X64_USER63_Handler VECTNUM=63
ffffffff8020bb49:	0f 01 f8             	swapgs
ffffffff8020bb4c:	6a 00                	push   $0x0
ffffffff8020bb4e:	6a 3f                	push   $0x3f
ffffffff8020bb50:	e9 5f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb55 <__RME_X64_USER64_Handler>:
USER_HANDLER NAME=__RME_X64_USER64_Handler VECTNUM=64
ffffffff8020bb55:	0f 01 f8             	swapgs
ffffffff8020bb58:	6a 00                	push   $0x0
ffffffff8020bb5a:	6a 40                	push   $0x40
ffffffff8020bb5c:	e9 53 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb61 <__RME_X64_USER65_Handler>:
USER_HANDLER NAME=__RME_X64_USER65_Handler VECTNUM=65
ffffffff8020bb61:	0f 01 f8             	swapgs
ffffffff8020bb64:	6a 00                	push   $0x0
ffffffff8020bb66:	6a 41                	push   $0x41
ffffffff8020bb68:	e9 47 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb6d <__RME_X64_USER66_Handler>:
USER_HANDLER NAME=__RME_X64_USER66_Handler VECTNUM=66
ffffffff8020bb6d:	0f 01 f8             	swapgs
ffffffff8020bb70:	6a 00                	push   $0x0
ffffffff8020bb72:	6a 42                	push   $0x42
ffffffff8020bb74:	e9 3b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb79 <__RME_X64_USER67_Handler>:
USER_HANDLER NAME=__RME_X64_USER67_Handler VECTNUM=67
ffffffff8020bb79:	0f 01 f8             	swapgs
ffffffff8020bb7c:	6a 00                	push   $0x0
ffffffff8020bb7e:	6a 43                	push   $0x43
ffffffff8020bb80:	e9 2f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb85 <__RME_X64_USER68_Handler>:
USER_HANDLER NAME=__RME_X64_USER68_Handler VECTNUM=68
ffffffff8020bb85:	0f 01 f8             	swapgs
ffffffff8020bb88:	6a 00                	push   $0x0
ffffffff8020bb8a:	6a 44                	push   $0x44
ffffffff8020bb8c:	e9 23 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb91 <__RME_X64_USER69_Handler>:
USER_HANDLER NAME=__RME_X64_USER69_Handler VECTNUM=69
ffffffff8020bb91:	0f 01 f8             	swapgs
ffffffff8020bb94:	6a 00                	push   $0x0
ffffffff8020bb96:	6a 45                	push   $0x45
ffffffff8020bb98:	e9 17 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb9d <__RME_X64_USER70_Handler>:

USER_HANDLER NAME=__RME_X64_USER70_Handler VECTNUM=70
ffffffff8020bb9d:	0f 01 f8             	swapgs
ffffffff8020bba0:	6a 00                	push   $0x0
ffffffff8020bba2:	6a 46                	push   $0x46
ffffffff8020bba4:	e9 0b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bba9 <__RME_X64_USER71_Handler>:
USER_HANDLER NAME=__RME_X64_USER71_Handler VECTNUM=71
ffffffff8020bba9:	0f 01 f8             	swapgs
ffffffff8020bbac:	6a 00                	push   $0x0
ffffffff8020bbae:	6a 47                	push   $0x47
ffffffff8020bbb0:	e9 ff 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbb5 <__RME_X64_USER72_Handler>:
USER_HANDLER NAME=__RME_X64_USER72_Handler VECTNUM=72
ffffffff8020bbb5:	0f 01 f8             	swapgs
ffffffff8020bbb8:	6a 00                	push   $0x0
ffffffff8020bbba:	6a 48                	push   $0x48
ffffffff8020bbbc:	e9 f3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbc1 <__RME_X64_USER73_Handler>:
USER_HANDLER NAME=__RME_X64_USER73_Handler VECTNUM=73
ffffffff8020bbc1:	0f 01 f8             	swapgs
ffffffff8020bbc4:	6a 00                	push   $0x0
ffffffff8020bbc6:	6a 49                	push   $0x49
ffffffff8020bbc8:	e9 e7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbcd <__RME_X64_USER74_Handler>:
USER_HANDLER NAME=__RME_X64_USER74_Handler VECTNUM=74
ffffffff8020bbcd:	0f 01 f8             	swapgs
ffffffff8020bbd0:	6a 00                	push   $0x0
ffffffff8020bbd2:	6a 4a                	push   $0x4a
ffffffff8020bbd4:	e9 db 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbd9 <__RME_X64_USER75_Handler>:
USER_HANDLER NAME=__RME_X64_USER75_Handler VECTNUM=75
ffffffff8020bbd9:	0f 01 f8             	swapgs
ffffffff8020bbdc:	6a 00                	push   $0x0
ffffffff8020bbde:	6a 4b                	push   $0x4b
ffffffff8020bbe0:	e9 cf 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbe5 <__RME_X64_USER76_Handler>:
USER_HANDLER NAME=__RME_X64_USER76_Handler VECTNUM=76
ffffffff8020bbe5:	0f 01 f8             	swapgs
ffffffff8020bbe8:	6a 00                	push   $0x0
ffffffff8020bbea:	6a 4c                	push   $0x4c
ffffffff8020bbec:	e9 c3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbf1 <__RME_X64_USER77_Handler>:
USER_HANDLER NAME=__RME_X64_USER77_Handler VECTNUM=77
ffffffff8020bbf1:	0f 01 f8             	swapgs
ffffffff8020bbf4:	6a 00                	push   $0x0
ffffffff8020bbf6:	6a 4d                	push   $0x4d
ffffffff8020bbf8:	e9 b7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbfd <__RME_X64_USER78_Handler>:
USER_HANDLER NAME=__RME_X64_USER78_Handler VECTNUM=78
ffffffff8020bbfd:	0f 01 f8             	swapgs
ffffffff8020bc00:	6a 00                	push   $0x0
ffffffff8020bc02:	6a 4e                	push   $0x4e
ffffffff8020bc04:	e9 ab 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc09 <__RME_X64_USER79_Handler>:
USER_HANDLER NAME=__RME_X64_USER79_Handler VECTNUM=79
ffffffff8020bc09:	0f 01 f8             	swapgs
ffffffff8020bc0c:	6a 00                	push   $0x0
ffffffff8020bc0e:	6a 4f                	push   $0x4f
ffffffff8020bc10:	e9 9f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc15 <__RME_X64_USER80_Handler>:

USER_HANDLER NAME=__RME_X64_USER80_Handler VECTNUM=80
ffffffff8020bc15:	0f 01 f8             	swapgs
ffffffff8020bc18:	6a 00                	push   $0x0
ffffffff8020bc1a:	6a 50                	push   $0x50
ffffffff8020bc1c:	e9 93 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc21 <__RME_X64_USER81_Handler>:
USER_HANDLER NAME=__RME_X64_USER81_Handler VECTNUM=81
ffffffff8020bc21:	0f 01 f8             	swapgs
ffffffff8020bc24:	6a 00                	push   $0x0
ffffffff8020bc26:	6a 51                	push   $0x51
ffffffff8020bc28:	e9 87 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc2d <__RME_X64_USER82_Handler>:
USER_HANDLER NAME=__RME_X64_USER82_Handler VECTNUM=82
ffffffff8020bc2d:	0f 01 f8             	swapgs
ffffffff8020bc30:	6a 00                	push   $0x0
ffffffff8020bc32:	6a 52                	push   $0x52
ffffffff8020bc34:	e9 7b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc39 <__RME_X64_USER83_Handler>:
USER_HANDLER NAME=__RME_X64_USER83_Handler VECTNUM=83
ffffffff8020bc39:	0f 01 f8             	swapgs
ffffffff8020bc3c:	6a 00                	push   $0x0
ffffffff8020bc3e:	6a 53                	push   $0x53
ffffffff8020bc40:	e9 6f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc45 <__RME_X64_USER84_Handler>:
USER_HANDLER NAME=__RME_X64_USER84_Handler VECTNUM=84
ffffffff8020bc45:	0f 01 f8             	swapgs
ffffffff8020bc48:	6a 00                	push   $0x0
ffffffff8020bc4a:	6a 54                	push   $0x54
ffffffff8020bc4c:	e9 63 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc51 <__RME_X64_USER85_Handler>:
USER_HANDLER NAME=__RME_X64_USER85_Handler VECTNUM=85
ffffffff8020bc51:	0f 01 f8             	swapgs
ffffffff8020bc54:	6a 00                	push   $0x0
ffffffff8020bc56:	6a 55                	push   $0x55
ffffffff8020bc58:	e9 57 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc5d <__RME_X64_USER86_Handler>:
USER_HANDLER NAME=__RME_X64_USER86_Handler VECTNUM=86
ffffffff8020bc5d:	0f 01 f8             	swapgs
ffffffff8020bc60:	6a 00                	push   $0x0
ffffffff8020bc62:	6a 56                	push   $0x56
ffffffff8020bc64:	e9 4b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc69 <__RME_X64_USER87_Handler>:
USER_HANDLER NAME=__RME_X64_USER87_Handler VECTNUM=87
ffffffff8020bc69:	0f 01 f8             	swapgs
ffffffff8020bc6c:	6a 00                	push   $0x0
ffffffff8020bc6e:	6a 57                	push   $0x57
ffffffff8020bc70:	e9 3f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc75 <__RME_X64_USER88_Handler>:
USER_HANDLER NAME=__RME_X64_USER88_Handler VECTNUM=88
ffffffff8020bc75:	0f 01 f8             	swapgs
ffffffff8020bc78:	6a 00                	push   $0x0
ffffffff8020bc7a:	6a 58                	push   $0x58
ffffffff8020bc7c:	e9 33 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc81 <__RME_X64_USER89_Handler>:
USER_HANDLER NAME=__RME_X64_USER89_Handler VECTNUM=89
ffffffff8020bc81:	0f 01 f8             	swapgs
ffffffff8020bc84:	6a 00                	push   $0x0
ffffffff8020bc86:	6a 59                	push   $0x59
ffffffff8020bc88:	e9 27 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc8d <__RME_X64_USER90_Handler>:

USER_HANDLER NAME=__RME_X64_USER90_Handler VECTNUM=90
ffffffff8020bc8d:	0f 01 f8             	swapgs
ffffffff8020bc90:	6a 00                	push   $0x0
ffffffff8020bc92:	6a 5a                	push   $0x5a
ffffffff8020bc94:	e9 1b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc99 <__RME_X64_USER91_Handler>:
USER_HANDLER NAME=__RME_X64_USER91_Handler VECTNUM=91
ffffffff8020bc99:	0f 01 f8             	swapgs
ffffffff8020bc9c:	6a 00                	push   $0x0
ffffffff8020bc9e:	6a 5b                	push   $0x5b
ffffffff8020bca0:	e9 0f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bca5 <__RME_X64_USER92_Handler>:
USER_HANDLER NAME=__RME_X64_USER92_Handler VECTNUM=92
ffffffff8020bca5:	0f 01 f8             	swapgs
ffffffff8020bca8:	6a 00                	push   $0x0
ffffffff8020bcaa:	6a 5c                	push   $0x5c
ffffffff8020bcac:	e9 03 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcb1 <__RME_X64_USER93_Handler>:
USER_HANDLER NAME=__RME_X64_USER93_Handler VECTNUM=93
ffffffff8020bcb1:	0f 01 f8             	swapgs
ffffffff8020bcb4:	6a 00                	push   $0x0
ffffffff8020bcb6:	6a 5d                	push   $0x5d
ffffffff8020bcb8:	e9 f7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcbd <__RME_X64_USER94_Handler>:
USER_HANDLER NAME=__RME_X64_USER94_Handler VECTNUM=94
ffffffff8020bcbd:	0f 01 f8             	swapgs
ffffffff8020bcc0:	6a 00                	push   $0x0
ffffffff8020bcc2:	6a 5e                	push   $0x5e
ffffffff8020bcc4:	e9 eb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcc9 <__RME_X64_USER95_Handler>:
USER_HANDLER NAME=__RME_X64_USER95_Handler VECTNUM=95
ffffffff8020bcc9:	0f 01 f8             	swapgs
ffffffff8020bccc:	6a 00                	push   $0x0
ffffffff8020bcce:	6a 5f                	push   $0x5f
ffffffff8020bcd0:	e9 df 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcd5 <__RME_X64_USER96_Handler>:
USER_HANDLER NAME=__RME_X64_USER96_Handler VECTNUM=96
ffffffff8020bcd5:	0f 01 f8             	swapgs
ffffffff8020bcd8:	6a 00                	push   $0x0
ffffffff8020bcda:	6a 60                	push   $0x60
ffffffff8020bcdc:	e9 d3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bce1 <__RME_X64_USER97_Handler>:
USER_HANDLER NAME=__RME_X64_USER97_Handler VECTNUM=97
ffffffff8020bce1:	0f 01 f8             	swapgs
ffffffff8020bce4:	6a 00                	push   $0x0
ffffffff8020bce6:	6a 61                	push   $0x61
ffffffff8020bce8:	e9 c7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bced <__RME_X64_USER98_Handler>:
USER_HANDLER NAME=__RME_X64_USER98_Handler VECTNUM=98
ffffffff8020bced:	0f 01 f8             	swapgs
ffffffff8020bcf0:	6a 00                	push   $0x0
ffffffff8020bcf2:	6a 62                	push   $0x62
ffffffff8020bcf4:	e9 bb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcf9 <__RME_X64_USER99_Handler>:
USER_HANDLER NAME=__RME_X64_USER99_Handler VECTNUM=99
ffffffff8020bcf9:	0f 01 f8             	swapgs
ffffffff8020bcfc:	6a 00                	push   $0x0
ffffffff8020bcfe:	6a 63                	push   $0x63
ffffffff8020bd00:	e9 af 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd05 <__RME_X64_USER100_Handler>:

USER_HANDLER NAME=__RME_X64_USER100_Handler VECTNUM=100
ffffffff8020bd05:	0f 01 f8             	swapgs
ffffffff8020bd08:	6a 00                	push   $0x0
ffffffff8020bd0a:	6a 64                	push   $0x64
ffffffff8020bd0c:	e9 a3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd11 <__RME_X64_USER101_Handler>:
USER_HANDLER NAME=__RME_X64_USER101_Handler VECTNUM=101
ffffffff8020bd11:	0f 01 f8             	swapgs
ffffffff8020bd14:	6a 00                	push   $0x0
ffffffff8020bd16:	6a 65                	push   $0x65
ffffffff8020bd18:	e9 97 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd1d <__RME_X64_USER102_Handler>:
USER_HANDLER NAME=__RME_X64_USER102_Handler VECTNUM=102
ffffffff8020bd1d:	0f 01 f8             	swapgs
ffffffff8020bd20:	6a 00                	push   $0x0
ffffffff8020bd22:	6a 66                	push   $0x66
ffffffff8020bd24:	e9 8b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd29 <__RME_X64_USER103_Handler>:
USER_HANDLER NAME=__RME_X64_USER103_Handler VECTNUM=103
ffffffff8020bd29:	0f 01 f8             	swapgs
ffffffff8020bd2c:	6a 00                	push   $0x0
ffffffff8020bd2e:	6a 67                	push   $0x67
ffffffff8020bd30:	e9 7f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd35 <__RME_X64_USER104_Handler>:
USER_HANDLER NAME=__RME_X64_USER104_Handler VECTNUM=104
ffffffff8020bd35:	0f 01 f8             	swapgs
ffffffff8020bd38:	6a 00                	push   $0x0
ffffffff8020bd3a:	6a 68                	push   $0x68
ffffffff8020bd3c:	e9 73 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd41 <__RME_X64_USER105_Handler>:
USER_HANDLER NAME=__RME_X64_USER105_Handler VECTNUM=105
ffffffff8020bd41:	0f 01 f8             	swapgs
ffffffff8020bd44:	6a 00                	push   $0x0
ffffffff8020bd46:	6a 69                	push   $0x69
ffffffff8020bd48:	e9 67 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd4d <__RME_X64_USER106_Handler>:
USER_HANDLER NAME=__RME_X64_USER106_Handler VECTNUM=106
ffffffff8020bd4d:	0f 01 f8             	swapgs
ffffffff8020bd50:	6a 00                	push   $0x0
ffffffff8020bd52:	6a 6a                	push   $0x6a
ffffffff8020bd54:	e9 5b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd59 <__RME_X64_USER107_Handler>:
USER_HANDLER NAME=__RME_X64_USER107_Handler VECTNUM=107
ffffffff8020bd59:	0f 01 f8             	swapgs
ffffffff8020bd5c:	6a 00                	push   $0x0
ffffffff8020bd5e:	6a 6b                	push   $0x6b
ffffffff8020bd60:	e9 4f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd65 <__RME_X64_USER108_Handler>:
USER_HANDLER NAME=__RME_X64_USER108_Handler VECTNUM=108
ffffffff8020bd65:	0f 01 f8             	swapgs
ffffffff8020bd68:	6a 00                	push   $0x0
ffffffff8020bd6a:	6a 6c                	push   $0x6c
ffffffff8020bd6c:	e9 43 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd71 <__RME_X64_USER109_Handler>:
USER_HANDLER NAME=__RME_X64_USER109_Handler VECTNUM=109
ffffffff8020bd71:	0f 01 f8             	swapgs
ffffffff8020bd74:	6a 00                	push   $0x0
ffffffff8020bd76:	6a 6d                	push   $0x6d
ffffffff8020bd78:	e9 37 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd7d <__RME_X64_USER110_Handler>:

USER_HANDLER NAME=__RME_X64_USER110_Handler VECTNUM=110
ffffffff8020bd7d:	0f 01 f8             	swapgs
ffffffff8020bd80:	6a 00                	push   $0x0
ffffffff8020bd82:	6a 6e                	push   $0x6e
ffffffff8020bd84:	e9 2b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd89 <__RME_X64_USER111_Handler>:
USER_HANDLER NAME=__RME_X64_USER111_Handler VECTNUM=111
ffffffff8020bd89:	0f 01 f8             	swapgs
ffffffff8020bd8c:	6a 00                	push   $0x0
ffffffff8020bd8e:	6a 6f                	push   $0x6f
ffffffff8020bd90:	e9 1f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd95 <__RME_X64_USER112_Handler>:
USER_HANDLER NAME=__RME_X64_USER112_Handler VECTNUM=112
ffffffff8020bd95:	0f 01 f8             	swapgs
ffffffff8020bd98:	6a 00                	push   $0x0
ffffffff8020bd9a:	6a 70                	push   $0x70
ffffffff8020bd9c:	e9 13 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bda1 <__RME_X64_USER113_Handler>:
USER_HANDLER NAME=__RME_X64_USER113_Handler VECTNUM=113
ffffffff8020bda1:	0f 01 f8             	swapgs
ffffffff8020bda4:	6a 00                	push   $0x0
ffffffff8020bda6:	6a 71                	push   $0x71
ffffffff8020bda8:	e9 07 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdad <__RME_X64_USER114_Handler>:
USER_HANDLER NAME=__RME_X64_USER114_Handler VECTNUM=114
ffffffff8020bdad:	0f 01 f8             	swapgs
ffffffff8020bdb0:	6a 00                	push   $0x0
ffffffff8020bdb2:	6a 72                	push   $0x72
ffffffff8020bdb4:	e9 fb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdb9 <__RME_X64_USER115_Handler>:
USER_HANDLER NAME=__RME_X64_USER115_Handler VECTNUM=115
ffffffff8020bdb9:	0f 01 f8             	swapgs
ffffffff8020bdbc:	6a 00                	push   $0x0
ffffffff8020bdbe:	6a 73                	push   $0x73
ffffffff8020bdc0:	e9 ef 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdc5 <__RME_X64_USER116_Handler>:
USER_HANDLER NAME=__RME_X64_USER116_Handler VECTNUM=116
ffffffff8020bdc5:	0f 01 f8             	swapgs
ffffffff8020bdc8:	6a 00                	push   $0x0
ffffffff8020bdca:	6a 74                	push   $0x74
ffffffff8020bdcc:	e9 e3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdd1 <__RME_X64_USER117_Handler>:
USER_HANDLER NAME=__RME_X64_USER117_Handler VECTNUM=117
ffffffff8020bdd1:	0f 01 f8             	swapgs
ffffffff8020bdd4:	6a 00                	push   $0x0
ffffffff8020bdd6:	6a 75                	push   $0x75
ffffffff8020bdd8:	e9 d7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bddd <__RME_X64_USER118_Handler>:
USER_HANDLER NAME=__RME_X64_USER118_Handler VECTNUM=118
ffffffff8020bddd:	0f 01 f8             	swapgs
ffffffff8020bde0:	6a 00                	push   $0x0
ffffffff8020bde2:	6a 76                	push   $0x76
ffffffff8020bde4:	e9 cb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bde9 <__RME_X64_USER119_Handler>:
USER_HANDLER NAME=__RME_X64_USER119_Handler VECTNUM=119
ffffffff8020bde9:	0f 01 f8             	swapgs
ffffffff8020bdec:	6a 00                	push   $0x0
ffffffff8020bdee:	6a 77                	push   $0x77
ffffffff8020bdf0:	e9 bf 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdf5 <__RME_X64_USER120_Handler>:

USER_HANDLER NAME=__RME_X64_USER120_Handler VECTNUM=120
ffffffff8020bdf5:	0f 01 f8             	swapgs
ffffffff8020bdf8:	6a 00                	push   $0x0
ffffffff8020bdfa:	6a 78                	push   $0x78
ffffffff8020bdfc:	e9 b3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be01 <__RME_X64_USER121_Handler>:
USER_HANDLER NAME=__RME_X64_USER121_Handler VECTNUM=121
ffffffff8020be01:	0f 01 f8             	swapgs
ffffffff8020be04:	6a 00                	push   $0x0
ffffffff8020be06:	6a 79                	push   $0x79
ffffffff8020be08:	e9 a7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be0d <__RME_X64_USER122_Handler>:
USER_HANDLER NAME=__RME_X64_USER122_Handler VECTNUM=122
ffffffff8020be0d:	0f 01 f8             	swapgs
ffffffff8020be10:	6a 00                	push   $0x0
ffffffff8020be12:	6a 7a                	push   $0x7a
ffffffff8020be14:	e9 9b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be19 <__RME_X64_USER123_Handler>:
USER_HANDLER NAME=__RME_X64_USER123_Handler VECTNUM=123
ffffffff8020be19:	0f 01 f8             	swapgs
ffffffff8020be1c:	6a 00                	push   $0x0
ffffffff8020be1e:	6a 7b                	push   $0x7b
ffffffff8020be20:	e9 8f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be25 <__RME_X64_USER124_Handler>:
USER_HANDLER NAME=__RME_X64_USER124_Handler VECTNUM=124
ffffffff8020be25:	0f 01 f8             	swapgs
ffffffff8020be28:	6a 00                	push   $0x0
ffffffff8020be2a:	6a 7c                	push   $0x7c
ffffffff8020be2c:	e9 83 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be31 <__RME_X64_USER125_Handler>:
USER_HANDLER NAME=__RME_X64_USER125_Handler VECTNUM=125
ffffffff8020be31:	0f 01 f8             	swapgs
ffffffff8020be34:	6a 00                	push   $0x0
ffffffff8020be36:	6a 7d                	push   $0x7d
ffffffff8020be38:	e9 77 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be3d <__RME_X64_USER126_Handler>:
USER_HANDLER NAME=__RME_X64_USER126_Handler VECTNUM=126
ffffffff8020be3d:	0f 01 f8             	swapgs
ffffffff8020be40:	6a 00                	push   $0x0
ffffffff8020be42:	6a 7e                	push   $0x7e
ffffffff8020be44:	e9 6b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be49 <__RME_X64_USER127_Handler>:
USER_HANDLER NAME=__RME_X64_USER127_Handler VECTNUM=127
ffffffff8020be49:	0f 01 f8             	swapgs
ffffffff8020be4c:	6a 00                	push   $0x0
ffffffff8020be4e:	6a 7f                	push   $0x7f
ffffffff8020be50:	e9 5f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be55 <__RME_X64_USER128_Handler>:
USER_HANDLER NAME=__RME_X64_USER128_Handler VECTNUM=128
ffffffff8020be55:	0f 01 f8             	swapgs
ffffffff8020be58:	6a 00                	push   $0x0
ffffffff8020be5a:	68 80 00 00 00       	push   $0x80
ffffffff8020be5f:	e9 50 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be64 <__RME_X64_USER129_Handler>:
USER_HANDLER NAME=__RME_X64_USER129_Handler VECTNUM=129
ffffffff8020be64:	0f 01 f8             	swapgs
ffffffff8020be67:	6a 00                	push   $0x0
ffffffff8020be69:	68 81 00 00 00       	push   $0x81
ffffffff8020be6e:	e9 41 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be73 <__RME_X64_USER130_Handler>:

USER_HANDLER NAME=__RME_X64_USER130_Handler VECTNUM=130
ffffffff8020be73:	0f 01 f8             	swapgs
ffffffff8020be76:	6a 00                	push   $0x0
ffffffff8020be78:	68 82 00 00 00       	push   $0x82
ffffffff8020be7d:	e9 32 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be82 <__RME_X64_USER131_Handler>:
USER_HANDLER NAME=__RME_X64_USER131_Handler VECTNUM=131
ffffffff8020be82:	0f 01 f8             	swapgs
ffffffff8020be85:	6a 00                	push   $0x0
ffffffff8020be87:	68 83 00 00 00       	push   $0x83
ffffffff8020be8c:	e9 23 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be91 <__RME_X64_USER132_Handler>:
USER_HANDLER NAME=__RME_X64_USER132_Handler VECTNUM=132
ffffffff8020be91:	0f 01 f8             	swapgs
ffffffff8020be94:	6a 00                	push   $0x0
ffffffff8020be96:	68 84 00 00 00       	push   $0x84
ffffffff8020be9b:	e9 14 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bea0 <__RME_X64_USER133_Handler>:
USER_HANDLER NAME=__RME_X64_USER133_Handler VECTNUM=133
ffffffff8020bea0:	0f 01 f8             	swapgs
ffffffff8020bea3:	6a 00                	push   $0x0
ffffffff8020bea5:	68 85 00 00 00       	push   $0x85
ffffffff8020beaa:	e9 05 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beaf <__RME_X64_USER134_Handler>:
USER_HANDLER NAME=__RME_X64_USER134_Handler VECTNUM=134
ffffffff8020beaf:	0f 01 f8             	swapgs
ffffffff8020beb2:	6a 00                	push   $0x0
ffffffff8020beb4:	68 86 00 00 00       	push   $0x86
ffffffff8020beb9:	e9 f6 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bebe <__RME_X64_USER135_Handler>:
USER_HANDLER NAME=__RME_X64_USER135_Handler VECTNUM=135
ffffffff8020bebe:	0f 01 f8             	swapgs
ffffffff8020bec1:	6a 00                	push   $0x0
ffffffff8020bec3:	68 87 00 00 00       	push   $0x87
ffffffff8020bec8:	e9 e7 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020becd <__RME_X64_USER136_Handler>:
USER_HANDLER NAME=__RME_X64_USER136_Handler VECTNUM=136
ffffffff8020becd:	0f 01 f8             	swapgs
ffffffff8020bed0:	6a 00                	push   $0x0
ffffffff8020bed2:	68 88 00 00 00       	push   $0x88
ffffffff8020bed7:	e9 d8 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bedc <__RME_X64_USER137_Handler>:
USER_HANDLER NAME=__RME_X64_USER137_Handler VECTNUM=137
ffffffff8020bedc:	0f 01 f8             	swapgs
ffffffff8020bedf:	6a 00                	push   $0x0
ffffffff8020bee1:	68 89 00 00 00       	push   $0x89
ffffffff8020bee6:	e9 c9 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beeb <__RME_X64_USER138_Handler>:
USER_HANDLER NAME=__RME_X64_USER138_Handler VECTNUM=138
ffffffff8020beeb:	0f 01 f8             	swapgs
ffffffff8020beee:	6a 00                	push   $0x0
ffffffff8020bef0:	68 8a 00 00 00       	push   $0x8a
ffffffff8020bef5:	e9 ba 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020befa <__RME_X64_USER139_Handler>:
USER_HANDLER NAME=__RME_X64_USER139_Handler VECTNUM=139
ffffffff8020befa:	0f 01 f8             	swapgs
ffffffff8020befd:	6a 00                	push   $0x0
ffffffff8020beff:	68 8b 00 00 00       	push   $0x8b
ffffffff8020bf04:	e9 ab 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf09 <__RME_X64_USER140_Handler>:

USER_HANDLER NAME=__RME_X64_USER140_Handler VECTNUM=140
ffffffff8020bf09:	0f 01 f8             	swapgs
ffffffff8020bf0c:	6a 00                	push   $0x0
ffffffff8020bf0e:	68 8c 00 00 00       	push   $0x8c
ffffffff8020bf13:	e9 9c 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf18 <__RME_X64_USER141_Handler>:
USER_HANDLER NAME=__RME_X64_USER141_Handler VECTNUM=141
ffffffff8020bf18:	0f 01 f8             	swapgs
ffffffff8020bf1b:	6a 00                	push   $0x0
ffffffff8020bf1d:	68 8d 00 00 00       	push   $0x8d
ffffffff8020bf22:	e9 8d 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf27 <__RME_X64_USER142_Handler>:
USER_HANDLER NAME=__RME_X64_USER142_Handler VECTNUM=142
ffffffff8020bf27:	0f 01 f8             	swapgs
ffffffff8020bf2a:	6a 00                	push   $0x0
ffffffff8020bf2c:	68 8e 00 00 00       	push   $0x8e
ffffffff8020bf31:	e9 7e 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf36 <__RME_X64_USER143_Handler>:
USER_HANDLER NAME=__RME_X64_USER143_Handler VECTNUM=143
ffffffff8020bf36:	0f 01 f8             	swapgs
ffffffff8020bf39:	6a 00                	push   $0x0
ffffffff8020bf3b:	68 8f 00 00 00       	push   $0x8f
ffffffff8020bf40:	e9 6f 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf45 <__RME_X64_USER144_Handler>:
USER_HANDLER NAME=__RME_X64_USER144_Handler VECTNUM=144
ffffffff8020bf45:	0f 01 f8             	swapgs
ffffffff8020bf48:	6a 00                	push   $0x0
ffffffff8020bf4a:	68 90 00 00 00       	push   $0x90
ffffffff8020bf4f:	e9 60 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf54 <__RME_X64_USER145_Handler>:
USER_HANDLER NAME=__RME_X64_USER145_Handler VECTNUM=145
ffffffff8020bf54:	0f 01 f8             	swapgs
ffffffff8020bf57:	6a 00                	push   $0x0
ffffffff8020bf59:	68 91 00 00 00       	push   $0x91
ffffffff8020bf5e:	e9 51 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf63 <__RME_X64_USER146_Handler>:
USER_HANDLER NAME=__RME_X64_USER146_Handler VECTNUM=146
ffffffff8020bf63:	0f 01 f8             	swapgs
ffffffff8020bf66:	6a 00                	push   $0x0
ffffffff8020bf68:	68 92 00 00 00       	push   $0x92
ffffffff8020bf6d:	e9 42 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf72 <__RME_X64_USER147_Handler>:
USER_HANDLER NAME=__RME_X64_USER147_Handler VECTNUM=147
ffffffff8020bf72:	0f 01 f8             	swapgs
ffffffff8020bf75:	6a 00                	push   $0x0
ffffffff8020bf77:	68 93 00 00 00       	push   $0x93
ffffffff8020bf7c:	e9 33 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf81 <__RME_X64_USER148_Handler>:
USER_HANDLER NAME=__RME_X64_USER148_Handler VECTNUM=148
ffffffff8020bf81:	0f 01 f8             	swapgs
ffffffff8020bf84:	6a 00                	push   $0x0
ffffffff8020bf86:	68 94 00 00 00       	push   $0x94
ffffffff8020bf8b:	e9 24 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf90 <__RME_X64_USER149_Handler>:
USER_HANDLER NAME=__RME_X64_USER149_Handler VECTNUM=149
ffffffff8020bf90:	0f 01 f8             	swapgs
ffffffff8020bf93:	6a 00                	push   $0x0
ffffffff8020bf95:	68 95 00 00 00       	push   $0x95
ffffffff8020bf9a:	e9 15 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf9f <__RME_X64_USER150_Handler>:

USER_HANDLER NAME=__RME_X64_USER150_Handler VECTNUM=150
ffffffff8020bf9f:	0f 01 f8             	swapgs
ffffffff8020bfa2:	6a 00                	push   $0x0
ffffffff8020bfa4:	68 96 00 00 00       	push   $0x96
ffffffff8020bfa9:	e9 06 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfae <__RME_X64_USER151_Handler>:
USER_HANDLER NAME=__RME_X64_USER151_Handler VECTNUM=151
ffffffff8020bfae:	0f 01 f8             	swapgs
ffffffff8020bfb1:	6a 00                	push   $0x0
ffffffff8020bfb3:	68 97 00 00 00       	push   $0x97
ffffffff8020bfb8:	e9 f7 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfbd <__RME_X64_USER152_Handler>:
USER_HANDLER NAME=__RME_X64_USER152_Handler VECTNUM=152
ffffffff8020bfbd:	0f 01 f8             	swapgs
ffffffff8020bfc0:	6a 00                	push   $0x0
ffffffff8020bfc2:	68 98 00 00 00       	push   $0x98
ffffffff8020bfc7:	e9 e8 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfcc <__RME_X64_USER153_Handler>:
USER_HANDLER NAME=__RME_X64_USER153_Handler VECTNUM=153
ffffffff8020bfcc:	0f 01 f8             	swapgs
ffffffff8020bfcf:	6a 00                	push   $0x0
ffffffff8020bfd1:	68 99 00 00 00       	push   $0x99
ffffffff8020bfd6:	e9 d9 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfdb <__RME_X64_USER154_Handler>:
USER_HANDLER NAME=__RME_X64_USER154_Handler VECTNUM=154
ffffffff8020bfdb:	0f 01 f8             	swapgs
ffffffff8020bfde:	6a 00                	push   $0x0
ffffffff8020bfe0:	68 9a 00 00 00       	push   $0x9a
ffffffff8020bfe5:	e9 ca 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfea <__RME_X64_USER155_Handler>:
USER_HANDLER NAME=__RME_X64_USER155_Handler VECTNUM=155
ffffffff8020bfea:	0f 01 f8             	swapgs
ffffffff8020bfed:	6a 00                	push   $0x0
ffffffff8020bfef:	68 9b 00 00 00       	push   $0x9b
ffffffff8020bff4:	e9 bb 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bff9 <__RME_X64_USER156_Handler>:
USER_HANDLER NAME=__RME_X64_USER156_Handler VECTNUM=156
ffffffff8020bff9:	0f 01 f8             	swapgs
ffffffff8020bffc:	6a 00                	push   $0x0
ffffffff8020bffe:	68 9c 00 00 00       	push   $0x9c
ffffffff8020c003:	e9 ac 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c008 <__RME_X64_USER157_Handler>:
USER_HANDLER NAME=__RME_X64_USER157_Handler VECTNUM=157
ffffffff8020c008:	0f 01 f8             	swapgs
ffffffff8020c00b:	6a 00                	push   $0x0
ffffffff8020c00d:	68 9d 00 00 00       	push   $0x9d
ffffffff8020c012:	e9 9d 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c017 <__RME_X64_USER158_Handler>:
USER_HANDLER NAME=__RME_X64_USER158_Handler VECTNUM=158
ffffffff8020c017:	0f 01 f8             	swapgs
ffffffff8020c01a:	6a 00                	push   $0x0
ffffffff8020c01c:	68 9e 00 00 00       	push   $0x9e
ffffffff8020c021:	e9 8e 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c026 <__RME_X64_USER159_Handler>:
USER_HANDLER NAME=__RME_X64_USER159_Handler VECTNUM=159
ffffffff8020c026:	0f 01 f8             	swapgs
ffffffff8020c029:	6a 00                	push   $0x0
ffffffff8020c02b:	68 9f 00 00 00       	push   $0x9f
ffffffff8020c030:	e9 7f 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c035 <__RME_X64_USER160_Handler>:

USER_HANDLER NAME=__RME_X64_USER160_Handler VECTNUM=160
ffffffff8020c035:	0f 01 f8             	swapgs
ffffffff8020c038:	6a 00                	push   $0x0
ffffffff8020c03a:	68 a0 00 00 00       	push   $0xa0
ffffffff8020c03f:	e9 70 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c044 <__RME_X64_USER161_Handler>:
USER_HANDLER NAME=__RME_X64_USER161_Handler VECTNUM=161
ffffffff8020c044:	0f 01 f8             	swapgs
ffffffff8020c047:	6a 00                	push   $0x0
ffffffff8020c049:	68 a1 00 00 00       	push   $0xa1
ffffffff8020c04e:	e9 61 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c053 <__RME_X64_USER162_Handler>:
USER_HANDLER NAME=__RME_X64_USER162_Handler VECTNUM=162
ffffffff8020c053:	0f 01 f8             	swapgs
ffffffff8020c056:	6a 00                	push   $0x0
ffffffff8020c058:	68 a2 00 00 00       	push   $0xa2
ffffffff8020c05d:	e9 52 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c062 <__RME_X64_USER163_Handler>:
USER_HANDLER NAME=__RME_X64_USER163_Handler VECTNUM=163
ffffffff8020c062:	0f 01 f8             	swapgs
ffffffff8020c065:	6a 00                	push   $0x0
ffffffff8020c067:	68 a3 00 00 00       	push   $0xa3
ffffffff8020c06c:	e9 43 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c071 <__RME_X64_USER164_Handler>:
USER_HANDLER NAME=__RME_X64_USER164_Handler VECTNUM=164
ffffffff8020c071:	0f 01 f8             	swapgs
ffffffff8020c074:	6a 00                	push   $0x0
ffffffff8020c076:	68 a4 00 00 00       	push   $0xa4
ffffffff8020c07b:	e9 34 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c080 <__RME_X64_USER165_Handler>:
USER_HANDLER NAME=__RME_X64_USER165_Handler VECTNUM=165
ffffffff8020c080:	0f 01 f8             	swapgs
ffffffff8020c083:	6a 00                	push   $0x0
ffffffff8020c085:	68 a5 00 00 00       	push   $0xa5
ffffffff8020c08a:	e9 25 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c08f <__RME_X64_USER166_Handler>:
USER_HANDLER NAME=__RME_X64_USER166_Handler VECTNUM=166
ffffffff8020c08f:	0f 01 f8             	swapgs
ffffffff8020c092:	6a 00                	push   $0x0
ffffffff8020c094:	68 a6 00 00 00       	push   $0xa6
ffffffff8020c099:	e9 16 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c09e <__RME_X64_USER167_Handler>:
USER_HANDLER NAME=__RME_X64_USER167_Handler VECTNUM=167
ffffffff8020c09e:	0f 01 f8             	swapgs
ffffffff8020c0a1:	6a 00                	push   $0x0
ffffffff8020c0a3:	68 a7 00 00 00       	push   $0xa7
ffffffff8020c0a8:	e9 07 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0ad <__RME_X64_USER168_Handler>:
USER_HANDLER NAME=__RME_X64_USER168_Handler VECTNUM=168
ffffffff8020c0ad:	0f 01 f8             	swapgs
ffffffff8020c0b0:	6a 00                	push   $0x0
ffffffff8020c0b2:	68 a8 00 00 00       	push   $0xa8
ffffffff8020c0b7:	e9 f8 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0bc <__RME_X64_USER169_Handler>:
USER_HANDLER NAME=__RME_X64_USER169_Handler VECTNUM=169
ffffffff8020c0bc:	0f 01 f8             	swapgs
ffffffff8020c0bf:	6a 00                	push   $0x0
ffffffff8020c0c1:	68 a9 00 00 00       	push   $0xa9
ffffffff8020c0c6:	e9 e9 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0cb <__RME_X64_USER170_Handler>:

USER_HANDLER NAME=__RME_X64_USER170_Handler VECTNUM=170
ffffffff8020c0cb:	0f 01 f8             	swapgs
ffffffff8020c0ce:	6a 00                	push   $0x0
ffffffff8020c0d0:	68 aa 00 00 00       	push   $0xaa
ffffffff8020c0d5:	e9 da 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0da <__RME_X64_USER171_Handler>:
USER_HANDLER NAME=__RME_X64_USER171_Handler VECTNUM=171
ffffffff8020c0da:	0f 01 f8             	swapgs
ffffffff8020c0dd:	6a 00                	push   $0x0
ffffffff8020c0df:	68 ab 00 00 00       	push   $0xab
ffffffff8020c0e4:	e9 cb 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0e9 <__RME_X64_USER172_Handler>:
USER_HANDLER NAME=__RME_X64_USER172_Handler VECTNUM=172
ffffffff8020c0e9:	0f 01 f8             	swapgs
ffffffff8020c0ec:	6a 00                	push   $0x0
ffffffff8020c0ee:	68 ac 00 00 00       	push   $0xac
ffffffff8020c0f3:	e9 bc 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0f8 <__RME_X64_USER173_Handler>:
USER_HANDLER NAME=__RME_X64_USER173_Handler VECTNUM=173
ffffffff8020c0f8:	0f 01 f8             	swapgs
ffffffff8020c0fb:	6a 00                	push   $0x0
ffffffff8020c0fd:	68 ad 00 00 00       	push   $0xad
ffffffff8020c102:	e9 ad 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c107 <__RME_X64_USER174_Handler>:
USER_HANDLER NAME=__RME_X64_USER174_Handler VECTNUM=174
ffffffff8020c107:	0f 01 f8             	swapgs
ffffffff8020c10a:	6a 00                	push   $0x0
ffffffff8020c10c:	68 ae 00 00 00       	push   $0xae
ffffffff8020c111:	e9 9e 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c116 <__RME_X64_USER175_Handler>:
USER_HANDLER NAME=__RME_X64_USER175_Handler VECTNUM=175
ffffffff8020c116:	0f 01 f8             	swapgs
ffffffff8020c119:	6a 00                	push   $0x0
ffffffff8020c11b:	68 af 00 00 00       	push   $0xaf
ffffffff8020c120:	e9 8f 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c125 <__RME_X64_USER176_Handler>:
USER_HANDLER NAME=__RME_X64_USER176_Handler VECTNUM=176
ffffffff8020c125:	0f 01 f8             	swapgs
ffffffff8020c128:	6a 00                	push   $0x0
ffffffff8020c12a:	68 b0 00 00 00       	push   $0xb0
ffffffff8020c12f:	e9 80 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c134 <__RME_X64_USER177_Handler>:
USER_HANDLER NAME=__RME_X64_USER177_Handler VECTNUM=177
ffffffff8020c134:	0f 01 f8             	swapgs
ffffffff8020c137:	6a 00                	push   $0x0
ffffffff8020c139:	68 b1 00 00 00       	push   $0xb1
ffffffff8020c13e:	e9 71 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c143 <__RME_X64_USER178_Handler>:
USER_HANDLER NAME=__RME_X64_USER178_Handler VECTNUM=178
ffffffff8020c143:	0f 01 f8             	swapgs
ffffffff8020c146:	6a 00                	push   $0x0
ffffffff8020c148:	68 b2 00 00 00       	push   $0xb2
ffffffff8020c14d:	e9 62 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c152 <__RME_X64_USER179_Handler>:
USER_HANDLER NAME=__RME_X64_USER179_Handler VECTNUM=179
ffffffff8020c152:	0f 01 f8             	swapgs
ffffffff8020c155:	6a 00                	push   $0x0
ffffffff8020c157:	68 b3 00 00 00       	push   $0xb3
ffffffff8020c15c:	e9 53 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c161 <__RME_X64_USER180_Handler>:

USER_HANDLER NAME=__RME_X64_USER180_Handler VECTNUM=180
ffffffff8020c161:	0f 01 f8             	swapgs
ffffffff8020c164:	6a 00                	push   $0x0
ffffffff8020c166:	68 b4 00 00 00       	push   $0xb4
ffffffff8020c16b:	e9 44 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c170 <__RME_X64_USER181_Handler>:
USER_HANDLER NAME=__RME_X64_USER181_Handler VECTNUM=181
ffffffff8020c170:	0f 01 f8             	swapgs
ffffffff8020c173:	6a 00                	push   $0x0
ffffffff8020c175:	68 b5 00 00 00       	push   $0xb5
ffffffff8020c17a:	e9 35 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c17f <__RME_X64_USER182_Handler>:
USER_HANDLER NAME=__RME_X64_USER182_Handler VECTNUM=182
ffffffff8020c17f:	0f 01 f8             	swapgs
ffffffff8020c182:	6a 00                	push   $0x0
ffffffff8020c184:	68 b6 00 00 00       	push   $0xb6
ffffffff8020c189:	e9 26 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c18e <__RME_X64_USER183_Handler>:
USER_HANDLER NAME=__RME_X64_USER183_Handler VECTNUM=183
ffffffff8020c18e:	0f 01 f8             	swapgs
ffffffff8020c191:	6a 00                	push   $0x0
ffffffff8020c193:	68 b7 00 00 00       	push   $0xb7
ffffffff8020c198:	e9 17 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c19d <__RME_X64_USER184_Handler>:
USER_HANDLER NAME=__RME_X64_USER184_Handler VECTNUM=184
ffffffff8020c19d:	0f 01 f8             	swapgs
ffffffff8020c1a0:	6a 00                	push   $0x0
ffffffff8020c1a2:	68 b8 00 00 00       	push   $0xb8
ffffffff8020c1a7:	e9 08 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ac <__RME_X64_USER185_Handler>:
USER_HANDLER NAME=__RME_X64_USER185_Handler VECTNUM=185
ffffffff8020c1ac:	0f 01 f8             	swapgs
ffffffff8020c1af:	6a 00                	push   $0x0
ffffffff8020c1b1:	68 b9 00 00 00       	push   $0xb9
ffffffff8020c1b6:	e9 f9 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1bb <__RME_X64_USER186_Handler>:
USER_HANDLER NAME=__RME_X64_USER186_Handler VECTNUM=186
ffffffff8020c1bb:	0f 01 f8             	swapgs
ffffffff8020c1be:	6a 00                	push   $0x0
ffffffff8020c1c0:	68 ba 00 00 00       	push   $0xba
ffffffff8020c1c5:	e9 ea 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ca <__RME_X64_USER187_Handler>:
USER_HANDLER NAME=__RME_X64_USER187_Handler VECTNUM=187
ffffffff8020c1ca:	0f 01 f8             	swapgs
ffffffff8020c1cd:	6a 00                	push   $0x0
ffffffff8020c1cf:	68 bb 00 00 00       	push   $0xbb
ffffffff8020c1d4:	e9 db 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1d9 <__RME_X64_USER188_Handler>:
USER_HANDLER NAME=__RME_X64_USER188_Handler VECTNUM=188
ffffffff8020c1d9:	0f 01 f8             	swapgs
ffffffff8020c1dc:	6a 00                	push   $0x0
ffffffff8020c1de:	68 bc 00 00 00       	push   $0xbc
ffffffff8020c1e3:	e9 cc 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1e8 <__RME_X64_USER189_Handler>:
USER_HANDLER NAME=__RME_X64_USER189_Handler VECTNUM=189
ffffffff8020c1e8:	0f 01 f8             	swapgs
ffffffff8020c1eb:	6a 00                	push   $0x0
ffffffff8020c1ed:	68 bd 00 00 00       	push   $0xbd
ffffffff8020c1f2:	e9 bd 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1f7 <__RME_X64_USER190_Handler>:

USER_HANDLER NAME=__RME_X64_USER190_Handler VECTNUM=190
ffffffff8020c1f7:	0f 01 f8             	swapgs
ffffffff8020c1fa:	6a 00                	push   $0x0
ffffffff8020c1fc:	68 be 00 00 00       	push   $0xbe
ffffffff8020c201:	e9 ae 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c206 <__RME_X64_USER191_Handler>:
USER_HANDLER NAME=__RME_X64_USER191_Handler VECTNUM=191
ffffffff8020c206:	0f 01 f8             	swapgs
ffffffff8020c209:	6a 00                	push   $0x0
ffffffff8020c20b:	68 bf 00 00 00       	push   $0xbf
ffffffff8020c210:	e9 9f 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c215 <__RME_X64_USER192_Handler>:
USER_HANDLER NAME=__RME_X64_USER192_Handler VECTNUM=192
ffffffff8020c215:	0f 01 f8             	swapgs
ffffffff8020c218:	6a 00                	push   $0x0
ffffffff8020c21a:	68 c0 00 00 00       	push   $0xc0
ffffffff8020c21f:	e9 90 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c224 <__RME_X64_USER193_Handler>:
USER_HANDLER NAME=__RME_X64_USER193_Handler VECTNUM=193
ffffffff8020c224:	0f 01 f8             	swapgs
ffffffff8020c227:	6a 00                	push   $0x0
ffffffff8020c229:	68 c1 00 00 00       	push   $0xc1
ffffffff8020c22e:	e9 81 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c233 <__RME_X64_USER194_Handler>:
USER_HANDLER NAME=__RME_X64_USER194_Handler VECTNUM=194
ffffffff8020c233:	0f 01 f8             	swapgs
ffffffff8020c236:	6a 00                	push   $0x0
ffffffff8020c238:	68 c2 00 00 00       	push   $0xc2
ffffffff8020c23d:	e9 72 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c242 <__RME_X64_USER195_Handler>:
USER_HANDLER NAME=__RME_X64_USER195_Handler VECTNUM=195
ffffffff8020c242:	0f 01 f8             	swapgs
ffffffff8020c245:	6a 00                	push   $0x0
ffffffff8020c247:	68 c3 00 00 00       	push   $0xc3
ffffffff8020c24c:	e9 63 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c251 <__RME_X64_USER196_Handler>:
USER_HANDLER NAME=__RME_X64_USER196_Handler VECTNUM=196
ffffffff8020c251:	0f 01 f8             	swapgs
ffffffff8020c254:	6a 00                	push   $0x0
ffffffff8020c256:	68 c4 00 00 00       	push   $0xc4
ffffffff8020c25b:	e9 54 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c260 <__RME_X64_USER197_Handler>:
USER_HANDLER NAME=__RME_X64_USER197_Handler VECTNUM=197
ffffffff8020c260:	0f 01 f8             	swapgs
ffffffff8020c263:	6a 00                	push   $0x0
ffffffff8020c265:	68 c5 00 00 00       	push   $0xc5
ffffffff8020c26a:	e9 45 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c26f <__RME_X64_USER198_Handler>:
USER_HANDLER NAME=__RME_X64_USER198_Handler VECTNUM=198
ffffffff8020c26f:	0f 01 f8             	swapgs
ffffffff8020c272:	6a 00                	push   $0x0
ffffffff8020c274:	68 c6 00 00 00       	push   $0xc6
ffffffff8020c279:	e9 36 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c27e <__RME_X64_USER199_Handler>:
USER_HANDLER NAME=__RME_X64_USER199_Handler VECTNUM=199
ffffffff8020c27e:	0f 01 f8             	swapgs
ffffffff8020c281:	6a 00                	push   $0x0
ffffffff8020c283:	68 c7 00 00 00       	push   $0xc7
ffffffff8020c288:	e9 27 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c28d <__RME_X64_USER200_Handler>:

USER_HANDLER NAME=__RME_X64_USER200_Handler VECTNUM=200
ffffffff8020c28d:	0f 01 f8             	swapgs
ffffffff8020c290:	6a 00                	push   $0x0
ffffffff8020c292:	68 c8 00 00 00       	push   $0xc8
ffffffff8020c297:	e9 18 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c29c <__RME_X64_USER201_Handler>:
USER_HANDLER NAME=__RME_X64_USER201_Handler VECTNUM=201
ffffffff8020c29c:	0f 01 f8             	swapgs
ffffffff8020c29f:	6a 00                	push   $0x0
ffffffff8020c2a1:	68 c9 00 00 00       	push   $0xc9
ffffffff8020c2a6:	e9 09 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ab <__RME_X64_USER202_Handler>:
USER_HANDLER NAME=__RME_X64_USER202_Handler VECTNUM=202
ffffffff8020c2ab:	0f 01 f8             	swapgs
ffffffff8020c2ae:	6a 00                	push   $0x0
ffffffff8020c2b0:	68 ca 00 00 00       	push   $0xca
ffffffff8020c2b5:	e9 fa 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ba <__RME_X64_USER203_Handler>:
USER_HANDLER NAME=__RME_X64_USER203_Handler VECTNUM=203
ffffffff8020c2ba:	0f 01 f8             	swapgs
ffffffff8020c2bd:	6a 00                	push   $0x0
ffffffff8020c2bf:	68 cb 00 00 00       	push   $0xcb
ffffffff8020c2c4:	e9 eb 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2c9 <__RME_X64_USER204_Handler>:
USER_HANDLER NAME=__RME_X64_USER204_Handler VECTNUM=204
ffffffff8020c2c9:	0f 01 f8             	swapgs
ffffffff8020c2cc:	6a 00                	push   $0x0
ffffffff8020c2ce:	68 cc 00 00 00       	push   $0xcc
ffffffff8020c2d3:	e9 dc 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2d8 <__RME_X64_USER205_Handler>:
USER_HANDLER NAME=__RME_X64_USER205_Handler VECTNUM=205
ffffffff8020c2d8:	0f 01 f8             	swapgs
ffffffff8020c2db:	6a 00                	push   $0x0
ffffffff8020c2dd:	68 cd 00 00 00       	push   $0xcd
ffffffff8020c2e2:	e9 cd 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2e7 <__RME_X64_USER206_Handler>:
USER_HANDLER NAME=__RME_X64_USER206_Handler VECTNUM=206
ffffffff8020c2e7:	0f 01 f8             	swapgs
ffffffff8020c2ea:	6a 00                	push   $0x0
ffffffff8020c2ec:	68 ce 00 00 00       	push   $0xce
ffffffff8020c2f1:	e9 be 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2f6 <__RME_X64_USER207_Handler>:
USER_HANDLER NAME=__RME_X64_USER207_Handler VECTNUM=207
ffffffff8020c2f6:	0f 01 f8             	swapgs
ffffffff8020c2f9:	6a 00                	push   $0x0
ffffffff8020c2fb:	68 cf 00 00 00       	push   $0xcf
ffffffff8020c300:	e9 af 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c305 <__RME_X64_USER208_Handler>:
USER_HANDLER NAME=__RME_X64_USER208_Handler VECTNUM=208
ffffffff8020c305:	0f 01 f8             	swapgs
ffffffff8020c308:	6a 00                	push   $0x0
ffffffff8020c30a:	68 d0 00 00 00       	push   $0xd0
ffffffff8020c30f:	e9 a0 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c314 <__RME_X64_USER209_Handler>:
USER_HANDLER NAME=__RME_X64_USER209_Handler VECTNUM=209
ffffffff8020c314:	0f 01 f8             	swapgs
ffffffff8020c317:	6a 00                	push   $0x0
ffffffff8020c319:	68 d1 00 00 00       	push   $0xd1
ffffffff8020c31e:	e9 91 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c323 <__RME_X64_USER210_Handler>:

USER_HANDLER NAME=__RME_X64_USER210_Handler VECTNUM=210
ffffffff8020c323:	0f 01 f8             	swapgs
ffffffff8020c326:	6a 00                	push   $0x0
ffffffff8020c328:	68 d2 00 00 00       	push   $0xd2
ffffffff8020c32d:	e9 82 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c332 <__RME_X64_USER211_Handler>:
USER_HANDLER NAME=__RME_X64_USER211_Handler VECTNUM=211
ffffffff8020c332:	0f 01 f8             	swapgs
ffffffff8020c335:	6a 00                	push   $0x0
ffffffff8020c337:	68 d3 00 00 00       	push   $0xd3
ffffffff8020c33c:	e9 73 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c341 <__RME_X64_USER212_Handler>:
USER_HANDLER NAME=__RME_X64_USER212_Handler VECTNUM=212
ffffffff8020c341:	0f 01 f8             	swapgs
ffffffff8020c344:	6a 00                	push   $0x0
ffffffff8020c346:	68 d4 00 00 00       	push   $0xd4
ffffffff8020c34b:	e9 64 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c350 <__RME_X64_USER213_Handler>:
USER_HANDLER NAME=__RME_X64_USER213_Handler VECTNUM=213
ffffffff8020c350:	0f 01 f8             	swapgs
ffffffff8020c353:	6a 00                	push   $0x0
ffffffff8020c355:	68 d5 00 00 00       	push   $0xd5
ffffffff8020c35a:	e9 55 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c35f <__RME_X64_USER214_Handler>:
USER_HANDLER NAME=__RME_X64_USER214_Handler VECTNUM=214
ffffffff8020c35f:	0f 01 f8             	swapgs
ffffffff8020c362:	6a 00                	push   $0x0
ffffffff8020c364:	68 d6 00 00 00       	push   $0xd6
ffffffff8020c369:	e9 46 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c36e <__RME_X64_USER215_Handler>:
USER_HANDLER NAME=__RME_X64_USER215_Handler VECTNUM=215
ffffffff8020c36e:	0f 01 f8             	swapgs
ffffffff8020c371:	6a 00                	push   $0x0
ffffffff8020c373:	68 d7 00 00 00       	push   $0xd7
ffffffff8020c378:	e9 37 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c37d <__RME_X64_USER216_Handler>:
USER_HANDLER NAME=__RME_X64_USER216_Handler VECTNUM=216
ffffffff8020c37d:	0f 01 f8             	swapgs
ffffffff8020c380:	6a 00                	push   $0x0
ffffffff8020c382:	68 d8 00 00 00       	push   $0xd8
ffffffff8020c387:	e9 28 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c38c <__RME_X64_USER217_Handler>:
USER_HANDLER NAME=__RME_X64_USER217_Handler VECTNUM=217
ffffffff8020c38c:	0f 01 f8             	swapgs
ffffffff8020c38f:	6a 00                	push   $0x0
ffffffff8020c391:	68 d9 00 00 00       	push   $0xd9
ffffffff8020c396:	e9 19 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c39b <__RME_X64_USER218_Handler>:
USER_HANDLER NAME=__RME_X64_USER218_Handler VECTNUM=218
ffffffff8020c39b:	0f 01 f8             	swapgs
ffffffff8020c39e:	6a 00                	push   $0x0
ffffffff8020c3a0:	68 da 00 00 00       	push   $0xda
ffffffff8020c3a5:	e9 0a 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3aa <__RME_X64_USER219_Handler>:
USER_HANDLER NAME=__RME_X64_USER219_Handler VECTNUM=219
ffffffff8020c3aa:	0f 01 f8             	swapgs
ffffffff8020c3ad:	6a 00                	push   $0x0
ffffffff8020c3af:	68 db 00 00 00       	push   $0xdb
ffffffff8020c3b4:	e9 fb 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3b9 <__RME_X64_USER220_Handler>:

USER_HANDLER NAME=__RME_X64_USER220_Handler VECTNUM=220
ffffffff8020c3b9:	0f 01 f8             	swapgs
ffffffff8020c3bc:	6a 00                	push   $0x0
ffffffff8020c3be:	68 dc 00 00 00       	push   $0xdc
ffffffff8020c3c3:	e9 ec 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3c8 <__RME_X64_USER221_Handler>:
USER_HANDLER NAME=__RME_X64_USER221_Handler VECTNUM=221
ffffffff8020c3c8:	0f 01 f8             	swapgs
ffffffff8020c3cb:	6a 00                	push   $0x0
ffffffff8020c3cd:	68 dd 00 00 00       	push   $0xdd
ffffffff8020c3d2:	e9 dd 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3d7 <__RME_X64_USER222_Handler>:
USER_HANDLER NAME=__RME_X64_USER222_Handler VECTNUM=222
ffffffff8020c3d7:	0f 01 f8             	swapgs
ffffffff8020c3da:	6a 00                	push   $0x0
ffffffff8020c3dc:	68 de 00 00 00       	push   $0xde
ffffffff8020c3e1:	e9 ce 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3e6 <__RME_X64_USER223_Handler>:
USER_HANDLER NAME=__RME_X64_USER223_Handler VECTNUM=223
ffffffff8020c3e6:	0f 01 f8             	swapgs
ffffffff8020c3e9:	6a 00                	push   $0x0
ffffffff8020c3eb:	68 df 00 00 00       	push   $0xdf
ffffffff8020c3f0:	e9 bf 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3f5 <__RME_X64_USER224_Handler>:
USER_HANDLER NAME=__RME_X64_USER224_Handler VECTNUM=224
ffffffff8020c3f5:	0f 01 f8             	swapgs
ffffffff8020c3f8:	6a 00                	push   $0x0
ffffffff8020c3fa:	68 e0 00 00 00       	push   $0xe0
ffffffff8020c3ff:	e9 b0 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c404 <__RME_X64_USER225_Handler>:
USER_HANDLER NAME=__RME_X64_USER225_Handler VECTNUM=225
ffffffff8020c404:	0f 01 f8             	swapgs
ffffffff8020c407:	6a 00                	push   $0x0
ffffffff8020c409:	68 e1 00 00 00       	push   $0xe1
ffffffff8020c40e:	e9 a1 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c413 <__RME_X64_USER226_Handler>:
USER_HANDLER NAME=__RME_X64_USER226_Handler VECTNUM=226
ffffffff8020c413:	0f 01 f8             	swapgs
ffffffff8020c416:	6a 00                	push   $0x0
ffffffff8020c418:	68 e2 00 00 00       	push   $0xe2
ffffffff8020c41d:	e9 92 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c422 <__RME_X64_USER227_Handler>:
USER_HANDLER NAME=__RME_X64_USER227_Handler VECTNUM=227
ffffffff8020c422:	0f 01 f8             	swapgs
ffffffff8020c425:	6a 00                	push   $0x0
ffffffff8020c427:	68 e3 00 00 00       	push   $0xe3
ffffffff8020c42c:	e9 83 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c431 <__RME_X64_USER228_Handler>:
USER_HANDLER NAME=__RME_X64_USER228_Handler VECTNUM=228
ffffffff8020c431:	0f 01 f8             	swapgs
ffffffff8020c434:	6a 00                	push   $0x0
ffffffff8020c436:	68 e4 00 00 00       	push   $0xe4
ffffffff8020c43b:	e9 74 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c440 <__RME_X64_USER229_Handler>:
USER_HANDLER NAME=__RME_X64_USER229_Handler VECTNUM=229
ffffffff8020c440:	0f 01 f8             	swapgs
ffffffff8020c443:	6a 00                	push   $0x0
ffffffff8020c445:	68 e5 00 00 00       	push   $0xe5
ffffffff8020c44a:	e9 65 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c44f <__RME_X64_USER230_Handler>:

USER_HANDLER NAME=__RME_X64_USER230_Handler VECTNUM=230
ffffffff8020c44f:	0f 01 f8             	swapgs
ffffffff8020c452:	6a 00                	push   $0x0
ffffffff8020c454:	68 e6 00 00 00       	push   $0xe6
ffffffff8020c459:	e9 56 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c45e <__RME_X64_USER231_Handler>:
USER_HANDLER NAME=__RME_X64_USER231_Handler VECTNUM=231
ffffffff8020c45e:	0f 01 f8             	swapgs
ffffffff8020c461:	6a 00                	push   $0x0
ffffffff8020c463:	68 e7 00 00 00       	push   $0xe7
ffffffff8020c468:	e9 47 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c46d <__RME_X64_USER232_Handler>:
USER_HANDLER NAME=__RME_X64_USER232_Handler VECTNUM=232
ffffffff8020c46d:	0f 01 f8             	swapgs
ffffffff8020c470:	6a 00                	push   $0x0
ffffffff8020c472:	68 e8 00 00 00       	push   $0xe8
ffffffff8020c477:	e9 38 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c47c <__RME_X64_USER233_Handler>:
USER_HANDLER NAME=__RME_X64_USER233_Handler VECTNUM=233
ffffffff8020c47c:	0f 01 f8             	swapgs
ffffffff8020c47f:	6a 00                	push   $0x0
ffffffff8020c481:	68 e9 00 00 00       	push   $0xe9
ffffffff8020c486:	e9 29 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c48b <__RME_X64_USER234_Handler>:
USER_HANDLER NAME=__RME_X64_USER234_Handler VECTNUM=234
ffffffff8020c48b:	0f 01 f8             	swapgs
ffffffff8020c48e:	6a 00                	push   $0x0
ffffffff8020c490:	68 ea 00 00 00       	push   $0xea
ffffffff8020c495:	e9 1a 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c49a <__RME_X64_USER235_Handler>:
USER_HANDLER NAME=__RME_X64_USER235_Handler VECTNUM=235
ffffffff8020c49a:	0f 01 f8             	swapgs
ffffffff8020c49d:	6a 00                	push   $0x0
ffffffff8020c49f:	68 eb 00 00 00       	push   $0xeb
ffffffff8020c4a4:	e9 0b 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4a9 <__RME_X64_USER236_Handler>:
USER_HANDLER NAME=__RME_X64_USER236_Handler VECTNUM=236
ffffffff8020c4a9:	0f 01 f8             	swapgs
ffffffff8020c4ac:	6a 00                	push   $0x0
ffffffff8020c4ae:	68 ec 00 00 00       	push   $0xec
ffffffff8020c4b3:	e9 fc 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4b8 <__RME_X64_USER237_Handler>:
USER_HANDLER NAME=__RME_X64_USER237_Handler VECTNUM=237
ffffffff8020c4b8:	0f 01 f8             	swapgs
ffffffff8020c4bb:	6a 00                	push   $0x0
ffffffff8020c4bd:	68 ed 00 00 00       	push   $0xed
ffffffff8020c4c2:	e9 ed 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4c7 <__RME_X64_USER238_Handler>:
USER_HANDLER NAME=__RME_X64_USER238_Handler VECTNUM=238
ffffffff8020c4c7:	0f 01 f8             	swapgs
ffffffff8020c4ca:	6a 00                	push   $0x0
ffffffff8020c4cc:	68 ee 00 00 00       	push   $0xee
ffffffff8020c4d1:	e9 de 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4d6 <__RME_X64_USER239_Handler>:
USER_HANDLER NAME=__RME_X64_USER239_Handler VECTNUM=239
ffffffff8020c4d6:	0f 01 f8             	swapgs
ffffffff8020c4d9:	6a 00                	push   $0x0
ffffffff8020c4db:	68 ef 00 00 00       	push   $0xef
ffffffff8020c4e0:	e9 cf 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4e5 <__RME_X64_USER240_Handler>:

USER_HANDLER NAME=__RME_X64_USER240_Handler VECTNUM=240
ffffffff8020c4e5:	0f 01 f8             	swapgs
ffffffff8020c4e8:	6a 00                	push   $0x0
ffffffff8020c4ea:	68 f0 00 00 00       	push   $0xf0
ffffffff8020c4ef:	e9 c0 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4f4 <__RME_X64_USER241_Handler>:
USER_HANDLER NAME=__RME_X64_USER241_Handler VECTNUM=241
ffffffff8020c4f4:	0f 01 f8             	swapgs
ffffffff8020c4f7:	6a 00                	push   $0x0
ffffffff8020c4f9:	68 f1 00 00 00       	push   $0xf1
ffffffff8020c4fe:	e9 b1 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c503 <__RME_X64_USER242_Handler>:
USER_HANDLER NAME=__RME_X64_USER242_Handler VECTNUM=242
ffffffff8020c503:	0f 01 f8             	swapgs
ffffffff8020c506:	6a 00                	push   $0x0
ffffffff8020c508:	68 f2 00 00 00       	push   $0xf2
ffffffff8020c50d:	e9 a2 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c512 <__RME_X64_USER243_Handler>:
USER_HANDLER NAME=__RME_X64_USER243_Handler VECTNUM=243
ffffffff8020c512:	0f 01 f8             	swapgs
ffffffff8020c515:	6a 00                	push   $0x0
ffffffff8020c517:	68 f3 00 00 00       	push   $0xf3
ffffffff8020c51c:	e9 93 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c521 <__RME_X64_USER244_Handler>:
USER_HANDLER NAME=__RME_X64_USER244_Handler VECTNUM=244
ffffffff8020c521:	0f 01 f8             	swapgs
ffffffff8020c524:	6a 00                	push   $0x0
ffffffff8020c526:	68 f4 00 00 00       	push   $0xf4
ffffffff8020c52b:	e9 84 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c530 <__RME_X64_USER245_Handler>:
USER_HANDLER NAME=__RME_X64_USER245_Handler VECTNUM=245
ffffffff8020c530:	0f 01 f8             	swapgs
ffffffff8020c533:	6a 00                	push   $0x0
ffffffff8020c535:	68 f5 00 00 00       	push   $0xf5
ffffffff8020c53a:	eb 78                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c53c <__RME_X64_USER246_Handler>:
USER_HANDLER NAME=__RME_X64_USER246_Handler VECTNUM=246
ffffffff8020c53c:	0f 01 f8             	swapgs
ffffffff8020c53f:	6a 00                	push   $0x0
ffffffff8020c541:	68 f6 00 00 00       	push   $0xf6
ffffffff8020c546:	eb 6c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c548 <__RME_X64_USER247_Handler>:
USER_HANDLER NAME=__RME_X64_USER247_Handler VECTNUM=247
ffffffff8020c548:	0f 01 f8             	swapgs
ffffffff8020c54b:	6a 00                	push   $0x0
ffffffff8020c54d:	68 f7 00 00 00       	push   $0xf7
ffffffff8020c552:	eb 60                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c554 <__RME_X64_USER248_Handler>:
USER_HANDLER NAME=__RME_X64_USER248_Handler VECTNUM=248
ffffffff8020c554:	0f 01 f8             	swapgs
ffffffff8020c557:	6a 00                	push   $0x0
ffffffff8020c559:	68 f8 00 00 00       	push   $0xf8
ffffffff8020c55e:	eb 54                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c560 <__RME_X64_USER249_Handler>:
USER_HANDLER NAME=__RME_X64_USER249_Handler VECTNUM=249
ffffffff8020c560:	0f 01 f8             	swapgs
ffffffff8020c563:	6a 00                	push   $0x0
ffffffff8020c565:	68 f9 00 00 00       	push   $0xf9
ffffffff8020c56a:	eb 48                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c56c <__RME_X64_USER250_Handler>:

USER_HANDLER NAME=__RME_X64_USER250_Handler VECTNUM=250
ffffffff8020c56c:	0f 01 f8             	swapgs
ffffffff8020c56f:	6a 00                	push   $0x0
ffffffff8020c571:	68 fa 00 00 00       	push   $0xfa
ffffffff8020c576:	eb 3c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c578 <__RME_X64_USER251_Handler>:
USER_HANDLER NAME=__RME_X64_USER251_Handler VECTNUM=251
ffffffff8020c578:	0f 01 f8             	swapgs
ffffffff8020c57b:	6a 00                	push   $0x0
ffffffff8020c57d:	68 fb 00 00 00       	push   $0xfb
ffffffff8020c582:	eb 30                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c584 <__RME_X64_USER252_Handler>:
USER_HANDLER NAME=__RME_X64_USER252_Handler VECTNUM=252
ffffffff8020c584:	0f 01 f8             	swapgs
ffffffff8020c587:	6a 00                	push   $0x0
ffffffff8020c589:	68 fc 00 00 00       	push   $0xfc
ffffffff8020c58e:	eb 24                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c590 <__RME_X64_USER253_Handler>:
USER_HANDLER NAME=__RME_X64_USER253_Handler VECTNUM=253
ffffffff8020c590:	0f 01 f8             	swapgs
ffffffff8020c593:	6a 00                	push   $0x0
ffffffff8020c595:	68 fd 00 00 00       	push   $0xfd
ffffffff8020c59a:	eb 18                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c59c <__RME_X64_USER254_Handler>:
USER_HANDLER NAME=__RME_X64_USER254_Handler VECTNUM=254
ffffffff8020c59c:	0f 01 f8             	swapgs
ffffffff8020c59f:	6a 00                	push   $0x0
ffffffff8020c5a1:	68 fe 00 00 00       	push   $0xfe
ffffffff8020c5a6:	eb 0c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5a8 <__RME_X64_USER255_Handler>:
USER_HANDLER NAME=__RME_X64_USER255_Handler VECTNUM=255
ffffffff8020c5a8:	0f 01 f8             	swapgs
ffffffff8020c5ab:	6a 00                	push   $0x0
ffffffff8020c5ad:	68 ff 00 00 00       	push   $0xff
ffffffff8020c5b2:	eb 00                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5b4 <User_Handler>:
/* Common function body for generic interrupt handlers - reduce I-Cache usage */
User_Handler:
    SAVE_GP_REGS
ffffffff8020c5b4:	41 57                	push   %r15
ffffffff8020c5b6:	41 56                	push   %r14
ffffffff8020c5b8:	41 55                	push   %r13
ffffffff8020c5ba:	41 54                	push   %r12
ffffffff8020c5bc:	41 53                	push   %r11
ffffffff8020c5be:	41 52                	push   %r10
ffffffff8020c5c0:	41 51                	push   %r9
ffffffff8020c5c2:	41 50                	push   %r8
ffffffff8020c5c4:	55                   	push   %rbp
ffffffff8020c5c5:	57                   	push   %rdi
ffffffff8020c5c6:	56                   	push   %rsi
ffffffff8020c5c7:	52                   	push   %rdx
ffffffff8020c5c8:	51                   	push   %rcx
ffffffff8020c5c9:	53                   	push   %rbx
ffffffff8020c5ca:	50                   	push   %rax
ffffffff8020c5cb:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c5cf:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c5d1:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020c5d4:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Generic_Handler
ffffffff8020c5d9:	e8 5f a1 01 00       	call   ffffffff8022673d <__RME_X64_Generic_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c5de:	e8 ea 7c 01 00       	call   ffffffff802242cd <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c5e3:	0f 01 f8             	swapgs
ffffffff8020c5e6:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c5ea:	8e d8                	mov    %eax,%ds
ffffffff8020c5ec:	58                   	pop    %rax
ffffffff8020c5ed:	5b                   	pop    %rbx
ffffffff8020c5ee:	59                   	pop    %rcx
ffffffff8020c5ef:	5a                   	pop    %rdx
ffffffff8020c5f0:	5e                   	pop    %rsi
ffffffff8020c5f1:	5f                   	pop    %rdi
ffffffff8020c5f2:	5d                   	pop    %rbp
ffffffff8020c5f3:	41 58                	pop    %r8
ffffffff8020c5f5:	41 59                	pop    %r9
ffffffff8020c5f7:	41 5a                	pop    %r10
ffffffff8020c5f9:	41 5b                	pop    %r11
ffffffff8020c5fb:	41 5c                	pop    %r12
ffffffff8020c5fd:	41 5d                	pop    %r13
ffffffff8020c5ff:	41 5e                	pop    %r14
ffffffff8020c601:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c603:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c607:	48 cf                	iretq

ffffffff8020c609 <SysTick_SMP_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_SMP_Handler:
    .global             SysTick_SMP_Handler
    SWAPGS
ffffffff8020c609:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c60c:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c60e:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c613:	41 57                	push   %r15
ffffffff8020c615:	41 56                	push   %r14
ffffffff8020c617:	41 55                	push   %r13
ffffffff8020c619:	41 54                	push   %r12
ffffffff8020c61b:	41 53                	push   %r11
ffffffff8020c61d:	41 52                	push   %r10
ffffffff8020c61f:	41 51                	push   %r9
ffffffff8020c621:	41 50                	push   %r8
ffffffff8020c623:	55                   	push   %rbp
ffffffff8020c624:	57                   	push   %rdi
ffffffff8020c625:	56                   	push   %rsi
ffffffff8020c626:	52                   	push   %rdx
ffffffff8020c627:	51                   	push   %rcx
ffffffff8020c628:	53                   	push   %rbx
ffffffff8020c629:	50                   	push   %rax
ffffffff8020c62a:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c62e:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c630:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_SMP_Handler
ffffffff8020c633:	e8 26 01 00 00       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c638:	e8 90 7c 01 00       	call   ffffffff802242cd <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c63d:	0f 01 f8             	swapgs
ffffffff8020c640:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c644:	8e d8                	mov    %eax,%ds
ffffffff8020c646:	58                   	pop    %rax
ffffffff8020c647:	5b                   	pop    %rbx
ffffffff8020c648:	59                   	pop    %rcx
ffffffff8020c649:	5a                   	pop    %rdx
ffffffff8020c64a:	5e                   	pop    %rsi
ffffffff8020c64b:	5f                   	pop    %rdi
ffffffff8020c64c:	5d                   	pop    %rbp
ffffffff8020c64d:	41 58                	pop    %r8
ffffffff8020c64f:	41 59                	pop    %r9
ffffffff8020c651:	41 5a                	pop    %r10
ffffffff8020c653:	41 5b                	pop    %r11
ffffffff8020c655:	41 5c                	pop    %r12
ffffffff8020c657:	41 5d                	pop    %r13
ffffffff8020c659:	41 5e                	pop    %r14
ffffffff8020c65b:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c65d:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c661:	48 cf                	iretq

ffffffff8020c663 <SysTick_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_Handler:
    .global             SysTick_Handler
    SWAPGS
ffffffff8020c663:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c666:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c668:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c66d:	41 57                	push   %r15
ffffffff8020c66f:	41 56                	push   %r14
ffffffff8020c671:	41 55                	push   %r13
ffffffff8020c673:	41 54                	push   %r12
ffffffff8020c675:	41 53                	push   %r11
ffffffff8020c677:	41 52                	push   %r10
ffffffff8020c679:	41 51                	push   %r9
ffffffff8020c67b:	41 50                	push   %r8
ffffffff8020c67d:	55                   	push   %rbp
ffffffff8020c67e:	57                   	push   %rdi
ffffffff8020c67f:	56                   	push   %rsi
ffffffff8020c680:	52                   	push   %rdx
ffffffff8020c681:	51                   	push   %rcx
ffffffff8020c682:	53                   	push   %rbx
ffffffff8020c683:	50                   	push   %rax
ffffffff8020c684:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c688:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c68a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_Handler
ffffffff8020c68d:	e8 cc 00 00 00       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
    CALLQ               __RME_X64_SMP_Tick
ffffffff8020c692:	e8 98 82 01 00       	call   ffffffff8022492f <__RME_X64_SMP_Tick>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c697:	e8 31 7c 01 00       	call   ffffffff802242cd <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c69c:	0f 01 f8             	swapgs
ffffffff8020c69f:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c6a3:	8e d8                	mov    %eax,%ds
ffffffff8020c6a5:	58                   	pop    %rax
ffffffff8020c6a6:	5b                   	pop    %rbx
ffffffff8020c6a7:	59                   	pop    %rcx
ffffffff8020c6a8:	5a                   	pop    %rdx
ffffffff8020c6a9:	5e                   	pop    %rsi
ffffffff8020c6aa:	5f                   	pop    %rdi
ffffffff8020c6ab:	5d                   	pop    %rbp
ffffffff8020c6ac:	41 58                	pop    %r8
ffffffff8020c6ae:	41 59                	pop    %r9
ffffffff8020c6b0:	41 5a                	pop    %r10
ffffffff8020c6b2:	41 5b                	pop    %r11
ffffffff8020c6b4:	41 5c                	pop    %r12
ffffffff8020c6b6:	41 5d                	pop    %r13
ffffffff8020c6b8:	41 5e                	pop    %r14
ffffffff8020c6ba:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c6bc:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c6c0:	48 cf                	iretq

ffffffff8020c6c2 <SVC_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SVC_Handler:
    .global             SVC_Handler
    SWAPGS
ffffffff8020c6c2:	0f 01 f8             	swapgs
    /* Swap the pointers with the per-core kernel RSP */
    MOVQ                %RSP,%GS:(8192-8)
ffffffff8020c6c5:	65 48 89 24 25 f8 1f 	mov    %rsp,%gs:0x1ff8
ffffffff8020c6cc:	00 00 
    MOVQ                %GS:(8192-16),%RSP
ffffffff8020c6ce:	65 48 8b 24 25 f0 1f 	mov    %gs:0x1ff0,%rsp
ffffffff8020c6d5:	00 00 
    /* Simulate INT stack: High - [SS, RSP, RFLAGS, CS, RIP, ERRCODE] - Low */
    PUSHQ               $(USER_DATA)
ffffffff8020c6d7:	6a 23                	push   $0x23
    PUSHQ               %GS:(8192-8)
ffffffff8020c6d9:	65 ff 34 25 f8 1f 00 	push   %gs:0x1ff8
ffffffff8020c6e0:	00 
    PUSHQ               %R11
ffffffff8020c6e1:	41 53                	push   %r11
    PUSHQ               $(USER_CODE)
ffffffff8020c6e3:	6a 2b                	push   $0x2b
    PUSHQ               %RCX
ffffffff8020c6e5:	51                   	push   %rcx
    PUSHQ               $0
ffffffff8020c6e6:	6a 00                	push   $0x0
    /* We went into this from a SYSCALL - interrupt number 0x10000 */
    PUSHQ               $0x10000
ffffffff8020c6e8:	68 00 00 01 00       	push   $0x10000
    SAVE_GP_REGS
ffffffff8020c6ed:	41 57                	push   %r15
ffffffff8020c6ef:	41 56                	push   %r14
ffffffff8020c6f1:	41 55                	push   %r13
ffffffff8020c6f3:	41 54                	push   %r12
ffffffff8020c6f5:	41 53                	push   %r11
ffffffff8020c6f7:	41 52                	push   %r10
ffffffff8020c6f9:	41 51                	push   %r9
ffffffff8020c6fb:	41 50                	push   %r8
ffffffff8020c6fd:	55                   	push   %rbp
ffffffff8020c6fe:	57                   	push   %rdi
ffffffff8020c6ff:	56                   	push   %rsi
ffffffff8020c700:	52                   	push   %rdx
ffffffff8020c701:	51                   	push   %rcx
ffffffff8020c702:	53                   	push   %rbx
ffffffff8020c703:	50                   	push   %rax
ffffffff8020c704:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c708:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c70a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Svc_Handler
ffffffff8020c70d:	e8 af 08 00 00       	call   ffffffff8020cfc1 <_RME_Svc_Handler>
    RESTORE_GP_REGS
ffffffff8020c712:	0f 01 f8             	swapgs
ffffffff8020c715:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c719:	8e d8                	mov    %eax,%ds
ffffffff8020c71b:	58                   	pop    %rax
ffffffff8020c71c:	5b                   	pop    %rbx
ffffffff8020c71d:	59                   	pop    %rcx
ffffffff8020c71e:	5a                   	pop    %rdx
ffffffff8020c71f:	5e                   	pop    %rsi
ffffffff8020c720:	5f                   	pop    %rdi
ffffffff8020c721:	5d                   	pop    %rbp
ffffffff8020c722:	41 58                	pop    %r8
ffffffff8020c724:	41 59                	pop    %r9
ffffffff8020c726:	41 5a                	pop    %r10
ffffffff8020c728:	41 5b                	pop    %r11
ffffffff8020c72a:	41 5c                	pop    %r12
ffffffff8020c72c:	41 5d                	pop    %r13
ffffffff8020c72e:	41 5e                	pop    %r14
ffffffff8020c730:	41 5f                	pop    %r15
    /* See if we are forced to use IRET */
    TESTQ               $0x10000,(%RSP)
ffffffff8020c732:	48 f7 04 24 00 00 01 	testq  $0x10000,(%rsp)
ffffffff8020c739:	00 
    JZ                  Use_IRET
ffffffff8020c73a:	74 1c                	je     ffffffff8020c758 <Use_IRET>
    /* Just move these into the registers desired */
    /* CVE-2012-0217, CVE-2014-4699: Force canonical address on RIP */
    MOVQ                $0x7FFFFFFFFFFF,%RCX
ffffffff8020c73c:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffff,%rcx
ffffffff8020c743:	7f 00 00 
    ANDQ                16(%RSP),%RCX
ffffffff8020c746:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
    MOVQ                32(%RSP),%R11
ffffffff8020c74b:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    MOVQ                40(%RSP),%RSP
ffffffff8020c750:	48 8b 64 24 28       	mov    0x28(%rsp),%rsp
    /* Return to user-level */
    SYSRETQ
ffffffff8020c755:	48 0f 07             	sysretq

ffffffff8020c758 <Use_IRET>:
Use_IRET:
    /* Flag is zero, We are forced to use IRET, because this is from INT */
    ADDQ                $16,%RSP
ffffffff8020c758:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c75c:	48 cf                	iretq

ffffffff8020c75e <_RME_X64_Comp_Swap>:
and asynchronous communication. Different from most operating systems, it employs
thread migration model for cross-boundary synchronous communication rather than
simple blockpoints. This invocation design have many benefits in many facets.

* Kernel Function *************************************************************
There's no perfect operating system for a particular hardware. A hardware may
ffffffff8020c75e:	55                   	push   %rbp
ffffffff8020c75f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c762:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8020c766:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020c76a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020c76e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
have its own idiosyncrasies that needs extra hacks. RME's kernel function utility
provides a disciplined way of making such hacks, in case you need to add new 
ffffffff8020c772:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020c776:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8020c77a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c77e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8020c782:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020c787:	0f 94 c0             	sete   %al
ffffffff8020c78a:	88 45 ff             	mov    %al,-0x1(%rbp)
system calls or directly manipulate hardware.

* The Use of 'volatile' *******************************************************
'volatile' is not needed in the kernel because the syscall interface acts as a
ffffffff8020c78d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
natural compiler barrier. We're safe to assume that, during one syscall, data
ffffffff8020c791:	c9                   	leave
ffffffff8020c792:	c3                   	ret

ffffffff8020c793 <_RME_X64_Fetch_Add>:
in memory remains unchanged. If anything changes, it has been dealt with the 
dedicated assembly atomics. If LTO has been enabled, there are three cases:
ffffffff8020c793:	55                   	push   %rbp
ffffffff8020c794:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c797:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8020c79b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020c79f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
(1) Uniprocessor with C-implemented "atomics" with no real atomic support.
ffffffff8020c7a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020c7a7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8020c7ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c7af:	f0 48 0f c1 02       	lock xadd %rax,(%rdx)
ffffffff8020c7b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    In this case, compiler barriers are not needed due to no kernel concurrency.
(2) Multiprocessor with assembly-implemented atomics, but the compiler LTO does
    not honor the assembly functions; instead it thinks that they are opaque.
    In this case, the opaque function call itself is a full compiler barrier.
ffffffff8020c7b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
(3) Multiprocessor with assembly-implemented atomics, and the compiler LTO does
ffffffff8020c7bc:	c9                   	leave
ffffffff8020c7bd:	c3                   	ret

ffffffff8020c7be <_RME_X64_Fetch_And>:
    honor the assembly functions.
    In this case, the compiler should be aware of the semantics of the assembly,
ffffffff8020c7be:	55                   	push   %rbp
ffffffff8020c7bf:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c7c2:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020c7c6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020c7ca:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    and produce correct code.
* Function Name Rules *********************************************************
ffffffff8020c7ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020c7d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c7d6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020c7da:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020c7dd:	f0 48 21 02          	lock and %rax,(%rdx)
ffffffff8020c7e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
(1) No "_": OS entry function RME_Kmain and C entry "main".
(2) "_"   : Kernel functions that are be called by kernel.
(3) "__"  : HAL functions that are called by kernel.
(4) "___" : HAL functions that should only be called by HAL.
ffffffff8020c7e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
******************************************************************************/
ffffffff8020c7e9:	c9                   	leave
ffffffff8020c7ea:	c3                   	ret

ffffffff8020c7eb <_RME_X64_MSB_Get>:

/* Include *******************************************************************/
ffffffff8020c7eb:	55                   	push   %rbp
ffffffff8020c7ec:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c7ef:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020c7f3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
#define __HDR_DEF__
#include "rme_platform.h"
ffffffff8020c7f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c7fb:	48 0f bd c0          	bsr    %rax,%rax
ffffffff8020c7ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
#include "Kernel/rme_kernel.h"
#undef __HDR_DEF__

#define __HDR_STRUCT__
ffffffff8020c803:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
#include "rme_platform.h"
ffffffff8020c807:	c9                   	leave
ffffffff8020c808:	c3                   	ret

ffffffff8020c809 <__RME_Int_Disable>:
#include "Kernel/rme_kernel.h"
#undef __HDR_STRUCT__

ffffffff8020c809:	55                   	push   %rbp
ffffffff8020c80a:	48 89 e5             	mov    %rsp,%rbp
/* Private include */
ffffffff8020c80d:	fa                   	cli
#include "Kernel/rme_kernel.h"

#define __HDR_PUBLIC__
ffffffff8020c80e:	90                   	nop
ffffffff8020c80f:	5d                   	pop    %rbp
ffffffff8020c810:	c3                   	ret

ffffffff8020c811 <RME_X64_RDTSC>:
Return      : None.
******************************************************************************/
void _RME_List_Del(volatile struct RME_List* Prev,
                   volatile struct RME_List* Next)
{
    Next->Prev=Prev;
ffffffff8020c811:	55                   	push   %rbp
ffffffff8020c812:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c815:	48 83 ec 10          	sub    $0x10,%rsp
    Prev->Next=Next;
}
ffffffff8020c819:	0f 31                	rdtsc
ffffffff8020c81b:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8020c81e:	89 55 f8             	mov    %edx,-0x8(%rbp)
/* End Function:_RME_List_Del ************************************************/

/* Function:_RME_List_Ins *****************************************************
Description : Insert a node to the doubly-linked list.
ffffffff8020c821:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8020c824:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020c828:	48 89 c2             	mov    %rax,%rdx
ffffffff8020c82b:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8020c82e:	48 09 d0             	or     %rdx,%rax
Input       : struct RME_List* New - The new node to insert.
ffffffff8020c831:	c9                   	leave
ffffffff8020c832:	c3                   	ret

ffffffff8020c833 <RME_Int_Print>:
{
ffffffff8020c833:	f3 0f 1e fa          	endbr64
ffffffff8020c837:	55                   	push   %rbp
ffffffff8020c838:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c83b:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8020c83f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    if(Int==0)
ffffffff8020c843:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8020c848:	75 14                	jne    ffffffff8020c85e <RME_Int_Print+0x2b>
        __RME_Putchar('0');
ffffffff8020c84a:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020c84f:	e8 e0 e8 00 00       	call   ffffffff8021b134 <__RME_Putchar>
        return 1;
ffffffff8020c854:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020c859:	e9 0b 01 00 00       	jmp    ffffffff8020c969 <RME_Int_Print+0x136>
    if(Int<0)
ffffffff8020c85e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8020c863:	79 1f                	jns    ffffffff8020c884 <RME_Int_Print+0x51>
        __RME_Putchar('-');
ffffffff8020c865:	bf 2d 00 00 00       	mov    $0x2d,%edi
ffffffff8020c86a:	e8 c5 e8 00 00       	call   ffffffff8021b134 <__RME_Putchar>
        Abs=-Int;
ffffffff8020c86f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020c873:	48 f7 d8             	neg    %rax
ffffffff8020c876:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        Num=1;
ffffffff8020c87a:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8020c881:	00 
ffffffff8020c882:	eb 10                	jmp    ffffffff8020c894 <RME_Int_Print+0x61>
        Abs=Int;
ffffffff8020c884:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020c888:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        Num=0;
ffffffff8020c88c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020c893:	00 
    Count=0;
ffffffff8020c894:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8020c89b:	00 
    Div=1;
ffffffff8020c89c:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
ffffffff8020c8a3:	00 
    Iter=Abs;
ffffffff8020c8a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c8a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Iter/=10;
ffffffff8020c8ac:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020c8b0:	48 ba 67 66 66 66 66 	movabs $0x6666666666666667,%rdx
ffffffff8020c8b7:	66 66 66 
ffffffff8020c8ba:	48 89 c8             	mov    %rcx,%rax
ffffffff8020c8bd:	48 f7 ea             	imul   %rdx
ffffffff8020c8c0:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c8c3:	48 c1 f8 02          	sar    $0x2,%rax
ffffffff8020c8c7:	48 c1 f9 3f          	sar    $0x3f,%rcx
ffffffff8020c8cb:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020c8ce:	48 29 d0             	sub    %rdx,%rax
ffffffff8020c8d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Count++;
ffffffff8020c8d5:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
        if(Iter!=0)
ffffffff8020c8da:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8020c8df:	74 17                	je     ffffffff8020c8f8 <RME_Int_Print+0xc5>
            Div*=10;
ffffffff8020c8e1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020c8e5:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c8e8:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8020c8ec:	48 01 d0             	add    %rdx,%rax
ffffffff8020c8ef:	48 01 c0             	add    %rax,%rax
ffffffff8020c8f2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        Iter/=10;
ffffffff8020c8f6:	eb b4                	jmp    ffffffff8020c8ac <RME_Int_Print+0x79>
            break;
ffffffff8020c8f8:	90                   	nop
    Num+=Count;
ffffffff8020c8f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c8fd:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    Iter=Abs;
ffffffff8020c901:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c905:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while(Count>0)
ffffffff8020c909:	eb 53                	jmp    ffffffff8020c95e <RME_Int_Print+0x12b>
        Count--;
ffffffff8020c90b:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020c910:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c914:	48 99                	cqto
ffffffff8020c916:	48 f7 7d d8          	idivq  -0x28(%rbp)
ffffffff8020c91a:	83 c0 30             	add    $0x30,%eax
ffffffff8020c91d:	0f be c0             	movsbl %al,%eax
ffffffff8020c920:	89 c7                	mov    %eax,%edi
ffffffff8020c922:	e8 0d e8 00 00       	call   ffffffff8021b134 <__RME_Putchar>
        Iter=Iter%Div;
ffffffff8020c927:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c92b:	48 99                	cqto
ffffffff8020c92d:	48 f7 7d d8          	idivq  -0x28(%rbp)
ffffffff8020c931:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        Div/=10;
ffffffff8020c935:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8020c939:	48 ba 67 66 66 66 66 	movabs $0x6666666666666667,%rdx
ffffffff8020c940:	66 66 66 
ffffffff8020c943:	48 89 c8             	mov    %rcx,%rax
ffffffff8020c946:	48 f7 ea             	imul   %rdx
ffffffff8020c949:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c94c:	48 c1 f8 02          	sar    $0x2,%rax
ffffffff8020c950:	48 c1 f9 3f          	sar    $0x3f,%rcx
ffffffff8020c954:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020c957:	48 29 d0             	sub    %rdx,%rax
ffffffff8020c95a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Count>0)
ffffffff8020c95e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8020c963:	7f a6                	jg     ffffffff8020c90b <RME_Int_Print+0xd8>
    return Num;
ffffffff8020c965:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020c969:	c9                   	leave
ffffffff8020c96a:	c3                   	ret

ffffffff8020c96b <RME_Hex_Print>:
{
ffffffff8020c96b:	f3 0f 1e fa          	endbr64
ffffffff8020c96f:	55                   	push   %rbp
ffffffff8020c970:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c973:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8020c977:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    if(Uint==0U)
ffffffff8020c97b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020c980:	75 14                	jne    ffffffff8020c996 <RME_Hex_Print+0x2b>
        __RME_Putchar('0');
ffffffff8020c982:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020c987:	e8 a8 e7 00 00       	call   ffffffff8021b134 <__RME_Putchar>
        return 1;
ffffffff8020c98c:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020c991:	e9 95 00 00 00       	jmp    ffffffff8020ca2b <RME_Hex_Print+0xc0>
    Count=0U;
ffffffff8020c996:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8020c99d:	00 
    Iter=Uint;
ffffffff8020c99e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020c9a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020c9a6:	eb 0a                	jmp    ffffffff8020c9b2 <RME_Hex_Print+0x47>
        Iter<<=4;
ffffffff8020c9a8:	48 c1 65 f8 04       	shlq   $0x4,-0x8(%rbp)
        Count++;
ffffffff8020c9ad:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020c9b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020c9b6:	48 c1 e8 3c          	shr    $0x3c,%rax
ffffffff8020c9ba:	48 85 c0             	test   %rax,%rax
ffffffff8020c9bd:	74 e9                	je     ffffffff8020c9a8 <RME_Hex_Print+0x3d>
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020c9bf:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff8020c9c4:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff8020c9c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Num=Count;
ffffffff8020c9cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c9d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while(Count>0U)
ffffffff8020c9d4:	eb 4a                	jmp    ffffffff8020ca20 <RME_Hex_Print+0xb5>
        Count--;
ffffffff8020c9d6:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
        Iter=(Uint>>(Count<<2U))&0x0FU;
ffffffff8020c9db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c9df:	c1 e0 02             	shl    $0x2,%eax
ffffffff8020c9e2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020c9e6:	89 c1                	mov    %eax,%ecx
ffffffff8020c9e8:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020c9eb:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c9ee:	83 e0 0f             	and    $0xf,%eax
ffffffff8020c9f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        if(Iter<10U)
ffffffff8020c9f5:	48 83 7d f8 09       	cmpq   $0x9,-0x8(%rbp)
ffffffff8020c9fa:	77 13                	ja     ffffffff8020ca0f <RME_Hex_Print+0xa4>
            __RME_Putchar((rme_s8_t)Iter+'0');
ffffffff8020c9fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca00:	83 c0 30             	add    $0x30,%eax
ffffffff8020ca03:	0f be c0             	movsbl %al,%eax
ffffffff8020ca06:	89 c7                	mov    %eax,%edi
ffffffff8020ca08:	e8 27 e7 00 00       	call   ffffffff8021b134 <__RME_Putchar>
ffffffff8020ca0d:	eb 11                	jmp    ffffffff8020ca20 <RME_Hex_Print+0xb5>
            __RME_Putchar((rme_s8_t)Iter+'A'-10);
ffffffff8020ca0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca13:	83 c0 37             	add    $0x37,%eax
ffffffff8020ca16:	0f be c0             	movsbl %al,%eax
ffffffff8020ca19:	89 c7                	mov    %eax,%edi
ffffffff8020ca1b:	e8 14 e7 00 00       	call   ffffffff8021b134 <__RME_Putchar>
    while(Count>0U)
ffffffff8020ca20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8020ca25:	75 af                	jne    ffffffff8020c9d6 <RME_Hex_Print+0x6b>
    return (rme_cnt_t)Num;
ffffffff8020ca27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff8020ca2b:	c9                   	leave
ffffffff8020ca2c:	c3                   	ret

ffffffff8020ca2d <RME_Str_Print>:
{
ffffffff8020ca2d:	f3 0f 1e fa          	endbr64
ffffffff8020ca31:	55                   	push   %rbp
ffffffff8020ca32:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ca35:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ca39:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020ca3d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ca44:	00 
ffffffff8020ca45:	eb 2f                	jmp    ffffffff8020ca76 <RME_Str_Print+0x49>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020ca47:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ca4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca4f:	48 01 d0             	add    %rdx,%rax
ffffffff8020ca52:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ca55:	84 c0                	test   %al,%al
ffffffff8020ca57:	74 29                	je     ffffffff8020ca82 <RME_Str_Print+0x55>
        __RME_Putchar(String[Count]);
ffffffff8020ca59:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ca5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca61:	48 01 d0             	add    %rdx,%rax
ffffffff8020ca64:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ca67:	0f be c0             	movsbl %al,%eax
ffffffff8020ca6a:	89 c7                	mov    %eax,%edi
ffffffff8020ca6c:	e8 c3 e6 00 00       	call   ffffffff8021b134 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020ca71:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020ca76:	48 81 7d f8 fe 00 00 	cmpq   $0xfe,-0x8(%rbp)
ffffffff8020ca7d:	00 
ffffffff8020ca7e:	76 c7                	jbe    ffffffff8020ca47 <RME_Str_Print+0x1a>
ffffffff8020ca80:	eb 01                	jmp    ffffffff8020ca83 <RME_Str_Print+0x56>
            break;
ffffffff8020ca82:	90                   	nop
    return (rme_cnt_t)Count;
ffffffff8020ca83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020ca87:	c9                   	leave
ffffffff8020ca88:	c3                   	ret

ffffffff8020ca89 <RME_Log>:
{
ffffffff8020ca89:	f3 0f 1e fa          	endbr64
ffffffff8020ca8d:	55                   	push   %rbp
ffffffff8020ca8e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ca91:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ca95:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020ca99:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020ca9d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8020caa1:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    RME_DBG_S("\r\n***\r\nKernel panic - not syncing :\r\n"); \
ffffffff8020caa5:	48 c7 c7 60 87 22 80 	mov    $0xffffffff80228760,%rdi
ffffffff8020caac:	e8 7c ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(File); \
ffffffff8020cab1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cab5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cab8:	e8 70 ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(" , Line "); \
ffffffff8020cabd:	48 c7 c7 86 87 22 80 	mov    $0xffffffff80228786,%rdi
ffffffff8020cac4:	e8 64 ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(Line); \
ffffffff8020cac9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cacd:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cad0:	e8 5e fd ff ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\r\n"); \
ffffffff8020cad5:	48 c7 c7 8f 87 22 80 	mov    $0xffffffff8022878f,%rdi
ffffffff8020cadc:	e8 4c ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(Date); \
ffffffff8020cae1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cae5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cae8:	e8 40 ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(" , "); \
ffffffff8020caed:	48 c7 c7 92 87 22 80 	mov    $0xffffffff80228792,%rdi
ffffffff8020caf4:	e8 34 ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(Time); \
ffffffff8020caf9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cafd:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cb00:	e8 28 ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S("\r\n"); \
ffffffff8020cb05:	48 c7 c7 8f 87 22 80 	mov    $0xffffffff8022878f,%rdi
ffffffff8020cb0c:	e8 1c ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
}
ffffffff8020cb11:	90                   	nop
ffffffff8020cb12:	c9                   	leave
ffffffff8020cb13:	c3                   	ret

ffffffff8020cb14 <_RME_MSB_Generic>:
{
ffffffff8020cb14:	f3 0f 1e fa          	endbr64
ffffffff8020cb18:	55                   	push   %rbp
ffffffff8020cb19:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cb1c:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cb20:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    if(Value>=RME_POW2(32U))
ffffffff8020cb24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
ffffffff8020cb29:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb2d:	73 58                	jae    ffffffff8020cb87 <_RME_MSB_Generic+0x73>
        if(Value>=RME_POW2(48U))
ffffffff8020cb2f:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffff,%rax
ffffffff8020cb36:	ff 00 00 
ffffffff8020cb39:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb3d:	73 24                	jae    ffffffff8020cb63 <_RME_MSB_Generic+0x4f>
            if(Value>=RME_POW2(56U))
ffffffff8020cb3f:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffffff,%rax
ffffffff8020cb46:	ff ff 00 
ffffffff8020cb49:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb4d:	73 0a                	jae    ffffffff8020cb59 <_RME_MSB_Generic+0x45>
                Bit=56U;
ffffffff8020cb4f:	48 c7 45 f8 38 00 00 	movq   $0x38,-0x8(%rbp)
ffffffff8020cb56:	00 
ffffffff8020cb57:	eb 72                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
                Bit=48U;
ffffffff8020cb59:	48 c7 45 f8 30 00 00 	movq   $0x30,-0x8(%rbp)
ffffffff8020cb60:	00 
ffffffff8020cb61:	eb 68                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
            if(Value>=RME_POW2(40U))
ffffffff8020cb63:	48 b8 ff ff ff ff ff 	movabs $0xffffffffff,%rax
ffffffff8020cb6a:	00 00 00 
ffffffff8020cb6d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb71:	73 0a                	jae    ffffffff8020cb7d <_RME_MSB_Generic+0x69>
                Bit=40U;
ffffffff8020cb73:	48 c7 45 f8 28 00 00 	movq   $0x28,-0x8(%rbp)
ffffffff8020cb7a:	00 
ffffffff8020cb7b:	eb 4e                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
                Bit=32U;
ffffffff8020cb7d:	48 c7 45 f8 20 00 00 	movq   $0x20,-0x8(%rbp)
ffffffff8020cb84:	00 
ffffffff8020cb85:	eb 44                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
        if(Value>=RME_POW2(16U))
ffffffff8020cb87:	48 81 7d e8 ff ff 00 	cmpq   $0xffff,-0x18(%rbp)
ffffffff8020cb8e:	00 
ffffffff8020cb8f:	76 1e                	jbe    ffffffff8020cbaf <_RME_MSB_Generic+0x9b>
            if(Value>=RME_POW2(24U))
ffffffff8020cb91:	48 81 7d e8 ff ff ff 	cmpq   $0xffffff,-0x18(%rbp)
ffffffff8020cb98:	00 
ffffffff8020cb99:	76 0a                	jbe    ffffffff8020cba5 <_RME_MSB_Generic+0x91>
                Bit=24U;
ffffffff8020cb9b:	48 c7 45 f8 18 00 00 	movq   $0x18,-0x8(%rbp)
ffffffff8020cba2:	00 
ffffffff8020cba3:	eb 26                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
                Bit=16U;
ffffffff8020cba5:	48 c7 45 f8 10 00 00 	movq   $0x10,-0x8(%rbp)
ffffffff8020cbac:	00 
ffffffff8020cbad:	eb 1c                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
            if(Value>=RME_POW2(8U))
ffffffff8020cbaf:	48 81 7d e8 ff 00 00 	cmpq   $0xff,-0x18(%rbp)
ffffffff8020cbb6:	00 
ffffffff8020cbb7:	76 0a                	jbe    ffffffff8020cbc3 <_RME_MSB_Generic+0xaf>
                Bit=8U;
ffffffff8020cbb9:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
ffffffff8020cbc0:	00 
ffffffff8020cbc1:	eb 08                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
                Bit=0U;
ffffffff8020cbc3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cbca:	00 
    return Table[Value>>Bit]+Bit;
ffffffff8020cbcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cbcf:	89 c2                	mov    %eax,%edx
ffffffff8020cbd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbd5:	89 d1                	mov    %edx,%ecx
ffffffff8020cbd7:	48 d3 e8             	shr    %cl,%rax
ffffffff8020cbda:	0f b6 80 e0 88 22 80 	movzbl -0x7fdd7720(%rax),%eax
ffffffff8020cbe1:	0f b6 d0             	movzbl %al,%edx
ffffffff8020cbe4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cbe8:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020cbeb:	c9                   	leave
ffffffff8020cbec:	c3                   	ret

ffffffff8020cbed <_RME_LSB_Generic>:
{
ffffffff8020cbed:	f3 0f 1e fa          	endbr64
ffffffff8020cbf1:	55                   	push   %rbp
ffffffff8020cbf2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cbf5:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cbf9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    if((Value<<32U)==0U)
ffffffff8020cbfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc01:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020cc05:	48 85 c0             	test   %rax,%rax
ffffffff8020cc08:	75 4f                	jne    ffffffff8020cc59 <_RME_LSB_Generic+0x6c>
        if((Value<<16U)==0U)
ffffffff8020cc0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc0e:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff8020cc12:	48 85 c0             	test   %rax,%rax
ffffffff8020cc15:	75 21                	jne    ffffffff8020cc38 <_RME_LSB_Generic+0x4b>
            if((Value<<8U)==0U)
ffffffff8020cc17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc1b:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8020cc1f:	48 85 c0             	test   %rax,%rax
ffffffff8020cc22:	75 0a                	jne    ffffffff8020cc2e <_RME_LSB_Generic+0x41>
                Bit=56U;
ffffffff8020cc24:	48 c7 45 f8 38 00 00 	movq   $0x38,-0x8(%rbp)
ffffffff8020cc2b:	00 
ffffffff8020cc2c:	eb 78                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
                Bit=48U;
ffffffff8020cc2e:	48 c7 45 f8 30 00 00 	movq   $0x30,-0x8(%rbp)
ffffffff8020cc35:	00 
ffffffff8020cc36:	eb 6e                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
            if((Value<<24U)==0U)
ffffffff8020cc38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc3c:	48 c1 e0 18          	shl    $0x18,%rax
ffffffff8020cc40:	48 85 c0             	test   %rax,%rax
ffffffff8020cc43:	75 0a                	jne    ffffffff8020cc4f <_RME_LSB_Generic+0x62>
                Bit=40U;
ffffffff8020cc45:	48 c7 45 f8 28 00 00 	movq   $0x28,-0x8(%rbp)
ffffffff8020cc4c:	00 
ffffffff8020cc4d:	eb 57                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
                Bit=32U;
ffffffff8020cc4f:	48 c7 45 f8 20 00 00 	movq   $0x20,-0x8(%rbp)
ffffffff8020cc56:	00 
ffffffff8020cc57:	eb 4d                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
        if((Value<<48U)==0U)
ffffffff8020cc59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc5d:	48 c1 e0 30          	shl    $0x30,%rax
ffffffff8020cc61:	48 85 c0             	test   %rax,%rax
ffffffff8020cc64:	75 21                	jne    ffffffff8020cc87 <_RME_LSB_Generic+0x9a>
            if((Value<<40U)==0U)
ffffffff8020cc66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc6a:	48 c1 e0 28          	shl    $0x28,%rax
ffffffff8020cc6e:	48 85 c0             	test   %rax,%rax
ffffffff8020cc71:	75 0a                	jne    ffffffff8020cc7d <_RME_LSB_Generic+0x90>
                Bit=24U;
ffffffff8020cc73:	48 c7 45 f8 18 00 00 	movq   $0x18,-0x8(%rbp)
ffffffff8020cc7a:	00 
ffffffff8020cc7b:	eb 29                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
                Bit=16U;
ffffffff8020cc7d:	48 c7 45 f8 10 00 00 	movq   $0x10,-0x8(%rbp)
ffffffff8020cc84:	00 
ffffffff8020cc85:	eb 1f                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
            if((Value<<56U)==0U)
ffffffff8020cc87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc8b:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff8020cc8f:	48 85 c0             	test   %rax,%rax
ffffffff8020cc92:	75 0a                	jne    ffffffff8020cc9e <_RME_LSB_Generic+0xb1>
                Bit=8U;
ffffffff8020cc94:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
ffffffff8020cc9b:	00 
ffffffff8020cc9c:	eb 08                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
                Bit=0U;
ffffffff8020cc9e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cca5:	00 
    return Table[(rme_u8_t)(Value>>Bit)]+Bit;
ffffffff8020cca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ccaa:	89 c2                	mov    %eax,%edx
ffffffff8020ccac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ccb0:	89 d1                	mov    %edx,%ecx
ffffffff8020ccb2:	48 d3 e8             	shr    %cl,%rax
ffffffff8020ccb5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ccb8:	48 98                	cltq
ffffffff8020ccba:	0f b6 80 e0 89 22 80 	movzbl -0x7fdd7620(%rax),%eax
ffffffff8020ccc1:	0f b6 d0             	movzbl %al,%edx
ffffffff8020ccc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ccc8:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020cccb:	c9                   	leave
ffffffff8020cccc:	c3                   	ret

ffffffff8020cccd <_RME_Comp_Swap_Single>:
{
ffffffff8020cccd:	f3 0f 1e fa          	endbr64
ffffffff8020ccd1:	55                   	push   %rbp
ffffffff8020ccd2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ccd5:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020ccd9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020ccdd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020cce1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    if(*Ptr==Old)
ffffffff8020cce5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cce9:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ccec:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8020ccf0:	75 12                	jne    ffffffff8020cd04 <_RME_Comp_Swap_Single+0x37>
        *Ptr=New;
ffffffff8020ccf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ccf6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ccfa:	48 89 10             	mov    %rdx,(%rax)
        return 1U;
ffffffff8020ccfd:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020cd02:	eb 05                	jmp    ffffffff8020cd09 <_RME_Comp_Swap_Single+0x3c>
    return 0U;
ffffffff8020cd04:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cd09:	c9                   	leave
ffffffff8020cd0a:	c3                   	ret

ffffffff8020cd0b <_RME_Fetch_Add_Single>:
{
ffffffff8020cd0b:	f3 0f 1e fa          	endbr64
ffffffff8020cd0f:	55                   	push   %rbp
ffffffff8020cd10:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd13:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cd17:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cd1b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    Old=(rme_cnt_t)(*Ptr);
ffffffff8020cd1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd23:	48 8b 00             	mov    (%rax),%rax
ffffffff8020cd26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    *Ptr=(rme_ptr_t)(Old+Addend);
ffffffff8020cd2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cd32:	48 01 d0             	add    %rdx,%rax
ffffffff8020cd35:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cd38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd3c:	48 89 10             	mov    %rdx,(%rax)
    return (rme_ptr_t)Old;
ffffffff8020cd3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020cd43:	c9                   	leave
ffffffff8020cd44:	c3                   	ret

ffffffff8020cd45 <_RME_Fetch_And_Single>:
{
ffffffff8020cd45:	f3 0f 1e fa          	endbr64
ffffffff8020cd49:	55                   	push   %rbp
ffffffff8020cd4a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd4d:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cd51:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cd55:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    Old=*Ptr;
ffffffff8020cd59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd5d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020cd60:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    *Ptr=Old&Operand;
ffffffff8020cd64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd68:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff8020cd6c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cd6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd73:	48 89 10             	mov    %rdx,(%rax)
    return Old;
ffffffff8020cd76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020cd7a:	c9                   	leave
ffffffff8020cd7b:	c3                   	ret

ffffffff8020cd7c <_RME_List_Crt>:
{
ffffffff8020cd7c:	f3 0f 1e fa          	endbr64
ffffffff8020cd80:	55                   	push   %rbp
ffffffff8020cd81:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd84:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020cd88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    Head->Prev=Head;
ffffffff8020cd8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd90:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd94:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Head->Next=Head;
ffffffff8020cd98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cda0:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cda3:	90                   	nop
ffffffff8020cda4:	c9                   	leave
ffffffff8020cda5:	c3                   	ret

ffffffff8020cda6 <_RME_List_Del>:
{
ffffffff8020cda6:	f3 0f 1e fa          	endbr64
ffffffff8020cdaa:	55                   	push   %rbp
ffffffff8020cdab:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cdae:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8020cdb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020cdb6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Next->Prev=Prev;
ffffffff8020cdba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cdbe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cdc2:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=Next;
ffffffff8020cdc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cdca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020cdce:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cdd1:	90                   	nop
ffffffff8020cdd2:	c9                   	leave
ffffffff8020cdd3:	c3                   	ret

ffffffff8020cdd4 <_RME_List_Ins>:
Return      : None.
******************************************************************************/
void _RME_List_Ins(volatile struct RME_List* New,
                   volatile struct RME_List* Prev,
                   volatile struct RME_List* Next)
{
ffffffff8020cdd4:	f3 0f 1e fa          	endbr64
ffffffff8020cdd8:	55                   	push   %rbp
ffffffff8020cdd9:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cddc:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cde0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020cde4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020cde8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    Next->Prev=New;
ffffffff8020cdec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cdf0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cdf4:	48 89 50 08          	mov    %rdx,0x8(%rax)
    New->Next=Next;
ffffffff8020cdf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cdfc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ce00:	48 89 10             	mov    %rdx,(%rax)
    New->Prev=Prev;
ffffffff8020ce03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce07:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020ce0b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=New;
ffffffff8020ce0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ce13:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020ce17:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020ce1a:	90                   	nop
ffffffff8020ce1b:	c9                   	leave
ffffffff8020ce1c:	c3                   	ret

ffffffff8020ce1d <_RME_Clear>:
Output      : None.
Return      : None.
******************************************************************************/
void _RME_Clear(void* Addr,
                rme_ptr_t Size)
{
ffffffff8020ce1d:	f3 0f 1e fa          	endbr64
ffffffff8020ce21:	55                   	push   %rbp
ffffffff8020ce22:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ce25:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ce29:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020ce2d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Count;

    for(Count=0U;Count<Size;Count++)
ffffffff8020ce31:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ce38:	00 
ffffffff8020ce39:	eb 13                	jmp    ffffffff8020ce4e <_RME_Clear+0x31>
    {
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ce3b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ce3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce43:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce46:	c6 00 00             	movb   $0x0,(%rax)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ce49:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020ce4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce52:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff8020ce56:	72 e3                	jb     ffffffff8020ce3b <_RME_Clear+0x1e>
    }
}
ffffffff8020ce58:	90                   	nop
ffffffff8020ce59:	90                   	nop
ffffffff8020ce5a:	c9                   	leave
ffffffff8020ce5b:	c3                   	ret

ffffffff8020ce5c <_RME_Memcmp>:
                          value. If Ptr1==Ptr2, then return 0;
******************************************************************************/
rme_ret_t _RME_Memcmp(const void* Ptr1,
                      const void* Ptr2,
                      rme_ptr_t Num)
{
ffffffff8020ce5c:	f3 0f 1e fa          	endbr64
ffffffff8020ce60:	55                   	push   %rbp
ffffffff8020ce61:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ce64:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8020ce68:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020ce6c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020ce70:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    const rme_s8_t* Dst;
    const rme_s8_t* Src;
    rme_ptr_t Count;

    Dst=(const rme_s8_t*)Ptr1;
ffffffff8020ce74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ce78:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Src=(const rme_s8_t*)Ptr2;
ffffffff8020ce7c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ce80:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    for(Count=0U;Count<Num;Count++)
ffffffff8020ce84:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ce8b:	00 
ffffffff8020ce8c:	eb 4e                	jmp    ffffffff8020cedc <_RME_Memcmp+0x80>
    {
        if(Dst[Count]!=Src[Count])
ffffffff8020ce8e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020ce92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce96:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce99:	0f b6 10             	movzbl (%rax),%edx
ffffffff8020ce9c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020cea0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cea4:	48 01 c8             	add    %rcx,%rax
ffffffff8020cea7:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ceaa:	38 c2                	cmp    %al,%dl
ffffffff8020ceac:	74 29                	je     ffffffff8020ced7 <_RME_Memcmp+0x7b>
        {
            RME_COV_MARKER();
            
            return Dst[Count]-Src[Count];
ffffffff8020ceae:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020ceb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ceb6:	48 01 d0             	add    %rdx,%rax
ffffffff8020ceb9:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020cebc:	0f be d0             	movsbl %al,%edx
ffffffff8020cebf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020cec3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cec7:	48 01 c8             	add    %rcx,%rax
ffffffff8020ceca:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020cecd:	0f be c0             	movsbl %al,%eax
ffffffff8020ced0:	29 c2                	sub    %eax,%edx
ffffffff8020ced2:	48 63 c2             	movslq %edx,%rax
ffffffff8020ced5:	eb 14                	jmp    ffffffff8020ceeb <_RME_Memcmp+0x8f>
    for(Count=0U;Count<Num;Count++)
ffffffff8020ced7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020cedc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cee0:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff8020cee4:	72 a8                	jb     ffffffff8020ce8e <_RME_Memcmp+0x32>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff8020cee6:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020ceeb:	c9                   	leave
ffffffff8020ceec:	c3                   	ret

ffffffff8020ceed <_RME_Memcpy>:
Return      : None.
******************************************************************************/
void _RME_Memcpy(void* Dst,
                 void* Src,
                 rme_ptr_t Num)
{
ffffffff8020ceed:	f3 0f 1e fa          	endbr64
ffffffff8020cef1:	55                   	push   %rbp
ffffffff8020cef2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cef5:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8020cef9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cefd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020cf01:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    rme_ptr_t Count;

    for(Count=0U;Count<Num;Count++)
ffffffff8020cf05:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cf0c:	00 
ffffffff8020cf0d:	eb 20                	jmp    ffffffff8020cf2f <_RME_Memcpy+0x42>
    {
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020cf0f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020cf13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cf17:	48 01 d0             	add    %rdx,%rax
ffffffff8020cf1a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020cf1e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cf22:	48 01 ca             	add    %rcx,%rdx
ffffffff8020cf25:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020cf28:	88 02                	mov    %al,(%rdx)
    for(Count=0U;Count<Num;Count++)
ffffffff8020cf2a:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020cf2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cf33:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020cf37:	72 d6                	jb     ffffffff8020cf0f <_RME_Memcpy+0x22>
    }
}
ffffffff8020cf39:	90                   	nop
ffffffff8020cf3a:	90                   	nop
ffffffff8020cf3b:	c9                   	leave
ffffffff8020cf3c:	c3                   	ret

ffffffff8020cf3d <_RME_Diff>:
Output      : None.
Return      : rme_ptr_t - The distance.
******************************************************************************/
rme_ptr_t _RME_Diff(rme_ptr_t Num1,
                    rme_ptr_t Num2)
{
ffffffff8020cf3d:	f3 0f 1e fa          	endbr64
ffffffff8020cf41:	55                   	push   %rbp
ffffffff8020cf42:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cf45:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cf49:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cf4d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Diff1;
    rme_ptr_t Diff2;
    
    Diff1=Num1-Num2;
ffffffff8020cf51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cf55:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
ffffffff8020cf59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Diff2=Num2-Num1;
ffffffff8020cf5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cf61:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff8020cf65:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    if(Diff1>Diff2)
ffffffff8020cf69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cf6d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8020cf71:	73 06                	jae    ffffffff8020cf79 <_RME_Diff+0x3c>
    {
        RME_COV_MARKER();
        
        return Diff2;
ffffffff8020cf73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cf77:	eb 04                	jmp    ffffffff8020cf7d <_RME_Diff+0x40>
    }
    else
    {
        RME_COV_MARKER();
        
        return Diff1;
ffffffff8020cf79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
}
ffffffff8020cf7d:	c9                   	leave
ffffffff8020cf7e:	c3                   	ret

ffffffff8020cf7f <RME_Kmain>:
Input       : None.
Output      : None.
Return      : rme_ret_t - This function never returns.
******************************************************************************/
rme_ret_t RME_Kmain(void)
{
ffffffff8020cf7f:	f3 0f 1e fa          	endbr64
ffffffff8020cf83:	55                   	push   %rbp
ffffffff8020cf84:	48 89 e5             	mov    %rsp,%rbp
    /* Disable all interrupts first */
    __RME_Int_Disable();
ffffffff8020cf87:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020cf8c:	e8 78 f8 ff ff       	call   ffffffff8020c809 <__RME_Int_Disable>
    /* Some low-level kernel assertions */
    _RME_Lowlvl_Check();
ffffffff8020cf91:	e8 1c 00 00 00       	call   ffffffff8020cfb2 <_RME_Lowlvl_Check>
    /* Hardware low-level init */
    __RME_Lowlvl_Init();
ffffffff8020cf96:	e8 18 7a 01 00       	call   ffffffff802249b3 <__RME_Lowlvl_Init>
    /* Initialize the kernel page tables or memory mappings */
    __RME_Pgt_Kom_Init();
ffffffff8020cf9b:	e8 54 7a 01 00       	call   ffffffff802249f4 <__RME_Pgt_Kom_Init>
    /* Initialize the kernel object allocation table - default init */
    _RME_Kot_Init(RME_KOT_WORD_NUM);
ffffffff8020cfa0:	bf 04 00 00 00       	mov    $0x4,%edi
ffffffff8020cfa5:	e8 34 53 00 00       	call   ffffffff802122de <_RME_Kot_Init>
    /* Boot into the first process */
    __RME_Boot();
ffffffff8020cfaa:	e8 05 84 01 00       	call   ffffffff802253b4 <__RME_Boot>
    while(1);
ffffffff8020cfaf:	90                   	nop
ffffffff8020cfb0:	eb fd                	jmp    ffffffff8020cfaf <RME_Kmain+0x30>

ffffffff8020cfb2 <_RME_Lowlvl_Check>:
Input       : None.
Output      : None.
Return      : rme_ret_t - Always 0.
******************************************************************************/
static rme_ret_t _RME_Lowlvl_Check(void)
{
ffffffff8020cfb2:	f3 0f 1e fa          	endbr64
ffffffff8020cfb6:	55                   	push   %rbp
ffffffff8020cfb7:	48 89 e5             	mov    %rsp,%rbp
    /* Kernel memory allocation minimal size aligned to word boundary */
    RME_ASSERT(RME_KOM_SLOT_ORDER>=RME_WORD_ORDER-3U);
    /* Make sure the number of priorities do not exceed half-word boundary */
    RME_ASSERT(RME_PREEMPT_PRIO_NUM<=RME_POW2(RME_WORD_BIT>>1));
    
    return 0;
ffffffff8020cfba:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cfbf:	5d                   	pop    %rbp
ffffffff8020cfc0:	c3                   	ret

ffffffff8020cfc1 <_RME_Svc_Handler>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Svc_Handler(struct RME_Reg_Struct* Reg)
{
ffffffff8020cfc1:	f3 0f 1e fa          	endbr64
ffffffff8020cfc5:	55                   	push   %rbp
ffffffff8020cfc6:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cfc9:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020cfcd:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    struct RME_Inv_Struct* Inv_Top;
    struct RME_Cap_Cpt* Cpt;

    /* Get the system call parameters from the system call */
    __RME_Svc_Param_Get(Reg, &Svc, &Cid, Param);
ffffffff8020cfd1:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
ffffffff8020cfd5:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
ffffffff8020cfd9:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
ffffffff8020cfdd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020cfe1:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cfe4:	e8 1b a0 01 00       	call   ffffffff80227004 <__RME_Svc_Param_Get>
    /* System call number takes [5:0] bits */
    Svc_Num=Svc&RME_MASK_END(5U);
ffffffff8020cfe9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020cfed:	83 e0 3f             	and    $0x3f,%eax
ffffffff8020cff0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* Ultra-fast path - synchronous invocation returning */
    if(Svc_Num==RME_SVC_INV_RET)
ffffffff8020cff4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8020cff9:	75 48                	jne    ffffffff8020d043 <_RME_Svc_Handler+0x82>
    {
        RME_COV_MARKER();
        
        Retval=_RME_Inv_Ret(Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
ffffffff8020cffb:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8020cfff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d003:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020d008:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d00b:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d00e:	e8 90 d9 00 00       	call   ffffffff8021a9a3 <_RME_Inv_Ret>
ffffffff8020d013:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                            Param[0],                                       /* rme_ptr_t Retval */
                            0U);                                            /* rme_ptr_t Is_Exc */
        RME_SWITCH_RETURN(Reg, Retval);
ffffffff8020d017:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d01b:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d01f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d022:	48 85 c0             	test   %rax,%rax
ffffffff8020d025:	0f 84 18 09 00 00    	je     ffffffff8020d943 <_RME_Svc_Handler+0x982>
ffffffff8020d02b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d02f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d033:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d036:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d039:	e8 e5 9f 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
ffffffff8020d03e:	e9 00 09 00 00       	jmp    ffffffff8020d943 <_RME_Svc_Handler+0x982>
        /* No action required */
    }
    
    /* Get our current capability table. No need to check whether it is frozen
     * because it can't be deleted anyway */
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020d043:	e8 f7 e7 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020d048:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020d04c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff8020d050:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d054:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8020d05b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d05f:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8020d065:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d068:	74 0d                	je     ffffffff8020d077 <_RME_Svc_Handler+0xb6>
ffffffff8020d06a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d06e:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8020d075:	eb 05                	jmp    ffffffff8020d07c <_RME_Svc_Handler+0xbb>
ffffffff8020d077:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020d07c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d080:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020d085:	75 12                	jne    ffffffff8020d099 <_RME_Svc_Handler+0xd8>
    {
        RME_COV_MARKER();
        
        Cpt=Thd_Cur->Sched.Prc->Cpt;
ffffffff8020d087:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d08b:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8020d08f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020d093:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020d097:	eb 10                	jmp    ffffffff8020d0a9 <_RME_Svc_Handler+0xe8>
    }
    else
    {
        RME_COV_MARKER();
        
        Cpt=Inv_Top->Prc->Cpt;
ffffffff8020d099:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020d09d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d0a1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020d0a5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }

    /* Fast path - synchronous invocation activation */
    if(Svc_Num==RME_SVC_INV_ACT)
ffffffff8020d0a9:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
ffffffff8020d0ae:	75 51                	jne    ffffffff8020d101 <_RME_Svc_Handler+0x140>
    {
        RME_COV_MARKER();
        
        Retval=_RME_Inv_Act(Cpt,
ffffffff8020d0b0:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                            Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
                            (rme_cid_t)Param[0],                            /* rme_cid_t Cap_Inv */
ffffffff8020d0b4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
        Retval=_RME_Inv_Act(Cpt,
ffffffff8020d0b8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d0bb:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d0bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d0c3:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d0c6:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d0c9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d0cc:	e8 82 d5 00 00       	call   ffffffff8021a653 <_RME_Inv_Act>
ffffffff8020d0d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                            Param[1]);                                      /* rme_ptr_t Param */
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d0d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d0d9:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d0dd:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d0e0:	48 85 c0             	test   %rax,%rax
ffffffff8020d0e3:	0f 84 5a 08 00 00    	je     ffffffff8020d943 <_RME_Svc_Handler+0x982>
ffffffff8020d0e9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d0ed:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d0f1:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d0f4:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d0f7:	e8 27 9f 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
ffffffff8020d0fc:	e9 42 08 00 00       	jmp    ffffffff8020d943 <_RME_Svc_Handler+0x982>
     * of these functions shall be: If the function is successful, they shall
     * perform the return value saving on proper register stacks by themselves;
     * if the function fails, it should not conduct such return value saving.
     * These paths are less optimized than synchronous invocation, but are still
     * optimized anyway. */
    switch(Svc_Num)
ffffffff8020d101:	48 83 7d e8 09       	cmpq   $0x9,-0x18(%rbp)
ffffffff8020d106:	0f 87 03 03 00 00    	ja     ffffffff8020d40f <_RME_Svc_Handler+0x44e>
ffffffff8020d10c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d110:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020d114:	48 05 98 87 22 80    	add    $0xffffffff80228798,%rax
ffffffff8020d11a:	48 8b 00             	mov    (%rax),%rax
ffffffff8020d11d:	3e ff e0             	notrack jmp *%rax
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Snd(Cpt,
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d120:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Snd(Cpt,
ffffffff8020d124:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d127:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff8020d12b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d12f:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d132:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d135:	e8 75 be 00 00       	call   ffffffff80218faf <_RME_Sig_Snd>
ffffffff8020d13a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d13e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d142:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d146:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d149:	48 85 c0             	test   %rax,%rax
ffffffff8020d14c:	0f 84 f1 07 00 00    	je     ffffffff8020d943 <_RME_Svc_Handler+0x982>
ffffffff8020d152:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d156:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d15a:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d15d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d160:	e8 be 9e 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
ffffffff8020d165:	e9 d9 07 00 00       	jmp    ffffffff8020d943 <_RME_Svc_Handler+0x982>
        /* Receive from a signal endpoint */
        case RME_SVC_SIG_RCV:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff8020d16a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Sig */
ffffffff8020d16e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff8020d172:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d175:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d179:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d17d:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d180:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d183:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d186:	e8 a1 c1 00 00       	call   ffffffff8021932c <_RME_Sig_Rcv>
ffffffff8020d18b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Option */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d18f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d193:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d197:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d19a:	48 85 c0             	test   %rax,%rax
ffffffff8020d19d:	0f 84 a0 07 00 00    	je     ffffffff8020d943 <_RME_Svc_Handler+0x982>
ffffffff8020d1a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d1a7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d1ab:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d1ae:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d1b1:	e8 6d 9e 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
ffffffff8020d1b6:	e9 88 07 00 00       	jmp    ffffffff8020d943 <_RME_Svc_Handler+0x982>
        /* Call kernel functions */
        case RME_SVC_KFN:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d1bb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020d1bf:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Kfn */
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Func_ID */
                                RME_PARAM_D1(Param[0]),                     /* rme_ptr_t Sub_ID */
ffffffff8020d1c3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d1c7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d1cb:	48 89 c7             	mov    %rax,%rdi
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Func_ID */
ffffffff8020d1ce:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d1d2:	41 89 c3             	mov    %eax,%r11d
ffffffff8020d1d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d1d9:	49 89 c2             	mov    %rax,%r10
ffffffff8020d1dc:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d1e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d1e4:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d1e8:	52                   	push   %rdx
ffffffff8020d1e9:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d1ec:	49 89 f8             	mov    %rdi,%r8
ffffffff8020d1ef:	4c 89 d9             	mov    %r11,%rcx
ffffffff8020d1f2:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d1f5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d1f8:	e8 3e dc 00 00       	call   ffffffff8021ae3b <_RME_Kfn_Act>
ffffffff8020d1fd:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d201:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1],                                   /* rme_ptr_t Param1 */
                                Param[2]);                                  /* rme_ptr_t Param2 */
            RME_SWITCH_RETURN(Reg, Retval);
ffffffff8020d205:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d209:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d20d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d210:	48 85 c0             	test   %rax,%rax
ffffffff8020d213:	0f 84 2a 07 00 00    	je     ffffffff8020d943 <_RME_Svc_Handler+0x982>
ffffffff8020d219:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d21d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d221:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d224:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d227:	e8 f7 9d 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
ffffffff8020d22c:	e9 12 07 00 00       	jmp    ffffffff8020d943 <_RME_Svc_Handler+0x982>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Free(Cpt,
                                       Reg,                                 /* volatile struct RME_Reg_Struct* Reg */
                                       (rme_cid_t)Param[0]);                /* rme_cid_t Cap_Thd */
ffffffff8020d231:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Free(Cpt,
ffffffff8020d235:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d238:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff8020d23c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d240:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d243:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d246:	e8 01 98 00 00       	call   ffffffff80216a4c <_RME_Thd_Sched_Free>
ffffffff8020d24b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d24f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d253:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d257:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d25a:	48 85 c0             	test   %rax,%rax
ffffffff8020d25d:	0f 84 e0 06 00 00    	je     ffffffff8020d943 <_RME_Svc_Handler+0x982>
ffffffff8020d263:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d267:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d26b:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d26e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d271:	e8 ad 9d 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
ffffffff8020d276:	e9 c8 06 00 00       	jmp    ffffffff8020d943 <_RME_Svc_Handler+0x982>
        /* Changing thread execution context */
        case RME_SVC_THD_EXEC_SET:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Exec_Set(Cpt,
ffffffff8020d27b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8020d27f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff8020d283:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020d287:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d28b:	49 89 c2             	mov    %rax,%r10
ffffffff8020d28e:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d292:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d296:	49 89 f9             	mov    %rdi,%r9
ffffffff8020d299:	49 89 c8             	mov    %rcx,%r8
ffffffff8020d29c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d29f:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d2a2:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d2a5:	e8 84 9b 00 00       	call   ffffffff80216e2e <_RME_Thd_Exec_Set>
ffffffff8020d2aa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                     Reg,                                   /* volatile struct RME_Reg_Struct* Reg */
                                     (rme_cid_t)Cid,                        /* rme_cid_t Cap_Thd */
                                     Param[0],                              /* rme_ptr_t Entry */
                                     Param[1],                              /* rme_ptr_t Stack */
                                     Param[2]);                             /* rme_ptr_t Param */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d2ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d2b2:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d2b6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d2b9:	48 85 c0             	test   %rax,%rax
ffffffff8020d2bc:	0f 84 81 06 00 00    	je     ffffffff8020d943 <_RME_Svc_Handler+0x982>
ffffffff8020d2c2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d2c6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d2ca:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d2cd:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d2d0:	e8 4e 9d 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
ffffffff8020d2d5:	e9 69 06 00 00       	jmp    ffffffff8020d943 <_RME_Svc_Handler+0x982>
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Thd0 */
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
                                       (rme_cid_t)RME_PARAM_D0(Param[1]),   /* rme_cid_t Cap_Thd1 */
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
                                       (rme_cid_t)RME_PARAM_D0(Param[2]),   /* rme_cid_t Cap_Thd2 */
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff8020d2da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2de:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2e2:	48 89 c7             	mov    %rax,%rdi
                                       (rme_cid_t)RME_PARAM_D0(Param[2]),   /* rme_cid_t Cap_Thd2 */
ffffffff8020d2e5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2e9:	41 89 c1             	mov    %eax,%r9d
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
ffffffff8020d2ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2f0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2f4:	48 89 c1             	mov    %rax,%rcx
                                       (rme_cid_t)RME_PARAM_D0(Param[1]),   /* rme_cid_t Cap_Thd1 */
ffffffff8020d2f7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2fb:	41 89 c3             	mov    %eax,%r11d
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
ffffffff8020d2fe:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d302:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d306:	49 89 c0             	mov    %rax,%r8
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Thd0 */
ffffffff8020d309:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d30d:	41 89 c2             	mov    %eax,%r10d
ffffffff8020d310:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020d314:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d318:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d31c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d320:	57                   	push   %rdi
ffffffff8020d321:	41 51                	push   %r9
ffffffff8020d323:	51                   	push   %rcx
ffffffff8020d324:	4d 89 d9             	mov    %r11,%r9
ffffffff8020d327:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d32a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d32d:	e8 24 9e 00 00       	call   ffffffff80217156 <_RME_Thd_Sched_Prio>
ffffffff8020d332:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d336:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d33a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d33e:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d342:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d345:	48 85 c0             	test   %rax,%rax
ffffffff8020d348:	0f 84 f5 05 00 00    	je     ffffffff8020d943 <_RME_Svc_Handler+0x982>
ffffffff8020d34e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d352:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d356:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d359:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d35c:	e8 c2 9c 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
ffffffff8020d361:	e9 dd 05 00 00       	jmp    ffffffff8020d943 <_RME_Svc_Handler+0x982>
        /* Transfer time to a thread */
        case RME_SVC_THD_TIME_XFER:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d366:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                      Reg,                                  /* volatile struct RME_Reg_Struct* Reg */
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
                                      (rme_cid_t)Param[1],                  /* rme_cid_t Cap_Thd_Src */
ffffffff8020d36a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d36e:	48 89 c1             	mov    %rax,%rcx
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
ffffffff8020d371:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d375:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d378:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d37c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d380:	49 89 d0             	mov    %rdx,%r8
ffffffff8020d383:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d386:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d389:	e8 42 a5 00 00       	call   ffffffff802178d0 <_RME_Thd_Time_Xfer>
ffffffff8020d38e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                      Param[2]);                            /* rme_ptr_t Time */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d392:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d396:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d39a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d39d:	48 85 c0             	test   %rax,%rax
ffffffff8020d3a0:	0f 84 9d 05 00 00    	je     ffffffff8020d943 <_RME_Svc_Handler+0x982>
ffffffff8020d3a6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d3aa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d3ae:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d3b1:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3b4:	e8 6a 9c 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
ffffffff8020d3b9:	e9 85 05 00 00       	jmp    ffffffff8020d943 <_RME_Svc_Handler+0x982>
        /* Switch to another thread */
        case RME_SVC_THD_SWT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Swt(Cpt,
ffffffff8020d3be:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Thd */
ffffffff8020d3c2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Swt(Cpt,
ffffffff8020d3c6:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3c9:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d3cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d3d1:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d3d4:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d3d7:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3da:	e8 62 ac 00 00       	call   ffffffff80218041 <_RME_Thd_Swt>
ffffffff8020d3df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Full_Yield */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d3e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d3e7:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d3eb:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d3ee:	48 85 c0             	test   %rax,%rax
ffffffff8020d3f1:	0f 84 4c 05 00 00    	je     ffffffff8020d943 <_RME_Svc_Handler+0x982>
ffffffff8020d3f7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d3fb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d3ff:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d402:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d405:	e8 19 9c 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
ffffffff8020d40a:	e9 34 05 00 00       	jmp    ffffffff8020d943 <_RME_Svc_Handler+0x982>
        }
        default:
        {
            RME_COV_MARKER();
            break;
ffffffff8020d40f:	90                   	nop
        }
    } 

    /* It is guaranteed that these functions will never cause a context switch */
    switch(Svc_Num)
ffffffff8020d410:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d414:	48 83 e8 0a          	sub    $0xa,%rax
ffffffff8020d418:	48 83 f8 17          	cmp    $0x17,%rax
ffffffff8020d41c:	0f 87 05 05 00 00    	ja     ffffffff8020d927 <_RME_Svc_Handler+0x966>
ffffffff8020d422:	48 8b 04 c5 e8 87 22 	mov    -0x7fdd7818(,%rax,8),%rax
ffffffff8020d429:	80 
ffffffff8020d42a:	3e ff e0             	notrack jmp *%rax
    {
        /* Capability table */
        case RME_SVC_CPT_CRT:
        {
            RME_COV_MARKER();
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d42d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8020d431:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Crt */
ffffffff8020d435:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d439:	41 89 c2             	mov    %eax,%r10d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d43c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d440:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d444:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d447:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d44b:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d44e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d452:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d455:	49 89 d0             	mov    %rdx,%r8
ffffffff8020d458:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d45b:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d45e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d461:	e8 8c 0a 00 00       	call   ffffffff8020def2 <_RME_Cpt_Crt>
ffffffff8020d466:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1],                                   /* rme_ptr_t Raddr */
                                Param[2]);                                  /* rme_ptr_t Entry_Num */
            break;
ffffffff8020d46a:	e9 c1 04 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Del */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Cpt */
ffffffff8020d46f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Del(Cpt,
ffffffff8020d473:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d476:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d47a:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d47d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d481:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d484:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d487:	e8 b3 10 00 00       	call   ffffffff8020e53f <_RME_Cpt_Del>
ffffffff8020d48c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d490:	e9 9b 04 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Frz(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Frz */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Frz */
ffffffff8020d495:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Frz(Cpt,
ffffffff8020d499:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d49c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d4a0:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d4a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d4a7:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d4aa:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d4ad:	e8 b4 14 00 00       	call   ffffffff8020e966 <_RME_Cpt_Frz>
ffffffff8020d4b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d4b6:	e9 75 04 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Cpt_Src */
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
                                Param[2],                                   /* rme_ptr_t Flag */
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff8020d4bb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d4bf:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020d4c3:	48 89 c2             	mov    %rax,%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d4ca:	48 09 c2             	or     %rax,%rdx
ffffffff8020d4cd:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
ffffffff8020d4d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4d5:	41 89 c0             	mov    %eax,%r8d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Cpt_Src */
ffffffff8020d4d8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d4dc:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4e0:	49 89 c2             	mov    %rax,%r10
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
ffffffff8020d4e3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4e7:	89 c7                	mov    %eax,%edi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
ffffffff8020d4e9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d4ed:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4f1:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d4f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d4f8:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d4fc:	52                   	push   %rdx
ffffffff8020d4fd:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d500:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d503:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d506:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d509:	e8 9a 17 00 00       	call   ffffffff8020eca8 <_RME_Cpt_Add>
ffffffff8020d50e:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d512:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d516:	e9 15 04 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Rem(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Rem */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Rem */
ffffffff8020d51b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Rem(Cpt,
ffffffff8020d51f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d522:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d526:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d529:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d52d:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d530:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d533:	e8 a9 20 00 00       	call   ffffffff8020f5e1 <_RME_Cpt_Rem>
ffffffff8020d538:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d53c:	e9 ef 03 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
#if(RME_PGT_RAW_ENABLE==0U)
        case RME_SVC_PGT_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d541:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d545:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020d549:	48 89 c7             	mov    %rax,%rdi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
                                Param[1],                                   /* rme_ptr_t Raddr */
                                Param[2]&RME_MASK_BEGIN(1U),                /* rme_ptr_t Base */
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
                                RME_PARAM_Q0(Param[0]),                     /* rme_ptr_t Size_Order */
ffffffff8020d54c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d550:	0f b7 c8             	movzwl %ax,%ecx
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
ffffffff8020d553:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d557:	83 e0 01             	and    $0x1,%eax
ffffffff8020d55a:	48 89 c6             	mov    %rax,%rsi
                                Param[2]&RME_MASK_BEGIN(1U),                /* rme_ptr_t Base */
ffffffff8020d55d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d561:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
ffffffff8020d565:	49 89 c1             	mov    %rax,%r9
ffffffff8020d568:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff8020d56c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d570:	48 c1 e8 10          	shr    $0x10,%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d574:	0f b7 d0             	movzwl %ax,%edx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d577:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d57b:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d57f:	49 89 c3             	mov    %rax,%r11
ffffffff8020d582:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d586:	49 89 c2             	mov    %rax,%r10
ffffffff8020d589:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d58d:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d591:	57                   	push   %rdi
ffffffff8020d592:	51                   	push   %rcx
ffffffff8020d593:	56                   	push   %rsi
ffffffff8020d594:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d597:	4c 89 da             	mov    %r11,%rdx
ffffffff8020d59a:	4c 89 d6             	mov    %r10,%rsi
ffffffff8020d59d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d5a0:	e8 80 2f 00 00       	call   ffffffff80210525 <_RME_Pgt_Crt>
ffffffff8020d5a5:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d5a9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                RME_PARAM_PC(Svc));                         /* rme_ptr_t Num_Order */
            break;
ffffffff8020d5ad:	e9 7e 03 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d5b2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Del(Cpt,
ffffffff8020d5b6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d5b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d5bd:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d5c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d5c4:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d5c7:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d5ca:	e8 2c 36 00 00       	call   ffffffff80210bfb <_RME_Pgt_Del>
ffffffff8020d5cf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d5d3:	e9 58 03 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        }
        case RME_SVC_PGT_ADD:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5d8:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
                                Cid,                                        /* rme_ptr_t Flag_Dst */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Pos_Src */
ffffffff8020d5dc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5e0:	41 89 c1             	mov    %eax,%r9d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
ffffffff8020d5e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d5e7:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5eb:	49 89 c0             	mov    %rax,%r8
ffffffff8020d5ee:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
ffffffff8020d5f2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5f6:	89 c7                	mov    %eax,%edi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
ffffffff8020d5f8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d5fc:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d600:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d603:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d607:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d60b:	51                   	push   %rcx
ffffffff8020d60c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d60f:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d612:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d615:	e8 d8 39 00 00       	call   ffffffff80210ff2 <_RME_Pgt_Add>
ffffffff8020d61a:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d61e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Index */
            break;
ffffffff8020d622:	e9 09 03 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        }
        case RME_SVC_PGT_REM:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff8020d627:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt */
ffffffff8020d62b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff8020d62f:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d632:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d636:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d639:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d63c:	e8 74 3f 00 00       	call   ffffffff802115b5 <_RME_Pgt_Rem>
ffffffff8020d641:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Pos */
            break;
ffffffff8020d645:	e9 e6 02 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        }
        case RME_SVC_PGT_CON:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d64a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
                                Param[1],                                   /* rme_ptr_t Pos */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Pgt_Child */
ffffffff8020d64e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d652:	89 c7                	mov    %eax,%edi
ffffffff8020d654:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff8020d658:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d65c:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d660:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d663:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d667:	49 89 c8             	mov    %rcx,%r8
ffffffff8020d66a:	48 89 f9             	mov    %rdi,%rcx
ffffffff8020d66d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d670:	e8 d1 41 00 00       	call   ffffffff80211846 <_RME_Pgt_Con>
ffffffff8020d675:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Flag_Child */
            break;
ffffffff8020d679:	e9 b2 02 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Des(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
                                Param[1],                                   /* rme_ptr_t Pos */
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt_Child */
ffffffff8020d67e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Des(Cpt,
ffffffff8020d682:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d685:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
ffffffff8020d689:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Des(Cpt,
ffffffff8020d68d:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d690:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d694:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d697:	e8 23 47 00 00       	call   ffffffff80211dbf <_RME_Pgt_Des>
ffffffff8020d69c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d6a0:	e9 8b 02 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
#if(RME_PGT_RAW_ENABLE==0U)
            Retval=_RME_Prc_Crt(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d6a5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d6a9:	48 89 c7             	mov    %rax,%rdi
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
ffffffff8020d6ac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d6b0:	48 89 c1             	mov    %rax,%rcx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d6b3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d6b7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d6ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d6be:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d6c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6c5:	49 89 f8             	mov    %rdi,%r8
ffffffff8020d6c8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6cb:	e8 a6 61 00 00       	call   ffffffff80213876 <_RME_Prc_Crt>
ffffffff8020d6d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
                                (rme_ptr_t)Param[2]);                       /* rme_ptr_t Raw_Pgt */
#endif
            break;
ffffffff8020d6d4:	e9 57 02 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Prc_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Prc */
ffffffff8020d6d9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Del(Cpt,
ffffffff8020d6dd:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d6e0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d6e4:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d6e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6eb:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d6ee:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6f1:	e8 12 69 00 00       	call   ffffffff80214008 <_RME_Prc_Del>
ffffffff8020d6f6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d6fa:	e9 31 02 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Prc_Cpt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Cpt */
ffffffff8020d6ff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Cpt(Cpt,
ffffffff8020d703:	48 89 c2             	mov    %rax,%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d706:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Cpt(Cpt,
ffffffff8020d70a:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d70d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d711:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d714:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d717:	e8 af 6c 00 00       	call   ffffffff802143cb <_RME_Prc_Cpt>
ffffffff8020d71c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d720:	e9 0b 02 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
#if(RME_PGT_RAW_ENABLE==0U)
            Retval=_RME_Prc_Pgt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d725:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Pgt(Cpt,
ffffffff8020d729:	48 89 c2             	mov    %rax,%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d72c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Pgt(Cpt,
ffffffff8020d730:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d733:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d737:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d73a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d73d:	e8 49 71 00 00       	call   ffffffff8021488b <_RME_Prc_Pgt>
ffffffff8020d742:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
#else
            Retval=_RME_Prc_Pgt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                Param[1]);                                  /* rme_ptr_t Raw_Pgt */
#endif
            break;
ffffffff8020d746:	e9 e5 01 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        /* Thread */
        case RME_SVC_THD_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d74b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d74f:	83 e0 40             	and    $0x40,%eax
ffffffff8020d752:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d755:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d759:	48 c1 e8 07          	shr    $0x7,%rax
ffffffff8020d75d:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d760:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Prc */
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Prio_Max */
ffffffff8020d764:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d768:	41 89 c1             	mov    %eax,%r9d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Prc */
ffffffff8020d76b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d76f:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d773:	49 89 c0             	mov    %rax,%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
ffffffff8020d776:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d77a:	41 89 c3             	mov    %eax,%r11d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d77d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d781:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d785:	49 89 c2             	mov    %rax,%r10
ffffffff8020d788:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d78c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d78f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d793:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d797:	56                   	push   %rsi
ffffffff8020d798:	51                   	push   %rcx
ffffffff8020d799:	52                   	push   %rdx
ffffffff8020d79a:	4c 89 d9             	mov    %r11,%rcx
ffffffff8020d79d:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d7a0:	48 89 fe             	mov    %rdi,%rsi
ffffffff8020d7a3:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7a6:	e8 20 7c 00 00       	call   ffffffff802153cb <_RME_Thd_Crt>
ffffffff8020d7ab:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d7af:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2],                                   /* rme_ptr_t Raddr */
                                Svc>>7,                                     /* rme_ptr_t Attr */
                                Svc&0x40U);                                 /* rme_ptr_t Is_Hyp */
            break;
ffffffff8020d7b3:	e9 78 01 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Thd */
ffffffff8020d7b8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Del(Cpt,
ffffffff8020d7bc:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d7bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d7c3:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d7c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d7ca:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d7cd:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7d0:	e8 66 85 00 00       	call   ffffffff80215d3b <_RME_Thd_Del>
ffffffff8020d7d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d7d9:	e9 52 01 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        }
        case RME_SVC_THD_SCHED_BIND:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7de:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                       (rme_cid_t)Cid,                      /* rme_cid_t Cap_Thd */
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
                                       RME_PARAM_D0(Param[1]),              /* rme_ptr_t Prio */
ffffffff8020d7e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7e6:	41 89 c1             	mov    %eax,%r9d
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
ffffffff8020d7e9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d7ed:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7f1:	49 89 c0             	mov    %rax,%r8
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
ffffffff8020d7f4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7f8:	89 c1                	mov    %eax,%ecx
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff8020d7fa:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d7fe:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d802:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d805:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d809:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d80c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d810:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d814:	52                   	push   %rdx
ffffffff8020d815:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d818:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d81b:	e8 a0 89 00 00       	call   ffffffff802161c0 <_RME_Thd_Sched_Bind>
ffffffff8020d820:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d824:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                       Param[2]);                           /* rme_ptr_t Haddr */
            break;
ffffffff8020d828:	e9 03 01 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        case RME_SVC_THD_SCHED_RCV:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Rcv(Cpt,
                                      (rme_cid_t)Param[0]);                 /* rme_cid_t Cap_Thd */
ffffffff8020d82d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Rcv(Cpt,
ffffffff8020d831:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d834:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d838:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d83b:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d83e:	e8 72 9d 00 00       	call   ffffffff802175b5 <_RME_Thd_Sched_Rcv>
ffffffff8020d843:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d847:	e9 e4 00 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Crt(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d84c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Crt(Cpt,
ffffffff8020d850:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d853:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d857:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d85a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d85e:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d861:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d864:	e8 fc ae 00 00       	call   ffffffff80218765 <_RME_Sig_Crt>
ffffffff8020d869:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d86d:	e9 be 00 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d872:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Del(Cpt,
ffffffff8020d876:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d879:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d87d:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d880:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d884:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d887:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d88a:	e8 d5 b1 00 00       	call   ffffffff80218a64 <_RME_Sig_Del>
ffffffff8020d88f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d893:	e9 98 00 00 00       	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        /* Invocation */
        case RME_SVC_INV_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d898:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Prc */
ffffffff8020d89c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d8a0:	49 89 c0             	mov    %rax,%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff8020d8a3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d8a7:	89 c1                	mov    %eax,%ecx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d8a9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d8ad:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d8b1:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d8b8:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d8bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d8bf:	49 89 d1             	mov    %rdx,%r9
ffffffff8020d8c2:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d8c5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8c8:	e8 fa be 00 00       	call   ffffffff802197c7 <_RME_Inv_Crt>
ffffffff8020d8cd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Raddr */
            break;
ffffffff8020d8d1:	eb 5d                	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Inv_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Inv */
ffffffff8020d8d3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Del(Cpt,
ffffffff8020d8d7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d8da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d8de:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d8e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d8e5:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d8e8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8eb:	e8 14 c7 00 00       	call   ffffffff8021a004 <_RME_Inv_Del>
ffffffff8020d8f0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d8f4:	eb 3a                	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
            
            Retval=_RME_Inv_Set(Cpt,
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
                                Param[1],                                   /* rme_ptr_t Entry */
                                Param[2],                                   /* rme_ptr_t Stack */
                                RME_PARAM_D1(Param[0]));                    /* rme_ptr_t Is_Exc_Ret */
ffffffff8020d8f6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Set(Cpt,
ffffffff8020d8fa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d8fe:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d901:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8020d905:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff8020d909:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Set(Cpt,
ffffffff8020d90d:	89 c7                	mov    %eax,%edi
ffffffff8020d90f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d913:	49 89 f0             	mov    %rsi,%r8
ffffffff8020d916:	48 89 fe             	mov    %rdi,%rsi
ffffffff8020d919:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d91c:	e8 d5 ca 00 00       	call   ffffffff8021a3f6 <_RME_Inv_Set>
ffffffff8020d921:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d925:	eb 09                	jmp    ffffffff8020d930 <_RME_Svc_Handler+0x96f>
        /* This is an error */
        default: 
        {
            RME_COV_MARKER();
            
            Retval=RME_ERR_CPT_NULL;
ffffffff8020d927:	48 c7 45 f8 ff ff ff 	movq   $0xffffffffffffffff,-0x8(%rbp)
ffffffff8020d92e:	ff 
            break;
ffffffff8020d92f:	90                   	nop
        }
    }
    
    /* We set the registers and return */
    __RME_Svc_Retval_Set(Reg,Retval);
ffffffff8020d930:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d934:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d938:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d93b:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d93e:	e8 e0 96 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
}
ffffffff8020d943:	c9                   	leave
ffffffff8020d944:	c3                   	ret

ffffffff8020d945 <_RME_Tim_Handler>:
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Tim_Handler(struct RME_Reg_Struct* Reg,
                      rme_ptr_t Slice)
{
ffffffff8020d945:	f3 0f 1e fa          	endbr64
ffffffff8020d949:	55                   	push   %rbp
ffffffff8020d94a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020d94d:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020d951:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020d955:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    
    Local=RME_CPU_LOCAL();
ffffffff8020d959:	e8 e1 de ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020d95e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff8020d962:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d966:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020d96a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020d96e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d972:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d976:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8020d97d:	ff ff 7f 
ffffffff8020d980:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d983:	72 57                	jb     ffffffff8020d9dc <_RME_Tim_Handler+0x97>
    {
        RME_COV_MARKER();

        /* Decrease timeslice count, and see if the timeslice is used up */
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff8020d985:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d989:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d98d:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8020d991:	73 19                	jae    ffffffff8020d9ac <_RME_Tim_Handler+0x67>
        {
            RME_COV_MARKER();
            
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020d993:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d997:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d99b:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
ffffffff8020d99f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d9a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9a6:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020d9aa:	eb 30                	jmp    ffffffff8020d9dc <_RME_Tim_Handler+0x97>
        else
        {
            RME_COV_MARKER();

            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff8020d9ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9b0:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8020d9b7:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff8020d9b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9bc:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9bf:	e8 57 54 00 00       	call   ffffffff80212e1b <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff8020d9c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9c8:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8020d9cf:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff8020d9d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9d4:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9d7:	e8 8a 55 00 00       	call   ffffffff80212f66 <_RME_Run_Notif>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Send to the system tick timer endpoint. This endpoint is per-core */
    _RME_Kern_Snd(Local->Sig_Tim);
ffffffff8020d9dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d9e0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d9e4:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9e7:	e8 b6 b4 00 00       	call   ffffffff80218ea2 <_RME_Kern_Snd>

    /* All kernel send complete, now pick the highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff8020d9ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d9f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d9f4:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d9f7:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9fa:	e8 1c b4 00 00       	call   ffffffff80218e1b <_RME_Kern_High>
}
ffffffff8020d9ff:	90                   	nop
ffffffff8020da00:	c9                   	leave
ffffffff8020da01:	c3                   	ret

ffffffff8020da02 <_RME_Tim_Elapse>:
                                _RME_Tim_Elapse or _RME_Tim_Handler.
Output      : None.
Return      : None.
******************************************************************************/
void _RME_Tim_Elapse(rme_ptr_t Slice)
{
ffffffff8020da02:	f3 0f 1e fa          	endbr64
ffffffff8020da06:	55                   	push   %rbp
ffffffff8020da07:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020da0a:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020da0e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020da12:	e8 28 de ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020da17:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020da1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    /* We don't want the slices less than 1 because we want to keep the kernel
     * SVC invariants - the current thread must still be running after this */
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020da1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da23:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020da27:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8020da2e:	ff ff 7f 
ffffffff8020da31:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020da34:	72 33                	jb     ffffffff8020da69 <_RME_Tim_Elapse+0x67>
    {
        RME_COV_MARKER();

        /* Decrease timeslice count, but no less than 1, so the thread is
         * always running, which keeps the invariant of the kernel */
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff8020da36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da3a:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020da3e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020da42:	73 19                	jae    ffffffff8020da5d <_RME_Tim_Elapse+0x5b>
        {
            RME_COV_MARKER();
            
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020da44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da48:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020da4c:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff8020da50:	48 89 c2             	mov    %rax,%rdx
ffffffff8020da53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da57:	48 89 50 30          	mov    %rdx,0x30(%rax)
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff8020da5b:	eb 0c                	jmp    ffffffff8020da69 <_RME_Tim_Elapse+0x67>
            Thd_Cur->Sched.Slice=1U;
ffffffff8020da5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da61:	48 c7 40 30 01 00 00 	movq   $0x1,0x30(%rax)
ffffffff8020da68:	00 
}
ffffffff8020da69:	90                   	nop
ffffffff8020da6a:	c9                   	leave
ffffffff8020da6b:	c3                   	ret

ffffffff8020da6c <_RME_Tim_Future>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - How many slices to program until the next timeout.
******************************************************************************/
rme_ptr_t _RME_Tim_Future(void)
{
ffffffff8020da6c:	f3 0f 1e fa          	endbr64
ffffffff8020da70:	55                   	push   %rbp
ffffffff8020da71:	48 89 e5             	mov    %rsp,%rbp
    /* If we're running an infinite thread, just program infinite time,
     * these values are very large so that's fine */
    return RME_CPU_LOCAL()->Thd_Cur->Sched.Slice;
ffffffff8020da74:	e8 c6 dd ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020da79:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020da7d:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff8020da81:	5d                   	pop    %rbp
ffffffff8020da82:	c3                   	ret

ffffffff8020da83 <_RME_Cpt_Boot_Init>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Cpt_Boot_Init(rme_cid_t Cap_Cpt,
                             rme_ptr_t Vaddr,
                             rme_ptr_t Entry_Num)
{
ffffffff8020da83:	f3 0f 1e fa          	endbr64
ffffffff8020da87:	55                   	push   %rbp
ffffffff8020da88:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020da8b:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8020da8f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020da93:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020da97:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    rme_ptr_t Count;
    struct RME_Cap_Cpt* Cpt;

    /* See if the entry number is too big */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020da9b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020daa0:	74 0a                	je     ffffffff8020daac <_RME_Cpt_Boot_Init+0x29>
ffffffff8020daa2:	48 81 7d d8 00 80 00 	cmpq   $0x8000,-0x28(%rbp)
ffffffff8020daa9:	00 
ffffffff8020daaa:	76 0c                	jbe    ffffffff8020dab8 <_RME_Cpt_Boot_Init+0x35>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020daac:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dab3:	e9 b8 00 00 00       	jmp    ffffffff8020db70 <_RME_Cpt_Boot_Init+0xed>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020dab8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dabc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dac0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dac3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dac7:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020daca:	48 89 c7             	mov    %rax,%rdi
ffffffff8020dacd:	e8 6c 48 00 00       	call   ffffffff8021233e <_RME_Kot_Mark>
ffffffff8020dad2:	48 85 c0             	test   %rax,%rax
ffffffff8020dad5:	74 0c                	je     ffffffff8020dae3 <_RME_Cpt_Boot_Init+0x60>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_KOT;
ffffffff8020dad7:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020dade:	e9 8d 00 00 00       	jmp    ffffffff8020db70 <_RME_Cpt_Boot_Init+0xed>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020dae3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020daea:	00 
ffffffff8020daeb:	eb 1e                	jmp    ffffffff8020db0b <_RME_Cpt_Boot_Init+0x88>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020daed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020daf1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020daf5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020daf8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dafc:	48 01 d0             	add    %rdx,%rax
ffffffff8020daff:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020db06:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020db0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020db0f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020db13:	72 d8                	jb     ffffffff8020daed <_RME_Cpt_Boot_Init+0x6a>
    }

    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff8020db15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020db19:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020db1d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020db20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020db24:	48 01 d0             	add    %rdx,%rax
ffffffff8020db27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Header init */
    Cpt->Head.Root_Ref=1U;
ffffffff8020db2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db2f:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8020db36:	00 
    Cpt->Head.Object=Vaddr;
ffffffff8020db37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db3b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020db3f:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020db43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db47:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020db4e:	00 
    
    /* Info init */
    Cpt->Entry_Num=Entry_Num;
ffffffff8020db4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db53:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020db57:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* At last, write into slot the correct information, and set status to VALID */
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020db5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db5f:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020db66:	00 03 00 
ffffffff8020db69:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return Cap_Cpt;
ffffffff8020db6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff8020db70:	c9                   	leave
ffffffff8020db71:	c3                   	ret

ffffffff8020db72 <_RME_Cpt_Boot_Crt>:
rme_ret_t _RME_Cpt_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt_Crt,
                            rme_cid_t Cap_Crt,
                            rme_ptr_t Vaddr,
                            rme_ptr_t Entry_Num)
{
ffffffff8020db72:	f3 0f 1e fa          	endbr64
ffffffff8020db76:	55                   	push   %rbp
ffffffff8020db77:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020db7a:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020db7e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020db82:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020db86:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020db8a:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020db8e:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Cpt* Cpt_Crt;
    rme_ptr_t Type_Stat;
    
    /* See if the entry number is too big - this is not restricted by RME_CPT_ENTRY_MAX */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020db92:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff8020db97:	74 0a                	je     ffffffff8020dba3 <_RME_Cpt_Boot_Crt+0x31>
ffffffff8020db99:	48 81 7d b8 00 80 00 	cmpq   $0x8000,-0x48(%rbp)
ffffffff8020dba0:	00 
ffffffff8020dba1:	76 0c                	jbe    ffffffff8020dbaf <_RME_Cpt_Boot_Crt+0x3d>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020dba3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dbaa:	e9 41 03 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,
ffffffff8020dbaf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dbb3:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020dbb8:	48 85 c0             	test   %rax,%rax
ffffffff8020dbbb:	0f 85 98 00 00 00    	jne    ffffffff8020dc59 <_RME_Cpt_Boot_Crt+0xe7>
ffffffff8020dbc1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dbc5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dbc9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020dbcd:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dbd0:	0f 93 c0             	setae  %al
ffffffff8020dbd3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dbd6:	48 85 c0             	test   %rax,%rax
ffffffff8020dbd9:	74 0c                	je     ffffffff8020dbe7 <_RME_Cpt_Boot_Crt+0x75>
ffffffff8020dbdb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dbe2:	e9 09 03 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dbe7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dbeb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dbef:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dbf2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dbf6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dbfa:	48 01 d0             	add    %rdx,%rax
ffffffff8020dbfd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dc01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dc05:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dc08:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dc0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dc10:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dc14:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dc17:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dc1b:	0f 94 c0             	sete   %al
ffffffff8020dc1e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc21:	48 85 c0             	test   %rax,%rax
ffffffff8020dc24:	74 0c                	je     ffffffff8020dc32 <_RME_Cpt_Boot_Crt+0xc0>
ffffffff8020dc26:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dc2d:	e9 be 02 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dc32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dc36:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dc3a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dc3e:	0f 95 c0             	setne  %al
ffffffff8020dc41:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc44:	48 85 c0             	test   %rax,%rax
ffffffff8020dc47:	0f 84 4c 01 00 00    	je     ffffffff8020dd99 <_RME_Cpt_Boot_Crt+0x227>
ffffffff8020dc4d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dc54:	e9 97 02 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dc59:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dc5d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dc61:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dc64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dc68:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dc6c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dc6f:	0f 93 c0             	setae  %al
ffffffff8020dc72:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc75:	48 85 c0             	test   %rax,%rax
ffffffff8020dc78:	74 0c                	je     ffffffff8020dc86 <_RME_Cpt_Boot_Crt+0x114>
ffffffff8020dc7a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dc81:	e9 6a 02 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dc86:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dc8a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dc8e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dc92:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dc95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dc99:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dc9d:	48 01 d0             	add    %rdx,%rax
ffffffff8020dca0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dca4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dca8:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dcab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dcaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dcb3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dcb7:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dcba:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dcbe:	0f 94 c0             	sete   %al
ffffffff8020dcc1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dcc4:	48 85 c0             	test   %rax,%rax
ffffffff8020dcc7:	74 0c                	je     ffffffff8020dcd5 <_RME_Cpt_Boot_Crt+0x163>
ffffffff8020dcc9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dcd0:	e9 1b 02 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dcd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dcd9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dcdd:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dce1:	0f 95 c0             	setne  %al
ffffffff8020dce4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dce7:	48 85 c0             	test   %rax,%rax
ffffffff8020dcea:	74 0c                	je     ffffffff8020dcf8 <_RME_Cpt_Boot_Crt+0x186>
ffffffff8020dcec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dcf3:	e9 f8 01 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dcf8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dcfc:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020dd01:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dd04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd08:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dd0c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dd0f:	0f 93 c0             	setae  %al
ffffffff8020dd12:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd15:	48 85 c0             	test   %rax,%rax
ffffffff8020dd18:	74 0c                	je     ffffffff8020dd26 <_RME_Cpt_Boot_Crt+0x1b4>
ffffffff8020dd1a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dd21:	e9 ca 01 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dd26:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dd2a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020dd2f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dd33:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dd36:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd3a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dd3e:	48 01 d0             	add    %rdx,%rax
ffffffff8020dd41:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dd45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd49:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dd4c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dd50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dd54:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dd58:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dd5b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dd5f:	0f 94 c0             	sete   %al
ffffffff8020dd62:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd65:	48 85 c0             	test   %rax,%rax
ffffffff8020dd68:	74 0c                	je     ffffffff8020dd76 <_RME_Cpt_Boot_Crt+0x204>
ffffffff8020dd6a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dd71:	e9 7a 01 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dd76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dd7a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dd7e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dd82:	0f 95 c0             	setne  %al
ffffffff8020dd85:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd88:	48 85 c0             	test   %rax,%rax
ffffffff8020dd8b:	74 0c                	je     ffffffff8020dd99 <_RME_Cpt_Boot_Crt+0x227>
ffffffff8020dd8d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dd94:	e9 57 01 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
                   RME_CAP_TYPE_CPT,
                   struct RME_Cap_Cpt*,
                   Cpt_Op,
                   Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020dd99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd9d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020dda1:	83 e0 01             	and    $0x1,%eax
ffffffff8020dda4:	48 85 c0             	test   %rax,%rax
ffffffff8020dda7:	0f 94 c0             	sete   %al
ffffffff8020ddaa:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ddad:	48 85 c0             	test   %rax,%rax
ffffffff8020ddb0:	74 0c                	je     ffffffff8020ddbe <_RME_Cpt_Boot_Crt+0x24c>
ffffffff8020ddb2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020ddb9:	e9 32 01 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020ddbe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ddc2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ddc6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020ddca:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ddcd:	0f 93 c0             	setae  %al
ffffffff8020ddd0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ddd3:	48 85 c0             	test   %rax,%rax
ffffffff8020ddd6:	74 0c                	je     ffffffff8020dde4 <_RME_Cpt_Boot_Crt+0x272>
ffffffff8020ddd8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dddf:	e9 0c 01 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dde4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020dde8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ddec:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ddef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ddf3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ddf7:	48 01 d0             	add    %rdx,%rax
ffffffff8020ddfa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020ddfe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de02:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020de09:	00 00 00 
ffffffff8020de0c:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020de11:	48 89 c7             	mov    %rax,%rdi
ffffffff8020de14:	e8 45 e9 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020de19:	48 85 c0             	test   %rax,%rax
ffffffff8020de1c:	0f 94 c0             	sete   %al
ffffffff8020de1f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020de22:	48 85 c0             	test   %rax,%rax
ffffffff8020de25:	74 0c                	je     ffffffff8020de33 <_RME_Cpt_Boot_Crt+0x2c1>
ffffffff8020de27:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020de2e:	e9 bd 00 00 00       	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020de33:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020de38:	e8 d4 e9 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020de3d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020de41:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Try to mark this area as populated */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020de45:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020de49:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020de4d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de50:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020de54:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020de57:	48 89 c7             	mov    %rax,%rdi
ffffffff8020de5a:	e8 df 44 00 00       	call   ffffffff8021233e <_RME_Kot_Mark>
ffffffff8020de5f:	48 85 c0             	test   %rax,%rax
ffffffff8020de62:	74 14                	je     ffffffff8020de78 <_RME_Cpt_Boot_Crt+0x306>
    {
        RME_COV_MARKER();
        
        /* Abort the creation process */
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020de64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de68:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020de6f:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020de76:	eb 78                	jmp    ffffffff8020def0 <_RME_Cpt_Boot_Crt+0x37e>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020de78:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020de7f:	00 
ffffffff8020de80:	eb 1e                	jmp    ffffffff8020dea0 <_RME_Cpt_Boot_Crt+0x32e>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020de82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020de86:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020de8a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de8d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020de91:	48 01 d0             	add    %rdx,%rax
ffffffff8020de94:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020de9b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020dea0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020dea4:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff8020dea8:	72 d8                	jb     ffffffff8020de82 <_RME_Cpt_Boot_Crt+0x310>
    }

    /* Header init */
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020deaa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020deae:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020deb5:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020deb6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020deba:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020debe:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020dec2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dec6:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020decd:	00 
    /* Info init */
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020dece:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020ded2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020ded6:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020deda:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dede:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020dee5:	00 03 00 
ffffffff8020dee8:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020deeb:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020def0:	c9                   	leave
ffffffff8020def1:	c3                   	ret

ffffffff8020def2 <_RME_Cpt_Crt>:
                              rme_cid_t Cap_Cpt_Crt,
                              rme_cid_t Cap_Kom,
                              rme_cid_t Cap_Crt,
                              rme_ptr_t Raddr,
                              rme_ptr_t Entry_Num)
{
ffffffff8020def2:	f3 0f 1e fa          	endbr64
ffffffff8020def6:	55                   	push   %rbp
ffffffff8020def7:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020defa:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020defe:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8020df02:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8020df06:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8020df0a:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff8020df0e:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff8020df12:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    volatile struct RME_Cap_Cpt* Cpt_Crt;
    rme_ptr_t Type_Stat;
    rme_ptr_t Vaddr;

    /* See if the entry number is too big */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020df16:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
ffffffff8020df1b:	74 0a                	je     ffffffff8020df27 <_RME_Cpt_Crt+0x35>
ffffffff8020df1d:	48 81 7d a0 00 80 00 	cmpq   $0x8000,-0x60(%rbp)
ffffffff8020df24:	00 
ffffffff8020df25:	76 0c                	jbe    ffffffff8020df33 <_RME_Cpt_Crt+0x41>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020df27:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020df2e:	e9 0a 06 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
        /* No action required */
    }
#endif

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020df33:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020df37:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020df3c:	48 85 c0             	test   %rax,%rax
ffffffff8020df3f:	0f 85 98 00 00 00    	jne    ffffffff8020dfdd <_RME_Cpt_Crt+0xeb>
ffffffff8020df45:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020df49:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020df4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020df51:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020df54:	0f 93 c0             	setae  %al
ffffffff8020df57:	0f b6 c0             	movzbl %al,%eax
ffffffff8020df5a:	48 85 c0             	test   %rax,%rax
ffffffff8020df5d:	74 0c                	je     ffffffff8020df6b <_RME_Cpt_Crt+0x79>
ffffffff8020df5f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020df66:	e9 d2 05 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020df6b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020df6f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020df73:	48 89 c2             	mov    %rax,%rdx
ffffffff8020df76:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020df7a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020df7e:	48 01 d0             	add    %rdx,%rax
ffffffff8020df81:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020df85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020df89:	48 8b 00             	mov    (%rax),%rax
ffffffff8020df8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020df90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020df94:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020df98:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020df9b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020df9f:	0f 94 c0             	sete   %al
ffffffff8020dfa2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dfa5:	48 85 c0             	test   %rax,%rax
ffffffff8020dfa8:	74 0c                	je     ffffffff8020dfb6 <_RME_Cpt_Crt+0xc4>
ffffffff8020dfaa:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dfb1:	e9 87 05 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020dfb6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dfba:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dfbe:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dfc2:	0f 95 c0             	setne  %al
ffffffff8020dfc5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dfc8:	48 85 c0             	test   %rax,%rax
ffffffff8020dfcb:	0f 84 4c 01 00 00    	je     ffffffff8020e11d <_RME_Cpt_Crt+0x22b>
ffffffff8020dfd1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dfd8:	e9 60 05 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020dfdd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020dfe1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dfe5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dfe8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020dfec:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dff0:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dff3:	0f 93 c0             	setae  %al
ffffffff8020dff6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dff9:	48 85 c0             	test   %rax,%rax
ffffffff8020dffc:	74 0c                	je     ffffffff8020e00a <_RME_Cpt_Crt+0x118>
ffffffff8020dffe:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e005:	e9 33 05 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e00a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020e00e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e012:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e016:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e019:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e01d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e021:	48 01 d0             	add    %rdx,%rax
ffffffff8020e024:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e028:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e02c:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e02f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e033:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e037:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e03b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e03e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e042:	0f 94 c0             	sete   %al
ffffffff8020e045:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e048:	48 85 c0             	test   %rax,%rax
ffffffff8020e04b:	74 0c                	je     ffffffff8020e059 <_RME_Cpt_Crt+0x167>
ffffffff8020e04d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e054:	e9 e4 04 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e059:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e05d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e061:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e065:	0f 95 c0             	setne  %al
ffffffff8020e068:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e06b:	48 85 c0             	test   %rax,%rax
ffffffff8020e06e:	74 0c                	je     ffffffff8020e07c <_RME_Cpt_Crt+0x18a>
ffffffff8020e070:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e077:	e9 c1 04 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e07c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020e080:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e085:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e088:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e08c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e090:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e093:	0f 93 c0             	setae  %al
ffffffff8020e096:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e099:	48 85 c0             	test   %rax,%rax
ffffffff8020e09c:	74 0c                	je     ffffffff8020e0aa <_RME_Cpt_Crt+0x1b8>
ffffffff8020e09e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e0a5:	e9 93 04 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e0aa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020e0ae:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e0b3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e0b7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e0ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e0be:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e0c2:	48 01 d0             	add    %rdx,%rax
ffffffff8020e0c5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e0c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e0cd:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e0d0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e0d4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e0d8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e0dc:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e0df:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e0e3:	0f 94 c0             	sete   %al
ffffffff8020e0e6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e0e9:	48 85 c0             	test   %rax,%rax
ffffffff8020e0ec:	74 0c                	je     ffffffff8020e0fa <_RME_Cpt_Crt+0x208>
ffffffff8020e0ee:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e0f5:	e9 43 04 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e0fa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e0fe:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e102:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e106:	0f 95 c0             	setne  %al
ffffffff8020e109:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e10c:	48 85 c0             	test   %rax,%rax
ffffffff8020e10f:	74 0c                	je     ffffffff8020e11d <_RME_Cpt_Crt+0x22b>
ffffffff8020e111:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e118:	e9 20 04 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020e11d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e121:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e126:	48 85 c0             	test   %rax,%rax
ffffffff8020e129:	0f 85 98 00 00 00    	jne    ffffffff8020e1c7 <_RME_Cpt_Crt+0x2d5>
ffffffff8020e12f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e133:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e137:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020e13b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e13e:	0f 93 c0             	setae  %al
ffffffff8020e141:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e144:	48 85 c0             	test   %rax,%rax
ffffffff8020e147:	74 0c                	je     ffffffff8020e155 <_RME_Cpt_Crt+0x263>
ffffffff8020e149:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e150:	e9 e8 03 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e155:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e159:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e15d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e160:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e164:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e168:	48 01 d0             	add    %rdx,%rax
ffffffff8020e16b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e16f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e173:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e176:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e17a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e17e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e182:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e185:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e189:	0f 94 c0             	sete   %al
ffffffff8020e18c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e18f:	48 85 c0             	test   %rax,%rax
ffffffff8020e192:	74 0c                	je     ffffffff8020e1a0 <_RME_Cpt_Crt+0x2ae>
ffffffff8020e194:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e19b:	e9 9d 03 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e1a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e1a4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e1a8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e1ac:	0f 95 c0             	setne  %al
ffffffff8020e1af:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e1b2:	48 85 c0             	test   %rax,%rax
ffffffff8020e1b5:	0f 84 4c 01 00 00    	je     ffffffff8020e307 <_RME_Cpt_Crt+0x415>
ffffffff8020e1bb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e1c2:	e9 76 03 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e1c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e1cb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e1cf:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e1d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e1d6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e1da:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e1dd:	0f 93 c0             	setae  %al
ffffffff8020e1e0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e1e3:	48 85 c0             	test   %rax,%rax
ffffffff8020e1e6:	74 0c                	je     ffffffff8020e1f4 <_RME_Cpt_Crt+0x302>
ffffffff8020e1e8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e1ef:	e9 49 03 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e1f4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e1f8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e1fc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e200:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e203:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e207:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e20b:	48 01 d0             	add    %rdx,%rax
ffffffff8020e20e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e212:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e216:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e219:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e21d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e221:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e225:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e228:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e22c:	0f 94 c0             	sete   %al
ffffffff8020e22f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e232:	48 85 c0             	test   %rax,%rax
ffffffff8020e235:	74 0c                	je     ffffffff8020e243 <_RME_Cpt_Crt+0x351>
ffffffff8020e237:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e23e:	e9 fa 02 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e243:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e247:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e24b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e24f:	0f 95 c0             	setne  %al
ffffffff8020e252:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e255:	48 85 c0             	test   %rax,%rax
ffffffff8020e258:	74 0c                	je     ffffffff8020e266 <_RME_Cpt_Crt+0x374>
ffffffff8020e25a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e261:	e9 d7 02 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e266:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e26a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e26f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e272:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e276:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e27a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e27d:	0f 93 c0             	setae  %al
ffffffff8020e280:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e283:	48 85 c0             	test   %rax,%rax
ffffffff8020e286:	74 0c                	je     ffffffff8020e294 <_RME_Cpt_Crt+0x3a2>
ffffffff8020e288:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e28f:	e9 a9 02 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e294:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e298:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e29d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e2a1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e2a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e2a8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e2ac:	48 01 d0             	add    %rdx,%rax
ffffffff8020e2af:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e2b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e2b7:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e2ba:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e2be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e2c2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e2c6:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e2c9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e2cd:	0f 94 c0             	sete   %al
ffffffff8020e2d0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e2d3:	48 85 c0             	test   %rax,%rax
ffffffff8020e2d6:	74 0c                	je     ffffffff8020e2e4 <_RME_Cpt_Crt+0x3f2>
ffffffff8020e2d8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e2df:	e9 59 02 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e2e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e2e8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e2ec:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e2f0:	0f 95 c0             	setne  %al
ffffffff8020e2f3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e2f6:	48 85 c0             	test   %rax,%rax
ffffffff8020e2f9:	74 0c                	je     ffffffff8020e307 <_RME_Cpt_Crt+0x415>
ffffffff8020e2fb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e302:	e9 36 02 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020e307:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e30b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e30f:	83 e0 01             	and    $0x1,%eax
ffffffff8020e312:	48 85 c0             	test   %rax,%rax
ffffffff8020e315:	0f 94 c0             	sete   %al
ffffffff8020e318:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e31b:	48 85 c0             	test   %rax,%rax
ffffffff8020e31e:	74 0c                	je     ffffffff8020e32c <_RME_Cpt_Crt+0x43a>
ffffffff8020e320:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e327:	e9 11 02 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
ffffffff8020e32c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e330:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e334:	83 e0 01             	and    $0x1,%eax
ffffffff8020e337:	48 85 c0             	test   %rax,%rax
ffffffff8020e33a:	0f 94 c0             	sete   %al
ffffffff8020e33d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e340:	48 85 c0             	test   %rax,%rax
ffffffff8020e343:	74 0c                	je     ffffffff8020e351 <_RME_Cpt_Crt+0x45f>
ffffffff8020e345:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e34c:	e9 ec 01 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e351:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e355:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e359:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020e35d:	48 01 d0             	add    %rdx,%rax
ffffffff8020e360:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8020e364:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e368:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff8020e36c:	0f 92 c0             	setb   %al
ffffffff8020e36f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e372:	48 85 c0             	test   %rax,%rax
ffffffff8020e375:	74 0c                	je     ffffffff8020e383 <_RME_Cpt_Crt+0x491>
ffffffff8020e377:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e37e:	e9 ba 01 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e383:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e387:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e38b:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff8020e38f:	0f 92 c0             	setb   %al
ffffffff8020e392:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e395:	48 85 c0             	test   %rax,%rax
ffffffff8020e398:	74 0c                	je     ffffffff8020e3a6 <_RME_Cpt_Crt+0x4b4>
ffffffff8020e39a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e3a1:	e9 97 01 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e3a6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e3aa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e3ae:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e3b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e3b5:	48 01 d0             	add    %rdx,%rax
ffffffff8020e3b8:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020e3bc:	0f 92 c0             	setb   %al
ffffffff8020e3bf:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e3c2:	48 85 c0             	test   %rax,%rax
ffffffff8020e3c5:	74 0c                	je     ffffffff8020e3d3 <_RME_Cpt_Crt+0x4e1>
ffffffff8020e3c7:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e3ce:	e9 6a 01 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e3d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e3d7:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020e3db:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e3df:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e3e3:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e3e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e3ea:	48 01 c8             	add    %rcx,%rax
ffffffff8020e3ed:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8020e3f1:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e3f4:	0f 92 c0             	setb   %al
ffffffff8020e3f7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e3fa:	48 85 c0             	test   %rax,%rax
ffffffff8020e3fd:	74 0c                	je     ffffffff8020e40b <_RME_Cpt_Crt+0x519>
ffffffff8020e3ff:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e406:	e9 32 01 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020e40b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e40f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e413:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020e417:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e41a:	0f 93 c0             	setae  %al
ffffffff8020e41d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e420:	48 85 c0             	test   %rax,%rax
ffffffff8020e423:	74 0c                	je     ffffffff8020e431 <_RME_Cpt_Crt+0x53f>
ffffffff8020e425:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e42c:	e9 0c 01 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e431:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e435:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e439:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e43c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e440:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e444:	48 01 d0             	add    %rdx,%rax
ffffffff8020e447:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020e44b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e44f:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020e456:	00 00 00 
ffffffff8020e459:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020e45e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e461:	e8 f8 e2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e466:	48 85 c0             	test   %rax,%rax
ffffffff8020e469:	0f 94 c0             	sete   %al
ffffffff8020e46c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e46f:	48 85 c0             	test   %rax,%rax
ffffffff8020e472:	74 0c                	je     ffffffff8020e480 <_RME_Cpt_Crt+0x58e>
ffffffff8020e474:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020e47b:	e9 bd 00 00 00       	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
ffffffff8020e480:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020e485:	e8 87 e3 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020e48a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020e48e:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Try to mark this area as populated */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020e492:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e496:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e49a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e49d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e4a1:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e4a4:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e4a7:	e8 92 3e 00 00       	call   ffffffff8021233e <_RME_Kot_Mark>
ffffffff8020e4ac:	48 85 c0             	test   %rax,%rax
ffffffff8020e4af:	79 14                	jns    ffffffff8020e4c5 <_RME_Cpt_Crt+0x5d3>
    {
        RME_COV_MARKER();
        
        /* Failure. Set the Type_Stat back to 0 and abort the creation process */
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020e4b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e4b5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020e4bc:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020e4c3:	eb 78                	jmp    ffffffff8020e53d <_RME_Cpt_Crt+0x64b>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e4c5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020e4cc:	00 
ffffffff8020e4cd:	eb 1e                	jmp    ffffffff8020e4ed <_RME_Cpt_Crt+0x5fb>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020e4cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e4d3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e4d7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e4da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e4de:	48 01 d0             	add    %rdx,%rax
ffffffff8020e4e1:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e4e8:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020e4ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e4f1:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
ffffffff8020e4f5:	72 d8                	jb     ffffffff8020e4cf <_RME_Cpt_Crt+0x5dd>
    }

    /* Header init */
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020e4f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e4fb:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020e502:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020e503:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e507:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020e50b:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020e50f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e513:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020e51a:	00 
    
    /* Info init */
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020e51b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e51f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8020e523:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020e527:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e52b:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020e532:	00 03 00 
ffffffff8020e535:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020e538:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020e53d:	c9                   	leave
ffffffff8020e53e:	c3                   	ret

ffffffff8020e53f <_RME_Cpt_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Del,
                              rme_cid_t Cap_Del)
{
ffffffff8020e53f:	f3 0f 1e fa          	endbr64
ffffffff8020e543:	55                   	push   %rbp
ffffffff8020e544:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020e547:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020e54b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8020e54f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff8020e553:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    /* These are used for deletion */
    rme_ptr_t Object;
    rme_ptr_t Size;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8020e557:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e55b:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e560:	48 85 c0             	test   %rax,%rax
ffffffff8020e563:	0f 85 98 00 00 00    	jne    ffffffff8020e601 <_RME_Cpt_Del+0xc2>
ffffffff8020e569:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e56d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e571:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020e575:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e578:	0f 93 c0             	setae  %al
ffffffff8020e57b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e57e:	48 85 c0             	test   %rax,%rax
ffffffff8020e581:	74 0c                	je     ffffffff8020e58f <_RME_Cpt_Del+0x50>
ffffffff8020e583:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e58a:	e9 d5 03 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
ffffffff8020e58f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e593:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e597:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e59a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e59e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e5a2:	48 01 d0             	add    %rdx,%rax
ffffffff8020e5a5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e5a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e5ad:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e5b0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e5b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e5b8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e5bc:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e5bf:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e5c3:	0f 94 c0             	sete   %al
ffffffff8020e5c6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e5c9:	48 85 c0             	test   %rax,%rax
ffffffff8020e5cc:	74 0c                	je     ffffffff8020e5da <_RME_Cpt_Del+0x9b>
ffffffff8020e5ce:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e5d5:	e9 8a 03 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
ffffffff8020e5da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e5de:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e5e2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e5e6:	0f 95 c0             	setne  %al
ffffffff8020e5e9:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e5ec:	48 85 c0             	test   %rax,%rax
ffffffff8020e5ef:	0f 84 4c 01 00 00    	je     ffffffff8020e741 <_RME_Cpt_Del+0x202>
ffffffff8020e5f5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e5fc:	e9 63 03 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
ffffffff8020e601:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e605:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e609:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e60c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e610:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e614:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e617:	0f 93 c0             	setae  %al
ffffffff8020e61a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e61d:	48 85 c0             	test   %rax,%rax
ffffffff8020e620:	74 0c                	je     ffffffff8020e62e <_RME_Cpt_Del+0xef>
ffffffff8020e622:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e629:	e9 36 03 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
ffffffff8020e62e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e632:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e636:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e63a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e63d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e641:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e645:	48 01 d0             	add    %rdx,%rax
ffffffff8020e648:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e64c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e650:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e653:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e657:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e65b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e65f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e662:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e666:	0f 94 c0             	sete   %al
ffffffff8020e669:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e66c:	48 85 c0             	test   %rax,%rax
ffffffff8020e66f:	74 0c                	je     ffffffff8020e67d <_RME_Cpt_Del+0x13e>
ffffffff8020e671:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e678:	e9 e7 02 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
ffffffff8020e67d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e681:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e685:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e689:	0f 95 c0             	setne  %al
ffffffff8020e68c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e68f:	48 85 c0             	test   %rax,%rax
ffffffff8020e692:	74 0c                	je     ffffffff8020e6a0 <_RME_Cpt_Del+0x161>
ffffffff8020e694:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e69b:	e9 c4 02 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
ffffffff8020e6a0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e6a4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e6a9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e6ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e6b0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e6b4:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e6b7:	0f 93 c0             	setae  %al
ffffffff8020e6ba:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e6bd:	48 85 c0             	test   %rax,%rax
ffffffff8020e6c0:	74 0c                	je     ffffffff8020e6ce <_RME_Cpt_Del+0x18f>
ffffffff8020e6c2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e6c9:	e9 96 02 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
ffffffff8020e6ce:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e6d2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e6d7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e6db:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e6de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e6e2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e6e6:	48 01 d0             	add    %rdx,%rax
ffffffff8020e6e9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e6ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e6f1:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e6f4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e6f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e6fc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e700:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e703:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e707:	0f 94 c0             	sete   %al
ffffffff8020e70a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e70d:	48 85 c0             	test   %rax,%rax
ffffffff8020e710:	74 0c                	je     ffffffff8020e71e <_RME_Cpt_Del+0x1df>
ffffffff8020e712:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e719:	e9 46 02 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
ffffffff8020e71e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e722:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e726:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e72a:	0f 95 c0             	setne  %al
ffffffff8020e72d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e730:	48 85 c0             	test   %rax,%rax
ffffffff8020e733:	74 0c                	je     ffffffff8020e741 <_RME_Cpt_Del+0x202>
ffffffff8020e735:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e73c:	e9 23 02 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8020e741:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e745:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e749:	83 e0 02             	and    $0x2,%eax
ffffffff8020e74c:	48 85 c0             	test   %rax,%rax
ffffffff8020e74f:	0f 94 c0             	sete   %al
ffffffff8020e752:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e755:	48 85 c0             	test   %rax,%rax
ffffffff8020e758:	74 0c                	je     ffffffff8020e766 <_RME_Cpt_Del+0x227>
ffffffff8020e75a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e761:	e9 fe 01 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff8020e766:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e76a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e76e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8020e772:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e775:	0f 93 c0             	setae  %al
ffffffff8020e778:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e77b:	48 85 c0             	test   %rax,%rax
ffffffff8020e77e:	74 0c                	je     ffffffff8020e78c <_RME_Cpt_Del+0x24d>
ffffffff8020e780:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e787:	e9 d8 01 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
ffffffff8020e78c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020e790:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e794:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e797:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e79b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e79f:	48 01 d0             	add    %rdx,%rax
ffffffff8020e7a2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff8020e7a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e7aa:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e7ad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e7b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e7b5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e7b9:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e7bc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e7c0:	0f 95 c0             	setne  %al
ffffffff8020e7c3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e7c6:	48 85 c0             	test   %rax,%rax
ffffffff8020e7c9:	74 0c                	je     ffffffff8020e7d7 <_RME_Cpt_Del+0x298>
ffffffff8020e7cb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e7d2:	e9 8d 01 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
ffffffff8020e7d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e7db:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e7df:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e7e3:	0f 95 c0             	setne  %al
ffffffff8020e7e6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e7e9:	48 85 c0             	test   %rax,%rax
ffffffff8020e7ec:	74 0c                	je     ffffffff8020e7fa <_RME_Cpt_Del+0x2bb>
ffffffff8020e7ee:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e7f5:	e9 6a 01 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
ffffffff8020e7fa:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020e7ff:	e8 0d e0 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020e804:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e807:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e80b:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8020e80f:	48 29 c2             	sub    %rax,%rdx
ffffffff8020e812:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8020e816:	0f 96 c0             	setbe  %al
ffffffff8020e819:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e81c:	48 98                	cltq
ffffffff8020e81e:	48 85 c0             	test   %rax,%rax
ffffffff8020e821:	74 0c                	je     ffffffff8020e82f <_RME_Cpt_Del+0x2f0>
ffffffff8020e823:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020e82a:	e9 35 01 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
ffffffff8020e82f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e833:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020e837:	48 85 c0             	test   %rax,%rax
ffffffff8020e83a:	0f 95 c0             	setne  %al
ffffffff8020e83d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e840:	48 85 c0             	test   %rax,%rax
ffffffff8020e843:	74 44                	je     ffffffff8020e889 <_RME_Cpt_Del+0x34a>
ffffffff8020e845:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e849:	89 c0                	mov    %eax,%eax
ffffffff8020e84b:	48 85 c0             	test   %rax,%rax
ffffffff8020e84e:	0f 94 c0             	sete   %al
ffffffff8020e851:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e854:	48 85 c0             	test   %rax,%rax
ffffffff8020e857:	74 24                	je     ffffffff8020e87d <_RME_Cpt_Del+0x33e>
ffffffff8020e859:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020e860:	00 ff ff 
ffffffff8020e863:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff8020e867:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e86a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e86e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e872:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e875:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e878:	e8 e1 de ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e87d:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8020e884:	e9 db 00 00 00       	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
    /* Is there any capability in this capability table? If yes, we cannot destroy it.
     * We will check every slot to make sure nothing is there. This is surely,
     * predictable but not so perfect. So, if the time of such operations is to be 
     * bounded, the user must control the maximum number of entries in the table
     * by configuring RME_CPT_ENTRY_MAX to a non-zero value. */
    Table=RME_CAP_GETOBJ(Cpt_Del,struct RME_Cap_Struct*);
ffffffff8020e889:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e88d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e891:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Entry_Num=Cpt_Del->Entry_Num;
ffffffff8020e895:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e899:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e89d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e8a1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020e8a8:	00 
ffffffff8020e8a9:	eb 4c                	jmp    ffffffff8020e8f7 <_RME_Cpt_Del+0x3b8>
    {
        if(Table[Count].Head.Type_Stat!=0U)
ffffffff8020e8ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e8af:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e8b3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e8b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e8ba:	48 01 d0             	add    %rdx,%rax
ffffffff8020e8bd:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e8c0:	48 85 c0             	test   %rax,%rax
ffffffff8020e8c3:	74 2d                	je     ffffffff8020e8f2 <_RME_Cpt_Del+0x3b3>
        {
            RME_COV_MARKER();
            
            RME_CAP_DEFROST(Cpt_Del,Type_Stat);
ffffffff8020e8c5:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020e8cc:	00 ff ff 
ffffffff8020e8cf:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff8020e8d3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e8d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e8da:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e8de:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e8e1:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e8e4:	e8 75 de ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
            return RME_ERR_CPT_EXIST;
ffffffff8020e8e9:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020e8f0:	eb 72                	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e8f2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020e8f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e8fb:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8020e8ff:	72 aa                	jb     ffffffff8020e8ab <_RME_Cpt_Del+0x36c>
            /* No action required */
        }
    }
    
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Cpt_Del,rme_ptr_t);
ffffffff8020e901:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e905:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e909:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Size=RME_CPT_SIZE(Cpt_Del->Entry_Num);
ffffffff8020e90d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e911:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e915:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e919:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Cpt_Del,Type_Stat);
ffffffff8020e91d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e921:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e925:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020e92a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e92d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e930:	e8 29 de ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e935:	48 85 c0             	test   %rax,%rax
ffffffff8020e938:	0f 94 c0             	sete   %al
ffffffff8020e93b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e93e:	48 85 c0             	test   %rax,%rax
ffffffff8020e941:	74 09                	je     ffffffff8020e94c <_RME_Cpt_Del+0x40d>
ffffffff8020e943:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020e94a:	eb 18                	jmp    ffffffff8020e964 <_RME_Cpt_Del+0x425>

    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kot_Erase(Object,Size)==0);
ffffffff8020e94c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020e950:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e954:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e957:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e95a:	e8 26 3d 00 00       	call   ffffffff80212685 <_RME_Kot_Erase>
    
    return 0;
ffffffff8020e95f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020e964:	c9                   	leave
ffffffff8020e965:	c3                   	ret

ffffffff8020e966 <_RME_Cpt_Frz>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Frz(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Frz,
                              rme_cid_t Cap_Frz)
{
ffffffff8020e966:	f3 0f 1e fa          	endbr64
ffffffff8020e96a:	55                   	push   %rbp
ffffffff8020e96b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020e96e:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8020e972:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020e976:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020e97a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Struct* Capobj_Frz;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff8020e97e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e982:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e987:	48 85 c0             	test   %rax,%rax
ffffffff8020e98a:	0f 85 98 00 00 00    	jne    ffffffff8020ea28 <_RME_Cpt_Frz+0xc2>
ffffffff8020e990:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e994:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e998:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020e99c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e99f:	0f 93 c0             	setae  %al
ffffffff8020e9a2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e9a5:	48 85 c0             	test   %rax,%rax
ffffffff8020e9a8:	74 0c                	je     ffffffff8020e9b6 <_RME_Cpt_Frz+0x50>
ffffffff8020e9aa:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e9b1:	e9 f0 02 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
ffffffff8020e9b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e9ba:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e9be:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e9c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e9c5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e9c9:	48 01 d0             	add    %rdx,%rax
ffffffff8020e9cc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020e9d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e9d4:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e9d7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e9db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e9df:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e9e3:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e9e6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e9ea:	0f 94 c0             	sete   %al
ffffffff8020e9ed:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e9f0:	48 85 c0             	test   %rax,%rax
ffffffff8020e9f3:	74 0c                	je     ffffffff8020ea01 <_RME_Cpt_Frz+0x9b>
ffffffff8020e9f5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e9fc:	e9 a5 02 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
ffffffff8020ea01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ea05:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ea09:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ea0d:	0f 95 c0             	setne  %al
ffffffff8020ea10:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea13:	48 85 c0             	test   %rax,%rax
ffffffff8020ea16:	0f 84 4c 01 00 00    	je     ffffffff8020eb68 <_RME_Cpt_Frz+0x202>
ffffffff8020ea1c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ea23:	e9 7e 02 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
ffffffff8020ea28:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ea2c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ea30:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ea33:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ea37:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ea3b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ea3e:	0f 93 c0             	setae  %al
ffffffff8020ea41:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea44:	48 85 c0             	test   %rax,%rax
ffffffff8020ea47:	74 0c                	je     ffffffff8020ea55 <_RME_Cpt_Frz+0xef>
ffffffff8020ea49:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ea50:	e9 51 02 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
ffffffff8020ea55:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ea59:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ea5d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ea61:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ea64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ea68:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ea6c:	48 01 d0             	add    %rdx,%rax
ffffffff8020ea6f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ea73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ea77:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ea7a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ea7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ea82:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ea86:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ea89:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ea8d:	0f 94 c0             	sete   %al
ffffffff8020ea90:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea93:	48 85 c0             	test   %rax,%rax
ffffffff8020ea96:	74 0c                	je     ffffffff8020eaa4 <_RME_Cpt_Frz+0x13e>
ffffffff8020ea98:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ea9f:	e9 02 02 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
ffffffff8020eaa4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eaa8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eaac:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eab0:	0f 95 c0             	setne  %al
ffffffff8020eab3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eab6:	48 85 c0             	test   %rax,%rax
ffffffff8020eab9:	74 0c                	je     ffffffff8020eac7 <_RME_Cpt_Frz+0x161>
ffffffff8020eabb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eac2:	e9 df 01 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
ffffffff8020eac7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eacb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ead0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ead3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ead7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020eadb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020eade:	0f 93 c0             	setae  %al
ffffffff8020eae1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eae4:	48 85 c0             	test   %rax,%rax
ffffffff8020eae7:	74 0c                	je     ffffffff8020eaf5 <_RME_Cpt_Frz+0x18f>
ffffffff8020eae9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020eaf0:	e9 b1 01 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
ffffffff8020eaf5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eaf9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020eafe:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eb02:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eb05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb09:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020eb0d:	48 01 d0             	add    %rdx,%rax
ffffffff8020eb10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020eb14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb18:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eb1b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020eb1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eb23:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eb27:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eb2a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eb2e:	0f 94 c0             	sete   %al
ffffffff8020eb31:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb34:	48 85 c0             	test   %rax,%rax
ffffffff8020eb37:	74 0c                	je     ffffffff8020eb45 <_RME_Cpt_Frz+0x1df>
ffffffff8020eb39:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020eb40:	e9 61 01 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
ffffffff8020eb45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eb49:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eb4d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eb51:	0f 95 c0             	setne  %al
ffffffff8020eb54:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb57:	48 85 c0             	test   %rax,%rax
ffffffff8020eb5a:	74 0c                	je     ffffffff8020eb68 <_RME_Cpt_Frz+0x202>
ffffffff8020eb5c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eb63:	e9 3e 01 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_FRZ);
ffffffff8020eb68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb6c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020eb70:	83 e0 04             	and    $0x4,%eax
ffffffff8020eb73:	48 85 c0             	test   %rax,%rax
ffffffff8020eb76:	0f 94 c0             	sete   %al
ffffffff8020eb79:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb7c:	48 85 c0             	test   %rax,%rax
ffffffff8020eb7f:	74 0c                	je     ffffffff8020eb8d <_RME_Cpt_Frz+0x227>
ffffffff8020eb81:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020eb88:	e9 19 01 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Frz,struct RME_Cap_Struct*,Capobj_Frz);
ffffffff8020eb8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb91:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020eb95:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020eb99:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020eb9c:	0f 93 c0             	setae  %al
ffffffff8020eb9f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eba2:	48 85 c0             	test   %rax,%rax
ffffffff8020eba5:	74 0c                	je     ffffffff8020ebb3 <_RME_Cpt_Frz+0x24d>
ffffffff8020eba7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ebae:	e9 f3 00 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
ffffffff8020ebb3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020ebb7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ebbb:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ebbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ebc2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ebc6:	48 01 d0             	add    %rdx,%rax
ffffffff8020ebc9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* Check if anything is there. If nothing there, the Type_Stat must be 0. 
     * Need a read acquire barrier here to avoid stale reads below. */
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Frz->Head.Type_Stat));
ffffffff8020ebcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ebd1:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ebd4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* See if there is a cap */
    if(RME_CAP_TYPE(Type_Stat)==RME_CAP_TYPE_NOP)
ffffffff8020ebd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ebdc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ebe0:	48 85 c0             	test   %rax,%rax
ffffffff8020ebe3:	75 0c                	jne    ffffffff8020ebf1 <_RME_Cpt_Frz+0x28b>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_NULL;
ffffffff8020ebe5:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020ebec:	e9 b5 00 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* If this is a root capability, check if the reference count allows freezing */
    if(RME_CAP_ATTR(Type_Stat)==RME_CAP_ATTR_ROOT)
ffffffff8020ebf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ebf5:	89 c0                	mov    %eax,%eax
ffffffff8020ebf7:	48 85 c0             	test   %rax,%rax
ffffffff8020ebfa:	75 19                	jne    ffffffff8020ec15 <_RME_Cpt_Frz+0x2af>
    {
        if(Capobj_Frz->Head.Root_Ref!=0U)
ffffffff8020ebfc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec00:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020ec04:	48 85 c0             	test   %rax,%rax
ffffffff8020ec07:	74 0c                	je     ffffffff8020ec15 <_RME_Cpt_Frz+0x2af>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_REFCNT;
ffffffff8020ec09:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8020ec10:	e9 91 00 00 00       	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* The capability is already frozen - why do it again? */
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020ec15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ec19:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ec1d:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ec20:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ec24:	75 09                	jne    ffffffff8020ec2f <_RME_Cpt_Frz+0x2c9>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_FROZEN;
ffffffff8020ec26:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ec2d:	eb 77                	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the slot is quiescent */
    if(RME_UNLIKELY(RME_CAP_QUIE(Capobj_Frz->Head.Timestamp)==0U))
ffffffff8020ec2f:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020ec34:	e8 d8 db ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020ec39:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ec3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec40:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8020ec44:	48 29 c2             	sub    %rax,%rdx
ffffffff8020ec47:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8020ec4b:	0f 96 c0             	setbe  %al
ffffffff8020ec4e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ec51:	48 98                	cltq
ffffffff8020ec53:	48 85 c0             	test   %rax,%rax
ffffffff8020ec56:	74 09                	je     ffffffff8020ec61 <_RME_Cpt_Frz+0x2fb>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_QUIE;
ffffffff8020ec58:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020ec5f:	eb 45                	jmp    ffffffff8020eca6 <_RME_Cpt_Frz+0x340>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Update the timestamp */
    Capobj_Frz->Head.Timestamp=RME_TIMESTAMP();
ffffffff8020ec61:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020ec66:	e8 a6 db ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020ec6b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ec6f:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* Finally, freeze it. We do not report error here because if we CASFAIL someone must have helped us */
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
ffffffff8020ec73:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020ec7a:	00 ff ff 
ffffffff8020ec7d:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8020ec81:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff8020ec88:	00 00 00 
ffffffff8020ec8b:	48 09 c2             	or     %rax,%rdx
ffffffff8020ec8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec92:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020ec96:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020ec99:	48 89 c7             	mov    %rax,%rdi
ffffffff8020ec9c:	e8 bd da ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
                  RME_CAP_TYPE_STAT(RME_CAP_TYPE(Type_Stat),
                                    RME_CAP_STAT_FROZEN,
                                    RME_CAP_ATTR(Type_Stat)));

    return 0;
ffffffff8020eca1:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020eca6:	c9                   	leave
ffffffff8020eca7:	c3                   	ret

ffffffff8020eca8 <_RME_Cpt_Add>:
                              rme_cid_t Cap_Dst, 
                              rme_cid_t Cap_Cpt_Src,
                              rme_cid_t Cap_Src,
                              rme_ptr_t Flag,
                              rme_ptr_t Ext_Flag)
{
ffffffff8020eca8:	f3 0f 1e fa          	endbr64
ffffffff8020ecac:	55                   	push   %rbp
ffffffff8020ecad:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ecb0:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff8020ecb4:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff8020ecb8:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff8020ecbc:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff8020ecc0:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff8020ecc4:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff8020ecc8:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Kom_Begin;
    rme_ptr_t Kom_End;
    rme_ptr_t Kom_Flag;

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020eccc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ecd0:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020ecd5:	48 85 c0             	test   %rax,%rax
ffffffff8020ecd8:	0f 85 98 00 00 00    	jne    ffffffff8020ed76 <_RME_Cpt_Add+0xce>
ffffffff8020ecde:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ece2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ece6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8020ecea:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020eced:	0f 93 c0             	setae  %al
ffffffff8020ecf0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ecf3:	48 85 c0             	test   %rax,%rax
ffffffff8020ecf6:	74 0c                	je     ffffffff8020ed04 <_RME_Cpt_Add+0x5c>
ffffffff8020ecf8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ecff:	e9 db 08 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020ed04:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ed08:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ed0c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ed0f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ed13:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ed17:	48 01 d0             	add    %rdx,%rax
ffffffff8020ed1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ed1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ed22:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ed25:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ed29:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ed2d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ed31:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ed34:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ed38:	0f 94 c0             	sete   %al
ffffffff8020ed3b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed3e:	48 85 c0             	test   %rax,%rax
ffffffff8020ed41:	74 0c                	je     ffffffff8020ed4f <_RME_Cpt_Add+0xa7>
ffffffff8020ed43:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ed4a:	e9 90 08 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020ed4f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ed53:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ed57:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ed5b:	0f 95 c0             	setne  %al
ffffffff8020ed5e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed61:	48 85 c0             	test   %rax,%rax
ffffffff8020ed64:	0f 84 4c 01 00 00    	je     ffffffff8020eeb6 <_RME_Cpt_Add+0x20e>
ffffffff8020ed6a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ed71:	e9 69 08 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020ed76:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ed7a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ed7e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ed81:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ed85:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ed89:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ed8c:	0f 93 c0             	setae  %al
ffffffff8020ed8f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed92:	48 85 c0             	test   %rax,%rax
ffffffff8020ed95:	74 0c                	je     ffffffff8020eda3 <_RME_Cpt_Add+0xfb>
ffffffff8020ed97:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ed9e:	e9 3c 08 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020eda3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020eda7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020edab:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020edaf:	48 89 c2             	mov    %rax,%rdx
ffffffff8020edb2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020edb6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020edba:	48 01 d0             	add    %rdx,%rax
ffffffff8020edbd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020edc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020edc5:	48 8b 00             	mov    (%rax),%rax
ffffffff8020edc8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020edcc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020edd0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020edd4:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020edd7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eddb:	0f 94 c0             	sete   %al
ffffffff8020edde:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ede1:	48 85 c0             	test   %rax,%rax
ffffffff8020ede4:	74 0c                	je     ffffffff8020edf2 <_RME_Cpt_Add+0x14a>
ffffffff8020ede6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020eded:	e9 ed 07 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020edf2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020edf6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020edfa:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020edfe:	0f 95 c0             	setne  %al
ffffffff8020ee01:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee04:	48 85 c0             	test   %rax,%rax
ffffffff8020ee07:	74 0c                	je     ffffffff8020ee15 <_RME_Cpt_Add+0x16d>
ffffffff8020ee09:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ee10:	e9 ca 07 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020ee15:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ee19:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ee1e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ee21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ee25:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ee29:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ee2c:	0f 93 c0             	setae  %al
ffffffff8020ee2f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee32:	48 85 c0             	test   %rax,%rax
ffffffff8020ee35:	74 0c                	je     ffffffff8020ee43 <_RME_Cpt_Add+0x19b>
ffffffff8020ee37:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ee3e:	e9 9c 07 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020ee43:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ee47:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ee4c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ee50:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ee53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ee57:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ee5b:	48 01 d0             	add    %rdx,%rax
ffffffff8020ee5e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ee62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ee66:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ee69:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ee6d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ee71:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ee75:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ee78:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ee7c:	0f 94 c0             	sete   %al
ffffffff8020ee7f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee82:	48 85 c0             	test   %rax,%rax
ffffffff8020ee85:	74 0c                	je     ffffffff8020ee93 <_RME_Cpt_Add+0x1eb>
ffffffff8020ee87:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ee8e:	e9 4c 07 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020ee93:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ee97:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ee9b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ee9f:	0f 95 c0             	setne  %al
ffffffff8020eea2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eea5:	48 85 c0             	test   %rax,%rax
ffffffff8020eea8:	74 0c                	je     ffffffff8020eeb6 <_RME_Cpt_Add+0x20e>
ffffffff8020eeaa:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eeb1:	e9 29 07 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
                   struct RME_Cap_Cpt*,Cpt_Dst,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020eeb6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020eeba:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020eebf:	48 85 c0             	test   %rax,%rax
ffffffff8020eec2:	0f 85 98 00 00 00    	jne    ffffffff8020ef60 <_RME_Cpt_Add+0x2b8>
ffffffff8020eec8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020eecc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020eed0:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
ffffffff8020eed4:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020eed7:	0f 93 c0             	setae  %al
ffffffff8020eeda:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eedd:	48 85 c0             	test   %rax,%rax
ffffffff8020eee0:	74 0c                	je     ffffffff8020eeee <_RME_Cpt_Add+0x246>
ffffffff8020eee2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020eee9:	e9 f1 06 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020eeee:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020eef2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eef6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eef9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020eefd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ef01:	48 01 d0             	add    %rdx,%rax
ffffffff8020ef04:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ef08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ef0c:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ef0f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ef13:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ef17:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ef1b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ef1e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ef22:	0f 94 c0             	sete   %al
ffffffff8020ef25:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef28:	48 85 c0             	test   %rax,%rax
ffffffff8020ef2b:	74 0c                	je     ffffffff8020ef39 <_RME_Cpt_Add+0x291>
ffffffff8020ef2d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ef34:	e9 a6 06 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020ef39:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ef3d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ef41:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ef45:	0f 95 c0             	setne  %al
ffffffff8020ef48:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef4b:	48 85 c0             	test   %rax,%rax
ffffffff8020ef4e:	0f 84 4c 01 00 00    	je     ffffffff8020f0a0 <_RME_Cpt_Add+0x3f8>
ffffffff8020ef54:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ef5b:	e9 7f 06 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020ef60:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020ef64:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ef68:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ef6b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ef6f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ef73:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ef76:	0f 93 c0             	setae  %al
ffffffff8020ef79:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef7c:	48 85 c0             	test   %rax,%rax
ffffffff8020ef7f:	74 0c                	je     ffffffff8020ef8d <_RME_Cpt_Add+0x2e5>
ffffffff8020ef81:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ef88:	e9 52 06 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020ef8d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020ef91:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ef95:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ef99:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ef9c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020efa0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020efa4:	48 01 d0             	add    %rdx,%rax
ffffffff8020efa7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020efab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020efaf:	48 8b 00             	mov    (%rax),%rax
ffffffff8020efb2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020efb6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020efba:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020efbe:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020efc1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020efc5:	0f 94 c0             	sete   %al
ffffffff8020efc8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020efcb:	48 85 c0             	test   %rax,%rax
ffffffff8020efce:	74 0c                	je     ffffffff8020efdc <_RME_Cpt_Add+0x334>
ffffffff8020efd0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020efd7:	e9 03 06 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020efdc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020efe0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020efe4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020efe8:	0f 95 c0             	setne  %al
ffffffff8020efeb:	0f b6 c0             	movzbl %al,%eax
ffffffff8020efee:	48 85 c0             	test   %rax,%rax
ffffffff8020eff1:	74 0c                	je     ffffffff8020efff <_RME_Cpt_Add+0x357>
ffffffff8020eff3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020effa:	e9 e0 05 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020efff:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020f003:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f008:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f00b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f00f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f013:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f016:	0f 93 c0             	setae  %al
ffffffff8020f019:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f01c:	48 85 c0             	test   %rax,%rax
ffffffff8020f01f:	74 0c                	je     ffffffff8020f02d <_RME_Cpt_Add+0x385>
ffffffff8020f021:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f028:	e9 b2 05 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020f02d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020f031:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f036:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f03a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f03d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f041:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f045:	48 01 d0             	add    %rdx,%rax
ffffffff8020f048:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f04c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f050:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f053:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020f057:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f05b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f05f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f062:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f066:	0f 94 c0             	sete   %al
ffffffff8020f069:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f06c:	48 85 c0             	test   %rax,%rax
ffffffff8020f06f:	74 0c                	je     ffffffff8020f07d <_RME_Cpt_Add+0x3d5>
ffffffff8020f071:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f078:	e9 62 05 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020f07d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f081:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f085:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f089:	0f 95 c0             	setne  %al
ffffffff8020f08c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f08f:	48 85 c0             	test   %rax,%rax
ffffffff8020f092:	74 0c                	je     ffffffff8020f0a0 <_RME_Cpt_Add+0x3f8>
ffffffff8020f094:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f09b:	e9 3f 05 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
                   struct RME_Cap_Cpt*,Cpt_Src,Type_Stat);
    /* Check if both captbls are not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020f0a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f0a4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f0a8:	83 e0 10             	and    $0x10,%eax
ffffffff8020f0ab:	48 85 c0             	test   %rax,%rax
ffffffff8020f0ae:	0f 94 c0             	sete   %al
ffffffff8020f0b1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f0b4:	48 85 c0             	test   %rax,%rax
ffffffff8020f0b7:	74 0c                	je     ffffffff8020f0c5 <_RME_Cpt_Add+0x41d>
ffffffff8020f0b9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f0c0:	e9 1a 05 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
    RME_CAP_CHECK(Cpt_Src,RME_CPT_FLAG_ADD_SRC);
ffffffff8020f0c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f0c9:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f0cd:	83 e0 08             	and    $0x8,%eax
ffffffff8020f0d0:	48 85 c0             	test   %rax,%rax
ffffffff8020f0d3:	0f 94 c0             	sete   %al
ffffffff8020f0d6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f0d9:	48 85 c0             	test   %rax,%rax
ffffffff8020f0dc:	74 0c                	je     ffffffff8020f0ea <_RME_Cpt_Add+0x442>
ffffffff8020f0de:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f0e5:	e9 f5 04 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
    
    /* Get the cap slots */
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff8020f0ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f0ee:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f0f2:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff8020f0f6:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f0f9:	0f 93 c0             	setae  %al
ffffffff8020f0fc:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f0ff:	48 85 c0             	test   %rax,%rax
ffffffff8020f102:	74 0c                	je     ffffffff8020f110 <_RME_Cpt_Add+0x468>
ffffffff8020f104:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f10b:	e9 cf 04 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020f110:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8020f114:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f118:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f11b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f11f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f123:	48 01 d0             	add    %rdx,%rax
ffffffff8020f126:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020f12a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f12e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f132:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff8020f136:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f139:	0f 93 c0             	setae  %al
ffffffff8020f13c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f13f:	48 85 c0             	test   %rax,%rax
ffffffff8020f142:	74 0c                	je     ffffffff8020f150 <_RME_Cpt_Add+0x4a8>
ffffffff8020f144:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f14b:	e9 8f 04 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020f150:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8020f154:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f158:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f15b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f15f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f163:	48 01 d0             	add    %rdx,%rax
ffffffff8020f166:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    
    /* Atomic read - Read barrier to avoid premature checking of the rest */
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Src->Head.Type_Stat));
ffffffff8020f16a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f16e:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f171:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Is the source cap frozen? */
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020f175:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f179:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f17d:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f180:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f184:	75 0c                	jne    ffffffff8020f192 <_RME_Cpt_Add+0x4ea>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_FROZEN;
ffffffff8020f186:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f18d:	e9 4d 04 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Does the source cap exist at all? */
    if(Type_Stat==0U)
ffffffff8020f192:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff8020f197:	75 0c                	jne    ffffffff8020f1a5 <_RME_Cpt_Add+0x4fd>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_NULL;
ffffffff8020f199:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f1a0:	e9 3a 04 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Dewarn some compilers that complain about uninitialized variables */
    Kom_Begin=0U;
ffffffff8020f1a5:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8020f1ac:	00 
    Kom_End=0U;
ffffffff8020f1ad:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8020f1b4:	00 
    Kom_Flag=0U;
ffffffff8020f1b5:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8020f1bc:	00 
    
    /* Is there a flag conflict? - For page tables, we have different checking mechanisms */
    Src_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020f1bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f1c1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f1c5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    if(Src_Type==RME_CAP_TYPE_PGT)
ffffffff8020f1c9:	48 83 7d b8 04       	cmpq   $0x4,-0x48(%rbp)
ffffffff8020f1ce:	0f 85 c5 00 00 00    	jne    ffffffff8020f299 <_RME_Cpt_Add+0x5f1>
    {
        RME_COV_MARKER();
        
        /* Check the delegation range */
        if(RME_PGT_FLAG_HIGH(Flag)>RME_PGT_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020f1d4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f1d8:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f1dc:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f1df:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f1e3:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f1e7:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f1eb:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f1ee:	73 0c                	jae    ffffffff8020f1fc <_RME_Cpt_Add+0x554>
        {
            RME_COV_MARKER();
        
            return RME_ERR_CPT_FLAG;
ffffffff8020f1f0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f1f7:	e9 e3 03 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_PGT_FLAG_LOW(Flag)<RME_PGT_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020f1fc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f200:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f204:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f209:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f20c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f210:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f214:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f218:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f21d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f220:	73 0c                	jae    ffffffff8020f22e <_RME_Cpt_Add+0x586>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f222:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f229:	e9 b1 03 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_PGT_FLAG_HIGH(Flag)<RME_PGT_FLAG_LOW(Flag))
ffffffff8020f22e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f232:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f236:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f239:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f23d:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f241:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f246:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f249:	73 0c                	jae    ffffffff8020f257 <_RME_Cpt_Add+0x5af>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f24b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f252:	e9 88 03 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the flags - if there are extra ones, or all zero */
        if(RME_PGT_FLAG_FLAG(Flag)==0U)
ffffffff8020f257:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f25b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f25e:	48 85 c0             	test   %rax,%rax
ffffffff8020f261:	75 0c                	jne    ffffffff8020f26f <_RME_Cpt_Add+0x5c7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f263:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f26a:	e9 70 03 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if((RME_PGT_FLAG_FLAG(Flag)&(~RME_PGT_FLAG_FLAG(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f26f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f273:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f277:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f27a:	48 f7 d0             	not    %rax
ffffffff8020f27d:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f281:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f284:	48 85 c0             	test   %rax,%rax
ffffffff8020f287:	0f 84 c2 01 00 00    	je     ffffffff8020f44f <_RME_Cpt_Add+0x7a7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f28d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f294:	e9 46 03 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
    }
    else if(Src_Type==RME_CAP_TYPE_KFN)
ffffffff8020f299:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
ffffffff8020f29e:	75 6c                	jne    ffffffff8020f30c <_RME_Cpt_Add+0x664>
    {
        RME_COV_MARKER();
        
        /* Kernel funcrions only have ranges, no flags - check the delegation range */
        if(RME_KFN_FLAG_HIGH(Flag)>RME_KFN_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020f2a0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f2a4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f2a8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f2ab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f2af:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f2b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f2b7:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f2ba:	73 0c                	jae    ffffffff8020f2c8 <_RME_Cpt_Add+0x620>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f2bc:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f2c3:	e9 17 03 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_KFN_FLAG_LOW(Flag)<RME_KFN_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020f2c8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f2cc:	89 c2                	mov    %eax,%edx
ffffffff8020f2ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f2d2:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f2d6:	89 c0                	mov    %eax,%eax
ffffffff8020f2d8:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f2db:	73 0c                	jae    ffffffff8020f2e9 <_RME_Cpt_Add+0x641>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f2dd:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f2e4:	e9 f6 02 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_KFN_FLAG_HIGH(Flag)<RME_KFN_FLAG_LOW(Flag))
ffffffff8020f2e9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f2ed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f2f1:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff8020f2f5:	89 d2                	mov    %edx,%edx
ffffffff8020f2f7:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f2fa:	0f 83 4f 01 00 00    	jae    ffffffff8020f44f <_RME_Cpt_Add+0x7a7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f300:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f307:	e9 d3 02 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
    }
    else if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020f30c:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f311:	0f 85 05 01 00 00    	jne    ffffffff8020f41c <_RME_Cpt_Add+0x774>
    {
        RME_COV_MARKER();
        
        /* The Kom_End here is exclusive */
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020f317:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f31b:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020f31f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020f323:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
ffffffff8020f32a:	ff ff ff 
ffffffff8020f32d:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f331:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020f335:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8020f339:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
ffffffff8020f33d:	48 09 d0             	or     %rdx,%rax
ffffffff8020f340:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        Kom_Flag=RME_KOM_FLAG_KOM(Ext_Flag);
ffffffff8020f344:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8020f34b:	00 
        /* Round start and end to the slot boundary, if we are using slots bigger than 64 bytes */
#if(RME_KOM_SLOT_ORDER>6U)
        Kom_End=RME_ROUND_DOWN(Kom_End,RME_KOM_SLOT_ORDER);
        Kom_Begin=RME_ROUND_UP(Kom_Begin,RME_KOM_SLOT_ORDER);
#endif
        if(Kom_End<=Kom_Begin)
ffffffff8020f34c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f350:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f354:	72 0c                	jb     ffffffff8020f362 <_RME_Cpt_Add+0x6ba>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f356:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f35d:	e9 7d 02 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Convert relative addresses to absolute addresses and check for overflow */
        Kom_Begin+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020f362:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f366:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f36a:	48 01 45 e8          	add    %rax,-0x18(%rbp)
        if(Kom_Begin<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020f36e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f372:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f376:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f37a:	73 0c                	jae    ffffffff8020f388 <_RME_Cpt_Add+0x6e0>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f37c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f383:	e9 57 02 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020f388:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f38c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f390:	48 01 45 e0          	add    %rax,-0x20(%rbp)
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020f394:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f398:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f39c:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8020f3a0:	73 0c                	jae    ffffffff8020f3ae <_RME_Cpt_Add+0x706>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3a2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3a9:	e9 31 02 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Check the ranges of kernel memory */
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020f3ae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3b2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3b6:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f3ba:	73 0c                	jae    ffffffff8020f3c8 <_RME_Cpt_Add+0x720>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3bc:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3c3:	e9 17 02 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Internal encoding of 'end' is inclusive */
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->End<(Kom_End-1U))
ffffffff8020f3c8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3cc:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f3d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f3d4:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8020f3d8:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f3db:	73 0c                	jae    ffffffff8020f3e9 <_RME_Cpt_Add+0x741>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3dd:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3e4:	e9 f6 01 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the flags - if there are extra ones, or all zero */
        if(Kom_Flag==0U)
ffffffff8020f3e9:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020f3ee:	75 0c                	jne    ffffffff8020f3fc <_RME_Cpt_Add+0x754>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3f0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3f7:	e9 e3 01 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if((Kom_Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f3fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f400:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f404:	48 f7 d0             	not    %rax
ffffffff8020f407:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff8020f40b:	48 85 c0             	test   %rax,%rax
ffffffff8020f40e:	74 3f                	je     ffffffff8020f44f <_RME_Cpt_Add+0x7a7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f410:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f417:	e9 c3 01 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
    else
    {
        RME_COV_MARKER();
        
        /* Check the flags - if there are extra ones, or all zero */
        if(Flag==0U)
ffffffff8020f41c:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
ffffffff8020f421:	75 0c                	jne    ffffffff8020f42f <_RME_Cpt_Add+0x787>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f423:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f42a:	e9 b0 01 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        else
        {
            RME_COV_MARKER();
            /* No action required */
        }
        if((Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f42f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f433:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f437:	48 f7 d0             	not    %rax
ffffffff8020f43a:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f43e:	48 85 c0             	test   %rax,%rax
ffffffff8020f441:	74 0c                	je     ffffffff8020f44f <_RME_Cpt_Add+0x7a7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f443:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f44a:	e9 90 01 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
            /* No action required */
        }
    }
    
    /* Is the destination slot unoccupied? */
    if(Capobj_Dst->Head.Type_Stat!=0U)
ffffffff8020f44f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f453:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f456:	48 85 c0             	test   %rax,%rax
ffffffff8020f459:	74 0c                	je     ffffffff8020f467 <_RME_Cpt_Add+0x7bf>
    {
        RME_COV_MARKER();
            
        return RME_ERR_CPT_EXIST;
ffffffff8020f45b:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f462:	e9 78 01 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Try to take the empty slot */
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff8020f467:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f46b:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f472:	00 00 00 
ffffffff8020f475:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020f47a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f47d:	e8 dc d2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f482:	48 85 c0             	test   %rax,%rax
ffffffff8020f485:	0f 94 c0             	sete   %al
ffffffff8020f488:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f48b:	48 85 c0             	test   %rax,%rax
ffffffff8020f48e:	74 0c                	je     ffffffff8020f49c <_RME_Cpt_Add+0x7f4>
ffffffff8020f490:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f497:	e9 43 01 00 00       	jmp    ffffffff8020f5df <_RME_Cpt_Add+0x937>
ffffffff8020f49c:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020f4a1:	e8 6b d3 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020f4a6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020f4aa:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* All done, we replicate the cap with flags */
    if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020f4ae:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f4b3:	75 6a                	jne    ffffffff8020f51f <_RME_Cpt_Add+0x877>
    {
        RME_COV_MARKER();
            
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Kom_Flag);
ffffffff8020f4b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4b9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020f4bd:	48 89 50 10          	mov    %rdx,0x10(%rax)
ffffffff8020f4c1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4c5:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8020f4c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4cd:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff8020f4d1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4d5:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f4d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4dd:	48 89 50 28          	mov    %rdx,0x28(%rax)
ffffffff8020f4e1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4e5:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f4e9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4ed:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f4f1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4f5:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff8020f4f9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4fd:	48 89 50 38          	mov    %rdx,0x38(%rax)
        /* Write absolute range information for kernel memory caps */
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->Begin=Kom_Begin;
ffffffff8020f501:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f505:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020f509:	48 89 50 28          	mov    %rdx,0x28(%rax)
        /* The Kom_End encoded inclusively to avoid overflow at max address */
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->End=Kom_End-1U;
ffffffff8020f50d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f511:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8020f515:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f519:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f51d:	eb 4c                	jmp    ffffffff8020f56b <_RME_Cpt_Add+0x8c3>
    }
    else
    {
        RME_COV_MARKER();
        
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
ffffffff8020f51f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f523:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff8020f527:	48 89 50 10          	mov    %rdx,0x10(%rax)
ffffffff8020f52b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f52f:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8020f533:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f537:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff8020f53b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f53f:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f543:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f547:	48 89 50 28          	mov    %rdx,0x28(%rax)
ffffffff8020f54b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f54f:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f553:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f557:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f55b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f55f:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff8020f563:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f567:	48 89 50 38          	mov    %rdx,0x38(%rax)
     * their parent, nor will they update the parent's reference count. This
     * design decision comes from the fact that these two capability types are
     * always created on boot and delegated everywhere, and they don't actually
     * have an object. If we use refcnt on these, we may cause scalability 
     * issues. The parent cap can't be deleted anyway, so this is fine. */
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020f56b:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f570:	74 46                	je     ffffffff8020f5b8 <_RME_Cpt_Add+0x910>
ffffffff8020f572:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
ffffffff8020f577:	74 3f                	je     ffffffff8020f5b8 <_RME_Cpt_Add+0x910>
    {
        RME_COV_MARKER();
        
        /* Register root */
        Capobj_Dst->Head.Root_Ref=RME_CAP_CONV_ROOT(Capobj_Src,rme_ptr_t);
ffffffff8020f579:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f57d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f580:	89 c0                	mov    %eax,%eax
ffffffff8020f582:	48 85 c0             	test   %rax,%rax
ffffffff8020f585:	74 0a                	je     ffffffff8020f591 <_RME_Cpt_Add+0x8e9>
ffffffff8020f587:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f58b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f58f:	eb 04                	jmp    ffffffff8020f595 <_RME_Cpt_Add+0x8ed>
ffffffff8020f591:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f595:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020f599:	48 89 42 08          	mov    %rax,0x8(%rdx)
    
        /* Increase the parent's refcnt - never overflows, guaranteed by field size */
        RME_FETCH_ADD(&(((volatile struct RME_Cap_Struct*)
ffffffff8020f59d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f5a1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f5a5:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020f5a9:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8020f5ae:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f5b1:	e8 dd d1 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff8020f5b6:	eb 0c                	jmp    ffffffff8020f5c4 <_RME_Cpt_Add+0x91c>
    else
    {
        RME_COV_MARKER();
        
        /* No root for KOM and KFN */
        Capobj_Dst->Head.Root_Ref=0U;
ffffffff8020f5b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f5bc:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020f5c3:	00 
    }

    /* Establish cap */
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff8020f5c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020f5c8:	48 c1 e0 30          	shl    $0x30,%rax
ffffffff8020f5cc:	48 83 c8 01          	or     $0x1,%rax
ffffffff8020f5d0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f5d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f5d7:	48 89 10             	mov    %rdx,(%rax)
                      RME_CAP_TYPE_STAT(Src_Type,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_LEAF));

    return 0;
ffffffff8020f5da:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020f5df:	c9                   	leave
ffffffff8020f5e0:	c3                   	ret

ffffffff8020f5e1 <_RME_Cpt_Rem>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Rem(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Rem,
                              rme_cid_t Cap_Rem)
{
ffffffff8020f5e1:	f3 0f 1e fa          	endbr64
ffffffff8020f5e5:	55                   	push   %rbp
ffffffff8020f5e6:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020f5e9:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff8020f5ed:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8020f5f1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8020f5f5:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    rme_ptr_t Rem_Type;
    /* This is used for removal */
    volatile struct RME_Cap_Struct* Capobj_Root;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff8020f5f9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f5fd:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020f602:	48 85 c0             	test   %rax,%rax
ffffffff8020f605:	0f 85 98 00 00 00    	jne    ffffffff8020f6a3 <_RME_Cpt_Rem+0xc2>
ffffffff8020f60b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f60f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f613:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020f617:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f61a:	0f 93 c0             	setae  %al
ffffffff8020f61d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f620:	48 85 c0             	test   %rax,%rax
ffffffff8020f623:	74 0c                	je     ffffffff8020f631 <_RME_Cpt_Rem+0x50>
ffffffff8020f625:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f62c:	e9 3f 03 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
ffffffff8020f631:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f635:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f639:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f63c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f640:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f644:	48 01 d0             	add    %rdx,%rax
ffffffff8020f647:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f64b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f64f:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f652:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f656:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f65a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f65e:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f661:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f665:	0f 94 c0             	sete   %al
ffffffff8020f668:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f66b:	48 85 c0             	test   %rax,%rax
ffffffff8020f66e:	74 0c                	je     ffffffff8020f67c <_RME_Cpt_Rem+0x9b>
ffffffff8020f670:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f677:	e9 f4 02 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
ffffffff8020f67c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f680:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f684:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f688:	0f 95 c0             	setne  %al
ffffffff8020f68b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f68e:	48 85 c0             	test   %rax,%rax
ffffffff8020f691:	0f 84 4c 01 00 00    	je     ffffffff8020f7e3 <_RME_Cpt_Rem+0x202>
ffffffff8020f697:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f69e:	e9 cd 02 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
ffffffff8020f6a3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f6a7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f6ab:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f6ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f6b2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f6b6:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f6b9:	0f 93 c0             	setae  %al
ffffffff8020f6bc:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f6bf:	48 85 c0             	test   %rax,%rax
ffffffff8020f6c2:	74 0c                	je     ffffffff8020f6d0 <_RME_Cpt_Rem+0xef>
ffffffff8020f6c4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f6cb:	e9 a0 02 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
ffffffff8020f6d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f6d4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f6d8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f6dc:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f6df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f6e3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f6e7:	48 01 d0             	add    %rdx,%rax
ffffffff8020f6ea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f6ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f6f2:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f6f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f6f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f6fd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f701:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f704:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f708:	0f 94 c0             	sete   %al
ffffffff8020f70b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f70e:	48 85 c0             	test   %rax,%rax
ffffffff8020f711:	74 0c                	je     ffffffff8020f71f <_RME_Cpt_Rem+0x13e>
ffffffff8020f713:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f71a:	e9 51 02 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
ffffffff8020f71f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f723:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f727:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f72b:	0f 95 c0             	setne  %al
ffffffff8020f72e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f731:	48 85 c0             	test   %rax,%rax
ffffffff8020f734:	74 0c                	je     ffffffff8020f742 <_RME_Cpt_Rem+0x161>
ffffffff8020f736:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f73d:	e9 2e 02 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
ffffffff8020f742:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f746:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f74b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f74e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f752:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f756:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f759:	0f 93 c0             	setae  %al
ffffffff8020f75c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f75f:	48 85 c0             	test   %rax,%rax
ffffffff8020f762:	74 0c                	je     ffffffff8020f770 <_RME_Cpt_Rem+0x18f>
ffffffff8020f764:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f76b:	e9 00 02 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
ffffffff8020f770:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f774:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f779:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f77d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f780:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f784:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f788:	48 01 d0             	add    %rdx,%rax
ffffffff8020f78b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f78f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f793:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f796:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f79a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f79e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f7a2:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f7a5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f7a9:	0f 94 c0             	sete   %al
ffffffff8020f7ac:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f7af:	48 85 c0             	test   %rax,%rax
ffffffff8020f7b2:	74 0c                	je     ffffffff8020f7c0 <_RME_Cpt_Rem+0x1df>
ffffffff8020f7b4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f7bb:	e9 b0 01 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
ffffffff8020f7c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f7c4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f7c8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f7cc:	0f 95 c0             	setne  %al
ffffffff8020f7cf:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f7d2:	48 85 c0             	test   %rax,%rax
ffffffff8020f7d5:	74 0c                	je     ffffffff8020f7e3 <_RME_Cpt_Rem+0x202>
ffffffff8020f7d7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f7de:	e9 8d 01 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_REM);
ffffffff8020f7e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f7e7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f7eb:	83 e0 20             	and    $0x20,%eax
ffffffff8020f7ee:	48 85 c0             	test   %rax,%rax
ffffffff8020f7f1:	0f 94 c0             	sete   %al
ffffffff8020f7f4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f7f7:	48 85 c0             	test   %rax,%rax
ffffffff8020f7fa:	74 0c                	je     ffffffff8020f808 <_RME_Cpt_Rem+0x227>
ffffffff8020f7fc:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f803:	e9 68 01 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff8020f808:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f80c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f810:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020f814:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f817:	0f 93 c0             	setae  %al
ffffffff8020f81a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f81d:	48 85 c0             	test   %rax,%rax
ffffffff8020f820:	74 0c                	je     ffffffff8020f82e <_RME_Cpt_Rem+0x24d>
ffffffff8020f822:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f829:	e9 42 01 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
ffffffff8020f82e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020f832:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f836:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f839:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f83d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f841:	48 01 d0             	add    %rdx,%rax
ffffffff8020f844:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Removal check */
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff8020f848:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f84c:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f84f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f853:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f857:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f85b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f85e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f862:	0f 95 c0             	setne  %al
ffffffff8020f865:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f868:	48 85 c0             	test   %rax,%rax
ffffffff8020f86b:	74 0c                	je     ffffffff8020f879 <_RME_Cpt_Rem+0x298>
ffffffff8020f86d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f874:	e9 f7 00 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
ffffffff8020f879:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020f87e:	e8 8e cf ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020f883:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f886:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f88a:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8020f88e:	48 29 c2             	sub    %rax,%rdx
ffffffff8020f891:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8020f895:	0f 96 c0             	setbe  %al
ffffffff8020f898:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f89b:	48 98                	cltq
ffffffff8020f89d:	48 85 c0             	test   %rax,%rax
ffffffff8020f8a0:	74 0c                	je     ffffffff8020f8ae <_RME_Cpt_Rem+0x2cd>
ffffffff8020f8a2:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020f8a9:	e9 c2 00 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
ffffffff8020f8ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f8b2:	89 c0                	mov    %eax,%eax
ffffffff8020f8b4:	48 85 c0             	test   %rax,%rax
ffffffff8020f8b7:	0f 94 c0             	sete   %al
ffffffff8020f8ba:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f8bd:	48 85 c0             	test   %rax,%rax
ffffffff8020f8c0:	74 0c                	je     ffffffff8020f8ce <_RME_Cpt_Rem+0x2ed>
ffffffff8020f8c2:	48 c7 c0 f6 ff ff ff 	mov    $0xfffffffffffffff6,%rax
ffffffff8020f8c9:	e9 a2 00 00 00       	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
    
    /* If we are KFN or KOM, we don't care about parent or refcnt */
    Rem_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020f8ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f8d2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f8d6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if((Rem_Type!=RME_CAP_TYPE_KOM)&&(Rem_Type!=RME_CAP_TYPE_KFN))
ffffffff8020f8da:	48 83 7d e0 02       	cmpq   $0x2,-0x20(%rbp)
ffffffff8020f8df:	74 5b                	je     ffffffff8020f93c <_RME_Cpt_Rem+0x35b>
ffffffff8020f8e1:	48 83 7d e0 01       	cmpq   $0x1,-0x20(%rbp)
ffffffff8020f8e6:	74 54                	je     ffffffff8020f93c <_RME_Cpt_Rem+0x35b>
    {
        RME_COV_MARKER();
        
        /* Remember this for refcnt operations */
        Capobj_Root=(struct RME_Cap_Struct*)(Capobj_Rem->Head.Root_Ref);
ffffffff8020f8e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f8ec:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f8f0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8020f8f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f8f8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020f8fc:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020f901:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020f904:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f907:	e8 52 ce ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f90c:	48 85 c0             	test   %rax,%rax
ffffffff8020f90f:	0f 94 c0             	sete   %al
ffffffff8020f912:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f915:	48 85 c0             	test   %rax,%rax
ffffffff8020f918:	74 09                	je     ffffffff8020f923 <_RME_Cpt_Rem+0x342>
ffffffff8020f91a:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f921:	eb 4d                	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>

        /* Check done, decrease its parent's refcnt. This must be done at last */
        RME_FETCH_ADD(&(Capobj_Root->Head.Root_Ref),-1);
ffffffff8020f923:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f927:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020f92b:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8020f932:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f935:	e8 59 ce ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff8020f93a:	eb 2f                	jmp    ffffffff8020f96b <_RME_Cpt_Rem+0x38a>
    else
    {
        RME_COV_MARKER();

        /* Helping also applies here */
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8020f93c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f940:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020f944:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020f949:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020f94c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f94f:	e8 0a ce ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f954:	48 85 c0             	test   %rax,%rax
ffffffff8020f957:	0f 94 c0             	sete   %al
ffffffff8020f95a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f95d:	48 85 c0             	test   %rax,%rax
ffffffff8020f960:	74 09                	je     ffffffff8020f96b <_RME_Cpt_Rem+0x38a>
ffffffff8020f962:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f969:	eb 05                	jmp    ffffffff8020f970 <_RME_Cpt_Rem+0x38f>
    }
    
    return 0;
ffffffff8020f96b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020f970:	c9                   	leave
ffffffff8020f971:	c3                   	ret

ffffffff8020f972 <_RME_Pgt_Boot_Crt>:
                            rme_ptr_t Vaddr,
                            rme_ptr_t Base,
                            rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order,
                            rme_ptr_t Num_Order)
{
ffffffff8020f972:	f3 0f 1e fa          	endbr64
ffffffff8020f976:	55                   	push   %rbp
ffffffff8020f977:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020f97a:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020f97e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020f982:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020f986:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020f98a:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020f98e:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
ffffffff8020f992:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Table_Size;
    
    /* Check if the total representable memory exceeds our maximum possible
     * addressible memory under the machine word length */
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020f996:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020f99a:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020f99e:	48 01 d0             	add    %rdx,%rax
ffffffff8020f9a1:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff8020f9a5:	76 0c                	jbe    ffffffff8020f9b3 <_RME_Pgt_Boot_Crt+0x41>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff8020f9a7:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020f9ae:	e9 e9 03 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f9b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f9b7:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020f9bc:	48 85 c0             	test   %rax,%rax
ffffffff8020f9bf:	0f 85 98 00 00 00    	jne    ffffffff8020fa5d <_RME_Pgt_Boot_Crt+0xeb>
ffffffff8020f9c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f9c9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f9cd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020f9d1:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f9d4:	0f 93 c0             	setae  %al
ffffffff8020f9d7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f9da:	48 85 c0             	test   %rax,%rax
ffffffff8020f9dd:	74 0c                	je     ffffffff8020f9eb <_RME_Pgt_Boot_Crt+0x79>
ffffffff8020f9df:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f9e6:	e9 b1 03 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020f9eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f9ef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f9f3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f9f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f9fa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f9fe:	48 01 d0             	add    %rdx,%rax
ffffffff8020fa01:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fa05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fa09:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fa0c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fa10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fa14:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fa18:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fa1b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fa1f:	0f 94 c0             	sete   %al
ffffffff8020fa22:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa25:	48 85 c0             	test   %rax,%rax
ffffffff8020fa28:	74 0c                	je     ffffffff8020fa36 <_RME_Pgt_Boot_Crt+0xc4>
ffffffff8020fa2a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fa31:	e9 66 03 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fa36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fa3a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fa3e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fa42:	0f 95 c0             	setne  %al
ffffffff8020fa45:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa48:	48 85 c0             	test   %rax,%rax
ffffffff8020fa4b:	0f 84 4c 01 00 00    	je     ffffffff8020fb9d <_RME_Pgt_Boot_Crt+0x22b>
ffffffff8020fa51:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fa58:	e9 3f 03 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fa5d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fa61:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fa65:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fa68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fa6c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fa70:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fa73:	0f 93 c0             	setae  %al
ffffffff8020fa76:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa79:	48 85 c0             	test   %rax,%rax
ffffffff8020fa7c:	74 0c                	je     ffffffff8020fa8a <_RME_Pgt_Boot_Crt+0x118>
ffffffff8020fa7e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fa85:	e9 12 03 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fa8a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fa8e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fa92:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fa96:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fa99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fa9d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020faa1:	48 01 d0             	add    %rdx,%rax
ffffffff8020faa4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020faa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020faac:	48 8b 00             	mov    (%rax),%rax
ffffffff8020faaf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fab3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fab7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fabb:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fabe:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fac2:	0f 94 c0             	sete   %al
ffffffff8020fac5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fac8:	48 85 c0             	test   %rax,%rax
ffffffff8020facb:	74 0c                	je     ffffffff8020fad9 <_RME_Pgt_Boot_Crt+0x167>
ffffffff8020facd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fad4:	e9 c3 02 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fad9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fadd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fae1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fae5:	0f 95 c0             	setne  %al
ffffffff8020fae8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020faeb:	48 85 c0             	test   %rax,%rax
ffffffff8020faee:	74 0c                	je     ffffffff8020fafc <_RME_Pgt_Boot_Crt+0x18a>
ffffffff8020faf0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020faf7:	e9 a0 02 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fafc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fb00:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fb05:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fb08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb0c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fb10:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fb13:	0f 93 c0             	setae  %al
ffffffff8020fb16:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb19:	48 85 c0             	test   %rax,%rax
ffffffff8020fb1c:	74 0c                	je     ffffffff8020fb2a <_RME_Pgt_Boot_Crt+0x1b8>
ffffffff8020fb1e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fb25:	e9 72 02 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fb2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fb2e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fb33:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fb37:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fb3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb3e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fb42:	48 01 d0             	add    %rdx,%rax
ffffffff8020fb45:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fb49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb4d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fb50:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fb54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fb58:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fb5c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fb5f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fb63:	0f 94 c0             	sete   %al
ffffffff8020fb66:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb69:	48 85 c0             	test   %rax,%rax
ffffffff8020fb6c:	74 0c                	je     ffffffff8020fb7a <_RME_Pgt_Boot_Crt+0x208>
ffffffff8020fb6e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fb75:	e9 22 02 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fb7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fb7e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fb82:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fb86:	0f 95 c0             	setne  %al
ffffffff8020fb89:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb8c:	48 85 c0             	test   %rax,%rax
ffffffff8020fb8f:	74 0c                	je     ffffffff8020fb9d <_RME_Pgt_Boot_Crt+0x22b>
ffffffff8020fb91:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fb98:	e9 ff 01 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fb9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fba1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020fba5:	83 e0 01             	and    $0x1,%eax
ffffffff8020fba8:	48 85 c0             	test   %rax,%rax
ffffffff8020fbab:	0f 94 c0             	sete   %al
ffffffff8020fbae:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fbb1:	48 85 c0             	test   %rax,%rax
ffffffff8020fbb4:	74 0c                	je     ffffffff8020fbc2 <_RME_Pgt_Boot_Crt+0x250>
ffffffff8020fbb6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020fbbd:	e9 da 01 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
    
    /* Check if these parameters are feasible */
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)!=0)
ffffffff8020fbc2:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8020fbc6:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
ffffffff8020fbca:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020fbce:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
ffffffff8020fbd2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020fbd6:	49 89 f8             	mov    %rdi,%r8
ffffffff8020fbd9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fbdc:	e8 b8 6b 01 00       	call   ffffffff80226799 <__RME_Pgt_Check>
ffffffff8020fbe1:	48 85 c0             	test   %rax,%rax
ffffffff8020fbe4:	74 0c                	je     ffffffff8020fbf2 <_RME_Pgt_Boot_Crt+0x280>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff8020fbe6:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020fbed:	e9 aa 01 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if the base address is properly aligned to the total order of the page table */
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020fbf2:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8020fbf6:	89 c2                	mov    %eax,%edx
ffffffff8020fbf8:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fbfc:	01 c2                	add    %eax,%edx
ffffffff8020fbfe:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff8020fc03:	29 d0                	sub    %edx,%eax
ffffffff8020fc05:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8020fc0c:	89 c1                	mov    %eax,%ecx
ffffffff8020fc0e:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020fc11:	48 89 d0             	mov    %rdx,%rax
ffffffff8020fc14:	48 23 45 b8          	and    -0x48(%rbp),%rax
ffffffff8020fc18:	48 85 c0             	test   %rax,%rax
ffffffff8020fc1b:	74 0c                	je     ffffffff8020fc29 <_RME_Pgt_Boot_Crt+0x2b7>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_HW;
ffffffff8020fc1d:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020fc24:	e9 73 01 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020fc29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fc2d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fc31:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020fc35:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fc38:	0f 93 c0             	setae  %al
ffffffff8020fc3b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fc3e:	48 85 c0             	test   %rax,%rax
ffffffff8020fc41:	74 0c                	je     ffffffff8020fc4f <_RME_Pgt_Boot_Crt+0x2dd>
ffffffff8020fc43:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fc4a:	e9 4d 01 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fc4f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020fc53:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fc57:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fc5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fc5e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fc62:	48 01 d0             	add    %rdx,%rax
ffffffff8020fc65:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020fc69:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fc6d:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020fc74:	00 00 00 
ffffffff8020fc77:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020fc7c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fc7f:	e8 da ca ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020fc84:	48 85 c0             	test   %rax,%rax
ffffffff8020fc87:	0f 94 c0             	sete   %al
ffffffff8020fc8a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fc8d:	48 85 c0             	test   %rax,%rax
ffffffff8020fc90:	74 0c                	je     ffffffff8020fc9e <_RME_Pgt_Boot_Crt+0x32c>
ffffffff8020fc92:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020fc99:	e9 fe 00 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fc9e:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020fca3:	e8 69 cb ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020fca8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020fcac:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Are we creating the top level? */
    if(Is_Top!=0U)
ffffffff8020fcb0:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8020fcb5:	74 1b                	je     ffffffff8020fcd2 <_RME_Pgt_Boot_Crt+0x360>
    {
        RME_COV_MARKER();
        
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020fcb7:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fcbb:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020fcc0:	89 c1                	mov    %eax,%ecx
ffffffff8020fcc2:	d3 e2                	shl    %cl,%edx
ffffffff8020fcc4:	89 d0                	mov    %edx,%eax
ffffffff8020fcc6:	48 98                	cltq
ffffffff8020fcc8:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020fccc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fcd0:	eb 19                	jmp    ffffffff8020fceb <_RME_Pgt_Boot_Crt+0x379>
    }
    else
    {
        RME_COV_MARKER();
        
        Table_Size=RME_PGT_SIZE_NOM(Num_Order);
ffffffff8020fcd2:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fcd6:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020fcdb:	89 c1                	mov    %eax,%ecx
ffffffff8020fcdd:	d3 e2                	shl    %cl,%edx
ffffffff8020fcdf:	89 d0                	mov    %edx,%eax
ffffffff8020fce1:	48 98                	cltq
ffffffff8020fce3:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020fce7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020fceb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020fcef:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020fcf3:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020fcf6:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fcf9:	e8 40 26 00 00       	call   ffffffff8021233e <_RME_Kot_Mark>
ffffffff8020fcfe:	48 85 c0             	test   %rax,%rax
ffffffff8020fd01:	74 17                	je     ffffffff8020fd1a <_RME_Pgt_Boot_Crt+0x3a8>
    {
        RME_COV_MARKER();
    
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020fd03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd07:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020fd0e:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020fd15:	e9 82 00 00 00       	jmp    ffffffff8020fd9c <_RME_Pgt_Boot_Crt+0x42a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Header init */
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020fd1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd1e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020fd25:	00 
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020fd26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd2a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020fd2e:	48 89 50 18          	mov    %rdx,0x18(%rax)
    /* Set the property of the page table to only act as source and creating process */
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ADD_SRC|
ffffffff8020fd32:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd36:	48 be c1 00 00 00 f0 	movabs $0xfffffff0000000c1,%rsi
ffffffff8020fd3d:	ff ff ff 
ffffffff8020fd40:	48 89 70 10          	mov    %rsi,0x10(%rax)
                       RME_PGT_FLAG_PRC_CRT|RME_PGT_FLAG_PRC_PGT;
    
    /* Info init */
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020fd44:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020fd48:	48 0b 45 b0          	or     -0x50(%rbp),%rax
ffffffff8020fd4c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fd4f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd53:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fd57:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8020fd5b:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020fd5f:	48 0b 45 18          	or     0x18(%rbp),%rax
ffffffff8020fd63:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fd66:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd6a:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Pgt_Crt->ASID=0U;
ffffffff8020fd6e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd72:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff8020fd79:	00 

    /* Object init - need to add all kernel pages if they are top-level */
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020fd7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd7e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fd81:	e8 a5 6a 01 00       	call   ffffffff8022682b <__RME_Pgt_Init>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Establish cap */
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020fd86:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd8a:	48 bf 00 00 00 00 00 	movabs $0x4000000000000,%rdi
ffffffff8020fd91:	00 04 00 
ffffffff8020fd94:	48 89 38             	mov    %rdi,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PGT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020fd97:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020fd9c:	c9                   	leave
ffffffff8020fd9d:	c3                   	ret

ffffffff8020fd9e <_RME_Pgt_Boot_Add>:
rme_ret_t _RME_Pgt_Boot_Add(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Pgt, 
                            rme_ptr_t Paddr,
                            rme_ptr_t Pos,
                            rme_ptr_t Flag)
{
ffffffff8020fd9e:	f3 0f 1e fa          	endbr64
ffffffff8020fda2:	55                   	push   %rbp
ffffffff8020fda3:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020fda6:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020fdaa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020fdae:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020fdb2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020fdb6:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020fdba:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Pgt* Pgt_Op;
    rme_ptr_t Type_Stat;
    rme_ptr_t Szord;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020fdbe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fdc2:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020fdc7:	48 85 c0             	test   %rax,%rax
ffffffff8020fdca:	0f 85 98 00 00 00    	jne    ffffffff8020fe68 <_RME_Pgt_Boot_Add+0xca>
ffffffff8020fdd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fdd4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fdd8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020fddc:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fddf:	0f 93 c0             	setae  %al
ffffffff8020fde2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fde5:	48 85 c0             	test   %rax,%rax
ffffffff8020fde8:	74 0c                	je     ffffffff8020fdf6 <_RME_Pgt_Boot_Add+0x58>
ffffffff8020fdea:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fdf1:	e9 33 02 00 00       	jmp    ffffffff80210029 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fdf6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fdfa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fdfe:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fe05:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fe09:	48 01 d0             	add    %rdx,%rax
ffffffff8020fe0c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fe10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fe14:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fe17:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fe1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fe1f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fe23:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fe26:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fe2a:	0f 94 c0             	sete   %al
ffffffff8020fe2d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe30:	48 85 c0             	test   %rax,%rax
ffffffff8020fe33:	74 0c                	je     ffffffff8020fe41 <_RME_Pgt_Boot_Add+0xa3>
ffffffff8020fe35:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fe3c:	e9 e8 01 00 00       	jmp    ffffffff80210029 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fe41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fe45:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fe49:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020fe4d:	0f 95 c0             	setne  %al
ffffffff8020fe50:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe53:	48 85 c0             	test   %rax,%rax
ffffffff8020fe56:	0f 84 4c 01 00 00    	je     ffffffff8020ffa8 <_RME_Pgt_Boot_Add+0x20a>
ffffffff8020fe5c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fe63:	e9 c1 01 00 00       	jmp    ffffffff80210029 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fe68:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fe6c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fe70:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fe77:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fe7b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fe7e:	0f 93 c0             	setae  %al
ffffffff8020fe81:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe84:	48 85 c0             	test   %rax,%rax
ffffffff8020fe87:	74 0c                	je     ffffffff8020fe95 <_RME_Pgt_Boot_Add+0xf7>
ffffffff8020fe89:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fe90:	e9 94 01 00 00       	jmp    ffffffff80210029 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fe95:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fe99:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fe9d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fea1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fea4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fea8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020feac:	48 01 d0             	add    %rdx,%rax
ffffffff8020feaf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020feb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020feb7:	48 8b 00             	mov    (%rax),%rax
ffffffff8020feba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020febe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fec2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fec6:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fec9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fecd:	0f 94 c0             	sete   %al
ffffffff8020fed0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fed3:	48 85 c0             	test   %rax,%rax
ffffffff8020fed6:	74 0c                	je     ffffffff8020fee4 <_RME_Pgt_Boot_Add+0x146>
ffffffff8020fed8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fedf:	e9 45 01 00 00       	jmp    ffffffff80210029 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fee4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fee8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020feec:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fef0:	0f 95 c0             	setne  %al
ffffffff8020fef3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fef6:	48 85 c0             	test   %rax,%rax
ffffffff8020fef9:	74 0c                	je     ffffffff8020ff07 <_RME_Pgt_Boot_Add+0x169>
ffffffff8020fefb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ff02:	e9 22 01 00 00       	jmp    ffffffff80210029 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ff07:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ff0b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ff10:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff17:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ff1b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ff1e:	0f 93 c0             	setae  %al
ffffffff8020ff21:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff24:	48 85 c0             	test   %rax,%rax
ffffffff8020ff27:	74 0c                	je     ffffffff8020ff35 <_RME_Pgt_Boot_Add+0x197>
ffffffff8020ff29:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ff30:	e9 f4 00 00 00       	jmp    ffffffff80210029 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ff35:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ff39:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ff3e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ff42:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff49:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ff4d:	48 01 d0             	add    %rdx,%rax
ffffffff8020ff50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ff54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff58:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ff5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ff5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ff63:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ff67:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ff6a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ff6e:	0f 94 c0             	sete   %al
ffffffff8020ff71:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff74:	48 85 c0             	test   %rax,%rax
ffffffff8020ff77:	74 0c                	je     ffffffff8020ff85 <_RME_Pgt_Boot_Add+0x1e7>
ffffffff8020ff79:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ff80:	e9 a4 00 00 00       	jmp    ffffffff80210029 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ff85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ff89:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ff8d:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020ff91:	0f 95 c0             	setne  %al
ffffffff8020ff94:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff97:	48 85 c0             	test   %rax,%rax
ffffffff8020ff9a:	74 0c                	je     ffffffff8020ffa8 <_RME_Pgt_Boot_Add+0x20a>
ffffffff8020ff9c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ffa3:	e9 81 00 00 00       	jmp    ffffffff80210029 <_RME_Pgt_Boot_Add+0x28b>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen, but don't check their properties */
    RME_CAP_CHECK(Pgt_Op,0U);

    Szord=RME_PGT_SIZEORD(Pgt_Op->Order);
ffffffff8020ffa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ffac:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ffb0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ffb4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        /* No action required */
    }
#endif

    /* See if the mapping range and the granularity is allowed */
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020ffb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ffbc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ffc0:	89 c2                	mov    %eax,%edx
ffffffff8020ffc2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020ffc6:	89 d1                	mov    %edx,%ecx
ffffffff8020ffc8:	48 d3 e8             	shr    %cl,%rax
ffffffff8020ffcb:	48 85 c0             	test   %rax,%rax
ffffffff8020ffce:	75 25                	jne    ffffffff8020fff5 <_RME_Pgt_Boot_Add+0x257>
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020ffd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ffd4:	89 c2                	mov    %eax,%edx
ffffffff8020ffd6:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff8020ffdb:	29 d0                	sub    %edx,%eax
ffffffff8020ffdd:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8020ffe4:	89 c1                	mov    %eax,%ecx
ffffffff8020ffe6:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020ffe9:	48 89 d0             	mov    %rdx,%rax
ffffffff8020ffec:	48 23 45 c8          	and    -0x38(%rbp),%rax
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020fff0:	48 85 c0             	test   %rax,%rax
ffffffff8020fff3:	74 09                	je     ffffffff8020fffe <_RME_Pgt_Boot_Add+0x260>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff8020fff5:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020fffc:	eb 2b                	jmp    ffffffff80210029 <_RME_Pgt_Boot_Add+0x28b>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Map(Pgt_Op,Paddr,Pos,Flag)!=0)
ffffffff8020fffe:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff80210002:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80210006:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
ffffffff8021000a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021000e:	48 89 c7             	mov    %rax,%rdi
ffffffff80210011:	e8 fe 68 01 00       	call   ffffffff80226914 <__RME_Pgt_Page_Map>
ffffffff80210016:	48 85 c0             	test   %rax,%rax
ffffffff80210019:	74 09                	je     ffffffff80210024 <_RME_Pgt_Boot_Add+0x286>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_MAP;
ffffffff8021001b:	48 c7 c0 9a ff ff ff 	mov    $0xffffffffffffff9a,%rax
ffffffff80210022:	eb 05                	jmp    ffffffff80210029 <_RME_Pgt_Boot_Add+0x28b>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff80210024:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210029:	c9                   	leave
ffffffff8021002a:	c3                   	ret

ffffffff8021002b <_RME_Pgt_Boot_Con>:
rme_ret_t _RME_Pgt_Boot_Con(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Pgt_Parent,
                            rme_ptr_t Pos,
                            rme_cid_t Cap_Pgt_Child,
                            rme_ptr_t Flag_Child)
{
ffffffff8021002b:	f3 0f 1e fa          	endbr64
ffffffff8021002f:	55                   	push   %rbp
ffffffff80210030:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210033:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80210037:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021003b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021003f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80210043:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80210047:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
    rme_ptr_t Begin_Parent;
    rme_ptr_t End_Parent;
#endif
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8021004b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021004f:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210054:	48 85 c0             	test   %rax,%rax
ffffffff80210057:	0f 85 98 00 00 00    	jne    ffffffff802100f5 <_RME_Pgt_Boot_Con+0xca>
ffffffff8021005d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210061:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210065:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80210069:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021006c:	0f 93 c0             	setae  %al
ffffffff8021006f:	0f b6 c0             	movzbl %al,%eax
ffffffff80210072:	48 85 c0             	test   %rax,%rax
ffffffff80210075:	74 0c                	je     ffffffff80210083 <_RME_Pgt_Boot_Con+0x58>
ffffffff80210077:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021007e:	e9 a0 04 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210083:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210087:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021008b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021008e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210092:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210096:	48 01 d0             	add    %rdx,%rax
ffffffff80210099:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021009d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802100a1:	48 8b 00             	mov    (%rax),%rax
ffffffff802100a4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802100a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802100ac:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802100b0:	0f b7 c0             	movzwl %ax,%eax
ffffffff802100b3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802100b7:	0f 94 c0             	sete   %al
ffffffff802100ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802100bd:	48 85 c0             	test   %rax,%rax
ffffffff802100c0:	74 0c                	je     ffffffff802100ce <_RME_Pgt_Boot_Con+0xa3>
ffffffff802100c2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802100c9:	e9 55 04 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802100ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802100d2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802100d6:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802100da:	0f 95 c0             	setne  %al
ffffffff802100dd:	0f b6 c0             	movzbl %al,%eax
ffffffff802100e0:	48 85 c0             	test   %rax,%rax
ffffffff802100e3:	0f 84 4c 01 00 00    	je     ffffffff80210235 <_RME_Pgt_Boot_Con+0x20a>
ffffffff802100e9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802100f0:	e9 2e 04 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802100f5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802100f9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802100fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80210100:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210104:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210108:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021010b:	0f 93 c0             	setae  %al
ffffffff8021010e:	0f b6 c0             	movzbl %al,%eax
ffffffff80210111:	48 85 c0             	test   %rax,%rax
ffffffff80210114:	74 0c                	je     ffffffff80210122 <_RME_Pgt_Boot_Con+0xf7>
ffffffff80210116:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021011d:	e9 01 04 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210122:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210126:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021012a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021012e:	48 89 c2             	mov    %rax,%rdx
ffffffff80210131:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210135:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210139:	48 01 d0             	add    %rdx,%rax
ffffffff8021013c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210140:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210144:	48 8b 00             	mov    (%rax),%rax
ffffffff80210147:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021014b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021014f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210153:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210156:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021015a:	0f 94 c0             	sete   %al
ffffffff8021015d:	0f b6 c0             	movzbl %al,%eax
ffffffff80210160:	48 85 c0             	test   %rax,%rax
ffffffff80210163:	74 0c                	je     ffffffff80210171 <_RME_Pgt_Boot_Con+0x146>
ffffffff80210165:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021016c:	e9 b2 03 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210171:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210175:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210179:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021017d:	0f 95 c0             	setne  %al
ffffffff80210180:	0f b6 c0             	movzbl %al,%eax
ffffffff80210183:	48 85 c0             	test   %rax,%rax
ffffffff80210186:	74 0c                	je     ffffffff80210194 <_RME_Pgt_Boot_Con+0x169>
ffffffff80210188:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021018f:	e9 8f 03 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210194:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210198:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021019d:	48 89 c2             	mov    %rax,%rdx
ffffffff802101a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802101a4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802101a8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802101ab:	0f 93 c0             	setae  %al
ffffffff802101ae:	0f b6 c0             	movzbl %al,%eax
ffffffff802101b1:	48 85 c0             	test   %rax,%rax
ffffffff802101b4:	74 0c                	je     ffffffff802101c2 <_RME_Pgt_Boot_Con+0x197>
ffffffff802101b6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802101bd:	e9 61 03 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802101c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802101c6:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802101cb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802101cf:	48 89 c2             	mov    %rax,%rdx
ffffffff802101d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802101d6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802101da:	48 01 d0             	add    %rdx,%rax
ffffffff802101dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802101e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802101e5:	48 8b 00             	mov    (%rax),%rax
ffffffff802101e8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802101ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802101f0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802101f4:	0f b7 c0             	movzwl %ax,%eax
ffffffff802101f7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802101fb:	0f 94 c0             	sete   %al
ffffffff802101fe:	0f b6 c0             	movzbl %al,%eax
ffffffff80210201:	48 85 c0             	test   %rax,%rax
ffffffff80210204:	74 0c                	je     ffffffff80210212 <_RME_Pgt_Boot_Con+0x1e7>
ffffffff80210206:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021020d:	e9 11 03 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210212:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210216:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021021a:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021021e:	0f 95 c0             	setne  %al
ffffffff80210221:	0f b6 c0             	movzbl %al,%eax
ffffffff80210224:	48 85 c0             	test   %rax,%rax
ffffffff80210227:	74 0c                	je     ffffffff80210235 <_RME_Pgt_Boot_Con+0x20a>
ffffffff80210229:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210230:	e9 ee 02 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff80210235:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210239:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021023e:	48 85 c0             	test   %rax,%rax
ffffffff80210241:	0f 85 98 00 00 00    	jne    ffffffff802102df <_RME_Pgt_Boot_Con+0x2b4>
ffffffff80210247:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021024b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021024f:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80210253:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210256:	0f 93 c0             	setae  %al
ffffffff80210259:	0f b6 c0             	movzbl %al,%eax
ffffffff8021025c:	48 85 c0             	test   %rax,%rax
ffffffff8021025f:	74 0c                	je     ffffffff8021026d <_RME_Pgt_Boot_Con+0x242>
ffffffff80210261:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210268:	e9 b6 02 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff8021026d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210271:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210275:	48 89 c2             	mov    %rax,%rdx
ffffffff80210278:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021027c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210280:	48 01 d0             	add    %rdx,%rax
ffffffff80210283:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210287:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021028b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021028e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210292:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210296:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021029a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021029d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802102a1:	0f 94 c0             	sete   %al
ffffffff802102a4:	0f b6 c0             	movzbl %al,%eax
ffffffff802102a7:	48 85 c0             	test   %rax,%rax
ffffffff802102aa:	74 0c                	je     ffffffff802102b8 <_RME_Pgt_Boot_Con+0x28d>
ffffffff802102ac:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802102b3:	e9 6b 02 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802102b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802102bc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802102c0:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802102c4:	0f 95 c0             	setne  %al
ffffffff802102c7:	0f b6 c0             	movzbl %al,%eax
ffffffff802102ca:	48 85 c0             	test   %rax,%rax
ffffffff802102cd:	0f 84 4c 01 00 00    	je     ffffffff8021041f <_RME_Pgt_Boot_Con+0x3f4>
ffffffff802102d3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802102da:	e9 44 02 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802102df:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802102e3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802102e7:	48 89 c2             	mov    %rax,%rdx
ffffffff802102ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802102ee:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802102f2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802102f5:	0f 93 c0             	setae  %al
ffffffff802102f8:	0f b6 c0             	movzbl %al,%eax
ffffffff802102fb:	48 85 c0             	test   %rax,%rax
ffffffff802102fe:	74 0c                	je     ffffffff8021030c <_RME_Pgt_Boot_Con+0x2e1>
ffffffff80210300:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210307:	e9 17 02 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff8021030c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210310:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210314:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210318:	48 89 c2             	mov    %rax,%rdx
ffffffff8021031b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021031f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210323:	48 01 d0             	add    %rdx,%rax
ffffffff80210326:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021032a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021032e:	48 8b 00             	mov    (%rax),%rax
ffffffff80210331:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210335:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210339:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021033d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210340:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210344:	0f 94 c0             	sete   %al
ffffffff80210347:	0f b6 c0             	movzbl %al,%eax
ffffffff8021034a:	48 85 c0             	test   %rax,%rax
ffffffff8021034d:	74 0c                	je     ffffffff8021035b <_RME_Pgt_Boot_Con+0x330>
ffffffff8021034f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210356:	e9 c8 01 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff8021035b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021035f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210363:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210367:	0f 95 c0             	setne  %al
ffffffff8021036a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021036d:	48 85 c0             	test   %rax,%rax
ffffffff80210370:	74 0c                	je     ffffffff8021037e <_RME_Pgt_Boot_Con+0x353>
ffffffff80210372:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210379:	e9 a5 01 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff8021037e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210382:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210387:	48 89 c2             	mov    %rax,%rdx
ffffffff8021038a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021038e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210392:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210395:	0f 93 c0             	setae  %al
ffffffff80210398:	0f b6 c0             	movzbl %al,%eax
ffffffff8021039b:	48 85 c0             	test   %rax,%rax
ffffffff8021039e:	74 0c                	je     ffffffff802103ac <_RME_Pgt_Boot_Con+0x381>
ffffffff802103a0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802103a7:	e9 77 01 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802103ac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802103b0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802103b5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802103b9:	48 89 c2             	mov    %rax,%rdx
ffffffff802103bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802103c0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802103c4:	48 01 d0             	add    %rdx,%rax
ffffffff802103c7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802103cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802103cf:	48 8b 00             	mov    (%rax),%rax
ffffffff802103d2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802103d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802103da:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802103de:	0f b7 c0             	movzwl %ax,%eax
ffffffff802103e1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802103e5:	0f 94 c0             	sete   %al
ffffffff802103e8:	0f b6 c0             	movzbl %al,%eax
ffffffff802103eb:	48 85 c0             	test   %rax,%rax
ffffffff802103ee:	74 0c                	je     ffffffff802103fc <_RME_Pgt_Boot_Con+0x3d1>
ffffffff802103f0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802103f7:	e9 27 01 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802103fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210400:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210404:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210408:	0f 95 c0             	setne  %al
ffffffff8021040b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021040e:	48 85 c0             	test   %rax,%rax
ffffffff80210411:	74 0c                	je     ffffffff8021041f <_RME_Pgt_Boot_Con+0x3f4>
ffffffff80210413:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021041a:	e9 04 01 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
    /* Check if both page table caps are not frozen but don't check flags */
    RME_CAP_CHECK(Pgt_Parent,0U);
    RME_CAP_CHECK(Pgt_Child,0U);
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff8021041f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210423:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210427:	89 c2                	mov    %eax,%edx
ffffffff80210429:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021042d:	89 d1                	mov    %edx,%ecx
ffffffff8021042f:	48 d3 e8             	shr    %cl,%rax
ffffffff80210432:	48 85 c0             	test   %rax,%rax
ffffffff80210435:	74 0c                	je     ffffffff80210443 <_RME_Pgt_Boot_Con+0x418>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff80210437:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8021043e:	e9 e0 00 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the child table falls within one slot of the parent table */
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff80210443:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210447:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021044b:	89 c2                	mov    %eax,%edx
ffffffff8021044d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210451:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210455:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210459:	48 01 d0             	add    %rdx,%rax
ffffffff8021045c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff80210460:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210464:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210468:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021046c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Szord_Parent<Order_Child)
ffffffff80210470:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210474:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80210478:	73 0c                	jae    ffffffff80210486 <_RME_Pgt_Boot_Con+0x45b>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff8021047a:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80210481:	e9 9d 00 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
        RME_COV_MARKER();
        /* No action required */
    }
#else
    /* Force no path compression when virtual mappings are enabled */
    if(Szord_Parent!=Order_Child)
ffffffff80210486:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021048a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff8021048e:	74 0c                	je     ffffffff8021049c <_RME_Pgt_Boot_Con+0x471>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80210490:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80210497:	e9 87 00 00 00       	jmp    ffffffff80210523 <_RME_Pgt_Boot_Con+0x4f8>
    }
#endif

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff8021049c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff802104a0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802104a4:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff802104a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104ac:	48 89 c7             	mov    %rax,%rdi
ffffffff802104af:	e8 41 66 01 00       	call   ffffffff80226af5 <__RME_Pgt_Pgdir_Map>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff802104b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104b8:	48 8b 00             	mov    (%rax),%rax
ffffffff802104bb:	89 c0                	mov    %eax,%eax
ffffffff802104bd:	48 85 c0             	test   %rax,%rax
ffffffff802104c0:	74 0a                	je     ffffffff802104cc <_RME_Pgt_Boot_Con+0x4a1>
ffffffff802104c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104c6:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802104ca:	eb 04                	jmp    ffffffff802104d0 <_RME_Pgt_Boot_Con+0x4a5>
ffffffff802104cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104d0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1U);
ffffffff802104d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802104d8:	48 83 c0 08          	add    $0x8,%rax
ffffffff802104dc:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802104e1:	48 89 c7             	mov    %rax,%rdi
ffffffff802104e4:	e8 aa c2 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff802104e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802104ed:	48 8b 00             	mov    (%rax),%rax
ffffffff802104f0:	89 c0                	mov    %eax,%eax
ffffffff802104f2:	48 85 c0             	test   %rax,%rax
ffffffff802104f5:	74 0a                	je     ffffffff80210501 <_RME_Pgt_Boot_Con+0x4d6>
ffffffff802104f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802104fb:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802104ff:	eb 04                	jmp    ffffffff80210505 <_RME_Pgt_Boot_Con+0x4da>
ffffffff80210501:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210505:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1U);
ffffffff80210509:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021050d:	48 83 c0 08          	add    $0x8,%rax
ffffffff80210511:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80210516:	48 89 c7             	mov    %rax,%rdi
ffffffff80210519:	e8 75 c2 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff8021051e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210523:	c9                   	leave
ffffffff80210524:	c3                   	ret

ffffffff80210525 <_RME_Pgt_Crt>:
                              rme_ptr_t Raddr,
                              rme_ptr_t Base,
                              rme_ptr_t Is_Top,
                              rme_ptr_t Size_Order,
                              rme_ptr_t Num_Order)
{
ffffffff80210525:	f3 0f 1e fa          	endbr64
ffffffff80210529:	55                   	push   %rbp
ffffffff8021052a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021052d:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80210531:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80210535:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80210539:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021053d:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80210541:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80210545:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Vaddr;
    rme_ptr_t Table_Size;
    
    /* Check if the total representable memory exceeds our maximum possible
     * addressible memory under the machine word length */
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff80210549:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff8021054d:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff80210551:	48 01 d0             	add    %rdx,%rax
ffffffff80210554:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff80210558:	76 0c                	jbe    ffffffff80210566 <_RME_Pgt_Crt+0x41>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff8021055a:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff80210561:	e9 93 06 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210566:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021056a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021056f:	48 85 c0             	test   %rax,%rax
ffffffff80210572:	0f 85 98 00 00 00    	jne    ffffffff80210610 <_RME_Pgt_Crt+0xeb>
ffffffff80210578:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021057c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210580:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80210584:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210587:	0f 93 c0             	setae  %al
ffffffff8021058a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021058d:	48 85 c0             	test   %rax,%rax
ffffffff80210590:	74 0c                	je     ffffffff8021059e <_RME_Pgt_Crt+0x79>
ffffffff80210592:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210599:	e9 5b 06 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff8021059e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802105a2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802105a6:	48 89 c2             	mov    %rax,%rdx
ffffffff802105a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802105ad:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802105b1:	48 01 d0             	add    %rdx,%rax
ffffffff802105b4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802105b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802105bc:	48 8b 00             	mov    (%rax),%rax
ffffffff802105bf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802105c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802105c7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802105cb:	0f b7 c0             	movzwl %ax,%eax
ffffffff802105ce:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802105d2:	0f 94 c0             	sete   %al
ffffffff802105d5:	0f b6 c0             	movzbl %al,%eax
ffffffff802105d8:	48 85 c0             	test   %rax,%rax
ffffffff802105db:	74 0c                	je     ffffffff802105e9 <_RME_Pgt_Crt+0xc4>
ffffffff802105dd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802105e4:	e9 10 06 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff802105e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802105ed:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802105f1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802105f5:	0f 95 c0             	setne  %al
ffffffff802105f8:	0f b6 c0             	movzbl %al,%eax
ffffffff802105fb:	48 85 c0             	test   %rax,%rax
ffffffff802105fe:	0f 84 4c 01 00 00    	je     ffffffff80210750 <_RME_Pgt_Crt+0x22b>
ffffffff80210604:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021060b:	e9 e9 05 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff80210610:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210614:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210618:	48 89 c2             	mov    %rax,%rdx
ffffffff8021061b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021061f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210623:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210626:	0f 93 c0             	setae  %al
ffffffff80210629:	0f b6 c0             	movzbl %al,%eax
ffffffff8021062c:	48 85 c0             	test   %rax,%rax
ffffffff8021062f:	74 0c                	je     ffffffff8021063d <_RME_Pgt_Crt+0x118>
ffffffff80210631:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210638:	e9 bc 05 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff8021063d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210641:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210645:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210649:	48 89 c2             	mov    %rax,%rdx
ffffffff8021064c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210650:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210654:	48 01 d0             	add    %rdx,%rax
ffffffff80210657:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021065b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021065f:	48 8b 00             	mov    (%rax),%rax
ffffffff80210662:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80210666:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021066a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021066e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210671:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210675:	0f 94 c0             	sete   %al
ffffffff80210678:	0f b6 c0             	movzbl %al,%eax
ffffffff8021067b:	48 85 c0             	test   %rax,%rax
ffffffff8021067e:	74 0c                	je     ffffffff8021068c <_RME_Pgt_Crt+0x167>
ffffffff80210680:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210687:	e9 6d 05 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff8021068c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210690:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210694:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210698:	0f 95 c0             	setne  %al
ffffffff8021069b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021069e:	48 85 c0             	test   %rax,%rax
ffffffff802106a1:	74 0c                	je     ffffffff802106af <_RME_Pgt_Crt+0x18a>
ffffffff802106a3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802106aa:	e9 4a 05 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff802106af:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802106b3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802106b8:	48 89 c2             	mov    %rax,%rdx
ffffffff802106bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802106bf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802106c3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802106c6:	0f 93 c0             	setae  %al
ffffffff802106c9:	0f b6 c0             	movzbl %al,%eax
ffffffff802106cc:	48 85 c0             	test   %rax,%rax
ffffffff802106cf:	74 0c                	je     ffffffff802106dd <_RME_Pgt_Crt+0x1b8>
ffffffff802106d1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802106d8:	e9 1c 05 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff802106dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802106e1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802106e6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802106ea:	48 89 c2             	mov    %rax,%rdx
ffffffff802106ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802106f1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802106f5:	48 01 d0             	add    %rdx,%rax
ffffffff802106f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802106fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210700:	48 8b 00             	mov    (%rax),%rax
ffffffff80210703:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80210707:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021070b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021070f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210712:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210716:	0f 94 c0             	sete   %al
ffffffff80210719:	0f b6 c0             	movzbl %al,%eax
ffffffff8021071c:	48 85 c0             	test   %rax,%rax
ffffffff8021071f:	74 0c                	je     ffffffff8021072d <_RME_Pgt_Crt+0x208>
ffffffff80210721:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210728:	e9 cc 04 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff8021072d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210731:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210735:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210739:	0f 95 c0             	setne  %al
ffffffff8021073c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021073f:	48 85 c0             	test   %rax,%rax
ffffffff80210742:	74 0c                	je     ffffffff80210750 <_RME_Pgt_Crt+0x22b>
ffffffff80210744:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021074b:	e9 a9 04 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff80210750:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210754:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210759:	48 85 c0             	test   %rax,%rax
ffffffff8021075c:	0f 85 98 00 00 00    	jne    ffffffff802107fa <_RME_Pgt_Crt+0x2d5>
ffffffff80210762:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210766:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021076a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021076e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210771:	0f 93 c0             	setae  %al
ffffffff80210774:	0f b6 c0             	movzbl %al,%eax
ffffffff80210777:	48 85 c0             	test   %rax,%rax
ffffffff8021077a:	74 0c                	je     ffffffff80210788 <_RME_Pgt_Crt+0x263>
ffffffff8021077c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210783:	e9 71 04 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff80210788:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021078c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210790:	48 89 c2             	mov    %rax,%rdx
ffffffff80210793:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210797:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021079b:	48 01 d0             	add    %rdx,%rax
ffffffff8021079e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802107a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802107a6:	48 8b 00             	mov    (%rax),%rax
ffffffff802107a9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802107ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802107b1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802107b5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802107b8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802107bc:	0f 94 c0             	sete   %al
ffffffff802107bf:	0f b6 c0             	movzbl %al,%eax
ffffffff802107c2:	48 85 c0             	test   %rax,%rax
ffffffff802107c5:	74 0c                	je     ffffffff802107d3 <_RME_Pgt_Crt+0x2ae>
ffffffff802107c7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802107ce:	e9 26 04 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff802107d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802107d7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802107db:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802107df:	0f 95 c0             	setne  %al
ffffffff802107e2:	0f b6 c0             	movzbl %al,%eax
ffffffff802107e5:	48 85 c0             	test   %rax,%rax
ffffffff802107e8:	0f 84 4c 01 00 00    	je     ffffffff8021093a <_RME_Pgt_Crt+0x415>
ffffffff802107ee:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802107f5:	e9 ff 03 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff802107fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802107fe:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210802:	48 89 c2             	mov    %rax,%rdx
ffffffff80210805:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210809:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021080d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210810:	0f 93 c0             	setae  %al
ffffffff80210813:	0f b6 c0             	movzbl %al,%eax
ffffffff80210816:	48 85 c0             	test   %rax,%rax
ffffffff80210819:	74 0c                	je     ffffffff80210827 <_RME_Pgt_Crt+0x302>
ffffffff8021081b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210822:	e9 d2 03 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff80210827:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021082b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021082f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210833:	48 89 c2             	mov    %rax,%rdx
ffffffff80210836:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021083a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021083e:	48 01 d0             	add    %rdx,%rax
ffffffff80210841:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210845:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210849:	48 8b 00             	mov    (%rax),%rax
ffffffff8021084c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80210850:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210854:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210858:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021085b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021085f:	0f 94 c0             	sete   %al
ffffffff80210862:	0f b6 c0             	movzbl %al,%eax
ffffffff80210865:	48 85 c0             	test   %rax,%rax
ffffffff80210868:	74 0c                	je     ffffffff80210876 <_RME_Pgt_Crt+0x351>
ffffffff8021086a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210871:	e9 83 03 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff80210876:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021087a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021087e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210882:	0f 95 c0             	setne  %al
ffffffff80210885:	0f b6 c0             	movzbl %al,%eax
ffffffff80210888:	48 85 c0             	test   %rax,%rax
ffffffff8021088b:	74 0c                	je     ffffffff80210899 <_RME_Pgt_Crt+0x374>
ffffffff8021088d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210894:	e9 60 03 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff80210899:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021089d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802108a2:	48 89 c2             	mov    %rax,%rdx
ffffffff802108a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802108a9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802108ad:	48 39 c2             	cmp    %rax,%rdx
ffffffff802108b0:	0f 93 c0             	setae  %al
ffffffff802108b3:	0f b6 c0             	movzbl %al,%eax
ffffffff802108b6:	48 85 c0             	test   %rax,%rax
ffffffff802108b9:	74 0c                	je     ffffffff802108c7 <_RME_Pgt_Crt+0x3a2>
ffffffff802108bb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802108c2:	e9 32 03 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff802108c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802108cb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802108d0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802108d4:	48 89 c2             	mov    %rax,%rdx
ffffffff802108d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802108db:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802108df:	48 01 d0             	add    %rdx,%rax
ffffffff802108e2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802108e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802108ea:	48 8b 00             	mov    (%rax),%rax
ffffffff802108ed:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802108f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802108f5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802108f9:	0f b7 c0             	movzwl %ax,%eax
ffffffff802108fc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210900:	0f 94 c0             	sete   %al
ffffffff80210903:	0f b6 c0             	movzbl %al,%eax
ffffffff80210906:	48 85 c0             	test   %rax,%rax
ffffffff80210909:	74 0c                	je     ffffffff80210917 <_RME_Pgt_Crt+0x3f2>
ffffffff8021090b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210912:	e9 e2 02 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff80210917:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021091b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021091f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210923:	0f 95 c0             	setne  %al
ffffffff80210926:	0f b6 c0             	movzbl %al,%eax
ffffffff80210929:	48 85 c0             	test   %rax,%rax
ffffffff8021092c:	74 0c                	je     ffffffff8021093a <_RME_Pgt_Crt+0x415>
ffffffff8021092e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210935:	e9 bf 02 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff8021093a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021093e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210942:	83 e0 01             	and    $0x1,%eax
ffffffff80210945:	48 85 c0             	test   %rax,%rax
ffffffff80210948:	0f 94 c0             	sete   %al
ffffffff8021094b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021094e:	48 85 c0             	test   %rax,%rax
ffffffff80210951:	74 0c                	je     ffffffff8021095f <_RME_Pgt_Crt+0x43a>
ffffffff80210953:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021095a:	e9 9a 02 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
    
    /* Are we creating the top-level? */
    if(Is_Top!=0U)
ffffffff8021095f:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff80210964:	74 1b                	je     ffffffff80210981 <_RME_Pgt_Crt+0x45c>
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff80210966:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff8021096a:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021096f:	89 c1                	mov    %eax,%ecx
ffffffff80210971:	d3 e2                	shl    %cl,%edx
ffffffff80210973:	89 d0                	mov    %edx,%eax
ffffffff80210975:	48 98                	cltq
ffffffff80210977:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8021097b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021097f:	eb 19                	jmp    ffffffff8021099a <_RME_Pgt_Crt+0x475>
    }
    else
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_NOM(Num_Order);
ffffffff80210981:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff80210985:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021098a:	89 c1                	mov    %eax,%ecx
ffffffff8021098c:	d3 e2                	shl    %cl,%edx
ffffffff8021098e:	89 d0                	mov    %edx,%eax
ffffffff80210990:	48 98                	cltq
ffffffff80210992:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80210996:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    }
    
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff8021099a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021099e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802109a2:	83 e0 02             	and    $0x2,%eax
ffffffff802109a5:	48 85 c0             	test   %rax,%rax
ffffffff802109a8:	0f 94 c0             	sete   %al
ffffffff802109ab:	0f b6 c0             	movzbl %al,%eax
ffffffff802109ae:	48 85 c0             	test   %rax,%rax
ffffffff802109b1:	74 0c                	je     ffffffff802109bf <_RME_Pgt_Crt+0x49a>
ffffffff802109b3:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802109ba:	e9 3a 02 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff802109bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802109c3:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802109c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802109cb:	48 01 d0             	add    %rdx,%rax
ffffffff802109ce:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff802109d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802109d6:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff802109da:	0f 92 c0             	setb   %al
ffffffff802109dd:	0f b6 c0             	movzbl %al,%eax
ffffffff802109e0:	48 85 c0             	test   %rax,%rax
ffffffff802109e3:	74 0c                	je     ffffffff802109f1 <_RME_Pgt_Crt+0x4cc>
ffffffff802109e5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802109ec:	e9 08 02 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff802109f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802109f5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802109f9:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff802109fd:	0f 92 c0             	setb   %al
ffffffff80210a00:	0f b6 c0             	movzbl %al,%eax
ffffffff80210a03:	48 85 c0             	test   %rax,%rax
ffffffff80210a06:	74 0c                	je     ffffffff80210a14 <_RME_Pgt_Crt+0x4ef>
ffffffff80210a08:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210a0f:	e9 e5 01 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff80210a14:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80210a18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210a1c:	48 01 d0             	add    %rdx,%rax
ffffffff80210a1f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80210a23:	0f 92 c0             	setb   %al
ffffffff80210a26:	0f b6 c0             	movzbl %al,%eax
ffffffff80210a29:	48 85 c0             	test   %rax,%rax
ffffffff80210a2c:	74 0c                	je     ffffffff80210a3a <_RME_Pgt_Crt+0x515>
ffffffff80210a2e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210a35:	e9 bf 01 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff80210a3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210a3e:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80210a42:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80210a46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210a4a:	48 01 c8             	add    %rcx,%rax
ffffffff80210a4d:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80210a51:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210a54:	0f 92 c0             	setb   %al
ffffffff80210a57:	0f b6 c0             	movzbl %al,%eax
ffffffff80210a5a:	48 85 c0             	test   %rax,%rax
ffffffff80210a5d:	74 0c                	je     ffffffff80210a6b <_RME_Pgt_Crt+0x546>
ffffffff80210a5f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210a66:	e9 8e 01 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>

    /* Check if these parameters are feasible */
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)<0)
ffffffff80210a6b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80210a6f:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
ffffffff80210a73:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80210a77:	48 8b 75 10          	mov    0x10(%rbp),%rsi
ffffffff80210a7b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80210a7f:	49 89 f8             	mov    %rdi,%r8
ffffffff80210a82:	48 89 c7             	mov    %rax,%rdi
ffffffff80210a85:	e8 0f 5d 01 00       	call   ffffffff80226799 <__RME_Pgt_Check>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check if the start address is properly aligned to the total order of the page table */
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff80210a8a:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80210a8e:	89 c2                	mov    %eax,%edx
ffffffff80210a90:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff80210a94:	01 c2                	add    %eax,%edx
ffffffff80210a96:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff80210a9b:	29 d0                	sub    %edx,%eax
ffffffff80210a9d:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80210aa4:	89 c1                	mov    %eax,%ecx
ffffffff80210aa6:	48 d3 ea             	shr    %cl,%rdx
ffffffff80210aa9:	48 89 d0             	mov    %rdx,%rax
ffffffff80210aac:	48 23 45 a0          	and    -0x60(%rbp),%rax
ffffffff80210ab0:	48 85 c0             	test   %rax,%rax
ffffffff80210ab3:	74 0c                	je     ffffffff80210ac1 <_RME_Pgt_Crt+0x59c>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_HW;
ffffffff80210ab5:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff80210abc:	e9 38 01 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff80210ac1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210ac5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210ac9:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80210acd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210ad0:	0f 93 c0             	setae  %al
ffffffff80210ad3:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ad6:	48 85 c0             	test   %rax,%rax
ffffffff80210ad9:	74 0c                	je     ffffffff80210ae7 <_RME_Pgt_Crt+0x5c2>
ffffffff80210adb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210ae2:	e9 12 01 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff80210ae7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210aeb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210aef:	48 89 c2             	mov    %rax,%rdx
ffffffff80210af2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210af6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210afa:	48 01 d0             	add    %rdx,%rax
ffffffff80210afd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff80210b01:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b05:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80210b0c:	00 00 00 
ffffffff80210b0f:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80210b14:	48 89 c7             	mov    %rax,%rdi
ffffffff80210b17:	e8 42 bc ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210b1c:	48 85 c0             	test   %rax,%rax
ffffffff80210b1f:	0f 94 c0             	sete   %al
ffffffff80210b22:	0f b6 c0             	movzbl %al,%eax
ffffffff80210b25:	48 85 c0             	test   %rax,%rax
ffffffff80210b28:	74 0c                	je     ffffffff80210b36 <_RME_Pgt_Crt+0x611>
ffffffff80210b2a:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80210b31:	e9 c3 00 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
ffffffff80210b36:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80210b3b:	e8 d1 bc ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80210b40:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80210b44:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
ffffffff80210b48:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80210b4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210b50:	48 89 d6             	mov    %rdx,%rsi
ffffffff80210b53:	48 89 c7             	mov    %rax,%rdi
ffffffff80210b56:	e8 e3 17 00 00       	call   ffffffff8021233e <_RME_Kot_Mark>
ffffffff80210b5b:	48 85 c0             	test   %rax,%rax
ffffffff80210b5e:	74 17                	je     ffffffff80210b77 <_RME_Pgt_Crt+0x652>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff80210b60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b64:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80210b6b:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80210b72:	e9 82 00 00 00       	jmp    ffffffff80210bf9 <_RME_Pgt_Crt+0x6d4>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Header init */
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff80210b77:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b7b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80210b82:	00 
    Pgt_Crt->Head.Object=Vaddr;
ffffffff80210b83:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b87:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80210b8b:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ALL;
ffffffff80210b8f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b93:	48 be ff 00 00 00 f0 	movabs $0xfffffff0000000ff,%rsi
ffffffff80210b9a:	ff ff ff 
ffffffff80210b9d:	48 89 70 10          	mov    %rsi,0x10(%rax)
    
    /* Info init */
    Pgt_Crt->Base=Base|Is_Top;
ffffffff80210ba1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80210ba5:	48 0b 45 10          	or     0x10(%rbp),%rax
ffffffff80210ba9:	48 89 c2             	mov    %rax,%rdx
ffffffff80210bac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210bb0:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff80210bb4:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80210bb8:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff80210bbc:	48 0b 45 20          	or     0x20(%rbp),%rax
ffffffff80210bc0:	48 89 c2             	mov    %rax,%rdx
ffffffff80210bc3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210bc7:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Pgt_Crt->ASID=0U;
ffffffff80210bcb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210bcf:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80210bd6:	00 
    
    /* Object init - need to add all kernel pages if they are top-level */
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff80210bd7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210bdb:	48 89 c7             	mov    %rax,%rdi
ffffffff80210bde:	e8 48 5c 01 00       	call   ffffffff8022682b <__RME_Pgt_Init>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Creation complete */
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff80210be3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210be7:	48 bf 00 00 00 00 00 	movabs $0x4000000000000,%rdi
ffffffff80210bee:	00 04 00 
ffffffff80210bf1:	48 89 38             	mov    %rdi,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PGT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80210bf4:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210bf9:	c9                   	leave
ffffffff80210bfa:	c3                   	ret

ffffffff80210bfb <_RME_Pgt_Del>:
******************************************************************************/
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Pgt)
{
ffffffff80210bfb:	f3 0f 1e fa          	endbr64
ffffffff80210bff:	55                   	push   %rbp
ffffffff80210c00:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210c03:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80210c07:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80210c0b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80210c0f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    /* These are used for deletion */
    rme_ptr_t Object;
    rme_ptr_t Table_Size;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210c13:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210c17:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210c1c:	48 85 c0             	test   %rax,%rax
ffffffff80210c1f:	0f 85 98 00 00 00    	jne    ffffffff80210cbd <_RME_Pgt_Del+0xc2>
ffffffff80210c25:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210c29:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210c2d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80210c31:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210c34:	0f 93 c0             	setae  %al
ffffffff80210c37:	0f b6 c0             	movzbl %al,%eax
ffffffff80210c3a:	48 85 c0             	test   %rax,%rax
ffffffff80210c3d:	74 0c                	je     ffffffff80210c4b <_RME_Pgt_Del+0x50>
ffffffff80210c3f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210c46:	e9 a5 03 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
ffffffff80210c4b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210c4f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210c53:	48 89 c2             	mov    %rax,%rdx
ffffffff80210c56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210c5a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210c5e:	48 01 d0             	add    %rdx,%rax
ffffffff80210c61:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210c65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210c69:	48 8b 00             	mov    (%rax),%rax
ffffffff80210c6c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210c70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210c74:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210c78:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210c7b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210c7f:	0f 94 c0             	sete   %al
ffffffff80210c82:	0f b6 c0             	movzbl %al,%eax
ffffffff80210c85:	48 85 c0             	test   %rax,%rax
ffffffff80210c88:	74 0c                	je     ffffffff80210c96 <_RME_Pgt_Del+0x9b>
ffffffff80210c8a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210c91:	e9 5a 03 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
ffffffff80210c96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210c9a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210c9e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210ca2:	0f 95 c0             	setne  %al
ffffffff80210ca5:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ca8:	48 85 c0             	test   %rax,%rax
ffffffff80210cab:	0f 84 4c 01 00 00    	je     ffffffff80210dfd <_RME_Pgt_Del+0x202>
ffffffff80210cb1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210cb8:	e9 33 03 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
ffffffff80210cbd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210cc1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210cc5:	48 89 c2             	mov    %rax,%rdx
ffffffff80210cc8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210ccc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210cd0:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210cd3:	0f 93 c0             	setae  %al
ffffffff80210cd6:	0f b6 c0             	movzbl %al,%eax
ffffffff80210cd9:	48 85 c0             	test   %rax,%rax
ffffffff80210cdc:	74 0c                	je     ffffffff80210cea <_RME_Pgt_Del+0xef>
ffffffff80210cde:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210ce5:	e9 06 03 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
ffffffff80210cea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210cee:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210cf2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210cf6:	48 89 c2             	mov    %rax,%rdx
ffffffff80210cf9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210cfd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210d01:	48 01 d0             	add    %rdx,%rax
ffffffff80210d04:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210d08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210d0c:	48 8b 00             	mov    (%rax),%rax
ffffffff80210d0f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210d13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210d17:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210d1b:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210d1e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210d22:	0f 94 c0             	sete   %al
ffffffff80210d25:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d28:	48 85 c0             	test   %rax,%rax
ffffffff80210d2b:	74 0c                	je     ffffffff80210d39 <_RME_Pgt_Del+0x13e>
ffffffff80210d2d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210d34:	e9 b7 02 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
ffffffff80210d39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210d3d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210d41:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210d45:	0f 95 c0             	setne  %al
ffffffff80210d48:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d4b:	48 85 c0             	test   %rax,%rax
ffffffff80210d4e:	74 0c                	je     ffffffff80210d5c <_RME_Pgt_Del+0x161>
ffffffff80210d50:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210d57:	e9 94 02 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
ffffffff80210d5c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210d60:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210d65:	48 89 c2             	mov    %rax,%rdx
ffffffff80210d68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210d6c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210d70:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210d73:	0f 93 c0             	setae  %al
ffffffff80210d76:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d79:	48 85 c0             	test   %rax,%rax
ffffffff80210d7c:	74 0c                	je     ffffffff80210d8a <_RME_Pgt_Del+0x18f>
ffffffff80210d7e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210d85:	e9 66 02 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
ffffffff80210d8a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210d8e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210d93:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210d97:	48 89 c2             	mov    %rax,%rdx
ffffffff80210d9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210d9e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210da2:	48 01 d0             	add    %rdx,%rax
ffffffff80210da5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210da9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210dad:	48 8b 00             	mov    (%rax),%rax
ffffffff80210db0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210db4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210db8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210dbc:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210dbf:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210dc3:	0f 94 c0             	sete   %al
ffffffff80210dc6:	0f b6 c0             	movzbl %al,%eax
ffffffff80210dc9:	48 85 c0             	test   %rax,%rax
ffffffff80210dcc:	74 0c                	je     ffffffff80210dda <_RME_Pgt_Del+0x1df>
ffffffff80210dce:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210dd5:	e9 16 02 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
ffffffff80210dda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210dde:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210de2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210de6:	0f 95 c0             	setne  %al
ffffffff80210de9:	0f b6 c0             	movzbl %al,%eax
ffffffff80210dec:	48 85 c0             	test   %rax,%rax
ffffffff80210def:	74 0c                	je     ffffffff80210dfd <_RME_Pgt_Del+0x202>
ffffffff80210df1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210df8:	e9 f3 01 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80210dfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210e01:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210e05:	83 e0 02             	and    $0x2,%eax
ffffffff80210e08:	48 85 c0             	test   %rax,%rax
ffffffff80210e0b:	0f 94 c0             	sete   %al
ffffffff80210e0e:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e11:	48 85 c0             	test   %rax,%rax
ffffffff80210e14:	74 0c                	je     ffffffff80210e22 <_RME_Pgt_Del+0x227>
ffffffff80210e16:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210e1d:	e9 ce 01 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80210e22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210e26:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210e2a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80210e2e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210e31:	0f 93 c0             	setae  %al
ffffffff80210e34:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e37:	48 85 c0             	test   %rax,%rax
ffffffff80210e3a:	74 0c                	je     ffffffff80210e48 <_RME_Pgt_Del+0x24d>
ffffffff80210e3c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210e43:	e9 a8 01 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
ffffffff80210e48:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210e4c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210e50:	48 89 c2             	mov    %rax,%rdx
ffffffff80210e53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210e57:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210e5b:	48 01 d0             	add    %rdx,%rax
ffffffff80210e5e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80210e62:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210e66:	48 8b 00             	mov    (%rax),%rax
ffffffff80210e69:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210e6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210e71:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210e75:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210e78:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210e7c:	0f 95 c0             	setne  %al
ffffffff80210e7f:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e82:	48 85 c0             	test   %rax,%rax
ffffffff80210e85:	74 0c                	je     ffffffff80210e93 <_RME_Pgt_Del+0x298>
ffffffff80210e87:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210e8e:	e9 5d 01 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
ffffffff80210e93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210e97:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210e9b:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210e9f:	0f 95 c0             	setne  %al
ffffffff80210ea2:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ea5:	48 85 c0             	test   %rax,%rax
ffffffff80210ea8:	74 0c                	je     ffffffff80210eb6 <_RME_Pgt_Del+0x2bb>
ffffffff80210eaa:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210eb1:	e9 3a 01 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
ffffffff80210eb6:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80210ebb:	e8 51 b9 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80210ec0:	48 89 c2             	mov    %rax,%rdx
ffffffff80210ec3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210ec7:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80210ecb:	48 29 c2             	sub    %rax,%rdx
ffffffff80210ece:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80210ed2:	0f 96 c0             	setbe  %al
ffffffff80210ed5:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ed8:	48 98                	cltq
ffffffff80210eda:	48 85 c0             	test   %rax,%rax
ffffffff80210edd:	74 0c                	je     ffffffff80210eeb <_RME_Pgt_Del+0x2f0>
ffffffff80210edf:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80210ee6:	e9 05 01 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
ffffffff80210eeb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210eef:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80210ef3:	48 85 c0             	test   %rax,%rax
ffffffff80210ef6:	0f 95 c0             	setne  %al
ffffffff80210ef9:	0f b6 c0             	movzbl %al,%eax
ffffffff80210efc:	48 85 c0             	test   %rax,%rax
ffffffff80210eff:	74 44                	je     ffffffff80210f45 <_RME_Pgt_Del+0x34a>
ffffffff80210f01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210f05:	89 c0                	mov    %eax,%eax
ffffffff80210f07:	48 85 c0             	test   %rax,%rax
ffffffff80210f0a:	0f 94 c0             	sete   %al
ffffffff80210f0d:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f10:	48 85 c0             	test   %rax,%rax
ffffffff80210f13:	74 24                	je     ffffffff80210f39 <_RME_Pgt_Del+0x33e>
ffffffff80210f15:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80210f1c:	00 ff ff 
ffffffff80210f1f:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80210f23:	48 89 c2             	mov    %rax,%rdx
ffffffff80210f26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f2a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80210f2e:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210f31:	48 89 c7             	mov    %rax,%rdi
ffffffff80210f34:	e8 25 b8 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210f39:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80210f40:	e9 ab 00 00 00       	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>
    /* Hardware related deletion check passed down to the HAL. The driver should make
     * sure that it does not reference any lower level tables. If the driver layer does
     * not conform to this, the deletion of page table is not guaranteed to main kernel
     * consistency, and such consistency must be maintained by the user-level. It is 
     * recommended that the driver layer enforce such consistency. */
    if(__RME_Pgt_Del_Check(Pgt_Del)<0)
ffffffff80210f45:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f49:	48 89 c7             	mov    %rax,%rdi
ffffffff80210f4c:	e8 ac 59 01 00       	call   ffffffff802268fd <__RME_Pgt_Del_Check>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Pgt_Del,rme_ptr_t);
ffffffff80210f51:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f55:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210f59:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(((Pgt_Del->Base)&RME_PGT_TOP)!=0U)
ffffffff80210f5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f61:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80210f65:	83 e0 01             	and    $0x1,%eax
ffffffff80210f68:	48 85 c0             	test   %rax,%rax
ffffffff80210f6b:	74 1f                	je     ffffffff80210f8c <_RME_Pgt_Del+0x391>
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_TOP(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80210f6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f71:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210f75:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80210f7a:	89 c1                	mov    %eax,%ecx
ffffffff80210f7c:	d3 e2                	shl    %cl,%edx
ffffffff80210f7e:	89 d0                	mov    %edx,%eax
ffffffff80210f80:	48 98                	cltq
ffffffff80210f82:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80210f86:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210f8a:	eb 1d                	jmp    ffffffff80210fa9 <_RME_Pgt_Del+0x3ae>
    }
    else
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_NOM(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80210f8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f90:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210f94:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80210f99:	89 c1                	mov    %eax,%ecx
ffffffff80210f9b:	d3 e2                	shl    %cl,%edx
ffffffff80210f9d:	89 d0                	mov    %edx,%eax
ffffffff80210f9f:	48 98                	cltq
ffffffff80210fa1:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80210fa5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Pgt_Del,Type_Stat);
ffffffff80210fa9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210fad:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80210fb1:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80210fb6:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210fb9:	48 89 c7             	mov    %rax,%rdi
ffffffff80210fbc:	e8 9d b7 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210fc1:	48 85 c0             	test   %rax,%rax
ffffffff80210fc4:	0f 94 c0             	sete   %al
ffffffff80210fc7:	0f b6 c0             	movzbl %al,%eax
ffffffff80210fca:	48 85 c0             	test   %rax,%rax
ffffffff80210fcd:	74 09                	je     ffffffff80210fd8 <_RME_Pgt_Del+0x3dd>
ffffffff80210fcf:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80210fd6:	eb 18                	jmp    ffffffff80210ff0 <_RME_Pgt_Del+0x3f5>

    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kot_Erase(Object,Table_Size)==0);
ffffffff80210fd8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80210fdc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210fe0:	48 89 d6             	mov    %rdx,%rsi
ffffffff80210fe3:	48 89 c7             	mov    %rax,%rdi
ffffffff80210fe6:	e8 9a 16 00 00       	call   ffffffff80212685 <_RME_Kot_Erase>

    return 0;
ffffffff80210feb:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210ff0:	c9                   	leave
ffffffff80210ff1:	c3                   	ret

ffffffff80210ff2 <_RME_Pgt_Add>:
                              rme_ptr_t Pos_Dst,
                              rme_ptr_t Flag_Dst,
                              rme_cid_t Cap_Pgt_Src,
                              rme_ptr_t Pos_Src,
                              rme_ptr_t Index)
{
ffffffff80210ff2:	f3 0f 1e fa          	endbr64
ffffffff80210ff6:	55                   	push   %rbp
ffffffff80210ff7:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210ffa:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff80210ffe:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff80211002:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff80211006:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff8021100a:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff8021100e:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
ffffffff80211012:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Szord_Src;
    rme_ptr_t Szord_Dst;

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff80211016:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021101a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021101f:	48 85 c0             	test   %rax,%rax
ffffffff80211022:	0f 85 98 00 00 00    	jne    ffffffff802110c0 <_RME_Pgt_Add+0xce>
ffffffff80211028:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021102c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211030:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80211034:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211037:	0f 93 c0             	setae  %al
ffffffff8021103a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021103d:	48 85 c0             	test   %rax,%rax
ffffffff80211040:	74 0c                	je     ffffffff8021104e <_RME_Pgt_Add+0x5c>
ffffffff80211042:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211049:	e9 65 05 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff8021104e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211052:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211056:	48 89 c2             	mov    %rax,%rdx
ffffffff80211059:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021105d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211061:	48 01 d0             	add    %rdx,%rax
ffffffff80211064:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211068:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021106c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021106f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80211073:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211077:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021107b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021107e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211082:	0f 94 c0             	sete   %al
ffffffff80211085:	0f b6 c0             	movzbl %al,%eax
ffffffff80211088:	48 85 c0             	test   %rax,%rax
ffffffff8021108b:	74 0c                	je     ffffffff80211099 <_RME_Pgt_Add+0xa7>
ffffffff8021108d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211094:	e9 1a 05 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff80211099:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021109d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802110a1:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802110a5:	0f 95 c0             	setne  %al
ffffffff802110a8:	0f b6 c0             	movzbl %al,%eax
ffffffff802110ab:	48 85 c0             	test   %rax,%rax
ffffffff802110ae:	0f 84 4c 01 00 00    	je     ffffffff80211200 <_RME_Pgt_Add+0x20e>
ffffffff802110b4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802110bb:	e9 f3 04 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff802110c0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802110c4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802110c8:	48 89 c2             	mov    %rax,%rdx
ffffffff802110cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802110cf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802110d3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802110d6:	0f 93 c0             	setae  %al
ffffffff802110d9:	0f b6 c0             	movzbl %al,%eax
ffffffff802110dc:	48 85 c0             	test   %rax,%rax
ffffffff802110df:	74 0c                	je     ffffffff802110ed <_RME_Pgt_Add+0xfb>
ffffffff802110e1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802110e8:	e9 c6 04 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff802110ed:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802110f1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802110f5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802110f9:	48 89 c2             	mov    %rax,%rdx
ffffffff802110fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211100:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211104:	48 01 d0             	add    %rdx,%rax
ffffffff80211107:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021110b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021110f:	48 8b 00             	mov    (%rax),%rax
ffffffff80211112:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80211116:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021111a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021111e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211121:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211125:	0f 94 c0             	sete   %al
ffffffff80211128:	0f b6 c0             	movzbl %al,%eax
ffffffff8021112b:	48 85 c0             	test   %rax,%rax
ffffffff8021112e:	74 0c                	je     ffffffff8021113c <_RME_Pgt_Add+0x14a>
ffffffff80211130:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211137:	e9 77 04 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff8021113c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211140:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211144:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211148:	0f 95 c0             	setne  %al
ffffffff8021114b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021114e:	48 85 c0             	test   %rax,%rax
ffffffff80211151:	74 0c                	je     ffffffff8021115f <_RME_Pgt_Add+0x16d>
ffffffff80211153:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021115a:	e9 54 04 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff8021115f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211163:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211168:	48 89 c2             	mov    %rax,%rdx
ffffffff8021116b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021116f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211173:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211176:	0f 93 c0             	setae  %al
ffffffff80211179:	0f b6 c0             	movzbl %al,%eax
ffffffff8021117c:	48 85 c0             	test   %rax,%rax
ffffffff8021117f:	74 0c                	je     ffffffff8021118d <_RME_Pgt_Add+0x19b>
ffffffff80211181:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211188:	e9 26 04 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff8021118d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211191:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211196:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021119a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021119d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802111a1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802111a5:	48 01 d0             	add    %rdx,%rax
ffffffff802111a8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802111ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802111b0:	48 8b 00             	mov    (%rax),%rax
ffffffff802111b3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802111b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802111bb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802111bf:	0f b7 c0             	movzwl %ax,%eax
ffffffff802111c2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802111c6:	0f 94 c0             	sete   %al
ffffffff802111c9:	0f b6 c0             	movzbl %al,%eax
ffffffff802111cc:	48 85 c0             	test   %rax,%rax
ffffffff802111cf:	74 0c                	je     ffffffff802111dd <_RME_Pgt_Add+0x1eb>
ffffffff802111d1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802111d8:	e9 d6 03 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff802111dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802111e1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802111e5:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802111e9:	0f 95 c0             	setne  %al
ffffffff802111ec:	0f b6 c0             	movzbl %al,%eax
ffffffff802111ef:	48 85 c0             	test   %rax,%rax
ffffffff802111f2:	74 0c                	je     ffffffff80211200 <_RME_Pgt_Add+0x20e>
ffffffff802111f4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802111fb:	e9 b3 03 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
                   struct RME_Cap_Pgt*,Pgt_Dst,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff80211200:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80211204:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211209:	48 85 c0             	test   %rax,%rax
ffffffff8021120c:	0f 85 98 00 00 00    	jne    ffffffff802112aa <_RME_Pgt_Add+0x2b8>
ffffffff80211212:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211216:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021121a:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff8021121e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211221:	0f 93 c0             	setae  %al
ffffffff80211224:	0f b6 c0             	movzbl %al,%eax
ffffffff80211227:	48 85 c0             	test   %rax,%rax
ffffffff8021122a:	74 0c                	je     ffffffff80211238 <_RME_Pgt_Add+0x246>
ffffffff8021122c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211233:	e9 7b 03 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff80211238:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021123c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211240:	48 89 c2             	mov    %rax,%rdx
ffffffff80211243:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211247:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021124b:	48 01 d0             	add    %rdx,%rax
ffffffff8021124e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211252:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211256:	48 8b 00             	mov    (%rax),%rax
ffffffff80211259:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021125d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211261:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211265:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211268:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021126c:	0f 94 c0             	sete   %al
ffffffff8021126f:	0f b6 c0             	movzbl %al,%eax
ffffffff80211272:	48 85 c0             	test   %rax,%rax
ffffffff80211275:	74 0c                	je     ffffffff80211283 <_RME_Pgt_Add+0x291>
ffffffff80211277:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021127e:	e9 30 03 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff80211283:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211287:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021128b:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021128f:	0f 95 c0             	setne  %al
ffffffff80211292:	0f b6 c0             	movzbl %al,%eax
ffffffff80211295:	48 85 c0             	test   %rax,%rax
ffffffff80211298:	0f 84 4c 01 00 00    	je     ffffffff802113ea <_RME_Pgt_Add+0x3f8>
ffffffff8021129e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802112a5:	e9 09 03 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff802112aa:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802112ae:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802112b2:	48 89 c2             	mov    %rax,%rdx
ffffffff802112b5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802112b9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802112bd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802112c0:	0f 93 c0             	setae  %al
ffffffff802112c3:	0f b6 c0             	movzbl %al,%eax
ffffffff802112c6:	48 85 c0             	test   %rax,%rax
ffffffff802112c9:	74 0c                	je     ffffffff802112d7 <_RME_Pgt_Add+0x2e5>
ffffffff802112cb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802112d2:	e9 dc 02 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff802112d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802112db:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802112df:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802112e3:	48 89 c2             	mov    %rax,%rdx
ffffffff802112e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802112ea:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802112ee:	48 01 d0             	add    %rdx,%rax
ffffffff802112f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802112f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802112f9:	48 8b 00             	mov    (%rax),%rax
ffffffff802112fc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80211300:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211304:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211308:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021130b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021130f:	0f 94 c0             	sete   %al
ffffffff80211312:	0f b6 c0             	movzbl %al,%eax
ffffffff80211315:	48 85 c0             	test   %rax,%rax
ffffffff80211318:	74 0c                	je     ffffffff80211326 <_RME_Pgt_Add+0x334>
ffffffff8021131a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211321:	e9 8d 02 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff80211326:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021132a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021132e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211332:	0f 95 c0             	setne  %al
ffffffff80211335:	0f b6 c0             	movzbl %al,%eax
ffffffff80211338:	48 85 c0             	test   %rax,%rax
ffffffff8021133b:	74 0c                	je     ffffffff80211349 <_RME_Pgt_Add+0x357>
ffffffff8021133d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211344:	e9 6a 02 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff80211349:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021134d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211352:	48 89 c2             	mov    %rax,%rdx
ffffffff80211355:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211359:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021135d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211360:	0f 93 c0             	setae  %al
ffffffff80211363:	0f b6 c0             	movzbl %al,%eax
ffffffff80211366:	48 85 c0             	test   %rax,%rax
ffffffff80211369:	74 0c                	je     ffffffff80211377 <_RME_Pgt_Add+0x385>
ffffffff8021136b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211372:	e9 3c 02 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff80211377:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021137b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211380:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211384:	48 89 c2             	mov    %rax,%rdx
ffffffff80211387:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021138b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021138f:	48 01 d0             	add    %rdx,%rax
ffffffff80211392:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211396:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021139a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021139d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802113a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802113a5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802113a9:	0f b7 c0             	movzwl %ax,%eax
ffffffff802113ac:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802113b0:	0f 94 c0             	sete   %al
ffffffff802113b3:	0f b6 c0             	movzbl %al,%eax
ffffffff802113b6:	48 85 c0             	test   %rax,%rax
ffffffff802113b9:	74 0c                	je     ffffffff802113c7 <_RME_Pgt_Add+0x3d5>
ffffffff802113bb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802113c2:	e9 ec 01 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
ffffffff802113c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802113cb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802113cf:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802113d3:	0f 95 c0             	setne  %al
ffffffff802113d6:	0f b6 c0             	movzbl %al,%eax
ffffffff802113d9:	48 85 c0             	test   %rax,%rax
ffffffff802113dc:	74 0c                	je     ffffffff802113ea <_RME_Pgt_Add+0x3f8>
ffffffff802113de:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802113e5:	e9 c9 01 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
                   struct RME_Cap_Pgt*,Pgt_Src,Type_Stat);
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff802113ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802113ee:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802113f2:	83 e0 02             	and    $0x2,%eax
ffffffff802113f5:	48 85 c0             	test   %rax,%rax
ffffffff802113f8:	0f 94 c0             	sete   %al
ffffffff802113fb:	0f b6 c0             	movzbl %al,%eax
ffffffff802113fe:	48 85 c0             	test   %rax,%rax
ffffffff80211401:	74 0c                	je     ffffffff8021140f <_RME_Pgt_Add+0x41d>
ffffffff80211403:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021140a:	e9 a4 01 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
    RME_CAP_CHECK(Pgt_Src,RME_PGT_FLAG_ADD_SRC);
ffffffff8021140f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211413:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211417:	83 e0 01             	and    $0x1,%eax
ffffffff8021141a:	48 85 c0             	test   %rax,%rax
ffffffff8021141d:	0f 94 c0             	sete   %al
ffffffff80211420:	0f b6 c0             	movzbl %al,%eax
ffffffff80211423:	48 85 c0             	test   %rax,%rax
ffffffff80211426:	74 0c                	je     ffffffff80211434 <_RME_Pgt_Add+0x442>
ffffffff80211428:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021142f:	e9 7f 01 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
    /* Check the operation range - This is page table specific */
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff80211434:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211438:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021143c:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff80211440:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff80211444:	72 40                	jb     ffffffff80211486 <_RME_Pgt_Add+0x494>
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff80211446:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021144a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021144e:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211452:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff80211457:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff8021145b:	72 29                	jb     ffffffff80211486 <_RME_Pgt_Add+0x494>
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff8021145d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211461:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211465:	48 c1 e8 24          	shr    $0x24,%rax
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff80211469:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
ffffffff8021146d:	72 17                	jb     ffffffff80211486 <_RME_Pgt_Add+0x494>
       (Pos_Src<RME_PGT_FLAG_LOW(Pgt_Src->Head.Flag)))
ffffffff8021146f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211473:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211477:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8021147b:	25 ff ff ff 0f       	and    $0xfffffff,%eax
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff80211480:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
ffffffff80211484:	73 0c                	jae    ffffffff80211492 <_RME_Pgt_Add+0x4a0>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80211486:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021148d:	e9 21 01 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the size order relationship is correct */
    Szord_Dst=RME_PGT_SIZEORD(Pgt_Dst->Order);
ffffffff80211492:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211496:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021149a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021149e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Szord_Src=RME_PGT_SIZEORD(Pgt_Src->Order);
ffffffff802114a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802114a6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802114aa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802114ae:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Szord_Dst>Szord_Src)
ffffffff802114b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802114b6:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff802114ba:	73 0c                	jae    ffffffff802114c8 <_RME_Pgt_Add+0x4d6>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff802114bc:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802114c3:	e9 eb 00 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the positions are out of range - NMORD is restricted, no UB */
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff802114c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802114cc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802114d0:	89 c2                	mov    %eax,%edx
ffffffff802114d2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802114d6:	89 d1                	mov    %edx,%ecx
ffffffff802114d8:	48 d3 e8             	shr    %cl,%rax
ffffffff802114db:	48 85 c0             	test   %rax,%rax
ffffffff802114de:	75 18                	jne    ffffffff802114f8 <_RME_Pgt_Add+0x506>
       ((Pos_Src>>RME_PGT_NUMORD(Pgt_Src->Order))!=0U))
ffffffff802114e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802114e4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802114e8:	89 c2                	mov    %eax,%edx
ffffffff802114ea:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff802114ee:	89 d1                	mov    %edx,%ecx
ffffffff802114f0:	48 d3 e8             	shr    %cl,%rax
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff802114f3:	48 85 c0             	test   %rax,%rax
ffffffff802114f6:	74 0c                	je     ffffffff80211504 <_RME_Pgt_Add+0x512>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff802114f8:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802114ff:	e9 af 00 00 00       	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the source subposition is out of range - avoid UB */
    if(Szord_Src<RME_WORD_BIT)
ffffffff80211504:	48 83 7d d0 3f       	cmpq   $0x3f,-0x30(%rbp)
ffffffff80211509:	77 2c                	ja     ffffffff80211537 <_RME_Pgt_Add+0x545>
    {
        RME_COV_MARKER();
        
        /* No UB because Szord_Dst<=Szord_Src */
        if(RME_POW2(Szord_Src)<=(Index<<Szord_Dst))
ffffffff8021150b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021150f:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80211514:	89 c1                	mov    %eax,%ecx
ffffffff80211516:	48 d3 e2             	shl    %cl,%rdx
ffffffff80211519:	48 89 d0             	mov    %rdx,%rax
ffffffff8021151c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80211520:	89 d1                	mov    %edx,%ecx
ffffffff80211522:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff80211526:	48 d3 e2             	shl    %cl,%rdx
ffffffff80211529:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021152c:	72 09                	jb     ffffffff80211537 <_RME_Pgt_Add+0x545>
        {
            RME_COV_MARKER();

            return RME_ERR_PGT_ADDR;
ffffffff8021152e:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211535:	eb 7c                	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the physical address and RME standard flags of that source page */
    if(__RME_Pgt_Lookup(Pgt_Src,Pos_Src,&Paddr_Src,&Flag_Src)<0)
ffffffff80211537:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
ffffffff8021153b:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
ffffffff8021153f:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
ffffffff80211543:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211547:	48 89 c7             	mov    %rax,%rdi
ffffffff8021154a:	e8 91 57 01 00       	call   ffffffff80226ce0 <__RME_Pgt_Lookup>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Calculate the destination physical address - avoid UB */
    if(Szord_Dst<RME_WORD_BIT)
ffffffff8021154f:	48 83 7d d8 3f       	cmpq   $0x3f,-0x28(%rbp)
ffffffff80211554:	77 1f                	ja     ffffffff80211575 <_RME_Pgt_Add+0x583>
    {
        RME_COV_MARKER();
        
        Paddr_Dst=Paddr_Src+(Index<<Szord_Dst);
ffffffff80211556:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021155a:	89 c2                	mov    %eax,%edx
ffffffff8021155c:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80211560:	89 d1                	mov    %edx,%ecx
ffffffff80211562:	48 d3 e0             	shl    %cl,%rax
ffffffff80211565:	48 89 c2             	mov    %rax,%rdx
ffffffff80211568:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021156c:	48 01 d0             	add    %rdx,%rax
ffffffff8021156f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211573:	eb 08                	jmp    ffffffff8021157d <_RME_Pgt_Add+0x58b>
    /* The destination is also full range */
    else
    {
        RME_COV_MARKER();
        
        Paddr_Dst=Paddr_Src;
ffffffff80211575:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211579:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        }
#endif
    }
    
    /* Analyze the flags - we do not allow expansion of access permissions */
    if(((Flag_Dst)&(~Flag_Src))!=0U)
ffffffff8021157d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211581:	48 f7 d0             	not    %rax
ffffffff80211584:	48 23 45 a0          	and    -0x60(%rbp),%rax
ffffffff80211588:	48 85 c0             	test   %rax,%rax
ffffffff8021158b:	74 09                	je     ffffffff80211596 <_RME_Pgt_Add+0x5a4>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_PERM;
ffffffff8021158d:	48 c7 c0 98 ff ff ff 	mov    $0xffffffffffffff98,%rax
ffffffff80211594:	eb 1d                	jmp    ffffffff802115b3 <_RME_Pgt_Add+0x5c1>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Map(Pgt_Dst,Paddr_Dst,Pos_Dst,Flag_Dst)<0)
ffffffff80211596:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
ffffffff8021159a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8021159e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff802115a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802115a6:	48 89 c7             	mov    %rax,%rdi
ffffffff802115a9:	e8 66 53 01 00       	call   ffffffff80226914 <__RME_Pgt_Page_Map>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff802115ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802115b3:	c9                   	leave
ffffffff802115b4:	c3                   	ret

ffffffff802115b5 <_RME_Pgt_Rem>:
******************************************************************************/
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Rem(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Pgt,
                              rme_ptr_t Pos)
{
ffffffff802115b5:	f3 0f 1e fa          	endbr64
ffffffff802115b9:	55                   	push   %rbp
ffffffff802115ba:	48 89 e5             	mov    %rsp,%rbp
ffffffff802115bd:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff802115c1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff802115c5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff802115c9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    struct RME_Cap_Pgt* Pgt_Rem;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff802115cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802115d1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802115d6:	48 85 c0             	test   %rax,%rax
ffffffff802115d9:	0f 85 98 00 00 00    	jne    ffffffff80211677 <_RME_Pgt_Rem+0xc2>
ffffffff802115df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802115e3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802115e7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff802115eb:	48 39 c2             	cmp    %rax,%rdx
ffffffff802115ee:	0f 93 c0             	setae  %al
ffffffff802115f1:	0f b6 c0             	movzbl %al,%eax
ffffffff802115f4:	48 85 c0             	test   %rax,%rax
ffffffff802115f7:	74 0c                	je     ffffffff80211605 <_RME_Pgt_Rem+0x50>
ffffffff802115f9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211600:	e9 3f 02 00 00       	jmp    ffffffff80211844 <_RME_Pgt_Rem+0x28f>
ffffffff80211605:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211609:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021160d:	48 89 c2             	mov    %rax,%rdx
ffffffff80211610:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211614:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211618:	48 01 d0             	add    %rdx,%rax
ffffffff8021161b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021161f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211623:	48 8b 00             	mov    (%rax),%rax
ffffffff80211626:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021162a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021162e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211632:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211635:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211639:	0f 94 c0             	sete   %al
ffffffff8021163c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021163f:	48 85 c0             	test   %rax,%rax
ffffffff80211642:	74 0c                	je     ffffffff80211650 <_RME_Pgt_Rem+0x9b>
ffffffff80211644:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021164b:	e9 f4 01 00 00       	jmp    ffffffff80211844 <_RME_Pgt_Rem+0x28f>
ffffffff80211650:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211654:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211658:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021165c:	0f 95 c0             	setne  %al
ffffffff8021165f:	0f b6 c0             	movzbl %al,%eax
ffffffff80211662:	48 85 c0             	test   %rax,%rax
ffffffff80211665:	0f 84 4c 01 00 00    	je     ffffffff802117b7 <_RME_Pgt_Rem+0x202>
ffffffff8021166b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211672:	e9 cd 01 00 00       	jmp    ffffffff80211844 <_RME_Pgt_Rem+0x28f>
ffffffff80211677:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021167b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021167f:	48 89 c2             	mov    %rax,%rdx
ffffffff80211682:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211686:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021168a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021168d:	0f 93 c0             	setae  %al
ffffffff80211690:	0f b6 c0             	movzbl %al,%eax
ffffffff80211693:	48 85 c0             	test   %rax,%rax
ffffffff80211696:	74 0c                	je     ffffffff802116a4 <_RME_Pgt_Rem+0xef>
ffffffff80211698:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021169f:	e9 a0 01 00 00       	jmp    ffffffff80211844 <_RME_Pgt_Rem+0x28f>
ffffffff802116a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802116a8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802116ac:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802116b0:	48 89 c2             	mov    %rax,%rdx
ffffffff802116b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802116b7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802116bb:	48 01 d0             	add    %rdx,%rax
ffffffff802116be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802116c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802116c6:	48 8b 00             	mov    (%rax),%rax
ffffffff802116c9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802116cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802116d1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802116d5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802116d8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802116dc:	0f 94 c0             	sete   %al
ffffffff802116df:	0f b6 c0             	movzbl %al,%eax
ffffffff802116e2:	48 85 c0             	test   %rax,%rax
ffffffff802116e5:	74 0c                	je     ffffffff802116f3 <_RME_Pgt_Rem+0x13e>
ffffffff802116e7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802116ee:	e9 51 01 00 00       	jmp    ffffffff80211844 <_RME_Pgt_Rem+0x28f>
ffffffff802116f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802116f7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802116fb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802116ff:	0f 95 c0             	setne  %al
ffffffff80211702:	0f b6 c0             	movzbl %al,%eax
ffffffff80211705:	48 85 c0             	test   %rax,%rax
ffffffff80211708:	74 0c                	je     ffffffff80211716 <_RME_Pgt_Rem+0x161>
ffffffff8021170a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211711:	e9 2e 01 00 00       	jmp    ffffffff80211844 <_RME_Pgt_Rem+0x28f>
ffffffff80211716:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021171a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021171f:	48 89 c2             	mov    %rax,%rdx
ffffffff80211722:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211726:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021172a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021172d:	0f 93 c0             	setae  %al
ffffffff80211730:	0f b6 c0             	movzbl %al,%eax
ffffffff80211733:	48 85 c0             	test   %rax,%rax
ffffffff80211736:	74 0c                	je     ffffffff80211744 <_RME_Pgt_Rem+0x18f>
ffffffff80211738:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021173f:	e9 00 01 00 00       	jmp    ffffffff80211844 <_RME_Pgt_Rem+0x28f>
ffffffff80211744:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211748:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021174d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211751:	48 89 c2             	mov    %rax,%rdx
ffffffff80211754:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211758:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021175c:	48 01 d0             	add    %rdx,%rax
ffffffff8021175f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211763:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211767:	48 8b 00             	mov    (%rax),%rax
ffffffff8021176a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021176e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211772:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211776:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211779:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021177d:	0f 94 c0             	sete   %al
ffffffff80211780:	0f b6 c0             	movzbl %al,%eax
ffffffff80211783:	48 85 c0             	test   %rax,%rax
ffffffff80211786:	74 0c                	je     ffffffff80211794 <_RME_Pgt_Rem+0x1df>
ffffffff80211788:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021178f:	e9 b0 00 00 00       	jmp    ffffffff80211844 <_RME_Pgt_Rem+0x28f>
ffffffff80211794:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211798:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021179c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802117a0:	0f 95 c0             	setne  %al
ffffffff802117a3:	0f b6 c0             	movzbl %al,%eax
ffffffff802117a6:	48 85 c0             	test   %rax,%rax
ffffffff802117a9:	74 0c                	je     ffffffff802117b7 <_RME_Pgt_Rem+0x202>
ffffffff802117ab:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802117b2:	e9 8d 00 00 00       	jmp    ffffffff80211844 <_RME_Pgt_Rem+0x28f>
                   struct RME_Cap_Pgt*,Pgt_Rem,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802117b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117bb:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802117bf:	83 e0 04             	and    $0x4,%eax
ffffffff802117c2:	48 85 c0             	test   %rax,%rax
ffffffff802117c5:	0f 94 c0             	sete   %al
ffffffff802117c8:	0f b6 c0             	movzbl %al,%eax
ffffffff802117cb:	48 85 c0             	test   %rax,%rax
ffffffff802117ce:	74 09                	je     ffffffff802117d9 <_RME_Pgt_Rem+0x224>
ffffffff802117d0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802117d7:	eb 6b                	jmp    ffffffff80211844 <_RME_Pgt_Rem+0x28f>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff802117d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117dd:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802117e1:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff802117e5:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff802117e9:	72 17                	jb     ffffffff80211802 <_RME_Pgt_Rem+0x24d>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Rem->Head.Flag)))
ffffffff802117eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117ef:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802117f3:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802117f7:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff802117fc:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80211800:	73 09                	jae    ffffffff8021180b <_RME_Pgt_Rem+0x256>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80211802:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211809:	eb 39                	jmp    ffffffff80211844 <_RME_Pgt_Rem+0x28f>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Rem->Order))!=0U)
ffffffff8021180b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021180f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211813:	89 c2                	mov    %eax,%edx
ffffffff80211815:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211819:	89 d1                	mov    %edx,%ecx
ffffffff8021181b:	48 d3 e8             	shr    %cl,%rax
ffffffff8021181e:	48 85 c0             	test   %rax,%rax
ffffffff80211821:	74 09                	je     ffffffff8021182c <_RME_Pgt_Rem+0x277>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211823:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8021182a:	eb 18                	jmp    ffffffff80211844 <_RME_Pgt_Rem+0x28f>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Unmap(Pgt_Rem,Pos)<0)
ffffffff8021182c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80211830:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211834:	48 89 d6             	mov    %rdx,%rsi
ffffffff80211837:	48 89 c7             	mov    %rax,%rdi
ffffffff8021183a:	e8 e0 51 01 00       	call   ffffffff80226a1f <__RME_Pgt_Page_Unmap>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff8021183f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80211844:	c9                   	leave
ffffffff80211845:	c3                   	ret

ffffffff80211846 <_RME_Pgt_Con>:
static rme_ret_t _RME_Pgt_Con(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Pgt_Parent,
                              rme_ptr_t Pos,
                              rme_cid_t Cap_Pgt_Child,
                              rme_ptr_t Flag_Child)
{
ffffffff80211846:	f3 0f 1e fa          	endbr64
ffffffff8021184a:	55                   	push   %rbp
ffffffff8021184b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021184e:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80211852:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80211856:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021185a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021185e:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80211862:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
    rme_ptr_t End_Parent;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff80211866:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021186a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021186f:	48 85 c0             	test   %rax,%rax
ffffffff80211872:	0f 85 98 00 00 00    	jne    ffffffff80211910 <_RME_Pgt_Con+0xca>
ffffffff80211878:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021187c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211880:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80211884:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211887:	0f 93 c0             	setae  %al
ffffffff8021188a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021188d:	48 85 c0             	test   %rax,%rax
ffffffff80211890:	74 0c                	je     ffffffff8021189e <_RME_Pgt_Con+0x58>
ffffffff80211892:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211899:	e9 1f 05 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff8021189e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802118a2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802118a6:	48 89 c2             	mov    %rax,%rdx
ffffffff802118a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802118ad:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802118b1:	48 01 d0             	add    %rdx,%rax
ffffffff802118b4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802118b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802118bc:	48 8b 00             	mov    (%rax),%rax
ffffffff802118bf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802118c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802118c7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802118cb:	0f b7 c0             	movzwl %ax,%eax
ffffffff802118ce:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802118d2:	0f 94 c0             	sete   %al
ffffffff802118d5:	0f b6 c0             	movzbl %al,%eax
ffffffff802118d8:	48 85 c0             	test   %rax,%rax
ffffffff802118db:	74 0c                	je     ffffffff802118e9 <_RME_Pgt_Con+0xa3>
ffffffff802118dd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802118e4:	e9 d4 04 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff802118e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802118ed:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802118f1:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802118f5:	0f 95 c0             	setne  %al
ffffffff802118f8:	0f b6 c0             	movzbl %al,%eax
ffffffff802118fb:	48 85 c0             	test   %rax,%rax
ffffffff802118fe:	0f 84 4c 01 00 00    	je     ffffffff80211a50 <_RME_Pgt_Con+0x20a>
ffffffff80211904:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021190b:	e9 ad 04 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff80211910:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211914:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211918:	48 89 c2             	mov    %rax,%rdx
ffffffff8021191b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021191f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211923:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211926:	0f 93 c0             	setae  %al
ffffffff80211929:	0f b6 c0             	movzbl %al,%eax
ffffffff8021192c:	48 85 c0             	test   %rax,%rax
ffffffff8021192f:	74 0c                	je     ffffffff8021193d <_RME_Pgt_Con+0xf7>
ffffffff80211931:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211938:	e9 80 04 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff8021193d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211941:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211945:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211949:	48 89 c2             	mov    %rax,%rdx
ffffffff8021194c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211950:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211954:	48 01 d0             	add    %rdx,%rax
ffffffff80211957:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021195b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021195f:	48 8b 00             	mov    (%rax),%rax
ffffffff80211962:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211966:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021196a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021196e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211971:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211975:	0f 94 c0             	sete   %al
ffffffff80211978:	0f b6 c0             	movzbl %al,%eax
ffffffff8021197b:	48 85 c0             	test   %rax,%rax
ffffffff8021197e:	74 0c                	je     ffffffff8021198c <_RME_Pgt_Con+0x146>
ffffffff80211980:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211987:	e9 31 04 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff8021198c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211990:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211994:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211998:	0f 95 c0             	setne  %al
ffffffff8021199b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021199e:	48 85 c0             	test   %rax,%rax
ffffffff802119a1:	74 0c                	je     ffffffff802119af <_RME_Pgt_Con+0x169>
ffffffff802119a3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802119aa:	e9 0e 04 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff802119af:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802119b3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802119b8:	48 89 c2             	mov    %rax,%rdx
ffffffff802119bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802119bf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802119c3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802119c6:	0f 93 c0             	setae  %al
ffffffff802119c9:	0f b6 c0             	movzbl %al,%eax
ffffffff802119cc:	48 85 c0             	test   %rax,%rax
ffffffff802119cf:	74 0c                	je     ffffffff802119dd <_RME_Pgt_Con+0x197>
ffffffff802119d1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802119d8:	e9 e0 03 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff802119dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802119e1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802119e6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802119ea:	48 89 c2             	mov    %rax,%rdx
ffffffff802119ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802119f1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802119f5:	48 01 d0             	add    %rdx,%rax
ffffffff802119f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802119fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211a00:	48 8b 00             	mov    (%rax),%rax
ffffffff80211a03:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211a07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211a0b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211a0f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211a12:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211a16:	0f 94 c0             	sete   %al
ffffffff80211a19:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a1c:	48 85 c0             	test   %rax,%rax
ffffffff80211a1f:	74 0c                	je     ffffffff80211a2d <_RME_Pgt_Con+0x1e7>
ffffffff80211a21:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211a28:	e9 90 03 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff80211a2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211a31:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211a35:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211a39:	0f 95 c0             	setne  %al
ffffffff80211a3c:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a3f:	48 85 c0             	test   %rax,%rax
ffffffff80211a42:	74 0c                	je     ffffffff80211a50 <_RME_Pgt_Con+0x20a>
ffffffff80211a44:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211a4b:	e9 6d 03 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff80211a50:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211a54:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211a59:	48 85 c0             	test   %rax,%rax
ffffffff80211a5c:	0f 85 98 00 00 00    	jne    ffffffff80211afa <_RME_Pgt_Con+0x2b4>
ffffffff80211a62:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211a66:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211a6a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80211a6e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211a71:	0f 93 c0             	setae  %al
ffffffff80211a74:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a77:	48 85 c0             	test   %rax,%rax
ffffffff80211a7a:	74 0c                	je     ffffffff80211a88 <_RME_Pgt_Con+0x242>
ffffffff80211a7c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211a83:	e9 35 03 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff80211a88:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211a8c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211a90:	48 89 c2             	mov    %rax,%rdx
ffffffff80211a93:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211a97:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211a9b:	48 01 d0             	add    %rdx,%rax
ffffffff80211a9e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211aa2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211aa6:	48 8b 00             	mov    (%rax),%rax
ffffffff80211aa9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211aad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211ab1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211ab5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211ab8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211abc:	0f 94 c0             	sete   %al
ffffffff80211abf:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ac2:	48 85 c0             	test   %rax,%rax
ffffffff80211ac5:	74 0c                	je     ffffffff80211ad3 <_RME_Pgt_Con+0x28d>
ffffffff80211ac7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211ace:	e9 ea 02 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff80211ad3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211ad7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211adb:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211adf:	0f 95 c0             	setne  %al
ffffffff80211ae2:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ae5:	48 85 c0             	test   %rax,%rax
ffffffff80211ae8:	0f 84 4c 01 00 00    	je     ffffffff80211c3a <_RME_Pgt_Con+0x3f4>
ffffffff80211aee:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211af5:	e9 c3 02 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff80211afa:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211afe:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211b02:	48 89 c2             	mov    %rax,%rdx
ffffffff80211b05:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211b09:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211b0d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211b10:	0f 93 c0             	setae  %al
ffffffff80211b13:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b16:	48 85 c0             	test   %rax,%rax
ffffffff80211b19:	74 0c                	je     ffffffff80211b27 <_RME_Pgt_Con+0x2e1>
ffffffff80211b1b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211b22:	e9 96 02 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff80211b27:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211b2b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211b2f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211b33:	48 89 c2             	mov    %rax,%rdx
ffffffff80211b36:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211b3a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211b3e:	48 01 d0             	add    %rdx,%rax
ffffffff80211b41:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211b45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211b49:	48 8b 00             	mov    (%rax),%rax
ffffffff80211b4c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211b50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211b54:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211b58:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211b5b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211b5f:	0f 94 c0             	sete   %al
ffffffff80211b62:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b65:	48 85 c0             	test   %rax,%rax
ffffffff80211b68:	74 0c                	je     ffffffff80211b76 <_RME_Pgt_Con+0x330>
ffffffff80211b6a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211b71:	e9 47 02 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff80211b76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211b7a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211b7e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211b82:	0f 95 c0             	setne  %al
ffffffff80211b85:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b88:	48 85 c0             	test   %rax,%rax
ffffffff80211b8b:	74 0c                	je     ffffffff80211b99 <_RME_Pgt_Con+0x353>
ffffffff80211b8d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211b94:	e9 24 02 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff80211b99:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211b9d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211ba2:	48 89 c2             	mov    %rax,%rdx
ffffffff80211ba5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211ba9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211bad:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211bb0:	0f 93 c0             	setae  %al
ffffffff80211bb3:	0f b6 c0             	movzbl %al,%eax
ffffffff80211bb6:	48 85 c0             	test   %rax,%rax
ffffffff80211bb9:	74 0c                	je     ffffffff80211bc7 <_RME_Pgt_Con+0x381>
ffffffff80211bbb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211bc2:	e9 f6 01 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff80211bc7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211bcb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211bd0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211bd4:	48 89 c2             	mov    %rax,%rdx
ffffffff80211bd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211bdb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211bdf:	48 01 d0             	add    %rdx,%rax
ffffffff80211be2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211be6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211bea:	48 8b 00             	mov    (%rax),%rax
ffffffff80211bed:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211bf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211bf5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211bf9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211bfc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211c00:	0f 94 c0             	sete   %al
ffffffff80211c03:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c06:	48 85 c0             	test   %rax,%rax
ffffffff80211c09:	74 0c                	je     ffffffff80211c17 <_RME_Pgt_Con+0x3d1>
ffffffff80211c0b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211c12:	e9 a6 01 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
ffffffff80211c17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211c1b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211c1f:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211c23:	0f 95 c0             	setne  %al
ffffffff80211c26:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c29:	48 85 c0             	test   %rax,%rax
ffffffff80211c2c:	74 0c                	je     ffffffff80211c3a <_RME_Pgt_Con+0x3f4>
ffffffff80211c2e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211c35:	e9 83 01 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
                   struct RME_Cap_Pgt*,Pgt_Child,Type_Stat);
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff80211c3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211c3e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211c42:	83 e0 10             	and    $0x10,%eax
ffffffff80211c45:	48 85 c0             	test   %rax,%rax
ffffffff80211c48:	0f 94 c0             	sete   %al
ffffffff80211c4b:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c4e:	48 85 c0             	test   %rax,%rax
ffffffff80211c51:	74 0c                	je     ffffffff80211c5f <_RME_Pgt_Con+0x419>
ffffffff80211c53:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211c5a:	e9 5e 01 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff80211c5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211c63:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211c67:	83 e0 08             	and    $0x8,%eax
ffffffff80211c6a:	48 85 c0             	test   %rax,%rax
ffffffff80211c6d:	0f 94 c0             	sete   %al
ffffffff80211c70:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c73:	48 85 c0             	test   %rax,%rax
ffffffff80211c76:	74 0c                	je     ffffffff80211c84 <_RME_Pgt_Con+0x43e>
ffffffff80211c78:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211c7f:	e9 39 01 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211c84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211c88:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211c8c:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff80211c90:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff80211c94:	72 17                	jb     ffffffff80211cad <_RME_Pgt_Con+0x467>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff80211c96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211c9a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211c9e:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211ca2:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211ca7:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
ffffffff80211cab:	73 0c                	jae    ffffffff80211cb9 <_RME_Pgt_Con+0x473>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80211cad:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211cb4:	e9 04 01 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff80211cb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211cbd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211cc1:	89 c2                	mov    %eax,%edx
ffffffff80211cc3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211cc7:	89 d1                	mov    %edx,%ecx
ffffffff80211cc9:	48 d3 e8             	shr    %cl,%rax
ffffffff80211ccc:	48 85 c0             	test   %rax,%rax
ffffffff80211ccf:	74 0c                	je     ffffffff80211cdd <_RME_Pgt_Con+0x497>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211cd1:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211cd8:	e9 e0 00 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the child table falls within one slot of the parent table */
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff80211cdd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211ce1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211ce5:	89 c2                	mov    %eax,%edx
ffffffff80211ce7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211ceb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211cef:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211cf3:	48 01 d0             	add    %rdx,%rax
ffffffff80211cf6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff80211cfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211cfe:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211d02:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211d06:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Szord_Parent<Order_Child)
ffffffff80211d0a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211d0e:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80211d12:	73 0c                	jae    ffffffff80211d20 <_RME_Pgt_Con+0x4da>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff80211d14:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211d1b:	e9 9d 00 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
        RME_COV_MARKER();
        /* No action required */
    }
#else
    /* Force no path compression when virtual mappings are enabled */
    if(Szord_Parent!=Order_Child)
ffffffff80211d20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211d24:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80211d28:	74 0c                	je     ffffffff80211d36 <_RME_Pgt_Con+0x4f0>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211d2a:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211d31:	e9 87 00 00 00       	jmp    ffffffff80211dbd <_RME_Pgt_Con+0x577>
    }
#endif

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff80211d36:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff80211d3a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80211d3e:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff80211d42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d46:	48 89 c7             	mov    %rax,%rdi
ffffffff80211d49:	e8 a7 4d 01 00       	call   ffffffff80226af5 <__RME_Pgt_Pgdir_Map>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff80211d4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d52:	48 8b 00             	mov    (%rax),%rax
ffffffff80211d55:	89 c0                	mov    %eax,%eax
ffffffff80211d57:	48 85 c0             	test   %rax,%rax
ffffffff80211d5a:	74 0a                	je     ffffffff80211d66 <_RME_Pgt_Con+0x520>
ffffffff80211d5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d60:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80211d64:	eb 04                	jmp    ffffffff80211d6a <_RME_Pgt_Con+0x524>
ffffffff80211d66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d6a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1);
ffffffff80211d6e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211d72:	48 83 c0 08          	add    $0x8,%rax
ffffffff80211d76:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80211d7b:	48 89 c7             	mov    %rax,%rdi
ffffffff80211d7e:	e8 10 aa ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff80211d83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211d87:	48 8b 00             	mov    (%rax),%rax
ffffffff80211d8a:	89 c0                	mov    %eax,%eax
ffffffff80211d8c:	48 85 c0             	test   %rax,%rax
ffffffff80211d8f:	74 0a                	je     ffffffff80211d9b <_RME_Pgt_Con+0x555>
ffffffff80211d91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211d95:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80211d99:	eb 04                	jmp    ffffffff80211d9f <_RME_Pgt_Con+0x559>
ffffffff80211d9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211d9f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1);
ffffffff80211da3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211da7:	48 83 c0 08          	add    $0x8,%rax
ffffffff80211dab:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80211db0:	48 89 c7             	mov    %rax,%rdi
ffffffff80211db3:	e8 db a9 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80211db8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80211dbd:	c9                   	leave
ffffffff80211dbe:	c3                   	ret

ffffffff80211dbf <_RME_Pgt_Des>:
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Des(struct RME_Cap_Cpt* Cpt, 
                              rme_cid_t Cap_Pgt_Parent,
                              rme_ptr_t Pos,
                              rme_cid_t Cap_Pgt_Child)
{
ffffffff80211dbf:	f3 0f 1e fa          	endbr64
ffffffff80211dc3:	55                   	push   %rbp
ffffffff80211dc4:	48 89 e5             	mov    %rsp,%rbp
ffffffff80211dc7:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80211dcb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80211dcf:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80211dd3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80211dd7:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    struct RME_Cap_Pgt* Pgt_Child;
    struct RME_Cap_Pgt* Pgt_Root;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff80211ddb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211ddf:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211de4:	48 85 c0             	test   %rax,%rax
ffffffff80211de7:	0f 85 98 00 00 00    	jne    ffffffff80211e85 <_RME_Pgt_Des+0xc6>
ffffffff80211ded:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211df1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211df5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80211df9:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211dfc:	0f 93 c0             	setae  %al
ffffffff80211dff:	0f b6 c0             	movzbl %al,%eax
ffffffff80211e02:	48 85 c0             	test   %rax,%rax
ffffffff80211e05:	74 0c                	je     ffffffff80211e13 <_RME_Pgt_Des+0x54>
ffffffff80211e07:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211e0e:	e9 c9 04 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff80211e13:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211e17:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211e1b:	48 89 c2             	mov    %rax,%rdx
ffffffff80211e1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211e22:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211e26:	48 01 d0             	add    %rdx,%rax
ffffffff80211e29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211e2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211e31:	48 8b 00             	mov    (%rax),%rax
ffffffff80211e34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211e38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211e3c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211e40:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211e43:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211e47:	0f 94 c0             	sete   %al
ffffffff80211e4a:	0f b6 c0             	movzbl %al,%eax
ffffffff80211e4d:	48 85 c0             	test   %rax,%rax
ffffffff80211e50:	74 0c                	je     ffffffff80211e5e <_RME_Pgt_Des+0x9f>
ffffffff80211e52:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211e59:	e9 7e 04 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff80211e5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211e62:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211e66:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211e6a:	0f 95 c0             	setne  %al
ffffffff80211e6d:	0f b6 c0             	movzbl %al,%eax
ffffffff80211e70:	48 85 c0             	test   %rax,%rax
ffffffff80211e73:	0f 84 4c 01 00 00    	je     ffffffff80211fc5 <_RME_Pgt_Des+0x206>
ffffffff80211e79:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211e80:	e9 57 04 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff80211e85:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211e89:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211e8d:	48 89 c2             	mov    %rax,%rdx
ffffffff80211e90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211e94:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211e98:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211e9b:	0f 93 c0             	setae  %al
ffffffff80211e9e:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ea1:	48 85 c0             	test   %rax,%rax
ffffffff80211ea4:	74 0c                	je     ffffffff80211eb2 <_RME_Pgt_Des+0xf3>
ffffffff80211ea6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211ead:	e9 2a 04 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff80211eb2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211eb6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211eba:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211ebe:	48 89 c2             	mov    %rax,%rdx
ffffffff80211ec1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211ec5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211ec9:	48 01 d0             	add    %rdx,%rax
ffffffff80211ecc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211ed0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211ed4:	48 8b 00             	mov    (%rax),%rax
ffffffff80211ed7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211edb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211edf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211ee3:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211ee6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211eea:	0f 94 c0             	sete   %al
ffffffff80211eed:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ef0:	48 85 c0             	test   %rax,%rax
ffffffff80211ef3:	74 0c                	je     ffffffff80211f01 <_RME_Pgt_Des+0x142>
ffffffff80211ef5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211efc:	e9 db 03 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff80211f01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211f05:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211f09:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211f0d:	0f 95 c0             	setne  %al
ffffffff80211f10:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f13:	48 85 c0             	test   %rax,%rax
ffffffff80211f16:	74 0c                	je     ffffffff80211f24 <_RME_Pgt_Des+0x165>
ffffffff80211f18:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211f1f:	e9 b8 03 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff80211f24:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211f28:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211f2d:	48 89 c2             	mov    %rax,%rdx
ffffffff80211f30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211f34:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211f38:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211f3b:	0f 93 c0             	setae  %al
ffffffff80211f3e:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f41:	48 85 c0             	test   %rax,%rax
ffffffff80211f44:	74 0c                	je     ffffffff80211f52 <_RME_Pgt_Des+0x193>
ffffffff80211f46:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211f4d:	e9 8a 03 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff80211f52:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211f56:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211f5b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211f5f:	48 89 c2             	mov    %rax,%rdx
ffffffff80211f62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211f66:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211f6a:	48 01 d0             	add    %rdx,%rax
ffffffff80211f6d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211f71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211f75:	48 8b 00             	mov    (%rax),%rax
ffffffff80211f78:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211f7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211f80:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211f84:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211f87:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211f8b:	0f 94 c0             	sete   %al
ffffffff80211f8e:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f91:	48 85 c0             	test   %rax,%rax
ffffffff80211f94:	74 0c                	je     ffffffff80211fa2 <_RME_Pgt_Des+0x1e3>
ffffffff80211f96:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211f9d:	e9 3a 03 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff80211fa2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211fa6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211faa:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211fae:	0f 95 c0             	setne  %al
ffffffff80211fb1:	0f b6 c0             	movzbl %al,%eax
ffffffff80211fb4:	48 85 c0             	test   %rax,%rax
ffffffff80211fb7:	74 0c                	je     ffffffff80211fc5 <_RME_Pgt_Des+0x206>
ffffffff80211fb9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211fc0:	e9 17 03 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff80211fc5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211fc9:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211fce:	48 85 c0             	test   %rax,%rax
ffffffff80211fd1:	0f 85 98 00 00 00    	jne    ffffffff8021206f <_RME_Pgt_Des+0x2b0>
ffffffff80211fd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211fdb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211fdf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80211fe3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211fe6:	0f 93 c0             	setae  %al
ffffffff80211fe9:	0f b6 c0             	movzbl %al,%eax
ffffffff80211fec:	48 85 c0             	test   %rax,%rax
ffffffff80211fef:	74 0c                	je     ffffffff80211ffd <_RME_Pgt_Des+0x23e>
ffffffff80211ff1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211ff8:	e9 df 02 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff80211ffd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212001:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212005:	48 89 c2             	mov    %rax,%rdx
ffffffff80212008:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021200c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212010:	48 01 d0             	add    %rdx,%rax
ffffffff80212013:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212017:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021201b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021201e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80212022:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212026:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021202a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021202d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212031:	0f 94 c0             	sete   %al
ffffffff80212034:	0f b6 c0             	movzbl %al,%eax
ffffffff80212037:	48 85 c0             	test   %rax,%rax
ffffffff8021203a:	74 0c                	je     ffffffff80212048 <_RME_Pgt_Des+0x289>
ffffffff8021203c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212043:	e9 94 02 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff80212048:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021204c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212050:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212054:	0f 95 c0             	setne  %al
ffffffff80212057:	0f b6 c0             	movzbl %al,%eax
ffffffff8021205a:	48 85 c0             	test   %rax,%rax
ffffffff8021205d:	0f 84 4c 01 00 00    	je     ffffffff802121af <_RME_Pgt_Des+0x3f0>
ffffffff80212063:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021206a:	e9 6d 02 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff8021206f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212073:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80212077:	48 89 c2             	mov    %rax,%rdx
ffffffff8021207a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021207e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212082:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212085:	0f 93 c0             	setae  %al
ffffffff80212088:	0f b6 c0             	movzbl %al,%eax
ffffffff8021208b:	48 85 c0             	test   %rax,%rax
ffffffff8021208e:	74 0c                	je     ffffffff8021209c <_RME_Pgt_Des+0x2dd>
ffffffff80212090:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212097:	e9 40 02 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff8021209c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802120a0:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802120a4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802120a8:	48 89 c2             	mov    %rax,%rdx
ffffffff802120ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802120af:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802120b3:	48 01 d0             	add    %rdx,%rax
ffffffff802120b6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802120ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802120be:	48 8b 00             	mov    (%rax),%rax
ffffffff802120c1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802120c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802120c9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802120cd:	0f b7 c0             	movzwl %ax,%eax
ffffffff802120d0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802120d4:	0f 94 c0             	sete   %al
ffffffff802120d7:	0f b6 c0             	movzbl %al,%eax
ffffffff802120da:	48 85 c0             	test   %rax,%rax
ffffffff802120dd:	74 0c                	je     ffffffff802120eb <_RME_Pgt_Des+0x32c>
ffffffff802120df:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802120e6:	e9 f1 01 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff802120eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802120ef:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802120f3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802120f7:	0f 95 c0             	setne  %al
ffffffff802120fa:	0f b6 c0             	movzbl %al,%eax
ffffffff802120fd:	48 85 c0             	test   %rax,%rax
ffffffff80212100:	74 0c                	je     ffffffff8021210e <_RME_Pgt_Des+0x34f>
ffffffff80212102:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212109:	e9 ce 01 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff8021210e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212112:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212117:	48 89 c2             	mov    %rax,%rdx
ffffffff8021211a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021211e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212122:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212125:	0f 93 c0             	setae  %al
ffffffff80212128:	0f b6 c0             	movzbl %al,%eax
ffffffff8021212b:	48 85 c0             	test   %rax,%rax
ffffffff8021212e:	74 0c                	je     ffffffff8021213c <_RME_Pgt_Des+0x37d>
ffffffff80212130:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212137:	e9 a0 01 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff8021213c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212140:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212145:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212149:	48 89 c2             	mov    %rax,%rdx
ffffffff8021214c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212150:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212154:	48 01 d0             	add    %rdx,%rax
ffffffff80212157:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021215b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021215f:	48 8b 00             	mov    (%rax),%rax
ffffffff80212162:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80212166:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021216a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021216e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212171:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212175:	0f 94 c0             	sete   %al
ffffffff80212178:	0f b6 c0             	movzbl %al,%eax
ffffffff8021217b:	48 85 c0             	test   %rax,%rax
ffffffff8021217e:	74 0c                	je     ffffffff8021218c <_RME_Pgt_Des+0x3cd>
ffffffff80212180:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212187:	e9 50 01 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
ffffffff8021218c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212190:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212194:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212198:	0f 95 c0             	setne  %al
ffffffff8021219b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021219e:	48 85 c0             	test   %rax,%rax
ffffffff802121a1:	74 0c                	je     ffffffff802121af <_RME_Pgt_Des+0x3f0>
ffffffff802121a3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802121aa:	e9 2d 01 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
                   struct RME_Cap_Pgt*,Pgt_Child,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
ffffffff802121af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802121b3:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802121b7:	83 e0 20             	and    $0x20,%eax
ffffffff802121ba:	48 85 c0             	test   %rax,%rax
ffffffff802121bd:	0f 94 c0             	sete   %al
ffffffff802121c0:	0f b6 c0             	movzbl %al,%eax
ffffffff802121c3:	48 85 c0             	test   %rax,%rax
ffffffff802121c6:	74 0c                	je     ffffffff802121d4 <_RME_Pgt_Des+0x415>
ffffffff802121c8:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802121cf:	e9 08 01 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff802121d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802121d8:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802121dc:	83 e0 08             	and    $0x8,%eax
ffffffff802121df:	48 85 c0             	test   %rax,%rax
ffffffff802121e2:	0f 94 c0             	sete   %al
ffffffff802121e5:	0f b6 c0             	movzbl %al,%eax
ffffffff802121e8:	48 85 c0             	test   %rax,%rax
ffffffff802121eb:	74 0c                	je     ffffffff802121f9 <_RME_Pgt_Des+0x43a>
ffffffff802121ed:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802121f4:	e9 e3 00 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff802121f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802121fd:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212201:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff80212205:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff80212209:	72 17                	jb     ffffffff80212222 <_RME_Pgt_Des+0x463>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff8021220b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021220f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212213:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80212217:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff8021221c:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff80212220:	73 0c                	jae    ffffffff8021222e <_RME_Pgt_Des+0x46f>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80212222:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80212229:	e9 ae 00 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff8021222e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212232:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212236:	89 c2                	mov    %eax,%edx
ffffffff80212238:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021223c:	89 d1                	mov    %edx,%ecx
ffffffff8021223e:	48 d3 e8             	shr    %cl,%rax
ffffffff80212241:	48 85 c0             	test   %rax,%rax
ffffffff80212244:	74 0c                	je     ffffffff80212252 <_RME_Pgt_Des+0x493>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80212246:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8021224d:	e9 8a 00 00 00       	jmp    ffffffff802122dc <_RME_Pgt_Des+0x51d>

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict. Also,
     * the HAL needs to guarantee that the Child is actually mapped there,
     * and use that as the old value in CAS */
    if(__RME_Pgt_Pgdir_Unmap(Pgt_Parent,Pos,Pgt_Child)<0)
ffffffff80212252:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80212256:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8021225a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021225e:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212261:	48 89 c7             	mov    %rax,%rdi
ffffffff80212264:	e8 73 49 01 00       	call   ffffffff80226bdc <__RME_Pgt_Pgdir_Unmap>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Decrease refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff80212269:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021226d:	48 8b 00             	mov    (%rax),%rax
ffffffff80212270:	89 c0                	mov    %eax,%eax
ffffffff80212272:	48 85 c0             	test   %rax,%rax
ffffffff80212275:	74 0a                	je     ffffffff80212281 <_RME_Pgt_Des+0x4c2>
ffffffff80212277:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021227b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021227f:	eb 04                	jmp    ffffffff80212285 <_RME_Pgt_Des+0x4c6>
ffffffff80212281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212285:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),-1);
ffffffff80212289:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021228d:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212291:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80212298:	48 89 c7             	mov    %rax,%rdi
ffffffff8021229b:	e8 f3 a4 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff802122a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802122a4:	48 8b 00             	mov    (%rax),%rax
ffffffff802122a7:	89 c0                	mov    %eax,%eax
ffffffff802122a9:	48 85 c0             	test   %rax,%rax
ffffffff802122ac:	74 0a                	je     ffffffff802122b8 <_RME_Pgt_Des+0x4f9>
ffffffff802122ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802122b2:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802122b6:	eb 04                	jmp    ffffffff802122bc <_RME_Pgt_Des+0x4fd>
ffffffff802122b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802122bc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),-1);
ffffffff802122c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802122c4:	48 83 c0 08          	add    $0x8,%rax
ffffffff802122c8:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802122cf:	48 89 c7             	mov    %rax,%rdi
ffffffff802122d2:	e8 bc a4 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff802122d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802122dc:	c9                   	leave
ffffffff802122dd:	c3                   	ret

ffffffff802122de <_RME_Kot_Init>:
Output      : None.
Return      : rme_ret_t - If the number of words are is not sufficient to hold 
                          all kernel memory, -1; else 0.
******************************************************************************/
rme_ret_t _RME_Kot_Init(rme_ptr_t Word)
{
ffffffff802122de:	f3 0f 1e fa          	endbr64
ffffffff802122e2:	55                   	push   %rbp
ffffffff802122e3:	48 89 e5             	mov    %rsp,%rbp
ffffffff802122e6:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff802122ea:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Count;
    
    if(Word<RME_KOT_WORD_NUM)
ffffffff802122ee:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
ffffffff802122f3:	77 09                	ja     ffffffff802122fe <_RME_Kot_Init+0x20>
    {
        RME_COV_MARKER();

        return -1;
ffffffff802122f5:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802122fc:	eb 3e                	jmp    ffffffff8021233c <_RME_Kot_Init+0x5e>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Zero out the whole table */
    for(Count=0U;Count<Word;Count++)
ffffffff802122fe:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80212305:	00 
ffffffff80212306:	eb 25                	jmp    ffffffff8021232d <_RME_Kot_Init+0x4f>
    {
        RME_KOT_VA_BASE[Count]=0U;
ffffffff80212308:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021230c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212313:	00 
ffffffff80212314:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021231b:	80 ff ff 
ffffffff8021231e:	48 01 d0             	add    %rdx,%rax
ffffffff80212321:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff80212328:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021232d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212331:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80212335:	72 d1                	jb     ffffffff80212308 <_RME_Kot_Init+0x2a>
    }

    return 0;
ffffffff80212337:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021233c:	c9                   	leave
ffffffff8021233d:	c3                   	ret

ffffffff8021233e <_RME_Kot_Mark>:
Output      : None.
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Kot_Mark(rme_ptr_t Kaddr,
                        rme_ptr_t Size)
{
ffffffff8021233e:	f3 0f 1e fa          	endbr64
ffffffff80212342:	55                   	push   %rbp
ffffffff80212343:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212346:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8021234a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8021234e:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    rme_ptr_t Mask_Begin;
    /* The mask at the end word */
    rme_ptr_t Mask_End;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff80212352:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80212356:	83 e0 0f             	and    $0xf,%eax
ffffffff80212359:	48 85 c0             	test   %rax,%rax
ffffffff8021235c:	74 0c                	je     ffffffff8021236a <_RME_Kot_Mark+0x2c>
    {
        RME_COV_MARKER();

        return RME_ERR_KOT_BMP;
ffffffff8021235e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212365:	e9 19 03 00 00       	jmp    ffffffff80212683 <_RME_Kot_Mark+0x345>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Round the marking to RME_KOM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8021236a:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80212371:	80 00 00 
ffffffff80212374:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80212378:	48 01 d0             	add    %rdx,%rax
ffffffff8021237b:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff8021237f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80212383:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212387:	83 e0 3f             	and    $0x3f,%eax
ffffffff8021238a:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212391:	89 c1                	mov    %eax,%ecx
ffffffff80212393:	48 d3 e2             	shl    %cl,%rdx
ffffffff80212396:	48 89 d0             	mov    %rdx,%rax
ffffffff80212399:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Start=Start>>RME_WORD_ORDER;
ffffffff8021239d:	48 c1 6d e8 06       	shrq   $0x6,-0x18(%rbp)
    
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802123a2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff802123a6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802123aa:	48 01 c2             	add    %rax,%rdx
ffffffff802123ad:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff802123b4:	7f 00 00 
ffffffff802123b7:	48 01 d0             	add    %rdx,%rax
ffffffff802123ba:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff802123be:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff802123c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802123c6:	f7 d0                	not    %eax
ffffffff802123c8:	83 e0 3f             	and    $0x3f,%eax
ffffffff802123cb:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802123d2:	89 c1                	mov    %eax,%ecx
ffffffff802123d4:	48 d3 ea             	shr    %cl,%rdx
ffffffff802123d7:	48 89 d0             	mov    %rdx,%rax
ffffffff802123da:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    End=End>>RME_WORD_ORDER;
ffffffff802123de:	48 c1 6d d8 06       	shrq   $0x6,-0x28(%rbp)
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff802123e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802123e7:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff802123eb:	0f 85 89 00 00 00    	jne    ffffffff8021247a <_RME_Kot_Mark+0x13c>
    {
        RME_COV_MARKER();

        /* Someone already populated something here */
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff802123f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802123f5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802123fc:	00 
ffffffff802123fd:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212404:	80 ff ff 
ffffffff80212407:	48 01 d0             	add    %rdx,%rax
ffffffff8021240a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021240d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        if((Old_Val&(Mask_Begin&Mask_End))!=0U)
ffffffff80212411:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212415:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80212419:	48 23 45 c8          	and    -0x38(%rbp),%rax
ffffffff8021241d:	48 85 c0             	test   %rax,%rax
ffffffff80212420:	74 0c                	je     ffffffff8021242e <_RME_Kot_Mark+0xf0>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff80212422:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212429:	e9 55 02 00 00       	jmp    ffffffff80212683 <_RME_Kot_Mark+0x345>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check done, do the marking with CAS */
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8021242e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212432:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80212436:	48 0b 45 c8          	or     -0x38(%rbp),%rax
ffffffff8021243a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021243d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212441:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff80212448:	00 
ffffffff80212449:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212450:	80 ff ff 
ffffffff80212453:	48 01 c1             	add    %rax,%rcx
ffffffff80212456:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021245a:	48 89 c6             	mov    %rax,%rsi
ffffffff8021245d:	48 89 cf             	mov    %rcx,%rdi
ffffffff80212460:	e8 f9 a2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212465:	48 85 c0             	test   %rax,%rax
ffffffff80212468:	0f 85 10 02 00 00    	jne    ffffffff8021267e <_RME_Kot_Mark+0x340>
                         Old_Val,
                         Old_Val|(Mask_Begin&Mask_End))==RME_CASFAIL)
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff8021246e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212475:	e9 09 02 00 00       	jmp    ffffffff80212683 <_RME_Kot_Mark+0x345>
    }
    else
    {
        RME_COV_MARKER();
        
        Undo=0U;
ffffffff8021247a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80212481:	00 
        /* Check&Mark the start */
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff80212482:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212486:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021248d:	00 
ffffffff8021248e:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212495:	80 ff ff 
ffffffff80212498:	48 01 d0             	add    %rdx,%rax
ffffffff8021249b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021249e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        if((Old_Val&Mask_Begin)!=0U)
ffffffff802124a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802124a6:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff802124aa:	48 85 c0             	test   %rax,%rax
ffffffff802124ad:	74 0c                	je     ffffffff802124bb <_RME_Kot_Mark+0x17d>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802124af:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802124b6:	e9 c8 01 00 00       	jmp    ffffffff80212683 <_RME_Kot_Mark+0x345>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff802124bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802124bf:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff802124c3:	48 89 c2             	mov    %rax,%rdx
ffffffff802124c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802124ca:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff802124d1:	00 
ffffffff802124d2:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802124d9:	80 ff ff 
ffffffff802124dc:	48 01 c1             	add    %rax,%rcx
ffffffff802124df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802124e3:	48 89 c6             	mov    %rax,%rsi
ffffffff802124e6:	48 89 cf             	mov    %rcx,%rdi
ffffffff802124e9:	e8 70 a2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802124ee:	48 85 c0             	test   %rax,%rax
ffffffff802124f1:	75 0c                	jne    ffffffff802124ff <_RME_Kot_Mark+0x1c1>
                         Old_Val,
                         Old_Val|Mask_Begin)==RME_CASFAIL)
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802124f3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802124fa:	e9 84 01 00 00       	jmp    ffffffff80212683 <_RME_Kot_Mark+0x345>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check&Mark the middle */
        for(Count=Start+1U;Count<End;Count++)
ffffffff802124ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212503:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212507:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021250b:	eb 75                	jmp    ffffffff80212582 <_RME_Kot_Mark+0x244>
        {
            Old_Val=RME_KOT_VA_BASE[Count];
ffffffff8021250d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212511:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212518:	00 
ffffffff80212519:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212520:	80 ff ff 
ffffffff80212523:	48 01 d0             	add    %rdx,%rax
ffffffff80212526:	48 8b 00             	mov    (%rax),%rax
ffffffff80212529:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            if(Old_Val!=0U)
ffffffff8021252d:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff80212532:	74 0a                	je     ffffffff8021253e <_RME_Kot_Mark+0x200>
            {
                RME_COV_MARKER();

                Undo=1U;
ffffffff80212534:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff8021253b:	00 
                break;
ffffffff8021253c:	eb 4e                	jmp    ffffffff8021258c <_RME_Kot_Mark+0x24e>
            }
            else
            {
                RME_COV_MARKER();
                
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Count],
ffffffff8021253e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212542:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212549:	00 
ffffffff8021254a:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212551:	80 ff ff 
ffffffff80212554:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80212558:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021255c:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212563:	48 89 c6             	mov    %rax,%rsi
ffffffff80212566:	48 89 cf             	mov    %rcx,%rdi
ffffffff80212569:	e8 f0 a1 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021256e:	48 85 c0             	test   %rax,%rax
ffffffff80212571:	75 0a                	jne    ffffffff8021257d <_RME_Kot_Mark+0x23f>
                                 Old_Val,
                                 RME_MASK_FULL)==RME_CASFAIL)
                {
                    RME_COV_MARKER();
                    
                    Undo=1U;
ffffffff80212573:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff8021257a:	00 
                    break;
ffffffff8021257b:	eb 0f                	jmp    ffffffff8021258c <_RME_Kot_Mark+0x24e>
        for(Count=Start+1U;Count<End;Count++)
ffffffff8021257d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212582:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212586:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8021258a:	72 81                	jb     ffffffff8021250d <_RME_Kot_Mark+0x1cf>
                }
            }
        }
        
        /* See if the middle part failed. If yes, we skip the end marking */
        if(Undo==0U)
ffffffff8021258c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80212591:	75 77                	jne    ffffffff8021260a <_RME_Kot_Mark+0x2cc>
        {
            RME_COV_MARKER();

            /* Check&Mark the end */
            Old_Val=RME_KOT_VA_BASE[End];
ffffffff80212593:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212597:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021259e:	00 
ffffffff8021259f:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802125a6:	80 ff ff 
ffffffff802125a9:	48 01 d0             	add    %rdx,%rax
ffffffff802125ac:	48 8b 00             	mov    (%rax),%rax
ffffffff802125af:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            if((Old_Val&Mask_End)!=0U)
ffffffff802125b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802125b7:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff802125bb:	48 85 c0             	test   %rax,%rax
ffffffff802125be:	74 0a                	je     ffffffff802125ca <_RME_Kot_Mark+0x28c>
            {
                RME_COV_MARKER();

                Undo=1U;
ffffffff802125c0:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff802125c7:	00 
ffffffff802125c8:	eb 40                	jmp    ffffffff8021260a <_RME_Kot_Mark+0x2cc>
            }
            else
            {
                RME_COV_MARKER();

                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[End],
ffffffff802125ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802125ce:	48 0b 45 d0          	or     -0x30(%rbp),%rax
ffffffff802125d2:	48 89 c2             	mov    %rax,%rdx
ffffffff802125d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802125d9:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff802125e0:	00 
ffffffff802125e1:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802125e8:	80 ff ff 
ffffffff802125eb:	48 01 c1             	add    %rax,%rcx
ffffffff802125ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802125f2:	48 89 c6             	mov    %rax,%rsi
ffffffff802125f5:	48 89 cf             	mov    %rcx,%rdi
ffffffff802125f8:	e8 61 a1 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802125fd:	48 85 c0             	test   %rax,%rax
ffffffff80212600:	75 08                	jne    ffffffff8021260a <_RME_Kot_Mark+0x2cc>
                                 Old_Val,
                                 Old_Val|Mask_End)==RME_CASFAIL)
                {
                    RME_COV_MARKER();

                    Undo=1U;
ffffffff80212602:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff80212609:	00 
        {
            RME_COV_MARKER();
        }
        
        /* See if we need to undo. If yes, proceed to unroll and return error */
        if(Undo!=0U)
ffffffff8021260a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021260f:	74 6d                	je     ffffffff8021267e <_RME_Kot_Mark+0x340>
        {
            RME_COV_MARKER();

            /* Undo the middle part - no CAS neeeded, write back is always atomic */
            for(Count--;Count>Start;Count--)
ffffffff80212611:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff80212616:	eb 25                	jmp    ffffffff8021263d <_RME_Kot_Mark+0x2ff>
            {
                RME_KOT_VA_BASE[Count]=0U;
ffffffff80212618:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021261c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212623:	00 
ffffffff80212624:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021262b:	80 ff ff 
ffffffff8021262e:	48 01 d0             	add    %rdx,%rax
ffffffff80212631:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            for(Count--;Count>Start;Count--)
ffffffff80212638:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff8021263d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212641:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80212645:	72 d1                	jb     ffffffff80212618 <_RME_Kot_Mark+0x2da>
            }
            /* Undo the first word - need atomic instructions */
            RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff80212647:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021264b:	48 f7 d0             	not    %rax
ffffffff8021264e:	48 89 c1             	mov    %rax,%rcx
ffffffff80212651:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212655:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021265c:	00 
ffffffff8021265d:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212664:	80 ff ff 
ffffffff80212667:	48 01 d0             	add    %rdx,%rax
ffffffff8021266a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021266d:	48 89 c7             	mov    %rax,%rdi
ffffffff80212670:	e8 49 a1 ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
            /* Return failure */
            return RME_ERR_KOT_BMP;
ffffffff80212675:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021267c:	eb 05                	jmp    ffffffff80212683 <_RME_Kot_Mark+0x345>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff8021267e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212683:	c9                   	leave
ffffffff80212684:	c3                   	ret

ffffffff80212685 <_RME_Kot_Erase>:
Output      : None.
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Kot_Erase(rme_ptr_t Kaddr,
                         rme_ptr_t Size)
{
ffffffff80212685:	f3 0f 1e fa          	endbr64
ffffffff80212689:	55                   	push   %rbp
ffffffff8021268a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021268d:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80212691:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80212695:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    /* The mask at the end word */
    rme_ptr_t Mask_End;
    rme_ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff80212699:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021269d:	83 e0 0f             	and    $0xf,%eax
ffffffff802126a0:	48 85 c0             	test   %rax,%rax
ffffffff802126a3:	74 0c                	je     ffffffff802126b1 <_RME_Kot_Erase+0x2c>
    {
        RME_COV_MARKER();

        return RME_ERR_KOT_BMP;
ffffffff802126a5:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802126ac:	e9 4f 02 00 00       	jmp    ffffffff80212900 <_RME_Kot_Erase+0x27b>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Round the marking to RME_KOM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802126b1:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802126b8:	80 00 00 
ffffffff802126bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802126bf:	48 01 d0             	add    %rdx,%rax
ffffffff802126c2:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff802126c6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff802126ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802126ce:	83 e0 3f             	and    $0x3f,%eax
ffffffff802126d1:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802126d8:	89 c1                	mov    %eax,%ecx
ffffffff802126da:	48 d3 e2             	shl    %cl,%rdx
ffffffff802126dd:	48 89 d0             	mov    %rdx,%rax
ffffffff802126e0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Start=Start>>RME_WORD_ORDER;
ffffffff802126e4:	48 c1 6d f0 06       	shrq   $0x6,-0x10(%rbp)
    
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802126e9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff802126ed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802126f1:	48 01 c2             	add    %rax,%rdx
ffffffff802126f4:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff802126fb:	7f 00 00 
ffffffff802126fe:	48 01 d0             	add    %rdx,%rax
ffffffff80212701:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80212705:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80212709:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021270d:	f7 d0                	not    %eax
ffffffff8021270f:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212712:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212719:	89 c1                	mov    %eax,%ecx
ffffffff8021271b:	48 d3 ea             	shr    %cl,%rdx
ffffffff8021271e:	48 89 d0             	mov    %rdx,%rax
ffffffff80212721:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    End=End>>RME_WORD_ORDER;
ffffffff80212725:	48 c1 6d e0 06       	shrq   $0x6,-0x20(%rbp)
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff8021272a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021272e:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80212732:	75 77                	jne    ffffffff802127ab <_RME_Kot_Erase+0x126>
    {
        RME_COV_MARKER();

        /* This address range is not fully populated */
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff80212734:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212738:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021273f:	00 
ffffffff80212740:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212747:	80 ff ff 
ffffffff8021274a:	48 01 d0             	add    %rdx,%rax
ffffffff8021274d:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212750:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212754:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff80212758:	48 21 c2             	and    %rax,%rdx
ffffffff8021275b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021275f:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff80212763:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212766:	74 0c                	je     ffffffff80212774 <_RME_Kot_Erase+0xef>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff80212768:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021276f:	e9 8c 01 00 00       	jmp    ffffffff80212900 <_RME_Kot_Erase+0x27b>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Check done, do the unmarking - need atomic operations */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~(Mask_Begin&Mask_End));
ffffffff80212774:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212778:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff8021277c:	48 f7 d0             	not    %rax
ffffffff8021277f:	48 89 c1             	mov    %rax,%rcx
ffffffff80212782:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212786:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021278d:	00 
ffffffff8021278e:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212795:	80 ff ff 
ffffffff80212798:	48 01 d0             	add    %rdx,%rax
ffffffff8021279b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021279e:	48 89 c7             	mov    %rax,%rdi
ffffffff802127a1:	e8 18 a0 ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
ffffffff802127a6:	e9 50 01 00 00       	jmp    ffffffff802128fb <_RME_Kot_Erase+0x276>
    else
    {
        RME_COV_MARKER();

        /* Check the start */
        if((RME_KOT_VA_BASE[Start]&Mask_Begin)!=Mask_Begin)
ffffffff802127ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802127af:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802127b6:	00 
ffffffff802127b7:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802127be:	80 ff ff 
ffffffff802127c1:	48 01 d0             	add    %rdx,%rax
ffffffff802127c4:	48 8b 00             	mov    (%rax),%rax
ffffffff802127c7:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff802127cb:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff802127cf:	74 0c                	je     ffffffff802127dd <_RME_Kot_Erase+0x158>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802127d1:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802127d8:	e9 23 01 00 00       	jmp    ffffffff80212900 <_RME_Kot_Erase+0x27b>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the middle */
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802127dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802127e1:	48 83 c0 01          	add    $0x1,%rax
ffffffff802127e5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802127e9:	eb 33                	jmp    ffffffff8021281e <_RME_Kot_Erase+0x199>
        {
            if(RME_KOT_VA_BASE[Count]!=RME_MASK_FULL)
ffffffff802127eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802127ef:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802127f6:	00 
ffffffff802127f7:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802127fe:	80 ff ff 
ffffffff80212801:	48 01 d0             	add    %rdx,%rax
ffffffff80212804:	48 8b 00             	mov    (%rax),%rax
ffffffff80212807:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff8021280b:	74 0c                	je     ffffffff80212819 <_RME_Kot_Erase+0x194>
            {
                RME_COV_MARKER();

                return RME_ERR_KOT_BMP;
ffffffff8021280d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212814:	e9 e7 00 00 00       	jmp    ffffffff80212900 <_RME_Kot_Erase+0x27b>
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80212819:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021281e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212822:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80212826:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff8021282a:	72 bf                	jb     ffffffff802127eb <_RME_Kot_Erase+0x166>
                /* No action required */
            }
        }

        /* Check the end */
        if((RME_KOT_VA_BASE[End]&Mask_End)!=Mask_End)
ffffffff8021282c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212830:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212837:	00 
ffffffff80212838:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021283f:	80 ff ff 
ffffffff80212842:	48 01 d0             	add    %rdx,%rax
ffffffff80212845:	48 8b 00             	mov    (%rax),%rax
ffffffff80212848:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff8021284c:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80212850:	74 0c                	je     ffffffff8021285e <_RME_Kot_Erase+0x1d9>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff80212852:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212859:	e9 a2 00 00 00       	jmp    ffffffff80212900 <_RME_Kot_Erase+0x27b>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Erase the start - make it atomic */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff8021285e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212862:	48 f7 d0             	not    %rax
ffffffff80212865:	48 89 c1             	mov    %rax,%rcx
ffffffff80212868:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021286c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212873:	00 
ffffffff80212874:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021287b:	80 ff ff 
ffffffff8021287e:	48 01 d0             	add    %rdx,%rax
ffffffff80212881:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212884:	48 89 c7             	mov    %rax,%rdi
ffffffff80212887:	e8 32 9f ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
        /* Erase the middle - do not need atomics here */
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff8021288c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212890:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212894:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212898:	eb 25                	jmp    ffffffff802128bf <_RME_Kot_Erase+0x23a>
        {
            RME_KOT_VA_BASE[Count]=0U;
ffffffff8021289a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021289e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802128a5:	00 
ffffffff802128a6:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802128ad:	80 ff ff 
ffffffff802128b0:	48 01 d0             	add    %rdx,%rax
ffffffff802128b3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802128ba:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802128bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802128c3:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802128c7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff802128cb:	72 cd                	jb     ffffffff8021289a <_RME_Kot_Erase+0x215>
        }
        /* Erase the end - make it atomic */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[End]),~Mask_End);
ffffffff802128cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802128d1:	48 f7 d0             	not    %rax
ffffffff802128d4:	48 89 c1             	mov    %rax,%rcx
ffffffff802128d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802128db:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802128e2:	00 
ffffffff802128e3:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802128ea:	80 ff ff 
ffffffff802128ed:	48 01 d0             	add    %rdx,%rax
ffffffff802128f0:	48 89 ce             	mov    %rcx,%rsi
ffffffff802128f3:	48 89 c7             	mov    %rax,%rdi
ffffffff802128f6:	e8 c3 9e ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
    }

    return 0;
ffffffff802128fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212900:	c9                   	leave
ffffffff80212901:	c3                   	ret

ffffffff80212902 <_RME_Kom_Boot_Crt>:
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Kom,
                            rme_ptr_t Begin,
                            rme_ptr_t End,
                            rme_ptr_t Flag)
{
ffffffff80212902:	f3 0f 1e fa          	endbr64
ffffffff80212906:	55                   	push   %rbp
ffffffff80212907:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021290a:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8021290e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80212912:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80212916:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021291a:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff8021291e:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80212922:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Kom_Begin;
    rme_ptr_t Kom_End;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212926:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021292a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021292f:	48 85 c0             	test   %rax,%rax
ffffffff80212932:	0f 85 98 00 00 00    	jne    ffffffff802129d0 <_RME_Kom_Boot_Crt+0xce>
ffffffff80212938:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021293c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212940:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80212944:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212947:	0f 93 c0             	setae  %al
ffffffff8021294a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021294d:	48 85 c0             	test   %rax,%rax
ffffffff80212950:	74 0c                	je     ffffffff8021295e <_RME_Kom_Boot_Crt+0x5c>
ffffffff80212952:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212959:	e9 d4 02 00 00       	jmp    ffffffff80212c32 <_RME_Kom_Boot_Crt+0x330>
ffffffff8021295e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212962:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212966:	48 89 c2             	mov    %rax,%rdx
ffffffff80212969:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021296d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212971:	48 01 d0             	add    %rdx,%rax
ffffffff80212974:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212978:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021297c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021297f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212983:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212987:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021298b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021298e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212992:	0f 94 c0             	sete   %al
ffffffff80212995:	0f b6 c0             	movzbl %al,%eax
ffffffff80212998:	48 85 c0             	test   %rax,%rax
ffffffff8021299b:	74 0c                	je     ffffffff802129a9 <_RME_Kom_Boot_Crt+0xa7>
ffffffff8021299d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802129a4:	e9 89 02 00 00       	jmp    ffffffff80212c32 <_RME_Kom_Boot_Crt+0x330>
ffffffff802129a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802129ad:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802129b1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802129b5:	0f 95 c0             	setne  %al
ffffffff802129b8:	0f b6 c0             	movzbl %al,%eax
ffffffff802129bb:	48 85 c0             	test   %rax,%rax
ffffffff802129be:	0f 84 4c 01 00 00    	je     ffffffff80212b10 <_RME_Kom_Boot_Crt+0x20e>
ffffffff802129c4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802129cb:	e9 62 02 00 00       	jmp    ffffffff80212c32 <_RME_Kom_Boot_Crt+0x330>
ffffffff802129d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802129d4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802129d8:	48 89 c2             	mov    %rax,%rdx
ffffffff802129db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802129df:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802129e3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802129e6:	0f 93 c0             	setae  %al
ffffffff802129e9:	0f b6 c0             	movzbl %al,%eax
ffffffff802129ec:	48 85 c0             	test   %rax,%rax
ffffffff802129ef:	74 0c                	je     ffffffff802129fd <_RME_Kom_Boot_Crt+0xfb>
ffffffff802129f1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802129f8:	e9 35 02 00 00       	jmp    ffffffff80212c32 <_RME_Kom_Boot_Crt+0x330>
ffffffff802129fd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212a01:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80212a05:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212a09:	48 89 c2             	mov    %rax,%rdx
ffffffff80212a0c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212a10:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212a14:	48 01 d0             	add    %rdx,%rax
ffffffff80212a17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212a1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212a1f:	48 8b 00             	mov    (%rax),%rax
ffffffff80212a22:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212a26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212a2a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212a2e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212a31:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212a35:	0f 94 c0             	sete   %al
ffffffff80212a38:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a3b:	48 85 c0             	test   %rax,%rax
ffffffff80212a3e:	74 0c                	je     ffffffff80212a4c <_RME_Kom_Boot_Crt+0x14a>
ffffffff80212a40:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212a47:	e9 e6 01 00 00       	jmp    ffffffff80212c32 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212a4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212a50:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212a54:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212a58:	0f 95 c0             	setne  %al
ffffffff80212a5b:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a5e:	48 85 c0             	test   %rax,%rax
ffffffff80212a61:	74 0c                	je     ffffffff80212a6f <_RME_Kom_Boot_Crt+0x16d>
ffffffff80212a63:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212a6a:	e9 c3 01 00 00       	jmp    ffffffff80212c32 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212a6f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212a73:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212a78:	48 89 c2             	mov    %rax,%rdx
ffffffff80212a7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212a7f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212a83:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212a86:	0f 93 c0             	setae  %al
ffffffff80212a89:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a8c:	48 85 c0             	test   %rax,%rax
ffffffff80212a8f:	74 0c                	je     ffffffff80212a9d <_RME_Kom_Boot_Crt+0x19b>
ffffffff80212a91:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212a98:	e9 95 01 00 00       	jmp    ffffffff80212c32 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212a9d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212aa1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212aa6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212aaa:	48 89 c2             	mov    %rax,%rdx
ffffffff80212aad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212ab1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212ab5:	48 01 d0             	add    %rdx,%rax
ffffffff80212ab8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212abc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212ac0:	48 8b 00             	mov    (%rax),%rax
ffffffff80212ac3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212ac7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212acb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212acf:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212ad2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212ad6:	0f 94 c0             	sete   %al
ffffffff80212ad9:	0f b6 c0             	movzbl %al,%eax
ffffffff80212adc:	48 85 c0             	test   %rax,%rax
ffffffff80212adf:	74 0c                	je     ffffffff80212aed <_RME_Kom_Boot_Crt+0x1eb>
ffffffff80212ae1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212ae8:	e9 45 01 00 00       	jmp    ffffffff80212c32 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212aed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212af1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212af5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212af9:	0f 95 c0             	setne  %al
ffffffff80212afc:	0f b6 c0             	movzbl %al,%eax
ffffffff80212aff:	48 85 c0             	test   %rax,%rax
ffffffff80212b02:	74 0c                	je     ffffffff80212b10 <_RME_Kom_Boot_Crt+0x20e>
ffffffff80212b04:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212b0b:	e9 22 01 00 00       	jmp    ffffffff80212c32 <_RME_Kom_Boot_Crt+0x330>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80212b10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b14:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212b18:	83 e0 01             	and    $0x1,%eax
ffffffff80212b1b:	48 85 c0             	test   %rax,%rax
ffffffff80212b1e:	0f 94 c0             	sete   %al
ffffffff80212b21:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b24:	48 85 c0             	test   %rax,%rax
ffffffff80212b27:	74 0c                	je     ffffffff80212b35 <_RME_Kom_Boot_Crt+0x233>
ffffffff80212b29:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80212b30:	e9 fd 00 00 00       	jmp    ffffffff80212c32 <_RME_Kom_Boot_Crt+0x330>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kom,struct RME_Cap_Kom*,Kom_Crt);
ffffffff80212b35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b39:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212b3d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80212b41:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212b44:	0f 93 c0             	setae  %al
ffffffff80212b47:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b4a:	48 85 c0             	test   %rax,%rax
ffffffff80212b4d:	74 0c                	je     ffffffff80212b5b <_RME_Kom_Boot_Crt+0x259>
ffffffff80212b4f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212b56:	e9 d7 00 00 00       	jmp    ffffffff80212c32 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212b5b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80212b5f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212b63:	48 89 c2             	mov    %rax,%rdx
ffffffff80212b66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b6a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212b6e:	48 01 d0             	add    %rdx,%rax
ffffffff80212b71:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff80212b75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212b79:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80212b80:	00 00 00 
ffffffff80212b83:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80212b88:	48 89 c7             	mov    %rax,%rdi
ffffffff80212b8b:	e8 ce 9b ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212b90:	48 85 c0             	test   %rax,%rax
ffffffff80212b93:	0f 94 c0             	sete   %al
ffffffff80212b96:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b99:	48 85 c0             	test   %rax,%rax
ffffffff80212b9c:	74 0c                	je     ffffffff80212baa <_RME_Kom_Boot_Crt+0x2a8>
ffffffff80212b9e:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80212ba5:	e9 88 00 00 00       	jmp    ffffffff80212c32 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212baa:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80212baf:	e8 5d 9c ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80212bb4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80212bb8:	48 89 42 20          	mov    %rax,0x20(%rdx)
    /* Align addresses */
#if(RME_KOM_SLOT_ORDER>6U)
    Kom_End=RME_ROUND_DOWN(End+1U,RME_KOM_SLOT_ORDER);
    Kom_Begin=RME_ROUND_UP(Start,RME_KOM_SLOT_ORDER);
#else
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff80212bbc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80212bc0:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212bc4:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff80212bc8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff80212bcc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80212bd0:	48 83 c0 3f          	add    $0x3f,%rax
ffffffff80212bd4:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff80212bd8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    /* Must at least allow creation of something */
    RME_ASSERT(Flag!=0U);

    /* Header init */
    Kom_Crt->Head.Root_Ref=1U;
ffffffff80212bdc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212be0:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff80212be7:	00 
    Kom_Crt->Head.Object=0U;
ffffffff80212be8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212bec:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80212bf3:	00 
    Kom_Crt->Head.Flag=Flag;
ffffffff80212bf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212bf8:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80212bfc:	48 89 50 10          	mov    %rdx,0x10(%rax)
    
    /* Info init */
    Kom_Crt->Begin=Kom_Begin;
ffffffff80212c00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c04:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80212c08:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Kom_Crt->End=Kom_End-1U;
ffffffff80212c0c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212c10:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80212c14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c18:	48 89 50 30          	mov    %rdx,0x30(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff80212c1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c20:	48 b9 00 00 00 00 00 	movabs $0x2000000000000,%rcx
ffffffff80212c27:	00 02 00 
ffffffff80212c2a:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_KOM,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80212c2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212c32:	c9                   	leave
ffffffff80212c33:	c3                   	ret

ffffffff80212c34 <_RME_CPU_Local_Init>:
Output      : None.
Return      : None.
******************************************************************************/
void _RME_CPU_Local_Init(struct RME_CPU_Local* Local,
                         rme_ptr_t CPUID)
{
ffffffff80212c34:	f3 0f 1e fa          	endbr64
ffffffff80212c38:	55                   	push   %rbp
ffffffff80212c39:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212c3c:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212c40:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80212c44:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Prio_Cnt;
    
    Local->CPUID=CPUID;
ffffffff80212c48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c4c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80212c50:	48 89 10             	mov    %rdx,(%rax)
    Local->Thd_Cur=RME_NULL;
ffffffff80212c53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c57:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80212c5e:	00 
    Local->Sig_Vct=RME_NULL;
ffffffff80212c5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c63:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80212c6a:	00 
    Local->Sig_Tim=RME_NULL;
ffffffff80212c6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c6f:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80212c76:	00 
    
    /* Initialize the run-queue and bitmap */
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80212c77:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80212c7e:	00 
ffffffff80212c7f:	eb 42                	jmp    ffffffff80212cc3 <_RME_CPU_Local_Init+0x8f>
    {
        Local->Run.Bitmap[Prio_Cnt>>RME_WORD_ORDER]=0U;
ffffffff80212c81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212c85:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212c89:	48 89 c2             	mov    %rax,%rdx
ffffffff80212c8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c90:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212c94:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
ffffffff80212c9b:	00 
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
ffffffff80212c9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212ca0:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212ca4:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212ca8:	48 89 c2             	mov    %rax,%rdx
ffffffff80212cab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212caf:	48 01 d0             	add    %rdx,%rax
ffffffff80212cb2:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212cb6:	48 89 c7             	mov    %rax,%rdi
ffffffff80212cb9:	e8 be a0 ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80212cbe:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212cc3:	48 83 7d f8 3f       	cmpq   $0x3f,-0x8(%rbp)
ffffffff80212cc8:	76 b7                	jbe    ffffffff80212c81 <_RME_CPU_Local_Init+0x4d>
    }
}
ffffffff80212cca:	90                   	nop
ffffffff80212ccb:	90                   	nop
ffffffff80212ccc:	c9                   	leave
ffffffff80212ccd:	c3                   	ret

ffffffff80212cce <_RME_Thd_Fatal>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Thd_Fatal(struct RME_Reg_Struct* Reg)
{
ffffffff80212cce:	f3 0f 1e fa          	endbr64
ffffffff80212cd2:	55                   	push   %rbp
ffffffff80212cd3:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212cd6:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212cda:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    
    /* Attempt to return from the invocation, from fault */
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80212cde:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ce2:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212ce7:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80212cec:	48 89 c7             	mov    %rax,%rdi
ffffffff80212cef:	e8 af 7c 00 00       	call   ffffffff8021a9a3 <_RME_Inv_Ret>
ffffffff80212cf4:	48 85 c0             	test   %rax,%rax
ffffffff80212cf7:	74 6f                	je     ffffffff80212d68 <_RME_Thd_Fatal+0x9a>
    {
        RME_COV_MARKER();

        /* Return failure - report the exception */
        Local=RME_CPU_LOCAL();
ffffffff80212cf9:	e8 41 8b ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80212cfe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        Thd_Cur=Local->Thd_Cur;
ffffffff80212d02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212d06:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212d0a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        
        /* Init thread shall never have exceptions */
        if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80212d0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212d12:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80212d16:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80212d1d:	ff ff 7f 
ffffffff80212d20:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212d23:	75 0c                	jne    ffffffff80212d31 <_RME_Thd_Fatal+0x63>
        {
            RME_COV_MARKER();
            
            RME_DBG_S("Attempted to kill init thread.");
ffffffff80212d25:	48 c7 c7 a8 88 22 80 	mov    $0xffffffff802288a8,%rdi
ffffffff80212d2c:	e8 fc 9c ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
        
        /* We must be running at this point to trigger a synchronous exception */
        RME_ASSERT(Thd_Cur->Sched.State==RME_THD_READY);
        
        /* Remove from runqueue */
        _RME_Run_Del(Thd_Cur);
ffffffff80212d31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212d35:	48 89 c7             	mov    %rax,%rdi
ffffffff80212d38:	e8 de 00 00 00       	call   ffffffff80212e1b <_RME_Run_Del>
        
        /* Exception pending and notify parent */
        Thd_Cur->Sched.State=RME_THD_EXCPEND;
ffffffff80212d3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212d41:	48 c7 40 38 03 00 00 	movq   $0x3,0x38(%rax)
ffffffff80212d48:	00 
        _RME_Run_Notif(Thd_Cur);
ffffffff80212d49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212d4d:	48 89 c7             	mov    %rax,%rdi
ffffffff80212d50:	e8 11 02 00 00       	call   ffffffff80212f66 <_RME_Run_Notif>
        
        /* All kernel send complete, now pick the highest priority thread to run */
        _RME_Kern_High(Reg,Local);
ffffffff80212d55:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212d59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d5d:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212d60:	48 89 c7             	mov    %rax,%rdi
ffffffff80212d63:	e8 b3 60 00 00       	call   ffffffff80218e1b <_RME_Kern_High>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212d68:	90                   	nop
ffffffff80212d69:	c9                   	leave
ffffffff80212d6a:	c3                   	ret

ffffffff80212d6b <_RME_Run_Ins>:
              rme_ptr_t CPUID - The cpu to consult.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Ins(struct RME_Thd_Struct* Thd)
{
ffffffff80212d6b:	f3 0f 1e fa          	endbr64
ffffffff80212d6f:	55                   	push   %rbp
ffffffff80212d70:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212d73:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212d77:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff80212d7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d7f:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80212d83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Local=Thd->Sched.Local;
ffffffff80212d87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d8b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212d8f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Insert this thread into the runqueue */
    _RME_List_Ins(&(Thd->Sched.Run),
                  Local->Run.List[Prio].Prev,
                  &(Local->Run.List[Prio]));
ffffffff80212d93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212d97:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212d9b:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212d9f:	48 89 c2             	mov    %rax,%rdx
ffffffff80212da2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212da6:	48 01 d0             	add    %rdx,%rax
ffffffff80212da9:	48 8d 50 08          	lea    0x8(%rax),%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80212dad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212db1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80212db5:	48 83 c1 02          	add    $0x2,%rcx
ffffffff80212db9:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff80212dbd:	48 01 c8             	add    %rcx,%rax
ffffffff80212dc0:	48 83 c0 10          	add    $0x10,%rax
ffffffff80212dc4:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212dc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212dcb:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212dce:	48 89 c7             	mov    %rax,%rdi
ffffffff80212dd1:	e8 fe 9f ff ff       	call   ffffffff8020cdd4 <_RME_List_Ins>
    
    /* Set the bit in the bitmap */
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80212dd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212dda:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212dde:	48 89 c2             	mov    %rax,%rdx
ffffffff80212de1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212de5:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212de9:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212ded:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212df1:	83 e2 3f             	and    $0x3f,%edx
ffffffff80212df4:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80212df9:	89 d1                	mov    %edx,%ecx
ffffffff80212dfb:	48 d3 e6             	shl    %cl,%rsi
ffffffff80212dfe:	48 89 f1             	mov    %rsi,%rcx
ffffffff80212e01:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212e05:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff80212e09:	48 09 c1             	or     %rax,%rcx
ffffffff80212e0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e10:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212e14:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
}
ffffffff80212e18:	90                   	nop
ffffffff80212e19:	c9                   	leave
ffffffff80212e1a:	c3                   	ret

ffffffff80212e1b <_RME_Run_Del>:
Input       : struct RME_Thd_Struct* Thd - The thread to delete.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
ffffffff80212e1b:	f3 0f 1e fa          	endbr64
ffffffff80212e1f:	55                   	push   %rbp
ffffffff80212e20:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212e23:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212e27:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff80212e2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e2f:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80212e33:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Local=Thd->Sched.Local;
ffffffff80212e37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e3b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212e3f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* It can't be free or there must be an error */
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Delete this thread from the runqueue */
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80212e43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e47:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212e4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e4e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212e52:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212e55:	48 89 c7             	mov    %rax,%rdi
ffffffff80212e58:	e8 49 9f ff ff       	call   ffffffff8020cda6 <_RME_List_Del>
    
    /* See if there are any thread on this priority level */
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff80212e5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e61:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212e65:	48 83 c2 02          	add    $0x2,%rdx
ffffffff80212e69:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80212e6d:	48 01 d0             	add    %rdx,%rax
ffffffff80212e70:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212e74:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212e77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e7b:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212e7f:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212e83:	48 89 c1             	mov    %rax,%rcx
ffffffff80212e86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e8a:	48 01 c8             	add    %rcx,%rax
ffffffff80212e8d:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212e91:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212e94:	75 4b                	jne    ffffffff80212ee1 <_RME_Run_Del+0xc6>
    {
        RME_COV_MARKER();

        /* Nothing running, clear the bit in the bitmap */
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff80212e96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e9a:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212e9e:	48 89 c2             	mov    %rax,%rdx
ffffffff80212ea1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212ea5:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212ea9:	48 8b 34 d0          	mov    (%rax,%rdx,8),%rsi
ffffffff80212ead:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212eb1:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212eb4:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212eb9:	89 c1                	mov    %eax,%ecx
ffffffff80212ebb:	48 d3 e2             	shl    %cl,%rdx
ffffffff80212ebe:	48 89 d0             	mov    %rdx,%rax
ffffffff80212ec1:	48 f7 d0             	not    %rax
ffffffff80212ec4:	48 89 c1             	mov    %rax,%rcx
ffffffff80212ec7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212ecb:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212ecf:	48 89 c2             	mov    %rax,%rdx
ffffffff80212ed2:	48 21 f1             	and    %rsi,%rcx
ffffffff80212ed5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212ed9:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212edd:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212ee1:	90                   	nop
ffffffff80212ee2:	c9                   	leave
ffffffff80212ee3:	c3                   	ret

ffffffff80212ee4 <_RME_Run_High>:
Input       : struct RME_CPU_Local* Local - The CPU-local data structure.
Output      : None.
Return      : struct RME_Thd_Struct* - The thread returned.
******************************************************************************/
static struct RME_Thd_Struct* _RME_Run_High(struct RME_CPU_Local* Local)
{
ffffffff80212ee4:	f3 0f 1e fa          	endbr64
ffffffff80212ee8:	55                   	push   %rbp
ffffffff80212ee9:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212eec:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212ef0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_cnt_t Count;
    rme_ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=(rme_cnt_t)(RME_PRIO_WORD_NUM-1U);Count>=0;Count--)
ffffffff80212ef4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80212efb:	00 
ffffffff80212efc:	eb 1a                	jmp    ffffffff80212f18 <_RME_Run_High+0x34>
    {
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80212efe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f02:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212f06:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212f0a:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212f0e:	48 85 c0             	test   %rax,%rax
ffffffff80212f11:	75 0e                	jne    ffffffff80212f21 <_RME_Run_High+0x3d>
    for(Count=(rme_cnt_t)(RME_PRIO_WORD_NUM-1U);Count>=0;Count--)
ffffffff80212f13:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff80212f18:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80212f1d:	79 df                	jns    ffffffff80212efe <_RME_Run_High+0x1a>
ffffffff80212f1f:	eb 01                	jmp    ffffffff80212f22 <_RME_Run_High+0x3e>
        {
            RME_COV_MARKER();
            
            break;
ffffffff80212f21:	90                   	nop
    
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);

    /* Get the first "1"'s position in the word */
    Prio=RME_MSB_GET(Local->Run.Bitmap[Count]);
ffffffff80212f22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212f2a:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212f2e:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212f32:	48 89 c7             	mov    %rax,%rdi
ffffffff80212f35:	e8 b1 98 ff ff       	call   ffffffff8020c7eb <_RME_X64_MSB_Get>
ffffffff80212f3a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80212f3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212f42:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212f46:	48 01 45 f0          	add    %rax,-0x10(%rbp)

    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80212f4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f4e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80212f52:	48 83 c2 02          	add    $0x2,%rdx
ffffffff80212f56:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80212f5a:	48 01 d0             	add    %rdx,%rax
ffffffff80212f5d:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212f61:	48 8b 00             	mov    (%rax),%rax
}
ffffffff80212f64:	c9                   	leave
ffffffff80212f65:	c3                   	ret

ffffffff80212f66 <_RME_Run_Notif>:
Input       : struct RME_Thd_Struct* Thd - The thread to send notification for.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
ffffffff80212f66:	f3 0f 1e fa          	endbr64
ffffffff80212f6a:	55                   	push   %rbp
ffffffff80212f6b:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212f6e:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212f72:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Thd_Struct* Sched_Thd;
    
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80212f76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f7a:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80212f7e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80212f82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f86:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80212f8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f8e:	48 83 c0 10          	add    $0x10,%rax
ffffffff80212f92:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212f95:	75 26                	jne    ffffffff80212fbd <_RME_Run_Notif+0x57>
    {
        RME_COV_MARKER();

        _RME_List_Ins(&(Thd->Sched.Notif), 
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff80212f97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212f9b:	48 8d 50 78          	lea    0x78(%rax),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80212f9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212fa3:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80212faa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80212fae:	48 83 c1 10          	add    $0x10,%rcx
ffffffff80212fb2:	48 89 c6             	mov    %rax,%rsi
ffffffff80212fb5:	48 89 cf             	mov    %rcx,%rdi
ffffffff80212fb8:	e8 17 9e ff ff       	call   ffffffff8020cdd4 <_RME_List_Ins>
        RME_COV_MARKER();
        /* No action required */
    }

    /* If this guy have an endpoint, send to it */
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80212fbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212fc1:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80212fc5:	48 85 c0             	test   %rax,%rax
ffffffff80212fc8:	74 10                	je     ffffffff80212fda <_RME_Run_Notif+0x74>
    {
        RME_COV_MARKER();
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80212fca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212fce:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80212fd2:	48 89 c7             	mov    %rax,%rdi
ffffffff80212fd5:	e8 c8 5e 00 00       	call   ffffffff80218ea2 <_RME_Kern_Snd>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212fda:	90                   	nop
ffffffff80212fdb:	c9                   	leave
ffffffff80212fdc:	c3                   	ret

ffffffff80212fdd <_RME_Thd_Pgt>:
#if(RME_PGT_RAW_ENABLE==0U)
struct RME_Cap_Pgt* _RME_Thd_Pgt(struct RME_Thd_Struct* Thd)
#else
rme_ptr_t _RME_Thd_Pgt(struct RME_Thd_Struct* Thd)
#endif
{
ffffffff80212fdd:	f3 0f 1e fa          	endbr64
ffffffff80212fe1:	55                   	push   %rbp
ffffffff80212fe2:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212fe5:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212fe9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Inv_Struct* Inv_Top;
    
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80212fed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ff1:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff80212ff8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ffc:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff80213002:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213005:	74 0d                	je     ffffffff80213014 <_RME_Thd_Pgt+0x37>
ffffffff80213007:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021300b:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff80213012:	eb 05                	jmp    ffffffff80213019 <_RME_Thd_Pgt+0x3c>
ffffffff80213014:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80213019:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    if(Inv_Top==(void*)RME_NULL)
ffffffff8021301d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80213022:	75 0e                	jne    ffffffff80213032 <_RME_Thd_Pgt+0x55>
    {
        RME_COV_MARKER();

        return Thd->Sched.Prc->Pgt;
ffffffff80213024:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213028:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021302c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80213030:	eb 0c                	jmp    ffffffff8021303e <_RME_Thd_Pgt+0x61>
    }
    else
    {
        RME_COV_MARKER();

        return Inv_Top->Prc->Pgt;
ffffffff80213032:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213036:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021303a:	48 8b 40 30          	mov    0x30(%rax),%rax
    }
}
ffffffff8021303e:	c9                   	leave
ffffffff8021303f:	c3                   	ret

ffffffff80213040 <_RME_Run_Swt>:
Return      : rme_ret_t - Always 0.
******************************************************************************/
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
                              struct RME_Thd_Struct* Thd_Cur, 
                              struct RME_Thd_Struct* Thd_New)
{
ffffffff80213040:	f3 0f 1e fa          	endbr64
ffffffff80213044:	55                   	push   %rbp
ffffffff80213045:	48 89 e5             	mov    %rsp,%rbp
ffffffff80213048:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021304c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80213050:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80213054:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Pgt_New;
#endif
    struct RME_Reg_Struct* Reg_Cur;
    struct RME_Reg_Struct* Reg_New;
    
    Reg_Cur=&(Thd_Cur->Ctx.Reg->Reg);
ffffffff80213058:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021305c:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80213063:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff80213067:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021306b:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80213072:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Save register context */
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff80213076:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021307a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021307e:	48 89 d6             	mov    %rdx,%rsi
ffffffff80213081:	48 89 c7             	mov    %rax,%rdi
ffffffff80213084:	e8 3c 2d 01 00       	call   ffffffff80225dc5 <__RME_Thd_Reg_Copy>
                       RME_THD_IS_HYP(Thd_Cur->Ctx.Hyp_Attr),
                       Reg_Cur,Thd_Cur->Ctx.Reg->Cop);
#endif

    /* Load register context */
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80213089:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8021308d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213091:	48 89 d6             	mov    %rdx,%rsi
ffffffff80213094:	48 89 c7             	mov    %rax,%rdi
ffffffff80213097:	e8 29 2d 01 00       	call   ffffffff80225dc5 <__RME_Thd_Reg_Copy>

    /* Are we going to switch page tables? If yes, we change it now */
    Pgt_Cur=_RME_Thd_Pgt(Thd_Cur);
ffffffff8021309c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802130a0:	48 89 c7             	mov    %rax,%rdi
ffffffff802130a3:	e8 35 ff ff ff       	call   ffffffff80212fdd <_RME_Thd_Pgt>
ffffffff802130a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Pgt_New=_RME_Thd_Pgt(Thd_New);
ffffffff802130ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802130b0:	48 89 c7             	mov    %rax,%rdi
ffffffff802130b3:	e8 25 ff ff ff       	call   ffffffff80212fdd <_RME_Thd_Pgt>
ffffffff802130b8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_Cur)!=0U);
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_New)!=0U);
#endif
    
#if(RME_PGT_RAW_ENABLE==0U)
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff802130bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802130c0:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff802130c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802130c8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802130cc:	48 39 c2             	cmp    %rax,%rdx
ffffffff802130cf:	74 0c                	je     ffffffff802130dd <_RME_Run_Swt+0x9d>
    if(Pgt_Cur!=Pgt_New)
#endif
    {
        RME_COV_MARKER();
        
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff802130d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802130d5:	48 89 c7             	mov    %rax,%rdi
ffffffff802130d8:	e8 90 36 01 00       	call   ffffffff8022676d <__RME_Pgt_Set>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff802130dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802130e2:	c9                   	leave
ffffffff802130e3:	c3                   	ret

ffffffff802130e4 <_RME_Prc_Boot_Crt>:
                            rme_cid_t Cap_Cpt_Crt,
                            rme_cid_t Cap_Prc,
                            rme_cid_t Cap_Cpt,
                            rme_ptr_t Raw_Pgt)
#endif
{
ffffffff802130e4:	f3 0f 1e fa          	endbr64
ffffffff802130e8:	55                   	push   %rbp
ffffffff802130e9:	48 89 e5             	mov    %rsp,%rbp
ffffffff802130ec:	48 83 ec 68          	sub    $0x68,%rsp
ffffffff802130f0:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802130f4:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff802130f8:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff802130fc:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff80213100:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80213104:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213108:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021310d:	48 85 c0             	test   %rax,%rax
ffffffff80213110:	0f 85 98 00 00 00    	jne    ffffffff802131ae <_RME_Prc_Boot_Crt+0xca>
ffffffff80213116:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021311a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021311e:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80213122:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213125:	0f 93 c0             	setae  %al
ffffffff80213128:	0f b6 c0             	movzbl %al,%eax
ffffffff8021312b:	48 85 c0             	test   %rax,%rax
ffffffff8021312e:	74 0c                	je     ffffffff8021313c <_RME_Prc_Boot_Crt+0x58>
ffffffff80213130:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213137:	e9 38 07 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021313c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213140:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213144:	48 89 c2             	mov    %rax,%rdx
ffffffff80213147:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021314b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021314f:	48 01 d0             	add    %rdx,%rax
ffffffff80213152:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80213156:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021315a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021315d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213161:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213165:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213169:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021316c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213170:	0f 94 c0             	sete   %al
ffffffff80213173:	0f b6 c0             	movzbl %al,%eax
ffffffff80213176:	48 85 c0             	test   %rax,%rax
ffffffff80213179:	74 0c                	je     ffffffff80213187 <_RME_Prc_Boot_Crt+0xa3>
ffffffff8021317b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213182:	e9 ed 06 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213187:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021318b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021318f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213193:	0f 95 c0             	setne  %al
ffffffff80213196:	0f b6 c0             	movzbl %al,%eax
ffffffff80213199:	48 85 c0             	test   %rax,%rax
ffffffff8021319c:	0f 84 4c 01 00 00    	je     ffffffff802132ee <_RME_Prc_Boot_Crt+0x20a>
ffffffff802131a2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802131a9:	e9 c6 06 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff802131ae:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802131b2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802131b6:	48 89 c2             	mov    %rax,%rdx
ffffffff802131b9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802131bd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802131c1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802131c4:	0f 93 c0             	setae  %al
ffffffff802131c7:	0f b6 c0             	movzbl %al,%eax
ffffffff802131ca:	48 85 c0             	test   %rax,%rax
ffffffff802131cd:	74 0c                	je     ffffffff802131db <_RME_Prc_Boot_Crt+0xf7>
ffffffff802131cf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802131d6:	e9 99 06 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff802131db:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802131df:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802131e3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802131e7:	48 89 c2             	mov    %rax,%rdx
ffffffff802131ea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802131ee:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802131f2:	48 01 d0             	add    %rdx,%rax
ffffffff802131f5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802131f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802131fd:	48 8b 00             	mov    (%rax),%rax
ffffffff80213200:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213204:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213208:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021320c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021320f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213213:	0f 94 c0             	sete   %al
ffffffff80213216:	0f b6 c0             	movzbl %al,%eax
ffffffff80213219:	48 85 c0             	test   %rax,%rax
ffffffff8021321c:	74 0c                	je     ffffffff8021322a <_RME_Prc_Boot_Crt+0x146>
ffffffff8021321e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213225:	e9 4a 06 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021322a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021322e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213232:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213236:	0f 95 c0             	setne  %al
ffffffff80213239:	0f b6 c0             	movzbl %al,%eax
ffffffff8021323c:	48 85 c0             	test   %rax,%rax
ffffffff8021323f:	74 0c                	je     ffffffff8021324d <_RME_Prc_Boot_Crt+0x169>
ffffffff80213241:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213248:	e9 27 06 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021324d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213251:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213256:	48 89 c2             	mov    %rax,%rdx
ffffffff80213259:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021325d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213261:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213264:	0f 93 c0             	setae  %al
ffffffff80213267:	0f b6 c0             	movzbl %al,%eax
ffffffff8021326a:	48 85 c0             	test   %rax,%rax
ffffffff8021326d:	74 0c                	je     ffffffff8021327b <_RME_Prc_Boot_Crt+0x197>
ffffffff8021326f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213276:	e9 f9 05 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021327b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021327f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213284:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213288:	48 89 c2             	mov    %rax,%rdx
ffffffff8021328b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021328f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213293:	48 01 d0             	add    %rdx,%rax
ffffffff80213296:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021329a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021329e:	48 8b 00             	mov    (%rax),%rax
ffffffff802132a1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802132a5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802132a9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802132ad:	0f b7 c0             	movzwl %ax,%eax
ffffffff802132b0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802132b4:	0f 94 c0             	sete   %al
ffffffff802132b7:	0f b6 c0             	movzbl %al,%eax
ffffffff802132ba:	48 85 c0             	test   %rax,%rax
ffffffff802132bd:	74 0c                	je     ffffffff802132cb <_RME_Prc_Boot_Crt+0x1e7>
ffffffff802132bf:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802132c6:	e9 a9 05 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff802132cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802132cf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802132d3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802132d7:	0f 95 c0             	setne  %al
ffffffff802132da:	0f b6 c0             	movzbl %al,%eax
ffffffff802132dd:	48 85 c0             	test   %rax,%rax
ffffffff802132e0:	74 0c                	je     ffffffff802132ee <_RME_Prc_Boot_Crt+0x20a>
ffffffff802132e2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802132e9:	e9 86 05 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802132ee:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802132f2:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802132f7:	48 85 c0             	test   %rax,%rax
ffffffff802132fa:	0f 85 98 00 00 00    	jne    ffffffff80213398 <_RME_Prc_Boot_Crt+0x2b4>
ffffffff80213300:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213304:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213308:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8021330c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021330f:	0f 93 c0             	setae  %al
ffffffff80213312:	0f b6 c0             	movzbl %al,%eax
ffffffff80213315:	48 85 c0             	test   %rax,%rax
ffffffff80213318:	74 0c                	je     ffffffff80213326 <_RME_Prc_Boot_Crt+0x242>
ffffffff8021331a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213321:	e9 4e 05 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213326:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021332a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021332e:	48 89 c2             	mov    %rax,%rdx
ffffffff80213331:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213335:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213339:	48 01 d0             	add    %rdx,%rax
ffffffff8021333c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213340:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213344:	48 8b 00             	mov    (%rax),%rax
ffffffff80213347:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021334b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021334f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213353:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213356:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021335a:	0f 94 c0             	sete   %al
ffffffff8021335d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213360:	48 85 c0             	test   %rax,%rax
ffffffff80213363:	74 0c                	je     ffffffff80213371 <_RME_Prc_Boot_Crt+0x28d>
ffffffff80213365:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021336c:	e9 03 05 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213371:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213375:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213379:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021337d:	0f 95 c0             	setne  %al
ffffffff80213380:	0f b6 c0             	movzbl %al,%eax
ffffffff80213383:	48 85 c0             	test   %rax,%rax
ffffffff80213386:	0f 84 4c 01 00 00    	je     ffffffff802134d8 <_RME_Prc_Boot_Crt+0x3f4>
ffffffff8021338c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213393:	e9 dc 04 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213398:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021339c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802133a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802133a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802133a7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802133ab:	48 39 c2             	cmp    %rax,%rdx
ffffffff802133ae:	0f 93 c0             	setae  %al
ffffffff802133b1:	0f b6 c0             	movzbl %al,%eax
ffffffff802133b4:	48 85 c0             	test   %rax,%rax
ffffffff802133b7:	74 0c                	je     ffffffff802133c5 <_RME_Prc_Boot_Crt+0x2e1>
ffffffff802133b9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802133c0:	e9 af 04 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff802133c5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802133c9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802133cd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802133d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802133d4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802133d8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802133dc:	48 01 d0             	add    %rdx,%rax
ffffffff802133df:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802133e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802133e7:	48 8b 00             	mov    (%rax),%rax
ffffffff802133ea:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802133ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802133f2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802133f6:	0f b7 c0             	movzwl %ax,%eax
ffffffff802133f9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802133fd:	0f 94 c0             	sete   %al
ffffffff80213400:	0f b6 c0             	movzbl %al,%eax
ffffffff80213403:	48 85 c0             	test   %rax,%rax
ffffffff80213406:	74 0c                	je     ffffffff80213414 <_RME_Prc_Boot_Crt+0x330>
ffffffff80213408:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021340f:	e9 60 04 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213414:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213418:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021341c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213420:	0f 95 c0             	setne  %al
ffffffff80213423:	0f b6 c0             	movzbl %al,%eax
ffffffff80213426:	48 85 c0             	test   %rax,%rax
ffffffff80213429:	74 0c                	je     ffffffff80213437 <_RME_Prc_Boot_Crt+0x353>
ffffffff8021342b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213432:	e9 3d 04 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213437:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021343b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213440:	48 89 c2             	mov    %rax,%rdx
ffffffff80213443:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213447:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021344b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021344e:	0f 93 c0             	setae  %al
ffffffff80213451:	0f b6 c0             	movzbl %al,%eax
ffffffff80213454:	48 85 c0             	test   %rax,%rax
ffffffff80213457:	74 0c                	je     ffffffff80213465 <_RME_Prc_Boot_Crt+0x381>
ffffffff80213459:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213460:	e9 0f 04 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213465:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213469:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021346e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213472:	48 89 c2             	mov    %rax,%rdx
ffffffff80213475:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213479:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021347d:	48 01 d0             	add    %rdx,%rax
ffffffff80213480:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213484:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213488:	48 8b 00             	mov    (%rax),%rax
ffffffff8021348b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021348f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213493:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213497:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021349a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021349e:	0f 94 c0             	sete   %al
ffffffff802134a1:	0f b6 c0             	movzbl %al,%eax
ffffffff802134a4:	48 85 c0             	test   %rax,%rax
ffffffff802134a7:	74 0c                	je     ffffffff802134b5 <_RME_Prc_Boot_Crt+0x3d1>
ffffffff802134a9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802134b0:	e9 bf 03 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff802134b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802134b9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802134bd:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802134c1:	0f 95 c0             	setne  %al
ffffffff802134c4:	0f b6 c0             	movzbl %al,%eax
ffffffff802134c7:	48 85 c0             	test   %rax,%rax
ffffffff802134ca:	74 0c                	je     ffffffff802134d8 <_RME_Prc_Boot_Crt+0x3f4>
ffffffff802134cc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802134d3:	e9 9c 03 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff802134d8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802134dc:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802134e1:	48 85 c0             	test   %rax,%rax
ffffffff802134e4:	0f 85 98 00 00 00    	jne    ffffffff80213582 <_RME_Prc_Boot_Crt+0x49e>
ffffffff802134ea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802134ee:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802134f2:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff802134f6:	48 39 c2             	cmp    %rax,%rdx
ffffffff802134f9:	0f 93 c0             	setae  %al
ffffffff802134fc:	0f b6 c0             	movzbl %al,%eax
ffffffff802134ff:	48 85 c0             	test   %rax,%rax
ffffffff80213502:	74 0c                	je     ffffffff80213510 <_RME_Prc_Boot_Crt+0x42c>
ffffffff80213504:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021350b:	e9 64 03 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213510:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213514:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213518:	48 89 c2             	mov    %rax,%rdx
ffffffff8021351b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021351f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213523:	48 01 d0             	add    %rdx,%rax
ffffffff80213526:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021352a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021352e:	48 8b 00             	mov    (%rax),%rax
ffffffff80213531:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213535:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213539:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021353d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213540:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213544:	0f 94 c0             	sete   %al
ffffffff80213547:	0f b6 c0             	movzbl %al,%eax
ffffffff8021354a:	48 85 c0             	test   %rax,%rax
ffffffff8021354d:	74 0c                	je     ffffffff8021355b <_RME_Prc_Boot_Crt+0x477>
ffffffff8021354f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213556:	e9 19 03 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021355b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021355f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213563:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213567:	0f 95 c0             	setne  %al
ffffffff8021356a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021356d:	48 85 c0             	test   %rax,%rax
ffffffff80213570:	0f 84 4c 01 00 00    	je     ffffffff802136c2 <_RME_Prc_Boot_Crt+0x5de>
ffffffff80213576:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021357d:	e9 f2 02 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213582:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213586:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021358a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021358d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213591:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213595:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213598:	0f 93 c0             	setae  %al
ffffffff8021359b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021359e:	48 85 c0             	test   %rax,%rax
ffffffff802135a1:	74 0c                	je     ffffffff802135af <_RME_Prc_Boot_Crt+0x4cb>
ffffffff802135a3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802135aa:	e9 c5 02 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff802135af:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802135b3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802135b7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802135bb:	48 89 c2             	mov    %rax,%rdx
ffffffff802135be:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802135c2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802135c6:	48 01 d0             	add    %rdx,%rax
ffffffff802135c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802135cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802135d1:	48 8b 00             	mov    (%rax),%rax
ffffffff802135d4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802135d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802135dc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802135e0:	0f b7 c0             	movzwl %ax,%eax
ffffffff802135e3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802135e7:	0f 94 c0             	sete   %al
ffffffff802135ea:	0f b6 c0             	movzbl %al,%eax
ffffffff802135ed:	48 85 c0             	test   %rax,%rax
ffffffff802135f0:	74 0c                	je     ffffffff802135fe <_RME_Prc_Boot_Crt+0x51a>
ffffffff802135f2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802135f9:	e9 76 02 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff802135fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213602:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213606:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021360a:	0f 95 c0             	setne  %al
ffffffff8021360d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213610:	48 85 c0             	test   %rax,%rax
ffffffff80213613:	74 0c                	je     ffffffff80213621 <_RME_Prc_Boot_Crt+0x53d>
ffffffff80213615:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021361c:	e9 53 02 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213621:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213625:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021362a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021362d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213631:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213635:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213638:	0f 93 c0             	setae  %al
ffffffff8021363b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021363e:	48 85 c0             	test   %rax,%rax
ffffffff80213641:	74 0c                	je     ffffffff8021364f <_RME_Prc_Boot_Crt+0x56b>
ffffffff80213643:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021364a:	e9 25 02 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021364f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213653:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213658:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021365c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021365f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213663:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213667:	48 01 d0             	add    %rdx,%rax
ffffffff8021366a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021366e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213672:	48 8b 00             	mov    (%rax),%rax
ffffffff80213675:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213679:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021367d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213681:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213684:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213688:	0f 94 c0             	sete   %al
ffffffff8021368b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021368e:	48 85 c0             	test   %rax,%rax
ffffffff80213691:	74 0c                	je     ffffffff8021369f <_RME_Prc_Boot_Crt+0x5bb>
ffffffff80213693:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021369a:	e9 d5 01 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021369f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802136a3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802136a7:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802136ab:	0f 95 c0             	setne  %al
ffffffff802136ae:	0f b6 c0             	movzbl %al,%eax
ffffffff802136b1:	48 85 c0             	test   %rax,%rax
ffffffff802136b4:	74 0c                	je     ffffffff802136c2 <_RME_Prc_Boot_Crt+0x5de>
ffffffff802136b6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802136bd:	e9 b2 01 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);
#endif
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff802136c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802136c6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802136ca:	83 e0 01             	and    $0x1,%eax
ffffffff802136cd:	48 85 c0             	test   %rax,%rax
ffffffff802136d0:	0f 94 c0             	sete   %al
ffffffff802136d3:	0f b6 c0             	movzbl %al,%eax
ffffffff802136d6:	48 85 c0             	test   %rax,%rax
ffffffff802136d9:	74 0c                	je     ffffffff802136e7 <_RME_Prc_Boot_Crt+0x603>
ffffffff802136db:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802136e2:	e9 8d 01 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff802136e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802136eb:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802136ef:	83 e0 40             	and    $0x40,%eax
ffffffff802136f2:	48 85 c0             	test   %rax,%rax
ffffffff802136f5:	0f 94 c0             	sete   %al
ffffffff802136f8:	0f b6 c0             	movzbl %al,%eax
ffffffff802136fb:	48 85 c0             	test   %rax,%rax
ffffffff802136fe:	74 0c                	je     ffffffff8021370c <_RME_Prc_Boot_Crt+0x628>
ffffffff80213700:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213707:	e9 68 01 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff8021370c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213710:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213714:	83 e0 40             	and    $0x40,%eax
ffffffff80213717:	48 85 c0             	test   %rax,%rax
ffffffff8021371a:	0f 94 c0             	sete   %al
ffffffff8021371d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213720:	48 85 c0             	test   %rax,%rax
ffffffff80213723:	74 0c                	je     ffffffff80213731 <_RME_Prc_Boot_Crt+0x64d>
ffffffff80213725:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021372c:	e9 43 01 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
#endif
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff80213731:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213735:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213739:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8021373d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213740:	0f 93 c0             	setae  %al
ffffffff80213743:	0f b6 c0             	movzbl %al,%eax
ffffffff80213746:	48 85 c0             	test   %rax,%rax
ffffffff80213749:	74 0c                	je     ffffffff80213757 <_RME_Prc_Boot_Crt+0x673>
ffffffff8021374b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213752:	e9 1d 01 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213757:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021375b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021375f:	48 89 c2             	mov    %rax,%rdx
ffffffff80213762:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213766:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021376a:	48 01 d0             	add    %rdx,%rax
ffffffff8021376d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff80213771:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213775:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021377c:	00 00 00 
ffffffff8021377f:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80213784:	48 89 c7             	mov    %rax,%rdi
ffffffff80213787:	e8 d2 8f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021378c:	48 85 c0             	test   %rax,%rax
ffffffff8021378f:	0f 94 c0             	sete   %al
ffffffff80213792:	0f b6 c0             	movzbl %al,%eax
ffffffff80213795:	48 85 c0             	test   %rax,%rax
ffffffff80213798:	74 0c                	je     ffffffff802137a6 <_RME_Prc_Boot_Crt+0x6c2>
ffffffff8021379a:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff802137a1:	e9 ce 00 00 00       	jmp    ffffffff80213874 <_RME_Prc_Boot_Crt+0x790>
ffffffff802137a6:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802137ab:	e8 61 90 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff802137b0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802137b4:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Header init */
    Prc_Crt->Head.Root_Ref=1U;
ffffffff802137b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802137bc:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff802137c3:	00 
    Prc_Crt->Head.Object=0U;
ffffffff802137c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802137c8:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff802137cf:	00 
    Prc_Crt->Head.Flag=RME_PRC_FLAG_INV|RME_PRC_FLAG_THD;
ffffffff802137d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802137d4:	48 c7 40 10 03 00 00 	movq   $0x3,0x10(%rax)
ffffffff802137db:	00 

    /* Info init */
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff802137dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802137e0:	48 8b 00             	mov    (%rax),%rax
ffffffff802137e3:	89 c0                	mov    %eax,%eax
ffffffff802137e5:	48 85 c0             	test   %rax,%rax
ffffffff802137e8:	74 0a                	je     ffffffff802137f4 <_RME_Prc_Boot_Crt+0x710>
ffffffff802137ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802137ee:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802137f2:	eb 04                	jmp    ffffffff802137f8 <_RME_Prc_Boot_Crt+0x714>
ffffffff802137f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802137f8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff802137fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213800:	48 8b 00             	mov    (%rax),%rax
ffffffff80213803:	89 c0                	mov    %eax,%eax
ffffffff80213805:	48 85 c0             	test   %rax,%rax
ffffffff80213808:	74 0a                	je     ffffffff80213814 <_RME_Prc_Boot_Crt+0x730>
ffffffff8021380a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021380e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213812:	eb 04                	jmp    ffffffff80213818 <_RME_Prc_Boot_Crt+0x734>
ffffffff80213814:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213818:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
#endif
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff8021381c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213820:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80213824:	48 89 50 28          	mov    %rdx,0x28(%rax)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff80213828:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021382c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80213830:	48 89 50 30          	mov    %rdx,0x30(%rax)
#else
    Prc_Crt->Pgt=Raw_Pgt;
#endif
    
    /* Reference objects */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),1U);
ffffffff80213834:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80213838:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021383c:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213841:	48 89 c7             	mov    %rax,%rdi
ffffffff80213844:	e8 4a 8f ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),1U);
ffffffff80213849:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021384d:	48 83 c0 08          	add    $0x8,%rax
ffffffff80213851:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213856:	48 89 c7             	mov    %rax,%rdi
ffffffff80213859:	e8 35 8f ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif

    /* Establish cap */
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff8021385e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213862:	48 b9 00 00 00 00 00 	movabs $0x5000000000000,%rcx
ffffffff80213869:	00 05 00 
ffffffff8021386c:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PRC,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8021386f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80213874:	c9                   	leave
ffffffff80213875:	c3                   	ret

ffffffff80213876 <_RME_Prc_Crt>:
                              rme_cid_t Cap_Cpt_Crt,
                              rme_cid_t Cap_Prc,
                              rme_cid_t Cap_Cpt,
                              rme_ptr_t Raw_Pgt)
#endif
{
ffffffff80213876:	f3 0f 1e fa          	endbr64
ffffffff8021387a:	55                   	push   %rbp
ffffffff8021387b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021387e:	48 83 ec 68          	sub    $0x68,%rsp
ffffffff80213882:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff80213886:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff8021388a:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff8021388e:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff80213892:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80213896:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021389a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021389f:	48 85 c0             	test   %rax,%rax
ffffffff802138a2:	0f 85 98 00 00 00    	jne    ffffffff80213940 <_RME_Prc_Crt+0xca>
ffffffff802138a8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802138ac:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802138b0:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff802138b4:	48 39 c2             	cmp    %rax,%rdx
ffffffff802138b7:	0f 93 c0             	setae  %al
ffffffff802138ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802138bd:	48 85 c0             	test   %rax,%rax
ffffffff802138c0:	74 0c                	je     ffffffff802138ce <_RME_Prc_Crt+0x58>
ffffffff802138c2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802138c9:	e9 38 07 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff802138ce:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802138d2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802138d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802138d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802138dd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802138e1:	48 01 d0             	add    %rdx,%rax
ffffffff802138e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802138e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802138ec:	48 8b 00             	mov    (%rax),%rax
ffffffff802138ef:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802138f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802138f7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802138fb:	0f b7 c0             	movzwl %ax,%eax
ffffffff802138fe:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213902:	0f 94 c0             	sete   %al
ffffffff80213905:	0f b6 c0             	movzbl %al,%eax
ffffffff80213908:	48 85 c0             	test   %rax,%rax
ffffffff8021390b:	74 0c                	je     ffffffff80213919 <_RME_Prc_Crt+0xa3>
ffffffff8021390d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213914:	e9 ed 06 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213919:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021391d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213921:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213925:	0f 95 c0             	setne  %al
ffffffff80213928:	0f b6 c0             	movzbl %al,%eax
ffffffff8021392b:	48 85 c0             	test   %rax,%rax
ffffffff8021392e:	0f 84 4c 01 00 00    	je     ffffffff80213a80 <_RME_Prc_Crt+0x20a>
ffffffff80213934:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021393b:	e9 c6 06 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213940:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213944:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213948:	48 89 c2             	mov    %rax,%rdx
ffffffff8021394b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021394f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213953:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213956:	0f 93 c0             	setae  %al
ffffffff80213959:	0f b6 c0             	movzbl %al,%eax
ffffffff8021395c:	48 85 c0             	test   %rax,%rax
ffffffff8021395f:	74 0c                	je     ffffffff8021396d <_RME_Prc_Crt+0xf7>
ffffffff80213961:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213968:	e9 99 06 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff8021396d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213971:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213975:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213979:	48 89 c2             	mov    %rax,%rdx
ffffffff8021397c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213980:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213984:	48 01 d0             	add    %rdx,%rax
ffffffff80213987:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021398b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021398f:	48 8b 00             	mov    (%rax),%rax
ffffffff80213992:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213996:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021399a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021399e:	0f b7 c0             	movzwl %ax,%eax
ffffffff802139a1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802139a5:	0f 94 c0             	sete   %al
ffffffff802139a8:	0f b6 c0             	movzbl %al,%eax
ffffffff802139ab:	48 85 c0             	test   %rax,%rax
ffffffff802139ae:	74 0c                	je     ffffffff802139bc <_RME_Prc_Crt+0x146>
ffffffff802139b0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802139b7:	e9 4a 06 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff802139bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802139c0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802139c4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802139c8:	0f 95 c0             	setne  %al
ffffffff802139cb:	0f b6 c0             	movzbl %al,%eax
ffffffff802139ce:	48 85 c0             	test   %rax,%rax
ffffffff802139d1:	74 0c                	je     ffffffff802139df <_RME_Prc_Crt+0x169>
ffffffff802139d3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802139da:	e9 27 06 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff802139df:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802139e3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802139e8:	48 89 c2             	mov    %rax,%rdx
ffffffff802139eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802139ef:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802139f3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802139f6:	0f 93 c0             	setae  %al
ffffffff802139f9:	0f b6 c0             	movzbl %al,%eax
ffffffff802139fc:	48 85 c0             	test   %rax,%rax
ffffffff802139ff:	74 0c                	je     ffffffff80213a0d <_RME_Prc_Crt+0x197>
ffffffff80213a01:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213a08:	e9 f9 05 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213a0d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213a11:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213a16:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213a1a:	48 89 c2             	mov    %rax,%rdx
ffffffff80213a1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213a21:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213a25:	48 01 d0             	add    %rdx,%rax
ffffffff80213a28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80213a2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213a30:	48 8b 00             	mov    (%rax),%rax
ffffffff80213a33:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213a37:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213a3b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213a3f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213a42:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213a46:	0f 94 c0             	sete   %al
ffffffff80213a49:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a4c:	48 85 c0             	test   %rax,%rax
ffffffff80213a4f:	74 0c                	je     ffffffff80213a5d <_RME_Prc_Crt+0x1e7>
ffffffff80213a51:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213a58:	e9 a9 05 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213a5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213a61:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213a65:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213a69:	0f 95 c0             	setne  %al
ffffffff80213a6c:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a6f:	48 85 c0             	test   %rax,%rax
ffffffff80213a72:	74 0c                	je     ffffffff80213a80 <_RME_Prc_Crt+0x20a>
ffffffff80213a74:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213a7b:	e9 86 05 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213a80:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213a84:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213a89:	48 85 c0             	test   %rax,%rax
ffffffff80213a8c:	0f 85 98 00 00 00    	jne    ffffffff80213b2a <_RME_Prc_Crt+0x2b4>
ffffffff80213a92:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213a96:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213a9a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80213a9e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213aa1:	0f 93 c0             	setae  %al
ffffffff80213aa4:	0f b6 c0             	movzbl %al,%eax
ffffffff80213aa7:	48 85 c0             	test   %rax,%rax
ffffffff80213aaa:	74 0c                	je     ffffffff80213ab8 <_RME_Prc_Crt+0x242>
ffffffff80213aac:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213ab3:	e9 4e 05 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213ab8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213abc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213ac0:	48 89 c2             	mov    %rax,%rdx
ffffffff80213ac3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213ac7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213acb:	48 01 d0             	add    %rdx,%rax
ffffffff80213ace:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213ad2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213ad6:	48 8b 00             	mov    (%rax),%rax
ffffffff80213ad9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213add:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213ae1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213ae5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213ae8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213aec:	0f 94 c0             	sete   %al
ffffffff80213aef:	0f b6 c0             	movzbl %al,%eax
ffffffff80213af2:	48 85 c0             	test   %rax,%rax
ffffffff80213af5:	74 0c                	je     ffffffff80213b03 <_RME_Prc_Crt+0x28d>
ffffffff80213af7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213afe:	e9 03 05 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213b03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213b07:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213b0b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213b0f:	0f 95 c0             	setne  %al
ffffffff80213b12:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b15:	48 85 c0             	test   %rax,%rax
ffffffff80213b18:	0f 84 4c 01 00 00    	je     ffffffff80213c6a <_RME_Prc_Crt+0x3f4>
ffffffff80213b1e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213b25:	e9 dc 04 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213b2a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213b2e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213b32:	48 89 c2             	mov    %rax,%rdx
ffffffff80213b35:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213b39:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213b3d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213b40:	0f 93 c0             	setae  %al
ffffffff80213b43:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b46:	48 85 c0             	test   %rax,%rax
ffffffff80213b49:	74 0c                	je     ffffffff80213b57 <_RME_Prc_Crt+0x2e1>
ffffffff80213b4b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213b52:	e9 af 04 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213b57:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213b5b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213b5f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213b63:	48 89 c2             	mov    %rax,%rdx
ffffffff80213b66:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213b6a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213b6e:	48 01 d0             	add    %rdx,%rax
ffffffff80213b71:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213b75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213b79:	48 8b 00             	mov    (%rax),%rax
ffffffff80213b7c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213b80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213b84:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213b88:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213b8b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213b8f:	0f 94 c0             	sete   %al
ffffffff80213b92:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b95:	48 85 c0             	test   %rax,%rax
ffffffff80213b98:	74 0c                	je     ffffffff80213ba6 <_RME_Prc_Crt+0x330>
ffffffff80213b9a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213ba1:	e9 60 04 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213ba6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213baa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213bae:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213bb2:	0f 95 c0             	setne  %al
ffffffff80213bb5:	0f b6 c0             	movzbl %al,%eax
ffffffff80213bb8:	48 85 c0             	test   %rax,%rax
ffffffff80213bbb:	74 0c                	je     ffffffff80213bc9 <_RME_Prc_Crt+0x353>
ffffffff80213bbd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213bc4:	e9 3d 04 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213bc9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213bcd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213bd2:	48 89 c2             	mov    %rax,%rdx
ffffffff80213bd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213bd9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213bdd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213be0:	0f 93 c0             	setae  %al
ffffffff80213be3:	0f b6 c0             	movzbl %al,%eax
ffffffff80213be6:	48 85 c0             	test   %rax,%rax
ffffffff80213be9:	74 0c                	je     ffffffff80213bf7 <_RME_Prc_Crt+0x381>
ffffffff80213beb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213bf2:	e9 0f 04 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213bf7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213bfb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213c00:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213c04:	48 89 c2             	mov    %rax,%rdx
ffffffff80213c07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213c0b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213c0f:	48 01 d0             	add    %rdx,%rax
ffffffff80213c12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213c16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213c1a:	48 8b 00             	mov    (%rax),%rax
ffffffff80213c1d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213c21:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213c25:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213c29:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213c2c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213c30:	0f 94 c0             	sete   %al
ffffffff80213c33:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c36:	48 85 c0             	test   %rax,%rax
ffffffff80213c39:	74 0c                	je     ffffffff80213c47 <_RME_Prc_Crt+0x3d1>
ffffffff80213c3b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213c42:	e9 bf 03 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213c47:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213c4b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213c4f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213c53:	0f 95 c0             	setne  %al
ffffffff80213c56:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c59:	48 85 c0             	test   %rax,%rax
ffffffff80213c5c:	74 0c                	je     ffffffff80213c6a <_RME_Prc_Crt+0x3f4>
ffffffff80213c5e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213c65:	e9 9c 03 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80213c6a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213c6e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213c73:	48 85 c0             	test   %rax,%rax
ffffffff80213c76:	0f 85 98 00 00 00    	jne    ffffffff80213d14 <_RME_Prc_Crt+0x49e>
ffffffff80213c7c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213c80:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213c84:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80213c88:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213c8b:	0f 93 c0             	setae  %al
ffffffff80213c8e:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c91:	48 85 c0             	test   %rax,%rax
ffffffff80213c94:	74 0c                	je     ffffffff80213ca2 <_RME_Prc_Crt+0x42c>
ffffffff80213c96:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213c9d:	e9 64 03 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213ca2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213ca6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213caa:	48 89 c2             	mov    %rax,%rdx
ffffffff80213cad:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213cb1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213cb5:	48 01 d0             	add    %rdx,%rax
ffffffff80213cb8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213cbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213cc0:	48 8b 00             	mov    (%rax),%rax
ffffffff80213cc3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213cc7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213ccb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213ccf:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213cd2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213cd6:	0f 94 c0             	sete   %al
ffffffff80213cd9:	0f b6 c0             	movzbl %al,%eax
ffffffff80213cdc:	48 85 c0             	test   %rax,%rax
ffffffff80213cdf:	74 0c                	je     ffffffff80213ced <_RME_Prc_Crt+0x477>
ffffffff80213ce1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213ce8:	e9 19 03 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213ced:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213cf1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213cf5:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213cf9:	0f 95 c0             	setne  %al
ffffffff80213cfc:	0f b6 c0             	movzbl %al,%eax
ffffffff80213cff:	48 85 c0             	test   %rax,%rax
ffffffff80213d02:	0f 84 4c 01 00 00    	je     ffffffff80213e54 <_RME_Prc_Crt+0x5de>
ffffffff80213d08:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213d0f:	e9 f2 02 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213d14:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213d18:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213d1c:	48 89 c2             	mov    %rax,%rdx
ffffffff80213d1f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213d23:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213d27:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213d2a:	0f 93 c0             	setae  %al
ffffffff80213d2d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d30:	48 85 c0             	test   %rax,%rax
ffffffff80213d33:	74 0c                	je     ffffffff80213d41 <_RME_Prc_Crt+0x4cb>
ffffffff80213d35:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213d3c:	e9 c5 02 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213d41:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213d45:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213d49:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213d4d:	48 89 c2             	mov    %rax,%rdx
ffffffff80213d50:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213d54:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213d58:	48 01 d0             	add    %rdx,%rax
ffffffff80213d5b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213d5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213d63:	48 8b 00             	mov    (%rax),%rax
ffffffff80213d66:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213d6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213d6e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213d72:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213d75:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213d79:	0f 94 c0             	sete   %al
ffffffff80213d7c:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d7f:	48 85 c0             	test   %rax,%rax
ffffffff80213d82:	74 0c                	je     ffffffff80213d90 <_RME_Prc_Crt+0x51a>
ffffffff80213d84:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213d8b:	e9 76 02 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213d90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213d94:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213d98:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213d9c:	0f 95 c0             	setne  %al
ffffffff80213d9f:	0f b6 c0             	movzbl %al,%eax
ffffffff80213da2:	48 85 c0             	test   %rax,%rax
ffffffff80213da5:	74 0c                	je     ffffffff80213db3 <_RME_Prc_Crt+0x53d>
ffffffff80213da7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213dae:	e9 53 02 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213db3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213db7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213dbc:	48 89 c2             	mov    %rax,%rdx
ffffffff80213dbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213dc3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213dc7:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213dca:	0f 93 c0             	setae  %al
ffffffff80213dcd:	0f b6 c0             	movzbl %al,%eax
ffffffff80213dd0:	48 85 c0             	test   %rax,%rax
ffffffff80213dd3:	74 0c                	je     ffffffff80213de1 <_RME_Prc_Crt+0x56b>
ffffffff80213dd5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213ddc:	e9 25 02 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213de1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213de5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213dea:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213dee:	48 89 c2             	mov    %rax,%rdx
ffffffff80213df1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213df5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213df9:	48 01 d0             	add    %rdx,%rax
ffffffff80213dfc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213e00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213e04:	48 8b 00             	mov    (%rax),%rax
ffffffff80213e07:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213e0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213e0f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213e13:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213e16:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213e1a:	0f 94 c0             	sete   %al
ffffffff80213e1d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e20:	48 85 c0             	test   %rax,%rax
ffffffff80213e23:	74 0c                	je     ffffffff80213e31 <_RME_Prc_Crt+0x5bb>
ffffffff80213e25:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213e2c:	e9 d5 01 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213e31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213e35:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213e39:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213e3d:	0f 95 c0             	setne  %al
ffffffff80213e40:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e43:	48 85 c0             	test   %rax,%rax
ffffffff80213e46:	74 0c                	je     ffffffff80213e54 <_RME_Prc_Crt+0x5de>
ffffffff80213e48:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213e4f:	e9 b2 01 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);
#endif
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80213e54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213e58:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213e5c:	83 e0 01             	and    $0x1,%eax
ffffffff80213e5f:	48 85 c0             	test   %rax,%rax
ffffffff80213e62:	0f 94 c0             	sete   %al
ffffffff80213e65:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e68:	48 85 c0             	test   %rax,%rax
ffffffff80213e6b:	74 0c                	je     ffffffff80213e79 <_RME_Prc_Crt+0x603>
ffffffff80213e6d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213e74:	e9 8d 01 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff80213e79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213e7d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213e81:	83 e0 40             	and    $0x40,%eax
ffffffff80213e84:	48 85 c0             	test   %rax,%rax
ffffffff80213e87:	0f 94 c0             	sete   %al
ffffffff80213e8a:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e8d:	48 85 c0             	test   %rax,%rax
ffffffff80213e90:	74 0c                	je     ffffffff80213e9e <_RME_Prc_Crt+0x628>
ffffffff80213e92:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213e99:	e9 68 01 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff80213e9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213ea2:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213ea6:	83 e0 40             	and    $0x40,%eax
ffffffff80213ea9:	48 85 c0             	test   %rax,%rax
ffffffff80213eac:	0f 94 c0             	sete   %al
ffffffff80213eaf:	0f b6 c0             	movzbl %al,%eax
ffffffff80213eb2:	48 85 c0             	test   %rax,%rax
ffffffff80213eb5:	74 0c                	je     ffffffff80213ec3 <_RME_Prc_Crt+0x64d>
ffffffff80213eb7:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213ebe:	e9 43 01 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
#endif
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff80213ec3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213ec7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213ecb:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80213ecf:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213ed2:	0f 93 c0             	setae  %al
ffffffff80213ed5:	0f b6 c0             	movzbl %al,%eax
ffffffff80213ed8:	48 85 c0             	test   %rax,%rax
ffffffff80213edb:	74 0c                	je     ffffffff80213ee9 <_RME_Prc_Crt+0x673>
ffffffff80213edd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213ee4:	e9 1d 01 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213ee9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80213eed:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213ef1:	48 89 c2             	mov    %rax,%rdx
ffffffff80213ef4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213ef8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213efc:	48 01 d0             	add    %rdx,%rax
ffffffff80213eff:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff80213f03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213f07:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80213f0e:	00 00 00 
ffffffff80213f11:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80213f16:	48 89 c7             	mov    %rax,%rdi
ffffffff80213f19:	e8 40 88 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80213f1e:	48 85 c0             	test   %rax,%rax
ffffffff80213f21:	0f 94 c0             	sete   %al
ffffffff80213f24:	0f b6 c0             	movzbl %al,%eax
ffffffff80213f27:	48 85 c0             	test   %rax,%rax
ffffffff80213f2a:	74 0c                	je     ffffffff80213f38 <_RME_Prc_Crt+0x6c2>
ffffffff80213f2c:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80213f33:	e9 ce 00 00 00       	jmp    ffffffff80214006 <_RME_Prc_Crt+0x790>
ffffffff80213f38:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80213f3d:	e8 cf 88 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80213f42:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80213f46:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* Header init */
    Prc_Crt->Head.Root_Ref=0U;
ffffffff80213f4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213f4e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80213f55:	00 
    Prc_Crt->Head.Object=0U;
ffffffff80213f56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213f5a:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80213f61:	00 
    Prc_Crt->Head.Flag=RME_PRC_FLAG_ALL;
ffffffff80213f62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213f66:	48 c7 40 10 0f 00 00 	movq   $0xf,0x10(%rax)
ffffffff80213f6d:	00 
    
    /* Info init */
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff80213f6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213f72:	48 8b 00             	mov    (%rax),%rax
ffffffff80213f75:	89 c0                	mov    %eax,%eax
ffffffff80213f77:	48 85 c0             	test   %rax,%rax
ffffffff80213f7a:	74 0a                	je     ffffffff80213f86 <_RME_Prc_Crt+0x710>
ffffffff80213f7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213f80:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213f84:	eb 04                	jmp    ffffffff80213f8a <_RME_Prc_Crt+0x714>
ffffffff80213f86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213f8a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff80213f8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213f92:	48 8b 00             	mov    (%rax),%rax
ffffffff80213f95:	89 c0                	mov    %eax,%eax
ffffffff80213f97:	48 85 c0             	test   %rax,%rax
ffffffff80213f9a:	74 0a                	je     ffffffff80213fa6 <_RME_Prc_Crt+0x730>
ffffffff80213f9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213fa0:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213fa4:	eb 04                	jmp    ffffffff80213faa <_RME_Prc_Crt+0x734>
ffffffff80213fa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213faa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
#endif
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff80213fae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213fb2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80213fb6:	48 89 50 28          	mov    %rdx,0x28(%rax)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff80213fba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213fbe:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80213fc2:	48 89 50 30          	mov    %rdx,0x30(%rax)
#else
    Prc_Crt->Pgt=Raw_Pgt;
#endif
    
    /* Reference objects */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),1U);
ffffffff80213fc6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80213fca:	48 83 c0 08          	add    $0x8,%rax
ffffffff80213fce:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213fd3:	48 89 c7             	mov    %rax,%rdi
ffffffff80213fd6:	e8 b8 87 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),1U);
ffffffff80213fdb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80213fdf:	48 83 c0 08          	add    $0x8,%rax
ffffffff80213fe3:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213fe8:	48 89 c7             	mov    %rax,%rdi
ffffffff80213feb:	e8 a3 87 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif

    /* Establish cap */
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff80213ff0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213ff4:	48 b9 00 00 00 00 00 	movabs $0x5000000000000,%rcx
ffffffff80213ffb:	00 05 00 
ffffffff80213ffe:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PRC,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80214001:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80214006:	c9                   	leave
ffffffff80214007:	c3                   	ret

ffffffff80214008 <_RME_Prc_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Prc_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Prc)
{
ffffffff80214008:	f3 0f 1e fa          	endbr64
ffffffff8021400c:	55                   	push   %rbp
ffffffff8021400d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214010:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80214014:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80214018:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021401c:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214020:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214024:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214029:	48 85 c0             	test   %rax,%rax
ffffffff8021402c:	0f 85 98 00 00 00    	jne    ffffffff802140ca <_RME_Prc_Del+0xc2>
ffffffff80214032:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214036:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021403a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8021403e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214041:	0f 93 c0             	setae  %al
ffffffff80214044:	0f b6 c0             	movzbl %al,%eax
ffffffff80214047:	48 85 c0             	test   %rax,%rax
ffffffff8021404a:	74 0c                	je     ffffffff80214058 <_RME_Prc_Del+0x50>
ffffffff8021404c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214053:	e9 71 03 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
ffffffff80214058:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021405c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214060:	48 89 c2             	mov    %rax,%rdx
ffffffff80214063:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214067:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021406b:	48 01 d0             	add    %rdx,%rax
ffffffff8021406e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214072:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214076:	48 8b 00             	mov    (%rax),%rax
ffffffff80214079:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021407d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214081:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214085:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214088:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021408c:	0f 94 c0             	sete   %al
ffffffff8021408f:	0f b6 c0             	movzbl %al,%eax
ffffffff80214092:	48 85 c0             	test   %rax,%rax
ffffffff80214095:	74 0c                	je     ffffffff802140a3 <_RME_Prc_Del+0x9b>
ffffffff80214097:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021409e:	e9 26 03 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
ffffffff802140a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802140a7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802140ab:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802140af:	0f 95 c0             	setne  %al
ffffffff802140b2:	0f b6 c0             	movzbl %al,%eax
ffffffff802140b5:	48 85 c0             	test   %rax,%rax
ffffffff802140b8:	0f 84 4c 01 00 00    	je     ffffffff8021420a <_RME_Prc_Del+0x202>
ffffffff802140be:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802140c5:	e9 ff 02 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
ffffffff802140ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802140ce:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802140d2:	48 89 c2             	mov    %rax,%rdx
ffffffff802140d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802140d9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802140dd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802140e0:	0f 93 c0             	setae  %al
ffffffff802140e3:	0f b6 c0             	movzbl %al,%eax
ffffffff802140e6:	48 85 c0             	test   %rax,%rax
ffffffff802140e9:	74 0c                	je     ffffffff802140f7 <_RME_Prc_Del+0xef>
ffffffff802140eb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802140f2:	e9 d2 02 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
ffffffff802140f7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802140fb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802140ff:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214103:	48 89 c2             	mov    %rax,%rdx
ffffffff80214106:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021410a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021410e:	48 01 d0             	add    %rdx,%rax
ffffffff80214111:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214115:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214119:	48 8b 00             	mov    (%rax),%rax
ffffffff8021411c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214120:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214124:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214128:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021412b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021412f:	0f 94 c0             	sete   %al
ffffffff80214132:	0f b6 c0             	movzbl %al,%eax
ffffffff80214135:	48 85 c0             	test   %rax,%rax
ffffffff80214138:	74 0c                	je     ffffffff80214146 <_RME_Prc_Del+0x13e>
ffffffff8021413a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214141:	e9 83 02 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
ffffffff80214146:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021414a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021414e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214152:	0f 95 c0             	setne  %al
ffffffff80214155:	0f b6 c0             	movzbl %al,%eax
ffffffff80214158:	48 85 c0             	test   %rax,%rax
ffffffff8021415b:	74 0c                	je     ffffffff80214169 <_RME_Prc_Del+0x161>
ffffffff8021415d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214164:	e9 60 02 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
ffffffff80214169:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021416d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214172:	48 89 c2             	mov    %rax,%rdx
ffffffff80214175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214179:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021417d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214180:	0f 93 c0             	setae  %al
ffffffff80214183:	0f b6 c0             	movzbl %al,%eax
ffffffff80214186:	48 85 c0             	test   %rax,%rax
ffffffff80214189:	74 0c                	je     ffffffff80214197 <_RME_Prc_Del+0x18f>
ffffffff8021418b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214192:	e9 32 02 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
ffffffff80214197:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021419b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802141a0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802141a4:	48 89 c2             	mov    %rax,%rdx
ffffffff802141a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802141ab:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802141af:	48 01 d0             	add    %rdx,%rax
ffffffff802141b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802141b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802141ba:	48 8b 00             	mov    (%rax),%rax
ffffffff802141bd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802141c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802141c5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802141c9:	0f b7 c0             	movzwl %ax,%eax
ffffffff802141cc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802141d0:	0f 94 c0             	sete   %al
ffffffff802141d3:	0f b6 c0             	movzbl %al,%eax
ffffffff802141d6:	48 85 c0             	test   %rax,%rax
ffffffff802141d9:	74 0c                	je     ffffffff802141e7 <_RME_Prc_Del+0x1df>
ffffffff802141db:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802141e2:	e9 e2 01 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
ffffffff802141e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802141eb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802141ef:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802141f3:	0f 95 c0             	setne  %al
ffffffff802141f6:	0f b6 c0             	movzbl %al,%eax
ffffffff802141f9:	48 85 c0             	test   %rax,%rax
ffffffff802141fc:	74 0c                	je     ffffffff8021420a <_RME_Prc_Del+0x202>
ffffffff802141fe:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214205:	e9 bf 01 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021420a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021420e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214212:	83 e0 02             	and    $0x2,%eax
ffffffff80214215:	48 85 c0             	test   %rax,%rax
ffffffff80214218:	0f 94 c0             	sete   %al
ffffffff8021421b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021421e:	48 85 c0             	test   %rax,%rax
ffffffff80214221:	74 0c                	je     ffffffff8021422f <_RME_Prc_Del+0x227>
ffffffff80214223:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021422a:	e9 9a 01 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff8021422f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214233:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214237:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021423b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021423e:	0f 93 c0             	setae  %al
ffffffff80214241:	0f b6 c0             	movzbl %al,%eax
ffffffff80214244:	48 85 c0             	test   %rax,%rax
ffffffff80214247:	74 0c                	je     ffffffff80214255 <_RME_Prc_Del+0x24d>
ffffffff80214249:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214250:	e9 74 01 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
ffffffff80214255:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80214259:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021425d:	48 89 c2             	mov    %rax,%rdx
ffffffff80214260:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214264:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214268:	48 01 d0             	add    %rdx,%rax
ffffffff8021426b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff8021426f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214273:	48 8b 00             	mov    (%rax),%rax
ffffffff80214276:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021427a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021427e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214282:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214285:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214289:	0f 95 c0             	setne  %al
ffffffff8021428c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021428f:	48 85 c0             	test   %rax,%rax
ffffffff80214292:	74 0c                	je     ffffffff802142a0 <_RME_Prc_Del+0x298>
ffffffff80214294:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021429b:	e9 29 01 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
ffffffff802142a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802142a4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802142a8:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802142ac:	0f 95 c0             	setne  %al
ffffffff802142af:	0f b6 c0             	movzbl %al,%eax
ffffffff802142b2:	48 85 c0             	test   %rax,%rax
ffffffff802142b5:	74 0c                	je     ffffffff802142c3 <_RME_Prc_Del+0x2bb>
ffffffff802142b7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802142be:	e9 06 01 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
ffffffff802142c3:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802142c8:	e8 44 85 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff802142cd:	48 89 c2             	mov    %rax,%rdx
ffffffff802142d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802142d4:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff802142d8:	48 29 c2             	sub    %rax,%rdx
ffffffff802142db:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff802142df:	0f 96 c0             	setbe  %al
ffffffff802142e2:	0f b6 c0             	movzbl %al,%eax
ffffffff802142e5:	48 98                	cltq
ffffffff802142e7:	48 85 c0             	test   %rax,%rax
ffffffff802142ea:	74 0c                	je     ffffffff802142f8 <_RME_Prc_Del+0x2f0>
ffffffff802142ec:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff802142f3:	e9 d1 00 00 00       	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>
ffffffff802142f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802142fc:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214300:	48 85 c0             	test   %rax,%rax
ffffffff80214303:	0f 95 c0             	setne  %al
ffffffff80214306:	0f b6 c0             	movzbl %al,%eax
ffffffff80214309:	48 85 c0             	test   %rax,%rax
ffffffff8021430c:	74 41                	je     ffffffff8021434f <_RME_Prc_Del+0x347>
ffffffff8021430e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214312:	89 c0                	mov    %eax,%eax
ffffffff80214314:	48 85 c0             	test   %rax,%rax
ffffffff80214317:	0f 94 c0             	sete   %al
ffffffff8021431a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021431d:	48 85 c0             	test   %rax,%rax
ffffffff80214320:	74 24                	je     ffffffff80214346 <_RME_Prc_Del+0x33e>
ffffffff80214322:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80214329:	00 ff ff 
ffffffff8021432c:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80214330:	48 89 c2             	mov    %rax,%rdx
ffffffff80214333:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214337:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021433b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021433e:	48 89 c7             	mov    %rax,%rdi
ffffffff80214341:	e8 18 84 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80214346:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8021434d:	eb 7a                	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>

    /* Remember for deletion */
    Prc_Cpt=Prc_Del->Cpt;
ffffffff8021434f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214353:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214357:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=Prc_Del->Pgt;
ffffffff8021435b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021435f:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80214363:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
#endif

    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Prc_Del,Type_Stat);
ffffffff80214367:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021436b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021436f:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80214374:	48 89 ce             	mov    %rcx,%rsi
ffffffff80214377:	48 89 c7             	mov    %rax,%rdi
ffffffff8021437a:	e8 df 83 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021437f:	48 85 c0             	test   %rax,%rax
ffffffff80214382:	0f 94 c0             	sete   %al
ffffffff80214385:	0f b6 c0             	movzbl %al,%eax
ffffffff80214388:	48 85 c0             	test   %rax,%rax
ffffffff8021438b:	74 09                	je     ffffffff80214396 <_RME_Prc_Del+0x38e>
ffffffff8021438d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80214394:	eb 33                	jmp    ffffffff802143c9 <_RME_Prc_Del+0x3c1>

    /* Dereference caps */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),-1);
ffffffff80214396:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021439a:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021439e:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802143a5:	48 89 c7             	mov    %rax,%rdi
ffffffff802143a8:	e8 e6 83 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),-1);
ffffffff802143ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802143b1:	48 83 c0 08          	add    $0x8,%rax
ffffffff802143b5:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802143bc:	48 89 c7             	mov    %rax,%rdi
ffffffff802143bf:	e8 cf 83 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif
    
    return 0;
ffffffff802143c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802143c9:	c9                   	leave
ffffffff802143ca:	c3                   	ret

ffffffff802143cb <_RME_Prc_Cpt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Prc_Cpt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Prc,
                              rme_cid_t Cap_Cpt)
{
ffffffff802143cb:	f3 0f 1e fa          	endbr64
ffffffff802143cf:	55                   	push   %rbp
ffffffff802143d0:	48 89 e5             	mov    %rsp,%rbp
ffffffff802143d3:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff802143d7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff802143db:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff802143df:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_New;
    struct RME_Cap_Cpt* Cpt_Old;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802143e3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802143e7:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802143ec:	48 85 c0             	test   %rax,%rax
ffffffff802143ef:	0f 85 98 00 00 00    	jne    ffffffff8021448d <_RME_Prc_Cpt+0xc2>
ffffffff802143f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802143f9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802143fd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80214401:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214404:	0f 93 c0             	setae  %al
ffffffff80214407:	0f b6 c0             	movzbl %al,%eax
ffffffff8021440a:	48 85 c0             	test   %rax,%rax
ffffffff8021440d:	74 0c                	je     ffffffff8021441b <_RME_Prc_Cpt+0x50>
ffffffff8021440f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214416:	e9 6e 04 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff8021441b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021441f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214423:	48 89 c2             	mov    %rax,%rdx
ffffffff80214426:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021442a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021442e:	48 01 d0             	add    %rdx,%rax
ffffffff80214431:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214435:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214439:	48 8b 00             	mov    (%rax),%rax
ffffffff8021443c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214440:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214444:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214448:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021444b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021444f:	0f 94 c0             	sete   %al
ffffffff80214452:	0f b6 c0             	movzbl %al,%eax
ffffffff80214455:	48 85 c0             	test   %rax,%rax
ffffffff80214458:	74 0c                	je     ffffffff80214466 <_RME_Prc_Cpt+0x9b>
ffffffff8021445a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214461:	e9 23 04 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff80214466:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021446a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021446e:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214472:	0f 95 c0             	setne  %al
ffffffff80214475:	0f b6 c0             	movzbl %al,%eax
ffffffff80214478:	48 85 c0             	test   %rax,%rax
ffffffff8021447b:	0f 84 4c 01 00 00    	je     ffffffff802145cd <_RME_Prc_Cpt+0x202>
ffffffff80214481:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214488:	e9 fc 03 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff8021448d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214491:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214495:	48 89 c2             	mov    %rax,%rdx
ffffffff80214498:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021449c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802144a0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802144a3:	0f 93 c0             	setae  %al
ffffffff802144a6:	0f b6 c0             	movzbl %al,%eax
ffffffff802144a9:	48 85 c0             	test   %rax,%rax
ffffffff802144ac:	74 0c                	je     ffffffff802144ba <_RME_Prc_Cpt+0xef>
ffffffff802144ae:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802144b5:	e9 cf 03 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff802144ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802144be:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802144c2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802144c6:	48 89 c2             	mov    %rax,%rdx
ffffffff802144c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802144cd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802144d1:	48 01 d0             	add    %rdx,%rax
ffffffff802144d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802144d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802144dc:	48 8b 00             	mov    (%rax),%rax
ffffffff802144df:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802144e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802144e7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802144eb:	0f b7 c0             	movzwl %ax,%eax
ffffffff802144ee:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802144f2:	0f 94 c0             	sete   %al
ffffffff802144f5:	0f b6 c0             	movzbl %al,%eax
ffffffff802144f8:	48 85 c0             	test   %rax,%rax
ffffffff802144fb:	74 0c                	je     ffffffff80214509 <_RME_Prc_Cpt+0x13e>
ffffffff802144fd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214504:	e9 80 03 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff80214509:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021450d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214511:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214515:	0f 95 c0             	setne  %al
ffffffff80214518:	0f b6 c0             	movzbl %al,%eax
ffffffff8021451b:	48 85 c0             	test   %rax,%rax
ffffffff8021451e:	74 0c                	je     ffffffff8021452c <_RME_Prc_Cpt+0x161>
ffffffff80214520:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214527:	e9 5d 03 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff8021452c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214530:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214535:	48 89 c2             	mov    %rax,%rdx
ffffffff80214538:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021453c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214540:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214543:	0f 93 c0             	setae  %al
ffffffff80214546:	0f b6 c0             	movzbl %al,%eax
ffffffff80214549:	48 85 c0             	test   %rax,%rax
ffffffff8021454c:	74 0c                	je     ffffffff8021455a <_RME_Prc_Cpt+0x18f>
ffffffff8021454e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214555:	e9 2f 03 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff8021455a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021455e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214563:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214567:	48 89 c2             	mov    %rax,%rdx
ffffffff8021456a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021456e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214572:	48 01 d0             	add    %rdx,%rax
ffffffff80214575:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214579:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021457d:	48 8b 00             	mov    (%rax),%rax
ffffffff80214580:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214584:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214588:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021458c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021458f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214593:	0f 94 c0             	sete   %al
ffffffff80214596:	0f b6 c0             	movzbl %al,%eax
ffffffff80214599:	48 85 c0             	test   %rax,%rax
ffffffff8021459c:	74 0c                	je     ffffffff802145aa <_RME_Prc_Cpt+0x1df>
ffffffff8021459e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802145a5:	e9 df 02 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff802145aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802145ae:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802145b2:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802145b6:	0f 95 c0             	setne  %al
ffffffff802145b9:	0f b6 c0             	movzbl %al,%eax
ffffffff802145bc:	48 85 c0             	test   %rax,%rax
ffffffff802145bf:	74 0c                	je     ffffffff802145cd <_RME_Prc_Cpt+0x202>
ffffffff802145c1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802145c8:	e9 bc 02 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802145cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802145d1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802145d6:	48 85 c0             	test   %rax,%rax
ffffffff802145d9:	0f 85 98 00 00 00    	jne    ffffffff80214677 <_RME_Prc_Cpt+0x2ac>
ffffffff802145df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802145e3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802145e7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff802145eb:	48 39 c2             	cmp    %rax,%rdx
ffffffff802145ee:	0f 93 c0             	setae  %al
ffffffff802145f1:	0f b6 c0             	movzbl %al,%eax
ffffffff802145f4:	48 85 c0             	test   %rax,%rax
ffffffff802145f7:	74 0c                	je     ffffffff80214605 <_RME_Prc_Cpt+0x23a>
ffffffff802145f9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214600:	e9 84 02 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff80214605:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214609:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021460d:	48 89 c2             	mov    %rax,%rdx
ffffffff80214610:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214614:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214618:	48 01 d0             	add    %rdx,%rax
ffffffff8021461b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021461f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214623:	48 8b 00             	mov    (%rax),%rax
ffffffff80214626:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021462a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021462e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214632:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214635:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214639:	0f 94 c0             	sete   %al
ffffffff8021463c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021463f:	48 85 c0             	test   %rax,%rax
ffffffff80214642:	74 0c                	je     ffffffff80214650 <_RME_Prc_Cpt+0x285>
ffffffff80214644:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021464b:	e9 39 02 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff80214650:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214654:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214658:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021465c:	0f 95 c0             	setne  %al
ffffffff8021465f:	0f b6 c0             	movzbl %al,%eax
ffffffff80214662:	48 85 c0             	test   %rax,%rax
ffffffff80214665:	0f 84 4c 01 00 00    	je     ffffffff802147b7 <_RME_Prc_Cpt+0x3ec>
ffffffff8021466b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214672:	e9 12 02 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff80214677:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021467b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021467f:	48 89 c2             	mov    %rax,%rdx
ffffffff80214682:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214686:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021468a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021468d:	0f 93 c0             	setae  %al
ffffffff80214690:	0f b6 c0             	movzbl %al,%eax
ffffffff80214693:	48 85 c0             	test   %rax,%rax
ffffffff80214696:	74 0c                	je     ffffffff802146a4 <_RME_Prc_Cpt+0x2d9>
ffffffff80214698:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021469f:	e9 e5 01 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff802146a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802146a8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802146ac:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802146b0:	48 89 c2             	mov    %rax,%rdx
ffffffff802146b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802146b7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802146bb:	48 01 d0             	add    %rdx,%rax
ffffffff802146be:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802146c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802146c6:	48 8b 00             	mov    (%rax),%rax
ffffffff802146c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802146cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802146d1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802146d5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802146d8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802146dc:	0f 94 c0             	sete   %al
ffffffff802146df:	0f b6 c0             	movzbl %al,%eax
ffffffff802146e2:	48 85 c0             	test   %rax,%rax
ffffffff802146e5:	74 0c                	je     ffffffff802146f3 <_RME_Prc_Cpt+0x328>
ffffffff802146e7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802146ee:	e9 96 01 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff802146f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802146f7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802146fb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802146ff:	0f 95 c0             	setne  %al
ffffffff80214702:	0f b6 c0             	movzbl %al,%eax
ffffffff80214705:	48 85 c0             	test   %rax,%rax
ffffffff80214708:	74 0c                	je     ffffffff80214716 <_RME_Prc_Cpt+0x34b>
ffffffff8021470a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214711:	e9 73 01 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff80214716:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021471a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021471f:	48 89 c2             	mov    %rax,%rdx
ffffffff80214722:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214726:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021472a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021472d:	0f 93 c0             	setae  %al
ffffffff80214730:	0f b6 c0             	movzbl %al,%eax
ffffffff80214733:	48 85 c0             	test   %rax,%rax
ffffffff80214736:	74 0c                	je     ffffffff80214744 <_RME_Prc_Cpt+0x379>
ffffffff80214738:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021473f:	e9 45 01 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff80214744:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214748:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021474d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214751:	48 89 c2             	mov    %rax,%rdx
ffffffff80214754:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214758:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021475c:	48 01 d0             	add    %rdx,%rax
ffffffff8021475f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214763:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214767:	48 8b 00             	mov    (%rax),%rax
ffffffff8021476a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021476e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214772:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214776:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214779:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021477d:	0f 94 c0             	sete   %al
ffffffff80214780:	0f b6 c0             	movzbl %al,%eax
ffffffff80214783:	48 85 c0             	test   %rax,%rax
ffffffff80214786:	74 0c                	je     ffffffff80214794 <_RME_Prc_Cpt+0x3c9>
ffffffff80214788:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021478f:	e9 f5 00 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
ffffffff80214794:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214798:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021479c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802147a0:	0f 95 c0             	setne  %al
ffffffff802147a3:	0f b6 c0             	movzbl %al,%eax
ffffffff802147a6:	48 85 c0             	test   %rax,%rax
ffffffff802147a9:	74 0c                	je     ffffffff802147b7 <_RME_Prc_Cpt+0x3ec>
ffffffff802147ab:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802147b2:	e9 d2 00 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
                   struct RME_Cap_Cpt*,Cpt_New,Type_Stat);     
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_CPT);
ffffffff802147b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802147bb:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802147bf:	83 e0 04             	and    $0x4,%eax
ffffffff802147c2:	48 85 c0             	test   %rax,%rax
ffffffff802147c5:	0f 94 c0             	sete   %al
ffffffff802147c8:	0f b6 c0             	movzbl %al,%eax
ffffffff802147cb:	48 85 c0             	test   %rax,%rax
ffffffff802147ce:	74 0c                	je     ffffffff802147dc <_RME_Prc_Cpt+0x411>
ffffffff802147d0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802147d7:	e9 ad 00 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
    RME_CAP_CHECK(Cpt_New,RME_CPT_FLAG_PRC_CPT);
ffffffff802147dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802147e0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802147e4:	25 80 00 00 00       	and    $0x80,%eax
ffffffff802147e9:	48 85 c0             	test   %rax,%rax
ffffffff802147ec:	0f 94 c0             	sete   %al
ffffffff802147ef:	0f b6 c0             	movzbl %al,%eax
ffffffff802147f2:	48 85 c0             	test   %rax,%rax
ffffffff802147f5:	74 0c                	je     ffffffff80214803 <_RME_Prc_Cpt+0x438>
ffffffff802147f7:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802147fe:	e9 86 00 00 00       	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
    
    /* Convert to root */
    Cpt_New=RME_CAP_CONV_ROOT(Cpt_New,struct RME_Cap_Cpt*);
ffffffff80214803:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214807:	48 8b 00             	mov    (%rax),%rax
ffffffff8021480a:	89 c0                	mov    %eax,%eax
ffffffff8021480c:	48 85 c0             	test   %rax,%rax
ffffffff8021480f:	74 0a                	je     ffffffff8021481b <_RME_Prc_Cpt+0x450>
ffffffff80214811:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214815:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214819:	eb 04                	jmp    ffffffff8021481f <_RME_Prc_Cpt+0x454>
ffffffff8021481b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021481f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Commit the change */
    Cpt_Old=Prc_Op->Cpt;
ffffffff80214823:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214827:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021482b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Cpt)),
ffffffff8021482f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80214833:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214837:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8021483b:	48 83 c1 28          	add    $0x28,%rcx
ffffffff8021483f:	48 89 c6             	mov    %rax,%rsi
ffffffff80214842:	48 89 cf             	mov    %rcx,%rdi
ffffffff80214845:	e8 14 7f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021484a:	48 85 c0             	test   %rax,%rax
ffffffff8021484d:	75 09                	jne    ffffffff80214858 <_RME_Prc_Cpt+0x48d>
                     (rme_ptr_t)Cpt_Old,(rme_ptr_t)Cpt_New)==RME_CASFAIL)
    {
        RME_COV_MARKER();
        
        return RME_ERR_PTH_CONFLICT;
ffffffff8021484f:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff80214856:	eb 31                	jmp    ffffffff80214889 <_RME_Prc_Cpt+0x4be>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Reference new table and dereference the old table */
    RME_FETCH_ADD(&(Cpt_New->Head.Root_Ref),1);
ffffffff80214858:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021485c:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214860:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214865:	48 89 c7             	mov    %rax,%rdi
ffffffff80214868:	e8 26 7f ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    RME_FETCH_ADD(&(Cpt_Old->Head.Root_Ref),-1);
ffffffff8021486d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214871:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214875:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021487c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021487f:	e8 0f 7f ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80214884:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80214889:	c9                   	leave
ffffffff8021488a:	c3                   	ret

ffffffff8021488b <_RME_Prc_Pgt>:
#else
static rme_ret_t _RME_Prc_Pgt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Raw_Pgt)
#endif
{
ffffffff8021488b:	f3 0f 1e fa          	endbr64
ffffffff8021488f:	55                   	push   %rbp
ffffffff80214890:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214893:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80214897:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021489b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021489f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Pgt_Old;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802148a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802148a7:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802148ac:	48 85 c0             	test   %rax,%rax
ffffffff802148af:	0f 85 98 00 00 00    	jne    ffffffff8021494d <_RME_Prc_Pgt+0xc2>
ffffffff802148b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802148b9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802148bd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802148c1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802148c4:	0f 93 c0             	setae  %al
ffffffff802148c7:	0f b6 c0             	movzbl %al,%eax
ffffffff802148ca:	48 85 c0             	test   %rax,%rax
ffffffff802148cd:	74 0c                	je     ffffffff802148db <_RME_Prc_Pgt+0x50>
ffffffff802148cf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802148d6:	e9 6e 04 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff802148db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802148df:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802148e3:	48 89 c2             	mov    %rax,%rdx
ffffffff802148e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802148ea:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802148ee:	48 01 d0             	add    %rdx,%rax
ffffffff802148f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802148f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802148f9:	48 8b 00             	mov    (%rax),%rax
ffffffff802148fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214900:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214904:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214908:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021490b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021490f:	0f 94 c0             	sete   %al
ffffffff80214912:	0f b6 c0             	movzbl %al,%eax
ffffffff80214915:	48 85 c0             	test   %rax,%rax
ffffffff80214918:	74 0c                	je     ffffffff80214926 <_RME_Prc_Pgt+0x9b>
ffffffff8021491a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214921:	e9 23 04 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff80214926:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021492a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021492e:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214932:	0f 95 c0             	setne  %al
ffffffff80214935:	0f b6 c0             	movzbl %al,%eax
ffffffff80214938:	48 85 c0             	test   %rax,%rax
ffffffff8021493b:	0f 84 4c 01 00 00    	je     ffffffff80214a8d <_RME_Prc_Pgt+0x202>
ffffffff80214941:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214948:	e9 fc 03 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff8021494d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214951:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214955:	48 89 c2             	mov    %rax,%rdx
ffffffff80214958:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021495c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214960:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214963:	0f 93 c0             	setae  %al
ffffffff80214966:	0f b6 c0             	movzbl %al,%eax
ffffffff80214969:	48 85 c0             	test   %rax,%rax
ffffffff8021496c:	74 0c                	je     ffffffff8021497a <_RME_Prc_Pgt+0xef>
ffffffff8021496e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214975:	e9 cf 03 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff8021497a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021497e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214982:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214986:	48 89 c2             	mov    %rax,%rdx
ffffffff80214989:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021498d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214991:	48 01 d0             	add    %rdx,%rax
ffffffff80214994:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214998:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021499c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021499f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802149a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802149a7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802149ab:	0f b7 c0             	movzwl %ax,%eax
ffffffff802149ae:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802149b2:	0f 94 c0             	sete   %al
ffffffff802149b5:	0f b6 c0             	movzbl %al,%eax
ffffffff802149b8:	48 85 c0             	test   %rax,%rax
ffffffff802149bb:	74 0c                	je     ffffffff802149c9 <_RME_Prc_Pgt+0x13e>
ffffffff802149bd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802149c4:	e9 80 03 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff802149c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802149cd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802149d1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802149d5:	0f 95 c0             	setne  %al
ffffffff802149d8:	0f b6 c0             	movzbl %al,%eax
ffffffff802149db:	48 85 c0             	test   %rax,%rax
ffffffff802149de:	74 0c                	je     ffffffff802149ec <_RME_Prc_Pgt+0x161>
ffffffff802149e0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802149e7:	e9 5d 03 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff802149ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802149f0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802149f5:	48 89 c2             	mov    %rax,%rdx
ffffffff802149f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802149fc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214a00:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214a03:	0f 93 c0             	setae  %al
ffffffff80214a06:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a09:	48 85 c0             	test   %rax,%rax
ffffffff80214a0c:	74 0c                	je     ffffffff80214a1a <_RME_Prc_Pgt+0x18f>
ffffffff80214a0e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214a15:	e9 2f 03 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff80214a1a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214a1e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214a23:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214a27:	48 89 c2             	mov    %rax,%rdx
ffffffff80214a2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214a2e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214a32:	48 01 d0             	add    %rdx,%rax
ffffffff80214a35:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214a39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214a3d:	48 8b 00             	mov    (%rax),%rax
ffffffff80214a40:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214a44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214a48:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214a4c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214a4f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214a53:	0f 94 c0             	sete   %al
ffffffff80214a56:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a59:	48 85 c0             	test   %rax,%rax
ffffffff80214a5c:	74 0c                	je     ffffffff80214a6a <_RME_Prc_Pgt+0x1df>
ffffffff80214a5e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214a65:	e9 df 02 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff80214a6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214a6e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214a72:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214a76:	0f 95 c0             	setne  %al
ffffffff80214a79:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a7c:	48 85 c0             	test   %rax,%rax
ffffffff80214a7f:	74 0c                	je     ffffffff80214a8d <_RME_Prc_Pgt+0x202>
ffffffff80214a81:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214a88:	e9 bc 02 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat); 
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80214a8d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214a91:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214a96:	48 85 c0             	test   %rax,%rax
ffffffff80214a99:	0f 85 98 00 00 00    	jne    ffffffff80214b37 <_RME_Prc_Pgt+0x2ac>
ffffffff80214a9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214aa3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214aa7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80214aab:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214aae:	0f 93 c0             	setae  %al
ffffffff80214ab1:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ab4:	48 85 c0             	test   %rax,%rax
ffffffff80214ab7:	74 0c                	je     ffffffff80214ac5 <_RME_Prc_Pgt+0x23a>
ffffffff80214ab9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214ac0:	e9 84 02 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff80214ac5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214ac9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214acd:	48 89 c2             	mov    %rax,%rdx
ffffffff80214ad0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214ad4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214ad8:	48 01 d0             	add    %rdx,%rax
ffffffff80214adb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214adf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214ae3:	48 8b 00             	mov    (%rax),%rax
ffffffff80214ae6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214aea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214aee:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214af2:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214af5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214af9:	0f 94 c0             	sete   %al
ffffffff80214afc:	0f b6 c0             	movzbl %al,%eax
ffffffff80214aff:	48 85 c0             	test   %rax,%rax
ffffffff80214b02:	74 0c                	je     ffffffff80214b10 <_RME_Prc_Pgt+0x285>
ffffffff80214b04:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214b0b:	e9 39 02 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff80214b10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214b14:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214b18:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214b1c:	0f 95 c0             	setne  %al
ffffffff80214b1f:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b22:	48 85 c0             	test   %rax,%rax
ffffffff80214b25:	0f 84 4c 01 00 00    	je     ffffffff80214c77 <_RME_Prc_Pgt+0x3ec>
ffffffff80214b2b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214b32:	e9 12 02 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff80214b37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214b3b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214b3f:	48 89 c2             	mov    %rax,%rdx
ffffffff80214b42:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214b46:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214b4a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214b4d:	0f 93 c0             	setae  %al
ffffffff80214b50:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b53:	48 85 c0             	test   %rax,%rax
ffffffff80214b56:	74 0c                	je     ffffffff80214b64 <_RME_Prc_Pgt+0x2d9>
ffffffff80214b58:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214b5f:	e9 e5 01 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff80214b64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214b68:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214b6c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214b70:	48 89 c2             	mov    %rax,%rdx
ffffffff80214b73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214b77:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214b7b:	48 01 d0             	add    %rdx,%rax
ffffffff80214b7e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214b82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214b86:	48 8b 00             	mov    (%rax),%rax
ffffffff80214b89:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214b8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214b91:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214b95:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214b98:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214b9c:	0f 94 c0             	sete   %al
ffffffff80214b9f:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ba2:	48 85 c0             	test   %rax,%rax
ffffffff80214ba5:	74 0c                	je     ffffffff80214bb3 <_RME_Prc_Pgt+0x328>
ffffffff80214ba7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214bae:	e9 96 01 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff80214bb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214bb7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214bbb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214bbf:	0f 95 c0             	setne  %al
ffffffff80214bc2:	0f b6 c0             	movzbl %al,%eax
ffffffff80214bc5:	48 85 c0             	test   %rax,%rax
ffffffff80214bc8:	74 0c                	je     ffffffff80214bd6 <_RME_Prc_Pgt+0x34b>
ffffffff80214bca:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214bd1:	e9 73 01 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff80214bd6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214bda:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214bdf:	48 89 c2             	mov    %rax,%rdx
ffffffff80214be2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214be6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214bea:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214bed:	0f 93 c0             	setae  %al
ffffffff80214bf0:	0f b6 c0             	movzbl %al,%eax
ffffffff80214bf3:	48 85 c0             	test   %rax,%rax
ffffffff80214bf6:	74 0c                	je     ffffffff80214c04 <_RME_Prc_Pgt+0x379>
ffffffff80214bf8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214bff:	e9 45 01 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff80214c04:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214c08:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214c0d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214c11:	48 89 c2             	mov    %rax,%rdx
ffffffff80214c14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c18:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214c1c:	48 01 d0             	add    %rdx,%rax
ffffffff80214c1f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214c23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c27:	48 8b 00             	mov    (%rax),%rax
ffffffff80214c2a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214c2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214c32:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214c36:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214c39:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214c3d:	0f 94 c0             	sete   %al
ffffffff80214c40:	0f b6 c0             	movzbl %al,%eax
ffffffff80214c43:	48 85 c0             	test   %rax,%rax
ffffffff80214c46:	74 0c                	je     ffffffff80214c54 <_RME_Prc_Pgt+0x3c9>
ffffffff80214c48:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214c4f:	e9 f5 00 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
ffffffff80214c54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214c58:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214c5c:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214c60:	0f 95 c0             	setne  %al
ffffffff80214c63:	0f b6 c0             	movzbl %al,%eax
ffffffff80214c66:	48 85 c0             	test   %rax,%rax
ffffffff80214c69:	74 0c                	je     ffffffff80214c77 <_RME_Prc_Pgt+0x3ec>
ffffffff80214c6b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214c72:	e9 d2 00 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
                   struct RME_Cap_Pgt*,Pgt_New,Type_Stat);
#endif
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
ffffffff80214c77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214c7b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214c7f:	83 e0 08             	and    $0x8,%eax
ffffffff80214c82:	48 85 c0             	test   %rax,%rax
ffffffff80214c85:	0f 94 c0             	sete   %al
ffffffff80214c88:	0f b6 c0             	movzbl %al,%eax
ffffffff80214c8b:	48 85 c0             	test   %rax,%rax
ffffffff80214c8e:	74 0c                	je     ffffffff80214c9c <_RME_Prc_Pgt+0x411>
ffffffff80214c90:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214c97:	e9 ad 00 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_New,RME_PGT_FLAG_PRC_PGT);
ffffffff80214c9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214ca0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214ca4:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80214ca9:	48 85 c0             	test   %rax,%rax
ffffffff80214cac:	0f 94 c0             	sete   %al
ffffffff80214caf:	0f b6 c0             	movzbl %al,%eax
ffffffff80214cb2:	48 85 c0             	test   %rax,%rax
ffffffff80214cb5:	74 0c                	je     ffffffff80214cc3 <_RME_Prc_Pgt+0x438>
ffffffff80214cb7:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214cbe:	e9 86 00 00 00       	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
#endif
    
    Pgt_Old=Prc_Op->Pgt;
ffffffff80214cc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214cc7:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80214ccb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
#if(RME_PGT_RAW_ENABLE==0U)
    /* Convert to root */
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff80214ccf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214cd3:	48 8b 00             	mov    (%rax),%rax
ffffffff80214cd6:	89 c0                	mov    %eax,%eax
ffffffff80214cd8:	48 85 c0             	test   %rax,%rax
ffffffff80214cdb:	74 0a                	je     ffffffff80214ce7 <_RME_Prc_Pgt+0x45c>
ffffffff80214cdd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214ce1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214ce5:	eb 04                	jmp    ffffffff80214ceb <_RME_Prc_Pgt+0x460>
ffffffff80214ce7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214ceb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* Actually commit the change */
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Pgt)),
ffffffff80214cef:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80214cf3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214cf7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80214cfb:	48 83 c1 30          	add    $0x30,%rcx
ffffffff80214cff:	48 89 c6             	mov    %rax,%rsi
ffffffff80214d02:	48 89 cf             	mov    %rcx,%rdi
ffffffff80214d05:	e8 54 7a ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80214d0a:	48 85 c0             	test   %rax,%rax
ffffffff80214d0d:	75 09                	jne    ffffffff80214d18 <_RME_Prc_Pgt+0x48d>
                     Raw_Pgt)==RME_CASFAIL)
#endif
    {
        RME_COV_MARKER();
        
        return RME_ERR_PTH_CONFLICT;
ffffffff80214d0f:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff80214d16:	eb 31                	jmp    ffffffff80214d49 <_RME_Prc_Pgt+0x4be>
        /* No action required */
    }
    
    /* Reference new table and dereference the old table */
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Pgt_New->Head.Root_Ref),1);
ffffffff80214d18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214d1c:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214d20:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214d25:	48 89 c7             	mov    %rax,%rdi
ffffffff80214d28:	e8 66 7a ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    RME_FETCH_ADD(&(Pgt_Old->Head.Root_Ref),-1);
ffffffff80214d2d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214d31:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214d35:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80214d3c:	48 89 c7             	mov    %rax,%rdi
ffffffff80214d3f:	e8 4f 7a ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif
    
    return 0;
ffffffff80214d44:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80214d49:	c9                   	leave
ffffffff80214d4a:	c3                   	ret

ffffffff80214d4b <_RME_Thd_Boot_Crt>:
                            rme_cid_t Cap_Thd,
                            rme_cid_t Cap_Prc,
                            rme_ptr_t Vaddr,
                            rme_ptr_t Prio,
                            struct RME_CPU_Local* Local)
{
ffffffff80214d4b:	f3 0f 1e fa          	endbr64
ffffffff80214d4f:	55                   	push   %rbp
ffffffff80214d50:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214d53:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80214d57:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80214d5b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80214d5f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80214d63:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80214d67:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80214d6b:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    struct RME_Cap_Prc* Prc_Root;
    struct RME_Thd_Struct* Thread;
    rme_ptr_t Type_Stat;
    
    /* Check whether the priority level is allowed */
    if(Prio>=RME_PREEMPT_PRIO_NUM)
ffffffff80214d6f:	48 83 7d a0 3f       	cmpq   $0x3f,-0x60(%rbp)
ffffffff80214d74:	76 0c                	jbe    ffffffff80214d82 <_RME_Thd_Boot_Crt+0x37>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80214d76:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80214d7d:	e9 47 06 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214d82:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214d86:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214d8b:	48 85 c0             	test   %rax,%rax
ffffffff80214d8e:	0f 85 98 00 00 00    	jne    ffffffff80214e2c <_RME_Thd_Boot_Crt+0xe1>
ffffffff80214d94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214d98:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214d9c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80214da0:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214da3:	0f 93 c0             	setae  %al
ffffffff80214da6:	0f b6 c0             	movzbl %al,%eax
ffffffff80214da9:	48 85 c0             	test   %rax,%rax
ffffffff80214dac:	74 0c                	je     ffffffff80214dba <_RME_Thd_Boot_Crt+0x6f>
ffffffff80214dae:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214db5:	e9 0f 06 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214dba:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214dbe:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214dc2:	48 89 c2             	mov    %rax,%rdx
ffffffff80214dc5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214dc9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214dcd:	48 01 d0             	add    %rdx,%rax
ffffffff80214dd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214dd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214dd8:	48 8b 00             	mov    (%rax),%rax
ffffffff80214ddb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214ddf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214de3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214de7:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214dea:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214dee:	0f 94 c0             	sete   %al
ffffffff80214df1:	0f b6 c0             	movzbl %al,%eax
ffffffff80214df4:	48 85 c0             	test   %rax,%rax
ffffffff80214df7:	74 0c                	je     ffffffff80214e05 <_RME_Thd_Boot_Crt+0xba>
ffffffff80214df9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214e00:	e9 c4 05 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214e05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214e09:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214e0d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214e11:	0f 95 c0             	setne  %al
ffffffff80214e14:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e17:	48 85 c0             	test   %rax,%rax
ffffffff80214e1a:	0f 84 4c 01 00 00    	je     ffffffff80214f6c <_RME_Thd_Boot_Crt+0x221>
ffffffff80214e20:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214e27:	e9 9d 05 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214e2c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214e30:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214e34:	48 89 c2             	mov    %rax,%rdx
ffffffff80214e37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214e3b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214e3f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214e42:	0f 93 c0             	setae  %al
ffffffff80214e45:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e48:	48 85 c0             	test   %rax,%rax
ffffffff80214e4b:	74 0c                	je     ffffffff80214e59 <_RME_Thd_Boot_Crt+0x10e>
ffffffff80214e4d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214e54:	e9 70 05 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214e59:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214e5d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214e61:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214e65:	48 89 c2             	mov    %rax,%rdx
ffffffff80214e68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214e6c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214e70:	48 01 d0             	add    %rdx,%rax
ffffffff80214e73:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214e77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214e7b:	48 8b 00             	mov    (%rax),%rax
ffffffff80214e7e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214e82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214e86:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214e8a:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214e8d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214e91:	0f 94 c0             	sete   %al
ffffffff80214e94:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e97:	48 85 c0             	test   %rax,%rax
ffffffff80214e9a:	74 0c                	je     ffffffff80214ea8 <_RME_Thd_Boot_Crt+0x15d>
ffffffff80214e9c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214ea3:	e9 21 05 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214ea8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214eac:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214eb0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214eb4:	0f 95 c0             	setne  %al
ffffffff80214eb7:	0f b6 c0             	movzbl %al,%eax
ffffffff80214eba:	48 85 c0             	test   %rax,%rax
ffffffff80214ebd:	74 0c                	je     ffffffff80214ecb <_RME_Thd_Boot_Crt+0x180>
ffffffff80214ebf:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214ec6:	e9 fe 04 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214ecb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214ecf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214ed4:	48 89 c2             	mov    %rax,%rdx
ffffffff80214ed7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214edb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214edf:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214ee2:	0f 93 c0             	setae  %al
ffffffff80214ee5:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ee8:	48 85 c0             	test   %rax,%rax
ffffffff80214eeb:	74 0c                	je     ffffffff80214ef9 <_RME_Thd_Boot_Crt+0x1ae>
ffffffff80214eed:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214ef4:	e9 d0 04 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214ef9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214efd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214f02:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214f06:	48 89 c2             	mov    %rax,%rdx
ffffffff80214f09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214f0d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214f11:	48 01 d0             	add    %rdx,%rax
ffffffff80214f14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214f18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214f1c:	48 8b 00             	mov    (%rax),%rax
ffffffff80214f1f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214f23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214f27:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214f2b:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214f2e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214f32:	0f 94 c0             	sete   %al
ffffffff80214f35:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f38:	48 85 c0             	test   %rax,%rax
ffffffff80214f3b:	74 0c                	je     ffffffff80214f49 <_RME_Thd_Boot_Crt+0x1fe>
ffffffff80214f3d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214f44:	e9 80 04 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214f49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214f4d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214f51:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214f55:	0f 95 c0             	setne  %al
ffffffff80214f58:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f5b:	48 85 c0             	test   %rax,%rax
ffffffff80214f5e:	74 0c                	je     ffffffff80214f6c <_RME_Thd_Boot_Crt+0x221>
ffffffff80214f60:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214f67:	e9 5d 04 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80214f6c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80214f70:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214f75:	48 85 c0             	test   %rax,%rax
ffffffff80214f78:	0f 85 98 00 00 00    	jne    ffffffff80215016 <_RME_Thd_Boot_Crt+0x2cb>
ffffffff80214f7e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214f82:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214f86:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80214f8a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214f8d:	0f 93 c0             	setae  %al
ffffffff80214f90:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f93:	48 85 c0             	test   %rax,%rax
ffffffff80214f96:	74 0c                	je     ffffffff80214fa4 <_RME_Thd_Boot_Crt+0x259>
ffffffff80214f98:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214f9f:	e9 25 04 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214fa4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80214fa8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214fac:	48 89 c2             	mov    %rax,%rdx
ffffffff80214faf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214fb3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214fb7:	48 01 d0             	add    %rdx,%rax
ffffffff80214fba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214fbe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214fc2:	48 8b 00             	mov    (%rax),%rax
ffffffff80214fc5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214fc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214fcd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214fd1:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214fd4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214fd8:	0f 94 c0             	sete   %al
ffffffff80214fdb:	0f b6 c0             	movzbl %al,%eax
ffffffff80214fde:	48 85 c0             	test   %rax,%rax
ffffffff80214fe1:	74 0c                	je     ffffffff80214fef <_RME_Thd_Boot_Crt+0x2a4>
ffffffff80214fe3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214fea:	e9 da 03 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214fef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214ff3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214ff7:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214ffb:	0f 95 c0             	setne  %al
ffffffff80214ffe:	0f b6 c0             	movzbl %al,%eax
ffffffff80215001:	48 85 c0             	test   %rax,%rax
ffffffff80215004:	0f 84 4c 01 00 00    	je     ffffffff80215156 <_RME_Thd_Boot_Crt+0x40b>
ffffffff8021500a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215011:	e9 b3 03 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80215016:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021501a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021501e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215021:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215025:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215029:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021502c:	0f 93 c0             	setae  %al
ffffffff8021502f:	0f b6 c0             	movzbl %al,%eax
ffffffff80215032:	48 85 c0             	test   %rax,%rax
ffffffff80215035:	74 0c                	je     ffffffff80215043 <_RME_Thd_Boot_Crt+0x2f8>
ffffffff80215037:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021503e:	e9 86 03 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80215043:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80215047:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021504b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021504f:	48 89 c2             	mov    %rax,%rdx
ffffffff80215052:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215056:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021505a:	48 01 d0             	add    %rdx,%rax
ffffffff8021505d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215061:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215065:	48 8b 00             	mov    (%rax),%rax
ffffffff80215068:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021506c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215070:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215074:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215077:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021507b:	0f 94 c0             	sete   %al
ffffffff8021507e:	0f b6 c0             	movzbl %al,%eax
ffffffff80215081:	48 85 c0             	test   %rax,%rax
ffffffff80215084:	74 0c                	je     ffffffff80215092 <_RME_Thd_Boot_Crt+0x347>
ffffffff80215086:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021508d:	e9 37 03 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80215092:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215096:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021509a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021509e:	0f 95 c0             	setne  %al
ffffffff802150a1:	0f b6 c0             	movzbl %al,%eax
ffffffff802150a4:	48 85 c0             	test   %rax,%rax
ffffffff802150a7:	74 0c                	je     ffffffff802150b5 <_RME_Thd_Boot_Crt+0x36a>
ffffffff802150a9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802150b0:	e9 14 03 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff802150b5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802150b9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802150be:	48 89 c2             	mov    %rax,%rdx
ffffffff802150c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802150c5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802150c9:	48 39 c2             	cmp    %rax,%rdx
ffffffff802150cc:	0f 93 c0             	setae  %al
ffffffff802150cf:	0f b6 c0             	movzbl %al,%eax
ffffffff802150d2:	48 85 c0             	test   %rax,%rax
ffffffff802150d5:	74 0c                	je     ffffffff802150e3 <_RME_Thd_Boot_Crt+0x398>
ffffffff802150d7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802150de:	e9 e6 02 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff802150e3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802150e7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802150ec:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802150f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802150f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802150f7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802150fb:	48 01 d0             	add    %rdx,%rax
ffffffff802150fe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215102:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215106:	48 8b 00             	mov    (%rax),%rax
ffffffff80215109:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021510d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215111:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215115:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215118:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021511c:	0f 94 c0             	sete   %al
ffffffff8021511f:	0f b6 c0             	movzbl %al,%eax
ffffffff80215122:	48 85 c0             	test   %rax,%rax
ffffffff80215125:	74 0c                	je     ffffffff80215133 <_RME_Thd_Boot_Crt+0x3e8>
ffffffff80215127:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021512e:	e9 96 02 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80215133:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215137:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021513b:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8021513f:	0f 95 c0             	setne  %al
ffffffff80215142:	0f b6 c0             	movzbl %al,%eax
ffffffff80215145:	48 85 c0             	test   %rax,%rax
ffffffff80215148:	74 0c                	je     ffffffff80215156 <_RME_Thd_Boot_Crt+0x40b>
ffffffff8021514a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215151:	e9 73 02 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);   
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80215156:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021515a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021515e:	83 e0 01             	and    $0x1,%eax
ffffffff80215161:	48 85 c0             	test   %rax,%rax
ffffffff80215164:	0f 94 c0             	sete   %al
ffffffff80215167:	0f b6 c0             	movzbl %al,%eax
ffffffff8021516a:	48 85 c0             	test   %rax,%rax
ffffffff8021516d:	74 0c                	je     ffffffff8021517b <_RME_Thd_Boot_Crt+0x430>
ffffffff8021516f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215176:	e9 4e 02 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff8021517b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021517f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215183:	83 e0 02             	and    $0x2,%eax
ffffffff80215186:	48 85 c0             	test   %rax,%rax
ffffffff80215189:	0f 94 c0             	sete   %al
ffffffff8021518c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021518f:	48 85 c0             	test   %rax,%rax
ffffffff80215192:	74 0c                	je     ffffffff802151a0 <_RME_Thd_Boot_Crt+0x455>
ffffffff80215194:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021519b:	e9 29 02 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff802151a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802151a4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802151a8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff802151ac:	48 39 c2             	cmp    %rax,%rdx
ffffffff802151af:	0f 93 c0             	setae  %al
ffffffff802151b2:	0f b6 c0             	movzbl %al,%eax
ffffffff802151b5:	48 85 c0             	test   %rax,%rax
ffffffff802151b8:	74 0c                	je     ffffffff802151c6 <_RME_Thd_Boot_Crt+0x47b>
ffffffff802151ba:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802151c1:	e9 03 02 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff802151c6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802151ca:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802151ce:	48 89 c2             	mov    %rax,%rdx
ffffffff802151d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802151d5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802151d9:	48 01 d0             	add    %rdx,%rax
ffffffff802151dc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff802151e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802151e4:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802151eb:	00 00 00 
ffffffff802151ee:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802151f3:	48 89 c7             	mov    %rax,%rdi
ffffffff802151f6:	e8 63 75 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802151fb:	48 85 c0             	test   %rax,%rax
ffffffff802151fe:	0f 94 c0             	sete   %al
ffffffff80215201:	0f b6 c0             	movzbl %al,%eax
ffffffff80215204:	48 85 c0             	test   %rax,%rax
ffffffff80215207:	74 0c                	je     ffffffff80215215 <_RME_Thd_Boot_Crt+0x4ca>
ffffffff80215209:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80215210:	e9 b4 01 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
ffffffff80215215:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021521a:	e8 f2 75 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8021521f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80215223:	48 89 42 20          	mov    %rax,0x20(%rdx)
     
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_THD_SIZE(0U))!=0)
ffffffff80215227:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021522b:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff80215230:	48 89 c7             	mov    %rax,%rdi
ffffffff80215233:	e8 06 d1 ff ff       	call   ffffffff8021233e <_RME_Kot_Mark>
ffffffff80215238:	48 85 c0             	test   %rax,%rax
ffffffff8021523b:	74 17                	je     ffffffff80215254 <_RME_Thd_Boot_Crt+0x509>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff8021523d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215241:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80215248:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8021524f:	e9 75 01 00 00       	jmp    ffffffff802153c9 <_RME_Thd_Boot_Crt+0x67e>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    Thread=(struct RME_Thd_Struct*)Vaddr;
ffffffff80215254:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215258:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* The TID of these threads are by default taken care of by the kernel */
    Thread->Sched.TID=0U;
ffffffff8021525c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215260:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80215267:	00 
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff80215268:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021526c:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff80215273:	ff ff 7f 
ffffffff80215276:	48 89 48 30          	mov    %rcx,0x30(%rax)
    Thread->Sched.State=RME_THD_READY;
ffffffff8021527a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021527e:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80215285:	00 
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80215286:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021528a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021528d:	89 c0                	mov    %eax,%eax
ffffffff8021528f:	48 85 c0             	test   %rax,%rax
ffffffff80215292:	74 0a                	je     ffffffff8021529e <_RME_Thd_Boot_Crt+0x553>
ffffffff80215294:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215298:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021529c:	eb 04                	jmp    ffffffff802152a2 <_RME_Thd_Boot_Crt+0x557>
ffffffff8021529e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802152a2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Thread->Sched.Prc=Prc_Root;
ffffffff802152a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152aa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802152ae:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Thread->Sched.Signal=0U;
ffffffff802152b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152b6:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff802152bd:	00 
    Thread->Sched.Prio=Prio;
ffffffff802152be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152c2:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff802152c6:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Thread->Sched.Prio_Max=RME_PREEMPT_PRIO_NUM-1U;
ffffffff802152ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152ce:	48 c7 40 48 3f 00 00 	movq   $0x3f,0x48(%rax)
ffffffff802152d5:	00 
    /* Set scheduler reference to 1 so cannot be free */
    Thread->Sched.Sched_Ref=1U;
ffffffff802152d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152da:	48 c7 40 60 01 00 00 	movq   $0x1,0x60(%rax)
ffffffff802152e1:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff802152e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152e6:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff802152ed:	00 
    /* Bind the thread to the current CPU */
    Thread->Sched.Local=Local;
ffffffff802152ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152f2:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff802152f6:	48 89 50 28          	mov    %rdx,0x28(%rax)
    /* This is a marking that this thread haven't sent any notifications */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff802152fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152fe:	48 83 c0 10          	add    $0x10,%rax
ffffffff80215302:	48 89 c7             	mov    %rax,%rdi
ffffffff80215305:	e8 72 7a ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff8021530a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021530e:	48 83 c0 78          	add    $0x78,%rax
ffffffff80215312:	48 89 c7             	mov    %rax,%rdi
ffffffff80215315:	e8 62 7a ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    /* Point its pointer to itself - this will never be a hypervisor thread */
    Thread->Ctx.Hyp_Attr=0U;
ffffffff8021531a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021531e:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
ffffffff80215325:	00 00 00 00 
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80215329:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021532d:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff80215333:	48 89 c2             	mov    %rax,%rdx
ffffffff80215336:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021533a:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    /* Initialize the invocation stack */
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff80215341:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215345:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021534b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021534e:	e8 29 7a ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    Thread->Ctx.Invstk_Depth=0U;
ffffffff80215353:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215357:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
ffffffff8021535e:	00 00 00 00 
    
    /* Info init */
    Thd_Crt->Head.Root_Ref=1U;
ffffffff80215362:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215366:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8021536d:	00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff8021536e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215372:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80215376:	48 89 50 18          	mov    %rdx,0x18(%rax)
    /* This can only be a parent, and not a child, and cannot be freed. Additionally,
     * this should not be blocked on any endpoint. Any attempt to block this thread will fail.
     * Setting execution information for this is also prohibited. */
    Thd_Crt->Head.Flag=RME_THD_FLAG_SCHED_PRIO|RME_THD_FLAG_SCHED_PARENT|
ffffffff8021537a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021537e:	48 c7 40 10 ec 01 00 	movq   $0x1ec,0x10(%rax)
ffffffff80215385:	00 
                       RME_THD_FLAG_XFER_DST|RME_THD_FLAG_XFER_SRC|
                       RME_THD_FLAG_SCHED_RCV|RME_THD_FLAG_SWT;

    /* Referece process */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref), 1U);
ffffffff80215386:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021538a:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021538e:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80215393:	48 89 c7             	mov    %rax,%rdi
ffffffff80215396:	e8 f8 73 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Insert this into the runqueue, and set current thread to it */
    _RME_Run_Ins(Thread);
ffffffff8021539b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021539f:	48 89 c7             	mov    %rax,%rdi
ffffffff802153a2:	e8 c4 d9 ff ff       	call   ffffffff80212d6b <_RME_Run_Ins>
    Local->Thd_Cur=Thread;
ffffffff802153a7:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802153ab:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802153af:	48 89 50 08          	mov    %rdx,0x8(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff802153b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802153b7:	48 b9 00 00 00 00 00 	movabs $0x6000000000000,%rcx
ffffffff802153be:	00 06 00 
ffffffff802153c1:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_THD,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff802153c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802153c9:	c9                   	leave
ffffffff802153ca:	c3                   	ret

ffffffff802153cb <_RME_Thd_Crt>:
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Prio_Max,
                              rme_ptr_t Raddr,
                              rme_ptr_t Attr,
                              rme_ptr_t Is_Hyp)
{
ffffffff802153cb:	f3 0f 1e fa          	endbr64
ffffffff802153cf:	55                   	push   %rbp
ffffffff802153d0:	48 89 e5             	mov    %rsp,%rbp
ffffffff802153d3:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff802153d7:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff802153db:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff802153df:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff802153e3:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff802153e7:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff802153eb:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Vaddr;
    rme_ptr_t Size;
    
    /* See if the maximum priority relationship is correct - a thread
     * can never create a thread with higher maximum priority */
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
ffffffff802153ef:	e8 4b 64 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802153f4:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802153f8:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff802153fc:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
ffffffff80215400:	73 0c                	jae    ffffffff8021540e <_RME_Thd_Crt+0x43>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80215402:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80215409:	e9 2b 09 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021540e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80215412:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215417:	48 85 c0             	test   %rax,%rax
ffffffff8021541a:	0f 85 98 00 00 00    	jne    ffffffff802154b8 <_RME_Thd_Crt+0xed>
ffffffff80215420:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215424:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215428:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8021542c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021542f:	0f 93 c0             	setae  %al
ffffffff80215432:	0f b6 c0             	movzbl %al,%eax
ffffffff80215435:	48 85 c0             	test   %rax,%rax
ffffffff80215438:	74 0c                	je     ffffffff80215446 <_RME_Thd_Crt+0x7b>
ffffffff8021543a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215441:	e9 f3 08 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215446:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021544a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021544e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215451:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215455:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215459:	48 01 d0             	add    %rdx,%rax
ffffffff8021545c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215460:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215464:	48 8b 00             	mov    (%rax),%rax
ffffffff80215467:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021546b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021546f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215473:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215476:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021547a:	0f 94 c0             	sete   %al
ffffffff8021547d:	0f b6 c0             	movzbl %al,%eax
ffffffff80215480:	48 85 c0             	test   %rax,%rax
ffffffff80215483:	74 0c                	je     ffffffff80215491 <_RME_Thd_Crt+0xc6>
ffffffff80215485:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021548c:	e9 a8 08 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215491:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215495:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215499:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021549d:	0f 95 c0             	setne  %al
ffffffff802154a0:	0f b6 c0             	movzbl %al,%eax
ffffffff802154a3:	48 85 c0             	test   %rax,%rax
ffffffff802154a6:	0f 84 4c 01 00 00    	je     ffffffff802155f8 <_RME_Thd_Crt+0x22d>
ffffffff802154ac:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802154b3:	e9 81 08 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff802154b8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802154bc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802154c0:	48 89 c2             	mov    %rax,%rdx
ffffffff802154c3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802154c7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802154cb:	48 39 c2             	cmp    %rax,%rdx
ffffffff802154ce:	0f 93 c0             	setae  %al
ffffffff802154d1:	0f b6 c0             	movzbl %al,%eax
ffffffff802154d4:	48 85 c0             	test   %rax,%rax
ffffffff802154d7:	74 0c                	je     ffffffff802154e5 <_RME_Thd_Crt+0x11a>
ffffffff802154d9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802154e0:	e9 54 08 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff802154e5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802154e9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802154ed:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802154f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802154f4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802154f8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802154fc:	48 01 d0             	add    %rdx,%rax
ffffffff802154ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215503:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215507:	48 8b 00             	mov    (%rax),%rax
ffffffff8021550a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021550e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215512:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215516:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215519:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021551d:	0f 94 c0             	sete   %al
ffffffff80215520:	0f b6 c0             	movzbl %al,%eax
ffffffff80215523:	48 85 c0             	test   %rax,%rax
ffffffff80215526:	74 0c                	je     ffffffff80215534 <_RME_Thd_Crt+0x169>
ffffffff80215528:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021552f:	e9 05 08 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215534:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215538:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021553c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215540:	0f 95 c0             	setne  %al
ffffffff80215543:	0f b6 c0             	movzbl %al,%eax
ffffffff80215546:	48 85 c0             	test   %rax,%rax
ffffffff80215549:	74 0c                	je     ffffffff80215557 <_RME_Thd_Crt+0x18c>
ffffffff8021554b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215552:	e9 e2 07 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215557:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021555b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215560:	48 89 c2             	mov    %rax,%rdx
ffffffff80215563:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215567:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021556b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021556e:	0f 93 c0             	setae  %al
ffffffff80215571:	0f b6 c0             	movzbl %al,%eax
ffffffff80215574:	48 85 c0             	test   %rax,%rax
ffffffff80215577:	74 0c                	je     ffffffff80215585 <_RME_Thd_Crt+0x1ba>
ffffffff80215579:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215580:	e9 b4 07 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215585:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80215589:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021558e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215592:	48 89 c2             	mov    %rax,%rdx
ffffffff80215595:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215599:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021559d:	48 01 d0             	add    %rdx,%rax
ffffffff802155a0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802155a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802155a8:	48 8b 00             	mov    (%rax),%rax
ffffffff802155ab:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802155af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802155b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802155b7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802155ba:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802155be:	0f 94 c0             	sete   %al
ffffffff802155c1:	0f b6 c0             	movzbl %al,%eax
ffffffff802155c4:	48 85 c0             	test   %rax,%rax
ffffffff802155c7:	74 0c                	je     ffffffff802155d5 <_RME_Thd_Crt+0x20a>
ffffffff802155c9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802155d0:	e9 64 07 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff802155d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802155d9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802155dd:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802155e1:	0f 95 c0             	setne  %al
ffffffff802155e4:	0f b6 c0             	movzbl %al,%eax
ffffffff802155e7:	48 85 c0             	test   %rax,%rax
ffffffff802155ea:	74 0c                	je     ffffffff802155f8 <_RME_Thd_Crt+0x22d>
ffffffff802155ec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802155f3:	e9 41 07 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff802155f8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802155fc:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215601:	48 85 c0             	test   %rax,%rax
ffffffff80215604:	0f 85 98 00 00 00    	jne    ffffffff802156a2 <_RME_Thd_Crt+0x2d7>
ffffffff8021560a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021560e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215612:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80215616:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215619:	0f 93 c0             	setae  %al
ffffffff8021561c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021561f:	48 85 c0             	test   %rax,%rax
ffffffff80215622:	74 0c                	je     ffffffff80215630 <_RME_Thd_Crt+0x265>
ffffffff80215624:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021562b:	e9 09 07 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215630:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215634:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215638:	48 89 c2             	mov    %rax,%rdx
ffffffff8021563b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021563f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215643:	48 01 d0             	add    %rdx,%rax
ffffffff80215646:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021564a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021564e:	48 8b 00             	mov    (%rax),%rax
ffffffff80215651:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215655:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215659:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021565d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215660:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215664:	0f 94 c0             	sete   %al
ffffffff80215667:	0f b6 c0             	movzbl %al,%eax
ffffffff8021566a:	48 85 c0             	test   %rax,%rax
ffffffff8021566d:	74 0c                	je     ffffffff8021567b <_RME_Thd_Crt+0x2b0>
ffffffff8021566f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215676:	e9 be 06 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff8021567b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021567f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215683:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215687:	0f 95 c0             	setne  %al
ffffffff8021568a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021568d:	48 85 c0             	test   %rax,%rax
ffffffff80215690:	0f 84 4c 01 00 00    	je     ffffffff802157e2 <_RME_Thd_Crt+0x417>
ffffffff80215696:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021569d:	e9 97 06 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff802156a2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802156a6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802156aa:	48 89 c2             	mov    %rax,%rdx
ffffffff802156ad:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802156b1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802156b5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802156b8:	0f 93 c0             	setae  %al
ffffffff802156bb:	0f b6 c0             	movzbl %al,%eax
ffffffff802156be:	48 85 c0             	test   %rax,%rax
ffffffff802156c1:	74 0c                	je     ffffffff802156cf <_RME_Thd_Crt+0x304>
ffffffff802156c3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802156ca:	e9 6a 06 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff802156cf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802156d3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802156d7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802156db:	48 89 c2             	mov    %rax,%rdx
ffffffff802156de:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802156e2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802156e6:	48 01 d0             	add    %rdx,%rax
ffffffff802156e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802156ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802156f1:	48 8b 00             	mov    (%rax),%rax
ffffffff802156f4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802156f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802156fc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215700:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215703:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215707:	0f 94 c0             	sete   %al
ffffffff8021570a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021570d:	48 85 c0             	test   %rax,%rax
ffffffff80215710:	74 0c                	je     ffffffff8021571e <_RME_Thd_Crt+0x353>
ffffffff80215712:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215719:	e9 1b 06 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff8021571e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215722:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215726:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021572a:	0f 95 c0             	setne  %al
ffffffff8021572d:	0f b6 c0             	movzbl %al,%eax
ffffffff80215730:	48 85 c0             	test   %rax,%rax
ffffffff80215733:	74 0c                	je     ffffffff80215741 <_RME_Thd_Crt+0x376>
ffffffff80215735:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021573c:	e9 f8 05 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215741:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215745:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021574a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021574d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215751:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215755:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215758:	0f 93 c0             	setae  %al
ffffffff8021575b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021575e:	48 85 c0             	test   %rax,%rax
ffffffff80215761:	74 0c                	je     ffffffff8021576f <_RME_Thd_Crt+0x3a4>
ffffffff80215763:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021576a:	e9 ca 05 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff8021576f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215773:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215778:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021577c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021577f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215783:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215787:	48 01 d0             	add    %rdx,%rax
ffffffff8021578a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021578e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215792:	48 8b 00             	mov    (%rax),%rax
ffffffff80215795:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215799:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021579d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802157a1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802157a4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802157a8:	0f 94 c0             	sete   %al
ffffffff802157ab:	0f b6 c0             	movzbl %al,%eax
ffffffff802157ae:	48 85 c0             	test   %rax,%rax
ffffffff802157b1:	74 0c                	je     ffffffff802157bf <_RME_Thd_Crt+0x3f4>
ffffffff802157b3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802157ba:	e9 7a 05 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff802157bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802157c3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802157c7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802157cb:	0f 95 c0             	setne  %al
ffffffff802157ce:	0f b6 c0             	movzbl %al,%eax
ffffffff802157d1:	48 85 c0             	test   %rax,%rax
ffffffff802157d4:	74 0c                	je     ffffffff802157e2 <_RME_Thd_Crt+0x417>
ffffffff802157d6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802157dd:	e9 57 05 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802157e2:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff802157e6:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802157eb:	48 85 c0             	test   %rax,%rax
ffffffff802157ee:	0f 85 98 00 00 00    	jne    ffffffff8021588c <_RME_Thd_Crt+0x4c1>
ffffffff802157f4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802157f8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802157fc:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff80215800:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215803:	0f 93 c0             	setae  %al
ffffffff80215806:	0f b6 c0             	movzbl %al,%eax
ffffffff80215809:	48 85 c0             	test   %rax,%rax
ffffffff8021580c:	74 0c                	je     ffffffff8021581a <_RME_Thd_Crt+0x44f>
ffffffff8021580e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215815:	e9 1f 05 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff8021581a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8021581e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215822:	48 89 c2             	mov    %rax,%rdx
ffffffff80215825:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215829:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021582d:	48 01 d0             	add    %rdx,%rax
ffffffff80215830:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215834:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215838:	48 8b 00             	mov    (%rax),%rax
ffffffff8021583b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021583f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215843:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215847:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021584a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021584e:	0f 94 c0             	sete   %al
ffffffff80215851:	0f b6 c0             	movzbl %al,%eax
ffffffff80215854:	48 85 c0             	test   %rax,%rax
ffffffff80215857:	74 0c                	je     ffffffff80215865 <_RME_Thd_Crt+0x49a>
ffffffff80215859:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215860:	e9 d4 04 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215865:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215869:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021586d:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80215871:	0f 95 c0             	setne  %al
ffffffff80215874:	0f b6 c0             	movzbl %al,%eax
ffffffff80215877:	48 85 c0             	test   %rax,%rax
ffffffff8021587a:	0f 84 4c 01 00 00    	je     ffffffff802159cc <_RME_Thd_Crt+0x601>
ffffffff80215880:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215887:	e9 ad 04 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff8021588c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80215890:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215894:	48 89 c2             	mov    %rax,%rdx
ffffffff80215897:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021589b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021589f:	48 39 c2             	cmp    %rax,%rdx
ffffffff802158a2:	0f 93 c0             	setae  %al
ffffffff802158a5:	0f b6 c0             	movzbl %al,%eax
ffffffff802158a8:	48 85 c0             	test   %rax,%rax
ffffffff802158ab:	74 0c                	je     ffffffff802158b9 <_RME_Thd_Crt+0x4ee>
ffffffff802158ad:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802158b4:	e9 80 04 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff802158b9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff802158bd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802158c1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802158c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802158c8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802158cc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802158d0:	48 01 d0             	add    %rdx,%rax
ffffffff802158d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802158d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802158db:	48 8b 00             	mov    (%rax),%rax
ffffffff802158de:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802158e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802158e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802158ea:	0f b7 c0             	movzwl %ax,%eax
ffffffff802158ed:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802158f1:	0f 94 c0             	sete   %al
ffffffff802158f4:	0f b6 c0             	movzbl %al,%eax
ffffffff802158f7:	48 85 c0             	test   %rax,%rax
ffffffff802158fa:	74 0c                	je     ffffffff80215908 <_RME_Thd_Crt+0x53d>
ffffffff802158fc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215903:	e9 31 04 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215908:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021590c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215910:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215914:	0f 95 c0             	setne  %al
ffffffff80215917:	0f b6 c0             	movzbl %al,%eax
ffffffff8021591a:	48 85 c0             	test   %rax,%rax
ffffffff8021591d:	74 0c                	je     ffffffff8021592b <_RME_Thd_Crt+0x560>
ffffffff8021591f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215926:	e9 0e 04 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff8021592b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8021592f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215934:	48 89 c2             	mov    %rax,%rdx
ffffffff80215937:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021593b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021593f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215942:	0f 93 c0             	setae  %al
ffffffff80215945:	0f b6 c0             	movzbl %al,%eax
ffffffff80215948:	48 85 c0             	test   %rax,%rax
ffffffff8021594b:	74 0c                	je     ffffffff80215959 <_RME_Thd_Crt+0x58e>
ffffffff8021594d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215954:	e9 e0 03 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215959:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8021595d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215962:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215966:	48 89 c2             	mov    %rax,%rdx
ffffffff80215969:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021596d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215971:	48 01 d0             	add    %rdx,%rax
ffffffff80215974:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215978:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021597c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021597f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215983:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215987:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021598b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021598e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215992:	0f 94 c0             	sete   %al
ffffffff80215995:	0f b6 c0             	movzbl %al,%eax
ffffffff80215998:	48 85 c0             	test   %rax,%rax
ffffffff8021599b:	74 0c                	je     ffffffff802159a9 <_RME_Thd_Crt+0x5de>
ffffffff8021599d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802159a4:	e9 90 03 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff802159a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802159ad:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802159b1:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802159b5:	0f 95 c0             	setne  %al
ffffffff802159b8:	0f b6 c0             	movzbl %al,%eax
ffffffff802159bb:	48 85 c0             	test   %rax,%rax
ffffffff802159be:	74 0c                	je     ffffffff802159cc <_RME_Thd_Crt+0x601>
ffffffff802159c0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802159c7:	e9 6d 03 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802159cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802159d0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802159d4:	83 e0 01             	and    $0x1,%eax
ffffffff802159d7:	48 85 c0             	test   %rax,%rax
ffffffff802159da:	0f 94 c0             	sete   %al
ffffffff802159dd:	0f b6 c0             	movzbl %al,%eax
ffffffff802159e0:	48 85 c0             	test   %rax,%rax
ffffffff802159e3:	74 0c                	je     ffffffff802159f1 <_RME_Thd_Crt+0x626>
ffffffff802159e5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802159ec:	e9 48 03 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff802159f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802159f5:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802159f9:	83 e0 02             	and    $0x2,%eax
ffffffff802159fc:	48 85 c0             	test   %rax,%rax
ffffffff802159ff:	0f 94 c0             	sete   %al
ffffffff80215a02:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a05:	48 85 c0             	test   %rax,%rax
ffffffff80215a08:	74 0c                	je     ffffffff80215a16 <_RME_Thd_Crt+0x64b>
ffffffff80215a0a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215a11:	e9 23 03 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
    /* See if the creation is valid for this kmem range */
    if(Is_Hyp==0U)
ffffffff80215a16:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
ffffffff80215a1b:	75 23                	jne    ffffffff80215a40 <_RME_Thd_Crt+0x675>
    {
        RME_COV_MARKER();
        
        Size=RME_THD_SIZE(Attr);
ffffffff80215a1d:	48 c7 45 d8 60 01 00 	movq   $0x160,-0x28(%rbp)
ffffffff80215a24:	00 
#else
        Size=RME_HYP_SIZE;
#endif
    }
    
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff80215a25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215a29:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215a2d:	83 e0 04             	and    $0x4,%eax
ffffffff80215a30:	48 85 c0             	test   %rax,%rax
ffffffff80215a33:	0f 94 c0             	sete   %al
ffffffff80215a36:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a39:	48 85 c0             	test   %rax,%rax
ffffffff80215a3c:	74 1a                	je     ffffffff80215a58 <_RME_Thd_Crt+0x68d>
ffffffff80215a3e:	eb 0c                	jmp    ffffffff80215a4c <_RME_Thd_Crt+0x681>
        return RME_ERR_PTH_HADDR;
ffffffff80215a40:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80215a47:	e9 ed 02 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff80215a4c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215a53:	e9 e1 02 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215a58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215a5c:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80215a60:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80215a64:	48 01 d0             	add    %rdx,%rax
ffffffff80215a67:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80215a6b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215a6f:	48 3b 45 10          	cmp    0x10(%rbp),%rax
ffffffff80215a73:	0f 92 c0             	setb   %al
ffffffff80215a76:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a79:	48 85 c0             	test   %rax,%rax
ffffffff80215a7c:	74 0c                	je     ffffffff80215a8a <_RME_Thd_Crt+0x6bf>
ffffffff80215a7e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215a85:	e9 af 02 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215a8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215a8e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215a92:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff80215a96:	0f 92 c0             	setb   %al
ffffffff80215a99:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a9c:	48 85 c0             	test   %rax,%rax
ffffffff80215a9f:	74 0c                	je     ffffffff80215aad <_RME_Thd_Crt+0x6e2>
ffffffff80215aa1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215aa8:	e9 8c 02 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215aad:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80215ab1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215ab5:	48 01 d0             	add    %rdx,%rax
ffffffff80215ab8:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff80215abc:	0f 92 c0             	setb   %al
ffffffff80215abf:	0f b6 c0             	movzbl %al,%eax
ffffffff80215ac2:	48 85 c0             	test   %rax,%rax
ffffffff80215ac5:	74 0c                	je     ffffffff80215ad3 <_RME_Thd_Crt+0x708>
ffffffff80215ac7:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215ace:	e9 66 02 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215ad3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215ad7:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80215adb:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80215adf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215ae3:	48 01 c8             	add    %rcx,%rax
ffffffff80215ae6:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80215aea:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215aed:	0f 92 c0             	setb   %al
ffffffff80215af0:	0f b6 c0             	movzbl %al,%eax
ffffffff80215af3:	48 85 c0             	test   %rax,%rax
ffffffff80215af6:	74 0c                	je     ffffffff80215b04 <_RME_Thd_Crt+0x739>
ffffffff80215af8:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215aff:	e9 35 02 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff80215b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215b08:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215b0c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
ffffffff80215b10:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215b13:	0f 93 c0             	setae  %al
ffffffff80215b16:	0f b6 c0             	movzbl %al,%eax
ffffffff80215b19:	48 85 c0             	test   %rax,%rax
ffffffff80215b1c:	74 0c                	je     ffffffff80215b2a <_RME_Thd_Crt+0x75f>
ffffffff80215b1e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215b25:	e9 0f 02 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215b2a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80215b2e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215b32:	48 89 c2             	mov    %rax,%rdx
ffffffff80215b35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215b39:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215b3d:	48 01 d0             	add    %rdx,%rax
ffffffff80215b40:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff80215b44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215b48:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80215b4f:	00 00 00 
ffffffff80215b52:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80215b57:	48 89 c7             	mov    %rax,%rdi
ffffffff80215b5a:	e8 ff 6b ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80215b5f:	48 85 c0             	test   %rax,%rax
ffffffff80215b62:	0f 94 c0             	sete   %al
ffffffff80215b65:	0f b6 c0             	movzbl %al,%eax
ffffffff80215b68:	48 85 c0             	test   %rax,%rax
ffffffff80215b6b:	74 0c                	je     ffffffff80215b79 <_RME_Thd_Crt+0x7ae>
ffffffff80215b6d:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80215b74:	e9 c0 01 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
ffffffff80215b79:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80215b7e:	e8 8e 6c ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80215b83:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80215b87:	48 89 42 20          	mov    %rax,0x20(%rdx)
     
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,Size)<0)
ffffffff80215b8b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80215b8f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215b93:	48 89 d6             	mov    %rdx,%rsi
ffffffff80215b96:	48 89 c7             	mov    %rax,%rdi
ffffffff80215b99:	e8 a0 c7 ff ff       	call   ffffffff8021233e <_RME_Kot_Mark>
ffffffff80215b9e:	48 85 c0             	test   %rax,%rax
ffffffff80215ba1:	79 17                	jns    ffffffff80215bba <_RME_Thd_Crt+0x7ef>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff80215ba3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215ba7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80215bae:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80215bb5:	e9 7f 01 00 00       	jmp    ffffffff80215d39 <_RME_Thd_Crt+0x96e>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Object init */
    Thread=(struct RME_Thd_Struct*)Vaddr;
ffffffff80215bba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215bbe:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    /* These thread's TID default to 0, and have no timeslices assigned */
    Thread->Sched.TID=0U;
ffffffff80215bc2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215bc6:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80215bcd:	00 
    Thread->Sched.Slice=0U;
ffffffff80215bce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215bd2:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80215bd9:	00 
    Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80215bda:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215bde:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80215be5:	00 
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80215be6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215bea:	48 8b 00             	mov    (%rax),%rax
ffffffff80215bed:	89 c0                	mov    %eax,%eax
ffffffff80215bef:	48 85 c0             	test   %rax,%rax
ffffffff80215bf2:	74 0a                	je     ffffffff80215bfe <_RME_Thd_Crt+0x833>
ffffffff80215bf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215bf8:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80215bfc:	eb 04                	jmp    ffffffff80215c02 <_RME_Thd_Crt+0x837>
ffffffff80215bfe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215c02:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Thread->Sched.Prc=Prc_Root;
ffffffff80215c06:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c0a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80215c0e:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Thread->Sched.Signal=0U;
ffffffff80215c12:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c16:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff80215c1d:	00 
    Thread->Sched.Prio_Max=Prio_Max;
ffffffff80215c1e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c22:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff80215c26:	48 89 50 48          	mov    %rdx,0x48(%rax)
    Thread->Sched.Sched_Ref=0U;
ffffffff80215c2a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c2e:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
ffffffff80215c35:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff80215c36:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c3a:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff80215c41:	00 
    /* Currently the thread is not bound to any particular CPU */
    Thread->Sched.Local=RME_THD_FREE;
ffffffff80215c42:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c46:	48 c7 40 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%rax)
ffffffff80215c4d:	ff 
    /* This is a marking that this thread haven't sent any notifications */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80215c4e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c52:	48 83 c0 10          	add    $0x10,%rax
ffffffff80215c56:	48 89 c7             	mov    %rax,%rdi
ffffffff80215c59:	e8 1e 71 ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff80215c5e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c62:	48 83 c0 78          	add    $0x78,%rax
ffffffff80215c66:	48 89 c7             	mov    %rax,%rdi
ffffffff80215c69:	e8 0e 71 ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    /* Point its pointer to itself - this is not a hypervisor thread yet */
    if(Is_Hyp==0U)
ffffffff80215c6e:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
ffffffff80215c73:	75 29                	jne    ffffffff80215c9e <_RME_Thd_Crt+0x8d3>
    {
        RME_COV_MARKER();
        
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff80215c75:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c79:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80215c7d:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80215c84:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215c88:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff80215c8e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215c91:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c95:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
ffffffff80215c9c:	eb 2b                	jmp    ffffffff80215cc9 <_RME_Thd_Crt+0x8fe>
    /* Default to HYP_VA_BASE for all created hypervisor threads */
    else
    {
        RME_COV_MARKER();
        
        Thread->Ctx.Hyp_Attr=Attr|RME_THD_HYP_FLAG;
ffffffff80215c9e:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
ffffffff80215ca5:	00 00 80 
ffffffff80215ca8:	48 0b 45 18          	or     0x18(%rbp),%rax
ffffffff80215cac:	48 89 c2             	mov    %rax,%rdx
ffffffff80215caf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cb3:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
        Thread->Ctx.Reg=RME_HYP_VA_BASE;
ffffffff80215cba:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cbe:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
ffffffff80215cc5:	00 00 00 00 
    }
    /* Initialize the invocation stack */
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff80215cc9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ccd:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff80215cd3:	48 89 c7             	mov    %rax,%rdi
ffffffff80215cd6:	e8 a1 70 ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    Thread->Ctx.Invstk_Depth=0U;
ffffffff80215cdb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cdf:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
ffffffff80215ce6:	00 00 00 00 

    /* Header init */
    Thd_Crt->Head.Root_Ref=0U;
ffffffff80215cea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215cee:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80215cf5:	00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff80215cf6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215cfa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80215cfe:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Thd_Crt->Head.Flag=RME_THD_FLAG_ALL;
ffffffff80215d02:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215d06:	48 c7 40 10 ff 01 00 	movq   $0x1ff,0x10(%rax)
ffffffff80215d0d:	00 

    /* Reference process */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref), 1U);
ffffffff80215d0e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80215d12:	48 83 c0 08          	add    $0x8,%rax
ffffffff80215d16:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80215d1b:	48 89 c7             	mov    %rax,%rdi
ffffffff80215d1e:	e8 70 6a ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff80215d23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215d27:	48 b9 00 00 00 00 00 	movabs $0x6000000000000,%rcx
ffffffff80215d2e:	00 06 00 
ffffffff80215d31:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_THD,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80215d34:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80215d39:	c9                   	leave
ffffffff80215d3a:	c3                   	ret

ffffffff80215d3b <_RME_Thd_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Thd)
{
ffffffff80215d3b:	f3 0f 1e fa          	endbr64
ffffffff80215d3f:	55                   	push   %rbp
ffffffff80215d40:	48 89 e5             	mov    %rsp,%rbp
ffffffff80215d43:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80215d47:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80215d4b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80215d4f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    /* These are for deletion */
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80215d53:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d57:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215d5c:	48 85 c0             	test   %rax,%rax
ffffffff80215d5f:	0f 85 98 00 00 00    	jne    ffffffff80215dfd <_RME_Thd_Del+0xc2>
ffffffff80215d65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215d69:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215d6d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80215d71:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215d74:	0f 93 c0             	setae  %al
ffffffff80215d77:	0f b6 c0             	movzbl %al,%eax
ffffffff80215d7a:	48 85 c0             	test   %rax,%rax
ffffffff80215d7d:	74 0c                	je     ffffffff80215d8b <_RME_Thd_Del+0x50>
ffffffff80215d7f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215d86:	e9 33 04 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
ffffffff80215d8b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d8f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215d93:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d96:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215d9a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215d9e:	48 01 d0             	add    %rdx,%rax
ffffffff80215da1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215da5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215da9:	48 8b 00             	mov    (%rax),%rax
ffffffff80215dac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215db0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215db4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215db8:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215dbb:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215dbf:	0f 94 c0             	sete   %al
ffffffff80215dc2:	0f b6 c0             	movzbl %al,%eax
ffffffff80215dc5:	48 85 c0             	test   %rax,%rax
ffffffff80215dc8:	74 0c                	je     ffffffff80215dd6 <_RME_Thd_Del+0x9b>
ffffffff80215dca:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215dd1:	e9 e8 03 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
ffffffff80215dd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215dda:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215dde:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215de2:	0f 95 c0             	setne  %al
ffffffff80215de5:	0f b6 c0             	movzbl %al,%eax
ffffffff80215de8:	48 85 c0             	test   %rax,%rax
ffffffff80215deb:	0f 84 4c 01 00 00    	je     ffffffff80215f3d <_RME_Thd_Del+0x202>
ffffffff80215df1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215df8:	e9 c1 03 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
ffffffff80215dfd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215e01:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215e05:	48 89 c2             	mov    %rax,%rdx
ffffffff80215e08:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215e0c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215e10:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215e13:	0f 93 c0             	setae  %al
ffffffff80215e16:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e19:	48 85 c0             	test   %rax,%rax
ffffffff80215e1c:	74 0c                	je     ffffffff80215e2a <_RME_Thd_Del+0xef>
ffffffff80215e1e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215e25:	e9 94 03 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
ffffffff80215e2a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215e2e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215e32:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215e36:	48 89 c2             	mov    %rax,%rdx
ffffffff80215e39:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215e3d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215e41:	48 01 d0             	add    %rdx,%rax
ffffffff80215e44:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215e48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215e4c:	48 8b 00             	mov    (%rax),%rax
ffffffff80215e4f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215e53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215e57:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215e5b:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215e5e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215e62:	0f 94 c0             	sete   %al
ffffffff80215e65:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e68:	48 85 c0             	test   %rax,%rax
ffffffff80215e6b:	74 0c                	je     ffffffff80215e79 <_RME_Thd_Del+0x13e>
ffffffff80215e6d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215e74:	e9 45 03 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
ffffffff80215e79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215e7d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215e81:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215e85:	0f 95 c0             	setne  %al
ffffffff80215e88:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e8b:	48 85 c0             	test   %rax,%rax
ffffffff80215e8e:	74 0c                	je     ffffffff80215e9c <_RME_Thd_Del+0x161>
ffffffff80215e90:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215e97:	e9 22 03 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
ffffffff80215e9c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ea0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215ea5:	48 89 c2             	mov    %rax,%rdx
ffffffff80215ea8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215eac:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215eb0:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215eb3:	0f 93 c0             	setae  %al
ffffffff80215eb6:	0f b6 c0             	movzbl %al,%eax
ffffffff80215eb9:	48 85 c0             	test   %rax,%rax
ffffffff80215ebc:	74 0c                	je     ffffffff80215eca <_RME_Thd_Del+0x18f>
ffffffff80215ebe:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215ec5:	e9 f4 02 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
ffffffff80215eca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ece:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215ed3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215ed7:	48 89 c2             	mov    %rax,%rdx
ffffffff80215eda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215ede:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215ee2:	48 01 d0             	add    %rdx,%rax
ffffffff80215ee5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215ee9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215eed:	48 8b 00             	mov    (%rax),%rax
ffffffff80215ef0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215ef4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215ef8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215efc:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215eff:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215f03:	0f 94 c0             	sete   %al
ffffffff80215f06:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f09:	48 85 c0             	test   %rax,%rax
ffffffff80215f0c:	74 0c                	je     ffffffff80215f1a <_RME_Thd_Del+0x1df>
ffffffff80215f0e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215f15:	e9 a4 02 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
ffffffff80215f1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215f1e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215f22:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215f26:	0f 95 c0             	setne  %al
ffffffff80215f29:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f2c:	48 85 c0             	test   %rax,%rax
ffffffff80215f2f:	74 0c                	je     ffffffff80215f3d <_RME_Thd_Del+0x202>
ffffffff80215f31:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215f38:	e9 81 02 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80215f3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215f41:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215f45:	83 e0 02             	and    $0x2,%eax
ffffffff80215f48:	48 85 c0             	test   %rax,%rax
ffffffff80215f4b:	0f 94 c0             	sete   %al
ffffffff80215f4e:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f51:	48 85 c0             	test   %rax,%rax
ffffffff80215f54:	74 0c                	je     ffffffff80215f62 <_RME_Thd_Del+0x227>
ffffffff80215f56:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215f5d:	e9 5c 02 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff80215f62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215f66:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215f6a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80215f6e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215f71:	0f 93 c0             	setae  %al
ffffffff80215f74:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f77:	48 85 c0             	test   %rax,%rax
ffffffff80215f7a:	74 0c                	je     ffffffff80215f88 <_RME_Thd_Del+0x24d>
ffffffff80215f7c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215f83:	e9 36 02 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
ffffffff80215f88:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80215f8c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215f90:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215f97:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215f9b:	48 01 d0             	add    %rdx,%rax
ffffffff80215f9e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff80215fa2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215fa6:	48 8b 00             	mov    (%rax),%rax
ffffffff80215fa9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215fad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215fb1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215fb5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215fb8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215fbc:	0f 95 c0             	setne  %al
ffffffff80215fbf:	0f b6 c0             	movzbl %al,%eax
ffffffff80215fc2:	48 85 c0             	test   %rax,%rax
ffffffff80215fc5:	74 0c                	je     ffffffff80215fd3 <_RME_Thd_Del+0x298>
ffffffff80215fc7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215fce:	e9 eb 01 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
ffffffff80215fd3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215fd7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215fdb:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80215fdf:	0f 95 c0             	setne  %al
ffffffff80215fe2:	0f b6 c0             	movzbl %al,%eax
ffffffff80215fe5:	48 85 c0             	test   %rax,%rax
ffffffff80215fe8:	74 0c                	je     ffffffff80215ff6 <_RME_Thd_Del+0x2bb>
ffffffff80215fea:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215ff1:	e9 c8 01 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
ffffffff80215ff6:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80215ffb:	e8 11 68 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80216000:	48 89 c2             	mov    %rax,%rdx
ffffffff80216003:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216007:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8021600b:	48 29 c2             	sub    %rax,%rdx
ffffffff8021600e:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80216012:	0f 96 c0             	setbe  %al
ffffffff80216015:	0f b6 c0             	movzbl %al,%eax
ffffffff80216018:	48 98                	cltq
ffffffff8021601a:	48 85 c0             	test   %rax,%rax
ffffffff8021601d:	74 0c                	je     ffffffff8021602b <_RME_Thd_Del+0x2f0>
ffffffff8021601f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80216026:	e9 93 01 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
ffffffff8021602b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021602f:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216033:	48 85 c0             	test   %rax,%rax
ffffffff80216036:	0f 95 c0             	setne  %al
ffffffff80216039:	0f b6 c0             	movzbl %al,%eax
ffffffff8021603c:	48 85 c0             	test   %rax,%rax
ffffffff8021603f:	74 44                	je     ffffffff80216085 <_RME_Thd_Del+0x34a>
ffffffff80216041:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216045:	89 c0                	mov    %eax,%eax
ffffffff80216047:	48 85 c0             	test   %rax,%rax
ffffffff8021604a:	0f 94 c0             	sete   %al
ffffffff8021604d:	0f b6 c0             	movzbl %al,%eax
ffffffff80216050:	48 85 c0             	test   %rax,%rax
ffffffff80216053:	74 24                	je     ffffffff80216079 <_RME_Thd_Del+0x33e>
ffffffff80216055:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021605c:	00 ff ff 
ffffffff8021605f:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80216063:	48 89 c2             	mov    %rax,%rdx
ffffffff80216066:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021606a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021606e:	48 89 ce             	mov    %rcx,%rsi
ffffffff80216071:	48 89 c7             	mov    %rax,%rdi
ffffffff80216074:	e8 e5 66 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80216079:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80216080:	e9 39 01 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
    
    /* Get the thread */
    Thread=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
ffffffff80216085:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216089:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021608d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* See if the thread is free. If still bound, we cannot proceed to deletion */
    if(Thread->Sched.Local!=RME_THD_FREE)
ffffffff80216091:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216095:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216099:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff8021609d:	74 30                	je     ffffffff802160cf <_RME_Thd_Del+0x394>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Thd_Del,Type_Stat);
ffffffff8021609f:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff802160a6:	00 ff ff 
ffffffff802160a9:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff802160ad:	48 89 c2             	mov    %rax,%rdx
ffffffff802160b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802160b4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff802160b8:	48 89 ce             	mov    %rcx,%rsi
ffffffff802160bb:	48 89 c7             	mov    %rax,%rdi
ffffffff802160be:	e8 9b 66 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_PTH_INVSTATE;
ffffffff802160c3:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802160ca:	e9 ef 00 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Thd_Del,Type_Stat);
ffffffff802160cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802160d3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff802160d7:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802160dc:	48 89 ce             	mov    %rcx,%rsi
ffffffff802160df:	48 89 c7             	mov    %rax,%rdi
ffffffff802160e2:	e8 77 66 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802160e7:	48 85 c0             	test   %rax,%rax
ffffffff802160ea:	0f 94 c0             	sete   %al
ffffffff802160ed:	0f b6 c0             	movzbl %al,%eax
ffffffff802160f0:	48 85 c0             	test   %rax,%rax
ffffffff802160f3:	74 5b                	je     ffffffff80216150 <_RME_Thd_Del+0x415>
ffffffff802160f5:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802160fc:	e9 bd 00 00 00       	jmp    ffffffff802161be <_RME_Thd_Del+0x483>
     * stack to empty, and free all the invocation stubs. This can be virtually
     * unbounded if the invocation stack is just too deep. This is left to the
     * user; if this is what he or she wants, be our guest. */
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
    {
        Invocation=(struct RME_Inv_Struct*)(Thread->Ctx.Invstk.Next);
ffffffff80216101:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216105:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021610c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff80216110:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216114:	48 8b 10             	mov    (%rax),%rdx
ffffffff80216117:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021611b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021611f:	48 89 d6             	mov    %rdx,%rsi
ffffffff80216122:	48 89 c7             	mov    %rax,%rdi
ffffffff80216125:	e8 7c 6c ff ff       	call   ffffffff8020cda6 <_RME_List_Del>
        Invocation->Thd_Act=0U;
ffffffff8021612a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021612e:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80216135:	00 
        Thread->Ctx.Invstk_Depth--;
ffffffff80216136:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021613a:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff80216141:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80216145:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216149:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff80216150:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216154:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8021615b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021615f:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff80216165:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216168:	75 97                	jne    ffffffff80216101 <_RME_Thd_Del+0x3c6>
    }
    RME_ASSERT(Thread->Ctx.Invstk_Depth==0U);
    
    /* Dereference the process */
    RME_FETCH_ADD(&(Thread->Sched.Prc->Head.Root_Ref), -1);
ffffffff8021616a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021616e:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80216172:	48 83 c0 08          	add    $0x8,%rax
ffffffff80216176:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021617d:	48 89 c7             	mov    %rax,%rdi
ffffffff80216180:	e8 0e 66 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Try to depopulate the area - this must be successful */
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)==0U)
ffffffff80216185:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216189:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80216190:	48 85 c0             	test   %rax,%rax
ffffffff80216193:	78 13                	js     ffffffff802161a8 <_RME_Thd_Del+0x46d>
    {
        RME_COV_MARKER();

        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff80216195:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216199:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff8021619e:	48 89 c7             	mov    %rax,%rdi
ffffffff802161a1:	e8 df c4 ff ff       	call   ffffffff80212685 <_RME_Kot_Erase>
ffffffff802161a6:	eb 11                	jmp    ffffffff802161b9 <_RME_Thd_Del+0x47e>
    }
    else
    {
        RME_COV_MARKER();

        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff802161a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802161ac:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff802161b1:	48 89 c7             	mov    %rax,%rdi
ffffffff802161b4:	e8 cc c4 ff ff       	call   ffffffff80212685 <_RME_Kot_Erase>
                   RME_HYP_SIZE)==0);
    }
    
    return 0;
ffffffff802161b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802161be:	c9                   	leave
ffffffff802161bf:	c3                   	ret

ffffffff802161c0 <_RME_Thd_Sched_Bind>:
                                     rme_cid_t Cap_Thd_Sched,
                                     rme_cid_t Cap_Sig,
                                     rme_tid_t TID,
                                     rme_ptr_t Prio,
                                     rme_ptr_t Haddr)
{
ffffffff802161c0:	f3 0f 1e fa          	endbr64
ffffffff802161c4:	55                   	push   %rbp
ffffffff802161c5:	48 89 e5             	mov    %rsp,%rbp
ffffffff802161c8:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff802161cc:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff802161d0:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff802161d4:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff802161d8:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff802161dc:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff802161e0:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Hyp_Attr;
    rme_ptr_t End;

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802161e4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802161e8:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802161ed:	48 85 c0             	test   %rax,%rax
ffffffff802161f0:	0f 85 98 00 00 00    	jne    ffffffff8021628e <_RME_Thd_Sched_Bind+0xce>
ffffffff802161f6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802161fa:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802161fe:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80216202:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216205:	0f 93 c0             	setae  %al
ffffffff80216208:	0f b6 c0             	movzbl %al,%eax
ffffffff8021620b:	48 85 c0             	test   %rax,%rax
ffffffff8021620e:	74 0c                	je     ffffffff8021621c <_RME_Thd_Sched_Bind+0x5c>
ffffffff80216210:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216217:	e9 2e 08 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021621c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216220:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216224:	48 89 c2             	mov    %rax,%rdx
ffffffff80216227:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021622b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021622f:	48 01 d0             	add    %rdx,%rax
ffffffff80216232:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216236:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021623a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021623d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216241:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216245:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216249:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021624c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216250:	0f 94 c0             	sete   %al
ffffffff80216253:	0f b6 c0             	movzbl %al,%eax
ffffffff80216256:	48 85 c0             	test   %rax,%rax
ffffffff80216259:	74 0c                	je     ffffffff80216267 <_RME_Thd_Sched_Bind+0xa7>
ffffffff8021625b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216262:	e9 e3 07 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216267:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021626b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021626f:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216273:	0f 95 c0             	setne  %al
ffffffff80216276:	0f b6 c0             	movzbl %al,%eax
ffffffff80216279:	48 85 c0             	test   %rax,%rax
ffffffff8021627c:	0f 84 4c 01 00 00    	je     ffffffff802163ce <_RME_Thd_Sched_Bind+0x20e>
ffffffff80216282:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216289:	e9 bc 07 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021628e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216292:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216296:	48 89 c2             	mov    %rax,%rdx
ffffffff80216299:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021629d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802162a1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802162a4:	0f 93 c0             	setae  %al
ffffffff802162a7:	0f b6 c0             	movzbl %al,%eax
ffffffff802162aa:	48 85 c0             	test   %rax,%rax
ffffffff802162ad:	74 0c                	je     ffffffff802162bb <_RME_Thd_Sched_Bind+0xfb>
ffffffff802162af:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802162b6:	e9 8f 07 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff802162bb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802162bf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802162c3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802162c7:	48 89 c2             	mov    %rax,%rdx
ffffffff802162ca:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802162ce:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802162d2:	48 01 d0             	add    %rdx,%rax
ffffffff802162d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802162d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802162dd:	48 8b 00             	mov    (%rax),%rax
ffffffff802162e0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802162e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802162e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802162ec:	0f b7 c0             	movzwl %ax,%eax
ffffffff802162ef:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802162f3:	0f 94 c0             	sete   %al
ffffffff802162f6:	0f b6 c0             	movzbl %al,%eax
ffffffff802162f9:	48 85 c0             	test   %rax,%rax
ffffffff802162fc:	74 0c                	je     ffffffff8021630a <_RME_Thd_Sched_Bind+0x14a>
ffffffff802162fe:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216305:	e9 40 07 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021630a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021630e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216312:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216316:	0f 95 c0             	setne  %al
ffffffff80216319:	0f b6 c0             	movzbl %al,%eax
ffffffff8021631c:	48 85 c0             	test   %rax,%rax
ffffffff8021631f:	74 0c                	je     ffffffff8021632d <_RME_Thd_Sched_Bind+0x16d>
ffffffff80216321:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216328:	e9 1d 07 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021632d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216331:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216336:	48 89 c2             	mov    %rax,%rdx
ffffffff80216339:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021633d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216341:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216344:	0f 93 c0             	setae  %al
ffffffff80216347:	0f b6 c0             	movzbl %al,%eax
ffffffff8021634a:	48 85 c0             	test   %rax,%rax
ffffffff8021634d:	74 0c                	je     ffffffff8021635b <_RME_Thd_Sched_Bind+0x19b>
ffffffff8021634f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216356:	e9 ef 06 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021635b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021635f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216364:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216368:	48 89 c2             	mov    %rax,%rdx
ffffffff8021636b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021636f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216373:	48 01 d0             	add    %rdx,%rax
ffffffff80216376:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021637a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021637e:	48 8b 00             	mov    (%rax),%rax
ffffffff80216381:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216385:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216389:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021638d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216390:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216394:	0f 94 c0             	sete   %al
ffffffff80216397:	0f b6 c0             	movzbl %al,%eax
ffffffff8021639a:	48 85 c0             	test   %rax,%rax
ffffffff8021639d:	74 0c                	je     ffffffff802163ab <_RME_Thd_Sched_Bind+0x1eb>
ffffffff8021639f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802163a6:	e9 9f 06 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff802163ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802163af:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802163b3:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802163b7:	0f 95 c0             	setne  %al
ffffffff802163ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802163bd:	48 85 c0             	test   %rax,%rax
ffffffff802163c0:	74 0c                	je     ffffffff802163ce <_RME_Thd_Sched_Bind+0x20e>
ffffffff802163c2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802163c9:	e9 7c 06 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff802163ce:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802163d2:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802163d7:	48 85 c0             	test   %rax,%rax
ffffffff802163da:	0f 85 98 00 00 00    	jne    ffffffff80216478 <_RME_Thd_Sched_Bind+0x2b8>
ffffffff802163e0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802163e4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802163e8:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff802163ec:	48 39 c2             	cmp    %rax,%rdx
ffffffff802163ef:	0f 93 c0             	setae  %al
ffffffff802163f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802163f5:	48 85 c0             	test   %rax,%rax
ffffffff802163f8:	74 0c                	je     ffffffff80216406 <_RME_Thd_Sched_Bind+0x246>
ffffffff802163fa:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216401:	e9 44 06 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216406:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021640a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021640e:	48 89 c2             	mov    %rax,%rdx
ffffffff80216411:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216415:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216419:	48 01 d0             	add    %rdx,%rax
ffffffff8021641c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216420:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216424:	48 8b 00             	mov    (%rax),%rax
ffffffff80216427:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021642b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021642f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216433:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216436:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021643a:	0f 94 c0             	sete   %al
ffffffff8021643d:	0f b6 c0             	movzbl %al,%eax
ffffffff80216440:	48 85 c0             	test   %rax,%rax
ffffffff80216443:	74 0c                	je     ffffffff80216451 <_RME_Thd_Sched_Bind+0x291>
ffffffff80216445:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021644c:	e9 f9 05 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216451:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216455:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216459:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021645d:	0f 95 c0             	setne  %al
ffffffff80216460:	0f b6 c0             	movzbl %al,%eax
ffffffff80216463:	48 85 c0             	test   %rax,%rax
ffffffff80216466:	0f 84 4c 01 00 00    	je     ffffffff802165b8 <_RME_Thd_Sched_Bind+0x3f8>
ffffffff8021646c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216473:	e9 d2 05 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216478:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021647c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216480:	48 89 c2             	mov    %rax,%rdx
ffffffff80216483:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216487:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021648b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021648e:	0f 93 c0             	setae  %al
ffffffff80216491:	0f b6 c0             	movzbl %al,%eax
ffffffff80216494:	48 85 c0             	test   %rax,%rax
ffffffff80216497:	74 0c                	je     ffffffff802164a5 <_RME_Thd_Sched_Bind+0x2e5>
ffffffff80216499:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802164a0:	e9 a5 05 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff802164a5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802164a9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802164ad:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802164b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802164b4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802164b8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802164bc:	48 01 d0             	add    %rdx,%rax
ffffffff802164bf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802164c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802164c7:	48 8b 00             	mov    (%rax),%rax
ffffffff802164ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802164ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802164d2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802164d6:	0f b7 c0             	movzwl %ax,%eax
ffffffff802164d9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802164dd:	0f 94 c0             	sete   %al
ffffffff802164e0:	0f b6 c0             	movzbl %al,%eax
ffffffff802164e3:	48 85 c0             	test   %rax,%rax
ffffffff802164e6:	74 0c                	je     ffffffff802164f4 <_RME_Thd_Sched_Bind+0x334>
ffffffff802164e8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802164ef:	e9 56 05 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff802164f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802164f8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802164fc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216500:	0f 95 c0             	setne  %al
ffffffff80216503:	0f b6 c0             	movzbl %al,%eax
ffffffff80216506:	48 85 c0             	test   %rax,%rax
ffffffff80216509:	74 0c                	je     ffffffff80216517 <_RME_Thd_Sched_Bind+0x357>
ffffffff8021650b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216512:	e9 33 05 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216517:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021651b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216520:	48 89 c2             	mov    %rax,%rdx
ffffffff80216523:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216527:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021652b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021652e:	0f 93 c0             	setae  %al
ffffffff80216531:	0f b6 c0             	movzbl %al,%eax
ffffffff80216534:	48 85 c0             	test   %rax,%rax
ffffffff80216537:	74 0c                	je     ffffffff80216545 <_RME_Thd_Sched_Bind+0x385>
ffffffff80216539:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216540:	e9 05 05 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216545:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80216549:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021654e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216552:	48 89 c2             	mov    %rax,%rdx
ffffffff80216555:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216559:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021655d:	48 01 d0             	add    %rdx,%rax
ffffffff80216560:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216564:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216568:	48 8b 00             	mov    (%rax),%rax
ffffffff8021656b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021656f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216573:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216577:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021657a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021657e:	0f 94 c0             	sete   %al
ffffffff80216581:	0f b6 c0             	movzbl %al,%eax
ffffffff80216584:	48 85 c0             	test   %rax,%rax
ffffffff80216587:	74 0c                	je     ffffffff80216595 <_RME_Thd_Sched_Bind+0x3d5>
ffffffff80216589:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216590:	e9 b5 04 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216595:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216599:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021659d:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802165a1:	0f 95 c0             	setne  %al
ffffffff802165a4:	0f b6 c0             	movzbl %al,%eax
ffffffff802165a7:	48 85 c0             	test   %rax,%rax
ffffffff802165aa:	74 0c                	je     ffffffff802165b8 <_RME_Thd_Sched_Bind+0x3f8>
ffffffff802165ac:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802165b3:	e9 92 04 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
                   struct RME_Cap_Thd*,Thd_Sched,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff802165b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802165bc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802165c0:	83 e0 02             	and    $0x2,%eax
ffffffff802165c3:	48 85 c0             	test   %rax,%rax
ffffffff802165c6:	0f 94 c0             	sete   %al
ffffffff802165c9:	0f b6 c0             	movzbl %al,%eax
ffffffff802165cc:	48 85 c0             	test   %rax,%rax
ffffffff802165cf:	74 0c                	je     ffffffff802165dd <_RME_Thd_Sched_Bind+0x41d>
ffffffff802165d1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802165d8:	e9 6d 04 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
ffffffff802165dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802165e1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802165e5:	83 e0 04             	and    $0x4,%eax
ffffffff802165e8:	48 85 c0             	test   %rax,%rax
ffffffff802165eb:	0f 94 c0             	sete   %al
ffffffff802165ee:	0f b6 c0             	movzbl %al,%eax
ffffffff802165f1:	48 85 c0             	test   %rax,%rax
ffffffff802165f4:	74 0c                	je     ffffffff80216602 <_RME_Thd_Sched_Bind+0x442>
ffffffff802165f6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802165fd:	e9 48 04 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
    
    /* Check if we need the signal endpoint for this operation */
    if(Cap_Sig!=RME_CID_NULL)
ffffffff80216602:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff80216607:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
ffffffff8021660b:	0f 84 0f 02 00 00    	je     ffffffff80216820 <_RME_Thd_Sched_Bind+0x660>
    {
        RME_COV_MARKER();

        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80216611:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216615:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021661a:	48 85 c0             	test   %rax,%rax
ffffffff8021661d:	0f 85 98 00 00 00    	jne    ffffffff802166bb <_RME_Thd_Sched_Bind+0x4fb>
ffffffff80216623:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216627:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021662b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
ffffffff8021662f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216632:	0f 93 c0             	setae  %al
ffffffff80216635:	0f b6 c0             	movzbl %al,%eax
ffffffff80216638:	48 85 c0             	test   %rax,%rax
ffffffff8021663b:	74 0c                	je     ffffffff80216649 <_RME_Thd_Sched_Bind+0x489>
ffffffff8021663d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216644:	e9 01 04 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216649:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8021664d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216651:	48 89 c2             	mov    %rax,%rdx
ffffffff80216654:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216658:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021665c:	48 01 d0             	add    %rdx,%rax
ffffffff8021665f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80216663:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216667:	48 8b 00             	mov    (%rax),%rax
ffffffff8021666a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021666e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216672:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216676:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216679:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021667d:	0f 94 c0             	sete   %al
ffffffff80216680:	0f b6 c0             	movzbl %al,%eax
ffffffff80216683:	48 85 c0             	test   %rax,%rax
ffffffff80216686:	74 0c                	je     ffffffff80216694 <_RME_Thd_Sched_Bind+0x4d4>
ffffffff80216688:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021668f:	e9 b6 03 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216694:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216698:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021669c:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802166a0:	0f 95 c0             	setne  %al
ffffffff802166a3:	0f b6 c0             	movzbl %al,%eax
ffffffff802166a6:	48 85 c0             	test   %rax,%rax
ffffffff802166a9:	0f 84 4c 01 00 00    	je     ffffffff802167fb <_RME_Thd_Sched_Bind+0x63b>
ffffffff802166af:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802166b6:	e9 8f 03 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff802166bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff802166bf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802166c3:	48 89 c2             	mov    %rax,%rdx
ffffffff802166c6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802166ca:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802166ce:	48 39 c2             	cmp    %rax,%rdx
ffffffff802166d1:	0f 93 c0             	setae  %al
ffffffff802166d4:	0f b6 c0             	movzbl %al,%eax
ffffffff802166d7:	48 85 c0             	test   %rax,%rax
ffffffff802166da:	74 0c                	je     ffffffff802166e8 <_RME_Thd_Sched_Bind+0x528>
ffffffff802166dc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802166e3:	e9 62 03 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff802166e8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff802166ec:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802166f0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802166f4:	48 89 c2             	mov    %rax,%rdx
ffffffff802166f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802166fb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802166ff:	48 01 d0             	add    %rdx,%rax
ffffffff80216702:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80216706:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021670a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021670d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216711:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216715:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216719:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021671c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216720:	0f 94 c0             	sete   %al
ffffffff80216723:	0f b6 c0             	movzbl %al,%eax
ffffffff80216726:	48 85 c0             	test   %rax,%rax
ffffffff80216729:	74 0c                	je     ffffffff80216737 <_RME_Thd_Sched_Bind+0x577>
ffffffff8021672b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216732:	e9 13 03 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216737:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021673b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021673f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216743:	0f 95 c0             	setne  %al
ffffffff80216746:	0f b6 c0             	movzbl %al,%eax
ffffffff80216749:	48 85 c0             	test   %rax,%rax
ffffffff8021674c:	74 0c                	je     ffffffff8021675a <_RME_Thd_Sched_Bind+0x59a>
ffffffff8021674e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216755:	e9 f0 02 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021675a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8021675e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216763:	48 89 c2             	mov    %rax,%rdx
ffffffff80216766:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021676a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021676e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216771:	0f 93 c0             	setae  %al
ffffffff80216774:	0f b6 c0             	movzbl %al,%eax
ffffffff80216777:	48 85 c0             	test   %rax,%rax
ffffffff8021677a:	74 0c                	je     ffffffff80216788 <_RME_Thd_Sched_Bind+0x5c8>
ffffffff8021677c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216783:	e9 c2 02 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216788:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8021678c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216791:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216795:	48 89 c2             	mov    %rax,%rdx
ffffffff80216798:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021679c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802167a0:	48 01 d0             	add    %rdx,%rax
ffffffff802167a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802167a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802167ab:	48 8b 00             	mov    (%rax),%rax
ffffffff802167ae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802167b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802167b6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802167ba:	0f b7 c0             	movzwl %ax,%eax
ffffffff802167bd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802167c1:	0f 94 c0             	sete   %al
ffffffff802167c4:	0f b6 c0             	movzbl %al,%eax
ffffffff802167c7:	48 85 c0             	test   %rax,%rax
ffffffff802167ca:	74 0c                	je     ffffffff802167d8 <_RME_Thd_Sched_Bind+0x618>
ffffffff802167cc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802167d3:	e9 72 02 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
ffffffff802167d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802167dc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802167e0:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802167e4:	0f 95 c0             	setne  %al
ffffffff802167e7:	0f b6 c0             	movzbl %al,%eax
ffffffff802167ea:	48 85 c0             	test   %rax,%rax
ffffffff802167ed:	74 0c                	je     ffffffff802167fb <_RME_Thd_Sched_Bind+0x63b>
ffffffff802167ef:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802167f6:	e9 4f 02 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
                       struct RME_Cap_Sig*,Sig_Op,Type_Stat);
        RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SCHED);
ffffffff802167fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802167ff:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216803:	83 e0 20             	and    $0x20,%eax
ffffffff80216806:	48 85 c0             	test   %rax,%rax
ffffffff80216809:	0f 94 c0             	sete   %al
ffffffff8021680c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021680f:	48 85 c0             	test   %rax,%rax
ffffffff80216812:	74 14                	je     ffffffff80216828 <_RME_Thd_Sched_Bind+0x668>
ffffffff80216814:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021681b:	e9 2a 02 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
    }
    else
    {
        RME_COV_MARKER();

        Sig_Op=RME_NULL;
ffffffff80216820:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80216827:	00 
    }

    /* Check if the target thread is already bound. If yes, we just quit */
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff80216828:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021682c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216830:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Local_Old=Thread->Sched.Local;
ffffffff80216834:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216838:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021683c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Local_Old!=RME_THD_FREE)
ffffffff80216840:	48 83 7d d0 ff       	cmpq   $0xffffffffffffffff,-0x30(%rbp)
ffffffff80216845:	74 0c                	je     ffffffff80216853 <_RME_Thd_Sched_Bind+0x693>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80216847:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021684e:	e9 f7 01 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the parent thread is on the same core with the current processor */
    Local_New=RME_CPU_LOCAL();
ffffffff80216853:	e8 e7 4f ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80216858:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Scheduler=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
ffffffff8021685c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216860:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216864:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    if(Scheduler->Sched.Local!=Local_New)
ffffffff80216868:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021686c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216870:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff80216874:	74 0c                	je     ffffffff80216882 <_RME_Thd_Sched_Bind+0x6c2>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80216876:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021687d:	e9 c8 01 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if we are trying to bind to ourself - prohibited */
    if(Thread==Scheduler)
ffffffff80216882:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216886:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff8021688a:	75 0c                	jne    ffffffff80216898 <_RME_Thd_Sched_Bind+0x6d8>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_NOTIF;
ffffffff8021688c:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff80216893:	e9 b2 01 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the priority relationship is correct */
    if(Scheduler->Sched.Prio_Max<Prio)
ffffffff80216898:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021689c:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff802168a0:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
ffffffff802168a4:	73 0c                	jae    ffffffff802168b2 <_RME_Thd_Sched_Bind+0x6f2>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff802168a6:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff802168ad:	e9 98 01 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check whether the coprocessor context attribute is compatible with this core */
    Hyp_Attr=Thread->Ctx.Hyp_Attr;
ffffffff802168b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802168b6:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff802168bd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
    }
#else
    if(RME_THD_ATTR(Hyp_Attr)!=0U)
ffffffff802168c1:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff802168c8:	ff ff 7f 
ffffffff802168cb:	48 23 45 b8          	and    -0x48(%rbp),%rax
ffffffff802168cf:	48 85 c0             	test   %rax,%rax
ffffffff802168d2:	74 0c                	je     ffffffff802168e0 <_RME_Thd_Sched_Bind+0x720>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff802168d4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802168db:	e9 6a 01 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check the hypervisor context buffer passed in to see whether it is good */
    if((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)!=0U))
ffffffff802168e0:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff802168e5:	74 5c                	je     ffffffff80216943 <_RME_Thd_Sched_Bind+0x783>
ffffffff802168e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802168eb:	48 85 c0             	test   %rax,%rax
ffffffff802168ee:	79 53                	jns    ffffffff80216943 <_RME_Thd_Sched_Bind+0x783>
    {
        RME_COV_MARKER();
        
        /* Register save area must be aligned to word boundary */
        if(RME_IS_ALIGNED(Haddr)!=0U)
ffffffff802168f0:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802168f4:	83 e0 07             	and    $0x7,%eax
ffffffff802168f7:	48 85 c0             	test   %rax,%rax
ffffffff802168fa:	75 07                	jne    ffffffff80216903 <_RME_Thd_Sched_Bind+0x743>
ffffffff802168fc:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80216901:	eb 05                	jmp    ffffffff80216908 <_RME_Thd_Sched_Bind+0x748>
ffffffff80216903:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80216908:	84 c0                	test   %al,%al
ffffffff8021690a:	74 2b                	je     ffffffff80216937 <_RME_Thd_Sched_Bind+0x777>
                return RME_ERR_PTH_HADDR;
            }
            else
            {
#endif
                End=Haddr+RME_REG_SIZE(RME_THD_ATTR(Thread->Ctx.Hyp_Attr));
ffffffff8021690c:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80216910:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff80216916:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
                if((End<=Haddr)||(End>(RME_HYP_VA_BASE+RME_HYP_VA_SIZE)))
ffffffff8021691a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021691e:	48 39 45 10          	cmp    %rax,0x10(%rbp)
ffffffff80216922:	73 07                	jae    ffffffff8021692b <_RME_Thd_Sched_Bind+0x76b>
ffffffff80216924:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80216929:	74 44                	je     ffffffff8021696f <_RME_Thd_Sched_Bind+0x7af>
                {
                    RME_COV_MARKER();

                    return RME_ERR_PTH_HADDR;
ffffffff8021692b:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80216932:	e9 13 01 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
        /* Not aligned, exiting */
        else
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_HADDR;
ffffffff80216937:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff8021693e:	e9 07 01 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
        }
    }
    /* We don't allow setting HYP addr for normal threads, nor do we allow
     * setting HYP addr to NULL for hypervisor-managed threads. */
    else if(((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)==0U))||
ffffffff80216943:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff80216948:	74 09                	je     ffffffff80216953 <_RME_Thd_Sched_Bind+0x793>
ffffffff8021694a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021694e:	48 85 c0             	test   %rax,%rax
ffffffff80216951:	79 10                	jns    ffffffff80216963 <_RME_Thd_Sched_Bind+0x7a3>
ffffffff80216953:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff80216958:	75 16                	jne    ffffffff80216970 <_RME_Thd_Sched_Bind+0x7b0>
            ((Haddr==RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)!=0U)))
ffffffff8021695a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021695e:	48 85 c0             	test   %rax,%rax
ffffffff80216961:	79 0d                	jns    ffffffff80216970 <_RME_Thd_Sched_Bind+0x7b0>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_HADDR;
ffffffff80216963:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff8021696a:	e9 db 00 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
        if(RME_IS_ALIGNED(Haddr)!=0U)
ffffffff8021696f:	90                   	nop
        RME_COV_MARKER();
        /* No action required */
    }

    /* Try to bind the thread */
    if(RME_COMP_SWAP((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff80216970:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80216974:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216978:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8021697c:	48 83 c1 28          	add    $0x28,%rcx
ffffffff80216980:	48 89 c6             	mov    %rax,%rsi
ffffffff80216983:	48 89 cf             	mov    %rcx,%rdi
ffffffff80216986:	e8 d3 5d ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021698b:	48 85 c0             	test   %rax,%rax
ffffffff8021698e:	75 0c                	jne    ffffffff8021699c <_RME_Thd_Sched_Bind+0x7dc>
                     (rme_ptr_t)Local_Old,
                     (rme_ptr_t)Local_New)==RME_CASFAIL)
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_CONFLICT;
ffffffff80216990:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff80216997:	e9 ae 00 00 00       	jmp    ffffffff80216a4a <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase the reference count of the scheduler thread struct - same core */
    Scheduler->Sched.Sched_Ref++;
ffffffff8021699c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802169a0:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff802169a4:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff802169a8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802169ac:	48 89 50 60          	mov    %rdx,0x60(%rax)
    
    /* Bind successful and finish the work off. No need to worry about other cores'
     * operations on this thread because this thread is already bound to this core.
     * TID is half-word parameter-wise, but is stored and returned as a full word. */
    Thread->Sched.Sched_Thd=Scheduler;
ffffffff802169b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802169b4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff802169b8:	48 89 50 68          	mov    %rdx,0x68(%rax)
    Thread->Sched.Prio=Prio;
ffffffff802169bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802169c0:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff802169c4:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Thread->Sched.TID=(rme_ptr_t)TID;
ffffffff802169c8:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff802169cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802169d0:	48 89 50 20          	mov    %rdx,0x20(%rax)
    /* The state must be TIMEOUT or EXCPEND at this point */
    RME_ASSERT((Thread->Sched.State==RME_THD_TIMEOUT)||
               (Thread->Sched.State==RME_THD_EXCPEND));

    /* Tie the signal endpoint to it if not zero */
    if(Sig_Op==(void*)0U)
ffffffff802169d4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff802169d9:	75 0e                	jne    ffffffff802169e9 <_RME_Thd_Sched_Bind+0x829>
    {
        RME_COV_MARKER();

        Thread->Sched.Sched_Sig=0U;
ffffffff802169db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802169df:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff802169e6:	00 
ffffffff802169e7:	eb 3d                	jmp    ffffffff80216a26 <_RME_Thd_Sched_Bind+0x866>
    else
    {
        RME_COV_MARKER();

        /* Convert to root cap */
        Thread->Sched.Sched_Sig=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802169e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802169ed:	48 8b 00             	mov    (%rax),%rax
ffffffff802169f0:	89 c0                	mov    %eax,%eax
ffffffff802169f2:	48 85 c0             	test   %rax,%rax
ffffffff802169f5:	74 0a                	je     ffffffff80216a01 <_RME_Thd_Sched_Bind+0x841>
ffffffff802169f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802169fb:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802169ff:	eb 04                	jmp    ffffffff80216a05 <_RME_Thd_Sched_Bind+0x845>
ffffffff80216a01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216a05:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80216a09:	48 89 42 70          	mov    %rax,0x70(%rdx)
        
        /* Increase refcnt */
        RME_FETCH_ADD(&(Thread->Sched.Sched_Sig->Head.Root_Ref),1U);
ffffffff80216a0d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a11:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216a15:	48 83 c0 08          	add    $0x8,%rax
ffffffff80216a19:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80216a1e:	48 89 c7             	mov    %rax,%rdi
ffffffff80216a21:	e8 6d 5d ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    }
    
    /* Set hypervisor context address if we're hypervisor-managed */
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)!=0U)
ffffffff80216a26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a2a:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80216a31:	48 85 c0             	test   %rax,%rax
ffffffff80216a34:	79 0f                	jns    ffffffff80216a45 <_RME_Thd_Sched_Bind+0x885>
    {
        RME_COV_MARKER();
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)Haddr;
ffffffff80216a36:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff80216a3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a3e:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    return 0;
ffffffff80216a45:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80216a4a:	c9                   	leave
ffffffff80216a4b:	c3                   	ret

ffffffff80216a4c <_RME_Thd_Sched_Free>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Sched_Free(struct RME_Cap_Cpt* Cpt, 
                                     struct RME_Reg_Struct* Reg,
                                     rme_cid_t Cap_Thd)
{
ffffffff80216a4c:	f3 0f 1e fa          	endbr64
ffffffff80216a50:	55                   	push   %rbp
ffffffff80216a51:	48 89 e5             	mov    %rsp,%rbp
ffffffff80216a54:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80216a58:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80216a5c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80216a60:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    /* These are used to free the thread */
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80216a64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216a68:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80216a6d:	48 85 c0             	test   %rax,%rax
ffffffff80216a70:	0f 85 98 00 00 00    	jne    ffffffff80216b0e <_RME_Thd_Sched_Free+0xc2>
ffffffff80216a76:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a7a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216a7e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80216a82:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216a85:	0f 93 c0             	setae  %al
ffffffff80216a88:	0f b6 c0             	movzbl %al,%eax
ffffffff80216a8b:	48 85 c0             	test   %rax,%rax
ffffffff80216a8e:	74 0c                	je     ffffffff80216a9c <_RME_Thd_Sched_Free+0x50>
ffffffff80216a90:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216a97:	e9 90 03 00 00       	jmp    ffffffff80216e2c <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216a9c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216aa0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216aa4:	48 89 c2             	mov    %rax,%rdx
ffffffff80216aa7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216aab:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216aaf:	48 01 d0             	add    %rdx,%rax
ffffffff80216ab2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216ab6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216aba:	48 8b 00             	mov    (%rax),%rax
ffffffff80216abd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216ac1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216ac5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216ac9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216acc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216ad0:	0f 94 c0             	sete   %al
ffffffff80216ad3:	0f b6 c0             	movzbl %al,%eax
ffffffff80216ad6:	48 85 c0             	test   %rax,%rax
ffffffff80216ad9:	74 0c                	je     ffffffff80216ae7 <_RME_Thd_Sched_Free+0x9b>
ffffffff80216adb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216ae2:	e9 45 03 00 00       	jmp    ffffffff80216e2c <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216ae7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216aeb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216aef:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216af3:	0f 95 c0             	setne  %al
ffffffff80216af6:	0f b6 c0             	movzbl %al,%eax
ffffffff80216af9:	48 85 c0             	test   %rax,%rax
ffffffff80216afc:	0f 84 4c 01 00 00    	je     ffffffff80216c4e <_RME_Thd_Sched_Free+0x202>
ffffffff80216b02:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216b09:	e9 1e 03 00 00       	jmp    ffffffff80216e2c <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216b0e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216b12:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216b16:	48 89 c2             	mov    %rax,%rdx
ffffffff80216b19:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216b1d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216b21:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216b24:	0f 93 c0             	setae  %al
ffffffff80216b27:	0f b6 c0             	movzbl %al,%eax
ffffffff80216b2a:	48 85 c0             	test   %rax,%rax
ffffffff80216b2d:	74 0c                	je     ffffffff80216b3b <_RME_Thd_Sched_Free+0xef>
ffffffff80216b2f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216b36:	e9 f1 02 00 00       	jmp    ffffffff80216e2c <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216b3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216b3f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216b43:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216b47:	48 89 c2             	mov    %rax,%rdx
ffffffff80216b4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216b4e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216b52:	48 01 d0             	add    %rdx,%rax
ffffffff80216b55:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216b59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216b5d:	48 8b 00             	mov    (%rax),%rax
ffffffff80216b60:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216b64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216b68:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216b6c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216b6f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216b73:	0f 94 c0             	sete   %al
ffffffff80216b76:	0f b6 c0             	movzbl %al,%eax
ffffffff80216b79:	48 85 c0             	test   %rax,%rax
ffffffff80216b7c:	74 0c                	je     ffffffff80216b8a <_RME_Thd_Sched_Free+0x13e>
ffffffff80216b7e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216b85:	e9 a2 02 00 00       	jmp    ffffffff80216e2c <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216b8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216b8e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216b92:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216b96:	0f 95 c0             	setne  %al
ffffffff80216b99:	0f b6 c0             	movzbl %al,%eax
ffffffff80216b9c:	48 85 c0             	test   %rax,%rax
ffffffff80216b9f:	74 0c                	je     ffffffff80216bad <_RME_Thd_Sched_Free+0x161>
ffffffff80216ba1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216ba8:	e9 7f 02 00 00       	jmp    ffffffff80216e2c <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216bad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216bb1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216bb6:	48 89 c2             	mov    %rax,%rdx
ffffffff80216bb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216bbd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216bc1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216bc4:	0f 93 c0             	setae  %al
ffffffff80216bc7:	0f b6 c0             	movzbl %al,%eax
ffffffff80216bca:	48 85 c0             	test   %rax,%rax
ffffffff80216bcd:	74 0c                	je     ffffffff80216bdb <_RME_Thd_Sched_Free+0x18f>
ffffffff80216bcf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216bd6:	e9 51 02 00 00       	jmp    ffffffff80216e2c <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216bdb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216bdf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216be4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216be8:	48 89 c2             	mov    %rax,%rdx
ffffffff80216beb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216bef:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216bf3:	48 01 d0             	add    %rdx,%rax
ffffffff80216bf6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216bfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216bfe:	48 8b 00             	mov    (%rax),%rax
ffffffff80216c01:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216c05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216c09:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216c0d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216c10:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216c14:	0f 94 c0             	sete   %al
ffffffff80216c17:	0f b6 c0             	movzbl %al,%eax
ffffffff80216c1a:	48 85 c0             	test   %rax,%rax
ffffffff80216c1d:	74 0c                	je     ffffffff80216c2b <_RME_Thd_Sched_Free+0x1df>
ffffffff80216c1f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216c26:	e9 01 02 00 00       	jmp    ffffffff80216e2c <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216c2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216c2f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216c33:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216c37:	0f 95 c0             	setne  %al
ffffffff80216c3a:	0f b6 c0             	movzbl %al,%eax
ffffffff80216c3d:	48 85 c0             	test   %rax,%rax
ffffffff80216c40:	74 0c                	je     ffffffff80216c4e <_RME_Thd_Sched_Free+0x202>
ffffffff80216c42:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216c49:	e9 de 01 00 00       	jmp    ffffffff80216e2c <_RME_Thd_Sched_Free+0x3e0>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff80216c4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216c52:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216c56:	83 e0 10             	and    $0x10,%eax
ffffffff80216c59:	48 85 c0             	test   %rax,%rax
ffffffff80216c5c:	0f 94 c0             	sete   %al
ffffffff80216c5f:	0f b6 c0             	movzbl %al,%eax
ffffffff80216c62:	48 85 c0             	test   %rax,%rax
ffffffff80216c65:	74 0c                	je     ffffffff80216c73 <_RME_Thd_Sched_Free+0x227>
ffffffff80216c67:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80216c6e:	e9 b9 01 00 00       	jmp    ffffffff80216e2c <_RME_Thd_Sched_Free+0x3e0>
    
    /* Check if the target thread is already bound to this core */
    Local=RME_CPU_LOCAL();
ffffffff80216c73:	e8 c7 4b ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80216c78:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Thread=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff80216c7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216c80:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216c84:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(Thread->Sched.Local!=Local)
ffffffff80216c88:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216c8c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216c90:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80216c94:	74 0c                	je     ffffffff80216ca2 <_RME_Thd_Sched_Free+0x256>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80216c96:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216c9d:	e9 8a 01 00 00       	jmp    ffffffff80216e2c <_RME_Thd_Sched_Free+0x3e0>
        /* No action required */
    }
    
    /* Am I referenced by someone as a scheduler? If yes, we cannot unbind. Because
     * boot-time thread's refcnt will never be 0, thus they will never pass this checking */
    if(Thread->Sched.Sched_Ref!=0U)
ffffffff80216ca2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216ca6:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80216caa:	48 85 c0             	test   %rax,%rax
ffffffff80216cad:	74 0c                	je     ffffffff80216cbb <_RME_Thd_Sched_Free+0x26f>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_REFCNT;
ffffffff80216caf:	48 c7 c0 32 ff ff ff 	mov    $0xffffffffffffff32,%rax
ffffffff80216cb6:	e9 71 01 00 00       	jmp    ffffffff80216e2c <_RME_Thd_Sched_Free+0x3e0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Decrease the parent's reference count - on the same core */
    Thread->Sched.Sched_Thd->Sched.Sched_Ref--;
ffffffff80216cbb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cbf:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80216cc3:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80216cc7:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff80216ccb:	48 89 50 60          	mov    %rdx,0x60(%rax)

    /* See if we have any events sent to the parent. If yes, remove that event */
    if(Thread->Sched.Notif.Next!=&(Thread->Sched.Notif))
ffffffff80216ccf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cd3:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80216cd7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cdb:	48 83 c0 10          	add    $0x10,%rax
ffffffff80216cdf:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216ce2:	74 2b                	je     ffffffff80216d0f <_RME_Thd_Sched_Free+0x2c3>
    {
        RME_COV_MARKER();

        _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff80216ce4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216ce8:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80216cec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cf0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216cf4:	48 89 d6             	mov    %rdx,%rsi
ffffffff80216cf7:	48 89 c7             	mov    %rax,%rdi
ffffffff80216cfa:	e8 a7 60 ff ff       	call   ffffffff8020cda6 <_RME_List_Del>
        _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80216cff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d03:	48 83 c0 10          	add    $0x10,%rax
ffffffff80216d07:	48 89 c7             	mov    %rax,%rdi
ffffffff80216d0a:	e8 6d 60 ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
        RME_COV_MARKER();
        /* No action required */
    }

    /* If we have an scheduler event endpoint, release it */
    if(Thread->Sched.Sched_Sig!=(void*)RME_NULL)
ffffffff80216d0f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d13:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216d17:	48 85 c0             	test   %rax,%rax
ffffffff80216d1a:	74 1b                	je     ffffffff80216d37 <_RME_Thd_Sched_Free+0x2eb>
    {
        RME_COV_MARKER();

        RME_FETCH_ADD(&(Thread->Sched.Sched_Sig->Head.Root_Ref),-1);
ffffffff80216d1c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d20:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216d24:	48 83 c0 08          	add    $0x8,%rax
ffffffff80216d28:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80216d2f:	48 89 c7             	mov    %rax,%rdi
ffffffff80216d32:	e8 5c 5a ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80216d37:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216d3b:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80216d40:	48 89 c7             	mov    %rax,%rdi
ffffffff80216d43:	e8 db 02 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
    /* If the thread is ready, kick it out of the run queue. If it is blocked on
     * some endpoint, end the blocking and set the return value to RME_ERR_SIV_FREE.
     * If the thread is killed due to a fault, we will not clear the fault here, and
     * we will wait for the Exec_Set to clear it. No scheduler notifications are sent
     * because the thread is being freed and notifications at this point are useless. */
    if(Thread->Sched.State==RME_THD_READY)
ffffffff80216d48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d4c:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80216d50:	48 85 c0             	test   %rax,%rax
ffffffff80216d53:	75 1a                	jne    ffffffff80216d6f <_RME_Thd_Sched_Free+0x323>
    {
        RME_COV_MARKER();

        /* Remove from runqueue and timeout but don't notify parent */
        _RME_Run_Del(Thread);
ffffffff80216d55:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d59:	48 89 c7             	mov    %rax,%rdi
ffffffff80216d5c:	e8 ba c0 ff ff       	call   ffffffff80212e1b <_RME_Run_Del>
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80216d61:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d65:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80216d6c:	00 
ffffffff80216d6d:	eb 50                	jmp    ffffffff80216dbf <_RME_Thd_Sched_Free+0x373>
    }
    /* BLOCKED */
    else if(Thread->Sched.State==RME_THD_BLOCKED)
ffffffff80216d6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d73:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80216d77:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80216d7b:	75 42                	jne    ffffffff80216dbf <_RME_Thd_Sched_Free+0x373>
    {
        RME_COV_MARKER();
        
        /* If it got here, the thread that is operated on cannot be the current 
         * thread, so we are not overwriting the return value of the caller. */
        __RME_Svc_Retval_Set(&(Thread->Ctx.Reg->Reg),RME_ERR_SIV_FREE);
ffffffff80216d7d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d81:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80216d88:	48 c7 c6 ce fe ff ff 	mov    $0xfffffffffffffece,%rsi
ffffffff80216d8f:	48 89 c7             	mov    %rax,%rdi
ffffffff80216d92:	e8 8c 02 01 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
        /* Release signal and thread from each other */
        Thread->Sched.Signal->Thd=RME_NULL;
ffffffff80216d97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d9b:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff80216d9f:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80216da6:	00 
        Thread->Sched.Signal=RME_NULL;
ffffffff80216da7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216dab:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff80216db2:	00 
        /* Timeout but don't notify parent */
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80216db3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216db7:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80216dbe:	00 
        RME_COV_MARKER();
        /* No action required */
    }

    /* Cleanup all remaining timeslices on it */
    Thread->Sched.Slice=0U;
ffffffff80216dbf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216dc3:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80216dca:	00 
    
    /* Check if this thread is the current one and we may need to switch away */
    if(Local->Thd_Cur==Thread)
ffffffff80216dcb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216dcf:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216dd3:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80216dd7:	75 3f                	jne    ffffffff80216e18 <_RME_Thd_Sched_Free+0x3cc>
    {
        RME_COV_MARKER();

        Local->Thd_Cur=_RME_Run_High(Local);
ffffffff80216dd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216ddd:	48 89 c7             	mov    %rax,%rdi
ffffffff80216de0:	e8 ff c0 ff ff       	call   ffffffff80212ee4 <_RME_Run_High>
ffffffff80216de5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80216de9:	48 89 42 08          	mov    %rax,0x8(%rdx)
        _RME_Run_Ins(Local->Thd_Cur);
ffffffff80216ded:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216df1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216df5:	48 89 c7             	mov    %rax,%rdi
ffffffff80216df8:	e8 6e bf ff ff       	call   ffffffff80212d6b <_RME_Run_Ins>
        RME_ASSERT(Local->Thd_Cur->Sched.State==RME_THD_READY);
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff80216dfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216e01:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80216e05:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80216e09:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216e0d:	48 89 ce             	mov    %rcx,%rsi
ffffffff80216e10:	48 89 c7             	mov    %rax,%rdi
ffffffff80216e13:	e8 28 c2 ff ff       	call   ffffffff80213040 <_RME_Run_Swt>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Set the state to free so other cores can bind */
    RME_WRITE_RELEASE((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff80216e18:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e1c:	48 83 c0 28          	add    $0x28,%rax
ffffffff80216e20:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
                      (rme_ptr_t)RME_THD_FREE);

    return 0;
ffffffff80216e27:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80216e2c:	c9                   	leave
ffffffff80216e2d:	c3                   	ret

ffffffff80216e2e <_RME_Thd_Exec_Set>:
                                   struct RME_Reg_Struct* Reg,
                                   rme_cid_t Cap_Thd,
                                   rme_ptr_t Entry,
                                   rme_ptr_t Stack,
                                   rme_ptr_t Param)
{
ffffffff80216e2e:	f3 0f 1e fa          	endbr64
ffffffff80216e32:	55                   	push   %rbp
ffffffff80216e33:	48 89 e5             	mov    %rsp,%rbp
ffffffff80216e36:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80216e3a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80216e3e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80216e42:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80216e46:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff80216e4a:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
ffffffff80216e4e:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    struct RME_Thd_Struct* Thread;
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80216e52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216e56:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80216e5b:	48 85 c0             	test   %rax,%rax
ffffffff80216e5e:	0f 85 98 00 00 00    	jne    ffffffff80216efc <_RME_Thd_Exec_Set+0xce>
ffffffff80216e64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216e68:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216e6c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80216e70:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216e73:	0f 93 c0             	setae  %al
ffffffff80216e76:	0f b6 c0             	movzbl %al,%eax
ffffffff80216e79:	48 85 c0             	test   %rax,%rax
ffffffff80216e7c:	74 0c                	je     ffffffff80216e8a <_RME_Thd_Exec_Set+0x5c>
ffffffff80216e7e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216e85:	e9 ca 02 00 00       	jmp    ffffffff80217154 <_RME_Thd_Exec_Set+0x326>
ffffffff80216e8a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216e8e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216e92:	48 89 c2             	mov    %rax,%rdx
ffffffff80216e95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216e99:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216e9d:	48 01 d0             	add    %rdx,%rax
ffffffff80216ea0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216ea4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216ea8:	48 8b 00             	mov    (%rax),%rax
ffffffff80216eab:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216eaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216eb3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216eb7:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216eba:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216ebe:	0f 94 c0             	sete   %al
ffffffff80216ec1:	0f b6 c0             	movzbl %al,%eax
ffffffff80216ec4:	48 85 c0             	test   %rax,%rax
ffffffff80216ec7:	74 0c                	je     ffffffff80216ed5 <_RME_Thd_Exec_Set+0xa7>
ffffffff80216ec9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216ed0:	e9 7f 02 00 00       	jmp    ffffffff80217154 <_RME_Thd_Exec_Set+0x326>
ffffffff80216ed5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216ed9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216edd:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216ee1:	0f 95 c0             	setne  %al
ffffffff80216ee4:	0f b6 c0             	movzbl %al,%eax
ffffffff80216ee7:	48 85 c0             	test   %rax,%rax
ffffffff80216eea:	0f 84 4c 01 00 00    	je     ffffffff8021703c <_RME_Thd_Exec_Set+0x20e>
ffffffff80216ef0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216ef7:	e9 58 02 00 00       	jmp    ffffffff80217154 <_RME_Thd_Exec_Set+0x326>
ffffffff80216efc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216f00:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216f04:	48 89 c2             	mov    %rax,%rdx
ffffffff80216f07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216f0b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216f0f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216f12:	0f 93 c0             	setae  %al
ffffffff80216f15:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f18:	48 85 c0             	test   %rax,%rax
ffffffff80216f1b:	74 0c                	je     ffffffff80216f29 <_RME_Thd_Exec_Set+0xfb>
ffffffff80216f1d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216f24:	e9 2b 02 00 00       	jmp    ffffffff80217154 <_RME_Thd_Exec_Set+0x326>
ffffffff80216f29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216f2d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216f31:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216f35:	48 89 c2             	mov    %rax,%rdx
ffffffff80216f38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216f3c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216f40:	48 01 d0             	add    %rdx,%rax
ffffffff80216f43:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216f47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216f4b:	48 8b 00             	mov    (%rax),%rax
ffffffff80216f4e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216f52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216f56:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216f5a:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216f5d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216f61:	0f 94 c0             	sete   %al
ffffffff80216f64:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f67:	48 85 c0             	test   %rax,%rax
ffffffff80216f6a:	74 0c                	je     ffffffff80216f78 <_RME_Thd_Exec_Set+0x14a>
ffffffff80216f6c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216f73:	e9 dc 01 00 00       	jmp    ffffffff80217154 <_RME_Thd_Exec_Set+0x326>
ffffffff80216f78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216f7c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216f80:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216f84:	0f 95 c0             	setne  %al
ffffffff80216f87:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f8a:	48 85 c0             	test   %rax,%rax
ffffffff80216f8d:	74 0c                	je     ffffffff80216f9b <_RME_Thd_Exec_Set+0x16d>
ffffffff80216f8f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216f96:	e9 b9 01 00 00       	jmp    ffffffff80217154 <_RME_Thd_Exec_Set+0x326>
ffffffff80216f9b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216f9f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216fa4:	48 89 c2             	mov    %rax,%rdx
ffffffff80216fa7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216fab:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216faf:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216fb2:	0f 93 c0             	setae  %al
ffffffff80216fb5:	0f b6 c0             	movzbl %al,%eax
ffffffff80216fb8:	48 85 c0             	test   %rax,%rax
ffffffff80216fbb:	74 0c                	je     ffffffff80216fc9 <_RME_Thd_Exec_Set+0x19b>
ffffffff80216fbd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216fc4:	e9 8b 01 00 00       	jmp    ffffffff80217154 <_RME_Thd_Exec_Set+0x326>
ffffffff80216fc9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216fcd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216fd2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216fd6:	48 89 c2             	mov    %rax,%rdx
ffffffff80216fd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216fdd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216fe1:	48 01 d0             	add    %rdx,%rax
ffffffff80216fe4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216fe8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216fec:	48 8b 00             	mov    (%rax),%rax
ffffffff80216fef:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216ff3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216ff7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216ffb:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216ffe:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217002:	0f 94 c0             	sete   %al
ffffffff80217005:	0f b6 c0             	movzbl %al,%eax
ffffffff80217008:	48 85 c0             	test   %rax,%rax
ffffffff8021700b:	74 0c                	je     ffffffff80217019 <_RME_Thd_Exec_Set+0x1eb>
ffffffff8021700d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217014:	e9 3b 01 00 00       	jmp    ffffffff80217154 <_RME_Thd_Exec_Set+0x326>
ffffffff80217019:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021701d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217021:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217025:	0f 95 c0             	setne  %al
ffffffff80217028:	0f b6 c0             	movzbl %al,%eax
ffffffff8021702b:	48 85 c0             	test   %rax,%rax
ffffffff8021702e:	74 0c                	je     ffffffff8021703c <_RME_Thd_Exec_Set+0x20e>
ffffffff80217030:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217037:	e9 18 01 00 00       	jmp    ffffffff80217154 <_RME_Thd_Exec_Set+0x326>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff8021703c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217040:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217044:	83 e0 01             	and    $0x1,%eax
ffffffff80217047:	48 85 c0             	test   %rax,%rax
ffffffff8021704a:	0f 94 c0             	sete   %al
ffffffff8021704d:	0f b6 c0             	movzbl %al,%eax
ffffffff80217050:	48 85 c0             	test   %rax,%rax
ffffffff80217053:	74 0c                	je     ffffffff80217061 <_RME_Thd_Exec_Set+0x233>
ffffffff80217055:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021705c:	e9 f3 00 00 00       	jmp    ffffffff80217154 <_RME_Thd_Exec_Set+0x326>
    
    /* Check if the target thread is already bound, and quit if it is not on our core */
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff80217061:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217065:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217069:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Local=RME_CPU_LOCAL();
ffffffff8021706d:	e8 cd 47 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80217072:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(Thread->Sched.Local!=Local)
ffffffff80217076:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021707a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021707e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80217082:	74 0c                	je     ffffffff80217090 <_RME_Thd_Exec_Set+0x262>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217084:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021708b:	e9 c4 00 00 00       	jmp    ffffffff80217154 <_RME_Thd_Exec_Set+0x326>
        /* No action required */
    }
    
    /* Commit the change if both values are non-zero. If both are zero we are just
     * clearing the error flag and continue from where the exception happened. */
    if((Entry!=RME_NULL)&&(Stack!=RME_NULL))
ffffffff80217090:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
ffffffff80217095:	74 47                	je     ffffffff802170de <_RME_Thd_Exec_Set+0x2b0>
ffffffff80217097:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff8021709c:	74 40                	je     ffffffff802170de <_RME_Thd_Exec_Set+0x2b0>
    {
        RME_COV_MARKER();

        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
                           Entry,Stack,Param,&(Thread->Ctx.Reg->Reg));
ffffffff8021709e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802170a2:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
ffffffff802170a9:	48 89 c6             	mov    %rax,%rsi
ffffffff802170ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802170b0:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff802170b7:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff802170be:	ff ff 7f 
ffffffff802170c1:	48 21 d0             	and    %rdx,%rax
ffffffff802170c4:	48 89 c7             	mov    %rax,%rdi
ffffffff802170c7:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff802170cb:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff802170cf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802170d3:	49 89 f0             	mov    %rsi,%r8
ffffffff802170d6:	48 89 c6             	mov    %rax,%rsi
ffffffff802170d9:	e8 52 ec 00 00       	call   ffffffff80225d30 <__RME_Thd_Reg_Init>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff802170de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802170e2:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802170e7:	48 89 c7             	mov    %rax,%rdi
ffffffff802170ea:	e8 34 ff 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
    
    /* Check if there is a exception pending and clear it if there is */
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff802170ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802170f3:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802170f7:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802170fb:	75 52                	jne    ffffffff8021714f <_RME_Thd_Exec_Set+0x321>
    {
        RME_COV_MARKER();
        
        /* Check if the thread still have timeslices. If yes, put it into the runqueue;
         * if no, mark it as TIMEOUT and send scheduler notification to its parent. */
        if(Thread->Sched.Slice!=0U)
ffffffff802170fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217101:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217105:	48 85 c0             	test   %rax,%rax
ffffffff80217108:	74 1a                	je     ffffffff80217124 <_RME_Thd_Exec_Set+0x2f6>
        {
            RME_COV_MARKER();
            
            /* Ready and add to runqueue */
            Thread->Sched.State=RME_THD_READY;
ffffffff8021710a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021710e:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80217115:	00 
            _RME_Run_Ins(Thread);
ffffffff80217116:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021711a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021711d:	e8 49 bc ff ff       	call   ffffffff80212d6b <_RME_Run_Ins>
ffffffff80217122:	eb 18                	jmp    ffffffff8021713c <_RME_Thd_Exec_Set+0x30e>
        else
        {
            RME_COV_MARKER();
            
            /* Timeout and notify parent */
            Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80217124:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217128:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8021712f:	00 
            _RME_Run_Notif(Thread);
ffffffff80217130:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217134:	48 89 c7             	mov    %rax,%rdi
ffffffff80217137:	e8 2a be ff ff       	call   ffffffff80212f66 <_RME_Run_Notif>
        }
        
        /* Pick the highest priority thread because something unblocked */
        _RME_Kern_High(Reg,Local);
ffffffff8021713c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80217140:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217144:	48 89 d6             	mov    %rdx,%rsi
ffffffff80217147:	48 89 c7             	mov    %rax,%rdi
ffffffff8021714a:	e8 cc 1c 00 00       	call   ffffffff80218e1b <_RME_Kern_High>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    return 0;
ffffffff8021714f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80217154:	c9                   	leave
ffffffff80217155:	c3                   	ret

ffffffff80217156 <_RME_Thd_Sched_Prio>:
                                     rme_ptr_t Prio0,
                                     rme_cid_t Cap_Thd1,
                                     rme_ptr_t Prio1,
                                     rme_cid_t Cap_Thd2,
                                     rme_ptr_t Prio2)
{
ffffffff80217156:	f3 0f 1e fa          	endbr64
ffffffff8021715a:	55                   	push   %rbp
ffffffff8021715b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021715e:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
ffffffff80217165:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
ffffffff8021716c:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
ffffffff80217173:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
ffffffff8021717a:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
ffffffff80217181:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
ffffffff80217188:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
    struct RME_Thd_Struct* Thread[3];
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Check parameter validity */
    if((Number==0U)||(Number>3U))
ffffffff8021718f:	48 83 bd 58 ff ff ff 	cmpq   $0x0,-0xa8(%rbp)
ffffffff80217196:	00 
ffffffff80217197:	74 0a                	je     ffffffff802171a3 <_RME_Thd_Sched_Prio+0x4d>
ffffffff80217199:	48 83 bd 58 ff ff ff 	cmpq   $0x3,-0xa8(%rbp)
ffffffff802171a0:	03 
ffffffff802171a1:	76 0c                	jbe    ffffffff802171af <_RME_Thd_Sched_Prio+0x59>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802171a3:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802171aa:	e9 04 04 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
    }
    
    /* We'll use arrays in the next */
    Cap_Thd[0]=Cap_Thd0;
ffffffff802171af:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
ffffffff802171b6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Cap_Thd[1]=Cap_Thd1;
ffffffff802171ba:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
ffffffff802171c1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Cap_Thd[2]=Cap_Thd2;
ffffffff802171c5:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff802171c9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Prio[0]=Prio0;
ffffffff802171cd:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
ffffffff802171d4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    Prio[1]=Prio1;
ffffffff802171d8:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802171dc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Prio[2]=Prio2;
ffffffff802171e0:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff802171e4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

    Local=RME_CPU_LOCAL();
ffffffff802171e8:	e8 52 46 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802171ed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0U;Count<Number;Count++)
ffffffff802171f1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802171f8:	00 
ffffffff802171f9:	e9 e4 02 00 00       	jmp    ffffffff802174e2 <_RME_Thd_Sched_Prio+0x38c>
    {
        /* Get the capability slot */
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff802171fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217202:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217207:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021720c:	48 85 c0             	test   %rax,%rax
ffffffff8021720f:	0f 85 b8 00 00 00    	jne    ffffffff802172cd <_RME_Thd_Sched_Prio+0x177>
ffffffff80217215:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217219:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff8021721e:	48 89 c2             	mov    %rax,%rdx
ffffffff80217221:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff80217228:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021722c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021722f:	0f 93 c0             	setae  %al
ffffffff80217232:	0f b6 c0             	movzbl %al,%eax
ffffffff80217235:	48 85 c0             	test   %rax,%rax
ffffffff80217238:	74 0c                	je     ffffffff80217246 <_RME_Thd_Sched_Prio+0xf0>
ffffffff8021723a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217241:	e9 6d 03 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217246:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021724a:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff8021724f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217253:	48 89 c2             	mov    %rax,%rdx
ffffffff80217256:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff8021725d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217261:	48 01 d0             	add    %rdx,%rax
ffffffff80217264:	48 89 c2             	mov    %rax,%rdx
ffffffff80217267:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021726b:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff80217270:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217274:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217279:	48 8b 00             	mov    (%rax),%rax
ffffffff8021727c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217280:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217284:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217288:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021728b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021728f:	0f 94 c0             	sete   %al
ffffffff80217292:	0f b6 c0             	movzbl %al,%eax
ffffffff80217295:	48 85 c0             	test   %rax,%rax
ffffffff80217298:	74 0c                	je     ffffffff802172a6 <_RME_Thd_Sched_Prio+0x150>
ffffffff8021729a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802172a1:	e9 0d 03 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
ffffffff802172a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802172aa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802172ae:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802172b2:	0f 95 c0             	setne  %al
ffffffff802172b5:	0f b6 c0             	movzbl %al,%eax
ffffffff802172b8:	48 85 c0             	test   %rax,%rax
ffffffff802172bb:	0f 84 8a 01 00 00    	je     ffffffff8021744b <_RME_Thd_Sched_Prio+0x2f5>
ffffffff802172c1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802172c8:	e9 e6 02 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
ffffffff802172cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802172d1:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802172d6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802172da:	48 89 c2             	mov    %rax,%rdx
ffffffff802172dd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff802172e4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802172e8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802172eb:	0f 93 c0             	setae  %al
ffffffff802172ee:	0f b6 c0             	movzbl %al,%eax
ffffffff802172f1:	48 85 c0             	test   %rax,%rax
ffffffff802172f4:	74 0c                	je     ffffffff80217302 <_RME_Thd_Sched_Prio+0x1ac>
ffffffff802172f6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802172fd:	e9 b1 02 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217302:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217306:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff8021730b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021730f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217313:	48 89 c2             	mov    %rax,%rdx
ffffffff80217316:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff8021731d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217321:	48 01 d0             	add    %rdx,%rax
ffffffff80217324:	48 89 c2             	mov    %rax,%rdx
ffffffff80217327:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021732b:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff80217330:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217334:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217339:	48 8b 00             	mov    (%rax),%rax
ffffffff8021733c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217340:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217344:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217348:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021734b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021734f:	0f 94 c0             	sete   %al
ffffffff80217352:	0f b6 c0             	movzbl %al,%eax
ffffffff80217355:	48 85 c0             	test   %rax,%rax
ffffffff80217358:	74 0c                	je     ffffffff80217366 <_RME_Thd_Sched_Prio+0x210>
ffffffff8021735a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217361:	e9 4d 02 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217366:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021736a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021736e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217372:	0f 95 c0             	setne  %al
ffffffff80217375:	0f b6 c0             	movzbl %al,%eax
ffffffff80217378:	48 85 c0             	test   %rax,%rax
ffffffff8021737b:	74 0c                	je     ffffffff80217389 <_RME_Thd_Sched_Prio+0x233>
ffffffff8021737d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217384:	e9 2a 02 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217389:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021738d:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217392:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217397:	48 89 c2             	mov    %rax,%rdx
ffffffff8021739a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021739e:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff802173a3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802173a7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802173aa:	0f 93 c0             	setae  %al
ffffffff802173ad:	0f b6 c0             	movzbl %al,%eax
ffffffff802173b0:	48 85 c0             	test   %rax,%rax
ffffffff802173b3:	74 0c                	je     ffffffff802173c1 <_RME_Thd_Sched_Prio+0x26b>
ffffffff802173b5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802173bc:	e9 f2 01 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
ffffffff802173c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173c5:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802173ca:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802173cf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802173d3:	48 89 c2             	mov    %rax,%rdx
ffffffff802173d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173da:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff802173df:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802173e3:	48 01 d0             	add    %rdx,%rax
ffffffff802173e6:	48 89 c2             	mov    %rax,%rdx
ffffffff802173e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173ed:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff802173f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173f6:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff802173fb:	48 8b 00             	mov    (%rax),%rax
ffffffff802173fe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217402:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217406:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021740a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021740d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217411:	0f 94 c0             	sete   %al
ffffffff80217414:	0f b6 c0             	movzbl %al,%eax
ffffffff80217417:	48 85 c0             	test   %rax,%rax
ffffffff8021741a:	74 0c                	je     ffffffff80217428 <_RME_Thd_Sched_Prio+0x2d2>
ffffffff8021741c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217423:	e9 8b 01 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217428:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021742c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217430:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217434:	0f 95 c0             	setne  %al
ffffffff80217437:	0f b6 c0             	movzbl %al,%eax
ffffffff8021743a:	48 85 c0             	test   %rax,%rax
ffffffff8021743d:	74 0c                	je     ffffffff8021744b <_RME_Thd_Sched_Prio+0x2f5>
ffffffff8021743f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217446:	e9 68 01 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
                       struct RME_Cap_Thd*,Thd_Op[Count],Type_Stat);
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff8021744b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021744f:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217454:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217458:	83 e0 08             	and    $0x8,%eax
ffffffff8021745b:	48 85 c0             	test   %rax,%rax
ffffffff8021745e:	0f 94 c0             	sete   %al
ffffffff80217461:	0f b6 c0             	movzbl %al,%eax
ffffffff80217464:	48 85 c0             	test   %rax,%rax
ffffffff80217467:	74 0c                	je     ffffffff80217475 <_RME_Thd_Sched_Prio+0x31f>
ffffffff80217469:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217470:	e9 3e 01 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
        
        /* See if the target thread is already bound to this core. If no, we just quit */
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff80217475:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217479:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff8021747e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217482:	48 89 c2             	mov    %rax,%rdx
ffffffff80217485:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217489:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
ffffffff80217490:	ff 
        if(Thread[Count]->Sched.Local!=Local)
ffffffff80217491:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217495:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff8021749c:	ff 
ffffffff8021749d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802174a1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff802174a5:	74 0c                	je     ffffffff802174b3 <_RME_Thd_Sched_Prio+0x35d>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff802174a7:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802174ae:	e9 00 01 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* See if the priority relationship is correct */
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff802174b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802174b7:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff802174be:	ff 
ffffffff802174bf:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff802174c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802174c7:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
ffffffff802174cc:	48 39 c2             	cmp    %rax,%rdx
ffffffff802174cf:	73 0c                	jae    ffffffff802174dd <_RME_Thd_Sched_Prio+0x387>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_PRIO;
ffffffff802174d1:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff802174d8:	e9 d6 00 00 00       	jmp    ffffffff802175b3 <_RME_Thd_Sched_Prio+0x45d>
    for(Count=0U;Count<Number;Count++)
ffffffff802174dd:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802174e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802174e6:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
ffffffff802174ed:	0f 82 0b fd ff ff    	jb     ffffffff802171fe <_RME_Thd_Sched_Prio+0xa8>
            /* No action required */
        }
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);
ffffffff802174f3:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff802174fa:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802174ff:	48 89 c7             	mov    %rax,%rdi
ffffffff80217502:	e8 1c fb 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
    
    /* Change priority for each thread, and we'll switch to the real highest priority
     * thread after all these changes. This can help remove the excessive overhead. */
    for(Count=0U;Count<Number;Count++)
ffffffff80217507:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021750e:	00 
ffffffff8021750f:	eb 76                	jmp    ffffffff80217587 <_RME_Thd_Sched_Prio+0x431>
    {
        /* See if this thread is currently in the runqueue */
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff80217511:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217515:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff8021751c:	ff 
ffffffff8021751d:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80217521:	48 85 c0             	test   %rax,%rax
ffffffff80217524:	75 43                	jne    ffffffff80217569 <_RME_Thd_Sched_Prio+0x413>
        {
            RME_COV_MARKER();

            /* Remove from runqueue, change priority, and add it back */
            _RME_Run_Del(Thread[Count]);
ffffffff80217526:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021752a:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217531:	ff 
ffffffff80217532:	48 89 c7             	mov    %rax,%rdi
ffffffff80217535:	e8 e1 b8 ff ff       	call   ffffffff80212e1b <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff8021753a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021753e:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217545:	ff 
ffffffff80217546:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021754a:	48 8b 54 d5 b0       	mov    -0x50(%rbp,%rdx,8),%rdx
ffffffff8021754f:	48 89 50 40          	mov    %rdx,0x40(%rax)
            _RME_Run_Ins(Thread[Count]);
ffffffff80217553:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217557:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff8021755e:	ff 
ffffffff8021755f:	48 89 c7             	mov    %rax,%rdi
ffffffff80217562:	e8 04 b8 ff ff       	call   ffffffff80212d6b <_RME_Run_Ins>
ffffffff80217567:	eb 19                	jmp    ffffffff80217582 <_RME_Thd_Sched_Prio+0x42c>
        /* If it is BLOCKED, TIMEOUT or EXCPEND, changing the number will suffice */
        else
        {
            RME_COV_MARKER();

            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80217569:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021756d:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217574:	ff 
ffffffff80217575:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80217579:	48 8b 54 d5 b0       	mov    -0x50(%rbp,%rdx,8),%rdx
ffffffff8021757e:	48 89 50 40          	mov    %rdx,0x40(%rax)
    for(Count=0U;Count<Number;Count++)
ffffffff80217582:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80217587:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021758b:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
ffffffff80217592:	0f 82 79 ff ff ff    	jb     ffffffff80217511 <_RME_Thd_Sched_Prio+0x3bb>
        }
    }
    
    /* Pick the current highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff80217598:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8021759c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff802175a3:	48 89 d6             	mov    %rdx,%rsi
ffffffff802175a6:	48 89 c7             	mov    %rax,%rdi
ffffffff802175a9:	e8 6d 18 00 00       	call   ffffffff80218e1b <_RME_Kern_High>

    return 0;
ffffffff802175ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802175b3:	c9                   	leave
ffffffff802175b4:	c3                   	ret

ffffffff802175b5 <_RME_Thd_Sched_Rcv>:
Output      : None.
Return      : rme_ret_t - If successful, the thread ID; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Sched_Rcv(struct RME_Cap_Cpt* Cpt,
                                    rme_cid_t Cap_Thd)
{
ffffffff802175b5:	f3 0f 1e fa          	endbr64
ffffffff802175b9:	55                   	push   %rbp
ffffffff802175ba:	48 89 e5             	mov    %rsp,%rbp
ffffffff802175bd:	53                   	push   %rbx
ffffffff802175be:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff802175c2:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802175c6:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    struct RME_Thd_Struct* Thread;
    rme_ptr_t Type_Stat;
    rme_ptr_t Flag;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802175ca:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802175ce:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802175d3:	48 85 c0             	test   %rax,%rax
ffffffff802175d6:	0f 85 98 00 00 00    	jne    ffffffff80217674 <_RME_Thd_Sched_Rcv+0xbf>
ffffffff802175dc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802175e0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802175e4:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff802175e8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802175eb:	0f 93 c0             	setae  %al
ffffffff802175ee:	0f b6 c0             	movzbl %al,%eax
ffffffff802175f1:	48 85 c0             	test   %rax,%rax
ffffffff802175f4:	74 0c                	je     ffffffff80217602 <_RME_Thd_Sched_Rcv+0x4d>
ffffffff802175f6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802175fd:	e9 c8 02 00 00       	jmp    ffffffff802178ca <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217602:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217606:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021760a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021760d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217611:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217615:	48 01 d0             	add    %rdx,%rax
ffffffff80217618:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021761c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217620:	48 8b 00             	mov    (%rax),%rax
ffffffff80217623:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80217627:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021762b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021762f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217632:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217636:	0f 94 c0             	sete   %al
ffffffff80217639:	0f b6 c0             	movzbl %al,%eax
ffffffff8021763c:	48 85 c0             	test   %rax,%rax
ffffffff8021763f:	74 0c                	je     ffffffff8021764d <_RME_Thd_Sched_Rcv+0x98>
ffffffff80217641:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217648:	e9 7d 02 00 00       	jmp    ffffffff802178ca <_RME_Thd_Sched_Rcv+0x315>
ffffffff8021764d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217651:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217655:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217659:	0f 95 c0             	setne  %al
ffffffff8021765c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021765f:	48 85 c0             	test   %rax,%rax
ffffffff80217662:	0f 84 4c 01 00 00    	je     ffffffff802177b4 <_RME_Thd_Sched_Rcv+0x1ff>
ffffffff80217668:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021766f:	e9 56 02 00 00       	jmp    ffffffff802178ca <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217674:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217678:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021767c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021767f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217683:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217687:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021768a:	0f 93 c0             	setae  %al
ffffffff8021768d:	0f b6 c0             	movzbl %al,%eax
ffffffff80217690:	48 85 c0             	test   %rax,%rax
ffffffff80217693:	74 0c                	je     ffffffff802176a1 <_RME_Thd_Sched_Rcv+0xec>
ffffffff80217695:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021769c:	e9 29 02 00 00       	jmp    ffffffff802178ca <_RME_Thd_Sched_Rcv+0x315>
ffffffff802176a1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802176a5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802176a9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802176ad:	48 89 c2             	mov    %rax,%rdx
ffffffff802176b0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802176b4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802176b8:	48 01 d0             	add    %rdx,%rax
ffffffff802176bb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802176bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802176c3:	48 8b 00             	mov    (%rax),%rax
ffffffff802176c6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff802176ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802176ce:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802176d2:	0f b7 c0             	movzwl %ax,%eax
ffffffff802176d5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802176d9:	0f 94 c0             	sete   %al
ffffffff802176dc:	0f b6 c0             	movzbl %al,%eax
ffffffff802176df:	48 85 c0             	test   %rax,%rax
ffffffff802176e2:	74 0c                	je     ffffffff802176f0 <_RME_Thd_Sched_Rcv+0x13b>
ffffffff802176e4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802176eb:	e9 da 01 00 00       	jmp    ffffffff802178ca <_RME_Thd_Sched_Rcv+0x315>
ffffffff802176f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802176f4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802176f8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802176fc:	0f 95 c0             	setne  %al
ffffffff802176ff:	0f b6 c0             	movzbl %al,%eax
ffffffff80217702:	48 85 c0             	test   %rax,%rax
ffffffff80217705:	74 0c                	je     ffffffff80217713 <_RME_Thd_Sched_Rcv+0x15e>
ffffffff80217707:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021770e:	e9 b7 01 00 00       	jmp    ffffffff802178ca <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217713:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217717:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021771c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021771f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217723:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217727:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021772a:	0f 93 c0             	setae  %al
ffffffff8021772d:	0f b6 c0             	movzbl %al,%eax
ffffffff80217730:	48 85 c0             	test   %rax,%rax
ffffffff80217733:	74 0c                	je     ffffffff80217741 <_RME_Thd_Sched_Rcv+0x18c>
ffffffff80217735:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021773c:	e9 89 01 00 00       	jmp    ffffffff802178ca <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217741:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217745:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021774a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021774e:	48 89 c2             	mov    %rax,%rdx
ffffffff80217751:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217755:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217759:	48 01 d0             	add    %rdx,%rax
ffffffff8021775c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217760:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217764:	48 8b 00             	mov    (%rax),%rax
ffffffff80217767:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8021776b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021776f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217773:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217776:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021777a:	0f 94 c0             	sete   %al
ffffffff8021777d:	0f b6 c0             	movzbl %al,%eax
ffffffff80217780:	48 85 c0             	test   %rax,%rax
ffffffff80217783:	74 0c                	je     ffffffff80217791 <_RME_Thd_Sched_Rcv+0x1dc>
ffffffff80217785:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021778c:	e9 39 01 00 00       	jmp    ffffffff802178ca <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217791:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217795:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217799:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021779d:	0f 95 c0             	setne  %al
ffffffff802177a0:	0f b6 c0             	movzbl %al,%eax
ffffffff802177a3:	48 85 c0             	test   %rax,%rax
ffffffff802177a6:	74 0c                	je     ffffffff802177b4 <_RME_Thd_Sched_Rcv+0x1ff>
ffffffff802177a8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802177af:	e9 16 01 00 00       	jmp    ffffffff802178ca <_RME_Thd_Sched_Rcv+0x315>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
ffffffff802177b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802177b8:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802177bc:	83 e0 20             	and    $0x20,%eax
ffffffff802177bf:	48 85 c0             	test   %rax,%rax
ffffffff802177c2:	0f 94 c0             	sete   %al
ffffffff802177c5:	0f b6 c0             	movzbl %al,%eax
ffffffff802177c8:	48 85 c0             	test   %rax,%rax
ffffffff802177cb:	74 0c                	je     ffffffff802177d9 <_RME_Thd_Sched_Rcv+0x224>
ffffffff802177cd:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802177d4:	e9 f1 00 00 00       	jmp    ffffffff802178ca <_RME_Thd_Sched_Rcv+0x315>
    
    /* Check if we are on the same core with the target thread */
    Scheduler=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff802177d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802177dd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802177e1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Scheduler->Sched.Local!=RME_CPU_LOCAL())
ffffffff802177e5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802177e9:	48 8b 58 28          	mov    0x28(%rax),%rbx
ffffffff802177ed:	e8 4d 40 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802177f2:	48 39 c3             	cmp    %rax,%rbx
ffffffff802177f5:	74 0c                	je     ffffffff80217803 <_RME_Thd_Sched_Rcv+0x24e>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802177f7:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802177fe:	e9 c7 00 00 00       	jmp    ffffffff802178ca <_RME_Thd_Sched_Rcv+0x315>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if there are any notifications */
    if(Scheduler->Sched.Event.Next==&(Scheduler->Sched.Event))
ffffffff80217803:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217807:	48 8b 50 78          	mov    0x78(%rax),%rdx
ffffffff8021780b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021780f:	48 83 c0 78          	add    $0x78,%rax
ffffffff80217813:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217816:	75 0c                	jne    ffffffff80217824 <_RME_Thd_Sched_Rcv+0x26f>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_NOTIF;
ffffffff80217818:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff8021781f:	e9 a6 00 00 00       	jmp    ffffffff802178ca <_RME_Thd_Sched_Rcv+0x315>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Return one notification and delete it from the notification list */
    Thread=(struct RME_Thd_Struct*)(Scheduler->Sched.Event.Next-1U);
ffffffff80217824:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217828:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff8021782c:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80217830:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff80217834:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217838:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff8021783c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217840:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217844:	48 89 d6             	mov    %rdx,%rsi
ffffffff80217847:	48 89 c7             	mov    %rax,%rdi
ffffffff8021784a:	e8 57 55 ff ff       	call   ffffffff8020cda6 <_RME_List_Del>
    /* We need to do this because we are using this to detect whether the notification is sent */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8021784f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217853:	48 83 c0 10          	add    $0x10,%rax
ffffffff80217857:	48 89 c7             	mov    %rax,%rdi
ffffffff8021785a:	e8 1d 55 ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    
    /* Exception pending */
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff8021785f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217863:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80217867:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021786b:	75 2b                	jne    ffffffff80217898 <_RME_Thd_Sched_Rcv+0x2e3>
    {
        RME_COV_MARKER();
        
        Flag=RME_THD_EXCPEND_FLAG;
ffffffff8021786d:	48 b8 00 00 00 00 00 	movabs $0x4000000000000000,%rax
ffffffff80217874:	00 00 40 
ffffffff80217877:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        
        /* Is it also out of timeslice? */
        if(Thread->Sched.Slice==0U)
ffffffff8021787b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021787f:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217883:	48 85 c0             	test   %rax,%rax
ffffffff80217886:	75 36                	jne    ffffffff802178be <_RME_Thd_Sched_Rcv+0x309>
        {
            RME_COV_MARKER();
            
            Flag|=RME_THD_TIMEOUT_FLAG;
ffffffff80217888:	48 b8 00 00 00 00 00 	movabs $0x2000000000000000,%rax
ffffffff8021788f:	00 00 20 
ffffffff80217892:	48 09 45 e0          	or     %rax,-0x20(%rbp)
ffffffff80217896:	eb 26                	jmp    ffffffff802178be <_RME_Thd_Sched_Rcv+0x309>
            RME_COV_MARKER();
            /* No action required */
        }
    }
    /* Timeout */
    else if(Thread->Sched.State==RME_THD_TIMEOUT)
ffffffff80217898:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021789c:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802178a0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802178a4:	75 10                	jne    ffffffff802178b6 <_RME_Thd_Sched_Rcv+0x301>
    {
        RME_COV_MARKER();
        
        Flag=RME_THD_TIMEOUT_FLAG;
ffffffff802178a6:	48 b8 00 00 00 00 00 	movabs $0x2000000000000000,%rax
ffffffff802178ad:	00 00 20 
ffffffff802178b0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802178b4:	eb 08                	jmp    ffffffff802178be <_RME_Thd_Sched_Rcv+0x309>
    /* Spurious notification, cause eliminated before this sched rcv */
    else
    {
        RME_COV_MARKER();
        
        Flag=0U;
ffffffff802178b6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff802178bd:	00 
    }
    
    /* Return the notification TID with the flags */
    return (rme_ret_t)(Thread->Sched.TID|Flag);
ffffffff802178be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802178c2:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff802178c6:	48 0b 45 e0          	or     -0x20(%rbp),%rax
}
ffffffff802178ca:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff802178ce:	c9                   	leave
ffffffff802178cf:	c3                   	ret

ffffffff802178d0 <_RME_Thd_Time_Xfer>:
static rme_ret_t _RME_Thd_Time_Xfer(struct RME_Cap_Cpt* Cpt,
                                    struct RME_Reg_Struct* Reg,
                                    rme_cid_t Cap_Thd_Dst,
                                    rme_cid_t Cap_Thd_Src,
                                    rme_ptr_t Time)
{
ffffffff802178d0:	f3 0f 1e fa          	endbr64
ffffffff802178d4:	55                   	push   %rbp
ffffffff802178d5:	48 89 e5             	mov    %rsp,%rbp
ffffffff802178d8:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff802178dc:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802178e0:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff802178e4:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff802178e8:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff802178ec:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_CPU_Local* Local;
    rme_ptr_t Time_Xfer;
    rme_ptr_t Type_Stat;
    
    /* We may allow transferring infinite time here */
    if(Time==0U)
ffffffff802178f0:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
ffffffff802178f5:	75 0c                	jne    ffffffff80217903 <_RME_Thd_Time_Xfer+0x33>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802178f7:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802178fe:	e9 3c 07 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80217903:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217907:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021790c:	48 85 c0             	test   %rax,%rax
ffffffff8021790f:	0f 85 98 00 00 00    	jne    ffffffff802179ad <_RME_Thd_Time_Xfer+0xdd>
ffffffff80217915:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217919:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021791d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80217921:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217924:	0f 93 c0             	setae  %al
ffffffff80217927:	0f b6 c0             	movzbl %al,%eax
ffffffff8021792a:	48 85 c0             	test   %rax,%rax
ffffffff8021792d:	74 0c                	je     ffffffff8021793b <_RME_Thd_Time_Xfer+0x6b>
ffffffff8021792f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217936:	e9 04 07 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff8021793b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021793f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217943:	48 89 c2             	mov    %rax,%rdx
ffffffff80217946:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021794a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021794e:	48 01 d0             	add    %rdx,%rax
ffffffff80217951:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217955:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217959:	48 8b 00             	mov    (%rax),%rax
ffffffff8021795c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217960:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217964:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217968:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021796b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021796f:	0f 94 c0             	sete   %al
ffffffff80217972:	0f b6 c0             	movzbl %al,%eax
ffffffff80217975:	48 85 c0             	test   %rax,%rax
ffffffff80217978:	74 0c                	je     ffffffff80217986 <_RME_Thd_Time_Xfer+0xb6>
ffffffff8021797a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217981:	e9 b9 06 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217986:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021798a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021798e:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217992:	0f 95 c0             	setne  %al
ffffffff80217995:	0f b6 c0             	movzbl %al,%eax
ffffffff80217998:	48 85 c0             	test   %rax,%rax
ffffffff8021799b:	0f 84 4c 01 00 00    	je     ffffffff80217aed <_RME_Thd_Time_Xfer+0x21d>
ffffffff802179a1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802179a8:	e9 92 06 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff802179ad:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802179b1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802179b5:	48 89 c2             	mov    %rax,%rdx
ffffffff802179b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802179bc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802179c0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802179c3:	0f 93 c0             	setae  %al
ffffffff802179c6:	0f b6 c0             	movzbl %al,%eax
ffffffff802179c9:	48 85 c0             	test   %rax,%rax
ffffffff802179cc:	74 0c                	je     ffffffff802179da <_RME_Thd_Time_Xfer+0x10a>
ffffffff802179ce:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802179d5:	e9 65 06 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff802179da:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802179de:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802179e2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802179e6:	48 89 c2             	mov    %rax,%rdx
ffffffff802179e9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802179ed:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802179f1:	48 01 d0             	add    %rdx,%rax
ffffffff802179f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802179f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802179fc:	48 8b 00             	mov    (%rax),%rax
ffffffff802179ff:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217a03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217a07:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217a0b:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217a0e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217a12:	0f 94 c0             	sete   %al
ffffffff80217a15:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a18:	48 85 c0             	test   %rax,%rax
ffffffff80217a1b:	74 0c                	je     ffffffff80217a29 <_RME_Thd_Time_Xfer+0x159>
ffffffff80217a1d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217a24:	e9 16 06 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217a29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217a2d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217a31:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217a35:	0f 95 c0             	setne  %al
ffffffff80217a38:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a3b:	48 85 c0             	test   %rax,%rax
ffffffff80217a3e:	74 0c                	je     ffffffff80217a4c <_RME_Thd_Time_Xfer+0x17c>
ffffffff80217a40:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217a47:	e9 f3 05 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217a4c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217a50:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217a55:	48 89 c2             	mov    %rax,%rdx
ffffffff80217a58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217a5c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217a60:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217a63:	0f 93 c0             	setae  %al
ffffffff80217a66:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a69:	48 85 c0             	test   %rax,%rax
ffffffff80217a6c:	74 0c                	je     ffffffff80217a7a <_RME_Thd_Time_Xfer+0x1aa>
ffffffff80217a6e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217a75:	e9 c5 05 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217a7a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217a7e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217a83:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217a87:	48 89 c2             	mov    %rax,%rdx
ffffffff80217a8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217a8e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217a92:	48 01 d0             	add    %rdx,%rax
ffffffff80217a95:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217a99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217a9d:	48 8b 00             	mov    (%rax),%rax
ffffffff80217aa0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217aa4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217aa8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217aac:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217aaf:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217ab3:	0f 94 c0             	sete   %al
ffffffff80217ab6:	0f b6 c0             	movzbl %al,%eax
ffffffff80217ab9:	48 85 c0             	test   %rax,%rax
ffffffff80217abc:	74 0c                	je     ffffffff80217aca <_RME_Thd_Time_Xfer+0x1fa>
ffffffff80217abe:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217ac5:	e9 75 05 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217aca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217ace:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217ad2:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217ad6:	0f 95 c0             	setne  %al
ffffffff80217ad9:	0f b6 c0             	movzbl %al,%eax
ffffffff80217adc:	48 85 c0             	test   %rax,%rax
ffffffff80217adf:	74 0c                	je     ffffffff80217aed <_RME_Thd_Time_Xfer+0x21d>
ffffffff80217ae1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217ae8:	e9 52 05 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
                   struct RME_Cap_Thd*,Thd_Dst_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff80217aed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217af1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80217af6:	48 85 c0             	test   %rax,%rax
ffffffff80217af9:	0f 85 98 00 00 00    	jne    ffffffff80217b97 <_RME_Thd_Time_Xfer+0x2c7>
ffffffff80217aff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217b03:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217b07:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80217b0b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217b0e:	0f 93 c0             	setae  %al
ffffffff80217b11:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b14:	48 85 c0             	test   %rax,%rax
ffffffff80217b17:	74 0c                	je     ffffffff80217b25 <_RME_Thd_Time_Xfer+0x255>
ffffffff80217b19:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217b20:	e9 1a 05 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217b25:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217b29:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217b2d:	48 89 c2             	mov    %rax,%rdx
ffffffff80217b30:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217b34:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217b38:	48 01 d0             	add    %rdx,%rax
ffffffff80217b3b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217b3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217b43:	48 8b 00             	mov    (%rax),%rax
ffffffff80217b46:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217b4a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217b4e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217b52:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217b55:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217b59:	0f 94 c0             	sete   %al
ffffffff80217b5c:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b5f:	48 85 c0             	test   %rax,%rax
ffffffff80217b62:	74 0c                	je     ffffffff80217b70 <_RME_Thd_Time_Xfer+0x2a0>
ffffffff80217b64:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217b6b:	e9 cf 04 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217b70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217b74:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217b78:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217b7c:	0f 95 c0             	setne  %al
ffffffff80217b7f:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b82:	48 85 c0             	test   %rax,%rax
ffffffff80217b85:	0f 84 4c 01 00 00    	je     ffffffff80217cd7 <_RME_Thd_Time_Xfer+0x407>
ffffffff80217b8b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217b92:	e9 a8 04 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217b97:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217b9b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217b9f:	48 89 c2             	mov    %rax,%rdx
ffffffff80217ba2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217ba6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217baa:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217bad:	0f 93 c0             	setae  %al
ffffffff80217bb0:	0f b6 c0             	movzbl %al,%eax
ffffffff80217bb3:	48 85 c0             	test   %rax,%rax
ffffffff80217bb6:	74 0c                	je     ffffffff80217bc4 <_RME_Thd_Time_Xfer+0x2f4>
ffffffff80217bb8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217bbf:	e9 7b 04 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217bc4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217bc8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217bcc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217bd0:	48 89 c2             	mov    %rax,%rdx
ffffffff80217bd3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217bd7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217bdb:	48 01 d0             	add    %rdx,%rax
ffffffff80217bde:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217be2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217be6:	48 8b 00             	mov    (%rax),%rax
ffffffff80217be9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217bed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217bf1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217bf5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217bf8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217bfc:	0f 94 c0             	sete   %al
ffffffff80217bff:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c02:	48 85 c0             	test   %rax,%rax
ffffffff80217c05:	74 0c                	je     ffffffff80217c13 <_RME_Thd_Time_Xfer+0x343>
ffffffff80217c07:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217c0e:	e9 2c 04 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217c13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217c17:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217c1b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217c1f:	0f 95 c0             	setne  %al
ffffffff80217c22:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c25:	48 85 c0             	test   %rax,%rax
ffffffff80217c28:	74 0c                	je     ffffffff80217c36 <_RME_Thd_Time_Xfer+0x366>
ffffffff80217c2a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217c31:	e9 09 04 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217c36:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217c3a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217c3f:	48 89 c2             	mov    %rax,%rdx
ffffffff80217c42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217c46:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217c4a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217c4d:	0f 93 c0             	setae  %al
ffffffff80217c50:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c53:	48 85 c0             	test   %rax,%rax
ffffffff80217c56:	74 0c                	je     ffffffff80217c64 <_RME_Thd_Time_Xfer+0x394>
ffffffff80217c58:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217c5f:	e9 db 03 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217c64:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217c68:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217c6d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217c71:	48 89 c2             	mov    %rax,%rdx
ffffffff80217c74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217c78:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217c7c:	48 01 d0             	add    %rdx,%rax
ffffffff80217c7f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217c83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217c87:	48 8b 00             	mov    (%rax),%rax
ffffffff80217c8a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217c8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217c92:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217c96:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217c99:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217c9d:	0f 94 c0             	sete   %al
ffffffff80217ca0:	0f b6 c0             	movzbl %al,%eax
ffffffff80217ca3:	48 85 c0             	test   %rax,%rax
ffffffff80217ca6:	74 0c                	je     ffffffff80217cb4 <_RME_Thd_Time_Xfer+0x3e4>
ffffffff80217ca8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217caf:	e9 8b 03 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217cb4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217cb8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217cbc:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217cc0:	0f 95 c0             	setne  %al
ffffffff80217cc3:	0f b6 c0             	movzbl %al,%eax
ffffffff80217cc6:	48 85 c0             	test   %rax,%rax
ffffffff80217cc9:	74 0c                	je     ffffffff80217cd7 <_RME_Thd_Time_Xfer+0x407>
ffffffff80217ccb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217cd2:	e9 68 03 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
                   struct RME_Cap_Thd*,Thd_Src_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff80217cd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217cdb:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217cdf:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80217ce4:	48 85 c0             	test   %rax,%rax
ffffffff80217ce7:	0f 94 c0             	sete   %al
ffffffff80217cea:	0f b6 c0             	movzbl %al,%eax
ffffffff80217ced:	48 85 c0             	test   %rax,%rax
ffffffff80217cf0:	74 0c                	je     ffffffff80217cfe <_RME_Thd_Time_Xfer+0x42e>
ffffffff80217cf2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217cf9:	e9 41 03 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
    RME_CAP_CHECK(Thd_Src_Op,RME_THD_FLAG_XFER_SRC);
ffffffff80217cfe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217d02:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217d06:	83 e0 40             	and    $0x40,%eax
ffffffff80217d09:	48 85 c0             	test   %rax,%rax
ffffffff80217d0c:	0f 94 c0             	sete   %al
ffffffff80217d0f:	0f b6 c0             	movzbl %al,%eax
ffffffff80217d12:	48 85 c0             	test   %rax,%rax
ffffffff80217d15:	74 0c                	je     ffffffff80217d23 <_RME_Thd_Time_Xfer+0x453>
ffffffff80217d17:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217d1e:	e9 1c 03 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>

    /* Check if the two threads are on the core that is accordance with what we are on */
    Local=RME_CPU_LOCAL();
ffffffff80217d23:	e8 17 3b ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80217d28:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Thd_Src=RME_CAP_GETOBJ(Thd_Src_Op,struct RME_Thd_Struct*);
ffffffff80217d2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217d30:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217d34:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Thd_Src->Sched.Local!=Local)
ffffffff80217d38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217d3c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217d40:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80217d44:	74 0c                	je     ffffffff80217d52 <_RME_Thd_Time_Xfer+0x482>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217d46:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217d4d:	e9 ed 02 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if we have slices to transfer; 0 implies TIMEOUT, BLOCKED, or EXCPEND */
    if(Thd_Src->Sched.Slice==0U)
ffffffff80217d52:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217d56:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217d5a:	48 85 c0             	test   %rax,%rax
ffffffff80217d5d:	75 0c                	jne    ffffffff80217d6b <_RME_Thd_Time_Xfer+0x49b>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217d5f:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217d66:	e9 d4 02 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    Thd_Dst=RME_CAP_GETOBJ(Thd_Dst_Op,struct RME_Thd_Struct*);
ffffffff80217d6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217d6f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217d73:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    
    if(Thd_Dst->Sched.Local!=Local)
ffffffff80217d77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217d7b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217d7f:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80217d83:	74 0c                	je     ffffffff80217d91 <_RME_Thd_Time_Xfer+0x4c1>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217d85:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217d8c:	e9 ae 02 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
        /* No action required */
    }

    /* The destination must never have higher maximum priority than the source,
     * unless it is a init thread which could be used as a black hole */
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80217d91:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217d95:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff80217d99:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217d9d:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80217da1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217da4:	73 23                	jae    ffffffff80217dc9 <_RME_Thd_Time_Xfer+0x4f9>
       (Thd_Dst->Sched.Slice!=RME_THD_INIT_TIME))
ffffffff80217da6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217daa:	48 8b 50 30          	mov    0x30(%rax),%rdx
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80217dae:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217db5:	ff ff 7f 
ffffffff80217db8:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217dbb:	74 0c                	je     ffffffff80217dc9 <_RME_Thd_Time_Xfer+0x4f9>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80217dbd:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80217dc4:	e9 76 02 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Delegating from a normal thread */
    if(Thd_Src->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217dc9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217dcd:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217dd1:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217dd8:	ff ff 7f 
ffffffff80217ddb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217dde:	0f 82 e4 00 00 00    	jb     ffffffff80217ec8 <_RME_Thd_Time_Xfer+0x5f8>
    {
        RME_COV_MARKER();

        /* Delegate all our time */
        if(Time>=RME_THD_INF_TIME)
ffffffff80217de4:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80217deb:	ff ff 7f 
ffffffff80217dee:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
ffffffff80217df2:	73 0e                	jae    ffffffff80217e02 <_RME_Thd_Time_Xfer+0x532>
        {
            RME_COV_MARKER();

            Time_Xfer=Thd_Src->Sched.Slice;
ffffffff80217df4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217df8:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217dfc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217e00:	eb 24                	jmp    ffffffff80217e26 <_RME_Thd_Time_Xfer+0x556>
        /* Delegate some time, if not sufficient, clean up the source time */
        else
        {
            RME_COV_MARKER();
            
            if(Thd_Src->Sched.Slice>Time)
ffffffff80217e02:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217e06:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e0a:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff80217e0e:	73 0a                	jae    ffffffff80217e1a <_RME_Thd_Time_Xfer+0x54a>
            {
                RME_COV_MARKER();

                Time_Xfer=Time;
ffffffff80217e10:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217e14:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217e18:	eb 0c                	jmp    ffffffff80217e26 <_RME_Thd_Time_Xfer+0x556>
            }
            else
            {
                RME_COV_MARKER();

                Time_Xfer=Thd_Src->Sched.Slice;
ffffffff80217e1a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217e1e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e22:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            }
        }
        
        /* See if we are transferring to an infinite budget thread. If yes, we
         * are revoking timeslices; If not, this is a finite transfer */
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217e26:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e2a:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e2e:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217e35:	ff ff 7f 
ffffffff80217e38:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e3b:	72 6f                	jb     ffffffff80217eac <_RME_Thd_Time_Xfer+0x5dc>
        {
            RME_COV_MARKER();
            
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80217e3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e41:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217e45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217e49:	48 01 d0             	add    %rdx,%rax
ffffffff80217e4c:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217e53:	ff ff 7f 
ffffffff80217e56:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e59:	0f 92 c0             	setb   %al
ffffffff80217e5c:	0f b6 c0             	movzbl %al,%eax
ffffffff80217e5f:	48 85 c0             	test   %rax,%rax
ffffffff80217e62:	75 25                	jne    ffffffff80217e89 <_RME_Thd_Time_Xfer+0x5b9>
ffffffff80217e64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e68:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217e6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217e70:	48 01 c2             	add    %rax,%rdx
ffffffff80217e73:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e77:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e7b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e7e:	0f 92 c0             	setb   %al
ffffffff80217e81:	0f b6 c0             	movzbl %al,%eax
ffffffff80217e84:	48 85 c0             	test   %rax,%rax
ffffffff80217e87:	74 0c                	je     ffffffff80217e95 <_RME_Thd_Time_Xfer+0x5c5>
ffffffff80217e89:	48 c7 c0 30 ff ff ff 	mov    $0xffffffffffffff30,%rax
ffffffff80217e90:	e9 aa 01 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
            Thd_Dst->Sched.Slice+=Time_Xfer;
ffffffff80217e95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e99:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217e9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217ea1:	48 01 c2             	add    %rax,%rdx
ffffffff80217ea4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217ea8:	48 89 50 30          	mov    %rdx,0x30(%rax)
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff80217eac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217eb0:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217eb4:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff80217eb8:	48 89 c2             	mov    %rax,%rdx
ffffffff80217ebb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217ebf:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff80217ec3:	e9 e1 00 00 00       	jmp    ffffffff80217fa9 <_RME_Thd_Time_Xfer+0x6d9>
    else
    {
        RME_COV_MARKER();

        /* Infinite transfer to the destination */
        if(Time>=RME_THD_INF_TIME)
ffffffff80217ec8:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80217ecf:	ff ff 7f 
ffffffff80217ed2:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
ffffffff80217ed6:	73 62                	jae    ffffffff80217f3a <_RME_Thd_Time_Xfer+0x66a>
        {
            RME_COV_MARKER();

            /* This transfer will revoke the infinite budget */
            if(Time==RME_THD_INIT_TIME)
ffffffff80217ed8:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217edf:	ff ff 7f 
ffffffff80217ee2:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff80217ee6:	75 23                	jne    ffffffff80217f0b <_RME_Thd_Time_Xfer+0x63b>
            {
                RME_COV_MARKER();
                
                /* Will not revoke, source is an init thread */
                if(Thd_Src->Sched.Slice!=RME_THD_INIT_TIME)
ffffffff80217ee8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217eec:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217ef0:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217ef7:	ff ff 7f 
ffffffff80217efa:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217efd:	74 0c                	je     ffffffff80217f0b <_RME_Thd_Time_Xfer+0x63b>
                {
                    RME_COV_MARKER();
                    
                    Thd_Src->Sched.Slice=0U;
ffffffff80217eff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217f03:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80217f0a:	00 
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* Set destination to infinite if it is not an init thread */
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217f0b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f0f:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217f13:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217f1a:	ff ff 7f 
ffffffff80217f1d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217f20:	0f 82 83 00 00 00    	jb     ffffffff80217fa9 <_RME_Thd_Time_Xfer+0x6d9>
            {
                RME_COV_MARKER();
                
                Thd_Dst->Sched.Slice=RME_THD_INF_TIME;
ffffffff80217f26:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f2a:	48 b9 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rcx
ffffffff80217f31:	ff ff 7f 
ffffffff80217f34:	48 89 48 30          	mov    %rcx,0x30(%rax)
ffffffff80217f38:	eb 6f                	jmp    ffffffff80217fa9 <_RME_Thd_Time_Xfer+0x6d9>
        else
        {
            RME_COV_MARKER();

            /* Just increase the budget of the other thread - check first */
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time);
ffffffff80217f3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f3e:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217f42:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217f46:	48 01 d0             	add    %rdx,%rax
ffffffff80217f49:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217f50:	ff ff 7f 
ffffffff80217f53:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217f56:	0f 92 c0             	setb   %al
ffffffff80217f59:	0f b6 c0             	movzbl %al,%eax
ffffffff80217f5c:	48 85 c0             	test   %rax,%rax
ffffffff80217f5f:	75 25                	jne    ffffffff80217f86 <_RME_Thd_Time_Xfer+0x6b6>
ffffffff80217f61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f65:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217f69:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217f6d:	48 01 c2             	add    %rax,%rdx
ffffffff80217f70:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f74:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217f78:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217f7b:	0f 92 c0             	setb   %al
ffffffff80217f7e:	0f b6 c0             	movzbl %al,%eax
ffffffff80217f81:	48 85 c0             	test   %rax,%rax
ffffffff80217f84:	74 0c                	je     ffffffff80217f92 <_RME_Thd_Time_Xfer+0x6c2>
ffffffff80217f86:	48 c7 c0 30 ff ff ff 	mov    $0xffffffffffffff30,%rax
ffffffff80217f8d:	e9 ad 00 00 00       	jmp    ffffffff8021803f <_RME_Thd_Time_Xfer+0x76f>
            Thd_Dst->Sched.Slice+=Time;
ffffffff80217f92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f96:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217f9a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217f9e:	48 01 c2             	add    %rax,%rdx
ffffffff80217fa1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217fa5:	48 89 50 30          	mov    %rdx,0x30(%rax)
        }
    }

    /* Is the source time used up? If yes, delete it from the run queue, and notify its 
     * parent. If it is not in the run queue, The state of the source must be BLOCKED. */
    if(Thd_Src->Sched.Slice==0U)
ffffffff80217fa9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fad:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217fb1:	48 85 c0             	test   %rax,%rax
ffffffff80217fb4:	75 31                	jne    ffffffff80217fe7 <_RME_Thd_Time_Xfer+0x717>
        
        /* If it is blocked or have an exception, we neither change its state nor send
         * the scheduler notification. It will be sent when the thread unblocks, or gets
         * its exception handled. The rule of the thumb is, we only send scheduler 
         * notifications when the thread really enter TIMEOUT or EXCPEND state. */
        if(Thd_Src->Sched.State==RME_THD_READY)
ffffffff80217fb6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fba:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80217fbe:	48 85 c0             	test   %rax,%rax
ffffffff80217fc1:	75 24                	jne    ffffffff80217fe7 <_RME_Thd_Time_Xfer+0x717>
        {
            RME_COV_MARKER();
            
            /* Remove from runqueue */
            _RME_Run_Del(Thd_Src);
ffffffff80217fc3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fc7:	48 89 c7             	mov    %rax,%rdi
ffffffff80217fca:	e8 4c ae ff ff       	call   ffffffff80212e1b <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Src->Sched.State=RME_THD_TIMEOUT;
ffffffff80217fcf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fd3:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80217fda:	00 
            _RME_Run_Notif(Thd_Src);
ffffffff80217fdb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fdf:	48 89 c7             	mov    %rax,%rdi
ffffffff80217fe2:	e8 7f af ff ff       	call   ffffffff80212f66 <_RME_Run_Notif>
        /* No action required */
    }

    /* Now save the system call return value to the caller 
     * stack - how much time the destination have now */
    __RME_Svc_Retval_Set(Reg,(rme_ret_t)(Thd_Dst->Sched.Slice));
ffffffff80217fe7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217feb:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217fef:	48 89 c2             	mov    %rax,%rdx
ffffffff80217ff2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217ff6:	48 89 d6             	mov    %rdx,%rsi
ffffffff80217ff9:	48 89 c7             	mov    %rax,%rdi
ffffffff80217ffc:	e8 22 f0 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>

    /* See what was the state of the destination thread. If it is timeout, then activate
     * it. If it is BLOCKED or EXCPEND, then leave it alone, and it will be activated
     * when it unblocks or when the exception is handled. */
    if(Thd_Dst->Sched.State==RME_THD_TIMEOUT)
ffffffff80218001:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218005:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80218009:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021800d:	75 18                	jne    ffffffff80218027 <_RME_Thd_Time_Xfer+0x757>
    {
        RME_COV_MARKER();

        /* Ready and add to runqueue */
        Thd_Dst->Sched.State=RME_THD_READY;
ffffffff8021800f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218013:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff8021801a:	00 
        _RME_Run_Ins(Thd_Dst);
ffffffff8021801b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021801f:	48 89 c7             	mov    %rax,%rdi
ffffffff80218022:	e8 44 ad ff ff       	call   ffffffff80212d6b <_RME_Run_Ins>
        RME_COV_MARKER();
    }
    
    /* All possible kernel send (scheduler notifications) done,
     * now pick the highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff80218027:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021802b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021802f:	48 89 d6             	mov    %rdx,%rsi
ffffffff80218032:	48 89 c7             	mov    %rax,%rdi
ffffffff80218035:	e8 e1 0d 00 00       	call   ffffffff80218e1b <_RME_Kern_High>

    return 0;
ffffffff8021803a:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021803f:	c9                   	leave
ffffffff80218040:	c3                   	ret

ffffffff80218041 <_RME_Thd_Swt>:
******************************************************************************/
static rme_ret_t _RME_Thd_Swt(struct RME_Cap_Cpt* Cpt,
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Thd,
                              rme_ptr_t Is_Yield)
{
ffffffff80218041:	f3 0f 1e fa          	endbr64
ffffffff80218045:	55                   	push   %rbp
ffffffff80218046:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218049:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8021804d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80218051:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80218055:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80218059:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    struct RME_Thd_Struct* Thd_High;
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    rme_ptr_t Type_Stat;

    Local=RME_CPU_LOCAL();
ffffffff8021805d:	e8 dd 37 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80218062:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff80218066:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021806a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021806e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* The caller have picked a thread to switch to */
    if(Cap_Thd<RME_CID_NULL)
ffffffff80218072:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff80218077:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
ffffffff8021807b:	0f 8d 21 03 00 00    	jge    ffffffff802183a2 <_RME_Thd_Swt+0x361>
    {
        RME_COV_MARKER();
        
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80218081:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218085:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021808a:	48 85 c0             	test   %rax,%rax
ffffffff8021808d:	0f 85 98 00 00 00    	jne    ffffffff8021812b <_RME_Thd_Swt+0xea>
ffffffff80218093:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218097:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021809b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021809f:	48 39 c2             	cmp    %rax,%rdx
ffffffff802180a2:	0f 93 c0             	setae  %al
ffffffff802180a5:	0f b6 c0             	movzbl %al,%eax
ffffffff802180a8:	48 85 c0             	test   %rax,%rax
ffffffff802180ab:	74 0c                	je     ffffffff802180b9 <_RME_Thd_Swt+0x78>
ffffffff802180ad:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802180b4:	e9 ab 03 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
ffffffff802180b9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802180bd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802180c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802180c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802180c8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802180cc:	48 01 d0             	add    %rdx,%rax
ffffffff802180cf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802180d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802180d7:	48 8b 00             	mov    (%rax),%rax
ffffffff802180da:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff802180de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802180e2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802180e6:	0f b7 c0             	movzwl %ax,%eax
ffffffff802180e9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802180ed:	0f 94 c0             	sete   %al
ffffffff802180f0:	0f b6 c0             	movzbl %al,%eax
ffffffff802180f3:	48 85 c0             	test   %rax,%rax
ffffffff802180f6:	74 0c                	je     ffffffff80218104 <_RME_Thd_Swt+0xc3>
ffffffff802180f8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802180ff:	e9 60 03 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
ffffffff80218104:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218108:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021810c:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80218110:	0f 95 c0             	setne  %al
ffffffff80218113:	0f b6 c0             	movzbl %al,%eax
ffffffff80218116:	48 85 c0             	test   %rax,%rax
ffffffff80218119:	0f 84 4c 01 00 00    	je     ffffffff8021826b <_RME_Thd_Swt+0x22a>
ffffffff8021811f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218126:	e9 39 03 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
ffffffff8021812b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021812f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218133:	48 89 c2             	mov    %rax,%rdx
ffffffff80218136:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021813a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021813e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218141:	0f 93 c0             	setae  %al
ffffffff80218144:	0f b6 c0             	movzbl %al,%eax
ffffffff80218147:	48 85 c0             	test   %rax,%rax
ffffffff8021814a:	74 0c                	je     ffffffff80218158 <_RME_Thd_Swt+0x117>
ffffffff8021814c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218153:	e9 0c 03 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
ffffffff80218158:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021815c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218160:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218164:	48 89 c2             	mov    %rax,%rdx
ffffffff80218167:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021816b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021816f:	48 01 d0             	add    %rdx,%rax
ffffffff80218172:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218176:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021817a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021817d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80218181:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218185:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218189:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021818c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218190:	0f 94 c0             	sete   %al
ffffffff80218193:	0f b6 c0             	movzbl %al,%eax
ffffffff80218196:	48 85 c0             	test   %rax,%rax
ffffffff80218199:	74 0c                	je     ffffffff802181a7 <_RME_Thd_Swt+0x166>
ffffffff8021819b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802181a2:	e9 bd 02 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
ffffffff802181a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802181ab:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802181af:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802181b3:	0f 95 c0             	setne  %al
ffffffff802181b6:	0f b6 c0             	movzbl %al,%eax
ffffffff802181b9:	48 85 c0             	test   %rax,%rax
ffffffff802181bc:	74 0c                	je     ffffffff802181ca <_RME_Thd_Swt+0x189>
ffffffff802181be:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802181c5:	e9 9a 02 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
ffffffff802181ca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802181ce:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802181d3:	48 89 c2             	mov    %rax,%rdx
ffffffff802181d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802181da:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802181de:	48 39 c2             	cmp    %rax,%rdx
ffffffff802181e1:	0f 93 c0             	setae  %al
ffffffff802181e4:	0f b6 c0             	movzbl %al,%eax
ffffffff802181e7:	48 85 c0             	test   %rax,%rax
ffffffff802181ea:	74 0c                	je     ffffffff802181f8 <_RME_Thd_Swt+0x1b7>
ffffffff802181ec:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802181f3:	e9 6c 02 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
ffffffff802181f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802181fc:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218201:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218205:	48 89 c2             	mov    %rax,%rdx
ffffffff80218208:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021820c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218210:	48 01 d0             	add    %rdx,%rax
ffffffff80218213:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218217:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021821b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021821e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80218222:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218226:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021822a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021822d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218231:	0f 94 c0             	sete   %al
ffffffff80218234:	0f b6 c0             	movzbl %al,%eax
ffffffff80218237:	48 85 c0             	test   %rax,%rax
ffffffff8021823a:	74 0c                	je     ffffffff80218248 <_RME_Thd_Swt+0x207>
ffffffff8021823c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218243:	e9 1c 02 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
ffffffff80218248:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021824c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218250:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80218254:	0f 95 c0             	setne  %al
ffffffff80218257:	0f b6 c0             	movzbl %al,%eax
ffffffff8021825a:	48 85 c0             	test   %rax,%rax
ffffffff8021825d:	74 0c                	je     ffffffff8021826b <_RME_Thd_Swt+0x22a>
ffffffff8021825f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218266:	e9 f9 01 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
                       struct RME_Cap_Thd*,Thd_Cap_New,Type_Stat);
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff8021826b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021826f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218273:	25 00 01 00 00       	and    $0x100,%eax
ffffffff80218278:	48 85 c0             	test   %rax,%rax
ffffffff8021827b:	0f 94 c0             	sete   %al
ffffffff8021827e:	0f b6 c0             	movzbl %al,%eax
ffffffff80218281:	48 85 c0             	test   %rax,%rax
ffffffff80218284:	74 0c                	je     ffffffff80218292 <_RME_Thd_Swt+0x251>
ffffffff80218286:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021828d:	e9 d2 01 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
        /* See if we can do operation on this core */
        Thd_New=RME_CAP_GETOBJ(Thd_Cap_New,struct RME_Thd_Struct*);
ffffffff80218292:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218296:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021829a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        if(Thd_New->Sched.Local!=Local)
ffffffff8021829e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802182a2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802182a6:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff802182aa:	74 0c                	je     ffffffff802182b8 <_RME_Thd_Swt+0x277>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff802182ac:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802182b3:	e9 ac 01 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
            RME_COV_MARKER();
            /* No action required */
        }
            
        /* See if we can yield to the thread */
        if(Thd_Cur->Sched.Prio!=Thd_New->Sched.Prio)
ffffffff802182b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802182bc:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff802182c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802182c4:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff802182c8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802182cb:	74 0c                	je     ffffffff802182d9 <_RME_Thd_Swt+0x298>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_PRIO;
ffffffff802182cd:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff802182d4:	e9 8b 01 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
            RME_COV_MARKER();
            /* No action required */
        }
            
        /* Check if the target thread state is valid */
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff802182d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802182dd:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802182e1:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802182e5:	74 1c                	je     ffffffff80218303 <_RME_Thd_Swt+0x2c2>
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff802182e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802182eb:	48 8b 40 38          	mov    0x38(%rax),%rax
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff802182ef:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802182f3:	74 0e                	je     ffffffff80218303 <_RME_Thd_Swt+0x2c2>
           (Thd_New->Sched.State==RME_THD_EXCPEND))
ffffffff802182f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802182f9:	48 8b 40 38          	mov    0x38(%rax),%rax
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff802182fd:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218301:	75 0c                	jne    ffffffff8021830f <_RME_Thd_Swt+0x2ce>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff80218303:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021830a:	e9 55 01 00 00       	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* See if we need to give up all our timeslices in this yield */
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff8021830f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80218314:	0f 84 00 01 00 00    	je     ffffffff8021841a <_RME_Thd_Swt+0x3d9>
ffffffff8021831a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021831e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218322:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80218329:	ff ff 7f 
ffffffff8021832c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021832f:	0f 82 e5 00 00 00    	jb     ffffffff8021841a <_RME_Thd_Swt+0x3d9>
        {
            RME_COV_MARKER();
            
            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff80218335:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218339:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218340:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80218341:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218345:	48 89 c7             	mov    %rax,%rdi
ffffffff80218348:	e8 ce aa ff ff       	call   ffffffff80212e1b <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff8021834d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218351:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80218358:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff80218359:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021835d:	48 89 c7             	mov    %rax,%rdi
ffffffff80218360:	e8 01 ac ff ff       	call   ffffffff80212f66 <_RME_Run_Notif>
            
            /* Because we have sent a notification, we could have unblocked a
             * thread at higher priority. Additionally, if the new thread is
             * the current thread, we are forced to switch to someone else,
             * because the current thread's timeslice must be exhausted. */
            Thd_High=_RME_Run_High(Local);
ffffffff80218365:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218369:	48 89 c7             	mov    %rax,%rdi
ffffffff8021836c:	e8 73 ab ff ff       	call   ffffffff80212ee4 <_RME_Run_High>
ffffffff80218371:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
            if((Thd_High->Sched.Prio>Thd_New->Sched.Prio)||(Thd_Cur==Thd_New))
ffffffff80218375:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218379:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff8021837d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80218381:	48 8b 52 40          	mov    0x40(%rdx),%rdx
ffffffff80218385:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218388:	72 0e                	jb     ffffffff80218398 <_RME_Thd_Swt+0x357>
ffffffff8021838a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021838e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218392:	0f 85 82 00 00 00    	jne    ffffffff8021841a <_RME_Thd_Swt+0x3d9>
            {
                RME_COV_MARKER();

                Thd_New=Thd_High;
ffffffff80218398:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021839c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802183a0:	eb 78                	jmp    ffffffff8021841a <_RME_Thd_Swt+0x3d9>
    else
    {
        RME_COV_MARKER();
        
        /* See if we need to give up all our timeslices in this yield */
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff802183a2:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff802183a7:	74 49                	je     ffffffff802183f2 <_RME_Thd_Swt+0x3b1>
ffffffff802183a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183ad:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802183b1:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff802183b8:	ff ff 7f 
ffffffff802183bb:	48 39 c2             	cmp    %rax,%rdx
ffffffff802183be:	72 32                	jb     ffffffff802183f2 <_RME_Thd_Swt+0x3b1>
        {
            RME_COV_MARKER();
            
            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff802183c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183c4:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff802183cb:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff802183cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183d0:	48 89 c7             	mov    %rax,%rdi
ffffffff802183d3:	e8 43 aa ff ff       	call   ffffffff80212e1b <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff802183d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183dc:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff802183e3:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff802183e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183e8:	48 89 c7             	mov    %rax,%rdi
ffffffff802183eb:	e8 76 ab ff ff       	call   ffffffff80212f66 <_RME_Run_Notif>
ffffffff802183f0:	eb 18                	jmp    ffffffff8021840a <_RME_Thd_Swt+0x3c9>
            RME_COV_MARKER();
            
            /* This operation is just to make sure that if there are any other
             * thread at the same priority level, we're not switching to ourself */
            RME_ASSERT(Thd_Cur->Sched.State==RME_THD_READY);
            _RME_Run_Del(Thd_Cur);
ffffffff802183f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183f6:	48 89 c7             	mov    %rax,%rdi
ffffffff802183f9:	e8 1d aa ff ff       	call   ffffffff80212e1b <_RME_Run_Del>
            _RME_Run_Ins(Thd_Cur);
ffffffff802183fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218402:	48 89 c7             	mov    %rax,%rdi
ffffffff80218405:	e8 61 a9 ff ff       	call   ffffffff80212d6b <_RME_Run_Ins>
        }
        
        Thd_New=_RME_Run_High(Local);
ffffffff8021840a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021840e:	48 89 c7             	mov    %rax,%rdi
ffffffff80218411:	e8 ce aa ff ff       	call   ffffffff80212ee4 <_RME_Run_High>
ffffffff80218416:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Now that we are successful, save the return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);
ffffffff8021841a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021841e:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80218423:	48 89 c7             	mov    %rax,%rdi
ffffffff80218426:	e8 f8 eb 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>

    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
    /* We cannot call _RME_Kern_High because it picks some random thread. Instead,
     * we use a manual implementation that is faster than the _RME_Kern_High. */
    if(Thd_Cur==Thd_New)
ffffffff8021842b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021842f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218433:	75 07                	jne    ffffffff8021843c <_RME_Thd_Swt+0x3fb>
    {
        RME_COV_MARKER();
        
        return 0;
ffffffff80218435:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021843a:	eb 28                	jmp    ffffffff80218464 <_RME_Thd_Swt+0x423>
        RME_COV_MARKER();
        /* No action required */
    }
            
    /* We have a solid context switch at this point */
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff8021843c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80218440:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80218444:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80218448:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021844b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021844e:	e8 ed ab ff ff       	call   ffffffff80213040 <_RME_Run_Swt>
    Local->Thd_Cur=Thd_New;
ffffffff80218453:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218457:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8021845b:	48 89 50 08          	mov    %rdx,0x8(%rax)

    return 0;
ffffffff8021845f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218464:	c9                   	leave
ffffffff80218465:	c3                   	ret

ffffffff80218466 <_RME_Sig_Boot_Crt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Sig_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Sig)
{
ffffffff80218466:	f3 0f 1e fa          	endbr64
ffffffff8021846a:	55                   	push   %rbp
ffffffff8021846b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021846e:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218472:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80218476:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021847a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Crt;
    struct RME_Cap_Sig* Sig_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021847e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218482:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218487:	48 85 c0             	test   %rax,%rax
ffffffff8021848a:	0f 85 98 00 00 00    	jne    ffffffff80218528 <_RME_Sig_Boot_Crt+0xc2>
ffffffff80218490:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218494:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218498:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021849c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021849f:	0f 93 c0             	setae  %al
ffffffff802184a2:	0f b6 c0             	movzbl %al,%eax
ffffffff802184a5:	48 85 c0             	test   %rax,%rax
ffffffff802184a8:	74 0c                	je     ffffffff802184b6 <_RME_Sig_Boot_Crt+0x50>
ffffffff802184aa:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802184b1:	e9 ad 02 00 00       	jmp    ffffffff80218763 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff802184b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802184ba:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802184be:	48 89 c2             	mov    %rax,%rdx
ffffffff802184c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802184c5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802184c9:	48 01 d0             	add    %rdx,%rax
ffffffff802184cc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802184d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802184d4:	48 8b 00             	mov    (%rax),%rax
ffffffff802184d7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802184db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802184df:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802184e3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802184e6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802184ea:	0f 94 c0             	sete   %al
ffffffff802184ed:	0f b6 c0             	movzbl %al,%eax
ffffffff802184f0:	48 85 c0             	test   %rax,%rax
ffffffff802184f3:	74 0c                	je     ffffffff80218501 <_RME_Sig_Boot_Crt+0x9b>
ffffffff802184f5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802184fc:	e9 62 02 00 00       	jmp    ffffffff80218763 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff80218501:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218505:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218509:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021850d:	0f 95 c0             	setne  %al
ffffffff80218510:	0f b6 c0             	movzbl %al,%eax
ffffffff80218513:	48 85 c0             	test   %rax,%rax
ffffffff80218516:	0f 84 4c 01 00 00    	je     ffffffff80218668 <_RME_Sig_Boot_Crt+0x202>
ffffffff8021851c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218523:	e9 3b 02 00 00       	jmp    ffffffff80218763 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff80218528:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021852c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218530:	48 89 c2             	mov    %rax,%rdx
ffffffff80218533:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218537:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021853b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021853e:	0f 93 c0             	setae  %al
ffffffff80218541:	0f b6 c0             	movzbl %al,%eax
ffffffff80218544:	48 85 c0             	test   %rax,%rax
ffffffff80218547:	74 0c                	je     ffffffff80218555 <_RME_Sig_Boot_Crt+0xef>
ffffffff80218549:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218550:	e9 0e 02 00 00       	jmp    ffffffff80218763 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff80218555:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218559:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021855d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218561:	48 89 c2             	mov    %rax,%rdx
ffffffff80218564:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218568:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021856c:	48 01 d0             	add    %rdx,%rax
ffffffff8021856f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218573:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218577:	48 8b 00             	mov    (%rax),%rax
ffffffff8021857a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021857e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218582:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218586:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218589:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021858d:	0f 94 c0             	sete   %al
ffffffff80218590:	0f b6 c0             	movzbl %al,%eax
ffffffff80218593:	48 85 c0             	test   %rax,%rax
ffffffff80218596:	74 0c                	je     ffffffff802185a4 <_RME_Sig_Boot_Crt+0x13e>
ffffffff80218598:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021859f:	e9 bf 01 00 00       	jmp    ffffffff80218763 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff802185a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802185a8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802185ac:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802185b0:	0f 95 c0             	setne  %al
ffffffff802185b3:	0f b6 c0             	movzbl %al,%eax
ffffffff802185b6:	48 85 c0             	test   %rax,%rax
ffffffff802185b9:	74 0c                	je     ffffffff802185c7 <_RME_Sig_Boot_Crt+0x161>
ffffffff802185bb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802185c2:	e9 9c 01 00 00       	jmp    ffffffff80218763 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff802185c7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802185cb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802185d0:	48 89 c2             	mov    %rax,%rdx
ffffffff802185d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802185d7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802185db:	48 39 c2             	cmp    %rax,%rdx
ffffffff802185de:	0f 93 c0             	setae  %al
ffffffff802185e1:	0f b6 c0             	movzbl %al,%eax
ffffffff802185e4:	48 85 c0             	test   %rax,%rax
ffffffff802185e7:	74 0c                	je     ffffffff802185f5 <_RME_Sig_Boot_Crt+0x18f>
ffffffff802185e9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802185f0:	e9 6e 01 00 00       	jmp    ffffffff80218763 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff802185f5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802185f9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802185fe:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218602:	48 89 c2             	mov    %rax,%rdx
ffffffff80218605:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218609:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021860d:	48 01 d0             	add    %rdx,%rax
ffffffff80218610:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218614:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218618:	48 8b 00             	mov    (%rax),%rax
ffffffff8021861b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021861f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218623:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218627:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021862a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021862e:	0f 94 c0             	sete   %al
ffffffff80218631:	0f b6 c0             	movzbl %al,%eax
ffffffff80218634:	48 85 c0             	test   %rax,%rax
ffffffff80218637:	74 0c                	je     ffffffff80218645 <_RME_Sig_Boot_Crt+0x1df>
ffffffff80218639:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218640:	e9 1e 01 00 00       	jmp    ffffffff80218763 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff80218645:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218649:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021864d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218651:	0f 95 c0             	setne  %al
ffffffff80218654:	0f b6 c0             	movzbl %al,%eax
ffffffff80218657:	48 85 c0             	test   %rax,%rax
ffffffff8021865a:	74 0c                	je     ffffffff80218668 <_RME_Sig_Boot_Crt+0x202>
ffffffff8021865c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218663:	e9 fb 00 00 00       	jmp    ffffffff80218763 <_RME_Sig_Boot_Crt+0x2fd>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80218668:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021866c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218670:	83 e0 01             	and    $0x1,%eax
ffffffff80218673:	48 85 c0             	test   %rax,%rax
ffffffff80218676:	0f 94 c0             	sete   %al
ffffffff80218679:	0f b6 c0             	movzbl %al,%eax
ffffffff8021867c:	48 85 c0             	test   %rax,%rax
ffffffff8021867f:	74 0c                	je     ffffffff8021868d <_RME_Sig_Boot_Crt+0x227>
ffffffff80218681:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218688:	e9 d6 00 00 00       	jmp    ffffffff80218763 <_RME_Sig_Boot_Crt+0x2fd>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff8021868d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218691:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218695:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80218699:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021869c:	0f 93 c0             	setae  %al
ffffffff8021869f:	0f b6 c0             	movzbl %al,%eax
ffffffff802186a2:	48 85 c0             	test   %rax,%rax
ffffffff802186a5:	74 0c                	je     ffffffff802186b3 <_RME_Sig_Boot_Crt+0x24d>
ffffffff802186a7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802186ae:	e9 b0 00 00 00       	jmp    ffffffff80218763 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff802186b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802186b7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802186bb:	48 89 c2             	mov    %rax,%rdx
ffffffff802186be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802186c2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802186c6:	48 01 d0             	add    %rdx,%rax
ffffffff802186c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff802186cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802186d1:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802186d8:	00 00 00 
ffffffff802186db:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802186e0:	48 89 c7             	mov    %rax,%rdi
ffffffff802186e3:	e8 76 40 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802186e8:	48 85 c0             	test   %rax,%rax
ffffffff802186eb:	0f 94 c0             	sete   %al
ffffffff802186ee:	0f b6 c0             	movzbl %al,%eax
ffffffff802186f1:	48 85 c0             	test   %rax,%rax
ffffffff802186f4:	74 09                	je     ffffffff802186ff <_RME_Sig_Boot_Crt+0x299>
ffffffff802186f6:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff802186fd:	eb 64                	jmp    ffffffff80218763 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff802186ff:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80218704:	e8 08 41 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80218709:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021870d:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Header init */
    Sig_Crt->Head.Root_Ref=1U;
ffffffff80218711:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218715:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8021871c:	00 
    Sig_Crt->Head.Object=0U;
ffffffff8021871d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218721:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80218728:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff80218729:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021872d:	48 c7 40 10 3f 00 00 	movq   $0x3f,0x10(%rax)
ffffffff80218734:	00 
    
    /* Info init */
    Sig_Crt->Sig_Num=0U;
ffffffff80218735:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218739:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
ffffffff80218740:	00 
    Sig_Crt->Thd=RME_NULL;
ffffffff80218741:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218745:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8021874c:	00 

    /* Establish cap */
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff8021874d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218751:	48 b9 00 00 00 00 00 	movabs $0x8000000000000,%rcx
ffffffff80218758:	00 08 00 
ffffffff8021875b:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_SIG,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8021875e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218763:	c9                   	leave
ffffffff80218764:	c3                   	ret

ffffffff80218765 <_RME_Sig_Crt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Crt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Sig)
{
ffffffff80218765:	f3 0f 1e fa          	endbr64
ffffffff80218769:	55                   	push   %rbp
ffffffff8021876a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021876d:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218771:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80218775:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80218779:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Sig* Sig_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021877d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218781:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218786:	48 85 c0             	test   %rax,%rax
ffffffff80218789:	0f 85 98 00 00 00    	jne    ffffffff80218827 <_RME_Sig_Crt+0xc2>
ffffffff8021878f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218793:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218797:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021879b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021879e:	0f 93 c0             	setae  %al
ffffffff802187a1:	0f b6 c0             	movzbl %al,%eax
ffffffff802187a4:	48 85 c0             	test   %rax,%rax
ffffffff802187a7:	74 0c                	je     ffffffff802187b5 <_RME_Sig_Crt+0x50>
ffffffff802187a9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802187b0:	e9 ad 02 00 00       	jmp    ffffffff80218a62 <_RME_Sig_Crt+0x2fd>
ffffffff802187b5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802187b9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802187bd:	48 89 c2             	mov    %rax,%rdx
ffffffff802187c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802187c4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802187c8:	48 01 d0             	add    %rdx,%rax
ffffffff802187cb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802187cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802187d3:	48 8b 00             	mov    (%rax),%rax
ffffffff802187d6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802187da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802187de:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802187e2:	0f b7 c0             	movzwl %ax,%eax
ffffffff802187e5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802187e9:	0f 94 c0             	sete   %al
ffffffff802187ec:	0f b6 c0             	movzbl %al,%eax
ffffffff802187ef:	48 85 c0             	test   %rax,%rax
ffffffff802187f2:	74 0c                	je     ffffffff80218800 <_RME_Sig_Crt+0x9b>
ffffffff802187f4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802187fb:	e9 62 02 00 00       	jmp    ffffffff80218a62 <_RME_Sig_Crt+0x2fd>
ffffffff80218800:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218804:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218808:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021880c:	0f 95 c0             	setne  %al
ffffffff8021880f:	0f b6 c0             	movzbl %al,%eax
ffffffff80218812:	48 85 c0             	test   %rax,%rax
ffffffff80218815:	0f 84 4c 01 00 00    	je     ffffffff80218967 <_RME_Sig_Crt+0x202>
ffffffff8021881b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218822:	e9 3b 02 00 00       	jmp    ffffffff80218a62 <_RME_Sig_Crt+0x2fd>
ffffffff80218827:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021882b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021882f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218832:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218836:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021883a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021883d:	0f 93 c0             	setae  %al
ffffffff80218840:	0f b6 c0             	movzbl %al,%eax
ffffffff80218843:	48 85 c0             	test   %rax,%rax
ffffffff80218846:	74 0c                	je     ffffffff80218854 <_RME_Sig_Crt+0xef>
ffffffff80218848:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021884f:	e9 0e 02 00 00       	jmp    ffffffff80218a62 <_RME_Sig_Crt+0x2fd>
ffffffff80218854:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218858:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021885c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218860:	48 89 c2             	mov    %rax,%rdx
ffffffff80218863:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218867:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021886b:	48 01 d0             	add    %rdx,%rax
ffffffff8021886e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218872:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218876:	48 8b 00             	mov    (%rax),%rax
ffffffff80218879:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021887d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218881:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218885:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218888:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021888c:	0f 94 c0             	sete   %al
ffffffff8021888f:	0f b6 c0             	movzbl %al,%eax
ffffffff80218892:	48 85 c0             	test   %rax,%rax
ffffffff80218895:	74 0c                	je     ffffffff802188a3 <_RME_Sig_Crt+0x13e>
ffffffff80218897:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021889e:	e9 bf 01 00 00       	jmp    ffffffff80218a62 <_RME_Sig_Crt+0x2fd>
ffffffff802188a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802188a7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802188ab:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802188af:	0f 95 c0             	setne  %al
ffffffff802188b2:	0f b6 c0             	movzbl %al,%eax
ffffffff802188b5:	48 85 c0             	test   %rax,%rax
ffffffff802188b8:	74 0c                	je     ffffffff802188c6 <_RME_Sig_Crt+0x161>
ffffffff802188ba:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802188c1:	e9 9c 01 00 00       	jmp    ffffffff80218a62 <_RME_Sig_Crt+0x2fd>
ffffffff802188c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802188ca:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802188cf:	48 89 c2             	mov    %rax,%rdx
ffffffff802188d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802188d6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802188da:	48 39 c2             	cmp    %rax,%rdx
ffffffff802188dd:	0f 93 c0             	setae  %al
ffffffff802188e0:	0f b6 c0             	movzbl %al,%eax
ffffffff802188e3:	48 85 c0             	test   %rax,%rax
ffffffff802188e6:	74 0c                	je     ffffffff802188f4 <_RME_Sig_Crt+0x18f>
ffffffff802188e8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802188ef:	e9 6e 01 00 00       	jmp    ffffffff80218a62 <_RME_Sig_Crt+0x2fd>
ffffffff802188f4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802188f8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802188fd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218901:	48 89 c2             	mov    %rax,%rdx
ffffffff80218904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218908:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021890c:	48 01 d0             	add    %rdx,%rax
ffffffff8021890f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218913:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218917:	48 8b 00             	mov    (%rax),%rax
ffffffff8021891a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021891e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218922:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218926:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218929:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021892d:	0f 94 c0             	sete   %al
ffffffff80218930:	0f b6 c0             	movzbl %al,%eax
ffffffff80218933:	48 85 c0             	test   %rax,%rax
ffffffff80218936:	74 0c                	je     ffffffff80218944 <_RME_Sig_Crt+0x1df>
ffffffff80218938:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021893f:	e9 1e 01 00 00       	jmp    ffffffff80218a62 <_RME_Sig_Crt+0x2fd>
ffffffff80218944:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218948:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021894c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218950:	0f 95 c0             	setne  %al
ffffffff80218953:	0f b6 c0             	movzbl %al,%eax
ffffffff80218956:	48 85 c0             	test   %rax,%rax
ffffffff80218959:	74 0c                	je     ffffffff80218967 <_RME_Sig_Crt+0x202>
ffffffff8021895b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218962:	e9 fb 00 00 00       	jmp    ffffffff80218a62 <_RME_Sig_Crt+0x2fd>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80218967:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021896b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021896f:	83 e0 01             	and    $0x1,%eax
ffffffff80218972:	48 85 c0             	test   %rax,%rax
ffffffff80218975:	0f 94 c0             	sete   %al
ffffffff80218978:	0f b6 c0             	movzbl %al,%eax
ffffffff8021897b:	48 85 c0             	test   %rax,%rax
ffffffff8021897e:	74 0c                	je     ffffffff8021898c <_RME_Sig_Crt+0x227>
ffffffff80218980:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218987:	e9 d6 00 00 00       	jmp    ffffffff80218a62 <_RME_Sig_Crt+0x2fd>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff8021898c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218990:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218994:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80218998:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021899b:	0f 93 c0             	setae  %al
ffffffff8021899e:	0f b6 c0             	movzbl %al,%eax
ffffffff802189a1:	48 85 c0             	test   %rax,%rax
ffffffff802189a4:	74 0c                	je     ffffffff802189b2 <_RME_Sig_Crt+0x24d>
ffffffff802189a6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802189ad:	e9 b0 00 00 00       	jmp    ffffffff80218a62 <_RME_Sig_Crt+0x2fd>
ffffffff802189b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802189b6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802189ba:	48 89 c2             	mov    %rax,%rdx
ffffffff802189bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802189c1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802189c5:	48 01 d0             	add    %rdx,%rax
ffffffff802189c8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff802189cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802189d0:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802189d7:	00 00 00 
ffffffff802189da:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802189df:	48 89 c7             	mov    %rax,%rdi
ffffffff802189e2:	e8 77 3d ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802189e7:	48 85 c0             	test   %rax,%rax
ffffffff802189ea:	0f 94 c0             	sete   %al
ffffffff802189ed:	0f b6 c0             	movzbl %al,%eax
ffffffff802189f0:	48 85 c0             	test   %rax,%rax
ffffffff802189f3:	74 09                	je     ffffffff802189fe <_RME_Sig_Crt+0x299>
ffffffff802189f5:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff802189fc:	eb 64                	jmp    ffffffff80218a62 <_RME_Sig_Crt+0x2fd>
ffffffff802189fe:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80218a03:	e8 09 3e ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80218a08:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80218a0c:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Header init */
    Sig_Crt->Head.Root_Ref=0U;
ffffffff80218a10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a14:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80218a1b:	00 
    Sig_Crt->Head.Object=0U;
ffffffff80218a1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a20:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80218a27:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff80218a28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a2c:	48 c7 40 10 3f 00 00 	movq   $0x3f,0x10(%rax)
ffffffff80218a33:	00 
    
    /* Info init */
    Sig_Crt->Sig_Num=0U;
ffffffff80218a34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a38:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
ffffffff80218a3f:	00 
    Sig_Crt->Thd=0U;
ffffffff80218a40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a44:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218a4b:	00 
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80218a4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a50:	48 b9 00 00 00 00 00 	movabs $0x8000000000000,%rcx
ffffffff80218a57:	00 08 00 
ffffffff80218a5a:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_SIG,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80218a5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218a62:	c9                   	leave
ffffffff80218a63:	c3                   	ret

ffffffff80218a64 <_RME_Sig_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Sig)
{
ffffffff80218a64:	f3 0f 1e fa          	endbr64
ffffffff80218a68:	55                   	push   %rbp
ffffffff80218a69:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218a6c:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218a70:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80218a74:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80218a78:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Sig* Sig_Del;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80218a7c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218a80:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218a85:	48 85 c0             	test   %rax,%rax
ffffffff80218a88:	0f 85 98 00 00 00    	jne    ffffffff80218b26 <_RME_Sig_Del+0xc2>
ffffffff80218a8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218a92:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218a96:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80218a9a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218a9d:	0f 93 c0             	setae  %al
ffffffff80218aa0:	0f b6 c0             	movzbl %al,%eax
ffffffff80218aa3:	48 85 c0             	test   %rax,%rax
ffffffff80218aa6:	74 0c                	je     ffffffff80218ab4 <_RME_Sig_Del+0x50>
ffffffff80218aa8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218aaf:	e9 65 03 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
ffffffff80218ab4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218ab8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218abc:	48 89 c2             	mov    %rax,%rdx
ffffffff80218abf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218ac3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218ac7:	48 01 d0             	add    %rdx,%rax
ffffffff80218aca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218ace:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218ad2:	48 8b 00             	mov    (%rax),%rax
ffffffff80218ad5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218ad9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218add:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218ae1:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218ae4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218ae8:	0f 94 c0             	sete   %al
ffffffff80218aeb:	0f b6 c0             	movzbl %al,%eax
ffffffff80218aee:	48 85 c0             	test   %rax,%rax
ffffffff80218af1:	74 0c                	je     ffffffff80218aff <_RME_Sig_Del+0x9b>
ffffffff80218af3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218afa:	e9 1a 03 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
ffffffff80218aff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218b03:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218b07:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218b0b:	0f 95 c0             	setne  %al
ffffffff80218b0e:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b11:	48 85 c0             	test   %rax,%rax
ffffffff80218b14:	0f 84 4c 01 00 00    	je     ffffffff80218c66 <_RME_Sig_Del+0x202>
ffffffff80218b1a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218b21:	e9 f3 02 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
ffffffff80218b26:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218b2a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218b2e:	48 89 c2             	mov    %rax,%rdx
ffffffff80218b31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218b35:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218b39:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218b3c:	0f 93 c0             	setae  %al
ffffffff80218b3f:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b42:	48 85 c0             	test   %rax,%rax
ffffffff80218b45:	74 0c                	je     ffffffff80218b53 <_RME_Sig_Del+0xef>
ffffffff80218b47:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218b4e:	e9 c6 02 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
ffffffff80218b53:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218b57:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218b5b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218b5f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218b62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218b66:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218b6a:	48 01 d0             	add    %rdx,%rax
ffffffff80218b6d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218b71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218b75:	48 8b 00             	mov    (%rax),%rax
ffffffff80218b78:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218b7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218b80:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218b84:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218b87:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218b8b:	0f 94 c0             	sete   %al
ffffffff80218b8e:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b91:	48 85 c0             	test   %rax,%rax
ffffffff80218b94:	74 0c                	je     ffffffff80218ba2 <_RME_Sig_Del+0x13e>
ffffffff80218b96:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218b9d:	e9 77 02 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
ffffffff80218ba2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218ba6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218baa:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218bae:	0f 95 c0             	setne  %al
ffffffff80218bb1:	0f b6 c0             	movzbl %al,%eax
ffffffff80218bb4:	48 85 c0             	test   %rax,%rax
ffffffff80218bb7:	74 0c                	je     ffffffff80218bc5 <_RME_Sig_Del+0x161>
ffffffff80218bb9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218bc0:	e9 54 02 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
ffffffff80218bc5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218bc9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218bce:	48 89 c2             	mov    %rax,%rdx
ffffffff80218bd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218bd5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218bd9:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218bdc:	0f 93 c0             	setae  %al
ffffffff80218bdf:	0f b6 c0             	movzbl %al,%eax
ffffffff80218be2:	48 85 c0             	test   %rax,%rax
ffffffff80218be5:	74 0c                	je     ffffffff80218bf3 <_RME_Sig_Del+0x18f>
ffffffff80218be7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218bee:	e9 26 02 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
ffffffff80218bf3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218bf7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218bfc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218c00:	48 89 c2             	mov    %rax,%rdx
ffffffff80218c03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218c07:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218c0b:	48 01 d0             	add    %rdx,%rax
ffffffff80218c0e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218c12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218c16:	48 8b 00             	mov    (%rax),%rax
ffffffff80218c19:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218c1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218c21:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218c25:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218c28:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218c2c:	0f 94 c0             	sete   %al
ffffffff80218c2f:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c32:	48 85 c0             	test   %rax,%rax
ffffffff80218c35:	74 0c                	je     ffffffff80218c43 <_RME_Sig_Del+0x1df>
ffffffff80218c37:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218c3e:	e9 d6 01 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
ffffffff80218c43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218c47:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218c4b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218c4f:	0f 95 c0             	setne  %al
ffffffff80218c52:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c55:	48 85 c0             	test   %rax,%rax
ffffffff80218c58:	74 0c                	je     ffffffff80218c66 <_RME_Sig_Del+0x202>
ffffffff80218c5a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218c61:	e9 b3 01 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80218c66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218c6a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218c6e:	83 e0 02             	and    $0x2,%eax
ffffffff80218c71:	48 85 c0             	test   %rax,%rax
ffffffff80218c74:	0f 94 c0             	sete   %al
ffffffff80218c77:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c7a:	48 85 c0             	test   %rax,%rax
ffffffff80218c7d:	74 0c                	je     ffffffff80218c8b <_RME_Sig_Del+0x227>
ffffffff80218c7f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218c86:	e9 8e 01 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff80218c8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218c8f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218c93:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80218c97:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218c9a:	0f 93 c0             	setae  %al
ffffffff80218c9d:	0f b6 c0             	movzbl %al,%eax
ffffffff80218ca0:	48 85 c0             	test   %rax,%rax
ffffffff80218ca3:	74 0c                	je     ffffffff80218cb1 <_RME_Sig_Del+0x24d>
ffffffff80218ca5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218cac:	e9 68 01 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
ffffffff80218cb1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218cb5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218cb9:	48 89 c2             	mov    %rax,%rdx
ffffffff80218cbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218cc0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218cc4:	48 01 d0             	add    %rdx,%rax
ffffffff80218cc7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80218ccb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218ccf:	48 8b 00             	mov    (%rax),%rax
ffffffff80218cd2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218cd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218cda:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218cde:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218ce1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218ce5:	0f 95 c0             	setne  %al
ffffffff80218ce8:	0f b6 c0             	movzbl %al,%eax
ffffffff80218ceb:	48 85 c0             	test   %rax,%rax
ffffffff80218cee:	74 0c                	je     ffffffff80218cfc <_RME_Sig_Del+0x298>
ffffffff80218cf0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218cf7:	e9 1d 01 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
ffffffff80218cfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218d00:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218d04:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80218d08:	0f 95 c0             	setne  %al
ffffffff80218d0b:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d0e:	48 85 c0             	test   %rax,%rax
ffffffff80218d11:	74 0c                	je     ffffffff80218d1f <_RME_Sig_Del+0x2bb>
ffffffff80218d13:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218d1a:	e9 fa 00 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
ffffffff80218d1f:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80218d24:	e8 e8 3a ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80218d29:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218d30:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80218d34:	48 29 c2             	sub    %rax,%rdx
ffffffff80218d37:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80218d3b:	0f 96 c0             	setbe  %al
ffffffff80218d3e:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d41:	48 98                	cltq
ffffffff80218d43:	48 85 c0             	test   %rax,%rax
ffffffff80218d46:	74 0c                	je     ffffffff80218d54 <_RME_Sig_Del+0x2f0>
ffffffff80218d48:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80218d4f:	e9 c5 00 00 00       	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
ffffffff80218d54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218d58:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218d5c:	48 85 c0             	test   %rax,%rax
ffffffff80218d5f:	0f 95 c0             	setne  %al
ffffffff80218d62:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d65:	48 85 c0             	test   %rax,%rax
ffffffff80218d68:	74 41                	je     ffffffff80218dab <_RME_Sig_Del+0x347>
ffffffff80218d6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218d6e:	89 c0                	mov    %eax,%eax
ffffffff80218d70:	48 85 c0             	test   %rax,%rax
ffffffff80218d73:	0f 94 c0             	sete   %al
ffffffff80218d76:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d79:	48 85 c0             	test   %rax,%rax
ffffffff80218d7c:	74 24                	je     ffffffff80218da2 <_RME_Sig_Del+0x33e>
ffffffff80218d7e:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80218d85:	00 ff ff 
ffffffff80218d88:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80218d8c:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218d93:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218d97:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218d9a:	48 89 c7             	mov    %rax,%rdi
ffffffff80218d9d:	e8 bc 39 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80218da2:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80218da9:	eb 6e                	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>

    /* Check if the signal endpoint is currently used and cannot be deleted */
    if(Sig_Del->Thd!=(void*)0U)
ffffffff80218dab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218daf:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218db3:	48 85 c0             	test   %rax,%rax
ffffffff80218db6:	74 2d                	je     ffffffff80218de5 <_RME_Sig_Del+0x381>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Sig_Del,Type_Stat);
ffffffff80218db8:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80218dbf:	00 ff ff 
ffffffff80218dc2:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80218dc6:	48 89 c2             	mov    %rax,%rdx
ffffffff80218dc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218dcd:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218dd1:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218dd4:	48 89 c7             	mov    %rax,%rdi
ffffffff80218dd7:	e8 82 39 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_SIV_ACT;
ffffffff80218ddc:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff80218de3:	eb 34                	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Sig_Del,Type_Stat);
ffffffff80218de5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218de9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218ded:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80218df2:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218df5:	48 89 c7             	mov    %rax,%rdi
ffffffff80218df8:	e8 61 39 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80218dfd:	48 85 c0             	test   %rax,%rax
ffffffff80218e00:	0f 94 c0             	sete   %al
ffffffff80218e03:	0f b6 c0             	movzbl %al,%eax
ffffffff80218e06:	48 85 c0             	test   %rax,%rax
ffffffff80218e09:	74 09                	je     ffffffff80218e14 <_RME_Sig_Del+0x3b0>
ffffffff80218e0b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80218e12:	eb 05                	jmp    ffffffff80218e19 <_RME_Sig_Del+0x3b5>
    
    return 0;
ffffffff80218e14:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218e19:	c9                   	leave
ffffffff80218e1a:	c3                   	ret

ffffffff80218e1b <_RME_Kern_High>:
Output      : volatile struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Kern_High(struct RME_Reg_Struct* Reg,
                    struct RME_CPU_Local* Local)
{
ffffffff80218e1b:	f3 0f 1e fa          	endbr64
ffffffff80218e1f:	55                   	push   %rbp
ffffffff80218e20:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218e23:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80218e27:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80218e2b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct RME_Thd_Struct* Thd_New;
    struct RME_Thd_Struct* Thd_Cur;

    Thd_New=_RME_Run_High(Local);
ffffffff80218e2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218e33:	48 89 c7             	mov    %rax,%rdi
ffffffff80218e36:	e8 a9 a0 ff ff       	call   ffffffff80212ee4 <_RME_Run_High>
ffffffff80218e3b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_ASSERT(Thd_New!=(void*)RME_NULL);
    Thd_Cur=Local->Thd_Cur;
ffffffff80218e3f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218e43:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218e47:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Are these two threads the same? */
    if(Thd_New==Thd_Cur)
ffffffff80218e4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218e4f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218e53:	74 47                	je     ffffffff80218e9c <_RME_Kern_High+0x81>
        /* No action required */
    }

    /* Check if we need to do the context switch regardless of priority
     * because the current thread is not ready yet. */
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff80218e55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218e59:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80218e5d:	48 85 c0             	test   %rax,%rax
ffffffff80218e60:	75 15                	jne    ffffffff80218e77 <_RME_Kern_High+0x5c>
    {
        RME_COV_MARKER();

        /* Check priority to see if the switch is necessary */
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff80218e62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218e66:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80218e6a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80218e6e:	48 8b 52 40          	mov    0x40(%rdx),%rdx
ffffffff80218e72:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218e75:	73 28                	jae    ffffffff80218e9f <_RME_Kern_High+0x84>
    }

    /* We will have a solid context switch on this point. The current 
     * thread is not necessarily READY, it could be EXCPEND as well. */
    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff80218e77:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80218e7b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218e7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218e83:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218e86:	48 89 c7             	mov    %rax,%rdi
ffffffff80218e89:	e8 b2 a1 ff ff       	call   ffffffff80213040 <_RME_Run_Swt>
    Local->Thd_Cur=Thd_New;
ffffffff80218e8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218e92:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80218e96:	48 89 50 08          	mov    %rdx,0x8(%rax)
ffffffff80218e9a:	eb 04                	jmp    ffffffff80218ea0 <_RME_Kern_High+0x85>
        return;
ffffffff80218e9c:	90                   	nop
ffffffff80218e9d:	eb 01                	jmp    ffffffff80218ea0 <_RME_Kern_High+0x85>
            return;
ffffffff80218e9f:	90                   	nop
}
ffffffff80218ea0:	c9                   	leave
ffffffff80218ea1:	c3                   	ret

ffffffff80218ea2 <_RME_Kern_Snd>:
Input       : struct RME_Cap_Sig* Cap_Sig - The signal root capability.
Output      : None.
Return      : rme_ret_t - If successful, 0, or an error code.
******************************************************************************/
rme_ret_t _RME_Kern_Snd(struct RME_Cap_Sig* Cap_Sig)
{
ffffffff80218ea2:	f3 0f 1e fa          	endbr64
ffffffff80218ea6:	55                   	push   %rbp
ffffffff80218ea7:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218eaa:	53                   	push   %rbx
ffffffff80218eab:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80218eaf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    rme_ptr_t Unblock;
    struct RME_Thd_Struct* Thd_Sig;
    
    Thd_Sig=Cap_Sig->Thd;
ffffffff80218eb3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218eb7:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218ebb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* If and only if we are calling from the same core do we unblock */
    if(Thd_Sig!=(void*)RME_NULL)
ffffffff80218ebf:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80218ec4:	74 26                	je     ffffffff80218eec <_RME_Kern_Snd+0x4a>
    {
        RME_COV_MARKER();

        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff80218ec6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218eca:	48 8b 58 28          	mov    0x28(%rax),%rbx
ffffffff80218ece:	e8 6c 29 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80218ed3:	48 39 c3             	cmp    %rax,%rbx
ffffffff80218ed6:	75 0a                	jne    ffffffff80218ee2 <_RME_Kern_Snd+0x40>
        {
            RME_COV_MARKER();

            Unblock=1U;
ffffffff80218ed8:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
ffffffff80218edf:	00 
ffffffff80218ee0:	eb 12                	jmp    ffffffff80218ef4 <_RME_Kern_Snd+0x52>
        }
        else
        {
            RME_COV_MARKER();

            Unblock=0U;
ffffffff80218ee2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80218ee9:	00 
ffffffff80218eea:	eb 08                	jmp    ffffffff80218ef4 <_RME_Kern_Snd+0x52>
    }
    else
    {
        RME_COV_MARKER();

        Unblock=0U;
ffffffff80218eec:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80218ef3:	00 
    }

    if(Unblock!=0U)
ffffffff80218ef4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80218ef9:	74 65                	je     ffffffff80218f60 <_RME_Kern_Snd+0xbe>

        /* The thread is blocked, and it is on our core. Unblock it, and
         * set the return value to one as always, Even if we were specifying
         * multi-receive. This is because other cores may reduce the count
         * to zero while we are doing this. */
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff80218efb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218eff:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80218f06:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80218f0b:	48 89 c7             	mov    %rax,%rdi
ffffffff80218f0e:	e8 10 e1 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
        
        /* See if the thread still have time left */
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff80218f13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f17:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218f1b:	48 85 c0             	test   %rax,%rax
ffffffff80218f1e:	74 1a                	je     ffffffff80218f3a <_RME_Kern_Snd+0x98>
        {
            RME_COV_MARKER();

            /* Ready and add to runqueue */
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff80218f20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f24:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80218f2b:	00 
            _RME_Run_Ins(Thd_Sig);
ffffffff80218f2c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f30:	48 89 c7             	mov    %rax,%rdi
ffffffff80218f33:	e8 33 9e ff ff       	call   ffffffff80212d6b <_RME_Run_Ins>
ffffffff80218f38:	eb 18                	jmp    ffffffff80218f52 <_RME_Kern_Snd+0xb0>
        else
        {
            RME_COV_MARKER();

            /* Timeout and notify parent */
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff80218f3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f3e:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80218f45:	00 
            _RME_Run_Notif(Thd_Sig);
ffffffff80218f46:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f4a:	48 89 c7             	mov    %rax,%rdi
ffffffff80218f4d:	e8 14 a0 ff ff       	call   ffffffff80212f66 <_RME_Run_Notif>
         * we hope to perform the context switch only once when exiting that
         * handler. Also note that the current thread could be EXCPEND as well;
         * this is different from the normal signal sending system call. */
        
        /* Clear endpoint blocking status - no write release required */
        Cap_Sig->Thd=RME_NULL;
ffffffff80218f52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218f56:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218f5d:	00 
ffffffff80218f5e:	eb 44                	jmp    ffffffff80218fa4 <_RME_Kern_Snd+0x102>
    {
        RME_COV_MARKER();

        /* The guy who blocked on it is not on our core, or nobody blocked.
         * We just faa the counter value and return. */
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80218f60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218f64:	48 83 c0 28          	add    $0x28,%rax
ffffffff80218f68:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80218f6d:	48 89 c7             	mov    %rax,%rdi
ffffffff80218f70:	e8 1e 38 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff80218f75:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80218f7c:	ff ff 7f 
ffffffff80218f7f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218f82:	73 20                	jae    ffffffff80218fa4 <_RME_Kern_Snd+0x102>
        {
            RME_COV_MARKER();

            RME_FETCH_ADD(&(Cap_Sig->Sig_Num),-1);
ffffffff80218f84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218f88:	48 83 c0 28          	add    $0x28,%rax
ffffffff80218f8c:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80218f93:	48 89 c7             	mov    %rax,%rdi
ffffffff80218f96:	e8 f8 37 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
            return RME_ERR_SIV_FULL;
ffffffff80218f9b:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff80218fa2:	eb 05                	jmp    ffffffff80218fa9 <_RME_Kern_Snd+0x107>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff80218fa4:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218fa9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff80218fad:	c9                   	leave
ffffffff80218fae:	c3                   	ret

ffffffff80218faf <_RME_Sig_Snd>:
Return      : rme_ret_t - If successful, 0, or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Snd(struct RME_Cap_Cpt* Cpt, 
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Sig)
{
ffffffff80218faf:	f3 0f 1e fa          	endbr64
ffffffff80218fb3:	55                   	push   %rbp
ffffffff80218fb4:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218fb7:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80218fbb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80218fbf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80218fc3:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    struct RME_CPU_Local* Local;
    rme_ptr_t Unblock;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80218fc7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218fcb:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218fd0:	48 85 c0             	test   %rax,%rax
ffffffff80218fd3:	0f 85 98 00 00 00    	jne    ffffffff80219071 <_RME_Sig_Snd+0xc2>
ffffffff80218fd9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218fdd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218fe1:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80218fe5:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218fe8:	0f 93 c0             	setae  %al
ffffffff80218feb:	0f b6 c0             	movzbl %al,%eax
ffffffff80218fee:	48 85 c0             	test   %rax,%rax
ffffffff80218ff1:	74 0c                	je     ffffffff80218fff <_RME_Sig_Snd+0x50>
ffffffff80218ff3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218ffa:	e9 2b 03 00 00       	jmp    ffffffff8021932a <_RME_Sig_Snd+0x37b>
ffffffff80218fff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219003:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219007:	48 89 c2             	mov    %rax,%rdx
ffffffff8021900a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021900e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219012:	48 01 d0             	add    %rdx,%rax
ffffffff80219015:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219019:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021901d:	48 8b 00             	mov    (%rax),%rax
ffffffff80219020:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219024:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219028:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021902c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021902f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219033:	0f 94 c0             	sete   %al
ffffffff80219036:	0f b6 c0             	movzbl %al,%eax
ffffffff80219039:	48 85 c0             	test   %rax,%rax
ffffffff8021903c:	74 0c                	je     ffffffff8021904a <_RME_Sig_Snd+0x9b>
ffffffff8021903e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219045:	e9 e0 02 00 00       	jmp    ffffffff8021932a <_RME_Sig_Snd+0x37b>
ffffffff8021904a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021904e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219052:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80219056:	0f 95 c0             	setne  %al
ffffffff80219059:	0f b6 c0             	movzbl %al,%eax
ffffffff8021905c:	48 85 c0             	test   %rax,%rax
ffffffff8021905f:	0f 84 4c 01 00 00    	je     ffffffff802191b1 <_RME_Sig_Snd+0x202>
ffffffff80219065:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021906c:	e9 b9 02 00 00       	jmp    ffffffff8021932a <_RME_Sig_Snd+0x37b>
ffffffff80219071:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219075:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219079:	48 89 c2             	mov    %rax,%rdx
ffffffff8021907c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219080:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219084:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219087:	0f 93 c0             	setae  %al
ffffffff8021908a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021908d:	48 85 c0             	test   %rax,%rax
ffffffff80219090:	74 0c                	je     ffffffff8021909e <_RME_Sig_Snd+0xef>
ffffffff80219092:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219099:	e9 8c 02 00 00       	jmp    ffffffff8021932a <_RME_Sig_Snd+0x37b>
ffffffff8021909e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802190a2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802190a6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802190aa:	48 89 c2             	mov    %rax,%rdx
ffffffff802190ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802190b1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802190b5:	48 01 d0             	add    %rdx,%rax
ffffffff802190b8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802190bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802190c0:	48 8b 00             	mov    (%rax),%rax
ffffffff802190c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802190c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802190cb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802190cf:	0f b7 c0             	movzwl %ax,%eax
ffffffff802190d2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802190d6:	0f 94 c0             	sete   %al
ffffffff802190d9:	0f b6 c0             	movzbl %al,%eax
ffffffff802190dc:	48 85 c0             	test   %rax,%rax
ffffffff802190df:	74 0c                	je     ffffffff802190ed <_RME_Sig_Snd+0x13e>
ffffffff802190e1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802190e8:	e9 3d 02 00 00       	jmp    ffffffff8021932a <_RME_Sig_Snd+0x37b>
ffffffff802190ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802190f1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802190f5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802190f9:	0f 95 c0             	setne  %al
ffffffff802190fc:	0f b6 c0             	movzbl %al,%eax
ffffffff802190ff:	48 85 c0             	test   %rax,%rax
ffffffff80219102:	74 0c                	je     ffffffff80219110 <_RME_Sig_Snd+0x161>
ffffffff80219104:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021910b:	e9 1a 02 00 00       	jmp    ffffffff8021932a <_RME_Sig_Snd+0x37b>
ffffffff80219110:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219114:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219119:	48 89 c2             	mov    %rax,%rdx
ffffffff8021911c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219120:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219124:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219127:	0f 93 c0             	setae  %al
ffffffff8021912a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021912d:	48 85 c0             	test   %rax,%rax
ffffffff80219130:	74 0c                	je     ffffffff8021913e <_RME_Sig_Snd+0x18f>
ffffffff80219132:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219139:	e9 ec 01 00 00       	jmp    ffffffff8021932a <_RME_Sig_Snd+0x37b>
ffffffff8021913e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219142:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219147:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021914b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021914e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219152:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219156:	48 01 d0             	add    %rdx,%rax
ffffffff80219159:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021915d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219161:	48 8b 00             	mov    (%rax),%rax
ffffffff80219164:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219168:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021916c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219170:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219173:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219177:	0f 94 c0             	sete   %al
ffffffff8021917a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021917d:	48 85 c0             	test   %rax,%rax
ffffffff80219180:	74 0c                	je     ffffffff8021918e <_RME_Sig_Snd+0x1df>
ffffffff80219182:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219189:	e9 9c 01 00 00       	jmp    ffffffff8021932a <_RME_Sig_Snd+0x37b>
ffffffff8021918e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219192:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219196:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff8021919a:	0f 95 c0             	setne  %al
ffffffff8021919d:	0f b6 c0             	movzbl %al,%eax
ffffffff802191a0:	48 85 c0             	test   %rax,%rax
ffffffff802191a3:	74 0c                	je     ffffffff802191b1 <_RME_Sig_Snd+0x202>
ffffffff802191a5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802191ac:	e9 79 01 00 00       	jmp    ffffffff8021932a <_RME_Sig_Snd+0x37b>
                   struct RME_Cap_Sig*,Sig_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff802191b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802191b5:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802191b9:	83 e0 01             	and    $0x1,%eax
ffffffff802191bc:	48 85 c0             	test   %rax,%rax
ffffffff802191bf:	0f 94 c0             	sete   %al
ffffffff802191c2:	0f b6 c0             	movzbl %al,%eax
ffffffff802191c5:	48 85 c0             	test   %rax,%rax
ffffffff802191c8:	74 0c                	je     ffffffff802191d6 <_RME_Sig_Snd+0x227>
ffffffff802191ca:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802191d1:	e9 54 01 00 00       	jmp    ffffffff8021932a <_RME_Sig_Snd+0x37b>
    
    Local=RME_CPU_LOCAL();
ffffffff802191d6:	e8 64 26 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802191db:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802191df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802191e3:	48 8b 00             	mov    (%rax),%rax
ffffffff802191e6:	89 c0                	mov    %eax,%eax
ffffffff802191e8:	48 85 c0             	test   %rax,%rax
ffffffff802191eb:	74 0a                	je     ffffffff802191f7 <_RME_Sig_Snd+0x248>
ffffffff802191ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802191f1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802191f5:	eb 04                	jmp    ffffffff802191fb <_RME_Sig_Snd+0x24c>
ffffffff802191f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802191fb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Thd_Rcv=Sig_Root->Thd;
ffffffff802191ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219203:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80219207:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    /* If and only if we are calling from the same core do we unblock */
    if(Thd_Rcv!=(void*)RME_NULL)
ffffffff8021920b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80219210:	74 22                	je     ffffffff80219234 <_RME_Sig_Snd+0x285>
    {
        RME_COV_MARKER();

        if(Thd_Rcv->Sched.Local==Local)
ffffffff80219212:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219216:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021921a:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8021921e:	75 0a                	jne    ffffffff8021922a <_RME_Sig_Snd+0x27b>
        {
            RME_COV_MARKER();

            Unblock=1U;
ffffffff80219220:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff80219227:	00 
ffffffff80219228:	eb 12                	jmp    ffffffff8021923c <_RME_Sig_Snd+0x28d>
        }
        else
        {
            RME_COV_MARKER();

            Unblock=0U;
ffffffff8021922a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80219231:	00 
ffffffff80219232:	eb 08                	jmp    ffffffff8021923c <_RME_Sig_Snd+0x28d>
    }
    else
    {
        RME_COV_MARKER();

        Unblock=0U;
ffffffff80219234:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021923b:	00 
    }
    
    if(Unblock!=0U)
ffffffff8021923c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80219241:	0f 84 89 00 00 00    	je     ffffffff802192d0 <_RME_Sig_Snd+0x321>
    {
        RME_COV_MARKER();

        /* Now save the system call return value to the caller stack */
        __RME_Svc_Retval_Set(Reg,0);
ffffffff80219247:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021924b:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219250:	48 89 c7             	mov    %rax,%rdi
ffffffff80219253:	e8 cb dd 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
        
        /* The thread is blocked, and it is on our core. Unblock it, and
         * set the return value to one as always, Even if we were specifying
         * multi-receive. This is because other cores may reduce the count
         * to zero while we are doing this. */
        __RME_Svc_Retval_Set(&(Thd_Rcv->Ctx.Reg->Reg),1);
ffffffff80219258:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021925c:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80219263:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219268:	48 89 c7             	mov    %rax,%rdi
ffffffff8021926b:	e8 b3 dd 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
        
        /* See if the thread still have time left */
        if(Thd_Rcv->Sched.Slice!=0U)
ffffffff80219270:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219274:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80219278:	48 85 c0             	test   %rax,%rax
ffffffff8021927b:	74 1a                	je     ffffffff80219297 <_RME_Sig_Snd+0x2e8>
        {
            RME_COV_MARKER();

            /* Ready and add to runqueue */
            Thd_Rcv->Sched.State=RME_THD_READY;
ffffffff8021927d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219281:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80219288:	00 
            _RME_Run_Ins(Thd_Rcv);
ffffffff80219289:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021928d:	48 89 c7             	mov    %rax,%rdi
ffffffff80219290:	e8 d6 9a ff ff       	call   ffffffff80212d6b <_RME_Run_Ins>
ffffffff80219295:	eb 18                	jmp    ffffffff802192af <_RME_Sig_Snd+0x300>
        else
        {
            RME_COV_MARKER();

            /* Timeout and notify parent */
            Thd_Rcv->Sched.State=RME_THD_TIMEOUT;
ffffffff80219297:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021929b:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff802192a2:	00 
            _RME_Run_Notif(Thd_Rcv);
ffffffff802192a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802192a7:	48 89 c7             	mov    %rax,%rdi
ffffffff802192aa:	e8 b7 9c ff ff       	call   ffffffff80212f66 <_RME_Run_Notif>
        }
        
        /* Pick the highest priority thread to run */
        _RME_Kern_High(Reg,Local);
ffffffff802192af:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff802192b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802192b7:	48 89 d6             	mov    %rdx,%rsi
ffffffff802192ba:	48 89 c7             	mov    %rax,%rdi
ffffffff802192bd:	e8 59 fb ff ff       	call   ffffffff80218e1b <_RME_Kern_High>
        
        /* Clear endpoint blocking status - no write release required */
        Sig_Root->Thd=RME_NULL;
ffffffff802192c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802192c6:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff802192cd:	00 
ffffffff802192ce:	eb 55                	jmp    ffffffff80219325 <_RME_Sig_Snd+0x376>
    else
    {
        RME_COV_MARKER();

        /* The guy who blocked on it is not on our core, we just faa and return */
        if(RME_FETCH_ADD(&(Sig_Root->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff802192d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802192d4:	48 83 c0 28          	add    $0x28,%rax
ffffffff802192d8:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802192dd:	48 89 c7             	mov    %rax,%rdi
ffffffff802192e0:	e8 ae 34 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff802192e5:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff802192ec:	ff ff 7f 
ffffffff802192ef:	48 39 c2             	cmp    %rax,%rdx
ffffffff802192f2:	73 20                	jae    ffffffff80219314 <_RME_Sig_Snd+0x365>
        {
            RME_COV_MARKER();

            RME_FETCH_ADD(&(Sig_Root->Sig_Num),-1);
ffffffff802192f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802192f8:	48 83 c0 28          	add    $0x28,%rax
ffffffff802192fc:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80219303:	48 89 c7             	mov    %rax,%rdi
ffffffff80219306:	e8 88 34 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
            return RME_ERR_SIV_FULL;
ffffffff8021930b:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff80219312:	eb 16                	jmp    ffffffff8021932a <_RME_Sig_Snd+0x37b>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Now save the system call return value to the caller stack */
        __RME_Svc_Retval_Set(Reg,0);
ffffffff80219314:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80219318:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021931d:	48 89 c7             	mov    %rax,%rdi
ffffffff80219320:	e8 fe dc 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
    }

    return 0;
ffffffff80219325:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021932a:	c9                   	leave
ffffffff8021932b:	c3                   	ret

ffffffff8021932c <_RME_Sig_Rcv>:
******************************************************************************/
static rme_ret_t _RME_Sig_Rcv(struct RME_Cap_Cpt* Cpt,
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Sig,
                              rme_ptr_t Option)
{
ffffffff8021932c:	f3 0f 1e fa          	endbr64
ffffffff80219330:	55                   	push   %rbp
ffffffff80219331:	48 89 e5             	mov    %rsp,%rbp
ffffffff80219334:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80219338:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021933c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80219340:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80219344:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    rme_ptr_t Old_Value;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80219348:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021934c:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219351:	48 85 c0             	test   %rax,%rax
ffffffff80219354:	0f 85 98 00 00 00    	jne    ffffffff802193f2 <_RME_Sig_Rcv+0xc6>
ffffffff8021935a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021935e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219362:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80219366:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219369:	0f 93 c0             	setae  %al
ffffffff8021936c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021936f:	48 85 c0             	test   %rax,%rax
ffffffff80219372:	74 0c                	je     ffffffff80219380 <_RME_Sig_Rcv+0x54>
ffffffff80219374:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021937b:	e9 45 04 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
ffffffff80219380:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219384:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219388:	48 89 c2             	mov    %rax,%rdx
ffffffff8021938b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021938f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219393:	48 01 d0             	add    %rdx,%rax
ffffffff80219396:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021939a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021939e:	48 8b 00             	mov    (%rax),%rax
ffffffff802193a1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802193a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802193a9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802193ad:	0f b7 c0             	movzwl %ax,%eax
ffffffff802193b0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802193b4:	0f 94 c0             	sete   %al
ffffffff802193b7:	0f b6 c0             	movzbl %al,%eax
ffffffff802193ba:	48 85 c0             	test   %rax,%rax
ffffffff802193bd:	74 0c                	je     ffffffff802193cb <_RME_Sig_Rcv+0x9f>
ffffffff802193bf:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802193c6:	e9 fa 03 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
ffffffff802193cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802193cf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802193d3:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802193d7:	0f 95 c0             	setne  %al
ffffffff802193da:	0f b6 c0             	movzbl %al,%eax
ffffffff802193dd:	48 85 c0             	test   %rax,%rax
ffffffff802193e0:	0f 84 4c 01 00 00    	je     ffffffff80219532 <_RME_Sig_Rcv+0x206>
ffffffff802193e6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802193ed:	e9 d3 03 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
ffffffff802193f2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802193f6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802193fa:	48 89 c2             	mov    %rax,%rdx
ffffffff802193fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219401:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219405:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219408:	0f 93 c0             	setae  %al
ffffffff8021940b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021940e:	48 85 c0             	test   %rax,%rax
ffffffff80219411:	74 0c                	je     ffffffff8021941f <_RME_Sig_Rcv+0xf3>
ffffffff80219413:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021941a:	e9 a6 03 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
ffffffff8021941f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219423:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219427:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021942b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021942e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219432:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219436:	48 01 d0             	add    %rdx,%rax
ffffffff80219439:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021943d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219441:	48 8b 00             	mov    (%rax),%rax
ffffffff80219444:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219448:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021944c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219450:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219453:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219457:	0f 94 c0             	sete   %al
ffffffff8021945a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021945d:	48 85 c0             	test   %rax,%rax
ffffffff80219460:	74 0c                	je     ffffffff8021946e <_RME_Sig_Rcv+0x142>
ffffffff80219462:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219469:	e9 57 03 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
ffffffff8021946e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219472:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219476:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021947a:	0f 95 c0             	setne  %al
ffffffff8021947d:	0f b6 c0             	movzbl %al,%eax
ffffffff80219480:	48 85 c0             	test   %rax,%rax
ffffffff80219483:	74 0c                	je     ffffffff80219491 <_RME_Sig_Rcv+0x165>
ffffffff80219485:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021948c:	e9 34 03 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
ffffffff80219491:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219495:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021949a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021949d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802194a1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802194a5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802194a8:	0f 93 c0             	setae  %al
ffffffff802194ab:	0f b6 c0             	movzbl %al,%eax
ffffffff802194ae:	48 85 c0             	test   %rax,%rax
ffffffff802194b1:	74 0c                	je     ffffffff802194bf <_RME_Sig_Rcv+0x193>
ffffffff802194b3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802194ba:	e9 06 03 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
ffffffff802194bf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802194c3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802194c8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802194cc:	48 89 c2             	mov    %rax,%rdx
ffffffff802194cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802194d3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802194d7:	48 01 d0             	add    %rdx,%rax
ffffffff802194da:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802194de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802194e2:	48 8b 00             	mov    (%rax),%rax
ffffffff802194e5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802194e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802194ed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802194f1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802194f4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802194f8:	0f 94 c0             	sete   %al
ffffffff802194fb:	0f b6 c0             	movzbl %al,%eax
ffffffff802194fe:	48 85 c0             	test   %rax,%rax
ffffffff80219501:	74 0c                	je     ffffffff8021950f <_RME_Sig_Rcv+0x1e3>
ffffffff80219503:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021950a:	e9 b6 02 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
ffffffff8021950f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219513:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219517:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff8021951b:	0f 95 c0             	setne  %al
ffffffff8021951e:	0f b6 c0             	movzbl %al,%eax
ffffffff80219521:	48 85 c0             	test   %rax,%rax
ffffffff80219524:	74 0c                	je     ffffffff80219532 <_RME_Sig_Rcv+0x206>
ffffffff80219526:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021952d:	e9 93 02 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
                   struct RME_Cap_Sig*,Sig_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    switch(Option)
ffffffff80219532:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
ffffffff80219537:	0f 84 a3 00 00 00    	je     ffffffff802195e0 <_RME_Sig_Rcv+0x2b4>
ffffffff8021953d:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
ffffffff80219542:	0f 87 bd 00 00 00    	ja     ffffffff80219605 <_RME_Sig_Rcv+0x2d9>
ffffffff80219548:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff8021954d:	74 6c                	je     ffffffff802195bb <_RME_Sig_Rcv+0x28f>
ffffffff8021954f:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff80219554:	0f 87 ab 00 00 00    	ja     ffffffff80219605 <_RME_Sig_Rcv+0x2d9>
ffffffff8021955a:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8021955f:	74 0c                	je     ffffffff8021956d <_RME_Sig_Rcv+0x241>
ffffffff80219561:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
ffffffff80219566:	74 2e                	je     ffffffff80219596 <_RME_Sig_Rcv+0x26a>
ffffffff80219568:	e9 98 00 00 00       	jmp    ffffffff80219605 <_RME_Sig_Rcv+0x2d9>
    {
        case RME_RCV_BS:
        {
            RME_COV_MARKER();

            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff8021956d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219571:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219575:	83 e0 02             	and    $0x2,%eax
ffffffff80219578:	48 85 c0             	test   %rax,%rax
ffffffff8021957b:	0f 94 c0             	sete   %al
ffffffff8021957e:	0f b6 c0             	movzbl %al,%eax
ffffffff80219581:	48 85 c0             	test   %rax,%rax
ffffffff80219584:	0f 84 87 00 00 00    	je     ffffffff80219611 <_RME_Sig_Rcv+0x2e5>
ffffffff8021958a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219591:	e9 2f 02 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
        }
        case RME_RCV_BM:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BM);
ffffffff80219596:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021959a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021959e:	83 e0 04             	and    $0x4,%eax
ffffffff802195a1:	48 85 c0             	test   %rax,%rax
ffffffff802195a4:	0f 94 c0             	sete   %al
ffffffff802195a7:	0f b6 c0             	movzbl %al,%eax
ffffffff802195aa:	48 85 c0             	test   %rax,%rax
ffffffff802195ad:	74 65                	je     ffffffff80219614 <_RME_Sig_Rcv+0x2e8>
ffffffff802195af:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802195b6:	e9 0a 02 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
        }
        case RME_RCV_NS:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NS);
ffffffff802195bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802195bf:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802195c3:	83 e0 08             	and    $0x8,%eax
ffffffff802195c6:	48 85 c0             	test   %rax,%rax
ffffffff802195c9:	0f 94 c0             	sete   %al
ffffffff802195cc:	0f b6 c0             	movzbl %al,%eax
ffffffff802195cf:	48 85 c0             	test   %rax,%rax
ffffffff802195d2:	74 43                	je     ffffffff80219617 <_RME_Sig_Rcv+0x2eb>
ffffffff802195d4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802195db:	e9 e5 01 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
        }
        case RME_RCV_NM:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NM);
ffffffff802195e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802195e4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802195e8:	83 e0 10             	and    $0x10,%eax
ffffffff802195eb:	48 85 c0             	test   %rax,%rax
ffffffff802195ee:	0f 94 c0             	sete   %al
ffffffff802195f1:	0f b6 c0             	movzbl %al,%eax
ffffffff802195f4:	48 85 c0             	test   %rax,%rax
ffffffff802195f7:	74 21                	je     ffffffff8021961a <_RME_Sig_Rcv+0x2ee>
ffffffff802195f9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219600:	e9 c0 01 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
        }
        default:
        {
            RME_COV_MARKER();
            
            return RME_ERR_SIV_ACT;
ffffffff80219605:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021960c:	e9 b4 01 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
            break;
ffffffff80219611:	90                   	nop
ffffffff80219612:	eb 07                	jmp    ffffffff8021961b <_RME_Sig_Rcv+0x2ef>
            break;
ffffffff80219614:	90                   	nop
ffffffff80219615:	eb 04                	jmp    ffffffff8021961b <_RME_Sig_Rcv+0x2ef>
            break;
ffffffff80219617:	90                   	nop
ffffffff80219618:	eb 01                	jmp    ffffffff8021961b <_RME_Sig_Rcv+0x2ef>
            break;
ffffffff8021961a:	90                   	nop
        }
    }
    
    /* Convert to root cap */
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff8021961b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021961f:	48 8b 00             	mov    (%rax),%rax
ffffffff80219622:	89 c0                	mov    %eax,%eax
ffffffff80219624:	48 85 c0             	test   %rax,%rax
ffffffff80219627:	74 0a                	je     ffffffff80219633 <_RME_Sig_Rcv+0x307>
ffffffff80219629:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021962d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80219631:	eb 04                	jmp    ffffffff80219637 <_RME_Sig_Rcv+0x30b>
ffffffff80219633:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219637:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* See if we can receive on that endpoint - if someone blocks on it, we 
     * must wait for it to unblock before we can proceed. */
    if(Sig_Root->Thd!=(void*)RME_NULL)
ffffffff8021963b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021963f:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80219643:	48 85 c0             	test   %rax,%rax
ffffffff80219646:	74 0c                	je     ffffffff80219654 <_RME_Sig_Rcv+0x328>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff80219648:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021964f:	e9 71 01 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    Local=RME_CPU_LOCAL();
ffffffff80219654:	e8 e6 21 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80219659:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff8021965d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219661:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80219665:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    
    /* Check if we trying to let a boot-time thread block on a signal, which is
     * disallowed. Additionally, if the current thread have no timeslice left
     * (which shouldn't happen under any circumstances), we assert and die. */
    RME_ASSERT(Thd_Cur->Sched.Slice!=0U);
    if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80219669:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021966d:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80219671:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80219678:	ff ff 7f 
ffffffff8021967b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021967e:	75 0c                	jne    ffffffff8021968c <_RME_Sig_Rcv+0x360>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_BOOT;
ffffffff80219680:	48 c7 c0 cd fe ff ff 	mov    $0xfffffffffffffecd,%rax
ffffffff80219687:	e9 39 01 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check if there are signals available */
    Old_Value=Sig_Root->Sig_Num;
ffffffff8021968c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219690:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219694:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Old_Value>0U)
ffffffff80219698:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff8021969d:	0f 84 9b 00 00 00    	je     ffffffff8021973e <_RME_Sig_Rcv+0x412>
    {
        RME_COV_MARKER();

        /* Can't use faa, other cores may reduce count to zero in the meantime */
        if((Option==RME_RCV_BS)||(Option==RME_RCV_NS))
ffffffff802196a3:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff802196a8:	74 07                	je     ffffffff802196b1 <_RME_Sig_Rcv+0x385>
ffffffff802196aa:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff802196af:	75 43                	jne    ffffffff802196f4 <_RME_Sig_Rcv+0x3c8>
        {
            RME_COV_MARKER();

            /* Try to take one */
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff802196b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802196b5:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff802196b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802196bd:	48 8d 48 28          	lea    0x28(%rax),%rcx
ffffffff802196c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802196c5:	48 89 c6             	mov    %rax,%rsi
ffffffff802196c8:	48 89 cf             	mov    %rcx,%rdi
ffffffff802196cb:	e8 8e 30 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802196d0:	48 85 c0             	test   %rax,%rax
ffffffff802196d3:	75 0c                	jne    ffffffff802196e1 <_RME_Sig_Rcv+0x3b5>
                             Old_Value,
                             Old_Value-1U)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff802196d5:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff802196dc:	e9 e4 00 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* We have taken it, now return what we have taken */
            __RME_Svc_Retval_Set(Reg,1);
ffffffff802196e1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802196e5:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802196ea:	48 89 c7             	mov    %rax,%rdi
ffffffff802196ed:	e8 31 d9 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
ffffffff802196f2:	eb 40                	jmp    ffffffff80219734 <_RME_Sig_Rcv+0x408>
        else
        {
            RME_COV_MARKER();

            /* Try to take all */
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff802196f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802196f8:	48 8d 48 28          	lea    0x28(%rax),%rcx
ffffffff802196fc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219700:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80219705:	48 89 c6             	mov    %rax,%rsi
ffffffff80219708:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021970b:	e8 4e 30 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80219710:	48 85 c0             	test   %rax,%rax
ffffffff80219713:	75 0c                	jne    ffffffff80219721 <_RME_Sig_Rcv+0x3f5>
                             Old_Value,
                             0U)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff80219715:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff8021971c:	e9 a4 00 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* We have taken all, now return what we have taken */
            __RME_Svc_Retval_Set(Reg,(rme_ret_t)Old_Value);
ffffffff80219721:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80219725:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80219729:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021972c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021972f:	e8 ef d8 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
        }
        
        return 0;
ffffffff80219734:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80219739:	e9 87 00 00 00       	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
    else
    {
        RME_COV_MARKER();

        /* There's no value, try to block */
        if((Option==RME_RCV_BS)||(Option==RME_RCV_BM))
ffffffff8021973e:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80219743:	74 07                	je     ffffffff8021974c <_RME_Sig_Rcv+0x420>
ffffffff80219745:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
ffffffff8021974a:	75 63                	jne    ffffffff802197af <_RME_Sig_Rcv+0x483>
        {
            RME_COV_MARKER();

            if(RME_COMP_SWAP((rme_ptr_t*)&(Sig_Root->Thd),
ffffffff8021974c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219750:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80219754:	48 8d 4a 30          	lea    0x30(%rdx),%rcx
ffffffff80219758:	48 89 c2             	mov    %rax,%rdx
ffffffff8021975b:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219760:	48 89 cf             	mov    %rcx,%rdi
ffffffff80219763:	e8 f6 2f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80219768:	48 85 c0             	test   %rax,%rax
ffffffff8021976b:	75 09                	jne    ffffffff80219776 <_RME_Sig_Rcv+0x44a>
                             RME_NULL,
                             (rme_ptr_t)Thd_Cur)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff8021976d:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff80219774:	eb 4f                	jmp    ffffffff802197c5 <_RME_Sig_Rcv+0x499>
            /* Now we block our current thread. No need to set any return value
             * to the register set here, because we do not yet know how many
             * signals will be there when the thread unblocks. The unblocking
             * does not need an option so we don't keep that; we always treat
             * it as single receive when we unblock anyway. */
            Thd_Cur->Sched.Signal=Sig_Root;
ffffffff80219776:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021977a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021977e:	48 89 50 50          	mov    %rdx,0x50(%rax)
            Thd_Cur->Sched.State=RME_THD_BLOCKED;
ffffffff80219782:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219786:	48 c7 40 38 01 00 00 	movq   $0x1,0x38(%rax)
ffffffff8021978d:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff8021978e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219792:	48 89 c7             	mov    %rax,%rdi
ffffffff80219795:	e8 81 96 ff ff       	call   ffffffff80212e1b <_RME_Run_Del>
            
            /* Pick the highest priority thread to run */
            _RME_Kern_High(Reg,Local);
ffffffff8021979a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021979e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802197a2:	48 89 d6             	mov    %rdx,%rsi
ffffffff802197a5:	48 89 c7             	mov    %rax,%rdi
ffffffff802197a8:	e8 6e f6 ff ff       	call   ffffffff80218e1b <_RME_Kern_High>
ffffffff802197ad:	eb 11                	jmp    ffffffff802197c0 <_RME_Sig_Rcv+0x494>
        else
        {
            RME_COV_MARKER();

            /* We have taken nothing but the system call is successful anyway */
            __RME_Svc_Retval_Set(Reg,0);
ffffffff802197af:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802197b3:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802197b8:	48 89 c7             	mov    %rax,%rdi
ffffffff802197bb:	e8 63 d8 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
        }
    }
    
    return 0;
ffffffff802197c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802197c5:	c9                   	leave
ffffffff802197c6:	c3                   	ret

ffffffff802197c7 <_RME_Inv_Crt>:
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Kom,
                              rme_cid_t Cap_Inv,
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Raddr)
{
ffffffff802197c7:	f3 0f 1e fa          	endbr64
ffffffff802197cb:	55                   	push   %rbp
ffffffff802197cc:	48 89 e5             	mov    %rsp,%rbp
ffffffff802197cf:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff802197d3:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802197d7:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff802197db:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff802197df:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff802197e3:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
ffffffff802197e7:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    struct RME_Inv_Struct* Invocation;
    rme_ptr_t Type_Stat;
    rme_ptr_t Vaddr;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802197eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802197ef:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802197f4:	48 85 c0             	test   %rax,%rax
ffffffff802197f7:	0f 85 98 00 00 00    	jne    ffffffff80219895 <_RME_Inv_Crt+0xce>
ffffffff802197fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219801:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219805:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80219809:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021980c:	0f 93 c0             	setae  %al
ffffffff8021980f:	0f b6 c0             	movzbl %al,%eax
ffffffff80219812:	48 85 c0             	test   %rax,%rax
ffffffff80219815:	74 0c                	je     ffffffff80219823 <_RME_Inv_Crt+0x5c>
ffffffff80219817:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021981e:	e9 df 07 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219823:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219827:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021982b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021982e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219832:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219836:	48 01 d0             	add    %rdx,%rax
ffffffff80219839:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021983d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219841:	48 8b 00             	mov    (%rax),%rax
ffffffff80219844:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219848:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021984c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219850:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219853:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219857:	0f 94 c0             	sete   %al
ffffffff8021985a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021985d:	48 85 c0             	test   %rax,%rax
ffffffff80219860:	74 0c                	je     ffffffff8021986e <_RME_Inv_Crt+0xa7>
ffffffff80219862:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219869:	e9 94 07 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff8021986e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219872:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219876:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021987a:	0f 95 c0             	setne  %al
ffffffff8021987d:	0f b6 c0             	movzbl %al,%eax
ffffffff80219880:	48 85 c0             	test   %rax,%rax
ffffffff80219883:	0f 84 4c 01 00 00    	je     ffffffff802199d5 <_RME_Inv_Crt+0x20e>
ffffffff80219889:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219890:	e9 6d 07 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219895:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219899:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021989d:	48 89 c2             	mov    %rax,%rdx
ffffffff802198a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802198a4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802198a8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802198ab:	0f 93 c0             	setae  %al
ffffffff802198ae:	0f b6 c0             	movzbl %al,%eax
ffffffff802198b1:	48 85 c0             	test   %rax,%rax
ffffffff802198b4:	74 0c                	je     ffffffff802198c2 <_RME_Inv_Crt+0xfb>
ffffffff802198b6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802198bd:	e9 40 07 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff802198c2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802198c6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802198ca:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802198ce:	48 89 c2             	mov    %rax,%rdx
ffffffff802198d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802198d5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802198d9:	48 01 d0             	add    %rdx,%rax
ffffffff802198dc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802198e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802198e4:	48 8b 00             	mov    (%rax),%rax
ffffffff802198e7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802198eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802198ef:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802198f3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802198f6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802198fa:	0f 94 c0             	sete   %al
ffffffff802198fd:	0f b6 c0             	movzbl %al,%eax
ffffffff80219900:	48 85 c0             	test   %rax,%rax
ffffffff80219903:	74 0c                	je     ffffffff80219911 <_RME_Inv_Crt+0x14a>
ffffffff80219905:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021990c:	e9 f1 06 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219911:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219915:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219919:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021991d:	0f 95 c0             	setne  %al
ffffffff80219920:	0f b6 c0             	movzbl %al,%eax
ffffffff80219923:	48 85 c0             	test   %rax,%rax
ffffffff80219926:	74 0c                	je     ffffffff80219934 <_RME_Inv_Crt+0x16d>
ffffffff80219928:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021992f:	e9 ce 06 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219934:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219938:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021993d:	48 89 c2             	mov    %rax,%rdx
ffffffff80219940:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219944:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219948:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021994b:	0f 93 c0             	setae  %al
ffffffff8021994e:	0f b6 c0             	movzbl %al,%eax
ffffffff80219951:	48 85 c0             	test   %rax,%rax
ffffffff80219954:	74 0c                	je     ffffffff80219962 <_RME_Inv_Crt+0x19b>
ffffffff80219956:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021995d:	e9 a0 06 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219962:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219966:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021996b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021996f:	48 89 c2             	mov    %rax,%rdx
ffffffff80219972:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219976:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021997a:	48 01 d0             	add    %rdx,%rax
ffffffff8021997d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219981:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219985:	48 8b 00             	mov    (%rax),%rax
ffffffff80219988:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021998c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219990:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219994:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219997:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021999b:	0f 94 c0             	sete   %al
ffffffff8021999e:	0f b6 c0             	movzbl %al,%eax
ffffffff802199a1:	48 85 c0             	test   %rax,%rax
ffffffff802199a4:	74 0c                	je     ffffffff802199b2 <_RME_Inv_Crt+0x1eb>
ffffffff802199a6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802199ad:	e9 50 06 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff802199b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802199b6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802199ba:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802199be:	0f 95 c0             	setne  %al
ffffffff802199c1:	0f b6 c0             	movzbl %al,%eax
ffffffff802199c4:	48 85 c0             	test   %rax,%rax
ffffffff802199c7:	74 0c                	je     ffffffff802199d5 <_RME_Inv_Crt+0x20e>
ffffffff802199c9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802199d0:	e9 2d 06 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802199d5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802199d9:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802199de:	48 85 c0             	test   %rax,%rax
ffffffff802199e1:	0f 85 98 00 00 00    	jne    ffffffff80219a7f <_RME_Inv_Crt+0x2b8>
ffffffff802199e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802199eb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802199ef:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff802199f3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802199f6:	0f 93 c0             	setae  %al
ffffffff802199f9:	0f b6 c0             	movzbl %al,%eax
ffffffff802199fc:	48 85 c0             	test   %rax,%rax
ffffffff802199ff:	74 0c                	je     ffffffff80219a0d <_RME_Inv_Crt+0x246>
ffffffff80219a01:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219a08:	e9 f5 05 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219a0d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219a11:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219a15:	48 89 c2             	mov    %rax,%rdx
ffffffff80219a18:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219a1c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219a20:	48 01 d0             	add    %rdx,%rax
ffffffff80219a23:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219a27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219a2b:	48 8b 00             	mov    (%rax),%rax
ffffffff80219a2e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219a32:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219a36:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219a3a:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219a3d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219a41:	0f 94 c0             	sete   %al
ffffffff80219a44:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a47:	48 85 c0             	test   %rax,%rax
ffffffff80219a4a:	74 0c                	je     ffffffff80219a58 <_RME_Inv_Crt+0x291>
ffffffff80219a4c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219a53:	e9 aa 05 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219a58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219a5c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219a60:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80219a64:	0f 95 c0             	setne  %al
ffffffff80219a67:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a6a:	48 85 c0             	test   %rax,%rax
ffffffff80219a6d:	0f 84 4c 01 00 00    	je     ffffffff80219bbf <_RME_Inv_Crt+0x3f8>
ffffffff80219a73:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219a7a:	e9 83 05 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219a7f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219a83:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219a87:	48 89 c2             	mov    %rax,%rdx
ffffffff80219a8a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219a8e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219a92:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219a95:	0f 93 c0             	setae  %al
ffffffff80219a98:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a9b:	48 85 c0             	test   %rax,%rax
ffffffff80219a9e:	74 0c                	je     ffffffff80219aac <_RME_Inv_Crt+0x2e5>
ffffffff80219aa0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219aa7:	e9 56 05 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219aac:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219ab0:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219ab4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219ab8:	48 89 c2             	mov    %rax,%rdx
ffffffff80219abb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219abf:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219ac3:	48 01 d0             	add    %rdx,%rax
ffffffff80219ac6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219aca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219ace:	48 8b 00             	mov    (%rax),%rax
ffffffff80219ad1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219ad5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219ad9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219add:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219ae0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219ae4:	0f 94 c0             	sete   %al
ffffffff80219ae7:	0f b6 c0             	movzbl %al,%eax
ffffffff80219aea:	48 85 c0             	test   %rax,%rax
ffffffff80219aed:	74 0c                	je     ffffffff80219afb <_RME_Inv_Crt+0x334>
ffffffff80219aef:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219af6:	e9 07 05 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219afb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219aff:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219b03:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219b07:	0f 95 c0             	setne  %al
ffffffff80219b0a:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b0d:	48 85 c0             	test   %rax,%rax
ffffffff80219b10:	74 0c                	je     ffffffff80219b1e <_RME_Inv_Crt+0x357>
ffffffff80219b12:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219b19:	e9 e4 04 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219b1e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219b22:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219b27:	48 89 c2             	mov    %rax,%rdx
ffffffff80219b2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219b2e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219b32:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219b35:	0f 93 c0             	setae  %al
ffffffff80219b38:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b3b:	48 85 c0             	test   %rax,%rax
ffffffff80219b3e:	74 0c                	je     ffffffff80219b4c <_RME_Inv_Crt+0x385>
ffffffff80219b40:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219b47:	e9 b6 04 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219b4c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219b50:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219b55:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219b59:	48 89 c2             	mov    %rax,%rdx
ffffffff80219b5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219b60:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219b64:	48 01 d0             	add    %rdx,%rax
ffffffff80219b67:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219b6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219b6f:	48 8b 00             	mov    (%rax),%rax
ffffffff80219b72:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219b76:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219b7a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219b7e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219b81:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219b85:	0f 94 c0             	sete   %al
ffffffff80219b88:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b8b:	48 85 c0             	test   %rax,%rax
ffffffff80219b8e:	74 0c                	je     ffffffff80219b9c <_RME_Inv_Crt+0x3d5>
ffffffff80219b90:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219b97:	e9 66 04 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219b9c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219ba0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219ba4:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80219ba8:	0f 95 c0             	setne  %al
ffffffff80219bab:	0f b6 c0             	movzbl %al,%eax
ffffffff80219bae:	48 85 c0             	test   %rax,%rax
ffffffff80219bb1:	74 0c                	je     ffffffff80219bbf <_RME_Inv_Crt+0x3f8>
ffffffff80219bb3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219bba:	e9 43 04 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff80219bbf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219bc3:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219bc8:	48 85 c0             	test   %rax,%rax
ffffffff80219bcb:	0f 85 98 00 00 00    	jne    ffffffff80219c69 <_RME_Inv_Crt+0x4a2>
ffffffff80219bd1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219bd5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219bd9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80219bdd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219be0:	0f 93 c0             	setae  %al
ffffffff80219be3:	0f b6 c0             	movzbl %al,%eax
ffffffff80219be6:	48 85 c0             	test   %rax,%rax
ffffffff80219be9:	74 0c                	je     ffffffff80219bf7 <_RME_Inv_Crt+0x430>
ffffffff80219beb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219bf2:	e9 0b 04 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219bf7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219bfb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219bff:	48 89 c2             	mov    %rax,%rdx
ffffffff80219c02:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219c06:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219c0a:	48 01 d0             	add    %rdx,%rax
ffffffff80219c0d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219c11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219c15:	48 8b 00             	mov    (%rax),%rax
ffffffff80219c18:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219c1c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219c20:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219c24:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219c27:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219c2b:	0f 94 c0             	sete   %al
ffffffff80219c2e:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c31:	48 85 c0             	test   %rax,%rax
ffffffff80219c34:	74 0c                	je     ffffffff80219c42 <_RME_Inv_Crt+0x47b>
ffffffff80219c36:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219c3d:	e9 c0 03 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219c42:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219c46:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219c4a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219c4e:	0f 95 c0             	setne  %al
ffffffff80219c51:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c54:	48 85 c0             	test   %rax,%rax
ffffffff80219c57:	0f 84 4c 01 00 00    	je     ffffffff80219da9 <_RME_Inv_Crt+0x5e2>
ffffffff80219c5d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219c64:	e9 99 03 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219c69:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219c6d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219c71:	48 89 c2             	mov    %rax,%rdx
ffffffff80219c74:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219c78:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219c7c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219c7f:	0f 93 c0             	setae  %al
ffffffff80219c82:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c85:	48 85 c0             	test   %rax,%rax
ffffffff80219c88:	74 0c                	je     ffffffff80219c96 <_RME_Inv_Crt+0x4cf>
ffffffff80219c8a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219c91:	e9 6c 03 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219c96:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219c9a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219c9e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219ca2:	48 89 c2             	mov    %rax,%rdx
ffffffff80219ca5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219ca9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219cad:	48 01 d0             	add    %rdx,%rax
ffffffff80219cb0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219cb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219cb8:	48 8b 00             	mov    (%rax),%rax
ffffffff80219cbb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219cbf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219cc3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219cc7:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219cca:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219cce:	0f 94 c0             	sete   %al
ffffffff80219cd1:	0f b6 c0             	movzbl %al,%eax
ffffffff80219cd4:	48 85 c0             	test   %rax,%rax
ffffffff80219cd7:	74 0c                	je     ffffffff80219ce5 <_RME_Inv_Crt+0x51e>
ffffffff80219cd9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219ce0:	e9 1d 03 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219ce5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219ce9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219ced:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219cf1:	0f 95 c0             	setne  %al
ffffffff80219cf4:	0f b6 c0             	movzbl %al,%eax
ffffffff80219cf7:	48 85 c0             	test   %rax,%rax
ffffffff80219cfa:	74 0c                	je     ffffffff80219d08 <_RME_Inv_Crt+0x541>
ffffffff80219cfc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219d03:	e9 fa 02 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219d08:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219d0c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219d11:	48 89 c2             	mov    %rax,%rdx
ffffffff80219d14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219d18:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219d1c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219d1f:	0f 93 c0             	setae  %al
ffffffff80219d22:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d25:	48 85 c0             	test   %rax,%rax
ffffffff80219d28:	74 0c                	je     ffffffff80219d36 <_RME_Inv_Crt+0x56f>
ffffffff80219d2a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219d31:	e9 cc 02 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219d36:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219d3a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219d3f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219d43:	48 89 c2             	mov    %rax,%rdx
ffffffff80219d46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219d4a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219d4e:	48 01 d0             	add    %rdx,%rax
ffffffff80219d51:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219d55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219d59:	48 8b 00             	mov    (%rax),%rax
ffffffff80219d5c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219d60:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219d64:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219d68:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219d6b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219d6f:	0f 94 c0             	sete   %al
ffffffff80219d72:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d75:	48 85 c0             	test   %rax,%rax
ffffffff80219d78:	74 0c                	je     ffffffff80219d86 <_RME_Inv_Crt+0x5bf>
ffffffff80219d7a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219d81:	e9 7c 02 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219d86:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219d8a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219d8e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219d92:	0f 95 c0             	setne  %al
ffffffff80219d95:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d98:	48 85 c0             	test   %rax,%rax
ffffffff80219d9b:	74 0c                	je     ffffffff80219da9 <_RME_Inv_Crt+0x5e2>
ffffffff80219d9d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219da4:	e9 59 02 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80219da9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219dad:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219db1:	83 e0 01             	and    $0x1,%eax
ffffffff80219db4:	48 85 c0             	test   %rax,%rax
ffffffff80219db7:	0f 94 c0             	sete   %al
ffffffff80219dba:	0f b6 c0             	movzbl %al,%eax
ffffffff80219dbd:	48 85 c0             	test   %rax,%rax
ffffffff80219dc0:	74 0c                	je     ffffffff80219dce <_RME_Inv_Crt+0x607>
ffffffff80219dc2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219dc9:	e9 34 02 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_INV);
ffffffff80219dce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219dd2:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219dd6:	83 e0 01             	and    $0x1,%eax
ffffffff80219dd9:	48 85 c0             	test   %rax,%rax
ffffffff80219ddc:	0f 94 c0             	sete   %al
ffffffff80219ddf:	0f b6 c0             	movzbl %al,%eax
ffffffff80219de2:	48 85 c0             	test   %rax,%rax
ffffffff80219de5:	74 0c                	je     ffffffff80219df3 <_RME_Inv_Crt+0x62c>
ffffffff80219de7:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219dee:	e9 0f 02 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
ffffffff80219df3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219df7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219dfb:	83 e0 08             	and    $0x8,%eax
ffffffff80219dfe:	48 85 c0             	test   %rax,%rax
ffffffff80219e01:	0f 94 c0             	sete   %al
ffffffff80219e04:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e07:	48 85 c0             	test   %rax,%rax
ffffffff80219e0a:	74 0c                	je     ffffffff80219e18 <_RME_Inv_Crt+0x651>
ffffffff80219e0c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219e13:	e9 ea 01 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219e18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219e1c:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80219e20:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80219e24:	48 01 d0             	add    %rdx,%rax
ffffffff80219e27:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80219e2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219e2f:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
ffffffff80219e33:	0f 92 c0             	setb   %al
ffffffff80219e36:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e39:	48 85 c0             	test   %rax,%rax
ffffffff80219e3c:	74 0c                	je     ffffffff80219e4a <_RME_Inv_Crt+0x683>
ffffffff80219e3e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219e45:	e9 b8 01 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219e4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219e4e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219e52:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80219e56:	0f 92 c0             	setb   %al
ffffffff80219e59:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e5c:	48 85 c0             	test   %rax,%rax
ffffffff80219e5f:	74 0c                	je     ffffffff80219e6d <_RME_Inv_Crt+0x6a6>
ffffffff80219e61:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219e68:	e9 95 01 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219e6d:	48 83 7d d8 b7       	cmpq   $0xffffffffffffffb7,-0x28(%rbp)
ffffffff80219e72:	0f 97 c0             	seta   %al
ffffffff80219e75:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e78:	48 85 c0             	test   %rax,%rax
ffffffff80219e7b:	74 0c                	je     ffffffff80219e89 <_RME_Inv_Crt+0x6c2>
ffffffff80219e7d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219e84:	e9 79 01 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219e89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219e8d:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80219e91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219e95:	48 83 c0 47          	add    $0x47,%rax
ffffffff80219e99:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219e9c:	0f 92 c0             	setb   %al
ffffffff80219e9f:	0f b6 c0             	movzbl %al,%eax
ffffffff80219ea2:	48 85 c0             	test   %rax,%rax
ffffffff80219ea5:	74 0c                	je     ffffffff80219eb3 <_RME_Inv_Crt+0x6ec>
ffffffff80219ea7:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219eae:	e9 4f 01 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff80219eb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219eb7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219ebb:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80219ebf:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219ec2:	0f 93 c0             	setae  %al
ffffffff80219ec5:	0f b6 c0             	movzbl %al,%eax
ffffffff80219ec8:	48 85 c0             	test   %rax,%rax
ffffffff80219ecb:	74 0c                	je     ffffffff80219ed9 <_RME_Inv_Crt+0x712>
ffffffff80219ecd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219ed4:	e9 29 01 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219ed9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80219edd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219ee1:	48 89 c2             	mov    %rax,%rdx
ffffffff80219ee4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219ee8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219eec:	48 01 d0             	add    %rdx,%rax
ffffffff80219eef:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff80219ef3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219ef7:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80219efe:	00 00 00 
ffffffff80219f01:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219f06:	48 89 c7             	mov    %rax,%rdi
ffffffff80219f09:	e8 50 28 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80219f0e:	48 85 c0             	test   %rax,%rax
ffffffff80219f11:	0f 94 c0             	sete   %al
ffffffff80219f14:	0f b6 c0             	movzbl %al,%eax
ffffffff80219f17:	48 85 c0             	test   %rax,%rax
ffffffff80219f1a:	74 0c                	je     ffffffff80219f28 <_RME_Inv_Crt+0x761>
ffffffff80219f1c:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80219f23:	e9 da 00 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
ffffffff80219f28:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80219f2d:	e8 df 28 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80219f32:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80219f36:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff80219f3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219f3e:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff80219f43:	48 89 c7             	mov    %rax,%rdi
ffffffff80219f46:	e8 f3 83 ff ff       	call   ffffffff8021233e <_RME_Kot_Mark>
ffffffff80219f4b:	48 85 c0             	test   %rax,%rax
ffffffff80219f4e:	74 17                	je     ffffffff80219f67 <_RME_Inv_Crt+0x7a0>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),0U);
ffffffff80219f50:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219f54:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80219f5b:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80219f62:	e9 9b 00 00 00       	jmp    ffffffff8021a002 <_RME_Inv_Crt+0x83b>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Object init */
    Invocation=(struct RME_Inv_Struct*)Vaddr;
ffffffff80219f67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219f6b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80219f6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219f73:	48 8b 00             	mov    (%rax),%rax
ffffffff80219f76:	89 c0                	mov    %eax,%eax
ffffffff80219f78:	48 85 c0             	test   %rax,%rax
ffffffff80219f7b:	74 0a                	je     ffffffff80219f87 <_RME_Inv_Crt+0x7c0>
ffffffff80219f7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219f81:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80219f85:	eb 04                	jmp    ffffffff80219f8b <_RME_Inv_Crt+0x7c4>
ffffffff80219f87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219f8b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    Invocation->Prc=Prc_Root;
ffffffff80219f8f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219f93:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80219f97:	48 89 50 10          	mov    %rdx,0x10(%rax)
    Invocation->Thd_Act=RME_NULL;
ffffffff80219f9b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219f9f:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80219fa6:	00 
    /* By default we do not return on exception */
    Invocation->Is_Exc_Ret=0U;
ffffffff80219fa7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219fab:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80219fb2:	00 
    
    /* Header init */
    Inv_Crt->Head.Root_Ref=0U;
ffffffff80219fb3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219fb7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80219fbe:	00 
    Inv_Crt->Head.Object=Vaddr;
ffffffff80219fbf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219fc3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80219fc7:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Inv_Crt->Head.Flag=RME_INV_FLAG_ALL;
ffffffff80219fcb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219fcf:	48 c7 40 10 03 00 00 	movq   $0x3,0x10(%rax)
ffffffff80219fd6:	00 
    
    /* Reference object */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref),1U);
ffffffff80219fd7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80219fdb:	48 83 c0 08          	add    $0x8,%rax
ffffffff80219fdf:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219fe4:	48 89 c7             	mov    %rax,%rdi
ffffffff80219fe7:	e8 a7 27 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),
ffffffff80219fec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219ff0:	48 b9 00 00 00 00 00 	movabs $0x7000000000000,%rcx
ffffffff80219ff7:	00 07 00 
ffffffff80219ffa:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_INV,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80219ffd:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a002:	c9                   	leave
ffffffff8021a003:	c3                   	ret

ffffffff8021a004 <_RME_Inv_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Inv)
{
ffffffff8021a004:	f3 0f 1e fa          	endbr64
ffffffff8021a008:	55                   	push   %rbp
ffffffff8021a009:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a00c:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8021a010:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021a014:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021a018:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Type_Stat;
    /* These are for deletion */
    struct RME_Inv_Struct* Invocation;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021a01c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a020:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a025:	48 85 c0             	test   %rax,%rax
ffffffff8021a028:	0f 85 98 00 00 00    	jne    ffffffff8021a0c6 <_RME_Inv_Del+0xc2>
ffffffff8021a02e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a032:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a036:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021a03a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a03d:	0f 93 c0             	setae  %al
ffffffff8021a040:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a043:	48 85 c0             	test   %rax,%rax
ffffffff8021a046:	74 0c                	je     ffffffff8021a054 <_RME_Inv_Del+0x50>
ffffffff8021a048:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a04f:	e9 a0 03 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
ffffffff8021a054:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a058:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a05c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a05f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a063:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a067:	48 01 d0             	add    %rdx,%rax
ffffffff8021a06a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a06e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a072:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a075:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a079:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a07d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a081:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a084:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a088:	0f 94 c0             	sete   %al
ffffffff8021a08b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a08e:	48 85 c0             	test   %rax,%rax
ffffffff8021a091:	74 0c                	je     ffffffff8021a09f <_RME_Inv_Del+0x9b>
ffffffff8021a093:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a09a:	e9 55 03 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
ffffffff8021a09f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a0a3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a0a7:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a0ab:	0f 95 c0             	setne  %al
ffffffff8021a0ae:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a0b1:	48 85 c0             	test   %rax,%rax
ffffffff8021a0b4:	0f 84 4c 01 00 00    	je     ffffffff8021a206 <_RME_Inv_Del+0x202>
ffffffff8021a0ba:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a0c1:	e9 2e 03 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
ffffffff8021a0c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a0ca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a0ce:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a0d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a0d5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a0d9:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a0dc:	0f 93 c0             	setae  %al
ffffffff8021a0df:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a0e2:	48 85 c0             	test   %rax,%rax
ffffffff8021a0e5:	74 0c                	je     ffffffff8021a0f3 <_RME_Inv_Del+0xef>
ffffffff8021a0e7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a0ee:	e9 01 03 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
ffffffff8021a0f3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a0f7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a0fb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a0ff:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a102:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a106:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a10a:	48 01 d0             	add    %rdx,%rax
ffffffff8021a10d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a111:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a115:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a118:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a11c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a120:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a124:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a127:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a12b:	0f 94 c0             	sete   %al
ffffffff8021a12e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a131:	48 85 c0             	test   %rax,%rax
ffffffff8021a134:	74 0c                	je     ffffffff8021a142 <_RME_Inv_Del+0x13e>
ffffffff8021a136:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a13d:	e9 b2 02 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
ffffffff8021a142:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a146:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a14a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a14e:	0f 95 c0             	setne  %al
ffffffff8021a151:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a154:	48 85 c0             	test   %rax,%rax
ffffffff8021a157:	74 0c                	je     ffffffff8021a165 <_RME_Inv_Del+0x161>
ffffffff8021a159:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a160:	e9 8f 02 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
ffffffff8021a165:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a169:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a16e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a171:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a175:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a179:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a17c:	0f 93 c0             	setae  %al
ffffffff8021a17f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a182:	48 85 c0             	test   %rax,%rax
ffffffff8021a185:	74 0c                	je     ffffffff8021a193 <_RME_Inv_Del+0x18f>
ffffffff8021a187:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a18e:	e9 61 02 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
ffffffff8021a193:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a197:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a19c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a1a0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a1a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a1a7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a1ab:	48 01 d0             	add    %rdx,%rax
ffffffff8021a1ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a1b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a1b6:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a1b9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a1bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a1c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a1c5:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a1c8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a1cc:	0f 94 c0             	sete   %al
ffffffff8021a1cf:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a1d2:	48 85 c0             	test   %rax,%rax
ffffffff8021a1d5:	74 0c                	je     ffffffff8021a1e3 <_RME_Inv_Del+0x1df>
ffffffff8021a1d7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a1de:	e9 11 02 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
ffffffff8021a1e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a1e7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a1eb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a1ef:	0f 95 c0             	setne  %al
ffffffff8021a1f2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a1f5:	48 85 c0             	test   %rax,%rax
ffffffff8021a1f8:	74 0c                	je     ffffffff8021a206 <_RME_Inv_Del+0x202>
ffffffff8021a1fa:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a201:	e9 ee 01 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021a206:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a20a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a20e:	83 e0 02             	and    $0x2,%eax
ffffffff8021a211:	48 85 c0             	test   %rax,%rax
ffffffff8021a214:	0f 94 c0             	sete   %al
ffffffff8021a217:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a21a:	48 85 c0             	test   %rax,%rax
ffffffff8021a21d:	74 0c                	je     ffffffff8021a22b <_RME_Inv_Del+0x227>
ffffffff8021a21f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a226:	e9 c9 01 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff8021a22b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a22f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a233:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021a237:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a23a:	0f 93 c0             	setae  %al
ffffffff8021a23d:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a240:	48 85 c0             	test   %rax,%rax
ffffffff8021a243:	74 0c                	je     ffffffff8021a251 <_RME_Inv_Del+0x24d>
ffffffff8021a245:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a24c:	e9 a3 01 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
ffffffff8021a251:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a255:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a259:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a25c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a260:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a264:	48 01 d0             	add    %rdx,%rax
ffffffff8021a267:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff8021a26b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a26f:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a272:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a276:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a27a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a27e:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a281:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a285:	0f 95 c0             	setne  %al
ffffffff8021a288:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a28b:	48 85 c0             	test   %rax,%rax
ffffffff8021a28e:	74 0c                	je     ffffffff8021a29c <_RME_Inv_Del+0x298>
ffffffff8021a290:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a297:	e9 58 01 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
ffffffff8021a29c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a2a0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a2a4:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a2a8:	0f 95 c0             	setne  %al
ffffffff8021a2ab:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a2ae:	48 85 c0             	test   %rax,%rax
ffffffff8021a2b1:	74 0c                	je     ffffffff8021a2bf <_RME_Inv_Del+0x2bb>
ffffffff8021a2b3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a2ba:	e9 35 01 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
ffffffff8021a2bf:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021a2c4:	e8 48 25 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8021a2c9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a2cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a2d0:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8021a2d4:	48 29 c2             	sub    %rax,%rdx
ffffffff8021a2d7:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8021a2db:	0f 96 c0             	setbe  %al
ffffffff8021a2de:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a2e1:	48 98                	cltq
ffffffff8021a2e3:	48 85 c0             	test   %rax,%rax
ffffffff8021a2e6:	74 0c                	je     ffffffff8021a2f4 <_RME_Inv_Del+0x2f0>
ffffffff8021a2e8:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8021a2ef:	e9 00 01 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
ffffffff8021a2f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a2f8:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a2fc:	48 85 c0             	test   %rax,%rax
ffffffff8021a2ff:	0f 95 c0             	setne  %al
ffffffff8021a302:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a305:	48 85 c0             	test   %rax,%rax
ffffffff8021a308:	74 44                	je     ffffffff8021a34e <_RME_Inv_Del+0x34a>
ffffffff8021a30a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a30e:	89 c0                	mov    %eax,%eax
ffffffff8021a310:	48 85 c0             	test   %rax,%rax
ffffffff8021a313:	0f 94 c0             	sete   %al
ffffffff8021a316:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a319:	48 85 c0             	test   %rax,%rax
ffffffff8021a31c:	74 24                	je     ffffffff8021a342 <_RME_Inv_Del+0x33e>
ffffffff8021a31e:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021a325:	00 ff ff 
ffffffff8021a328:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021a32c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a32f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a333:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a337:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a33a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a33d:	e8 1c 24 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a342:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8021a349:	e9 a6 00 00 00       	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
    
    /* Get the invocation */
    Invocation=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
ffffffff8021a34e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a352:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a356:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* See if the invocation is currently being used. If yes, we cannot delete it */
    if(Invocation->Thd_Act!=(void*)RME_NULL)
ffffffff8021a35a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a35e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a362:	48 85 c0             	test   %rax,%rax
ffffffff8021a365:	74 2d                	je     ffffffff8021a394 <_RME_Inv_Del+0x390>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Inv_Del,Type_Stat);
ffffffff8021a367:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021a36e:	00 ff ff 
ffffffff8021a371:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021a375:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a378:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a37c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a380:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a383:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a386:	e8 d3 23 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_SIV_ACT;
ffffffff8021a38b:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a392:	eb 60                	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Inv_Del,Type_Stat);
ffffffff8021a394:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a398:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a39c:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8021a3a1:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a3a4:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a3a7:	e8 b2 23 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a3ac:	48 85 c0             	test   %rax,%rax
ffffffff8021a3af:	0f 94 c0             	sete   %al
ffffffff8021a3b2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a3b5:	48 85 c0             	test   %rax,%rax
ffffffff8021a3b8:	74 09                	je     ffffffff8021a3c3 <_RME_Inv_Del+0x3bf>
ffffffff8021a3ba:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021a3c1:	eb 31                	jmp    ffffffff8021a3f4 <_RME_Inv_Del+0x3f0>
    
    /* Dereference the process */
    RME_FETCH_ADD(&(Invocation->Prc->Head.Root_Ref), -1);
ffffffff8021a3c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a3c7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a3cb:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021a3cf:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021a3d6:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a3d9:	e8 b5 23 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Try to clear the area - this must be successful */
    RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Invocation,RME_INV_SIZE)==0);
ffffffff8021a3de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a3e2:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8021a3e7:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a3ea:	e8 96 82 ff ff       	call   ffffffff80212685 <_RME_Kot_Erase>
    
    return 0;
ffffffff8021a3ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a3f4:	c9                   	leave
ffffffff8021a3f5:	c3                   	ret

ffffffff8021a3f6 <_RME_Inv_Set>:
static rme_ret_t _RME_Inv_Set(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Inv,
                              rme_ptr_t Entry,
                              rme_ptr_t Stack,
                              rme_ptr_t Is_Exc_Ret)
{
ffffffff8021a3f6:	f3 0f 1e fa          	endbr64
ffffffff8021a3fa:	55                   	push   %rbp
ffffffff8021a3fb:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a3fe:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff8021a402:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021a406:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021a40a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8021a40e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8021a412:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Inv* Inv_Op;
    volatile struct RME_Inv_Struct* Invocation;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8021a416:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a41a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a41f:	48 85 c0             	test   %rax,%rax
ffffffff8021a422:	0f 85 98 00 00 00    	jne    ffffffff8021a4c0 <_RME_Inv_Set+0xca>
ffffffff8021a428:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a42c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a430:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021a434:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a437:	0f 93 c0             	setae  %al
ffffffff8021a43a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a43d:	48 85 c0             	test   %rax,%rax
ffffffff8021a440:	74 0c                	je     ffffffff8021a44e <_RME_Inv_Set+0x58>
ffffffff8021a442:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a449:	e9 03 02 00 00       	jmp    ffffffff8021a651 <_RME_Inv_Set+0x25b>
ffffffff8021a44e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a452:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a456:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a459:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a45d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a461:	48 01 d0             	add    %rdx,%rax
ffffffff8021a464:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a468:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a46c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a46f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a473:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a477:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a47b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a47e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a482:	0f 94 c0             	sete   %al
ffffffff8021a485:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a488:	48 85 c0             	test   %rax,%rax
ffffffff8021a48b:	74 0c                	je     ffffffff8021a499 <_RME_Inv_Set+0xa3>
ffffffff8021a48d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a494:	e9 b8 01 00 00       	jmp    ffffffff8021a651 <_RME_Inv_Set+0x25b>
ffffffff8021a499:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a49d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a4a1:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a4a5:	0f 95 c0             	setne  %al
ffffffff8021a4a8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a4ab:	48 85 c0             	test   %rax,%rax
ffffffff8021a4ae:	0f 84 46 01 00 00    	je     ffffffff8021a5fa <_RME_Inv_Set+0x204>
ffffffff8021a4b4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a4bb:	e9 91 01 00 00       	jmp    ffffffff8021a651 <_RME_Inv_Set+0x25b>
ffffffff8021a4c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a4c4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a4c8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a4cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a4cf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a4d3:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a4d6:	0f 93 c0             	setae  %al
ffffffff8021a4d9:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a4dc:	48 85 c0             	test   %rax,%rax
ffffffff8021a4df:	74 0c                	je     ffffffff8021a4ed <_RME_Inv_Set+0xf7>
ffffffff8021a4e1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a4e8:	e9 64 01 00 00       	jmp    ffffffff8021a651 <_RME_Inv_Set+0x25b>
ffffffff8021a4ed:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a4f1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a4f5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a4f9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a4fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a500:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a504:	48 01 d0             	add    %rdx,%rax
ffffffff8021a507:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a50b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a50f:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a512:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a516:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a51a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a51e:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a521:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a525:	0f 94 c0             	sete   %al
ffffffff8021a528:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a52b:	48 85 c0             	test   %rax,%rax
ffffffff8021a52e:	74 0c                	je     ffffffff8021a53c <_RME_Inv_Set+0x146>
ffffffff8021a530:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a537:	e9 15 01 00 00       	jmp    ffffffff8021a651 <_RME_Inv_Set+0x25b>
ffffffff8021a53c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a540:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a544:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a548:	0f 95 c0             	setne  %al
ffffffff8021a54b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a54e:	48 85 c0             	test   %rax,%rax
ffffffff8021a551:	74 0c                	je     ffffffff8021a55f <_RME_Inv_Set+0x169>
ffffffff8021a553:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a55a:	e9 f2 00 00 00       	jmp    ffffffff8021a651 <_RME_Inv_Set+0x25b>
ffffffff8021a55f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a563:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a568:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a56b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a56f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a573:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a576:	0f 93 c0             	setae  %al
ffffffff8021a579:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a57c:	48 85 c0             	test   %rax,%rax
ffffffff8021a57f:	74 0c                	je     ffffffff8021a58d <_RME_Inv_Set+0x197>
ffffffff8021a581:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a588:	e9 c4 00 00 00       	jmp    ffffffff8021a651 <_RME_Inv_Set+0x25b>
ffffffff8021a58d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a591:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a596:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a59a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a59d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a5a1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a5a5:	48 01 d0             	add    %rdx,%rax
ffffffff8021a5a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a5ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a5b0:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a5b3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a5b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a5bb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a5bf:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a5c2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a5c6:	0f 94 c0             	sete   %al
ffffffff8021a5c9:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a5cc:	48 85 c0             	test   %rax,%rax
ffffffff8021a5cf:	74 09                	je     ffffffff8021a5da <_RME_Inv_Set+0x1e4>
ffffffff8021a5d1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a5d8:	eb 77                	jmp    ffffffff8021a651 <_RME_Inv_Set+0x25b>
ffffffff8021a5da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a5de:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a5e2:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a5e6:	0f 95 c0             	setne  %al
ffffffff8021a5e9:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a5ec:	48 85 c0             	test   %rax,%rax
ffffffff8021a5ef:	74 09                	je     ffffffff8021a5fa <_RME_Inv_Set+0x204>
ffffffff8021a5f1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a5f8:	eb 57                	jmp    ffffffff8021a651 <_RME_Inv_Set+0x25b>
                   struct RME_Cap_Inv*,Inv_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff8021a5fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a5fe:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a602:	83 e0 01             	and    $0x1,%eax
ffffffff8021a605:	48 85 c0             	test   %rax,%rax
ffffffff8021a608:	0f 94 c0             	sete   %al
ffffffff8021a60b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a60e:	48 85 c0             	test   %rax,%rax
ffffffff8021a611:	74 09                	je     ffffffff8021a61c <_RME_Inv_Set+0x226>
ffffffff8021a613:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a61a:	eb 35                	jmp    ffffffff8021a651 <_RME_Inv_Set+0x25b>
    
    /* Commit the change - we do not care if the invocation is in use, it is
     * the user's responsibility to guarantee the integrity of applications */
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8021a61c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a620:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a624:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Invocation->Entry=Entry;
ffffffff8021a628:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a62c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021a630:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Invocation->Stack=Stack;
ffffffff8021a634:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a638:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8021a63c:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Invocation->Is_Exc_Ret=Is_Exc_Ret;
ffffffff8021a640:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a644:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021a648:	48 89 50 30          	mov    %rdx,0x30(%rax)
    
    return 0;
ffffffff8021a64c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a651:	c9                   	leave
ffffffff8021a652:	c3                   	ret

ffffffff8021a653 <_RME_Inv_Act>:
******************************************************************************/
static rme_ret_t _RME_Inv_Act(struct RME_Cap_Cpt* Cpt, 
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Inv,
                              rme_ptr_t Param)
{
ffffffff8021a653:	f3 0f 1e fa          	endbr64
ffffffff8021a657:	55                   	push   %rbp
ffffffff8021a658:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a65b:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8021a65f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021a663:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021a667:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021a66b:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        /* No action required */
    }
#endif

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8021a66f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a673:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a678:	48 85 c0             	test   %rax,%rax
ffffffff8021a67b:	0f 85 98 00 00 00    	jne    ffffffff8021a719 <_RME_Inv_Act+0xc6>
ffffffff8021a681:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a685:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a689:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021a68d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a690:	0f 93 c0             	setae  %al
ffffffff8021a693:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a696:	48 85 c0             	test   %rax,%rax
ffffffff8021a699:	74 0c                	je     ffffffff8021a6a7 <_RME_Inv_Act+0x54>
ffffffff8021a69b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a6a2:	e9 fa 02 00 00       	jmp    ffffffff8021a9a1 <_RME_Inv_Act+0x34e>
ffffffff8021a6a7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a6ab:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a6af:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a6b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a6b6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a6ba:	48 01 d0             	add    %rdx,%rax
ffffffff8021a6bd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a6c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a6c5:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a6c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a6cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a6d0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a6d4:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a6d7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a6db:	0f 94 c0             	sete   %al
ffffffff8021a6de:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a6e1:	48 85 c0             	test   %rax,%rax
ffffffff8021a6e4:	74 0c                	je     ffffffff8021a6f2 <_RME_Inv_Act+0x9f>
ffffffff8021a6e6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a6ed:	e9 af 02 00 00       	jmp    ffffffff8021a9a1 <_RME_Inv_Act+0x34e>
ffffffff8021a6f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a6f6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a6fa:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a6fe:	0f 95 c0             	setne  %al
ffffffff8021a701:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a704:	48 85 c0             	test   %rax,%rax
ffffffff8021a707:	0f 84 4c 01 00 00    	je     ffffffff8021a859 <_RME_Inv_Act+0x206>
ffffffff8021a70d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a714:	e9 88 02 00 00       	jmp    ffffffff8021a9a1 <_RME_Inv_Act+0x34e>
ffffffff8021a719:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a71d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a721:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a724:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a728:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a72c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a72f:	0f 93 c0             	setae  %al
ffffffff8021a732:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a735:	48 85 c0             	test   %rax,%rax
ffffffff8021a738:	74 0c                	je     ffffffff8021a746 <_RME_Inv_Act+0xf3>
ffffffff8021a73a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a741:	e9 5b 02 00 00       	jmp    ffffffff8021a9a1 <_RME_Inv_Act+0x34e>
ffffffff8021a746:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a74a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a74e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a752:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a755:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a759:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a75d:	48 01 d0             	add    %rdx,%rax
ffffffff8021a760:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a764:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a768:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a76b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a76f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a773:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a777:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a77a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a77e:	0f 94 c0             	sete   %al
ffffffff8021a781:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a784:	48 85 c0             	test   %rax,%rax
ffffffff8021a787:	74 0c                	je     ffffffff8021a795 <_RME_Inv_Act+0x142>
ffffffff8021a789:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a790:	e9 0c 02 00 00       	jmp    ffffffff8021a9a1 <_RME_Inv_Act+0x34e>
ffffffff8021a795:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a799:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a79d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a7a1:	0f 95 c0             	setne  %al
ffffffff8021a7a4:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a7a7:	48 85 c0             	test   %rax,%rax
ffffffff8021a7aa:	74 0c                	je     ffffffff8021a7b8 <_RME_Inv_Act+0x165>
ffffffff8021a7ac:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a7b3:	e9 e9 01 00 00       	jmp    ffffffff8021a9a1 <_RME_Inv_Act+0x34e>
ffffffff8021a7b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a7bc:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a7c1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a7c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a7c8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a7cc:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a7cf:	0f 93 c0             	setae  %al
ffffffff8021a7d2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a7d5:	48 85 c0             	test   %rax,%rax
ffffffff8021a7d8:	74 0c                	je     ffffffff8021a7e6 <_RME_Inv_Act+0x193>
ffffffff8021a7da:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a7e1:	e9 bb 01 00 00       	jmp    ffffffff8021a9a1 <_RME_Inv_Act+0x34e>
ffffffff8021a7e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a7ea:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a7ef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a7f3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a7f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a7fa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a7fe:	48 01 d0             	add    %rdx,%rax
ffffffff8021a801:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a805:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a809:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a80c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a810:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a814:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a818:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a81b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a81f:	0f 94 c0             	sete   %al
ffffffff8021a822:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a825:	48 85 c0             	test   %rax,%rax
ffffffff8021a828:	74 0c                	je     ffffffff8021a836 <_RME_Inv_Act+0x1e3>
ffffffff8021a82a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a831:	e9 6b 01 00 00       	jmp    ffffffff8021a9a1 <_RME_Inv_Act+0x34e>
ffffffff8021a836:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a83a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a83e:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a842:	0f 95 c0             	setne  %al
ffffffff8021a845:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a848:	48 85 c0             	test   %rax,%rax
ffffffff8021a84b:	74 0c                	je     ffffffff8021a859 <_RME_Inv_Act+0x206>
ffffffff8021a84d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a854:	e9 48 01 00 00       	jmp    ffffffff8021a9a1 <_RME_Inv_Act+0x34e>
                   struct RME_Cap_Inv*,Inv_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff8021a859:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a85d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a861:	83 e0 02             	and    $0x2,%eax
ffffffff8021a864:	48 85 c0             	test   %rax,%rax
ffffffff8021a867:	0f 94 c0             	sete   %al
ffffffff8021a86a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a86d:	48 85 c0             	test   %rax,%rax
ffffffff8021a870:	74 0c                	je     ffffffff8021a87e <_RME_Inv_Act+0x22b>
ffffffff8021a872:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a879:	e9 23 01 00 00       	jmp    ffffffff8021a9a1 <_RME_Inv_Act+0x34e>

    /* Get the invocation struct */
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8021a87e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a882:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a886:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Check if this invocation port is already active */
    Thd_Act=Invocation->Thd_Act;
ffffffff8021a88a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a88e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a892:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(RME_UNLIKELY(Thd_Act!=(void*)0U))
ffffffff8021a896:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8021a89b:	0f 95 c0             	setne  %al
ffffffff8021a89e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a8a1:	48 85 c0             	test   %rax,%rax
ffffffff8021a8a4:	74 0c                	je     ffffffff8021a8b2 <_RME_Inv_Act+0x25f>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff8021a8a6:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a8ad:	e9 ef 00 00 00       	jmp    ffffffff8021a9a1 <_RME_Inv_Act+0x34e>
        RME_COV_MARKER();
        /* No action required */
    }

#if(RME_CPT_ENTRY_MAX==0U)
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8021a8b2:	e8 88 0f ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021a8b7:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a8bb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
#endif
    
    /* Try to do CAS and activate this port */
    if(RME_UNLIKELY(RME_COMP_SWAP((volatile rme_ptr_t*)&(Invocation->Thd_Act),
ffffffff8021a8bf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021a8c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a8c7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8021a8cb:	48 83 c1 18          	add    $0x18,%rcx
ffffffff8021a8cf:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a8d2:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021a8d5:	e8 84 1e ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a8da:	48 85 c0             	test   %rax,%rax
ffffffff8021a8dd:	0f 94 c0             	sete   %al
ffffffff8021a8e0:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a8e3:	48 85 c0             	test   %rax,%rax
ffffffff8021a8e6:	74 0c                	je     ffffffff8021a8f4 <_RME_Inv_Act+0x2a1>
                                  (rme_ptr_t)Thd_Act,
                                  (rme_ptr_t)Thd_Cur)==RME_CASFAIL))
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff8021a8e8:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a8ef:	e9 ad 00 00 00       	jmp    ffffffff8021a9a1 <_RME_Inv_Act+0x34e>

    /* Save whatever is needed to return to the point - normally only SP and IP needed
     * because all other registers, including the coprocessor registers, are saved at
     * user-level. We do not set the return value because it will be set by Inv_Ret.
     * The coprocessor state will be consistent across the call */
    __RME_Inv_Reg_Save(&(Invocation->Ret),Reg);
ffffffff8021a8f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a8f8:	48 8d 50 38          	lea    0x38(%rax),%rdx
ffffffff8021a8fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021a900:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a903:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021a906:	e8 98 b6 00 00       	call   ffffffff80225fa3 <__RME_Inv_Reg_Save>
    /* Push this into the stack: insert after the thread list header */
    _RME_List_Ins(&(Invocation->Head),
ffffffff8021a90b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a90f:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
                  &(Thd_Cur->Ctx.Invstk),
ffffffff8021a916:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a91a:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    _RME_List_Ins(&(Invocation->Head),
ffffffff8021a921:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a925:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a928:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a92b:	e8 a4 24 ff ff       	call   ffffffff8020cdd4 <_RME_List_Ins>
                  Thd_Cur->Ctx.Invstk.Next);
    /* Increase invocation depth - no atomic operation needed */
    Thd_Cur->Ctx.Invstk_Depth++;
ffffffff8021a930:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a934:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff8021a93b:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff8021a93f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a943:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
    /* Setup the register contents, and do the invocation */
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff8021a94a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a94e:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021a952:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a956:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8021a95a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8021a95e:	48 8b 89 88 00 00 00 	mov    0x88(%rcx),%rcx
ffffffff8021a965:	48 be ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rsi
ffffffff8021a96c:	ff ff 7f 
ffffffff8021a96f:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021a972:	48 21 f7             	and    %rsi,%rdi
ffffffff8021a975:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff8021a979:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8021a97d:	49 89 f0             	mov    %rsi,%r8
ffffffff8021a980:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a983:	e8 a8 b3 00 00       	call   ffffffff80225d30 <__RME_Thd_Reg_Init>
    /* We are assuming that we are always invoking into a new process (why use synchronous
     * invocation if you don't do so?). So we always switch page tables regardless. */
#if(RME_PGT_RAW_ENABLE==0U)
    RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
    __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8021a988:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a98c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a990:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021a994:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a997:	e8 d1 bd 00 00       	call   ffffffff8022676d <__RME_Pgt_Set>
    
    return 0;
ffffffff8021a99c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a9a1:	c9                   	leave
ffffffff8021a9a2:	c3                   	ret

ffffffff8021a9a3 <_RME_Inv_Ret>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Ret(struct RME_Reg_Struct* Reg,
                              rme_ptr_t Retval,
                              rme_ptr_t Is_Exc)
{
ffffffff8021a9a3:	f3 0f 1e fa          	endbr64
ffffffff8021a9a7:	55                   	push   %rbp
ffffffff8021a9a8:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a9ab:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021a9af:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021a9b3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021a9b7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;

    /* See if we can return; If we can, get the structure */
    Thread=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8021a9bb:	e8 7f 0e ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021a9c0:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a9c4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8021a9c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a9cc:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8021a9d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a9d7:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021a9dd:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a9e0:	74 0d                	je     ffffffff8021a9ef <_RME_Inv_Ret+0x4c>
ffffffff8021a9e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a9e6:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021a9ed:	eb 05                	jmp    ffffffff8021a9f4 <_RME_Inv_Ret+0x51>
ffffffff8021a9ef:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021a9f4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(RME_UNLIKELY(Invocation==(void*)RME_NULL))
ffffffff8021a9f8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021a9fd:	0f 94 c0             	sete   %al
ffffffff8021aa00:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aa03:	48 85 c0             	test   %rax,%rax
ffffffff8021aa06:	74 0c                	je     ffffffff8021aa14 <_RME_Inv_Ret+0x71>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_EMPTY;
ffffffff8021aa08:	48 c7 c0 d0 fe ff ff 	mov    $0xfffffffffffffed0,%rax
ffffffff8021aa0f:	e9 38 01 00 00       	jmp    ffffffff8021ab4c <_RME_Inv_Ret+0x1a9>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if this port allows return-on-fault */
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8021aa14:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8021aa19:	0f 95 c0             	setne  %al
ffffffff8021aa1c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aa1f:	48 85 c0             	test   %rax,%rax
ffffffff8021aa22:	74 22                	je     ffffffff8021aa46 <_RME_Inv_Ret+0xa3>
ffffffff8021aa24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aa28:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021aa2c:	48 85 c0             	test   %rax,%rax
ffffffff8021aa2f:	0f 94 c0             	sete   %al
ffffffff8021aa32:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aa35:	48 85 c0             	test   %rax,%rax
ffffffff8021aa38:	74 0c                	je     ffffffff8021aa46 <_RME_Inv_Ret+0xa3>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_FAULT;
ffffffff8021aa3a:	48 c7 c0 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rax
ffffffff8021aa41:	e9 06 01 00 00       	jmp    ffffffff8021ab4c <_RME_Inv_Ret+0x1a9>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Pop it from the stack */
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8021aa46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aa4a:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021aa4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aa51:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021aa55:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021aa58:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aa5b:	e8 46 23 ff ff       	call   ffffffff8020cda6 <_RME_List_Del>
    /* Decrease invocation depth - no atomic operation needed */
    Thread->Ctx.Invstk_Depth--;
ffffffff8021aa60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aa64:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff8021aa6b:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8021aa6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aa73:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well. */
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8021aa7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aa7e:	48 8d 50 38          	lea    0x38(%rax),%rdx
ffffffff8021aa82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aa86:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021aa89:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aa8c:	e8 4e b5 00 00       	call   ffffffff80225fdf <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8021aa91:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021aa95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aa99:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021aa9c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aa9f:	e8 96 c5 00 00       	call   ffffffff8022703a <__RME_Inv_Retval_Set>

    /* We have successfully returned, set the invocation as inactive. We need
     * a barrier here to avoid potential destruction of the return value. */
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8021aaa4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aaa8:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021aaaf:	00 

    /* Decide the system call's return value */
    if(RME_UNLIKELY(Is_Exc!=0U))
ffffffff8021aab0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8021aab5:	0f 95 c0             	setne  %al
ffffffff8021aab8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aabb:	48 85 c0             	test   %rax,%rax
ffffffff8021aabe:	74 15                	je     ffffffff8021aad5 <_RME_Inv_Ret+0x132>
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg, RME_ERR_SIV_FAULT);
ffffffff8021aac0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aac4:	48 c7 c6 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rsi
ffffffff8021aacb:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aace:	e8 50 c5 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
ffffffff8021aad3:	eb 11                	jmp    ffffffff8021aae6 <_RME_Inv_Ret+0x143>
    }
    else
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg,0);
ffffffff8021aad5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aad9:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021aade:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aae1:	e8 3d c5 00 00       	call   ffffffff80227023 <__RME_Svc_Retval_Set>
    }

    /* Same assumptions as in invocation activation */
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8021aae6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aaea:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8021aaf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aaf5:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021aafb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021aafe:	74 0d                	je     ffffffff8021ab0d <_RME_Inv_Ret+0x16a>
ffffffff8021ab00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ab04:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021ab0b:	eb 05                	jmp    ffffffff8021ab12 <_RME_Inv_Ret+0x16f>
ffffffff8021ab0d:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021ab12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Invocation!=(void*)RME_NULL)
ffffffff8021ab16:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021ab1b:	74 16                	je     ffffffff8021ab33 <_RME_Inv_Ret+0x190>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8021ab1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ab21:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021ab25:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021ab29:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ab2c:	e8 3c bc 00 00       	call   ffffffff8022676d <__RME_Pgt_Set>
ffffffff8021ab31:	eb 14                	jmp    ffffffff8021ab47 <_RME_Inv_Ret+0x1a4>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Thread->Sched.Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
ffffffff8021ab33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ab37:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021ab3b:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021ab3f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ab42:	e8 26 bc 00 00       	call   ffffffff8022676d <__RME_Pgt_Set>
    }
    
    return 0;
ffffffff8021ab47:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021ab4c:	c9                   	leave
ffffffff8021ab4d:	c3                   	ret

ffffffff8021ab4e <_RME_Kfn_Boot_Crt>:
Return      : rme_ret_t - If successful, 0; or error code.
******************************************************************************/
rme_ret_t _RME_Kfn_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Kfn)
{
ffffffff8021ab4e:	f3 0f 1e fa          	endbr64
ffffffff8021ab52:	55                   	push   %rbp
ffffffff8021ab53:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021ab56:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8021ab5a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021ab5e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021ab62:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Kfn* Kfn_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021ab66:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ab6a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021ab6f:	48 85 c0             	test   %rax,%rax
ffffffff8021ab72:	0f 85 98 00 00 00    	jne    ffffffff8021ac10 <_RME_Kfn_Boot_Crt+0xc2>
ffffffff8021ab78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ab7c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ab80:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021ab84:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ab87:	0f 93 c0             	setae  %al
ffffffff8021ab8a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ab8d:	48 85 c0             	test   %rax,%rax
ffffffff8021ab90:	74 0c                	je     ffffffff8021ab9e <_RME_Kfn_Boot_Crt+0x50>
ffffffff8021ab92:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ab99:	e9 9b 02 00 00       	jmp    ffffffff8021ae39 <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ab9e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021aba2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021aba6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021aba9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021abad:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021abb1:	48 01 d0             	add    %rdx,%rax
ffffffff8021abb4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021abb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021abbc:	48 8b 00             	mov    (%rax),%rax
ffffffff8021abbf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021abc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021abc7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021abcb:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021abce:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021abd2:	0f 94 c0             	sete   %al
ffffffff8021abd5:	0f b6 c0             	movzbl %al,%eax
ffffffff8021abd8:	48 85 c0             	test   %rax,%rax
ffffffff8021abdb:	74 0c                	je     ffffffff8021abe9 <_RME_Kfn_Boot_Crt+0x9b>
ffffffff8021abdd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021abe4:	e9 50 02 00 00       	jmp    ffffffff8021ae39 <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021abe9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021abed:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021abf1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021abf5:	0f 95 c0             	setne  %al
ffffffff8021abf8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021abfb:	48 85 c0             	test   %rax,%rax
ffffffff8021abfe:	0f 84 4c 01 00 00    	je     ffffffff8021ad50 <_RME_Kfn_Boot_Crt+0x202>
ffffffff8021ac04:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ac0b:	e9 29 02 00 00       	jmp    ffffffff8021ae39 <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ac10:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ac14:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ac18:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ac1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ac1f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ac23:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ac26:	0f 93 c0             	setae  %al
ffffffff8021ac29:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ac2c:	48 85 c0             	test   %rax,%rax
ffffffff8021ac2f:	74 0c                	je     ffffffff8021ac3d <_RME_Kfn_Boot_Crt+0xef>
ffffffff8021ac31:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ac38:	e9 fc 01 00 00       	jmp    ffffffff8021ae39 <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ac3d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ac41:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ac45:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ac49:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ac4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ac50:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021ac54:	48 01 d0             	add    %rdx,%rax
ffffffff8021ac57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021ac5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ac5f:	48 8b 00             	mov    (%rax),%rax
ffffffff8021ac62:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021ac66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ac6a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ac6e:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021ac71:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021ac75:	0f 94 c0             	sete   %al
ffffffff8021ac78:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ac7b:	48 85 c0             	test   %rax,%rax
ffffffff8021ac7e:	74 0c                	je     ffffffff8021ac8c <_RME_Kfn_Boot_Crt+0x13e>
ffffffff8021ac80:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021ac87:	e9 ad 01 00 00       	jmp    ffffffff8021ae39 <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ac8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ac90:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021ac94:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ac98:	0f 95 c0             	setne  %al
ffffffff8021ac9b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ac9e:	48 85 c0             	test   %rax,%rax
ffffffff8021aca1:	74 0c                	je     ffffffff8021acaf <_RME_Kfn_Boot_Crt+0x161>
ffffffff8021aca3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021acaa:	e9 8a 01 00 00       	jmp    ffffffff8021ae39 <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021acaf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021acb3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021acb8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021acbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021acbf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021acc3:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021acc6:	0f 93 c0             	setae  %al
ffffffff8021acc9:	0f b6 c0             	movzbl %al,%eax
ffffffff8021accc:	48 85 c0             	test   %rax,%rax
ffffffff8021accf:	74 0c                	je     ffffffff8021acdd <_RME_Kfn_Boot_Crt+0x18f>
ffffffff8021acd1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021acd8:	e9 5c 01 00 00       	jmp    ffffffff8021ae39 <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021acdd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ace1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021ace6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021acea:	48 89 c2             	mov    %rax,%rdx
ffffffff8021aced:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021acf1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021acf5:	48 01 d0             	add    %rdx,%rax
ffffffff8021acf8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021acfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ad00:	48 8b 00             	mov    (%rax),%rax
ffffffff8021ad03:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021ad07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ad0b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ad0f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021ad12:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021ad16:	0f 94 c0             	sete   %al
ffffffff8021ad19:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad1c:	48 85 c0             	test   %rax,%rax
ffffffff8021ad1f:	74 0c                	je     ffffffff8021ad2d <_RME_Kfn_Boot_Crt+0x1df>
ffffffff8021ad21:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021ad28:	e9 0c 01 00 00       	jmp    ffffffff8021ae39 <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ad2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ad31:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021ad35:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ad39:	0f 95 c0             	setne  %al
ffffffff8021ad3c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad3f:	48 85 c0             	test   %rax,%rax
ffffffff8021ad42:	74 0c                	je     ffffffff8021ad50 <_RME_Kfn_Boot_Crt+0x202>
ffffffff8021ad44:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ad4b:	e9 e9 00 00 00       	jmp    ffffffff8021ae39 <_RME_Kfn_Boot_Crt+0x2eb>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8021ad50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ad54:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021ad58:	83 e0 01             	and    $0x1,%eax
ffffffff8021ad5b:	48 85 c0             	test   %rax,%rax
ffffffff8021ad5e:	0f 94 c0             	sete   %al
ffffffff8021ad61:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad64:	48 85 c0             	test   %rax,%rax
ffffffff8021ad67:	74 0c                	je     ffffffff8021ad75 <_RME_Kfn_Boot_Crt+0x227>
ffffffff8021ad69:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021ad70:	e9 c4 00 00 00       	jmp    ffffffff8021ae39 <_RME_Kfn_Boot_Crt+0x2eb>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kfn,struct RME_Cap_Kfn*,Kfn_Crt);
ffffffff8021ad75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ad79:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ad7d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021ad81:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ad84:	0f 93 c0             	setae  %al
ffffffff8021ad87:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad8a:	48 85 c0             	test   %rax,%rax
ffffffff8021ad8d:	74 0c                	je     ffffffff8021ad9b <_RME_Kfn_Boot_Crt+0x24d>
ffffffff8021ad8f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ad96:	e9 9e 00 00 00       	jmp    ffffffff8021ae39 <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ad9b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021ad9f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ada3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ada6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021adaa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021adae:	48 01 d0             	add    %rdx,%rax
ffffffff8021adb1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff8021adb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021adb9:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021adc0:	00 00 00 
ffffffff8021adc3:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021adc8:	48 89 c7             	mov    %rax,%rdi
ffffffff8021adcb:	e8 8e 19 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021add0:	48 85 c0             	test   %rax,%rax
ffffffff8021add3:	0f 94 c0             	sete   %al
ffffffff8021add6:	0f b6 c0             	movzbl %al,%eax
ffffffff8021add9:	48 85 c0             	test   %rax,%rax
ffffffff8021addc:	74 09                	je     ffffffff8021ade7 <_RME_Kfn_Boot_Crt+0x299>
ffffffff8021adde:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021ade5:	eb 52                	jmp    ffffffff8021ae39 <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ade7:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021adec:	e8 20 1a ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8021adf1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021adf5:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* Header init */
    Kfn_Crt->Head.Root_Ref=1U;
ffffffff8021adf9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021adfd:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8021ae04:	00 
    Kfn_Crt->Head.Object=0U;
ffffffff8021ae05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ae09:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021ae10:	00 
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff8021ae11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ae15:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
ffffffff8021ae1c:	ff ff ff 
ffffffff8021ae1f:	48 89 48 10          	mov    %rcx,0x10(%rax)
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Kfn_Crt->Head.Type_Stat),
ffffffff8021ae23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ae27:	48 b9 00 00 00 00 00 	movabs $0x1000000000000,%rcx
ffffffff8021ae2e:	00 01 00 
ffffffff8021ae31:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_KFN,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8021ae34:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021ae39:	c9                   	leave
ffffffff8021ae3a:	c3                   	ret

ffffffff8021ae3b <_RME_Kfn_Act>:
                              rme_cid_t Cap_Kfn,
                              rme_ptr_t Func_ID,
                              rme_ptr_t Sub_ID,
                              rme_ptr_t Param1,
                              rme_ptr_t Param2)
{
ffffffff8021ae3b:	f3 0f 1e fa          	endbr64
ffffffff8021ae3f:	55                   	push   %rbp
ffffffff8021ae40:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021ae43:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021ae47:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021ae4b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021ae4f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff8021ae53:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff8021ae57:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff8021ae5b:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
    struct RME_Cap_Kfn* Kfn_Op;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff8021ae5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ae63:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021ae68:	48 85 c0             	test   %rax,%rax
ffffffff8021ae6b:	0f 85 98 00 00 00    	jne    ffffffff8021af09 <_RME_Kfn_Act+0xce>
ffffffff8021ae71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ae75:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ae79:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021ae7d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ae80:	0f 93 c0             	setae  %al
ffffffff8021ae83:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ae86:	48 85 c0             	test   %rax,%rax
ffffffff8021ae89:	74 0c                	je     ffffffff8021ae97 <_RME_Kfn_Act+0x5c>
ffffffff8021ae8b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ae92:	e9 fd 01 00 00       	jmp    ffffffff8021b094 <_RME_Kfn_Act+0x259>
ffffffff8021ae97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ae9b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ae9f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021aea2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aea6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021aeaa:	48 01 d0             	add    %rdx,%rax
ffffffff8021aead:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021aeb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aeb5:	48 8b 00             	mov    (%rax),%rax
ffffffff8021aeb8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021aebc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aec0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021aec4:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021aec7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021aecb:	0f 94 c0             	sete   %al
ffffffff8021aece:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aed1:	48 85 c0             	test   %rax,%rax
ffffffff8021aed4:	74 0c                	je     ffffffff8021aee2 <_RME_Kfn_Act+0xa7>
ffffffff8021aed6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021aedd:	e9 b2 01 00 00       	jmp    ffffffff8021b094 <_RME_Kfn_Act+0x259>
ffffffff8021aee2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aee6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021aeea:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021aeee:	0f 95 c0             	setne  %al
ffffffff8021aef1:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aef4:	48 85 c0             	test   %rax,%rax
ffffffff8021aef7:	0f 84 46 01 00 00    	je     ffffffff8021b043 <_RME_Kfn_Act+0x208>
ffffffff8021aefd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021af04:	e9 8b 01 00 00       	jmp    ffffffff8021b094 <_RME_Kfn_Act+0x259>
ffffffff8021af09:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021af0d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021af11:	48 89 c2             	mov    %rax,%rdx
ffffffff8021af14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af18:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021af1c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021af1f:	0f 93 c0             	setae  %al
ffffffff8021af22:	0f b6 c0             	movzbl %al,%eax
ffffffff8021af25:	48 85 c0             	test   %rax,%rax
ffffffff8021af28:	74 0c                	je     ffffffff8021af36 <_RME_Kfn_Act+0xfb>
ffffffff8021af2a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021af31:	e9 5e 01 00 00       	jmp    ffffffff8021b094 <_RME_Kfn_Act+0x259>
ffffffff8021af36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021af3a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021af3e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021af42:	48 89 c2             	mov    %rax,%rdx
ffffffff8021af45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af49:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021af4d:	48 01 d0             	add    %rdx,%rax
ffffffff8021af50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021af54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021af58:	48 8b 00             	mov    (%rax),%rax
ffffffff8021af5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021af5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021af63:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021af67:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021af6a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021af6e:	0f 94 c0             	sete   %al
ffffffff8021af71:	0f b6 c0             	movzbl %al,%eax
ffffffff8021af74:	48 85 c0             	test   %rax,%rax
ffffffff8021af77:	74 0c                	je     ffffffff8021af85 <_RME_Kfn_Act+0x14a>
ffffffff8021af79:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021af80:	e9 0f 01 00 00       	jmp    ffffffff8021b094 <_RME_Kfn_Act+0x259>
ffffffff8021af85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021af89:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021af8d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021af91:	0f 95 c0             	setne  %al
ffffffff8021af94:	0f b6 c0             	movzbl %al,%eax
ffffffff8021af97:	48 85 c0             	test   %rax,%rax
ffffffff8021af9a:	74 0c                	je     ffffffff8021afa8 <_RME_Kfn_Act+0x16d>
ffffffff8021af9c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021afa3:	e9 ec 00 00 00       	jmp    ffffffff8021b094 <_RME_Kfn_Act+0x259>
ffffffff8021afa8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021afac:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021afb1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021afb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021afb8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021afbc:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021afbf:	0f 93 c0             	setae  %al
ffffffff8021afc2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021afc5:	48 85 c0             	test   %rax,%rax
ffffffff8021afc8:	74 0c                	je     ffffffff8021afd6 <_RME_Kfn_Act+0x19b>
ffffffff8021afca:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021afd1:	e9 be 00 00 00       	jmp    ffffffff8021b094 <_RME_Kfn_Act+0x259>
ffffffff8021afd6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021afda:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021afdf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021afe3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021afe6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021afea:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021afee:	48 01 d0             	add    %rdx,%rax
ffffffff8021aff1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021aff5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aff9:	48 8b 00             	mov    (%rax),%rax
ffffffff8021affc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021b000:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b004:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021b008:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b00b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021b00f:	0f 94 c0             	sete   %al
ffffffff8021b012:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b015:	48 85 c0             	test   %rax,%rax
ffffffff8021b018:	74 09                	je     ffffffff8021b023 <_RME_Kfn_Act+0x1e8>
ffffffff8021b01a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021b021:	eb 71                	jmp    ffffffff8021b094 <_RME_Kfn_Act+0x259>
ffffffff8021b023:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b027:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021b02b:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021b02f:	0f 95 c0             	setne  %al
ffffffff8021b032:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b035:	48 85 c0             	test   %rax,%rax
ffffffff8021b038:	74 09                	je     ffffffff8021b043 <_RME_Kfn_Act+0x208>
ffffffff8021b03a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021b041:	eb 51                	jmp    ffffffff8021b094 <_RME_Kfn_Act+0x259>
                   struct RME_Cap_Kfn*,Kfn_Op,Type_Stat);    

    /* Check if the range of calling is allowed - kernel function specific */
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021b043:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b047:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021b04b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021b04f:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021b053:	72 10                	jb     ffffffff8021b065 <_RME_Kfn_Act+0x22a>
       (Func_ID<RME_KFN_FLAG_LOW(Kfn_Op->Head.Flag)))
ffffffff8021b055:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b059:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021b05d:	89 c0                	mov    %eax,%eax
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021b05f:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff8021b063:	73 09                	jae    ffffffff8021b06e <_RME_Kfn_Act+0x233>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff8021b065:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021b06c:	eb 26                	jmp    ffffffff8021b094 <_RME_Kfn_Act+0x259>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Return whatever the function returns */
    return __RME_Kfn_Handler(Cpt,Reg,Func_ID,Sub_ID,Param1,Param2);
ffffffff8021b06e:	4c 8b 45 10          	mov    0x10(%rbp),%r8
ffffffff8021b072:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8021b076:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8021b07a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021b07e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff8021b082:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b086:	4d 89 c1             	mov    %r8,%r9
ffffffff8021b089:	49 89 f8             	mov    %rdi,%r8
ffffffff8021b08c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b08f:	e8 75 00 00 00       	call   ffffffff8021b109 <__RME_Kfn_Handler>
}
ffffffff8021b094:	c9                   	leave
ffffffff8021b095:	c3                   	ret

ffffffff8021b096 <_RME_X64_Comp_Swap>:
            {
                return (struct RME_X64_ACPI_RDSP_Desc*)&(Pos[Count]);
            }
        }
    }
    return 0;
ffffffff8021b096:	55                   	push   %rbp
ffffffff8021b097:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b09a:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8021b09e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021b0a2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021b0a6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
}
/* End Function:__RME_X64_RDSP_Scan ******************************************/
ffffffff8021b0aa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021b0ae:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8021b0b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b0b6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8021b0ba:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021b0bf:	0f 94 c0             	sete   %al
ffffffff8021b0c2:	88 45 ff             	mov    %al,-0x1(%rbp)

/* Function:__RME_X64_RDSP_Find ***********************************************
Description : Find a valid RDSP structure and return it.
Input       : None.
ffffffff8021b0c5:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
Output      : None.
ffffffff8021b0c9:	c9                   	leave
ffffffff8021b0ca:	c3                   	ret

ffffffff8021b0cb <main>:
{
ffffffff8021b0cb:	f3 0f 1e fa          	endbr64
ffffffff8021b0cf:	55                   	push   %rbp
ffffffff8021b0d0:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b0d3:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8021b0d7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021b0db:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8021b0e2:	80 ff ff 
ffffffff8021b0e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b0e9:	48 01 d0             	add    %rdx,%rax
ffffffff8021b0ec:	48 89 05 35 6f 01 00 	mov    %rax,0x16f35(%rip)        # ffffffff80232028 <RME_X64_MBInfo>
    _RME_Kmain(RME_KOM_STACK_ADDR);
ffffffff8021b0f3:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
ffffffff8021b0fa:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b0fd:	e8 b1 07 ff ff       	call   ffffffff8020b8b3 <_RME_Kmain>
    return 0;
ffffffff8021b102:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b107:	c9                   	leave
ffffffff8021b108:	c3                   	ret

ffffffff8021b109 <__RME_Kfn_Handler>:
{
ffffffff8021b109:	f3 0f 1e fa          	endbr64
ffffffff8021b10d:	55                   	push   %rbp
ffffffff8021b10e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b111:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021b115:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8021b119:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8021b11d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8021b121:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff8021b125:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
ffffffff8021b129:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    return 0;
ffffffff8021b12d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b132:	c9                   	leave
ffffffff8021b133:	c3                   	ret

ffffffff8021b134 <__RME_Putchar>:
{
ffffffff8021b134:	f3 0f 1e fa          	endbr64
ffffffff8021b138:	55                   	push   %rbp
ffffffff8021b139:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b13c:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8021b140:	89 f8                	mov    %edi,%eax
ffffffff8021b142:	88 45 fc             	mov    %al,-0x4(%rbp)
    while((__RME_X64_In(RME_X64_COM1+5)&0x20)==0);
ffffffff8021b145:	90                   	nop
ffffffff8021b146:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff8021b14b:	e8 b0 06 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff8021b150:	83 e0 20             	and    $0x20,%eax
ffffffff8021b153:	48 85 c0             	test   %rax,%rax
ffffffff8021b156:	74 ee                	je     ffffffff8021b146 <__RME_Putchar+0x12>
    __RME_X64_Out(RME_X64_COM1, Char);
ffffffff8021b158:	48 0f be 45 fc       	movsbq -0x4(%rbp),%rax
ffffffff8021b15d:	48 89 c6             	mov    %rax,%rsi
ffffffff8021b160:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8021b165:	e8 a0 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    return 0;
ffffffff8021b16a:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b16f:	c9                   	leave
ffffffff8021b170:	c3                   	ret

ffffffff8021b171 <__RME_X64_UART_Init>:
{
ffffffff8021b171:	f3 0f 1e fa          	endbr64
ffffffff8021b175:	55                   	push   %rbp
ffffffff8021b176:	48 89 e5             	mov    %rsp,%rbp
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021b179:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b17e:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff8021b183:	e8 82 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x80);
ffffffff8021b188:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff8021b18d:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff8021b192:	e8 73 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+0, 115200/9600);
ffffffff8021b197:	be 0c 00 00 00       	mov    $0xc,%esi
ffffffff8021b19c:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8021b1a1:	e8 64 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021b1a6:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b1ab:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff8021b1b0:	e8 55 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x03);
ffffffff8021b1b5:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021b1ba:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff8021b1bf:	e8 46 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+2, 0xC7);
ffffffff8021b1c4:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff8021b1c9:	bf fa 03 00 00       	mov    $0x3fa,%edi
ffffffff8021b1ce:	e8 37 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+4, 0);
ffffffff8021b1d3:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b1d8:	bf fc 03 00 00       	mov    $0x3fc,%edi
ffffffff8021b1dd:	e8 28 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    if(__RME_X64_In(RME_X64_COM1+5)==0xFF)
ffffffff8021b1e2:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff8021b1e7:	e8 14 06 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff8021b1ec:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff8021b1f2:	75 0d                	jne    ffffffff8021b201 <__RME_X64_UART_Init+0x90>
        RME_X64_UART_Exist=0;
ffffffff8021b1f4:	48 c7 05 21 6e 01 00 	movq   $0x0,0x16e21(%rip)        # ffffffff80232020 <RME_X64_UART_Exist>
ffffffff8021b1fb:	00 00 00 00 
}
ffffffff8021b1ff:	eb 0b                	jmp    ffffffff8021b20c <__RME_X64_UART_Init+0x9b>
        RME_X64_UART_Exist=1;
ffffffff8021b201:	48 c7 05 14 6e 01 00 	movq   $0x1,0x16e14(%rip)        # ffffffff80232020 <RME_X64_UART_Exist>
ffffffff8021b208:	01 00 00 00 
}
ffffffff8021b20c:	90                   	nop
ffffffff8021b20d:	5d                   	pop    %rbp
ffffffff8021b20e:	c3                   	ret

ffffffff8021b20f <__RME_X64_RDSP_Scan>:
{
ffffffff8021b20f:	f3 0f 1e fa          	endbr64
ffffffff8021b213:	55                   	push   %rbp
ffffffff8021b214:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b217:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021b21b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021b21f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    Pos=(rme_u8_t*)RME_X64_PA2VA(Base);
ffffffff8021b223:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8021b22a:	80 ff ff 
ffffffff8021b22d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b231:	48 01 d0             	add    %rdx,%rax
ffffffff8021b234:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff8021b238:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021b23f:	00 
ffffffff8021b240:	eb 7f                	jmp    ffffffff8021b2c1 <__RME_X64_RDSP_Scan+0xb2>
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff8021b242:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b246:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b24a:	48 01 d0             	add    %rdx,%rax
ffffffff8021b24d:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8021b252:	48 c7 c6 c2 8c 22 80 	mov    $0xffffffff80228cc2,%rsi
ffffffff8021b259:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b25c:	e8 fb 1b ff ff       	call   ffffffff8020ce5c <_RME_Memcmp>
ffffffff8021b261:	48 85 c0             	test   %rax,%rax
ffffffff8021b264:	75 56                	jne    ffffffff8021b2bc <__RME_X64_RDSP_Scan+0xad>
            Checksum=0;
ffffffff8021b266:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021b26d:	00 
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff8021b26e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021b275:	00 
ffffffff8021b276:	eb 24                	jmp    ffffffff8021b29c <__RME_X64_RDSP_Scan+0x8d>
                Checksum+=( rme_ptr_t)Pos[Count+Check_Cnt];
ffffffff8021b278:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b27c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b280:	48 01 d0             	add    %rdx,%rax
ffffffff8021b283:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b286:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b28a:	48 01 d0             	add    %rdx,%rax
ffffffff8021b28d:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b290:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b293:	48 01 45 f0          	add    %rax,-0x10(%rbp)
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff8021b297:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff8021b29c:	48 83 7d e8 13       	cmpq   $0x13,-0x18(%rbp)
ffffffff8021b2a1:	7e d5                	jle    ffffffff8021b278 <__RME_X64_RDSP_Scan+0x69>
            if((Checksum&0xFF)==0)
ffffffff8021b2a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b2a7:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b2aa:	48 85 c0             	test   %rax,%rax
ffffffff8021b2ad:	75 0d                	jne    ffffffff8021b2bc <__RME_X64_RDSP_Scan+0xad>
                return (struct RME_X64_ACPI_RDSP_Desc*)&(Pos[Count]);
ffffffff8021b2af:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b2b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b2b7:	48 01 d0             	add    %rdx,%rax
ffffffff8021b2ba:	eb 1f                	jmp    ffffffff8021b2db <__RME_X64_RDSP_Scan+0xcc>
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff8021b2bc:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
ffffffff8021b2c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b2c5:	48 8d 50 dc          	lea    -0x24(%rax),%rdx
ffffffff8021b2c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b2cd:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b2d0:	0f 83 6c ff ff ff    	jae    ffffffff8021b242 <__RME_X64_RDSP_Scan+0x33>
    return 0;
ffffffff8021b2d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b2db:	c9                   	leave
ffffffff8021b2dc:	c3                   	ret

ffffffff8021b2dd <__RME_X64_RDSP_Find>:
Return      : struct RME_X64_ACPI_RDSP_Desc* - The descriptor address.
******************************************************************************/
struct RME_X64_ACPI_RDSP_Desc*__RME_X64_RDSP_Find(void)
{
ffffffff8021b2dd:	f3 0f 1e fa          	endbr64
ffffffff8021b2e1:	55                   	push   %rbp
ffffffff8021b2e2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b2e5:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_X64_ACPI_RDSP_Desc* RDSP;
    rme_ptr_t Paddr;
    /* 0x40E contains the address of Extended BIOS Data Area (EBDA). Let's try
     * to find the RDSP there first */
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff8021b2e9:	48 b8 0e 04 00 00 00 	movabs $0xffff80000000040e,%rax
ffffffff8021b2f0:	80 ff ff 
ffffffff8021b2f3:	0f b7 00             	movzwl (%rax),%eax
ffffffff8021b2f6:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b2f9:	c1 e0 04             	shl    $0x4,%eax
ffffffff8021b2fc:	48 98                	cltq
ffffffff8021b2fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    if(Paddr!=0)
ffffffff8021b302:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8021b307:	74 22                	je     ffffffff8021b32b <__RME_X64_RDSP_Find+0x4e>
    {
        RDSP=__RME_X64_RDSP_Scan(Paddr,1024);
ffffffff8021b309:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b30d:	be 00 04 00 00       	mov    $0x400,%esi
ffffffff8021b312:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b315:	e8 f5 fe ff ff       	call   ffffffff8021b20f <__RME_X64_RDSP_Scan>
ffffffff8021b31a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        /* Found */
        if(RDSP!=0)
ffffffff8021b31e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021b323:	74 06                	je     ffffffff8021b32b <__RME_X64_RDSP_Find+0x4e>
            return RDSP;
ffffffff8021b325:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b329:	eb 0f                	jmp    ffffffff8021b33a <__RME_X64_RDSP_Find+0x5d>
    }

    /* If that fails, the RDSP must be here */
    return __RME_X64_RDSP_Scan(0xE0000, 0x20000);
ffffffff8021b32b:	be 00 00 02 00       	mov    $0x20000,%esi
ffffffff8021b330:	bf 00 00 0e 00       	mov    $0xe0000,%edi
ffffffff8021b335:	e8 d5 fe ff ff       	call   ffffffff8021b20f <__RME_X64_RDSP_Scan>
}
ffffffff8021b33a:	c9                   	leave
ffffffff8021b33b:	c3                   	ret

ffffffff8021b33c <__RME_X64_SMP_Detect>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
rme_ret_t __RME_X64_SMP_Detect(struct RME_X64_ACPI_MADT_Hdr* MADT)
{
ffffffff8021b33c:	f3 0f 1e fa          	endbr64
ffffffff8021b340:	55                   	push   %rbp
ffffffff8021b341:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b344:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021b348:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    rme_ptr_t Length;
    rme_u8_t* Ptr;
    rme_u8_t* End;

    /* Is there a MADT? */
    if(MADT==0)
ffffffff8021b34c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8021b351:	75 0c                	jne    ffffffff8021b35f <__RME_X64_SMP_Detect+0x23>
        return -1;
ffffffff8021b353:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b35a:	e9 18 03 00 00       	jmp    ffffffff8021b677 <__RME_X64_SMP_Detect+0x33b>
    /* Is the MADT valid? */
    if(MADT->Header.Length<sizeof(struct RME_X64_ACPI_MADT_Hdr))
ffffffff8021b35f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b363:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b366:	83 f8 2b             	cmp    $0x2b,%eax
ffffffff8021b369:	77 0c                	ja     ffffffff8021b377 <__RME_X64_SMP_Detect+0x3b>
        return -1;
ffffffff8021b36b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b372:	e9 00 03 00 00       	jmp    ffffffff8021b677 <__RME_X64_SMP_Detect+0x33b>

    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff8021b377:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b37b:	8b 40 24             	mov    0x24(%rax),%eax
ffffffff8021b37e:	89 c0                	mov    %eax,%eax
ffffffff8021b380:	48 89 05 99 7f 01 00 	mov    %rax,0x17f99(%rip)        # ffffffff80233320 <RME_X64_LAPIC_Addr>

    /* Where does the actual table contents start? */
    Ptr=MADT->Table;
ffffffff8021b387:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b38b:	48 83 c0 2c          	add    $0x2c,%rax
ffffffff8021b38f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Where does it end? */
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);
ffffffff8021b393:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b397:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b39a:	89 c0                	mov    %eax,%eax
ffffffff8021b39c:	48 8d 50 d4          	lea    -0x2c(%rax),%rdx
ffffffff8021b3a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b3a4:	48 01 d0             	add    %rdx,%rax
ffffffff8021b3a7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    RME_X64_Num_IOAPIC=0;
ffffffff8021b3ab:	48 c7 05 0a 7f 01 00 	movq   $0x0,0x17f0a(%rip)        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
ffffffff8021b3b2:	00 00 00 00 
    RME_X64_Num_CPU=0;
ffffffff8021b3b6:	48 c7 05 e7 6e 01 00 	movq   $0x0,0x16ee7(%rip)        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021b3bd:	00 00 00 00 
    while(Ptr<End)
ffffffff8021b3c1:	e9 98 02 00 00       	jmp    ffffffff8021b65e <__RME_X64_SMP_Detect+0x322>
    {
        /* See if we have finished scanning the table */
        if((End-Ptr)<2)
ffffffff8021b3c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b3ca:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff8021b3ce:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021b3d2:	0f 8e 96 02 00 00    	jle    ffffffff8021b66e <__RME_X64_SMP_Detect+0x332>
            break;
        Length=Ptr[1];
ffffffff8021b3d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b3dc:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b3e0:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b3e3:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b3e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        if((End-Ptr)<Length)
ffffffff8021b3ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b3ee:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff8021b3f2:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8021b3f6:	0f 82 75 02 00 00    	jb     ffffffff8021b671 <__RME_X64_SMP_Detect+0x335>
            break;

        /* See what is in the table */
        switch(Ptr[0])
ffffffff8021b3fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b400:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b403:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b406:	83 f8 02             	cmp    $0x2,%eax
ffffffff8021b409:	0f 84 a9 01 00 00    	je     ffffffff8021b5b8 <__RME_X64_SMP_Detect+0x27c>
ffffffff8021b40f:	83 f8 02             	cmp    $0x2,%eax
ffffffff8021b412:	0f 8f 31 02 00 00    	jg     ffffffff8021b649 <__RME_X64_SMP_Detect+0x30d>
ffffffff8021b418:	85 c0                	test   %eax,%eax
ffffffff8021b41a:	74 0e                	je     ffffffff8021b42a <__RME_X64_SMP_Detect+0xee>
ffffffff8021b41c:	83 f8 01             	cmp    $0x1,%eax
ffffffff8021b41f:	0f 84 ba 00 00 00    	je     ffffffff8021b4df <__RME_X64_SMP_Detect+0x1a3>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);

                break;
            }
            /* All other types are ignored */
            default:break;
ffffffff8021b425:	e9 1f 02 00 00       	jmp    ffffffff8021b649 <__RME_X64_SMP_Detect+0x30d>
                LAPIC=(struct RME_X64_ACPI_MADT_LAPIC_Record*)Ptr;
ffffffff8021b42a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b42e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_LAPIC_Record))
ffffffff8021b432:	48 83 7d e8 07       	cmpq   $0x7,-0x18(%rbp)
ffffffff8021b437:	0f 86 0f 02 00 00    	jbe    ffffffff8021b64c <__RME_X64_SMP_Detect+0x310>
                if((LAPIC->Flags&RME_X64_APIC_LAPIC_ENABLED)==0)
ffffffff8021b43d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b441:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b444:	83 e0 01             	and    $0x1,%eax
ffffffff8021b447:	85 c0                	test   %eax,%eax
ffffffff8021b449:	0f 84 00 02 00 00    	je     ffffffff8021b64f <__RME_X64_SMP_Detect+0x313>
                RME_DBG_S("\n\rACPI: CPU ");
ffffffff8021b44f:	48 c7 c7 cb 8c 22 80 	mov    $0xffffffff80228ccb,%rdi
ffffffff8021b456:	e8 d2 15 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(RME_X64_Num_CPU);
ffffffff8021b45b:	48 8b 05 46 6e 01 00 	mov    0x16e46(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021b462:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b465:	e8 c9 13 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(", LAPIC ID ");
ffffffff8021b46a:	48 c7 c7 d8 8c 22 80 	mov    $0xffffffff80228cd8,%rdi
ffffffff8021b471:	e8 b7 15 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(LAPIC->APIC_ID);
ffffffff8021b476:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b47a:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b47e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b481:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b484:	e8 aa 13 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_X64_CPU_Info[RME_X64_Num_CPU].LAPIC_ID=LAPIC->APIC_ID;
ffffffff8021b489:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b48d:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b491:	48 8b 15 10 6e 01 00 	mov    0x16e10(%rip),%rdx        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021b498:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b49b:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff8021b49f:	48 81 c2 c0 22 23 80 	add    $0xffffffff802322c0,%rdx
ffffffff8021b4a6:	48 89 02             	mov    %rax,(%rdx)
                RME_X64_CPU_Info[RME_X64_Num_CPU].Boot_Done=0;
ffffffff8021b4a9:	48 8b 05 f8 6d 01 00 	mov    0x16df8(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021b4b0:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021b4b4:	48 05 c8 22 23 80    	add    $0xffffffff802322c8,%rax
ffffffff8021b4ba:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
                RME_X64_Num_CPU++;
ffffffff8021b4c1:	48 8b 05 e0 6d 01 00 	mov    0x16de0(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021b4c8:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b4cc:	48 89 05 d5 6d 01 00 	mov    %rax,0x16dd5(%rip)        # ffffffff802322a8 <RME_X64_Num_CPU>
                RME_ASSERT(RME_X64_Num_CPU<=RME_X64_CPU_NUM);
ffffffff8021b4d3:	48 8b 05 ce 6d 01 00 	mov    0x16dce(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
                break;
ffffffff8021b4da:	e9 77 01 00 00       	jmp    ffffffff8021b656 <__RME_X64_SMP_Detect+0x31a>
                IOAPIC=(struct RME_X64_ACPI_MADT_IOAPIC_Record*)Ptr;
ffffffff8021b4df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b4e3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_IOAPIC_Record))
ffffffff8021b4e7:	48 83 7d e8 0b       	cmpq   $0xb,-0x18(%rbp)
ffffffff8021b4ec:	0f 86 60 01 00 00    	jbe    ffffffff8021b652 <__RME_X64_SMP_Detect+0x316>
                RME_DBG_S("\n\rACPI: IOAPIC ");
ffffffff8021b4f2:	48 c7 c7 e4 8c 22 80 	mov    $0xffffffff80228ce4,%rdi
ffffffff8021b4f9:	e8 2f 15 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(RME_X64_Num_IOAPIC);
ffffffff8021b4fe:	48 8b 05 bb 7d 01 00 	mov    0x17dbb(%rip),%rax        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
ffffffff8021b505:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b508:	e8 26 13 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(" @ ");
ffffffff8021b50d:	48 c7 c7 f4 8c 22 80 	mov    $0xffffffff80228cf4,%rdi
ffffffff8021b514:	e8 14 15 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Hex_Print(IOAPIC->Addr);
ffffffff8021b519:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b51d:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b520:	89 c0                	mov    %eax,%eax
ffffffff8021b522:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b525:	e8 41 14 ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
                RME_DBG_S(", ID ");
ffffffff8021b52a:	48 c7 c7 f8 8c 22 80 	mov    $0xffffffff80228cf8,%rdi
ffffffff8021b531:	e8 f7 14 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(IOAPIC->ID);
ffffffff8021b536:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b53a:	0f b6 40 02          	movzbl 0x2(%rax),%eax
ffffffff8021b53e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b541:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b544:	e8 ea 12 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(", IBASE ");
ffffffff8021b549:	48 c7 c7 fe 8c 22 80 	mov    $0xffffffff80228cfe,%rdi
ffffffff8021b550:	e8 d8 14 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(IOAPIC->Interrupt_Base);
ffffffff8021b555:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b559:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff8021b55c:	89 c0                	mov    %eax,%eax
ffffffff8021b55e:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b561:	e8 cd 12 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                if(RME_X64_Num_IOAPIC!=0)
ffffffff8021b566:	48 8b 05 53 7d 01 00 	mov    0x17d53(%rip),%rax        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
ffffffff8021b56d:	48 85 c0             	test   %rax,%rax
ffffffff8021b570:	74 0e                	je     ffffffff8021b580 <__RME_X64_SMP_Detect+0x244>
                    RME_DBG_S("Warning: multiple ioapics are not supported - currently we will not initialize IOAPIC > 1\n");
ffffffff8021b572:	48 c7 c7 08 8d 22 80 	mov    $0xffffffff80228d08,%rdi
ffffffff8021b579:	e8 af 14 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8021b57e:	eb 1a                	jmp    ffffffff8021b59a <__RME_X64_SMP_Detect+0x25e>
                    RME_X64_IOAPIC_Info[RME_X64_Num_IOAPIC].IOAPIC_ID=IOAPIC->ID;
ffffffff8021b580:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b584:	0f b6 50 02          	movzbl 0x2(%rax),%edx
ffffffff8021b588:	48 8b 05 31 7d 01 00 	mov    0x17d31(%rip),%rax        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
ffffffff8021b58f:	0f b6 d2             	movzbl %dl,%edx
ffffffff8021b592:	48 89 14 c5 e0 32 23 	mov    %rdx,-0x7fdccd20(,%rax,8)
ffffffff8021b599:	80 
                RME_X64_Num_IOAPIC++;
ffffffff8021b59a:	48 8b 05 1f 7d 01 00 	mov    0x17d1f(%rip),%rax        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
ffffffff8021b5a1:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b5a5:	48 89 05 14 7d 01 00 	mov    %rax,0x17d14(%rip)        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
                RME_ASSERT(RME_X64_Num_IOAPIC<=RME_X64_IOAPIC_NUM);
ffffffff8021b5ac:	48 8b 05 0d 7d 01 00 	mov    0x17d0d(%rip),%rax        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
                break;
ffffffff8021b5b3:	e9 9e 00 00 00       	jmp    ffffffff8021b656 <__RME_X64_SMP_Detect+0x31a>
                OVERRIDE=(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record*)Ptr;
ffffffff8021b5b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b5bc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record))
ffffffff8021b5c0:	48 83 7d e8 06       	cmpq   $0x6,-0x18(%rbp)
ffffffff8021b5c5:	0f 86 8a 00 00 00    	jbe    ffffffff8021b655 <__RME_X64_SMP_Detect+0x319>
                RME_DBG_S("\n\rACPI: OVERRIDE Bus ");
ffffffff8021b5cb:	48 c7 c7 63 8d 22 80 	mov    $0xffffffff80228d63,%rdi
ffffffff8021b5d2:	e8 56 14 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(OVERRIDE->Bus);
ffffffff8021b5d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b5db:	0f b6 40 02          	movzbl 0x2(%rax),%eax
ffffffff8021b5df:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b5e2:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b5e5:	e8 49 12 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(", Source ");
ffffffff8021b5ea:	48 c7 c7 79 8d 22 80 	mov    $0xffffffff80228d79,%rdi
ffffffff8021b5f1:	e8 37 14 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Hex_Print(OVERRIDE->Source);
ffffffff8021b5f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b5fa:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b5fe:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b601:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b604:	e8 62 13 ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
                RME_DBG_S(", GSI ");
ffffffff8021b609:	48 c7 c7 83 8d 22 80 	mov    $0xffffffff80228d83,%rdi
ffffffff8021b610:	e8 18 14 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(OVERRIDE->GS_Interrupt);
ffffffff8021b615:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b619:	0f b6 40 04          	movzbl 0x4(%rax),%eax
ffffffff8021b61d:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b620:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b623:	e8 0b 12 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(", Flags ");
ffffffff8021b628:	48 c7 c7 8a 8d 22 80 	mov    $0xffffffff80228d8a,%rdi
ffffffff8021b62f:	e8 f9 13 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);
ffffffff8021b634:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b638:	0f b7 40 05          	movzwl 0x5(%rax),%eax
ffffffff8021b63c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b63f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b642:	e8 ec 11 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                break;
ffffffff8021b647:	eb 0d                	jmp    ffffffff8021b656 <__RME_X64_SMP_Detect+0x31a>
            default:break;
ffffffff8021b649:	90                   	nop
ffffffff8021b64a:	eb 0a                	jmp    ffffffff8021b656 <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b64c:	90                   	nop
ffffffff8021b64d:	eb 07                	jmp    ffffffff8021b656 <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b64f:	90                   	nop
ffffffff8021b650:	eb 04                	jmp    ffffffff8021b656 <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b652:	90                   	nop
ffffffff8021b653:	eb 01                	jmp    ffffffff8021b656 <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b655:	90                   	nop
        }
        
        Ptr+=Length;
ffffffff8021b656:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b65a:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    while(Ptr<End)
ffffffff8021b65e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b662:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8021b666:	0f 82 5a fd ff ff    	jb     ffffffff8021b3c6 <__RME_X64_SMP_Detect+0x8a>
ffffffff8021b66c:	eb 04                	jmp    ffffffff8021b672 <__RME_X64_SMP_Detect+0x336>
            break;
ffffffff8021b66e:	90                   	nop
ffffffff8021b66f:	eb 01                	jmp    ffffffff8021b672 <__RME_X64_SMP_Detect+0x336>
            break;
ffffffff8021b671:	90                   	nop
    }

    return 0;
ffffffff8021b672:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b677:	c9                   	leave
ffffffff8021b678:	c3                   	ret

ffffffff8021b679 <__RME_X64_ACPI_Debug>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
void __RME_X64_ACPI_Debug(struct RME_X64_ACPI_Desc_Hdr *Header)
{
ffffffff8021b679:	f3 0f 1e fa          	endbr64
ffffffff8021b67d:	55                   	push   %rbp
ffffffff8021b67e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b681:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021b685:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    rme_u8_t Creator[5];
    rme_ptr_t OEM_Rev;
    rme_ptr_t Creator_Rev;

    /* Copy everything into our buffer */
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff8021b689:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8021b68d:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
ffffffff8021b691:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b696:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b699:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b69c:	e8 4c 18 ff ff       	call   ffffffff8020ceed <_RME_Memcpy>
    Signature[4]='\0';
ffffffff8021b6a1:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff8021b6a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b6a9:	48 8d 48 0a          	lea    0xa(%rax),%rcx
ffffffff8021b6ad:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
ffffffff8021b6b1:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff8021b6b6:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b6b9:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b6bc:	e8 2c 18 ff ff       	call   ffffffff8020ceed <_RME_Memcpy>
    ID[6]='\0';
ffffffff8021b6c1:	c6 45 ea 00          	movb   $0x0,-0x16(%rbp)
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff8021b6c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b6c9:	48 8d 48 10          	lea    0x10(%rax),%rcx
ffffffff8021b6cd:	48 8d 45 db          	lea    -0x25(%rbp),%rax
ffffffff8021b6d1:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8021b6d6:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b6d9:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b6dc:	e8 0c 18 ff ff       	call   ffffffff8020ceed <_RME_Memcpy>
    Table_ID[8]='\0';
ffffffff8021b6e1:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff8021b6e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b6e9:	48 8d 48 1c          	lea    0x1c(%rax),%rcx
ffffffff8021b6ed:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
ffffffff8021b6f1:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b6f6:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b6f9:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b6fc:	e8 ec 17 ff ff       	call   ffffffff8020ceed <_RME_Memcpy>
    Creator[4]='\0';
ffffffff8021b701:	c6 45 da 00          	movb   $0x0,-0x26(%rbp)

    OEM_Rev=Header->OEM_Revision;
ffffffff8021b705:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b709:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff8021b70c:	89 c0                	mov    %eax,%eax
ffffffff8021b70e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Creator_Rev=Header->Creator_Revision;
ffffffff8021b712:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b716:	8b 40 20             	mov    0x20(%rax),%eax
ffffffff8021b719:	89 c0                	mov    %eax,%eax
ffffffff8021b71b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* And print these entries */
    RME_DBG_S("\n\rACPI:");
ffffffff8021b71f:	48 c7 c7 93 8d 22 80 	mov    $0xffffffff80228d93,%rdi
ffffffff8021b726:	e8 02 13 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(Signature);
ffffffff8021b72b:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
ffffffff8021b72f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b732:	e8 f6 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b737:	48 c7 c7 9b 8d 22 80 	mov    $0xffffffff80228d9b,%rdi
ffffffff8021b73e:	e8 ea 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(ID);
ffffffff8021b743:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
ffffffff8021b747:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b74a:	e8 de 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b74f:	48 c7 c7 9b 8d 22 80 	mov    $0xffffffff80228d9b,%rdi
ffffffff8021b756:	e8 d2 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(Table_ID);
ffffffff8021b75b:	48 8d 45 db          	lea    -0x25(%rbp),%rax
ffffffff8021b75f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b762:	e8 c6 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b767:	48 c7 c7 9b 8d 22 80 	mov    $0xffffffff80228d9b,%rdi
ffffffff8021b76e:	e8 ba 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(OEM_Rev);
ffffffff8021b773:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b777:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b77a:	e8 ae 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b77f:	48 c7 c7 9b 8d 22 80 	mov    $0xffffffff80228d9b,%rdi
ffffffff8021b786:	e8 a2 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(Creator);
ffffffff8021b78b:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
ffffffff8021b78f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b792:	e8 96 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b797:	48 c7 c7 9b 8d 22 80 	mov    $0xffffffff80228d9b,%rdi
ffffffff8021b79e:	e8 8a 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(Creator_Rev);
ffffffff8021b7a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b7a7:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b7aa:	e8 7e 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(".");
ffffffff8021b7af:	48 c7 c7 9e 8d 22 80 	mov    $0xffffffff80228d9e,%rdi
ffffffff8021b7b6:	e8 72 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
}
ffffffff8021b7bb:	90                   	nop
ffffffff8021b7bc:	c9                   	leave
ffffffff8021b7bd:	c3                   	ret

ffffffff8021b7be <__RME_X64_ACPI_Init>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
rme_ret_t __RME_X64_ACPI_Init(void)
{
ffffffff8021b7be:	f3 0f 1e fa          	endbr64
ffffffff8021b7c2:	55                   	push   %rbp
ffffffff8021b7c3:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b7c6:	48 83 ec 30          	sub    $0x30,%rsp
    rme_cnt_t Count;
    rme_cnt_t Table_Num;
    struct RME_X64_ACPI_RDSP_Desc* RDSP=RME_NULL;
ffffffff8021b7ca:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021b7d1:	00 
    struct RME_X64_ACPI_RSDT_Hdr* RSDT=RME_NULL;
ffffffff8021b7d2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8021b7d9:	00 
    struct RME_X64_ACPI_MADT_Hdr* MADT=RME_NULL;
ffffffff8021b7da:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021b7e1:	00 
    struct RME_X64_ACPI_Desc_Hdr* Header=RME_NULL;
ffffffff8021b7e2:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8021b7e9:	00 

    /* Try to find RDSP */
    RDSP=__RME_X64_RDSP_Find();
ffffffff8021b7ea:	e8 ee fa ff ff       	call   ffffffff8021b2dd <__RME_X64_RDSP_Find>
ffffffff8021b7ef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    RME_DBG_S("\r\nRDSP address: ");
ffffffff8021b7f3:	48 c7 c7 a0 8d 22 80 	mov    $0xffffffff80228da0,%rdi
ffffffff8021b7fa:	e8 2e 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U((rme_ptr_t)RDSP);
ffffffff8021b7ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b803:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b806:	e8 28 10 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
    /* Find the RSDT */
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff8021b80b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b80f:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff8021b812:	89 c2                	mov    %eax,%edx
ffffffff8021b814:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b81b:	80 ff ff 
ffffffff8021b81e:	48 01 d0             	add    %rdx,%rax
ffffffff8021b821:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_DBG_S("\r\nRSDT address: ");
ffffffff8021b825:	48 c7 c7 b1 8d 22 80 	mov    $0xffffffff80228db1,%rdi
ffffffff8021b82c:	e8 fc 11 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U((rme_ptr_t)RSDT);
ffffffff8021b831:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b835:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b838:	e8 f6 0f ff ff       	call   ffffffff8020c833 <RME_Int_Print>
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;
ffffffff8021b83d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b841:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b844:	89 c0                	mov    %eax,%eax
ffffffff8021b846:	48 83 e8 24          	sub    $0x24,%rax
ffffffff8021b84a:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff8021b84e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    for(Count=0;Count<Table_Num;Count++)
ffffffff8021b852:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021b859:	00 
ffffffff8021b85a:	eb 59                	jmp    ffffffff8021b8b5 <__RME_X64_ACPI_Init+0xf7>
    {
        /* See what did we find */
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff8021b85c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b860:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b864:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8021b868:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
ffffffff8021b86c:	89 c2                	mov    %eax,%edx
ffffffff8021b86e:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b875:	80 ff ff 
ffffffff8021b878:	48 01 d0             	add    %rdx,%rax
ffffffff8021b87b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        __RME_X64_ACPI_Debug(Header);
ffffffff8021b87f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b883:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b886:	e8 ee fd ff ff       	call   ffffffff8021b679 <__RME_X64_ACPI_Debug>
        /* See if this is the MADT */
        if(_RME_Memcmp(Header->Signature, "APIC", 4)==0)
ffffffff8021b88b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b88f:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b894:	48 c7 c6 c2 8d 22 80 	mov    $0xffffffff80228dc2,%rsi
ffffffff8021b89b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b89e:	e8 b9 15 ff ff       	call   ffffffff8020ce5c <_RME_Memcmp>
ffffffff8021b8a3:	48 85 c0             	test   %rax,%rax
ffffffff8021b8a6:	75 08                	jne    ffffffff8021b8b0 <__RME_X64_ACPI_Init+0xf2>
            MADT=(struct RME_X64_ACPI_MADT_Hdr*)Header;
ffffffff8021b8a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b8ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0;Count<Table_Num;Count++)
ffffffff8021b8b0:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021b8b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b8b9:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021b8bd:	7c 9d                	jl     ffffffff8021b85c <__RME_X64_ACPI_Init+0x9e>
    }

    return __RME_X64_SMP_Detect(MADT);
ffffffff8021b8bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b8c3:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b8c6:	e8 71 fa ff ff       	call   ffffffff8021b33c <__RME_X64_SMP_Detect>
}
ffffffff8021b8cb:	c9                   	leave
ffffffff8021b8cc:	c3                   	ret

ffffffff8021b8cd <__RME_X64_Feature_Get>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_Feature_Get(void)
{
ffffffff8021b8cd:	f3 0f 1e fa          	endbr64
ffffffff8021b8d1:	55                   	push   %rbp
ffffffff8021b8d2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b8d5:	48 83 ec 10          	sub    $0x10,%rsp
    rme_cnt_t Count;

    /* What's the maximum feature? */
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff8021b8d9:	48 c7 c1 68 33 23 80 	mov    $0xffffffff80233368,%rcx
ffffffff8021b8e0:	48 c7 c2 60 33 23 80 	mov    $0xffffffff80233360,%rdx
ffffffff8021b8e7:	48 c7 c6 58 33 23 80 	mov    $0xffffffff80233358,%rsi
ffffffff8021b8ee:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff8021b8f3:	e8 51 ff fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021b8f8:	48 89 05 41 7a 01 00 	mov    %rax,0x17a41(%rip)        # ffffffff80233340 <RME_X64_Feature>
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][1]),
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][2]),
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][3]));
    RME_X64_Feature.Func[0][0]=RME_X64_Feature.Max_Func;
ffffffff8021b8ff:	48 8b 05 3a 7a 01 00 	mov    0x17a3a(%rip),%rax        # ffffffff80233340 <RME_X64_Feature>
ffffffff8021b906:	48 89 05 43 7a 01 00 	mov    %rax,0x17a43(%rip)        # ffffffff80233350 <RME_X64_Feature+0x10>

    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff8021b90d:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8021b914:	00 
ffffffff8021b915:	eb 5c                	jmp    ffffffff8021b973 <__RME_X64_Feature_Get+0xa6>
    {
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][1]),
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][2]),
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][3]));
ffffffff8021b917:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b91b:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b91f:	48 83 c0 28          	add    $0x28,%rax
ffffffff8021b923:	48 8d 88 40 33 23 80 	lea    -0x7fdcccc0(%rax),%rcx
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][2]),
ffffffff8021b92a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b92e:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b932:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b936:	48 8d 90 40 33 23 80 	lea    -0x7fdcccc0(%rax),%rdx
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][1]),
ffffffff8021b93d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b941:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b945:	48 83 c0 18          	add    $0x18,%rax
ffffffff8021b949:	48 8d b0 40 33 23 80 	lea    -0x7fdcccc0(%rax),%rsi
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff8021b950:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b954:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b957:	e8 ed fe fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021b95c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b960:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021b964:	48 81 c2 50 33 23 80 	add    $0xffffffff80233350,%rdx
ffffffff8021b96b:	48 89 02             	mov    %rax,(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff8021b96e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021b973:	48 8b 15 c6 79 01 00 	mov    0x179c6(%rip),%rdx        # ffffffff80233340 <RME_X64_Feature>
ffffffff8021b97a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b97e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b981:	73 94                	jae    ffffffff8021b917 <__RME_X64_Feature_Get+0x4a>
    }

    /* What's the maximum extended feature? */
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff8021b983:	48 c7 c1 68 35 23 80 	mov    $0xffffffff80233568,%rcx
ffffffff8021b98a:	48 c7 c2 60 35 23 80 	mov    $0xffffffff80233560,%rdx
ffffffff8021b991:	48 c7 c6 58 35 23 80 	mov    $0xffffffff80233558,%rsi
ffffffff8021b998:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff8021b99d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b9a0:	e8 a4 fe fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021b9a5:	48 89 05 9c 79 01 00 	mov    %rax,0x1799c(%rip)        # ffffffff80233348 <RME_X64_Feature+0x8>
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][1]),
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][2]),
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][3]));
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;
ffffffff8021b9ac:	48 8b 05 95 79 01 00 	mov    0x17995(%rip),%rax        # ffffffff80233348 <RME_X64_Feature+0x8>
ffffffff8021b9b3:	48 89 05 96 7b 01 00 	mov    %rax,0x17b96(%rip)        # ffffffff80233550 <RME_X64_Feature+0x210>


    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff8021b9ba:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8021b9c1:	00 
ffffffff8021b9c2:	eb 67                	jmp    ffffffff8021ba2b <__RME_X64_Feature_Get+0x15e>
    {
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][1]),
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][2]),
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][3]));
ffffffff8021b9c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b9c8:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b9cc:	48 05 28 02 00 00    	add    $0x228,%rax
ffffffff8021b9d2:	48 8d 88 40 33 23 80 	lea    -0x7fdcccc0(%rax),%rcx
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][2]),
ffffffff8021b9d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b9dd:	48 83 c0 11          	add    $0x11,%rax
ffffffff8021b9e1:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b9e5:	48 8d 90 40 33 23 80 	lea    -0x7fdcccc0(%rax),%rdx
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][1]),
ffffffff8021b9ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b9f0:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b9f4:	48 05 18 02 00 00    	add    $0x218,%rax
ffffffff8021b9fa:	48 05 40 33 23 80    	add    $0xffffffff80233340,%rax
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff8021ba00:	be 00 00 00 80       	mov    $0x80000000,%esi
ffffffff8021ba05:	48 0b 75 f8          	or     -0x8(%rbp),%rsi
ffffffff8021ba09:	48 89 f7             	mov    %rsi,%rdi
ffffffff8021ba0c:	48 89 c6             	mov    %rax,%rsi
ffffffff8021ba0f:	e8 35 fe fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021ba14:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021ba18:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021ba1c:	48 81 c2 50 35 23 80 	add    $0xffffffff80233550,%rdx
ffffffff8021ba23:	48 89 02             	mov    %rax,(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff8021ba26:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021ba2b:	48 8b 05 16 79 01 00 	mov    0x17916(%rip),%rax        # ffffffff80233348 <RME_X64_Feature+0x8>
ffffffff8021ba32:	48 8d 90 00 00 00 80 	lea    -0x80000000(%rax),%rdx
ffffffff8021ba39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba3d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ba40:	73 82                	jae    ffffffff8021b9c4 <__RME_X64_Feature_Get+0xf7>
    }

    /* TODO: Check these flags. If not satisfied, we hang immediately. */
}
ffffffff8021ba42:	90                   	nop
ffffffff8021ba43:	90                   	nop
ffffffff8021ba44:	c9                   	leave
ffffffff8021ba45:	c3                   	ret

ffffffff8021ba46 <__RME_X64_Mem_Init>:
volatile struct RME_List RME_X64_Phys_Mem;
/* The BIOS wouldn't really report more than 1024 blocks of memory */
struct __RME_X64_Mem RME_X64_Mem[1024];

void __RME_X64_Mem_Init(rme_ptr_t MMap_Addr, rme_ptr_t MMap_Length)
{
ffffffff8021ba46:	f3 0f 1e fa          	endbr64
ffffffff8021ba4a:	55                   	push   %rbp
ffffffff8021ba4b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021ba4e:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021ba52:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021ba56:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    struct multiboot_mmap_entry* MMap;
    volatile struct RME_List* Trav_Ptr;
    rme_ptr_t MMap_Cnt;
    rme_ptr_t Info_Cnt;
    MMap_Cnt=0;
ffffffff8021ba5a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021ba61:	00 
    Info_Cnt=0;
ffffffff8021ba62:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021ba69:	00 

    __RME_List_Crt(&RME_X64_Phys_Mem);
ffffffff8021ba6a:	48 c7 c7 00 a0 22 80 	mov    $0xffffffff8022a000,%rdi
ffffffff8021ba71:	e8 db b5 00 00       	call   ffffffff80227051 <__RME_List_Crt>

    while(MMap_Cnt<MMap_Length)
ffffffff8021ba76:	e9 1f 01 00 00       	jmp    ffffffff8021bb9a <__RME_X64_Mem_Init+0x154>
    {
        MMap=(struct multiboot_mmap_entry*)(MMap_Addr+MMap_Cnt);
ffffffff8021ba7b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021ba7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ba83:	48 01 d0             	add    %rdx,%rax
ffffffff8021ba86:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        MMap_Cnt+=MMap->size+4;
ffffffff8021ba8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021ba8e:	8b 00                	mov    (%rax),%eax
ffffffff8021ba90:	83 c0 04             	add    $0x4,%eax
ffffffff8021ba93:	89 c0                	mov    %eax,%eax
ffffffff8021ba95:	48 01 45 f0          	add    %rax,-0x10(%rbp)

        if(MMap->type!=1)
ffffffff8021ba99:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021ba9d:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021baa0:	83 f8 01             	cmp    $0x1,%eax
ffffffff8021baa3:	0f 85 f0 00 00 00    	jne    ffffffff8021bb99 <__RME_X64_Mem_Init+0x153>
            continue;

        Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021baa9:	48 8b 05 50 e5 00 00 	mov    0xe550(%rip),%rax        # ffffffff8022a000 <RME_X64_Phys_Mem>
ffffffff8021bab0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bab4:	eb 20                	jmp    ffffffff8021bad6 <__RME_X64_Mem_Init+0x90>
        {
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
ffffffff8021bab6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021baba:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021babe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021bac2:	48 8b 52 04          	mov    0x4(%rdx),%rdx
ffffffff8021bac6:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021bac9:	72 17                	jb     ffffffff8021bae2 <__RME_X64_Mem_Init+0x9c>
                break;
            Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bacb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bacf:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bad2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bad6:	48 81 7d f8 00 a0 22 	cmpq   $0xffffffff8022a000,-0x8(%rbp)
ffffffff8021badd:	80 
ffffffff8021bade:	75 d6                	jne    ffffffff8021bab6 <__RME_X64_Mem_Init+0x70>
ffffffff8021bae0:	eb 01                	jmp    ffffffff8021bae3 <__RME_X64_Mem_Init+0x9d>
                break;
ffffffff8021bae2:	90                   	nop
        }
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff8021bae3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bae7:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021baeb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021baef:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021baf3:	48 81 c2 30 a0 22 80 	add    $0xffffffff8022a030,%rdx
ffffffff8021bafa:	48 89 02             	mov    %rax,(%rdx)
        RME_X64_Mem[Info_Cnt].Length=MMap->len;
ffffffff8021bafd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bb01:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021bb05:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021bb09:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bb0d:	48 81 c2 38 a0 22 80 	add    $0xffffffff8022a038,%rdx
ffffffff8021bb14:	48 89 02             	mov    %rax,(%rdx)
        __RME_List_Ins(&(RME_X64_Mem[Info_Cnt].Head),Trav_Ptr->Prev,Trav_Ptr);
ffffffff8021bb17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb1b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021bb1f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021bb23:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bb27:	48 8d 8a 20 a0 22 80 	lea    -0x7fdd5fe0(%rdx),%rcx
ffffffff8021bb2e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021bb32:	48 89 c6             	mov    %rax,%rsi
ffffffff8021bb35:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021bb38:	e8 3e b5 00 00       	call   ffffffff8022707b <__RME_List_Ins>

        /* Just print them then */
        RME_DBG_S("\n\rPhysical memory: 0x");
ffffffff8021bb3d:	48 c7 c7 c7 8d 22 80 	mov    $0xffffffff80228dc7,%rdi
ffffffff8021bb44:	e8 e4 0e ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_Hex_Print(MMap->addr);
ffffffff8021bb49:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bb4d:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021bb51:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bb54:	e8 12 0e ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
        RME_DBG_S(", 0x");
ffffffff8021bb59:	48 c7 c7 dd 8d 22 80 	mov    $0xffffffff80228ddd,%rdi
ffffffff8021bb60:	e8 c8 0e ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_Hex_Print(MMap->len);
ffffffff8021bb65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bb69:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021bb6d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bb70:	e8 f6 0d ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
        RME_DBG_S(", ");
ffffffff8021bb75:	48 c7 c7 9b 8d 22 80 	mov    $0xffffffff80228d9b,%rdi
ffffffff8021bb7c:	e8 ac 0e ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_Hex_Print(MMap->type);
ffffffff8021bb81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bb85:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021bb88:	89 c0                	mov    %eax,%eax
ffffffff8021bb8a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bb8d:	e8 d9 0d ff ff       	call   ffffffff8020c96b <RME_Hex_Print>

        Info_Cnt++;
ffffffff8021bb92:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff8021bb97:	eb 01                	jmp    ffffffff8021bb9a <__RME_X64_Mem_Init+0x154>
            continue;
ffffffff8021bb99:	90                   	nop
    while(MMap_Cnt<MMap_Length)
ffffffff8021bb9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bb9e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021bba2:	0f 82 d3 fe ff ff    	jb     ffffffff8021ba7b <__RME_X64_Mem_Init+0x35>
    }

    /* Check if any memory segment overlaps. If yes, merge them into one,
     * until there is no overlapping segments */
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021bba8:	48 8b 05 51 e4 00 00 	mov    0xe451(%rip),%rax        # ffffffff8022a000 <RME_X64_Phys_Mem>
ffffffff8021bbaf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021bbb3:	eb 75                	jmp    ffffffff8021bc2a <__RME_X64_Mem_Init+0x1e4>
    {
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bbb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bbb9:	48 8b 50 10          	mov    0x10(%rax),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length)>
ffffffff8021bbbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bbc1:	48 8b 40 18          	mov    0x18(%rax),%rax
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bbc5:	48 01 c2             	add    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr)
ffffffff8021bbc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bbcc:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bbcf:	48 8b 40 10          	mov    0x10(%rax),%rax
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bbd3:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021bbd6:	73 47                	jae    ffffffff8021bc1f <__RME_X64_Mem_Init+0x1d9>
        {
            /* Merge these two blocks */
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length=
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff8021bbd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bbdc:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bbdf:	48 8b 50 10          	mov    0x10(%rax),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021bbe3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bbe7:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bbea:	48 8b 40 18          	mov    0x18(%rax),%rax
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff8021bbee:	48 01 c2             	add    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr;
ffffffff8021bbf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bbf5:	48 8b 40 10          	mov    0x10(%rax),%rax
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021bbf9:	48 29 c2             	sub    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length=
ffffffff8021bbfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc00:	48 89 50 18          	mov    %rdx,0x18(%rax)
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff8021bc04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc08:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bc0b:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021bc0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc12:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021bc15:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bc18:	e8 a7 b4 00 00       	call   ffffffff802270c4 <__RME_List_Del>
            continue;
ffffffff8021bc1d:	eb 0b                	jmp    ffffffff8021bc2a <__RME_X64_Mem_Init+0x1e4>
        }
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bc1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc23:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bc26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021bc2a:	48 81 7d f8 00 a0 22 	cmpq   $0xffffffff8022a000,-0x8(%rbp)
ffffffff8021bc31:	80 
ffffffff8021bc32:	74 13                	je     ffffffff8021bc47 <__RME_X64_Mem_Init+0x201>
ffffffff8021bc34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc38:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bc3b:	48 3d 00 a0 22 80    	cmp    $0xffffffff8022a000,%rax
ffffffff8021bc41:	0f 85 6e ff ff ff    	jne    ffffffff8021bbb5 <__RME_X64_Mem_Init+0x16f>
    }

    /* Calculate total memory */
    MMap_Cnt=0;
ffffffff8021bc47:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021bc4e:	00 
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021bc4f:	48 8b 05 aa e3 00 00 	mov    0xe3aa(%rip),%rax        # ffffffff8022a000 <RME_X64_Phys_Mem>
ffffffff8021bc56:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bc5a:	eb 17                	jmp    ffffffff8021bc73 <__RME_X64_Mem_Init+0x22d>
    {
        MMap_Cnt+=((struct __RME_X64_Mem*)(Trav_Ptr))->Length;
ffffffff8021bc5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc60:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021bc64:	48 01 45 f0          	add    %rax,-0x10(%rbp)
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bc68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc6c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bc6f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bc73:	48 81 7d f8 00 a0 22 	cmpq   $0xffffffff8022a000,-0x8(%rbp)
ffffffff8021bc7a:	80 
ffffffff8021bc7b:	75 df                	jne    ffffffff8021bc5c <__RME_X64_Mem_Init+0x216>
    }
    RME_DBG_S("\n\rTotal physical memory: 0x");
ffffffff8021bc7d:	48 c7 c7 e2 8d 22 80 	mov    $0xffffffff80228de2,%rdi
ffffffff8021bc84:	e8 a4 0d ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_Hex_Print(MMap_Cnt);
ffffffff8021bc89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bc8d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bc90:	e8 d6 0c ff ff       	call   ffffffff8020c96b <RME_Hex_Print>

    /* At least 256MB memory required on x64 architecture */
    RME_ASSERT(MMap_Cnt>=RME_POW2(RME_PGT_SIZE_256M));

    /* Kernel virtual memory layout */
    RME_X64_Layout.Kot_Start=(rme_ptr_t)RME_KOT_VA_BASE;
ffffffff8021bc95:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021bc9c:	80 ff ff 
ffffffff8021bc9f:	48 89 05 9a 63 01 00 	mov    %rax,0x1639a(%rip)        # ffffffff80232040 <RME_X64_Layout>
    /* +1G in cases where we have > 3GB memory for covering the memory hole */
    Info_Cnt=(MMap_Cnt>3*RME_POW2(RME_PGT_SIZE_1G))?(MMap_Cnt+RME_POW2(RME_PGT_SIZE_1G)):MMap_Cnt;
ffffffff8021bca6:	b8 00 00 00 c0       	mov    $0xc0000000,%eax
ffffffff8021bcab:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8021bcaf:	73 0c                	jae    ffffffff8021bcbd <__RME_X64_Mem_Init+0x277>
ffffffff8021bcb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bcb5:	48 05 00 00 00 40    	add    $0x40000000,%rax
ffffffff8021bcbb:	eb 04                	jmp    ffffffff8021bcc1 <__RME_X64_Mem_Init+0x27b>
ffffffff8021bcbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bcc1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    RME_X64_Layout.Kot_Size=((Info_Cnt>>RME_KOM_SLOT_ORDER)>>RME_WORD_ORDER)+1;
ffffffff8021bcc5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021bcc9:	48 c1 e8 0a          	shr    $0xa,%rax
ffffffff8021bccd:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021bcd1:	48 89 05 70 63 01 00 	mov    %rax,0x16370(%rip)        # ffffffff80232048 <RME_X64_Layout+0x8>

    /* Calculate the per-CPU data structure size - each CPU have two 4k pages */
    RME_X64_Layout.PerCPU_Start=RME_ROUND_UP(RME_X64_Layout.Kot_Start+RME_X64_Layout.Kot_Size,RME_PGT_SIZE_4K);
ffffffff8021bcd8:	48 8b 15 61 63 01 00 	mov    0x16361(%rip),%rdx        # ffffffff80232040 <RME_X64_Layout>
ffffffff8021bcdf:	48 8b 05 62 63 01 00 	mov    0x16362(%rip),%rax        # ffffffff80232048 <RME_X64_Layout+0x8>
ffffffff8021bce6:	48 01 d0             	add    %rdx,%rax
ffffffff8021bce9:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff8021bcef:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff8021bcf5:	48 89 05 54 63 01 00 	mov    %rax,0x16354(%rip)        # ffffffff80232050 <RME_X64_Layout+0x10>
    RME_X64_Layout.PerCPU_Size=2*RME_POW2(RME_PGT_SIZE_4K)*RME_X64_Num_CPU;
ffffffff8021bcfc:	48 8b 05 a5 65 01 00 	mov    0x165a5(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021bd03:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff8021bd07:	48 89 05 4a 63 01 00 	mov    %rax,0x1634a(%rip)        # ffffffff80232058 <RME_X64_Layout+0x18>

    /* Now decide the size of the stack */
    RME_X64_Layout.Stack_Size=RME_X64_Num_CPU<<RME_X64_KSTACK_ORDER;
ffffffff8021bd0e:	48 8b 05 93 65 01 00 	mov    0x16593(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021bd15:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff8021bd19:	48 89 05 80 65 01 00 	mov    %rax,0x16580(%rip)        # ffffffff802322a0 <RME_X64_Layout+0x260>
}
ffffffff8021bd20:	90                   	nop
ffffffff8021bd21:	c9                   	leave
ffffffff8021bd22:	c3                   	ret

ffffffff8021bd23 <__RME_X64_CPU_Local_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_CPU_Local_Init(void)
{
ffffffff8021bd23:	f3 0f 1e fa          	endbr64
ffffffff8021bd27:	55                   	push   %rbp
ffffffff8021bd28:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021bd2b:	48 83 ec 40          	sub    $0x40,%rsp
    struct RME_CPU_Local* CPU_Local;
    rme_ptr_t* GDT_Table;
    rme_ptr_t TSS_Table;
    rme_cnt_t Count;

    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff8021bd2f:	48 8b 05 1a 63 01 00 	mov    0x1631a(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff8021bd36:	48 8b 15 73 65 01 00 	mov    0x16573(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff8021bd3d:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021bd41:	48 01 d0             	add    %rdx,%rax
ffffffff8021bd44:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
ffffffff8021bd48:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021bd4f:	00 
ffffffff8021bd50:	eb 1b                	jmp    ffffffff8021bd6d <__RME_X64_CPU_Local_Init+0x4a>
        IDT_Table[Count].Type_Attr=0;
ffffffff8021bd52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd56:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021bd5a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bd5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd61:	48 01 d0             	add    %rdx,%rax
ffffffff8021bd64:	c6 40 05 00          	movb   $0x0,0x5(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8021bd68:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021bd6d:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff8021bd74:	00 
ffffffff8021bd75:	7e db                	jle    ffffffff8021bd52 <__RME_X64_CPU_Local_Init+0x2f>

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8021bd77:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021bd7e:	89 c2                	mov    %eax,%edx
ffffffff8021bd80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd84:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bd87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd8b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bd91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd95:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bd99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd9d:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bda1:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021bda8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bdac:	89 c2                	mov    %eax,%edx
ffffffff8021bdae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bdb2:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bdb6:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021bdbd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bdc1:	89 c2                	mov    %eax,%edx
ffffffff8021bdc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bdc7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bdca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bdce:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8021bdd5:	48 c7 c2 df b8 20 80 	mov    $0xffffffff8020b8df,%rdx
ffffffff8021bddc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bde0:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bde4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bde7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bdeb:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bdef:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bdf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bdf9:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bdfd:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021be01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be05:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021be09:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021be0d:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
ffffffff8021be14:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021be18:	48 89 c2             	mov    %rax,%rdx
ffffffff8021be1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be1f:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021be23:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021be27:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
ffffffff8021be2e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021be32:	48 89 c2             	mov    %rax,%rdx
ffffffff8021be35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be39:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021be3d:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021be40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be44:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021be48:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8021be4f:	48 c7 c2 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rdx
ffffffff8021be56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be5a:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021be5e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021be61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be65:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021be69:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021be6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be73:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021be77:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021be7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be7f:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021be83:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021be87:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
ffffffff8021be8e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021be92:	48 89 c2             	mov    %rax,%rdx
ffffffff8021be95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be99:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021be9d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bea1:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
ffffffff8021bea8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021beac:	48 89 c2             	mov    %rax,%rdx
ffffffff8021beaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021beb3:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021beb7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021beba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bebe:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bec2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8021bec9:	48 c7 c2 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rdx
ffffffff8021bed0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bed4:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bed8:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bedb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bedf:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bee3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bee9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021beed:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bef1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bef5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bef9:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021befd:	c6 40 05 ee          	movb   $0xee,0x5(%rax)
ffffffff8021bf01:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
ffffffff8021bf08:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bf0c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bf0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf13:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bf17:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bf1b:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
ffffffff8021bf22:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bf26:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bf29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf2d:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bf31:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bf34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf38:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bf3c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8021bf43:	48 c7 c2 03 b9 20 80 	mov    $0xffffffff8020b903,%rdx
ffffffff8021bf4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf4e:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bf52:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bf55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf59:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bf5d:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bf63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf67:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bf6b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bf6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf73:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bf77:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bf7b:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
ffffffff8021bf82:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bf86:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bf89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf8d:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bf91:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bf95:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
ffffffff8021bf9c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bfa0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bfa3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfa7:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bfab:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bfae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfb2:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bfb6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8021bfbd:	48 c7 c2 0c b9 20 80 	mov    $0xffffffff8020b90c,%rdx
ffffffff8021bfc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfc8:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021bfcc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bfcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfd3:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021bfd7:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bfdd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfe1:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021bfe5:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bfe9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfed:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021bff1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bff5:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
ffffffff8021bffc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c000:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c003:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c007:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c00b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c00f:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
ffffffff8021c016:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c01a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c01d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c021:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c025:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c028:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c02c:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c030:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8021c037:	48 c7 c2 15 b9 20 80 	mov    $0xffffffff8020b915,%rdx
ffffffff8021c03e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c042:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c046:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c049:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c04d:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c051:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c057:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c05b:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c05f:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c063:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c067:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c06b:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c06f:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
ffffffff8021c076:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c07a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c07d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c081:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c085:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c089:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
ffffffff8021c090:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c094:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c097:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c09b:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c09f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c0a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0a6:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c0aa:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff8021c0b1:	48 c7 c2 1e b9 20 80 	mov    $0xffffffff8020b91e,%rdx
ffffffff8021c0b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0bc:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c0c0:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c0c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0c7:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c0cb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c0d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0d5:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c0d9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c0dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0e1:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c0e5:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c0e9:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff8021c0f0:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c0f4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c0f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0fb:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c0ff:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c103:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff8021c10a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c10e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c111:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c115:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c119:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c11c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c120:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c124:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff8021c12b:	48 c7 c2 27 b9 20 80 	mov    $0xffffffff8020b927,%rdx
ffffffff8021c132:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c136:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c13a:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c13d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c141:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c145:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c14b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c14f:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c153:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c157:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c15b:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c15f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c163:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
ffffffff8021c16a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c16e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c171:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c175:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c179:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c17d:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
ffffffff8021c184:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c188:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c18b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c18f:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c193:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c196:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c19a:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c19e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8021c1a5:	48 c7 c2 2e b9 20 80 	mov    $0xffffffff8020b92e,%rdx
ffffffff8021c1ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1b0:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c1b6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c1b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1bd:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c1c3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c1c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1cd:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c1d3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c1d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1db:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c1e1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c1e5:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
ffffffff8021c1ec:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c1f0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c1f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1f7:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c1fd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c201:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
ffffffff8021c208:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c20c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c20f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c213:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c219:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c21c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c220:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c226:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8021c22d:	48 c7 c2 37 b9 20 80 	mov    $0xffffffff8020b937,%rdx
ffffffff8021c234:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c238:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c23e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c241:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c245:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c24b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c251:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c255:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c25b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c25f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c263:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c269:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c26d:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
ffffffff8021c274:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c278:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c27b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c27f:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c285:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c289:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
ffffffff8021c290:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c294:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c297:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c29b:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c2a1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c2a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2a8:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c2ae:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021c2b5:	48 c7 c2 3e b9 20 80 	mov    $0xffffffff8020b93e,%rdx
ffffffff8021c2bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2c0:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c2c6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c2c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2cd:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c2d3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c2d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2dd:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c2e3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c2e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2eb:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c2f1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c2f5:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
ffffffff8021c2fc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c300:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c303:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c307:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c30d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c311:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
ffffffff8021c318:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c31c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c31f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c323:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c329:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c32c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c330:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c336:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8021c33d:	48 c7 c2 45 b9 20 80 	mov    $0xffffffff8020b945,%rdx
ffffffff8021c344:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c348:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c34e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c351:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c355:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c35b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c361:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c365:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c36b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c36f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c373:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c379:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c37d:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
ffffffff8021c384:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c388:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c38b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c38f:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c395:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c399:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
ffffffff8021c3a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c3a4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c3a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3ab:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c3b1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c3b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3b8:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c3be:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8021c3c5:	48 c7 c2 4c b9 20 80 	mov    $0xffffffff8020b94c,%rdx
ffffffff8021c3cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3d0:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c3d6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c3d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3dd:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c3e3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c3e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3ed:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c3f3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c3f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3fb:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c401:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c405:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
ffffffff8021c40c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c410:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c413:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c417:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c41d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c421:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
ffffffff8021c428:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c42c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c42f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c433:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c439:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c43c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c440:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c446:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8021c44d:	48 c7 c2 53 b9 20 80 	mov    $0xffffffff8020b953,%rdx
ffffffff8021c454:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c458:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c45e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c461:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c465:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c46b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c471:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c475:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c47b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c47f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c483:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c489:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c48d:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
ffffffff8021c494:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c498:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c49b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c49f:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c4a5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c4a9:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
ffffffff8021c4b0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c4b4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c4b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4bb:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c4c1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c4c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4c8:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c4ce:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8021c4d5:	48 c7 c2 5a b9 20 80 	mov    $0xffffffff8020b95a,%rdx
ffffffff8021c4dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4e0:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c4e6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c4e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4ed:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c4f3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c4f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4fd:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c503:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c507:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c50b:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c511:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c515:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
ffffffff8021c51c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c520:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c523:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c527:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c52d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c531:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
ffffffff8021c538:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c53c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c53f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c543:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c549:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c54c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c550:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c556:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8021c55d:	48 c7 c2 63 b9 20 80 	mov    $0xffffffff8020b963,%rdx
ffffffff8021c564:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c568:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c56e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c571:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c575:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c57b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c581:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c585:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c58b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c58f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c593:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c599:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c59d:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
ffffffff8021c5a4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c5a8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c5ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5af:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c5b5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c5b9:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
ffffffff8021c5c0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c5c4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c5c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5cb:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c5d1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c5d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5d8:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c5de:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8021c5e5:	48 c7 c2 6a b9 20 80 	mov    $0xffffffff8020b96a,%rdx
ffffffff8021c5ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5f0:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c5f6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c5f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5fd:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c603:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c609:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c60d:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c613:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c617:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c61b:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c621:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c625:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
ffffffff8021c62c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c630:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c633:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c637:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c63d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c641:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
ffffffff8021c648:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c64c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c64f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c653:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c659:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c65c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c660:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c666:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8021c66d:	48 c7 c2 73 b9 20 80 	mov    $0xffffffff8020b973,%rdx
ffffffff8021c674:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c678:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c67e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c681:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c685:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c68b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c691:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c695:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c69b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c69f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6a3:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c6a9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c6ad:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
ffffffff8021c6b4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c6b8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c6bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6bf:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c6c5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c6c9:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
ffffffff8021c6d0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c6d4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c6d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6db:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c6e1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c6e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6e8:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c6ee:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff8021c6f5:	48 c7 c2 7c b9 20 80 	mov    $0xffffffff8020b97c,%rdx
ffffffff8021c6fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c700:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c706:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c709:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c70d:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c713:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c719:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c71d:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c723:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c727:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c72b:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c731:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c735:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
ffffffff8021c73c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c740:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c743:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c747:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c74d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c751:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
ffffffff8021c758:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c75c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c75f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c763:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c769:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c76c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c770:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c776:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8021c77d:	48 c7 c2 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rdx
ffffffff8021c784:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c788:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c78e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c791:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c795:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c79b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c7a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7a5:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c7ab:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c7af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7b3:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c7b9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c7bd:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff8021c7c4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c7c8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c7cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7cf:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c7d5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c7d9:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff8021c7e0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c7e4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c7e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7eb:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c7f1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c7f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7f8:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c7fe:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021c805:	48 c7 c2 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rdx
ffffffff8021c80c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c810:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c816:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c819:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c81d:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c823:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c829:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c82d:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c833:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c837:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c83b:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c841:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c845:	48 c7 c0 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rax
ffffffff8021c84c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c850:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c853:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c857:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c85d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c861:	48 c7 c0 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rax
ffffffff8021c868:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c86c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c86f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c873:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c879:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c87c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c880:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c886:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8021c88d:	48 c7 c2 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rdx
ffffffff8021c894:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c898:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c89e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c8a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8a5:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c8ab:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c8b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8b5:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c8bb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c8bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8c3:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c8c9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c8cd:	48 c7 c0 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rax
ffffffff8021c8d4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c8d8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c8db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8df:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c8e5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c8e9:	48 c7 c0 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rax
ffffffff8021c8f0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c8f4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c8f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8fb:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c901:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c904:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c908:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c90e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021c915:	48 c7 c2 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rdx
ffffffff8021c91c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c920:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c926:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c929:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c92d:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c933:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c939:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c93d:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c943:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c947:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c94b:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c951:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c955:	48 c7 c0 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rax
ffffffff8021c95c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c960:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c963:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c967:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c96d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c971:	48 c7 c0 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rax
ffffffff8021c978:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c97c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c97f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c983:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c989:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c98c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c990:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c996:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8021c99d:	48 c7 c2 05 ba 20 80 	mov    $0xffffffff8020ba05,%rdx
ffffffff8021c9a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9a8:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021c9ae:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c9b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9b5:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021c9bb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c9c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9c5:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021c9cb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c9cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9d3:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021c9d9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c9dd:	48 c7 c0 05 ba 20 80 	mov    $0xffffffff8020ba05,%rax
ffffffff8021c9e4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c9e8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c9eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9ef:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021c9f5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c9f9:	48 c7 c0 05 ba 20 80 	mov    $0xffffffff8020ba05,%rax
ffffffff8021ca00:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ca04:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ca07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca0b:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021ca11:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ca14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca18:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021ca1e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ca25:	48 c7 c2 11 ba 20 80 	mov    $0xffffffff8020ba11,%rdx
ffffffff8021ca2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca30:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021ca36:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ca39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca3d:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021ca43:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ca49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca4d:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021ca53:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ca57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca5b:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021ca61:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ca65:	48 c7 c0 11 ba 20 80 	mov    $0xffffffff8020ba11,%rax
ffffffff8021ca6c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ca70:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ca73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca77:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021ca7d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ca81:	48 c7 c0 11 ba 20 80 	mov    $0xffffffff8020ba11,%rax
ffffffff8021ca88:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ca8c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ca8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca93:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021ca99:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ca9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021caa0:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021caa6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8021caad:	48 c7 c2 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rdx
ffffffff8021cab4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cab8:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cabe:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cac1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cac5:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cacb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cad1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cad5:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cadb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cadf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cae3:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cae9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021caed:	48 c7 c0 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rax
ffffffff8021caf4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021caf8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cafb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021caff:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cb05:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cb09:	48 c7 c0 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rax
ffffffff8021cb10:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cb14:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb1b:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cb21:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cb24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb28:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cb2e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cb35:	48 c7 c2 29 ba 20 80 	mov    $0xffffffff8020ba29,%rdx
ffffffff8021cb3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb40:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cb46:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cb49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb4d:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cb53:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cb59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb5d:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cb63:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cb67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb6b:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cb71:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cb75:	48 c7 c0 29 ba 20 80 	mov    $0xffffffff8020ba29,%rax
ffffffff8021cb7c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cb80:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb87:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cb8d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cb91:	48 c7 c0 29 ba 20 80 	mov    $0xffffffff8020ba29,%rax
ffffffff8021cb98:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cb9c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cba3:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cba9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cbac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbb0:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cbb6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8021cbbd:	48 c7 c2 35 ba 20 80 	mov    $0xffffffff8020ba35,%rdx
ffffffff8021cbc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbc8:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cbce:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cbd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbd5:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cbdb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cbe1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbe5:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cbeb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cbef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbf3:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cbf9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cbfd:	48 c7 c0 35 ba 20 80 	mov    $0xffffffff8020ba35,%rax
ffffffff8021cc04:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cc08:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc0f:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cc15:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cc19:	48 c7 c0 35 ba 20 80 	mov    $0xffffffff8020ba35,%rax
ffffffff8021cc20:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cc24:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc2b:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cc31:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cc34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc38:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cc3e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cc45:	48 c7 c2 41 ba 20 80 	mov    $0xffffffff8020ba41,%rdx
ffffffff8021cc4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc50:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cc56:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cc59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc5d:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cc63:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cc69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc6d:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cc73:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cc77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc7b:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cc81:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cc85:	48 c7 c0 41 ba 20 80 	mov    $0xffffffff8020ba41,%rax
ffffffff8021cc8c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cc90:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc97:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cc9d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cca1:	48 c7 c0 41 ba 20 80 	mov    $0xffffffff8020ba41,%rax
ffffffff8021cca8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ccac:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ccaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccb3:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ccb9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ccbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccc0:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ccc6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8021cccd:	48 c7 c2 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rdx
ffffffff8021ccd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccd8:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021ccde:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cce1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cce5:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cceb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ccf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccf5:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021ccfb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ccff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd03:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cd09:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cd0d:	48 c7 c0 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rax
ffffffff8021cd14:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cd18:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cd1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd1f:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cd25:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cd29:	48 c7 c0 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rax
ffffffff8021cd30:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cd34:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cd37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd3b:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cd41:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cd44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd48:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cd4e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cd55:	48 c7 c2 59 ba 20 80 	mov    $0xffffffff8020ba59,%rdx
ffffffff8021cd5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd60:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cd66:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cd69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd6d:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cd73:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cd79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd7d:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cd83:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cd87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd8b:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cd91:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cd95:	48 c7 c0 59 ba 20 80 	mov    $0xffffffff8020ba59,%rax
ffffffff8021cd9c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cda0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cda3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cda7:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cdad:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cdb1:	48 c7 c0 59 ba 20 80 	mov    $0xffffffff8020ba59,%rax
ffffffff8021cdb8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cdbc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cdbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdc3:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cdc9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cdcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdd0:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cdd6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8021cddd:	48 c7 c2 65 ba 20 80 	mov    $0xffffffff8020ba65,%rdx
ffffffff8021cde4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cde8:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cdee:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cdf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdf5:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cdfb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ce01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce05:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021ce0b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ce0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce13:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021ce19:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ce1d:	48 c7 c0 65 ba 20 80 	mov    $0xffffffff8020ba65,%rax
ffffffff8021ce24:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ce28:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce2f:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021ce35:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ce39:	48 c7 c0 65 ba 20 80 	mov    $0xffffffff8020ba65,%rax
ffffffff8021ce40:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ce44:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce4b:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021ce51:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ce54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce58:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021ce5e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ce65:	48 c7 c2 71 ba 20 80 	mov    $0xffffffff8020ba71,%rdx
ffffffff8021ce6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce70:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021ce76:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ce79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce7d:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021ce83:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ce89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce8d:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021ce93:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ce97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce9b:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cea1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cea5:	48 c7 c0 71 ba 20 80 	mov    $0xffffffff8020ba71,%rax
ffffffff8021ceac:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ceb0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ceb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ceb7:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cebd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cec1:	48 c7 c0 71 ba 20 80 	mov    $0xffffffff8020ba71,%rax
ffffffff8021cec8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cecc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cecf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ced3:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021ced9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cedc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cee0:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cee6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8021ceed:	48 c7 c2 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rdx
ffffffff8021cef4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cef8:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cefe:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cf01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf05:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cf0b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cf11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf15:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cf1b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cf1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf23:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cf29:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cf2d:	48 c7 c0 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rax
ffffffff8021cf34:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cf38:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cf3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf3f:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cf45:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cf49:	48 c7 c0 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rax
ffffffff8021cf50:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cf54:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cf57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf5b:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cf61:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cf64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf68:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cf6e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cf75:	48 c7 c2 89 ba 20 80 	mov    $0xffffffff8020ba89,%rdx
ffffffff8021cf7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf80:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021cf86:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cf89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf8d:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021cf93:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cf99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf9d:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021cfa3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cfa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfab:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021cfb1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cfb5:	48 c7 c0 89 ba 20 80 	mov    $0xffffffff8020ba89,%rax
ffffffff8021cfbc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cfc0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cfc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfc7:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021cfcd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cfd1:	48 c7 c0 89 ba 20 80 	mov    $0xffffffff8020ba89,%rax
ffffffff8021cfd8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cfdc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cfdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfe3:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021cfe9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cfec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cff0:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021cff6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff8021cffd:	48 c7 c2 95 ba 20 80 	mov    $0xffffffff8020ba95,%rdx
ffffffff8021d004:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d008:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d00e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d011:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d015:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d01b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d021:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d025:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d02b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d02f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d033:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d039:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d03d:	48 c7 c0 95 ba 20 80 	mov    $0xffffffff8020ba95,%rax
ffffffff8021d044:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d048:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d04b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d04f:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d055:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d059:	48 c7 c0 95 ba 20 80 	mov    $0xffffffff8020ba95,%rax
ffffffff8021d060:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d064:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d067:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d06b:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d071:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d074:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d078:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d07e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d085:	48 c7 c2 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rdx
ffffffff8021d08c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d090:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d096:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d099:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d09d:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d0a3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d0a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0ad:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d0b3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d0b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0bb:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d0c1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d0c5:	48 c7 c0 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rax
ffffffff8021d0cc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d0d0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d0d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0d7:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d0dd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d0e1:	48 c7 c0 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rax
ffffffff8021d0e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d0ec:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d0ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0f3:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d0f9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d0fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d100:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d106:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8021d10d:	48 c7 c2 ad ba 20 80 	mov    $0xffffffff8020baad,%rdx
ffffffff8021d114:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d118:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d11e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d121:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d125:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d12b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d131:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d135:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d13b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d13f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d143:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d149:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d14d:	48 c7 c0 ad ba 20 80 	mov    $0xffffffff8020baad,%rax
ffffffff8021d154:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d158:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d15b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d15f:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d165:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d169:	48 c7 c0 ad ba 20 80 	mov    $0xffffffff8020baad,%rax
ffffffff8021d170:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d174:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d177:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d17b:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d181:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d184:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d188:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d18e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d195:	48 c7 c2 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rdx
ffffffff8021d19c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1a0:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d1a6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d1a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1ad:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d1b3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d1b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1bd:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d1c3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d1c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1cb:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d1d1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d1d5:	48 c7 c0 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rax
ffffffff8021d1dc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d1e0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d1e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1e7:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d1ed:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d1f1:	48 c7 c0 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rax
ffffffff8021d1f8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d1fc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d1ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d203:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d209:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d20c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d210:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d216:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8021d21d:	48 c7 c2 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rdx
ffffffff8021d224:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d228:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d22e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d231:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d235:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d23b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d241:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d245:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d24b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d24f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d253:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d259:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d25d:	48 c7 c0 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rax
ffffffff8021d264:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d268:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d26b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d26f:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d275:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d279:	48 c7 c0 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rax
ffffffff8021d280:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d284:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d287:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d28b:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d291:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d294:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d298:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d29e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d2a5:	48 c7 c2 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rdx
ffffffff8021d2ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2b0:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d2b6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d2b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2bd:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d2c3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d2c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2cd:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d2d3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d2d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2db:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d2e1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d2e5:	48 c7 c0 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rax
ffffffff8021d2ec:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d2f0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d2f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2f7:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d2fd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d301:	48 c7 c0 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rax
ffffffff8021d308:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d30c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d30f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d313:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d319:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d31c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d320:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d326:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8021d32d:	48 c7 c2 dd ba 20 80 	mov    $0xffffffff8020badd,%rdx
ffffffff8021d334:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d338:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d33e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d341:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d345:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d34b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d351:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d355:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d35b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d35f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d363:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d369:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d36d:	48 c7 c0 dd ba 20 80 	mov    $0xffffffff8020badd,%rax
ffffffff8021d374:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d378:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d37b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d37f:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d385:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d389:	48 c7 c0 dd ba 20 80 	mov    $0xffffffff8020badd,%rax
ffffffff8021d390:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d394:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d397:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d39b:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d3a1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d3a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3a8:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d3ae:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d3b5:	48 c7 c2 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rdx
ffffffff8021d3bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3c0:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d3c6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d3c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3cd:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d3d3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d3d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3dd:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d3e3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d3e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3eb:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d3f1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d3f5:	48 c7 c0 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rax
ffffffff8021d3fc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d400:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d403:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d407:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d40d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d411:	48 c7 c0 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rax
ffffffff8021d418:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d41c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d41f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d423:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d429:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d42c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d430:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d436:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8021d43d:	48 c7 c2 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rdx
ffffffff8021d444:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d448:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d44e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d451:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d455:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d45b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d461:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d465:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d46b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d46f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d473:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d479:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d47d:	48 c7 c0 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rax
ffffffff8021d484:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d488:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d48b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d48f:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d495:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d499:	48 c7 c0 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rax
ffffffff8021d4a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d4a4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d4a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4ab:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d4b1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d4b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4b8:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d4be:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d4c5:	48 c7 c2 01 bb 20 80 	mov    $0xffffffff8020bb01,%rdx
ffffffff8021d4cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4d0:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d4d6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d4d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4dd:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d4e3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d4e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4ed:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d4f3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d4f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4fb:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d501:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d505:	48 c7 c0 01 bb 20 80 	mov    $0xffffffff8020bb01,%rax
ffffffff8021d50c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d510:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d513:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d517:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d51d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d521:	48 c7 c0 01 bb 20 80 	mov    $0xffffffff8020bb01,%rax
ffffffff8021d528:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d52c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d52f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d533:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d539:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d53c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d540:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d546:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8021d54d:	48 c7 c2 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rdx
ffffffff8021d554:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d558:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d55e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d561:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d565:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d56b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d571:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d575:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d57b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d57f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d583:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d589:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d58d:	48 c7 c0 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rax
ffffffff8021d594:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d598:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d59b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d59f:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d5a5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d5a9:	48 c7 c0 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rax
ffffffff8021d5b0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d5b4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d5b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5bb:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d5c1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d5c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5c8:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d5ce:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d5d5:	48 c7 c2 19 bb 20 80 	mov    $0xffffffff8020bb19,%rdx
ffffffff8021d5dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5e0:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d5e6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d5e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5ed:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d5f3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d5f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5fd:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d603:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d607:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d60b:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d611:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d615:	48 c7 c0 19 bb 20 80 	mov    $0xffffffff8020bb19,%rax
ffffffff8021d61c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d620:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d623:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d627:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d62d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d631:	48 c7 c0 19 bb 20 80 	mov    $0xffffffff8020bb19,%rax
ffffffff8021d638:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d63c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d63f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d643:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d649:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d64c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d650:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d656:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8021d65d:	48 c7 c2 25 bb 20 80 	mov    $0xffffffff8020bb25,%rdx
ffffffff8021d664:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d668:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d66e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d671:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d675:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d67b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d681:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d685:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d68b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d68f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d693:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d699:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d69d:	48 c7 c0 25 bb 20 80 	mov    $0xffffffff8020bb25,%rax
ffffffff8021d6a4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d6a8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d6ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6af:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d6b5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d6b9:	48 c7 c0 25 bb 20 80 	mov    $0xffffffff8020bb25,%rax
ffffffff8021d6c0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d6c4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d6c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6cb:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d6d1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d6d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6d8:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d6de:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d6e5:	48 c7 c2 31 bb 20 80 	mov    $0xffffffff8020bb31,%rdx
ffffffff8021d6ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6f0:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d6f6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d6f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6fd:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d703:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d709:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d70d:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d713:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d717:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d71b:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d721:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d725:	48 c7 c0 31 bb 20 80 	mov    $0xffffffff8020bb31,%rax
ffffffff8021d72c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d730:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d733:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d737:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d73d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d741:	48 c7 c0 31 bb 20 80 	mov    $0xffffffff8020bb31,%rax
ffffffff8021d748:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d74c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d74f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d753:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d759:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d75c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d760:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d766:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8021d76d:	48 c7 c2 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rdx
ffffffff8021d774:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d778:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d77e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d781:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d785:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d78b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d791:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d795:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d79b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d79f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7a3:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d7a9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d7ad:	48 c7 c0 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rax
ffffffff8021d7b4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d7b8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d7bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7bf:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d7c5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d7c9:	48 c7 c0 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rax
ffffffff8021d7d0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d7d4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d7d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7db:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d7e1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d7e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7e8:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d7ee:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d7f5:	48 c7 c2 49 bb 20 80 	mov    $0xffffffff8020bb49,%rdx
ffffffff8021d7fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d800:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d806:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d809:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d80d:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d813:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d819:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d81d:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d823:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d827:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d82b:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d831:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d835:	48 c7 c0 49 bb 20 80 	mov    $0xffffffff8020bb49,%rax
ffffffff8021d83c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d840:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d843:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d847:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d84d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d851:	48 c7 c0 49 bb 20 80 	mov    $0xffffffff8020bb49,%rax
ffffffff8021d858:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d85c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d85f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d863:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d869:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d86c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d870:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d876:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8021d87d:	48 c7 c2 55 bb 20 80 	mov    $0xffffffff8020bb55,%rdx
ffffffff8021d884:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d888:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d88e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d891:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d895:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d89b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d8a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8a5:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d8ab:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d8af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8b3:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d8b9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d8bd:	48 c7 c0 55 bb 20 80 	mov    $0xffffffff8020bb55,%rax
ffffffff8021d8c4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d8c8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d8cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8cf:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d8d5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d8d9:	48 c7 c0 55 bb 20 80 	mov    $0xffffffff8020bb55,%rax
ffffffff8021d8e0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d8e4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d8e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8eb:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d8f1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d8f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8f8:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d8fe:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d905:	48 c7 c2 61 bb 20 80 	mov    $0xffffffff8020bb61,%rdx
ffffffff8021d90c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d910:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d916:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d919:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d91d:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d923:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d929:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d92d:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d933:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d937:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d93b:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d941:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d945:	48 c7 c0 61 bb 20 80 	mov    $0xffffffff8020bb61,%rax
ffffffff8021d94c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d950:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d953:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d957:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d95d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d961:	48 c7 c0 61 bb 20 80 	mov    $0xffffffff8020bb61,%rax
ffffffff8021d968:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d96c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d96f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d973:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d979:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d97c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d980:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d986:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8021d98d:	48 c7 c2 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rdx
ffffffff8021d994:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d998:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021d99e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d9a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9a5:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021d9ab:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d9b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9b5:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021d9bb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d9bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9c3:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021d9c9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d9cd:	48 c7 c0 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rax
ffffffff8021d9d4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d9d8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d9db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9df:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021d9e5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d9e9:	48 c7 c0 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rax
ffffffff8021d9f0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d9f4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d9f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9fb:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021da01:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021da04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da08:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021da0e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021da15:	48 c7 c2 79 bb 20 80 	mov    $0xffffffff8020bb79,%rdx
ffffffff8021da1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da20:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021da26:	66 89 10             	mov    %dx,(%rax)
ffffffff8021da29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da2d:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021da33:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021da39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da3d:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021da43:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021da47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da4b:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021da51:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021da55:	48 c7 c0 79 bb 20 80 	mov    $0xffffffff8020bb79,%rax
ffffffff8021da5c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021da60:	48 89 c2             	mov    %rax,%rdx
ffffffff8021da63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da67:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021da6d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021da71:	48 c7 c0 79 bb 20 80 	mov    $0xffffffff8020bb79,%rax
ffffffff8021da78:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021da7c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021da7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da83:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021da89:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021da8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da90:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021da96:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8021da9d:	48 c7 c2 85 bb 20 80 	mov    $0xffffffff8020bb85,%rdx
ffffffff8021daa4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daa8:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021daae:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dab1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dab5:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dabb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dac1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dac5:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dacb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dacf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dad3:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dad9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dadd:	48 c7 c0 85 bb 20 80 	mov    $0xffffffff8020bb85,%rax
ffffffff8021dae4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dae8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021daeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daef:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021daf5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021daf9:	48 c7 c0 85 bb 20 80 	mov    $0xffffffff8020bb85,%rax
ffffffff8021db00:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021db04:	48 89 c2             	mov    %rax,%rdx
ffffffff8021db07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db0b:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021db11:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021db14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db18:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021db1e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021db25:	48 c7 c2 91 bb 20 80 	mov    $0xffffffff8020bb91,%rdx
ffffffff8021db2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db30:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021db36:	66 89 10             	mov    %dx,(%rax)
ffffffff8021db39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db3d:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021db43:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021db49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db4d:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021db53:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021db57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db5b:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021db61:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021db65:	48 c7 c0 91 bb 20 80 	mov    $0xffffffff8020bb91,%rax
ffffffff8021db6c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021db70:	48 89 c2             	mov    %rax,%rdx
ffffffff8021db73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db77:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021db7d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021db81:	48 c7 c0 91 bb 20 80 	mov    $0xffffffff8020bb91,%rax
ffffffff8021db88:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021db8c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021db8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db93:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021db99:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021db9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dba0:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dba6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8021dbad:	48 c7 c2 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rdx
ffffffff8021dbb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbb8:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dbbe:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dbc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbc5:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dbcb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dbd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbd5:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dbdb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dbdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbe3:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dbe9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dbed:	48 c7 c0 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rax
ffffffff8021dbf4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dbf8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dbfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbff:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dc05:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dc09:	48 c7 c0 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rax
ffffffff8021dc10:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dc14:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc1b:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dc21:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dc24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc28:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dc2e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dc35:	48 c7 c2 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rdx
ffffffff8021dc3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc40:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dc46:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dc49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc4d:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dc53:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dc59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc5d:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dc63:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dc67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc6b:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dc71:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dc75:	48 c7 c0 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rax
ffffffff8021dc7c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dc80:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc87:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dc8d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dc91:	48 c7 c0 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rax
ffffffff8021dc98:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dc9c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dca3:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dca9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dcac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcb0:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dcb6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8021dcbd:	48 c7 c2 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rdx
ffffffff8021dcc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcc8:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dcce:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dcd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcd5:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dcdb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dce1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dce5:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dceb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dcef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcf3:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dcf9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dcfd:	48 c7 c0 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rax
ffffffff8021dd04:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dd08:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd0f:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dd15:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dd19:	48 c7 c0 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rax
ffffffff8021dd20:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dd24:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd2b:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dd31:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dd34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd38:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dd3e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dd45:	48 c7 c2 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rdx
ffffffff8021dd4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd50:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dd56:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dd59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd5d:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dd63:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dd69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd6d:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dd73:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dd77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd7b:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dd81:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dd85:	48 c7 c0 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rax
ffffffff8021dd8c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dd90:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd97:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dd9d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dda1:	48 c7 c0 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rax
ffffffff8021dda8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ddac:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ddaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddb3:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021ddb9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ddbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddc0:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021ddc6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8021ddcd:	48 c7 c2 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rdx
ffffffff8021ddd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddd8:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021ddde:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dde1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dde5:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021ddeb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ddf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddf5:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021ddfb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ddff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de03:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021de09:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021de0d:	48 c7 c0 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rax
ffffffff8021de14:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021de18:	48 89 c2             	mov    %rax,%rdx
ffffffff8021de1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de1f:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021de25:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021de29:	48 c7 c0 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rax
ffffffff8021de30:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021de34:	48 89 c2             	mov    %rax,%rdx
ffffffff8021de37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de3b:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021de41:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021de44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de48:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021de4e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021de55:	48 c7 c2 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rdx
ffffffff8021de5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de60:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021de66:	66 89 10             	mov    %dx,(%rax)
ffffffff8021de69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de6d:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021de73:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021de79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de7d:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021de83:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021de87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de8b:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021de91:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021de95:	48 c7 c0 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rax
ffffffff8021de9c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dea0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dea3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dea7:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dead:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021deb1:	48 c7 c0 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rax
ffffffff8021deb8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021debc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021debf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dec3:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dec9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021decc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ded0:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021ded6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8021dedd:	48 c7 c2 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rdx
ffffffff8021dee4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dee8:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021deee:	66 89 10             	mov    %dx,(%rax)
ffffffff8021def1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021def5:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021defb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021df01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df05:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021df0b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021df0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df13:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021df19:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021df1d:	48 c7 c0 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rax
ffffffff8021df24:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021df28:	48 89 c2             	mov    %rax,%rdx
ffffffff8021df2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df2f:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021df35:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021df39:	48 c7 c0 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rax
ffffffff8021df40:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021df44:	48 89 c2             	mov    %rax,%rdx
ffffffff8021df47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df4b:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021df51:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021df54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df58:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021df5e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021df65:	48 c7 c2 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rdx
ffffffff8021df6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df70:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021df76:	66 89 10             	mov    %dx,(%rax)
ffffffff8021df79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df7d:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021df83:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021df89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df8d:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021df93:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021df97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df9b:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021dfa1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dfa5:	48 c7 c0 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rax
ffffffff8021dfac:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dfb0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dfb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfb7:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021dfbd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dfc1:	48 c7 c0 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rax
ffffffff8021dfc8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dfcc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dfcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfd3:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021dfd9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dfdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfe0:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021dfe6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8021dfed:	48 c7 c2 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rdx
ffffffff8021dff4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dff8:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021dffe:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e001:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e005:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e00b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e011:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e015:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e01b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e01f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e023:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e029:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e02d:	48 c7 c0 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rax
ffffffff8021e034:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e038:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e03b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e03f:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e045:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e049:	48 c7 c0 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rax
ffffffff8021e050:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e054:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e057:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e05b:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e061:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e064:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e068:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e06e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e075:	48 c7 c2 09 bc 20 80 	mov    $0xffffffff8020bc09,%rdx
ffffffff8021e07c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e080:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e086:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e089:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e08d:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e093:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e099:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e09d:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e0a3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e0a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0ab:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e0b1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e0b5:	48 c7 c0 09 bc 20 80 	mov    $0xffffffff8020bc09,%rax
ffffffff8021e0bc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e0c0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e0c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0c7:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e0cd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e0d1:	48 c7 c0 09 bc 20 80 	mov    $0xffffffff8020bc09,%rax
ffffffff8021e0d8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e0dc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e0df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0e3:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e0e9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e0ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0f0:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e0f6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8021e0fd:	48 c7 c2 15 bc 20 80 	mov    $0xffffffff8020bc15,%rdx
ffffffff8021e104:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e108:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e10e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e111:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e115:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e11b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e121:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e125:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e12b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e12f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e133:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e139:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e13d:	48 c7 c0 15 bc 20 80 	mov    $0xffffffff8020bc15,%rax
ffffffff8021e144:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e148:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e14b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e14f:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e155:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e159:	48 c7 c0 15 bc 20 80 	mov    $0xffffffff8020bc15,%rax
ffffffff8021e160:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e164:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e167:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e16b:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e171:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e174:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e178:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e17e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e185:	48 c7 c2 21 bc 20 80 	mov    $0xffffffff8020bc21,%rdx
ffffffff8021e18c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e190:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e196:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e199:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e19d:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e1a3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e1a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1ad:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e1b3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e1b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1bb:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e1c1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e1c5:	48 c7 c0 21 bc 20 80 	mov    $0xffffffff8020bc21,%rax
ffffffff8021e1cc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e1d0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e1d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1d7:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e1dd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e1e1:	48 c7 c0 21 bc 20 80 	mov    $0xffffffff8020bc21,%rax
ffffffff8021e1e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e1ec:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e1ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1f3:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e1f9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e1fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e200:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e206:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8021e20d:	48 c7 c2 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rdx
ffffffff8021e214:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e218:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e21e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e221:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e225:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e22b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e231:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e235:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e23b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e23f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e243:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e249:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e24d:	48 c7 c0 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rax
ffffffff8021e254:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e258:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e25b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e25f:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e265:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e269:	48 c7 c0 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rax
ffffffff8021e270:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e274:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e277:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e27b:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e281:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e284:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e288:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e28e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e295:	48 c7 c2 39 bc 20 80 	mov    $0xffffffff8020bc39,%rdx
ffffffff8021e29c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2a0:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e2a6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e2a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2ad:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e2b3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e2b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2bd:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e2c3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e2c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2cb:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e2d1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e2d5:	48 c7 c0 39 bc 20 80 	mov    $0xffffffff8020bc39,%rax
ffffffff8021e2dc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e2e0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e2e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2e7:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e2ed:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e2f1:	48 c7 c0 39 bc 20 80 	mov    $0xffffffff8020bc39,%rax
ffffffff8021e2f8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e2fc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e2ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e303:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e309:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e30c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e310:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e316:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8021e31d:	48 c7 c2 45 bc 20 80 	mov    $0xffffffff8020bc45,%rdx
ffffffff8021e324:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e328:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e32e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e331:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e335:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e33b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e341:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e345:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e34b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e34f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e353:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e359:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e35d:	48 c7 c0 45 bc 20 80 	mov    $0xffffffff8020bc45,%rax
ffffffff8021e364:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e368:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e36b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e36f:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e375:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e379:	48 c7 c0 45 bc 20 80 	mov    $0xffffffff8020bc45,%rax
ffffffff8021e380:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e384:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e38b:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e391:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e394:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e398:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e39e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e3a5:	48 c7 c2 51 bc 20 80 	mov    $0xffffffff8020bc51,%rdx
ffffffff8021e3ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3b0:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e3b6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e3b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3bd:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e3c3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e3c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3cd:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e3d3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e3d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3db:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e3e1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e3e5:	48 c7 c0 51 bc 20 80 	mov    $0xffffffff8020bc51,%rax
ffffffff8021e3ec:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e3f0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e3f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3f7:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e3fd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e401:	48 c7 c0 51 bc 20 80 	mov    $0xffffffff8020bc51,%rax
ffffffff8021e408:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e40c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e40f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e413:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e419:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e41c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e420:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e426:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8021e42d:	48 c7 c2 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rdx
ffffffff8021e434:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e438:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e43e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e441:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e445:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e44b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e451:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e455:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e45b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e45f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e463:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e469:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e46d:	48 c7 c0 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rax
ffffffff8021e474:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e478:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e47b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e47f:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e485:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e489:	48 c7 c0 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rax
ffffffff8021e490:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e494:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e497:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e49b:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e4a1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e4a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4a8:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e4ae:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e4b5:	48 c7 c2 69 bc 20 80 	mov    $0xffffffff8020bc69,%rdx
ffffffff8021e4bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4c0:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e4c6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e4c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4cd:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e4d3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e4d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4dd:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e4e3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e4e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4eb:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e4f1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e4f5:	48 c7 c0 69 bc 20 80 	mov    $0xffffffff8020bc69,%rax
ffffffff8021e4fc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e500:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e503:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e507:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e50d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e511:	48 c7 c0 69 bc 20 80 	mov    $0xffffffff8020bc69,%rax
ffffffff8021e518:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e51c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e51f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e523:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e529:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e52c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e530:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e536:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8021e53d:	48 c7 c2 75 bc 20 80 	mov    $0xffffffff8020bc75,%rdx
ffffffff8021e544:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e548:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e54e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e551:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e555:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e55b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e561:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e565:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e56b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e56f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e573:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e579:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e57d:	48 c7 c0 75 bc 20 80 	mov    $0xffffffff8020bc75,%rax
ffffffff8021e584:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e588:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e58b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e58f:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e595:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e599:	48 c7 c0 75 bc 20 80 	mov    $0xffffffff8020bc75,%rax
ffffffff8021e5a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e5a4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e5a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5ab:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e5b1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e5b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5b8:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e5be:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e5c5:	48 c7 c2 81 bc 20 80 	mov    $0xffffffff8020bc81,%rdx
ffffffff8021e5cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5d0:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e5d6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e5d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5dd:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e5e3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e5e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5ed:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e5f3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e5f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5fb:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e601:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e605:	48 c7 c0 81 bc 20 80 	mov    $0xffffffff8020bc81,%rax
ffffffff8021e60c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e610:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e613:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e617:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e61d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e621:	48 c7 c0 81 bc 20 80 	mov    $0xffffffff8020bc81,%rax
ffffffff8021e628:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e62c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e62f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e633:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e639:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e63c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e640:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e646:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8021e64d:	48 c7 c2 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rdx
ffffffff8021e654:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e658:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e65e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e661:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e665:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e66b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e671:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e675:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e67b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e67f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e683:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e689:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e68d:	48 c7 c0 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rax
ffffffff8021e694:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e698:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e69b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e69f:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e6a5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e6a9:	48 c7 c0 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rax
ffffffff8021e6b0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e6b4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e6b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6bb:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e6c1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e6c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6c8:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e6ce:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e6d5:	48 c7 c2 99 bc 20 80 	mov    $0xffffffff8020bc99,%rdx
ffffffff8021e6dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6e0:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e6e6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e6e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6ed:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e6f3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e6f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6fd:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e703:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e707:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e70b:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e711:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e715:	48 c7 c0 99 bc 20 80 	mov    $0xffffffff8020bc99,%rax
ffffffff8021e71c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e720:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e723:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e727:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e72d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e731:	48 c7 c0 99 bc 20 80 	mov    $0xffffffff8020bc99,%rax
ffffffff8021e738:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e73c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e73f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e743:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e749:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e74c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e750:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e756:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8021e75d:	48 c7 c2 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rdx
ffffffff8021e764:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e768:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e76e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e771:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e775:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e77b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e781:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e785:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e78b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e78f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e793:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e799:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e79d:	48 c7 c0 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rax
ffffffff8021e7a4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e7a8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e7ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7af:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e7b5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e7b9:	48 c7 c0 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rax
ffffffff8021e7c0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e7c4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e7c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7cb:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e7d1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e7d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7d8:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e7de:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e7e5:	48 c7 c2 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rdx
ffffffff8021e7ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7f0:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e7f6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e7f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7fd:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e803:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e809:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e80d:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e813:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e817:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e81b:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e821:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e825:	48 c7 c0 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rax
ffffffff8021e82c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e830:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e833:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e837:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e83d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e841:	48 c7 c0 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rax
ffffffff8021e848:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e84c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e84f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e853:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e859:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e85c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e860:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e866:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021e86d:	48 c7 c2 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rdx
ffffffff8021e874:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e878:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e87e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e881:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e885:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e88b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e891:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e895:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e89b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e89f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8a3:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e8a9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e8ad:	48 c7 c0 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rax
ffffffff8021e8b4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e8b8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e8bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8bf:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e8c5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e8c9:	48 c7 c0 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rax
ffffffff8021e8d0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e8d4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e8d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8db:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e8e1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e8e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8e8:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e8ee:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e8f5:	48 c7 c2 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rdx
ffffffff8021e8fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e900:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e906:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e909:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e90d:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e913:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e919:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e91d:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e923:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e927:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e92b:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e931:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e935:	48 c7 c0 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rax
ffffffff8021e93c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e940:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e943:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e947:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e94d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e951:	48 c7 c0 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rax
ffffffff8021e958:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e95c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e95f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e963:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e969:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e96c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e970:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e976:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8021e97d:	48 c7 c2 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rdx
ffffffff8021e984:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e988:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e98e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e991:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e995:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e99b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e9a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9a5:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e9ab:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e9af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9b3:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e9b9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e9bd:	48 c7 c0 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rax
ffffffff8021e9c4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e9c8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e9cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9cf:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e9d5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e9d9:	48 c7 c0 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rax
ffffffff8021e9e0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e9e4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e9e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9eb:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e9f1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e9f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9f8:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e9fe:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ea05:	48 c7 c2 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rdx
ffffffff8021ea0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea10:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ea16:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ea19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea1d:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ea23:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ea29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea2d:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ea33:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ea37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea3b:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ea41:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ea45:	48 c7 c0 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rax
ffffffff8021ea4c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ea50:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ea53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea57:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ea5d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ea61:	48 c7 c0 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rax
ffffffff8021ea68:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ea6c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ea6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea73:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ea79:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ea7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea80:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ea86:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8021ea8d:	48 c7 c2 ed bc 20 80 	mov    $0xffffffff8020bced,%rdx
ffffffff8021ea94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea98:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ea9e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eaa1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eaa5:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eaab:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eab1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eab5:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eabb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021eabf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eac3:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eac9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eacd:	48 c7 c0 ed bc 20 80 	mov    $0xffffffff8020bced,%rax
ffffffff8021ead4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ead8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eadb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eadf:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eae5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eae9:	48 c7 c0 ed bc 20 80 	mov    $0xffffffff8020bced,%rax
ffffffff8021eaf0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eaf4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eaf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eafb:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eb01:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eb04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb08:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eb0e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021eb15:	48 c7 c2 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rdx
ffffffff8021eb1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb20:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021eb26:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eb29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb2d:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021eb33:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eb39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb3d:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021eb43:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021eb47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb4b:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021eb51:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eb55:	48 c7 c0 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rax
ffffffff8021eb5c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021eb60:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eb63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb67:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021eb6d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eb71:	48 c7 c0 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rax
ffffffff8021eb78:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eb7c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eb7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb83:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021eb89:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eb8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb90:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021eb96:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8021eb9d:	48 c7 c2 05 bd 20 80 	mov    $0xffffffff8020bd05,%rdx
ffffffff8021eba4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eba8:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ebae:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ebb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebb5:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ebbb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ebc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebc5:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ebcb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ebcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebd3:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ebd9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ebdd:	48 c7 c0 05 bd 20 80 	mov    $0xffffffff8020bd05,%rax
ffffffff8021ebe4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ebe8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ebeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebef:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ebf5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ebf9:	48 c7 c0 05 bd 20 80 	mov    $0xffffffff8020bd05,%rax
ffffffff8021ec00:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ec04:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ec07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec0b:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ec11:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ec14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec18:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ec1e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ec25:	48 c7 c2 11 bd 20 80 	mov    $0xffffffff8020bd11,%rdx
ffffffff8021ec2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec30:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ec36:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ec39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec3d:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ec43:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ec49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec4d:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ec53:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ec57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec5b:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ec61:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ec65:	48 c7 c0 11 bd 20 80 	mov    $0xffffffff8020bd11,%rax
ffffffff8021ec6c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ec70:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ec73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec77:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ec7d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ec81:	48 c7 c0 11 bd 20 80 	mov    $0xffffffff8020bd11,%rax
ffffffff8021ec88:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ec8c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ec8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec93:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ec99:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ec9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eca0:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021eca6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8021ecad:	48 c7 c2 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rdx
ffffffff8021ecb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecb8:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ecbe:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ecc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecc5:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021eccb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ecd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecd5:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ecdb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ecdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ece3:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ece9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eced:	48 c7 c0 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rax
ffffffff8021ecf4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ecf8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ecfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecff:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ed05:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ed09:	48 c7 c0 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rax
ffffffff8021ed10:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ed14:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed1b:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ed21:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ed24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed28:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ed2e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ed35:	48 c7 c2 29 bd 20 80 	mov    $0xffffffff8020bd29,%rdx
ffffffff8021ed3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed40:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ed46:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ed49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed4d:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ed53:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ed59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed5d:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ed63:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ed67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed6b:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ed71:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ed75:	48 c7 c0 29 bd 20 80 	mov    $0xffffffff8020bd29,%rax
ffffffff8021ed7c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ed80:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed87:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ed8d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ed91:	48 c7 c0 29 bd 20 80 	mov    $0xffffffff8020bd29,%rax
ffffffff8021ed98:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ed9c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eda3:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021eda9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021edac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edb0:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021edb6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8021edbd:	48 c7 c2 35 bd 20 80 	mov    $0xffffffff8020bd35,%rdx
ffffffff8021edc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edc8:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021edce:	66 89 10             	mov    %dx,(%rax)
ffffffff8021edd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edd5:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021eddb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ede1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ede5:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021edeb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021edef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edf3:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021edf9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021edfd:	48 c7 c0 35 bd 20 80 	mov    $0xffffffff8020bd35,%rax
ffffffff8021ee04:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ee08:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee0f:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ee15:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ee19:	48 c7 c0 35 bd 20 80 	mov    $0xffffffff8020bd35,%rax
ffffffff8021ee20:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ee24:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee2b:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ee31:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ee34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee38:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ee3e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ee45:	48 c7 c2 41 bd 20 80 	mov    $0xffffffff8020bd41,%rdx
ffffffff8021ee4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee50:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ee56:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ee59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee5d:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ee63:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ee69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee6d:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ee73:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ee77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee7b:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ee81:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ee85:	48 c7 c0 41 bd 20 80 	mov    $0xffffffff8020bd41,%rax
ffffffff8021ee8c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ee90:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee97:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ee9d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eea1:	48 c7 c0 41 bd 20 80 	mov    $0xffffffff8020bd41,%rax
ffffffff8021eea8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eeac:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eeaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eeb3:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021eeb9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eebc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eec0:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021eec6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8021eecd:	48 c7 c2 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rdx
ffffffff8021eed4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eed8:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021eede:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eee1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eee5:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021eeeb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eef1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eef5:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021eefb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021eeff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef03:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ef09:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ef0d:	48 c7 c0 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rax
ffffffff8021ef14:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ef18:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ef1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef1f:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ef25:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ef29:	48 c7 c0 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rax
ffffffff8021ef30:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ef34:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ef37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef3b:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ef41:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ef44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef48:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ef4e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ef55:	48 c7 c2 59 bd 20 80 	mov    $0xffffffff8020bd59,%rdx
ffffffff8021ef5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef60:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021ef66:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ef69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef6d:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021ef73:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ef79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef7d:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021ef83:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ef87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef8b:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021ef91:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ef95:	48 c7 c0 59 bd 20 80 	mov    $0xffffffff8020bd59,%rax
ffffffff8021ef9c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021efa0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021efa3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efa7:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021efad:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021efb1:	48 c7 c0 59 bd 20 80 	mov    $0xffffffff8020bd59,%rax
ffffffff8021efb8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021efbc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021efbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efc3:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021efc9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021efcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efd0:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021efd6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8021efdd:	48 c7 c2 65 bd 20 80 	mov    $0xffffffff8020bd65,%rdx
ffffffff8021efe4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efe8:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021efee:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eff1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eff5:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021effb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f001:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f005:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f00b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f00f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f013:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f019:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f01d:	48 c7 c0 65 bd 20 80 	mov    $0xffffffff8020bd65,%rax
ffffffff8021f024:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f028:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f02b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f02f:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f035:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f039:	48 c7 c0 65 bd 20 80 	mov    $0xffffffff8020bd65,%rax
ffffffff8021f040:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f044:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f047:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f04b:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f051:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f054:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f058:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f05e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f065:	48 c7 c2 71 bd 20 80 	mov    $0xffffffff8020bd71,%rdx
ffffffff8021f06c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f070:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f076:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f079:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f07d:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f083:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f089:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f08d:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f093:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f097:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f09b:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f0a1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f0a5:	48 c7 c0 71 bd 20 80 	mov    $0xffffffff8020bd71,%rax
ffffffff8021f0ac:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f0b0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f0b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0b7:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f0bd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f0c1:	48 c7 c0 71 bd 20 80 	mov    $0xffffffff8020bd71,%rax
ffffffff8021f0c8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f0cc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f0cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0d3:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f0d9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f0dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0e0:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f0e6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8021f0ed:	48 c7 c2 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rdx
ffffffff8021f0f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0f8:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f0fe:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f101:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f105:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f10b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f111:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f115:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f11b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f11f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f123:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f129:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f12d:	48 c7 c0 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rax
ffffffff8021f134:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f138:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f13b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f13f:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f145:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f149:	48 c7 c0 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rax
ffffffff8021f150:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f154:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f157:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f15b:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f161:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f164:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f168:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f16e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f175:	48 c7 c2 89 bd 20 80 	mov    $0xffffffff8020bd89,%rdx
ffffffff8021f17c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f180:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f186:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f189:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f18d:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f193:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f199:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f19d:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f1a3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f1a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1ab:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f1b1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f1b5:	48 c7 c0 89 bd 20 80 	mov    $0xffffffff8020bd89,%rax
ffffffff8021f1bc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f1c0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f1c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1c7:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f1cd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f1d1:	48 c7 c0 89 bd 20 80 	mov    $0xffffffff8020bd89,%rax
ffffffff8021f1d8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f1dc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f1df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1e3:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f1e9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f1ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1f0:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f1f6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8021f1fd:	48 c7 c2 95 bd 20 80 	mov    $0xffffffff8020bd95,%rdx
ffffffff8021f204:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f208:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f20e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f211:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f215:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f21b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f221:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f225:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f22b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f22f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f233:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f239:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f23d:	48 c7 c0 95 bd 20 80 	mov    $0xffffffff8020bd95,%rax
ffffffff8021f244:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f248:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f24b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f24f:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f255:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f259:	48 c7 c0 95 bd 20 80 	mov    $0xffffffff8020bd95,%rax
ffffffff8021f260:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f264:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f267:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f26b:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f271:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f274:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f278:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f27e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f285:	48 c7 c2 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rdx
ffffffff8021f28c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f290:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f296:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f299:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f29d:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f2a3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f2a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2ad:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f2b3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f2b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2bb:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f2c1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f2c5:	48 c7 c0 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rax
ffffffff8021f2cc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f2d0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f2d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2d7:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f2dd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f2e1:	48 c7 c0 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rax
ffffffff8021f2e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f2ec:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f2ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2f3:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f2f9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f2fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f300:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f306:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8021f30d:	48 c7 c2 ad bd 20 80 	mov    $0xffffffff8020bdad,%rdx
ffffffff8021f314:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f318:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f31e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f321:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f325:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f32b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f331:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f335:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f33b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f33f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f343:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f349:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f34d:	48 c7 c0 ad bd 20 80 	mov    $0xffffffff8020bdad,%rax
ffffffff8021f354:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f358:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f35b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f35f:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f365:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f369:	48 c7 c0 ad bd 20 80 	mov    $0xffffffff8020bdad,%rax
ffffffff8021f370:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f374:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f377:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f37b:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f381:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f384:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f388:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f38e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f395:	48 c7 c2 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rdx
ffffffff8021f39c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3a0:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f3a6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f3a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3ad:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f3b3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f3b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3bd:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f3c3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f3c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3cb:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f3d1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f3d5:	48 c7 c0 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rax
ffffffff8021f3dc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f3e0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f3e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3e7:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f3ed:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f3f1:	48 c7 c0 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rax
ffffffff8021f3f8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f3fc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f3ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f403:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f409:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f40c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f410:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f416:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff8021f41d:	48 c7 c2 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rdx
ffffffff8021f424:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f428:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f42e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f431:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f435:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f43b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f441:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f445:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f44b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f44f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f453:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f459:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f45d:	48 c7 c0 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rax
ffffffff8021f464:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f468:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f46b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f46f:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f475:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f479:	48 c7 c0 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rax
ffffffff8021f480:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f484:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f487:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f48b:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f491:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f494:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f498:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f49e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f4a5:	48 c7 c2 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rdx
ffffffff8021f4ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4b0:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f4b6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f4b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4bd:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f4c3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f4c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4cd:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f4d3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f4d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4db:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f4e1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f4e5:	48 c7 c0 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rax
ffffffff8021f4ec:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f4f0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f4f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4f7:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f4fd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f501:	48 c7 c0 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rax
ffffffff8021f508:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f50c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f50f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f513:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f519:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f51c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f520:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f526:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8021f52d:	48 c7 c2 dd bd 20 80 	mov    $0xffffffff8020bddd,%rdx
ffffffff8021f534:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f538:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f53e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f541:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f545:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f54b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f551:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f555:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f55b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f55f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f563:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f569:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f56d:	48 c7 c0 dd bd 20 80 	mov    $0xffffffff8020bddd,%rax
ffffffff8021f574:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f578:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f57b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f57f:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f585:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f589:	48 c7 c0 dd bd 20 80 	mov    $0xffffffff8020bddd,%rax
ffffffff8021f590:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f594:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f597:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f59b:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f5a1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f5a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5a8:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f5ae:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f5b5:	48 c7 c2 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rdx
ffffffff8021f5bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5c0:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f5c6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f5c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5cd:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f5d3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f5d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5dd:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f5e3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f5e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5eb:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f5f1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f5f5:	48 c7 c0 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rax
ffffffff8021f5fc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f600:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f603:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f607:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f60d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f611:	48 c7 c0 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rax
ffffffff8021f618:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f61c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f61f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f623:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f629:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f62c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f630:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f636:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8021f63d:	48 c7 c2 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rdx
ffffffff8021f644:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f648:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f64e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f651:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f655:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f65b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f661:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f665:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f66b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f66f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f673:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f679:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f67d:	48 c7 c0 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rax
ffffffff8021f684:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f688:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f68b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f68f:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f695:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f699:	48 c7 c0 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rax
ffffffff8021f6a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f6a4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f6a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6ab:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f6b1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f6b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6b8:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f6be:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f6c5:	48 c7 c2 01 be 20 80 	mov    $0xffffffff8020be01,%rdx
ffffffff8021f6cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6d0:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f6d6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f6d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6dd:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f6e3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f6e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6ed:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f6f3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f6f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6fb:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f701:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f705:	48 c7 c0 01 be 20 80 	mov    $0xffffffff8020be01,%rax
ffffffff8021f70c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f710:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f713:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f717:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f71d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f721:	48 c7 c0 01 be 20 80 	mov    $0xffffffff8020be01,%rax
ffffffff8021f728:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f72c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f72f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f733:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f739:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f73c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f740:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f746:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8021f74d:	48 c7 c2 0d be 20 80 	mov    $0xffffffff8020be0d,%rdx
ffffffff8021f754:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f758:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f75e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f761:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f765:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f76b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f771:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f775:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f77b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f77f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f783:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f789:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f78d:	48 c7 c0 0d be 20 80 	mov    $0xffffffff8020be0d,%rax
ffffffff8021f794:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f798:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f79b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f79f:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f7a5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f7a9:	48 c7 c0 0d be 20 80 	mov    $0xffffffff8020be0d,%rax
ffffffff8021f7b0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f7b4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f7b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7bb:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f7c1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f7c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7c8:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f7ce:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f7d5:	48 c7 c2 19 be 20 80 	mov    $0xffffffff8020be19,%rdx
ffffffff8021f7dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7e0:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f7e6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f7e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7ed:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f7f3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f7f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7fd:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f803:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f807:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f80b:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f811:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f815:	48 c7 c0 19 be 20 80 	mov    $0xffffffff8020be19,%rax
ffffffff8021f81c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f820:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f823:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f827:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f82d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f831:	48 c7 c0 19 be 20 80 	mov    $0xffffffff8020be19,%rax
ffffffff8021f838:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f83c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f83f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f843:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f849:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f84c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f850:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f856:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8021f85d:	48 c7 c2 25 be 20 80 	mov    $0xffffffff8020be25,%rdx
ffffffff8021f864:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f868:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f86e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f871:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f875:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f87b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f881:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f885:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f88b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f88f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f893:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f899:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f89d:	48 c7 c0 25 be 20 80 	mov    $0xffffffff8020be25,%rax
ffffffff8021f8a4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f8a8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f8ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8af:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f8b5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f8b9:	48 c7 c0 25 be 20 80 	mov    $0xffffffff8020be25,%rax
ffffffff8021f8c0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f8c4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f8c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8cb:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f8d1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f8d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8d8:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f8de:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f8e5:	48 c7 c2 31 be 20 80 	mov    $0xffffffff8020be31,%rdx
ffffffff8021f8ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8f0:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f8f6:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f8f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8fd:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f903:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f909:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f90d:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f913:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f917:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f91b:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f921:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f925:	48 c7 c0 31 be 20 80 	mov    $0xffffffff8020be31,%rax
ffffffff8021f92c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f930:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f933:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f937:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f93d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f941:	48 c7 c0 31 be 20 80 	mov    $0xffffffff8020be31,%rax
ffffffff8021f948:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f94c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f94f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f953:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f959:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f95c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f960:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f966:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8021f96d:	48 c7 c2 3d be 20 80 	mov    $0xffffffff8020be3d,%rdx
ffffffff8021f974:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f978:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f97e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f981:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f985:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f98b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f991:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f995:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f99b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f99f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9a3:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f9a9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f9ad:	48 c7 c0 3d be 20 80 	mov    $0xffffffff8020be3d,%rax
ffffffff8021f9b4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f9b8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f9bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9bf:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f9c5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f9c9:	48 c7 c0 3d be 20 80 	mov    $0xffffffff8020be3d,%rax
ffffffff8021f9d0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f9d4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f9d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9db:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f9e1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f9e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9e8:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f9ee:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f9f5:	48 c7 c2 49 be 20 80 	mov    $0xffffffff8020be49,%rdx
ffffffff8021f9fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa00:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fa06:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fa09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa0d:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fa13:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fa19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa1d:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fa23:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fa27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa2b:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fa31:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fa35:	48 c7 c0 49 be 20 80 	mov    $0xffffffff8020be49,%rax
ffffffff8021fa3c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fa40:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fa43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa47:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fa4d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fa51:	48 c7 c0 49 be 20 80 	mov    $0xffffffff8020be49,%rax
ffffffff8021fa58:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fa5c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fa5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa63:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fa69:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fa6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa70:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fa76:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8021fa7d:	48 c7 c2 55 be 20 80 	mov    $0xffffffff8020be55,%rdx
ffffffff8021fa84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa88:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fa8e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fa91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa95:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fa9b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021faa1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021faa5:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021faab:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021faaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fab3:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fab9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fabd:	48 c7 c0 55 be 20 80 	mov    $0xffffffff8020be55,%rax
ffffffff8021fac4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fac8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021facb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021facf:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fad5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fad9:	48 c7 c0 55 be 20 80 	mov    $0xffffffff8020be55,%rax
ffffffff8021fae0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fae4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fae7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021faeb:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021faf1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021faf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021faf8:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fafe:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fb05:	48 c7 c2 64 be 20 80 	mov    $0xffffffff8020be64,%rdx
ffffffff8021fb0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb10:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fb16:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fb19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb1d:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fb23:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fb29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb2d:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fb33:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fb37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb3b:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fb41:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fb45:	48 c7 c0 64 be 20 80 	mov    $0xffffffff8020be64,%rax
ffffffff8021fb4c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fb50:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fb53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb57:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fb5d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fb61:	48 c7 c0 64 be 20 80 	mov    $0xffffffff8020be64,%rax
ffffffff8021fb68:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fb6c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fb6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb73:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fb79:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fb7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb80:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fb86:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8021fb8d:	48 c7 c2 73 be 20 80 	mov    $0xffffffff8020be73,%rdx
ffffffff8021fb94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb98:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fb9e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fba1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fba5:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fbab:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fbb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbb5:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fbbb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fbbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbc3:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fbc9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fbcd:	48 c7 c0 73 be 20 80 	mov    $0xffffffff8020be73,%rax
ffffffff8021fbd4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fbd8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fbdb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbdf:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fbe5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fbe9:	48 c7 c0 73 be 20 80 	mov    $0xffffffff8020be73,%rax
ffffffff8021fbf0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fbf4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fbf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbfb:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fc01:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fc04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc08:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fc0e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fc15:	48 c7 c2 82 be 20 80 	mov    $0xffffffff8020be82,%rdx
ffffffff8021fc1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc20:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fc26:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fc29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc2d:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fc33:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fc39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc3d:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fc43:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fc47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc4b:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fc51:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fc55:	48 c7 c0 82 be 20 80 	mov    $0xffffffff8020be82,%rax
ffffffff8021fc5c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fc60:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fc63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc67:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fc6d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fc71:	48 c7 c0 82 be 20 80 	mov    $0xffffffff8020be82,%rax
ffffffff8021fc78:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fc7c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fc7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc83:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fc89:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fc8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc90:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fc96:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8021fc9d:	48 c7 c2 91 be 20 80 	mov    $0xffffffff8020be91,%rdx
ffffffff8021fca4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fca8:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fcae:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fcb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcb5:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fcbb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fcc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcc5:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fccb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fccf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcd3:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fcd9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fcdd:	48 c7 c0 91 be 20 80 	mov    $0xffffffff8020be91,%rax
ffffffff8021fce4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fce8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fceb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcef:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fcf5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fcf9:	48 c7 c0 91 be 20 80 	mov    $0xffffffff8020be91,%rax
ffffffff8021fd00:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fd04:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fd07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd0b:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fd11:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fd14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd18:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fd1e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fd25:	48 c7 c2 a0 be 20 80 	mov    $0xffffffff8020bea0,%rdx
ffffffff8021fd2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd30:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fd36:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fd39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd3d:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fd43:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fd49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd4d:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fd53:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fd57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd5b:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fd61:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fd65:	48 c7 c0 a0 be 20 80 	mov    $0xffffffff8020bea0,%rax
ffffffff8021fd6c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fd70:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fd73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd77:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fd7d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fd81:	48 c7 c0 a0 be 20 80 	mov    $0xffffffff8020bea0,%rax
ffffffff8021fd88:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fd8c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fd8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd93:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fd99:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fd9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fda0:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fda6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8021fdad:	48 c7 c2 af be 20 80 	mov    $0xffffffff8020beaf,%rdx
ffffffff8021fdb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdb8:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fdbe:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fdc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdc5:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fdcb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fdd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdd5:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fddb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fddf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fde3:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fde9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fded:	48 c7 c0 af be 20 80 	mov    $0xffffffff8020beaf,%rax
ffffffff8021fdf4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fdf8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fdfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdff:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fe05:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fe09:	48 c7 c0 af be 20 80 	mov    $0xffffffff8020beaf,%rax
ffffffff8021fe10:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fe14:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe1b:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fe21:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fe24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe28:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fe2e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fe35:	48 c7 c2 be be 20 80 	mov    $0xffffffff8020bebe,%rdx
ffffffff8021fe3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe40:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fe46:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fe49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe4d:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fe53:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fe59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe5d:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fe63:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fe67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe6b:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fe71:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fe75:	48 c7 c0 be be 20 80 	mov    $0xffffffff8020bebe,%rax
ffffffff8021fe7c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fe80:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe87:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fe8d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fe91:	48 c7 c0 be be 20 80 	mov    $0xffffffff8020bebe,%rax
ffffffff8021fe98:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fe9c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fea3:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fea9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021feac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021feb0:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021feb6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8021febd:	48 c7 c2 cd be 20 80 	mov    $0xffffffff8020becd,%rdx
ffffffff8021fec4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fec8:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021fece:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fed1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fed5:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021fedb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fee1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fee5:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021feeb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021feef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fef3:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021fef9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fefd:	48 c7 c0 cd be 20 80 	mov    $0xffffffff8020becd,%rax
ffffffff8021ff04:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ff08:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff0f:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021ff15:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ff19:	48 c7 c0 cd be 20 80 	mov    $0xffffffff8020becd,%rax
ffffffff8021ff20:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ff24:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff2b:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021ff31:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ff34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff38:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021ff3e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ff45:	48 c7 c2 dc be 20 80 	mov    $0xffffffff8020bedc,%rdx
ffffffff8021ff4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff50:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021ff56:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ff59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff5d:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021ff63:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ff69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff6d:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021ff73:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ff77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff7b:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021ff81:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ff85:	48 c7 c0 dc be 20 80 	mov    $0xffffffff8020bedc,%rax
ffffffff8021ff8c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ff90:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff97:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021ff9d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ffa1:	48 c7 c0 dc be 20 80 	mov    $0xffffffff8020bedc,%rax
ffffffff8021ffa8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ffac:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ffaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffb3:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021ffb9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ffbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffc0:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021ffc6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff8021ffcd:	48 c7 c2 eb be 20 80 	mov    $0xffffffff8020beeb,%rdx
ffffffff8021ffd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffd8:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8021ffde:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ffe1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffe5:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8021ffeb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fff1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fff5:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8021fffb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ffff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220003:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff80220009:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022000d:	48 c7 c0 eb be 20 80 	mov    $0xffffffff8020beeb,%rax
ffffffff80220014:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220018:	48 89 c2             	mov    %rax,%rdx
ffffffff8022001b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022001f:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff80220025:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220029:	48 c7 c0 eb be 20 80 	mov    $0xffffffff8020beeb,%rax
ffffffff80220030:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220034:	48 89 c2             	mov    %rax,%rdx
ffffffff80220037:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022003b:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff80220041:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220044:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220048:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8022004e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220055:	48 c7 c2 fa be 20 80 	mov    $0xffffffff8020befa,%rdx
ffffffff8022005c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220060:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff80220066:	66 89 10             	mov    %dx,(%rax)
ffffffff80220069:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022006d:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff80220073:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220079:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022007d:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff80220083:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220087:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022008b:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff80220091:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220095:	48 c7 c0 fa be 20 80 	mov    $0xffffffff8020befa,%rax
ffffffff8022009c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802200a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802200a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200a7:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff802200ad:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802200b1:	48 c7 c0 fa be 20 80 	mov    $0xffffffff8020befa,%rax
ffffffff802200b8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802200bc:	48 89 c2             	mov    %rax,%rdx
ffffffff802200bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200c3:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff802200c9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802200cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200d0:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff802200d6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff802200dd:	48 c7 c2 09 bf 20 80 	mov    $0xffffffff8020bf09,%rdx
ffffffff802200e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200e8:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff802200ee:	66 89 10             	mov    %dx,(%rax)
ffffffff802200f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200f5:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff802200fb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220101:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220105:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff8022010b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022010f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220113:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220119:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022011d:	48 c7 c0 09 bf 20 80 	mov    $0xffffffff8020bf09,%rax
ffffffff80220124:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220128:	48 89 c2             	mov    %rax,%rdx
ffffffff8022012b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022012f:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220135:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220139:	48 c7 c0 09 bf 20 80 	mov    $0xffffffff8020bf09,%rax
ffffffff80220140:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220144:	48 89 c2             	mov    %rax,%rdx
ffffffff80220147:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022014b:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220151:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220154:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220158:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff8022015e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220165:	48 c7 c2 18 bf 20 80 	mov    $0xffffffff8020bf18,%rdx
ffffffff8022016c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220170:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff80220176:	66 89 10             	mov    %dx,(%rax)
ffffffff80220179:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022017d:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff80220183:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220189:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022018d:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff80220193:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220197:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022019b:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802201a1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802201a5:	48 c7 c0 18 bf 20 80 	mov    $0xffffffff8020bf18,%rax
ffffffff802201ac:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802201b0:	48 89 c2             	mov    %rax,%rdx
ffffffff802201b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201b7:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802201bd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802201c1:	48 c7 c0 18 bf 20 80 	mov    $0xffffffff8020bf18,%rax
ffffffff802201c8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802201cc:	48 89 c2             	mov    %rax,%rdx
ffffffff802201cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201d3:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802201d9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802201dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201e0:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802201e6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff802201ed:	48 c7 c2 27 bf 20 80 	mov    $0xffffffff8020bf27,%rdx
ffffffff802201f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201f8:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff802201fe:	66 89 10             	mov    %dx,(%rax)
ffffffff80220201:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220205:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff8022020b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220211:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220215:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff8022021b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022021f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220223:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff80220229:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022022d:	48 c7 c0 27 bf 20 80 	mov    $0xffffffff8020bf27,%rax
ffffffff80220234:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220238:	48 89 c2             	mov    %rax,%rdx
ffffffff8022023b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022023f:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff80220245:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220249:	48 c7 c0 27 bf 20 80 	mov    $0xffffffff8020bf27,%rax
ffffffff80220250:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220254:	48 89 c2             	mov    %rax,%rdx
ffffffff80220257:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022025b:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff80220261:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220264:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220268:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff8022026e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220275:	48 c7 c2 36 bf 20 80 	mov    $0xffffffff8020bf36,%rdx
ffffffff8022027c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220280:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff80220286:	66 89 10             	mov    %dx,(%rax)
ffffffff80220289:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022028d:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff80220293:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220299:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022029d:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802202a3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802202a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202ab:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802202b1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802202b5:	48 c7 c0 36 bf 20 80 	mov    $0xffffffff8020bf36,%rax
ffffffff802202bc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802202c0:	48 89 c2             	mov    %rax,%rdx
ffffffff802202c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202c7:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802202cd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802202d1:	48 c7 c0 36 bf 20 80 	mov    $0xffffffff8020bf36,%rax
ffffffff802202d8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802202dc:	48 89 c2             	mov    %rax,%rdx
ffffffff802202df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202e3:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802202e9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802202ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202f0:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802202f6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff802202fd:	48 c7 c2 45 bf 20 80 	mov    $0xffffffff8020bf45,%rdx
ffffffff80220304:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220308:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff8022030e:	66 89 10             	mov    %dx,(%rax)
ffffffff80220311:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220315:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff8022031b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220321:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220325:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff8022032b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022032f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220333:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220339:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022033d:	48 c7 c0 45 bf 20 80 	mov    $0xffffffff8020bf45,%rax
ffffffff80220344:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220348:	48 89 c2             	mov    %rax,%rdx
ffffffff8022034b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022034f:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220355:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220359:	48 c7 c0 45 bf 20 80 	mov    $0xffffffff8020bf45,%rax
ffffffff80220360:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220364:	48 89 c2             	mov    %rax,%rdx
ffffffff80220367:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022036b:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220371:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220374:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220378:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff8022037e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220385:	48 c7 c2 54 bf 20 80 	mov    $0xffffffff8020bf54,%rdx
ffffffff8022038c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220390:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff80220396:	66 89 10             	mov    %dx,(%rax)
ffffffff80220399:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022039d:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802203a3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802203a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203ad:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802203b3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802203b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203bb:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802203c1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802203c5:	48 c7 c0 54 bf 20 80 	mov    $0xffffffff8020bf54,%rax
ffffffff802203cc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802203d0:	48 89 c2             	mov    %rax,%rdx
ffffffff802203d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203d7:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802203dd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802203e1:	48 c7 c0 54 bf 20 80 	mov    $0xffffffff8020bf54,%rax
ffffffff802203e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802203ec:	48 89 c2             	mov    %rax,%rdx
ffffffff802203ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203f3:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802203f9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802203fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220400:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff80220406:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff8022040d:	48 c7 c2 63 bf 20 80 	mov    $0xffffffff8020bf63,%rdx
ffffffff80220414:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220418:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff8022041e:	66 89 10             	mov    %dx,(%rax)
ffffffff80220421:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220425:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff8022042b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220431:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220435:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff8022043b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022043f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220443:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220449:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022044d:	48 c7 c0 63 bf 20 80 	mov    $0xffffffff8020bf63,%rax
ffffffff80220454:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220458:	48 89 c2             	mov    %rax,%rdx
ffffffff8022045b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022045f:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220465:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220469:	48 c7 c0 63 bf 20 80 	mov    $0xffffffff8020bf63,%rax
ffffffff80220470:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220474:	48 89 c2             	mov    %rax,%rdx
ffffffff80220477:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022047b:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220481:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220484:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220488:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff8022048e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220495:	48 c7 c2 72 bf 20 80 	mov    $0xffffffff8020bf72,%rdx
ffffffff8022049c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204a0:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802204a6:	66 89 10             	mov    %dx,(%rax)
ffffffff802204a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204ad:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802204b3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802204b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204bd:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802204c3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802204c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204cb:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802204d1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802204d5:	48 c7 c0 72 bf 20 80 	mov    $0xffffffff8020bf72,%rax
ffffffff802204dc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802204e0:	48 89 c2             	mov    %rax,%rdx
ffffffff802204e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204e7:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802204ed:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802204f1:	48 c7 c0 72 bf 20 80 	mov    $0xffffffff8020bf72,%rax
ffffffff802204f8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802204fc:	48 89 c2             	mov    %rax,%rdx
ffffffff802204ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220503:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220509:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022050c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220510:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220516:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8022051d:	48 c7 c2 81 bf 20 80 	mov    $0xffffffff8020bf81,%rdx
ffffffff80220524:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220528:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff8022052e:	66 89 10             	mov    %dx,(%rax)
ffffffff80220531:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220535:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff8022053b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220541:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220545:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff8022054b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022054f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220553:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220559:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022055d:	48 c7 c0 81 bf 20 80 	mov    $0xffffffff8020bf81,%rax
ffffffff80220564:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220568:	48 89 c2             	mov    %rax,%rdx
ffffffff8022056b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022056f:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220575:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220579:	48 c7 c0 81 bf 20 80 	mov    $0xffffffff8020bf81,%rax
ffffffff80220580:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220584:	48 89 c2             	mov    %rax,%rdx
ffffffff80220587:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022058b:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220591:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220594:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220598:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff8022059e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802205a5:	48 c7 c2 90 bf 20 80 	mov    $0xffffffff8020bf90,%rdx
ffffffff802205ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205b0:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802205b6:	66 89 10             	mov    %dx,(%rax)
ffffffff802205b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205bd:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802205c3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802205c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205cd:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802205d3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802205d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205db:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802205e1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802205e5:	48 c7 c0 90 bf 20 80 	mov    $0xffffffff8020bf90,%rax
ffffffff802205ec:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802205f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802205f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205f7:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff802205fd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220601:	48 c7 c0 90 bf 20 80 	mov    $0xffffffff8020bf90,%rax
ffffffff80220608:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022060c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022060f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220613:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff80220619:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022061c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220620:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff80220626:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8022062d:	48 c7 c2 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rdx
ffffffff80220634:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220638:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff8022063e:	66 89 10             	mov    %dx,(%rax)
ffffffff80220641:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220645:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff8022064b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220651:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220655:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff8022065b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022065f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220663:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220669:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022066d:	48 c7 c0 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rax
ffffffff80220674:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220678:	48 89 c2             	mov    %rax,%rdx
ffffffff8022067b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022067f:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220685:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220689:	48 c7 c0 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rax
ffffffff80220690:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220694:	48 89 c2             	mov    %rax,%rdx
ffffffff80220697:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022069b:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802206a1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802206a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206a8:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802206ae:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802206b5:	48 c7 c2 ae bf 20 80 	mov    $0xffffffff8020bfae,%rdx
ffffffff802206bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206c0:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff802206c6:	66 89 10             	mov    %dx,(%rax)
ffffffff802206c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206cd:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff802206d3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802206d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206dd:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff802206e3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802206e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206eb:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff802206f1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802206f5:	48 c7 c0 ae bf 20 80 	mov    $0xffffffff8020bfae,%rax
ffffffff802206fc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220700:	48 89 c2             	mov    %rax,%rdx
ffffffff80220703:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220707:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff8022070d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220711:	48 c7 c0 ae bf 20 80 	mov    $0xffffffff8020bfae,%rax
ffffffff80220718:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022071c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022071f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220723:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220729:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022072c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220730:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220736:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8022073d:	48 c7 c2 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rdx
ffffffff80220744:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220748:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff8022074e:	66 89 10             	mov    %dx,(%rax)
ffffffff80220751:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220755:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff8022075b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220761:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220765:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff8022076b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022076f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220773:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220779:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022077d:	48 c7 c0 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rax
ffffffff80220784:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220788:	48 89 c2             	mov    %rax,%rdx
ffffffff8022078b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022078f:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220795:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220799:	48 c7 c0 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rax
ffffffff802207a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802207a4:	48 89 c2             	mov    %rax,%rdx
ffffffff802207a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207ab:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802207b1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802207b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207b8:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802207be:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802207c5:	48 c7 c2 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rdx
ffffffff802207cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207d0:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff802207d6:	66 89 10             	mov    %dx,(%rax)
ffffffff802207d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207dd:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff802207e3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802207e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207ed:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff802207f3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802207f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207fb:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220801:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220805:	48 c7 c0 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rax
ffffffff8022080c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220810:	48 89 c2             	mov    %rax,%rdx
ffffffff80220813:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220817:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff8022081d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220821:	48 c7 c0 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rax
ffffffff80220828:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022082c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022082f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220833:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220839:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022083c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220840:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220846:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8022084d:	48 c7 c2 db bf 20 80 	mov    $0xffffffff8020bfdb,%rdx
ffffffff80220854:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220858:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff8022085e:	66 89 10             	mov    %dx,(%rax)
ffffffff80220861:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220865:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff8022086b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220871:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220875:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff8022087b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022087f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220883:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220889:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022088d:	48 c7 c0 db bf 20 80 	mov    $0xffffffff8020bfdb,%rax
ffffffff80220894:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220898:	48 89 c2             	mov    %rax,%rdx
ffffffff8022089b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022089f:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802208a5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802208a9:	48 c7 c0 db bf 20 80 	mov    $0xffffffff8020bfdb,%rax
ffffffff802208b0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802208b4:	48 89 c2             	mov    %rax,%rdx
ffffffff802208b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208bb:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802208c1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802208c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208c8:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802208ce:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802208d5:	48 c7 c2 ea bf 20 80 	mov    $0xffffffff8020bfea,%rdx
ffffffff802208dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208e0:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff802208e6:	66 89 10             	mov    %dx,(%rax)
ffffffff802208e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208ed:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff802208f3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802208f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208fd:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220903:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220907:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022090b:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220911:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220915:	48 c7 c0 ea bf 20 80 	mov    $0xffffffff8020bfea,%rax
ffffffff8022091c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220920:	48 89 c2             	mov    %rax,%rdx
ffffffff80220923:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220927:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff8022092d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220931:	48 c7 c0 ea bf 20 80 	mov    $0xffffffff8020bfea,%rax
ffffffff80220938:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022093c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022093f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220943:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220949:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022094c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220950:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220956:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8022095d:	48 c7 c2 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rdx
ffffffff80220964:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220968:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff8022096e:	66 89 10             	mov    %dx,(%rax)
ffffffff80220971:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220975:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff8022097b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220981:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220985:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff8022098b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022098f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220993:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220999:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022099d:	48 c7 c0 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rax
ffffffff802209a4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802209a8:	48 89 c2             	mov    %rax,%rdx
ffffffff802209ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209af:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff802209b5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802209b9:	48 c7 c0 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rax
ffffffff802209c0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802209c4:	48 89 c2             	mov    %rax,%rdx
ffffffff802209c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209cb:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff802209d1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802209d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209d8:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff802209de:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802209e5:	48 c7 c2 08 c0 20 80 	mov    $0xffffffff8020c008,%rdx
ffffffff802209ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209f0:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff802209f6:	66 89 10             	mov    %dx,(%rax)
ffffffff802209f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209fd:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220a03:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220a09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a0d:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220a13:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220a17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a1b:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220a21:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220a25:	48 c7 c0 08 c0 20 80 	mov    $0xffffffff8020c008,%rax
ffffffff80220a2c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220a30:	48 89 c2             	mov    %rax,%rdx
ffffffff80220a33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a37:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220a3d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220a41:	48 c7 c0 08 c0 20 80 	mov    $0xffffffff8020c008,%rax
ffffffff80220a48:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220a4c:	48 89 c2             	mov    %rax,%rdx
ffffffff80220a4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a53:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220a59:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220a5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a60:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220a66:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80220a6d:	48 c7 c2 17 c0 20 80 	mov    $0xffffffff8020c017,%rdx
ffffffff80220a74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a78:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220a7e:	66 89 10             	mov    %dx,(%rax)
ffffffff80220a81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a85:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220a8b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220a91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a95:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220a9b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220a9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220aa3:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220aa9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220aad:	48 c7 c0 17 c0 20 80 	mov    $0xffffffff8020c017,%rax
ffffffff80220ab4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220ab8:	48 89 c2             	mov    %rax,%rdx
ffffffff80220abb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220abf:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220ac5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220ac9:	48 c7 c0 17 c0 20 80 	mov    $0xffffffff8020c017,%rax
ffffffff80220ad0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220ad4:	48 89 c2             	mov    %rax,%rdx
ffffffff80220ad7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220adb:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220ae1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220ae4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ae8:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220aee:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220af5:	48 c7 c2 26 c0 20 80 	mov    $0xffffffff8020c026,%rdx
ffffffff80220afc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b00:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220b06:	66 89 10             	mov    %dx,(%rax)
ffffffff80220b09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b0d:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220b13:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220b19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b1d:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220b23:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220b27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b2b:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220b31:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220b35:	48 c7 c0 26 c0 20 80 	mov    $0xffffffff8020c026,%rax
ffffffff80220b3c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220b40:	48 89 c2             	mov    %rax,%rdx
ffffffff80220b43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b47:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220b4d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220b51:	48 c7 c0 26 c0 20 80 	mov    $0xffffffff8020c026,%rax
ffffffff80220b58:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220b5c:	48 89 c2             	mov    %rax,%rdx
ffffffff80220b5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b63:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220b69:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220b6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b70:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220b76:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80220b7d:	48 c7 c2 35 c0 20 80 	mov    $0xffffffff8020c035,%rdx
ffffffff80220b84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b88:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220b8e:	66 89 10             	mov    %dx,(%rax)
ffffffff80220b91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b95:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220b9b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220ba1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ba5:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220bab:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220baf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bb3:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220bb9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220bbd:	48 c7 c0 35 c0 20 80 	mov    $0xffffffff8020c035,%rax
ffffffff80220bc4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220bc8:	48 89 c2             	mov    %rax,%rdx
ffffffff80220bcb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bcf:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220bd5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220bd9:	48 c7 c0 35 c0 20 80 	mov    $0xffffffff8020c035,%rax
ffffffff80220be0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220be4:	48 89 c2             	mov    %rax,%rdx
ffffffff80220be7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220beb:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220bf1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220bf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bf8:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220bfe:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220c05:	48 c7 c2 44 c0 20 80 	mov    $0xffffffff8020c044,%rdx
ffffffff80220c0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c10:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220c16:	66 89 10             	mov    %dx,(%rax)
ffffffff80220c19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c1d:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220c23:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220c29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c2d:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220c33:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220c37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c3b:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220c41:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220c45:	48 c7 c0 44 c0 20 80 	mov    $0xffffffff8020c044,%rax
ffffffff80220c4c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220c50:	48 89 c2             	mov    %rax,%rdx
ffffffff80220c53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c57:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220c5d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220c61:	48 c7 c0 44 c0 20 80 	mov    $0xffffffff8020c044,%rax
ffffffff80220c68:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220c6c:	48 89 c2             	mov    %rax,%rdx
ffffffff80220c6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c73:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220c79:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220c7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c80:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220c86:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80220c8d:	48 c7 c2 53 c0 20 80 	mov    $0xffffffff8020c053,%rdx
ffffffff80220c94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c98:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220c9e:	66 89 10             	mov    %dx,(%rax)
ffffffff80220ca1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ca5:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220cab:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220cb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cb5:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220cbb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220cbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cc3:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220cc9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220ccd:	48 c7 c0 53 c0 20 80 	mov    $0xffffffff8020c053,%rax
ffffffff80220cd4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220cd8:	48 89 c2             	mov    %rax,%rdx
ffffffff80220cdb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cdf:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220ce5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220ce9:	48 c7 c0 53 c0 20 80 	mov    $0xffffffff8020c053,%rax
ffffffff80220cf0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220cf4:	48 89 c2             	mov    %rax,%rdx
ffffffff80220cf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cfb:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220d01:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220d04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d08:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220d0e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220d15:	48 c7 c2 62 c0 20 80 	mov    $0xffffffff8020c062,%rdx
ffffffff80220d1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d20:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220d26:	66 89 10             	mov    %dx,(%rax)
ffffffff80220d29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d2d:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220d33:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220d39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d3d:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220d43:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220d47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d4b:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220d51:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220d55:	48 c7 c0 62 c0 20 80 	mov    $0xffffffff8020c062,%rax
ffffffff80220d5c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220d60:	48 89 c2             	mov    %rax,%rdx
ffffffff80220d63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d67:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220d6d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220d71:	48 c7 c0 62 c0 20 80 	mov    $0xffffffff8020c062,%rax
ffffffff80220d78:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220d7c:	48 89 c2             	mov    %rax,%rdx
ffffffff80220d7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d83:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220d89:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220d8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d90:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220d96:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80220d9d:	48 c7 c2 71 c0 20 80 	mov    $0xffffffff8020c071,%rdx
ffffffff80220da4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220da8:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220dae:	66 89 10             	mov    %dx,(%rax)
ffffffff80220db1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220db5:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220dbb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220dc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dc5:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220dcb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220dcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dd3:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220dd9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220ddd:	48 c7 c0 71 c0 20 80 	mov    $0xffffffff8020c071,%rax
ffffffff80220de4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220de8:	48 89 c2             	mov    %rax,%rdx
ffffffff80220deb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220def:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220df5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220df9:	48 c7 c0 71 c0 20 80 	mov    $0xffffffff8020c071,%rax
ffffffff80220e00:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220e04:	48 89 c2             	mov    %rax,%rdx
ffffffff80220e07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e0b:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220e11:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220e14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e18:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220e1e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220e25:	48 c7 c2 80 c0 20 80 	mov    $0xffffffff8020c080,%rdx
ffffffff80220e2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e30:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220e36:	66 89 10             	mov    %dx,(%rax)
ffffffff80220e39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e3d:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220e43:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220e49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e4d:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220e53:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220e57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e5b:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220e61:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220e65:	48 c7 c0 80 c0 20 80 	mov    $0xffffffff8020c080,%rax
ffffffff80220e6c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220e70:	48 89 c2             	mov    %rax,%rdx
ffffffff80220e73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e77:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220e7d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220e81:	48 c7 c0 80 c0 20 80 	mov    $0xffffffff8020c080,%rax
ffffffff80220e88:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220e8c:	48 89 c2             	mov    %rax,%rdx
ffffffff80220e8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e93:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220e99:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220e9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ea0:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220ea6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80220ead:	48 c7 c2 8f c0 20 80 	mov    $0xffffffff8020c08f,%rdx
ffffffff80220eb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220eb8:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220ebe:	66 89 10             	mov    %dx,(%rax)
ffffffff80220ec1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ec5:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220ecb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220ed1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ed5:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220edb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220edf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ee3:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220ee9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220eed:	48 c7 c0 8f c0 20 80 	mov    $0xffffffff8020c08f,%rax
ffffffff80220ef4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220ef8:	48 89 c2             	mov    %rax,%rdx
ffffffff80220efb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220eff:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220f05:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220f09:	48 c7 c0 8f c0 20 80 	mov    $0xffffffff8020c08f,%rax
ffffffff80220f10:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220f14:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f1b:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220f21:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220f24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f28:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220f2e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220f35:	48 c7 c2 9e c0 20 80 	mov    $0xffffffff8020c09e,%rdx
ffffffff80220f3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f40:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220f46:	66 89 10             	mov    %dx,(%rax)
ffffffff80220f49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f4d:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220f53:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220f59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f5d:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220f63:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220f67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f6b:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220f71:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220f75:	48 c7 c0 9e c0 20 80 	mov    $0xffffffff8020c09e,%rax
ffffffff80220f7c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220f80:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f87:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220f8d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220f91:	48 c7 c0 9e c0 20 80 	mov    $0xffffffff8020c09e,%rax
ffffffff80220f98:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220f9c:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fa3:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220fa9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220fac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fb0:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220fb6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80220fbd:	48 c7 c2 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rdx
ffffffff80220fc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fc8:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80220fce:	66 89 10             	mov    %dx,(%rax)
ffffffff80220fd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fd5:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80220fdb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220fe1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fe5:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80220feb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220fef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ff3:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80220ff9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220ffd:	48 c7 c0 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rax
ffffffff80221004:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221008:	48 89 c2             	mov    %rax,%rdx
ffffffff8022100b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022100f:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221015:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221019:	48 c7 c0 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rax
ffffffff80221020:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221024:	48 89 c2             	mov    %rax,%rdx
ffffffff80221027:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022102b:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221031:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221034:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221038:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff8022103e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221045:	48 c7 c2 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rdx
ffffffff8022104c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221050:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80221056:	66 89 10             	mov    %dx,(%rax)
ffffffff80221059:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022105d:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80221063:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221069:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022106d:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80221073:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221077:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022107b:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80221081:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221085:	48 c7 c0 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rax
ffffffff8022108c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221090:	48 89 c2             	mov    %rax,%rdx
ffffffff80221093:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221097:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff8022109d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802210a1:	48 c7 c0 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rax
ffffffff802210a8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802210ac:	48 89 c2             	mov    %rax,%rdx
ffffffff802210af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210b3:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff802210b9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802210bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210c0:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff802210c6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff802210cd:	48 c7 c2 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rdx
ffffffff802210d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210d8:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff802210de:	66 89 10             	mov    %dx,(%rax)
ffffffff802210e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210e5:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff802210eb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802210f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210f5:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff802210fb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802210ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221103:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221109:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022110d:	48 c7 c0 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rax
ffffffff80221114:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221118:	48 89 c2             	mov    %rax,%rdx
ffffffff8022111b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022111f:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221125:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221129:	48 c7 c0 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rax
ffffffff80221130:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221134:	48 89 c2             	mov    %rax,%rdx
ffffffff80221137:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022113b:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221141:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221144:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221148:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff8022114e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221155:	48 c7 c2 da c0 20 80 	mov    $0xffffffff8020c0da,%rdx
ffffffff8022115c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221160:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff80221166:	66 89 10             	mov    %dx,(%rax)
ffffffff80221169:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022116d:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff80221173:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221179:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022117d:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff80221183:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221187:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022118b:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff80221191:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221195:	48 c7 c0 da c0 20 80 	mov    $0xffffffff8020c0da,%rax
ffffffff8022119c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802211a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802211a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211a7:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802211ad:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802211b1:	48 c7 c0 da c0 20 80 	mov    $0xffffffff8020c0da,%rax
ffffffff802211b8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802211bc:	48 89 c2             	mov    %rax,%rdx
ffffffff802211bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211c3:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802211c9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802211cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211d0:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802211d6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff802211dd:	48 c7 c2 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rdx
ffffffff802211e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211e8:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802211ee:	66 89 10             	mov    %dx,(%rax)
ffffffff802211f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211f5:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802211fb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221201:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221205:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff8022120b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022120f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221213:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221219:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022121d:	48 c7 c0 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rax
ffffffff80221224:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221228:	48 89 c2             	mov    %rax,%rdx
ffffffff8022122b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022122f:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221235:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221239:	48 c7 c0 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rax
ffffffff80221240:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221244:	48 89 c2             	mov    %rax,%rdx
ffffffff80221247:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022124b:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221251:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221254:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221258:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff8022125e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221265:	48 c7 c2 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rdx
ffffffff8022126c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221270:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff80221276:	66 89 10             	mov    %dx,(%rax)
ffffffff80221279:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022127d:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff80221283:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221289:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022128d:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff80221293:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221297:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022129b:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802212a1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802212a5:	48 c7 c0 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rax
ffffffff802212ac:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802212b0:	48 89 c2             	mov    %rax,%rdx
ffffffff802212b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212b7:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802212bd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802212c1:	48 c7 c0 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rax
ffffffff802212c8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802212cc:	48 89 c2             	mov    %rax,%rdx
ffffffff802212cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212d3:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802212d9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802212dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212e0:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802212e6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff802212ed:	48 c7 c2 07 c1 20 80 	mov    $0xffffffff8020c107,%rdx
ffffffff802212f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212f8:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff802212fe:	66 89 10             	mov    %dx,(%rax)
ffffffff80221301:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221305:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff8022130b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221311:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221315:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff8022131b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022131f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221323:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff80221329:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022132d:	48 c7 c0 07 c1 20 80 	mov    $0xffffffff8020c107,%rax
ffffffff80221334:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221338:	48 89 c2             	mov    %rax,%rdx
ffffffff8022133b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022133f:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff80221345:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221349:	48 c7 c0 07 c1 20 80 	mov    $0xffffffff8020c107,%rax
ffffffff80221350:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221354:	48 89 c2             	mov    %rax,%rdx
ffffffff80221357:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022135b:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff80221361:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221364:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221368:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff8022136e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221375:	48 c7 c2 16 c1 20 80 	mov    $0xffffffff8020c116,%rdx
ffffffff8022137c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221380:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff80221386:	66 89 10             	mov    %dx,(%rax)
ffffffff80221389:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022138d:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff80221393:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221399:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022139d:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802213a3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802213a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213ab:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802213b1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802213b5:	48 c7 c0 16 c1 20 80 	mov    $0xffffffff8020c116,%rax
ffffffff802213bc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802213c0:	48 89 c2             	mov    %rax,%rdx
ffffffff802213c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213c7:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802213cd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802213d1:	48 c7 c0 16 c1 20 80 	mov    $0xffffffff8020c116,%rax
ffffffff802213d8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802213dc:	48 89 c2             	mov    %rax,%rdx
ffffffff802213df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213e3:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802213e9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802213ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213f0:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802213f6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff802213fd:	48 c7 c2 25 c1 20 80 	mov    $0xffffffff8020c125,%rdx
ffffffff80221404:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221408:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff8022140e:	66 89 10             	mov    %dx,(%rax)
ffffffff80221411:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221415:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff8022141b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221421:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221425:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff8022142b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022142f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221433:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221439:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022143d:	48 c7 c0 25 c1 20 80 	mov    $0xffffffff8020c125,%rax
ffffffff80221444:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221448:	48 89 c2             	mov    %rax,%rdx
ffffffff8022144b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022144f:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221455:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221459:	48 c7 c0 25 c1 20 80 	mov    $0xffffffff8020c125,%rax
ffffffff80221460:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221464:	48 89 c2             	mov    %rax,%rdx
ffffffff80221467:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022146b:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221471:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221474:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221478:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff8022147e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221485:	48 c7 c2 34 c1 20 80 	mov    $0xffffffff8020c134,%rdx
ffffffff8022148c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221490:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff80221496:	66 89 10             	mov    %dx,(%rax)
ffffffff80221499:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022149d:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802214a3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802214a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214ad:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802214b3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802214b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214bb:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802214c1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802214c5:	48 c7 c0 34 c1 20 80 	mov    $0xffffffff8020c134,%rax
ffffffff802214cc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802214d0:	48 89 c2             	mov    %rax,%rdx
ffffffff802214d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214d7:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802214dd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802214e1:	48 c7 c0 34 c1 20 80 	mov    $0xffffffff8020c134,%rax
ffffffff802214e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802214ec:	48 89 c2             	mov    %rax,%rdx
ffffffff802214ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214f3:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802214f9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802214fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221500:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff80221506:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8022150d:	48 c7 c2 43 c1 20 80 	mov    $0xffffffff8020c143,%rdx
ffffffff80221514:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221518:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff8022151e:	66 89 10             	mov    %dx,(%rax)
ffffffff80221521:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221525:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff8022152b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221531:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221535:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff8022153b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022153f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221543:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221549:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022154d:	48 c7 c0 43 c1 20 80 	mov    $0xffffffff8020c143,%rax
ffffffff80221554:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221558:	48 89 c2             	mov    %rax,%rdx
ffffffff8022155b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022155f:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221565:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221569:	48 c7 c0 43 c1 20 80 	mov    $0xffffffff8020c143,%rax
ffffffff80221570:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221574:	48 89 c2             	mov    %rax,%rdx
ffffffff80221577:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022157b:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221581:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221584:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221588:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff8022158e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221595:	48 c7 c2 52 c1 20 80 	mov    $0xffffffff8020c152,%rdx
ffffffff8022159c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215a0:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802215a6:	66 89 10             	mov    %dx,(%rax)
ffffffff802215a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215ad:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802215b3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802215b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215bd:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802215c3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802215c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215cb:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802215d1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802215d5:	48 c7 c0 52 c1 20 80 	mov    $0xffffffff8020c152,%rax
ffffffff802215dc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802215e0:	48 89 c2             	mov    %rax,%rdx
ffffffff802215e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215e7:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802215ed:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802215f1:	48 c7 c0 52 c1 20 80 	mov    $0xffffffff8020c152,%rax
ffffffff802215f8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802215fc:	48 89 c2             	mov    %rax,%rdx
ffffffff802215ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221603:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221609:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022160c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221610:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221616:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff8022161d:	48 c7 c2 61 c1 20 80 	mov    $0xffffffff8020c161,%rdx
ffffffff80221624:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221628:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff8022162e:	66 89 10             	mov    %dx,(%rax)
ffffffff80221631:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221635:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff8022163b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221641:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221645:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff8022164b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022164f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221653:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221659:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022165d:	48 c7 c0 61 c1 20 80 	mov    $0xffffffff8020c161,%rax
ffffffff80221664:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221668:	48 89 c2             	mov    %rax,%rdx
ffffffff8022166b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022166f:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221675:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221679:	48 c7 c0 61 c1 20 80 	mov    $0xffffffff8020c161,%rax
ffffffff80221680:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221684:	48 89 c2             	mov    %rax,%rdx
ffffffff80221687:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022168b:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221691:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221694:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221698:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff8022169e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802216a5:	48 c7 c2 70 c1 20 80 	mov    $0xffffffff8020c170,%rdx
ffffffff802216ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216b0:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802216b6:	66 89 10             	mov    %dx,(%rax)
ffffffff802216b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216bd:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802216c3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802216c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216cd:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802216d3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802216d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216db:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802216e1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802216e5:	48 c7 c0 70 c1 20 80 	mov    $0xffffffff8020c170,%rax
ffffffff802216ec:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802216f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802216f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216f7:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff802216fd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221701:	48 c7 c0 70 c1 20 80 	mov    $0xffffffff8020c170,%rax
ffffffff80221708:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022170c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022170f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221713:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff80221719:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022171c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221720:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff80221726:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff8022172d:	48 c7 c2 7f c1 20 80 	mov    $0xffffffff8020c17f,%rdx
ffffffff80221734:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221738:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff8022173e:	66 89 10             	mov    %dx,(%rax)
ffffffff80221741:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221745:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff8022174b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221751:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221755:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff8022175b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022175f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221763:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221769:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022176d:	48 c7 c0 7f c1 20 80 	mov    $0xffffffff8020c17f,%rax
ffffffff80221774:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221778:	48 89 c2             	mov    %rax,%rdx
ffffffff8022177b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022177f:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221785:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221789:	48 c7 c0 7f c1 20 80 	mov    $0xffffffff8020c17f,%rax
ffffffff80221790:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221794:	48 89 c2             	mov    %rax,%rdx
ffffffff80221797:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022179b:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802217a1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802217a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217a8:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802217ae:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802217b5:	48 c7 c2 8e c1 20 80 	mov    $0xffffffff8020c18e,%rdx
ffffffff802217bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217c0:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff802217c6:	66 89 10             	mov    %dx,(%rax)
ffffffff802217c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217cd:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff802217d3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802217d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217dd:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff802217e3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802217e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217eb:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff802217f1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802217f5:	48 c7 c0 8e c1 20 80 	mov    $0xffffffff8020c18e,%rax
ffffffff802217fc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221800:	48 89 c2             	mov    %rax,%rdx
ffffffff80221803:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221807:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff8022180d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221811:	48 c7 c0 8e c1 20 80 	mov    $0xffffffff8020c18e,%rax
ffffffff80221818:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022181c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022181f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221823:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221829:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022182c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221830:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221836:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff8022183d:	48 c7 c2 9d c1 20 80 	mov    $0xffffffff8020c19d,%rdx
ffffffff80221844:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221848:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff8022184e:	66 89 10             	mov    %dx,(%rax)
ffffffff80221851:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221855:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff8022185b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221861:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221865:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff8022186b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022186f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221873:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221879:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022187d:	48 c7 c0 9d c1 20 80 	mov    $0xffffffff8020c19d,%rax
ffffffff80221884:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221888:	48 89 c2             	mov    %rax,%rdx
ffffffff8022188b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022188f:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221895:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221899:	48 c7 c0 9d c1 20 80 	mov    $0xffffffff8020c19d,%rax
ffffffff802218a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802218a4:	48 89 c2             	mov    %rax,%rdx
ffffffff802218a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218ab:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802218b1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802218b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218b8:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802218be:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802218c5:	48 c7 c2 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rdx
ffffffff802218cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218d0:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff802218d6:	66 89 10             	mov    %dx,(%rax)
ffffffff802218d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218dd:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff802218e3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802218e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218ed:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff802218f3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802218f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218fb:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221901:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221905:	48 c7 c0 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rax
ffffffff8022190c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221910:	48 89 c2             	mov    %rax,%rdx
ffffffff80221913:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221917:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff8022191d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221921:	48 c7 c0 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rax
ffffffff80221928:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022192c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022192f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221933:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221939:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022193c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221940:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221946:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8022194d:	48 c7 c2 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rdx
ffffffff80221954:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221958:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff8022195e:	66 89 10             	mov    %dx,(%rax)
ffffffff80221961:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221965:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff8022196b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221971:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221975:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff8022197b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022197f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221983:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221989:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022198d:	48 c7 c0 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rax
ffffffff80221994:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221998:	48 89 c2             	mov    %rax,%rdx
ffffffff8022199b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022199f:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff802219a5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802219a9:	48 c7 c0 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rax
ffffffff802219b0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802219b4:	48 89 c2             	mov    %rax,%rdx
ffffffff802219b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219bb:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff802219c1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802219c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219c8:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff802219ce:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802219d5:	48 c7 c2 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rdx
ffffffff802219dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219e0:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff802219e6:	66 89 10             	mov    %dx,(%rax)
ffffffff802219e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219ed:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff802219f3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802219f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219fd:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221a03:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221a07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a0b:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221a11:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221a15:	48 c7 c0 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rax
ffffffff80221a1c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221a20:	48 89 c2             	mov    %rax,%rdx
ffffffff80221a23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a27:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221a2d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221a31:	48 c7 c0 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rax
ffffffff80221a38:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221a3c:	48 89 c2             	mov    %rax,%rdx
ffffffff80221a3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a43:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221a49:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221a4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a50:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221a56:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80221a5d:	48 c7 c2 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rdx
ffffffff80221a64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a68:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221a6e:	66 89 10             	mov    %dx,(%rax)
ffffffff80221a71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a75:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221a7b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221a81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a85:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221a8b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221a8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a93:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221a99:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221a9d:	48 c7 c0 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rax
ffffffff80221aa4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221aa8:	48 89 c2             	mov    %rax,%rdx
ffffffff80221aab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221aaf:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221ab5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221ab9:	48 c7 c0 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rax
ffffffff80221ac0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221ac4:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ac7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221acb:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221ad1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221ad4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ad8:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221ade:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221ae5:	48 c7 c2 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rdx
ffffffff80221aec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221af0:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221af6:	66 89 10             	mov    %dx,(%rax)
ffffffff80221af9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221afd:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221b03:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221b09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b0d:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221b13:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221b17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b1b:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221b21:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221b25:	48 c7 c0 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rax
ffffffff80221b2c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221b30:	48 89 c2             	mov    %rax,%rdx
ffffffff80221b33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b37:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221b3d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221b41:	48 c7 c0 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rax
ffffffff80221b48:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221b4c:	48 89 c2             	mov    %rax,%rdx
ffffffff80221b4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b53:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221b59:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221b5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b60:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221b66:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80221b6d:	48 c7 c2 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rdx
ffffffff80221b74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b78:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221b7e:	66 89 10             	mov    %dx,(%rax)
ffffffff80221b81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b85:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221b8b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221b91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b95:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221b9b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221b9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ba3:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221ba9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221bad:	48 c7 c0 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rax
ffffffff80221bb4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221bb8:	48 89 c2             	mov    %rax,%rdx
ffffffff80221bbb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bbf:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221bc5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221bc9:	48 c7 c0 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rax
ffffffff80221bd0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221bd4:	48 89 c2             	mov    %rax,%rdx
ffffffff80221bd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bdb:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221be1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221be4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221be8:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221bee:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221bf5:	48 c7 c2 06 c2 20 80 	mov    $0xffffffff8020c206,%rdx
ffffffff80221bfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c00:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221c06:	66 89 10             	mov    %dx,(%rax)
ffffffff80221c09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c0d:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221c13:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221c19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c1d:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221c23:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221c27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c2b:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221c31:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221c35:	48 c7 c0 06 c2 20 80 	mov    $0xffffffff8020c206,%rax
ffffffff80221c3c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221c40:	48 89 c2             	mov    %rax,%rdx
ffffffff80221c43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c47:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221c4d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221c51:	48 c7 c0 06 c2 20 80 	mov    $0xffffffff8020c206,%rax
ffffffff80221c58:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221c5c:	48 89 c2             	mov    %rax,%rdx
ffffffff80221c5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c63:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221c69:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221c6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c70:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221c76:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80221c7d:	48 c7 c2 15 c2 20 80 	mov    $0xffffffff8020c215,%rdx
ffffffff80221c84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c88:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221c8e:	66 89 10             	mov    %dx,(%rax)
ffffffff80221c91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c95:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221c9b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221ca1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ca5:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221cab:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221caf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cb3:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221cb9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221cbd:	48 c7 c0 15 c2 20 80 	mov    $0xffffffff8020c215,%rax
ffffffff80221cc4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221cc8:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ccb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ccf:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221cd5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221cd9:	48 c7 c0 15 c2 20 80 	mov    $0xffffffff8020c215,%rax
ffffffff80221ce0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221ce4:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ce7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ceb:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221cf1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221cf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cf8:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221cfe:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221d05:	48 c7 c2 24 c2 20 80 	mov    $0xffffffff8020c224,%rdx
ffffffff80221d0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d10:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221d16:	66 89 10             	mov    %dx,(%rax)
ffffffff80221d19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d1d:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221d23:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221d29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d2d:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221d33:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221d37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d3b:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221d41:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221d45:	48 c7 c0 24 c2 20 80 	mov    $0xffffffff8020c224,%rax
ffffffff80221d4c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221d50:	48 89 c2             	mov    %rax,%rdx
ffffffff80221d53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d57:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221d5d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221d61:	48 c7 c0 24 c2 20 80 	mov    $0xffffffff8020c224,%rax
ffffffff80221d68:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221d6c:	48 89 c2             	mov    %rax,%rdx
ffffffff80221d6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d73:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221d79:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221d7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d80:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221d86:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80221d8d:	48 c7 c2 33 c2 20 80 	mov    $0xffffffff8020c233,%rdx
ffffffff80221d94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d98:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221d9e:	66 89 10             	mov    %dx,(%rax)
ffffffff80221da1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221da5:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221dab:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221db1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221db5:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221dbb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221dbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221dc3:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221dc9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221dcd:	48 c7 c0 33 c2 20 80 	mov    $0xffffffff8020c233,%rax
ffffffff80221dd4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221dd8:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ddb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ddf:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221de5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221de9:	48 c7 c0 33 c2 20 80 	mov    $0xffffffff8020c233,%rax
ffffffff80221df0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221df4:	48 89 c2             	mov    %rax,%rdx
ffffffff80221df7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221dfb:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221e01:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221e04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e08:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221e0e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221e15:	48 c7 c2 42 c2 20 80 	mov    $0xffffffff8020c242,%rdx
ffffffff80221e1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e20:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221e26:	66 89 10             	mov    %dx,(%rax)
ffffffff80221e29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e2d:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221e33:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221e39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e3d:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221e43:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221e47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e4b:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221e51:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221e55:	48 c7 c0 42 c2 20 80 	mov    $0xffffffff8020c242,%rax
ffffffff80221e5c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221e60:	48 89 c2             	mov    %rax,%rdx
ffffffff80221e63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e67:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221e6d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221e71:	48 c7 c0 42 c2 20 80 	mov    $0xffffffff8020c242,%rax
ffffffff80221e78:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221e7c:	48 89 c2             	mov    %rax,%rdx
ffffffff80221e7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e83:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221e89:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221e8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e90:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221e96:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80221e9d:	48 c7 c2 51 c2 20 80 	mov    $0xffffffff8020c251,%rdx
ffffffff80221ea4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ea8:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221eae:	66 89 10             	mov    %dx,(%rax)
ffffffff80221eb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221eb5:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221ebb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221ec1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ec5:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221ecb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221ecf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ed3:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221ed9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221edd:	48 c7 c0 51 c2 20 80 	mov    $0xffffffff8020c251,%rax
ffffffff80221ee4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221ee8:	48 89 c2             	mov    %rax,%rdx
ffffffff80221eeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221eef:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221ef5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221ef9:	48 c7 c0 51 c2 20 80 	mov    $0xffffffff8020c251,%rax
ffffffff80221f00:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221f04:	48 89 c2             	mov    %rax,%rdx
ffffffff80221f07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f0b:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221f11:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221f14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f18:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221f1e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221f25:	48 c7 c2 60 c2 20 80 	mov    $0xffffffff8020c260,%rdx
ffffffff80221f2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f30:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221f36:	66 89 10             	mov    %dx,(%rax)
ffffffff80221f39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f3d:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221f43:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221f49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f4d:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221f53:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221f57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f5b:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221f61:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221f65:	48 c7 c0 60 c2 20 80 	mov    $0xffffffff8020c260,%rax
ffffffff80221f6c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221f70:	48 89 c2             	mov    %rax,%rdx
ffffffff80221f73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f77:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221f7d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221f81:	48 c7 c0 60 c2 20 80 	mov    $0xffffffff8020c260,%rax
ffffffff80221f88:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221f8c:	48 89 c2             	mov    %rax,%rdx
ffffffff80221f8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f93:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221f99:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221f9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fa0:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221fa6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80221fad:	48 c7 c2 6f c2 20 80 	mov    $0xffffffff8020c26f,%rdx
ffffffff80221fb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fb8:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80221fbe:	66 89 10             	mov    %dx,(%rax)
ffffffff80221fc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fc5:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80221fcb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221fd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fd5:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80221fdb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221fdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fe3:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80221fe9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221fed:	48 c7 c0 6f c2 20 80 	mov    $0xffffffff8020c26f,%rax
ffffffff80221ff4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221ff8:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ffb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fff:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222005:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222009:	48 c7 c0 6f c2 20 80 	mov    $0xffffffff8020c26f,%rax
ffffffff80222010:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222014:	48 89 c2             	mov    %rax,%rdx
ffffffff80222017:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022201b:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222021:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222024:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222028:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff8022202e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222035:	48 c7 c2 7e c2 20 80 	mov    $0xffffffff8020c27e,%rdx
ffffffff8022203c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222040:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80222046:	66 89 10             	mov    %dx,(%rax)
ffffffff80222049:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022204d:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80222053:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222059:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022205d:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80222063:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222067:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022206b:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80222071:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222075:	48 c7 c0 7e c2 20 80 	mov    $0xffffffff8020c27e,%rax
ffffffff8022207c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222080:	48 89 c2             	mov    %rax,%rdx
ffffffff80222083:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222087:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff8022208d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222091:	48 c7 c0 7e c2 20 80 	mov    $0xffffffff8020c27e,%rax
ffffffff80222098:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022209c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022209f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220a3:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802220a9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802220ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220b0:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802220b6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff802220bd:	48 c7 c2 8d c2 20 80 	mov    $0xffffffff8020c28d,%rdx
ffffffff802220c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220c8:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff802220ce:	66 89 10             	mov    %dx,(%rax)
ffffffff802220d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220d5:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff802220db:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802220e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220e5:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff802220eb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802220ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220f3:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff802220f9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802220fd:	48 c7 c0 8d c2 20 80 	mov    $0xffffffff8020c28d,%rax
ffffffff80222104:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222108:	48 89 c2             	mov    %rax,%rdx
ffffffff8022210b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022210f:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222115:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222119:	48 c7 c0 8d c2 20 80 	mov    $0xffffffff8020c28d,%rax
ffffffff80222120:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222124:	48 89 c2             	mov    %rax,%rdx
ffffffff80222127:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022212b:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222131:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222134:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222138:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff8022213e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222145:	48 c7 c2 9c c2 20 80 	mov    $0xffffffff8020c29c,%rdx
ffffffff8022214c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222150:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff80222156:	66 89 10             	mov    %dx,(%rax)
ffffffff80222159:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022215d:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff80222163:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222169:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022216d:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff80222173:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222177:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022217b:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff80222181:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222185:	48 c7 c0 9c c2 20 80 	mov    $0xffffffff8020c29c,%rax
ffffffff8022218c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222190:	48 89 c2             	mov    %rax,%rdx
ffffffff80222193:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222197:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff8022219d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802221a1:	48 c7 c0 9c c2 20 80 	mov    $0xffffffff8020c29c,%rax
ffffffff802221a8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802221ac:	48 89 c2             	mov    %rax,%rdx
ffffffff802221af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221b3:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802221b9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802221bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221c0:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802221c6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff802221cd:	48 c7 c2 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rdx
ffffffff802221d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221d8:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802221de:	66 89 10             	mov    %dx,(%rax)
ffffffff802221e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221e5:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802221eb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802221f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221f5:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802221fb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802221ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222203:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222209:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022220d:	48 c7 c0 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rax
ffffffff80222214:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222218:	48 89 c2             	mov    %rax,%rdx
ffffffff8022221b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022221f:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222225:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222229:	48 c7 c0 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rax
ffffffff80222230:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222234:	48 89 c2             	mov    %rax,%rdx
ffffffff80222237:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022223b:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222241:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222244:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222248:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff8022224e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222255:	48 c7 c2 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rdx
ffffffff8022225c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222260:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff80222266:	66 89 10             	mov    %dx,(%rax)
ffffffff80222269:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022226d:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff80222273:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222279:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022227d:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff80222283:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222287:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022228b:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff80222291:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222295:	48 c7 c0 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rax
ffffffff8022229c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802222a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802222a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222a7:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802222ad:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802222b1:	48 c7 c0 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rax
ffffffff802222b8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802222bc:	48 89 c2             	mov    %rax,%rdx
ffffffff802222bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222c3:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802222c9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802222cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222d0:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802222d6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff802222dd:	48 c7 c2 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rdx
ffffffff802222e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222e8:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802222ee:	66 89 10             	mov    %dx,(%rax)
ffffffff802222f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222f5:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802222fb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222301:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222305:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff8022230b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022230f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222313:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222319:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022231d:	48 c7 c0 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rax
ffffffff80222324:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222328:	48 89 c2             	mov    %rax,%rdx
ffffffff8022232b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022232f:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222335:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222339:	48 c7 c0 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rax
ffffffff80222340:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222344:	48 89 c2             	mov    %rax,%rdx
ffffffff80222347:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022234b:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222351:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222354:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222358:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff8022235e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222365:	48 c7 c2 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rdx
ffffffff8022236c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222370:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff80222376:	66 89 10             	mov    %dx,(%rax)
ffffffff80222379:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022237d:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff80222383:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222389:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022238d:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff80222393:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222397:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022239b:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802223a1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802223a5:	48 c7 c0 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rax
ffffffff802223ac:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802223b0:	48 89 c2             	mov    %rax,%rdx
ffffffff802223b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223b7:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802223bd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802223c1:	48 c7 c0 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rax
ffffffff802223c8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802223cc:	48 89 c2             	mov    %rax,%rdx
ffffffff802223cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223d3:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802223d9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802223dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223e0:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802223e6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802223ed:	48 c7 c2 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rdx
ffffffff802223f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223f8:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff802223fe:	66 89 10             	mov    %dx,(%rax)
ffffffff80222401:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222405:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff8022240b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222411:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222415:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff8022241b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022241f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222423:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff80222429:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022242d:	48 c7 c0 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rax
ffffffff80222434:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222438:	48 89 c2             	mov    %rax,%rdx
ffffffff8022243b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022243f:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff80222445:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222449:	48 c7 c0 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rax
ffffffff80222450:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222454:	48 89 c2             	mov    %rax,%rdx
ffffffff80222457:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022245b:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff80222461:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222464:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222468:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff8022246e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222475:	48 c7 c2 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rdx
ffffffff8022247c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222480:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff80222486:	66 89 10             	mov    %dx,(%rax)
ffffffff80222489:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022248d:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff80222493:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222499:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022249d:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802224a3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802224a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224ab:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802224b1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802224b5:	48 c7 c0 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rax
ffffffff802224bc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802224c0:	48 89 c2             	mov    %rax,%rdx
ffffffff802224c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224c7:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802224cd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802224d1:	48 c7 c0 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rax
ffffffff802224d8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802224dc:	48 89 c2             	mov    %rax,%rdx
ffffffff802224df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224e3:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802224e9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802224ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224f0:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802224f6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802224fd:	48 c7 c2 05 c3 20 80 	mov    $0xffffffff8020c305,%rdx
ffffffff80222504:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222508:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff8022250e:	66 89 10             	mov    %dx,(%rax)
ffffffff80222511:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222515:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff8022251b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222521:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222525:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff8022252b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022252f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222533:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222539:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022253d:	48 c7 c0 05 c3 20 80 	mov    $0xffffffff8020c305,%rax
ffffffff80222544:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222548:	48 89 c2             	mov    %rax,%rdx
ffffffff8022254b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022254f:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222555:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222559:	48 c7 c0 05 c3 20 80 	mov    $0xffffffff8020c305,%rax
ffffffff80222560:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222564:	48 89 c2             	mov    %rax,%rdx
ffffffff80222567:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022256b:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222571:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222574:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222578:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff8022257e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222585:	48 c7 c2 14 c3 20 80 	mov    $0xffffffff8020c314,%rdx
ffffffff8022258c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222590:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff80222596:	66 89 10             	mov    %dx,(%rax)
ffffffff80222599:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022259d:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802225a3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802225a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225ad:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802225b3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802225b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225bb:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802225c1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802225c5:	48 c7 c0 14 c3 20 80 	mov    $0xffffffff8020c314,%rax
ffffffff802225cc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802225d0:	48 89 c2             	mov    %rax,%rdx
ffffffff802225d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225d7:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802225dd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802225e1:	48 c7 c0 14 c3 20 80 	mov    $0xffffffff8020c314,%rax
ffffffff802225e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802225ec:	48 89 c2             	mov    %rax,%rdx
ffffffff802225ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225f3:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802225f9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802225fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222600:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff80222606:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff8022260d:	48 c7 c2 23 c3 20 80 	mov    $0xffffffff8020c323,%rdx
ffffffff80222614:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222618:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff8022261e:	66 89 10             	mov    %dx,(%rax)
ffffffff80222621:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222625:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff8022262b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222631:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222635:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff8022263b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022263f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222643:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222649:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022264d:	48 c7 c0 23 c3 20 80 	mov    $0xffffffff8020c323,%rax
ffffffff80222654:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222658:	48 89 c2             	mov    %rax,%rdx
ffffffff8022265b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022265f:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222665:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222669:	48 c7 c0 23 c3 20 80 	mov    $0xffffffff8020c323,%rax
ffffffff80222670:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222674:	48 89 c2             	mov    %rax,%rdx
ffffffff80222677:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022267b:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222681:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222684:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222688:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff8022268e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222695:	48 c7 c2 32 c3 20 80 	mov    $0xffffffff8020c332,%rdx
ffffffff8022269c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226a0:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802226a6:	66 89 10             	mov    %dx,(%rax)
ffffffff802226a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226ad:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802226b3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802226b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226bd:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802226c3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802226c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226cb:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802226d1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802226d5:	48 c7 c0 32 c3 20 80 	mov    $0xffffffff8020c332,%rax
ffffffff802226dc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802226e0:	48 89 c2             	mov    %rax,%rdx
ffffffff802226e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226e7:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802226ed:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802226f1:	48 c7 c0 32 c3 20 80 	mov    $0xffffffff8020c332,%rax
ffffffff802226f8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802226fc:	48 89 c2             	mov    %rax,%rdx
ffffffff802226ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222703:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222709:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022270c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222710:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222716:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff8022271d:	48 c7 c2 41 c3 20 80 	mov    $0xffffffff8020c341,%rdx
ffffffff80222724:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222728:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff8022272e:	66 89 10             	mov    %dx,(%rax)
ffffffff80222731:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222735:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff8022273b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222741:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222745:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff8022274b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022274f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222753:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222759:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022275d:	48 c7 c0 41 c3 20 80 	mov    $0xffffffff8020c341,%rax
ffffffff80222764:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222768:	48 89 c2             	mov    %rax,%rdx
ffffffff8022276b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022276f:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222775:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222779:	48 c7 c0 41 c3 20 80 	mov    $0xffffffff8020c341,%rax
ffffffff80222780:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222784:	48 89 c2             	mov    %rax,%rdx
ffffffff80222787:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022278b:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222791:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222794:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222798:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff8022279e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802227a5:	48 c7 c2 50 c3 20 80 	mov    $0xffffffff8020c350,%rdx
ffffffff802227ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227b0:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802227b6:	66 89 10             	mov    %dx,(%rax)
ffffffff802227b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227bd:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802227c3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802227c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227cd:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802227d3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802227d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227db:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802227e1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802227e5:	48 c7 c0 50 c3 20 80 	mov    $0xffffffff8020c350,%rax
ffffffff802227ec:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802227f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802227f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227f7:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff802227fd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222801:	48 c7 c0 50 c3 20 80 	mov    $0xffffffff8020c350,%rax
ffffffff80222808:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022280c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022280f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222813:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff80222819:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022281c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222820:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff80222826:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff8022282d:	48 c7 c2 5f c3 20 80 	mov    $0xffffffff8020c35f,%rdx
ffffffff80222834:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222838:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff8022283e:	66 89 10             	mov    %dx,(%rax)
ffffffff80222841:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222845:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff8022284b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222851:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222855:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff8022285b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022285f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222863:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222869:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022286d:	48 c7 c0 5f c3 20 80 	mov    $0xffffffff8020c35f,%rax
ffffffff80222874:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222878:	48 89 c2             	mov    %rax,%rdx
ffffffff8022287b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022287f:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222885:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222889:	48 c7 c0 5f c3 20 80 	mov    $0xffffffff8020c35f,%rax
ffffffff80222890:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222894:	48 89 c2             	mov    %rax,%rdx
ffffffff80222897:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022289b:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802228a1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802228a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228a8:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802228ae:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802228b5:	48 c7 c2 6e c3 20 80 	mov    $0xffffffff8020c36e,%rdx
ffffffff802228bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228c0:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff802228c6:	66 89 10             	mov    %dx,(%rax)
ffffffff802228c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228cd:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff802228d3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802228d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228dd:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff802228e3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802228e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228eb:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff802228f1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802228f5:	48 c7 c0 6e c3 20 80 	mov    $0xffffffff8020c36e,%rax
ffffffff802228fc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222900:	48 89 c2             	mov    %rax,%rdx
ffffffff80222903:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222907:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff8022290d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222911:	48 c7 c0 6e c3 20 80 	mov    $0xffffffff8020c36e,%rax
ffffffff80222918:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022291c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022291f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222923:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222929:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022292c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222930:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222936:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff8022293d:	48 c7 c2 7d c3 20 80 	mov    $0xffffffff8020c37d,%rdx
ffffffff80222944:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222948:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff8022294e:	66 89 10             	mov    %dx,(%rax)
ffffffff80222951:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222955:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff8022295b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222961:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222965:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff8022296b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022296f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222973:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222979:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022297d:	48 c7 c0 7d c3 20 80 	mov    $0xffffffff8020c37d,%rax
ffffffff80222984:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222988:	48 89 c2             	mov    %rax,%rdx
ffffffff8022298b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022298f:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222995:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222999:	48 c7 c0 7d c3 20 80 	mov    $0xffffffff8020c37d,%rax
ffffffff802229a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802229a4:	48 89 c2             	mov    %rax,%rdx
ffffffff802229a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229ab:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff802229b1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802229b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229b8:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff802229be:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802229c5:	48 c7 c2 8c c3 20 80 	mov    $0xffffffff8020c38c,%rdx
ffffffff802229cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229d0:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff802229d6:	66 89 10             	mov    %dx,(%rax)
ffffffff802229d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229dd:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff802229e3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802229e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229ed:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff802229f3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802229f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229fb:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222a01:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222a05:	48 c7 c0 8c c3 20 80 	mov    $0xffffffff8020c38c,%rax
ffffffff80222a0c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222a10:	48 89 c2             	mov    %rax,%rdx
ffffffff80222a13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a17:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222a1d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222a21:	48 c7 c0 8c c3 20 80 	mov    $0xffffffff8020c38c,%rax
ffffffff80222a28:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222a2c:	48 89 c2             	mov    %rax,%rdx
ffffffff80222a2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a33:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222a39:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222a3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a40:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222a46:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80222a4d:	48 c7 c2 9b c3 20 80 	mov    $0xffffffff8020c39b,%rdx
ffffffff80222a54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a58:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222a5e:	66 89 10             	mov    %dx,(%rax)
ffffffff80222a61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a65:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222a6b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222a71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a75:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222a7b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222a7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a83:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222a89:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222a8d:	48 c7 c0 9b c3 20 80 	mov    $0xffffffff8020c39b,%rax
ffffffff80222a94:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222a98:	48 89 c2             	mov    %rax,%rdx
ffffffff80222a9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a9f:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222aa5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222aa9:	48 c7 c0 9b c3 20 80 	mov    $0xffffffff8020c39b,%rax
ffffffff80222ab0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222ab4:	48 89 c2             	mov    %rax,%rdx
ffffffff80222ab7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222abb:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222ac1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222ac4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ac8:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222ace:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222ad5:	48 c7 c2 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rdx
ffffffff80222adc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ae0:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222ae6:	66 89 10             	mov    %dx,(%rax)
ffffffff80222ae9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222aed:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222af3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222af9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222afd:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222b03:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222b07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b0b:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222b11:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222b15:	48 c7 c0 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rax
ffffffff80222b1c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222b20:	48 89 c2             	mov    %rax,%rdx
ffffffff80222b23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b27:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222b2d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222b31:	48 c7 c0 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rax
ffffffff80222b38:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222b3c:	48 89 c2             	mov    %rax,%rdx
ffffffff80222b3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b43:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222b49:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222b4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b50:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222b56:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80222b5d:	48 c7 c2 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rdx
ffffffff80222b64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b68:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222b6e:	66 89 10             	mov    %dx,(%rax)
ffffffff80222b71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b75:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222b7b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222b81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b85:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222b8b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222b8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b93:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222b99:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222b9d:	48 c7 c0 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rax
ffffffff80222ba4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222ba8:	48 89 c2             	mov    %rax,%rdx
ffffffff80222bab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222baf:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222bb5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222bb9:	48 c7 c0 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rax
ffffffff80222bc0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222bc4:	48 89 c2             	mov    %rax,%rdx
ffffffff80222bc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bcb:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222bd1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222bd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bd8:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222bde:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222be5:	48 c7 c2 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rdx
ffffffff80222bec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bf0:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222bf6:	66 89 10             	mov    %dx,(%rax)
ffffffff80222bf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bfd:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222c03:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222c09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c0d:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222c13:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222c17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c1b:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222c21:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222c25:	48 c7 c0 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rax
ffffffff80222c2c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222c30:	48 89 c2             	mov    %rax,%rdx
ffffffff80222c33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c37:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222c3d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222c41:	48 c7 c0 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rax
ffffffff80222c48:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222c4c:	48 89 c2             	mov    %rax,%rdx
ffffffff80222c4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c53:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222c59:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222c5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c60:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222c66:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80222c6d:	48 c7 c2 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rdx
ffffffff80222c74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c78:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222c7e:	66 89 10             	mov    %dx,(%rax)
ffffffff80222c81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c85:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222c8b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222c91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c95:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222c9b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222c9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ca3:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222ca9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222cad:	48 c7 c0 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rax
ffffffff80222cb4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222cb8:	48 89 c2             	mov    %rax,%rdx
ffffffff80222cbb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cbf:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222cc5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222cc9:	48 c7 c0 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rax
ffffffff80222cd0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222cd4:	48 89 c2             	mov    %rax,%rdx
ffffffff80222cd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cdb:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222ce1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222ce4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ce8:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222cee:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222cf5:	48 c7 c2 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rdx
ffffffff80222cfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d00:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222d06:	66 89 10             	mov    %dx,(%rax)
ffffffff80222d09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d0d:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222d13:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222d19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d1d:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222d23:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222d27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d2b:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222d31:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222d35:	48 c7 c0 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rax
ffffffff80222d3c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222d40:	48 89 c2             	mov    %rax,%rdx
ffffffff80222d43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d47:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222d4d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222d51:	48 c7 c0 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rax
ffffffff80222d58:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222d5c:	48 89 c2             	mov    %rax,%rdx
ffffffff80222d5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d63:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222d69:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222d6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d70:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222d76:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80222d7d:	48 c7 c2 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rdx
ffffffff80222d84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d88:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222d8e:	66 89 10             	mov    %dx,(%rax)
ffffffff80222d91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d95:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222d9b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222da1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222da5:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222dab:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222daf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222db3:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222db9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222dbd:	48 c7 c0 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rax
ffffffff80222dc4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222dc8:	48 89 c2             	mov    %rax,%rdx
ffffffff80222dcb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222dcf:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222dd5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222dd9:	48 c7 c0 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rax
ffffffff80222de0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222de4:	48 89 c2             	mov    %rax,%rdx
ffffffff80222de7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222deb:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222df1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222df4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222df8:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222dfe:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222e05:	48 c7 c2 04 c4 20 80 	mov    $0xffffffff8020c404,%rdx
ffffffff80222e0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e10:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222e16:	66 89 10             	mov    %dx,(%rax)
ffffffff80222e19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e1d:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222e23:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222e29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e2d:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222e33:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222e37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e3b:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222e41:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222e45:	48 c7 c0 04 c4 20 80 	mov    $0xffffffff8020c404,%rax
ffffffff80222e4c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222e50:	48 89 c2             	mov    %rax,%rdx
ffffffff80222e53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e57:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222e5d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222e61:	48 c7 c0 04 c4 20 80 	mov    $0xffffffff8020c404,%rax
ffffffff80222e68:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222e6c:	48 89 c2             	mov    %rax,%rdx
ffffffff80222e6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e73:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222e79:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222e7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e80:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222e86:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80222e8d:	48 c7 c2 13 c4 20 80 	mov    $0xffffffff8020c413,%rdx
ffffffff80222e94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e98:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222e9e:	66 89 10             	mov    %dx,(%rax)
ffffffff80222ea1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ea5:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222eab:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222eb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222eb5:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222ebb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222ebf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ec3:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222ec9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222ecd:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
ffffffff80222ed4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222ed8:	48 89 c2             	mov    %rax,%rdx
ffffffff80222edb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222edf:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222ee5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222ee9:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
ffffffff80222ef0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222ef4:	48 89 c2             	mov    %rax,%rdx
ffffffff80222ef7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222efb:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222f01:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222f04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f08:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222f0e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222f15:	48 c7 c2 22 c4 20 80 	mov    $0xffffffff8020c422,%rdx
ffffffff80222f1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f20:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222f26:	66 89 10             	mov    %dx,(%rax)
ffffffff80222f29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f2d:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222f33:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222f39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f3d:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222f43:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222f47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f4b:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222f51:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222f55:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff80222f5c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222f60:	48 89 c2             	mov    %rax,%rdx
ffffffff80222f63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f67:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222f6d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222f71:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff80222f78:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222f7c:	48 89 c2             	mov    %rax,%rdx
ffffffff80222f7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f83:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222f89:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222f8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f90:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222f96:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80222f9d:	48 c7 c2 31 c4 20 80 	mov    $0xffffffff8020c431,%rdx
ffffffff80222fa4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fa8:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80222fae:	66 89 10             	mov    %dx,(%rax)
ffffffff80222fb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fb5:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80222fbb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222fc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fc5:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80222fcb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222fcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fd3:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80222fd9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222fdd:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
ffffffff80222fe4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222fe8:	48 89 c2             	mov    %rax,%rdx
ffffffff80222feb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fef:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80222ff5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222ff9:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
ffffffff80223000:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223004:	48 89 c2             	mov    %rax,%rdx
ffffffff80223007:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022300b:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223011:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223014:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223018:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff8022301e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223025:	48 c7 c2 40 c4 20 80 	mov    $0xffffffff8020c440,%rdx
ffffffff8022302c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223030:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80223036:	66 89 10             	mov    %dx,(%rax)
ffffffff80223039:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022303d:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80223043:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223049:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022304d:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80223053:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223057:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022305b:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80223061:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223065:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff8022306c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223070:	48 89 c2             	mov    %rax,%rdx
ffffffff80223073:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223077:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff8022307d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223081:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff80223088:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022308c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022308f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223093:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80223099:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022309c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230a0:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802230a6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802230ad:	48 c7 c2 4f c4 20 80 	mov    $0xffffffff8020c44f,%rdx
ffffffff802230b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230b8:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff802230be:	66 89 10             	mov    %dx,(%rax)
ffffffff802230c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230c5:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff802230cb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802230d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230d5:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff802230db:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802230df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230e3:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff802230e9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802230ed:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
ffffffff802230f4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802230f8:	48 89 c2             	mov    %rax,%rdx
ffffffff802230fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230ff:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223105:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223109:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
ffffffff80223110:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223114:	48 89 c2             	mov    %rax,%rdx
ffffffff80223117:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022311b:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223121:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223124:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223128:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff8022312e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223135:	48 c7 c2 5e c4 20 80 	mov    $0xffffffff8020c45e,%rdx
ffffffff8022313c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223140:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff80223146:	66 89 10             	mov    %dx,(%rax)
ffffffff80223149:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022314d:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff80223153:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223159:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022315d:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff80223163:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223167:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022316b:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff80223171:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223175:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff8022317c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223180:	48 89 c2             	mov    %rax,%rdx
ffffffff80223183:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223187:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff8022318d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223191:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff80223198:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022319c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022319f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231a3:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802231a9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802231ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231b0:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802231b6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff802231bd:	48 c7 c2 6d c4 20 80 	mov    $0xffffffff8020c46d,%rdx
ffffffff802231c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231c8:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802231ce:	66 89 10             	mov    %dx,(%rax)
ffffffff802231d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231d5:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802231db:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802231e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231e5:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802231eb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802231ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231f3:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802231f9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802231fd:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
ffffffff80223204:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223208:	48 89 c2             	mov    %rax,%rdx
ffffffff8022320b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022320f:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223215:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223219:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
ffffffff80223220:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223224:	48 89 c2             	mov    %rax,%rdx
ffffffff80223227:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022322b:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223231:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223234:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223238:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff8022323e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223245:	48 c7 c2 7c c4 20 80 	mov    $0xffffffff8020c47c,%rdx
ffffffff8022324c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223250:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff80223256:	66 89 10             	mov    %dx,(%rax)
ffffffff80223259:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022325d:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff80223263:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223269:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022326d:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff80223273:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223277:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022327b:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff80223281:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223285:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff8022328c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223290:	48 89 c2             	mov    %rax,%rdx
ffffffff80223293:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223297:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff8022329d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802232a1:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff802232a8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802232ac:	48 89 c2             	mov    %rax,%rdx
ffffffff802232af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232b3:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802232b9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802232bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232c0:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802232c6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff802232cd:	48 c7 c2 8b c4 20 80 	mov    $0xffffffff8020c48b,%rdx
ffffffff802232d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232d8:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802232de:	66 89 10             	mov    %dx,(%rax)
ffffffff802232e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232e5:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802232eb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802232f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232f5:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802232fb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802232ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223303:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223309:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022330d:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
ffffffff80223314:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223318:	48 89 c2             	mov    %rax,%rdx
ffffffff8022331b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022331f:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223325:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223329:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
ffffffff80223330:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223334:	48 89 c2             	mov    %rax,%rdx
ffffffff80223337:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022333b:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223341:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223344:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223348:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff8022334e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223355:	48 c7 c2 9a c4 20 80 	mov    $0xffffffff8020c49a,%rdx
ffffffff8022335c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223360:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff80223366:	66 89 10             	mov    %dx,(%rax)
ffffffff80223369:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022336d:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff80223373:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223379:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022337d:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff80223383:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022338b:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff80223391:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223395:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff8022339c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802233a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802233a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233a7:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802233ad:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802233b1:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff802233b8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802233bc:	48 89 c2             	mov    %rax,%rdx
ffffffff802233bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233c3:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802233c9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802233cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233d0:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802233d6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff802233dd:	48 c7 c2 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rdx
ffffffff802233e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233e8:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802233ee:	66 89 10             	mov    %dx,(%rax)
ffffffff802233f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233f5:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802233fb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223401:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223405:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff8022340b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022340f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223413:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223419:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022341d:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
ffffffff80223424:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223428:	48 89 c2             	mov    %rax,%rdx
ffffffff8022342b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022342f:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223435:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223439:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
ffffffff80223440:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223444:	48 89 c2             	mov    %rax,%rdx
ffffffff80223447:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022344b:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223451:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223454:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223458:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff8022345e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223465:	48 c7 c2 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rdx
ffffffff8022346c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223470:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff80223476:	66 89 10             	mov    %dx,(%rax)
ffffffff80223479:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022347d:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff80223483:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223489:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022348d:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff80223493:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223497:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022349b:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802234a1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802234a5:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff802234ac:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802234b0:	48 89 c2             	mov    %rax,%rdx
ffffffff802234b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234b7:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802234bd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802234c1:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff802234c8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802234cc:	48 89 c2             	mov    %rax,%rdx
ffffffff802234cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234d3:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802234d9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802234dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234e0:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802234e6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff802234ed:	48 c7 c2 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rdx
ffffffff802234f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234f8:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff802234fe:	66 89 10             	mov    %dx,(%rax)
ffffffff80223501:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223505:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff8022350b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223511:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223515:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff8022351b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022351f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223523:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff80223529:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022352d:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
ffffffff80223534:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223538:	48 89 c2             	mov    %rax,%rdx
ffffffff8022353b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022353f:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff80223545:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223549:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
ffffffff80223550:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223554:	48 89 c2             	mov    %rax,%rdx
ffffffff80223557:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022355b:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff80223561:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223564:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223568:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff8022356e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223575:	48 c7 c2 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rdx
ffffffff8022357c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223580:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff80223586:	66 89 10             	mov    %dx,(%rax)
ffffffff80223589:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022358d:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff80223593:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223599:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022359d:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802235a3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802235a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235ab:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802235b1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802235b5:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff802235bc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802235c0:	48 89 c2             	mov    %rax,%rdx
ffffffff802235c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235c7:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802235cd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802235d1:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff802235d8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802235dc:	48 89 c2             	mov    %rax,%rdx
ffffffff802235df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235e3:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802235e9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802235ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235f0:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802235f6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff802235fd:	48 c7 c2 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rdx
ffffffff80223604:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223608:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff8022360e:	66 89 10             	mov    %dx,(%rax)
ffffffff80223611:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223615:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff8022361b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223621:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223625:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff8022362b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022362f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223633:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223639:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022363d:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
ffffffff80223644:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223648:	48 89 c2             	mov    %rax,%rdx
ffffffff8022364b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022364f:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223655:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223659:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
ffffffff80223660:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223664:	48 89 c2             	mov    %rax,%rdx
ffffffff80223667:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022366b:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223671:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223674:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223678:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff8022367e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223685:	48 c7 c2 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rdx
ffffffff8022368c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223690:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff80223696:	66 89 10             	mov    %dx,(%rax)
ffffffff80223699:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022369d:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802236a3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802236a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236ad:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802236b3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802236b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236bb:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802236c1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802236c5:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff802236cc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802236d0:	48 89 c2             	mov    %rax,%rdx
ffffffff802236d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236d7:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802236dd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802236e1:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff802236e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802236ec:	48 89 c2             	mov    %rax,%rdx
ffffffff802236ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236f3:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802236f9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802236fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223700:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff80223706:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff8022370d:	48 c7 c2 03 c5 20 80 	mov    $0xffffffff8020c503,%rdx
ffffffff80223714:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223718:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff8022371e:	66 89 10             	mov    %dx,(%rax)
ffffffff80223721:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223725:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff8022372b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223731:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223735:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff8022373b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022373f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223743:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223749:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022374d:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
ffffffff80223754:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223758:	48 89 c2             	mov    %rax,%rdx
ffffffff8022375b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022375f:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223765:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223769:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
ffffffff80223770:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223774:	48 89 c2             	mov    %rax,%rdx
ffffffff80223777:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022377b:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223781:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223784:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223788:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff8022378e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223795:	48 c7 c2 12 c5 20 80 	mov    $0xffffffff8020c512,%rdx
ffffffff8022379c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237a0:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802237a6:	66 89 10             	mov    %dx,(%rax)
ffffffff802237a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237ad:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802237b3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802237b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237bd:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802237c3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802237c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237cb:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802237d1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802237d5:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff802237dc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802237e0:	48 89 c2             	mov    %rax,%rdx
ffffffff802237e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237e7:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802237ed:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802237f1:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff802237f8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802237fc:	48 89 c2             	mov    %rax,%rdx
ffffffff802237ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223803:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223809:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022380c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223810:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223816:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff8022381d:	48 c7 c2 21 c5 20 80 	mov    $0xffffffff8020c521,%rdx
ffffffff80223824:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223828:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff8022382e:	66 89 10             	mov    %dx,(%rax)
ffffffff80223831:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223835:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff8022383b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223841:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223845:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff8022384b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022384f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223853:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223859:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022385d:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
ffffffff80223864:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223868:	48 89 c2             	mov    %rax,%rdx
ffffffff8022386b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022386f:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223875:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223879:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
ffffffff80223880:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223884:	48 89 c2             	mov    %rax,%rdx
ffffffff80223887:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022388b:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223891:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223894:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223898:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff8022389e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802238a5:	48 c7 c2 30 c5 20 80 	mov    $0xffffffff8020c530,%rdx
ffffffff802238ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238b0:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff802238b6:	66 89 10             	mov    %dx,(%rax)
ffffffff802238b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238bd:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff802238c3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802238c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238cd:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff802238d3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802238d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238db:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff802238e1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802238e5:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff802238ec:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802238f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802238f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238f7:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff802238fd:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223901:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff80223908:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022390c:	48 89 c2             	mov    %rax,%rdx
ffffffff8022390f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223913:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223919:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022391c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223920:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223926:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff8022392d:	48 c7 c2 3c c5 20 80 	mov    $0xffffffff8020c53c,%rdx
ffffffff80223934:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223938:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff8022393e:	66 89 10             	mov    %dx,(%rax)
ffffffff80223941:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223945:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff8022394b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223951:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223955:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff8022395b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022395f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223963:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223969:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022396d:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
ffffffff80223974:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223978:	48 89 c2             	mov    %rax,%rdx
ffffffff8022397b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022397f:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223985:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223989:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
ffffffff80223990:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223994:	48 89 c2             	mov    %rax,%rdx
ffffffff80223997:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022399b:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff802239a1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802239a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239a8:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff802239ae:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802239b5:	48 c7 c2 48 c5 20 80 	mov    $0xffffffff8020c548,%rdx
ffffffff802239bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239c0:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff802239c6:	66 89 10             	mov    %dx,(%rax)
ffffffff802239c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239cd:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff802239d3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802239d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239dd:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff802239e3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802239e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239eb:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff802239f1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802239f5:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff802239fc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223a00:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a03:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a07:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223a0d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223a11:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff80223a18:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223a1c:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a23:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223a29:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223a2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a30:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223a36:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80223a3d:	48 c7 c2 54 c5 20 80 	mov    $0xffffffff8020c554,%rdx
ffffffff80223a44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a48:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223a4e:	66 89 10             	mov    %dx,(%rax)
ffffffff80223a51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a55:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223a5b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223a61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a65:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223a6b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223a6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a73:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223a79:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223a7d:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
ffffffff80223a84:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223a88:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a8b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a8f:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223a95:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223a99:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
ffffffff80223aa0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223aa4:	48 89 c2             	mov    %rax,%rdx
ffffffff80223aa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223aab:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223ab1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223ab4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ab8:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223abe:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223ac5:	48 c7 c2 60 c5 20 80 	mov    $0xffffffff8020c560,%rdx
ffffffff80223acc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ad0:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223ad6:	66 89 10             	mov    %dx,(%rax)
ffffffff80223ad9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223add:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223ae3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223ae9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223aed:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223af3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223af7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223afb:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223b01:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223b05:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff80223b0c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223b10:	48 89 c2             	mov    %rax,%rdx
ffffffff80223b13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b17:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223b1d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223b21:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff80223b28:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223b2c:	48 89 c2             	mov    %rax,%rdx
ffffffff80223b2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b33:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223b39:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223b3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b40:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223b46:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80223b4d:	48 c7 c2 6c c5 20 80 	mov    $0xffffffff8020c56c,%rdx
ffffffff80223b54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b58:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223b5e:	66 89 10             	mov    %dx,(%rax)
ffffffff80223b61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b65:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223b6b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223b71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b75:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223b7b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223b7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b83:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223b89:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223b8d:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
ffffffff80223b94:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223b98:	48 89 c2             	mov    %rax,%rdx
ffffffff80223b9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b9f:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223ba5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223ba9:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
ffffffff80223bb0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223bb4:	48 89 c2             	mov    %rax,%rdx
ffffffff80223bb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bbb:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223bc1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223bc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bc8:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223bce:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223bd5:	48 c7 c2 78 c5 20 80 	mov    $0xffffffff8020c578,%rdx
ffffffff80223bdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223be0:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223be6:	66 89 10             	mov    %dx,(%rax)
ffffffff80223be9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bed:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223bf3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223bf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bfd:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223c03:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223c07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c0b:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223c11:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223c15:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80223c1c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223c20:	48 89 c2             	mov    %rax,%rdx
ffffffff80223c23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c27:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223c2d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223c31:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80223c38:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223c3c:	48 89 c2             	mov    %rax,%rdx
ffffffff80223c3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c43:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223c49:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223c4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c50:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223c56:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80223c5d:	48 c7 c2 84 c5 20 80 	mov    $0xffffffff8020c584,%rdx
ffffffff80223c64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c68:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223c6e:	66 89 10             	mov    %dx,(%rax)
ffffffff80223c71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c75:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223c7b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223c81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c85:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223c8b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223c8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c93:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223c99:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223c9d:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
ffffffff80223ca4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223ca8:	48 89 c2             	mov    %rax,%rdx
ffffffff80223cab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223caf:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223cb5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223cb9:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
ffffffff80223cc0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223cc4:	48 89 c2             	mov    %rax,%rdx
ffffffff80223cc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ccb:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223cd1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223cd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cd8:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223cde:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223ce5:	48 c7 c2 90 c5 20 80 	mov    $0xffffffff8020c590,%rdx
ffffffff80223cec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cf0:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223cf6:	66 89 10             	mov    %dx,(%rax)
ffffffff80223cf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cfd:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223d03:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223d09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d0d:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223d13:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223d17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d1b:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223d21:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223d25:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff80223d2c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223d30:	48 89 c2             	mov    %rax,%rdx
ffffffff80223d33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d37:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223d3d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223d41:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff80223d48:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223d4c:	48 89 c2             	mov    %rax,%rdx
ffffffff80223d4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d53:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223d59:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223d5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d60:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223d66:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80223d6d:	48 c7 c2 9c c5 20 80 	mov    $0xffffffff8020c59c,%rdx
ffffffff80223d74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d78:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223d7e:	66 89 10             	mov    %dx,(%rax)
ffffffff80223d81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d85:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223d8b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223d91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d95:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223d9b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223d9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223da3:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223da9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223dad:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
ffffffff80223db4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223db8:	48 89 c2             	mov    %rax,%rdx
ffffffff80223dbb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223dbf:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223dc5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223dc9:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
ffffffff80223dd0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223dd4:	48 89 c2             	mov    %rax,%rdx
ffffffff80223dd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ddb:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223de1:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223de4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223de8:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223dee:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223df5:	48 c7 c2 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rdx
ffffffff80223dfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e00:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223e06:	66 89 10             	mov    %dx,(%rax)
ffffffff80223e09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e0d:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223e13:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223e19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e1d:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223e23:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223e27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e2b:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223e31:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223e35:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80223e3c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223e40:	48 89 c2             	mov    %rax,%rdx
ffffffff80223e43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e47:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223e4d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223e51:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80223e58:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223e5c:	48 89 c2             	mov    %rax,%rdx
ffffffff80223e5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e63:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223e69:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223e6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e70:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223e76:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Replace systick handler with customized ones - spurious interrupts
     * and IPIs are handled in the general interrupt path. SysTick handler
     * is only processed by the first processor, so we don't register it
     * for other auxiliary processors */
    if(RME_X64_CPU_Cnt==0)
ffffffff80223e7d:	48 8b 05 2c e4 00 00 	mov    0xe42c(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80223e84:	48 85 c0             	test   %rax,%rax
ffffffff80223e87:	0f 85 88 00 00 00    	jne    ffffffff80223f15 <__RME_X64_CPU_Local_Init+0x81f2>
        RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
ffffffff80223e8d:	48 c7 c2 63 c6 20 80 	mov    $0xffffffff8020c663,%rdx
ffffffff80223e94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e98:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223e9e:	66 89 10             	mov    %dx,(%rax)
ffffffff80223ea1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ea5:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223eab:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223eb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223eb5:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223ebb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223ebf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ec3:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223ec9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223ecd:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff80223ed4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223ed8:	48 89 c2             	mov    %rax,%rdx
ffffffff80223edb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223edf:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223ee5:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223ee9:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff80223ef0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223ef4:	48 89 c2             	mov    %rax,%rdx
ffffffff80223ef7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223efb:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223f01:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223f04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f08:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223f0e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    /* Register SMP handlers */
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80223f15:	48 c7 c2 09 c6 20 80 	mov    $0xffffffff8020c609,%rdx
ffffffff80223f1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f20:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223f26:	66 89 10             	mov    %dx,(%rax)
ffffffff80223f29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f2d:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223f33:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223f39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f3d:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223f43:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223f47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f4b:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223f51:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223f55:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
ffffffff80223f5c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223f60:	48 89 c2             	mov    %rax,%rdx
ffffffff80223f63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f67:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223f6d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223f71:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
ffffffff80223f78:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223f7c:	48 89 c2             	mov    %rax,%rdx
ffffffff80223f7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f83:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223f89:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223f8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f90:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223f96:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Load the IDT */
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff80223f9d:	66 c7 45 c6 ff 0f    	movw   $0xfff,-0x3a(%rbp)
    Desc[1]=(rme_ptr_t)IDT_Table;
ffffffff80223fa3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fa7:	66 89 45 c8          	mov    %ax,-0x38(%rbp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80223fab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223faf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223fb3:	66 89 45 ca          	mov    %ax,-0x36(%rbp)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff80223fb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fbb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223fbf:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
    Desc[4]=((rme_ptr_t)IDT_Table)>>48;
ffffffff80223fc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fc7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80223fcb:	66 89 45 ce          	mov    %ax,-0x32(%rbp)
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80223fcf:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
ffffffff80223fd3:	48 89 c7             	mov    %rax,%rdi
ffffffff80223fd6:	e8 9e 78 fe ff       	call   ffffffff8020b879 <__RME_X64_IDT_Load>

    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80223fdb:	48 8b 05 6e e0 00 00 	mov    0xe06e(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff80223fe2:	48 8b 15 c7 e2 00 00 	mov    0xe2c7(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80223fe9:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff80223fed:	48 01 d0             	add    %rdx,%rax
ffffffff80223ff0:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80223ff6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80223ffa:	48 8b 05 4f e0 00 00 	mov    0xe04f(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff80224001:	48 8b 15 a8 e2 00 00 	mov    0xe2a8(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80224008:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8022400c:	48 01 d0             	add    %rdx,%rax
ffffffff8022400f:	48 05 80 10 00 00    	add    $0x1080,%rax
ffffffff80224015:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    /* Dummy entry */
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80224019:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022401d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    /* Kernel code, DPL=0, R/X */
    GDT_Table[1]=0x0020980000000000ULL;
ffffffff80224024:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224028:	48 83 c0 08          	add    $0x8,%rax
ffffffff8022402c:	48 b9 00 00 00 00 00 	movabs $0x20980000000000,%rcx
ffffffff80224033:	98 20 00 
ffffffff80224036:	48 89 08             	mov    %rcx,(%rax)
    /* Kernel data, DPL=0, W */
    GDT_Table[2]=0x0000920000000000ULL;
ffffffff80224039:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022403d:	48 83 c0 10          	add    $0x10,%rax
ffffffff80224041:	48 b9 00 00 00 00 00 	movabs $0x920000000000,%rcx
ffffffff80224048:	92 00 00 
ffffffff8022404b:	48 89 08             	mov    %rcx,(%rax)
    /* Unused entry - this is for sysret instruction's requirement */
    GDT_Table[3]=0x0000000000000000ULL;
ffffffff8022404e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224052:	48 83 c0 18          	add    $0x18,%rax
ffffffff80224056:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
ffffffff8022405d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224061:	48 83 c0 20          	add    $0x20,%rax
ffffffff80224065:	48 be 00 00 00 00 00 	movabs $0xf20000000000,%rsi
ffffffff8022406c:	f2 00 00 
ffffffff8022406f:	48 89 30             	mov    %rsi,(%rax)
    /* User code, DPL=3, R/X */
    GDT_Table[5]=0x0020F80000000000ULL;
ffffffff80224072:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224076:	48 83 c0 28          	add    $0x28,%rax
ffffffff8022407a:	48 b9 00 00 00 00 00 	movabs $0x20f80000000000,%rcx
ffffffff80224081:	f8 20 00 
ffffffff80224084:	48 89 08             	mov    %rcx,(%rax)
    /* TSS */
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80224087:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022408b:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff8022408f:	48 89 c2             	mov    %rax,%rdx
ffffffff80224092:	48 b8 00 00 ff ff ff 	movabs $0xffffff0000,%rax
ffffffff80224099:	00 00 00 
ffffffff8022409c:	48 21 c2             	and    %rax,%rdx
ffffffff8022409f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802240a3:	48 c1 e8 18          	shr    $0x18,%rax
ffffffff802240a7:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff802240ab:	48 89 d1             	mov    %rdx,%rcx
ffffffff802240ae:	48 09 c1             	or     %rax,%rcx
ffffffff802240b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802240b5:	48 83 c0 30          	add    $0x30,%rax
ffffffff802240b9:	48 ba 67 00 00 00 00 	movabs $0x890000000067,%rdx
ffffffff802240c0:	89 00 00 
ffffffff802240c3:	48 09 ca             	or     %rcx,%rdx
ffffffff802240c6:	48 89 10             	mov    %rdx,(%rax)
    GDT_Table[7]=(TSS_Table>>32);
ffffffff802240c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802240cd:	48 83 c0 38          	add    $0x38,%rax
ffffffff802240d1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff802240d5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802240d9:	48 89 10             	mov    %rdx,(%rax)

    /* Load the GDT */
    Desc[0]=8*sizeof(rme_ptr_t)-1;
ffffffff802240dc:	66 c7 45 c6 3f 00    	movw   $0x3f,-0x3a(%rbp)
    Desc[1]=(rme_ptr_t)GDT_Table;
ffffffff802240e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802240e6:	66 89 45 c8          	mov    %ax,-0x38(%rbp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff802240ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802240ee:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802240f2:	66 89 45 ca          	mov    %ax,-0x36(%rbp)
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff802240f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802240fa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802240fe:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff80224102:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224106:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8022410a:	66 89 45 ce          	mov    %ax,-0x32(%rbp)
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff8022410e:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
ffffffff80224112:	48 89 c7             	mov    %rax,%rdi
ffffffff80224115:	e8 5b 77 fe ff       	call   ffffffff8020b875 <__RME_X64_GDT_Load>
    /* Set the RSP to TSS */
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff8022411a:	48 8b 05 77 e1 00 00 	mov    0xe177(%rip),%rax        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff80224121:	89 c6                	mov    %eax,%esi
ffffffff80224123:	48 8b 05 86 e1 00 00 	mov    0xe186(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff8022412a:	83 c0 01             	add    $0x1,%eax
ffffffff8022412d:	c1 e0 14             	shl    $0x14,%eax
ffffffff80224130:	89 c2                	mov    %eax,%edx
ffffffff80224132:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224136:	48 83 c0 04          	add    $0x4,%rax
ffffffff8022413a:	48 89 c1             	mov    %rax,%rcx
ffffffff8022413d:	8d 04 16             	lea    (%rsi,%rdx,1),%eax
ffffffff80224140:	89 01                	mov    %eax,(%rcx)
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80224142:	48 8b 05 4f e1 00 00 	mov    0xe14f(%rip),%rax        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff80224149:	48 8b 15 60 e1 00 00 	mov    0xe160(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80224150:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80224154:	48 c1 e2 14          	shl    $0x14,%rdx
ffffffff80224158:	48 01 d0             	add    %rdx,%rax
ffffffff8022415b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022415f:	48 89 c2             	mov    %rax,%rdx
ffffffff80224162:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224166:	48 83 c0 08          	add    $0x8,%rax
ffffffff8022416a:	89 10                	mov    %edx,(%rax)
    /* IO Map Base = End of TSS (What's this?) */
    ((rme_u32_t*)TSS_Table)[16]=0x00680000;
ffffffff8022416c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224170:	48 83 c0 40          	add    $0x40,%rax
ffffffff80224174:	c7 00 00 00 68 00    	movl   $0x680000,(%rax)
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff8022417a:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8022417f:	e8 f9 76 fe ff       	call   ffffffff8020b87d <__RME_X64_TSS_Load>

    /* Initialize the RME per-cpu data here */
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80224184:	48 8b 05 c5 de 00 00 	mov    0xdec5(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff8022418b:	48 8b 15 1e e1 00 00 	mov    0xe11e(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80224192:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff80224196:	48 01 d0             	add    %rdx,%rax
    		                          RME_POW2(RME_PGT_SIZE_4K)+
ffffffff80224199:	48 05 00 14 00 00    	add    $0x1400,%rax
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff8022419f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
									  RME_POW2(RME_PGT_SIZE_1K));
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff802241a3:	48 8b 15 06 e1 00 00 	mov    0xe106(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff802241aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802241ae:	48 89 d6             	mov    %rdx,%rsi
ffffffff802241b1:	48 89 c7             	mov    %rax,%rdi
ffffffff802241b4:	e8 7b ea fe ff       	call   ffffffff80212c34 <_RME_CPU_Local_Init>

    /* Initialize x64 specific CPU-local data structure */
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff802241b9:	48 8b 05 90 de 00 00 	mov    0xde90(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff802241c0:	48 8b 15 e9 e0 00 00 	mov    0xe0e9(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff802241c7:	48 83 c2 01          	add    $0x1,%rdx
ffffffff802241cb:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff802241cf:	48 01 d0             	add    %rdx,%rax
ffffffff802241d2:	48 83 e8 18          	sub    $0x18,%rax
ffffffff802241d6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Temp->CPU_Local_Addr=(rme_ptr_t)CPU_Local;
ffffffff802241da:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802241de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802241e2:	48 89 10             	mov    %rdx,(%rax)
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff802241e5:	48 8b 05 ac e0 00 00 	mov    0xe0ac(%rip),%rax        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff802241ec:	48 8b 15 bd e0 00 00 	mov    0xe0bd(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff802241f3:	48 83 c2 01          	add    $0x1,%rdx
ffffffff802241f7:	48 c1 e2 14          	shl    $0x14,%rdx
ffffffff802241fb:	48 01 c2             	add    %rax,%rdx
ffffffff802241fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80224202:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Temp->Temp_User_SP=0;
ffffffff80224206:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8022420a:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80224211:	00 

    /* Set the base of GS to this memory */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80224212:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224216:	48 89 c6             	mov    %rax,%rsi
ffffffff80224219:	b8 02 01 00 c0       	mov    $0xc0000102,%eax
ffffffff8022421e:	48 89 c7             	mov    %rax,%rdi
ffffffff80224221:	e8 04 76 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80224226:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022422a:	48 89 c6             	mov    %rax,%rsi
ffffffff8022422d:	b8 01 01 00 c0       	mov    $0xc0000101,%eax
ffffffff80224232:	48 89 c7             	mov    %rax,%rdi
ffffffff80224235:	e8 f0 75 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* Enable SYSCALL/SYSRET */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff8022423a:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
ffffffff8022423f:	48 89 c7             	mov    %rax,%rdi
ffffffff80224242:	e8 cf 75 fe ff       	call   ffffffff8020b816 <__RME_X64_Read_MSR>
ffffffff80224247:	48 83 c8 01          	or     $0x1,%rax
ffffffff8022424b:	48 89 c6             	mov    %rax,%rsi
ffffffff8022424e:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
ffffffff80224253:	48 89 c7             	mov    %rax,%rdi
ffffffff80224256:	e8 cf 75 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* Set up SYSCALL/SYSRET parameters */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_LSTAR, (rme_ptr_t)SVC_Handler);
ffffffff8022425b:	48 c7 c0 c2 c6 20 80 	mov    $0xffffffff8020c6c2,%rax
ffffffff80224262:	48 89 c6             	mov    %rax,%rsi
ffffffff80224265:	b8 82 00 00 c0       	mov    $0xc0000082,%eax
ffffffff8022426a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022426d:	e8 b8 75 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_FMASK, ~RME_X64_RFLAGS_IF);
ffffffff80224272:	48 c7 c6 ff fd ff ff 	mov    $0xfffffffffffffdff,%rsi
ffffffff80224279:	b8 84 00 00 c0       	mov    $0xc0000084,%eax
ffffffff8022427e:	48 89 c7             	mov    %rax,%rdi
ffffffff80224281:	e8 a4 75 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* The SYSRET, when returning to user mode in 64-bit, will load the SS from +8, and CS from +16.
     * The original place for CS is reserved for 32-bit usages and is thus not usable by 64-bit */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_STAR, (((rme_ptr_t)RME_X64_SEG_EMPTY)<<48)|(((rme_ptr_t)RME_X64_SEG_KERNEL_CODE)<<32));
ffffffff80224286:	48 b8 00 00 00 00 08 	movabs $0x1b000800000000,%rax
ffffffff8022428d:	00 1b 00 
ffffffff80224290:	48 89 c6             	mov    %rax,%rsi
ffffffff80224293:	b8 81 00 00 c0       	mov    $0xc0000081,%eax
ffffffff80224298:	48 89 c7             	mov    %rax,%rdi
ffffffff8022429b:	e8 8a 75 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
}
ffffffff802242a0:	90                   	nop
ffffffff802242a1:	c9                   	leave
ffffffff802242a2:	c3                   	ret

ffffffff802242a3 <__RME_X64_CPU_Local_Get_By_CPUID>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
struct RME_CPU_Local* __RME_X64_CPU_Local_Get_By_CPUID(rme_ptr_t CPUID)
{
ffffffff802242a3:	f3 0f 1e fa          	endbr64
ffffffff802242a7:	55                   	push   %rbp
ffffffff802242a8:	48 89 e5             	mov    %rsp,%rbp
ffffffff802242ab:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff802242af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff802242b3:	48 8b 05 96 dd 00 00 	mov    0xdd96(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff802242ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802242be:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff802242c2:	48 01 d0             	add    %rdx,%rax
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff802242c5:	48 05 00 14 00 00    	add    $0x1400,%rax
								   RME_POW2(RME_PGT_SIZE_1K));
}
ffffffff802242cb:	c9                   	leave
ffffffff802242cc:	c3                   	ret

ffffffff802242cd <__RME_X64_LAPIC_Ack>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Ack(void)
{
ffffffff802242cd:	f3 0f 1e fa          	endbr64
ffffffff802242d1:	55                   	push   %rbp
ffffffff802242d2:	48 89 e5             	mov    %rsp,%rbp
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff802242d5:	48 8b 05 44 f0 00 00 	mov    0xf044(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802242dc:	48 ba b0 00 00 00 00 	movabs $0xffff8000000000b0,%rdx
ffffffff802242e3:	80 ff ff 
ffffffff802242e6:	48 01 d0             	add    %rdx,%rax
ffffffff802242e9:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
ffffffff802242ef:	90                   	nop
ffffffff802242f0:	5d                   	pop    %rbp
ffffffff802242f1:	c3                   	ret

ffffffff802242f2 <__RME_X64_LAPIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Init(void)
{
ffffffff802242f2:	f3 0f 1e fa          	endbr64
ffffffff802242f6:	55                   	push   %rbp
ffffffff802242f7:	48 89 e5             	mov    %rsp,%rbp
    /* LAPIC initialization - Check if there is any LAPIC */
    RME_ASSERT(RME_X64_LAPIC_Addr!=0);
ffffffff802242fa:	48 8b 05 1f f0 00 00 	mov    0xf01f(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>

    /* Enable local APIC; set spurious interrupt vector to 32 */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_SVR, RME_X64_LAPIC_SVR_ENABLE|RME_X64_INT_SPUR);
ffffffff80224301:	48 8b 05 18 f0 00 00 	mov    0xf018(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224308:	48 ba f0 00 00 00 00 	movabs $0xffff8000000000f0,%rdx
ffffffff8022430f:	80 ff ff 
ffffffff80224312:	48 01 d0             	add    %rdx,%rax
ffffffff80224315:	c7 00 80 01 00 00    	movl   $0x180,(%rax)

    /* Disable local interrupt lines */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff8022431b:	48 8b 05 fe ef 00 00 	mov    0xeffe(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224322:	48 ba 50 03 00 00 00 	movabs $0xffff800000000350,%rdx
ffffffff80224329:	80 ff ff 
ffffffff8022432c:	48 01 d0             	add    %rdx,%rax
ffffffff8022432f:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);
ffffffff80224335:	48 8b 05 e4 ef 00 00 	mov    0xefe4(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff8022433c:	48 ba 60 03 00 00 00 	movabs $0xffff800000000360,%rdx
ffffffff80224343:	80 ff ff 
ffffffff80224346:	48 01 d0             	add    %rdx,%rax
ffffffff80224349:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)

    /* Disable performance counter overflow interrupts when there is one */
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff8022434f:	48 8b 05 ca ef 00 00 	mov    0xefca(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224356:	48 ba 30 00 00 00 00 	movabs $0xffff800000000030,%rdx
ffffffff8022435d:	80 ff ff 
ffffffff80224360:	48 01 d0             	add    %rdx,%rax
ffffffff80224363:	8b 00                	mov    (%rax),%eax
ffffffff80224365:	25 00 00 fc 00       	and    $0xfc0000,%eax
ffffffff8022436a:	85 c0                	test   %eax,%eax
ffffffff8022436c:	74 1a                	je     ffffffff80224388 <__RME_X64_LAPIC_Init+0x96>
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_PCINT, RME_X64_LAPIC_MASKED);
ffffffff8022436e:	48 8b 05 ab ef 00 00 	mov    0xefab(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224375:	48 ba 40 03 00 00 00 	movabs $0xffff800000000340,%rdx
ffffffff8022437c:	80 ff ff 
ffffffff8022437f:	48 01 d0             	add    %rdx,%rax
ffffffff80224382:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)

    /* Map error interrupt to IRQ_ERROR */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ERROR, RME_X64_INT_ERROR);
ffffffff80224388:	48 8b 05 91 ef 00 00 	mov    0xef91(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff8022438f:	48 ba 70 03 00 00 00 	movabs $0xffff800000000370,%rdx
ffffffff80224396:	80 ff ff 
ffffffff80224399:	48 01 d0             	add    %rdx,%rax
ffffffff8022439c:	c7 00 81 00 00 00    	movl   $0x81,(%rax)

    /* Clear error status register (requires back-to-back writes) */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff802243a2:	48 8b 05 77 ef 00 00 	mov    0xef77(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802243a9:	48 ba 80 02 00 00 00 	movabs $0xffff800000000280,%rdx
ffffffff802243b0:	80 ff ff 
ffffffff802243b3:	48 01 d0             	add    %rdx,%rax
ffffffff802243b6:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff802243bc:	48 8b 05 5d ef 00 00 	mov    0xef5d(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802243c3:	48 ba 80 02 00 00 00 	movabs $0xffff800000000280,%rdx
ffffffff802243ca:	80 ff ff 
ffffffff802243cd:	48 01 d0             	add    %rdx,%rax
ffffffff802243d0:	c7 00 00 00 00 00    	movl   $0x0,(%rax)

    /* Acknowledge any outstanding interrupts */
    __RME_X64_LAPIC_Ack();
ffffffff802243d6:	e8 f2 fe ff ff       	call   ffffffff802242cd <__RME_X64_LAPIC_Ack>

    /* Send an Init Level De-Assert to synchronise arbitration IDs */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0);
ffffffff802243db:	48 8b 05 3e ef 00 00 	mov    0xef3e(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802243e2:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff802243e9:	80 ff ff 
ffffffff802243ec:	48 01 d0             	add    %rdx,%rax
ffffffff802243ef:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_BCAST|
ffffffff802243f5:	48 8b 05 24 ef 00 00 	mov    0xef24(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802243fc:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224403:	80 ff ff 
ffffffff80224406:	48 01 d0             	add    %rdx,%rax
ffffffff80224409:	c7 00 00 85 08 00    	movl   $0x88500,(%rax)
                                             RME_X64_LAPIC_ICRLO_INIT|
                                             RME_X64_LAPIC_ICRLO_LEVEL);
    while(RME_X64_LAPIC_READ(RME_X64_LAPIC_ICRLO)&RME_X64_LAPIC_ICRLO_DELIVS);
ffffffff8022440f:	90                   	nop
ffffffff80224410:	48 8b 05 09 ef 00 00 	mov    0xef09(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224417:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff8022441e:	80 ff ff 
ffffffff80224421:	48 01 d0             	add    %rdx,%rax
ffffffff80224424:	8b 00                	mov    (%rax),%eax
ffffffff80224426:	25 00 10 00 00       	and    $0x1000,%eax
ffffffff8022442b:	85 c0                	test   %eax,%eax
ffffffff8022442d:	75 e1                	jne    ffffffff80224410 <__RME_X64_LAPIC_Init+0x11e>

    /* Enable interrupts on the APIC */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_TPR, 0);
ffffffff8022442f:	48 8b 05 ea ee 00 00 	mov    0xeeea(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224436:	48 ba 80 00 00 00 00 	movabs $0xffff800000000080,%rdx
ffffffff8022443d:	80 ff ff 
ffffffff80224440:	48 01 d0             	add    %rdx,%rax
ffffffff80224443:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
ffffffff80224449:	90                   	nop
ffffffff8022444a:	5d                   	pop    %rbp
ffffffff8022444b:	c3                   	ret

ffffffff8022444c <__RME_X64_PIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_PIC_Init(void)
{
ffffffff8022444c:	f3 0f 1e fa          	endbr64
ffffffff80224450:	55                   	push   %rbp
ffffffff80224451:	48 89 e5             	mov    %rsp,%rbp
    /* Mask all interrupts */
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80224454:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80224459:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8022445e:	e8 a7 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff80224463:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80224468:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8022446d:	e8 98 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Set up master (8259A-1) */
    __RME_X64_Out(RME_X64_PIC1, 0x11);
ffffffff80224472:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80224477:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8022447c:	e8 89 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, RME_X64_INT_USER(0));
ffffffff80224481:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80224486:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8022448b:	e8 7a 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 1<<2);
ffffffff80224490:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80224495:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8022449a:	e8 6b 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0x3);
ffffffff8022449f:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff802244a4:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff802244a9:	e8 5c 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Set up slave (8259A-2) */
    __RME_X64_Out(RME_X64_PIC2, 0x11);
ffffffff802244ae:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff802244b3:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff802244b8:	e8 4d 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, RME_X64_INT_USER(8));
ffffffff802244bd:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff802244c2:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff802244c7:	e8 3e 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 2);
ffffffff802244cc:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff802244d1:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff802244d6:	e8 2f 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0x3);
ffffffff802244db:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff802244e0:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff802244e5:	e8 20 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    __RME_X64_Out(RME_X64_PIC1, 0x68);
ffffffff802244ea:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff802244ef:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff802244f4:	e8 11 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x0A);
ffffffff802244f9:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff802244fe:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80224503:	e8 02 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    __RME_X64_Out(RME_X64_PIC2, 0x68);
ffffffff80224508:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff8022450d:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80224512:	e8 f3 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x0A);
ffffffff80224517:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff8022451c:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80224521:	e8 e4 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Mask all interrupts - we do not use the PIC at all */
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80224526:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8022452b:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80224530:	e8 d5 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff80224535:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8022453a:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8022453f:	e8 c6 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff80224544:	90                   	nop
ffffffff80224545:	5d                   	pop    %rbp
ffffffff80224546:	c3                   	ret

ffffffff80224547 <__RME_X64_IOAPIC_Int_Enable>:
              rme_ptr_t CPUID - The CPU to enable this IRQ on.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Int_Enable(rme_ptr_t IRQ, rme_ptr_t CPUID)
{
ffffffff80224547:	f3 0f 1e fa          	endbr64
ffffffff8022454b:	55                   	push   %rbp
ffffffff8022454c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022454f:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80224553:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80224557:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Mark interrupt edge-triggered, active high, enabled, and routed to the
     * given cpunum, which happens to be that cpu's APIC ID. */
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1),RME_X64_INT_USER(IRQ));
ffffffff8022455b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022455f:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff80224562:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224569:	80 ff ff 
ffffffff8022456c:	83 c2 10             	add    $0x10,%edx
ffffffff8022456f:	89 10                	mov    %edx,(%rax)
ffffffff80224571:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224575:	89 c2                	mov    %eax,%edx
ffffffff80224577:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022457e:	80 ff ff 
ffffffff80224581:	83 c2 20             	add    $0x20,%edx
ffffffff80224584:	89 50 10             	mov    %edx,0x10(%rax)
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,CPUID<<24);
ffffffff80224587:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022458b:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff8022458e:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224595:	80 ff ff 
ffffffff80224598:	83 c2 11             	add    $0x11,%edx
ffffffff8022459b:	89 10                	mov    %edx,(%rax)
ffffffff8022459d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802245a1:	89 c2                	mov    %eax,%edx
ffffffff802245a3:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802245aa:	80 ff ff 
ffffffff802245ad:	c1 e2 18             	shl    $0x18,%edx
ffffffff802245b0:	89 50 10             	mov    %edx,0x10(%rax)
}
ffffffff802245b3:	90                   	nop
ffffffff802245b4:	c9                   	leave
ffffffff802245b5:	c3                   	ret

ffffffff802245b6 <__RME_X64_IOAPIC_Int_Disable>:
Input       : rme_ptr_t IRQ - The user vector to enable.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Int_Disable(rme_ptr_t IRQ)
{
ffffffff802245b6:	f3 0f 1e fa          	endbr64
ffffffff802245ba:	55                   	push   %rbp
ffffffff802245bb:	48 89 e5             	mov    %rsp,%rbp
ffffffff802245be:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff802245c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    /* Mark interrupt edge-triggered, active high, enabled, and routed to the
     * given cpunum, which happens to be that cpu's APIC ID. */
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1),RME_X64_IOAPIC_INT_DISABLED|RME_X64_INT_USER(IRQ));
ffffffff802245c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802245ca:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff802245cd:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802245d4:	80 ff ff 
ffffffff802245d7:	83 c2 10             	add    $0x10,%edx
ffffffff802245da:	89 10                	mov    %edx,(%rax)
ffffffff802245dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802245e0:	8d 50 20             	lea    0x20(%rax),%edx
ffffffff802245e3:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802245ea:	80 ff ff 
ffffffff802245ed:	81 ca 00 00 01 00    	or     $0x10000,%edx
ffffffff802245f3:	89 50 10             	mov    %edx,0x10(%rax)
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,0);
ffffffff802245f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802245fa:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff802245fd:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224604:	80 ff ff 
ffffffff80224607:	83 c2 11             	add    $0x11,%edx
ffffffff8022460a:	89 10                	mov    %edx,(%rax)
ffffffff8022460c:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224613:	80 ff ff 
ffffffff80224616:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
}
ffffffff8022461d:	90                   	nop
ffffffff8022461e:	c9                   	leave
ffffffff8022461f:	c3                   	ret

ffffffff80224620 <__RME_X64_IOAPIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Init(void)
{
ffffffff80224620:	f3 0f 1e fa          	endbr64
ffffffff80224624:	55                   	push   %rbp
ffffffff80224625:	48 89 e5             	mov    %rsp,%rbp
ffffffff80224628:	48 83 ec 20          	sub    $0x20,%rsp
    rme_ptr_t Max_Int;
    rme_ptr_t IOAPIC_ID;
    rme_cnt_t Count;
    /* IOAPIC initialization */
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff8022462c:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224633:	80 ff ff 
ffffffff80224636:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
ffffffff8022463c:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224643:	80 ff ff 
ffffffff80224646:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80224649:	89 c0                	mov    %eax,%eax
ffffffff8022464b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Max_Int=((Max_Int>>16)&0xFF);
ffffffff8022464f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224653:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80224657:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff8022465c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    RME_DBG_S("\n\rMax int is: ");
ffffffff80224660:	48 c7 c7 fe 8d 22 80 	mov    $0xffffffff80228dfe,%rdi
ffffffff80224667:	e8 c1 83 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(Max_Int);
ffffffff8022466c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224670:	48 89 c7             	mov    %rax,%rdi
ffffffff80224673:	e8 bb 81 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_ID,IOAPIC_ID);
ffffffff80224678:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022467f:	80 ff ff 
ffffffff80224682:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
ffffffff80224688:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022468f:	80 ff ff 
ffffffff80224692:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80224695:	89 c0                	mov    %eax,%eax
ffffffff80224697:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    IOAPIC_ID>>=24;
ffffffff8022469b:	48 c1 6d e8 18       	shrq   $0x18,-0x18(%rbp)
    /* This is not necessarily true when we have >1 IOAPICs */
    /* RME_ASSERT(IOAPIC_ID==RME_X64_IOAPIC_Info[0].IOAPIC_ID); */
    RME_DBG_S("\n\rIOAPIC ID is: ");
ffffffff802246a0:	48 c7 c7 0d 8e 22 80 	mov    $0xffffffff80228e0d,%rdi
ffffffff802246a7:	e8 81 83 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(IOAPIC_ID);
ffffffff802246ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802246b0:	48 89 c7             	mov    %rax,%rdi
ffffffff802246b3:	e8 7b 81 fe ff       	call   ffffffff8020c833 <RME_Int_Print>

    /* Disable all interrupts */
    for(Count=0;Count<=Max_Int;Count++)
ffffffff802246b8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802246bf:	00 
ffffffff802246c0:	eb 11                	jmp    ffffffff802246d3 <__RME_X64_IOAPIC_Init+0xb3>
        __RME_X64_IOAPIC_Int_Disable(Count);
ffffffff802246c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802246c6:	48 89 c7             	mov    %rax,%rdi
ffffffff802246c9:	e8 e8 fe ff ff       	call   ffffffff802245b6 <__RME_X64_IOAPIC_Int_Disable>
    for(Count=0;Count<=Max_Int;Count++)
ffffffff802246ce:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802246d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802246d7:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff802246db:	73 e5                	jae    ffffffff802246c2 <__RME_X64_IOAPIC_Init+0xa2>
}
ffffffff802246dd:	90                   	nop
ffffffff802246de:	90                   	nop
ffffffff802246df:	c9                   	leave
ffffffff802246e0:	c3                   	ret

ffffffff802246e1 <__RME_X64_SMP_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff802246e1:	f3 0f 1e fa          	endbr64
ffffffff802246e5:	55                   	push   %rbp
ffffffff802246e6:	48 89 e5             	mov    %rsp,%rbp
ffffffff802246e9:	48 83 ec 20          	sub    $0x20,%rsp
    rme_u8_t* Code;
    rme_cnt_t Count;
    rme_u16_t* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(rme_u8_t*)RME_X64_PA2VA(0x7000);
ffffffff802246ed:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax
ffffffff802246f4:	80 ff ff 
ffffffff802246f7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff802246fb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224702:	00 
ffffffff80224703:	eb 1f                	jmp    ffffffff80224724 <__RME_X64_SMP_Init+0x43>
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80224705:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80224709:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022470d:	48 01 c2             	add    %rax,%rdx
ffffffff80224710:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224714:	48 05 60 8c 22 80    	add    $0xffffffff80228c60,%rax
ffffffff8022471a:	0f b6 00             	movzbl (%rax),%eax
ffffffff8022471d:	88 02                	mov    %al,(%rdx)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff8022471f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224724:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224728:	48 83 f8 61          	cmp    $0x61,%rax
ffffffff8022472c:	76 d7                	jbe    ffffffff80224705 <__RME_X64_SMP_Init+0x24>

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
ffffffff8022472e:	48 c7 05 77 db 00 00 	movq   $0x1,0xdb77(%rip)        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80224735:	01 00 00 00 
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80224739:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff80224740:	00 
ffffffff80224741:	e9 d1 01 00 00       	jmp    ffffffff80224917 <__RME_X64_SMP_Init+0x236>
    {
        RME_DBG_S("\n\rBooting CPU ");
ffffffff80224746:	48 c7 c7 1e 8e 22 80 	mov    $0xffffffff80228e1e,%rdi
ffffffff8022474d:	e8 db 82 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_DBG_I(Count);
ffffffff80224752:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224756:	48 89 c7             	mov    %rax,%rdi
ffffffff80224759:	e8 d5 80 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
        /* Temporary stack */
        *(rme_u32_t*)(Code-4)=0x8000;
ffffffff8022475e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224762:	48 83 e8 04          	sub    $0x4,%rax
ffffffff80224766:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff8022476c:	48 c7 c0 89 80 10 80 	mov    $0xffffffff80108089,%rax
ffffffff80224773:	89 c2                	mov    %eax,%edx
ffffffff80224775:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224779:	48 83 e8 08          	sub    $0x8,%rax
ffffffff8022477d:	81 c2 00 00 00 80    	add    $0x80000000,%edx
ffffffff80224783:	89 10                	mov    %edx,(%rax)
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80224785:	48 8b 15 0c db 00 00 	mov    0xdb0c(%rip),%rdx        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff8022478c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224790:	48 83 c0 01          	add    $0x1,%rax
ffffffff80224794:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80224798:	48 89 c1             	mov    %rax,%rcx
ffffffff8022479b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022479f:	48 83 e8 10          	sub    $0x10,%rax
ffffffff802247a3:	48 01 ca             	add    %rcx,%rdx
ffffffff802247a6:	48 89 10             	mov    %rdx,(%rax)

        /* Initialize CMOS shutdown code to 0AH */
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff802247a9:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff802247ae:	bf 70 00 00 00       	mov    $0x70,%edi
ffffffff802247b3:	e8 52 70 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
        __RME_X64_Out(RME_X64_RTC_DATA,0xA);
ffffffff802247b8:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff802247bd:	bf 71 00 00 00       	mov    $0x71,%edi
ffffffff802247c2:	e8 43 70 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
        /* Warm reset vector point to AP code */
        Warm_Reset=(rme_u16_t*)RME_X64_PA2VA((0x40<<4|0x67));
ffffffff802247c7:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax
ffffffff802247ce:	80 ff ff 
ffffffff802247d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Warm_Reset[0]=0;
ffffffff802247d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802247d9:	66 c7 00 00 00       	movw   $0x0,(%rax)
        Warm_Reset[1]=0x7000>>4;
ffffffff802247de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802247e2:	48 83 c0 02          	add    $0x2,%rax
ffffffff802247e6:	66 c7 00 00 07       	movw   $0x700,(%rax)

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802247eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802247ef:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802247f3:	48 05 c0 22 23 80    	add    $0xffffffff802322c0,%rax
ffffffff802247f9:	48 8b 00             	mov    (%rax),%rax
ffffffff802247fc:	89 c1                	mov    %eax,%ecx
ffffffff802247fe:	48 8b 05 1b eb 00 00 	mov    0xeb1b(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224805:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff8022480c:	80 ff ff 
ffffffff8022480f:	48 01 d0             	add    %rdx,%rax
ffffffff80224812:	48 89 c2             	mov    %rax,%rdx
ffffffff80224815:	89 c8                	mov    %ecx,%eax
ffffffff80224817:	c1 e0 18             	shl    $0x18,%eax
ffffffff8022481a:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff8022481c:	48 8b 05 fd ea 00 00 	mov    0xeafd(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224823:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff8022482a:	80 ff ff 
ffffffff8022482d:	48 01 d0             	add    %rdx,%rax
ffffffff80224830:	c7 00 00 c5 00 00    	movl   $0xc500,(%rax)
                                                 RME_X64_LAPIC_ICRLO_LEVEL|
                                                 RME_X64_LAPIC_ICRLO_ASSERT);
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80224836:	48 8b 05 e3 ea 00 00 	mov    0xeae3(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff8022483d:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224844:	80 ff ff 
ffffffff80224847:	48 01 d0             	add    %rdx,%rax
ffffffff8022484a:	c7 00 00 85 00 00    	movl   $0x8500,(%rax)
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80224850:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224854:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80224858:	48 05 c0 22 23 80    	add    $0xffffffff802322c0,%rax
ffffffff8022485e:	48 8b 00             	mov    (%rax),%rax
ffffffff80224861:	89 c1                	mov    %eax,%ecx
ffffffff80224863:	48 8b 05 b6 ea 00 00 	mov    0xeab6(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff8022486a:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff80224871:	80 ff ff 
ffffffff80224874:	48 01 d0             	add    %rdx,%rax
ffffffff80224877:	48 89 c2             	mov    %rax,%rdx
ffffffff8022487a:	89 c8                	mov    %ecx,%eax
ffffffff8022487c:	c1 e0 18             	shl    $0x18,%eax
ffffffff8022487f:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff80224881:	48 8b 05 98 ea 00 00 	mov    0xea98(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224888:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff8022488f:	80 ff ff 
ffffffff80224892:	48 01 d0             	add    %rdx,%rax
ffffffff80224895:	c7 00 07 06 00 00    	movl   $0x607,(%rax)
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff8022489b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022489f:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802248a3:	48 05 c0 22 23 80    	add    $0xffffffff802322c0,%rax
ffffffff802248a9:	48 8b 00             	mov    (%rax),%rax
ffffffff802248ac:	89 c1                	mov    %eax,%ecx
ffffffff802248ae:	48 8b 05 6b ea 00 00 	mov    0xea6b(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802248b5:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff802248bc:	80 ff ff 
ffffffff802248bf:	48 01 d0             	add    %rdx,%rax
ffffffff802248c2:	48 89 c2             	mov    %rax,%rdx
ffffffff802248c5:	89 c8                	mov    %ecx,%eax
ffffffff802248c7:	c1 e0 18             	shl    $0x18,%eax
ffffffff802248ca:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff802248cc:	48 8b 05 4d ea 00 00 	mov    0xea4d(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802248d3:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff802248da:	80 ff ff 
ffffffff802248dd:	48 01 d0             	add    %rdx,%rax
ffffffff802248e0:	c7 00 07 06 00 00    	movl   $0x607,(%rax)
        RME_X64_UDELAY(200);

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
ffffffff802248e6:	90                   	nop
ffffffff802248e7:	48 8b 05 c2 d9 00 00 	mov    0xd9c2(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff802248ee:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802248f2:	48 05 c8 22 23 80    	add    $0xffffffff802322c8,%rax
ffffffff802248f8:	48 8b 00             	mov    (%rax),%rax
ffffffff802248fb:	48 85 c0             	test   %rax,%rax
ffffffff802248fe:	74 e7                	je     ffffffff802248e7 <__RME_X64_SMP_Init+0x206>
        RME_X64_CPU_Cnt++;
ffffffff80224900:	48 8b 05 a9 d9 00 00 	mov    0xd9a9(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80224907:	48 83 c0 01          	add    $0x1,%rax
ffffffff8022490b:	48 89 05 9e d9 00 00 	mov    %rax,0xd99e(%rip)        # ffffffff802322b0 <RME_X64_CPU_Cnt>
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80224912:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224917:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022491b:	48 8b 05 86 d9 00 00 	mov    0xd986(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80224922:	48 39 c2             	cmp    %rax,%rdx
ffffffff80224925:	0f 82 1b fe ff ff    	jb     ffffffff80224746 <__RME_X64_SMP_Init+0x65>
    }
}
ffffffff8022492b:	90                   	nop
ffffffff8022492c:	90                   	nop
ffffffff8022492d:	c9                   	leave
ffffffff8022492e:	c3                   	ret

ffffffff8022492f <__RME_X64_SMP_Tick>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Tick(void)
{
ffffffff8022492f:	f3 0f 1e fa          	endbr64
ffffffff80224933:	55                   	push   %rbp
ffffffff80224934:	48 89 e5             	mov    %rsp,%rbp
    /* Is this a SMP? */
    if(RME_X64_Num_CPU>1)
ffffffff80224937:	48 8b 05 6a d9 00 00 	mov    0xd96a(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8022493e:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80224942:	76 34                	jbe    ffffffff80224978 <__RME_X64_SMP_Tick+0x49>
    {
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0xFFULL<<24);
ffffffff80224944:	48 8b 05 d5 e9 00 00 	mov    0xe9d5(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff8022494b:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff80224952:	80 ff ff 
ffffffff80224955:	48 01 d0             	add    %rdx,%rax
ffffffff80224958:	c7 00 00 00 00 ff    	movl   $0xff000000,(%rax)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_EXC_SELF|
ffffffff8022495e:	48 8b 05 bb e9 00 00 	mov    0xe9bb(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224965:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff8022496c:	80 ff ff 
ffffffff8022496f:	48 01 d0             	add    %rdx,%rax
ffffffff80224972:	c7 00 83 00 0c 00    	movl   $0xc0083,(%rax)
                                                 RME_X64_LAPIC_ICRLO_FIXED|
                                                 RME_X64_INT_SMP_SYSTICK);
    }
}
ffffffff80224978:	90                   	nop
ffffffff80224979:	5d                   	pop    %rbp
ffffffff8022497a:	c3                   	ret

ffffffff8022497b <__RME_X64_Timer_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_Timer_Init(void)
{
ffffffff8022497b:	f3 0f 1e fa          	endbr64
ffffffff8022497f:	55                   	push   %rbp
ffffffff80224980:	48 89 e5             	mov    %rsp,%rbp
    /* For timer interrupts, they will always be handled by core 1, and all the other
     * cores should receive a IPI for that, so their scheduler can look after their
     * threads. We are using square wave mode. */
    __RME_X64_Out(RME_X64_PIT_CMD,0x34);
ffffffff80224983:	be 34 00 00 00       	mov    $0x34,%esi
ffffffff80224988:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff8022498d:	e8 78 6e fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,(1193182/2/RME_X64_TIMER_FREQ)&0xFF);
ffffffff80224992:	be 54 00 00 00       	mov    $0x54,%esi
ffffffff80224997:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff8022499c:	e8 69 6e fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,((1193182/2/RME_X64_TIMER_FREQ)>>8)&0xFF);
ffffffff802249a1:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff802249a6:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff802249ab:	e8 5a 6e fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff802249b0:	90                   	nop
ffffffff802249b1:	5d                   	pop    %rbp
ffffffff802249b2:	c3                   	ret

ffffffff802249b3 <__RME_Lowlvl_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Lowlvl_Init(void)
{
ffffffff802249b3:	f3 0f 1e fa          	endbr64
ffffffff802249b7:	55                   	push   %rbp
ffffffff802249b8:	48 89 e5             	mov    %rsp,%rbp
    /* We are here now ! */
    __RME_X64_UART_Init();
ffffffff802249bb:	e8 b1 67 ff ff       	call   ffffffff8021b171 <__RME_X64_UART_Init>
    /* Read APIC tables and detect the configurations. Now we are not NUMA-aware */
    RME_ASSERT(__RME_X64_ACPI_Init()==0);
ffffffff802249c0:	e8 f9 6d ff ff       	call   ffffffff8021b7be <__RME_X64_ACPI_Init>
    /* Detect CPU features */
    __RME_X64_Feature_Get();
ffffffff802249c5:	e8 03 6f ff ff       	call   ffffffff8021b8cd <__RME_X64_Feature_Get>
    /* Extract memory specifications */
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff802249ca:	48 8b 05 57 d6 00 00 	mov    0xd657(%rip),%rax        # ffffffff80232028 <RME_X64_MBInfo>
ffffffff802249d1:	8b 40 2c             	mov    0x2c(%rax),%eax
ffffffff802249d4:	89 c2                	mov    %eax,%edx
ffffffff802249d6:	48 8b 05 4b d6 00 00 	mov    0xd64b(%rip),%rax        # ffffffff80232028 <RME_X64_MBInfo>
ffffffff802249dd:	8b 40 30             	mov    0x30(%rax),%eax
ffffffff802249e0:	89 c0                	mov    %eax,%eax
ffffffff802249e2:	48 89 d6             	mov    %rdx,%rsi
ffffffff802249e5:	48 89 c7             	mov    %rax,%rdi
ffffffff802249e8:	e8 59 70 ff ff       	call   ffffffff8021ba46 <__RME_X64_Mem_Init>

    return 0;
ffffffff802249ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802249f2:	5d                   	pop    %rbp
ffffffff802249f3:	c3                   	ret

ffffffff802249f4 <__RME_Pgt_Kom_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Kom_Init(void)
{
ffffffff802249f4:	f3 0f 1e fa          	endbr64
ffffffff802249f8:	55                   	push   %rbp
ffffffff802249f9:	48 89 e5             	mov    %rsp,%rbp
ffffffff802249fc:	48 83 ec 30          	sub    $0x30,%rsp
    rme_cnt_t PDE_Cnt;
    rme_cnt_t Addr_Cnt;
    struct __RME_X64_Mem* Mem;

    /* Now initialize the kernel object allocation table */
    _RME_Kot_Init(RME_X64_Layout.Kot_Size/sizeof(rme_ptr_t));
ffffffff80224a00:	48 8b 05 41 d6 00 00 	mov    0xd641(%rip),%rax        # ffffffff80232048 <RME_X64_Layout+0x8>
ffffffff80224a07:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80224a0b:	48 89 c7             	mov    %rax,%rdi
ffffffff80224a0e:	e8 cb d8 fe ff       	call   ffffffff802122de <_RME_Kot_Init>
    /* Reset PCID counter */
    RME_X64_PCID_Inc=0;
ffffffff80224a13:	48 c7 05 32 ed 00 00 	movq   $0x0,0xed32(%rip)        # ffffffff80233750 <RME_X64_PCID_Inc>
ffffffff80224a1a:	00 00 00 00 

    /* Create the frame for kernel page tables */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80224a1e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224a25:	00 
ffffffff80224a26:	e9 87 00 00 00       	jmp    ffffffff80224ab2 <__RME_Pgt_Kom_Init+0xbe>
    {
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|
ffffffff80224a2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224a2f:	48 83 c0 01          	add    $0x1,%rax
ffffffff80224a33:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80224a37:	48 05 00 90 10 80    	add    $0xffffffff80109000,%rax
ffffffff80224a3d:	48 89 c2             	mov    %rax,%rdx
ffffffff80224a40:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff80224a45:	48 01 c2             	add    %rax,%rdx
ffffffff80224a48:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80224a4f:	ff 0f 00 
ffffffff80224a52:	48 21 d0             	and    %rdx,%rax
ffffffff80224a55:	48 0d 03 01 00 00    	or     $0x103,%rax
ffffffff80224a5b:	48 89 c2             	mov    %rax,%rdx
ffffffff80224a5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224a62:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff80224a68:	48 89 14 c5 00 90 10 	mov    %rdx,-0x7fef7000(,%rax,8)
ffffffff80224a6f:	80 
        		                    RME_X64_MMU_KERN_PML4;

        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80224a70:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80224a77:	00 
ffffffff80224a78:	eb 29                	jmp    ffffffff80224aa3 <__RME_Pgt_Kom_Init+0xaf>
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff80224a7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224a7e:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff80224a82:	48 89 c2             	mov    %rax,%rdx
ffffffff80224a85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224a89:	48 01 d0             	add    %rdx,%rax
ffffffff80224a8c:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80224a92:	48 c7 04 c5 00 90 10 	movq   $0x102,-0x7fef7000(,%rax,8)
ffffffff80224a99:	80 02 01 00 00 
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80224a9e:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80224aa3:	48 81 7d f0 ff 01 00 	cmpq   $0x1ff,-0x10(%rbp)
ffffffff80224aaa:	00 
ffffffff80224aab:	7e cd                	jle    ffffffff80224a7a <__RME_Pgt_Kom_Init+0x86>
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80224aad:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224ab2:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff80224ab9:	00 
ffffffff80224aba:	0f 8e 6b ff ff ff    	jle    ffffffff80224a2b <__RME_Pgt_Kom_Init+0x37>
    }

    /* Map in the first 4GB as linear mappings as always, 4 super pages, including the device hole.
     * We need to detect whether the 1GB page is supported. If not, we just map the initial tables
     * in, and we know where they are hard-coded in the assembly file */
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff80224ac0:	48 8b 05 c1 ea 00 00 	mov    0xeac1(%rip),%rax        # ffffffff80233588 <RME_X64_Feature+0x248>
ffffffff80224ac7:	25 00 00 00 04       	and    $0x4000000,%eax
ffffffff80224acc:	48 85 c0             	test   %rax,%rax
ffffffff80224acf:	0f 84 97 00 00 00    	je     ffffffff80224b6c <__RME_Pgt_Kom_Init+0x178>
    {
        /* Can use 1GB pages */
        RME_DBG_S("\n\rThis CPU have 1GB superpage support");
ffffffff80224ad5:	48 c7 c7 30 8e 22 80 	mov    $0xffffffff80228e30,%rdi
ffffffff80224adc:	e8 4c 7f fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224ae1:	48 8b 05 18 55 ee ff 	mov    -0x11aae8(%rip),%rax        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80224ae8:	0c 81                	or     $0x81,%al
ffffffff80224aea:	48 89 05 0f 55 ee ff 	mov    %rax,-0x11aaf1(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224af1:	48 8b 05 10 55 ee ff 	mov    -0x11aaf0(%rip),%rax        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80224af8:	48 0d 81 00 00 40    	or     $0x40000081,%rax
ffffffff80224afe:	48 89 05 03 55 ee ff 	mov    %rax,-0x11aafd(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224b05:	48 8b 05 04 55 ee ff 	mov    -0x11aafc(%rip),%rax        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80224b0c:	ba 81 00 00 80       	mov    $0x80000081,%edx
ffffffff80224b11:	48 09 d0             	or     %rdx,%rax
ffffffff80224b14:	48 89 05 f5 54 ee ff 	mov    %rax,-0x11ab0b(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        /* We need to mark the device hole as unbufferable */
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_ADDR(3*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224b1b:	48 8b 05 f6 54 ee ff 	mov    -0x11ab0a(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224b22:	ba 81 00 00 c0       	mov    $0xc0000081,%edx
ffffffff80224b27:	48 09 d0             	or     %rdx,%rax
ffffffff80224b2a:	48 89 05 e7 54 ee ff 	mov    %rax,-0x11ab19(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff80224b31:	48 8b 05 e0 54 ee ff 	mov    -0x11ab20(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224b38:	48 83 c8 18          	or     $0x18,%rax
ffffffff80224b3c:	48 89 05 d5 54 ee ff 	mov    %rax,-0x11ab2b(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224b43:	48 8b 05 a6 54 fe ff 	mov    -0x1ab5a(%rip),%rax        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff80224b4a:	0c 81                	or     $0x81,%al
ffffffff80224b4c:	48 89 05 9d 54 fe ff 	mov    %rax,-0x1ab63(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224b53:	48 8b 05 9e 54 fe ff 	mov    -0x1ab62(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224b5a:	48 0d 81 00 00 40    	or     $0x40000081,%rax
ffffffff80224b60:	48 89 05 91 54 fe ff 	mov    %rax,-0x1ab6f(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224b67:	e9 84 00 00 00       	jmp    ffffffff80224bf0 <__RME_Pgt_Kom_Init+0x1fc>
    }
    else
    {
        RME_DBG_S("\n\rThis CPU do not have 1GB superpage support");
ffffffff80224b6c:	48 c7 c7 58 8e 22 80 	mov    $0xffffffff80228e58,%rdi
ffffffff80224b73:	e8 b5 7e fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        /* Cannot use 1GB pages, we revert to 2MB pages used during kernel startup */
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff80224b78:	48 8b 05 81 54 ee ff 	mov    -0x11ab7f(%rip),%rax        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80224b7f:	48 0d 01 40 10 00    	or     $0x104001,%rax
ffffffff80224b85:	48 89 05 74 54 ee ff 	mov    %rax,-0x11ab8c(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[0][1]|=0x105000|RME_X64_MMU_P;
ffffffff80224b8c:	48 8b 05 75 54 ee ff 	mov    -0x11ab8b(%rip),%rax        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80224b93:	48 0d 01 50 10 00    	or     $0x105001,%rax
ffffffff80224b99:	48 89 05 68 54 ee ff 	mov    %rax,-0x11ab98(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
        RME_X64_Kpgt.PDP[0][2]|=0x106000|RME_X64_MMU_P;
ffffffff80224ba0:	48 8b 05 69 54 ee ff 	mov    -0x11ab97(%rip),%rax        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80224ba7:	48 0d 01 60 10 00    	or     $0x106001,%rax
ffffffff80224bad:	48 89 05 5c 54 ee ff 	mov    %rax,-0x11aba4(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        RME_X64_Kpgt.PDP[0][3]|=0x107000|RME_X64_MMU_PCD|RME_X64_MMU_PWT|RME_X64_MMU_P;
ffffffff80224bb4:	48 8b 05 5d 54 ee ff 	mov    -0x11aba3(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224bbb:	48 0d 19 70 10 00    	or     $0x107019,%rax
ffffffff80224bc1:	48 89 05 50 54 ee ff 	mov    %rax,-0x11abb0(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
ffffffff80224bc8:	48 8b 05 21 54 fe ff 	mov    -0x1abdf(%rip),%rax        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff80224bcf:	48 0d 01 40 10 00    	or     $0x104001,%rax
ffffffff80224bd5:	48 89 05 14 54 fe ff 	mov    %rax,-0x1abec(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff80224bdc:	48 8b 05 15 54 fe ff 	mov    -0x1abeb(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224be3:	48 0d 01 50 10 00    	or     $0x105001,%rax
ffffffff80224be9:	48 89 05 08 54 fe ff 	mov    %rax,-0x1abf8(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
    }

    /* Ignore all memory below 4G, but we need to get the size of such memory above 16MB */
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
ffffffff80224bf0:	48 8b 05 09 54 00 00 	mov    0x5409(%rip),%rax        # ffffffff8022a000 <RME_X64_Phys_Mem>
ffffffff80224bf7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224bfb:	eb 26                	jmp    ffffffff80224c23 <__RME_Pgt_Kom_Init+0x22f>
    {
        /* See if this memory segment passes 16MB limit */
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
ffffffff80224bfd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224c01:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224c05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224c09:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224c0d:	48 01 d0             	add    %rdx,%rax
ffffffff80224c10:	48 3d 00 00 00 01    	cmp    $0x1000000,%rax
ffffffff80224c16:	77 17                	ja     ffffffff80224c2f <__RME_Pgt_Kom_Init+0x23b>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224c18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224c1c:	48 8b 00             	mov    (%rax),%rax
ffffffff80224c1f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224c23:	48 81 7d d8 00 a0 22 	cmpq   $0xffffffff8022a000,-0x28(%rbp)
ffffffff80224c2a:	80 
ffffffff80224c2b:	75 d0                	jne    ffffffff80224bfd <__RME_Pgt_Kom_Init+0x209>
ffffffff80224c2d:	eb 01                	jmp    ffffffff80224c30 <__RME_Pgt_Kom_Init+0x23c>
        else
            break;
ffffffff80224c2f:	90                   	nop
    }

    /* The first Kom1 trunk must start at smaller or equal to 16MB */
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGT_SIZE_16M));
    /* The raw sizes of kernel memory segment 1 - per CPU area is already aligned so no need to align again */
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80224c30:	48 8b 15 19 d4 00 00 	mov    0xd419(%rip),%rdx        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff80224c37:	48 8b 05 1a d4 00 00 	mov    0xd41a(%rip),%rax        # ffffffff80232058 <RME_X64_Layout+0x18>
ffffffff80224c3e:	48 01 d0             	add    %rdx,%rax
ffffffff80224c41:	48 89 05 30 d4 00 00 	mov    %rax,0xd430(%rip)        # ffffffff80232078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80224c48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224c4c:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224c50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224c54:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224c58:	48 01 c2             	add    %rax,%rdx
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80224c5b:	48 8b 05 16 d4 00 00 	mov    0xd416(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80224c62:	48 29 c2             	sub    %rax,%rdx
ffffffff80224c65:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff80224c6c:	7f ff ff 
ffffffff80224c6f:	48 01 d0             	add    %rdx,%rax
ffffffff80224c72:	48 89 05 ff d4 00 00 	mov    %rax,0xd4ff(%rip)        # ffffffff80232178 <RME_X64_Layout+0x138>

    /* Add the rest of Kom1 into the array */
    Addr_Cnt=1;
ffffffff80224c79:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
ffffffff80224c80:	00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224c81:	e9 d8 00 00 00       	jmp    ffffffff80224d5e <__RME_Pgt_Kom_Init+0x36a>
    {
        /* Add all segments under 4GB to Kom1 */
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224c86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224c8a:	48 8b 00             	mov    (%rax),%rax
ffffffff80224c8d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        /* If detected anything above 4GB, then this is not Kom1, exiting */
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff80224c91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224c95:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224c99:	ba ff ff ff ff       	mov    $0xffffffff,%edx
ffffffff80224c9e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80224ca1:	0f 82 c7 00 00 00    	jb     ffffffff80224d6e <__RME_Pgt_Kom_Init+0x37a>
            break;
        /* If this memory trunk have less than 4MB, drop it */
        if(Mem->Length<RME_POW2(RME_PGT_SIZE_4M))
ffffffff80224ca7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224cab:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224caf:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80224cb5:	77 3a                	ja     ffffffff80224cf1 <__RME_Pgt_Kom_Init+0x2fd>
        {
            RME_DBG_S("\n\rAbandoning physical memory below 4G: addr 0x");
ffffffff80224cb7:	48 c7 c7 88 8e 22 80 	mov    $0xffffffff80228e88,%rdi
ffffffff80224cbe:	e8 6a 7d fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_DBG_U(Mem->Start_Addr);
ffffffff80224cc3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224cc7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224ccb:	48 89 c7             	mov    %rax,%rdi
ffffffff80224cce:	e8 60 7b fe ff       	call   ffffffff8020c833 <RME_Int_Print>
            RME_DBG_S(", length 0x");
ffffffff80224cd3:	48 c7 c7 b7 8e 22 80 	mov    $0xffffffff80228eb7,%rdi
ffffffff80224cda:	e8 4e 7d fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_DBG_U(Mem->Length);
ffffffff80224cdf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ce3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224ce7:	48 89 c7             	mov    %rax,%rdi
ffffffff80224cea:	e8 44 7b fe ff       	call   ffffffff8020c833 <RME_Int_Print>
            continue;
ffffffff80224cef:	eb 6d                	jmp    ffffffff80224d5e <__RME_Pgt_Kom_Init+0x36a>
        }
        if(Addr_Cnt>=RME_X64_KOM1_MAXSEGS)
ffffffff80224cf1:	48 83 7d e0 1f       	cmpq   $0x1f,-0x20(%rbp)
ffffffff80224cf6:	7e 0c                	jle    ffffffff80224d04 <__RME_Pgt_Kom_Init+0x310>
        {
            RME_DBG_S("\r\nThe memory under 4G is too fragmented. Aborting.");
ffffffff80224cf8:	48 c7 c7 c8 8e 22 80 	mov    $0xffffffff80228ec8,%rdi
ffffffff80224cff:	e8 29 7d fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_ASSERT(0);
        }
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff80224d04:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d08:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224d0c:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80224d12:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224d18:	48 89 c2             	mov    %rax,%rdx
ffffffff80224d1b:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80224d22:	80 ff ff 
ffffffff80224d25:	48 01 c2             	add    %rax,%rdx
ffffffff80224d28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224d2c:	48 83 c0 06          	add    $0x6,%rax
ffffffff80224d30:	48 89 14 c5 48 20 23 	mov    %rdx,-0x7fdcdfb8(,%rax,8)
ffffffff80224d37:	80 
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff80224d38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d3c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224d40:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224d46:	48 89 c2             	mov    %rax,%rdx
ffffffff80224d49:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224d4d:	48 83 c0 26          	add    $0x26,%rax
ffffffff80224d51:	48 89 14 c5 48 20 23 	mov    %rdx,-0x7fdcdfb8(,%rax,8)
ffffffff80224d58:	80 
        Addr_Cnt++;
ffffffff80224d59:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224d5e:	48 81 7d d8 00 a0 22 	cmpq   $0xffffffff8022a000,-0x28(%rbp)
ffffffff80224d65:	80 
ffffffff80224d66:	0f 85 1a ff ff ff    	jne    ffffffff80224c86 <__RME_Pgt_Kom_Init+0x292>
ffffffff80224d6c:	eb 01                	jmp    ffffffff80224d6f <__RME_Pgt_Kom_Init+0x37b>
            break;
ffffffff80224d6e:	90                   	nop
    }
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff80224d6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224d73:	48 89 05 f6 d2 00 00 	mov    %rax,0xd2f6(%rip)        # ffffffff80232070 <RME_X64_Layout+0x30>

    /* This is the hole */
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff80224d7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224d7e:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224d82:	48 83 c0 06          	add    $0x6,%rax
ffffffff80224d86:	48 8b 14 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rdx
ffffffff80224d8d:	80 
ffffffff80224d8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224d92:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224d96:	48 83 c0 26          	add    $0x26,%rax
ffffffff80224d9a:	48 8b 04 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rax
ffffffff80224da1:	80 
ffffffff80224da2:	48 01 d0             	add    %rdx,%rax
ffffffff80224da5:	48 89 05 cc d4 00 00 	mov    %rax,0xd4cc(%rip)        # ffffffff80232278 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff80224dac:	48 8b 05 c5 d4 00 00 	mov    0xd4c5(%rip),%rax        # ffffffff80232278 <RME_X64_Layout+0x238>
ffffffff80224db3:	48 ba 00 00 00 00 01 	movabs $0xffff800100000000,%rdx
ffffffff80224dba:	80 ff ff 
ffffffff80224dbd:	48 29 c2             	sub    %rax,%rdx
ffffffff80224dc0:	48 89 15 b9 d4 00 00 	mov    %rdx,0xd4b9(%rip)        # ffffffff80232280 <RME_X64_Layout+0x240>

    /* Create kernel page mappings for memory above 4GB - we assume only one segment below 4GB */
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff80224dc7:	48 8b 05 aa d2 00 00 	mov    0xd2aa(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff80224dce:	48 89 05 8b d2 00 00 	mov    %rax,0xd28b(%rip)        # ffffffff80232060 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff80224dd5:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff80224ddc:	80 ff ff 
ffffffff80224ddf:	48 89 05 a2 d4 00 00 	mov    %rax,0xd4a2(%rip)        # ffffffff80232288 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff80224de6:	48 c7 05 9f d4 00 00 	movq   $0x0,0xd49f(%rip)        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff80224ded:	00 00 00 00 

    /* We have filled the first 4 1GB superpages */
    PML4_Cnt=0;
ffffffff80224df1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224df8:	00 
    PDP_Cnt=3;
ffffffff80224df9:	48 c7 45 f0 03 00 00 	movq   $0x3,-0x10(%rbp)
ffffffff80224e00:	00 
    PDE_Cnt=511;
ffffffff80224e01:	48 c7 45 e8 ff 01 00 	movq   $0x1ff,-0x18(%rbp)
ffffffff80224e08:	00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224e09:	e9 d5 01 00 00       	jmp    ffffffff80224fe3 <__RME_Pgt_Kom_Init+0x5ef>
    {
        /* Throw away small segments */
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff80224e0e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e12:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224e16:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80224e1c:	77 48                	ja     ffffffff80224e66 <__RME_Pgt_Kom_Init+0x472>
        {
            RME_DBG_S("\n\rAbandoning physical memory above 4G: addr 0x");
ffffffff80224e1e:	48 c7 c7 00 8f 22 80 	mov    $0xffffffff80228f00,%rdi
ffffffff80224e25:	e8 03 7c fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_DBG_U(Mem->Start_Addr);
ffffffff80224e2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e2e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224e32:	48 89 c7             	mov    %rax,%rdi
ffffffff80224e35:	e8 f9 79 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
            RME_DBG_S(", length 0x");
ffffffff80224e3a:	48 c7 c7 b7 8e 22 80 	mov    $0xffffffff80228eb7,%rdi
ffffffff80224e41:	e8 e7 7b fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_DBG_U(Mem->Length);
ffffffff80224e46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e4a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224e4e:	48 89 c7             	mov    %rax,%rdi
ffffffff80224e51:	e8 dd 79 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224e56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e5a:	48 8b 00             	mov    (%rax),%rax
ffffffff80224e5d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            continue;
ffffffff80224e61:	e9 7d 01 00 00       	jmp    ffffffff80224fe3 <__RME_Pgt_Kom_Init+0x5ef>
        }

        /* Align the memory segment to 2MB */
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80224e66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e6a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224e6e:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80224e74:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224e7a:	48 89 c2             	mov    %rax,%rdx
ffffffff80224e7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e81:	48 89 50 10          	mov    %rdx,0x10(%rax)
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff80224e85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e89:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224e8d:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224e91:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224e97:	48 89 c2             	mov    %rax,%rdx
ffffffff80224e9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e9e:	48 89 50 18          	mov    %rdx,0x18(%rax)

        /* Add these pages into the kernel at addresses above 4GB offset as 2MB pages */
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80224ea2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80224ea9:	00 
ffffffff80224eaa:	e9 14 01 00 00       	jmp    ffffffff80224fc3 <__RME_Pgt_Kom_Init+0x5cf>
        {
            PDE_Cnt++;
ffffffff80224eaf:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
            if(PDE_Cnt==512)
ffffffff80224eb4:	48 81 7d e8 00 02 00 	cmpq   $0x200,-0x18(%rbp)
ffffffff80224ebb:	00 
ffffffff80224ebc:	0f 85 8f 00 00 00    	jne    ffffffff80224f51 <__RME_Pgt_Kom_Init+0x55d>
            {
                PDE_Cnt=0;
ffffffff80224ec2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80224ec9:	00 
                PDP_Cnt++;
ffffffff80224eca:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
                if(PDP_Cnt==512)
ffffffff80224ecf:	48 81 7d f0 00 02 00 	cmpq   $0x200,-0x10(%rbp)
ffffffff80224ed6:	00 
ffffffff80224ed7:	75 0d                	jne    ffffffff80224ee6 <__RME_Pgt_Kom_Init+0x4f2>
                {
                    PDP_Cnt=0;
ffffffff80224ed9:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80224ee0:	00 
                    PML4_Cnt++;
ffffffff80224ee1:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
                }
                /* Map this PDE into the PDP */
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff80224ee6:	48 8b 05 8b d1 00 00 	mov    0xd18b(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff80224eed:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80224ef4:	80 00 00 
ffffffff80224ef7:	48 01 c2             	add    %rax,%rdx
ffffffff80224efa:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80224f01:	ff 0f 00 
ffffffff80224f04:	48 21 d0             	and    %rdx,%rax
ffffffff80224f07:	48 83 c8 01          	or     $0x1,%rax
ffffffff80224f0b:	48 89 c2             	mov    %rax,%rdx
ffffffff80224f0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224f12:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff80224f16:	48 89 c1             	mov    %rax,%rcx
ffffffff80224f19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224f1d:	48 01 c8             	add    %rcx,%rax
ffffffff80224f20:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80224f26:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80224f2d:	80 
ffffffff80224f2e:	48 09 c2             	or     %rax,%rdx
ffffffff80224f31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224f35:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff80224f39:	48 89 c1             	mov    %rax,%rcx
ffffffff80224f3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224f40:	48 01 c8             	add    %rcx,%rax
ffffffff80224f43:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80224f49:	48 89 14 c5 00 90 10 	mov    %rdx,-0x7fef7000(,%rax,8)
ffffffff80224f50:	80 
            }

            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff80224f51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224f55:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224f59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224f5d:	48 01 c2             	add    %rax,%rdx
ffffffff80224f60:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80224f67:	ff 0f 00 
ffffffff80224f6a:	48 21 d0             	and    %rdx,%rax
ffffffff80224f6d:	48 8b 15 04 d1 00 00 	mov    0xd104(%rip),%rdx        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff80224f74:	48 0d 83 01 00 00    	or     $0x183,%rax
ffffffff80224f7a:	48 89 02             	mov    %rax,(%rdx)
            RME_X64_Layout.Kom1_Start[0]+=sizeof(rme_ptr_t);
ffffffff80224f7d:	48 8b 05 f4 d0 00 00 	mov    0xd0f4(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff80224f84:	48 83 c0 08          	add    $0x8,%rax
ffffffff80224f88:	48 89 05 e9 d0 00 00 	mov    %rax,0xd0e9(%rip)        # ffffffff80232078 <RME_X64_Layout+0x38>
            RME_X64_Layout.Kom1_Size[0]-=sizeof(rme_ptr_t);
ffffffff80224f8f:	48 8b 05 e2 d1 00 00 	mov    0xd1e2(%rip),%rax        # ffffffff80232178 <RME_X64_Layout+0x138>
ffffffff80224f96:	48 83 e8 08          	sub    $0x8,%rax
ffffffff80224f9a:	48 89 05 d7 d1 00 00 	mov    %rax,0xd1d7(%rip)        # ffffffff80232178 <RME_X64_Layout+0x138>
            RME_X64_Layout.Kom2_Size+=RME_POW2(RME_PGT_SIZE_2M);
ffffffff80224fa1:	48 8b 05 e8 d2 00 00 	mov    0xd2e8(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff80224fa8:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80224fae:	48 89 05 db d2 00 00 	mov    %rax,0xd2db(%rip)        # ffffffff80232290 <RME_X64_Layout+0x250>
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80224fb5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224fb9:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80224fbf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80224fc3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224fc7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224fcb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80224fcf:	48 39 c2             	cmp    %rax,%rdx
ffffffff80224fd2:	0f 82 d7 fe ff ff    	jb     ffffffff80224eaf <__RME_Pgt_Kom_Init+0x4bb>
        }

        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224fd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224fdc:	48 8b 00             	mov    (%rax),%rax
ffffffff80224fdf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224fe3:	48 81 7d d8 00 a0 22 	cmpq   $0xffffffff8022a000,-0x28(%rbp)
ffffffff80224fea:	80 
ffffffff80224feb:	0f 85 1d fe ff ff    	jne    ffffffff80224e0e <__RME_Pgt_Kom_Init+0x41a>
    }

    /* Copy the new page tables to the temporary entries, so that we can boot SMP */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80224ff1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224ff8:	00 
ffffffff80224ff9:	eb 33                	jmp    ffffffff8022502e <__RME_Pgt_Kom_Init+0x63a>
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff80224ffb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224fff:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80225006:	00 
ffffffff80225007:	48 b8 00 18 10 00 00 	movabs $0xffff800000101800,%rax
ffffffff8022500e:	80 ff ff 
ffffffff80225011:	48 01 c2             	add    %rax,%rdx
ffffffff80225014:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225018:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8022501e:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80225025:	80 
ffffffff80225026:	48 89 02             	mov    %rax,(%rdx)
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80225029:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8022502e:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff80225035:	00 
ffffffff80225036:	7e c3                	jle    ffffffff80224ffb <__RME_Pgt_Kom_Init+0x607>

    /* Page table allocation finished. Now need to align Kom1 to 2MB page boundary */
    RME_X64_Layout.Kom1_Start[0]=RME_ROUND_UP(RME_X64_Layout.Kom1_Start[0],RME_PGT_SIZE_2M);
ffffffff80225038:	48 8b 05 39 d0 00 00 	mov    0xd039(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff8022503f:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80225045:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff8022504b:	48 89 05 26 d0 00 00 	mov    %rax,0xd026(%rip)        # ffffffff80232078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Size[0]-1,RME_PGT_SIZE_2M);
ffffffff80225052:	48 8b 05 1f d1 00 00 	mov    0xd11f(%rip),%rax        # ffffffff80232178 <RME_X64_Layout+0x138>
ffffffff80225059:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8022505d:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80225063:	48 89 05 0e d1 00 00 	mov    %rax,0xd10e(%rip)        # ffffffff80232178 <RME_X64_Layout+0x138>

    /* All memory is mapped. Now figure out the size of kernel stacks */
    RME_X64_Layout.Kpgtbl_Size=RME_X64_Layout.Kom1_Start[0]-RME_X64_Layout.Kpgtbl_Start;
ffffffff8022506a:	48 8b 15 07 d0 00 00 	mov    0xd007(%rip),%rdx        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff80225071:	48 8b 05 e8 cf 00 00 	mov    0xcfe8(%rip),%rax        # ffffffff80232060 <RME_X64_Layout+0x20>
ffffffff80225078:	48 29 c2             	sub    %rax,%rdx
ffffffff8022507b:	48 89 15 e6 cf 00 00 	mov    %rdx,0xcfe6(%rip)        # ffffffff80232068 <RME_X64_Layout+0x28>

    /* See if we are allocating the stack from Kom2 or Kom1 */
    if(RME_X64_Layout.Kom2_Size==0)
ffffffff80225082:	48 8b 05 07 d2 00 00 	mov    0xd207(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff80225089:	48 85 c0             	test   %rax,%rax
ffffffff8022508c:	75 54                	jne    ffffffff802250e2 <__RME_Pgt_Kom_Init+0x6ee>
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Start[0]+RME_X64_Layout.Kom1_Size[0]-1,RME_X64_KSTACK_ORDER);
ffffffff8022508e:	48 8b 15 e3 cf 00 00 	mov    0xcfe3(%rip),%rdx        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff80225095:	48 8b 05 dc d0 00 00 	mov    0xd0dc(%rip),%rax        # ffffffff80232178 <RME_X64_Layout+0x138>
ffffffff8022509c:	48 01 d0             	add    %rdx,%rax
ffffffff8022509f:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802250a3:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff802250a9:	48 89 05 e8 d1 00 00 	mov    %rax,0xd1e8(%rip)        # ffffffff80232298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff802250b0:	48 8b 05 e9 d1 00 00 	mov    0xd1e9(%rip),%rax        # ffffffff802322a0 <RME_X64_Layout+0x260>
ffffffff802250b7:	48 8b 15 da d1 00 00 	mov    0xd1da(%rip),%rdx        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff802250be:	48 29 c2             	sub    %rax,%rdx
ffffffff802250c1:	48 89 15 d0 d1 00 00 	mov    %rdx,0xd1d0(%rip)        # ffffffff80232298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom1_Size[0]=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom1_Start[0];
ffffffff802250c8:	48 8b 15 c9 d1 00 00 	mov    0xd1c9(%rip),%rdx        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff802250cf:	48 8b 05 a2 cf 00 00 	mov    0xcfa2(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff802250d6:	48 29 c2             	sub    %rax,%rdx
ffffffff802250d9:	48 89 15 98 d0 00 00 	mov    %rdx,0xd098(%rip)        # ffffffff80232178 <RME_X64_Layout+0x138>
ffffffff802250e0:	eb 52                	jmp    ffffffff80225134 <__RME_Pgt_Kom_Init+0x740>
    }


    else
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size-1,RME_X64_KSTACK_ORDER);
ffffffff802250e2:	48 8b 15 9f d1 00 00 	mov    0xd19f(%rip),%rdx        # ffffffff80232288 <RME_X64_Layout+0x248>
ffffffff802250e9:	48 8b 05 a0 d1 00 00 	mov    0xd1a0(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff802250f0:	48 01 d0             	add    %rdx,%rax
ffffffff802250f3:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802250f7:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff802250fd:	48 89 05 94 d1 00 00 	mov    %rax,0xd194(%rip)        # ffffffff80232298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80225104:	48 8b 05 95 d1 00 00 	mov    0xd195(%rip),%rax        # ffffffff802322a0 <RME_X64_Layout+0x260>
ffffffff8022510b:	48 8b 15 86 d1 00 00 	mov    0xd186(%rip),%rdx        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff80225112:	48 29 c2             	sub    %rax,%rdx
ffffffff80225115:	48 89 15 7c d1 00 00 	mov    %rdx,0xd17c(%rip)        # ffffffff80232298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom2_Start;
ffffffff8022511c:	48 8b 15 75 d1 00 00 	mov    0xd175(%rip),%rdx        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff80225123:	48 8b 05 5e d1 00 00 	mov    0xd15e(%rip),%rax        # ffffffff80232288 <RME_X64_Layout+0x248>
ffffffff8022512a:	48 29 c2             	sub    %rax,%rdx
ffffffff8022512d:	48 89 15 5c d1 00 00 	mov    %rdx,0xd15c(%rip)        # ffffffff80232290 <RME_X64_Layout+0x250>
    }

    /* Now report all mapping info */
    RME_DBG_S("\n\r\n\rKot_Start:     0x");
ffffffff80225134:	48 c7 c7 2f 8f 22 80 	mov    $0xffffffff80228f2f,%rdi
ffffffff8022513b:	e8 ed 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kot_Start);
ffffffff80225140:	48 8b 05 f9 ce 00 00 	mov    0xcef9(%rip),%rax        # ffffffff80232040 <RME_X64_Layout>
ffffffff80225147:	48 89 c7             	mov    %rax,%rdi
ffffffff8022514a:	e8 e4 76 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rKot_Size:      0x");
ffffffff8022514f:	48 c7 c7 45 8f 22 80 	mov    $0xffffffff80228f45,%rdi
ffffffff80225156:	e8 d2 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kot_Size);
ffffffff8022515b:	48 8b 05 e6 ce 00 00 	mov    0xcee6(%rip),%rax        # ffffffff80232048 <RME_X64_Layout+0x8>
ffffffff80225162:	48 89 c7             	mov    %rax,%rdi
ffffffff80225165:	e8 c9 76 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rPerCPU_Start:    0x");
ffffffff8022516a:	48 c7 c7 59 8f 22 80 	mov    $0xffffffff80228f59,%rdi
ffffffff80225171:	e8 b7 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.PerCPU_Start);
ffffffff80225176:	48 8b 05 d3 ce 00 00 	mov    0xced3(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff8022517d:	48 89 c7             	mov    %rax,%rdi
ffffffff80225180:	e8 ae 76 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rPerCPU_Size:     0x");
ffffffff80225185:	48 c7 c7 6f 8f 22 80 	mov    $0xffffffff80228f6f,%rdi
ffffffff8022518c:	e8 9c 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.PerCPU_Size);
ffffffff80225191:	48 8b 05 c0 ce 00 00 	mov    0xcec0(%rip),%rax        # ffffffff80232058 <RME_X64_Layout+0x18>
ffffffff80225198:	48 89 c7             	mov    %rax,%rdi
ffffffff8022519b:	e8 93 76 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rKpgtbl_Start:    0x");
ffffffff802251a0:	48 c7 c7 85 8f 22 80 	mov    $0xffffffff80228f85,%rdi
ffffffff802251a7:	e8 81 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Start);
ffffffff802251ac:	48 8b 05 ad ce 00 00 	mov    0xcead(%rip),%rax        # ffffffff80232060 <RME_X64_Layout+0x20>
ffffffff802251b3:	48 89 c7             	mov    %rax,%rdi
ffffffff802251b6:	e8 78 76 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rKpgtbl_Size:     0x");
ffffffff802251bb:	48 c7 c7 9b 8f 22 80 	mov    $0xffffffff80228f9b,%rdi
ffffffff802251c2:	e8 66 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Size);
ffffffff802251c7:	48 8b 05 9a ce 00 00 	mov    0xce9a(%rip),%rax        # ffffffff80232068 <RME_X64_Layout+0x28>
ffffffff802251ce:	48 89 c7             	mov    %rax,%rdi
ffffffff802251d1:	e8 5d 76 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff802251d6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff802251dd:	00 
ffffffff802251de:	eb 7d                	jmp    ffffffff8022525d <__RME_Pgt_Kom_Init+0x869>
    {
        RME_DBG_S("\n\rKom1_Start[");
ffffffff802251e0:	48 c7 c7 b1 8f 22 80 	mov    $0xffffffff80228fb1,%rdi
ffffffff802251e7:	e8 41 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff802251ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802251f0:	48 89 c7             	mov    %rax,%rdi
ffffffff802251f3:	e8 3b 76 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
        RME_DBG_S("]:  0x");
ffffffff802251f8:	48 c7 c7 bf 8f 22 80 	mov    $0xffffffff80228fbf,%rdi
ffffffff802251ff:	e8 29 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_DBG_U(RME_X64_Layout.Kom1_Start[Addr_Cnt]);
ffffffff80225204:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225208:	48 83 c0 06          	add    $0x6,%rax
ffffffff8022520c:	48 8b 04 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rax
ffffffff80225213:	80 
ffffffff80225214:	48 89 c7             	mov    %rax,%rdi
ffffffff80225217:	e8 17 76 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
        RME_DBG_S("\n\rKom1_Size[");
ffffffff8022521c:	48 c7 c7 c6 8f 22 80 	mov    $0xffffffff80228fc6,%rdi
ffffffff80225223:	e8 05 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff80225228:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022522c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022522f:	e8 ff 75 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
        RME_DBG_S("]:   0x");
ffffffff80225234:	48 c7 c7 d3 8f 22 80 	mov    $0xffffffff80228fd3,%rdi
ffffffff8022523b:	e8 ed 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_DBG_U(RME_X64_Layout.Kom1_Size[Addr_Cnt]);
ffffffff80225240:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225244:	48 83 c0 26          	add    $0x26,%rax
ffffffff80225248:	48 8b 04 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rax
ffffffff8022524f:	80 
ffffffff80225250:	48 89 c7             	mov    %rax,%rdi
ffffffff80225253:	e8 db 75 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80225258:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
ffffffff8022525d:	48 8b 05 0c ce 00 00 	mov    0xce0c(%rip),%rax        # ffffffff80232070 <RME_X64_Layout+0x30>
ffffffff80225264:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80225268:	48 39 c2             	cmp    %rax,%rdx
ffffffff8022526b:	0f 82 6f ff ff ff    	jb     ffffffff802251e0 <__RME_Pgt_Kom_Init+0x7ec>
    }
    RME_DBG_S("\n\rHole_Start:      0x");
ffffffff80225271:	48 c7 c7 db 8f 22 80 	mov    $0xffffffff80228fdb,%rdi
ffffffff80225278:	e8 b0 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Hole_Start);
ffffffff8022527d:	48 8b 05 f4 cf 00 00 	mov    0xcff4(%rip),%rax        # ffffffff80232278 <RME_X64_Layout+0x238>
ffffffff80225284:	48 89 c7             	mov    %rax,%rdi
ffffffff80225287:	e8 a7 75 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rHole_Size:       0x");
ffffffff8022528c:	48 c7 c7 f1 8f 22 80 	mov    $0xffffffff80228ff1,%rdi
ffffffff80225293:	e8 95 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Hole_Size);
ffffffff80225298:	48 8b 05 e1 cf 00 00 	mov    0xcfe1(%rip),%rax        # ffffffff80232280 <RME_X64_Layout+0x240>
ffffffff8022529f:	48 89 c7             	mov    %rax,%rdi
ffffffff802252a2:	e8 8c 75 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rKom2_Start:     0x");
ffffffff802252a7:	48 c7 c7 07 90 22 80 	mov    $0xffffffff80229007,%rdi
ffffffff802252ae:	e8 7a 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kom2_Start);
ffffffff802252b3:	48 8b 05 ce cf 00 00 	mov    0xcfce(%rip),%rax        # ffffffff80232288 <RME_X64_Layout+0x248>
ffffffff802252ba:	48 89 c7             	mov    %rax,%rdi
ffffffff802252bd:	e8 71 75 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rKom2_Size:      0x");
ffffffff802252c2:	48 c7 c7 1c 90 22 80 	mov    $0xffffffff8022901c,%rdi
ffffffff802252c9:	e8 5f 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kom2_Size);
ffffffff802252ce:	48 8b 05 bb cf 00 00 	mov    0xcfbb(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff802252d5:	48 89 c7             	mov    %rax,%rdi
ffffffff802252d8:	e8 56 75 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rStack_Start:     0x");
ffffffff802252dd:	48 c7 c7 31 90 22 80 	mov    $0xffffffff80229031,%rdi
ffffffff802252e4:	e8 44 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Stack_Start);
ffffffff802252e9:	48 8b 05 a8 cf 00 00 	mov    0xcfa8(%rip),%rax        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff802252f0:	48 89 c7             	mov    %rax,%rdi
ffffffff802252f3:	e8 3b 75 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rStack_Size:      0x");
ffffffff802252f8:	48 c7 c7 47 90 22 80 	mov    $0xffffffff80229047,%rdi
ffffffff802252ff:	e8 29 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Stack_Size);
ffffffff80225304:	48 8b 05 95 cf 00 00 	mov    0xcf95(%rip),%rax        # ffffffff802322a0 <RME_X64_Layout+0x260>
ffffffff8022530b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022530e:	e8 20 75 fe ff       	call   ffffffff8020c833 <RME_Int_Print>

    return 0;
ffffffff80225313:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80225318:	c9                   	leave
ffffffff80225319:	c3                   	ret

ffffffff8022531a <__RME_SMP_Low_Level_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
rme_ptr_t __RME_SMP_Low_Level_Init(void)
{
ffffffff8022531a:	f3 0f 1e fa          	endbr64
ffffffff8022531e:	55                   	push   %rbp
ffffffff8022531f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225322:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_CPU_Local* CPU_Local;

    /* Initialize all vector tables */
    __RME_X64_CPU_Local_Init();
ffffffff80225326:	e8 f8 69 ff ff       	call   ffffffff8021bd23 <__RME_X64_CPU_Local_Init>
    /* Initialize LAPIC */
    __RME_X64_LAPIC_Init();
ffffffff8022532b:	e8 c2 ef ff ff       	call   ffffffff802242f2 <__RME_X64_LAPIC_Init>

    /* Check to see if we are booting this correctly */
    CPU_Local=RME_CPU_LOCAL();
ffffffff80225330:	e8 0a 65 fe ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80225335:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_ASSERT(CPU_Local->CPUID==RME_X64_CPU_Cnt);
ffffffff80225339:	48 8b 05 70 cf 00 00 	mov    0xcf70(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>

    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
ffffffff80225340:	48 8b 05 69 cf 00 00 	mov    0xcf69(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80225347:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8022534b:	48 05 c8 22 23 80    	add    $0xffffffff802322c8,%rax
ffffffff80225351:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    /* Spin until the global CPU counter is zero again, which means the booting
     * processor has done booting and we can proceed now */
    while(RME_X64_CPU_Cnt!=0);
ffffffff80225358:	90                   	nop
ffffffff80225359:	48 8b 05 50 cf 00 00 	mov    0xcf50(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80225360:	48 85 c0             	test   %rax,%rax
ffffffff80225363:	75 f4                	jne    ffffffff80225359 <__RME_SMP_Low_Level_Init+0x3f>
    RME_ASSERT(CPU_Local->Thd_Cur!=0);
    RME_ASSERT(CPU_Local->Sig_Tim!=0);
    RME_ASSERT(CPU_Local->Sig_Vct!=0);

    /* Change page tables */
    __RME_Pgt_Set(RME_CAP_GETOBJ((CPU_Local->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff80225365:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225369:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8022536d:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80225371:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80225375:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225379:	48 89 c7             	mov    %rax,%rdi
ffffffff8022537c:	e8 ec 13 00 00       	call   ffffffff8022676d <__RME_Pgt_Set>
    /* Boot into the init thread - never returns */
    __RME_Enter_User_Mode(0, RME_X64_USTACK(CPU_Local->CPUID), CPU_Local->CPUID);
ffffffff80225381:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225385:	48 8b 00             	mov    (%rax),%rax
ffffffff80225388:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022538c:	48 8b 12             	mov    (%rdx),%rdx
ffffffff8022538f:	48 81 c2 01 04 00 00 	add    $0x401,%rdx
ffffffff80225396:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225399:	48 c1 e1 0b          	shl    $0xb,%rcx
ffffffff8022539d:	48 89 c2             	mov    %rax,%rdx
ffffffff802253a0:	48 89 ce             	mov    %rcx,%rsi
ffffffff802253a3:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff802253a8:	e8 13 65 fe ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>

    return 0;
ffffffff802253ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802253b2:	c9                   	leave
ffffffff802253b3:	c3                   	ret

ffffffff802253b4 <__RME_Boot>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Boot(void)
{
ffffffff802253b4:	f3 0f 1e fa          	endbr64
ffffffff802253b8:	55                   	push   %rbp
ffffffff802253b9:	48 89 e5             	mov    %rsp,%rbp
ffffffff802253bc:	48 83 ec 40          	sub    $0x40,%rsp
    rme_ptr_t Phys_Addr;
    rme_ptr_t Page_Ptr;
    struct RME_Cap_Cpt* Cpt;
    struct RME_CPU_Local* CPU_Local;
    /* Initialize our own CPU-local data structures */
    RME_X64_CPU_Cnt=0;
ffffffff802253c0:	48 c7 05 e5 ce 00 00 	movq   $0x0,0xcee5(%rip)        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff802253c7:	00 00 00 00 
    RME_DBG_S("\r\nCPU 0 local IDT/GDT init");
ffffffff802253cb:	48 c7 c7 5d 90 22 80 	mov    $0xffffffff8022905d,%rdi
ffffffff802253d2:	e8 56 76 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    __RME_X64_CPU_Local_Init();
ffffffff802253d7:	e8 47 69 ff ff       	call   ffffffff8021bd23 <__RME_X64_CPU_Local_Init>
    /* Initialize interrupt controllers (PIC, LAPIC, IOAPIC) */
    RME_DBG_S("\r\nCPU 0 LAPIC init");
ffffffff802253dc:	48 c7 c7 78 90 22 80 	mov    $0xffffffff80229078,%rdi
ffffffff802253e3:	e8 45 76 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    __RME_X64_LAPIC_Init();
ffffffff802253e8:	e8 05 ef ff ff       	call   ffffffff802242f2 <__RME_X64_LAPIC_Init>
    RME_DBG_S("\r\nPIC init");
ffffffff802253ed:	48 c7 c7 8b 90 22 80 	mov    $0xffffffff8022908b,%rdi
ffffffff802253f4:	e8 34 76 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    __RME_X64_PIC_Init();
ffffffff802253f9:	e8 4e f0 ff ff       	call   ffffffff8022444c <__RME_X64_PIC_Init>
    RME_DBG_S("\r\nIOAPIC init");
ffffffff802253fe:	48 c7 c7 96 90 22 80 	mov    $0xffffffff80229096,%rdi
ffffffff80225405:	e8 23 76 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    __RME_X64_IOAPIC_Init();
ffffffff8022540a:	e8 11 f2 ff ff       	call   ffffffff80224620 <__RME_X64_IOAPIC_Init>
    /* Start other processors, if there are any. They will keep spinning until
     * the booting processor finish all its work. */
    __RME_X64_SMP_Init();
ffffffff8022540f:	e8 cd f2 ff ff       	call   ffffffff802246e1 <__RME_X64_SMP_Init>

    /* Create all initial tables in Kom1, which is sure to be present. We reserve 16
     * pages at the start to load the init process */
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff80225414:	48 8b 05 5d cc 00 00 	mov    0xcc5d(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff8022541b:	48 05 00 00 00 02    	add    $0x2000000,%rax
ffffffff80225421:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_DBG_S("\r\nKot registration start offset: 0x");
ffffffff80225425:	48 c7 c7 a8 90 22 80 	mov    $0xffffffff802290a8,%rdi
ffffffff8022542c:	e8 fc 75 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff80225431:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80225438:	80 00 00 
ffffffff8022543b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022543f:	48 01 d0             	add    %rdx,%rax
ffffffff80225442:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80225446:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff8022544a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022544d:	e8 e1 73 fe ff       	call   ffffffff8020c833 <RME_Int_Print>

    /* Create the capability table for the init process - always 16 */
    Cpt=(struct RME_Cap_Cpt*)Cur_Addr;
ffffffff80225452:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225456:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    RME_ASSERT(_RME_Cpt_Boot_Init(RME_BOOT_INIT_CPT,Cur_Addr,16)==RME_BOOT_INIT_CPT);
ffffffff8022545a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022545e:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff80225463:	48 89 c6             	mov    %rax,%rsi
ffffffff80225466:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff8022546b:	e8 13 86 fe ff       	call   ffffffff8020da83 <_RME_Cpt_Boot_Init>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(16));
ffffffff80225470:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225477:	00 
    /* Create the capability table for initial page tables - now we are only
     * adding 2MB pages. There will be 1 PML4, 16 PDP, and 16*512=8192 PGD.
     * This should provide support for up to 4TB of memory, which will be sufficient
     * for at least a decade. These data structures will eat 32MB of memory, which
     * is fine */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff80225478:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022547c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225480:	41 b8 11 20 00 00    	mov    $0x2011,%r8d
ffffffff80225486:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225489:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8022548e:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225493:	48 89 c7             	mov    %rax,%rdi
ffffffff80225496:	e8 d7 86 fe ff       	call   ffffffff8020db72 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(1+16+8192));
ffffffff8022549b:	48 81 45 f8 00 10 08 	addq   $0x81000,-0x8(%rbp)
ffffffff802254a2:	00 

    /* Align the address to 4096 to prepare for page table creation */
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff802254a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802254a7:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff802254ad:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff802254b3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Create PML4 */
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff802254b7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802254bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802254bf:	6a 09                	push   $0x9
ffffffff802254c1:	6a 27                	push   $0x27
ffffffff802254c3:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff802254c9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff802254cf:	48 89 d1             	mov    %rdx,%rcx
ffffffff802254d2:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802254d7:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802254dc:	48 89 c7             	mov    %rax,%rdi
ffffffff802254df:	e8 8e a4 fe ff       	call   ffffffff8020f972 <_RME_Pgt_Boot_Crt>
ffffffff802254e4:	48 83 c4 10          	add    $0x10,%rsp
                                   Cur_Addr, 0, RME_PGT_TOP, RME_PGT_SIZE_512G, RME_PGT_NUM_512)==0);
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff802254e8:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff802254ef:	00 
    /* Create all our 16 PDPs, and cons them into the PML4 */
    for(Count=0;Count<16;Count++)
ffffffff802254f0:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802254f7:	00 
ffffffff802254f8:	eb 73                	jmp    ffffffff8022556d <__RME_Boot+0x1b9>
    {
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff802254fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802254fe:	48 8d 70 01          	lea    0x1(%rax),%rsi
ffffffff80225502:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225506:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022550a:	6a 09                	push   $0x9
ffffffff8022550c:	6a 1e                	push   $0x1e
ffffffff8022550e:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff80225514:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff8022551a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022551d:	48 89 f2             	mov    %rsi,%rdx
ffffffff80225520:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80225525:	48 89 c7             	mov    %rax,%rdi
ffffffff80225528:	e8 45 a4 fe ff       	call   ffffffff8020f972 <_RME_Pgt_Boot_Crt>
ffffffff8022552d:	48 83 c4 10          	add    $0x10,%rsp
                                       Cur_Addr, 0, RME_PGT_NOM, RME_PGT_SIZE_1G, RME_PGT_NUM_512)==0);
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff80225531:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225538:	00 
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4), Count,
ffffffff80225539:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022553d:	48 83 c0 01          	add    $0x1,%rax
ffffffff80225541:	0f b7 c0             	movzwl %ax,%eax
ffffffff80225544:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff8022554a:	48 89 c1             	mov    %rax,%rcx
ffffffff8022554d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225551:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225555:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8022555b:	be 00 80 01 00       	mov    $0x18000,%esi
ffffffff80225560:	48 89 c7             	mov    %rax,%rdi
ffffffff80225563:	e8 c3 aa fe ff       	call   ffffffff8021002b <_RME_Pgt_Boot_Con>
    for(Count=0;Count<16;Count++)
ffffffff80225568:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff8022556d:	48 83 7d f0 0f       	cmpq   $0xf,-0x10(%rbp)
ffffffff80225572:	7e 86                	jle    ffffffff802254fa <__RME_Boot+0x146>
                                       RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count)), RME_PGT_ALL_PERM)==0);
    }

    /* Create 8192 PDEs, and cons them into their respective PDPs */
    for(Count=0;Count<8192;Count++)
ffffffff80225574:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8022557b:	00 
ffffffff8022557c:	e9 8e 00 00 00       	jmp    ffffffff8022560f <__RME_Boot+0x25b>
    {
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff80225581:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225585:	48 8d 70 11          	lea    0x11(%rax),%rsi
ffffffff80225589:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022558d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225591:	6a 09                	push   $0x9
ffffffff80225593:	6a 15                	push   $0x15
ffffffff80225595:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff8022559b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff802255a1:	48 89 d1             	mov    %rdx,%rcx
ffffffff802255a4:	48 89 f2             	mov    %rsi,%rdx
ffffffff802255a7:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802255ac:	48 89 c7             	mov    %rax,%rdi
ffffffff802255af:	e8 be a3 fe ff       	call   ffffffff8020f972 <_RME_Pgt_Boot_Crt>
ffffffff802255b4:	48 83 c4 10          	add    $0x10,%rsp
                                       Cur_Addr, 0, RME_PGT_NOM, RME_PGT_SIZE_2M, RME_PGT_NUM_512)==0);
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff802255b8:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff802255bf:	00 
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff802255c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802255c4:	48 83 c0 11          	add    $0x11,%rax
ffffffff802255c8:	0f b7 c0             	movzwl %ax,%eax
ffffffff802255cb:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff802255d1:	48 89 c1             	mov    %rax,%rcx
ffffffff802255d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802255d8:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff802255dd:	48 89 c2             	mov    %rax,%rdx
ffffffff802255e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802255e4:	48 c1 f8 09          	sar    $0x9,%rax
ffffffff802255e8:	48 83 c0 01          	add    $0x1,%rax
ffffffff802255ec:	0f b7 c0             	movzwl %ax,%eax
ffffffff802255ef:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff802255f5:	48 89 c6             	mov    %rax,%rsi
ffffffff802255f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802255fc:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80225602:	48 89 c7             	mov    %rax,%rdi
ffffffff80225605:	e8 21 aa fe ff       	call   ffffffff8021002b <_RME_Pgt_Boot_Con>
    for(Count=0;Count<8192;Count++)
ffffffff8022560a:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff8022560f:	48 81 7d f0 ff 1f 00 	cmpq   $0x1fff,-0x10(%rbp)
ffffffff80225616:	00 
ffffffff80225617:	0f 8e 64 ff ff ff    	jle    ffffffff80225581 <__RME_Boot+0x1cd>
                                       RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Count)), RME_PGT_ALL_PERM)==0);
    }

    /* Map all the Kom1 that we have into it */
    Page_Ptr=0;
ffffffff8022561d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80225624:	00 
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff80225625:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8022562c:	00 
ffffffff8022562d:	e9 a1 00 00 00       	jmp    ffffffff802256d3 <__RME_Boot+0x31f>
    {
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80225632:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225639:	00 
ffffffff8022563a:	eb 75                	jmp    ffffffff802256b1 <__RME_Boot+0x2fd>
        {
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8022563c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80225640:	48 83 c0 06          	add    $0x6,%rax
ffffffff80225644:	48 8b 14 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rdx
ffffffff8022564b:	80 
ffffffff8022564c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225650:	48 01 c2             	add    %rax,%rdx
ffffffff80225653:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8022565a:	80 00 00 
ffffffff8022565d:	48 01 d0             	add    %rdx,%rax
ffffffff80225660:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff80225664:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225668:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff8022566d:	48 89 c1             	mov    %rax,%rcx
ffffffff80225670:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225674:	48 c1 e8 09          	shr    $0x9,%rax
ffffffff80225678:	48 83 c0 11          	add    $0x11,%rax
ffffffff8022567c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8022567f:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff80225685:	48 89 c6             	mov    %rax,%rsi
ffffffff80225688:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8022568c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225690:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80225696:	48 89 c7             	mov    %rax,%rdi
ffffffff80225699:	e8 00 a7 fe ff       	call   ffffffff8020fd9e <_RME_Pgt_Boot_Add>
                                           Phys_Addr, Page_Ptr&0x1FF, RME_PGT_ALL_PERM)==0);
            Page_Ptr++;
ffffffff8022569e:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff802256a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802256a7:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff802256ad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802256b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802256b5:	48 83 c0 26          	add    $0x26,%rax
ffffffff802256b9:	48 8b 04 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rax
ffffffff802256c0:	80 
ffffffff802256c1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802256c5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802256c8:	0f 82 6e ff ff ff    	jb     ffffffff8022563c <__RME_Boot+0x288>
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff802256ce:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff802256d3:	48 8b 05 96 c9 00 00 	mov    0xc996(%rip),%rax        # ffffffff80232070 <RME_X64_Layout+0x30>
ffffffff802256da:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff802256de:	48 39 c2             	cmp    %rax,%rdx
ffffffff802256e1:	0f 82 4b ff ff ff    	jb     ffffffff80225632 <__RME_Boot+0x27e>
        }
    }
    RME_DBG_S("\r\nKom1 pages: 0x");
ffffffff802256e7:	48 c7 c7 cc 90 22 80 	mov    $0xffffffff802290cc,%rdi
ffffffff802256ee:	e8 3a 73 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(Page_Ptr);
ffffffff802256f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802256f7:	48 89 c7             	mov    %rax,%rdi
ffffffff802256fa:	e8 34 71 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S(", [0x0, 0x");
ffffffff802256ff:	48 c7 c7 dd 90 22 80 	mov    $0xffffffff802290dd,%rdi
ffffffff80225706:	e8 22 73 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8022570b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022570f:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff80225713:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80225719:	48 89 c7             	mov    %rax,%rdi
ffffffff8022571c:	e8 12 71 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("]");
ffffffff80225721:	48 c7 c7 e8 90 22 80 	mov    $0xffffffff802290e8,%rdi
ffffffff80225728:	e8 00 73 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>

    /* Map the Kom2 in - don't want lookups, we know where they are. Offset by 2048 because they are mapped above 4G */
    RME_DBG_S("\r\nKom2 pages: 0x");
ffffffff8022572d:	48 c7 c7 ea 90 22 80 	mov    $0xffffffff802290ea,%rdi
ffffffff80225734:	e8 f4 72 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M));
ffffffff80225739:	48 8b 05 50 cb 00 00 	mov    0xcb50(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff80225740:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff80225744:	48 89 c7             	mov    %rax,%rdi
ffffffff80225747:	e8 e7 70 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S(", [0x");
ffffffff8022574c:	48 c7 c7 fb 90 22 80 	mov    $0xffffffff802290fb,%rdi
ffffffff80225753:	e8 d5 72 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M));
ffffffff80225758:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022575c:	48 83 c0 01          	add    $0x1,%rax
ffffffff80225760:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff80225764:	48 89 c7             	mov    %rax,%rdi
ffffffff80225767:	e8 c7 70 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S(", 0x");
ffffffff8022576c:	48 c7 c7 dd 8d 22 80 	mov    $0xffffffff80228ddd,%rdi
ffffffff80225773:	e8 b5 72 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff80225778:	48 c7 45 f0 00 08 00 	movq   $0x800,-0x10(%rbp)
ffffffff8022577f:	00 
ffffffff80225780:	e9 bb 00 00 00       	jmp    ffffffff80225840 <__RME_Boot+0x48c>
    {
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff80225785:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225789:	48 c1 f8 12          	sar    $0x12,%rax
ffffffff8022578d:	48 89 c2             	mov    %rax,%rdx
ffffffff80225790:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225794:	48 c1 f8 09          	sar    $0x9,%rax
ffffffff80225798:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff8022579d:	48 c1 e2 09          	shl    $0x9,%rdx
ffffffff802257a1:	48 01 d0             	add    %rdx,%rax
ffffffff802257a4:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff802257aa:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff802257b1:	80 
ffffffff802257b2:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff802257b9:	ff 0f 00 
ffffffff802257bc:	48 21 c2             	and    %rax,%rdx
ffffffff802257bf:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff802257c6:	80 ff ff 
ffffffff802257c9:	48 01 d0             	add    %rdx,%rax
ffffffff802257cc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff802257d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802257d4:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff802257d9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802257e0:	00 
ffffffff802257e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802257e5:	48 01 d0             	add    %rdx,%rax
ffffffff802257e8:	48 8b 00             	mov    (%rax),%rax
ffffffff802257eb:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff802257f2:	ff 0f 00 
ffffffff802257f5:	48 21 d0             	and    %rdx,%rax
ffffffff802257f8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff802257fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225800:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80225805:	48 89 c1             	mov    %rax,%rcx
ffffffff80225808:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022580c:	48 c1 e8 09          	shr    $0x9,%rax
ffffffff80225810:	48 83 c0 11          	add    $0x11,%rax
ffffffff80225814:	0f b7 c0             	movzwl %ax,%eax
ffffffff80225817:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff8022581d:	48 89 c6             	mov    %rax,%rsi
ffffffff80225820:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80225824:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225828:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8022582e:	48 89 c7             	mov    %rax,%rdi
ffffffff80225831:	e8 68 a5 fe ff       	call   ffffffff8020fd9e <_RME_Pgt_Boot_Add>
                                       Phys_Addr, Page_Ptr&0x1FF, RME_PGT_ALL_PERM)==0);
        Page_Ptr++;
ffffffff80225836:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8022583b:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225840:	48 8b 05 49 ca 00 00 	mov    0xca49(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff80225847:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8022584b:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff80225851:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225855:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225858:	0f 82 27 ff ff ff    	jb     ffffffff80225785 <__RME_Boot+0x3d1>
    }
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8022585e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225862:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff80225866:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff8022586c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022586f:	e8 bf 6f fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("]");
ffffffff80225874:	48 c7 c7 e8 90 22 80 	mov    $0xffffffff802290e8,%rdi
ffffffff8022587b:	e8 ad 71 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>

    /* Activate the first process - This process cannot be deleted */
    RME_ASSERT(_RME_Prc_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_PRC,
ffffffff80225880:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225884:	41 b8 00 80 01 00    	mov    $0x18000,%r8d
ffffffff8022588a:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff8022588f:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff80225894:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225899:	48 89 c7             	mov    %rax,%rdi
ffffffff8022589c:	e8 43 d8 fe ff       	call   ffffffff802130e4 <_RME_Prc_Boot_Crt>
                                  RME_BOOT_INIT_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4))==0);

    /* Create the initial kernel function capability */
    RME_ASSERT(_RME_Kfn_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_KERN)==0);
ffffffff802258a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802258a5:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff802258aa:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802258af:	48 89 c7             	mov    %rax,%rdi
ffffffff802258b2:	e8 97 52 ff ff       	call   ffffffff8021ab4e <_RME_Kfn_Boot_Crt>

    /* Create a capability table for initial kernel memory capabilities. We need a few for Kom1, and another one for Kom2 */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_KOM, Cur_Addr, RME_X64_KOM1_MAXSEGS+1)==0);
ffffffff802258b7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802258bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802258bf:	41 b8 21 00 00 00    	mov    $0x21,%r8d
ffffffff802258c5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802258c8:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff802258cd:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802258d2:	48 89 c7             	mov    %rax,%rdi
ffffffff802258d5:	e8 98 82 fe ff       	call   ffffffff8020db72 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff802258da:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff802258e1:	00 
    /* Create Kom1 capabilities - can create page tables here */
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff802258e2:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802258e9:	00 
ffffffff802258ea:	eb 57                	jmp    ffffffff80225943 <__RME_Boot+0x58f>
    {
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff802258ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802258f0:	48 83 c0 06          	add    $0x6,%rax
ffffffff802258f4:	48 8b 14 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rdx
ffffffff802258fb:	80 
ffffffff802258fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225900:	48 83 c0 26          	add    $0x26,%rax
ffffffff80225904:	48 8b 04 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rax
ffffffff8022590b:	80 
ffffffff8022590c:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
ffffffff80225910:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225914:	48 83 c0 06          	add    $0x6,%rax
ffffffff80225918:	48 8b 0c c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rcx
ffffffff8022591f:	80 
ffffffff80225920:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225924:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225928:	41 b9 0f 00 00 00    	mov    $0xf,%r9d
ffffffff8022592e:	49 89 f0             	mov    %rsi,%r8
ffffffff80225931:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff80225936:	48 89 c7             	mov    %rax,%rdi
ffffffff80225939:	e8 c4 cf fe ff       	call   ffffffff80212902 <_RME_Kom_Boot_Crt>
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8022593e:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225943:	48 8b 05 26 c7 00 00 	mov    0xc726(%rip),%rax        # ffffffff80232070 <RME_X64_Layout+0x30>
ffffffff8022594a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8022594e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225951:	72 99                	jb     ffffffff802258ec <__RME_Boot+0x538>
                                      RME_X64_Layout.Kom1_Start[Count],
                                      RME_X64_Layout.Kom1_Start[Count]+RME_X64_Layout.Kom1_Size[Count],
                                      RME_KOM_FLAG_ALL)==0);
    }
    /* Create Kom2 capability - cannot create page tables here */
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff80225953:	48 8b 15 2e c9 00 00 	mov    0xc92e(%rip),%rdx        # ffffffff80232288 <RME_X64_Layout+0x248>
ffffffff8022595a:	48 8b 05 2f c9 00 00 	mov    0xc92f(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff80225961:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80225965:	48 8b 15 1c c9 00 00 	mov    0xc91c(%rip),%rdx        # ffffffff80232288 <RME_X64_Layout+0x248>
ffffffff8022596c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225970:	41 b9 0d 00 00 00    	mov    $0xd,%r9d
ffffffff80225976:	49 89 c8             	mov    %rcx,%r8
ffffffff80225979:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022597c:	ba 20 00 00 00       	mov    $0x20,%edx
ffffffff80225981:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff80225986:	48 89 c7             	mov    %rax,%rdi
ffffffff80225989:	e8 74 cf fe ff       	call   ffffffff80212902 <_RME_Kom_Boot_Crt>
                                  RME_X64_Layout.Kom2_Start,
                                  RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size,
                                  RME_KOM_FLAG_CPT|RME_KOM_FLAG_THD|RME_KOM_FLAG_INV)==0);

    /* Create the initial kernel endpoints for timer ticks */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8022598e:	48 8b 0d 13 c9 00 00 	mov    0xc913(%rip),%rcx        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225995:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225999:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022599d:	49 89 c8             	mov    %rcx,%r8
ffffffff802259a0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802259a3:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff802259a8:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802259ad:	48 89 c7             	mov    %rax,%rdi
ffffffff802259b0:	e8 bd 81 fe ff       	call   ffffffff8020db72 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff802259b5:	48 8b 05 ec c8 00 00 	mov    0xc8ec(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff802259bc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802259c0:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff802259c6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff802259cc:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff802259d0:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802259d7:	00 
ffffffff802259d8:	eb 51                	jmp    ffffffff80225a2b <__RME_Boot+0x677>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff802259da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802259de:	48 89 c7             	mov    %rax,%rdi
ffffffff802259e1:	e8 bd e8 ff ff       	call   ffffffff802242a3 <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff802259e6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff802259ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802259ee:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802259f2:	48 89 c2             	mov    %rax,%rdx
ffffffff802259f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802259f9:	48 05 80 01 00 00    	add    $0x180,%rax
ffffffff802259ff:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225a03:	48 01 d0             	add    %rdx,%rax
ffffffff80225a06:	48 89 c2             	mov    %rax,%rdx
ffffffff80225a09:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80225a0d:	48 89 50 10          	mov    %rdx,0x10(%rax)
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff80225a11:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225a15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225a19:	be 06 00 00 00       	mov    $0x6,%esi
ffffffff80225a1e:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a21:	e8 40 2a ff ff       	call   ffffffff80218466 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225a26:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225a2b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225a2f:	48 8b 05 72 c8 00 00 	mov    0xc872(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225a36:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225a39:	72 9f                	jb     ffffffff802259da <__RME_Boot+0x626>
    }

    /* Create the initial kernel endpoints for all other interrupts */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80225a3b:	48 8b 0d 66 c8 00 00 	mov    0xc866(%rip),%rcx        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225a42:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225a46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225a4a:	49 89 c8             	mov    %rcx,%r8
ffffffff80225a4d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225a50:	ba 07 00 00 00       	mov    $0x7,%edx
ffffffff80225a55:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225a5a:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a5d:	e8 10 81 fe ff       	call   ffffffff8020db72 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff80225a62:	48 8b 05 3f c8 00 00 	mov    0xc83f(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225a69:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225a6d:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225a73:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225a79:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225a7d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225a84:	00 
ffffffff80225a85:	eb 51                	jmp    ffffffff80225ad8 <__RME_Boot+0x724>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225a87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225a8b:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a8e:	e8 10 e8 ff ff       	call   ffffffff802242a3 <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff80225a93:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff80225a97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225a9b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225a9f:	48 89 c2             	mov    %rax,%rdx
ffffffff80225aa2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225aa6:	48 05 c0 01 00 00    	add    $0x1c0,%rax
ffffffff80225aac:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225ab0:	48 01 d0             	add    %rdx,%rax
ffffffff80225ab3:	48 89 c2             	mov    %rax,%rdx
ffffffff80225ab6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80225aba:	48 89 50 18          	mov    %rdx,0x18(%rax)
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff80225abe:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225ac2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225ac6:	be 07 00 00 00       	mov    $0x7,%esi
ffffffff80225acb:	48 89 c7             	mov    %rax,%rdi
ffffffff80225ace:	e8 93 29 ff ff       	call   ffffffff80218466 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225ad3:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225ad8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225adc:	48 8b 05 c5 c7 00 00 	mov    0xc7c5(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225ae3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225ae6:	72 9f                	jb     ffffffff80225a87 <__RME_Boot+0x6d3>
    }

    /* Activate the first thread, and set its priority */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80225ae8:	48 8b 0d b9 c7 00 00 	mov    0xc7b9(%rip),%rcx        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225aef:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225af3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225af7:	49 89 c8             	mov    %rcx,%r8
ffffffff80225afa:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225afd:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80225b02:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225b07:	48 89 c7             	mov    %rax,%rdi
ffffffff80225b0a:	e8 63 80 fe ff       	call   ffffffff8020db72 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff80225b0f:	48 8b 05 92 c7 00 00 	mov    0xc792(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225b16:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225b1a:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225b20:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225b26:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225b2a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225b31:	00 
ffffffff80225b32:	eb 4f                	jmp    ffffffff80225b83 <__RME_Boot+0x7cf>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225b34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225b38:	48 89 c7             	mov    %rax,%rdi
ffffffff80225b3b:	e8 63 e7 ff ff       	call   ffffffff802242a3 <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff80225b40:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff80225b44:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80225b48:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225b4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225b50:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80225b54:	ff 75 d0             	push   -0x30(%rbp)
ffffffff80225b57:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff80225b5d:	49 89 c8             	mov    %rcx,%r8
ffffffff80225b60:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff80225b65:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80225b6a:	48 89 c7             	mov    %rax,%rdi
ffffffff80225b6d:	e8 d9 f1 fe ff       	call   ffffffff80214d4b <_RME_Thd_Boot_Crt>
ffffffff80225b72:	48 83 c4 10          	add    $0x10,%rsp
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_THD_SIZE(Count));
ffffffff80225b76:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225b7d:	00 
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225b7e:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225b83:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225b87:	48 8b 05 1a c7 00 00 	mov    0xc71a(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225b8e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225b91:	72 a1                	jb     ffffffff80225b34 <__RME_Boot+0x780>
    }

    RME_DBG_S("\r\nKot registration end offset: 0x");
ffffffff80225b93:	48 c7 c7 08 91 22 80 	mov    $0xffffffff80229108,%rdi
ffffffff80225b9a:	e8 8e 6e fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff80225b9f:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80225ba6:	80 00 00 
ffffffff80225ba9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225bad:	48 01 d0             	add    %rdx,%rax
ffffffff80225bb0:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80225bb4:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80225bb8:	48 89 c7             	mov    %rax,%rdi
ffffffff80225bbb:	e8 73 6c fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\r\nKom1 frontier: 0x");
ffffffff80225bc0:	48 c7 c7 2a 91 22 80 	mov    $0xffffffff8022912a,%rdi
ffffffff80225bc7:	e8 61 6e fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_U(Cur_Addr);
ffffffff80225bcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225bd0:	48 89 c7             	mov    %rax,%rdi
ffffffff80225bd3:	e8 5b 6c fe ff       	call   ffffffff8020c833 <RME_Int_Print>

    /* Print sizes and halt */
    RME_DBG_S("\r\nThread object size: ");
ffffffff80225bd8:	48 c7 c7 3e 91 22 80 	mov    $0xffffffff8022913e,%rdi
ffffffff80225bdf:	e8 49 6e fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Thd_Struct)/sizeof(rme_ptr_t));
ffffffff80225be4:	bf 16 00 00 00       	mov    $0x16,%edi
ffffffff80225be9:	e8 45 6c fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\r\nInvocation object size: ");
ffffffff80225bee:	48 c7 c7 55 91 22 80 	mov    $0xffffffff80229155,%rdi
ffffffff80225bf5:	e8 33 6e fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Inv_Struct)/sizeof(rme_ptr_t));
ffffffff80225bfa:	bf 09 00 00 00       	mov    $0x9,%edi
ffffffff80225bff:	e8 2f 6c fe ff       	call   ffffffff8020c833 <RME_Int_Print>

    /* Initialize the timer and start its interrupt routing */
    RME_DBG_S("\r\nTimer init\r\n");
ffffffff80225c04:	48 c7 c7 70 91 22 80 	mov    $0xffffffff80229170,%rdi
ffffffff80225c0b:	e8 1d 6e fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    __RME_X64_Timer_Init();
ffffffff80225c10:	e8 66 ed ff ff       	call   ffffffff8022497b <__RME_X64_Timer_Init>
    __RME_X64_IOAPIC_Int_Enable(2,0);
ffffffff80225c15:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225c1a:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff80225c1f:	e8 23 e9 ff ff       	call   ffffffff80224547 <__RME_X64_IOAPIC_Int_Enable>
    /* Change page tables */
    __RME_Pgt_Set(RME_CAP_GETOBJ((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff80225c24:	e8 16 5c fe ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80225c29:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80225c2d:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80225c31:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80225c35:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225c39:	48 89 c7             	mov    %rax,%rdi
ffffffff80225c3c:	e8 2c 0b 00 00       	call   ffffffff8022676d <__RME_Pgt_Set>


    /* Load the init process to address 0x00 - It should be smaller than 2MB */
    extern const unsigned char UVM_Init[];
    _RME_Memcpy(0,(void*)UVM_Init,RME_POW2(RME_PGT_SIZE_2M));
ffffffff80225c41:	ba 00 00 20 00       	mov    $0x200000,%edx
ffffffff80225c46:	48 c7 c6 00 71 22 80 	mov    $0xffffffff80227100,%rsi
ffffffff80225c4d:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80225c52:	e8 96 72 fe ff       	call   ffffffff8020ceed <_RME_Memcpy>


    /* Now other non-booting processors may proceed and go into their threads */
    RME_X64_CPU_Cnt=0;
ffffffff80225c57:	48 c7 05 4e c6 00 00 	movq   $0x0,0xc64e(%rip)        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80225c5e:	00 00 00 00 
    /* Boot into the init thread */
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff80225c62:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80225c67:	be 00 08 20 00       	mov    $0x200800,%esi
ffffffff80225c6c:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80225c71:	e8 4a 5c fe ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
    return 0;
ffffffff80225c76:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80225c7b:	c9                   	leave
ffffffff80225c7c:	c3                   	ret

ffffffff80225c7d <__RME_Reboot>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Reboot(void)
{
ffffffff80225c7d:	f3 0f 1e fa          	endbr64
ffffffff80225c81:	55                   	push   %rbp
ffffffff80225c82:	48 89 e5             	mov    %rsp,%rbp
    /* Currently we cannot parse th FADT yet. We need these info to shutdown the machine */
    /* outportb(FADT->ResetReg.Address, FADT->ResetValue); */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
}
ffffffff80225c85:	90                   	nop
ffffffff80225c86:	5d                   	pop    %rbp
ffffffff80225c87:	c3                   	ret

ffffffff80225c88 <__RME_Shutdown>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Shutdown(void)
{
ffffffff80225c88:	f3 0f 1e fa          	endbr64
ffffffff80225c8c:	55                   	push   %rbp
ffffffff80225c8d:	48 89 e5             	mov    %rsp,%rbp
    /* Currently we cannot parse th DSDT yet. We need these info to shutdown the machine */
    /* outw(PM1a_CNT,SLP_TYPa|SLP_EN) */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
}
ffffffff80225c90:	90                   	nop
ffffffff80225c91:	5d                   	pop    %rbp
ffffffff80225c92:	c3                   	ret

ffffffff80225c93 <__RME_Get_Syscall_Param>:
              rme_ptr_t* Capid - The capability ID number.
              rme_ptr_t* Param - The parameters.
Return      : None.
******************************************************************************/
void __RME_Get_Syscall_Param(struct RME_Reg_Struct* Reg, rme_ptr_t* Svc, rme_ptr_t* Capid, rme_ptr_t* Param)
{
ffffffff80225c93:	f3 0f 1e fa          	endbr64
ffffffff80225c97:	55                   	push   %rbp
ffffffff80225c98:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225c9b:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80225c9f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225ca3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80225ca7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80225cab:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    *Svc=(Reg->RDI)>>32;
ffffffff80225caf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225cb3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80225cb7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80225cbb:	48 89 c2             	mov    %rax,%rdx
ffffffff80225cbe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225cc2:	48 89 10             	mov    %rdx,(%rax)
    *Capid=(Reg->RDI)&0xFFFFFFFF;
ffffffff80225cc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225cc9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80225ccd:	89 c2                	mov    %eax,%edx
ffffffff80225ccf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80225cd3:	48 89 10             	mov    %rdx,(%rax)
    Param[0]=Reg->RSI;
ffffffff80225cd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225cda:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff80225cde:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225ce2:	48 89 10             	mov    %rdx,(%rax)
    Param[1]=Reg->RDX;
ffffffff80225ce5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225ce9:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80225ced:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225cf1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225cf5:	48 89 02             	mov    %rax,(%rdx)
    Param[2]=Reg->R8;
ffffffff80225cf8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225cfc:	48 8d 50 10          	lea    0x10(%rax),%rdx
ffffffff80225d00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d04:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80225d08:	48 89 02             	mov    %rax,(%rdx)
}
ffffffff80225d0b:	90                   	nop
ffffffff80225d0c:	c9                   	leave
ffffffff80225d0d:	c3                   	ret

ffffffff80225d0e <__RME_Set_Syscall_Retval>:
Input       : rme_ret_t Retval - The return value.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Syscall_Retval(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
{
ffffffff80225d0e:	f3 0f 1e fa          	endbr64
ffffffff80225d12:	55                   	push   %rbp
ffffffff80225d13:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225d16:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225d1a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225d1e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff80225d22:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225d26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d2a:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff80225d2d:	90                   	nop
ffffffff80225d2e:	c9                   	leave
ffffffff80225d2f:	c3                   	ret

ffffffff80225d30 <__RME_Thd_Reg_Init>:
              rme_ptr_t Param - The parameter to pass to it.
Output      : struct RME_Reg_Struct* Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Init(rme_ptr_t Attr,rme_ptr_t Entry, rme_ptr_t Stack, rme_ptr_t Param, struct RME_Reg_Struct* Reg)
{
ffffffff80225d30:	f3 0f 1e fa          	endbr64
ffffffff80225d34:	55                   	push   %rbp
ffffffff80225d35:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225d38:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80225d3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225d40:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80225d44:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80225d48:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff80225d4c:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    /* We use the SYSRET path on creation if possible */
    Reg->INT_NUM=0x10000;
ffffffff80225d50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225d54:	48 c7 40 78 00 00 01 	movq   $0x10000,0x78(%rax)
ffffffff80225d5b:	00 
    Reg->ERROR_CODE=0;
ffffffff80225d5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225d60:	48 c7 80 80 00 00 00 	movq   $0x0,0x80(%rax)
ffffffff80225d67:	00 00 00 00 
    Reg->RIP=Entry;
ffffffff80225d6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225d6f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225d73:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Reg->CS=RME_X64_SEG_USER_CODE;
ffffffff80225d7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225d7e:	48 c7 80 90 00 00 00 	movq   $0x2b,0x90(%rax)
ffffffff80225d85:	2b 00 00 00 
    /* IOPL 3, IF */
    Reg->RFLAGS=0x3200;
ffffffff80225d89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225d8d:	48 c7 80 98 00 00 00 	movq   $0x3200,0x98(%rax)
ffffffff80225d94:	00 32 00 00 
    Reg->RSP=Stack;
ffffffff80225d98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225d9c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80225da0:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
    Reg->SS=RME_X64_SEG_USER_DATA;
ffffffff80225da7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225dab:	48 c7 80 a8 00 00 00 	movq   $0x23,0xa8(%rax)
ffffffff80225db2:	23 00 00 00 
    /* Pass the parameter */
    Reg->RDI=Param;
ffffffff80225db6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225dba:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80225dbe:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff80225dc2:	90                   	nop
ffffffff80225dc3:	c9                   	leave
ffffffff80225dc4:	c3                   	ret

ffffffff80225dc5 <__RME_Thd_Reg_Copy>:
Input       : struct RME_Reg_Struct* Src - The source register set.
Output      : struct RME_Reg_Struct* Dst - The destination register set.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Copy(struct RME_Reg_Struct* Dst, struct RME_Reg_Struct* Src)
{
ffffffff80225dc5:	f3 0f 1e fa          	endbr64
ffffffff80225dc9:	55                   	push   %rbp
ffffffff80225dca:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225dcd:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225dd1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225dd5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Make sure that the ordering is the same so the compiler can optimize */
    Dst->RAX=Src->RAX;
ffffffff80225dd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ddd:	48 8b 10             	mov    (%rax),%rdx
ffffffff80225de0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225de4:	48 89 10             	mov    %rdx,(%rax)
    Dst->RBX=Src->RBX;
ffffffff80225de7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225deb:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80225def:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225df3:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Dst->RCX=Src->RCX;
ffffffff80225df7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225dfb:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80225dff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e03:	48 89 50 10          	mov    %rdx,0x10(%rax)
    Dst->RDX=Src->RDX;
ffffffff80225e07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e0b:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff80225e0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e13:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Dst->RSI=Src->RSI;
ffffffff80225e17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e1b:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff80225e1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e23:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Dst->RDI=Src->RDI;
ffffffff80225e27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e2b:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80225e2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e33:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Dst->RBP=Src->RBP;
ffffffff80225e37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e3b:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80225e3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e43:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Dst->R8=Src->R8;
ffffffff80225e47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e4b:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff80225e4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e53:	48 89 50 38          	mov    %rdx,0x38(%rax)
    Dst->R9=Src->R9;
ffffffff80225e57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e5b:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80225e5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e63:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Dst->R10=Src->R10;
ffffffff80225e67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e6b:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff80225e6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e73:	48 89 50 48          	mov    %rdx,0x48(%rax)
    Dst->R11=Src->R11;
ffffffff80225e77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e7b:	48 8b 50 50          	mov    0x50(%rax),%rdx
ffffffff80225e7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e83:	48 89 50 50          	mov    %rdx,0x50(%rax)
    Dst->R12=Src->R12;
ffffffff80225e87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e8b:	48 8b 50 58          	mov    0x58(%rax),%rdx
ffffffff80225e8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e93:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Dst->R13=Src->R13;
ffffffff80225e97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e9b:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80225e9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ea3:	48 89 50 60          	mov    %rdx,0x60(%rax)
    Dst->R14=Src->R14;
ffffffff80225ea7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225eab:	48 8b 50 68          	mov    0x68(%rax),%rdx
ffffffff80225eaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225eb3:	48 89 50 68          	mov    %rdx,0x68(%rax)
    Dst->R15=Src->R15;
ffffffff80225eb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ebb:	48 8b 50 70          	mov    0x70(%rax),%rdx
ffffffff80225ebf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ec3:	48 89 50 70          	mov    %rdx,0x70(%rax)
    /* Don't worry about user modifying INTNUM. If he or she did that it will corrupt userspace */
    Dst->INT_NUM=Src->INT_NUM;
ffffffff80225ec7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ecb:	48 8b 50 78          	mov    0x78(%rax),%rdx
ffffffff80225ecf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ed3:	48 89 50 78          	mov    %rdx,0x78(%rax)
    Dst->ERROR_CODE=Src->ERROR_CODE;
ffffffff80225ed7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225edb:	48 8b 90 80 00 00 00 	mov    0x80(%rax),%rdx
ffffffff80225ee2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ee6:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
    /* This will always be canonical upon SYSRET, because we will truncate in on return */
    Dst->RIP=Src->RIP;
ffffffff80225eed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ef1:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
ffffffff80225ef8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225efc:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Dst->CS=Src->CS;
ffffffff80225f03:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f07:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
ffffffff80225f0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f12:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    Dst->RFLAGS=Src->RFLAGS;
ffffffff80225f19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f1d:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff80225f24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f28:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
    Dst->RSP=Src->RSP;
ffffffff80225f2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f33:	48 8b 90 a0 00 00 00 	mov    0xa0(%rax),%rdx
ffffffff80225f3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f3e:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
    Dst->SS=Src->SS;
ffffffff80225f45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f49:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
ffffffff80225f50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f54:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
ffffffff80225f5b:	90                   	nop
ffffffff80225f5c:	c9                   	leave
ffffffff80225f5d:	c3                   	ret

ffffffff80225f5e <__RME_Thd_Cop_Init>:
Input       : struct RME_Reg_Struct* Reg - The register struct to help initialize the coprocessor.
Output      : struct RME_Reg_Cop_Struct* Cop_Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Init(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80225f5e:	f3 0f 1e fa          	endbr64
ffffffff80225f62:	55                   	push   %rbp
ffffffff80225f63:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225f66:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225f6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225f6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Empty function, return immediately. The FPU contents is not predictable */
}
ffffffff80225f72:	90                   	nop
ffffffff80225f73:	c9                   	leave
ffffffff80225f74:	c3                   	ret

ffffffff80225f75 <__RME_Thd_Cop_Save>:
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Save(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80225f75:	f3 0f 1e fa          	endbr64
ffffffff80225f79:	55                   	push   %rbp
ffffffff80225f7a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225f7d:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225f81:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225f85:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not used for now */
}
ffffffff80225f89:	90                   	nop
ffffffff80225f8a:	c9                   	leave
ffffffff80225f8b:	c3                   	ret

ffffffff80225f8c <__RME_Thd_Cop_Restore>:
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Restore(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80225f8c:	f3 0f 1e fa          	endbr64
ffffffff80225f90:	55                   	push   %rbp
ffffffff80225f91:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225f94:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225f98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225f9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not used for now */
}
ffffffff80225fa0:	90                   	nop
ffffffff80225fa1:	c9                   	leave
ffffffff80225fa2:	c3                   	ret

ffffffff80225fa3 <__RME_Inv_Reg_Save>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Iret_Struct* Ret - The invocation return register context.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Save(struct RME_Iret_Struct* Ret, struct RME_Reg_Struct* Reg)
{
ffffffff80225fa3:	f3 0f 1e fa          	endbr64
ffffffff80225fa7:	55                   	push   %rbp
ffffffff80225fa8:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225fab:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225faf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225fb3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Ret->RIP=Reg->RIP;
ffffffff80225fb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225fbb:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
ffffffff80225fc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225fc6:	48 89 10             	mov    %rdx,(%rax)
    Ret->RSP=Reg->RSP;
ffffffff80225fc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225fcd:	48 8b 90 a0 00 00 00 	mov    0xa0(%rax),%rdx
ffffffff80225fd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225fd8:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff80225fdc:	90                   	nop
ffffffff80225fdd:	c9                   	leave
ffffffff80225fde:	c3                   	ret

ffffffff80225fdf <__RME_Inv_Reg_Restore>:
Input       : struct RME_Iret_Struct* Ret - The invocation return register context.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Restore(struct RME_Reg_Struct* Reg, struct RME_Iret_Struct* Ret)
{
ffffffff80225fdf:	f3 0f 1e fa          	endbr64
ffffffff80225fe3:	55                   	push   %rbp
ffffffff80225fe4:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225fe7:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225feb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225fef:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RIP=Ret->RIP;
ffffffff80225ff3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ff7:	48 8b 10             	mov    (%rax),%rdx
ffffffff80225ffa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ffe:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Reg->RSP=Ret->RSP;
ffffffff80226005:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226009:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff8022600d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226011:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
}
ffffffff80226018:	90                   	nop
ffffffff80226019:	c9                   	leave
ffffffff8022601a:	c3                   	ret

ffffffff8022601b <__RME_Set_Inv_Retval>:
Input       : rme_ret_t Retval - The return value.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Inv_Retval(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
{
ffffffff8022601b:	f3 0f 1e fa          	endbr64
ffffffff8022601f:	55                   	push   %rbp
ffffffff80226020:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226023:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226027:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022602b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff8022602f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80226033:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226037:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff8022603b:	90                   	nop
ffffffff8022603c:	c9                   	leave
ffffffff8022603d:	c3                   	ret

ffffffff8022603e <write_string>:
/* End Function:__RME_Set_Inv_Retval *****************************************/

/* Crap for test */
void write_string( int colour, const char *string, rme_ptr_t pos)
{
ffffffff8022603e:	f3 0f 1e fa          	endbr64
ffffffff80226042:	55                   	push   %rbp
ffffffff80226043:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226046:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8022604a:	89 7d ec             	mov    %edi,-0x14(%rbp)
ffffffff8022604d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80226051:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff80226055:	48 ba 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rdx
ffffffff8022605c:	80 ff ff 
ffffffff8022605f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226063:	48 01 d0             	add    %rdx,%rax
ffffffff80226066:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while( *string != 0 )
ffffffff8022606a:	eb 2e                	jmp    ffffffff8022609a <write_string+0x5c>
    {
        *video++ = *string++;
ffffffff8022606c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80226070:	48 8d 42 01          	lea    0x1(%rdx),%rax
ffffffff80226074:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80226078:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022607c:	48 8d 48 01          	lea    0x1(%rax),%rcx
ffffffff80226080:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff80226084:	0f b6 12             	movzbl (%rdx),%edx
ffffffff80226087:	88 10                	mov    %dl,(%rax)
        *video++ = colour;
ffffffff80226089:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022608d:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80226091:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80226095:	8b 55 ec             	mov    -0x14(%rbp),%edx
ffffffff80226098:	88 10                	mov    %dl,(%rax)
    while( *string != 0 )
ffffffff8022609a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022609e:	0f b6 00             	movzbl (%rax),%eax
ffffffff802260a1:	84 c0                	test   %al,%al
ffffffff802260a3:	75 c7                	jne    ffffffff8022606c <write_string+0x2e>
    }
}
ffffffff802260a5:	90                   	nop
ffffffff802260a6:	90                   	nop
ffffffff802260a7:	c9                   	leave
ffffffff802260a8:	c3                   	ret

ffffffff802260a9 <NDBG>:

void NDBG(void)
{
ffffffff802260a9:	f3 0f 1e fa          	endbr64
ffffffff802260ad:	55                   	push   %rbp
ffffffff802260ae:	48 89 e5             	mov    %rsp,%rbp
    write_string( 0x07, "Here", 0);
ffffffff802260b1:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802260b6:	48 c7 c6 7f 91 22 80 	mov    $0xffffffff8022917f,%rsi
ffffffff802260bd:	bf 07 00 00 00       	mov    $0x7,%edi
ffffffff802260c2:	e8 77 ff ff ff       	call   ffffffff8022603e <write_string>
}
ffffffff802260c7:	90                   	nop
ffffffff802260c8:	5d                   	pop    %rbp
ffffffff802260c9:	c3                   	ret

ffffffff802260ca <__RME_Kern_Func_Handler>:
Output      : None.
Return      : rme_ret_t - The value that the function returned.
******************************************************************************/
rme_ret_t __RME_Kern_Func_Handler(struct RME_Cap_Cpt* Cpt, struct RME_Reg_Struct* Reg,
                                  rme_ptr_t Func_ID, rme_ptr_t Sub_ID, rme_ptr_t Param1, rme_ptr_t Param2)
{
ffffffff802260ca:	f3 0f 1e fa          	endbr64
ffffffff802260ce:	55                   	push   %rbp
ffffffff802260cf:	48 89 e5             	mov    %rsp,%rbp
ffffffff802260d2:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff802260d6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff802260da:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff802260de:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff802260e2:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff802260e6:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff802260ea:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
    /* Now always call the HALT */
    char String[16];

    String[0]=Param1/10000000+'0';
ffffffff802260ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802260f2:	48 ba bd 42 7a e5 d5 	movabs $0xd6bf94d5e57a42bd,%rdx
ffffffff802260f9:	94 bf d6 
ffffffff802260fc:	48 f7 e2             	mul    %rdx
ffffffff802260ff:	48 89 d0             	mov    %rdx,%rax
ffffffff80226102:	48 c1 e8 17          	shr    $0x17,%rax
ffffffff80226106:	83 c0 30             	add    $0x30,%eax
ffffffff80226109:	88 45 f0             	mov    %al,-0x10(%rbp)
    String[1]=(Param1/1000000)%10+'0';
ffffffff8022610c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226110:	48 ba db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rdx
ffffffff80226117:	de 1b 43 
ffffffff8022611a:	48 f7 e2             	mul    %rdx
ffffffff8022611d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80226120:	48 c1 e9 12          	shr    $0x12,%rcx
ffffffff80226124:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff8022612b:	cc cc cc 
ffffffff8022612e:	48 89 c8             	mov    %rcx,%rax
ffffffff80226131:	48 f7 e2             	mul    %rdx
ffffffff80226134:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226138:	48 89 d0             	mov    %rdx,%rax
ffffffff8022613b:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8022613f:	48 01 d0             	add    %rdx,%rax
ffffffff80226142:	48 01 c0             	add    %rax,%rax
ffffffff80226145:	48 29 c1             	sub    %rax,%rcx
ffffffff80226148:	48 89 ca             	mov    %rcx,%rdx
ffffffff8022614b:	89 d0                	mov    %edx,%eax
ffffffff8022614d:	83 c0 30             	add    $0x30,%eax
ffffffff80226150:	88 45 f1             	mov    %al,-0xf(%rbp)
    String[2]=(Param1/100000)%10+'0';
ffffffff80226153:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226157:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff8022615b:	48 ba 43 78 b4 71 c4 	movabs $0xa7c5ac471b47843,%rdx
ffffffff80226162:	5a 7c 0a 
ffffffff80226165:	48 f7 e2             	mul    %rdx
ffffffff80226168:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022616b:	48 c1 e9 07          	shr    $0x7,%rcx
ffffffff8022616f:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226176:	cc cc cc 
ffffffff80226179:	48 89 c8             	mov    %rcx,%rax
ffffffff8022617c:	48 f7 e2             	mul    %rdx
ffffffff8022617f:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226183:	48 89 d0             	mov    %rdx,%rax
ffffffff80226186:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8022618a:	48 01 d0             	add    %rdx,%rax
ffffffff8022618d:	48 01 c0             	add    %rax,%rax
ffffffff80226190:	48 29 c1             	sub    %rax,%rcx
ffffffff80226193:	48 89 ca             	mov    %rcx,%rdx
ffffffff80226196:	89 d0                	mov    %edx,%eax
ffffffff80226198:	83 c0 30             	add    $0x30,%eax
ffffffff8022619b:	88 45 f2             	mov    %al,-0xe(%rbp)
    String[3]=(Param1/10000)%10+'0';
ffffffff8022619e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802261a2:	48 ba 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rdx
ffffffff802261a9:	c5 6d 34 
ffffffff802261ac:	48 f7 e2             	mul    %rdx
ffffffff802261af:	48 89 d1             	mov    %rdx,%rcx
ffffffff802261b2:	48 c1 e9 0b          	shr    $0xb,%rcx
ffffffff802261b6:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802261bd:	cc cc cc 
ffffffff802261c0:	48 89 c8             	mov    %rcx,%rax
ffffffff802261c3:	48 f7 e2             	mul    %rdx
ffffffff802261c6:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff802261ca:	48 89 d0             	mov    %rdx,%rax
ffffffff802261cd:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff802261d1:	48 01 d0             	add    %rdx,%rax
ffffffff802261d4:	48 01 c0             	add    %rax,%rax
ffffffff802261d7:	48 29 c1             	sub    %rax,%rcx
ffffffff802261da:	48 89 ca             	mov    %rcx,%rdx
ffffffff802261dd:	89 d0                	mov    %edx,%eax
ffffffff802261df:	83 c0 30             	add    $0x30,%eax
ffffffff802261e2:	88 45 f3             	mov    %al,-0xd(%rbp)
    String[4]=(Param1/1000)%10+'0';
ffffffff802261e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802261e9:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff802261ed:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
ffffffff802261f4:	9b c4 20 
ffffffff802261f7:	48 f7 e2             	mul    %rdx
ffffffff802261fa:	48 89 d1             	mov    %rdx,%rcx
ffffffff802261fd:	48 c1 e9 04          	shr    $0x4,%rcx
ffffffff80226201:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226208:	cc cc cc 
ffffffff8022620b:	48 89 c8             	mov    %rcx,%rax
ffffffff8022620e:	48 f7 e2             	mul    %rdx
ffffffff80226211:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226215:	48 89 d0             	mov    %rdx,%rax
ffffffff80226218:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8022621c:	48 01 d0             	add    %rdx,%rax
ffffffff8022621f:	48 01 c0             	add    %rax,%rax
ffffffff80226222:	48 29 c1             	sub    %rax,%rcx
ffffffff80226225:	48 89 ca             	mov    %rcx,%rdx
ffffffff80226228:	89 d0                	mov    %edx,%eax
ffffffff8022622a:	83 c0 30             	add    $0x30,%eax
ffffffff8022622d:	88 45 f4             	mov    %al,-0xc(%rbp)
    String[5]=(Param1/100)%10+'0';
ffffffff80226230:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226234:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80226238:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
ffffffff8022623f:	c2 f5 28 
ffffffff80226242:	48 f7 e2             	mul    %rdx
ffffffff80226245:	48 89 d1             	mov    %rdx,%rcx
ffffffff80226248:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff8022624c:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226253:	cc cc cc 
ffffffff80226256:	48 89 c8             	mov    %rcx,%rax
ffffffff80226259:	48 f7 e2             	mul    %rdx
ffffffff8022625c:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226260:	48 89 d0             	mov    %rdx,%rax
ffffffff80226263:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80226267:	48 01 d0             	add    %rdx,%rax
ffffffff8022626a:	48 01 c0             	add    %rax,%rax
ffffffff8022626d:	48 29 c1             	sub    %rax,%rcx
ffffffff80226270:	48 89 ca             	mov    %rcx,%rdx
ffffffff80226273:	89 d0                	mov    %edx,%eax
ffffffff80226275:	83 c0 30             	add    $0x30,%eax
ffffffff80226278:	88 45 f5             	mov    %al,-0xb(%rbp)
    String[6]=(Param1/10)%10+'0';
ffffffff8022627b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8022627f:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226286:	cc cc cc 
ffffffff80226289:	48 f7 e2             	mul    %rdx
ffffffff8022628c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022628f:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff80226293:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff8022629a:	cc cc cc 
ffffffff8022629d:	48 89 c8             	mov    %rcx,%rax
ffffffff802262a0:	48 f7 e2             	mul    %rdx
ffffffff802262a3:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff802262a7:	48 89 d0             	mov    %rdx,%rax
ffffffff802262aa:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff802262ae:	48 01 d0             	add    %rdx,%rax
ffffffff802262b1:	48 01 c0             	add    %rax,%rax
ffffffff802262b4:	48 29 c1             	sub    %rax,%rcx
ffffffff802262b7:	48 89 ca             	mov    %rcx,%rdx
ffffffff802262ba:	89 d0                	mov    %edx,%eax
ffffffff802262bc:	83 c0 30             	add    $0x30,%eax
ffffffff802262bf:	88 45 f6             	mov    %al,-0xa(%rbp)
    String[7]=(Param1)%10+'0';
ffffffff802262c2:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff802262c6:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802262cd:	cc cc cc 
ffffffff802262d0:	48 89 c8             	mov    %rcx,%rax
ffffffff802262d3:	48 f7 e2             	mul    %rdx
ffffffff802262d6:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff802262da:	48 89 d0             	mov    %rdx,%rax
ffffffff802262dd:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff802262e1:	48 01 d0             	add    %rdx,%rax
ffffffff802262e4:	48 01 c0             	add    %rax,%rax
ffffffff802262e7:	48 29 c1             	sub    %rax,%rcx
ffffffff802262ea:	48 89 ca             	mov    %rcx,%rdx
ffffffff802262ed:	89 d0                	mov    %edx,%eax
ffffffff802262ef:	83 c0 30             	add    $0x30,%eax
ffffffff802262f2:	88 45 f7             	mov    %al,-0x9(%rbp)
    String[8]='\0';
ffffffff802262f5:	c6 45 f8 00          	movb   $0x0,-0x8(%rbp)
    write_string(Func_ID, (const char *)String, Sub_ID);
ffffffff802262f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802262fd:	89 c1                	mov    %eax,%ecx
ffffffff802262ff:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80226303:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
ffffffff80226307:	48 89 c6             	mov    %rax,%rsi
ffffffff8022630a:	89 cf                	mov    %ecx,%edi
ffffffff8022630c:	e8 2d fd ff ff       	call   ffffffff8022603e <write_string>

    //__RME_X64_Halt();
    return 0;
ffffffff80226311:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226316:	c9                   	leave
ffffffff80226317:	c3                   	ret

ffffffff80226318 <__RME_X64_Fault_Handler>:
              rme_ptr_t Reason - The fault source.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Fault_Handler(struct RME_Reg_Struct* Reg, rme_ptr_t Reason)
{
ffffffff80226318:	f3 0f 1e fa          	endbr64
ffffffff8022631c:	55                   	push   %rbp
ffffffff8022631d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226320:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226324:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226328:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not handling faults */
    RME_DBG_S("\n\r\n\r*** Fault: ");RME_DBG_I(Reason);RME_DBG_S(" - ");
ffffffff8022632c:	48 c7 c7 84 91 22 80 	mov    $0xffffffff80229184,%rdi
ffffffff80226333:	e8 f5 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226338:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022633c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022633f:	e8 ef 64 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
ffffffff80226344:	48 c7 c7 94 91 22 80 	mov    $0xffffffff80229194,%rdi
ffffffff8022634b:	e8 dd 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    /* When handling debug exceptions, note CVE 2018-8897, we may get something at
     * kernel level - If this is what we have, the user must have touched SS + INT */
    /* Print reason */
    switch(Reason)
ffffffff80226350:	48 83 7d f0 14       	cmpq   $0x14,-0x10(%rbp)
ffffffff80226355:	0f 87 4d 01 00 00    	ja     ffffffff802264a8 <__RME_X64_Fault_Handler+0x190>
ffffffff8022635b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022635f:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80226363:	48 05 f8 94 22 80    	add    $0xffffffff802294f8,%rax
ffffffff80226369:	48 8b 00             	mov    (%rax),%rax
ffffffff8022636c:	3e ff e0             	notrack jmp *%rax
    {
        case RME_X64_FAULT_DE:RME_DBG_S("Divide error");break;
ffffffff8022636f:	48 c7 c7 98 91 22 80 	mov    $0xffffffff80229198,%rdi
ffffffff80226376:	e8 b2 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022637b:	e9 35 01 00 00       	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_TRAP_DB:RME_DBG_S("Debug exception");break;
ffffffff80226380:	48 c7 c7 a5 91 22 80 	mov    $0xffffffff802291a5,%rdi
ffffffff80226387:	e8 a1 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022638c:	e9 24 01 00 00       	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_INT_NMI:RME_DBG_S("NMI error");break;
ffffffff80226391:	48 c7 c7 b5 91 22 80 	mov    $0xffffffff802291b5,%rdi
ffffffff80226398:	e8 90 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022639d:	e9 13 01 00 00       	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_TRAP_BP:RME_DBG_S("Debug breakpoint");break;
ffffffff802263a2:	48 c7 c7 bf 91 22 80 	mov    $0xffffffff802291bf,%rdi
ffffffff802263a9:	e8 7f 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802263ae:	e9 02 01 00 00       	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_TRAP_OF:RME_DBG_S("Overflow exception");break;
ffffffff802263b3:	48 c7 c7 d0 91 22 80 	mov    $0xffffffff802291d0,%rdi
ffffffff802263ba:	e8 6e 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802263bf:	e9 f1 00 00 00       	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_BR:RME_DBG_S("Bound range exception");break;
ffffffff802263c4:	48 c7 c7 e3 91 22 80 	mov    $0xffffffff802291e3,%rdi
ffffffff802263cb:	e8 5d 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802263d0:	e9 e0 00 00 00       	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_UD:RME_DBG_S("Undefined instruction");break;
ffffffff802263d5:	48 c7 c7 f9 91 22 80 	mov    $0xffffffff802291f9,%rdi
ffffffff802263dc:	e8 4c 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802263e1:	e9 cf 00 00 00       	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_NM:RME_DBG_S("Device not available");break;
ffffffff802263e6:	48 c7 c7 0f 92 22 80 	mov    $0xffffffff8022920f,%rdi
ffffffff802263ed:	e8 3b 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802263f2:	e9 be 00 00 00       	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_ABORT_DF:RME_DBG_S("Double(nested) fault exception");break;
ffffffff802263f7:	48 c7 c7 28 92 22 80 	mov    $0xffffffff80229228,%rdi
ffffffff802263fe:	e8 2a 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226403:	e9 ad 00 00 00       	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_ABORT_OLD_MF:RME_DBG_S("Coprocessor overrun - not used later on");break;
ffffffff80226408:	48 c7 c7 48 92 22 80 	mov    $0xffffffff80229248,%rdi
ffffffff8022640f:	e8 19 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226414:	e9 9c 00 00 00       	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_TS:RME_DBG_S("Invalid TSS exception");break;
ffffffff80226419:	48 c7 c7 70 92 22 80 	mov    $0xffffffff80229270,%rdi
ffffffff80226420:	e8 08 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226425:	e9 8b 00 00 00       	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_NP:RME_DBG_S("Segment not present");break;
ffffffff8022642a:	48 c7 c7 86 92 22 80 	mov    $0xffffffff80229286,%rdi
ffffffff80226431:	e8 f7 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226436:	eb 7d                	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_SS:RME_DBG_S("Stack fault exception");break;
ffffffff80226438:	48 c7 c7 9a 92 22 80 	mov    $0xffffffff8022929a,%rdi
ffffffff8022643f:	e8 e9 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226444:	eb 6f                	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_GP:RME_DBG_S("General protection exception");break;
ffffffff80226446:	48 c7 c7 b0 92 22 80 	mov    $0xffffffff802292b0,%rdi
ffffffff8022644d:	e8 db 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226452:	eb 61                	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_PF:RME_DBG_S("Page fault exception");break;
ffffffff80226454:	48 c7 c7 cd 92 22 80 	mov    $0xffffffff802292cd,%rdi
ffffffff8022645b:	e8 cd 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226460:	eb 53                	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_MF:RME_DBG_S("X87 FPU floating-point error:");break;
ffffffff80226462:	48 c7 c7 e2 92 22 80 	mov    $0xffffffff802292e2,%rdi
ffffffff80226469:	e8 bf 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022646e:	eb 45                	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_AC:RME_DBG_S("Alignment check exception");break;
ffffffff80226470:	48 c7 c7 00 93 22 80 	mov    $0xffffffff80229300,%rdi
ffffffff80226477:	e8 b1 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022647c:	eb 37                	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_ABORT_MC:RME_DBG_S("Machine check exception");break;
ffffffff8022647e:	48 c7 c7 1a 93 22 80 	mov    $0xffffffff8022931a,%rdi
ffffffff80226485:	e8 a3 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022648a:	eb 29                	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_XM:RME_DBG_S("SIMD floating-point exception");break;
ffffffff8022648c:	48 c7 c7 32 93 22 80 	mov    $0xffffffff80229332,%rdi
ffffffff80226493:	e8 95 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226498:	eb 1b                	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_VE:RME_DBG_S("Virtualization exception");break;
ffffffff8022649a:	48 c7 c7 50 93 22 80 	mov    $0xffffffff80229350,%rdi
ffffffff802264a1:	e8 87 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802264a6:	eb 0d                	jmp    ffffffff802264b5 <__RME_X64_Fault_Handler+0x19d>
        default:RME_DBG_S("Unknown exception");break;
ffffffff802264a8:	48 c7 c7 69 93 22 80 	mov    $0xffffffff80229369,%rdi
ffffffff802264af:	e8 79 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802264b4:	90                   	nop
    }
    /* Print all registers */
    RME_DBG_S("\n\rRAX:        0x");RME_DBG_U(Reg->RAX);
ffffffff802264b5:	48 c7 c7 7b 93 22 80 	mov    $0xffffffff8022937b,%rdi
ffffffff802264bc:	e8 6c 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802264c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802264c5:	48 8b 00             	mov    (%rax),%rax
ffffffff802264c8:	48 89 c7             	mov    %rax,%rdi
ffffffff802264cb:	e8 63 63 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rRBX:        0x");RME_DBG_U(Reg->RBX);
ffffffff802264d0:	48 c7 c7 8c 93 22 80 	mov    $0xffffffff8022938c,%rdi
ffffffff802264d7:	e8 51 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802264dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802264e0:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802264e4:	48 89 c7             	mov    %rax,%rdi
ffffffff802264e7:	e8 47 63 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rRCX:        0x");RME_DBG_U(Reg->RCX);
ffffffff802264ec:	48 c7 c7 9d 93 22 80 	mov    $0xffffffff8022939d,%rdi
ffffffff802264f3:	e8 35 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802264f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802264fc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80226500:	48 89 c7             	mov    %rax,%rdi
ffffffff80226503:	e8 2b 63 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rRDX:        0x");RME_DBG_U(Reg->RDX);
ffffffff80226508:	48 c7 c7 ae 93 22 80 	mov    $0xffffffff802293ae,%rdi
ffffffff8022650f:	e8 19 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226514:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226518:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8022651c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022651f:	e8 0f 63 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rRSI:        0x");RME_DBG_U(Reg->RSI);
ffffffff80226524:	48 c7 c7 bf 93 22 80 	mov    $0xffffffff802293bf,%rdi
ffffffff8022652b:	e8 fd 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226530:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226534:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80226538:	48 89 c7             	mov    %rax,%rdi
ffffffff8022653b:	e8 f3 62 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rRDI:        0x");RME_DBG_U(Reg->RDI);
ffffffff80226540:	48 c7 c7 d0 93 22 80 	mov    $0xffffffff802293d0,%rdi
ffffffff80226547:	e8 e1 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022654c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226550:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226554:	48 89 c7             	mov    %rax,%rdi
ffffffff80226557:	e8 d7 62 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rRBP:        0x");RME_DBG_U(Reg->RBP);
ffffffff8022655c:	48 c7 c7 e1 93 22 80 	mov    $0xffffffff802293e1,%rdi
ffffffff80226563:	e8 c5 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226568:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022656c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226570:	48 89 c7             	mov    %rax,%rdi
ffffffff80226573:	e8 bb 62 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rR8:         0x");RME_DBG_U(Reg->R8);
ffffffff80226578:	48 c7 c7 f2 93 22 80 	mov    $0xffffffff802293f2,%rdi
ffffffff8022657f:	e8 a9 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226584:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226588:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff8022658c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022658f:	e8 9f 62 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rR9:         0x");RME_DBG_U(Reg->R9);
ffffffff80226594:	48 c7 c7 03 94 22 80 	mov    $0xffffffff80229403,%rdi
ffffffff8022659b:	e8 8d 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802265a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802265a4:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff802265a8:	48 89 c7             	mov    %rax,%rdi
ffffffff802265ab:	e8 83 62 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rR10:        0x");RME_DBG_U(Reg->R10);
ffffffff802265b0:	48 c7 c7 14 94 22 80 	mov    $0xffffffff80229414,%rdi
ffffffff802265b7:	e8 71 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802265bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802265c0:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff802265c4:	48 89 c7             	mov    %rax,%rdi
ffffffff802265c7:	e8 67 62 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rR11:        0x");RME_DBG_U(Reg->R11);
ffffffff802265cc:	48 c7 c7 25 94 22 80 	mov    $0xffffffff80229425,%rdi
ffffffff802265d3:	e8 55 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802265d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802265dc:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff802265e0:	48 89 c7             	mov    %rax,%rdi
ffffffff802265e3:	e8 4b 62 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rR12:        0x");RME_DBG_U(Reg->R12);
ffffffff802265e8:	48 c7 c7 36 94 22 80 	mov    $0xffffffff80229436,%rdi
ffffffff802265ef:	e8 39 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802265f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802265f8:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff802265fc:	48 89 c7             	mov    %rax,%rdi
ffffffff802265ff:	e8 2f 62 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rR13:        0x");RME_DBG_U(Reg->R13);
ffffffff80226604:	48 c7 c7 47 94 22 80 	mov    $0xffffffff80229447,%rdi
ffffffff8022660b:	e8 1d 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226610:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226614:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80226618:	48 89 c7             	mov    %rax,%rdi
ffffffff8022661b:	e8 13 62 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rR14:        0x");RME_DBG_U(Reg->R14);
ffffffff80226620:	48 c7 c7 58 94 22 80 	mov    $0xffffffff80229458,%rdi
ffffffff80226627:	e8 01 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022662c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226630:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80226634:	48 89 c7             	mov    %rax,%rdi
ffffffff80226637:	e8 f7 61 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rR15:        0x");RME_DBG_U(Reg->R15);
ffffffff8022663c:	48 c7 c7 69 94 22 80 	mov    $0xffffffff80229469,%rdi
ffffffff80226643:	e8 e5 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022664c:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80226650:	48 89 c7             	mov    %rax,%rdi
ffffffff80226653:	e8 db 61 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rINT_NUM:    0x");RME_DBG_U(Reg->INT_NUM);
ffffffff80226658:	48 c7 c7 7a 94 22 80 	mov    $0xffffffff8022947a,%rdi
ffffffff8022665f:	e8 c9 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226664:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226668:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff8022666c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022666f:	e8 bf 61 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rERROR_CODE: 0x");RME_DBG_U(Reg->ERROR_CODE);
ffffffff80226674:	48 c7 c7 8b 94 22 80 	mov    $0xffffffff8022948b,%rdi
ffffffff8022667b:	e8 ad 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226680:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226684:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff8022668b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022668e:	e8 a0 61 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rRIP:        0x");RME_DBG_U(Reg->RIP);
ffffffff80226693:	48 c7 c7 9c 94 22 80 	mov    $0xffffffff8022949c,%rdi
ffffffff8022669a:	e8 8e 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022669f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266a3:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff802266aa:	48 89 c7             	mov    %rax,%rdi
ffffffff802266ad:	e8 81 61 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rCS:         0x");RME_DBG_U(Reg->CS);
ffffffff802266b2:	48 c7 c7 ad 94 22 80 	mov    $0xffffffff802294ad,%rdi
ffffffff802266b9:	e8 6f 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802266be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266c2:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff802266c9:	48 89 c7             	mov    %rax,%rdi
ffffffff802266cc:	e8 62 61 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rRFLAGS:     0x");RME_DBG_U(Reg->RFLAGS);
ffffffff802266d1:	48 c7 c7 be 94 22 80 	mov    $0xffffffff802294be,%rdi
ffffffff802266d8:	e8 50 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802266dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266e1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff802266e8:	48 89 c7             	mov    %rax,%rdi
ffffffff802266eb:	e8 43 61 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rRSP:        0x");RME_DBG_U(Reg->RSP);
ffffffff802266f0:	48 c7 c7 cf 94 22 80 	mov    $0xffffffff802294cf,%rdi
ffffffff802266f7:	e8 31 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802266fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226700:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax
ffffffff80226707:	48 89 c7             	mov    %rax,%rdi
ffffffff8022670a:	e8 24 61 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rSS:         0x");RME_DBG_U(Reg->SS);
ffffffff8022670f:	48 c7 c7 e0 94 22 80 	mov    $0xffffffff802294e0,%rdi
ffffffff80226716:	e8 12 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022671b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022671f:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff80226726:	48 89 c7             	mov    %rax,%rdi
ffffffff80226729:	e8 05 61 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\n\rHang");
ffffffff8022672e:	48 c7 c7 f1 94 22 80 	mov    $0xffffffff802294f1,%rdi
ffffffff80226735:	e8 f3 62 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>

    while(1);
ffffffff8022673a:	90                   	nop
ffffffff8022673b:	eb fd                	jmp    ffffffff8022673a <__RME_X64_Fault_Handler+0x422>

ffffffff8022673d <__RME_X64_Generic_Handler>:
              rme_ptr_t Int_Num - The interrupt number.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Generic_Handler(struct RME_Reg_Struct* Reg, rme_ptr_t Int_Num)
{
ffffffff8022673d:	f3 0f 1e fa          	endbr64
ffffffff80226741:	55                   	push   %rbp
ffffffff80226742:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226745:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226749:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022674d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not handling interrupts */
    RME_DBG_S("\r\nGeneral int:");
ffffffff80226751:	48 c7 c7 a0 95 22 80 	mov    $0xffffffff802295a0,%rdi
ffffffff80226758:	e8 d0 62 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(Int_Num);
ffffffff8022675d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226761:	48 89 c7             	mov    %rax,%rdi
ffffffff80226764:	e8 ca 60 fe ff       	call   ffffffff8020c833 <RME_Int_Print>

    switch(Int_Num)
    {
        /* Is this a generic IPI from other processors? */

        default:break;
ffffffff80226769:	90                   	nop
    }
    /* Remember to perform context switch after any kernel sends */
}
ffffffff8022676a:	90                   	nop
ffffffff8022676b:	c9                   	leave
ffffffff8022676c:	c3                   	ret

ffffffff8022676d <__RME_Pgt_Set>:
Input       : rme_ptr_t Pgt - The virtual address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgt_Set(rme_ptr_t Pgt)
{
ffffffff8022676d:	f3 0f 1e fa          	endbr64
ffffffff80226771:	55                   	push   %rbp
ffffffff80226772:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226775:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226779:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff8022677d:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80226784:	80 00 00 
ffffffff80226787:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022678b:	48 01 d0             	add    %rdx,%rax
ffffffff8022678e:	48 89 c7             	mov    %rax,%rdi
ffffffff80226791:	e8 13 51 fe ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
}
ffffffff80226796:	90                   	nop
ffffffff80226797:	c9                   	leave
ffffffff80226798:	c3                   	ret

ffffffff80226799 <__RME_Pgt_Check>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Check(rme_ptr_t Base_Addr, rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order, rme_ptr_t Num_Order, rme_ptr_t Vaddr)
{
ffffffff80226799:	f3 0f 1e fa          	endbr64
ffffffff8022679d:	55                   	push   %rbp
ffffffff8022679e:	48 89 e5             	mov    %rsp,%rbp
ffffffff802267a1:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff802267a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802267a9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff802267ad:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff802267b1:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff802267b5:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    /* Is the table address aligned to 4kB? */
    if((Vaddr&0xFFF)!=0)
ffffffff802267b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802267bd:	25 ff 0f 00 00       	and    $0xfff,%eax
ffffffff802267c2:	48 85 c0             	test   %rax,%rax
ffffffff802267c5:	74 09                	je     ffffffff802267d0 <__RME_Pgt_Check+0x37>
        return RME_ERR_HAL_FAIL;
ffffffff802267c7:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802267ce:	eb 59                	jmp    ffffffff80226829 <__RME_Pgt_Check+0x90>

    /* Is the size order allowed? */
    if((Size_Order!=RME_PGT_SIZE_512G)&&(Size_Order!=RME_PGT_SIZE_1G)&&
ffffffff802267d0:	48 83 7d e8 27       	cmpq   $0x27,-0x18(%rbp)
ffffffff802267d5:	74 1e                	je     ffffffff802267f5 <__RME_Pgt_Check+0x5c>
ffffffff802267d7:	48 83 7d e8 1e       	cmpq   $0x1e,-0x18(%rbp)
ffffffff802267dc:	74 17                	je     ffffffff802267f5 <__RME_Pgt_Check+0x5c>
ffffffff802267de:	48 83 7d e8 15       	cmpq   $0x15,-0x18(%rbp)
ffffffff802267e3:	74 10                	je     ffffffff802267f5 <__RME_Pgt_Check+0x5c>
       (Size_Order!=RME_PGT_SIZE_2M)&&(Size_Order!=RME_PGT_SIZE_4K))
ffffffff802267e5:	48 83 7d e8 0c       	cmpq   $0xc,-0x18(%rbp)
ffffffff802267ea:	74 09                	je     ffffffff802267f5 <__RME_Pgt_Check+0x5c>
        return RME_ERR_HAL_FAIL;
ffffffff802267ec:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802267f3:	eb 34                	jmp    ffffffff80226829 <__RME_Pgt_Check+0x90>

    /* Is the top-level relationship correct? */
    if(((Size_Order==RME_PGT_SIZE_512G)^(Is_Top!=0))!=0)
ffffffff802267f5:	48 83 7d e8 27       	cmpq   $0x27,-0x18(%rbp)
ffffffff802267fa:	0f 94 c2             	sete   %dl
ffffffff802267fd:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226802:	0f 95 c0             	setne  %al
ffffffff80226805:	31 d0                	xor    %edx,%eax
ffffffff80226807:	84 c0                	test   %al,%al
ffffffff80226809:	74 09                	je     ffffffff80226814 <__RME_Pgt_Check+0x7b>
        return RME_ERR_HAL_FAIL;
ffffffff8022680b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226812:	eb 15                	jmp    ffffffff80226829 <__RME_Pgt_Check+0x90>

    /* Is the number order allowed? */
    if(Num_Order!=RME_PGT_NUM_512)
ffffffff80226814:	48 83 7d e0 09       	cmpq   $0x9,-0x20(%rbp)
ffffffff80226819:	74 09                	je     ffffffff80226824 <__RME_Pgt_Check+0x8b>
        return RME_ERR_HAL_FAIL;
ffffffff8022681b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226822:	eb 05                	jmp    ffffffff80226829 <__RME_Pgt_Check+0x90>

    return 0;
ffffffff80226824:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226829:	c9                   	leave
ffffffff8022682a:	c3                   	ret

ffffffff8022682b <__RME_Pgt_Init>:
Input       : struct RME_Cap_Pgt* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Init(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff8022682b:	f3 0f 1e fa          	endbr64
ffffffff8022682f:	55                   	push   %rbp
ffffffff80226830:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226833:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80226837:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_cnt_t Count;
    rme_ptr_t* Ptr;
    
    /* Get the actual table */
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8022683b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022683f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226843:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Hopefully the compiler optimize this to rep stos */
    for(Count=0;Count<256;Count++)
ffffffff80226847:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8022684e:	00 
ffffffff8022684f:	eb 1f                	jmp    ffffffff80226870 <__RME_Pgt_Init+0x45>
        Ptr[Count]=0;
ffffffff80226851:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226855:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8022685c:	00 
ffffffff8022685d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226861:	48 01 d0             	add    %rdx,%rax
ffffffff80226864:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8022686b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80226870:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff80226877:	00 
ffffffff80226878:	7e d7                	jle    ffffffff80226851 <__RME_Pgt_Init+0x26>

    /* Hopefully the compiler optimize this to rep movs */
    if((Pgt_Op->Base&RME_PGT_TOP)!=0)
ffffffff8022687a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022687e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226882:	83 e0 01             	and    $0x1,%eax
ffffffff80226885:	48 85 c0             	test   %rax,%rax
ffffffff80226888:	74 62                	je     ffffffff802268ec <__RME_Pgt_Init+0xc1>
    {
        for(;Count<512;Count++)
ffffffff8022688a:	eb 35                	jmp    ffffffff802268c1 <__RME_Pgt_Init+0x96>
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8022688c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226890:	48 8d 88 00 ff ff ff 	lea    -0x100(%rax),%rcx
ffffffff80226897:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022689b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802268a2:	00 
ffffffff802268a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802268a7:	48 01 c2             	add    %rax,%rdx
ffffffff802268aa:	48 8d 81 00 01 00 00 	lea    0x100(%rcx),%rax
ffffffff802268b1:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff802268b8:	80 
ffffffff802268b9:	48 89 02             	mov    %rax,(%rdx)
        for(;Count<512;Count++)
ffffffff802268bc:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802268c1:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
ffffffff802268c8:	00 
ffffffff802268c9:	7e c1                	jle    ffffffff8022688c <__RME_Pgt_Init+0x61>
ffffffff802268cb:	eb 29                	jmp    ffffffff802268f6 <__RME_Pgt_Init+0xcb>
    }
    else
    {
        for(;Count<512;Count++)
            Ptr[Count]=0;
ffffffff802268cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802268d1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802268d8:	00 
ffffffff802268d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802268dd:	48 01 d0             	add    %rdx,%rax
ffffffff802268e0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        for(;Count<512;Count++)
ffffffff802268e7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802268ec:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
ffffffff802268f3:	00 
ffffffff802268f4:	7e d7                	jle    ffffffff802268cd <__RME_Pgt_Init+0xa2>
    }

    return 0;
ffffffff802268f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802268fb:	c9                   	leave
ffffffff802268fc:	c3                   	ret

ffffffff802268fd <__RME_Pgt_Del_Check>:
Input       : struct RME_Cap_Pgt Pgt_Op* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If can be deleted, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Del_Check(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff802268fd:	f3 0f 1e fa          	endbr64
ffffffff80226901:	55                   	push   %rbp
ffffffff80226902:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226905:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80226909:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

    return 0;
ffffffff8022690d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226912:	c9                   	leave
ffffffff80226913:	c3                   	ret

ffffffff80226914 <__RME_Pgt_Page_Map>:
                                architecture specific page table's settings.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Map(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Paddr, rme_ptr_t Pos, rme_ptr_t Flags)
{
ffffffff80226914:	f3 0f 1e fa          	endbr64
ffffffff80226918:	55                   	push   %rbp
ffffffff80226919:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022691c:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80226920:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226924:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80226928:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff8022692c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff80226930:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226934:	83 e0 01             	and    $0x1,%eax
ffffffff80226937:	48 85 c0             	test   %rax,%rax
ffffffff8022693a:	75 0c                	jne    ffffffff80226948 <__RME_Pgt_Page_Map+0x34>
        return RME_ERR_HAL_FAIL;
ffffffff8022693c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226943:	e9 d5 00 00 00       	jmp    ffffffff80226a1d <__RME_Pgt_Page_Map+0x109>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226948:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022694c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226950:	83 e0 01             	and    $0x1,%eax
ffffffff80226953:	48 85 c0             	test   %rax,%rax
ffffffff80226956:	74 16                	je     ffffffff8022696e <__RME_Pgt_Page_Map+0x5a>
ffffffff80226958:	48 81 7d d8 ff 00 00 	cmpq   $0xff,-0x28(%rbp)
ffffffff8022695f:	00 
ffffffff80226960:	76 0c                	jbe    ffffffff8022696e <__RME_Pgt_Page_Map+0x5a>
        return RME_ERR_HAL_FAIL;
ffffffff80226962:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226969:	e9 af 00 00 00       	jmp    ffffffff80226a1d <__RME_Pgt_Page_Map+0x109>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8022696e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226972:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226976:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Generate flags */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff8022697a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022697e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226982:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226986:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff8022698a:	75 2d                	jne    ffffffff802269b9 <__RME_Pgt_Page_Map+0xa5>
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8022698c:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226993:	ff 0f 00 
ffffffff80226996:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff8022699a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022699d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802269a1:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff802269a4:	48 8b 04 c5 e0 8a 22 	mov    -0x7fdd7520(,%rax,8),%rax
ffffffff802269ab:	80 
ffffffff802269ac:	48 09 d0             	or     %rdx,%rax
ffffffff802269af:	48 83 c8 04          	or     $0x4,%rax
ffffffff802269b3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802269b7:	eb 29                	jmp    ffffffff802269e2 <__RME_Pgt_Page_Map+0xce>
    else
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;
ffffffff802269b9:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff802269c0:	ff 0f 00 
ffffffff802269c3:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff802269c7:	48 89 c2             	mov    %rax,%rdx
ffffffff802269ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802269ce:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff802269d1:	48 8b 04 c5 e0 8a 22 	mov    -0x7fdd7520(,%rax,8),%rax
ffffffff802269d8:	80 
ffffffff802269d9:	48 09 d0             	or     %rdx,%rax
ffffffff802269dc:	0c 84                	or     $0x84,%al
ffffffff802269de:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Try to map it in */
    if(RME_COMP_SWAP(&(Table[Pos]),0,X64_Flags)==0)
ffffffff802269e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802269e6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802269ed:	00 
ffffffff802269ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802269f2:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff802269f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802269fa:	48 89 c2             	mov    %rax,%rdx
ffffffff802269fd:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80226a02:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226a05:	e8 8c 46 ff ff       	call   ffffffff8021b096 <_RME_X64_Comp_Swap>
ffffffff80226a0a:	48 85 c0             	test   %rax,%rax
ffffffff80226a0d:	75 09                	jne    ffffffff80226a18 <__RME_Pgt_Page_Map+0x104>
        return RME_ERR_HAL_FAIL;
ffffffff80226a0f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226a16:	eb 05                	jmp    ffffffff80226a1d <__RME_Pgt_Page_Map+0x109>

    return 0;
ffffffff80226a18:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226a1d:	c9                   	leave
ffffffff80226a1e:	c3                   	ret

ffffffff80226a1f <__RME_Pgt_Page_Unmap>:
              rme_ptr_t Pos - The position in the page table.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Unmap(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos)
{
ffffffff80226a1f:	f3 0f 1e fa          	endbr64
ffffffff80226a23:	55                   	push   %rbp
ffffffff80226a24:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226a27:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80226a2b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226a2f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226a33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226a37:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226a3b:	83 e0 01             	and    $0x1,%eax
ffffffff80226a3e:	48 85 c0             	test   %rax,%rax
ffffffff80226a41:	74 16                	je     ffffffff80226a59 <__RME_Pgt_Page_Unmap+0x3a>
ffffffff80226a43:	48 81 7d e0 ff 00 00 	cmpq   $0xff,-0x20(%rbp)
ffffffff80226a4a:	00 
ffffffff80226a4b:	76 0c                	jbe    ffffffff80226a59 <__RME_Pgt_Page_Unmap+0x3a>
        return RME_ERR_HAL_FAIL;
ffffffff80226a4d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226a54:	e9 9a 00 00 00       	jmp    ffffffff80226af3 <__RME_Pgt_Page_Unmap+0xd4>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226a59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226a5d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226a61:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Make sure that there is something */
    Temp=Table[Pos];
ffffffff80226a65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226a69:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226a70:	00 
ffffffff80226a71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226a75:	48 01 d0             	add    %rdx,%rax
ffffffff80226a78:	48 8b 00             	mov    (%rax),%rax
ffffffff80226a7b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Temp==0)
ffffffff80226a7f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226a84:	75 09                	jne    ffffffff80226a8f <__RME_Pgt_Page_Unmap+0x70>
        return RME_ERR_HAL_FAIL;
ffffffff80226a86:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226a8d:	eb 64                	jmp    ffffffff80226af3 <__RME_Pgt_Page_Unmap+0xd4>

    /* Is this a page directory? We cannot unmap page directories like this */
    if((RME_PGT_SIZEORD(Pgt_Op->Order)!=RME_PGT_SIZE_4K)&&((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff80226a8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226a93:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226a97:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226a9b:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226a9f:	74 17                	je     ffffffff80226ab8 <__RME_Pgt_Page_Unmap+0x99>
ffffffff80226aa1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226aa5:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226aaa:	48 85 c0             	test   %rax,%rax
ffffffff80226aad:	75 09                	jne    ffffffff80226ab8 <__RME_Pgt_Page_Unmap+0x99>
        return RME_ERR_HAL_FAIL;
ffffffff80226aaf:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226ab6:	eb 3b                	jmp    ffffffff80226af3 <__RME_Pgt_Page_Unmap+0xd4>

    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Table[Pos]),Temp,0)==0)
ffffffff80226ab8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226abc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226ac3:	00 
ffffffff80226ac4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226ac8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226acc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226ad0:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80226ad5:	48 89 c6             	mov    %rax,%rsi
ffffffff80226ad8:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226adb:	e8 b6 45 ff ff       	call   ffffffff8021b096 <_RME_X64_Comp_Swap>
ffffffff80226ae0:	48 85 c0             	test   %rax,%rax
ffffffff80226ae3:	75 09                	jne    ffffffff80226aee <__RME_Pgt_Page_Unmap+0xcf>
        return RME_ERR_HAL_FAIL;
ffffffff80226ae5:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226aec:	eb 05                	jmp    ffffffff80226af3 <__RME_Pgt_Page_Unmap+0xd4>

    return 0;
ffffffff80226aee:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226af3:	c9                   	leave
ffffffff80226af4:	c3                   	ret

ffffffff80226af5 <__RME_Pgt_Pgdir_Map>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Map(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                struct RME_Cap_Pgt* Pgt_Child, rme_ptr_t Flags)
{
ffffffff80226af5:	f3 0f 1e fa          	endbr64
ffffffff80226af9:	55                   	push   %rbp
ffffffff80226afa:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226afd:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80226b01:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80226b05:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80226b09:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80226b0d:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff80226b11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226b15:	83 e0 01             	and    $0x1,%eax
ffffffff80226b18:	48 85 c0             	test   %rax,%rax
ffffffff80226b1b:	75 0c                	jne    ffffffff80226b29 <__RME_Pgt_Pgdir_Map+0x34>
        return RME_ERR_HAL_FAIL;
ffffffff80226b1d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226b24:	e9 b1 00 00 00       	jmp    ffffffff80226bda <__RME_Pgt_Pgdir_Map+0xe5>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226b29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226b2d:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226b31:	83 e0 01             	and    $0x1,%eax
ffffffff80226b34:	48 85 c0             	test   %rax,%rax
ffffffff80226b37:	74 16                	je     ffffffff80226b4f <__RME_Pgt_Pgdir_Map+0x5a>
ffffffff80226b39:	48 81 7d d0 ff 00 00 	cmpq   $0xff,-0x30(%rbp)
ffffffff80226b40:	00 
ffffffff80226b41:	76 0c                	jbe    ffffffff80226b4f <__RME_Pgt_Pgdir_Map+0x5a>
        return RME_ERR_HAL_FAIL;
ffffffff80226b43:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226b4a:	e9 8b 00 00 00       	jmp    ffffffff80226bda <__RME_Pgt_Pgdir_Map+0xe5>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
ffffffff80226b4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226b53:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226b57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Child_Table=RME_CAP_GETOBJ(Pgt_Child,rme_ptr_t*);
ffffffff80226b5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226b5f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226b63:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff80226b67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226b6b:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80226b72:	80 00 00 
ffffffff80226b75:	48 01 c2             	add    %rax,%rdx
ffffffff80226b78:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226b7f:	ff 0f 00 
ffffffff80226b82:	48 21 c2             	and    %rax,%rdx
ffffffff80226b85:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226b89:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff80226b8c:	48 8b 04 c5 e0 8a 22 	mov    -0x7fdd7520(,%rax,8),%rax
ffffffff80226b93:	80 
ffffffff80226b94:	48 09 d0             	or     %rdx,%rax
ffffffff80226b97:	48 83 c8 04          	or     $0x4,%rax
ffffffff80226b9b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    /* Try to map it in - may need to increase some count */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff80226b9f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226ba3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226baa:	00 
ffffffff80226bab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226baf:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226bb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226bb7:	48 89 c2             	mov    %rax,%rdx
ffffffff80226bba:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80226bbf:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226bc2:	e8 cf 44 ff ff       	call   ffffffff8021b096 <_RME_X64_Comp_Swap>
ffffffff80226bc7:	48 85 c0             	test   %rax,%rax
ffffffff80226bca:	75 09                	jne    ffffffff80226bd5 <__RME_Pgt_Pgdir_Map+0xe0>
        return RME_ERR_HAL_FAIL;
ffffffff80226bcc:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226bd3:	eb 05                	jmp    ffffffff80226bda <__RME_Pgt_Pgdir_Map+0xe5>

    return 0;
ffffffff80226bd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226bda:	c9                   	leave
ffffffff80226bdb:	c3                   	ret

ffffffff80226bdc <__RME_Pgt_Pgdir_Unmap>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Unmap(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                  struct RME_Cap_Pgt* Pgt_Child)
{
ffffffff80226bdc:	f3 0f 1e fa          	endbr64
ffffffff80226be0:	55                   	push   %rbp
ffffffff80226be1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226be4:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80226be8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80226bec:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80226bf0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226bf4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226bf8:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226bfc:	83 e0 01             	and    $0x1,%eax
ffffffff80226bff:	48 85 c0             	test   %rax,%rax
ffffffff80226c02:	74 16                	je     ffffffff80226c1a <__RME_Pgt_Pgdir_Unmap+0x3e>
ffffffff80226c04:	48 81 7d d0 ff 00 00 	cmpq   $0xff,-0x30(%rbp)
ffffffff80226c0b:	00 
ffffffff80226c0c:	76 0c                	jbe    ffffffff80226c1a <__RME_Pgt_Pgdir_Unmap+0x3e>
        return RME_ERR_HAL_FAIL;
ffffffff80226c0e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226c15:	e9 c4 00 00 00       	jmp    ffffffff80226cde <__RME_Pgt_Pgdir_Unmap+0x102>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
ffffffff80226c1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226c1e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226c22:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Make sure that there is something */
    Temp=Parent_Table[Pos];
ffffffff80226c26:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226c2a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226c31:	00 
ffffffff80226c32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226c36:	48 01 d0             	add    %rdx,%rax
ffffffff80226c39:	48 8b 00             	mov    (%rax),%rax
ffffffff80226c3c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Temp==0)
ffffffff80226c40:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226c45:	75 0c                	jne    ffffffff80226c53 <__RME_Pgt_Pgdir_Unmap+0x77>
        return RME_ERR_HAL_FAIL;
ffffffff80226c47:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226c4e:	e9 8b 00 00 00       	jmp    ffffffff80226cde <__RME_Pgt_Pgdir_Unmap+0x102>

    /* Is this a page? We cannot unmap pages like this */
    if((RME_PGT_SIZEORD(Pgt_Parent->Order)==RME_PGT_SIZE_4K)||((Temp&RME_X64_MMU_PDE_SUP)!=0))
ffffffff80226c53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226c57:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226c5b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226c5f:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226c63:	74 0e                	je     ffffffff80226c73 <__RME_Pgt_Pgdir_Unmap+0x97>
ffffffff80226c65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226c69:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226c6e:	48 85 c0             	test   %rax,%rax
ffffffff80226c71:	74 09                	je     ffffffff80226c7c <__RME_Pgt_Pgdir_Unmap+0xa0>
        return RME_ERR_HAL_FAIL;
ffffffff80226c73:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226c7a:	eb 62                	jmp    ffffffff80226cde <__RME_Pgt_Pgdir_Unmap+0x102>

    /* Is this child table mapped here? - check that in the future */

    Child_Table=(rme_ptr_t*)Temp;
ffffffff80226c7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226c80:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    rme_ptr_t* Expected_Child_Table = RME_CAP_GETOBJ(Pgt_Child, rme_ptr_t*);
ffffffff80226c84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226c88:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226c8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (Child_Table != Expected_Child_Table)
ffffffff80226c90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226c94:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80226c98:	74 09                	je     ffffffff80226ca3 <__RME_Pgt_Pgdir_Unmap+0xc7>
        return RME_ERR_HAL_FAIL;
ffffffff80226c9a:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226ca1:	eb 3b                	jmp    ffffffff80226cde <__RME_Pgt_Pgdir_Unmap+0x102>
    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),Temp,0)==0)
ffffffff80226ca3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226ca7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226cae:	00 
ffffffff80226caf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226cb3:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226cb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226cbb:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80226cc0:	48 89 c6             	mov    %rax,%rsi
ffffffff80226cc3:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226cc6:	e8 cb 43 ff ff       	call   ffffffff8021b096 <_RME_X64_Comp_Swap>
ffffffff80226ccb:	48 85 c0             	test   %rax,%rax
ffffffff80226cce:	75 09                	jne    ffffffff80226cd9 <__RME_Pgt_Pgdir_Unmap+0xfd>
        return RME_ERR_HAL_FAIL;
ffffffff80226cd0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226cd7:	eb 05                	jmp    ffffffff80226cde <__RME_Pgt_Pgdir_Unmap+0x102>

    return 0;
ffffffff80226cd9:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226cde:	c9                   	leave
ffffffff80226cdf:	c3                   	ret

ffffffff80226ce0 <__RME_Pgt_Lookup>:
Output      : rme_ptr_t* Paddr - The physical address of the page.
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Lookup(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos, rme_ptr_t* Paddr, rme_ptr_t* Flags)
{
ffffffff80226ce0:	f3 0f 1e fa          	endbr64
ffffffff80226ce4:	55                   	push   %rbp
ffffffff80226ce5:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226ce8:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80226cec:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226cf0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80226cf4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80226cf8:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Check if the position is within the range of this page table */
    if((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0)
ffffffff80226cfc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226d00:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226d04:	89 c2                	mov    %eax,%edx
ffffffff80226d06:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226d0a:	89 d1                	mov    %edx,%ecx
ffffffff80226d0c:	48 d3 e8             	shr    %cl,%rax
ffffffff80226d0f:	48 85 c0             	test   %rax,%rax
ffffffff80226d12:	74 0c                	je     ffffffff80226d20 <__RME_Pgt_Lookup+0x40>
        return RME_ERR_HAL_FAIL;
ffffffff80226d14:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226d1b:	e9 d8 00 00 00       	jmp    ffffffff80226df8 <__RME_Pgt_Lookup+0x118>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226d20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226d24:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226d28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Get the position requested - atomic read */
    Temp=Table[Pos];
ffffffff80226d2c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226d30:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226d37:	00 
ffffffff80226d38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226d3c:	48 01 d0             	add    %rdx,%rax
ffffffff80226d3f:	48 8b 00             	mov    (%rax),%rax
ffffffff80226d42:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Start lookup - is this a terminal page, or? */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff80226d46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226d4a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226d4e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226d52:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226d56:	75 18                	jne    ffffffff80226d70 <__RME_Pgt_Lookup+0x90>
    {
        if((Temp&RME_X64_MMU_P)==0)
ffffffff80226d58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226d5c:	83 e0 01             	and    $0x1,%eax
ffffffff80226d5f:	48 85 c0             	test   %rax,%rax
ffffffff80226d62:	75 2f                	jne    ffffffff80226d93 <__RME_Pgt_Lookup+0xb3>
            return RME_ERR_HAL_FAIL;
ffffffff80226d64:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226d6b:	e9 88 00 00 00       	jmp    ffffffff80226df8 <__RME_Pgt_Lookup+0x118>
    }
    else
    {
        if(((Temp&RME_X64_MMU_P)==0)||((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff80226d70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226d74:	83 e0 01             	and    $0x1,%eax
ffffffff80226d77:	48 85 c0             	test   %rax,%rax
ffffffff80226d7a:	74 0e                	je     ffffffff80226d8a <__RME_Pgt_Lookup+0xaa>
ffffffff80226d7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226d80:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226d85:	48 85 c0             	test   %rax,%rax
ffffffff80226d88:	75 09                	jne    ffffffff80226d93 <__RME_Pgt_Lookup+0xb3>
            return RME_ERR_HAL_FAIL;
ffffffff80226d8a:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226d91:	eb 65                	jmp    ffffffff80226df8 <__RME_Pgt_Lookup+0x118>
    }

    /* This is a page. Return the physical address and flags */
    if(Paddr!=0)
ffffffff80226d93:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80226d98:	74 18                	je     ffffffff80226db2 <__RME_Pgt_Lookup+0xd2>
        *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff80226d9a:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226da1:	ff 0f 00 
ffffffff80226da4:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80226da8:	48 89 c2             	mov    %rax,%rdx
ffffffff80226dab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226daf:	48 89 10             	mov    %rdx,(%rax)

    if(Flags!=0)
ffffffff80226db2:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80226db7:	74 3a                	je     ffffffff80226df3 <__RME_Pgt_Lookup+0x113>
        *Flags=RME_X64_PGFLG_NAT2RME(Temp);
ffffffff80226db9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226dbd:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff80226dc1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226dc8:	00 
ffffffff80226dc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226dcd:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80226dd1:	83 e0 06             	and    $0x6,%eax
ffffffff80226dd4:	48 09 c2             	or     %rax,%rdx
ffffffff80226dd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226ddb:	48 d1 e8             	shr    $1,%rax
ffffffff80226dde:	83 e0 01             	and    $0x1,%eax
ffffffff80226de1:	48 09 d0             	or     %rdx,%rax
ffffffff80226de4:	48 8b 14 c5 e0 8b 22 	mov    -0x7fdd7420(,%rax,8),%rdx
ffffffff80226deb:	80 
ffffffff80226dec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226df0:	48 89 10             	mov    %rdx,(%rax)

    return 0;
ffffffff80226df3:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226df8:	c9                   	leave
ffffffff80226df9:	c3                   	ret

ffffffff80226dfa <__RME_Pgt_Walk>:
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Walk(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Vaddr, rme_ptr_t* Pgt,
                           rme_ptr_t* Map_Vaddr, rme_ptr_t* Paddr, rme_ptr_t* Size_Order, rme_ptr_t* Num_Order, rme_ptr_t* Flags)
{
ffffffff80226dfa:	f3 0f 1e fa          	endbr64
ffffffff80226dfe:	55                   	push   %rbp
ffffffff80226dff:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226e02:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80226e06:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80226e0a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80226e0e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80226e12:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80226e16:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80226e1a:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Flags_Accum;
    /* No execute bit - this bit is ORed */
    rme_ptr_t No_Execute;

    /* Check if this is the top-level page table */
    if(((Pgt_Op->Base)&RME_PGT_TOP)==0)
ffffffff80226e1e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226e22:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226e26:	83 e0 01             	and    $0x1,%eax
ffffffff80226e29:	48 85 c0             	test   %rax,%rax
ffffffff80226e2c:	75 0c                	jne    ffffffff80226e3a <__RME_Pgt_Walk+0x40>
        return RME_ERR_HAL_FAIL;
ffffffff80226e2e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226e35:	e9 c8 01 00 00       	jmp    ffffffff80227002 <__RME_Pgt_Walk+0x208>

    /* Are we attempting a kernel or non-canonical lookup? If yes, stop immediately */
    if(Vaddr>=0x7FFFFFFFFFFFULL)
ffffffff80226e3a:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffe,%rax
ffffffff80226e41:	7f 00 00 
ffffffff80226e44:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff80226e48:	73 0c                	jae    ffffffff80226e56 <__RME_Pgt_Walk+0x5c>
        return RME_ERR_HAL_FAIL;
ffffffff80226e4a:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226e51:	e9 ac 01 00 00       	jmp    ffffffff80227002 <__RME_Pgt_Walk+0x208>

    /* Get the table and start lookup */
    Table=RME_CAP_GETOBJ(Pgt_Op, rme_ptr_t*);
ffffffff80226e56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226e5a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226e5e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Do lookup recursively */
    Size_Cnt=RME_PGT_SIZE_512G;
ffffffff80226e62:	48 c7 45 f0 27 00 00 	movq   $0x27,-0x10(%rbp)
ffffffff80226e69:	00 
    Flags_Accum=0xFFF;
ffffffff80226e6a:	48 c7 45 e8 ff 0f 00 	movq   $0xfff,-0x18(%rbp)
ffffffff80226e71:	00 
    No_Execute=0;
ffffffff80226e72:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80226e79:	00 
    while(1)
    {
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff80226e7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226e7e:	89 c2                	mov    %eax,%edx
ffffffff80226e80:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226e84:	89 d1                	mov    %edx,%ecx
ffffffff80226e86:	48 d3 e8             	shr    %cl,%rax
ffffffff80226e89:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80226e8e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        /* Atomic read */
        Temp=Table[Pos];
ffffffff80226e92:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226e96:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226e9d:	00 
ffffffff80226e9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226ea2:	48 01 d0             	add    %rdx,%rax
ffffffff80226ea5:	48 8b 00             	mov    (%rax),%rax
ffffffff80226ea8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Temp&RME_X64_MMU_P)==0)
ffffffff80226eac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226eb0:	83 e0 01             	and    $0x1,%eax
ffffffff80226eb3:	48 85 c0             	test   %rax,%rax
ffffffff80226eb6:	75 0c                	jne    ffffffff80226ec4 <__RME_Pgt_Walk+0xca>
            return RME_ERR_HAL_FAIL;
ffffffff80226eb8:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226ebf:	e9 3e 01 00 00       	jmp    ffffffff80227002 <__RME_Pgt_Walk+0x208>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff80226ec4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226ec8:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226ecd:	48 85 c0             	test   %rax,%rax
ffffffff80226ed0:	75 0b                	jne    ffffffff80226edd <__RME_Pgt_Walk+0xe3>
ffffffff80226ed2:	48 83 7d f0 0c       	cmpq   $0xc,-0x10(%rbp)
ffffffff80226ed7:	0f 85 dc 00 00 00    	jne    ffffffff80226fb9 <__RME_Pgt_Walk+0x1bf>
        {
            /* This is a page - we found it */
            if(Pgt!=0)
ffffffff80226edd:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff80226ee2:	74 0b                	je     ffffffff80226eef <__RME_Pgt_Walk+0xf5>
                *Pgt=(rme_ptr_t)Table;
ffffffff80226ee4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80226ee8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80226eec:	48 89 10             	mov    %rdx,(%rax)
            if(Map_Vaddr!=0)
ffffffff80226eef:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80226ef4:	74 21                	je     ffffffff80226f17 <__RME_Pgt_Walk+0x11d>
                *Map_Vaddr=RME_ROUND_DOWN(Vaddr,Size_Cnt);
ffffffff80226ef6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226efa:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80226f01:	89 c1                	mov    %eax,%ecx
ffffffff80226f03:	48 d3 e2             	shl    %cl,%rdx
ffffffff80226f06:	48 89 d0             	mov    %rdx,%rax
ffffffff80226f09:	48 23 45 c0          	and    -0x40(%rbp),%rax
ffffffff80226f0d:	48 89 c2             	mov    %rax,%rdx
ffffffff80226f10:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80226f14:	48 89 10             	mov    %rdx,(%rax)
            if(Paddr!=0)
ffffffff80226f17:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
ffffffff80226f1c:	74 18                	je     ffffffff80226f36 <__RME_Pgt_Walk+0x13c>
                *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff80226f1e:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226f25:	ff 0f 00 
ffffffff80226f28:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80226f2c:	48 89 c2             	mov    %rax,%rdx
ffffffff80226f2f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80226f33:	48 89 10             	mov    %rdx,(%rax)
            if(Size_Order!=0)
ffffffff80226f36:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
ffffffff80226f3b:	74 0b                	je     ffffffff80226f48 <__RME_Pgt_Walk+0x14e>
                *Size_Order=Size_Cnt;
ffffffff80226f3d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80226f41:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80226f45:	48 89 10             	mov    %rdx,(%rax)
            if(Num_Order!=0)
ffffffff80226f48:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff80226f4d:	74 0b                	je     ffffffff80226f5a <__RME_Pgt_Walk+0x160>
                *Num_Order=RME_PGT_NUM_512;
ffffffff80226f4f:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80226f53:	48 c7 00 09 00 00 00 	movq   $0x9,(%rax)
            if(Flags!=0)
ffffffff80226f5a:	48 83 7d 18 00       	cmpq   $0x0,0x18(%rbp)
ffffffff80226f5f:	0f 84 97 00 00 00    	je     ffffffff80226ffc <__RME_Pgt_Walk+0x202>
                *Flags=RME_X64_PGFLG_NAT2RME(No_Execute|(Temp&Flags_Accum));
ffffffff80226f65:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226f69:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80226f6d:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff80226f71:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff80226f75:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226f7c:	00 
ffffffff80226f7d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226f81:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80226f85:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff80226f89:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80226f8d:	83 e0 06             	and    $0x6,%eax
ffffffff80226f90:	48 09 c2             	or     %rax,%rdx
ffffffff80226f93:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226f97:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80226f9b:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff80226f9f:	48 d1 e8             	shr    $1,%rax
ffffffff80226fa2:	83 e0 01             	and    $0x1,%eax
ffffffff80226fa5:	48 09 d0             	or     %rdx,%rax
ffffffff80226fa8:	48 8b 14 c5 e0 8b 22 	mov    -0x7fdd7420(,%rax,8),%rdx
ffffffff80226faf:	80 
ffffffff80226fb0:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80226fb4:	48 89 10             	mov    %rdx,(%rax)

            break;
ffffffff80226fb7:	eb 43                	jmp    ffffffff80226ffc <__RME_Pgt_Walk+0x202>
        }
        else
        {
            /* This is a directory, we goto that directory to continue walking */
            Flags_Accum&=Temp;
ffffffff80226fb9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226fbd:	48 21 45 e8          	and    %rax,-0x18(%rbp)
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff80226fc1:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
ffffffff80226fc8:	00 00 80 
ffffffff80226fcb:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80226fcf:	48 09 45 e0          	or     %rax,-0x20(%rbp)
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff80226fd3:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226fda:	ff 0f 00 
ffffffff80226fdd:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80226fe1:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80226fe8:	80 ff ff 
ffffffff80226feb:	48 01 d0             	add    %rdx,%rax
ffffffff80226fee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        }

        /* The size order always decreases by 512 */
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff80226ff2:	48 83 6d f0 09       	subq   $0x9,-0x10(%rbp)
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff80226ff7:	e9 7e fe ff ff       	jmp    ffffffff80226e7a <__RME_Pgt_Walk+0x80>
            break;
ffffffff80226ffc:	90                   	nop
    }

    return 0;
ffffffff80226ffd:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80227002:	c9                   	leave
ffffffff80227003:	c3                   	ret

ffffffff80227004 <__RME_Svc_Param_Get>:
/* End Function:__RME_X64_Pgt_Set*/

/*Function:__RME_Svc_Param_Get*/

void __RME_Svc_Param_Get(struct RME_Reg_Struct* Reg,rme_ptr_t* Svc,rme_ptr_t* Cid,rme_ptr_t* Param)
{
ffffffff80227004:	f3 0f 1e fa          	endbr64
ffffffff80227008:	55                   	push   %rbp
ffffffff80227009:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022700c:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80227010:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80227014:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80227018:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8022701c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)

}
ffffffff80227020:	90                   	nop
ffffffff80227021:	c9                   	leave
ffffffff80227022:	c3                   	ret

ffffffff80227023 <__RME_Svc_Retval_Set>:
/*End Function:__RME_Svc_Param_Get*/

/*Function:__RME_Svc_Retval_Set*/

void __RME_Svc_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff80227023:	f3 0f 1e fa          	endbr64
ffffffff80227027:	55                   	push   %rbp
ffffffff80227028:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022702b:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022702f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80227033:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

}
ffffffff80227037:	90                   	nop
ffffffff80227038:	c9                   	leave
ffffffff80227039:	c3                   	ret

ffffffff8022703a <__RME_Inv_Retval_Set>:

/*End Function:__RME_Svc_Retval_Set*/

void __RME_Inv_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff8022703a:	f3 0f 1e fa          	endbr64
ffffffff8022703e:	55                   	push   %rbp
ffffffff8022703f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80227042:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80227046:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022704a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

}
ffffffff8022704e:	90                   	nop
ffffffff8022704f:	c9                   	leave
ffffffff80227050:	c3                   	ret

ffffffff80227051 <__RME_List_Crt>:

void __RME_List_Crt(volatile struct RME_List* Head)
{
ffffffff80227051:	f3 0f 1e fa          	endbr64
ffffffff80227055:	55                   	push   %rbp
ffffffff80227056:	48 89 e5             	mov    %rsp,%rbp
ffffffff80227059:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8022705d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    Head->Next=Head;
ffffffff80227061:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227065:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80227069:	48 89 10             	mov    %rdx,(%rax)
    Head->Prev=Head;
ffffffff8022706c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227070:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80227074:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff80227078:	90                   	nop
ffffffff80227079:	c9                   	leave
ffffffff8022707a:	c3                   	ret

ffffffff8022707b <__RME_List_Ins>:

void __RME_List_Ins(volatile struct RME_List* New,volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
ffffffff8022707b:	f3 0f 1e fa          	endbr64
ffffffff8022707f:	55                   	push   %rbp
ffffffff80227080:	48 89 e5             	mov    %rsp,%rbp
ffffffff80227083:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80227087:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022708b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8022708f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    New->Prev=Prev;
ffffffff80227093:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227097:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8022709b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=New;
ffffffff8022709f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802270a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802270a7:	48 89 10             	mov    %rdx,(%rax)
    New->Next=Next;
ffffffff802270aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802270ae:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff802270b2:	48 89 10             	mov    %rdx,(%rax)
    Next->Prev=New;
ffffffff802270b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802270b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802270bd:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff802270c1:	90                   	nop
ffffffff802270c2:	c9                   	leave
ffffffff802270c3:	c3                   	ret

ffffffff802270c4 <__RME_List_Del>:

void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
ffffffff802270c4:	f3 0f 1e fa          	endbr64
ffffffff802270c8:	55                   	push   %rbp
ffffffff802270c9:	48 89 e5             	mov    %rsp,%rbp
ffffffff802270cc:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802270d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802270d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Prev->Next = Next;
ffffffff802270d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802270dc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802270e0:	48 89 10             	mov    %rdx,(%rax)
    Next->Prev = Prev;
ffffffff802270e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802270e7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802270eb:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff802270ef:	90                   	nop
ffffffff802270f0:	c9                   	leave
ffffffff802270f1:	c3                   	ret
